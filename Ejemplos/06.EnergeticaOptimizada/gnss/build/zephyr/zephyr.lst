
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	f0 0a 01 20 65 cc 00 00 97 7e 01 00 39 cc 00 00     ... e....~..9...
    8010:	39 cc 00 00 39 cc 00 00 39 cc 00 00 39 cc 00 00     9...9...9...9...
	...
    802c:	81 c5 00 00 39 cc 00 00 00 00 00 00 ed c4 00 00     ....9...........
    803c:	39 cc 00 00                                         9...

00008040 <_irq_vector_table>:
    8040:	25 c6 00 00 25 c6 00 00 25 c6 00 00 25 c6 00 00     %...%...%...%...
    8050:	25 c6 00 00 25 c6 00 00 25 c6 00 00 25 c6 00 00     %...%...%...%...
    8060:	25 c6 00 00 25 c6 00 00 25 c6 00 00 25 c6 00 00     %...%...%...%...
    8070:	25 c6 00 00 25 c6 00 00 25 c6 00 00 25 c6 00 00     %...%...%...%...
    8080:	25 c6 00 00 25 c6 00 00 25 c6 00 00 25 c6 00 00     %...%...%...%...
    8090:	25 c6 00 00 25 c6 00 00 25 c6 00 00 25 c6 00 00     %...%...%...%...
    80a0:	25 c6 00 00 25 c6 00 00 25 c6 00 00 25 c6 00 00     %...%...%...%...
    80b0:	25 c6 00 00 25 c6 00 00 25 c6 00 00 25 c6 00 00     %...%...%...%...
    80c0:	25 c6 00 00 25 c6 00 00 25 c6 00 00 25 c6 00 00     %...%...%...%...
    80d0:	25 c6 00 00 25 c6 00 00 25 c6 00 00 25 c6 00 00     %...%...%...%...
    80e0:	25 c6 00 00 25 c6 00 00 25 c6 00 00 25 c6 00 00     %...%...%...%...
    80f0:	25 c6 00 00 25 c6 00 00 25 c6 00 00 25 c6 00 00     %...%...%...%...
    8100:	25 c6 00 00 25 c6 00 00 25 c6 00 00 25 c6 00 00     %...%...%...%...
    8110:	25 c6 00 00 25 c6 00 00 25 c6 00 00 25 c6 00 00     %...%...%...%...
    8120:	25 c6 00 00 25 c6 00 00 25 c6 00 00 25 c6 00 00     %...%...%...%...
    8130:	25 c6 00 00 25 c6 00 00 25 c6 00 00 25 c6 00 00     %...%...%...%...
    8140:	25 c6 00 00                                         %...

Disassembly of section text:

00008148 <__aeabi_drsub>:
    8148:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    814c:	e002      	b.n	8154 <__adddf3>
    814e:	bf00      	nop

00008150 <__aeabi_dsub>:
    8150:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008154 <__adddf3>:
    8154:	b530      	push	{r4, r5, lr}
    8156:	ea4f 0441 	mov.w	r4, r1, lsl #1
    815a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    815e:	ea94 0f05 	teq	r4, r5
    8162:	bf08      	it	eq
    8164:	ea90 0f02 	teqeq	r0, r2
    8168:	bf1f      	itttt	ne
    816a:	ea54 0c00 	orrsne.w	ip, r4, r0
    816e:	ea55 0c02 	orrsne.w	ip, r5, r2
    8172:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8176:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    817a:	f000 80e2 	beq.w	8342 <__adddf3+0x1ee>
    817e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8182:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8186:	bfb8      	it	lt
    8188:	426d      	neglt	r5, r5
    818a:	dd0c      	ble.n	81a6 <__adddf3+0x52>
    818c:	442c      	add	r4, r5
    818e:	ea80 0202 	eor.w	r2, r0, r2
    8192:	ea81 0303 	eor.w	r3, r1, r3
    8196:	ea82 0000 	eor.w	r0, r2, r0
    819a:	ea83 0101 	eor.w	r1, r3, r1
    819e:	ea80 0202 	eor.w	r2, r0, r2
    81a2:	ea81 0303 	eor.w	r3, r1, r3
    81a6:	2d36      	cmp	r5, #54	; 0x36
    81a8:	bf88      	it	hi
    81aa:	bd30      	pophi	{r4, r5, pc}
    81ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    81b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    81b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    81b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    81bc:	d002      	beq.n	81c4 <__adddf3+0x70>
    81be:	4240      	negs	r0, r0
    81c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    81c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    81c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    81cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    81d0:	d002      	beq.n	81d8 <__adddf3+0x84>
    81d2:	4252      	negs	r2, r2
    81d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    81d8:	ea94 0f05 	teq	r4, r5
    81dc:	f000 80a7 	beq.w	832e <__adddf3+0x1da>
    81e0:	f1a4 0401 	sub.w	r4, r4, #1
    81e4:	f1d5 0e20 	rsbs	lr, r5, #32
    81e8:	db0d      	blt.n	8206 <__adddf3+0xb2>
    81ea:	fa02 fc0e 	lsl.w	ip, r2, lr
    81ee:	fa22 f205 	lsr.w	r2, r2, r5
    81f2:	1880      	adds	r0, r0, r2
    81f4:	f141 0100 	adc.w	r1, r1, #0
    81f8:	fa03 f20e 	lsl.w	r2, r3, lr
    81fc:	1880      	adds	r0, r0, r2
    81fe:	fa43 f305 	asr.w	r3, r3, r5
    8202:	4159      	adcs	r1, r3
    8204:	e00e      	b.n	8224 <__adddf3+0xd0>
    8206:	f1a5 0520 	sub.w	r5, r5, #32
    820a:	f10e 0e20 	add.w	lr, lr, #32
    820e:	2a01      	cmp	r2, #1
    8210:	fa03 fc0e 	lsl.w	ip, r3, lr
    8214:	bf28      	it	cs
    8216:	f04c 0c02 	orrcs.w	ip, ip, #2
    821a:	fa43 f305 	asr.w	r3, r3, r5
    821e:	18c0      	adds	r0, r0, r3
    8220:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8224:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8228:	d507      	bpl.n	823a <__adddf3+0xe6>
    822a:	f04f 0e00 	mov.w	lr, #0
    822e:	f1dc 0c00 	rsbs	ip, ip, #0
    8232:	eb7e 0000 	sbcs.w	r0, lr, r0
    8236:	eb6e 0101 	sbc.w	r1, lr, r1
    823a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    823e:	d31b      	bcc.n	8278 <__adddf3+0x124>
    8240:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    8244:	d30c      	bcc.n	8260 <__adddf3+0x10c>
    8246:	0849      	lsrs	r1, r1, #1
    8248:	ea5f 0030 	movs.w	r0, r0, rrx
    824c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8250:	f104 0401 	add.w	r4, r4, #1
    8254:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8258:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    825c:	f080 809a 	bcs.w	8394 <__adddf3+0x240>
    8260:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8264:	bf08      	it	eq
    8266:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    826a:	f150 0000 	adcs.w	r0, r0, #0
    826e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8272:	ea41 0105 	orr.w	r1, r1, r5
    8276:	bd30      	pop	{r4, r5, pc}
    8278:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    827c:	4140      	adcs	r0, r0
    827e:	eb41 0101 	adc.w	r1, r1, r1
    8282:	3c01      	subs	r4, #1
    8284:	bf28      	it	cs
    8286:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    828a:	d2e9      	bcs.n	8260 <__adddf3+0x10c>
    828c:	f091 0f00 	teq	r1, #0
    8290:	bf04      	itt	eq
    8292:	4601      	moveq	r1, r0
    8294:	2000      	moveq	r0, #0
    8296:	fab1 f381 	clz	r3, r1
    829a:	bf08      	it	eq
    829c:	3320      	addeq	r3, #32
    829e:	f1a3 030b 	sub.w	r3, r3, #11
    82a2:	f1b3 0220 	subs.w	r2, r3, #32
    82a6:	da0c      	bge.n	82c2 <__adddf3+0x16e>
    82a8:	320c      	adds	r2, #12
    82aa:	dd08      	ble.n	82be <__adddf3+0x16a>
    82ac:	f102 0c14 	add.w	ip, r2, #20
    82b0:	f1c2 020c 	rsb	r2, r2, #12
    82b4:	fa01 f00c 	lsl.w	r0, r1, ip
    82b8:	fa21 f102 	lsr.w	r1, r1, r2
    82bc:	e00c      	b.n	82d8 <__adddf3+0x184>
    82be:	f102 0214 	add.w	r2, r2, #20
    82c2:	bfd8      	it	le
    82c4:	f1c2 0c20 	rsble	ip, r2, #32
    82c8:	fa01 f102 	lsl.w	r1, r1, r2
    82cc:	fa20 fc0c 	lsr.w	ip, r0, ip
    82d0:	bfdc      	itt	le
    82d2:	ea41 010c 	orrle.w	r1, r1, ip
    82d6:	4090      	lslle	r0, r2
    82d8:	1ae4      	subs	r4, r4, r3
    82da:	bfa2      	ittt	ge
    82dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    82e0:	4329      	orrge	r1, r5
    82e2:	bd30      	popge	{r4, r5, pc}
    82e4:	ea6f 0404 	mvn.w	r4, r4
    82e8:	3c1f      	subs	r4, #31
    82ea:	da1c      	bge.n	8326 <__adddf3+0x1d2>
    82ec:	340c      	adds	r4, #12
    82ee:	dc0e      	bgt.n	830e <__adddf3+0x1ba>
    82f0:	f104 0414 	add.w	r4, r4, #20
    82f4:	f1c4 0220 	rsb	r2, r4, #32
    82f8:	fa20 f004 	lsr.w	r0, r0, r4
    82fc:	fa01 f302 	lsl.w	r3, r1, r2
    8300:	ea40 0003 	orr.w	r0, r0, r3
    8304:	fa21 f304 	lsr.w	r3, r1, r4
    8308:	ea45 0103 	orr.w	r1, r5, r3
    830c:	bd30      	pop	{r4, r5, pc}
    830e:	f1c4 040c 	rsb	r4, r4, #12
    8312:	f1c4 0220 	rsb	r2, r4, #32
    8316:	fa20 f002 	lsr.w	r0, r0, r2
    831a:	fa01 f304 	lsl.w	r3, r1, r4
    831e:	ea40 0003 	orr.w	r0, r0, r3
    8322:	4629      	mov	r1, r5
    8324:	bd30      	pop	{r4, r5, pc}
    8326:	fa21 f004 	lsr.w	r0, r1, r4
    832a:	4629      	mov	r1, r5
    832c:	bd30      	pop	{r4, r5, pc}
    832e:	f094 0f00 	teq	r4, #0
    8332:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8336:	bf06      	itte	eq
    8338:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    833c:	3401      	addeq	r4, #1
    833e:	3d01      	subne	r5, #1
    8340:	e74e      	b.n	81e0 <__adddf3+0x8c>
    8342:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8346:	bf18      	it	ne
    8348:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    834c:	d029      	beq.n	83a2 <__adddf3+0x24e>
    834e:	ea94 0f05 	teq	r4, r5
    8352:	bf08      	it	eq
    8354:	ea90 0f02 	teqeq	r0, r2
    8358:	d005      	beq.n	8366 <__adddf3+0x212>
    835a:	ea54 0c00 	orrs.w	ip, r4, r0
    835e:	bf04      	itt	eq
    8360:	4619      	moveq	r1, r3
    8362:	4610      	moveq	r0, r2
    8364:	bd30      	pop	{r4, r5, pc}
    8366:	ea91 0f03 	teq	r1, r3
    836a:	bf1e      	ittt	ne
    836c:	2100      	movne	r1, #0
    836e:	2000      	movne	r0, #0
    8370:	bd30      	popne	{r4, r5, pc}
    8372:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8376:	d105      	bne.n	8384 <__adddf3+0x230>
    8378:	0040      	lsls	r0, r0, #1
    837a:	4149      	adcs	r1, r1
    837c:	bf28      	it	cs
    837e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8382:	bd30      	pop	{r4, r5, pc}
    8384:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8388:	bf3c      	itt	cc
    838a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    838e:	bd30      	popcc	{r4, r5, pc}
    8390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8394:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    8398:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    839c:	f04f 0000 	mov.w	r0, #0
    83a0:	bd30      	pop	{r4, r5, pc}
    83a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    83a6:	bf1a      	itte	ne
    83a8:	4619      	movne	r1, r3
    83aa:	4610      	movne	r0, r2
    83ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    83b0:	bf1c      	itt	ne
    83b2:	460b      	movne	r3, r1
    83b4:	4602      	movne	r2, r0
    83b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    83ba:	bf06      	itte	eq
    83bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    83c0:	ea91 0f03 	teqeq	r1, r3
    83c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    83c8:	bd30      	pop	{r4, r5, pc}
    83ca:	bf00      	nop

000083cc <__aeabi_ui2d>:
    83cc:	f090 0f00 	teq	r0, #0
    83d0:	bf04      	itt	eq
    83d2:	2100      	moveq	r1, #0
    83d4:	4770      	bxeq	lr
    83d6:	b530      	push	{r4, r5, lr}
    83d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
    83e0:	f04f 0500 	mov.w	r5, #0
    83e4:	f04f 0100 	mov.w	r1, #0
    83e8:	e750      	b.n	828c <__adddf3+0x138>
    83ea:	bf00      	nop

000083ec <__aeabi_i2d>:
    83ec:	f090 0f00 	teq	r0, #0
    83f0:	bf04      	itt	eq
    83f2:	2100      	moveq	r1, #0
    83f4:	4770      	bxeq	lr
    83f6:	b530      	push	{r4, r5, lr}
    83f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8400:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8404:	bf48      	it	mi
    8406:	4240      	negmi	r0, r0
    8408:	f04f 0100 	mov.w	r1, #0
    840c:	e73e      	b.n	828c <__adddf3+0x138>
    840e:	bf00      	nop

00008410 <__aeabi_f2d>:
    8410:	0042      	lsls	r2, r0, #1
    8412:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8416:	ea4f 0131 	mov.w	r1, r1, rrx
    841a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    841e:	bf1f      	itttt	ne
    8420:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8424:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8428:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    842c:	4770      	bxne	lr
    842e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8432:	bf08      	it	eq
    8434:	4770      	bxeq	lr
    8436:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    843a:	bf04      	itt	eq
    843c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8440:	4770      	bxeq	lr
    8442:	b530      	push	{r4, r5, lr}
    8444:	f44f 7460 	mov.w	r4, #896	; 0x380
    8448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    844c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8450:	e71c      	b.n	828c <__adddf3+0x138>
    8452:	bf00      	nop

00008454 <__aeabi_ul2d>:
    8454:	ea50 0201 	orrs.w	r2, r0, r1
    8458:	bf08      	it	eq
    845a:	4770      	bxeq	lr
    845c:	b530      	push	{r4, r5, lr}
    845e:	f04f 0500 	mov.w	r5, #0
    8462:	e00a      	b.n	847a <__aeabi_l2d+0x16>

00008464 <__aeabi_l2d>:
    8464:	ea50 0201 	orrs.w	r2, r0, r1
    8468:	bf08      	it	eq
    846a:	4770      	bxeq	lr
    846c:	b530      	push	{r4, r5, lr}
    846e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    8472:	d502      	bpl.n	847a <__aeabi_l2d+0x16>
    8474:	4240      	negs	r0, r0
    8476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    847a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    847e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8486:	f43f aed8 	beq.w	823a <__adddf3+0xe6>
    848a:	f04f 0203 	mov.w	r2, #3
    848e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    8492:	bf18      	it	ne
    8494:	3203      	addne	r2, #3
    8496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    849a:	bf18      	it	ne
    849c:	3203      	addne	r2, #3
    849e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    84a2:	f1c2 0320 	rsb	r3, r2, #32
    84a6:	fa00 fc03 	lsl.w	ip, r0, r3
    84aa:	fa20 f002 	lsr.w	r0, r0, r2
    84ae:	fa01 fe03 	lsl.w	lr, r1, r3
    84b2:	ea40 000e 	orr.w	r0, r0, lr
    84b6:	fa21 f102 	lsr.w	r1, r1, r2
    84ba:	4414      	add	r4, r2
    84bc:	e6bd      	b.n	823a <__adddf3+0xe6>
    84be:	bf00      	nop

000084c0 <__aeabi_dmul>:
    84c0:	b570      	push	{r4, r5, r6, lr}
    84c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    84c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    84ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    84ce:	bf1d      	ittte	ne
    84d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    84d4:	ea94 0f0c 	teqne	r4, ip
    84d8:	ea95 0f0c 	teqne	r5, ip
    84dc:	f000 f8de 	bleq	869c <__aeabi_dmul+0x1dc>
    84e0:	442c      	add	r4, r5
    84e2:	ea81 0603 	eor.w	r6, r1, r3
    84e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    84ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    84ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    84f2:	bf18      	it	ne
    84f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    84f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    84fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8500:	d038      	beq.n	8574 <__aeabi_dmul+0xb4>
    8502:	fba0 ce02 	umull	ip, lr, r0, r2
    8506:	f04f 0500 	mov.w	r5, #0
    850a:	fbe1 e502 	umlal	lr, r5, r1, r2
    850e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8512:	fbe0 e503 	umlal	lr, r5, r0, r3
    8516:	f04f 0600 	mov.w	r6, #0
    851a:	fbe1 5603 	umlal	r5, r6, r1, r3
    851e:	f09c 0f00 	teq	ip, #0
    8522:	bf18      	it	ne
    8524:	f04e 0e01 	orrne.w	lr, lr, #1
    8528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    852c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8534:	d204      	bcs.n	8540 <__aeabi_dmul+0x80>
    8536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    853a:	416d      	adcs	r5, r5
    853c:	eb46 0606 	adc.w	r6, r6, r6
    8540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    8544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    854c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    8554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8558:	bf88      	it	hi
    855a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    855e:	d81e      	bhi.n	859e <__aeabi_dmul+0xde>
    8560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    8564:	bf08      	it	eq
    8566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    856a:	f150 0000 	adcs.w	r0, r0, #0
    856e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8572:	bd70      	pop	{r4, r5, r6, pc}
    8574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8578:	ea46 0101 	orr.w	r1, r6, r1
    857c:	ea40 0002 	orr.w	r0, r0, r2
    8580:	ea81 0103 	eor.w	r1, r1, r3
    8584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8588:	bfc2      	ittt	gt
    858a:	ebd4 050c 	rsbsgt	r5, r4, ip
    858e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    8592:	bd70      	popgt	{r4, r5, r6, pc}
    8594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8598:	f04f 0e00 	mov.w	lr, #0
    859c:	3c01      	subs	r4, #1
    859e:	f300 80ab 	bgt.w	86f8 <__aeabi_dmul+0x238>
    85a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    85a6:	bfde      	ittt	le
    85a8:	2000      	movle	r0, #0
    85aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    85ae:	bd70      	pople	{r4, r5, r6, pc}
    85b0:	f1c4 0400 	rsb	r4, r4, #0
    85b4:	3c20      	subs	r4, #32
    85b6:	da35      	bge.n	8624 <__aeabi_dmul+0x164>
    85b8:	340c      	adds	r4, #12
    85ba:	dc1b      	bgt.n	85f4 <__aeabi_dmul+0x134>
    85bc:	f104 0414 	add.w	r4, r4, #20
    85c0:	f1c4 0520 	rsb	r5, r4, #32
    85c4:	fa00 f305 	lsl.w	r3, r0, r5
    85c8:	fa20 f004 	lsr.w	r0, r0, r4
    85cc:	fa01 f205 	lsl.w	r2, r1, r5
    85d0:	ea40 0002 	orr.w	r0, r0, r2
    85d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    85d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    85e0:	fa21 f604 	lsr.w	r6, r1, r4
    85e4:	eb42 0106 	adc.w	r1, r2, r6
    85e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    85ec:	bf08      	it	eq
    85ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    85f2:	bd70      	pop	{r4, r5, r6, pc}
    85f4:	f1c4 040c 	rsb	r4, r4, #12
    85f8:	f1c4 0520 	rsb	r5, r4, #32
    85fc:	fa00 f304 	lsl.w	r3, r0, r4
    8600:	fa20 f005 	lsr.w	r0, r0, r5
    8604:	fa01 f204 	lsl.w	r2, r1, r4
    8608:	ea40 0002 	orr.w	r0, r0, r2
    860c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8614:	f141 0100 	adc.w	r1, r1, #0
    8618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    861c:	bf08      	it	eq
    861e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8622:	bd70      	pop	{r4, r5, r6, pc}
    8624:	f1c4 0520 	rsb	r5, r4, #32
    8628:	fa00 f205 	lsl.w	r2, r0, r5
    862c:	ea4e 0e02 	orr.w	lr, lr, r2
    8630:	fa20 f304 	lsr.w	r3, r0, r4
    8634:	fa01 f205 	lsl.w	r2, r1, r5
    8638:	ea43 0302 	orr.w	r3, r3, r2
    863c:	fa21 f004 	lsr.w	r0, r1, r4
    8640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8644:	fa21 f204 	lsr.w	r2, r1, r4
    8648:	ea20 0002 	bic.w	r0, r0, r2
    864c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8654:	bf08      	it	eq
    8656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    865a:	bd70      	pop	{r4, r5, r6, pc}
    865c:	f094 0f00 	teq	r4, #0
    8660:	d10f      	bne.n	8682 <__aeabi_dmul+0x1c2>
    8662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    8666:	0040      	lsls	r0, r0, #1
    8668:	eb41 0101 	adc.w	r1, r1, r1
    866c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8670:	bf08      	it	eq
    8672:	3c01      	subeq	r4, #1
    8674:	d0f7      	beq.n	8666 <__aeabi_dmul+0x1a6>
    8676:	ea41 0106 	orr.w	r1, r1, r6
    867a:	f095 0f00 	teq	r5, #0
    867e:	bf18      	it	ne
    8680:	4770      	bxne	lr
    8682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    8686:	0052      	lsls	r2, r2, #1
    8688:	eb43 0303 	adc.w	r3, r3, r3
    868c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    8690:	bf08      	it	eq
    8692:	3d01      	subeq	r5, #1
    8694:	d0f7      	beq.n	8686 <__aeabi_dmul+0x1c6>
    8696:	ea43 0306 	orr.w	r3, r3, r6
    869a:	4770      	bx	lr
    869c:	ea94 0f0c 	teq	r4, ip
    86a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    86a4:	bf18      	it	ne
    86a6:	ea95 0f0c 	teqne	r5, ip
    86aa:	d00c      	beq.n	86c6 <__aeabi_dmul+0x206>
    86ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86b0:	bf18      	it	ne
    86b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86b6:	d1d1      	bne.n	865c <__aeabi_dmul+0x19c>
    86b8:	ea81 0103 	eor.w	r1, r1, r3
    86bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86c0:	f04f 0000 	mov.w	r0, #0
    86c4:	bd70      	pop	{r4, r5, r6, pc}
    86c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86ca:	bf06      	itte	eq
    86cc:	4610      	moveq	r0, r2
    86ce:	4619      	moveq	r1, r3
    86d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86d4:	d019      	beq.n	870a <__aeabi_dmul+0x24a>
    86d6:	ea94 0f0c 	teq	r4, ip
    86da:	d102      	bne.n	86e2 <__aeabi_dmul+0x222>
    86dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    86e0:	d113      	bne.n	870a <__aeabi_dmul+0x24a>
    86e2:	ea95 0f0c 	teq	r5, ip
    86e6:	d105      	bne.n	86f4 <__aeabi_dmul+0x234>
    86e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    86ec:	bf1c      	itt	ne
    86ee:	4610      	movne	r0, r2
    86f0:	4619      	movne	r1, r3
    86f2:	d10a      	bne.n	870a <__aeabi_dmul+0x24a>
    86f4:	ea81 0103 	eor.w	r1, r1, r3
    86f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8704:	f04f 0000 	mov.w	r0, #0
    8708:	bd70      	pop	{r4, r5, r6, pc}
    870a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    870e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8712:	bd70      	pop	{r4, r5, r6, pc}

00008714 <__aeabi_ddiv>:
    8714:	b570      	push	{r4, r5, r6, lr}
    8716:	f04f 0cff 	mov.w	ip, #255	; 0xff
    871a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    871e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8722:	bf1d      	ittte	ne
    8724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8728:	ea94 0f0c 	teqne	r4, ip
    872c:	ea95 0f0c 	teqne	r5, ip
    8730:	f000 f8a7 	bleq	8882 <__aeabi_ddiv+0x16e>
    8734:	eba4 0405 	sub.w	r4, r4, r5
    8738:	ea81 0e03 	eor.w	lr, r1, r3
    873c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8740:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8744:	f000 8088 	beq.w	8858 <__aeabi_ddiv+0x144>
    8748:	ea4f 3303 	mov.w	r3, r3, lsl #12
    874c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    8754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8758:	ea4f 2202 	mov.w	r2, r2, lsl #8
    875c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    8764:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    876c:	429d      	cmp	r5, r3
    876e:	bf08      	it	eq
    8770:	4296      	cmpeq	r6, r2
    8772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    8776:	f504 7440 	add.w	r4, r4, #768	; 0x300
    877a:	d202      	bcs.n	8782 <__aeabi_ddiv+0x6e>
    877c:	085b      	lsrs	r3, r3, #1
    877e:	ea4f 0232 	mov.w	r2, r2, rrx
    8782:	1ab6      	subs	r6, r6, r2
    8784:	eb65 0503 	sbc.w	r5, r5, r3
    8788:	085b      	lsrs	r3, r3, #1
    878a:	ea4f 0232 	mov.w	r2, r2, rrx
    878e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    8792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    8796:	ebb6 0e02 	subs.w	lr, r6, r2
    879a:	eb75 0e03 	sbcs.w	lr, r5, r3
    879e:	bf22      	ittt	cs
    87a0:	1ab6      	subcs	r6, r6, r2
    87a2:	4675      	movcs	r5, lr
    87a4:	ea40 000c 	orrcs.w	r0, r0, ip
    87a8:	085b      	lsrs	r3, r3, #1
    87aa:	ea4f 0232 	mov.w	r2, r2, rrx
    87ae:	ebb6 0e02 	subs.w	lr, r6, r2
    87b2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87b6:	bf22      	ittt	cs
    87b8:	1ab6      	subcs	r6, r6, r2
    87ba:	4675      	movcs	r5, lr
    87bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    87c0:	085b      	lsrs	r3, r3, #1
    87c2:	ea4f 0232 	mov.w	r2, r2, rrx
    87c6:	ebb6 0e02 	subs.w	lr, r6, r2
    87ca:	eb75 0e03 	sbcs.w	lr, r5, r3
    87ce:	bf22      	ittt	cs
    87d0:	1ab6      	subcs	r6, r6, r2
    87d2:	4675      	movcs	r5, lr
    87d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    87d8:	085b      	lsrs	r3, r3, #1
    87da:	ea4f 0232 	mov.w	r2, r2, rrx
    87de:	ebb6 0e02 	subs.w	lr, r6, r2
    87e2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87e6:	bf22      	ittt	cs
    87e8:	1ab6      	subcs	r6, r6, r2
    87ea:	4675      	movcs	r5, lr
    87ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    87f0:	ea55 0e06 	orrs.w	lr, r5, r6
    87f4:	d018      	beq.n	8828 <__aeabi_ddiv+0x114>
    87f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
    87fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    87fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    880a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    880e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8812:	d1c0      	bne.n	8796 <__aeabi_ddiv+0x82>
    8814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8818:	d10b      	bne.n	8832 <__aeabi_ddiv+0x11e>
    881a:	ea41 0100 	orr.w	r1, r1, r0
    881e:	f04f 0000 	mov.w	r0, #0
    8822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8826:	e7b6      	b.n	8796 <__aeabi_ddiv+0x82>
    8828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    882c:	bf04      	itt	eq
    882e:	4301      	orreq	r1, r0
    8830:	2000      	moveq	r0, #0
    8832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8836:	bf88      	it	hi
    8838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    883c:	f63f aeaf 	bhi.w	859e <__aeabi_dmul+0xde>
    8840:	ebb5 0c03 	subs.w	ip, r5, r3
    8844:	bf04      	itt	eq
    8846:	ebb6 0c02 	subseq.w	ip, r6, r2
    884a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    884e:	f150 0000 	adcs.w	r0, r0, #0
    8852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8856:	bd70      	pop	{r4, r5, r6, pc}
    8858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    885c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8864:	bfc2      	ittt	gt
    8866:	ebd4 050c 	rsbsgt	r5, r4, ip
    886a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    886e:	bd70      	popgt	{r4, r5, r6, pc}
    8870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8874:	f04f 0e00 	mov.w	lr, #0
    8878:	3c01      	subs	r4, #1
    887a:	e690      	b.n	859e <__aeabi_dmul+0xde>
    887c:	ea45 0e06 	orr.w	lr, r5, r6
    8880:	e68d      	b.n	859e <__aeabi_dmul+0xde>
    8882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8886:	ea94 0f0c 	teq	r4, ip
    888a:	bf08      	it	eq
    888c:	ea95 0f0c 	teqeq	r5, ip
    8890:	f43f af3b 	beq.w	870a <__aeabi_dmul+0x24a>
    8894:	ea94 0f0c 	teq	r4, ip
    8898:	d10a      	bne.n	88b0 <__aeabi_ddiv+0x19c>
    889a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    889e:	f47f af34 	bne.w	870a <__aeabi_dmul+0x24a>
    88a2:	ea95 0f0c 	teq	r5, ip
    88a6:	f47f af25 	bne.w	86f4 <__aeabi_dmul+0x234>
    88aa:	4610      	mov	r0, r2
    88ac:	4619      	mov	r1, r3
    88ae:	e72c      	b.n	870a <__aeabi_dmul+0x24a>
    88b0:	ea95 0f0c 	teq	r5, ip
    88b4:	d106      	bne.n	88c4 <__aeabi_ddiv+0x1b0>
    88b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88ba:	f43f aefd 	beq.w	86b8 <__aeabi_dmul+0x1f8>
    88be:	4610      	mov	r0, r2
    88c0:	4619      	mov	r1, r3
    88c2:	e722      	b.n	870a <__aeabi_dmul+0x24a>
    88c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    88c8:	bf18      	it	ne
    88ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    88ce:	f47f aec5 	bne.w	865c <__aeabi_dmul+0x19c>
    88d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    88d6:	f47f af0d 	bne.w	86f4 <__aeabi_dmul+0x234>
    88da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    88de:	f47f aeeb 	bne.w	86b8 <__aeabi_dmul+0x1f8>
    88e2:	e712      	b.n	870a <__aeabi_dmul+0x24a>

000088e4 <__aeabi_d2f>:
    88e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    88e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    88ec:	bf24      	itt	cs
    88ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    88f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    88f6:	d90d      	bls.n	8914 <__aeabi_d2f+0x30>
    88f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    88fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    8900:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    8904:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8908:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    890c:	bf08      	it	eq
    890e:	f020 0001 	biceq.w	r0, r0, #1
    8912:	4770      	bx	lr
    8914:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    8918:	d121      	bne.n	895e <__aeabi_d2f+0x7a>
    891a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    891e:	bfbc      	itt	lt
    8920:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    8924:	4770      	bxlt	lr
    8926:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    892a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    892e:	f1c2 0218 	rsb	r2, r2, #24
    8932:	f1c2 0c20 	rsb	ip, r2, #32
    8936:	fa10 f30c 	lsls.w	r3, r0, ip
    893a:	fa20 f002 	lsr.w	r0, r0, r2
    893e:	bf18      	it	ne
    8940:	f040 0001 	orrne.w	r0, r0, #1
    8944:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8948:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    894c:	fa03 fc0c 	lsl.w	ip, r3, ip
    8950:	ea40 000c 	orr.w	r0, r0, ip
    8954:	fa23 f302 	lsr.w	r3, r3, r2
    8958:	ea4f 0343 	mov.w	r3, r3, lsl #1
    895c:	e7cc      	b.n	88f8 <__aeabi_d2f+0x14>
    895e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    8962:	d107      	bne.n	8974 <__aeabi_d2f+0x90>
    8964:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    8968:	bf1e      	ittt	ne
    896a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    896e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    8972:	4770      	bxne	lr
    8974:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    8978:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    897c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8980:	4770      	bx	lr
    8982:	bf00      	nop

00008984 <__aeabi_uldivmod>:
    8984:	b953      	cbnz	r3, 899c <__aeabi_uldivmod+0x18>
    8986:	b94a      	cbnz	r2, 899c <__aeabi_uldivmod+0x18>
    8988:	2900      	cmp	r1, #0
    898a:	bf08      	it	eq
    898c:	2800      	cmpeq	r0, #0
    898e:	bf1c      	itt	ne
    8990:	f04f 31ff 	movne.w	r1, #4294967295
    8994:	f04f 30ff 	movne.w	r0, #4294967295
    8998:	f000 b80c 	b.w	89b4 <__aeabi_idiv0>
    899c:	f1ad 0c08 	sub.w	ip, sp, #8
    89a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    89a4:	f000 f8ce 	bl	8b44 <__udivmoddi4>
    89a8:	f8dd e004 	ldr.w	lr, [sp, #4]
    89ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    89b0:	b004      	add	sp, #16
    89b2:	4770      	bx	lr

000089b4 <__aeabi_idiv0>:
    89b4:	4770      	bx	lr
    89b6:	bf00      	nop

000089b8 <__gedf2>:
    89b8:	f04f 3cff 	mov.w	ip, #4294967295
    89bc:	e006      	b.n	89cc <__cmpdf2+0x4>
    89be:	bf00      	nop

000089c0 <__ledf2>:
    89c0:	f04f 0c01 	mov.w	ip, #1
    89c4:	e002      	b.n	89cc <__cmpdf2+0x4>
    89c6:	bf00      	nop

000089c8 <__cmpdf2>:
    89c8:	f04f 0c01 	mov.w	ip, #1
    89cc:	f84d cd04 	str.w	ip, [sp, #-4]!
    89d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    89d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    89d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    89dc:	bf18      	it	ne
    89de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    89e2:	d01b      	beq.n	8a1c <__cmpdf2+0x54>
    89e4:	b001      	add	sp, #4
    89e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    89ea:	bf0c      	ite	eq
    89ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    89f0:	ea91 0f03 	teqne	r1, r3
    89f4:	bf02      	ittt	eq
    89f6:	ea90 0f02 	teqeq	r0, r2
    89fa:	2000      	moveq	r0, #0
    89fc:	4770      	bxeq	lr
    89fe:	f110 0f00 	cmn.w	r0, #0
    8a02:	ea91 0f03 	teq	r1, r3
    8a06:	bf58      	it	pl
    8a08:	4299      	cmppl	r1, r3
    8a0a:	bf08      	it	eq
    8a0c:	4290      	cmpeq	r0, r2
    8a0e:	bf2c      	ite	cs
    8a10:	17d8      	asrcs	r0, r3, #31
    8a12:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8a16:	f040 0001 	orr.w	r0, r0, #1
    8a1a:	4770      	bx	lr
    8a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a24:	d102      	bne.n	8a2c <__cmpdf2+0x64>
    8a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8a2a:	d107      	bne.n	8a3c <__cmpdf2+0x74>
    8a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a34:	d1d6      	bne.n	89e4 <__cmpdf2+0x1c>
    8a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8a3a:	d0d3      	beq.n	89e4 <__cmpdf2+0x1c>
    8a3c:	f85d 0b04 	ldr.w	r0, [sp], #4
    8a40:	4770      	bx	lr
    8a42:	bf00      	nop

00008a44 <__aeabi_cdrcmple>:
    8a44:	4684      	mov	ip, r0
    8a46:	4610      	mov	r0, r2
    8a48:	4662      	mov	r2, ip
    8a4a:	468c      	mov	ip, r1
    8a4c:	4619      	mov	r1, r3
    8a4e:	4663      	mov	r3, ip
    8a50:	e000      	b.n	8a54 <__aeabi_cdcmpeq>
    8a52:	bf00      	nop

00008a54 <__aeabi_cdcmpeq>:
    8a54:	b501      	push	{r0, lr}
    8a56:	f7ff ffb7 	bl	89c8 <__cmpdf2>
    8a5a:	2800      	cmp	r0, #0
    8a5c:	bf48      	it	mi
    8a5e:	f110 0f00 	cmnmi.w	r0, #0
    8a62:	bd01      	pop	{r0, pc}

00008a64 <__aeabi_dcmpeq>:
    8a64:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a68:	f7ff fff4 	bl	8a54 <__aeabi_cdcmpeq>
    8a6c:	bf0c      	ite	eq
    8a6e:	2001      	moveq	r0, #1
    8a70:	2000      	movne	r0, #0
    8a72:	f85d fb08 	ldr.w	pc, [sp], #8
    8a76:	bf00      	nop

00008a78 <__aeabi_dcmplt>:
    8a78:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a7c:	f7ff ffea 	bl	8a54 <__aeabi_cdcmpeq>
    8a80:	bf34      	ite	cc
    8a82:	2001      	movcc	r0, #1
    8a84:	2000      	movcs	r0, #0
    8a86:	f85d fb08 	ldr.w	pc, [sp], #8
    8a8a:	bf00      	nop

00008a8c <__aeabi_dcmple>:
    8a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a90:	f7ff ffe0 	bl	8a54 <__aeabi_cdcmpeq>
    8a94:	bf94      	ite	ls
    8a96:	2001      	movls	r0, #1
    8a98:	2000      	movhi	r0, #0
    8a9a:	f85d fb08 	ldr.w	pc, [sp], #8
    8a9e:	bf00      	nop

00008aa0 <__aeabi_dcmpge>:
    8aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8aa4:	f7ff ffce 	bl	8a44 <__aeabi_cdrcmple>
    8aa8:	bf94      	ite	ls
    8aaa:	2001      	movls	r0, #1
    8aac:	2000      	movhi	r0, #0
    8aae:	f85d fb08 	ldr.w	pc, [sp], #8
    8ab2:	bf00      	nop

00008ab4 <__aeabi_dcmpgt>:
    8ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ab8:	f7ff ffc4 	bl	8a44 <__aeabi_cdrcmple>
    8abc:	bf34      	ite	cc
    8abe:	2001      	movcc	r0, #1
    8ac0:	2000      	movcs	r0, #0
    8ac2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ac6:	bf00      	nop

00008ac8 <__aeabi_dcmpun>:
    8ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8ad0:	d102      	bne.n	8ad8 <__aeabi_dcmpun+0x10>
    8ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8ad6:	d10a      	bne.n	8aee <__aeabi_dcmpun+0x26>
    8ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8ae0:	d102      	bne.n	8ae8 <__aeabi_dcmpun+0x20>
    8ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8ae6:	d102      	bne.n	8aee <__aeabi_dcmpun+0x26>
    8ae8:	f04f 0000 	mov.w	r0, #0
    8aec:	4770      	bx	lr
    8aee:	f04f 0001 	mov.w	r0, #1
    8af2:	4770      	bx	lr

00008af4 <__aeabi_d2iz>:
    8af4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    8af8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8afc:	d215      	bcs.n	8b2a <__aeabi_d2iz+0x36>
    8afe:	d511      	bpl.n	8b24 <__aeabi_d2iz+0x30>
    8b00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8b04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8b08:	d912      	bls.n	8b30 <__aeabi_d2iz+0x3c>
    8b0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8b0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8b12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8b1a:	fa23 f002 	lsr.w	r0, r3, r2
    8b1e:	bf18      	it	ne
    8b20:	4240      	negne	r0, r0
    8b22:	4770      	bx	lr
    8b24:	f04f 0000 	mov.w	r0, #0
    8b28:	4770      	bx	lr
    8b2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8b2e:	d105      	bne.n	8b3c <__aeabi_d2iz+0x48>
    8b30:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    8b34:	bf08      	it	eq
    8b36:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    8b3a:	4770      	bx	lr
    8b3c:	f04f 0000 	mov.w	r0, #0
    8b40:	4770      	bx	lr
    8b42:	bf00      	nop

00008b44 <__udivmoddi4>:
    8b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8b48:	4686      	mov	lr, r0
    8b4a:	468c      	mov	ip, r1
    8b4c:	4608      	mov	r0, r1
    8b4e:	9e08      	ldr	r6, [sp, #32]
    8b50:	4615      	mov	r5, r2
    8b52:	4674      	mov	r4, lr
    8b54:	4619      	mov	r1, r3
    8b56:	2b00      	cmp	r3, #0
    8b58:	f040 80c1 	bne.w	8cde <__udivmoddi4+0x19a>
    8b5c:	4285      	cmp	r5, r0
    8b5e:	fab2 f282 	clz	r2, r2
    8b62:	d945      	bls.n	8bf0 <__udivmoddi4+0xac>
    8b64:	b14a      	cbz	r2, 8b7a <__udivmoddi4+0x36>
    8b66:	f1c2 0320 	rsb	r3, r2, #32
    8b6a:	fa00 fc02 	lsl.w	ip, r0, r2
    8b6e:	4095      	lsls	r5, r2
    8b70:	4094      	lsls	r4, r2
    8b72:	fa2e f303 	lsr.w	r3, lr, r3
    8b76:	ea43 0c0c 	orr.w	ip, r3, ip
    8b7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8b7e:	b2a8      	uxth	r0, r5
    8b80:	0c23      	lsrs	r3, r4, #16
    8b82:	fbbc f8fe 	udiv	r8, ip, lr
    8b86:	fb0e cc18 	mls	ip, lr, r8, ip
    8b8a:	fb08 f900 	mul.w	r9, r8, r0
    8b8e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    8b92:	4599      	cmp	r9, r3
    8b94:	d928      	bls.n	8be8 <__udivmoddi4+0xa4>
    8b96:	18eb      	adds	r3, r5, r3
    8b98:	f108 37ff 	add.w	r7, r8, #4294967295
    8b9c:	d204      	bcs.n	8ba8 <__udivmoddi4+0x64>
    8b9e:	4599      	cmp	r9, r3
    8ba0:	d902      	bls.n	8ba8 <__udivmoddi4+0x64>
    8ba2:	f1a8 0702 	sub.w	r7, r8, #2
    8ba6:	442b      	add	r3, r5
    8ba8:	eba3 0309 	sub.w	r3, r3, r9
    8bac:	b2a4      	uxth	r4, r4
    8bae:	fbb3 fcfe 	udiv	ip, r3, lr
    8bb2:	fb0e 331c 	mls	r3, lr, ip, r3
    8bb6:	fb0c f000 	mul.w	r0, ip, r0
    8bba:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8bbe:	42a0      	cmp	r0, r4
    8bc0:	d914      	bls.n	8bec <__udivmoddi4+0xa8>
    8bc2:	192c      	adds	r4, r5, r4
    8bc4:	f10c 33ff 	add.w	r3, ip, #4294967295
    8bc8:	d204      	bcs.n	8bd4 <__udivmoddi4+0x90>
    8bca:	42a0      	cmp	r0, r4
    8bcc:	d902      	bls.n	8bd4 <__udivmoddi4+0x90>
    8bce:	f1ac 0302 	sub.w	r3, ip, #2
    8bd2:	442c      	add	r4, r5
    8bd4:	1a24      	subs	r4, r4, r0
    8bd6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    8bda:	b11e      	cbz	r6, 8be4 <__udivmoddi4+0xa0>
    8bdc:	40d4      	lsrs	r4, r2
    8bde:	2300      	movs	r3, #0
    8be0:	6034      	str	r4, [r6, #0]
    8be2:	6073      	str	r3, [r6, #4]
    8be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8be8:	4647      	mov	r7, r8
    8bea:	e7dd      	b.n	8ba8 <__udivmoddi4+0x64>
    8bec:	4663      	mov	r3, ip
    8bee:	e7f1      	b.n	8bd4 <__udivmoddi4+0x90>
    8bf0:	bb92      	cbnz	r2, 8c58 <__udivmoddi4+0x114>
    8bf2:	1b43      	subs	r3, r0, r5
    8bf4:	2101      	movs	r1, #1
    8bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8bfa:	b2af      	uxth	r7, r5
    8bfc:	0c20      	lsrs	r0, r4, #16
    8bfe:	fbb3 fcfe 	udiv	ip, r3, lr
    8c02:	fb0e 331c 	mls	r3, lr, ip, r3
    8c06:	fb0c f807 	mul.w	r8, ip, r7
    8c0a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8c0e:	4598      	cmp	r8, r3
    8c10:	d961      	bls.n	8cd6 <__udivmoddi4+0x192>
    8c12:	18eb      	adds	r3, r5, r3
    8c14:	f10c 30ff 	add.w	r0, ip, #4294967295
    8c18:	d204      	bcs.n	8c24 <__udivmoddi4+0xe0>
    8c1a:	4598      	cmp	r8, r3
    8c1c:	d902      	bls.n	8c24 <__udivmoddi4+0xe0>
    8c1e:	f1ac 0002 	sub.w	r0, ip, #2
    8c22:	442b      	add	r3, r5
    8c24:	eba3 0308 	sub.w	r3, r3, r8
    8c28:	b2a4      	uxth	r4, r4
    8c2a:	fbb3 fcfe 	udiv	ip, r3, lr
    8c2e:	fb0e 331c 	mls	r3, lr, ip, r3
    8c32:	fb0c f707 	mul.w	r7, ip, r7
    8c36:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8c3a:	42a7      	cmp	r7, r4
    8c3c:	d94d      	bls.n	8cda <__udivmoddi4+0x196>
    8c3e:	192c      	adds	r4, r5, r4
    8c40:	f10c 33ff 	add.w	r3, ip, #4294967295
    8c44:	d204      	bcs.n	8c50 <__udivmoddi4+0x10c>
    8c46:	42a7      	cmp	r7, r4
    8c48:	d902      	bls.n	8c50 <__udivmoddi4+0x10c>
    8c4a:	f1ac 0302 	sub.w	r3, ip, #2
    8c4e:	442c      	add	r4, r5
    8c50:	1be4      	subs	r4, r4, r7
    8c52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8c56:	e7c0      	b.n	8bda <__udivmoddi4+0x96>
    8c58:	f1c2 0320 	rsb	r3, r2, #32
    8c5c:	4095      	lsls	r5, r2
    8c5e:	4094      	lsls	r4, r2
    8c60:	fa20 f103 	lsr.w	r1, r0, r3
    8c64:	fa2e f303 	lsr.w	r3, lr, r3
    8c68:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8c6c:	4090      	lsls	r0, r2
    8c6e:	b2af      	uxth	r7, r5
    8c70:	4303      	orrs	r3, r0
    8c72:	fbb1 fcfe 	udiv	ip, r1, lr
    8c76:	fb0e 101c 	mls	r0, lr, ip, r1
    8c7a:	0c19      	lsrs	r1, r3, #16
    8c7c:	fb0c f807 	mul.w	r8, ip, r7
    8c80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8c84:	4588      	cmp	r8, r1
    8c86:	d922      	bls.n	8cce <__udivmoddi4+0x18a>
    8c88:	1869      	adds	r1, r5, r1
    8c8a:	f10c 30ff 	add.w	r0, ip, #4294967295
    8c8e:	d204      	bcs.n	8c9a <__udivmoddi4+0x156>
    8c90:	4588      	cmp	r8, r1
    8c92:	d902      	bls.n	8c9a <__udivmoddi4+0x156>
    8c94:	f1ac 0002 	sub.w	r0, ip, #2
    8c98:	4429      	add	r1, r5
    8c9a:	eba1 0108 	sub.w	r1, r1, r8
    8c9e:	b29b      	uxth	r3, r3
    8ca0:	fbb1 fcfe 	udiv	ip, r1, lr
    8ca4:	fb0e 111c 	mls	r1, lr, ip, r1
    8ca8:	fb0c f707 	mul.w	r7, ip, r7
    8cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    8cb0:	429f      	cmp	r7, r3
    8cb2:	d90e      	bls.n	8cd2 <__udivmoddi4+0x18e>
    8cb4:	18eb      	adds	r3, r5, r3
    8cb6:	f10c 31ff 	add.w	r1, ip, #4294967295
    8cba:	d204      	bcs.n	8cc6 <__udivmoddi4+0x182>
    8cbc:	429f      	cmp	r7, r3
    8cbe:	d902      	bls.n	8cc6 <__udivmoddi4+0x182>
    8cc0:	f1ac 0102 	sub.w	r1, ip, #2
    8cc4:	442b      	add	r3, r5
    8cc6:	1bdb      	subs	r3, r3, r7
    8cc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8ccc:	e793      	b.n	8bf6 <__udivmoddi4+0xb2>
    8cce:	4660      	mov	r0, ip
    8cd0:	e7e3      	b.n	8c9a <__udivmoddi4+0x156>
    8cd2:	4661      	mov	r1, ip
    8cd4:	e7f7      	b.n	8cc6 <__udivmoddi4+0x182>
    8cd6:	4660      	mov	r0, ip
    8cd8:	e7a4      	b.n	8c24 <__udivmoddi4+0xe0>
    8cda:	4663      	mov	r3, ip
    8cdc:	e7b8      	b.n	8c50 <__udivmoddi4+0x10c>
    8cde:	4283      	cmp	r3, r0
    8ce0:	d906      	bls.n	8cf0 <__udivmoddi4+0x1ac>
    8ce2:	b916      	cbnz	r6, 8cea <__udivmoddi4+0x1a6>
    8ce4:	2100      	movs	r1, #0
    8ce6:	4608      	mov	r0, r1
    8ce8:	e77c      	b.n	8be4 <__udivmoddi4+0xa0>
    8cea:	e9c6 e000 	strd	lr, r0, [r6]
    8cee:	e7f9      	b.n	8ce4 <__udivmoddi4+0x1a0>
    8cf0:	fab3 f783 	clz	r7, r3
    8cf4:	b98f      	cbnz	r7, 8d1a <__udivmoddi4+0x1d6>
    8cf6:	4283      	cmp	r3, r0
    8cf8:	d301      	bcc.n	8cfe <__udivmoddi4+0x1ba>
    8cfa:	4572      	cmp	r2, lr
    8cfc:	d808      	bhi.n	8d10 <__udivmoddi4+0x1cc>
    8cfe:	ebbe 0402 	subs.w	r4, lr, r2
    8d02:	eb60 0303 	sbc.w	r3, r0, r3
    8d06:	2001      	movs	r0, #1
    8d08:	469c      	mov	ip, r3
    8d0a:	b91e      	cbnz	r6, 8d14 <__udivmoddi4+0x1d0>
    8d0c:	2100      	movs	r1, #0
    8d0e:	e769      	b.n	8be4 <__udivmoddi4+0xa0>
    8d10:	4638      	mov	r0, r7
    8d12:	e7fa      	b.n	8d0a <__udivmoddi4+0x1c6>
    8d14:	e9c6 4c00 	strd	r4, ip, [r6]
    8d18:	e7f8      	b.n	8d0c <__udivmoddi4+0x1c8>
    8d1a:	f1c7 0c20 	rsb	ip, r7, #32
    8d1e:	40bb      	lsls	r3, r7
    8d20:	fa0e f507 	lsl.w	r5, lr, r7
    8d24:	fa22 f40c 	lsr.w	r4, r2, ip
    8d28:	fa2e f10c 	lsr.w	r1, lr, ip
    8d2c:	40ba      	lsls	r2, r7
    8d2e:	431c      	orrs	r4, r3
    8d30:	fa20 f30c 	lsr.w	r3, r0, ip
    8d34:	40b8      	lsls	r0, r7
    8d36:	ea4f 4914 	mov.w	r9, r4, lsr #16
    8d3a:	4301      	orrs	r1, r0
    8d3c:	fa1f fe84 	uxth.w	lr, r4
    8d40:	fbb3 f8f9 	udiv	r8, r3, r9
    8d44:	fb09 3018 	mls	r0, r9, r8, r3
    8d48:	0c0b      	lsrs	r3, r1, #16
    8d4a:	fb08 fa0e 	mul.w	sl, r8, lr
    8d4e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    8d52:	459a      	cmp	sl, r3
    8d54:	d940      	bls.n	8dd8 <__udivmoddi4+0x294>
    8d56:	18e3      	adds	r3, r4, r3
    8d58:	f108 30ff 	add.w	r0, r8, #4294967295
    8d5c:	d204      	bcs.n	8d68 <__udivmoddi4+0x224>
    8d5e:	459a      	cmp	sl, r3
    8d60:	d902      	bls.n	8d68 <__udivmoddi4+0x224>
    8d62:	f1a8 0002 	sub.w	r0, r8, #2
    8d66:	4423      	add	r3, r4
    8d68:	eba3 030a 	sub.w	r3, r3, sl
    8d6c:	b289      	uxth	r1, r1
    8d6e:	fbb3 f8f9 	udiv	r8, r3, r9
    8d72:	fb09 3318 	mls	r3, r9, r8, r3
    8d76:	fb08 fe0e 	mul.w	lr, r8, lr
    8d7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    8d7e:	458e      	cmp	lr, r1
    8d80:	d92c      	bls.n	8ddc <__udivmoddi4+0x298>
    8d82:	1861      	adds	r1, r4, r1
    8d84:	f108 33ff 	add.w	r3, r8, #4294967295
    8d88:	d204      	bcs.n	8d94 <__udivmoddi4+0x250>
    8d8a:	458e      	cmp	lr, r1
    8d8c:	d902      	bls.n	8d94 <__udivmoddi4+0x250>
    8d8e:	f1a8 0302 	sub.w	r3, r8, #2
    8d92:	4421      	add	r1, r4
    8d94:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8d98:	eba1 010e 	sub.w	r1, r1, lr
    8d9c:	fba0 9802 	umull	r9, r8, r0, r2
    8da0:	4541      	cmp	r1, r8
    8da2:	46ce      	mov	lr, r9
    8da4:	4643      	mov	r3, r8
    8da6:	d302      	bcc.n	8dae <__udivmoddi4+0x26a>
    8da8:	d106      	bne.n	8db8 <__udivmoddi4+0x274>
    8daa:	454d      	cmp	r5, r9
    8dac:	d204      	bcs.n	8db8 <__udivmoddi4+0x274>
    8dae:	3801      	subs	r0, #1
    8db0:	ebb9 0e02 	subs.w	lr, r9, r2
    8db4:	eb68 0304 	sbc.w	r3, r8, r4
    8db8:	2e00      	cmp	r6, #0
    8dba:	d0a7      	beq.n	8d0c <__udivmoddi4+0x1c8>
    8dbc:	ebb5 020e 	subs.w	r2, r5, lr
    8dc0:	eb61 0103 	sbc.w	r1, r1, r3
    8dc4:	fa01 fc0c 	lsl.w	ip, r1, ip
    8dc8:	fa22 f307 	lsr.w	r3, r2, r7
    8dcc:	40f9      	lsrs	r1, r7
    8dce:	ea4c 0303 	orr.w	r3, ip, r3
    8dd2:	e9c6 3100 	strd	r3, r1, [r6]
    8dd6:	e799      	b.n	8d0c <__udivmoddi4+0x1c8>
    8dd8:	4640      	mov	r0, r8
    8dda:	e7c5      	b.n	8d68 <__udivmoddi4+0x224>
    8ddc:	4643      	mov	r3, r8
    8dde:	e7d9      	b.n	8d94 <__udivmoddi4+0x250>

00008de0 <strcmp>:
    8de0:	f810 2b01 	ldrb.w	r2, [r0], #1
    8de4:	f811 3b01 	ldrb.w	r3, [r1], #1
    8de8:	2a01      	cmp	r2, #1
    8dea:	bf28      	it	cs
    8dec:	429a      	cmpcs	r2, r3
    8dee:	d0f7      	beq.n	8de0 <strcmp>
    8df0:	1ad0      	subs	r0, r2, r3
    8df2:	4770      	bx	lr

00008df4 <strlen>:
    8df4:	4603      	mov	r3, r0
    8df6:	f813 2b01 	ldrb.w	r2, [r3], #1
    8dfa:	2a00      	cmp	r2, #0
    8dfc:	d1fb      	bne.n	8df6 <strlen+0x2>
    8dfe:	1a18      	subs	r0, r3, r0
    8e00:	3801      	subs	r0, #1
    8e02:	4770      	bx	lr
    8e04:	0000      	movs	r0, r0
	...

00008e08 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    8e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e0c:	4682      	mov	sl, r0
    8e0e:	4616      	mov	r6, r2
    8e10:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    8e12:	2500      	movs	r5, #0
{
    8e14:	b09f      	sub	sp, #124	; 0x7c
    8e16:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    8e18:	7830      	ldrb	r0, [r6, #0]
    8e1a:	b910      	cbnz	r0, 8e22 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    8e1c:	4628      	mov	r0, r5
    8e1e:	f000 bd85 	b.w	992c <z_cbvprintf_impl+0xb24>
			OUTC(*fp++);
    8e22:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    8e24:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    8e26:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
    8e28:	d006      	beq.n	8e38 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    8e2a:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
    8e2c:	47d0      	blx	sl
    8e2e:	2800      	cmp	r0, #0
    8e30:	f2c0 857c 	blt.w	992c <z_cbvprintf_impl+0xb24>
    8e34:	3501      	adds	r5, #1
		if (bps == NULL) {
    8e36:	e21b      	b.n	9270 <z_cbvprintf_impl+0x468>
		} state = {
    8e38:	2218      	movs	r2, #24
    8e3a:	2100      	movs	r1, #0
    8e3c:	a810      	add	r0, sp, #64	; 0x40
    8e3e:	f011 fc5e 	bl	1a6fe <memset>
	if (*sp == '%') {
    8e42:	7873      	ldrb	r3, [r6, #1]
    8e44:	2b25      	cmp	r3, #37	; 0x25
    8e46:	f000 80ba 	beq.w	8fbe <z_cbvprintf_impl+0x1b6>
    8e4a:	2300      	movs	r3, #0
    8e4c:	4698      	mov	r8, r3
    8e4e:	469e      	mov	lr, r3
    8e50:	469c      	mov	ip, r3
    8e52:	4618      	mov	r0, r3
    8e54:	1c71      	adds	r1, r6, #1
    8e56:	460f      	mov	r7, r1
		switch (*sp) {
    8e58:	f811 2b01 	ldrb.w	r2, [r1], #1
    8e5c:	2a2b      	cmp	r2, #43	; 0x2b
    8e5e:	f000 80dd 	beq.w	901c <z_cbvprintf_impl+0x214>
    8e62:	f200 80d4 	bhi.w	900e <z_cbvprintf_impl+0x206>
    8e66:	2a20      	cmp	r2, #32
    8e68:	f000 80db 	beq.w	9022 <z_cbvprintf_impl+0x21a>
    8e6c:	2a23      	cmp	r2, #35	; 0x23
    8e6e:	f000 80db 	beq.w	9028 <z_cbvprintf_impl+0x220>
    8e72:	b12b      	cbz	r3, 8e80 <z_cbvprintf_impl+0x78>
    8e74:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8e7c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    8e80:	f1b8 0f00 	cmp.w	r8, #0
    8e84:	d005      	beq.n	8e92 <z_cbvprintf_impl+0x8a>
    8e86:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8e8a:	f043 0320 	orr.w	r3, r3, #32
    8e8e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    8e92:	f1be 0f00 	cmp.w	lr, #0
    8e96:	d005      	beq.n	8ea4 <z_cbvprintf_impl+0x9c>
    8e98:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8e9c:	f043 0310 	orr.w	r3, r3, #16
    8ea0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    8ea4:	f1bc 0f00 	cmp.w	ip, #0
    8ea8:	d005      	beq.n	8eb6 <z_cbvprintf_impl+0xae>
    8eaa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8eae:	f043 0308 	orr.w	r3, r3, #8
    8eb2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    8eb6:	b128      	cbz	r0, 8ec4 <z_cbvprintf_impl+0xbc>
    8eb8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8ebc:	f043 0304 	orr.w	r3, r3, #4
    8ec0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    8ec4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8ec8:	f003 0144 	and.w	r1, r3, #68	; 0x44
    8ecc:	2944      	cmp	r1, #68	; 0x44
    8ece:	d103      	bne.n	8ed8 <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
    8ed0:	f36f 1386 	bfc	r3, #6, #1
    8ed4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    8ed8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    8edc:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    8ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8ee2:	970e      	str	r7, [sp, #56]	; 0x38
    8ee4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    8ee8:	f040 80a3 	bne.w	9032 <z_cbvprintf_impl+0x22a>
		conv->width_star = true;
    8eec:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    8ef0:	f043 0301 	orr.w	r3, r3, #1
    8ef4:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    8ef8:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
    8efa:	781a      	ldrb	r2, [r3, #0]
    8efc:	2a2e      	cmp	r2, #46	; 0x2e
    8efe:	bf0c      	ite	eq
    8f00:	2101      	moveq	r1, #1
    8f02:	2100      	movne	r1, #0
    8f04:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    8f08:	f361 0241 	bfi	r2, r1, #1, #1
    8f0c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    8f10:	d10c      	bne.n	8f2c <z_cbvprintf_impl+0x124>
	++sp;
    8f12:	1c5a      	adds	r2, r3, #1
    8f14:	920e      	str	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    8f16:	785a      	ldrb	r2, [r3, #1]
    8f18:	2a2a      	cmp	r2, #42	; 0x2a
    8f1a:	f040 809a 	bne.w	9052 <z_cbvprintf_impl+0x24a>
		conv->prec_star = true;
    8f1e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    8f22:	3302      	adds	r3, #2
		conv->prec_star = true;
    8f24:	f042 0204 	orr.w	r2, r2, #4
    8f28:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    8f2c:	781a      	ldrb	r2, [r3, #0]
    8f2e:	2a6c      	cmp	r2, #108	; 0x6c
    8f30:	f000 80bb 	beq.w	90aa <z_cbvprintf_impl+0x2a2>
    8f34:	f200 809d 	bhi.w	9072 <z_cbvprintf_impl+0x26a>
    8f38:	2a68      	cmp	r2, #104	; 0x68
    8f3a:	f000 80a3 	beq.w	9084 <z_cbvprintf_impl+0x27c>
    8f3e:	2a6a      	cmp	r2, #106	; 0x6a
    8f40:	f000 80bc 	beq.w	90bc <z_cbvprintf_impl+0x2b4>
    8f44:	2a4c      	cmp	r2, #76	; 0x4c
    8f46:	f000 80c1 	beq.w	90cc <z_cbvprintf_impl+0x2c4>
	conv->specifier = *sp++;
    8f4a:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
    8f4e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    8f50:	9306      	str	r3, [sp, #24]
    8f52:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
    8f56:	f200 8101 	bhi.w	915c <z_cbvprintf_impl+0x354>
    8f5a:	2a6d      	cmp	r2, #109	; 0x6d
    8f5c:	f200 80c3 	bhi.w	90e6 <z_cbvprintf_impl+0x2de>
    8f60:	2a69      	cmp	r2, #105	; 0x69
    8f62:	f200 80fb 	bhi.w	915c <z_cbvprintf_impl+0x354>
    8f66:	2a57      	cmp	r2, #87	; 0x57
    8f68:	f200 80da 	bhi.w	9120 <z_cbvprintf_impl+0x318>
    8f6c:	2a41      	cmp	r2, #65	; 0x41
    8f6e:	d004      	beq.n	8f7a <z_cbvprintf_impl+0x172>
    8f70:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    8f74:	2b02      	cmp	r3, #2
    8f76:	f200 80f1 	bhi.w	915c <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_FP;
    8f7a:	2104      	movs	r1, #4
    8f7c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    8f80:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    8f84:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    8f88:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    8f8c:	427a      	negs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
    8f8e:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
			|| (conv->specifier == 'A');
    8f92:	417a      	adcs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
    8f94:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    8f98:	060a      	lsls	r2, r1, #24
		conv->specifier_cat = SPECIFIER_FP;
    8f9a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		conv->specifier_a = (conv->specifier == 'a')
    8f9e:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
    8fa2:	b2cb      	uxtb	r3, r1
    8fa4:	f100 8119 	bmi.w	91da <z_cbvprintf_impl+0x3d2>
		if (conv->length_mod == LENGTH_L) {
    8fa8:	f003 0278 	and.w	r2, r3, #120	; 0x78
    8fac:	2a18      	cmp	r2, #24
    8fae:	f040 8103 	bne.w	91b8 <z_cbvprintf_impl+0x3b0>
			conv->length_mod = LENGTH_NONE;
    8fb2:	f36f 03c6 	bfc	r3, #3, #4
    8fb6:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
    8fba:	2300      	movs	r3, #0
    8fbc:	e0f2      	b.n	91a4 <z_cbvprintf_impl+0x39c>
		conv->specifier = *sp++;
    8fbe:	1cb2      	adds	r2, r6, #2
    8fc0:	9206      	str	r2, [sp, #24]
    8fc2:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    8fc6:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    8fca:	07d9      	lsls	r1, r3, #31
    8fcc:	f140 8107 	bpl.w	91de <z_cbvprintf_impl+0x3d6>
			width = va_arg(ap, int);
    8fd0:	f854 2b04 	ldr.w	r2, [r4], #4
			if (width < 0) {
    8fd4:	2a00      	cmp	r2, #0
			width = va_arg(ap, int);
    8fd6:	9204      	str	r2, [sp, #16]
			if (width < 0) {
    8fd8:	da08      	bge.n	8fec <z_cbvprintf_impl+0x1e4>
				conv->flag_dash = true;
    8fda:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    8fde:	f042 0204 	orr.w	r2, r2, #4
    8fe2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
    8fe6:	9a04      	ldr	r2, [sp, #16]
    8fe8:	4252      	negs	r2, r2
		int width = -1;
    8fea:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
    8fec:	075a      	lsls	r2, r3, #29
    8fee:	f140 80fe 	bpl.w	91ee <z_cbvprintf_impl+0x3e6>
			int arg = va_arg(ap, int);
    8ff2:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    8ff6:	2f00      	cmp	r7, #0
    8ff8:	f280 80fd 	bge.w	91f6 <z_cbvprintf_impl+0x3ee>
				conv->prec_present = false;
    8ffc:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    9000:	f36f 0341 	bfc	r3, #1, #1
    9004:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    9008:	f04f 37ff 	mov.w	r7, #4294967295
    900c:	e0f3      	b.n	91f6 <z_cbvprintf_impl+0x3ee>
		switch (*sp) {
    900e:	2a2d      	cmp	r2, #45	; 0x2d
    9010:	d00d      	beq.n	902e <z_cbvprintf_impl+0x226>
    9012:	2a30      	cmp	r2, #48	; 0x30
    9014:	f47f af2d 	bne.w	8e72 <z_cbvprintf_impl+0x6a>
    9018:	2301      	movs	r3, #1
	} while (loop);
    901a:	e71c      	b.n	8e56 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
    901c:	f04f 0c01 	mov.w	ip, #1
    9020:	e719      	b.n	8e56 <z_cbvprintf_impl+0x4e>
    9022:	f04f 0e01 	mov.w	lr, #1
    9026:	e716      	b.n	8e56 <z_cbvprintf_impl+0x4e>
    9028:	f04f 0801 	mov.w	r8, #1
    902c:	e713      	b.n	8e56 <z_cbvprintf_impl+0x4e>
    902e:	2001      	movs	r0, #1
    9030:	e711      	b.n	8e56 <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
    9032:	a80e      	add	r0, sp, #56	; 0x38
    9034:	f002 fafa 	bl	b62c <extract_decimal>
	if (sp != wp) {
    9038:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    903a:	42bb      	cmp	r3, r7
    903c:	f43f af5d 	beq.w	8efa <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
    9040:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    9044:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    9046:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    9048:	f360 0241 	bfi	r2, r0, #1, #1
    904c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    9050:	e753      	b.n	8efa <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
    9052:	a80e      	add	r0, sp, #56	; 0x38
    9054:	f002 faea 	bl	b62c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    9058:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    905c:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    905e:	f3c3 0240 	ubfx	r2, r3, #1, #1
    9062:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    9066:	f362 0341 	bfi	r3, r2, #1, #1
    906a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    906e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9070:	e75c      	b.n	8f2c <z_cbvprintf_impl+0x124>
	switch (*sp) {
    9072:	2a74      	cmp	r2, #116	; 0x74
    9074:	d026      	beq.n	90c4 <z_cbvprintf_impl+0x2bc>
    9076:	2a7a      	cmp	r2, #122	; 0x7a
    9078:	f47f af67 	bne.w	8f4a <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
    907c:	2106      	movs	r1, #6
    907e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    9082:	e00c      	b.n	909e <z_cbvprintf_impl+0x296>
		if (*++sp == 'h') {
    9084:	785a      	ldrb	r2, [r3, #1]
    9086:	2a68      	cmp	r2, #104	; 0x68
    9088:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    908c:	d106      	bne.n	909c <z_cbvprintf_impl+0x294>
			conv->length_mod = LENGTH_HH;
    908e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    9090:	f361 02c6 	bfi	r2, r1, #3, #4
    9094:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    9098:	3302      	adds	r3, #2
    909a:	e756      	b.n	8f4a <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
    909c:	2102      	movs	r1, #2
    909e:	f361 02c6 	bfi	r2, r1, #3, #4
    90a2:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    90a6:	3301      	adds	r3, #1
    90a8:	e74f      	b.n	8f4a <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
    90aa:	785a      	ldrb	r2, [r3, #1]
    90ac:	2a6c      	cmp	r2, #108	; 0x6c
    90ae:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    90b2:	d101      	bne.n	90b8 <z_cbvprintf_impl+0x2b0>
			conv->length_mod = LENGTH_LL;
    90b4:	2104      	movs	r1, #4
    90b6:	e7eb      	b.n	9090 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_L;
    90b8:	2103      	movs	r1, #3
    90ba:	e7f0      	b.n	909e <z_cbvprintf_impl+0x296>
		conv->length_mod = LENGTH_J;
    90bc:	2105      	movs	r1, #5
    90be:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    90c2:	e7ec      	b.n	909e <z_cbvprintf_impl+0x296>
		conv->length_mod = LENGTH_T;
    90c4:	2107      	movs	r1, #7
    90c6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    90ca:	e7e8      	b.n	909e <z_cbvprintf_impl+0x296>
		conv->unsupported = true;
    90cc:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    90d0:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    90d4:	f022 0202 	bic.w	r2, r2, #2
    90d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    90dc:	f042 0202 	orr.w	r2, r2, #2
    90e0:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    90e4:	e7df      	b.n	90a6 <z_cbvprintf_impl+0x29e>
	switch (conv->specifier) {
    90e6:	3a6e      	subs	r2, #110	; 0x6e
    90e8:	b2d3      	uxtb	r3, r2
    90ea:	2201      	movs	r2, #1
    90ec:	409a      	lsls	r2, r3
    90ee:	f240 4382 	movw	r3, #1154	; 0x482
    90f2:	421a      	tst	r2, r3
    90f4:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    90f8:	d137      	bne.n	916a <z_cbvprintf_impl+0x362>
    90fa:	f012 0f24 	tst.w	r2, #36	; 0x24
    90fe:	d15f      	bne.n	91c0 <z_cbvprintf_impl+0x3b8>
    9100:	07d1      	lsls	r1, r2, #31
    9102:	d52b      	bpl.n	915c <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_PTR;
    9104:	2103      	movs	r1, #3
    9106:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    910a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    910e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    9112:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    9116:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    9118:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    911c:	4143      	adcs	r3, r0
    911e:	e041      	b.n	91a4 <z_cbvprintf_impl+0x39c>
    9120:	2001      	movs	r0, #1
	switch (conv->specifier) {
    9122:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    9126:	b2c9      	uxtb	r1, r1
    9128:	fa00 f101 	lsl.w	r1, r0, r1
    912c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    9130:	f47f af23 	bne.w	8f7a <z_cbvprintf_impl+0x172>
    9134:	f640 0301 	movw	r3, #2049	; 0x801
    9138:	4219      	tst	r1, r3
    913a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    913e:	d11a      	bne.n	9176 <z_cbvprintf_impl+0x36e>
    9140:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    9144:	d00a      	beq.n	915c <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_SINT;
    9146:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    914a:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    914e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    9152:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    9154:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    9158:	f47f af2f 	bne.w	8fba <z_cbvprintf_impl+0x1b2>
		conv->invalid = true;
    915c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    9160:	f043 0301 	orr.w	r3, r3, #1
    9164:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    9168:	e727      	b.n	8fba <z_cbvprintf_impl+0x1b2>
		conv->specifier_cat = SPECIFIER_UINT;
    916a:	2102      	movs	r1, #2
    916c:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    9170:	f361 0202 	bfi	r2, r1, #0, #3
    9174:	e7eb      	b.n	914e <z_cbvprintf_impl+0x346>
    9176:	2002      	movs	r0, #2
    9178:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    917c:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    9180:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    9184:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    9186:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    918a:	bf02      	ittt	eq
    918c:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    9190:	f041 0101 	orreq.w	r1, r1, #1
    9194:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    9198:	2a63      	cmp	r2, #99	; 0x63
    919a:	f47f af0e 	bne.w	8fba <z_cbvprintf_impl+0x1b2>
			unsupported = (conv->length_mod != LENGTH_NONE);
    919e:	3b00      	subs	r3, #0
    91a0:	bf18      	it	ne
    91a2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    91a4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    91a8:	f3c2 0140 	ubfx	r1, r2, #1, #1
    91ac:	430b      	orrs	r3, r1
    91ae:	f363 0241 	bfi	r2, r3, #1, #1
    91b2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    91b6:	e706      	b.n	8fc6 <z_cbvprintf_impl+0x1be>
		} else if ((conv->length_mod != LENGTH_NONE)
    91b8:	f013 0f38 	tst.w	r3, #56	; 0x38
    91bc:	d1ce      	bne.n	915c <z_cbvprintf_impl+0x354>
    91be:	e6fc      	b.n	8fba <z_cbvprintf_impl+0x1b2>
		conv->specifier_cat = SPECIFIER_PTR;
    91c0:	2103      	movs	r1, #3
    91c2:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    91c6:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    91ca:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    91ce:	bf14      	ite	ne
    91d0:	2301      	movne	r3, #1
    91d2:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    91d4:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    91d8:	e7e4      	b.n	91a4 <z_cbvprintf_impl+0x39c>
			unsupported = true;
    91da:	2301      	movs	r3, #1
    91dc:	e7e2      	b.n	91a4 <z_cbvprintf_impl+0x39c>
		} else if (conv->width_present) {
    91de:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    91e2:	2a00      	cmp	r2, #0
		int width = -1;
    91e4:	bfac      	ite	ge
    91e6:	f04f 32ff 	movge.w	r2, #4294967295
			width = conv->width_value;
    91ea:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
    91ec:	e6fd      	b.n	8fea <z_cbvprintf_impl+0x1e2>
		} else if (conv->prec_present) {
    91ee:	079f      	lsls	r7, r3, #30
    91f0:	f57f af0a 	bpl.w	9008 <z_cbvprintf_impl+0x200>
			precision = conv->prec_value;
    91f4:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    91f6:	2300      	movs	r3, #0
		    && (conv->specifier_cat == SPECIFIER_FP)
    91f8:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		conv->pad0_pre_exp = 0;
    91fc:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    9200:	f002 0307 	and.w	r3, r2, #7
    9204:	2b04      	cmp	r3, #4
    9206:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    920a:	d107      	bne.n	921c <z_cbvprintf_impl+0x414>
		    && !conv->prec_present) {
    920c:	0798      	lsls	r0, r3, #30
    920e:	d405      	bmi.n	921c <z_cbvprintf_impl+0x414>
			if (conv->specifier_a) {
    9210:	f99d 1049 	ldrsb.w	r1, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
    9214:	2900      	cmp	r1, #0
    9216:	bfac      	ite	ge
    9218:	2706      	movge	r7, #6
    921a:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
    921c:	f002 0207 	and.w	r2, r2, #7
		if (specifier_cat == SPECIFIER_SINT) {
    9220:	2a01      	cmp	r2, #1
			= (enum length_mod_enum)conv->length_mod;
    9222:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    9226:	d133      	bne.n	9290 <z_cbvprintf_impl+0x488>
			switch (length_mod) {
    9228:	1eda      	subs	r2, r3, #3
    922a:	2a04      	cmp	r2, #4
    922c:	d804      	bhi.n	9238 <z_cbvprintf_impl+0x430>
    922e:	e8df f002 	tbb	[pc, r2]
    9232:	4621      	.short	0x4621
    9234:	2146      	.short	0x2146
    9236:	21          	.byte	0x21
    9237:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    9238:	6822      	ldr	r2, [r4, #0]
			if (length_mod == LENGTH_HH) {
    923a:	2b01      	cmp	r3, #1
				value->sint = va_arg(ap, int);
    923c:	ea4f 71e2 	mov.w	r1, r2, asr #31
    9240:	e9cd 2110 	strd	r2, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    9244:	d11c      	bne.n	9280 <z_cbvprintf_impl+0x478>
				value->sint = (signed char)value->sint;
    9246:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    924a:	17d1      	asrs	r1, r2, #31
    924c:	e9cd 2110 	strd	r2, r1, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    9250:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    9252:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    9256:	0791      	lsls	r1, r2, #30
    9258:	9207      	str	r2, [sp, #28]
    925a:	d050      	beq.n	92fe <z_cbvprintf_impl+0x4f6>
			OUTS(sp, fp);
    925c:	4632      	mov	r2, r6
    925e:	4650      	mov	r0, sl
    9260:	9b06      	ldr	r3, [sp, #24]
    9262:	9903      	ldr	r1, [sp, #12]
    9264:	f00e fd38 	bl	17cd8 <outs>
    9268:	2800      	cmp	r0, #0
    926a:	f2c0 835f 	blt.w	992c <z_cbvprintf_impl+0xb24>
    926e:	4405      	add	r5, r0
			continue;
    9270:	9e06      	ldr	r6, [sp, #24]
    9272:	e5d1      	b.n	8e18 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    9274:	f854 2b04 	ldr.w	r2, [r4], #4
    9278:	17d1      	asrs	r1, r2, #31
				value->uint = (unsigned char)value->uint;
    927a:	e9cd 2110 	strd	r2, r1, [sp, #64]	; 0x40
    927e:	e7e8      	b.n	9252 <z_cbvprintf_impl+0x44a>
			} else if (length_mod == LENGTH_H) {
    9280:	2b02      	cmp	r3, #2
    9282:	d1e5      	bne.n	9250 <z_cbvprintf_impl+0x448>
				value->sint = (short)value->sint;
    9284:	b211      	sxth	r1, r2
    9286:	f342 32c0 	sbfx	r2, r2, #15, #1
    928a:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
    928e:	e7df      	b.n	9250 <z_cbvprintf_impl+0x448>
		} else if (specifier_cat == SPECIFIER_UINT) {
    9290:	2a02      	cmp	r2, #2
    9292:	d124      	bne.n	92de <z_cbvprintf_impl+0x4d6>
			switch (length_mod) {
    9294:	1eda      	subs	r2, r3, #3
    9296:	2a04      	cmp	r2, #4
    9298:	d804      	bhi.n	92a4 <z_cbvprintf_impl+0x49c>
    929a:	e8df f002 	tbb	[pc, r2]
    929e:	1018      	.short	0x1018
    92a0:	1810      	.short	0x1810
    92a2:	18          	.byte	0x18
    92a3:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    92a4:	2b01      	cmp	r3, #1
    92a6:	f04f 0100 	mov.w	r1, #0
				value->uint = va_arg(ap, unsigned int);
    92aa:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    92ae:	d014      	beq.n	92da <z_cbvprintf_impl+0x4d2>
			} else if (length_mod == LENGTH_H) {
    92b0:	2b02      	cmp	r3, #2
				value->uint = va_arg(ap, unsigned int);
    92b2:	e9cd 2110 	strd	r2, r1, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    92b6:	d1cc      	bne.n	9252 <z_cbvprintf_impl+0x44a>
				value->uint = (unsigned short)value->uint;
    92b8:	b292      	uxth	r2, r2
			value->ptr = va_arg(ap, void *);
    92ba:	9210      	str	r2, [sp, #64]	; 0x40
    92bc:	e7c9      	b.n	9252 <z_cbvprintf_impl+0x44a>
					(uint_value_type)va_arg(ap,
    92be:	3407      	adds	r4, #7
    92c0:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    92c4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
    92c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    92cc:	e7c1      	b.n	9252 <z_cbvprintf_impl+0x44a>
					(uint_value_type)va_arg(ap, size_t);
    92ce:	f854 2b04 	ldr.w	r2, [r4], #4
    92d2:	9210      	str	r2, [sp, #64]	; 0x40
    92d4:	2200      	movs	r2, #0
    92d6:	9211      	str	r2, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    92d8:	e7bb      	b.n	9252 <z_cbvprintf_impl+0x44a>
				value->uint = (unsigned char)value->uint;
    92da:	b2d2      	uxtb	r2, r2
    92dc:	e7cd      	b.n	927a <z_cbvprintf_impl+0x472>
		} else if (specifier_cat == SPECIFIER_FP) {
    92de:	2a04      	cmp	r2, #4
    92e0:	d108      	bne.n	92f4 <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
    92e2:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    92e4:	f024 0407 	bic.w	r4, r4, #7
    92e8:	e9d4 0100 	ldrd	r0, r1, [r4]
    92ec:	3408      	adds	r4, #8
    92ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    92f2:	e7ae      	b.n	9252 <z_cbvprintf_impl+0x44a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    92f4:	2a03      	cmp	r2, #3
    92f6:	d1ac      	bne.n	9252 <z_cbvprintf_impl+0x44a>
			value->ptr = va_arg(ap, void *);
    92f8:	f854 2b04 	ldr.w	r2, [r4], #4
    92fc:	e7dd      	b.n	92ba <z_cbvprintf_impl+0x4b2>
		switch (conv->specifier) {
    92fe:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
    9302:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
    9306:	d8b3      	bhi.n	9270 <z_cbvprintf_impl+0x468>
    9308:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
    930c:	d849      	bhi.n	93a2 <z_cbvprintf_impl+0x59a>
    930e:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    9312:	f000 8091 	beq.w	9438 <z_cbvprintf_impl+0x630>
    9316:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
    931a:	d9a9      	bls.n	9270 <z_cbvprintf_impl+0x468>
    931c:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
    9320:	d003      	beq.n	932a <z_cbvprintf_impl+0x522>
    9322:	f1ab 0345 	sub.w	r3, fp, #69	; 0x45
    9326:	2b02      	cmp	r3, #2
    9328:	d8a2      	bhi.n	9270 <z_cbvprintf_impl+0x468>
	} u = {
    932a:	e9dd 1310 	ldrd	r1, r3, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
    932e:	2b00      	cmp	r3, #0
    9330:	f2c0 8137 	blt.w	95a2 <z_cbvprintf_impl+0x79a>
	} else if (conv->flag_plus) {
    9334:	9a07      	ldr	r2, [sp, #28]
    9336:	0716      	lsls	r6, r2, #28
    9338:	f100 8136 	bmi.w	95a8 <z_cbvprintf_impl+0x7a0>
	} else if (conv->flag_space) {
    933c:	f3c2 1900 	ubfx	r9, r2, #4, #1
    9340:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    9344:	f3c3 500a 	ubfx	r0, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    9348:	f3c3 0313 	ubfx	r3, r3, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
    934c:	2800      	cmp	r0, #0
    934e:	f040 812e 	bne.w	95ae <z_cbvprintf_impl+0x7a6>
    9352:	ea51 0603 	orrs.w	r6, r1, r3
    9356:	bf14      	ite	ne
    9358:	2601      	movne	r6, #1
    935a:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
    935c:	02db      	lsls	r3, r3, #11
    935e:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    9362:	02c9      	lsls	r1, r1, #11
		c = 'f';
    9364:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
    9368:	ea40 0e01 	orr.w	lr, r0, r1
    936c:	ea43 7ce0 	orr.w	ip, r3, r0, asr #31
		c = 'f';
    9370:	bf08      	it	eq
    9372:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
    9376:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    937a:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
    937e:	f000 819c 	beq.w	96ba <z_cbvprintf_impl+0x8b2>
		if (is_subnormal) {
    9382:	2e00      	cmp	r6, #0
    9384:	f040 814a 	bne.w	961c <z_cbvprintf_impl+0x814>
		fract |= BIT_63;
    9388:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    938a:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
    938e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    9392:	930d      	str	r3, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    9394:	2000      	movs	r0, #0
    9396:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    939a:	4606      	mov	r6, r0
		fract *= 5U;
    939c:	f04f 0c05 	mov.w	ip, #5
    93a0:	e156      	b.n	9650 <z_cbvprintf_impl+0x848>
		switch (conv->specifier) {
    93a2:	f1ab 0158 	sub.w	r1, fp, #88	; 0x58
    93a6:	2920      	cmp	r1, #32
    93a8:	f63f af62 	bhi.w	9270 <z_cbvprintf_impl+0x468>
    93ac:	a001      	add	r0, pc, #4	; (adr r0, 93b4 <z_cbvprintf_impl+0x5ac>)
    93ae:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    93b2:	bf00      	nop
    93b4:	00009541 	.word	0x00009541
    93b8:	00009271 	.word	0x00009271
    93bc:	00009271 	.word	0x00009271
    93c0:	00009271 	.word	0x00009271
    93c4:	00009271 	.word	0x00009271
    93c8:	00009271 	.word	0x00009271
    93cc:	00009271 	.word	0x00009271
    93d0:	00009271 	.word	0x00009271
    93d4:	00009271 	.word	0x00009271
    93d8:	0000932b 	.word	0x0000932b
    93dc:	00009271 	.word	0x00009271
    93e0:	000094c5 	.word	0x000094c5
    93e4:	000094d9 	.word	0x000094d9
    93e8:	0000932b 	.word	0x0000932b
    93ec:	0000932b 	.word	0x0000932b
    93f0:	0000932b 	.word	0x0000932b
    93f4:	00009271 	.word	0x00009271
    93f8:	000094d9 	.word	0x000094d9
    93fc:	00009271 	.word	0x00009271
    9400:	00009271 	.word	0x00009271
    9404:	00009271 	.word	0x00009271
    9408:	00009271 	.word	0x00009271
    940c:	0000957b 	.word	0x0000957b
    9410:	00009541 	.word	0x00009541
    9414:	00009547 	.word	0x00009547
    9418:	00009271 	.word	0x00009271
    941c:	00009271 	.word	0x00009271
    9420:	0000943f 	.word	0x0000943f
    9424:	00009271 	.word	0x00009271
    9428:	00009541 	.word	0x00009541
    942c:	00009271 	.word	0x00009271
    9430:	00009271 	.word	0x00009271
    9434:	00009541 	.word	0x00009541
			OUTC('%');
    9438:	4658      	mov	r0, fp
    943a:	9903      	ldr	r1, [sp, #12]
    943c:	e4f6      	b.n	8e2c <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
    943e:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    9440:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
    9442:	db3b      	blt.n	94bc <z_cbvprintf_impl+0x6b4>
				len = strnlen(bps, precision);
    9444:	4639      	mov	r1, r7
    9446:	4630      	mov	r0, r6
    9448:	f011 faf3 	bl	1aa32 <strnlen>
		if (bps == NULL) {
    944c:	2e00      	cmp	r6, #0
    944e:	f43f af0f 	beq.w	9270 <z_cbvprintf_impl+0x468>
		char sign = 0;
    9452:	f04f 0900 	mov.w	r9, #0
			bpe = bps + len;
    9456:	1837      	adds	r7, r6, r0
		size_t nj_len = (bpe - bps);
    9458:	1bbb      	subs	r3, r7, r6
		if (conv->altform_0c) {
    945a:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    945e:	f012 0110 	ands.w	r1, r2, #16
    9462:	9105      	str	r1, [sp, #20]
    9464:	f000 8257 	beq.w	9916 <z_cbvprintf_impl+0xb0e>
			nj_len += 2U;
    9468:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    946a:	f012 0240 	ands.w	r2, r2, #64	; 0x40
		nj_len += conv->pad0_value;
    946e:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
    9472:	9208      	str	r2, [sp, #32]
			nj_len += conv->pad0_pre_exp;
    9474:	bf18      	it	ne
    9476:	9a14      	ldrne	r2, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    9478:	4443      	add	r3, r8
			nj_len += conv->pad0_pre_exp;
    947a:	bf18      	it	ne
    947c:	189b      	addne	r3, r3, r2
		if (width > 0) {
    947e:	9a04      	ldr	r2, [sp, #16]
		nj_len += conv->pad0_value;
    9480:	f8cd 801c 	str.w	r8, [sp, #28]
		if (width > 0) {
    9484:	2a00      	cmp	r2, #0
    9486:	f340 8261 	ble.w	994c <z_cbvprintf_impl+0xb44>
			width -= (int)nj_len;
    948a:	1ad3      	subs	r3, r2, r3
    948c:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
    948e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    9492:	0758      	lsls	r0, r3, #29
    9494:	f3c3 0b80 	ubfx	fp, r3, #2, #1
    9498:	f100 8258 	bmi.w	994c <z_cbvprintf_impl+0xb44>
				if (conv->flag_zero) {
    949c:	0659      	lsls	r1, r3, #25
    949e:	f140 8248 	bpl.w	9932 <z_cbvprintf_impl+0xb2a>
					if (sign != 0) {
    94a2:	f1b9 0f00 	cmp.w	r9, #0
    94a6:	d007      	beq.n	94b8 <z_cbvprintf_impl+0x6b0>
						OUTC(sign);
    94a8:	4648      	mov	r0, r9
    94aa:	9903      	ldr	r1, [sp, #12]
    94ac:	47d0      	blx	sl
    94ae:	2800      	cmp	r0, #0
    94b0:	f2c0 823c 	blt.w	992c <z_cbvprintf_impl+0xb24>
						sign = 0;
    94b4:	46d9      	mov	r9, fp
						OUTC(sign);
    94b6:	3501      	adds	r5, #1
					pad = '0';
    94b8:	2330      	movs	r3, #48	; 0x30
    94ba:	e23b      	b.n	9934 <z_cbvprintf_impl+0xb2c>
				len = strlen(bps);
    94bc:	4630      	mov	r0, r6
    94be:	f7ff fc99 	bl	8df4 <strlen>
    94c2:	e7c6      	b.n	9452 <z_cbvprintf_impl+0x64a>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    94c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
		char sign = 0;
    94c6:	f04f 0900 	mov.w	r9, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    94ca:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
			bpe = buf + 1;
    94ce:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
		size_t nj_len = (bpe - bps);
    94d2:	2301      	movs	r3, #1
			bps = buf;
    94d4:	ae17      	add	r6, sp, #92	; 0x5c
    94d6:	e7c0      	b.n	945a <z_cbvprintf_impl+0x652>
			if (conv->flag_plus) {
    94d8:	9b07      	ldr	r3, [sp, #28]
    94da:	071a      	lsls	r2, r3, #28
			} else if (conv->flag_space) {
    94dc:	bf54      	ite	pl
    94de:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
				sign = '+';
    94e2:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			sint = value->sint;
    94e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
    94ea:	bf58      	it	pl
    94ec:	ea4f 1949 	movpl.w	r9, r9, lsl #5
			if (sint < 0) {
    94f0:	2b00      	cmp	r3, #0
    94f2:	da06      	bge.n	9502 <z_cbvprintf_impl+0x6fa>
				sign = '-';
    94f4:	f04f 092d 	mov.w	r9, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    94f8:	4252      	negs	r2, r2
    94fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    94fe:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			bps = encode_uint(value->uint, conv, buf, bpe);
    9502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    9506:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    950a:	9300      	str	r3, [sp, #0]
    950c:	aa12      	add	r2, sp, #72	; 0x48
    950e:	ab17      	add	r3, sp, #92	; 0x5c
    9510:	f002 f8a2 	bl	b658 <encode_uint>
    9514:	4606      	mov	r6, r0
			if (precision >= 0) {
    9516:	2f00      	cmp	r7, #0
    9518:	db0c      	blt.n	9534 <z_cbvprintf_impl+0x72c>
				conv->flag_zero = false;
    951a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    951e:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    9522:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
    9524:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    9528:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    952a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    952e:	d901      	bls.n	9534 <z_cbvprintf_impl+0x72c>
					conv->pad0_value = precision - (int)len;
    9530:	1afb      	subs	r3, r7, r3
    9532:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
    9534:	2e00      	cmp	r6, #0
    9536:	f43f ae9b 	beq.w	9270 <z_cbvprintf_impl+0x468>
    953a:	f10d 0775 	add.w	r7, sp, #117	; 0x75
    953e:	e05b      	b.n	95f8 <z_cbvprintf_impl+0x7f0>
		switch (conv->specifier) {
    9540:	f04f 0900 	mov.w	r9, #0
    9544:	e7dd      	b.n	9502 <z_cbvprintf_impl+0x6fa>
			if (value->ptr != NULL) {
    9546:	9810      	ldr	r0, [sp, #64]	; 0x40
    9548:	2800      	cmp	r0, #0
    954a:	f000 81df 	beq.w	990c <z_cbvprintf_impl+0xb04>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    954e:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    9552:	9300      	str	r3, [sp, #0]
    9554:	2100      	movs	r1, #0
    9556:	ab17      	add	r3, sp, #92	; 0x5c
    9558:	aa12      	add	r2, sp, #72	; 0x48
    955a:	f002 f87d 	bl	b658 <encode_uint>
				conv->altform_0c = true;
    955e:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
				bps = encode_uint((uintptr_t)value->ptr, conv,
    9562:	4606      	mov	r6, r0
				conv->altform_0c = true;
    9564:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    9568:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    956c:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    9570:	f04f 0900 	mov.w	r9, #0
				conv->altform_0c = true;
    9574:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
				goto prec_int_pad0;
    9578:	e7cd      	b.n	9516 <z_cbvprintf_impl+0x70e>
				store_count(conv, value->ptr, count);
    957a:	9a10      	ldr	r2, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    957c:	2b07      	cmp	r3, #7
    957e:	f63f ae77 	bhi.w	9270 <z_cbvprintf_impl+0x468>
    9582:	e8df f003 	tbb	[pc, r3]
    9586:	040c      	.short	0x040c
    9588:	08080c06 	.word	0x08080c06
    958c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    958e:	7015      	strb	r5, [r2, #0]
		break;
    9590:	e66e      	b.n	9270 <z_cbvprintf_impl+0x468>
		*(short *)dp = (short)count;
    9592:	8015      	strh	r5, [r2, #0]
		break;
    9594:	e66c      	b.n	9270 <z_cbvprintf_impl+0x468>
		*(intmax_t *)dp = (intmax_t)count;
    9596:	17eb      	asrs	r3, r5, #31
    9598:	e9c2 5300 	strd	r5, r3, [r2]
		break;
    959c:	e668      	b.n	9270 <z_cbvprintf_impl+0x468>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    959e:	6015      	str	r5, [r2, #0]
		break;
    95a0:	e666      	b.n	9270 <z_cbvprintf_impl+0x468>
		*sign = '-';
    95a2:	f04f 092d 	mov.w	r9, #45	; 0x2d
    95a6:	e6cd      	b.n	9344 <z_cbvprintf_impl+0x53c>
		*sign = '+';
    95a8:	f04f 092b 	mov.w	r9, #43	; 0x2b
    95ac:	e6ca      	b.n	9344 <z_cbvprintf_impl+0x53c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    95ae:	f240 76ff 	movw	r6, #2047	; 0x7ff
    95b2:	42b0      	cmp	r0, r6
    95b4:	d12f      	bne.n	9616 <z_cbvprintf_impl+0x80e>
			if (isupper((unsigned char)c) != 0) {
    95b6:	48a0      	ldr	r0, [pc, #640]	; (9838 <z_cbvprintf_impl+0xa30>)
    95b8:	f10b 0201 	add.w	r2, fp, #1
    95bc:	b2d2      	uxtb	r2, r2
    95be:	5c82      	ldrb	r2, [r0, r2]
		if (fract == 0) {
    95c0:	430b      	orrs	r3, r1
    95c2:	f002 0203 	and.w	r2, r2, #3
    95c6:	d11e      	bne.n	9606 <z_cbvprintf_impl+0x7fe>
			if (isupper((unsigned char)c) != 0) {
    95c8:	2a01      	cmp	r2, #1
    95ca:	bf0b      	itete	eq
    95cc:	2349      	moveq	r3, #73	; 0x49
    95ce:	2369      	movne	r3, #105	; 0x69
    95d0:	214e      	moveq	r1, #78	; 0x4e
    95d2:	216e      	movne	r1, #110	; 0x6e
    95d4:	bf0c      	ite	eq
    95d6:	2246      	moveq	r2, #70	; 0x46
    95d8:	2266      	movne	r2, #102	; 0x66
				*buf++ = 'I';
    95da:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
    95de:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
    95e2:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
    95e6:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
    95ea:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
    95ee:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
    95f2:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
    95f6:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    95f8:	1bbb      	subs	r3, r7, r6
		if (sign != 0) {
    95fa:	f1b9 0f00 	cmp.w	r9, #0
    95fe:	f43f af2c 	beq.w	945a <z_cbvprintf_impl+0x652>
			nj_len += 1U;
    9602:	3301      	adds	r3, #1
    9604:	e729      	b.n	945a <z_cbvprintf_impl+0x652>
			if (isupper((unsigned char)c) != 0) {
    9606:	2a01      	cmp	r2, #1
    9608:	bf15      	itete	ne
    960a:	236e      	movne	r3, #110	; 0x6e
    960c:	234e      	moveq	r3, #78	; 0x4e
    960e:	2161      	movne	r1, #97	; 0x61
    9610:	2141      	moveq	r1, #65	; 0x41
    9612:	461a      	mov	r2, r3
    9614:	e7e1      	b.n	95da <z_cbvprintf_impl+0x7d2>
	bool is_subnormal = (expo == 0) && (fract != 0);
    9616:	2600      	movs	r6, #0
    9618:	e6a0      	b.n	935c <z_cbvprintf_impl+0x554>
				expo--;
    961a:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    961c:	1849      	adds	r1, r1, r1
    961e:	415b      	adcs	r3, r3
    9620:	2b00      	cmp	r3, #0
    9622:	dafa      	bge.n	961a <z_cbvprintf_impl+0x812>
    9624:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
    9628:	e6ae      	b.n	9388 <z_cbvprintf_impl+0x580>
			fract >>= 1;
    962a:	0849      	lsrs	r1, r1, #1
    962c:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
    9630:	085b      	lsrs	r3, r3, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    9632:	f1b3 3f33 	cmp.w	r3, #858993459	; 0x33333333
    9636:	4640      	mov	r0, r8
			expo++;
    9638:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    963c:	d2f5      	bcs.n	962a <z_cbvprintf_impl+0x822>
		expo++;
    963e:	f100 0802 	add.w	r8, r0, #2
		decexp--;
    9642:	2001      	movs	r0, #1
		fract *= 5U;
    9644:	fb0c fe03 	mul.w	lr, ip, r3
    9648:	fba1 130c 	umull	r1, r3, r1, ip
		decexp--;
    964c:	3e01      	subs	r6, #1
		fract *= 5U;
    964e:	4473      	add	r3, lr
	while (expo < -2) {
    9650:	f118 0f02 	cmn.w	r8, #2
    9654:	dbe9      	blt.n	962a <z_cbvprintf_impl+0x822>
    9656:	b108      	cbz	r0, 965c <z_cbvprintf_impl+0x854>
    9658:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
		fract += 2;
    965c:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
	while (expo > 0) {
    9660:	f1b8 0f00 	cmp.w	r8, #0
    9664:	dc2c      	bgt.n	96c0 <z_cbvprintf_impl+0x8b8>
	fract >>= (4 - expo);
    9666:	f1c8 0004 	rsb	r0, r8, #4
    966a:	f1a0 0c20 	sub.w	ip, r0, #32
    966e:	f108 081c 	add.w	r8, r8, #28
    9672:	40c3      	lsrs	r3, r0
    9674:	fa01 f808 	lsl.w	r8, r1, r8
    9678:	fa21 fc0c 	lsr.w	ip, r1, ip
    967c:	40c1      	lsrs	r1, r0
	if ((c == 'g') || (c == 'G')) {
    967e:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
    9682:	ea43 0308 	orr.w	r3, r3, r8
	if ((c == 'g') || (c == 'G')) {
    9686:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
    9688:	ea43 030c 	orr.w	r3, r3, ip
	if ((c == 'g') || (c == 'G')) {
    968c:	d138      	bne.n	9700 <z_cbvprintf_impl+0x8f8>
		if (decexp < (-4 + 1) || decexp > precision) {
    968e:	1cf0      	adds	r0, r6, #3
    9690:	db01      	blt.n	9696 <z_cbvprintf_impl+0x88e>
    9692:	42b7      	cmp	r7, r6
    9694:	da2a      	bge.n	96ec <z_cbvprintf_impl+0x8e4>
			c += 'e' - 'g';  /* e or E */
    9696:	f1ab 0202 	sub.w	r2, fp, #2
			if (precision > 0) {
    969a:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    969c:	fa5f fb82 	uxtb.w	fp, r2
			if (precision > 0) {
    96a0:	dd7b      	ble.n	979a <z_cbvprintf_impl+0x992>
		if (!conv->flag_hash && (precision > 0)) {
    96a2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
				precision--;
    96a6:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
    96a8:	0682      	lsls	r2, r0, #26
    96aa:	d476      	bmi.n	979a <z_cbvprintf_impl+0x992>
    96ac:	1e3a      	subs	r2, r7, #0
    96ae:	bf18      	it	ne
    96b0:	2201      	movne	r2, #1
	bool prune_zero = false;
    96b2:	9205      	str	r2, [sp, #20]
		decimals = precision + 1;
    96b4:	f107 0801 	add.w	r8, r7, #1
    96b8:	e02c      	b.n	9714 <z_cbvprintf_impl+0x90c>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    96ba:	f04f 0800 	mov.w	r8, #0
    96be:	e669      	b.n	9394 <z_cbvprintf_impl+0x58c>
		fract += 2;
    96c0:	3302      	adds	r3, #2
    96c2:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    96c6:	a80c      	add	r0, sp, #48	; 0x30
		expo--;
    96c8:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
    96cc:	3601      	adds	r6, #1
		fract += 2;
    96ce:	e9cd 310c 	strd	r3, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
    96d2:	f00e fad2 	bl	17c7a <_ldiv5>
		decexp++;
    96d6:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
			fract <<= 1;
    96da:	18db      	adds	r3, r3, r3
    96dc:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    96de:	2900      	cmp	r1, #0
			expo--;
    96e0:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
    96e4:	daf9      	bge.n	96da <z_cbvprintf_impl+0x8d2>
    96e6:	e9cd 310c 	strd	r3, r1, [sp, #48]	; 0x30
    96ea:	e7b7      	b.n	965c <z_cbvprintf_impl+0x854>
		if (!conv->flag_hash && (precision > 0)) {
    96ec:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			precision -= decexp;
    96f0:	1bbf      	subs	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
    96f2:	0690      	lsls	r0, r2, #26
    96f4:	d44f      	bmi.n	9796 <z_cbvprintf_impl+0x98e>
    96f6:	1e3a      	subs	r2, r7, #0
    96f8:	bf18      	it	ne
    96fa:	2201      	movne	r2, #1
	bool prune_zero = false;
    96fc:	9205      	str	r2, [sp, #20]
    96fe:	e004      	b.n	970a <z_cbvprintf_impl+0x902>
    9700:	2200      	movs	r2, #0
	if (c == 'f') {
    9702:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
    9706:	9205      	str	r2, [sp, #20]
	if (c == 'f') {
    9708:	d1d4      	bne.n	96b4 <z_cbvprintf_impl+0x8ac>
		if (decimals < 0) {
    970a:	eb17 0806 	adds.w	r8, r7, r6
    970e:	f04f 0b66 	mov.w	fp, #102	; 0x66
    9712:	d444      	bmi.n	979e <z_cbvprintf_impl+0x996>
	if (decimals > 16) {
    9714:	f1b8 0f10 	cmp.w	r8, #16
    9718:	bfa8      	it	ge
    971a:	f04f 0810 	movge.w	r8, #16
	uint64_t round = BIT64(59); /* 0.5 */
    971e:	ed9f 7b44 	vldr	d7, [pc, #272]	; 9830 <z_cbvprintf_impl+0xa28>
    9722:	2010      	movs	r0, #16
    9724:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    9728:	900b      	str	r0, [sp, #44]	; 0x2c
	*v >>= 1;
    972a:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
	while (decimals--) {
    972e:	f1b8 0f00 	cmp.w	r8, #0
    9732:	d137      	bne.n	97a4 <z_cbvprintf_impl+0x99c>
	fract += round;
    9734:	18c0      	adds	r0, r0, r3
    9736:	eb42 0301 	adc.w	r3, r2, r1
	if (fract >= BIT64(60)) {
    973a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    973e:	d241      	bcs.n	97c4 <z_cbvprintf_impl+0x9bc>
	fract += round;
    9740:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
    9744:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
    9746:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
    974a:	f003 0320 	and.w	r3, r3, #32
	if (c == 'f') {
    974e:	f040 80bc 	bne.w	98ca <z_cbvprintf_impl+0xac2>
		if (decexp > 0) {
    9752:	2e00      	cmp	r6, #0
    9754:	dc41      	bgt.n	97da <z_cbvprintf_impl+0x9d2>
			*buf++ = '0';
    9756:	2130      	movs	r1, #48	; 0x30
    9758:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
    975c:	2b00      	cmp	r3, #0
    975e:	d16d      	bne.n	983c <z_cbvprintf_impl+0xa34>
    9760:	2f00      	cmp	r7, #0
    9762:	f340 81b4 	ble.w	9ace <z_cbvprintf_impl+0xcc6>
			*buf++ = '.';
    9766:	232e      	movs	r3, #46	; 0x2e
    9768:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    976c:	b186      	cbz	r6, 9790 <z_cbvprintf_impl+0x988>
			conv->pad0_value = -decexp;
    976e:	4273      	negs	r3, r6
    9770:	42bb      	cmp	r3, r7
    9772:	bfa8      	it	ge
    9774:	463b      	movge	r3, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    9776:	2b00      	cmp	r3, #0
    9778:	9313      	str	r3, [sp, #76]	; 0x4c
			precision -= conv->pad0_value;
    977a:	eba7 0703 	sub.w	r7, r7, r3
			conv->pad_postdp = (conv->pad0_value > 0);
    977e:	bfd4      	ite	le
    9780:	2300      	movle	r3, #0
    9782:	2301      	movgt	r3, #1
    9784:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    9788:	f363 1145 	bfi	r1, r3, #5, #1
    978c:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
    9790:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
    9794:	e039      	b.n	980a <z_cbvprintf_impl+0xa02>
	bool prune_zero = false;
    9796:	2200      	movs	r2, #0
    9798:	e7b0      	b.n	96fc <z_cbvprintf_impl+0x8f4>
    979a:	2200      	movs	r2, #0
    979c:	e789      	b.n	96b2 <z_cbvprintf_impl+0x8aa>
			decimals = 0;
    979e:	f04f 0800 	mov.w	r8, #0
    97a2:	e7bc      	b.n	971e <z_cbvprintf_impl+0x916>
	*v >>= 1;
    97a4:	0840      	lsrs	r0, r0, #1
    97a6:	ea40 70c2 	orr.w	r0, r0, r2, lsl #31
    97aa:	0852      	lsrs	r2, r2, #1
    97ac:	e9cd 020e 	strd	r0, r2, [sp, #56]	; 0x38
	_ldiv5(v);
    97b0:	a80e      	add	r0, sp, #56	; 0x38
    97b2:	e9cd 3108 	strd	r3, r1, [sp, #32]
    97b6:	f108 38ff 	add.w	r8, r8, #4294967295
    97ba:	f00e fa5e 	bl	17c7a <_ldiv5>
    97be:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
}
    97c2:	e7b2      	b.n	972a <z_cbvprintf_impl+0x922>
	*v >>= 1;
    97c4:	0840      	lsrs	r0, r0, #1
    97c6:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
    97ca:	085b      	lsrs	r3, r3, #1
    97cc:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
	_ldiv5(v);
    97d0:	a80c      	add	r0, sp, #48	; 0x30
    97d2:	f00e fa52 	bl	17c7a <_ldiv5>
		decexp++;
    97d6:	3601      	adds	r6, #1
    97d8:	e7b4      	b.n	9744 <z_cbvprintf_impl+0x93c>
	char *buf = bps;
    97da:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
    97de:	990b      	ldr	r1, [sp, #44]	; 0x2c
    97e0:	2900      	cmp	r1, #0
    97e2:	dd09      	ble.n	97f8 <z_cbvprintf_impl+0x9f0>
				*buf++ = _get_digit(&fract, &digit_count);
    97e4:	a90b      	add	r1, sp, #44	; 0x2c
    97e6:	a80c      	add	r0, sp, #48	; 0x30
    97e8:	9307      	str	r3, [sp, #28]
    97ea:	f00e fa5e 	bl	17caa <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    97ee:	3e01      	subs	r6, #1
    97f0:	9b07      	ldr	r3, [sp, #28]
				*buf++ = _get_digit(&fract, &digit_count);
    97f2:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
    97f6:	d1f2      	bne.n	97de <z_cbvprintf_impl+0x9d6>
			conv->pad0_value = decexp;
    97f8:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
    97fa:	b99b      	cbnz	r3, 9824 <z_cbvprintf_impl+0xa1c>
    97fc:	2f00      	cmp	r7, #0
    97fe:	f340 8164 	ble.w	9aca <z_cbvprintf_impl+0xcc2>
			*buf++ = '.';
    9802:	212e      	movs	r1, #46	; 0x2e
    9804:	f808 1b01 	strb.w	r1, [r8], #1
    9808:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
    980a:	2f00      	cmp	r7, #0
    980c:	dd1f      	ble.n	984e <z_cbvprintf_impl+0xa46>
    980e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9810:	2b00      	cmp	r3, #0
    9812:	dd1c      	ble.n	984e <z_cbvprintf_impl+0xa46>
		*buf++ = _get_digit(&fract, &digit_count);
    9814:	a90b      	add	r1, sp, #44	; 0x2c
    9816:	a80c      	add	r0, sp, #48	; 0x30
    9818:	f00e fa47 	bl	17caa <_get_digit>
		precision--;
    981c:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
    981e:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
    9822:	e7f2      	b.n	980a <z_cbvprintf_impl+0xa02>
			*buf++ = '.';
    9824:	232e      	movs	r3, #46	; 0x2e
    9826:	f808 3b01 	strb.w	r3, [r8], #1
    982a:	e7ed      	b.n	9808 <z_cbvprintf_impl+0xa00>
    982c:	f3af 8000 	nop.w
    9830:	00000000 	.word	0x00000000
    9834:	08000000 	.word	0x08000000
    9838:	0001e02c 	.word	0x0001e02c
    983c:	232e      	movs	r3, #46	; 0x2e
    983e:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    9842:	2e00      	cmp	r6, #0
    9844:	d0a4      	beq.n	9790 <z_cbvprintf_impl+0x988>
    9846:	2f00      	cmp	r7, #0
    9848:	dc91      	bgt.n	976e <z_cbvprintf_impl+0x966>
			*buf++ = '.';
    984a:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
    984e:	9b05      	ldr	r3, [sp, #20]
    9850:	2b00      	cmp	r3, #0
    9852:	d14e      	bne.n	98f2 <z_cbvprintf_impl+0xaea>
	conv->pad0_pre_exp = precision;
    9854:	9714      	str	r7, [sp, #80]	; 0x50
    9856:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
    9858:	f00b 03df 	and.w	r3, fp, #223	; 0xdf
    985c:	2b45      	cmp	r3, #69	; 0x45
    985e:	d123      	bne.n	98a8 <z_cbvprintf_impl+0xaa0>
		if (decexp < 0) {
    9860:	2e00      	cmp	r6, #0
			decexp = -decexp;
    9862:	bfba      	itte	lt
    9864:	4276      	neglt	r6, r6
			*buf++ = '-';
    9866:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    9868:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    986a:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
    986c:	bfc8      	it	gt
    986e:	2164      	movgt	r1, #100	; 0x64
    9870:	707b      	strb	r3, [r7, #1]
    9872:	bfc4      	itt	gt
    9874:	fbb6 f3f1 	udivgt	r3, r6, r1
			decexp %= 100;
    9878:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    987c:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
    9880:	bfc8      	it	gt
    9882:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    9886:	fbb6 f3f1 	udiv	r3, r6, r1
			*buf++ = '-';
    988a:	bfd2      	itee	le
    988c:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
    988e:	1cfa      	addgt	r2, r7, #3
    9890:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
    9892:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
    9896:	4617      	mov	r7, r2
    9898:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    989c:	fb01 6313 	mls	r3, r1, r3, r6
    98a0:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    98a2:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
    98a6:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
    98a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    98aa:	2b00      	cmp	r3, #0
    98ac:	dc2c      	bgt.n	9908 <z_cbvprintf_impl+0xb00>
    98ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
    98b0:	2b00      	cmp	r3, #0
    98b2:	bfd4      	ite	le
    98b4:	2300      	movle	r3, #0
    98b6:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    98b8:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    98bc:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    98c0:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    98c2:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
    98c6:	703b      	strb	r3, [r7, #0]
	return bps;
    98c8:	e695      	b.n	95f6 <z_cbvprintf_impl+0x7ee>
		*buf = _get_digit(&fract, &digit_count);
    98ca:	a90b      	add	r1, sp, #44	; 0x2c
    98cc:	a80c      	add	r0, sp, #48	; 0x30
    98ce:	9307      	str	r3, [sp, #28]
    98d0:	f00e f9eb 	bl	17caa <_get_digit>
		if (*buf++ != '0') {
    98d4:	9b07      	ldr	r3, [sp, #28]
    98d6:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    98d8:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
			decexp--;
    98dc:	bf18      	it	ne
    98de:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
    98e2:	b913      	cbnz	r3, 98ea <z_cbvprintf_impl+0xae2>
    98e4:	2f00      	cmp	r7, #0
    98e6:	f340 80f2 	ble.w	9ace <z_cbvprintf_impl+0xcc6>
			*buf++ = '.';
    98ea:	232e      	movs	r3, #46	; 0x2e
    98ec:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
    98f0:	e74e      	b.n	9790 <z_cbvprintf_impl+0x988>
		while (*--buf == '0') {
    98f2:	4647      	mov	r7, r8
    98f4:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    98f8:	f108 38ff 	add.w	r8, r8, #4294967295
    98fc:	2b30      	cmp	r3, #48	; 0x30
    98fe:	d0f8      	beq.n	98f2 <z_cbvprintf_impl+0xaea>
    9900:	2b2e      	cmp	r3, #46	; 0x2e
    9902:	bf08      	it	eq
    9904:	4647      	moveq	r7, r8
    9906:	e7a7      	b.n	9858 <z_cbvprintf_impl+0xa50>
		|| (conv->pad0_pre_exp > 0);
    9908:	2301      	movs	r3, #1
    990a:	e7d5      	b.n	98b8 <z_cbvprintf_impl+0xab0>
			bpe = bps + 5;
    990c:	4f71      	ldr	r7, [pc, #452]	; (9ad4 <z_cbvprintf_impl+0xccc>)
		char sign = 0;
    990e:	4681      	mov	r9, r0
		size_t nj_len = (bpe - bps);
    9910:	2305      	movs	r3, #5
			bps = "(nil)";
    9912:	1f7e      	subs	r6, r7, #5
    9914:	e5a1      	b.n	945a <z_cbvprintf_impl+0x652>
		} else if (conv->altform_0) {
    9916:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    9918:	bf48      	it	mi
    991a:	3301      	addmi	r3, #1
    991c:	e5a5      	b.n	946a <z_cbvprintf_impl+0x662>
					OUTC(pad);
    991e:	4618      	mov	r0, r3
    9920:	9309      	str	r3, [sp, #36]	; 0x24
    9922:	9903      	ldr	r1, [sp, #12]
    9924:	47d0      	blx	sl
    9926:	2800      	cmp	r0, #0
    9928:	9b09      	ldr	r3, [sp, #36]	; 0x24
    992a:	da05      	bge.n	9938 <z_cbvprintf_impl+0xb30>
#undef OUTS
#undef OUTC
}
    992c:	b01f      	add	sp, #124	; 0x7c
    992e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    9932:	2320      	movs	r3, #32
					pad = '0';
    9934:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
    9938:	465a      	mov	r2, fp
    993a:	2a00      	cmp	r2, #0
    993c:	f10b 3bff 	add.w	fp, fp, #4294967295
    9940:	dced      	bgt.n	991e <z_cbvprintf_impl+0xb16>
    9942:	9b04      	ldr	r3, [sp, #16]
    9944:	f8cd b010 	str.w	fp, [sp, #16]
    9948:	442b      	add	r3, r5
    994a:	1a9d      	subs	r5, r3, r2
		if (sign != 0) {
    994c:	f1b9 0f00 	cmp.w	r9, #0
    9950:	d005      	beq.n	995e <z_cbvprintf_impl+0xb56>
			OUTC(sign);
    9952:	4648      	mov	r0, r9
    9954:	9903      	ldr	r1, [sp, #12]
    9956:	47d0      	blx	sl
    9958:	2800      	cmp	r0, #0
    995a:	dbe7      	blt.n	992c <z_cbvprintf_impl+0xb24>
    995c:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    995e:	9b08      	ldr	r3, [sp, #32]
    9960:	2b00      	cmp	r3, #0
    9962:	d077      	beq.n	9a54 <z_cbvprintf_impl+0xc4c>
			if (conv->specifier_a) {
    9964:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
    9968:	2b00      	cmp	r3, #0
    996a:	db28      	blt.n	99be <z_cbvprintf_impl+0xbb6>
    996c:	4633      	mov	r3, r6
				while (isdigit((unsigned char)*cp) != 0) {
    996e:	f8df 9168 	ldr.w	r9, [pc, #360]	; 9ad8 <z_cbvprintf_impl+0xcd0>
    9972:	7818      	ldrb	r0, [r3, #0]
    9974:	469b      	mov	fp, r3
    9976:	f819 2000 	ldrb.w	r2, [r9, r0]
    997a:	3301      	adds	r3, #1
    997c:	0752      	lsls	r2, r2, #29
    997e:	d43f      	bmi.n	9a00 <z_cbvprintf_impl+0xbf8>
				if (!conv->pad_postdp) {
    9980:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    9984:	1bae      	subs	r6, r5, r6
    9986:	0698      	lsls	r0, r3, #26
    9988:	445e      	add	r6, fp
    998a:	d407      	bmi.n	999c <z_cbvprintf_impl+0xb94>
					while (pad_len-- > 0) {
    998c:	4642      	mov	r2, r8
    998e:	2a00      	cmp	r2, #0
    9990:	f108 38ff 	add.w	r8, r8, #4294967295
    9994:	dc3b      	bgt.n	9a0e <z_cbvprintf_impl+0xc06>
    9996:	9b07      	ldr	r3, [sp, #28]
    9998:	4433      	add	r3, r6
    999a:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
    999c:	f89b 0000 	ldrb.w	r0, [fp]
    99a0:	282e      	cmp	r0, #46	; 0x2e
    99a2:	d10a      	bne.n	99ba <z_cbvprintf_impl+0xbb2>
					OUTC(*cp++);
    99a4:	9903      	ldr	r1, [sp, #12]
    99a6:	47d0      	blx	sl
						OUTC('0');
    99a8:	2800      	cmp	r0, #0
    99aa:	dbbf      	blt.n	992c <z_cbvprintf_impl+0xb24>
					while (pad_len-- > 0) {
    99ac:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
    99b0:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    99b4:	dc31      	bgt.n	9a1a <z_cbvprintf_impl+0xc12>
					OUTC(*cp++);
    99b6:	f10b 0b01 	add.w	fp, fp, #1
			if (conv->specifier_a) {
    99ba:	465d      	mov	r5, fp
    99bc:	e038      	b.n	9a30 <z_cbvprintf_impl+0xc28>
    99be:	46b1      	mov	r9, r6
				while (*cp != 'p') {
    99c0:	f899 0000 	ldrb.w	r0, [r9]
    99c4:	46c8      	mov	r8, r9
    99c6:	2870      	cmp	r0, #112	; 0x70
    99c8:	f109 0901 	add.w	r9, r9, #1
    99cc:	d113      	bne.n	99f6 <z_cbvprintf_impl+0xbee>
    99ce:	1bae      	subs	r6, r5, r6
    99d0:	9d14      	ldr	r5, [sp, #80]	; 0x50
    99d2:	4446      	add	r6, r8
			while (pad_len-- > 0) {
    99d4:	4435      	add	r5, r6
    99d6:	1bab      	subs	r3, r5, r6
    99d8:	2b00      	cmp	r3, #0
    99da:	dc33      	bgt.n	9a44 <z_cbvprintf_impl+0xc3c>
			OUTS(cp, bpe);
    99dc:	463b      	mov	r3, r7
    99de:	4642      	mov	r2, r8
    99e0:	4650      	mov	r0, sl
    99e2:	9903      	ldr	r1, [sp, #12]
    99e4:	f00e f978 	bl	17cd8 <outs>
    99e8:	2800      	cmp	r0, #0
    99ea:	db9f      	blt.n	992c <z_cbvprintf_impl+0xb24>
    99ec:	4430      	add	r0, r6
    99ee:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
    99f0:	4605      	mov	r5, r0
    99f2:	4406      	add	r6, r0
    99f4:	e064      	b.n	9ac0 <z_cbvprintf_impl+0xcb8>
					OUTC(*cp++);
    99f6:	9903      	ldr	r1, [sp, #12]
    99f8:	47d0      	blx	sl
    99fa:	2800      	cmp	r0, #0
    99fc:	dae0      	bge.n	99c0 <z_cbvprintf_impl+0xbb8>
    99fe:	e795      	b.n	992c <z_cbvprintf_impl+0xb24>
    9a00:	9305      	str	r3, [sp, #20]
					OUTC(*cp++);
    9a02:	9903      	ldr	r1, [sp, #12]
    9a04:	47d0      	blx	sl
    9a06:	2800      	cmp	r0, #0
    9a08:	9b05      	ldr	r3, [sp, #20]
    9a0a:	dab2      	bge.n	9972 <z_cbvprintf_impl+0xb6a>
    9a0c:	e78e      	b.n	992c <z_cbvprintf_impl+0xb24>
						OUTC('0');
    9a0e:	2030      	movs	r0, #48	; 0x30
    9a10:	9903      	ldr	r1, [sp, #12]
    9a12:	47d0      	blx	sl
    9a14:	2800      	cmp	r0, #0
    9a16:	dab9      	bge.n	998c <z_cbvprintf_impl+0xb84>
    9a18:	e788      	b.n	992c <z_cbvprintf_impl+0xb24>
						OUTC('0');
    9a1a:	2030      	movs	r0, #48	; 0x30
    9a1c:	9903      	ldr	r1, [sp, #12]
    9a1e:	47d0      	blx	sl
    9a20:	f108 38ff 	add.w	r8, r8, #4294967295
    9a24:	e7c0      	b.n	99a8 <z_cbvprintf_impl+0xba0>
					OUTC(*cp++);
    9a26:	9903      	ldr	r1, [sp, #12]
    9a28:	47d0      	blx	sl
    9a2a:	2800      	cmp	r0, #0
    9a2c:	f6ff af7e 	blt.w	992c <z_cbvprintf_impl+0xb24>
				while (isdigit((unsigned char)*cp) != 0) {
    9a30:	7828      	ldrb	r0, [r5, #0]
    9a32:	46a8      	mov	r8, r5
    9a34:	f819 3000 	ldrb.w	r3, [r9, r0]
    9a38:	3501      	adds	r5, #1
    9a3a:	0759      	lsls	r1, r3, #29
    9a3c:	d4f3      	bmi.n	9a26 <z_cbvprintf_impl+0xc1e>
    9a3e:	eba6 060b 	sub.w	r6, r6, fp
    9a42:	e7c5      	b.n	99d0 <z_cbvprintf_impl+0xbc8>
				OUTC('0');
    9a44:	2030      	movs	r0, #48	; 0x30
    9a46:	9903      	ldr	r1, [sp, #12]
    9a48:	47d0      	blx	sl
    9a4a:	2800      	cmp	r0, #0
    9a4c:	f6ff af6e 	blt.w	992c <z_cbvprintf_impl+0xb24>
    9a50:	3601      	adds	r6, #1
    9a52:	e7c0      	b.n	99d6 <z_cbvprintf_impl+0xbce>
			if (conv->altform_0c | conv->altform_0) {
    9a54:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    9a58:	06da      	lsls	r2, r3, #27
    9a5a:	d401      	bmi.n	9a60 <z_cbvprintf_impl+0xc58>
    9a5c:	071b      	lsls	r3, r3, #28
    9a5e:	d506      	bpl.n	9a6e <z_cbvprintf_impl+0xc66>
				OUTC('0');
    9a60:	2030      	movs	r0, #48	; 0x30
    9a62:	9903      	ldr	r1, [sp, #12]
    9a64:	47d0      	blx	sl
    9a66:	2800      	cmp	r0, #0
    9a68:	f6ff af60 	blt.w	992c <z_cbvprintf_impl+0xb24>
    9a6c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    9a6e:	9b05      	ldr	r3, [sp, #20]
    9a70:	b13b      	cbz	r3, 9a82 <z_cbvprintf_impl+0xc7a>
				OUTC(conv->specifier);
    9a72:	9903      	ldr	r1, [sp, #12]
    9a74:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    9a78:	47d0      	blx	sl
    9a7a:	2800      	cmp	r0, #0
    9a7c:	f6ff af56 	blt.w	992c <z_cbvprintf_impl+0xb24>
    9a80:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    9a82:	44a8      	add	r8, r5
    9a84:	e006      	b.n	9a94 <z_cbvprintf_impl+0xc8c>
				OUTC('0');
    9a86:	2030      	movs	r0, #48	; 0x30
    9a88:	9903      	ldr	r1, [sp, #12]
    9a8a:	47d0      	blx	sl
    9a8c:	2800      	cmp	r0, #0
    9a8e:	f6ff af4d 	blt.w	992c <z_cbvprintf_impl+0xb24>
    9a92:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    9a94:	eba8 0305 	sub.w	r3, r8, r5
    9a98:	2b00      	cmp	r3, #0
    9a9a:	dcf4      	bgt.n	9a86 <z_cbvprintf_impl+0xc7e>
			OUTS(bps, bpe);
    9a9c:	463b      	mov	r3, r7
    9a9e:	4632      	mov	r2, r6
    9aa0:	4650      	mov	r0, sl
    9aa2:	9903      	ldr	r1, [sp, #12]
    9aa4:	f00e f918 	bl	17cd8 <outs>
    9aa8:	2800      	cmp	r0, #0
    9aaa:	f6ff af3f 	blt.w	992c <z_cbvprintf_impl+0xb24>
    9aae:	4428      	add	r0, r5
    9ab0:	e79d      	b.n	99ee <z_cbvprintf_impl+0xbe6>
			OUTC(' ');
    9ab2:	2020      	movs	r0, #32
    9ab4:	9903      	ldr	r1, [sp, #12]
    9ab6:	47d0      	blx	sl
    9ab8:	2800      	cmp	r0, #0
    9aba:	f6ff af37 	blt.w	992c <z_cbvprintf_impl+0xb24>
    9abe:	3501      	adds	r5, #1
		while (width > 0) {
    9ac0:	1b73      	subs	r3, r6, r5
    9ac2:	2b00      	cmp	r3, #0
    9ac4:	dcf5      	bgt.n	9ab2 <z_cbvprintf_impl+0xcaa>
    9ac6:	f7ff bbd3 	b.w	9270 <z_cbvprintf_impl+0x468>
			decexp = 0;
    9aca:	461e      	mov	r6, r3
    9acc:	e6bf      	b.n	984e <z_cbvprintf_impl+0xa46>
		if (*buf++ != '0') {
    9ace:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
    9ad2:	e6bc      	b.n	984e <z_cbvprintf_impl+0xa46>
    9ad4:	0001c25a 	.word	0x0001c25a
    9ad8:	0001e02d 	.word	0x0001e02d
    9adc:	00000000 	.word	0x00000000

00009ae0 <parse_edrx>:

	return 0;
}

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
    9ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ae2:	ed2d 8b02 	vpush	{d8}
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
    9ae6:	2500      	movs	r5, #0
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
    9ae8:	2304      	movs	r3, #4
{
    9aea:	b08b      	sub	sp, #44	; 0x2c
    9aec:	460e      	mov	r6, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
    9aee:	4607      	mov	r7, r0
	struct at_param_list resp_list = {0};
    9af0:	e9cd 5508 	strd	r5, r5, [sp, #32]
	size_t len = sizeof(tmp_buf) - 1;
    9af4:	9305      	str	r3, [sp, #20]
	if ((at_response == NULL) || (cfg == NULL)) {
    9af6:	2800      	cmp	r0, #0
    9af8:	f000 80cc 	beq.w	9c94 <parse_edrx+0x1b4>
    9afc:	2900      	cmp	r1, #0
    9afe:	f000 80c9 	beq.w	9c94 <parse_edrx+0x1b4>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
    9b02:	2106      	movs	r1, #6
    9b04:	a808      	add	r0, sp, #32
    9b06:	f00f f8d6 	bl	18cb6 <at_params_list_init>
	if (err) {
    9b0a:	4604      	mov	r4, r0
    9b0c:	b178      	cbz	r0, 9b2e <parse_edrx+0x4e>
		LOG_ERR("Could not init AT params list, error: %d", err);
    9b0e:	4b66      	ldr	r3, [pc, #408]	; (9ca8 <parse_edrx+0x1c8>)
    9b10:	9003      	str	r0, [sp, #12]
    9b12:	e9cd 5301 	strd	r5, r3, [sp, #4]
    9b16:	2201      	movs	r2, #1
    9b18:	462b      	mov	r3, r5
    9b1a:	4628      	mov	r0, r5
    9b1c:	4963      	ldr	r1, [pc, #396]	; (9cac <parse_edrx+0x1cc>)
    9b1e:	9500      	str	r5, [sp, #0]
    9b20:	f00f fa1d 	bl	18f5e <z_log_msg_runtime_create.constprop.0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
    9b24:	4620      	mov	r0, r4
    9b26:	b00b      	add	sp, #44	; 0x2c
    9b28:	ecbd 8b02 	vpop	{d8}
    9b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
    9b2e:	4601      	mov	r1, r0
    9b30:	aa08      	add	r2, sp, #32
    9b32:	4638      	mov	r0, r7
    9b34:	f00f f8a6 	bl	18c84 <at_parser_params_from_str>
	if (err) {
    9b38:	4604      	mov	r4, r0
    9b3a:	b170      	cbz	r0, 9b5a <parse_edrx+0x7a>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
    9b3c:	4b5c      	ldr	r3, [pc, #368]	; (9cb0 <parse_edrx+0x1d0>)
    9b3e:	9003      	str	r0, [sp, #12]
		LOG_ERR("Failed to get LTE mode, error: %d", err);
    9b40:	e9cd 5301 	strd	r5, r3, [sp, #4]
    9b44:	462b      	mov	r3, r5
    9b46:	9500      	str	r5, [sp, #0]
    9b48:	2201      	movs	r2, #1
    9b4a:	4618      	mov	r0, r3
    9b4c:	4957      	ldr	r1, [pc, #348]	; (9cac <parse_edrx+0x1cc>)
    9b4e:	f00f fa06 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
    9b52:	a808      	add	r0, sp, #32
    9b54:	f00f f8d9 	bl	18d0a <at_params_list_free>
	return err;
    9b58:	e7e4      	b.n	9b24 <parse_edrx+0x44>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
    9b5a:	2101      	movs	r1, #1
    9b5c:	aa04      	add	r2, sp, #16
    9b5e:	a808      	add	r0, sp, #32
    9b60:	f00f f985 	bl	18e6e <at_params_int_get>
	if (err) {
    9b64:	4604      	mov	r4, r0
    9b66:	b110      	cbz	r0, 9b6e <parse_edrx+0x8e>
		LOG_ERR("Failed to get LTE mode, error: %d", err);
    9b68:	4b52      	ldr	r3, [pc, #328]	; (9cb4 <parse_edrx+0x1d4>)
    9b6a:	9003      	str	r0, [sp, #12]
    9b6c:	e7e8      	b.n	9b40 <parse_edrx+0x60>
	cfg->mode = tmp_int == 0 ? LTE_LC_LTE_MODE_NONE :
    9b6e:	9c04      	ldr	r4, [sp, #16]
    9b70:	b1ac      	cbz	r4, 9b9e <parse_edrx+0xbe>
    9b72:	2c04      	cmp	r4, #4
    9b74:	d018      	beq.n	9ba8 <parse_edrx+0xc8>
    9b76:	2c05      	cmp	r4, #5
    9b78:	bf0c      	ite	eq
    9b7a:	2309      	moveq	r3, #9
    9b7c:	23ff      	movne	r3, #255	; 0xff
    9b7e:	7033      	strb	r3, [r6, #0]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
    9b80:	2103      	movs	r1, #3
    9b82:	ab05      	add	r3, sp, #20
    9b84:	aa06      	add	r2, sp, #24
    9b86:	a808      	add	r0, sp, #32
    9b88:	f00f f99d 	bl	18ec6 <at_params_string_get>
	if (err) {
    9b8c:	4604      	mov	r4, r0
    9b8e:	b168      	cbz	r0, 9bac <parse_edrx+0xcc>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    9b90:	4b49      	ldr	r3, [pc, #292]	; (9cb8 <parse_edrx+0x1d8>)
    9b92:	9003      	str	r0, [sp, #12]
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
    9b94:	9302      	str	r3, [sp, #8]
    9b96:	2300      	movs	r3, #0
    9b98:	e9cd 3300 	strd	r3, r3, [sp]
    9b9c:	e7d4      	b.n	9b48 <parse_edrx+0x68>
		cfg->edrx = 0;
    9b9e:	2300      	movs	r3, #0
	cfg->mode = tmp_int == 0 ? LTE_LC_LTE_MODE_NONE :
    9ba0:	7034      	strb	r4, [r6, #0]
		cfg->edrx = 0;
    9ba2:	6073      	str	r3, [r6, #4]
		cfg->ptw = 0;
    9ba4:	60b3      	str	r3, [r6, #8]
		return 0;
    9ba6:	e7bd      	b.n	9b24 <parse_edrx+0x44>
    9ba8:	2307      	movs	r3, #7
    9baa:	e7e8      	b.n	9b7e <parse_edrx+0x9e>
	tmp_buf[len] = '\0';
    9bac:	9b05      	ldr	r3, [sp, #20]
	idx = strtoul(tmp_buf, NULL, 2);
    9bae:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    9bb0:	3328      	adds	r3, #40	; 0x28
    9bb2:	446b      	add	r3, sp
    9bb4:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
    9bb8:	2202      	movs	r2, #2
    9bba:	a806      	add	r0, sp, #24
    9bbc:	f00c fa12 	bl	15fe4 <strtoul>
	err = get_ptw_multiplier(cfg->mode, &ptw_multiplier);
    9bc0:	7833      	ldrb	r3, [r6, #0]
	idx = strtoul(tmp_buf, NULL, 2);
    9bc2:	b2c0      	uxtb	r0, r0
	switch (lte_mode) {
    9bc4:	2b07      	cmp	r3, #7
    9bc6:	d020      	beq.n	9c0a <parse_edrx+0x12a>
    9bc8:	2b09      	cmp	r3, #9
    9bca:	d111      	bne.n	9bf0 <parse_edrx+0x110>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    9bcc:	280f      	cmp	r0, #15
    9bce:	d93a      	bls.n	9c46 <parse_edrx+0x166>
		LOG_ERR("Failed to get eDRX value, error; %d", err);
    9bd0:	f06f 0315 	mvn.w	r3, #21
    9bd4:	9303      	str	r3, [sp, #12]
    9bd6:	4b39      	ldr	r3, [pc, #228]	; (9cbc <parse_edrx+0x1dc>)
    9bd8:	9302      	str	r3, [sp, #8]
    9bda:	2300      	movs	r3, #0
    9bdc:	e9cd 3300 	strd	r3, r3, [sp]
    9be0:	2201      	movs	r2, #1
    9be2:	4618      	mov	r0, r3
    9be4:	4931      	ldr	r1, [pc, #196]	; (9cac <parse_edrx+0x1cc>)
    9be6:	f00f f9ba 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
		return -ENOTCONN;
    9bea:	f06f 0415 	mvn.w	r4, #21
    9bee:	e7b0      	b.n	9b52 <parse_edrx+0x72>
		LOG_WRN("Active LTE mode could not be determined");
    9bf0:	4b33      	ldr	r3, [pc, #204]	; (9cc0 <parse_edrx+0x1e0>)
    9bf2:	4620      	mov	r0, r4
    9bf4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    9bf8:	9400      	str	r4, [sp, #0]
    9bfa:	4623      	mov	r3, r4
    9bfc:	2202      	movs	r2, #2
    9bfe:	492b      	ldr	r1, [pc, #172]	; (9cac <parse_edrx+0x1cc>)
    9c00:	f00f f9ad 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
		return -ENOTCONN;
    9c04:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		goto clean_exit;
    9c08:	e7a3      	b.n	9b52 <parse_edrx+0x72>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    9c0a:	280f      	cmp	r0, #15
    9c0c:	d8e0      	bhi.n	9bd0 <parse_edrx+0xf0>
		*ptw_multiplier = 1.28;
    9c0e:	ed9f 8a2d 	vldr	s16, [pc, #180]	; 9cc4 <parse_edrx+0x1e4>
		multiplier = edrx_lookup_ltem[idx];
    9c12:	4b2d      	ldr	r3, [pc, #180]	; (9cc8 <parse_edrx+0x1e8>)
    9c14:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    9c18:	b1d8      	cbz	r0, 9c52 <parse_edrx+0x172>
    9c1a:	f7fe fbe7 	bl	83ec <__aeabi_i2d>
    9c1e:	a320      	add	r3, pc, #128	; (adr r3, 9ca0 <parse_edrx+0x1c0>)
    9c20:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c24:	f7fe fc4c 	bl	84c0 <__aeabi_dmul>
    9c28:	f7fe fe5c 	bl	88e4 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
    9c2c:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    9c2e:	6070      	str	r0, [r6, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    9c30:	ab05      	add	r3, sp, #20
    9c32:	aa06      	add	r2, sp, #24
    9c34:	a808      	add	r0, sp, #32
	len = sizeof(tmp_buf) - 1;
    9c36:	9105      	str	r1, [sp, #20]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    9c38:	f00f f945 	bl	18ec6 <at_params_string_get>
	if (err) {
    9c3c:	4604      	mov	r4, r0
    9c3e:	b150      	cbz	r0, 9c56 <parse_edrx+0x176>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
    9c40:	4b22      	ldr	r3, [pc, #136]	; (9ccc <parse_edrx+0x1ec>)
    9c42:	9003      	str	r0, [sp, #12]
    9c44:	e7a6      	b.n	9b94 <parse_edrx+0xb4>
		multiplier = edrx_lookup_nbiot[idx];
    9c46:	4b22      	ldr	r3, [pc, #136]	; (9cd0 <parse_edrx+0x1f0>)
		*ptw_multiplier = 2.56;
    9c48:	ed9f 8a22 	vldr	s16, [pc, #136]	; 9cd4 <parse_edrx+0x1f4>
		multiplier = edrx_lookup_nbiot[idx];
    9c4c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
		break;
    9c50:	e7e2      	b.n	9c18 <parse_edrx+0x138>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    9c52:	4821      	ldr	r0, [pc, #132]	; (9cd8 <parse_edrx+0x1f8>)
    9c54:	e7ea      	b.n	9c2c <parse_edrx+0x14c>
	tmp_buf[len] = '\0';
    9c56:	9b05      	ldr	r3, [sp, #20]
	idx = strtoul(tmp_buf, NULL, 2);
    9c58:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    9c5a:	3328      	adds	r3, #40	; 0x28
    9c5c:	446b      	add	r3, sp
    9c5e:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
    9c62:	2202      	movs	r2, #2
    9c64:	a806      	add	r0, sp, #24
    9c66:	f00c f9bd 	bl	15fe4 <strtoul>
    9c6a:	b2c0      	uxtb	r0, r0
	if (idx > 15) {
    9c6c:	280f      	cmp	r0, #15
    9c6e:	d906      	bls.n	9c7e <parse_edrx+0x19e>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
    9c70:	4b1a      	ldr	r3, [pc, #104]	; (9cdc <parse_edrx+0x1fc>)
    9c72:	9003      	str	r0, [sp, #12]
    9c74:	e9cd 4301 	strd	r4, r3, [sp, #4]
    9c78:	9400      	str	r4, [sp, #0]
    9c7a:	4623      	mov	r3, r4
    9c7c:	e7b0      	b.n	9be0 <parse_edrx+0x100>
	idx += 1;
    9c7e:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
    9c80:	b2c0      	uxtb	r0, r0
    9c82:	ee07 0a90 	vmov	s15, r0
    9c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    9c8a:	ee67 7a88 	vmul.f32	s15, s15, s16
    9c8e:	edc6 7a02 	vstr	s15, [r6, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
    9c92:	e75e      	b.n	9b52 <parse_edrx+0x72>
		return -EINVAL;
    9c94:	f06f 0415 	mvn.w	r4, #21
    9c98:	e744      	b.n	9b24 <parse_edrx+0x44>
    9c9a:	bf00      	nop
    9c9c:	f3af 8000 	nop.w
    9ca0:	47ae147b 	.word	0x47ae147b
    9ca4:	40247ae1 	.word	0x40247ae1
    9ca8:	0001d3e4 	.word	0x0001d3e4
    9cac:	0001b61c 	.word	0x0001b61c
    9cb0:	0001d40d 	.word	0x0001d40d
    9cb4:	0001d439 	.word	0x0001d439
    9cb8:	0001d45b 	.word	0x0001d45b
    9cbc:	0001d4af 	.word	0x0001d4af
    9cc0:	0001d487 	.word	0x0001d487
    9cc4:	3fa3d70a 	.word	0x3fa3d70a
    9cc8:	0001be34 	.word	0x0001be34
    9ccc:	0001d4d3 	.word	0x0001d4d3
    9cd0:	0001be14 	.word	0x0001be14
    9cd4:	4023d70a 	.word	0x4023d70a
    9cd8:	40a3d70a 	.word	0x40a3d70a
    9cdc:	0001d4fe 	.word	0x0001d4fe

00009ce0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    9ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9ce4:	ed2d 8b02 	vpush	{d8}
    9ce8:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    9cea:	ed9f 8b49 	vldr	d8, [pc, #292]	; 9e10 <work_queue_main+0x130>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    9cee:	4e4a      	ldr	r6, [pc, #296]	; (9e18 <work_queue_main+0x138>)
{
    9cf0:	b084      	sub	sp, #16
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    9cf2:	f04f 0320 	mov.w	r3, #32
    9cf6:	f3ef 8711 	mrs	r7, BASEPRI
    9cfa:	f383 8812 	msr	BASEPRI_MAX, r3
    9cfe:	f3bf 8f6f 	isb	sy
    9d02:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    9d06:	b98d      	cbnz	r5, 9d2c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    9d08:	2102      	movs	r1, #2
    9d0a:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
    9d0e:	f010 f9bb 	bl	1a088 <flag_test_and_clear>
    9d12:	2800      	cmp	r0, #0
    9d14:	d143      	bne.n	9d9e <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    9d16:	2300      	movs	r3, #0
    9d18:	ed8d 8b00 	vstr	d8, [sp]
    9d1c:	4639      	mov	r1, r7
    9d1e:	9302      	str	r3, [sp, #8]
    9d20:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    9d24:	483d      	ldr	r0, [pc, #244]	; (9e1c <work_queue_main+0x13c>)
    9d26:	f00b f959 	bl	14fdc <z_sched_wait>
			continue;
    9d2a:	e7e2      	b.n	9cf2 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9d2c:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
	return node->next;
    9d30:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9d32:	4295      	cmp	r5, r2
	list->head = node;
    9d34:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	list->tail = node;
    9d38:	bf08      	it	eq
    9d3a:	f8c4 30cc 	streq.w	r3, [r4, #204]	; 0xcc
	*flagp |= BIT(bit);
    9d3e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    9d42:	f043 0302 	orr.w	r3, r3, #2
    9d46:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	*flagp &= ~BIT(bit);
    9d4a:	68eb      	ldr	r3, [r5, #12]
    9d4c:	f023 0304 	bic.w	r3, r3, #4
    9d50:	f043 0301 	orr.w	r3, r3, #1
    9d54:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    9d56:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    9d58:	f387 8811 	msr	BASEPRI, r7
    9d5c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    9d60:	4628      	mov	r0, r5
    9d62:	4798      	blx	r3
	__asm__ volatile(
    9d64:	f04f 0320 	mov.w	r3, #32
    9d68:	f3ef 8911 	mrs	r9, BASEPRI
    9d6c:	f383 8812 	msr	BASEPRI_MAX, r3
    9d70:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    9d74:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9d76:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    9d78:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9d7c:	d419      	bmi.n	9db2 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    9d7e:	60ea      	str	r2, [r5, #12]
    9d80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    9d84:	f023 0302 	bic.w	r3, r3, #2
    9d88:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	__asm__ volatile(
    9d8c:	f389 8811 	msr	BASEPRI, r9
    9d90:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    9d94:	05db      	lsls	r3, r3, #23
    9d96:	d4ac      	bmi.n	9cf2 <work_queue_main+0x12>
		(void) arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
    9d98:	f00b f81e 	bl	14dd8 <z_impl_k_yield>
}
    9d9c:	e7a9      	b.n	9cf2 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    9d9e:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    9da2:	2200      	movs	r2, #0
    9da4:	2101      	movs	r1, #1
    9da6:	4628      	mov	r0, r5
    9da8:	f010 fa81 	bl	1a2ae <z_sched_wake>
    9dac:	2800      	cmp	r0, #0
    9dae:	d1f8      	bne.n	9da2 <work_queue_main+0xc2>
    9db0:	e7b1      	b.n	9d16 <work_queue_main+0x36>
	return list->head;
    9db2:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    9db4:	f023 0303 	bic.w	r3, r3, #3
    9db8:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    9dba:	2800      	cmp	r0, #0
    9dbc:	d0e0      	beq.n	9d80 <work_queue_main+0xa0>
	return node->next;
    9dbe:	2700      	movs	r7, #0
	parent->next = child;
    9dc0:	46ba      	mov	sl, r7
	return node->next;
    9dc2:	f8d0 8000 	ldr.w	r8, [r0]
    9dc6:	2800      	cmp	r0, #0
    9dc8:	d0da      	beq.n	9d80 <work_queue_main+0xa0>
		if (wc->work == work) {
    9dca:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    9dcc:	4601      	mov	r1, r0
		if (wc->work == work) {
    9dce:	4295      	cmp	r5, r2
    9dd0:	d10b      	bne.n	9dea <work_queue_main+0x10a>
    9dd2:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    9dd4:	b997      	cbnz	r7, 9dfc <work_queue_main+0x11c>
    9dd6:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    9dd8:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    9dda:	4282      	cmp	r2, r0
    9ddc:	d100      	bne.n	9de0 <work_queue_main+0x100>
	list->tail = node;
    9dde:	6071      	str	r1, [r6, #4]
	parent->next = child;
    9de0:	f840 ab08 	str.w	sl, [r0], #8
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    9de4:	f00a fcd2 	bl	1478c <z_impl_k_sem_give>
}
    9de8:	4639      	mov	r1, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    9dea:	f1b8 0f00 	cmp.w	r8, #0
    9dee:	d00b      	beq.n	9e08 <work_queue_main+0x128>
	return node->next;
    9df0:	f8d8 2000 	ldr.w	r2, [r8]
    9df4:	4640      	mov	r0, r8
    9df6:	460f      	mov	r7, r1
    9df8:	4690      	mov	r8, r2
    9dfa:	e7e4      	b.n	9dc6 <work_queue_main+0xe6>
	parent->next = child;
    9dfc:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    9dfe:	6872      	ldr	r2, [r6, #4]
    9e00:	4282      	cmp	r2, r0
	list->tail = node;
    9e02:	bf08      	it	eq
    9e04:	6077      	streq	r7, [r6, #4]
}
    9e06:	e7eb      	b.n	9de0 <work_queue_main+0x100>
    9e08:	4642      	mov	r2, r8
    9e0a:	e7f3      	b.n	9df4 <work_queue_main+0x114>
    9e0c:	f3af 8000 	nop.w
    9e10:	ffffffff 	.word	0xffffffff
    9e14:	ffffffff 	.word	0xffffffff
    9e18:	2000d714 	.word	0x2000d714
    9e1c:	2000ecaf 	.word	0x2000ecaf

00009e20 <_dtoa_r>:
    9e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e24:	6a47      	ldr	r7, [r0, #36]	; 0x24
    9e26:	b097      	sub	sp, #92	; 0x5c
    9e28:	4683      	mov	fp, r0
    9e2a:	9e20      	ldr	r6, [sp, #128]	; 0x80
    9e2c:	9108      	str	r1, [sp, #32]
    9e2e:	920c      	str	r2, [sp, #48]	; 0x30
    9e30:	9312      	str	r3, [sp, #72]	; 0x48
    9e32:	ec55 4b10 	vmov	r4, r5, d0
    9e36:	ed8d 0b00 	vstr	d0, [sp]
    9e3a:	b97f      	cbnz	r7, 9e5c <_dtoa_r+0x3c>
    9e3c:	2010      	movs	r0, #16
    9e3e:	f00b fb03 	bl	15448 <malloc>
    9e42:	4602      	mov	r2, r0
    9e44:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    9e48:	b920      	cbnz	r0, 9e54 <_dtoa_r+0x34>
    9e4a:	4ba7      	ldr	r3, [pc, #668]	; (a0e8 <_dtoa_r+0x2c8>)
    9e4c:	21ea      	movs	r1, #234	; 0xea
    9e4e:	48a7      	ldr	r0, [pc, #668]	; (a0ec <_dtoa_r+0x2cc>)
    9e50:	f00d fafa 	bl	17448 <__assert_func>
    9e54:	e9c0 7701 	strd	r7, r7, [r0, #4]
    9e58:	6007      	str	r7, [r0, #0]
    9e5a:	60c7      	str	r7, [r0, #12]
    9e5c:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9e60:	6819      	ldr	r1, [r3, #0]
    9e62:	b159      	cbz	r1, 9e7c <_dtoa_r+0x5c>
    9e64:	685a      	ldr	r2, [r3, #4]
    9e66:	2301      	movs	r3, #1
    9e68:	4658      	mov	r0, fp
    9e6a:	4093      	lsls	r3, r2
    9e6c:	604a      	str	r2, [r1, #4]
    9e6e:	608b      	str	r3, [r1, #8]
    9e70:	f00c fa42 	bl	162f8 <_Bfree>
    9e74:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9e78:	2200      	movs	r2, #0
    9e7a:	601a      	str	r2, [r3, #0]
    9e7c:	1e2b      	subs	r3, r5, #0
    9e7e:	bfb7      	itett	lt
    9e80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    9e84:	2300      	movge	r3, #0
    9e86:	2201      	movlt	r2, #1
    9e88:	9301      	strlt	r3, [sp, #4]
    9e8a:	bfa8      	it	ge
    9e8c:	6033      	strge	r3, [r6, #0]
    9e8e:	9f01      	ldr	r7, [sp, #4]
    9e90:	4b97      	ldr	r3, [pc, #604]	; (a0f0 <_dtoa_r+0x2d0>)
    9e92:	bfb8      	it	lt
    9e94:	6032      	strlt	r2, [r6, #0]
    9e96:	43bb      	bics	r3, r7
    9e98:	d119      	bne.n	9ece <_dtoa_r+0xae>
    9e9a:	f242 730f 	movw	r3, #9999	; 0x270f
    9e9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9ea0:	6013      	str	r3, [r2, #0]
    9ea2:	f3c7 0313 	ubfx	r3, r7, #0, #20
    9ea6:	4323      	orrs	r3, r4
    9ea8:	f000 85db 	beq.w	aa62 <_dtoa_r+0xc42>
    9eac:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9eae:	b953      	cbnz	r3, 9ec6 <_dtoa_r+0xa6>
    9eb0:	4b90      	ldr	r3, [pc, #576]	; (a0f4 <_dtoa_r+0x2d4>)
    9eb2:	e021      	b.n	9ef8 <_dtoa_r+0xd8>
    9eb4:	4b90      	ldr	r3, [pc, #576]	; (a0f8 <_dtoa_r+0x2d8>)
    9eb6:	9303      	str	r3, [sp, #12]
    9eb8:	3308      	adds	r3, #8
    9eba:	9a21      	ldr	r2, [sp, #132]	; 0x84
    9ebc:	6013      	str	r3, [r2, #0]
    9ebe:	9803      	ldr	r0, [sp, #12]
    9ec0:	b017      	add	sp, #92	; 0x5c
    9ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ec6:	4b8b      	ldr	r3, [pc, #556]	; (a0f4 <_dtoa_r+0x2d4>)
    9ec8:	9303      	str	r3, [sp, #12]
    9eca:	3303      	adds	r3, #3
    9ecc:	e7f5      	b.n	9eba <_dtoa_r+0x9a>
    9ece:	ed9d 7b00 	vldr	d7, [sp]
    9ed2:	2200      	movs	r2, #0
    9ed4:	2300      	movs	r3, #0
    9ed6:	ec51 0b17 	vmov	r0, r1, d7
    9eda:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
    9ede:	f7fe fdc1 	bl	8a64 <__aeabi_dcmpeq>
    9ee2:	4680      	mov	r8, r0
    9ee4:	b150      	cbz	r0, 9efc <_dtoa_r+0xdc>
    9ee6:	2301      	movs	r3, #1
    9ee8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9eea:	6013      	str	r3, [r2, #0]
    9eec:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9eee:	b113      	cbz	r3, 9ef6 <_dtoa_r+0xd6>
    9ef0:	4b82      	ldr	r3, [pc, #520]	; (a0fc <_dtoa_r+0x2dc>)
    9ef2:	9a21      	ldr	r2, [sp, #132]	; 0x84
    9ef4:	6013      	str	r3, [r2, #0]
    9ef6:	4b82      	ldr	r3, [pc, #520]	; (a100 <_dtoa_r+0x2e0>)
    9ef8:	9303      	str	r3, [sp, #12]
    9efa:	e7e0      	b.n	9ebe <_dtoa_r+0x9e>
    9efc:	f3c7 560a 	ubfx	r6, r7, #20, #11
    9f00:	aa14      	add	r2, sp, #80	; 0x50
    9f02:	a915      	add	r1, sp, #84	; 0x54
    9f04:	4658      	mov	r0, fp
    9f06:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
    9f0a:	f00c fc7d 	bl	16808 <__d2b>
    9f0e:	9002      	str	r0, [sp, #8]
    9f10:	2e00      	cmp	r6, #0
    9f12:	d076      	beq.n	a002 <_dtoa_r+0x1e2>
    9f14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9f16:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    9f1a:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    9f1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9f22:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    9f26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    9f2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9f2e:	4619      	mov	r1, r3
    9f30:	2200      	movs	r2, #0
    9f32:	4b74      	ldr	r3, [pc, #464]	; (a104 <_dtoa_r+0x2e4>)
    9f34:	f7fe f90c 	bl	8150 <__aeabi_dsub>
    9f38:	a365      	add	r3, pc, #404	; (adr r3, a0d0 <_dtoa_r+0x2b0>)
    9f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9f3e:	f7fe fabf 	bl	84c0 <__aeabi_dmul>
    9f42:	a365      	add	r3, pc, #404	; (adr r3, a0d8 <_dtoa_r+0x2b8>)
    9f44:	e9d3 2300 	ldrd	r2, r3, [r3]
    9f48:	f7fe f904 	bl	8154 <__adddf3>
    9f4c:	4604      	mov	r4, r0
    9f4e:	460d      	mov	r5, r1
    9f50:	4630      	mov	r0, r6
    9f52:	f7fe fa4b 	bl	83ec <__aeabi_i2d>
    9f56:	a362      	add	r3, pc, #392	; (adr r3, a0e0 <_dtoa_r+0x2c0>)
    9f58:	e9d3 2300 	ldrd	r2, r3, [r3]
    9f5c:	f7fe fab0 	bl	84c0 <__aeabi_dmul>
    9f60:	4602      	mov	r2, r0
    9f62:	460b      	mov	r3, r1
    9f64:	4620      	mov	r0, r4
    9f66:	4629      	mov	r1, r5
    9f68:	f7fe f8f4 	bl	8154 <__adddf3>
    9f6c:	4604      	mov	r4, r0
    9f6e:	460d      	mov	r5, r1
    9f70:	f7fe fdc0 	bl	8af4 <__aeabi_d2iz>
    9f74:	2200      	movs	r2, #0
    9f76:	4607      	mov	r7, r0
    9f78:	2300      	movs	r3, #0
    9f7a:	4620      	mov	r0, r4
    9f7c:	4629      	mov	r1, r5
    9f7e:	f7fe fd7b 	bl	8a78 <__aeabi_dcmplt>
    9f82:	b140      	cbz	r0, 9f96 <_dtoa_r+0x176>
    9f84:	4638      	mov	r0, r7
    9f86:	f7fe fa31 	bl	83ec <__aeabi_i2d>
    9f8a:	4622      	mov	r2, r4
    9f8c:	462b      	mov	r3, r5
    9f8e:	f7fe fd69 	bl	8a64 <__aeabi_dcmpeq>
    9f92:	b900      	cbnz	r0, 9f96 <_dtoa_r+0x176>
    9f94:	3f01      	subs	r7, #1
    9f96:	2f16      	cmp	r7, #22
    9f98:	d852      	bhi.n	a040 <_dtoa_r+0x220>
    9f9a:	4b5b      	ldr	r3, [pc, #364]	; (a108 <_dtoa_r+0x2e8>)
    9f9c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    9fa0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    9fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9fa8:	f7fe fd66 	bl	8a78 <__aeabi_dcmplt>
    9fac:	2800      	cmp	r0, #0
    9fae:	d049      	beq.n	a044 <_dtoa_r+0x224>
    9fb0:	3f01      	subs	r7, #1
    9fb2:	2300      	movs	r3, #0
    9fb4:	9311      	str	r3, [sp, #68]	; 0x44
    9fb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9fb8:	1b9b      	subs	r3, r3, r6
    9fba:	1e5a      	subs	r2, r3, #1
    9fbc:	bf4c      	ite	mi
    9fbe:	f1c3 0301 	rsbmi	r3, r3, #1
    9fc2:	2300      	movpl	r3, #0
    9fc4:	9207      	str	r2, [sp, #28]
    9fc6:	bf45      	ittet	mi
    9fc8:	9306      	strmi	r3, [sp, #24]
    9fca:	2300      	movmi	r3, #0
    9fcc:	9306      	strpl	r3, [sp, #24]
    9fce:	9307      	strmi	r3, [sp, #28]
    9fd0:	2f00      	cmp	r7, #0
    9fd2:	db39      	blt.n	a048 <_dtoa_r+0x228>
    9fd4:	9b07      	ldr	r3, [sp, #28]
    9fd6:	9710      	str	r7, [sp, #64]	; 0x40
    9fd8:	443b      	add	r3, r7
    9fda:	9307      	str	r3, [sp, #28]
    9fdc:	2300      	movs	r3, #0
    9fde:	9309      	str	r3, [sp, #36]	; 0x24
    9fe0:	9b08      	ldr	r3, [sp, #32]
    9fe2:	2b09      	cmp	r3, #9
    9fe4:	d866      	bhi.n	a0b4 <_dtoa_r+0x294>
    9fe6:	2b05      	cmp	r3, #5
    9fe8:	bfc5      	ittet	gt
    9fea:	3b04      	subgt	r3, #4
    9fec:	2400      	movgt	r4, #0
    9fee:	2401      	movle	r4, #1
    9ff0:	9308      	strgt	r3, [sp, #32]
    9ff2:	9b08      	ldr	r3, [sp, #32]
    9ff4:	3b02      	subs	r3, #2
    9ff6:	2b03      	cmp	r3, #3
    9ff8:	d867      	bhi.n	a0ca <_dtoa_r+0x2aa>
    9ffa:	e8df f003 	tbb	[pc, r3]
    9ffe:	3a2d      	.short	0x3a2d
    a000:	5938      	.short	0x5938
    a002:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    a006:	441e      	add	r6, r3
    a008:	f206 4332 	addw	r3, r6, #1074	; 0x432
    a00c:	2b20      	cmp	r3, #32
    a00e:	bfc9      	itett	gt
    a010:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    a014:	f1c3 0320 	rsble	r3, r3, #32
    a018:	409f      	lslgt	r7, r3
    a01a:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    a01e:	bfd8      	it	le
    a020:	fa04 f003 	lslle.w	r0, r4, r3
    a024:	f106 36ff 	add.w	r6, r6, #4294967295
    a028:	bfc4      	itt	gt
    a02a:	fa24 f303 	lsrgt.w	r3, r4, r3
    a02e:	ea47 0003 	orrgt.w	r0, r7, r3
    a032:	f7fe f9cb 	bl	83cc <__aeabi_ui2d>
    a036:	2201      	movs	r2, #1
    a038:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    a03c:	9213      	str	r2, [sp, #76]	; 0x4c
    a03e:	e776      	b.n	9f2e <_dtoa_r+0x10e>
    a040:	2301      	movs	r3, #1
    a042:	e7b7      	b.n	9fb4 <_dtoa_r+0x194>
    a044:	9011      	str	r0, [sp, #68]	; 0x44
    a046:	e7b6      	b.n	9fb6 <_dtoa_r+0x196>
    a048:	9b06      	ldr	r3, [sp, #24]
    a04a:	1bdb      	subs	r3, r3, r7
    a04c:	9306      	str	r3, [sp, #24]
    a04e:	427b      	negs	r3, r7
    a050:	9309      	str	r3, [sp, #36]	; 0x24
    a052:	2300      	movs	r3, #0
    a054:	9310      	str	r3, [sp, #64]	; 0x40
    a056:	e7c3      	b.n	9fe0 <_dtoa_r+0x1c0>
    a058:	2300      	movs	r3, #0
    a05a:	930d      	str	r3, [sp, #52]	; 0x34
    a05c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a05e:	2b00      	cmp	r3, #0
    a060:	dc56      	bgt.n	a110 <_dtoa_r+0x2f0>
    a062:	2301      	movs	r3, #1
    a064:	4699      	mov	r9, r3
    a066:	461a      	mov	r2, r3
    a068:	9304      	str	r3, [sp, #16]
    a06a:	920c      	str	r2, [sp, #48]	; 0x30
    a06c:	e00c      	b.n	a088 <_dtoa_r+0x268>
    a06e:	2301      	movs	r3, #1
    a070:	e7f3      	b.n	a05a <_dtoa_r+0x23a>
    a072:	2300      	movs	r3, #0
    a074:	930d      	str	r3, [sp, #52]	; 0x34
    a076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a078:	18fb      	adds	r3, r7, r3
    a07a:	f103 0901 	add.w	r9, r3, #1
    a07e:	9304      	str	r3, [sp, #16]
    a080:	464b      	mov	r3, r9
    a082:	2b01      	cmp	r3, #1
    a084:	bfb8      	it	lt
    a086:	2301      	movlt	r3, #1
    a088:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    a08c:	2100      	movs	r1, #0
    a08e:	2204      	movs	r2, #4
    a090:	f102 0514 	add.w	r5, r2, #20
    a094:	429d      	cmp	r5, r3
    a096:	d93f      	bls.n	a118 <_dtoa_r+0x2f8>
    a098:	6041      	str	r1, [r0, #4]
    a09a:	4658      	mov	r0, fp
    a09c:	f00c f8ec 	bl	16278 <_Balloc>
    a0a0:	9003      	str	r0, [sp, #12]
    a0a2:	2800      	cmp	r0, #0
    a0a4:	d13b      	bne.n	a11e <_dtoa_r+0x2fe>
    a0a6:	4b19      	ldr	r3, [pc, #100]	; (a10c <_dtoa_r+0x2ec>)
    a0a8:	4602      	mov	r2, r0
    a0aa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    a0ae:	e6ce      	b.n	9e4e <_dtoa_r+0x2e>
    a0b0:	2301      	movs	r3, #1
    a0b2:	e7df      	b.n	a074 <_dtoa_r+0x254>
    a0b4:	2401      	movs	r4, #1
    a0b6:	2300      	movs	r3, #0
    a0b8:	940d      	str	r4, [sp, #52]	; 0x34
    a0ba:	9308      	str	r3, [sp, #32]
    a0bc:	f04f 33ff 	mov.w	r3, #4294967295
    a0c0:	2200      	movs	r2, #0
    a0c2:	4699      	mov	r9, r3
    a0c4:	9304      	str	r3, [sp, #16]
    a0c6:	2312      	movs	r3, #18
    a0c8:	e7cf      	b.n	a06a <_dtoa_r+0x24a>
    a0ca:	2301      	movs	r3, #1
    a0cc:	930d      	str	r3, [sp, #52]	; 0x34
    a0ce:	e7f5      	b.n	a0bc <_dtoa_r+0x29c>
    a0d0:	636f4361 	.word	0x636f4361
    a0d4:	3fd287a7 	.word	0x3fd287a7
    a0d8:	8b60c8b3 	.word	0x8b60c8b3
    a0dc:	3fc68a28 	.word	0x3fc68a28
    a0e0:	509f79fb 	.word	0x509f79fb
    a0e4:	3fd34413 	.word	0x3fd34413
    a0e8:	0001e168 	.word	0x0001e168
    a0ec:	0001e17f 	.word	0x0001e17f
    a0f0:	7ff00000 	.word	0x7ff00000
    a0f4:	0001e164 	.word	0x0001e164
    a0f8:	0001e15b 	.word	0x0001e15b
    a0fc:	0001d373 	.word	0x0001d373
    a100:	0001d372 	.word	0x0001d372
    a104:	3ff80000 	.word	0x3ff80000
    a108:	0001b720 	.word	0x0001b720
    a10c:	0001e1f3 	.word	0x0001e1f3
    a110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a112:	4699      	mov	r9, r3
    a114:	9304      	str	r3, [sp, #16]
    a116:	e7b7      	b.n	a088 <_dtoa_r+0x268>
    a118:	3101      	adds	r1, #1
    a11a:	0052      	lsls	r2, r2, #1
    a11c:	e7b8      	b.n	a090 <_dtoa_r+0x270>
    a11e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    a122:	f1b9 0f0e 	cmp.w	r9, #14
    a126:	9a03      	ldr	r2, [sp, #12]
    a128:	601a      	str	r2, [r3, #0]
    a12a:	d86f      	bhi.n	a20c <_dtoa_r+0x3ec>
    a12c:	2c00      	cmp	r4, #0
    a12e:	d06d      	beq.n	a20c <_dtoa_r+0x3ec>
    a130:	2f00      	cmp	r7, #0
    a132:	dd36      	ble.n	a1a2 <_dtoa_r+0x382>
    a134:	f007 020f 	and.w	r2, r7, #15
    a138:	4ba0      	ldr	r3, [pc, #640]	; (a3bc <_dtoa_r+0x59c>)
    a13a:	05f8      	lsls	r0, r7, #23
    a13c:	ea4f 1427 	mov.w	r4, r7, asr #4
    a140:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a144:	ed93 7b00 	vldr	d7, [r3]
    a148:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    a14c:	d517      	bpl.n	a17e <_dtoa_r+0x35e>
    a14e:	4b9c      	ldr	r3, [pc, #624]	; (a3c0 <_dtoa_r+0x5a0>)
    a150:	f004 040f 	and.w	r4, r4, #15
    a154:	f04f 0803 	mov.w	r8, #3
    a158:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    a15c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a160:	f7fe fad8 	bl	8714 <__aeabi_ddiv>
    a164:	e9cd 0100 	strd	r0, r1, [sp]
    a168:	4d95      	ldr	r5, [pc, #596]	; (a3c0 <_dtoa_r+0x5a0>)
    a16a:	b95c      	cbnz	r4, a184 <_dtoa_r+0x364>
    a16c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    a170:	e9dd 0100 	ldrd	r0, r1, [sp]
    a174:	f7fe face 	bl	8714 <__aeabi_ddiv>
    a178:	e9cd 0100 	strd	r0, r1, [sp]
    a17c:	e02b      	b.n	a1d6 <_dtoa_r+0x3b6>
    a17e:	f04f 0802 	mov.w	r8, #2
    a182:	e7f1      	b.n	a168 <_dtoa_r+0x348>
    a184:	07e1      	lsls	r1, r4, #31
    a186:	d509      	bpl.n	a19c <_dtoa_r+0x37c>
    a188:	f108 0801 	add.w	r8, r8, #1
    a18c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    a190:	e9d5 2300 	ldrd	r2, r3, [r5]
    a194:	f7fe f994 	bl	84c0 <__aeabi_dmul>
    a198:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    a19c:	1064      	asrs	r4, r4, #1
    a19e:	3508      	adds	r5, #8
    a1a0:	e7e3      	b.n	a16a <_dtoa_r+0x34a>
    a1a2:	f000 8107 	beq.w	a3b4 <_dtoa_r+0x594>
    a1a6:	427c      	negs	r4, r7
    a1a8:	4b84      	ldr	r3, [pc, #528]	; (a3bc <_dtoa_r+0x59c>)
    a1aa:	4d85      	ldr	r5, [pc, #532]	; (a3c0 <_dtoa_r+0x5a0>)
    a1ac:	f04f 0802 	mov.w	r8, #2
    a1b0:	f004 020f 	and.w	r2, r4, #15
    a1b4:	1124      	asrs	r4, r4, #4
    a1b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a1ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a1be:	e9d3 2300 	ldrd	r2, r3, [r3]
    a1c2:	f7fe f97d 	bl	84c0 <__aeabi_dmul>
    a1c6:	2300      	movs	r3, #0
    a1c8:	e9cd 0100 	strd	r0, r1, [sp]
    a1cc:	2c00      	cmp	r4, #0
    a1ce:	f040 80e5 	bne.w	a39c <_dtoa_r+0x57c>
    a1d2:	2b00      	cmp	r3, #0
    a1d4:	d1d0      	bne.n	a178 <_dtoa_r+0x358>
    a1d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a1d8:	e9dd 4500 	ldrd	r4, r5, [sp]
    a1dc:	2b00      	cmp	r3, #0
    a1de:	f000 814c 	beq.w	a47a <_dtoa_r+0x65a>
    a1e2:	2200      	movs	r2, #0
    a1e4:	4b77      	ldr	r3, [pc, #476]	; (a3c4 <_dtoa_r+0x5a4>)
    a1e6:	4620      	mov	r0, r4
    a1e8:	4629      	mov	r1, r5
    a1ea:	f7fe fc45 	bl	8a78 <__aeabi_dcmplt>
    a1ee:	2800      	cmp	r0, #0
    a1f0:	f000 8143 	beq.w	a47a <_dtoa_r+0x65a>
    a1f4:	f1b9 0f00 	cmp.w	r9, #0
    a1f8:	f000 813f 	beq.w	a47a <_dtoa_r+0x65a>
    a1fc:	9b04      	ldr	r3, [sp, #16]
    a1fe:	2b00      	cmp	r3, #0
    a200:	f300 80e4 	bgt.w	a3cc <_dtoa_r+0x5ac>
    a204:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
    a208:	e9cd 3400 	strd	r3, r4, [sp]
    a20c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a20e:	2b00      	cmp	r3, #0
    a210:	db02      	blt.n	a218 <_dtoa_r+0x3f8>
    a212:	2f0e      	cmp	r7, #14
    a214:	f340 8242 	ble.w	a69c <_dtoa_r+0x87c>
    a218:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a21a:	2a00      	cmp	r2, #0
    a21c:	f040 8267 	bne.w	a6ee <_dtoa_r+0x8ce>
    a220:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a222:	2500      	movs	r5, #0
    a224:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a228:	f1b8 0f00 	cmp.w	r8, #0
    a22c:	d00d      	beq.n	a24a <_dtoa_r+0x42a>
    a22e:	9b07      	ldr	r3, [sp, #28]
    a230:	2b00      	cmp	r3, #0
    a232:	dd0a      	ble.n	a24a <_dtoa_r+0x42a>
    a234:	4543      	cmp	r3, r8
    a236:	9a06      	ldr	r2, [sp, #24]
    a238:	bfa8      	it	ge
    a23a:	4643      	movge	r3, r8
    a23c:	1ad2      	subs	r2, r2, r3
    a23e:	eba8 0803 	sub.w	r8, r8, r3
    a242:	9206      	str	r2, [sp, #24]
    a244:	9a07      	ldr	r2, [sp, #28]
    a246:	1ad3      	subs	r3, r2, r3
    a248:	9307      	str	r3, [sp, #28]
    a24a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a24c:	b30b      	cbz	r3, a292 <_dtoa_r+0x472>
    a24e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a250:	2b00      	cmp	r3, #0
    a252:	f000 82a6 	beq.w	a7a2 <_dtoa_r+0x982>
    a256:	2c00      	cmp	r4, #0
    a258:	f000 82a1 	beq.w	a79e <_dtoa_r+0x97e>
    a25c:	4629      	mov	r1, r5
    a25e:	4622      	mov	r2, r4
    a260:	4658      	mov	r0, fp
    a262:	f00c f973 	bl	1654c <__pow5mult>
    a266:	9a02      	ldr	r2, [sp, #8]
    a268:	4601      	mov	r1, r0
    a26a:	4605      	mov	r5, r0
    a26c:	4658      	mov	r0, fp
    a26e:	f00c f8c3 	bl	163f8 <__multiply>
    a272:	9902      	ldr	r1, [sp, #8]
    a274:	4606      	mov	r6, r0
    a276:	4658      	mov	r0, fp
    a278:	f00c f83e 	bl	162f8 <_Bfree>
    a27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a27e:	1b1b      	subs	r3, r3, r4
    a280:	9309      	str	r3, [sp, #36]	; 0x24
    a282:	f000 8291 	beq.w	a7a8 <_dtoa_r+0x988>
    a286:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a288:	4631      	mov	r1, r6
    a28a:	4658      	mov	r0, fp
    a28c:	f00c f95e 	bl	1654c <__pow5mult>
    a290:	9002      	str	r0, [sp, #8]
    a292:	2101      	movs	r1, #1
    a294:	4658      	mov	r0, fp
    a296:	f00c f899 	bl	163cc <__i2b>
    a29a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a29c:	4604      	mov	r4, r0
    a29e:	2b00      	cmp	r3, #0
    a2a0:	f000 8284 	beq.w	a7ac <_dtoa_r+0x98c>
    a2a4:	461a      	mov	r2, r3
    a2a6:	4601      	mov	r1, r0
    a2a8:	4658      	mov	r0, fp
    a2aa:	f00c f94f 	bl	1654c <__pow5mult>
    a2ae:	9b08      	ldr	r3, [sp, #32]
    a2b0:	4604      	mov	r4, r0
    a2b2:	2b01      	cmp	r3, #1
    a2b4:	dc03      	bgt.n	a2be <_dtoa_r+0x49e>
    a2b6:	9b00      	ldr	r3, [sp, #0]
    a2b8:	2b00      	cmp	r3, #0
    a2ba:	f000 827c 	beq.w	a7b6 <_dtoa_r+0x996>
    a2be:	2600      	movs	r6, #0
    a2c0:	6923      	ldr	r3, [r4, #16]
    a2c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    a2c6:	6918      	ldr	r0, [r3, #16]
    a2c8:	f010 fcc6 	bl	1ac58 <__hi0bits>
    a2cc:	f1c0 0020 	rsb	r0, r0, #32
    a2d0:	9610      	str	r6, [sp, #64]	; 0x40
    a2d2:	9b07      	ldr	r3, [sp, #28]
    a2d4:	4418      	add	r0, r3
    a2d6:	f010 001f 	ands.w	r0, r0, #31
    a2da:	f000 8291 	beq.w	a800 <_dtoa_r+0x9e0>
    a2de:	f1c0 0320 	rsb	r3, r0, #32
    a2e2:	2b04      	cmp	r3, #4
    a2e4:	f340 8281 	ble.w	a7ea <_dtoa_r+0x9ca>
    a2e8:	f1c0 001c 	rsb	r0, r0, #28
    a2ec:	9b06      	ldr	r3, [sp, #24]
    a2ee:	4403      	add	r3, r0
    a2f0:	4480      	add	r8, r0
    a2f2:	9306      	str	r3, [sp, #24]
    a2f4:	9b07      	ldr	r3, [sp, #28]
    a2f6:	4403      	add	r3, r0
    a2f8:	9307      	str	r3, [sp, #28]
    a2fa:	9b06      	ldr	r3, [sp, #24]
    a2fc:	2b00      	cmp	r3, #0
    a2fe:	dd05      	ble.n	a30c <_dtoa_r+0x4ec>
    a300:	461a      	mov	r2, r3
    a302:	9902      	ldr	r1, [sp, #8]
    a304:	4658      	mov	r0, fp
    a306:	f00c f97b 	bl	16600 <__lshift>
    a30a:	9002      	str	r0, [sp, #8]
    a30c:	9b07      	ldr	r3, [sp, #28]
    a30e:	2b00      	cmp	r3, #0
    a310:	dd05      	ble.n	a31e <_dtoa_r+0x4fe>
    a312:	4621      	mov	r1, r4
    a314:	461a      	mov	r2, r3
    a316:	4658      	mov	r0, fp
    a318:	f00c f972 	bl	16600 <__lshift>
    a31c:	4604      	mov	r4, r0
    a31e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a320:	2b00      	cmp	r3, #0
    a322:	f000 8276 	beq.w	a812 <_dtoa_r+0x9f2>
    a326:	4621      	mov	r1, r4
    a328:	9802      	ldr	r0, [sp, #8]
    a32a:	f010 fce4 	bl	1acf6 <__mcmp>
    a32e:	2800      	cmp	r0, #0
    a330:	f280 826f 	bge.w	a812 <_dtoa_r+0x9f2>
    a334:	2300      	movs	r3, #0
    a336:	220a      	movs	r2, #10
    a338:	9902      	ldr	r1, [sp, #8]
    a33a:	4658      	mov	r0, fp
    a33c:	f00b fffe 	bl	1633c <__multadd>
    a340:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a342:	1e7e      	subs	r6, r7, #1
    a344:	9002      	str	r0, [sp, #8]
    a346:	2b00      	cmp	r3, #0
    a348:	f000 825c 	beq.w	a804 <_dtoa_r+0x9e4>
    a34c:	2300      	movs	r3, #0
    a34e:	4629      	mov	r1, r5
    a350:	220a      	movs	r2, #10
    a352:	4658      	mov	r0, fp
    a354:	f00b fff2 	bl	1633c <__multadd>
    a358:	9b04      	ldr	r3, [sp, #16]
    a35a:	4605      	mov	r5, r0
    a35c:	2b00      	cmp	r3, #0
    a35e:	dc03      	bgt.n	a368 <_dtoa_r+0x548>
    a360:	9b08      	ldr	r3, [sp, #32]
    a362:	2b02      	cmp	r3, #2
    a364:	f300 825e 	bgt.w	a824 <_dtoa_r+0xa04>
    a368:	f1b8 0f00 	cmp.w	r8, #0
    a36c:	dd05      	ble.n	a37a <_dtoa_r+0x55a>
    a36e:	4629      	mov	r1, r5
    a370:	4642      	mov	r2, r8
    a372:	4658      	mov	r0, fp
    a374:	f00c f944 	bl	16600 <__lshift>
    a378:	4605      	mov	r5, r0
    a37a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a37c:	2b00      	cmp	r3, #0
    a37e:	f000 82d0 	beq.w	a922 <_dtoa_r+0xb02>
    a382:	6869      	ldr	r1, [r5, #4]
    a384:	4658      	mov	r0, fp
    a386:	f00b ff77 	bl	16278 <_Balloc>
    a38a:	4607      	mov	r7, r0
    a38c:	2800      	cmp	r0, #0
    a38e:	f040 827f 	bne.w	a890 <_dtoa_r+0xa70>
    a392:	4b0d      	ldr	r3, [pc, #52]	; (a3c8 <_dtoa_r+0x5a8>)
    a394:	4602      	mov	r2, r0
    a396:	f240 21ea 	movw	r1, #746	; 0x2ea
    a39a:	e558      	b.n	9e4e <_dtoa_r+0x2e>
    a39c:	07e2      	lsls	r2, r4, #31
    a39e:	d506      	bpl.n	a3ae <_dtoa_r+0x58e>
    a3a0:	f108 0801 	add.w	r8, r8, #1
    a3a4:	e9d5 2300 	ldrd	r2, r3, [r5]
    a3a8:	f7fe f88a 	bl	84c0 <__aeabi_dmul>
    a3ac:	2301      	movs	r3, #1
    a3ae:	1064      	asrs	r4, r4, #1
    a3b0:	3508      	adds	r5, #8
    a3b2:	e70b      	b.n	a1cc <_dtoa_r+0x3ac>
    a3b4:	f04f 0802 	mov.w	r8, #2
    a3b8:	e70d      	b.n	a1d6 <_dtoa_r+0x3b6>
    a3ba:	bf00      	nop
    a3bc:	0001b720 	.word	0x0001b720
    a3c0:	0001b6f8 	.word	0x0001b6f8
    a3c4:	3ff00000 	.word	0x3ff00000
    a3c8:	0001e1f3 	.word	0x0001e1f3
    a3cc:	4620      	mov	r0, r4
    a3ce:	2200      	movs	r2, #0
    a3d0:	4bac      	ldr	r3, [pc, #688]	; (a684 <_dtoa_r+0x864>)
    a3d2:	4629      	mov	r1, r5
    a3d4:	f7fe f874 	bl	84c0 <__aeabi_dmul>
    a3d8:	1e7e      	subs	r6, r7, #1
    a3da:	f108 0801 	add.w	r8, r8, #1
    a3de:	9c04      	ldr	r4, [sp, #16]
    a3e0:	e9cd 0100 	strd	r0, r1, [sp]
    a3e4:	4640      	mov	r0, r8
    a3e6:	f7fe f801 	bl	83ec <__aeabi_i2d>
    a3ea:	e9dd 2300 	ldrd	r2, r3, [sp]
    a3ee:	f7fe f867 	bl	84c0 <__aeabi_dmul>
    a3f2:	4ba5      	ldr	r3, [pc, #660]	; (a688 <_dtoa_r+0x868>)
    a3f4:	2200      	movs	r2, #0
    a3f6:	f7fd fead 	bl	8154 <__adddf3>
    a3fa:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    a3fe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    a402:	930f      	str	r3, [sp, #60]	; 0x3c
    a404:	2c00      	cmp	r4, #0
    a406:	d13b      	bne.n	a480 <_dtoa_r+0x660>
    a408:	2200      	movs	r2, #0
    a40a:	4ba0      	ldr	r3, [pc, #640]	; (a68c <_dtoa_r+0x86c>)
    a40c:	e9dd 0100 	ldrd	r0, r1, [sp]
    a410:	f7fd fe9e 	bl	8150 <__aeabi_dsub>
    a414:	4602      	mov	r2, r0
    a416:	460b      	mov	r3, r1
    a418:	e9cd 2300 	strd	r2, r3, [sp]
    a41c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    a420:	f7fe fb48 	bl	8ab4 <__aeabi_dcmpgt>
    a424:	2800      	cmp	r0, #0
    a426:	f040 8157 	bne.w	a6d8 <_dtoa_r+0x8b8>
    a42a:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
    a42e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    a432:	e9dd 0100 	ldrd	r0, r1, [sp]
    a436:	f7fe fb1f 	bl	8a78 <__aeabi_dcmplt>
    a43a:	2800      	cmp	r0, #0
    a43c:	f43f aee2 	beq.w	a204 <_dtoa_r+0x3e4>
    a440:	2400      	movs	r4, #0
    a442:	4625      	mov	r5, r4
    a444:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a446:	f8dd a00c 	ldr.w	sl, [sp, #12]
    a44a:	43de      	mvns	r6, r3
    a44c:	f04f 0800 	mov.w	r8, #0
    a450:	4621      	mov	r1, r4
    a452:	4658      	mov	r0, fp
    a454:	f00b ff50 	bl	162f8 <_Bfree>
    a458:	2d00      	cmp	r5, #0
    a45a:	f000 80a9 	beq.w	a5b0 <_dtoa_r+0x790>
    a45e:	f1b8 0f00 	cmp.w	r8, #0
    a462:	d005      	beq.n	a470 <_dtoa_r+0x650>
    a464:	45a8      	cmp	r8, r5
    a466:	d003      	beq.n	a470 <_dtoa_r+0x650>
    a468:	4641      	mov	r1, r8
    a46a:	4658      	mov	r0, fp
    a46c:	f00b ff44 	bl	162f8 <_Bfree>
    a470:	4629      	mov	r1, r5
    a472:	4658      	mov	r0, fp
    a474:	f00b ff40 	bl	162f8 <_Bfree>
    a478:	e09a      	b.n	a5b0 <_dtoa_r+0x790>
    a47a:	463e      	mov	r6, r7
    a47c:	464c      	mov	r4, r9
    a47e:	e7b1      	b.n	a3e4 <_dtoa_r+0x5c4>
    a480:	4b83      	ldr	r3, [pc, #524]	; (a690 <_dtoa_r+0x870>)
    a482:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    a486:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    a48a:	9b03      	ldr	r3, [sp, #12]
    a48c:	441c      	add	r4, r3
    a48e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a490:	2b00      	cmp	r3, #0
    a492:	d04a      	beq.n	a52a <_dtoa_r+0x70a>
    a494:	4602      	mov	r2, r0
    a496:	460b      	mov	r3, r1
    a498:	2000      	movs	r0, #0
    a49a:	497e      	ldr	r1, [pc, #504]	; (a694 <_dtoa_r+0x874>)
    a49c:	f7fe f93a 	bl	8714 <__aeabi_ddiv>
    a4a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    a4a4:	f7fd fe54 	bl	8150 <__aeabi_dsub>
    a4a8:	f8dd a00c 	ldr.w	sl, [sp, #12]
    a4ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    a4b0:	e9dd 0100 	ldrd	r0, r1, [sp]
    a4b4:	f7fe fb1e 	bl	8af4 <__aeabi_d2iz>
    a4b8:	4605      	mov	r5, r0
    a4ba:	f7fd ff97 	bl	83ec <__aeabi_i2d>
    a4be:	4602      	mov	r2, r0
    a4c0:	3530      	adds	r5, #48	; 0x30
    a4c2:	460b      	mov	r3, r1
    a4c4:	e9dd 0100 	ldrd	r0, r1, [sp]
    a4c8:	f7fd fe42 	bl	8150 <__aeabi_dsub>
    a4cc:	f80a 5b01 	strb.w	r5, [sl], #1
    a4d0:	4602      	mov	r2, r0
    a4d2:	460b      	mov	r3, r1
    a4d4:	e9cd 0100 	strd	r0, r1, [sp]
    a4d8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    a4dc:	f7fe faea 	bl	8ab4 <__aeabi_dcmpgt>
    a4e0:	2800      	cmp	r0, #0
    a4e2:	d165      	bne.n	a5b0 <_dtoa_r+0x790>
    a4e4:	2000      	movs	r0, #0
    a4e6:	496c      	ldr	r1, [pc, #432]	; (a698 <_dtoa_r+0x878>)
    a4e8:	e9dd 2300 	ldrd	r2, r3, [sp]
    a4ec:	f7fd fe30 	bl	8150 <__aeabi_dsub>
    a4f0:	4602      	mov	r2, r0
    a4f2:	460b      	mov	r3, r1
    a4f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    a4f8:	f7fe fadc 	bl	8ab4 <__aeabi_dcmpgt>
    a4fc:	2800      	cmp	r0, #0
    a4fe:	f040 810d 	bne.w	a71c <_dtoa_r+0x8fc>
    a502:	45a2      	cmp	sl, r4
    a504:	f000 80ea 	beq.w	a6dc <_dtoa_r+0x8bc>
    a508:	2200      	movs	r2, #0
    a50a:	4b5e      	ldr	r3, [pc, #376]	; (a684 <_dtoa_r+0x864>)
    a50c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    a510:	f7fd ffd6 	bl	84c0 <__aeabi_dmul>
    a514:	2200      	movs	r2, #0
    a516:	4b5b      	ldr	r3, [pc, #364]	; (a684 <_dtoa_r+0x864>)
    a518:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    a51c:	e9dd 0100 	ldrd	r0, r1, [sp]
    a520:	f7fd ffce 	bl	84c0 <__aeabi_dmul>
    a524:	e9cd 0100 	strd	r0, r1, [sp]
    a528:	e7c2      	b.n	a4b0 <_dtoa_r+0x690>
    a52a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    a52e:	f7fd ffc7 	bl	84c0 <__aeabi_dmul>
    a532:	46a0      	mov	r8, r4
    a534:	f8dd a00c 	ldr.w	sl, [sp, #12]
    a538:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    a53c:	e9dd 0100 	ldrd	r0, r1, [sp]
    a540:	f7fe fad8 	bl	8af4 <__aeabi_d2iz>
    a544:	4605      	mov	r5, r0
    a546:	f7fd ff51 	bl	83ec <__aeabi_i2d>
    a54a:	4602      	mov	r2, r0
    a54c:	3530      	adds	r5, #48	; 0x30
    a54e:	460b      	mov	r3, r1
    a550:	e9dd 0100 	ldrd	r0, r1, [sp]
    a554:	f7fd fdfc 	bl	8150 <__aeabi_dsub>
    a558:	f80a 5b01 	strb.w	r5, [sl], #1
    a55c:	4602      	mov	r2, r0
    a55e:	460b      	mov	r3, r1
    a560:	45a2      	cmp	sl, r4
    a562:	e9cd 2300 	strd	r2, r3, [sp]
    a566:	f04f 0200 	mov.w	r2, #0
    a56a:	d123      	bne.n	a5b4 <_dtoa_r+0x794>
    a56c:	4b49      	ldr	r3, [pc, #292]	; (a694 <_dtoa_r+0x874>)
    a56e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    a572:	f7fd fdef 	bl	8154 <__adddf3>
    a576:	4602      	mov	r2, r0
    a578:	460b      	mov	r3, r1
    a57a:	e9dd 0100 	ldrd	r0, r1, [sp]
    a57e:	f7fe fa99 	bl	8ab4 <__aeabi_dcmpgt>
    a582:	2800      	cmp	r0, #0
    a584:	f040 80ca 	bne.w	a71c <_dtoa_r+0x8fc>
    a588:	2000      	movs	r0, #0
    a58a:	4942      	ldr	r1, [pc, #264]	; (a694 <_dtoa_r+0x874>)
    a58c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    a590:	f7fd fdde 	bl	8150 <__aeabi_dsub>
    a594:	4602      	mov	r2, r0
    a596:	460b      	mov	r3, r1
    a598:	e9dd 0100 	ldrd	r0, r1, [sp]
    a59c:	f7fe fa6c 	bl	8a78 <__aeabi_dcmplt>
    a5a0:	b170      	cbz	r0, a5c0 <_dtoa_r+0x7a0>
    a5a2:	46c2      	mov	sl, r8
    a5a4:	f108 38ff 	add.w	r8, r8, #4294967295
    a5a8:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a5ac:	2b30      	cmp	r3, #48	; 0x30
    a5ae:	d0f8      	beq.n	a5a2 <_dtoa_r+0x782>
    a5b0:	4637      	mov	r7, r6
    a5b2:	e055      	b.n	a660 <_dtoa_r+0x840>
    a5b4:	4b33      	ldr	r3, [pc, #204]	; (a684 <_dtoa_r+0x864>)
    a5b6:	f7fd ff83 	bl	84c0 <__aeabi_dmul>
    a5ba:	e9cd 0100 	strd	r0, r1, [sp]
    a5be:	e7bd      	b.n	a53c <_dtoa_r+0x71c>
    a5c0:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
    a5c4:	e9cd 3400 	strd	r3, r4, [sp]
    a5c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a5ca:	2b00      	cmp	r3, #0
    a5cc:	f6ff ae28 	blt.w	a220 <_dtoa_r+0x400>
    a5d0:	2f0e      	cmp	r7, #14
    a5d2:	f73f ae25 	bgt.w	a220 <_dtoa_r+0x400>
    a5d6:	4b2e      	ldr	r3, [pc, #184]	; (a690 <_dtoa_r+0x870>)
    a5d8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a5dc:	ed93 7b00 	vldr	d7, [r3]
    a5e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a5e2:	2b00      	cmp	r3, #0
    a5e4:	ed8d 7b04 	vstr	d7, [sp, #16]
    a5e8:	da02      	bge.n	a5f0 <_dtoa_r+0x7d0>
    a5ea:	f1b9 0f00 	cmp.w	r9, #0
    a5ee:	d064      	beq.n	a6ba <_dtoa_r+0x89a>
    a5f0:	f8dd a00c 	ldr.w	sl, [sp, #12]
    a5f4:	e9dd 4500 	ldrd	r4, r5, [sp]
    a5f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a5fc:	4620      	mov	r0, r4
    a5fe:	4629      	mov	r1, r5
    a600:	f7fe f888 	bl	8714 <__aeabi_ddiv>
    a604:	f7fe fa76 	bl	8af4 <__aeabi_d2iz>
    a608:	4606      	mov	r6, r0
    a60a:	f7fd feef 	bl	83ec <__aeabi_i2d>
    a60e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a612:	f7fd ff55 	bl	84c0 <__aeabi_dmul>
    a616:	4602      	mov	r2, r0
    a618:	4620      	mov	r0, r4
    a61a:	f106 0430 	add.w	r4, r6, #48	; 0x30
    a61e:	460b      	mov	r3, r1
    a620:	4629      	mov	r1, r5
    a622:	f7fd fd95 	bl	8150 <__aeabi_dsub>
    a626:	f80a 4b01 	strb.w	r4, [sl], #1
    a62a:	9c03      	ldr	r4, [sp, #12]
    a62c:	4602      	mov	r2, r0
    a62e:	460b      	mov	r3, r1
    a630:	ebaa 0404 	sub.w	r4, sl, r4
    a634:	45a1      	cmp	r9, r4
    a636:	f040 8082 	bne.w	a73e <_dtoa_r+0x91e>
    a63a:	f7fd fd8b 	bl	8154 <__adddf3>
    a63e:	4604      	mov	r4, r0
    a640:	460d      	mov	r5, r1
    a642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a646:	f7fe fa35 	bl	8ab4 <__aeabi_dcmpgt>
    a64a:	2800      	cmp	r0, #0
    a64c:	d165      	bne.n	a71a <_dtoa_r+0x8fa>
    a64e:	4620      	mov	r0, r4
    a650:	4629      	mov	r1, r5
    a652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a656:	f7fe fa05 	bl	8a64 <__aeabi_dcmpeq>
    a65a:	b108      	cbz	r0, a660 <_dtoa_r+0x840>
    a65c:	07f3      	lsls	r3, r6, #31
    a65e:	d45c      	bmi.n	a71a <_dtoa_r+0x8fa>
    a660:	9902      	ldr	r1, [sp, #8]
    a662:	4658      	mov	r0, fp
    a664:	f00b fe48 	bl	162f8 <_Bfree>
    a668:	2300      	movs	r3, #0
    a66a:	3701      	adds	r7, #1
    a66c:	f88a 3000 	strb.w	r3, [sl]
    a670:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a672:	601f      	str	r7, [r3, #0]
    a674:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a676:	2b00      	cmp	r3, #0
    a678:	f43f ac21 	beq.w	9ebe <_dtoa_r+0x9e>
    a67c:	f8c3 a000 	str.w	sl, [r3]
    a680:	e41d      	b.n	9ebe <_dtoa_r+0x9e>
    a682:	bf00      	nop
    a684:	40240000 	.word	0x40240000
    a688:	401c0000 	.word	0x401c0000
    a68c:	40140000 	.word	0x40140000
    a690:	0001b720 	.word	0x0001b720
    a694:	3fe00000 	.word	0x3fe00000
    a698:	3ff00000 	.word	0x3ff00000
    a69c:	4ba2      	ldr	r3, [pc, #648]	; (a928 <_dtoa_r+0xb08>)
    a69e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a6a2:	ed93 7b00 	vldr	d7, [r3]
    a6a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a6a8:	2b00      	cmp	r3, #0
    a6aa:	ed8d 7b04 	vstr	d7, [sp, #16]
    a6ae:	da9f      	bge.n	a5f0 <_dtoa_r+0x7d0>
    a6b0:	f1b9 0f00 	cmp.w	r9, #0
    a6b4:	dc9c      	bgt.n	a5f0 <_dtoa_r+0x7d0>
    a6b6:	f47f aec3 	bne.w	a440 <_dtoa_r+0x620>
    a6ba:	2200      	movs	r2, #0
    a6bc:	4b9b      	ldr	r3, [pc, #620]	; (a92c <_dtoa_r+0xb0c>)
    a6be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a6c2:	f7fd fefd 	bl	84c0 <__aeabi_dmul>
    a6c6:	e9dd 2300 	ldrd	r2, r3, [sp]
    a6ca:	f7fe f9e9 	bl	8aa0 <__aeabi_dcmpge>
    a6ce:	4604      	mov	r4, r0
    a6d0:	2800      	cmp	r0, #0
    a6d2:	f47f aeb5 	bne.w	a440 <_dtoa_r+0x620>
    a6d6:	463e      	mov	r6, r7
    a6d8:	4625      	mov	r5, r4
    a6da:	e0b4      	b.n	a846 <_dtoa_r+0xa26>
    a6dc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
    a6e0:	e9cd 3400 	strd	r3, r4, [sp]
    a6e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a6e6:	2b00      	cmp	r3, #0
    a6e8:	db01      	blt.n	a6ee <_dtoa_r+0x8ce>
    a6ea:	2f0e      	cmp	r7, #14
    a6ec:	ddd6      	ble.n	a69c <_dtoa_r+0x87c>
    a6ee:	9a08      	ldr	r2, [sp, #32]
    a6f0:	2a01      	cmp	r2, #1
    a6f2:	dc36      	bgt.n	a762 <_dtoa_r+0x942>
    a6f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a6f6:	b382      	cbz	r2, a75a <_dtoa_r+0x93a>
    a6f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
    a6fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a6fe:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a702:	9a06      	ldr	r2, [sp, #24]
    a704:	2101      	movs	r1, #1
    a706:	4658      	mov	r0, fp
    a708:	441a      	add	r2, r3
    a70a:	9206      	str	r2, [sp, #24]
    a70c:	9a07      	ldr	r2, [sp, #28]
    a70e:	441a      	add	r2, r3
    a710:	9207      	str	r2, [sp, #28]
    a712:	f00b fe5b 	bl	163cc <__i2b>
    a716:	4605      	mov	r5, r0
    a718:	e586      	b.n	a228 <_dtoa_r+0x408>
    a71a:	463e      	mov	r6, r7
    a71c:	4653      	mov	r3, sl
    a71e:	469a      	mov	sl, r3
    a720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    a724:	2a39      	cmp	r2, #57	; 0x39
    a726:	d106      	bne.n	a736 <_dtoa_r+0x916>
    a728:	9a03      	ldr	r2, [sp, #12]
    a72a:	429a      	cmp	r2, r3
    a72c:	d1f7      	bne.n	a71e <_dtoa_r+0x8fe>
    a72e:	2230      	movs	r2, #48	; 0x30
    a730:	9903      	ldr	r1, [sp, #12]
    a732:	3601      	adds	r6, #1
    a734:	700a      	strb	r2, [r1, #0]
    a736:	781a      	ldrb	r2, [r3, #0]
    a738:	3201      	adds	r2, #1
    a73a:	701a      	strb	r2, [r3, #0]
    a73c:	e738      	b.n	a5b0 <_dtoa_r+0x790>
    a73e:	2200      	movs	r2, #0
    a740:	4b7b      	ldr	r3, [pc, #492]	; (a930 <_dtoa_r+0xb10>)
    a742:	f7fd febd 	bl	84c0 <__aeabi_dmul>
    a746:	2200      	movs	r2, #0
    a748:	2300      	movs	r3, #0
    a74a:	4604      	mov	r4, r0
    a74c:	460d      	mov	r5, r1
    a74e:	f7fe f989 	bl	8a64 <__aeabi_dcmpeq>
    a752:	2800      	cmp	r0, #0
    a754:	f43f af50 	beq.w	a5f8 <_dtoa_r+0x7d8>
    a758:	e782      	b.n	a660 <_dtoa_r+0x840>
    a75a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a75c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    a760:	e7cc      	b.n	a6fc <_dtoa_r+0x8dc>
    a762:	f109 34ff 	add.w	r4, r9, #4294967295
    a766:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a768:	42a3      	cmp	r3, r4
    a76a:	db08      	blt.n	a77e <_dtoa_r+0x95e>
    a76c:	f1b9 0f00 	cmp.w	r9, #0
    a770:	eba3 0404 	sub.w	r4, r3, r4
    a774:	db0e      	blt.n	a794 <_dtoa_r+0x974>
    a776:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a77a:	464b      	mov	r3, r9
    a77c:	e7c1      	b.n	a702 <_dtoa_r+0x8e2>
    a77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a780:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a782:	1ae3      	subs	r3, r4, r3
    a784:	9409      	str	r4, [sp, #36]	; 0x24
    a786:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a78a:	2400      	movs	r4, #0
    a78c:	441a      	add	r2, r3
    a78e:	464b      	mov	r3, r9
    a790:	9210      	str	r2, [sp, #64]	; 0x40
    a792:	e7b6      	b.n	a702 <_dtoa_r+0x8e2>
    a794:	9b06      	ldr	r3, [sp, #24]
    a796:	eba3 0809 	sub.w	r8, r3, r9
    a79a:	2300      	movs	r3, #0
    a79c:	e7b1      	b.n	a702 <_dtoa_r+0x8e2>
    a79e:	9e02      	ldr	r6, [sp, #8]
    a7a0:	e571      	b.n	a286 <_dtoa_r+0x466>
    a7a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a7a4:	9902      	ldr	r1, [sp, #8]
    a7a6:	e570      	b.n	a28a <_dtoa_r+0x46a>
    a7a8:	9602      	str	r6, [sp, #8]
    a7aa:	e572      	b.n	a292 <_dtoa_r+0x472>
    a7ac:	9b08      	ldr	r3, [sp, #32]
    a7ae:	2b01      	cmp	r3, #1
    a7b0:	dc17      	bgt.n	a7e2 <_dtoa_r+0x9c2>
    a7b2:	9b00      	ldr	r3, [sp, #0]
    a7b4:	b9ab      	cbnz	r3, a7e2 <_dtoa_r+0x9c2>
    a7b6:	9b01      	ldr	r3, [sp, #4]
    a7b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a7bc:	b99b      	cbnz	r3, a7e6 <_dtoa_r+0x9c6>
    a7be:	9b01      	ldr	r3, [sp, #4]
    a7c0:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    a7c4:	0d36      	lsrs	r6, r6, #20
    a7c6:	0536      	lsls	r6, r6, #20
    a7c8:	b136      	cbz	r6, a7d8 <_dtoa_r+0x9b8>
    a7ca:	9b06      	ldr	r3, [sp, #24]
    a7cc:	2601      	movs	r6, #1
    a7ce:	3301      	adds	r3, #1
    a7d0:	9306      	str	r3, [sp, #24]
    a7d2:	9b07      	ldr	r3, [sp, #28]
    a7d4:	3301      	adds	r3, #1
    a7d6:	9307      	str	r3, [sp, #28]
    a7d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a7da:	2b00      	cmp	r3, #0
    a7dc:	f47f ad70 	bne.w	a2c0 <_dtoa_r+0x4a0>
    a7e0:	9610      	str	r6, [sp, #64]	; 0x40
    a7e2:	2001      	movs	r0, #1
    a7e4:	e575      	b.n	a2d2 <_dtoa_r+0x4b2>
    a7e6:	2600      	movs	r6, #0
    a7e8:	e7f6      	b.n	a7d8 <_dtoa_r+0x9b8>
    a7ea:	f43f ad86 	beq.w	a2fa <_dtoa_r+0x4da>
    a7ee:	331c      	adds	r3, #28
    a7f0:	9a06      	ldr	r2, [sp, #24]
    a7f2:	441a      	add	r2, r3
    a7f4:	4498      	add	r8, r3
    a7f6:	9206      	str	r2, [sp, #24]
    a7f8:	9a07      	ldr	r2, [sp, #28]
    a7fa:	441a      	add	r2, r3
    a7fc:	9207      	str	r2, [sp, #28]
    a7fe:	e57c      	b.n	a2fa <_dtoa_r+0x4da>
    a800:	4603      	mov	r3, r0
    a802:	e7f4      	b.n	a7ee <_dtoa_r+0x9ce>
    a804:	9b04      	ldr	r3, [sp, #16]
    a806:	2b00      	cmp	r3, #0
    a808:	dc2b      	bgt.n	a862 <_dtoa_r+0xa42>
    a80a:	9b08      	ldr	r3, [sp, #32]
    a80c:	2b02      	cmp	r3, #2
    a80e:	dc09      	bgt.n	a824 <_dtoa_r+0xa04>
    a810:	e027      	b.n	a862 <_dtoa_r+0xa42>
    a812:	f1b9 0f00 	cmp.w	r9, #0
    a816:	dc1d      	bgt.n	a854 <_dtoa_r+0xa34>
    a818:	9b08      	ldr	r3, [sp, #32]
    a81a:	2b02      	cmp	r3, #2
    a81c:	dd1a      	ble.n	a854 <_dtoa_r+0xa34>
    a81e:	463e      	mov	r6, r7
    a820:	f8cd 9010 	str.w	r9, [sp, #16]
    a824:	9b04      	ldr	r3, [sp, #16]
    a826:	2b00      	cmp	r3, #0
    a828:	f47f ae0c 	bne.w	a444 <_dtoa_r+0x624>
    a82c:	4621      	mov	r1, r4
    a82e:	2205      	movs	r2, #5
    a830:	4658      	mov	r0, fp
    a832:	f00b fd83 	bl	1633c <__multadd>
    a836:	4601      	mov	r1, r0
    a838:	4604      	mov	r4, r0
    a83a:	9802      	ldr	r0, [sp, #8]
    a83c:	f010 fa5b 	bl	1acf6 <__mcmp>
    a840:	2800      	cmp	r0, #0
    a842:	f77f adff 	ble.w	a444 <_dtoa_r+0x624>
    a846:	f8dd a00c 	ldr.w	sl, [sp, #12]
    a84a:	2331      	movs	r3, #49	; 0x31
    a84c:	3601      	adds	r6, #1
    a84e:	f80a 3b01 	strb.w	r3, [sl], #1
    a852:	e5fb      	b.n	a44c <_dtoa_r+0x62c>
    a854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a856:	463e      	mov	r6, r7
    a858:	f8cd 9010 	str.w	r9, [sp, #16]
    a85c:	2b00      	cmp	r3, #0
    a85e:	f47f ad83 	bne.w	a368 <_dtoa_r+0x548>
    a862:	9f03      	ldr	r7, [sp, #12]
    a864:	4621      	mov	r1, r4
    a866:	9802      	ldr	r0, [sp, #8]
    a868:	f010 f934 	bl	1aad4 <quorem>
    a86c:	9b03      	ldr	r3, [sp, #12]
    a86e:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a872:	9a04      	ldr	r2, [sp, #16]
    a874:	f807 9b01 	strb.w	r9, [r7], #1
    a878:	1afb      	subs	r3, r7, r3
    a87a:	429a      	cmp	r2, r3
    a87c:	f340 80cb 	ble.w	aa16 <_dtoa_r+0xbf6>
    a880:	2300      	movs	r3, #0
    a882:	220a      	movs	r2, #10
    a884:	9902      	ldr	r1, [sp, #8]
    a886:	4658      	mov	r0, fp
    a888:	f00b fd58 	bl	1633c <__multadd>
    a88c:	9002      	str	r0, [sp, #8]
    a88e:	e7e9      	b.n	a864 <_dtoa_r+0xa44>
    a890:	692a      	ldr	r2, [r5, #16]
    a892:	f105 010c 	add.w	r1, r5, #12
    a896:	300c      	adds	r0, #12
    a898:	3202      	adds	r2, #2
    a89a:	0092      	lsls	r2, r2, #2
    a89c:	f00f ff22 	bl	1a6e4 <memcpy>
    a8a0:	2201      	movs	r2, #1
    a8a2:	4639      	mov	r1, r7
    a8a4:	4658      	mov	r0, fp
    a8a6:	f00b feab 	bl	16600 <__lshift>
    a8aa:	9b03      	ldr	r3, [sp, #12]
    a8ac:	46a8      	mov	r8, r5
    a8ae:	4605      	mov	r5, r0
    a8b0:	f103 0a01 	add.w	sl, r3, #1
    a8b4:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    a8b8:	4413      	add	r3, r2
    a8ba:	9307      	str	r3, [sp, #28]
    a8bc:	9b00      	ldr	r3, [sp, #0]
    a8be:	f003 0301 	and.w	r3, r3, #1
    a8c2:	9309      	str	r3, [sp, #36]	; 0x24
    a8c4:	f10a 33ff 	add.w	r3, sl, #4294967295
    a8c8:	4621      	mov	r1, r4
    a8ca:	9802      	ldr	r0, [sp, #8]
    a8cc:	9304      	str	r3, [sp, #16]
    a8ce:	f010 f901 	bl	1aad4 <quorem>
    a8d2:	4641      	mov	r1, r8
    a8d4:	9006      	str	r0, [sp, #24]
    a8d6:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a8da:	9802      	ldr	r0, [sp, #8]
    a8dc:	f010 fa0b 	bl	1acf6 <__mcmp>
    a8e0:	462a      	mov	r2, r5
    a8e2:	4621      	mov	r1, r4
    a8e4:	4607      	mov	r7, r0
    a8e6:	4658      	mov	r0, fp
    a8e8:	f00b fef6 	bl	166d8 <__mdiff>
    a8ec:	68c2      	ldr	r2, [r0, #12]
    a8ee:	4601      	mov	r1, r0
    a8f0:	b302      	cbz	r2, a934 <_dtoa_r+0xb14>
    a8f2:	4658      	mov	r0, fp
    a8f4:	f00b fd00 	bl	162f8 <_Bfree>
    a8f8:	2f00      	cmp	r7, #0
    a8fa:	da3a      	bge.n	a972 <_dtoa_r+0xb52>
    a8fc:	2201      	movs	r2, #1
    a8fe:	9902      	ldr	r1, [sp, #8]
    a900:	4658      	mov	r0, fp
    a902:	f00b fe7d 	bl	16600 <__lshift>
    a906:	4621      	mov	r1, r4
    a908:	9002      	str	r0, [sp, #8]
    a90a:	f010 f9f4 	bl	1acf6 <__mcmp>
    a90e:	2800      	cmp	r0, #0
    a910:	dc03      	bgt.n	a91a <_dtoa_r+0xafa>
    a912:	d129      	bne.n	a968 <_dtoa_r+0xb48>
    a914:	f019 0f01 	tst.w	r9, #1
    a918:	d026      	beq.n	a968 <_dtoa_r+0xb48>
    a91a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a91e:	d11d      	bne.n	a95c <_dtoa_r+0xb3c>
    a920:	e032      	b.n	a988 <_dtoa_r+0xb68>
    a922:	4628      	mov	r0, r5
    a924:	e7c1      	b.n	a8aa <_dtoa_r+0xa8a>
    a926:	bf00      	nop
    a928:	0001b720 	.word	0x0001b720
    a92c:	40140000 	.word	0x40140000
    a930:	40240000 	.word	0x40240000
    a934:	900a      	str	r0, [sp, #40]	; 0x28
    a936:	9802      	ldr	r0, [sp, #8]
    a938:	f010 f9dd 	bl	1acf6 <__mcmp>
    a93c:	990a      	ldr	r1, [sp, #40]	; 0x28
    a93e:	900c      	str	r0, [sp, #48]	; 0x30
    a940:	4658      	mov	r0, fp
    a942:	f00b fcd9 	bl	162f8 <_Bfree>
    a946:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a948:	bb5a      	cbnz	r2, a9a2 <_dtoa_r+0xb82>
    a94a:	9b08      	ldr	r3, [sp, #32]
    a94c:	b953      	cbnz	r3, a964 <_dtoa_r+0xb44>
    a94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a950:	b943      	cbnz	r3, a964 <_dtoa_r+0xb44>
    a952:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a956:	d017      	beq.n	a988 <_dtoa_r+0xb68>
    a958:	2f00      	cmp	r7, #0
    a95a:	dd05      	ble.n	a968 <_dtoa_r+0xb48>
    a95c:	9b06      	ldr	r3, [sp, #24]
    a95e:	f103 0931 	add.w	r9, r3, #49	; 0x31
    a962:	e001      	b.n	a968 <_dtoa_r+0xb48>
    a964:	2f00      	cmp	r7, #0
    a966:	da2a      	bge.n	a9be <_dtoa_r+0xb9e>
    a968:	f8dd a010 	ldr.w	sl, [sp, #16]
    a96c:	f80a 9b01 	strb.w	r9, [sl], #1
    a970:	e56e      	b.n	a450 <_dtoa_r+0x630>
    a972:	9b08      	ldr	r3, [sp, #32]
    a974:	433b      	orrs	r3, r7
    a976:	d104      	bne.n	a982 <_dtoa_r+0xb62>
    a978:	9b00      	ldr	r3, [sp, #0]
    a97a:	f003 0301 	and.w	r3, r3, #1
    a97e:	2b00      	cmp	r3, #0
    a980:	d0bc      	beq.n	a8fc <_dtoa_r+0xadc>
    a982:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a986:	d136      	bne.n	a9f6 <_dtoa_r+0xbd6>
    a988:	9f04      	ldr	r7, [sp, #16]
    a98a:	2339      	movs	r3, #57	; 0x39
    a98c:	f807 3b01 	strb.w	r3, [r7], #1
    a990:	46ba      	mov	sl, r7
    a992:	3f01      	subs	r7, #1
    a994:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a998:	2b39      	cmp	r3, #57	; 0x39
    a99a:	d05a      	beq.n	aa52 <_dtoa_r+0xc32>
    a99c:	3301      	adds	r3, #1
    a99e:	703b      	strb	r3, [r7, #0]
    a9a0:	e556      	b.n	a450 <_dtoa_r+0x630>
    a9a2:	2f00      	cmp	r7, #0
    a9a4:	db06      	blt.n	a9b4 <_dtoa_r+0xb94>
    a9a6:	9b08      	ldr	r3, [sp, #32]
    a9a8:	433b      	orrs	r3, r7
    a9aa:	d106      	bne.n	a9ba <_dtoa_r+0xb9a>
    a9ac:	9b00      	ldr	r3, [sp, #0]
    a9ae:	f003 0301 	and.w	r3, r3, #1
    a9b2:	b913      	cbnz	r3, a9ba <_dtoa_r+0xb9a>
    a9b4:	2a00      	cmp	r2, #0
    a9b6:	dca1      	bgt.n	a8fc <_dtoa_r+0xadc>
    a9b8:	e7d6      	b.n	a968 <_dtoa_r+0xb48>
    a9ba:	2a00      	cmp	r2, #0
    a9bc:	dce1      	bgt.n	a982 <_dtoa_r+0xb62>
    a9be:	9b07      	ldr	r3, [sp, #28]
    a9c0:	4657      	mov	r7, sl
    a9c2:	f80a 9c01 	strb.w	r9, [sl, #-1]
    a9c6:	4553      	cmp	r3, sl
    a9c8:	d02e      	beq.n	aa28 <_dtoa_r+0xc08>
    a9ca:	2300      	movs	r3, #0
    a9cc:	220a      	movs	r2, #10
    a9ce:	9902      	ldr	r1, [sp, #8]
    a9d0:	4658      	mov	r0, fp
    a9d2:	f00b fcb3 	bl	1633c <__multadd>
    a9d6:	45a8      	cmp	r8, r5
    a9d8:	9002      	str	r0, [sp, #8]
    a9da:	f04f 0300 	mov.w	r3, #0
    a9de:	f04f 020a 	mov.w	r2, #10
    a9e2:	4641      	mov	r1, r8
    a9e4:	4658      	mov	r0, fp
    a9e6:	d10b      	bne.n	aa00 <_dtoa_r+0xbe0>
    a9e8:	f00b fca8 	bl	1633c <__multadd>
    a9ec:	4680      	mov	r8, r0
    a9ee:	4605      	mov	r5, r0
    a9f0:	f10a 0a01 	add.w	sl, sl, #1
    a9f4:	e766      	b.n	a8c4 <_dtoa_r+0xaa4>
    a9f6:	f8dd a010 	ldr.w	sl, [sp, #16]
    a9fa:	f109 0901 	add.w	r9, r9, #1
    a9fe:	e7b5      	b.n	a96c <_dtoa_r+0xb4c>
    aa00:	f00b fc9c 	bl	1633c <__multadd>
    aa04:	4629      	mov	r1, r5
    aa06:	4680      	mov	r8, r0
    aa08:	2300      	movs	r3, #0
    aa0a:	220a      	movs	r2, #10
    aa0c:	4658      	mov	r0, fp
    aa0e:	f00b fc95 	bl	1633c <__multadd>
    aa12:	4605      	mov	r5, r0
    aa14:	e7ec      	b.n	a9f0 <_dtoa_r+0xbd0>
    aa16:	9b04      	ldr	r3, [sp, #16]
    aa18:	f04f 0800 	mov.w	r8, #0
    aa1c:	2b00      	cmp	r3, #0
    aa1e:	bfcc      	ite	gt
    aa20:	461f      	movgt	r7, r3
    aa22:	2701      	movle	r7, #1
    aa24:	9b03      	ldr	r3, [sp, #12]
    aa26:	441f      	add	r7, r3
    aa28:	2201      	movs	r2, #1
    aa2a:	9902      	ldr	r1, [sp, #8]
    aa2c:	4658      	mov	r0, fp
    aa2e:	f00b fde7 	bl	16600 <__lshift>
    aa32:	4621      	mov	r1, r4
    aa34:	9002      	str	r0, [sp, #8]
    aa36:	f010 f95e 	bl	1acf6 <__mcmp>
    aa3a:	2800      	cmp	r0, #0
    aa3c:	dca8      	bgt.n	a990 <_dtoa_r+0xb70>
    aa3e:	d102      	bne.n	aa46 <_dtoa_r+0xc26>
    aa40:	f019 0f01 	tst.w	r9, #1
    aa44:	d1a4      	bne.n	a990 <_dtoa_r+0xb70>
    aa46:	46ba      	mov	sl, r7
    aa48:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    aa4c:	2b30      	cmp	r3, #48	; 0x30
    aa4e:	d0fa      	beq.n	aa46 <_dtoa_r+0xc26>
    aa50:	e4fe      	b.n	a450 <_dtoa_r+0x630>
    aa52:	9b03      	ldr	r3, [sp, #12]
    aa54:	42bb      	cmp	r3, r7
    aa56:	d19b      	bne.n	a990 <_dtoa_r+0xb70>
    aa58:	2331      	movs	r3, #49	; 0x31
    aa5a:	9a03      	ldr	r2, [sp, #12]
    aa5c:	3601      	adds	r6, #1
    aa5e:	7013      	strb	r3, [r2, #0]
    aa60:	e4f6      	b.n	a450 <_dtoa_r+0x630>
    aa62:	9b21      	ldr	r3, [sp, #132]	; 0x84
    aa64:	2b00      	cmp	r3, #0
    aa66:	f47f aa25 	bne.w	9eb4 <_dtoa_r+0x94>
    aa6a:	4b01      	ldr	r3, [pc, #4]	; (aa70 <_dtoa_r+0xc50>)
    aa6c:	f7ff ba44 	b.w	9ef8 <_dtoa_r+0xd8>
    aa70:	0001e15b 	.word	0x0001e15b

0000aa74 <button_pressed_callback>:
static struct gpio_callback button_cb_data;
static struct gpio_dt_spec led = GPIO_DT_SPEC_GET_OR(DT_ALIAS(led0), gpios, {0});

static bool isButtonPressed = false;
void button_pressed_callback(const struct device *dev, struct gpio_callback *cb, uint32_t pins) {
	isButtonPressed = true;
    aa74:	2201      	movs	r2, #1
    aa76:	4b01      	ldr	r3, [pc, #4]	; (aa7c <button_pressed_callback+0x8>)
    aa78:	701a      	strb	r2, [r3, #0]
}
    aa7a:	4770      	bx	lr
    aa7c:	2000d73e 	.word	0x2000d73e

0000aa80 <gnss_event_handler>:
	switch (event) {
    aa80:	2801      	cmp	r0, #1
{
    aa82:	b507      	push	{r0, r1, r2, lr}
    aa84:	4602      	mov	r2, r0
	switch (event) {
    aa86:	d004      	beq.n	aa92 <gnss_event_handler+0x12>
    aa88:	2803      	cmp	r0, #3
    aa8a:	d00e      	beq.n	aaaa <gnss_event_handler+0x2a>
}
    aa8c:	b003      	add	sp, #12
    aa8e:	f85d fb04 	ldr.w	pc, [sp], #4
		retval = nrf_modem_gnss_read(&last_pvt, sizeof(last_pvt), NRF_MODEM_GNSS_DATA_PVT);
    aa92:	21e8      	movs	r1, #232	; 0xe8
    aa94:	4812      	ldr	r0, [pc, #72]	; (aae0 <gnss_event_handler+0x60>)
    aa96:	f008 fd77 	bl	13588 <nrf_modem_gnss_read>
		if (retval == 0) {
    aa9a:	2800      	cmp	r0, #0
    aa9c:	d1f6      	bne.n	aa8c <gnss_event_handler+0xc>
	z_impl_k_sem_give(sem);
    aa9e:	4811      	ldr	r0, [pc, #68]	; (aae4 <gnss_event_handler+0x64>)
}
    aaa0:	b003      	add	sp, #12
    aaa2:	f85d eb04 	ldr.w	lr, [sp], #4
    aaa6:	f009 be71 	b.w	1478c <z_impl_k_sem_give>
		nmea_data = k_malloc(sizeof(struct nrf_modem_gnss_nmea_data_frame));
    aaaa:	2053      	movs	r0, #83	; 0x53
    aaac:	f00f fde6 	bl	1a67c <k_malloc>
    aab0:	9001      	str	r0, [sp, #4]
		if (nmea_data == NULL) {
    aab2:	b918      	cbnz	r0, aabc <gnss_event_handler+0x3c>
			printk("Failed to allocate memory for NMEA\n");
    aab4:	480c      	ldr	r0, [pc, #48]	; (aae8 <gnss_event_handler+0x68>)
    aab6:	f00c fe16 	bl	176e6 <printk>
			break;
    aaba:	e7e7      	b.n	aa8c <gnss_event_handler+0xc>
		retval = nrf_modem_gnss_read(nmea_data,
    aabc:	2202      	movs	r2, #2
    aabe:	2153      	movs	r1, #83	; 0x53
    aac0:	f008 fd62 	bl	13588 <nrf_modem_gnss_read>
		if (retval == 0) {
    aac4:	b118      	cbz	r0, aace <gnss_event_handler+0x4e>
			k_free(nmea_data);
    aac6:	9801      	ldr	r0, [sp, #4]
    aac8:	f00f fdd1 	bl	1a66e <k_free>
    aacc:	e7de      	b.n	aa8c <gnss_event_handler+0xc>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
    aace:	2200      	movs	r2, #0
    aad0:	2300      	movs	r3, #0
    aad2:	4806      	ldr	r0, [pc, #24]	; (aaec <gnss_event_handler+0x6c>)
    aad4:	a901      	add	r1, sp, #4
    aad6:	f009 fcbd 	bl	14454 <z_impl_k_msgq_put>
		if (retval != 0) {
    aada:	2800      	cmp	r0, #0
    aadc:	d1f3      	bne.n	aac6 <gnss_event_handler+0x46>
    aade:	e7d5      	b.n	aa8c <gnss_event_handler+0xc>
    aae0:	2000cab8 	.word	0x2000cab8
    aae4:	2000ca44 	.word	0x2000ca44
    aae8:	0001be54 	.word	0x0001be54
    aaec:	2000ca14 	.word	0x2000ca14

0000aaf0 <gpio_pin_set_dt.constprop.0.isra.0>:
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    aaf0:	2101      	movs	r1, #1
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    aaf2:	4603      	mov	r3, r0
{
	return gpio_pin_set(spec->port, spec->pin, value);
    aaf4:	4a08      	ldr	r2, [pc, #32]	; (ab18 <gpio_pin_set_dt.constprop.0.isra.0+0x28>)
    aaf6:	6810      	ldr	r0, [r2, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    aaf8:	7912      	ldrb	r2, [r2, #4]
    aafa:	4091      	lsls	r1, r2
    aafc:	6902      	ldr	r2, [r0, #16]
    aafe:	6812      	ldr	r2, [r2, #0]
    ab00:	4211      	tst	r1, r2
		value = (value != 0) ? 0 : 1;
    ab02:	bf18      	it	ne
    ab04:	f083 0301 	eorne.w	r3, r3, #1
	if (value != 0)	{
    ab08:	b113      	cbz	r3, ab10 <gpio_pin_set_dt.constprop.0.isra.0+0x20>
	return api->port_set_bits_raw(port, pins);
    ab0a:	6883      	ldr	r3, [r0, #8]
    ab0c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    ab0e:	4718      	bx	r3
    ab10:	6883      	ldr	r3, [r0, #8]
    ab12:	691b      	ldr	r3, [r3, #16]
    ab14:	e7fb      	b.n	ab0e <gpio_pin_set_dt.constprop.0.isra.0+0x1e>
    ab16:	bf00      	nop
    ab18:	2000c580 	.word	0x2000c580

0000ab1c <my_button_init>:
 * @brief inits and configure the button
 * 
 * @param button 
 * @return int 0 if OK, negative values for some error
 */
int my_button_init(struct gpio_dt_spec* button){
    ab1c:	b570      	push	{r4, r5, r6, lr}
    ab1e:	4604      	mov	r4, r0
    ab20:	6800      	ldr	r0, [r0, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    ab22:	f00f f965 	bl	19df0 <z_device_is_ready>

	if (!gpio_is_ready_dt(button)) {
    ab26:	b938      	cbnz	r0, ab38 <my_button_init+0x1c>
		printk("Error: button device %s is not ready\n",
		       button->port->name);
    ab28:	6823      	ldr	r3, [r4, #0]
		printk("Error: button device %s is not ready\n",
    ab2a:	481a      	ldr	r0, [pc, #104]	; (ab94 <my_button_init+0x78>)
    ab2c:	6819      	ldr	r1, [r3, #0]
    ab2e:	f00c fdda 	bl	176e6 <printk>
		return -1;
    ab32:	f04f 30ff 	mov.w	r0, #4294967295
			ret, button->port->name, button->pin);
		return -3;
	}
	return 0;
	
}
    ab36:	bd70      	pop	{r4, r5, r6, pc}
	ret = gpio_pin_configure_dt(button, GPIO_INPUT);
    ab38:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    ab3c:	4620      	mov	r0, r4
    ab3e:	f00c fd6b 	bl	17618 <gpio_pin_configure_dt>
	if (ret != 0) {
    ab42:	4601      	mov	r1, r0
    ab44:	7925      	ldrb	r5, [r4, #4]
    ab46:	6820      	ldr	r0, [r4, #0]
    ab48:	b139      	cbz	r1, ab5a <my_button_init+0x3e>
		printk("Error %d: failed to configure %s pin %d\n",
    ab4a:	6802      	ldr	r2, [r0, #0]
    ab4c:	462b      	mov	r3, r5
    ab4e:	4812      	ldr	r0, [pc, #72]	; (ab98 <my_button_init+0x7c>)
    ab50:	f00c fdc9 	bl	176e6 <printk>
		return -2;
    ab54:	f06f 0001 	mvn.w	r0, #1
    ab58:	e7ed      	b.n	ab36 <my_button_init+0x1a>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    ab5a:	2301      	movs	r3, #1
    ab5c:	6901      	ldr	r1, [r0, #16]
    ab5e:	40ab      	lsls	r3, r5
    ab60:	6809      	ldr	r1, [r1, #0]
	const struct gpio_driver_api *api =
    ab62:	6882      	ldr	r2, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    ab64:	420b      	tst	r3, r1
	return api->pin_interrupt_configure(port, pin, mode, trig);
    ab66:	bf14      	ite	ne
    ab68:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
    ab6c:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
    ab70:	6996      	ldr	r6, [r2, #24]
    ab72:	4629      	mov	r1, r5
    ab74:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    ab78:	47b0      	blx	r6
	if (ret != 0) {
    ab7a:	2800      	cmp	r0, #0
    ab7c:	d0db      	beq.n	ab36 <my_button_init+0x1a>
			ret, button->port->name, button->pin);
    ab7e:	6822      	ldr	r2, [r4, #0]
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
    ab80:	4601      	mov	r1, r0
    ab82:	7923      	ldrb	r3, [r4, #4]
    ab84:	4805      	ldr	r0, [pc, #20]	; (ab9c <my_button_init+0x80>)
    ab86:	6812      	ldr	r2, [r2, #0]
    ab88:	f00c fdad 	bl	176e6 <printk>
		return -3;
    ab8c:	f06f 0002 	mvn.w	r0, #2
    ab90:	e7d1      	b.n	ab36 <my_button_init+0x1a>
    ab92:	bf00      	nop
    ab94:	0001be78 	.word	0x0001be78
    ab98:	0001be9e 	.word	0x0001be9e
    ab9c:	0001bec7 	.word	0x0001bec7

0000aba0 <my_led_init>:
 * @brief inits and configure the led
 * 
 * @param led 
 * @return int 0 if OK, negative values for errors.
 */
int my_led_init(struct gpio_dt_spec *led){
    aba0:	b538      	push	{r3, r4, r5, lr}
    aba2:	4604      	mov	r4, r0
	int ret=0;
	if (led->port && !device_is_ready(led->port)) {
    aba4:	6800      	ldr	r0, [r0, #0]
    aba6:	b160      	cbz	r0, abc2 <my_led_init+0x22>
    aba8:	f00f f922 	bl	19df0 <z_device_is_ready>
    abac:	6823      	ldr	r3, [r4, #0]
    abae:	4605      	mov	r5, r0
    abb0:	b940      	cbnz	r0, abc4 <my_led_init+0x24>
		printk("Error %d: LED device %s is not ready; ignoring it\n",
    abb2:	4601      	mov	r1, r0
    abb4:	681a      	ldr	r2, [r3, #0]
    abb6:	480e      	ldr	r0, [pc, #56]	; (abf0 <my_led_init+0x50>)
    abb8:	f00c fd95 	bl	176e6 <printk>
		       ret, led->port->name);
		led->port = NULL;
		return -1;
    abbc:	f04f 30ff 	mov.w	r0, #4294967295
		led->port = NULL;
    abc0:	6025      	str	r5, [r4, #0]
			return -2;
		} else { //init and config OK
			return 0;
		}
	}
}
    abc2:	bd38      	pop	{r3, r4, r5, pc}
	if (led->port) {
    abc4:	2b00      	cmp	r3, #0
    abc6:	d0fc      	beq.n	abc2 <my_led_init+0x22>
		ret = gpio_pin_configure_dt(led, GPIO_OUTPUT);
    abc8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    abcc:	4620      	mov	r0, r4
    abce:	f00c fd23 	bl	17618 <gpio_pin_configure_dt>
		if (ret != 0) {
    abd2:	2800      	cmp	r0, #0
    abd4:	d0f5      	beq.n	abc2 <my_led_init+0x22>
			       ret, led->port->name, led->pin);
    abd6:	6822      	ldr	r2, [r4, #0]
			printk("Error %d: failed to configure LED device %s pin %d\n",
    abd8:	4601      	mov	r1, r0
    abda:	7923      	ldrb	r3, [r4, #4]
    abdc:	4805      	ldr	r0, [pc, #20]	; (abf4 <my_led_init+0x54>)
    abde:	6812      	ldr	r2, [r2, #0]
    abe0:	f00c fd81 	bl	176e6 <printk>
			led->port = NULL;
    abe4:	2300      	movs	r3, #0
			return -2;
    abe6:	f06f 0001 	mvn.w	r0, #1
			led->port = NULL;
    abea:	6023      	str	r3, [r4, #0]
			return -2;
    abec:	e7e9      	b.n	abc2 <my_led_init+0x22>
    abee:	bf00      	nop
    abf0:	0001befd 	.word	0x0001befd
    abf4:	0001bf30 	.word	0x0001bf30

0000abf8 <init_sequence>:

/**
 * @brief there are issues with having the console-out on while debugging, so I need time to plug it in.
 * 
 */
void init_sequence(void){
    abf8:	b510      	push	{r4, lr}
	printf("3...");
    abfa:	4c11      	ldr	r4, [pc, #68]	; (ac40 <init_sequence+0x48>)
    abfc:	4620      	mov	r0, r4
    abfe:	f00b f831 	bl	15c64 <iprintf>
	printk("3...");
    ac02:	4620      	mov	r0, r4
	k_msleep(1000);

	printf("2...");
    ac04:	4c0f      	ldr	r4, [pc, #60]	; (ac44 <init_sequence+0x4c>)
	printk("3...");
    ac06:	f00c fd6e 	bl	176e6 <printk>
	k_msleep(1000);
    ac0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ac0e:	f00c fd18 	bl	17642 <k_msleep.isra.0>
	printf("2...");
    ac12:	4620      	mov	r0, r4
    ac14:	f00b f826 	bl	15c64 <iprintf>
	printk("2...");
    ac18:	4620      	mov	r0, r4
    ac1a:	f00c fd64 	bl	176e6 <printk>
	k_msleep(1000);
    ac1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ac22:	f00c fd0e 	bl	17642 <k_msleep.isra.0>

	printf("1...");
    ac26:	4808      	ldr	r0, [pc, #32]	; (ac48 <init_sequence+0x50>)
    ac28:	f00b f81c 	bl	15c64 <iprintf>
	printk("1...\n");
    ac2c:	4807      	ldr	r0, [pc, #28]	; (ac4c <init_sequence+0x54>)
    ac2e:	f00c fd5a 	bl	176e6 <printk>
	k_msleep(1000);

	return;
}
    ac32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_msleep(1000);
    ac36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ac3a:	f00c bd02 	b.w	17642 <k_msleep.isra.0>
    ac3e:	bf00      	nop
    ac40:	0001bf64 	.word	0x0001bf64
    ac44:	0001bf69 	.word	0x0001bf69
    ac48:	0001bf6e 	.word	0x0001bf6e
    ac4c:	0001bf73 	.word	0x0001bf73

0000ac50 <main>:



/** ---------- Main ---------- **/
int main(void)
{
    ac50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	
	int err;
	uint8_t cnt = 0;
	struct nrf_modem_gnss_nmea_data_frame *nmea_data;

	init_sequence();
    ac54:	f7ff ffd0 	bl	abf8 <init_sequence>
	k_msleep(2000);
    ac58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    ac5c:	f00c fcf1 	bl	17642 <k_msleep.isra.0>
	printk("Starting GNSS sample\n");
    ac60:	48a3      	ldr	r0, [pc, #652]	; (aef0 <main+0x2a0>)
    ac62:	f00c fd40 	bl	176e6 <printk>

	/** ---------- Init and config button ---------- **/
	int retVal = 0;
	retVal = my_button_init(&button);
    ac66:	48a3      	ldr	r0, [pc, #652]	; (aef4 <main+0x2a4>)
    ac68:	f7ff ff58 	bl	ab1c <my_button_init>
	if( retVal !=0 ){ //This is just a test, it's ok the program just ends if something fails here.
    ac6c:	4601      	mov	r1, r0
    ac6e:	b138      	cbz	r0, ac80 <main+0x30>
		printk("button init failed: &d\n", retVal);
    ac70:	48a1      	ldr	r0, [pc, #644]	; (aef8 <main+0x2a8>)
	gpio_add_callback(button.port, &button_cb_data);

	/** ---------- Init and config LED ---------- **/
	retVal = my_led_init(&led);
	if(retVal != 0){
		printk("led init failed: &d\n", retVal);
    ac72:	f00c fd38 	bl	176e6 <printk>
		return 0;
    ac76:	2400      	movs	r4, #0
		events[0].state = K_POLL_STATE_NOT_READY;
		events[1].state = K_POLL_STATE_NOT_READY;
	}

	return 0;
}
    ac78:	4620      	mov	r0, r4
    ac7a:	b004      	add	sp, #16
    ac7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    ac80:	499e      	ldr	r1, [pc, #632]	; (aefc <main+0x2ac>)
    ac82:	4b9f      	ldr	r3, [pc, #636]	; (af00 <main+0x2b0>)
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
    ac84:	489f      	ldr	r0, [pc, #636]	; (af04 <main+0x2b4>)
	callback->handler = handler;
    ac86:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    ac88:	2340      	movs	r3, #64	; 0x40
    ac8a:	608b      	str	r3, [r1, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    ac8c:	6883      	ldr	r3, [r0, #8]
    ac8e:	69db      	ldr	r3, [r3, #28]
    ac90:	b10b      	cbz	r3, ac96 <main+0x46>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    ac92:	2201      	movs	r2, #1
    ac94:	4798      	blx	r3
	retVal = my_led_init(&led);
    ac96:	489c      	ldr	r0, [pc, #624]	; (af08 <main+0x2b8>)
    ac98:	f7ff ff82 	bl	aba0 <my_led_init>
    ac9c:	4601      	mov	r1, r0
	if(retVal != 0){
    ac9e:	b108      	cbz	r0, aca4 <main+0x54>
		printk("led init failed: &d\n", retVal);
    aca0:	489a      	ldr	r0, [pc, #616]	; (af0c <main+0x2bc>)
    aca2:	e7e6      	b.n	ac72 <main+0x22>
	gpio_pin_set_dt(&led, 0); //turn off led
    aca4:	f7ff ff24 	bl	aaf0 <gpio_pin_set_dt.constprop.0.isra.0>
	printk("Waiting for button press\n");
    aca8:	4899      	ldr	r0, [pc, #612]	; (af10 <main+0x2c0>)
    acaa:	f00c fd1c 	bl	176e6 <printk>
	nrf_modem_lib_init();
    acae:	f003 f995 	bl	dfdc <nrf_modem_lib_init>
	nrf_modem_lib_shutdown();
    acb2:	f003 f9af 	bl	e014 <nrf_modem_lib_shutdown>
		if(isButtonPressed == true){
    acb6:	4c97      	ldr	r4, [pc, #604]	; (af14 <main+0x2c4>)
    acb8:	7823      	ldrb	r3, [r4, #0]
    acba:	b1c3      	cbz	r3, acee <main+0x9e>
			isButtonPressed = false;
    acbc:	2500      	movs	r5, #0
	printk("button pressed!\n");
    acbe:	4896      	ldr	r0, [pc, #600]	; (af18 <main+0x2c8>)
			isButtonPressed = false;
    acc0:	7025      	strb	r5, [r4, #0]
	printk("button pressed!\n");
    acc2:	f00c fd10 	bl	176e6 <printk>
	gpio_pin_set_dt(&led, 1);
    acc6:	2001      	movs	r0, #1
    acc8:	f7ff ff12 	bl	aaf0 <gpio_pin_set_dt.constprop.0.isra.0>
	return z_impl_k_sleep(timeout);
    accc:	2100      	movs	r1, #0
    acce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    acd2:	f00a f903 	bl	14edc <z_impl_k_sleep>
	gpio_pin_set_dt(&led, 0);
    acd6:	4628      	mov	r0, r5
    acd8:	f7ff ff0a 	bl	aaf0 <gpio_pin_set_dt.constprop.0.isra.0>
	err = nrf_modem_lib_init();
    acdc:	f003 f97e 	bl	dfdc <nrf_modem_lib_init>
	if (err) {
    ace0:	4604      	mov	r4, r0
    ace2:	b138      	cbz	r0, acf4 <main+0xa4>
		printk("Modem library initialization failed, error: %d\n", err);
    ace4:	4601      	mov	r1, r0
    ace6:	488d      	ldr	r0, [pc, #564]	; (af1c <main+0x2cc>)
    ace8:	f00c fcfd 	bl	176e6 <printk>
		return err;
    acec:	e7c4      	b.n	ac78 <main+0x28>
	z_impl_k_yield();
    acee:	f00a f873 	bl	14dd8 <z_impl_k_yield>
}
    acf2:	e7e1      	b.n	acb8 <main+0x68>
	if (lte_lc_init() != 0) {
    acf4:	f00e f92b 	bl	18f4e <lte_lc_init>
    acf8:	b940      	cbnz	r0, ad0c <main+0xbc>
	if (lte_lc_func_mode_set(LTE_LC_FUNC_MODE_ACTIVATE_GNSS) != 0) {
    acfa:	201f      	movs	r0, #31
    acfc:	f005 f90c 	bl	ff18 <lte_lc_func_mode_set>
    ad00:	b168      	cbz	r0, ad1e <main+0xce>
		printk("Failed to activate GNSS functional mode");
    ad02:	4887      	ldr	r0, [pc, #540]	; (af20 <main+0x2d0>)
		printk("Failed to set GNSS event handler");
    ad04:	f00c fcef 	bl	176e6 <printk>
		printk("Failed to initialize and start GNSS\n");
    ad08:	4886      	ldr	r0, [pc, #536]	; (af24 <main+0x2d4>)
    ad0a:	e003      	b.n	ad14 <main+0xc4>
		printk("Failed to initialize LTE link controller");
    ad0c:	4886      	ldr	r0, [pc, #536]	; (af28 <main+0x2d8>)
    ad0e:	f00c fcea 	bl	176e6 <printk>
		printk("Failed to initialize modem\n");
    ad12:	4886      	ldr	r0, [pc, #536]	; (af2c <main+0x2dc>)
		printk("Failed to initialize and start GNSS\n");
    ad14:	f00c fce7 	bl	176e6 <printk>
		return -1;
    ad18:	f04f 34ff 	mov.w	r4, #4294967295
    ad1c:	e7ac      	b.n	ac78 <main+0x28>
	if (nrf_modem_gnss_event_handler_set(gnss_event_handler) != 0) {
    ad1e:	4884      	ldr	r0, [pc, #528]	; (af30 <main+0x2e0>)
    ad20:	f008 fef6 	bl	13b10 <nrf_modem_gnss_event_handler_set>
    ad24:	b108      	cbz	r0, ad2a <main+0xda>
		printk("Failed to set GNSS event handler");
    ad26:	4883      	ldr	r0, [pc, #524]	; (af34 <main+0x2e4>)
    ad28:	e7ec      	b.n	ad04 <main+0xb4>
	if (nrf_modem_gnss_nmea_mask_set(nmea_mask) != 0) {
    ad2a:	201f      	movs	r0, #31
    ad2c:	f008 fec2 	bl	13ab4 <nrf_modem_gnss_nmea_mask_set>
    ad30:	b108      	cbz	r0, ad36 <main+0xe6>
		printk("Failed to set GNSS NMEA mask");
    ad32:	4881      	ldr	r0, [pc, #516]	; (af38 <main+0x2e8>)
    ad34:	e7e6      	b.n	ad04 <main+0xb4>
	if (nrf_modem_gnss_use_case_set(use_case) != 0) {
    ad36:	2001      	movs	r0, #1
    ad38:	f008 fe34 	bl	139a4 <nrf_modem_gnss_use_case_set>
    ad3c:	b110      	cbz	r0, ad44 <main+0xf4>
		printk("Failed to set GNSS use case");
    ad3e:	487f      	ldr	r0, [pc, #508]	; (af3c <main+0x2ec>)
    ad40:	f00c fcd1 	bl	176e6 <printk>
	if (nrf_modem_gnss_fix_retry_set(fix_retry) != 0) {
    ad44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    ad48:	f008 fe86 	bl	13a58 <nrf_modem_gnss_fix_retry_set>
    ad4c:	b108      	cbz	r0, ad52 <main+0x102>
		printk("Failed to set GNSS fix retry");
    ad4e:	487c      	ldr	r0, [pc, #496]	; (af40 <main+0x2f0>)
    ad50:	e7d8      	b.n	ad04 <main+0xb4>
	if (nrf_modem_gnss_fix_interval_set(fix_interval) != 0) {
    ad52:	200a      	movs	r0, #10
    ad54:	f008 fe52 	bl	139fc <nrf_modem_gnss_fix_interval_set>
    ad58:	b108      	cbz	r0, ad5e <main+0x10e>
		printk("Failed to set GNSS fix interval");
    ad5a:	487a      	ldr	r0, [pc, #488]	; (af44 <main+0x2f4>)
    ad5c:	e7d2      	b.n	ad04 <main+0xb4>
	if (nrf_modem_gnss_start() != 0) {
    ad5e:	f008 fd85 	bl	1386c <nrf_modem_gnss_start>
    ad62:	4605      	mov	r5, r0
    ad64:	b108      	cbz	r0, ad6a <main+0x11a>
		printk("Failed to start GNSS");
    ad66:	4878      	ldr	r0, [pc, #480]	; (af48 <main+0x2f8>)
    ad68:	e7cc      	b.n	ad04 <main+0xb4>
	nrf_modem_gnss_prio_mode_enable();
    ad6a:	f008 fdf3 	bl	13954 <nrf_modem_gnss_prio_mode_enable>
	printk("All init OK\n");
    ad6e:	4877      	ldr	r0, [pc, #476]	; (af4c <main+0x2fc>)
    ad70:	f00c fcb9 	bl	176e6 <printk>
	return z_impl_k_uptime_ticks();
    ad74:	f00f fae8 	bl	1a348 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    ad78:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    ad7c:	fba0 3204 	umull	r3, r2, r0, r4
    ad80:	fb04 2101 	mla	r1, r4, r1, r2
	fix_timestamp = k_uptime_get();
    ad84:	4e72      	ldr	r6, [pc, #456]	; (af50 <main+0x300>)
    ad86:	0bdb      	lsrs	r3, r3, #15
    ad88:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    ad8c:	0bc9      	lsrs	r1, r1, #15
    ad8e:	e9c6 3100 	strd	r3, r1, [r6]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    ad92:	4c70      	ldr	r4, [pc, #448]	; (af54 <main+0x304>)
	if(isTakingValidFixes == false){ //I don't want to print extra data when having valid fixes.
    ad94:	4f70      	ldr	r7, [pc, #448]	; (af58 <main+0x308>)
    ad96:	f04f 33ff 	mov.w	r3, #4294967295
    ad9a:	f04f 32ff 	mov.w	r2, #4294967295
    ad9e:	2102      	movs	r1, #2
    ada0:	486c      	ldr	r0, [pc, #432]	; (af54 <main+0x304>)
    ada2:	f00a fa87 	bl	152b4 <z_impl_k_poll>
		if (events[0].state == K_POLL_STATE_SEM_AVAILABLE &&
    ada6:	68e3      	ldr	r3, [r4, #12]
    ada8:	f403 13fe 	and.w	r3, r3, #2080768	; 0x1fc000
    adac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    adb0:	d15e      	bne.n	ae70 <main+0x220>
		    k_sem_take(events[0].sem, K_NO_WAIT) == 0) {
    adb2:	6920      	ldr	r0, [r4, #16]
	return z_impl_k_sem_take(sem, timeout);
    adb4:	2300      	movs	r3, #0
    adb6:	2200      	movs	r2, #0
    adb8:	f009 fd0e 	bl	147d8 <z_impl_k_sem_take>
		if (events[0].state == K_POLL_STATE_SEM_AVAILABLE &&
    adbc:	4603      	mov	r3, r0
    adbe:	2800      	cmp	r0, #0
    adc0:	d156      	bne.n	ae70 <main+0x220>
    adc2:	f8df c1b8 	ldr.w	ip, [pc, #440]	; af7c <main+0x32c>
    adc6:	f04f 0e0c 	mov.w	lr, #12
	uint8_t in_fix    = 0;
    adca:	4602      	mov	r2, r0
	uint8_t tracked   = 0;
    adcc:	4601      	mov	r1, r0
    adce:	46e0      	mov	r8, ip
		if (pvt_data->sv[i].sv > 0) {
    add0:	f8bc 0052 	ldrh.w	r0, [ip, #82]	; 0x52
    add4:	b168      	cbz	r0, adf2 <main+0x1a2>
			if (pvt_data->sv[i].flags & NRF_MODEM_GNSS_SV_FLAG_USED_IN_FIX) {
    add6:	f89c 005c 	ldrb.w	r0, [ip, #92]	; 0x5c
			tracked++;
    adda:	3101      	adds	r1, #1
			if (pvt_data->sv[i].flags & NRF_MODEM_GNSS_SV_FLAG_USED_IN_FIX) {
    addc:	f010 0f02 	tst.w	r0, #2
				in_fix++;
    ade0:	bf1c      	itt	ne
    ade2:	3201      	addne	r2, #1
    ade4:	b2d2      	uxtbne	r2, r2
			if (pvt_data->sv[i].flags & NRF_MODEM_GNSS_SV_FLAG_UNHEALTHY) {
    ade6:	0700      	lsls	r0, r0, #28
				unhealthy++;
    ade8:	bf48      	it	mi
    adea:	3301      	addmi	r3, #1
			tracked++;
    adec:	b2c9      	uxtb	r1, r1
				unhealthy++;
    adee:	bf48      	it	mi
    adf0:	b2db      	uxtbmi	r3, r3
	for (int i = 0; i < NRF_MODEM_GNSS_MAX_SATELLITES; ++i) {
    adf2:	f1be 0e01 	subs.w	lr, lr, #1
    adf6:	f10c 0c0c 	add.w	ip, ip, #12
    adfa:	d1e9      	bne.n	add0 <main+0x180>
	if(isTakingValidFixes == false){ //I don't want to print extra data when having valid fixes.
    adfc:	7838      	ldrb	r0, [r7, #0]
    adfe:	b910      	cbnz	r0, ae06 <main+0x1b6>
		printk("Tracking: %2d Using: %2d Unhealthy: %d\n", tracked, in_fix, unhealthy);
    ae00:	4856      	ldr	r0, [pc, #344]	; (af5c <main+0x30c>)
    ae02:	f00c fc70 	bl	176e6 <printk>
			if (last_pvt.flags & NRF_MODEM_GNSS_PVT_FLAG_DEADLINE_MISSED) {
    ae06:	f898 3050 	ldrb.w	r3, [r8, #80]	; 0x50
    ae0a:	0719      	lsls	r1, r3, #28
    ae0c:	d502      	bpl.n	ae14 <main+0x1c4>
				printk("GNSS operation blocked by LTE\n");
    ae0e:	4854      	ldr	r0, [pc, #336]	; (af60 <main+0x310>)
    ae10:	f00c fc69 	bl	176e6 <printk>
			if (last_pvt.flags & NRF_MODEM_GNSS_PVT_FLAG_NOT_ENOUGH_WINDOW_TIME) {
    ae14:	f898 3050 	ldrb.w	r3, [r8, #80]	; 0x50
    ae18:	06da      	lsls	r2, r3, #27
    ae1a:	d502      	bpl.n	ae22 <main+0x1d2>
				printk("Insufficient GNSS time windows\n");
    ae1c:	4851      	ldr	r0, [pc, #324]	; (af64 <main+0x314>)
    ae1e:	f00c fc62 	bl	176e6 <printk>
			if (last_pvt.flags & NRF_MODEM_GNSS_PVT_FLAG_SLEEP_BETWEEN_PVT) {
    ae22:	f898 3050 	ldrb.w	r3, [r8, #80]	; 0x50
    ae26:	075b      	lsls	r3, r3, #29
    ae28:	d502      	bpl.n	ae30 <main+0x1e0>
				printk("Sleep period(s) between PVT notifications\n");
    ae2a:	484f      	ldr	r0, [pc, #316]	; (af68 <main+0x318>)
    ae2c:	f00c fc5b 	bl	176e6 <printk>
			if (last_pvt.flags & NRF_MODEM_GNSS_PVT_FLAG_FIX_VALID) {
    ae30:	f898 0050 	ldrb.w	r0, [r8, #80]	; 0x50
    ae34:	f010 0001 	ands.w	r0, r0, #1
    ae38:	d033      	beq.n	aea2 <main+0x252>
				isTakingValidFixes = true;
    ae3a:	2001      	movs	r0, #1
    ae3c:	7038      	strb	r0, [r7, #0]
				gpio_pin_set_dt(&led, 1);
    ae3e:	f7ff fe57 	bl	aaf0 <gpio_pin_set_dt.constprop.0.isra.0>
	return z_impl_k_uptime_ticks();
    ae42:	f00f fa81 	bl	1a348 <z_impl_k_uptime_ticks>
    ae46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ae4a:	fba0 0302 	umull	r0, r3, r0, r2
    ae4e:	fb02 3101 	mla	r1, r2, r1, r3
	printk("  (%.06f, %.06f), \n", pvt_data->latitude, pvt_data->longitude);
    ae52:	e9d8 2302 	ldrd	r2, r3, [r8, #8]
    ae56:	0bc0      	lsrs	r0, r0, #15
    ae58:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    ae5c:	0bc9      	lsrs	r1, r1, #15
				fix_timestamp = k_uptime_get();
    ae5e:	e9c6 0100 	strd	r0, r1, [r6]
	printk("  (%.06f, %.06f), \n", pvt_data->latitude, pvt_data->longitude);
    ae62:	e9cd 2300 	strd	r2, r3, [sp]
    ae66:	4841      	ldr	r0, [pc, #260]	; (af6c <main+0x31c>)
    ae68:	e9d8 2300 	ldrd	r2, r3, [r8]
    ae6c:	f00c fc3b 	bl	176e6 <printk>
		if (events[1].state == K_POLL_STATE_MSGQ_DATA_AVAILABLE &&
    ae70:	6a23      	ldr	r3, [r4, #32]
    ae72:	f403 13fe 	and.w	r3, r3, #2080768	; 0x1fc000
    ae76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    ae7a:	d109      	bne.n	ae90 <main+0x240>
		    k_msgq_get(events[1].msgq, &nmea_data, K_NO_WAIT) == 0) {
    ae7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return z_impl_k_msgq_get(msgq, data, timeout);
    ae7e:	2200      	movs	r2, #0
    ae80:	2300      	movs	r3, #0
    ae82:	a903      	add	r1, sp, #12
    ae84:	f009 fb3e 	bl	14504 <z_impl_k_msgq_get>
		if (events[1].state == K_POLL_STATE_MSGQ_DATA_AVAILABLE &&
    ae88:	b910      	cbnz	r0, ae90 <main+0x240>
			k_free(nmea_data);
    ae8a:	9803      	ldr	r0, [sp, #12]
    ae8c:	f00f fbef 	bl	1a66e <k_free>
		events[0].state = K_POLL_STATE_NOT_READY;
    ae90:	68e3      	ldr	r3, [r4, #12]
    ae92:	f36f 3394 	bfc	r3, #14, #7
    ae96:	60e3      	str	r3, [r4, #12]
		events[1].state = K_POLL_STATE_NOT_READY;
    ae98:	6a23      	ldr	r3, [r4, #32]
    ae9a:	f36f 3394 	bfc	r3, #14, #7
    ae9e:	6223      	str	r3, [r4, #32]
	for (;;) {
    aea0:	e779      	b.n	ad96 <main+0x146>
				isTakingValidFixes = false;
    aea2:	7038      	strb	r0, [r7, #0]
				gpio_pin_set_dt(&led, 0);
    aea4:	f7ff fe24 	bl	aaf0 <gpio_pin_set_dt.constprop.0.isra.0>
	return z_impl_k_uptime_ticks();
    aea8:	f00f fa4e 	bl	1a348 <z_impl_k_uptime_ticks>
    aeac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    aeb0:	fba0 0302 	umull	r0, r3, r0, r2
    aeb4:	fb02 3101 	mla	r1, r2, r1, r3
    aeb8:	0bc3      	lsrs	r3, r0, #15
    aeba:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
						(uint32_t)((k_uptime_get() - fix_timestamp) / 1000));
    aebe:	e9d6 0200 	ldrd	r0, r2, [r6]
    aec2:	0bc9      	lsrs	r1, r1, #15
    aec4:	1a18      	subs	r0, r3, r0
    aec6:	eb61 0102 	sbc.w	r1, r1, r2
    aeca:	2300      	movs	r3, #0
    aecc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    aed0:	f7fd fd58 	bl	8984 <__aeabi_uldivmod>
    aed4:	4601      	mov	r1, r0
				printk("Seconds since last fix: %d\n",
    aed6:	4826      	ldr	r0, [pc, #152]	; (af70 <main+0x320>)
    aed8:	f00c fc05 	bl	176e6 <printk>
				printk("Searching [%c]\n", update_indicator[cnt%4]);
    aedc:	4a25      	ldr	r2, [pc, #148]	; (af74 <main+0x324>)
				cnt++;
    aede:	1c6b      	adds	r3, r5, #1
    aee0:	b2dd      	uxtb	r5, r3
				printk("Searching [%c]\n", update_indicator[cnt%4]);
    aee2:	f003 0303 	and.w	r3, r3, #3
    aee6:	5cd1      	ldrb	r1, [r2, r3]
    aee8:	4823      	ldr	r0, [pc, #140]	; (af78 <main+0x328>)
    aeea:	f00c fbfc 	bl	176e6 <printk>
    aeee:	e7bf      	b.n	ae70 <main+0x220>
    aef0:	0001bf79 	.word	0x0001bf79
    aef4:	0001b7e8 	.word	0x0001b7e8
    aef8:	0001bf8f 	.word	0x0001bf8f
    aefc:	2000cf70 	.word	0x2000cf70
    af00:	0000aa75 	.word	0x0000aa75
    af04:	0001b30c 	.word	0x0001b30c
    af08:	2000c580 	.word	0x2000c580
    af0c:	0001bfa7 	.word	0x0001bfa7
    af10:	0001bfbc 	.word	0x0001bfbc
    af14:	2000d73e 	.word	0x2000d73e
    af18:	0001bfd6 	.word	0x0001bfd6
    af1c:	0001bfe7 	.word	0x0001bfe7
    af20:	0001c05c 	.word	0x0001c05c
    af24:	0001c13d 	.word	0x0001c13d
    af28:	0001c017 	.word	0x0001c017
    af2c:	0001c040 	.word	0x0001c040
    af30:	0000aa81 	.word	0x0000aa81
    af34:	0001c084 	.word	0x0001c084
    af38:	0001c0a5 	.word	0x0001c0a5
    af3c:	0001c0c2 	.word	0x0001c0c2
    af40:	0001c0de 	.word	0x0001c0de
    af44:	0001c0fb 	.word	0x0001c0fb
    af48:	0001c11b 	.word	0x0001c11b
    af4c:	0001c130 	.word	0x0001c130
    af50:	2000cab0 	.word	0x2000cab0
    af54:	2000c588 	.word	0x2000c588
    af58:	2000d73f 	.word	0x2000d73f
    af5c:	0001c162 	.word	0x0001c162
    af60:	0001c18a 	.word	0x0001c18a
    af64:	0001c1a9 	.word	0x0001c1a9
    af68:	0001c1c9 	.word	0x0001c1c9
    af6c:	0001c1f4 	.word	0x0001c1f4
    af70:	0001c208 	.word	0x0001c208
    af74:	0001c234 	.word	0x0001c234
    af78:	0001c224 	.word	0x0001c224
    af7c:	2000cab8 	.word	0x2000cab8

0000af80 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    af80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af84:	b091      	sub	sp, #68	; 0x44
    af86:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    af88:	f002 0304 	and.w	r3, r2, #4
    af8c:	9302      	str	r3, [sp, #8]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    af8e:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    af92:	3301      	adds	r3, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    af94:	0784      	lsls	r4, r0, #30
{
    af96:	4605      	mov	r5, r0
    af98:	460e      	mov	r6, r1
    af9a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    af9e:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    afa0:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    afa2:	f040 81bd 	bne.w	b320 <cbvprintf_package+0x3a0>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    afa6:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    afa8:	b130      	cbz	r0, afb8 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    afaa:	2907      	cmp	r1, #7
    afac:	d809      	bhi.n	afc2 <cbvprintf_package+0x42>
		return -ENOSPC;
    afae:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    afb2:	b011      	add	sp, #68	; 0x44
    afb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    afb8:	f001 0607 	and.w	r6, r1, #7
    afbc:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    afbe:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    afc2:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    afc4:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
    afc8:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
    afcc:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    afce:	f04f 33ff 	mov.w	r3, #4294967295
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    afd2:	464f      	mov	r7, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    afd4:	9301      	str	r3, [sp, #4]
	bool parsing = false;
    afd6:	46cb      	mov	fp, r9
	size = sizeof(char *);
    afd8:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    afda:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
    afde:	b10d      	cbz	r5, afe4 <cbvprintf_package+0x64>
				*(const char **)buf = s;
    afe0:	9800      	ldr	r0, [sp, #0]
    afe2:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    afe4:	9805      	ldr	r0, [sp, #20]
    afe6:	2800      	cmp	r0, #0
    afe8:	f300 80eb 	bgt.w	b1c2 <cbvprintf_package+0x242>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    afec:	4899      	ldr	r0, [pc, #612]	; (b254 <cbvprintf_package+0x2d4>)
    afee:	9a00      	ldr	r2, [sp, #0]
    aff0:	4282      	cmp	r2, r0
    aff2:	d303      	bcc.n	affc <cbvprintf_package+0x7c>
    aff4:	4898      	ldr	r0, [pc, #608]	; (b258 <cbvprintf_package+0x2d8>)
    aff6:	4282      	cmp	r2, r0
    aff8:	f0c0 80e3 	bcc.w	b1c2 <cbvprintf_package+0x242>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    affc:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    affe:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    b002:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    b004:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    b008:	f100 8106 	bmi.w	b218 <cbvprintf_package+0x298>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    b00c:	2f0f      	cmp	r7, #15
    b00e:	f200 80b4 	bhi.w	b17a <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
    b012:	2d00      	cmp	r5, #0
    b014:	f000 8108 	beq.w	b228 <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    b018:	f107 0240 	add.w	r2, r7, #64	; 0x40
    b01c:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    b020:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    b022:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    b026:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    b02a:	9804      	ldr	r0, [sp, #16]
    b02c:	3001      	adds	r0, #1
    b02e:	9004      	str	r0, [sp, #16]
    b030:	e0ea      	b.n	b208 <cbvprintf_package+0x288>
			switch (*fmt) {
    b032:	287a      	cmp	r0, #122	; 0x7a
    b034:	d860      	bhi.n	b0f8 <cbvprintf_package+0x178>
    b036:	284b      	cmp	r0, #75	; 0x4b
    b038:	d80e      	bhi.n	b058 <cbvprintf_package+0xd8>
    b03a:	2847      	cmp	r0, #71	; 0x47
    b03c:	d85c      	bhi.n	b0f8 <cbvprintf_package+0x178>
    b03e:	2829      	cmp	r0, #41	; 0x29
    b040:	d82f      	bhi.n	b0a2 <cbvprintf_package+0x122>
    b042:	2825      	cmp	r0, #37	; 0x25
    b044:	d055      	beq.n	b0f2 <cbvprintf_package+0x172>
    b046:	d857      	bhi.n	b0f8 <cbvprintf_package+0x178>
    b048:	2820      	cmp	r0, #32
    b04a:	d07d      	beq.n	b148 <cbvprintf_package+0x1c8>
    b04c:	3823      	subs	r0, #35	; 0x23
    b04e:	f1d0 0b00 	rsbs	fp, r0, #0
    b052:	eb4b 0b00 	adc.w	fp, fp, r0
    b056:	e077      	b.n	b148 <cbvprintf_package+0x1c8>
    b058:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    b05c:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    b060:	d84a      	bhi.n	b0f8 <cbvprintf_package+0x178>
    b062:	e8df f00c 	tbb	[pc, ip]
    b066:	4971      	.short	0x4971
    b068:	49494949 	.word	0x49494949
    b06c:	49494949 	.word	0x49494949
    b070:	494c4949 	.word	0x494c4949
    b074:	49494949 	.word	0x49494949
    b078:	5a494949 	.word	0x5a494949
    b07c:	5a4c4c49 	.word	0x5a4c4c49
    b080:	4c715a5a 	.word	0x4c715a5a
    b084:	4971496e 	.word	0x4971496e
    b088:	49184c18 	.word	0x49184c18
    b08c:	4c808349 	.word	0x4c808349
    b090:	494c4949 	.word	0x494c4949
    b094:	80          	.byte	0x80
    b095:	00          	.byte	0x00
    b096:	2000      	movs	r0, #0
    b098:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    b09c:	f04f 0a04 	mov.w	sl, #4
    b0a0:	e039      	b.n	b116 <cbvprintf_package+0x196>
    b0a2:	2201      	movs	r2, #1
			switch (*fmt) {
    b0a4:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    b0a8:	fa5f fc8c 	uxtb.w	ip, ip
    b0ac:	fa02 fc0c 	lsl.w	ip, r2, ip
    b0b0:	ea1c 0f0e 	tst.w	ip, lr
    b0b4:	d148      	bne.n	b148 <cbvprintf_package+0x1c8>
    b0b6:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    b0ba:	d12e      	bne.n	b11a <cbvprintf_package+0x19a>
    b0bc:	ea1c 0b02 	ands.w	fp, ip, r2
    b0c0:	d042      	beq.n	b148 <cbvprintf_package+0x1c8>
		buf = (void *) ROUND_UP(buf, align);
    b0c2:	3c01      	subs	r4, #1
    b0c4:	4454      	add	r4, sl
    b0c6:	f1ca 0c00 	rsb	ip, sl, #0
    b0ca:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    b0ce:	2d00      	cmp	r5, #0
    b0d0:	d061      	beq.n	b196 <cbvprintf_package+0x216>
    b0d2:	eba3 0c05 	sub.w	ip, r3, r5
    b0d6:	44a4      	add	ip, r4
    b0d8:	4566      	cmp	r6, ip
    b0da:	f4ff af68 	bcc.w	afae <cbvprintf_package+0x2e>
		if (is_str_arg) {
    b0de:	2800      	cmp	r0, #0
    b0e0:	d168      	bne.n	b1b4 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
    b0e2:	2b04      	cmp	r3, #4
    b0e4:	d147      	bne.n	b176 <cbvprintf_package+0x1f6>
			int v = va_arg(ap, int);
    b0e6:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    b0ea:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    b0ec:	2304      	movs	r3, #4
    b0ee:	3404      	adds	r4, #4
    b0f0:	e02a      	b.n	b148 <cbvprintf_package+0x1c8>
				arg_idx--;
    b0f2:	9a01      	ldr	r2, [sp, #4]
    b0f4:	3a01      	subs	r2, #1
    b0f6:	9201      	str	r2, [sp, #4]
				parsing = false;
    b0f8:	f04f 0b00 	mov.w	fp, #0
				continue;
    b0fc:	e024      	b.n	b148 <cbvprintf_package+0x1c8>
				if (fmt[-1] == 'l') {
    b0fe:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    b102:	286c      	cmp	r0, #108	; 0x6c
    b104:	d134      	bne.n	b170 <cbvprintf_package+0x1f0>
					if (fmt[-2] == 'l') {
    b106:	2000      	movs	r0, #0
    b108:	f811 3c02 	ldrb.w	r3, [r1, #-2]
				parsing = false;
    b10c:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    b10e:	2b6c      	cmp	r3, #108	; 0x6c
    b110:	d1c4      	bne.n	b09c <cbvprintf_package+0x11c>
						align = VA_STACK_ALIGN(long long);
    b112:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    b116:	4653      	mov	r3, sl
    b118:	e7d3      	b.n	b0c2 <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
    b11a:	f108 0807 	add.w	r8, r8, #7
    b11e:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    b122:	3407      	adds	r4, #7
    b124:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
    b128:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
    b12c:	b135      	cbz	r5, b13c <cbvprintf_package+0x1bc>
					if (BUF_OFFSET + size > len) {
    b12e:	9806      	ldr	r0, [sp, #24]
    b130:	4420      	add	r0, r4
    b132:	42b0      	cmp	r0, r6
    b134:	f63f af3b 	bhi.w	afae <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    b138:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
    b13c:	f04f 0b00 	mov.w	fp, #0
				buf += size;
    b140:	3408      	adds	r4, #8
			switch (*fmt) {
    b142:	f04f 0a08 	mov.w	sl, #8
    b146:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    b148:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    b14c:	2800      	cmp	r0, #0
    b14e:	d078      	beq.n	b242 <cbvprintf_package+0x2c2>
			if (!parsing) {
    b150:	f1bb 0f00 	cmp.w	fp, #0
    b154:	f47f af6d 	bne.w	b032 <cbvprintf_package+0xb2>
				if (*fmt == '%') {
    b158:	2825      	cmp	r0, #37	; 0x25
    b15a:	d1f5      	bne.n	b148 <cbvprintf_package+0x1c8>
					parsing = true;
    b15c:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
    b160:	9b01      	ldr	r3, [sp, #4]
    b162:	3301      	adds	r3, #1
    b164:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
    b166:	f04f 0a04 	mov.w	sl, #4
    b16a:	e7ec      	b.n	b146 <cbvprintf_package+0x1c6>
			switch (*fmt) {
    b16c:	4658      	mov	r0, fp
    b16e:	e793      	b.n	b098 <cbvprintf_package+0x118>
    b170:	2000      	movs	r0, #0
				parsing = false;
    b172:	4683      	mov	fp, r0
    b174:	e7a5      	b.n	b0c2 <cbvprintf_package+0x142>
		} else if (size == sizeof(long long)) {
    b176:	2b08      	cmp	r3, #8
    b178:	d002      	beq.n	b180 <cbvprintf_package+0x200>
					return -EINVAL;
    b17a:	f06f 0015 	mvn.w	r0, #21
    b17e:	e718      	b.n	afb2 <cbvprintf_package+0x32>
			long long v = va_arg(ap, long long);
    b180:	f108 0807 	add.w	r8, r8, #7
    b184:	f028 0807 	bic.w	r8, r8, #7
    b188:	ecb8 7b02 	vldmia	r8!, {d7}
					*(long long *)buf = v;
    b18c:	ed84 7b00 	vstr	d7, [r4]
			buf += sizeof(long long);
    b190:	2308      	movs	r3, #8
    b192:	3408      	adds	r4, #8
    b194:	e7d8      	b.n	b148 <cbvprintf_package+0x1c8>
		if (is_str_arg) {
    b196:	b968      	cbnz	r0, b1b4 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
    b198:	2b04      	cmp	r3, #4
    b19a:	d102      	bne.n	b1a2 <cbvprintf_package+0x222>
			int v = va_arg(ap, int);
    b19c:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    b1a0:	e7a4      	b.n	b0ec <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
    b1a2:	2b08      	cmp	r3, #8
    b1a4:	d1e9      	bne.n	b17a <cbvprintf_package+0x1fa>
			long long v = va_arg(ap, long long);
    b1a6:	f108 0807 	add.w	r8, r8, #7
    b1aa:	f028 0807 	bic.w	r8, r8, #7
    b1ae:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    b1b2:	e7ed      	b.n	b190 <cbvprintf_package+0x210>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    b1b4:	9805      	ldr	r0, [sp, #20]
    b1b6:	3801      	subs	r0, #1
    b1b8:	9005      	str	r0, [sp, #20]
			s = va_arg(ap, char *);
    b1ba:	f858 0b04 	ldr.w	r0, [r8], #4
    b1be:	9000      	str	r0, [sp, #0]
    b1c0:	e70d      	b.n	afde <cbvprintf_package+0x5e>
			if (is_ro && !do_ro) {
    b1c2:	9a03      	ldr	r2, [sp, #12]
    b1c4:	0790      	lsls	r0, r2, #30
    b1c6:	d520      	bpl.n	b20a <cbvprintf_package+0x28a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    b1c8:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    b1cc:	eba4 0e05 	sub.w	lr, r4, r5
    b1d0:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    b1d4:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    b1d8:	d2cf      	bcs.n	b17a <cbvprintf_package+0x1fa>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    b1da:	2f0f      	cmp	r7, #15
    b1dc:	d8cd      	bhi.n	b17a <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
    b1de:	b1f5      	cbz	r5, b21e <cbvprintf_package+0x29e>
					str_ptr_pos[s_idx] = s_ptr_idx;
    b1e0:	f107 0240 	add.w	r2, r7, #64	; 0x40
    b1e4:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    b1e8:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    b1ea:	b2c0      	uxtb	r0, r0
    b1ec:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    b1f0:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    b1f4:	f1bc 0f00 	cmp.w	ip, #0
    b1f8:	f43f af17 	beq.w	b02a <cbvprintf_package+0xaa>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    b1fc:	f060 007f 	orn	r0, r0, #127	; 0x7f
    b200:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    b204:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    b208:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    b20a:	f1c5 0208 	rsb	r2, r5, #8
			switch (*fmt) {
    b20e:	f64f 7eda 	movw	lr, #65498	; 0xffda
			buf += sizeof(char *);
    b212:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    b214:	9206      	str	r2, [sp, #24]
    b216:	e797      	b.n	b148 <cbvprintf_package+0x1c8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    b218:	f04f 0c00 	mov.w	ip, #0
    b21c:	e7da      	b.n	b1d4 <cbvprintf_package+0x254>
				} else if (is_ro) {
    b21e:	f1bc 0f00 	cmp.w	ip, #0
    b222:	d001      	beq.n	b228 <cbvprintf_package+0x2a8>
					len += 1;
    b224:	3601      	adds	r6, #1
    b226:	e7ef      	b.n	b208 <cbvprintf_package+0x288>
				} else if (rws_pos_en) {
    b228:	9a02      	ldr	r2, [sp, #8]
					len += 2;
    b22a:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    b22c:	2a00      	cmp	r2, #0
    b22e:	d1eb      	bne.n	b208 <cbvprintf_package+0x288>
					len += strlen(s) + 1 + 1;
    b230:	9800      	ldr	r0, [sp, #0]
    b232:	e9cd 3106 	strd	r3, r1, [sp, #24]
    b236:	f7fd fddd 	bl	8df4 <strlen>
    b23a:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    b23e:	4406      	add	r6, r0
    b240:	e7e2      	b.n	b208 <cbvprintf_package+0x288>
	if (BUF_OFFSET / sizeof(int) > 255) {
    b242:	1b63      	subs	r3, r4, r5
    b244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    b248:	d297      	bcs.n	b17a <cbvprintf_package+0x1fa>
	if (buf0 == NULL) {
    b24a:	b93d      	cbnz	r5, b25c <cbvprintf_package+0x2dc>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    b24c:	f1a6 0408 	sub.w	r4, r6, #8
    b250:	18e0      	adds	r0, r4, r3
    b252:	e6ae      	b.n	afb2 <cbvprintf_package+0x32>
    b254:	0001b268 	.word	0x0001b268
    b258:	0001e2fc 	.word	0x0001e2fc
	if (rws_pos_en) {
    b25c:	9a02      	ldr	r2, [sp, #8]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    b25e:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
    b260:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    b262:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    b264:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    b268:	b1c2      	cbz	r2, b29c <cbvprintf_package+0x31c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    b26a:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    b26c:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    b270:	f1b9 0f00 	cmp.w	r9, #0
    b274:	d005      	beq.n	b282 <cbvprintf_package+0x302>
		for (i = 0; i < s_idx; i++) {
    b276:	2200      	movs	r2, #0
    b278:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
    b27a:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    b27e:	4297      	cmp	r7, r2
    b280:	d10e      	bne.n	b2a0 <cbvprintf_package+0x320>
			*buf++ = str_ptr_arg[i];
    b282:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    b286:	f1c5 0301 	rsb	r3, r5, #1
    b28a:	f10d 0820 	add.w	r8, sp, #32
    b28e:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    b290:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    b294:	4557      	cmp	r7, sl
    b296:	d112      	bne.n	b2be <cbvprintf_package+0x33e>
	return BUF_OFFSET;
    b298:	1b60      	subs	r0, r4, r5
    b29a:	e68a      	b.n	afb2 <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    b29c:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    b29e:	e7e5      	b.n	b26c <cbvprintf_package+0x2ec>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    b2a0:	f810 3b01 	ldrb.w	r3, [r0], #1
    b2a4:	0619      	lsls	r1, r3, #24
    b2a6:	d508      	bpl.n	b2ba <cbvprintf_package+0x33a>
			if (BUF_OFFSET + 1 > len) {
    b2a8:	eb04 0e0c 	add.w	lr, r4, ip
    b2ac:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    b2ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    b2b2:	f4ff ae7c 	bcc.w	afae <cbvprintf_package+0x2e>
			*buf++ = pos;
    b2b6:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    b2ba:	3201      	adds	r2, #1
    b2bc:	e7df      	b.n	b27e <cbvprintf_package+0x2fe>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    b2be:	f1b9 0f00 	cmp.w	r9, #0
    b2c2:	d003      	beq.n	b2cc <cbvprintf_package+0x34c>
    b2c4:	f998 2000 	ldrsb.w	r2, [r8]
    b2c8:	2a00      	cmp	r2, #0
    b2ca:	db17      	blt.n	b2fc <cbvprintf_package+0x37c>
		if (rws_pos_en) {
    b2cc:	9b02      	ldr	r3, [sp, #8]
    b2ce:	b1d3      	cbz	r3, b306 <cbvprintf_package+0x386>
			*buf++ = str_ptr_arg[i];
    b2d0:	f81a 200b 	ldrb.w	r2, [sl, fp]
    b2d4:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    b2d8:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    b2da:	9b01      	ldr	r3, [sp, #4]
    b2dc:	1898      	adds	r0, r3, r2
    b2de:	4420      	add	r0, r4
    b2e0:	4286      	cmp	r6, r0
    b2e2:	f4ff ae64 	bcc.w	afae <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    b2e6:	f898 0000 	ldrb.w	r0, [r8]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    b2ea:	9900      	ldr	r1, [sp, #0]
    b2ec:	f804 0b01 	strb.w	r0, [r4], #1
    b2f0:	4620      	mov	r0, r4
    b2f2:	9203      	str	r2, [sp, #12]
    b2f4:	f00f f9f6 	bl	1a6e4 <memcpy>
		buf += size;
    b2f8:	9a03      	ldr	r2, [sp, #12]
    b2fa:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    b2fc:	f10a 0a01 	add.w	sl, sl, #1
    b300:	f108 0801 	add.w	r8, r8, #1
    b304:	e7c6      	b.n	b294 <cbvprintf_package+0x314>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    b306:	f898 2000 	ldrb.w	r2, [r8]
    b30a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    b30e:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    b310:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
    b312:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    b314:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    b318:	f7fd fd6c 	bl	8df4 <strlen>
    b31c:	1c42      	adds	r2, r0, #1
    b31e:	e7dc      	b.n	b2da <cbvprintf_package+0x35a>
		return -EFAULT;
    b320:	f06f 000d 	mvn.w	r0, #13
    b324:	e645      	b.n	afb2 <cbvprintf_package+0x32>
    b326:	bf00      	nop

0000b328 <z_reserve_fd>:

	return entry->obj;
}

int z_reserve_fd(void)
{
    b328:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    b32a:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
    b32c:	f04f 33ff 	mov.w	r3, #4294967295
    b330:	f04f 32ff 	mov.w	r2, #4294967295
    b334:	4814      	ldr	r0, [pc, #80]	; (b388 <z_reserve_fd+0x60>)
    b336:	f009 f93f 	bl	145b8 <z_impl_k_mutex_lock>
    b33a:	4b14      	ldr	r3, [pc, #80]	; (b38c <z_reserve_fd+0x64>)
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b33c:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
    b340:	b17a      	cbz	r2, b362 <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    b342:	3401      	adds	r4, #1
    b344:	2c04      	cmp	r4, #4
    b346:	f103 0320 	add.w	r3, r3, #32
    b34a:	d1f7      	bne.n	b33c <z_reserve_fd+0x14>
	errno = ENFILE;
    b34c:	f00c fe52 	bl	17ff4 <__errno>
    b350:	2317      	movs	r3, #23
	return -1;
    b352:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
    b356:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    b358:	480b      	ldr	r0, [pc, #44]	; (b388 <z_reserve_fd+0x60>)
    b35a:	f009 f9a7 	bl	146ac <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
    b35e:	4620      	mov	r0, r4
    b360:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    b362:	e8d3 0fef 	ldaex	r0, [r3]
    b366:	3001      	adds	r0, #1
    b368:	e8c3 0fe1 	stlex	r1, r0, [r3]
    b36c:	2900      	cmp	r1, #0
    b36e:	d1f8      	bne.n	b362 <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
    b370:	4807      	ldr	r0, [pc, #28]	; (b390 <z_reserve_fd+0x68>)
    b372:	0163      	lsls	r3, r4, #5
    b374:	eb00 1144 	add.w	r1, r0, r4, lsl #5
    b378:	50c2      	str	r2, [r0, r3]
		fdtable[fd].vtable = NULL;
    b37a:	604a      	str	r2, [r1, #4]
		k_mutex_init(&fdtable[fd].lock);
    b37c:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
    b37e:	4418      	add	r0, r3
    b380:	f00e fdee 	bl	19f60 <z_impl_k_mutex_init>
    b384:	e7e8      	b.n	b358 <z_reserve_fd+0x30>
    b386:	bf00      	nop
    b388:	2000c99c 	.word	0x2000c99c
    b38c:	2000cf84 	.word	0x2000cf84
    b390:	2000cf7c 	.word	0x2000cf7c

0000b394 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
    b394:	b410      	push	{r4}
    b396:	4604      	mov	r4, r0
    b398:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
    b39a:	4b0a      	ldr	r3, [pc, #40]	; (b3c4 <z_finalize_fd+0x30>)
    b39c:	0162      	lsls	r2, r4, #5
    b39e:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    b3a2:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
    b3a4:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
    b3a6:	b148      	cbz	r0, b3bc <z_finalize_fd+0x28>
    b3a8:	68c4      	ldr	r4, [r0, #12]
    b3aa:	b13c      	cbz	r4, b3bc <z_finalize_fd+0x28>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
    b3ac:	320c      	adds	r2, #12
    b3ae:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
    b3b0:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
    b3b4:	f240 1205 	movw	r2, #261	; 0x105
    b3b8:	f00c b984 	b.w	176c4 <z_fdtable_call_ioctl.constprop.0>
}
    b3bc:	f85d 4b04 	ldr.w	r4, [sp], #4
    b3c0:	4770      	bx	lr
    b3c2:	bf00      	nop
    b3c4:	2000cf7c 	.word	0x2000cf7c

0000b3c8 <z_free_fd>:

void z_free_fd(int fd)
{
    b3c8:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
    b3ca:	490d      	ldr	r1, [pc, #52]	; (b400 <z_free_fd+0x38>)
    b3cc:	0140      	lsls	r0, r0, #5
    b3ce:	f100 0308 	add.w	r3, r0, #8
    b3d2:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b3d4:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
    b3d8:	b182      	cbz	r2, b3fc <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
    b3da:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b3dc:	e8d3 5fef 	ldaex	r5, [r3]
    b3e0:	4295      	cmp	r5, r2
    b3e2:	d104      	bne.n	b3ee <z_free_fd+0x26>
    b3e4:	e8c3 4fec 	stlex	ip, r4, [r3]
    b3e8:	f1bc 0f00 	cmp.w	ip, #0
    b3ec:	d1f6      	bne.n	b3dc <z_free_fd+0x14>
    b3ee:	d1f1      	bne.n	b3d4 <z_free_fd+0xc>
	if (old_rc != 1) {
    b3f0:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
    b3f2:	bf01      	itttt	eq
    b3f4:	2300      	moveq	r3, #0
    b3f6:	180a      	addeq	r2, r1, r0
    b3f8:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
    b3fa:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
    b3fc:	bd30      	pop	{r4, r5, pc}
    b3fe:	bf00      	nop
    b400:	2000cf7c 	.word	0x2000cf7c

0000b404 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    b404:	4b01      	ldr	r3, [pc, #4]	; (b40c <__printk_hook_install+0x8>)
    b406:	6018      	str	r0, [r3, #0]
}
    b408:	4770      	bx	lr
    b40a:	bf00      	nop
    b40c:	2000c5b0 	.word	0x2000c5b0

0000b410 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    b410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b414:	8b05      	ldrh	r5, [r0, #24]
{
    b416:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    b418:	0728      	lsls	r0, r5, #28
{
    b41a:	4690      	mov	r8, r2
	if (processing) {
    b41c:	d411      	bmi.n	b442 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    b41e:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b420:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    b424:	f040 80cd 	bne.w	b5c2 <process_event+0x1b2>
			evt = process_recheck(mgr);
    b428:	4620      	mov	r0, r4
    b42a:	f00c fb3d 	bl	17aa8 <process_recheck>
		}

		if (evt == EVT_NOP) {
    b42e:	b178      	cbz	r0, b450 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    b430:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b432:	8b21      	ldrh	r1, [r4, #24]
    b434:	2804      	cmp	r0, #4
    b436:	d811      	bhi.n	b45c <process_event+0x4c>
    b438:	e8df f000 	tbb	[pc, r0]
    b43c:	856d10c3 	.word	0x856d10c3
    b440:	95          	.byte	0x95
    b441:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    b442:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    b444:	bf0c      	ite	eq
    b446:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    b44a:	f045 0520 	orrne.w	r5, r5, #32
    b44e:	8325      	strh	r5, [r4, #24]
    b450:	f388 8811 	msr	BASEPRI, r8
    b454:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    b458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b45c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    b460:	45aa      	cmp	sl, r5
    b462:	f000 80a6 	beq.w	b5b2 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    b466:	2700      	movs	r7, #0
    b468:	46b9      	mov	r9, r7
    b46a:	463e      	mov	r6, r7
    b46c:	68a3      	ldr	r3, [r4, #8]
    b46e:	2b00      	cmp	r3, #0
    b470:	f000 80bd 	beq.w	b5ee <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    b474:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    b478:	8321      	strh	r1, [r4, #24]
    b47a:	f388 8811 	msr	BASEPRI, r8
    b47e:	f3bf 8f6f 	isb	sy
	return list->head;
    b482:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b484:	2900      	cmp	r1, #0
    b486:	f000 80bb 	beq.w	b600 <process_event+0x1f0>
	return node->next;
    b48a:	680d      	ldr	r5, [r1, #0]
    b48c:	2900      	cmp	r1, #0
    b48e:	f000 80b7 	beq.w	b600 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    b492:	4633      	mov	r3, r6
    b494:	4652      	mov	r2, sl
    b496:	4620      	mov	r0, r4
    b498:	f8d1 8004 	ldr.w	r8, [r1, #4]
    b49c:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b49e:	2d00      	cmp	r5, #0
    b4a0:	d076      	beq.n	b590 <process_event+0x180>
    b4a2:	682b      	ldr	r3, [r5, #0]
    b4a4:	4629      	mov	r1, r5
    b4a6:	461d      	mov	r5, r3
    b4a8:	e7f0      	b.n	b48c <process_event+0x7c>
    b4aa:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    b4ae:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    b4b0:	2a01      	cmp	r2, #1
    b4b2:	d81b      	bhi.n	b4ec <process_event+0xdc>
	list->head = NULL;
    b4b4:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b4b6:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    b4ba:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    b4bc:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b4be:	b289      	uxth	r1, r1
	list->tail = NULL;
    b4c0:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    b4c4:	d109      	bne.n	b4da <process_event+0xca>
    b4c6:	463b      	mov	r3, r7
    b4c8:	e003      	b.n	b4d2 <process_event+0xc2>
				mgr->refs += 1U;
    b4ca:	8b62      	ldrh	r2, [r4, #26]
    b4cc:	3201      	adds	r2, #1
    b4ce:	8362      	strh	r2, [r4, #26]
	return node->next;
    b4d0:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    b4d2:	2b00      	cmp	r3, #0
    b4d4:	d1f9      	bne.n	b4ca <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b4d6:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    b4da:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    b4dc:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    b4de:	f00c fae3 	bl	17aa8 <process_recheck>
    b4e2:	2800      	cmp	r0, #0
    b4e4:	d07b      	beq.n	b5de <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    b4e6:	f041 0120 	orr.w	r1, r1, #32
    b4ea:	e077      	b.n	b5dc <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    b4ec:	2b04      	cmp	r3, #4
    b4ee:	d10a      	bne.n	b506 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b4f0:	f021 0107 	bic.w	r1, r1, #7
    b4f4:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    b4f6:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    b4f8:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    b4fa:	f00c fad5 	bl	17aa8 <process_recheck>
    b4fe:	b110      	cbz	r0, b506 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    b500:	f041 0120 	orr.w	r1, r1, #32
    b504:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b506:	8b21      	ldrh	r1, [r4, #24]
    b508:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    b50c:	45aa      	cmp	sl, r5
    b50e:	d050      	beq.n	b5b2 <process_event+0x1a2>
    b510:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    b512:	46b9      	mov	r9, r7
    b514:	e7aa      	b.n	b46c <process_event+0x5c>
			transit = mgr->transitions->start;
    b516:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b518:	f021 0107 	bic.w	r1, r1, #7
    b51c:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    b520:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    b522:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    b526:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    b528:	d12d      	bne.n	b586 <process_event+0x176>
		    || (transit != NULL)) {
    b52a:	f1b9 0f00 	cmp.w	r9, #0
    b52e:	d040      	beq.n	b5b2 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    b530:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    b534:	8321      	strh	r1, [r4, #24]
    b536:	f388 8811 	msr	BASEPRI, r8
    b53a:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    b53e:	4620      	mov	r0, r4
    b540:	4939      	ldr	r1, [pc, #228]	; (b628 <process_event+0x218>)
    b542:	47c8      	blx	r9
    b544:	e029      	b.n	b59a <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b546:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    b54a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b54c:	f041 0104 	orr.w	r1, r1, #4
    b550:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    b552:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    b554:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    b558:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    b55a:	d0e6      	beq.n	b52a <process_event+0x11a>
    b55c:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b55e:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    b562:	463e      	mov	r6, r7
    b564:	e782      	b.n	b46c <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b566:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    b56a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b56c:	f041 0105 	orr.w	r1, r1, #5
    b570:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    b572:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    b574:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    b578:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    b57a:	d0d6      	beq.n	b52a <process_event+0x11a>
    b57c:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b57e:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    b582:	463e      	mov	r6, r7
    b584:	e772      	b.n	b46c <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    b586:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b588:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    b58c:	463e      	mov	r6, r7
    b58e:	e76d      	b.n	b46c <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b590:	462b      	mov	r3, r5
    b592:	e787      	b.n	b4a4 <process_event+0x94>
			if (transit != NULL) {
    b594:	f1b9 0f00 	cmp.w	r9, #0
    b598:	d1d1      	bne.n	b53e <process_event+0x12e>
	__asm__ volatile(
    b59a:	f04f 0320 	mov.w	r3, #32
    b59e:	f3ef 8811 	mrs	r8, BASEPRI
    b5a2:	f383 8812 	msr	BASEPRI_MAX, r3
    b5a6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    b5aa:	8b23      	ldrh	r3, [r4, #24]
    b5ac:	f023 0308 	bic.w	r3, r3, #8
    b5b0:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    b5b2:	8b25      	ldrh	r5, [r4, #24]
    b5b4:	06ea      	lsls	r2, r5, #27
    b5b6:	d52e      	bpl.n	b616 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    b5b8:	f025 0310 	bic.w	r3, r5, #16
    b5bc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    b5be:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    b5c2:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b5c4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    b5c6:	2e00      	cmp	r6, #0
    b5c8:	f6bf af6f 	bge.w	b4aa <process_event+0x9a>
	list->head = NULL;
    b5cc:	2300      	movs	r3, #0
		*clients = mgr->clients;
    b5ce:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    b5d0:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b5d4:	f021 0107 	bic.w	r1, r1, #7
    b5d8:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    b5dc:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b5de:	8b21      	ldrh	r1, [r4, #24]
    b5e0:	f04f 0900 	mov.w	r9, #0
    b5e4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    b5e8:	45aa      	cmp	sl, r5
    b5ea:	f47f af3f 	bne.w	b46c <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    b5ee:	2f00      	cmp	r7, #0
    b5f0:	d09b      	beq.n	b52a <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    b5f2:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    b5f6:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    b5f8:	f388 8811 	msr	BASEPRI, r8
    b5fc:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    b600:	2f00      	cmp	r7, #0
    b602:	d0c7      	beq.n	b594 <process_event+0x184>
	return node->next;
    b604:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    b606:	4639      	mov	r1, r7
    b608:	4633      	mov	r3, r6
    b60a:	4652      	mov	r2, sl
    b60c:	4620      	mov	r0, r4
    b60e:	f00c fa77 	bl	17b00 <notify_one>
	list->head = node;
    b612:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    b614:	e7f4      	b.n	b600 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    b616:	06ab      	lsls	r3, r5, #26
    b618:	f57f af1a 	bpl.w	b450 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    b61c:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    b620:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    b622:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    b626:	e6ff      	b.n	b428 <process_event+0x18>
    b628:	00017b2d 	.word	0x00017b2d

0000b62c <extract_decimal>:
{
    b62c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b62e:	4602      	mov	r2, r0
    b630:	6801      	ldr	r1, [r0, #0]
		val = 10U * val + *sp++ - '0';
    b632:	270a      	movs	r7, #10
	size_t val = 0;
    b634:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp) != 0) {
    b636:	4e07      	ldr	r6, [pc, #28]	; (b654 <extract_decimal+0x28>)
    b638:	460b      	mov	r3, r1
    b63a:	781c      	ldrb	r4, [r3, #0]
    b63c:	3101      	adds	r1, #1
    b63e:	5d35      	ldrb	r5, [r6, r4]
    b640:	076d      	lsls	r5, r5, #29
    b642:	d401      	bmi.n	b648 <extract_decimal+0x1c>
	*str = sp;
    b644:	6013      	str	r3, [r2, #0]
}
    b646:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    b648:	fb07 4300 	mla	r3, r7, r0, r4
    b64c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    b650:	e7f2      	b.n	b638 <extract_decimal+0xc>
    b652:	bf00      	nop
    b654:	0001e02d 	.word	0x0001e02d

0000b658 <encode_uint>:
{
    b658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b65c:	4615      	mov	r5, r2
    b65e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    b660:	78d3      	ldrb	r3, [r2, #3]
    b662:	4a22      	ldr	r2, [pc, #136]	; (b6ec <encode_uint+0x94>)
	switch (specifier) {
    b664:	2b6f      	cmp	r3, #111	; 0x6f
    b666:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    b66a:	4680      	mov	r8, r0
    b66c:	460f      	mov	r7, r1
    b66e:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    b672:	d029      	beq.n	b6c8 <encode_uint+0x70>
    b674:	d824      	bhi.n	b6c0 <encode_uint+0x68>
		return 10;
    b676:	2b58      	cmp	r3, #88	; 0x58
    b678:	bf0c      	ite	eq
    b67a:	2610      	moveq	r6, #16
    b67c:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    b67e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    b682:	4632      	mov	r2, r6
    b684:	2300      	movs	r3, #0
    b686:	4640      	mov	r0, r8
    b688:	4639      	mov	r1, r7
    b68a:	f7fd f97b 	bl	8984 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b68e:	2a09      	cmp	r2, #9
    b690:	b2d4      	uxtb	r4, r2
    b692:	d81e      	bhi.n	b6d2 <encode_uint+0x7a>
    b694:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    b696:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b698:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    b69a:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b69e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    b6a2:	d301      	bcc.n	b6a8 <encode_uint+0x50>
    b6a4:	45d1      	cmp	r9, sl
    b6a6:	d811      	bhi.n	b6cc <encode_uint+0x74>
	if (conv->flag_hash) {
    b6a8:	782b      	ldrb	r3, [r5, #0]
    b6aa:	069b      	lsls	r3, r3, #26
    b6ac:	d505      	bpl.n	b6ba <encode_uint+0x62>
		if (radix == 8) {
    b6ae:	2e08      	cmp	r6, #8
    b6b0:	d115      	bne.n	b6de <encode_uint+0x86>
			conv->altform_0 = true;
    b6b2:	78ab      	ldrb	r3, [r5, #2]
    b6b4:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    b6b8:	70ab      	strb	r3, [r5, #2]
}
    b6ba:	4648      	mov	r0, r9
    b6bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    b6c0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    b6c4:	2b70      	cmp	r3, #112	; 0x70
    b6c6:	e7d7      	b.n	b678 <encode_uint+0x20>
	switch (specifier) {
    b6c8:	2608      	movs	r6, #8
    b6ca:	e7d8      	b.n	b67e <encode_uint+0x26>
		value /= radix;
    b6cc:	4680      	mov	r8, r0
    b6ce:	460f      	mov	r7, r1
    b6d0:	e7d7      	b.n	b682 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b6d2:	f1bb 0f01 	cmp.w	fp, #1
    b6d6:	bf0c      	ite	eq
    b6d8:	3437      	addeq	r4, #55	; 0x37
    b6da:	3457      	addne	r4, #87	; 0x57
    b6dc:	e7db      	b.n	b696 <encode_uint+0x3e>
		} else if (radix == 16) {
    b6de:	2e10      	cmp	r6, #16
    b6e0:	d1eb      	bne.n	b6ba <encode_uint+0x62>
			conv->altform_0c = true;
    b6e2:	78ab      	ldrb	r3, [r5, #2]
    b6e4:	f043 0310 	orr.w	r3, r3, #16
    b6e8:	e7e6      	b.n	b6b8 <encode_uint+0x60>
    b6ea:	bf00      	nop
    b6ec:	0001e02d 	.word	0x0001e02d

0000b6f0 <nordicsemi_nrf91_init>:
	__asm__ volatile(
    b6f0:	f04f 0220 	mov.w	r2, #32
    b6f4:	f3ef 8311 	mrs	r3, BASEPRI
    b6f8:	f382 8812 	msr	BASEPRI_MAX, r2
    b6fc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    b700:	2101      	movs	r1, #1
    b702:	4a04      	ldr	r2, [pc, #16]	; (b714 <nordicsemi_nrf91_init+0x24>)
    b704:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    b708:	f383 8811 	msr	BASEPRI, r3
    b70c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    b710:	2000      	movs	r0, #0
    b712:	4770      	bx	lr
    b714:	40039000 	.word	0x40039000

0000b718 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    b718:	b120      	cbz	r0, b724 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    b71a:	4b03      	ldr	r3, [pc, #12]	; (b728 <arch_busy_wait+0x10>)
    b71c:	0180      	lsls	r0, r0, #6
    b71e:	f043 0301 	orr.w	r3, r3, #1
    b722:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    b724:	4770      	bx	lr
    b726:	bf00      	nop
    b728:	0001b6f0 	.word	0x0001b6f0

0000b72c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    b72c:	f005 bcc0 	b.w	110b0 <SystemInit>

0000b730 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
    b730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b734:	4681      	mov	r9, r0
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);

	if (atomic_inc(&initialized) != 0) {
    b736:	482f      	ldr	r0, [pc, #188]	; (b7f4 <z_log_init.isra.0+0xc4>)
static uint32_t z_log_init(bool blocking, bool can_sleep)
    b738:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    b73a:	f00c fafb 	bl	17d34 <atomic_inc>
    b73e:	4606      	mov	r6, r0
    b740:	b970      	cbnz	r0, b760 <z_log_init.isra.0+0x30>
		z_log_links_initiate();
	}


	/* Assign ids to backends. */
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b742:	4c2d      	ldr	r4, [pc, #180]	; (b7f8 <z_log_init.isra.0+0xc8>)
	uint32_t mask = 0;
    b744:	4605      	mov	r5, r0
    b746:	46a0      	mov	r8, r4
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
    b748:	f04f 0b01 	mov.w	fp, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b74c:	f8df a0ac 	ldr.w	sl, [pc, #172]	; b7fc <z_log_init.isra.0+0xcc>
    b750:	4554      	cmp	r4, sl
    b752:	d307      	bcc.n	b764 <z_log_init.isra.0+0x34>
			i++;
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
    b754:	f1b9 0f00 	cmp.w	r9, #0
    b758:	d002      	beq.n	b760 <z_log_init.isra.0+0x30>
		mask_cpy &= ~BIT(i);
    b75a:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
    b75e:	b9e5      	cbnz	r5, b79a <z_log_init.isra.0+0x6a>
			}
		}
	}

	return mask;
}
    b760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (backend->autostart) {
    b764:	7b23      	ldrb	r3, [r4, #12]
    b766:	b173      	cbz	r3, b786 <z_log_init.isra.0+0x56>
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_init(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->init) {
    b768:	6823      	ldr	r3, [r4, #0]
    b76a:	68db      	ldr	r3, [r3, #12]
    b76c:	b10b      	cbz	r3, b772 <z_log_init.isra.0+0x42>
		backend->api->init(backend);
    b76e:	4620      	mov	r0, r4
    b770:	4798      	blx	r3
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    b772:	6823      	ldr	r3, [r4, #0]
    b774:	691b      	ldr	r3, [r3, #16]
    b776:	b943      	cbnz	r3, b78a <z_log_init.isra.0+0x5a>
				log_backend_enable(backend,
    b778:	6863      	ldr	r3, [r4, #4]
    b77a:	2204      	movs	r2, #4
    b77c:	4620      	mov	r0, r4
    b77e:	6819      	ldr	r1, [r3, #0]
    b780:	f000 f8c4 	bl	b90c <log_backend_enable>
			i++;
    b784:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b786:	3410      	adds	r4, #16
    b788:	e7e2      	b.n	b750 <z_log_init.isra.0+0x20>
		return backend->api->is_ready(backend);
    b78a:	4620      	mov	r0, r4
    b78c:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    b78e:	2800      	cmp	r0, #0
    b790:	d0f2      	beq.n	b778 <z_log_init.isra.0+0x48>
				mask |= BIT(i);
    b792:	fa0b f306 	lsl.w	r3, fp, r6
    b796:	431d      	orrs	r5, r3
    b798:	e7f4      	b.n	b784 <z_log_init.isra.0+0x54>
    b79a:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
    b79c:	fa95 f4a5 	rbit	r4, r5
    b7a0:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
    b7a4:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b7a8:	0126      	lsls	r6, r4, #4
    b7aa:	eb08 1404 	add.w	r4, r8, r4, lsl #4
		mask_cpy &= ~BIT(i);
    b7ae:	ea6f 0b03 	mvn.w	fp, r3
    b7b2:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b7b6:	7b23      	ldrb	r3, [r4, #12]
    b7b8:	b163      	cbz	r3, b7d4 <z_log_init.isra.0+0xa4>
	if (backend->api->is_ready != NULL) {
    b7ba:	f858 3006 	ldr.w	r3, [r8, r6]
    b7be:	691b      	ldr	r3, [r3, #16]
    b7c0:	b993      	cbnz	r3, b7e8 <z_log_init.isra.0+0xb8>
					   backend->cb->ctx,
    b7c2:	4446      	add	r6, r8
			log_backend_enable(backend,
    b7c4:	6873      	ldr	r3, [r6, #4]
    b7c6:	2204      	movs	r2, #4
    b7c8:	4620      	mov	r0, r4
    b7ca:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    b7cc:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
    b7d0:	f000 f89c 	bl	b90c <log_backend_enable>
	while (mask_cpy) {
    b7d4:	2d00      	cmp	r5, #0
    b7d6:	d1e1      	bne.n	b79c <z_log_init.isra.0+0x6c>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    b7d8:	b127      	cbz	r7, b7e4 <z_log_init.isra.0+0xb4>
	return z_impl_k_sleep(timeout);
    b7da:	f44f 70a4 	mov.w	r0, #328	; 0x148
    b7de:	2100      	movs	r1, #0
    b7e0:	f009 fb7c 	bl	14edc <z_impl_k_sleep>
    b7e4:	464d      	mov	r5, r9
    b7e6:	e7ba      	b.n	b75e <z_log_init.isra.0+0x2e>
		return backend->api->is_ready(backend);
    b7e8:	4620      	mov	r0, r4
    b7ea:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b7ec:	2800      	cmp	r0, #0
    b7ee:	d1f1      	bne.n	b7d4 <z_log_init.isra.0+0xa4>
    b7f0:	e7e7      	b.n	b7c2 <z_log_init.isra.0+0x92>
    b7f2:	bf00      	nop
    b7f4:	2000d004 	.word	0x2000d004
    b7f8:	0001b6a4 	.word	0x0001b6a4
    b7fc:	0001b6b4 	.word	0x0001b6b4

0000b800 <log_format_func_t_get>:
}
    b800:	4b01      	ldr	r3, [pc, #4]	; (b808 <log_format_func_t_get+0x8>)
    b802:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b806:	4770      	bx	lr
    b808:	0001b7f0 	.word	0x0001b7f0

0000b80c <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
    b80c:	b508      	push	{r3, lr}
    b80e:	4603      	mov	r3, r0
    b810:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    b812:	b12b      	cbz	r3, b820 <log_set_timestamp_func+0x14>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
    b814:	4a04      	ldr	r2, [pc, #16]	; (b828 <log_set_timestamp_func+0x1c>)
    b816:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
    b818:	f000 fa7c 	bl	bd14 <log_output_timestamp_freq_set>
	}

	return 0;
    b81c:	2000      	movs	r0, #0
}
    b81e:	bd08      	pop	{r3, pc}
		return -EINVAL;
    b820:	f06f 0015 	mvn.w	r0, #21
    b824:	e7fb      	b.n	b81e <log_set_timestamp_func+0x12>
    b826:	bf00      	nop
    b828:	2000c5b4 	.word	0x2000c5b4

0000b82c <log_core_init>:
	panic_mode = false;
    b82c:	2300      	movs	r3, #0
    b82e:	4a05      	ldr	r2, [pc, #20]	; (b844 <log_core_init+0x18>)
		log_set_timestamp_func(default_get_timestamp,
    b830:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    b834:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    b836:	4a04      	ldr	r2, [pc, #16]	; (b848 <log_core_init+0x1c>)
		log_set_timestamp_func(default_get_timestamp,
    b838:	4804      	ldr	r0, [pc, #16]	; (b84c <log_core_init+0x20>)
	dropped_cnt = 0;
    b83a:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    b83c:	4a04      	ldr	r2, [pc, #16]	; (b850 <log_core_init+0x24>)
    b83e:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    b840:	f7ff bfe4 	b.w	b80c <log_set_timestamp_func>
    b844:	2000d740 	.word	0x2000d740
    b848:	2000cffc 	.word	0x2000cffc
    b84c:	00017d31 	.word	0x00017d31
    b850:	2000d000 	.word	0x2000d000

0000b854 <z_impl_log_panic>:

void z_impl_log_panic(void)
{
    b854:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    b856:	4d0b      	ldr	r5, [pc, #44]	; (b884 <z_impl_log_panic+0x30>)
    b858:	7829      	ldrb	r1, [r5, #0]
    b85a:	b941      	cbnz	r1, b86e <z_impl_log_panic+0x1a>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
    b85c:	2001      	movs	r0, #1
    b85e:	f7ff ff67 	bl	b730 <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b862:	4c09      	ldr	r4, [pc, #36]	; (b888 <z_impl_log_panic+0x34>)
    b864:	4e09      	ldr	r6, [pc, #36]	; (b88c <z_impl_log_panic+0x38>)
    b866:	42b4      	cmp	r4, r6
    b868:	d302      	bcc.n	b870 <z_impl_log_panic+0x1c>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
    b86a:	2301      	movs	r3, #1
    b86c:	702b      	strb	r3, [r5, #0]
}
    b86e:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    b870:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    b872:	795b      	ldrb	r3, [r3, #5]
    b874:	b11b      	cbz	r3, b87e <z_impl_log_panic+0x2a>
	backend->api->panic(backend);
    b876:	6823      	ldr	r3, [r4, #0]
    b878:	4620      	mov	r0, r4
    b87a:	689b      	ldr	r3, [r3, #8]
    b87c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b87e:	3410      	adds	r4, #16
    b880:	e7f1      	b.n	b866 <z_impl_log_panic+0x12>
    b882:	bf00      	nop
    b884:	2000d740 	.word	0x2000d740
    b888:	0001b6a4 	.word	0x0001b6a4
    b88c:	0001b6b4 	.word	0x0001b6b4

0000b890 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
    b890:	b510      	push	{r4, lr}
    b892:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    b894:	4806      	ldr	r0, [pc, #24]	; (b8b0 <z_log_dropped+0x20>)
    b896:	f00c fa4d 	bl	17d34 <atomic_inc>
	if (buffered) {
    b89a:	b13c      	cbz	r4, b8ac <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    b89c:	4b05      	ldr	r3, [pc, #20]	; (b8b4 <z_log_dropped+0x24>)
    b89e:	e8d3 1fef 	ldaex	r1, [r3]
    b8a2:	3901      	subs	r1, #1
    b8a4:	e8c3 1fe2 	stlex	r2, r1, [r3]
    b8a8:	2a00      	cmp	r2, #0
    b8aa:	d1f8      	bne.n	b89e <z_log_dropped+0xe>
		atomic_dec(&buffered_cnt);
	}
}
    b8ac:	bd10      	pop	{r4, pc}
    b8ae:	bf00      	nop
    b8b0:	2000cffc 	.word	0x2000cffc
    b8b4:	2000d000 	.word	0x2000d000

0000b8b8 <z_log_msg_commit>:
#endif
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
    b8b8:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    b8ba:	4b0a      	ldr	r3, [pc, #40]	; (b8e4 <z_log_msg_commit+0x2c>)
{
    b8bc:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    b8be:	681b      	ldr	r3, [r3, #0]
    b8c0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b8c2:	4c09      	ldr	r4, [pc, #36]	; (b8e8 <z_log_msg_commit+0x30>)
    b8c4:	4e09      	ldr	r6, [pc, #36]	; (b8ec <z_log_msg_commit+0x34>)
	msg->hdr.timestamp = timestamp_func();
    b8c6:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b8c8:	42b4      	cmp	r4, r6
    b8ca:	d300      	bcc.n	b8ce <z_log_msg_commit+0x16>
	msg_commit(&log_buffer, msg);
}
    b8cc:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    b8ce:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    b8d0:	795b      	ldrb	r3, [r3, #5]
    b8d2:	b123      	cbz	r3, b8de <z_log_msg_commit+0x26>
	backend->api->process(backend, msg);
    b8d4:	6823      	ldr	r3, [r4, #0]
    b8d6:	4629      	mov	r1, r5
    b8d8:	4620      	mov	r0, r4
    b8da:	681b      	ldr	r3, [r3, #0]
    b8dc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b8de:	3410      	adds	r4, #16
    b8e0:	e7f2      	b.n	b8c8 <z_log_msg_commit+0x10>
    b8e2:	bf00      	nop
    b8e4:	2000c5b4 	.word	0x2000c5b4
    b8e8:	0001b6a4 	.word	0x0001b6a4
    b8ec:	0001b6b4 	.word	0x0001b6b4

0000b8f0 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    b8f0:	4a04      	ldr	r2, [pc, #16]	; (b904 <log_source_name_get+0x14>)
    b8f2:	4b05      	ldr	r3, [pc, #20]	; (b908 <log_source_name_get+0x18>)
    b8f4:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    b8f6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    b8fa:	bf34      	ite	cc
    b8fc:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    b900:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    b902:	4770      	bx	lr
    b904:	0001b5b4 	.word	0x0001b5b4
    b908:	0001b6a4 	.word	0x0001b6a4

0000b90c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    b90c:	4b08      	ldr	r3, [pc, #32]	; (b930 <log_backend_enable+0x24>)
{
    b90e:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    b910:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
    b912:	6844      	ldr	r4, [r0, #4]
    b914:	111b      	asrs	r3, r3, #4
    b916:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    b918:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    b91a:	6843      	ldr	r3, [r0, #4]
    b91c:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    b91e:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    b920:	6843      	ldr	r3, [r0, #4]
    b922:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    b924:	6843      	ldr	r3, [r0, #4]
    b926:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    b928:	f85d 4b04 	ldr.w	r4, [sp], #4
	z_log_notify_backend_enabled();
    b92c:	f00c ba20 	b.w	17d70 <z_log_notify_backend_enabled>
    b930:	0001b6a4 	.word	0x0001b6a4

0000b934 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    b934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b938:	b085      	sub	sp, #20
    b93a:	af02      	add	r7, sp, #8
    b93c:	4604      	mov	r4, r0
    b93e:	e9d7 a90e 	ldrd	sl, r9, [r7, #56]	; 0x38
    b942:	460e      	mov	r6, r1
    b944:	4693      	mov	fp, r2
    b946:	4698      	mov	r8, r3
    b948:	6b3d      	ldr	r5, [r7, #48]	; 0x30
	int plen;

	if (fmt) {
    b94a:	f1ba 0f00 	cmp.w	sl, #0
    b94e:	d033      	beq.n	b9b8 <z_impl_z_log_msg_runtime_vcreate+0x84>
		va_list ap2;

		va_copy(ap2, ap);
    b950:	f8c7 9004 	str.w	r9, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    b954:	f8cd 9000 	str.w	r9, [sp]
    b958:	2110      	movs	r1, #16
    b95a:	4653      	mov	r3, sl
    b95c:	2000      	movs	r0, #0
    b95e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    b960:	f7ff fb0e 	bl	af80 <cbvprintf_package>
    b964:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    b966:	4a15      	ldr	r2, [pc, #84]	; (b9bc <z_impl_z_log_msg_runtime_vcreate+0x88>)
    b968:	f004 0407 	and.w	r4, r4, #7
    b96c:	f00b 0b07 	and.w	fp, fp, #7
    b970:	00e4      	lsls	r4, r4, #3
    b972:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    b976:	ea02 2241 	and.w	r2, r2, r1, lsl #9
    b97a:	4314      	orrs	r4, r2
    b97c:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    b980:	3517      	adds	r5, #23
    b982:	440d      	add	r5, r1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    b984:	f025 0507 	bic.w	r5, r5, #7
    b988:	ebad 0d05 	sub.w	sp, sp, r5
    b98c:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    b98e:	f1ba 0f00 	cmp.w	sl, #0
    b992:	d007      	beq.n	b9a4 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    b994:	f8cd 9000 	str.w	r9, [sp]
    b998:	4653      	mov	r3, sl
    b99a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    b99c:	f105 0010 	add.w	r0, r5, #16
    b9a0:	f7ff faee 	bl	af80 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    b9a4:	4643      	mov	r3, r8
    b9a6:	4622      	mov	r2, r4
    b9a8:	4631      	mov	r1, r6
    b9aa:	4628      	mov	r0, r5
    b9ac:	f00c f9e3 	bl	17d76 <z_log_msg_finalize>
	}
}
    b9b0:	370c      	adds	r7, #12
    b9b2:	46bd      	mov	sp, r7
    b9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    b9b8:	4651      	mov	r1, sl
    b9ba:	e7d4      	b.n	b966 <z_impl_z_log_msg_runtime_vcreate+0x32>
    b9bc:	000ffe00 	.word	0x000ffe00

0000b9c0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    b9c0:	b40e      	push	{r1, r2, r3}
    b9c2:	b503      	push	{r0, r1, lr}
    b9c4:	ab03      	add	r3, sp, #12
    b9c6:	f853 2b04 	ldr.w	r2, [r3], #4
    b9ca:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    b9cc:	4804      	ldr	r0, [pc, #16]	; (b9e0 <print_formatted+0x20>)
	va_start(args, fmt);
    b9ce:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    b9d0:	f00c fa13 	bl	17dfa <cbvprintf>
	va_end(args);

	return length;
}
    b9d4:	b002      	add	sp, #8
    b9d6:	f85d eb04 	ldr.w	lr, [sp], #4
    b9da:	b003      	add	sp, #12
    b9dc:	4770      	bx	lr
    b9de:	bf00      	nop
    b9e0:	00017da9 	.word	0x00017da9

0000b9e4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    b9e4:	06ca      	lsls	r2, r1, #27
    b9e6:	d405      	bmi.n	b9f4 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    b9e8:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    b9ea:	bf4c      	ite	mi
    b9ec:	4902      	ldrmi	r1, [pc, #8]	; (b9f8 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    b9ee:	4903      	ldrpl	r1, [pc, #12]	; (b9fc <newline_print+0x18>)
    b9f0:	f7ff bfe6 	b.w	b9c0 <print_formatted>
	}
}
    b9f4:	4770      	bx	lr
    b9f6:	bf00      	nop
    b9f8:	0001dd7e 	.word	0x0001dd7e
    b9fc:	0001dd7d 	.word	0x0001dd7d

0000ba00 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    ba00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba04:	b08b      	sub	sp, #44	; 0x2c
    ba06:	469a      	mov	sl, r3
    ba08:	e9dd 7315 	ldrd	r7, r3, [sp, #84]	; 0x54
    ba0c:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
    ba10:	9306      	str	r3, [sp, #24]
    ba12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ba14:	4604      	mov	r4, r0
    ba16:	460d      	mov	r5, r1
    ba18:	9e18      	ldr	r6, [sp, #96]	; 0x60
    ba1a:	9208      	str	r2, [sp, #32]
    ba1c:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    ba1e:	f1bb 0f00 	cmp.w	fp, #0
    ba22:	f000 8085 	beq.w	bb30 <log_output_process+0x130>
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    ba26:	f006 0301 	and.w	r3, r6, #1
    ba2a:	9309      	str	r3, [sp, #36]	; 0x24
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    ba2c:	f006 0308 	and.w	r3, r6, #8
    ba30:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    ba32:	f00c f99e 	bl	17d72 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    ba36:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    ba3a:	4602      	mov	r2, r0
    ba3c:	2800      	cmp	r0, #0
    ba3e:	d047      	beq.n	bad0 <log_output_process+0xd0>
		length += print_formatted(output, "%s ", tag);
    ba40:	4620      	mov	r0, r4
    ba42:	4984      	ldr	r1, [pc, #528]	; (bc54 <log_output_process+0x254>)
    ba44:	f7ff ffbc 	bl	b9c0 <print_formatted>
    ba48:	4680      	mov	r8, r0
	if (stamp) {
    ba4a:	f1b9 0f00 	cmp.w	r9, #0
    ba4e:	d008      	beq.n	ba62 <log_output_process+0x62>
	if (!format) {
    ba50:	f016 0f44 	tst.w	r6, #68	; 0x44
    ba54:	d13e      	bne.n	bad4 <log_output_process+0xd4>
		length = print_formatted(output, "[%08lu] ", timestamp);
    ba56:	462a      	mov	r2, r5
    ba58:	4620      	mov	r0, r4
    ba5a:	497f      	ldr	r1, [pc, #508]	; (bc58 <log_output_process+0x258>)
    ba5c:	f7ff ffb0 	bl	b9c0 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    ba60:	4480      	add	r8, r0
	if (color) {
    ba62:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ba64:	b153      	cbz	r3, ba7c <log_output_process+0x7c>
		const char *log_color = start && (colors[level] != NULL) ?
    ba66:	4b7d      	ldr	r3, [pc, #500]	; (bc5c <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
    ba68:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    ba6a:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    ba6e:	4b7c      	ldr	r3, [pc, #496]	; (bc60 <log_output_process+0x260>)
    ba70:	497c      	ldr	r1, [pc, #496]	; (bc64 <log_output_process+0x264>)
    ba72:	2a00      	cmp	r2, #0
    ba74:	bf08      	it	eq
    ba76:	461a      	moveq	r2, r3
    ba78:	f7ff ffa2 	bl	b9c0 <print_formatted>
	if (level_on) {
    ba7c:	9b07      	ldr	r3, [sp, #28]
    ba7e:	2b00      	cmp	r3, #0
    ba80:	d054      	beq.n	bb2c <log_output_process+0x12c>
		total += print_formatted(output, "<%s> ", severity[level]);
    ba82:	4b79      	ldr	r3, [pc, #484]	; (bc68 <log_output_process+0x268>)
    ba84:	4620      	mov	r0, r4
    ba86:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    ba8a:	4978      	ldr	r1, [pc, #480]	; (bc6c <log_output_process+0x26c>)
    ba8c:	f7ff ff98 	bl	b9c0 <print_formatted>
    ba90:	4605      	mov	r5, r0
	if (domain) {
    ba92:	9b08      	ldr	r3, [sp, #32]
    ba94:	b12b      	cbz	r3, baa2 <log_output_process+0xa2>
		total += print_formatted(output, "%s/", domain);
    ba96:	461a      	mov	r2, r3
    ba98:	4620      	mov	r0, r4
    ba9a:	4975      	ldr	r1, [pc, #468]	; (bc70 <log_output_process+0x270>)
    ba9c:	f7ff ff90 	bl	b9c0 <print_formatted>
    baa0:	4405      	add	r5, r0
	if (source) {
    baa2:	f1ba 0f00 	cmp.w	sl, #0
    baa6:	d005      	beq.n	bab4 <log_output_process+0xb4>
		total += print_formatted(output,
    baa8:	4652      	mov	r2, sl
    baaa:	4620      	mov	r0, r4
    baac:	4971      	ldr	r1, [pc, #452]	; (bc74 <log_output_process+0x274>)
    baae:	f7ff ff87 	bl	b9c0 <print_formatted>
    bab2:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    bab4:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    bab6:	2f00      	cmp	r7, #0
    bab8:	d148      	bne.n	bb4c <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    baba:	9b05      	ldr	r3, [sp, #20]
    babc:	2b00      	cmp	r3, #0
    babe:	d14e      	bne.n	bb5e <log_output_process+0x15e>
	if (color) {
    bac0:	07f3      	lsls	r3, r6, #31
    bac2:	f100 80c0 	bmi.w	bc46 <log_output_process+0x246>
	newline_print(output, flags);
    bac6:	4631      	mov	r1, r6
    bac8:	4620      	mov	r0, r4
    baca:	f7ff ff8b 	bl	b9e4 <newline_print>
}
    bace:	e0b4      	b.n	bc3a <log_output_process+0x23a>
	uint32_t length = 0U;
    bad0:	4680      	mov	r8, r0
    bad2:	e7ba      	b.n	ba4a <log_output_process+0x4a>
	} else if (freq != 0U) {
    bad4:	4b68      	ldr	r3, [pc, #416]	; (bc78 <log_output_process+0x278>)
    bad6:	6818      	ldr	r0, [r3, #0]
    bad8:	2800      	cmp	r0, #0
    bada:	d0c1      	beq.n	ba60 <log_output_process+0x60>
		timestamp /= timestamp_div;
    badc:	4b67      	ldr	r3, [pc, #412]	; (bc7c <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    bade:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    bae2:	681b      	ldr	r3, [r3, #0]
    bae4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    bae8:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    baec:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    baf0:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    baf4:	fb09 f505 	mul.w	r5, r9, r5
    baf8:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    bafc:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    bb00:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    bb04:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    bb08:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
    bb0c:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    bb10:	fb09 f505 	mul.w	r5, r9, r5
    bb14:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    bb18:	fb0c 1113 	mls	r1, ip, r3, r1
    bb1c:	4620      	mov	r0, r4
    bb1e:	9100      	str	r1, [sp, #0]
    bb20:	e9cd e501 	strd	lr, r5, [sp, #4]
    bb24:	4956      	ldr	r1, [pc, #344]	; (bc80 <log_output_process+0x280>)
    bb26:	f7ff ff4b 	bl	b9c0 <print_formatted>
    bb2a:	e799      	b.n	ba60 <log_output_process+0x60>
	int total = 0;
    bb2c:	9d07      	ldr	r5, [sp, #28]
    bb2e:	e7b0      	b.n	ba92 <log_output_process+0x92>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    bb30:	f1ba 0f01 	cmp.w	sl, #1
    bb34:	d106      	bne.n	bb44 <log_output_process+0x144>
	if (package) {
    bb36:	2f00      	cmp	r7, #0
    bb38:	d165      	bne.n	bc06 <log_output_process+0x206>
	if (data_len) {
    bb3a:	9b05      	ldr	r3, [sp, #20]
    bb3c:	2b00      	cmp	r3, #0
    bb3e:	d07c      	beq.n	bc3a <log_output_process+0x23a>
		prefix_offset = 0;
    bb40:	2500      	movs	r5, #0
    bb42:	e00c      	b.n	bb5e <log_output_process+0x15e>
	if (package) {
    bb44:	2f00      	cmp	r7, #0
    bb46:	d0f8      	beq.n	bb3a <log_output_process+0x13a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    bb48:	484e      	ldr	r0, [pc, #312]	; (bc84 <log_output_process+0x284>)
    bb4a:	e05d      	b.n	bc08 <log_output_process+0x208>
		cb = out_func;
    bb4c:	484e      	ldr	r0, [pc, #312]	; (bc88 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    bb4e:	463b      	mov	r3, r7
    bb50:	4622      	mov	r2, r4
    bb52:	494e      	ldr	r1, [pc, #312]	; (bc8c <log_output_process+0x28c>)
    bb54:	f00b fd85 	bl	17662 <cbpprintf_external>
	if (data_len) {
    bb58:	9b05      	ldr	r3, [sp, #20]
    bb5a:	2b00      	cmp	r3, #0
    bb5c:	d069      	beq.n	bc32 <log_output_process+0x232>
		print_formatted(output, " ");
    bb5e:	f8df 8140 	ldr.w	r8, [pc, #320]	; bca0 <log_output_process+0x2a0>
			print_formatted(output, "%02x ", data[i]);
    bb62:	f8df 9140 	ldr.w	r9, [pc, #320]	; bca4 <log_output_process+0x2a4>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    bb66:	9f05      	ldr	r7, [sp, #20]
	newline_print(output, flags);
    bb68:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    bb6a:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    bb6c:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    bb6e:	bf28      	it	cs
    bb70:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
    bb72:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
    bb76:	f7ff ff35 	bl	b9e4 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    bb7a:	4555      	cmp	r5, sl
    bb7c:	dc46      	bgt.n	bc0c <log_output_process+0x20c>
			print_formatted(output, "%02x ", data[i]);
    bb7e:	9b06      	ldr	r3, [sp, #24]
    bb80:	4649      	mov	r1, r9
    bb82:	4620      	mov	r0, r4
    bb84:	781a      	ldrb	r2, [r3, #0]
    bb86:	f7ff ff1b 	bl	b9c0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    bb8a:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    bb8e:	f01a 0f07 	tst.w	sl, #7
    bb92:	d103      	bne.n	bb9c <log_output_process+0x19c>
			print_formatted(output, " ");
    bb94:	4641      	mov	r1, r8
    bb96:	4620      	mov	r0, r4
    bb98:	f7ff ff12 	bl	b9c0 <print_formatted>
		if (i < length) {
    bb9c:	4557      	cmp	r7, sl
    bb9e:	d93c      	bls.n	bc1a <log_output_process+0x21a>
			print_formatted(output, "%02x ", data[i]);
    bba0:	9b06      	ldr	r3, [sp, #24]
    bba2:	4649      	mov	r1, r9
    bba4:	4620      	mov	r0, r4
    bba6:	f813 200a 	ldrb.w	r2, [r3, sl]
    bbaa:	f7ff ff09 	bl	b9c0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    bbae:	f10a 0a01 	add.w	sl, sl, #1
    bbb2:	f1ba 0f10 	cmp.w	sl, #16
    bbb6:	d1ea      	bne.n	bb8e <log_output_process+0x18e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    bbb8:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    bbbc:	4620      	mov	r0, r4
    bbbe:	4934      	ldr	r1, [pc, #208]	; (bc90 <log_output_process+0x290>)
    bbc0:	f7ff fefe 	bl	b9c0 <print_formatted>
		if (i < length) {
    bbc4:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    bbc6:	9b06      	ldr	r3, [sp, #24]
			print_formatted(output, "%c",
    bbc8:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    bbca:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    bbcc:	4b31      	ldr	r3, [pc, #196]	; (bc94 <log_output_process+0x294>)
    bbce:	5c99      	ldrb	r1, [r3, r2]
    bbd0:	f011 0f97 	tst.w	r1, #151	; 0x97
    bbd4:	bf08      	it	eq
    bbd6:	222e      	moveq	r2, #46	; 0x2e
    bbd8:	492f      	ldr	r1, [pc, #188]	; (bc98 <log_output_process+0x298>)
    bbda:	f7ff fef1 	bl	b9c0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    bbde:	f10a 0a01 	add.w	sl, sl, #1
    bbe2:	f1ba 0f10 	cmp.w	sl, #16
    bbe6:	d01d      	beq.n	bc24 <log_output_process+0x224>
		if (i > 0 && !(i % 8)) {
    bbe8:	f01a 0f07 	tst.w	sl, #7
    bbec:	d103      	bne.n	bbf6 <log_output_process+0x1f6>
			print_formatted(output, " ");
    bbee:	4641      	mov	r1, r8
    bbf0:	4620      	mov	r0, r4
    bbf2:	f7ff fee5 	bl	b9c0 <print_formatted>
		if (i < length) {
    bbf6:	4557      	cmp	r7, sl
    bbf8:	4652      	mov	r2, sl
    bbfa:	d8e4      	bhi.n	bbc6 <log_output_process+0x1c6>
			print_formatted(output, " ");
    bbfc:	4641      	mov	r1, r8
    bbfe:	4620      	mov	r0, r4
    bc00:	f7ff fede 	bl	b9c0 <print_formatted>
    bc04:	e7eb      	b.n	bbde <log_output_process+0x1de>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    bc06:	4820      	ldr	r0, [pc, #128]	; (bc88 <log_output_process+0x288>)
		prefix_offset = 0;
    bc08:	465d      	mov	r5, fp
    bc0a:	e7a0      	b.n	bb4e <log_output_process+0x14e>
		print_formatted(output, " ");
    bc0c:	4641      	mov	r1, r8
    bc0e:	4620      	mov	r0, r4
    bc10:	f7ff fed6 	bl	b9c0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    bc14:	f10a 0a01 	add.w	sl, sl, #1
    bc18:	e7af      	b.n	bb7a <log_output_process+0x17a>
			print_formatted(output, "   ");
    bc1a:	4620      	mov	r0, r4
    bc1c:	491f      	ldr	r1, [pc, #124]	; (bc9c <log_output_process+0x29c>)
    bc1e:	f7ff fecf 	bl	b9c0 <print_formatted>
    bc22:	e7c4      	b.n	bbae <log_output_process+0x1ae>
		data += length;
    bc24:	9b06      	ldr	r3, [sp, #24]
    bc26:	443b      	add	r3, r7
    bc28:	9306      	str	r3, [sp, #24]
	} while (len);
    bc2a:	9b05      	ldr	r3, [sp, #20]
    bc2c:	1bdb      	subs	r3, r3, r7
    bc2e:	9305      	str	r3, [sp, #20]
    bc30:	d199      	bne.n	bb66 <log_output_process+0x166>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    bc32:	f1bb 0f00 	cmp.w	fp, #0
    bc36:	f47f af43 	bne.w	bac0 <log_output_process+0xc0>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    bc3a:	4620      	mov	r0, r4
}
    bc3c:	b00b      	add	sp, #44	; 0x2c
    bc3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    bc42:	f00c b8e1 	b.w	17e08 <log_output_flush>
		print_formatted(output, "%s", log_color);
    bc46:	4620      	mov	r0, r4
    bc48:	4a05      	ldr	r2, [pc, #20]	; (bc60 <log_output_process+0x260>)
    bc4a:	4906      	ldr	r1, [pc, #24]	; (bc64 <log_output_process+0x264>)
    bc4c:	f7ff feb8 	bl	b9c0 <print_formatted>
}
    bc50:	e739      	b.n	bac6 <log_output_process+0xc6>
    bc52:	bf00      	nop
    bc54:	0001c271 	.word	0x0001c271
    bc58:	0001c275 	.word	0x0001c275
    bc5c:	0001b800 	.word	0x0001b800
    bc60:	0001c26c 	.word	0x0001c26c
    bc64:	0001cfa7 	.word	0x0001cfa7
    bc68:	0001b814 	.word	0x0001b814
    bc6c:	0001c29a 	.word	0x0001c29a
    bc70:	0001c2a0 	.word	0x0001c2a0
    bc74:	0001c2a4 	.word	0x0001c2a4
    bc78:	2000d00c 	.word	0x2000d00c
    bc7c:	2000d008 	.word	0x2000d008
    bc80:	0001c27e 	.word	0x0001c27e
    bc84:	00017dc5 	.word	0x00017dc5
    bc88:	00017da9 	.word	0x00017da9
    bc8c:	00017dfb 	.word	0x00017dfb
    bc90:	0001c2b3 	.word	0x0001c2b3
    bc94:	0001e02d 	.word	0x0001e02d
    bc98:	0001d0d5 	.word	0x0001d0d5
    bc9c:	0001c2af 	.word	0x0001c2af
    bca0:	0001c2b1 	.word	0x0001c2b1
    bca4:	0001c2a9 	.word	0x0001c2a9

0000bca8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    bca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    bcac:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    bcae:	684b      	ldr	r3, [r1, #4]
    bcb0:	4605      	mov	r5, r0
    bcb2:	460c      	mov	r4, r1
    bcb4:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    bcb6:	688e      	ldr	r6, [r1, #8]
    bcb8:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    bcba:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    bcbe:	b15b      	cbz	r3, bcd8 <log_output_msg_process+0x30>
    bcc0:	4a13      	ldr	r2, [pc, #76]	; (bd10 <log_output_msg_process+0x68>)
    bcc2:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    bcc4:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    bcc8:	2900      	cmp	r1, #0
    bcca:	db1f      	blt.n	bd0c <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    bccc:	7820      	ldrb	r0, [r4, #0]
    bcce:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    bcd2:	f7ff fe0d 	bl	b8f0 <log_source_name_get>
    bcd6:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    bcd8:	4621      	mov	r1, r4
    bcda:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    bcde:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    bce0:	f3c2 224a 	ubfx	r2, r2, #9, #11
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    bce4:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    bce6:	eb01 0402 	add.w	r4, r1, r2
    bcea:	bf08      	it	eq
    bcec:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    bcee:	f3c0 100b 	ubfx	r0, r0, #4, #12
    bcf2:	e9cd 0803 	strd	r0, r8, [sp, #12]
    bcf6:	e9cd 1401 	strd	r1, r4, [sp, #4]
    bcfa:	2200      	movs	r2, #0
    bcfc:	4631      	mov	r1, r6
    bcfe:	4628      	mov	r0, r5
    bd00:	9700      	str	r7, [sp, #0]
    bd02:	f7ff fe7d 	bl	ba00 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    bd06:	b006      	add	sp, #24
    bd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    bd0c:	2300      	movs	r3, #0
    bd0e:	e7e3      	b.n	bcd8 <log_output_msg_process+0x30>
    bd10:	0001b5b4 	.word	0x0001b5b4

0000bd14 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    bd14:	2100      	movs	r1, #0
    bd16:	2301      	movs	r3, #1
    bd18:	4a06      	ldr	r2, [pc, #24]	; (bd34 <log_output_timestamp_freq_set+0x20>)
    bd1a:	4290      	cmp	r0, r2
    bd1c:	d806      	bhi.n	bd2c <log_output_timestamp_freq_set+0x18>
    bd1e:	4a06      	ldr	r2, [pc, #24]	; (bd38 <log_output_timestamp_freq_set+0x24>)
    bd20:	b901      	cbnz	r1, bd24 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    bd22:	2301      	movs	r3, #1
    bd24:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    bd26:	4b05      	ldr	r3, [pc, #20]	; (bd3c <log_output_timestamp_freq_set+0x28>)
    bd28:	6018      	str	r0, [r3, #0]
}
    bd2a:	4770      	bx	lr
		timestamp_div *= 2U;
    bd2c:	2101      	movs	r1, #1
		frequency /= 2U;
    bd2e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    bd30:	005b      	lsls	r3, r3, #1
    bd32:	e7f2      	b.n	bd1a <log_output_timestamp_freq_set+0x6>
    bd34:	000f4240 	.word	0x000f4240
    bd38:	2000d008 	.word	0x2000d008
    bd3c:	2000d00c 	.word	0x2000d00c

0000bd40 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    bd40:	4b01      	ldr	r3, [pc, #4]	; (bd48 <format_set+0x8>)
	return 0;
}
    bd42:	2000      	movs	r0, #0
	log_format_current = log_type;
    bd44:	6019      	str	r1, [r3, #0]
}
    bd46:	4770      	bx	lr
    bd48:	2000d024 	.word	0x2000d024

0000bd4c <panic>:
		}
	}
}

static void panic(struct log_backend const *const backend)
{
    bd4c:	b507      	push	{r0, r1, r2, lr}
	}
#elif defined(CONFIG_PM_DEVICE)
	enum pm_device_state pm_state;
	int rc;

	rc = pm_device_state_get(uart_dev, &pm_state);
    bd4e:	480b      	ldr	r0, [pc, #44]	; (bd7c <panic+0x30>)
    bd50:	f10d 0107 	add.w	r1, sp, #7
    bd54:	f00c f866 	bl	17e24 <pm_device_state_get>
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
    bd58:	b930      	cbnz	r0, bd68 <panic+0x1c>
    bd5a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    bd5e:	2901      	cmp	r1, #1
    bd60:	d102      	bne.n	bd68 <panic+0x1c>
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
    bd62:	4806      	ldr	r0, [pc, #24]	; (bd7c <panic+0x30>)
    bd64:	f000 fa18 	bl	c198 <pm_device_action_run>
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    bd68:	2201      	movs	r2, #1
    bd6a:	4b05      	ldr	r3, [pc, #20]	; (bd80 <panic+0x34>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    bd6c:	4805      	ldr	r0, [pc, #20]	; (bd84 <panic+0x38>)
    bd6e:	701a      	strb	r2, [r3, #0]
    bd70:	f00c f84a 	bl	17e08 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    bd74:	b003      	add	sp, #12
    bd76:	f85d fb04 	ldr.w	pc, [sp], #4
    bd7a:	bf00      	nop
    bd7c:	0001b344 	.word	0x0001b344
    bd80:	2000d742 	.word	0x2000d742
    bd84:	0001b844 	.word	0x0001b844

0000bd88 <process>:
{
    bd88:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    bd8a:	4b06      	ldr	r3, [pc, #24]	; (bda4 <process+0x1c>)
{
    bd8c:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    bd8e:	6818      	ldr	r0, [r3, #0]
    bd90:	f7ff fd36 	bl	b800 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    bd94:	4621      	mov	r1, r4
}
    bd96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    bd9a:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    bd9c:	220f      	movs	r2, #15
    bd9e:	4802      	ldr	r0, [pc, #8]	; (bda8 <process+0x20>)
    bda0:	4718      	bx	r3
    bda2:	bf00      	nop
    bda4:	2000d024 	.word	0x2000d024
    bda8:	0001b844 	.word	0x0001b844

0000bdac <char_out>:
{
    bdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bdae:	460d      	mov	r5, r1
    bdb0:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    bdb2:	4f06      	ldr	r7, [pc, #24]	; (bdcc <char_out+0x20>)
    bdb4:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    bdb6:	42b4      	cmp	r4, r6
    bdb8:	d101      	bne.n	bdbe <char_out+0x12>
}
    bdba:	4628      	mov	r0, r5
    bdbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    bdbe:	f814 1b01 	ldrb.w	r1, [r4], #1
    bdc2:	68bb      	ldr	r3, [r7, #8]
    bdc4:	4801      	ldr	r0, [pc, #4]	; (bdcc <char_out+0x20>)
    bdc6:	685b      	ldr	r3, [r3, #4]
    bdc8:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    bdca:	e7f4      	b.n	bdb6 <char_out+0xa>
    bdcc:	0001b344 	.word	0x0001b344

0000bdd0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    bdd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bdd4:	4605      	mov	r5, r0
	__asm__ volatile(
    bdd6:	f04f 0320 	mov.w	r3, #32
    bdda:	f3ef 8611 	mrs	r6, BASEPRI
    bdde:	f383 8812 	msr	BASEPRI_MAX, r3
    bde2:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    bde6:	f04f 090c 	mov.w	r9, #12
	return list->head;
    bdea:	4b0d      	ldr	r3, [pc, #52]	; (be20 <pm_state_notify+0x50>)
    bdec:	4f0d      	ldr	r7, [pc, #52]	; (be24 <pm_state_notify+0x54>)
    bdee:	681c      	ldr	r4, [r3, #0]
    bdf0:	f8df 8034 	ldr.w	r8, [pc, #52]	; be28 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    bdf4:	b92c      	cbnz	r4, be02 <pm_state_notify+0x32>
	__asm__ volatile(
    bdf6:	f386 8811 	msr	BASEPRI, r6
    bdfa:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    bdfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    be02:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    be06:	2d00      	cmp	r5, #0
    be08:	bf18      	it	ne
    be0a:	4613      	movne	r3, r2
		if (callback) {
    be0c:	b12b      	cbz	r3, be1a <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    be0e:	f898 2010 	ldrb.w	r2, [r8, #16]
    be12:	fb09 f202 	mul.w	r2, r9, r2
    be16:	5cb8      	ldrb	r0, [r7, r2]
    be18:	4798      	blx	r3
	return node->next;
    be1a:	6824      	ldr	r4, [r4, #0]
    be1c:	e7ea      	b.n	bdf4 <pm_state_notify+0x24>
    be1e:	bf00      	nop
    be20:	2000d044 	.word	0x2000d044
    be24:	2000d038 	.word	0x2000d038
    be28:	2000d6e8 	.word	0x2000d6e8

0000be2c <pm_resume_devices>:
{
    be2c:	b570      	push	{r4, r5, r6, lr}
	for (int i = (num_susp - 1); i >= 0; i--) {
    be2e:	4d08      	ldr	r5, [pc, #32]	; (be50 <pm_resume_devices+0x24>)
		pm_device_action_run(__pm_device_slots_start[i],
    be30:	4e08      	ldr	r6, [pc, #32]	; (be54 <pm_resume_devices+0x28>)
	for (int i = (num_susp - 1); i >= 0; i--) {
    be32:	682c      	ldr	r4, [r5, #0]
    be34:	3c01      	subs	r4, #1
    be36:	2c00      	cmp	r4, #0
    be38:	da02      	bge.n	be40 <pm_resume_devices+0x14>
	num_susp = 0;
    be3a:	2300      	movs	r3, #0
    be3c:	602b      	str	r3, [r5, #0]
}
    be3e:	bd70      	pop	{r4, r5, r6, pc}
		pm_device_action_run(__pm_device_slots_start[i],
    be40:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    be44:	2101      	movs	r1, #1
    be46:	f000 f9a7 	bl	c198 <pm_device_action_run>
	for (int i = (num_susp - 1); i >= 0; i--) {
    be4a:	3c01      	subs	r4, #1
    be4c:	e7f3      	b.n	be36 <pm_resume_devices+0xa>
    be4e:	bf00      	nop
    be50:	2000d028 	.word	0x2000d028
    be54:	2000c91c 	.word	0x2000c91c

0000be58 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    be58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    be5a:	ab0b      	add	r3, sp, #44	; 0x2c
    be5c:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    be5e:	9303      	str	r3, [sp, #12]
    be60:	4b05      	ldr	r3, [pc, #20]	; (be78 <z_log_msg_runtime_create.constprop.0+0x20>)
    be62:	2201      	movs	r2, #1
    be64:	9302      	str	r3, [sp, #8]
    be66:	2300      	movs	r3, #0
    be68:	4618      	mov	r0, r3
    be6a:	e9cd 3300 	strd	r3, r3, [sp]
    be6e:	f7ff fd61 	bl	b934 <z_impl_z_log_msg_runtime_vcreate>
}
    be72:	b007      	add	sp, #28
    be74:	f85d fb04 	ldr.w	pc, [sp], #4
    be78:	0001c2ef 	.word	0x0001c2ef

0000be7c <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    be7c:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    be7e:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    be80:	4b16      	ldr	r3, [pc, #88]	; (bedc <pm_system_resume+0x60>)
    be82:	7c1c      	ldrb	r4, [r3, #16]
    be84:	f004 031f 	and.w	r3, r4, #31
    be88:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    be8a:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    be8c:	4b14      	ldr	r3, [pc, #80]	; (bee0 <pm_system_resume+0x64>)
    be8e:	0961      	lsrs	r1, r4, #5
    be90:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    be94:	e8d3 1fef 	ldaex	r1, [r3]
    be98:	ea01 0500 	and.w	r5, r1, r0
    be9c:	e8c3 5fe6 	stlex	r6, r5, [r3]
    bea0:	2e00      	cmp	r6, #0
    bea2:	d1f7      	bne.n	be94 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    bea4:	420a      	tst	r2, r1
    bea6:	d013      	beq.n	bed0 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    bea8:	4b0e      	ldr	r3, [pc, #56]	; (bee4 <pm_system_resume+0x68>)
    beaa:	4d0f      	ldr	r5, [pc, #60]	; (bee8 <pm_system_resume+0x6c>)
    beac:	b18b      	cbz	r3, bed2 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    beae:	230c      	movs	r3, #12
    beb0:	4363      	muls	r3, r4
    beb2:	18ea      	adds	r2, r5, r3
    beb4:	7851      	ldrb	r1, [r2, #1]
    beb6:	5ce8      	ldrb	r0, [r5, r3]
    beb8:	f00b ff32 	bl	17d20 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    bebc:	2000      	movs	r0, #0
    bebe:	f7ff ff87 	bl	bdd0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    bec2:	230c      	movs	r3, #12
    bec4:	435c      	muls	r4, r3
    bec6:	2300      	movs	r3, #0
    bec8:	192a      	adds	r2, r5, r4
    beca:	512b      	str	r3, [r5, r4]
    becc:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    bed0:	bd70      	pop	{r4, r5, r6, pc}
    bed2:	f383 8811 	msr	BASEPRI, r3
    bed6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    beda:	e7ef      	b.n	bebc <pm_system_resume+0x40>
    bedc:	2000d6e8 	.word	0x2000d6e8
    bee0:	2000d04c 	.word	0x2000d04c
    bee4:	00017d21 	.word	0x00017d21
    bee8:	2000d038 	.word	0x2000d038

0000beec <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    beec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t id = CURRENT_CPU;
    bef0:	4b6e      	ldr	r3, [pc, #440]	; (c0ac <pm_system_suspend+0x1c0>)
{
    bef2:	4606      	mov	r6, r0
	uint8_t id = CURRENT_CPU;
    bef4:	7c1d      	ldrb	r5, [r3, #16]
{
    bef6:	b089      	sub	sp, #36	; 0x24
	__asm__ volatile(
    bef8:	f04f 0320 	mov.w	r3, #32
    befc:	f3ef 8811 	mrs	r8, BASEPRI
    bf00:	f383 8812 	msr	BASEPRI_MAX, r3
    bf04:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    bf08:	240c      	movs	r4, #12
    bf0a:	436c      	muls	r4, r5
    bf0c:	4b68      	ldr	r3, [pc, #416]	; (c0b0 <pm_system_suspend+0x1c4>)
    bf0e:	4f69      	ldr	r7, [pc, #420]	; (c0b4 <pm_system_suspend+0x1c8>)
    bf10:	5d19      	ldrb	r1, [r3, r4]
    bf12:	191a      	adds	r2, r3, r4
    bf14:	2900      	cmp	r1, #0
    bf16:	d070      	beq.n	bffa <pm_system_suspend+0x10e>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    bf18:	ca07      	ldmia	r2, {r0, r1, r2}
    bf1a:	eb07 0c04 	add.w	ip, r7, r4
    bf1e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    bf22:	2200      	movs	r2, #0
    bf24:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    bf26:	f388 8811 	msr	BASEPRI, r8
    bf2a:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    bf2e:	230c      	movs	r3, #12
    bf30:	436b      	muls	r3, r5
    bf32:	18fa      	adds	r2, r7, r3
    bf34:	5cfb      	ldrb	r3, [r7, r3]
    bf36:	2b00      	cmp	r3, #0
    bf38:	f000 80a9 	beq.w	c08e <pm_system_suspend+0x1a2>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    bf3c:	1c73      	adds	r3, r6, #1
    bf3e:	d010      	beq.n	bf62 <pm_system_suspend+0x76>
			return (uint32_t)((t * to_hz + off) / from_hz);
    bf40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    bf44:	2100      	movs	r1, #0
    bf46:	f8d2 c008 	ldr.w	ip, [r2, #8]
    bf4a:	4c5b      	ldr	r4, [pc, #364]	; (c0b8 <pm_system_suspend+0x1cc>)
    bf4c:	2300      	movs	r3, #0
    bf4e:	fbec 4100 	umlal	r4, r1, ip, r0
    bf52:	4a5a      	ldr	r2, [pc, #360]	; (c0bc <pm_system_suspend+0x1d0>)
    bf54:	4620      	mov	r0, r4
    bf56:	f7fc fd15 	bl	8984 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    bf5a:	2101      	movs	r1, #1
    bf5c:	1a30      	subs	r0, r6, r0
    bf5e:	f001 ffef 	bl	df40 <sys_clock_set_timeout>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    bf62:	f8df 8170 	ldr.w	r8, [pc, #368]	; c0d4 <pm_system_suspend+0x1e8>
    bf66:	e8d8 4fef 	ldaex	r4, [r8]
    bf6a:	3c01      	subs	r4, #1
    bf6c:	e8c8 4fe3 	stlex	r3, r4, [r8]
    bf70:	2b00      	cmp	r3, #0
    bf72:	d1f8      	bne.n	bf66 <pm_system_suspend+0x7a>
    bf74:	46c2      	mov	sl, r8
			     z_cpus_pm_state[id].exit_latency_us),
				     true);
	}

#if defined(CONFIG_PM_DEVICE) && !defined(CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE)
	if (atomic_sub(&z_cpus_active, 1) == 1) {
    bf76:	b99c      	cbnz	r4, bfa0 <pm_system_suspend+0xb4>
		if (z_cpus_pm_state[id].state != PM_STATE_RUNTIME_IDLE) {
    bf78:	230c      	movs	r3, #12
    bf7a:	436b      	muls	r3, r5
    bf7c:	5cfb      	ldrb	r3, [r7, r3]
    bf7e:	2b01      	cmp	r3, #1
    bf80:	d00e      	beq.n	bfa0 <pm_system_suspend+0xb4>
	devc = z_device_get_all_static(&devs);
    bf82:	a807      	add	r0, sp, #28
    bf84:	f008 f818 	bl	13fb8 <z_device_get_all_static>
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
    bf88:	231c      	movs	r3, #28
    bf8a:	4358      	muls	r0, r3
	num_susp = 0;
    bf8c:	f8df b148 	ldr.w	fp, [pc, #328]	; c0d8 <pm_system_suspend+0x1ec>
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
    bf90:	381c      	subs	r0, #28
	num_susp = 0;
    bf92:	f8cb 4000 	str.w	r4, [fp]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
    bf96:	9c07      	ldr	r4, [sp, #28]
    bf98:	4404      	add	r4, r0
    bf9a:	9b07      	ldr	r3, [sp, #28]
    bf9c:	429c      	cmp	r4, r3
    bf9e:	d237      	bcs.n	c010 <pm_system_suspend+0x124>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    bfa0:	f008 fee2 	bl	14d68 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    bfa4:	2001      	movs	r0, #1
    bfa6:	f7ff ff13 	bl	bdd0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bfaa:	4b45      	ldr	r3, [pc, #276]	; (c0c0 <pm_system_suspend+0x1d4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    bfac:	096a      	lsrs	r2, r5, #5
    bfae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    bfb2:	2201      	movs	r2, #1
    bfb4:	f005 011f 	and.w	r1, r5, #31
    bfb8:	408a      	lsls	r2, r1
    bfba:	e8d3 0fef 	ldaex	r0, [r3]
    bfbe:	4310      	orrs	r0, r2
    bfc0:	e8c3 0fe1 	stlex	r1, r0, [r3]
    bfc4:	2900      	cmp	r1, #0
    bfc6:	d1f8      	bne.n	bfba <pm_system_suspend+0xce>
	if (pm_state_set != NULL) {
    bfc8:	4b3e      	ldr	r3, [pc, #248]	; (c0c4 <pm_system_suspend+0x1d8>)
    bfca:	b133      	cbz	r3, bfda <pm_system_suspend+0xee>
		pm_state_set(info->state, info->substate_id);
    bfcc:	230c      	movs	r3, #12
    bfce:	435d      	muls	r5, r3
    bfd0:	197b      	adds	r3, r7, r5
    bfd2:	7859      	ldrb	r1, [r3, #1]
    bfd4:	5d78      	ldrb	r0, [r7, r5]
    bfd6:	f00b fe97 	bl	17d08 <pm_state_set>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    bfda:	e8da 3fef 	ldaex	r3, [sl]
    bfde:	1c5a      	adds	r2, r3, #1
    bfe0:	e8ca 2fe1 	stlex	r1, r2, [sl]
    bfe4:	2900      	cmp	r1, #0
    bfe6:	d1f8      	bne.n	bfda <pm_system_suspend+0xee>
	state_set(&z_cpus_pm_state[id]);
	pm_stats_stop();

	/* Wake up sequence starts here */
#if defined(CONFIG_PM_DEVICE) && !defined(CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE)
	if (atomic_add(&z_cpus_active, 1) == 0) {
    bfe8:	b90b      	cbnz	r3, bfee <pm_system_suspend+0x102>
		pm_resume_devices();
    bfea:	f7ff ff1f 	bl	be2c <pm_resume_devices>
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    bfee:	f7ff ff45 	bl	be7c <pm_system_resume>
	k_sched_unlock();
    bff2:	f008 fecd 	bl	14d90 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    bff6:	2001      	movs	r0, #1
    bff8:	e04a      	b.n	c090 <pm_system_suspend+0x1a4>
		info = pm_policy_next_state(id, ticks);
    bffa:	4601      	mov	r1, r0
    bffc:	4628      	mov	r0, r5
    bffe:	f000 f86d 	bl	c0dc <pm_policy_next_state>
		if (info != NULL) {
    c002:	2800      	cmp	r0, #0
    c004:	d08f      	beq.n	bf26 <pm_system_suspend+0x3a>
			z_cpus_pm_state[id] = *info;
    c006:	c807      	ldmia	r0, {r0, r1, r2}
    c008:	443c      	add	r4, r7
    c00a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    c00e:	e78a      	b.n	bf26 <pm_system_suspend+0x3a>
    c010:	4620      	mov	r0, r4
    c012:	f00d feed 	bl	19df0 <z_device_is_ready>
		if (!device_is_ready(dev) || pm_device_is_busy(dev) ||
    c016:	2800      	cmp	r0, #0
    c018:	d045      	beq.n	c0a6 <pm_system_suspend+0x1ba>
    c01a:	4620      	mov	r0, r4
    c01c:	f00b ff0b 	bl	17e36 <pm_device_is_busy>
    c020:	2800      	cmp	r0, #0
    c022:	d140      	bne.n	c0a6 <pm_system_suspend+0x1ba>
		    pm_device_state_is_locked(dev) ||
    c024:	4620      	mov	r0, r4
    c026:	f00b ff16 	bl	17e56 <pm_device_state_is_locked>
		if (!device_is_ready(dev) || pm_device_is_busy(dev) ||
    c02a:	2800      	cmp	r0, #0
    c02c:	d13b      	bne.n	c0a6 <pm_system_suspend+0x1ba>
		    pm_device_wakeup_is_enabled(dev) ||
    c02e:	4620      	mov	r0, r4
    c030:	f00b ff09 	bl	17e46 <pm_device_wakeup_is_enabled>
		    pm_device_state_is_locked(dev) ||
    c034:	4606      	mov	r6, r0
    c036:	bbb0      	cbnz	r0, c0a6 <pm_system_suspend+0x1ba>
		ret = pm_device_action_run(dev, PM_DEVICE_ACTION_SUSPEND);
    c038:	4601      	mov	r1, r0
    c03a:	4620      	mov	r0, r4
    c03c:	f000 f8ac 	bl	c198 <pm_device_action_run>
		if ((ret == -ENOSYS) || (ret == -ENOTSUP) || (ret == -EALREADY)) {
    c040:	f020 0320 	bic.w	r3, r0, #32
    c044:	3378      	adds	r3, #120	; 0x78
		ret = pm_device_action_run(dev, PM_DEVICE_ACTION_SUSPEND);
    c046:	4681      	mov	r9, r0
		if ((ret == -ENOSYS) || (ret == -ENOTSUP) || (ret == -EALREADY)) {
    c048:	d02d      	beq.n	c0a6 <pm_system_suspend+0x1ba>
    c04a:	f110 0f86 	cmn.w	r0, #134	; 0x86
    c04e:	d02a      	beq.n	c0a6 <pm_system_suspend+0x1ba>
		} else if (ret < 0) {
    c050:	2800      	cmp	r0, #0
    c052:	da20      	bge.n	c096 <pm_system_suspend+0x1aa>
			LOG_ERR("Device %s did not enter %s state (%d)",
    c054:	2001      	movs	r0, #1
    c056:	6824      	ldr	r4, [r4, #0]
    c058:	f000 f892 	bl	c180 <pm_device_state_str>
    c05c:	4b1a      	ldr	r3, [pc, #104]	; (c0c8 <pm_system_suspend+0x1dc>)
    c05e:	2201      	movs	r2, #1
    c060:	e9cd 0904 	strd	r0, r9, [sp, #16]
    c064:	e9cd 6301 	strd	r6, r3, [sp, #4]
    c068:	4630      	mov	r0, r6
    c06a:	4633      	mov	r3, r6
    c06c:	4917      	ldr	r1, [pc, #92]	; (c0cc <pm_system_suspend+0x1e0>)
    c06e:	9403      	str	r4, [sp, #12]
    c070:	9600      	str	r6, [sp, #0]
    c072:	f7ff fef1 	bl	be58 <z_log_msg_runtime_create.constprop.0>
				pm_resume_devices();
    c076:	f7ff fed9 	bl	be2c <pm_resume_devices>
				z_cpus_pm_state[id].state = PM_STATE_ACTIVE;
    c07a:	230c      	movs	r3, #12
    c07c:	436b      	muls	r3, r5
    c07e:	54fe      	strb	r6, [r7, r3]
    c080:	e8d8 3fef 	ldaex	r3, [r8]
    c084:	3301      	adds	r3, #1
    c086:	e8c8 3fe2 	stlex	r2, r3, [r8]
    c08a:	2a00      	cmp	r2, #0
    c08c:	d1f8      	bne.n	c080 <pm_system_suspend+0x194>
		return false;
    c08e:	2000      	movs	r0, #0
}
    c090:	b009      	add	sp, #36	; 0x24
    c092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__pm_device_slots_start[num_susp] = dev;
    c096:	f8db 3000 	ldr.w	r3, [fp]
    c09a:	4a0d      	ldr	r2, [pc, #52]	; (c0d0 <pm_system_suspend+0x1e4>)
    c09c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
		num_susp++;
    c0a0:	3301      	adds	r3, #1
    c0a2:	f8cb 3000 	str.w	r3, [fp]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
    c0a6:	3c1c      	subs	r4, #28
    c0a8:	e777      	b.n	bf9a <pm_system_suspend+0xae>
    c0aa:	bf00      	nop
    c0ac:	2000d6e8 	.word	0x2000d6e8
    c0b0:	2000d02c 	.word	0x2000d02c
    c0b4:	2000d038 	.word	0x2000d038
    c0b8:	000f423f 	.word	0x000f423f
    c0bc:	000f4240 	.word	0x000f4240
    c0c0:	2000d04c 	.word	0x2000d04c
    c0c4:	00017d09 	.word	0x00017d09
    c0c8:	0001c2ef 	.word	0x0001c2ef
    c0cc:	0001b684 	.word	0x0001b684
    c0d0:	2000c91c 	.word	0x2000c91c
    c0d4:	2000c5b8 	.word	0x2000c5b8
    c0d8:	2000d028 	.word	0x2000d028

0000c0dc <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    c0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c0e0:	b085      	sub	sp, #20
    c0e2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    c0e4:	a903      	add	r1, sp, #12
    c0e6:	f000 f843 	bl	c170 <pm_state_cpu_get_all>
    c0ea:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    c0ee:	4604      	mov	r4, r0
    c0f0:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c0f4:	4b1b      	ldr	r3, [pc, #108]	; (c164 <pm_policy_next_state+0x88>)
    c0f6:	9d03      	ldr	r5, [sp, #12]
    c0f8:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c0fc:	1e43      	subs	r3, r0, #1
    c0fe:	b21b      	sxth	r3, r3
    c100:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c104:	f8df 8064 	ldr.w	r8, [pc, #100]	; c16c <pm_policy_next_state+0x90>
    c108:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    c10c:	b924      	cbnz	r4, c118 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    c10e:	46a1      	mov	r9, r4
}
    c110:	4648      	mov	r0, r9
    c112:	b005      	add	sp, #20
    c114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c118:	46c4      	mov	ip, r8
    c11a:	4659      	mov	r1, fp
    c11c:	6868      	ldr	r0, [r5, #4]
    c11e:	2300      	movs	r3, #0
    c120:	fbe0 c107 	umlal	ip, r1, r0, r7
    c124:	4a10      	ldr	r2, [pc, #64]	; (c168 <pm_policy_next_state+0x8c>)
    c126:	4660      	mov	r0, ip
    c128:	f7fc fc2c 	bl	8984 <__aeabi_uldivmod>
    c12c:	46c4      	mov	ip, r8
    c12e:	4659      	mov	r1, fp
    c130:	9001      	str	r0, [sp, #4]
    c132:	68a8      	ldr	r0, [r5, #8]
    c134:	2300      	movs	r3, #0
    c136:	fbe0 c107 	umlal	ip, r1, r0, r7
    c13a:	4a0b      	ldr	r2, [pc, #44]	; (c168 <pm_policy_next_state+0x8c>)
    c13c:	4660      	mov	r0, ip
    c13e:	f7fc fc21 	bl	8984 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c142:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    c146:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c148:	d001      	beq.n	c14e <pm_policy_next_state+0x72>
    c14a:	4582      	cmp	sl, r0
    c14c:	d905      	bls.n	c15a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    c14e:	1c73      	adds	r3, r6, #1
    c150:	d0de      	beq.n	c110 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    c152:	9b01      	ldr	r3, [sp, #4]
    c154:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    c156:	42b0      	cmp	r0, r6
    c158:	d9da      	bls.n	c110 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c15a:	3c01      	subs	r4, #1
    c15c:	b2a4      	uxth	r4, r4
    c15e:	3d0c      	subs	r5, #12
    c160:	e7d4      	b.n	c10c <pm_policy_next_state+0x30>
    c162:	bf00      	nop
    c164:	2000c5bc 	.word	0x2000c5bc
    c168:	000f4240 	.word	0x000f4240
    c16c:	000f423f 	.word	0x000f423f

0000c170 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    c170:	b908      	cbnz	r0, c176 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    c172:	4b02      	ldr	r3, [pc, #8]	; (c17c <pm_state_cpu_get_all+0xc>)
    c174:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    c176:	2000      	movs	r0, #0
    c178:	4770      	bx	lr
    c17a:	bf00      	nop
    c17c:	0001b854 	.word	0x0001b854

0000c180 <pm_device_state_str>:
	[PM_DEVICE_ACTION_TURN_ON] = PM_DEVICE_STATE_OFF,
};

const char *pm_device_state_str(enum pm_device_state state)
{
	switch (state) {
    c180:	2803      	cmp	r0, #3
    c182:	bf9a      	itte	ls
    c184:	4b02      	ldrls	r3, [pc, #8]	; (c190 <pm_device_state_str+0x10>)
    c186:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
    c18a:	4802      	ldrhi	r0, [pc, #8]	; (c194 <pm_device_state_str+0x14>)
	case PM_DEVICE_STATE_OFF:
		return "off";
	default:
		return "";
	}
}
    c18c:	4770      	bx	lr
    c18e:	bf00      	nop
    c190:	0001b854 	.word	0x0001b854
    c194:	0001dd7f 	.word	0x0001dd7f

0000c198 <pm_device_action_run>:

int pm_device_action_run(const struct device *dev,
			 enum pm_device_action action)
{
    c198:	b570      	push	{r4, r5, r6, lr}
	struct pm_device *pm = dev->pm;
    c19a:	6984      	ldr	r4, [r0, #24]
{
    c19c:	4603      	mov	r3, r0
    c19e:	460d      	mov	r5, r1
	int ret;

	if (pm == NULL) {
    c1a0:	b38c      	cbz	r4, c206 <pm_device_action_run+0x6e>
		return -ENOSYS;
	}

	if (pm_device_state_is_locked(dev)) {
    c1a2:	f00b fe58 	bl	17e56 <pm_device_state_is_locked>
    c1a6:	bb88      	cbnz	r0, c20c <pm_device_action_run+0x74>
		return -EPERM;
	}

	/* Validate action against current state */
	if (pm->state == action_target_state[action]) {
    c1a8:	481d      	ldr	r0, [pc, #116]	; (c220 <pm_device_action_run+0x88>)
    c1aa:	7a22      	ldrb	r2, [r4, #8]
    c1ac:	5c46      	ldrb	r6, [r0, r1]
    c1ae:	42b2      	cmp	r2, r6
    c1b0:	d02f      	beq.n	c212 <pm_device_action_run+0x7a>
		return -EALREADY;
	}
	if (pm->state != action_expected_state[action]) {
    c1b2:	481c      	ldr	r0, [pc, #112]	; (c224 <pm_device_action_run+0x8c>)
    c1b4:	5c40      	ldrb	r0, [r0, r1]
    c1b6:	4290      	cmp	r0, r2
    c1b8:	d12e      	bne.n	c218 <pm_device_action_run+0x80>
		return -ENOTSUP;
	}

	ret = pm->action_cb(dev, action);
    c1ba:	4618      	mov	r0, r3
    c1bc:	68e2      	ldr	r2, [r4, #12]
    c1be:	4790      	blx	r2
	if (ret < 0) {
    c1c0:	2800      	cmp	r0, #0
    c1c2:	da11      	bge.n	c1e8 <pm_device_action_run+0x50>
		 * physical behavior.
		 *
		 * The function will still return the error code so the domain
		 * can take whatever action is more appropriated.
		 */
		switch (action) {
    c1c4:	2d02      	cmp	r5, #2
    c1c6:	d00d      	beq.n	c1e4 <pm_device_action_run+0x4c>
    c1c8:	2d03      	cmp	r5, #3
    c1ca:	d10c      	bne.n	c1e6 <pm_device_action_run+0x4e>
		case PM_DEVICE_ACTION_TURN_ON:
			/* Store an error flag when the transition explicitly fails */
			if (ret != -ENOTSUP) {
    c1cc:	f110 0f86 	cmn.w	r0, #134	; 0x86
    c1d0:	d008      	beq.n	c1e4 <pm_device_action_run+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c1d2:	1d23      	adds	r3, r4, #4
    c1d4:	e8d3 1fef 	ldaex	r1, [r3]
    c1d8:	f041 0102 	orr.w	r1, r1, #2
    c1dc:	e8c3 1fe2 	stlex	r2, r1, [r3]
    c1e0:	2a00      	cmp	r2, #0
    c1e2:	d1f7      	bne.n	c1d4 <pm_device_action_run+0x3c>
				atomic_set_bit(&pm->flags, PM_DEVICE_FLAG_TURN_ON_FAILED);
			}
			__fallthrough;
		case PM_DEVICE_ACTION_TURN_OFF:
			pm->state = action_target_state[action];
    c1e4:	7226      	strb	r6, [r4, #8]
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
		atomic_clear_bit(&pm->flags, PM_DEVICE_FLAG_TURN_ON_FAILED);
	}

	return 0;
}
    c1e6:	bd70      	pop	{r4, r5, r6, pc}
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
    c1e8:	2d02      	cmp	r5, #2
	pm->state = action_target_state[action];
    c1ea:	7226      	strb	r6, [r4, #8]
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
    c1ec:	d001      	beq.n	c1f2 <pm_device_action_run+0x5a>
	return 0;
    c1ee:	2000      	movs	r0, #0
    c1f0:	e7f9      	b.n	c1e6 <pm_device_action_run+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c1f2:	3404      	adds	r4, #4
    c1f4:	e8d4 3fef 	ldaex	r3, [r4]
    c1f8:	f023 0302 	bic.w	r3, r3, #2
    c1fc:	e8c4 3fe2 	stlex	r2, r3, [r4]
    c200:	2a00      	cmp	r2, #0
    c202:	d0f4      	beq.n	c1ee <pm_device_action_run+0x56>
    c204:	e7f6      	b.n	c1f4 <pm_device_action_run+0x5c>
		return -ENOSYS;
    c206:	f06f 0057 	mvn.w	r0, #87	; 0x57
    c20a:	e7ec      	b.n	c1e6 <pm_device_action_run+0x4e>
		return -EPERM;
    c20c:	f04f 30ff 	mov.w	r0, #4294967295
    c210:	e7e9      	b.n	c1e6 <pm_device_action_run+0x4e>
		return -EALREADY;
    c212:	f06f 0077 	mvn.w	r0, #119	; 0x77
    c216:	e7e6      	b.n	c1e6 <pm_device_action_run+0x4e>
		return -ENOTSUP;
    c218:	f06f 0085 	mvn.w	r0, #133	; 0x85
    c21c:	e7e3      	b.n	c1e6 <pm_device_action_run+0x4e>
    c21e:	bf00      	nop
    c220:	0001c33b 	.word	0x0001c33b
    c224:	0001c337 	.word	0x0001c337

0000c228 <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
    c228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c22c:	4605      	mov	r5, r0
    c22e:	460e      	mov	r6, r1
    c230:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    c232:	4c10      	ldr	r4, [pc, #64]	; (c274 <z_impl_zsock_socket+0x4c>)
    c234:	f8df 8040 	ldr.w	r8, [pc, #64]	; c278 <z_impl_zsock_socket+0x50>
    c238:	4544      	cmp	r4, r8
    c23a:	d307      	bcc.n	c24c <z_impl_zsock_socket+0x24>
		}

		return sock_family->handler(family, type, proto);
	}

	errno = EAFNOSUPPORT;
    c23c:	f00b feda 	bl	17ff4 <__errno>
    c240:	236a      	movs	r3, #106	; 0x6a
    c242:	6003      	str	r3, [r0, #0]
	return -1;
}
    c244:	f04f 30ff 	mov.w	r0, #4294967295
    c248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sock_family->family != family &&
    c24c:	6823      	ldr	r3, [r4, #0]
    c24e:	42ab      	cmp	r3, r5
    c250:	d000      	beq.n	c254 <z_impl_zsock_socket+0x2c>
    c252:	b963      	cbnz	r3, c26e <z_impl_zsock_socket+0x46>
		if (!sock_family->is_supported(family, type, proto)) {
    c254:	463a      	mov	r2, r7
    c256:	4631      	mov	r1, r6
    c258:	4628      	mov	r0, r5
    c25a:	68a3      	ldr	r3, [r4, #8]
    c25c:	4798      	blx	r3
    c25e:	b130      	cbz	r0, c26e <z_impl_zsock_socket+0x46>
		return sock_family->handler(family, type, proto);
    c260:	463a      	mov	r2, r7
    c262:	4631      	mov	r1, r6
    c264:	4628      	mov	r0, r5
    c266:	68e3      	ldr	r3, [r4, #12]
}
    c268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sock_family->handler(family, type, proto);
    c26c:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    c26e:	3410      	adds	r4, #16
    c270:	e7e2      	b.n	c238 <z_impl_zsock_socket+0x10>
    c272:	bf00      	nop
    c274:	0001b5a4 	.word	0x0001b5a4
    c278:	0001b5b4 	.word	0x0001b5b4

0000c27c <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
    c27c:	4b01      	ldr	r3, [pc, #4]	; (c284 <socket_offload_dns_register+0x8>)
    c27e:	6018      	str	r0, [r3, #0]
}
    c280:	4770      	bx	lr
    c282:	bf00      	nop
    c284:	2000d050 	.word	0x2000d050

0000c288 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    c288:	4901      	ldr	r1, [pc, #4]	; (c290 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    c28a:	2210      	movs	r2, #16
	str	r2, [r1]
    c28c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    c28e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    c290:	e000ed10 	.word	0xe000ed10

0000c294 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    c294:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    c296:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    c298:	f380 8811 	msr	BASEPRI, r0
	isb
    c29c:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    c2a0:	f3bf 8f4f 	dsb	sy
    c2a4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    c2a6:	b662      	cpsie	i
	isb
    c2a8:	f3bf 8f6f 	isb	sy

	bx	lr
    c2ac:	4770      	bx	lr
    c2ae:	bf00      	nop

0000c2b0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    c2b0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    c2b2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    c2b4:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    c2b8:	f3bf 8f4f 	dsb	sy
    c2bc:	bf20      	wfe

	msr	BASEPRI, r0
    c2be:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    c2c2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    c2c4:	4770      	bx	lr
    c2c6:	bf00      	nop

0000c2c8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    c2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c2cc:	4680      	mov	r8, r0

	if (esf != NULL) {
    c2ce:	460d      	mov	r5, r1
{
    c2d0:	b08c      	sub	sp, #48	; 0x30
	if (esf != NULL) {
    c2d2:	2900      	cmp	r1, #0
    c2d4:	d077      	beq.n	c3c6 <z_arm_fatal_error+0xfe>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    c2d6:	2400      	movs	r4, #0
    c2d8:	688b      	ldr	r3, [r1, #8]
    c2da:	2201      	movs	r2, #1
    c2dc:	9305      	str	r3, [sp, #20]
    c2de:	684b      	ldr	r3, [r1, #4]
    c2e0:	4620      	mov	r0, r4
    c2e2:	9304      	str	r3, [sp, #16]
    c2e4:	680b      	ldr	r3, [r1, #0]
    c2e6:	493b      	ldr	r1, [pc, #236]	; (c3d4 <z_arm_fatal_error+0x10c>)
    c2e8:	9303      	str	r3, [sp, #12]
    c2ea:	4b3b      	ldr	r3, [pc, #236]	; (c3d8 <z_arm_fatal_error+0x110>)
    c2ec:	e9cd 4400 	strd	r4, r4, [sp]
    c2f0:	9302      	str	r3, [sp, #8]
    c2f2:	4623      	mov	r3, r4
    c2f4:	f00b fdb7 	bl	17e66 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    c2f8:	696b      	ldr	r3, [r5, #20]
    c2fa:	2201      	movs	r2, #1
    c2fc:	9305      	str	r3, [sp, #20]
    c2fe:	692b      	ldr	r3, [r5, #16]
    c300:	4620      	mov	r0, r4
    c302:	9304      	str	r3, [sp, #16]
    c304:	68eb      	ldr	r3, [r5, #12]
    c306:	4933      	ldr	r1, [pc, #204]	; (c3d4 <z_arm_fatal_error+0x10c>)
    c308:	9303      	str	r3, [sp, #12]
    c30a:	4b34      	ldr	r3, [pc, #208]	; (c3dc <z_arm_fatal_error+0x114>)
    c30c:	9400      	str	r4, [sp, #0]
    c30e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    c312:	4623      	mov	r3, r4
    c314:	f00b fda7 	bl	17e66 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    c318:	69eb      	ldr	r3, [r5, #28]
    c31a:	2201      	movs	r2, #1
    c31c:	9303      	str	r3, [sp, #12]
    c31e:	4b30      	ldr	r3, [pc, #192]	; (c3e0 <z_arm_fatal_error+0x118>)
    c320:	4620      	mov	r0, r4
    c322:	e9cd 4301 	strd	r4, r3, [sp, #4]
    c326:	492b      	ldr	r1, [pc, #172]	; (c3d4 <z_arm_fatal_error+0x10c>)
    c328:	4623      	mov	r3, r4
    c32a:	9400      	str	r4, [sp, #0]
    c32c:	f00b fd9b 	bl	17e66 <z_log_msg_runtime_create.constprop.0>
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
    c330:	462f      	mov	r7, r5
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    c332:	4626      	mov	r6, r4
    c334:	f8df 90b4 	ldr.w	r9, [pc, #180]	; c3ec <z_arm_fatal_error+0x124>
    c338:	f8df a098 	ldr.w	sl, [pc, #152]	; c3d4 <z_arm_fatal_error+0x10c>
    c33c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    c340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    c344:	1ce3      	adds	r3, r4, #3
    c346:	9309      	str	r3, [sp, #36]	; 0x24
    c348:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
    c34c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    c354:	1ca3      	adds	r3, r4, #2
    c356:	9307      	str	r3, [sp, #28]
    c358:	edcd 7a08 	vstr	s15, [sp, #32]
    c35c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    c360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    c364:	1c63      	adds	r3, r4, #1
    c366:	9305      	str	r3, [sp, #20]
    c368:	edcd 7a06 	vstr	s15, [sp, #24]
    c36c:	edd7 7a08 	vldr	s15, [r7, #32]
    c370:	2300      	movs	r3, #0
    c372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    c376:	e9cd 9402 	strd	r9, r4, [sp, #8]
    c37a:	edcd 7a04 	vstr	s15, [sp, #16]
    c37e:	2201      	movs	r2, #1
    c380:	4651      	mov	r1, sl
    c382:	4618      	mov	r0, r3
    c384:	e9cd 6600 	strd	r6, r6, [sp]
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
    c388:	3404      	adds	r4, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    c38a:	f00b fd6c 	bl	17e66 <z_log_msg_runtime_create.constprop.0>
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
    c38e:	2c10      	cmp	r4, #16
    c390:	f107 0710 	add.w	r7, r7, #16
    c394:	d1d2      	bne.n	c33c <z_arm_fatal_error+0x74>
	LOG_ERR("fpscr:  0x%08x", esf->fpu.fpscr);
    c396:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    c398:	2201      	movs	r2, #1
    c39a:	9303      	str	r3, [sp, #12]
    c39c:	4b11      	ldr	r3, [pc, #68]	; (c3e4 <z_arm_fatal_error+0x11c>)
    c39e:	490d      	ldr	r1, [pc, #52]	; (c3d4 <z_arm_fatal_error+0x10c>)
    c3a0:	e9cd 6301 	strd	r6, r3, [sp, #4]
    c3a4:	2300      	movs	r3, #0
    c3a6:	9600      	str	r6, [sp, #0]
    c3a8:	4618      	mov	r0, r3
    c3aa:	f00b fd5c 	bl	17e66 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    c3ae:	69ab      	ldr	r3, [r5, #24]
    c3b0:	2201      	movs	r2, #1
    c3b2:	9303      	str	r3, [sp, #12]
    c3b4:	4b0c      	ldr	r3, [pc, #48]	; (c3e8 <z_arm_fatal_error+0x120>)
    c3b6:	4907      	ldr	r1, [pc, #28]	; (c3d4 <z_arm_fatal_error+0x10c>)
    c3b8:	e9cd 6301 	strd	r6, r3, [sp, #4]
    c3bc:	2300      	movs	r3, #0
    c3be:	9600      	str	r6, [sp, #0]
    c3c0:	4618      	mov	r0, r3
    c3c2:	f00b fd50 	bl	17e66 <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    c3c6:	4629      	mov	r1, r5
    c3c8:	4640      	mov	r0, r8
}
    c3ca:	b00c      	add	sp, #48	; 0x30
    c3cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_fatal_error(reason, esf);
    c3d0:	f007 be06 	b.w	13fe0 <z_fatal_error>
    c3d4:	0001b67c 	.word	0x0001b67c
    c3d8:	0001c3c1 	.word	0x0001c3c1
    c3dc:	0001c3f0 	.word	0x0001c3f0
    c3e0:	0001c41f 	.word	0x0001c41f
    c3e4:	0001c471 	.word	0x0001c471
    c3e8:	0001c480 	.word	0x0001c480
    c3ec:	0001c42e 	.word	0x0001c42e

0000c3f0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    c3f0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    c3f2:	2800      	cmp	r0, #0
    c3f4:	db07      	blt.n	c406 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c3f6:	2301      	movs	r3, #1
    c3f8:	0941      	lsrs	r1, r0, #5
    c3fa:	4a03      	ldr	r2, [pc, #12]	; (c408 <arch_irq_enable+0x18>)
    c3fc:	f000 001f 	and.w	r0, r0, #31
    c400:	4083      	lsls	r3, r0
    c402:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    c406:	4770      	bx	lr
    c408:	e000e100 	.word	0xe000e100

0000c40c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    c40c:	4b05      	ldr	r3, [pc, #20]	; (c424 <arch_irq_is_enabled+0x18>)
    c40e:	0942      	lsrs	r2, r0, #5
    c410:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    c414:	2301      	movs	r3, #1
    c416:	f000 001f 	and.w	r0, r0, #31
    c41a:	fa03 f000 	lsl.w	r0, r3, r0
}
    c41e:	4010      	ands	r0, r2
    c420:	4770      	bx	lr
    c422:	bf00      	nop
    c424:	e000e100 	.word	0xe000e100

0000c428 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    c428:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    c42a:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    c42c:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c430:	bfac      	ite	ge
    c432:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c436:	4b06      	ldrlt	r3, [pc, #24]	; (c450 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c438:	ea4f 1141 	mov.w	r1, r1, lsl #5
    c43c:	b2c9      	uxtb	r1, r1
    c43e:	bfab      	itete	ge
    c440:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c444:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c448:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c44c:	5419      	strblt	r1, [r3, r0]
}
    c44e:	4770      	bx	lr
    c450:	e000ed14 	.word	0xe000ed14

0000c454 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    c454:	bf30      	wfi
    b z_SysNmiOnReset
    c456:	f7ff bffd 	b.w	c454 <z_SysNmiOnReset>
    c45a:	bf00      	nop

0000c45c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    c45c:	4a14      	ldr	r2, [pc, #80]	; (c4b0 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    c45e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    c460:	4b14      	ldr	r3, [pc, #80]	; (c4b4 <z_arm_prep_c+0x58>)
    c462:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    c466:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c468:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c46c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    c470:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    c474:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    c478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    c47c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    c480:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    c484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    c488:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    c48c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    c490:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c494:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
    c498:	2300      	movs	r3, #0
    c49a:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    c49e:	f007 fe41 	bl	14124 <z_bss_zero>
	z_data_copy();
    c4a2:	f008 fdad 	bl	15000 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    c4a6:	f000 fbd1 	bl	cc4c <z_arm_interrupt_init>
	z_cstart();
    c4aa:	f007 fe7b 	bl	141a4 <z_cstart>
    c4ae:	bf00      	nop
    c4b0:	00008000 	.word	0x00008000
    c4b4:	e000ed00 	.word	0xe000ed00

0000c4b8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    c4b8:	4a09      	ldr	r2, [pc, #36]	; (c4e0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    c4ba:	490a      	ldr	r1, [pc, #40]	; (c4e4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    c4bc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    c4be:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    c4c0:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    c4c2:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    c4c4:	4908      	ldr	r1, [pc, #32]	; (c4e8 <arch_swap+0x30>)
    c4c6:	684b      	ldr	r3, [r1, #4]
    c4c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    c4cc:	604b      	str	r3, [r1, #4]
    c4ce:	2300      	movs	r3, #0
    c4d0:	f383 8811 	msr	BASEPRI, r3
    c4d4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    c4d8:	6893      	ldr	r3, [r2, #8]
}
    c4da:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    c4dc:	4770      	bx	lr
    c4de:	bf00      	nop
    c4e0:	2000d6e8 	.word	0x2000d6e8
    c4e4:	0001bd74 	.word	0x0001bd74
    c4e8:	e000ed00 	.word	0xe000ed00

0000c4ec <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    c4ec:	4922      	ldr	r1, [pc, #136]	; (c578 <in_fp_endif+0x2e>)
    ldr r2, [r1, #_kernel_offset_to_current]
    c4ee:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    c4f0:	f882 e0c1 	strb.w	lr, [r2, #193]	; 0xc1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    c4f4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    c4f8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    c4fa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    c4fe:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    c502:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
    c506:	d103      	bne.n	c510 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
    c508:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
    c50c:	ec80 8a10 	vstmia	r0, {s16-s31}

0000c510 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    c510:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    c512:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    c516:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    c51a:	4f18      	ldr	r7, [pc, #96]	; (c57c <in_fp_endif+0x32>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    c51c:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    c520:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    c522:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    c524:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    c526:	f992 e0c1 	ldrsb.w	lr, [r2, #193]	; 0xc1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    c52a:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    c52c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    c52e:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    c530:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    c534:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
    c538:	d003      	beq.n	c542 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    c53a:	2300      	movs	r3, #0
    vmsr fpscr, r3
    c53c:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
    c540:	e003      	b.n	c54a <in_fp_endif>

0000c542 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
    c542:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
    c546:	ec90 8a10 	vldmia	r0, {s16-s31}

0000c54a <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    c54a:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
    c54e:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    c552:	f383 8814 	msr	CONTROL, r3
    isb
    c556:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    c55a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    c55e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    c562:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    c566:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    c56a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    c56c:	f00b fc9a 	bl	17ea4 <configure_builtin_stack_guard>
    pop {r2, lr}
    c570:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    c574:	4770      	bx	lr
    c576:	0000      	.short	0x0000
    ldr r1, =_kernel
    c578:	2000d6e8 	.word	0x2000d6e8
    ldr v4, =_SCS_ICSR
    c57c:	e000ed04 	.word	0xe000ed04

0000c580 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    c580:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    c584:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    c586:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    c58a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    c58e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    c590:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    c594:	2902      	cmp	r1, #2
    beq _oops
    c596:	d0ff      	beq.n	c598 <_oops>

0000c598 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    c598:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    c59a:	f00b fc74 	bl	17e86 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    c59e:	bd01      	pop	{r0, pc}

0000c5a0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    c5a0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    c5a4:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    c5a6:	490d      	ldr	r1, [pc, #52]	; (c5dc <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
    c5a8:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    c5ac:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    c5ae:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    c5b2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    c5b6:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    c5b8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    c5bc:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    c5c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    c5c4:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    c5c8:	2300      	movs	r3, #0
    c5ca:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    c5cc:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    c5d0:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    c5d2:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    c5d4:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    c5d8:	4770      	bx	lr
    c5da:	bf00      	nop
    c5dc:	00017701 	.word	0x00017701

0000c5e0 <arch_switch_to_main_thread>:
    c5e0:	2300      	movs	r3, #0
    c5e2:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    c5e6:	f3ef 8314 	mrs	r3, CONTROL
#else
	__set_FPSCR(0);
#endif
#if defined(CONFIG_CPU_CORTEX_M) && defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    c5ea:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    c5ee:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    c5f2:	f3bf 8f6f 	isb	sy
    c5f6:	f3bf 8f6f 	isb	sy
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    c5fa:	4b09      	ldr	r3, [pc, #36]	; (c620 <arch_switch_to_main_thread+0x40>)
    c5fc:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    c5fe:	6e83      	ldr	r3, [r0, #104]	; 0x68
    c600:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    c604:	4610      	mov	r0, r2
    c606:	f381 8809 	msr	PSP, r1
    c60a:	2100      	movs	r1, #0
    c60c:	b663      	cpsie	if
    c60e:	f381 8811 	msr	BASEPRI, r1
    c612:	f3bf 8f6f 	isb	sy
    c616:	2200      	movs	r2, #0
    c618:	2300      	movs	r3, #0
    c61a:	f00b f871 	bl	17700 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    c61e:	bf00      	nop
    c620:	2000d6e8 	.word	0x2000d6e8

0000c624 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    c624:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    c626:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    c628:	4a0b      	ldr	r2, [pc, #44]	; (c658 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    c62a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    c62c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    c62e:	bf1e      	ittt	ne
	movne	r1, #0
    c630:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    c632:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    c634:	f00d fc85 	blne	19f42 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    c638:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    c63a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    c63e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    c642:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    c646:	4905      	ldr	r1, [pc, #20]	; (c65c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    c648:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    c64a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    c64c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    c64e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    c652:	4903      	ldr	r1, [pc, #12]	; (c660 <_isr_wrapper+0x3c>)
	bx r1
    c654:	4708      	bx	r1
    c656:	0000      	.short	0x0000
	ldr r2, =_kernel
    c658:	2000d6e8 	.word	0x2000d6e8
	ldr r1, =_sw_isr_table
    c65c:	0001b37c 	.word	0x0001b37c
	ldr r1, =z_arm_int_exit
    c660:	0000c665 	.word	0x0000c665

0000c664 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    c664:	4b04      	ldr	r3, [pc, #16]	; (c678 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    c666:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    c668:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    c66a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    c66c:	d003      	beq.n	c676 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    c66e:	4903      	ldr	r1, [pc, #12]	; (c67c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    c670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    c674:	600a      	str	r2, [r1, #0]

0000c676 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    c676:	4770      	bx	lr
	ldr r3, =_kernel
    c678:	2000d6e8 	.word	0x2000d6e8
	ldr r1, =_SCS_ICSR
    c67c:	e000ed04 	.word	0xe000ed04

0000c680 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    c680:	b5f0      	push	{r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    c682:	2400      	movs	r4, #0
    c684:	4b41      	ldr	r3, [pc, #260]	; (c78c <mem_manage_fault.constprop.0+0x10c>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    c686:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    c688:	9302      	str	r3, [sp, #8]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    c68a:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    c68c:	4623      	mov	r3, r4
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    c68e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    c690:	2201      	movs	r2, #1
    c692:	4620      	mov	r0, r4
    c694:	e9cd 4400 	strd	r4, r4, [sp]
    c698:	493d      	ldr	r1, [pc, #244]	; (c790 <mem_manage_fault.constprop.0+0x110>)
    c69a:	f00b fc07 	bl	17eac <z_log_msg_runtime_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    c69e:	4b3d      	ldr	r3, [pc, #244]	; (c794 <mem_manage_fault.constprop.0+0x114>)
    c6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c6a2:	06dd      	lsls	r5, r3, #27
    c6a4:	d56f      	bpl.n	c786 <mem_manage_fault.constprop.0+0x106>
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
    c6a6:	4b3c      	ldr	r3, [pc, #240]	; (c798 <mem_manage_fault.constprop.0+0x118>)
    c6a8:	4620      	mov	r0, r4
    c6aa:	e9cd 4301 	strd	r4, r3, [sp, #4]
    c6ae:	2201      	movs	r2, #1
    c6b0:	4623      	mov	r3, r4
    c6b2:	4937      	ldr	r1, [pc, #220]	; (c790 <mem_manage_fault.constprop.0+0x110>)
    c6b4:	9400      	str	r4, [sp, #0]
    c6b6:	f00b fbf9 	bl	17eac <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_MEM_STACKING;
    c6ba:	2011      	movs	r0, #17
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    c6bc:	4b35      	ldr	r3, [pc, #212]	; (c794 <mem_manage_fault.constprop.0+0x114>)
    c6be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c6c0:	071c      	lsls	r4, r3, #28
    c6c2:	d50a      	bpl.n	c6da <mem_manage_fault.constprop.0+0x5a>
		reason = K_ERR_ARM_MEM_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    c6c4:	4b35      	ldr	r3, [pc, #212]	; (c79c <mem_manage_fault.constprop.0+0x11c>)
    c6c6:	2201      	movs	r2, #1
    c6c8:	9302      	str	r3, [sp, #8]
    c6ca:	2300      	movs	r3, #0
    c6cc:	4930      	ldr	r1, [pc, #192]	; (c790 <mem_manage_fault.constprop.0+0x110>)
    c6ce:	4618      	mov	r0, r3
    c6d0:	e9cd 3300 	strd	r3, r3, [sp]
    c6d4:	f00b fbea 	bl	17eac <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    c6d8:	2012      	movs	r0, #18
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    c6da:	4d2e      	ldr	r5, [pc, #184]	; (c794 <mem_manage_fault.constprop.0+0x114>)
    c6dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    c6de:	0799      	lsls	r1, r3, #30
    c6e0:	d51f      	bpl.n	c722 <mem_manage_fault.constprop.0+0xa2>
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
		PR_FAULT_INFO("  Data Access Violation");
    c6e2:	2400      	movs	r4, #0
    c6e4:	4b2e      	ldr	r3, [pc, #184]	; (c7a0 <mem_manage_fault.constprop.0+0x120>)
    c6e6:	2201      	movs	r2, #1
    c6e8:	9302      	str	r3, [sp, #8]
    c6ea:	4620      	mov	r0, r4
    c6ec:	4623      	mov	r3, r4
    c6ee:	e9cd 4400 	strd	r4, r4, [sp]
    c6f2:	4927      	ldr	r1, [pc, #156]	; (c790 <mem_manage_fault.constprop.0+0x110>)
    c6f4:	f00b fbda 	bl	17eac <z_log_msg_runtime_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    c6f8:	6b6b      	ldr	r3, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    c6fa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    c6fc:	0612      	lsls	r2, r2, #24
    c6fe:	d50f      	bpl.n	c720 <mem_manage_fault.constprop.0+0xa0>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    c700:	9303      	str	r3, [sp, #12]
    c702:	4b28      	ldr	r3, [pc, #160]	; (c7a4 <mem_manage_fault.constprop.0+0x124>)
    c704:	2201      	movs	r2, #1
    c706:	e9cd 4301 	strd	r4, r3, [sp, #4]
    c70a:	4620      	mov	r0, r4
    c70c:	4623      	mov	r3, r4
    c70e:	4920      	ldr	r1, [pc, #128]	; (c790 <mem_manage_fault.constprop.0+0x110>)
    c710:	9400      	str	r4, [sp, #0]
    c712:	f00b fbcb 	bl	17eac <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    c716:	b11f      	cbz	r7, c720 <mem_manage_fault.constprop.0+0xa0>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    c718:	6aab      	ldr	r3, [r5, #40]	; 0x28
    c71a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    c71e:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    c720:	2013      	movs	r0, #19
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    c722:	4b1c      	ldr	r3, [pc, #112]	; (c794 <mem_manage_fault.constprop.0+0x114>)
    c724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c726:	07dd      	lsls	r5, r3, #31
    c728:	d50a      	bpl.n	c740 <mem_manage_fault.constprop.0+0xc0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
		PR_FAULT_INFO("  Instruction Access Violation");
    c72a:	4b1f      	ldr	r3, [pc, #124]	; (c7a8 <mem_manage_fault.constprop.0+0x128>)
    c72c:	2201      	movs	r2, #1
    c72e:	9302      	str	r3, [sp, #8]
    c730:	2300      	movs	r3, #0
    c732:	4917      	ldr	r1, [pc, #92]	; (c790 <mem_manage_fault.constprop.0+0x110>)
    c734:	4618      	mov	r0, r3
    c736:	e9cd 3300 	strd	r3, r3, [sp]
    c73a:	f00b fbb7 	bl	17eac <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    c73e:	2014      	movs	r0, #20
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    c740:	4b14      	ldr	r3, [pc, #80]	; (c794 <mem_manage_fault.constprop.0+0x114>)
    c742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c744:	069c      	lsls	r4, r3, #26
    c746:	d50a      	bpl.n	c75e <mem_manage_fault.constprop.0+0xde>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
		PR_FAULT_INFO(
    c748:	4b18      	ldr	r3, [pc, #96]	; (c7ac <mem_manage_fault.constprop.0+0x12c>)
    c74a:	2201      	movs	r2, #1
    c74c:	9302      	str	r3, [sp, #8]
    c74e:	2300      	movs	r3, #0
    c750:	490f      	ldr	r1, [pc, #60]	; (c790 <mem_manage_fault.constprop.0+0x110>)
    c752:	4618      	mov	r0, r3
    c754:	e9cd 3300 	strd	r3, r3, [sp]
    c758:	f00b fba8 	bl	17eac <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    c75c:	2015      	movs	r0, #21
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    c75e:	4b0d      	ldr	r3, [pc, #52]	; (c794 <mem_manage_fault.constprop.0+0x114>)
    c760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c762:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    c764:	bf58      	it	pl
    c766:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    c768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c76a:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    c76c:	bf42      	ittt	mi
    c76e:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    c770:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    c774:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    c776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c778:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    c77c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    c77e:	2300      	movs	r3, #0
    c780:	7033      	strb	r3, [r6, #0]

	return reason;
}
    c782:	b005      	add	sp, #20
    c784:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    c786:	2010      	movs	r0, #16
    c788:	e798      	b.n	c6bc <mem_manage_fault.constprop.0+0x3c>
    c78a:	bf00      	nop
    c78c:	0001c4ae 	.word	0x0001c4ae
    c790:	0001b67c 	.word	0x0001b67c
    c794:	e000ed00 	.word	0xe000ed00
    c798:	0001c4c4 	.word	0x0001c4c4
    c79c:	0001c4f7 	.word	0x0001c4f7
    c7a0:	0001c50a 	.word	0x0001c50a
    c7a4:	0001c522 	.word	0x0001c522
    c7a8:	0001c538 	.word	0x0001c538
    c7ac:	0001c557 	.word	0x0001c557

0000c7b0 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    c7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    c7b2:	2400      	movs	r4, #0
    c7b4:	4b43      	ldr	r3, [pc, #268]	; (c8c4 <bus_fault.constprop.0+0x114>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    c7b6:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** BUS FAULT *****");
    c7b8:	9302      	str	r3, [sp, #8]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    c7ba:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    c7bc:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    c7be:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    c7c0:	2201      	movs	r2, #1
    c7c2:	4620      	mov	r0, r4
    c7c4:	e9cd 4400 	strd	r4, r4, [sp]
    c7c8:	493f      	ldr	r1, [pc, #252]	; (c8c8 <bus_fault.constprop.0+0x118>)
    c7ca:	f00b fb6f 	bl	17eac <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    c7ce:	4b3f      	ldr	r3, [pc, #252]	; (c8cc <bus_fault.constprop.0+0x11c>)
    c7d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c7d2:	04db      	lsls	r3, r3, #19
    c7d4:	d565      	bpl.n	c8a2 <bus_fault.constprop.0+0xf2>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    c7d6:	4b3e      	ldr	r3, [pc, #248]	; (c8d0 <bus_fault.constprop.0+0x120>)
    c7d8:	4620      	mov	r0, r4
    c7da:	e9cd 4301 	strd	r4, r3, [sp, #4]
    c7de:	2201      	movs	r2, #1
    c7e0:	4623      	mov	r3, r4
    c7e2:	4939      	ldr	r1, [pc, #228]	; (c8c8 <bus_fault.constprop.0+0x118>)
    c7e4:	9400      	str	r4, [sp, #0]
    c7e6:	f00b fb61 	bl	17eac <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    c7ea:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    c7ec:	4b37      	ldr	r3, [pc, #220]	; (c8cc <bus_fault.constprop.0+0x11c>)
    c7ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c7f0:	051d      	lsls	r5, r3, #20
    c7f2:	d50a      	bpl.n	c80a <bus_fault.constprop.0+0x5a>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    c7f4:	4b37      	ldr	r3, [pc, #220]	; (c8d4 <bus_fault.constprop.0+0x124>)
    c7f6:	2201      	movs	r2, #1
    c7f8:	9302      	str	r3, [sp, #8]
    c7fa:	2300      	movs	r3, #0
    c7fc:	4932      	ldr	r1, [pc, #200]	; (c8c8 <bus_fault.constprop.0+0x118>)
    c7fe:	4618      	mov	r0, r3
    c800:	e9cd 3300 	strd	r3, r3, [sp]
    c804:	f00b fb52 	bl	17eac <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    c808:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    c80a:	4d30      	ldr	r5, [pc, #192]	; (c8cc <bus_fault.constprop.0+0x11c>)
    c80c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    c80e:	059c      	lsls	r4, r3, #22
    c810:	d51f      	bpl.n	c852 <bus_fault.constprop.0+0xa2>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    c812:	2400      	movs	r4, #0
    c814:	4b30      	ldr	r3, [pc, #192]	; (c8d8 <bus_fault.constprop.0+0x128>)
    c816:	2201      	movs	r2, #1
    c818:	4620      	mov	r0, r4
    c81a:	9302      	str	r3, [sp, #8]
    c81c:	e9cd 4400 	strd	r4, r4, [sp]
    c820:	4623      	mov	r3, r4
    c822:	4929      	ldr	r1, [pc, #164]	; (c8c8 <bus_fault.constprop.0+0x118>)
    c824:	f00b fb42 	bl	17eac <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    c828:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    c82a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    c82c:	0410      	lsls	r0, r2, #16
    c82e:	d50f      	bpl.n	c850 <bus_fault.constprop.0+0xa0>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    c830:	9303      	str	r3, [sp, #12]
    c832:	4b2a      	ldr	r3, [pc, #168]	; (c8dc <bus_fault.constprop.0+0x12c>)
    c834:	2201      	movs	r2, #1
    c836:	e9cd 4301 	strd	r4, r3, [sp, #4]
    c83a:	4620      	mov	r0, r4
    c83c:	4623      	mov	r3, r4
    c83e:	4922      	ldr	r1, [pc, #136]	; (c8c8 <bus_fault.constprop.0+0x118>)
    c840:	9400      	str	r4, [sp, #0]
    c842:	f00b fb33 	bl	17eac <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    c846:	b11f      	cbz	r7, c850 <bus_fault.constprop.0+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    c848:	6aab      	ldr	r3, [r5, #40]	; 0x28
    c84a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    c84e:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    c850:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    c852:	4b1e      	ldr	r3, [pc, #120]	; (c8cc <bus_fault.constprop.0+0x11c>)
    c854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c856:	0559      	lsls	r1, r3, #21
    c858:	d50a      	bpl.n	c870 <bus_fault.constprop.0+0xc0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    c85a:	4b21      	ldr	r3, [pc, #132]	; (c8e0 <bus_fault.constprop.0+0x130>)
    c85c:	2201      	movs	r2, #1
    c85e:	9302      	str	r3, [sp, #8]
    c860:	2300      	movs	r3, #0
    c862:	4919      	ldr	r1, [pc, #100]	; (c8c8 <bus_fault.constprop.0+0x118>)
    c864:	4618      	mov	r0, r3
    c866:	e9cd 3300 	strd	r3, r3, [sp]
    c86a:	f00b fb1f 	bl	17eac <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    c86e:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    c870:	4a16      	ldr	r2, [pc, #88]	; (c8cc <bus_fault.constprop.0+0x11c>)
    c872:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c874:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    c878:	d015      	beq.n	c8a6 <bus_fault.constprop.0+0xf6>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    c87a:	4b1a      	ldr	r3, [pc, #104]	; (c8e4 <bus_fault.constprop.0+0x134>)
    c87c:	2201      	movs	r2, #1
    c87e:	9302      	str	r3, [sp, #8]
    c880:	2300      	movs	r3, #0
    c882:	4911      	ldr	r1, [pc, #68]	; (c8c8 <bus_fault.constprop.0+0x118>)
    c884:	4618      	mov	r0, r3
    c886:	e9cd 3300 	strd	r3, r3, [sp]
    c88a:	f00b fb0f 	bl	17eac <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    c88e:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    c890:	4a0e      	ldr	r2, [pc, #56]	; (c8cc <bus_fault.constprop.0+0x11c>)
    c892:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c894:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    c898:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    c89a:	2300      	movs	r3, #0
    c89c:	7033      	strb	r3, [r6, #0]

	return reason;
}
    c89e:	b005      	add	sp, #20
    c8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    c8a2:	2016      	movs	r0, #22
    c8a4:	e7a2      	b.n	c7ec <bus_fault.constprop.0+0x3c>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    c8a6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    c8a8:	0492      	lsls	r2, r2, #18
    c8aa:	d5f1      	bpl.n	c890 <bus_fault.constprop.0+0xe0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    c8ac:	4a0e      	ldr	r2, [pc, #56]	; (c8e8 <bus_fault.constprop.0+0x138>)
    c8ae:	4618      	mov	r0, r3
    c8b0:	e9cd 3201 	strd	r3, r2, [sp, #4]
    c8b4:	4904      	ldr	r1, [pc, #16]	; (c8c8 <bus_fault.constprop.0+0x118>)
    c8b6:	2201      	movs	r2, #1
    c8b8:	9300      	str	r3, [sp, #0]
    c8ba:	f00b faf7 	bl	17eac <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    c8be:	201c      	movs	r0, #28
    c8c0:	e7e6      	b.n	c890 <bus_fault.constprop.0+0xe0>
    c8c2:	bf00      	nop
    c8c4:	0001c586 	.word	0x0001c586
    c8c8:	0001b67c 	.word	0x0001b67c
    c8cc:	e000ed00 	.word	0xe000ed00
    c8d0:	0001c59c 	.word	0x0001c59c
    c8d4:	0001c4f7 	.word	0x0001c4f7
    c8d8:	0001c5ad 	.word	0x0001c5ad
    c8dc:	0001c5c6 	.word	0x0001c5c6
    c8e0:	0001c5db 	.word	0x0001c5db
    c8e4:	0001c5f6 	.word	0x0001c5f6
    c8e8:	0001c557 	.word	0x0001c557

0000c8ec <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    c8ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    c8ee:	2400      	movs	r4, #0
    c8f0:	4b3e      	ldr	r3, [pc, #248]	; (c9ec <usage_fault.constprop.0+0x100>)
    c8f2:	493f      	ldr	r1, [pc, #252]	; (c9f0 <usage_fault.constprop.0+0x104>)
    c8f4:	9302      	str	r3, [sp, #8]
    c8f6:	2201      	movs	r2, #1
    c8f8:	4623      	mov	r3, r4
    c8fa:	4620      	mov	r0, r4
    c8fc:	e9cd 4400 	strd	r4, r4, [sp]
    c900:	f00b fad4 	bl	17eac <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    c904:	4b3b      	ldr	r3, [pc, #236]	; (c9f4 <usage_fault.constprop.0+0x108>)
    c906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c908:	0199      	lsls	r1, r3, #6
    c90a:	d56d      	bpl.n	c9e8 <usage_fault.constprop.0+0xfc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    c90c:	4b3a      	ldr	r3, [pc, #232]	; (c9f8 <usage_fault.constprop.0+0x10c>)
    c90e:	4620      	mov	r0, r4
    c910:	e9cd 4301 	strd	r4, r3, [sp, #4]
    c914:	2201      	movs	r2, #1
    c916:	4623      	mov	r3, r4
    c918:	4935      	ldr	r1, [pc, #212]	; (c9f0 <usage_fault.constprop.0+0x104>)
    c91a:	9400      	str	r4, [sp, #0]
    c91c:	f00b fac6 	bl	17eac <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    c920:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    c922:	4b34      	ldr	r3, [pc, #208]	; (c9f4 <usage_fault.constprop.0+0x108>)
    c924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c926:	01da      	lsls	r2, r3, #7
    c928:	d50a      	bpl.n	c940 <usage_fault.constprop.0+0x54>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    c92a:	4b34      	ldr	r3, [pc, #208]	; (c9fc <usage_fault.constprop.0+0x110>)
    c92c:	2201      	movs	r2, #1
    c92e:	9302      	str	r3, [sp, #8]
    c930:	2300      	movs	r3, #0
    c932:	492f      	ldr	r1, [pc, #188]	; (c9f0 <usage_fault.constprop.0+0x104>)
    c934:	4618      	mov	r0, r3
    c936:	e9cd 3300 	strd	r3, r3, [sp]
    c93a:	f00b fab7 	bl	17eac <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    c93e:	201f      	movs	r0, #31
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    c940:	4b2c      	ldr	r3, [pc, #176]	; (c9f4 <usage_fault.constprop.0+0x108>)
    c942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c944:	02db      	lsls	r3, r3, #11
    c946:	d50a      	bpl.n	c95e <usage_fault.constprop.0+0x72>
		reason = K_ERR_ARM_USAGE_STACK_OVERFLOW;
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    c948:	4b2d      	ldr	r3, [pc, #180]	; (ca00 <usage_fault.constprop.0+0x114>)
    c94a:	2201      	movs	r2, #1
    c94c:	9302      	str	r3, [sp, #8]
    c94e:	2300      	movs	r3, #0
    c950:	4927      	ldr	r1, [pc, #156]	; (c9f0 <usage_fault.constprop.0+0x104>)
    c952:	4618      	mov	r0, r3
    c954:	e9cd 3300 	strd	r3, r3, [sp]
    c958:	f00b faa8 	bl	17eac <z_log_msg_runtime_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    c95c:	2002      	movs	r0, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    c95e:	4b25      	ldr	r3, [pc, #148]	; (c9f4 <usage_fault.constprop.0+0x108>)
    c960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c962:	031c      	lsls	r4, r3, #12
    c964:	d50a      	bpl.n	c97c <usage_fault.constprop.0+0x90>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    c966:	4b27      	ldr	r3, [pc, #156]	; (ca04 <usage_fault.constprop.0+0x118>)
    c968:	2201      	movs	r2, #1
    c96a:	9302      	str	r3, [sp, #8]
    c96c:	2300      	movs	r3, #0
    c96e:	4920      	ldr	r1, [pc, #128]	; (c9f0 <usage_fault.constprop.0+0x104>)
    c970:	4618      	mov	r0, r3
    c972:	e9cd 3300 	strd	r3, r3, [sp]
    c976:	f00b fa99 	bl	17eac <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    c97a:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    c97c:	4b1d      	ldr	r3, [pc, #116]	; (c9f4 <usage_fault.constprop.0+0x108>)
    c97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c980:	0359      	lsls	r1, r3, #13
    c982:	d50a      	bpl.n	c99a <usage_fault.constprop.0+0xae>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    c984:	4b20      	ldr	r3, [pc, #128]	; (ca08 <usage_fault.constprop.0+0x11c>)
    c986:	2201      	movs	r2, #1
    c988:	9302      	str	r3, [sp, #8]
    c98a:	2300      	movs	r3, #0
    c98c:	4918      	ldr	r1, [pc, #96]	; (c9f0 <usage_fault.constprop.0+0x104>)
    c98e:	4618      	mov	r0, r3
    c990:	e9cd 3300 	strd	r3, r3, [sp]
    c994:	f00b fa8a 	bl	17eac <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    c998:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    c99a:	4b16      	ldr	r3, [pc, #88]	; (c9f4 <usage_fault.constprop.0+0x108>)
    c99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c99e:	039a      	lsls	r2, r3, #14
    c9a0:	d50a      	bpl.n	c9b8 <usage_fault.constprop.0+0xcc>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    c9a2:	4b1a      	ldr	r3, [pc, #104]	; (ca0c <usage_fault.constprop.0+0x120>)
    c9a4:	2201      	movs	r2, #1
    c9a6:	9302      	str	r3, [sp, #8]
    c9a8:	2300      	movs	r3, #0
    c9aa:	4911      	ldr	r1, [pc, #68]	; (c9f0 <usage_fault.constprop.0+0x104>)
    c9ac:	4618      	mov	r0, r3
    c9ae:	e9cd 3300 	strd	r3, r3, [sp]
    c9b2:	f00b fa7b 	bl	17eac <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    c9b6:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    c9b8:	4b0e      	ldr	r3, [pc, #56]	; (c9f4 <usage_fault.constprop.0+0x108>)
    c9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c9bc:	03db      	lsls	r3, r3, #15
    c9be:	d50a      	bpl.n	c9d6 <usage_fault.constprop.0+0xea>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    c9c0:	4b13      	ldr	r3, [pc, #76]	; (ca10 <usage_fault.constprop.0+0x124>)
    c9c2:	2201      	movs	r2, #1
    c9c4:	9302      	str	r3, [sp, #8]
    c9c6:	2300      	movs	r3, #0
    c9c8:	4909      	ldr	r1, [pc, #36]	; (c9f0 <usage_fault.constprop.0+0x104>)
    c9ca:	4618      	mov	r0, r3
    c9cc:	e9cd 3300 	strd	r3, r3, [sp]
    c9d0:	f00b fa6c 	bl	17eac <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    c9d4:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    c9d6:	4a07      	ldr	r2, [pc, #28]	; (c9f4 <usage_fault.constprop.0+0x108>)
    c9d8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c9da:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    c9de:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    c9e2:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    c9e4:	b004      	add	sp, #16
    c9e6:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    c9e8:	201d      	movs	r0, #29
    c9ea:	e79a      	b.n	c922 <usage_fault.constprop.0+0x36>
    c9ec:	0001c60e 	.word	0x0001c60e
    c9f0:	0001b67c 	.word	0x0001b67c
    c9f4:	e000ed00 	.word	0xe000ed00
    c9f8:	0001c626 	.word	0x0001c626
    c9fc:	0001c639 	.word	0x0001c639
    ca00:	0001c653 	.word	0x0001c653
    ca04:	0001c67d 	.word	0x0001c67d
    ca08:	0001c69b 	.word	0x0001c69b
    ca0c:	0001c6c0 	.word	0x0001c6c0
    ca10:	0001c6da 	.word	0x0001c6da

0000ca14 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    ca14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    ca18:	4b75      	ldr	r3, [pc, #468]	; (cbf0 <z_arm_fault+0x1dc>)
{
    ca1a:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    ca1c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    ca20:	4689      	mov	r9, r1
    ca22:	4614      	mov	r4, r2
    ca24:	2600      	movs	r6, #0
    ca26:	b0a3      	sub	sp, #140	; 0x8c
    ca28:	f3c8 0708 	ubfx	r7, r8, #0, #9
    ca2c:	f386 8811 	msr	BASEPRI, r6
    ca30:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    ca34:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    ca38:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    ca3c:	d125      	bne.n	ca8a <z_arm_fault+0x76>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    ca3e:	f012 0301 	ands.w	r3, r2, #1
    ca42:	d122      	bne.n	ca8a <z_arm_fault+0x76>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    ca44:	0651      	lsls	r1, r2, #25
    ca46:	d403      	bmi.n	ca50 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    ca48:	0722      	lsls	r2, r4, #28
    ca4a:	d40d      	bmi.n	ca68 <z_arm_fault+0x54>
			*nested_exc = true;
    ca4c:	2601      	movs	r6, #1
    ca4e:	e00d      	b.n	ca6c <z_arm_fault+0x58>
		PR_FAULT_INFO("Exception occurred in Secure State");
    ca50:	4a68      	ldr	r2, [pc, #416]	; (cbf4 <z_arm_fault+0x1e0>)
    ca52:	4618      	mov	r0, r3
    ca54:	e9cd 3201 	strd	r3, r2, [sp, #4]
    ca58:	4967      	ldr	r1, [pc, #412]	; (cbf8 <z_arm_fault+0x1e4>)
    ca5a:	2201      	movs	r2, #1
    ca5c:	9300      	str	r3, [sp, #0]
    ca5e:	f00b fa25 	bl	17eac <z_log_msg_runtime_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    ca62:	f014 0404 	ands.w	r4, r4, #4
    ca66:	d000      	beq.n	ca6a <z_arm_fault+0x56>
			ptr_esf = (z_arch_esf_t *)psp;
    ca68:	464d      	mov	r5, r9
	*nested_exc = false;
    ca6a:	2600      	movs	r6, #0
	*recoverable = false;
    ca6c:	f04f 0900 	mov.w	r9, #0
	switch (fault) {
    ca70:	1efb      	subs	r3, r7, #3
	*recoverable = false;
    ca72:	f88d 901f 	strb.w	r9, [sp, #31]
	switch (fault) {
    ca76:	2b09      	cmp	r3, #9
    ca78:	f200 80a0 	bhi.w	cbbc <z_arm_fault+0x1a8>
    ca7c:	e8df f003 	tbb	[pc, r3]
    ca80:	90989407 	.word	0x90989407
    ca84:	9e9e9e9e 	.word	0x9e9e9e9e
    ca88:	9c9e      	.short	0x9c9e
		return NULL;
    ca8a:	4635      	mov	r5, r6
    ca8c:	e7ee      	b.n	ca6c <z_arm_fault+0x58>
	PR_FAULT_INFO("***** HARD FAULT *****");
    ca8e:	4b5b      	ldr	r3, [pc, #364]	; (cbfc <z_arm_fault+0x1e8>)
    ca90:	2201      	movs	r2, #1
    ca92:	e9cd 9301 	strd	r9, r3, [sp, #4]
    ca96:	2300      	movs	r3, #0
    ca98:	4957      	ldr	r1, [pc, #348]	; (cbf8 <z_arm_fault+0x1e4>)
    ca9a:	4618      	mov	r0, r3
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    ca9c:	4f54      	ldr	r7, [pc, #336]	; (cbf0 <z_arm_fault+0x1dc>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    ca9e:	f8cd 9000 	str.w	r9, [sp]
    caa2:	f00b fa03 	bl	17eac <z_log_msg_runtime_create.constprop.0>
	*recoverable = false;
    caa6:	f88d 901f 	strb.w	r9, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    caaa:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    caac:	f014 0402 	ands.w	r4, r4, #2
    cab0:	d005      	beq.n	cabe <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
    cab2:	4b53      	ldr	r3, [pc, #332]	; (cc00 <z_arm_fault+0x1ec>)
	PR_FAULT_INFO(
    cab4:	e9cd 9301 	strd	r9, r3, [sp, #4]
    cab8:	f8cd 9000 	str.w	r9, [sp]
    cabc:	e006      	b.n	cacc <z_arm_fault+0xb8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    cabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cac0:	2b00      	cmp	r3, #0
    cac2:	da0b      	bge.n	cadc <z_arm_fault+0xc8>
		PR_EXC("  Debug event");
    cac4:	4b4f      	ldr	r3, [pc, #316]	; (cc04 <z_arm_fault+0x1f0>)
    cac6:	9400      	str	r4, [sp, #0]
    cac8:	e9cd 4301 	strd	r4, r3, [sp, #4]
	PR_FAULT_INFO(
    cacc:	2300      	movs	r3, #0
    cace:	2201      	movs	r2, #1
    cad0:	4618      	mov	r0, r3
    cad2:	4949      	ldr	r1, [pc, #292]	; (cbf8 <z_arm_fault+0x1e4>)
    cad4:	f00b f9ea 	bl	17eac <z_log_msg_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    cad8:	2400      	movs	r4, #0
    cada:	e030      	b.n	cb3e <z_arm_fault+0x12a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    cadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cade:	005b      	lsls	r3, r3, #1
    cae0:	d5fa      	bpl.n	cad8 <z_arm_fault+0xc4>
		PR_EXC("  Fault escalation (see below)");
    cae2:	4b49      	ldr	r3, [pc, #292]	; (cc08 <z_arm_fault+0x1f4>)
    cae4:	2201      	movs	r2, #1
    cae6:	e9cd 4301 	strd	r4, r3, [sp, #4]
    caea:	4620      	mov	r0, r4
    caec:	4623      	mov	r3, r4
    caee:	4942      	ldr	r1, [pc, #264]	; (cbf8 <z_arm_fault+0x1e4>)
    caf0:	9400      	str	r4, [sp, #0]
    caf2:	f00b f9db 	bl	17eac <z_log_msg_runtime_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    caf6:	697b      	ldr	r3, [r7, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    caf8:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    cafa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    cafe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    cb00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cb04:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    cb08:	697b      	ldr	r3, [r7, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    cb0a:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    cb0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    cb12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    cb14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cb18:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    cb1c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    cb20:	429a      	cmp	r2, r3
    cb22:	d126      	bne.n	cb72 <z_arm_fault+0x15e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    cb24:	682b      	ldr	r3, [r5, #0]
    cb26:	4620      	mov	r0, r4
    cb28:	9303      	str	r3, [sp, #12]
    cb2a:	4b38      	ldr	r3, [pc, #224]	; (cc0c <z_arm_fault+0x1f8>)
    cb2c:	9400      	str	r4, [sp, #0]
    cb2e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    cb32:	2201      	movs	r2, #1
    cb34:	4623      	mov	r3, r4
    cb36:	4930      	ldr	r1, [pc, #192]	; (cbf8 <z_arm_fault+0x1e4>)
    cb38:	f00b f9b8 	bl	17eac <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
    cb3c:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    cb3e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    cb42:	b99b      	cbnz	r3, cb6c <z_arm_fault+0x158>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    cb44:	2268      	movs	r2, #104	; 0x68
    cb46:	4629      	mov	r1, r5
    cb48:	a808      	add	r0, sp, #32
    cb4a:	f00d fdcb 	bl	1a6e4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    cb4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cb50:	2e00      	cmp	r6, #0
    cb52:	d047      	beq.n	cbe4 <z_arm_fault+0x1d0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    cb54:	f3c3 0208 	ubfx	r2, r3, #0, #9
    cb58:	b922      	cbnz	r2, cb64 <z_arm_fault+0x150>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    cb5a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    cb5e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    cb62:	930f      	str	r3, [sp, #60]	; 0x3c

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    cb64:	4620      	mov	r0, r4
    cb66:	a908      	add	r1, sp, #32
    cb68:	f7ff fbae 	bl	c2c8 <z_arm_fatal_error>
}
    cb6c:	b023      	add	sp, #140	; 0x8c
    cb6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    cb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cb74:	b2db      	uxtb	r3, r3
    cb76:	b12b      	cbz	r3, cb84 <z_arm_fault+0x170>
			reason = mem_manage_fault(esf, 1, recoverable);
    cb78:	2001      	movs	r0, #1
    cb7a:	f10d 011f 	add.w	r1, sp, #31
		reason = mem_manage_fault(esf, 0, recoverable);
    cb7e:	f7ff fd7f 	bl	c680 <mem_manage_fault.constprop.0>
    cb82:	e00f      	b.n	cba4 <z_arm_fault+0x190>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    cb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cb86:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    cb8a:	d005      	beq.n	cb98 <z_arm_fault+0x184>
			reason = bus_fault(esf, 1, recoverable);
    cb8c:	2001      	movs	r0, #1
    cb8e:	f10d 011f 	add.w	r1, sp, #31
		reason = bus_fault(esf, 0, recoverable);
    cb92:	f7ff fe0d 	bl	c7b0 <bus_fault.constprop.0>
    cb96:	e005      	b.n	cba4 <z_arm_fault+0x190>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    cb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cb9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    cb9e:	d39b      	bcc.n	cad8 <z_arm_fault+0xc4>
			reason = usage_fault(esf);
    cba0:	f7ff fea4 	bl	c8ec <usage_fault.constprop.0>
    cba4:	4604      	mov	r4, r0
    cba6:	e7ca      	b.n	cb3e <z_arm_fault+0x12a>
		reason = mem_manage_fault(esf, 0, recoverable);
    cba8:	2000      	movs	r0, #0
    cbaa:	f10d 011f 	add.w	r1, sp, #31
    cbae:	e7e6      	b.n	cb7e <z_arm_fault+0x16a>
		reason = bus_fault(esf, 0, recoverable);
    cbb0:	2000      	movs	r0, #0
    cbb2:	f10d 011f 	add.w	r1, sp, #31
    cbb6:	e7ec      	b.n	cb92 <z_arm_fault+0x17e>
	PR_FAULT_INFO(
    cbb8:	4b15      	ldr	r3, [pc, #84]	; (cc10 <z_arm_fault+0x1fc>)
    cbba:	e77b      	b.n	cab4 <z_arm_fault+0xa0>
	PR_FAULT_INFO("***** %s %d) *****",
    cbbc:	4a15      	ldr	r2, [pc, #84]	; (cc14 <z_arm_fault+0x200>)
    cbbe:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    cbc2:	4b15      	ldr	r3, [pc, #84]	; (cc18 <z_arm_fault+0x204>)
    cbc4:	bf18      	it	ne
    cbc6:	4613      	movne	r3, r2
    cbc8:	3f10      	subs	r7, #16
    cbca:	e9cd 3703 	strd	r3, r7, [sp, #12]
    cbce:	4b13      	ldr	r3, [pc, #76]	; (cc1c <z_arm_fault+0x208>)
    cbd0:	2201      	movs	r2, #1
    cbd2:	9302      	str	r3, [sp, #8]
    cbd4:	2300      	movs	r3, #0
    cbd6:	4908      	ldr	r1, [pc, #32]	; (cbf8 <z_arm_fault+0x1e4>)
    cbd8:	4618      	mov	r0, r3
    cbda:	e9cd 3300 	strd	r3, r3, [sp]
    cbde:	f00b f965 	bl	17eac <z_log_msg_runtime_create.constprop.0>
}
    cbe2:	e779      	b.n	cad8 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    cbe4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    cbe8:	f023 0301 	bic.w	r3, r3, #1
    cbec:	e7b9      	b.n	cb62 <z_arm_fault+0x14e>
    cbee:	bf00      	nop
    cbf0:	e000ed00 	.word	0xe000ed00
    cbf4:	0001c733 	.word	0x0001c733
    cbf8:	0001b67c 	.word	0x0001b67c
    cbfc:	0001c756 	.word	0x0001c756
    cc00:	0001c76d 	.word	0x0001c76d
    cc04:	0001c78e 	.word	0x0001c78e
    cc08:	0001c79c 	.word	0x0001c79c
    cc0c:	0001c7bb 	.word	0x0001c7bb
    cc10:	0001c7d7 	.word	0x0001c7d7
    cc14:	0001c71a 	.word	0x0001c71a
    cc18:	0001c705 	.word	0x0001c705
    cc1c:	0001c7fb 	.word	0x0001c7fb

0000cc20 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    cc20:	4b04      	ldr	r3, [pc, #16]	; (cc34 <z_arm_fault_init+0x14>)
    cc22:	695a      	ldr	r2, [r3, #20]
    cc24:	f042 0210 	orr.w	r2, r2, #16
    cc28:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    cc2a:	695a      	ldr	r2, [r3, #20]
    cc2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    cc30:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    cc32:	4770      	bx	lr
    cc34:	e000ed00 	.word	0xe000ed00

0000cc38 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    cc38:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    cc3c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    cc40:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    cc42:	4672      	mov	r2, lr
	bl z_arm_fault
    cc44:	f7ff fee6 	bl	ca14 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    cc48:	bd01      	pop	{r0, pc}
    cc4a:	bf00      	nop

0000cc4c <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    cc4c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cc4e:	2120      	movs	r1, #32
    cc50:	4803      	ldr	r0, [pc, #12]	; (cc60 <z_arm_interrupt_init+0x14>)
    cc52:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    cc54:	3301      	adds	r3, #1
    cc56:	2b41      	cmp	r3, #65	; 0x41
    cc58:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    cc5c:	d1f9      	bne.n	cc52 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    cc5e:	4770      	bx	lr
    cc60:	e000e100 	.word	0xe000e100

0000cc64 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    cc64:	2000      	movs	r0, #0
    msr CONTROL, r0
    cc66:	f380 8814 	msr	CONTROL, r0
    isb
    cc6a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    cc6e:	2000      	movs	r0, #0
    msr MSPLIM, r0
    cc70:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    cc74:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    cc78:	f7fe fd58 	bl	b72c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    cc7c:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    cc7e:	490e      	ldr	r1, [pc, #56]	; (ccb8 <__start+0x54>)
    str r0, [r1]
    cc80:	6008      	str	r0, [r1, #0]
    dsb
    cc82:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    cc86:	480d      	ldr	r0, [pc, #52]	; (ccbc <__start+0x58>)
    msr msp, r0
    cc88:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    cc8c:	f000 f83e 	bl	cd0c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    cc90:	2020      	movs	r0, #32
    msr BASEPRI, r0
    cc92:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    cc96:	480a      	ldr	r0, [pc, #40]	; (ccc0 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    cc98:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    cc9c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    cc9e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    cca2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    cca6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    cca8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    ccaa:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    ccae:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    ccb2:	f7ff fbd3 	bl	c45c <z_arm_prep_c>
    ccb6:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    ccb8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    ccbc:	20010af0 	.word	0x20010af0
    ldr r0, =z_interrupt_stacks
    ccc0:	2000f1b0 	.word	0x2000f1b0

0000ccc4 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    ccc4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    ccc8:	4905      	ldr	r1, [pc, #20]	; (cce0 <sys_arch_reboot+0x1c>)
    ccca:	4b06      	ldr	r3, [pc, #24]	; (cce4 <sys_arch_reboot+0x20>)
    cccc:	68ca      	ldr	r2, [r1, #12]
    ccce:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    ccd2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    ccd4:	60cb      	str	r3, [r1, #12]
    ccd6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    ccda:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    ccdc:	e7fd      	b.n	ccda <sys_arch_reboot+0x16>
    ccde:	bf00      	nop
    cce0:	e000ed00 	.word	0xe000ed00
    cce4:	05fa0004 	.word	0x05fa0004

0000cce8 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    cce8:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    ccea:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    ccec:	4906      	ldr	r1, [pc, #24]	; (cd08 <z_arm_clear_arm_mpu_config+0x20>)
    ccee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    ccf2:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    ccf6:	4293      	cmp	r3, r2
    ccf8:	db00      	blt.n	ccfc <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    ccfa:	4770      	bx	lr
  mpu->RNR = rnr;
    ccfc:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    cd00:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    cd04:	3301      	adds	r3, #1
    cd06:	e7f6      	b.n	ccf6 <z_arm_clear_arm_mpu_config+0xe>
    cd08:	e000ed00 	.word	0xe000ed00

0000cd0c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    cd0c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    cd0e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    cd10:	2400      	movs	r4, #0
    cd12:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    cd16:	f7ff ffe7 	bl	cce8 <z_arm_clear_arm_mpu_config>
    cd1a:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    cd1c:	f04f 30ff 	mov.w	r0, #4294967295
    cd20:	4a0c      	ldr	r2, [pc, #48]	; (cd54 <z_arm_init_arch_hw_at_boot+0x48>)
    cd22:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    cd26:	3301      	adds	r3, #1
    cd28:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    cd2a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    cd2e:	d1f8      	bne.n	cd22 <z_arm_init_arch_hw_at_boot+0x16>
    cd30:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    cd32:	f04f 30ff 	mov.w	r0, #4294967295
    cd36:	4a07      	ldr	r2, [pc, #28]	; (cd54 <z_arm_init_arch_hw_at_boot+0x48>)
    cd38:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    cd3c:	3301      	adds	r3, #1
    cd3e:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    cd40:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    cd44:	d1f8      	bne.n	cd38 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    cd46:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    cd48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cd4c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    cd50:	bd10      	pop	{r4, pc}
    cd52:	bf00      	nop
    cd54:	e000e100 	.word	0xe000e100

0000cd58 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    cd58:	4b08      	ldr	r3, [pc, #32]	; (cd7c <z_impl_k_thread_abort+0x24>)
    cd5a:	689b      	ldr	r3, [r3, #8]
    cd5c:	4283      	cmp	r3, r0
    cd5e:	d10b      	bne.n	cd78 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    cd60:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    cd64:	b143      	cbz	r3, cd78 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    cd66:	4b06      	ldr	r3, [pc, #24]	; (cd80 <z_impl_k_thread_abort+0x28>)
    cd68:	685a      	ldr	r2, [r3, #4]
    cd6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    cd6e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    cd70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    cd72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    cd76:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    cd78:	f008 b8d0 	b.w	14f1c <z_thread_abort>
    cd7c:	2000d6e8 	.word	0x2000d6e8
    cd80:	e000ed00 	.word	0xe000ed00

0000cd84 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    cd84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    cd86:	4c09      	ldr	r4, [pc, #36]	; (cdac <z_arm_configure_static_mpu_regions+0x28>)
    cd88:	4a09      	ldr	r2, [pc, #36]	; (cdb0 <z_arm_configure_static_mpu_regions+0x2c>)
    cd8a:	4623      	mov	r3, r4
    cd8c:	2101      	movs	r1, #1
    cd8e:	4809      	ldr	r0, [pc, #36]	; (cdb4 <z_arm_configure_static_mpu_regions+0x30>)
    cd90:	f000 f918 	bl	cfc4 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    cd94:	2300      	movs	r3, #0
    cd96:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    cd98:	4b07      	ldr	r3, [pc, #28]	; (cdb8 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    cd9a:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    cd9c:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    cd9e:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    cda0:	9301      	str	r3, [sp, #4]
    cda2:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    cda4:	f000 f918 	bl	cfd8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    cda8:	b004      	add	sp, #16
    cdaa:	bd10      	pop	{r4, pc}
    cdac:	20040000 	.word	0x20040000
    cdb0:	2000c580 	.word	0x2000c580
    cdb4:	0001b864 	.word	0x0001b864
    cdb8:	2000cab0 	.word	0x2000cab0

0000cdbc <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    cdbc:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    cdbe:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    cdc0:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    cdc2:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    cdc6:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    cdca:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    cdcc:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    cdce:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    cdd0:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    cdd4:	4905      	ldr	r1, [pc, #20]	; (cdec <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    cdd6:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    cdda:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    cdde:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    cde2:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    cde6:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    cdea:	bd10      	pop	{r4, pc}
    cdec:	e000ed00 	.word	0xe000ed00

0000cdf0 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    cdf0:	280f      	cmp	r0, #15
{
    cdf2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    cdf4:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1U)) {
    cdf6:	d90f      	bls.n	ce18 <region_allocate_and_init+0x28>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    cdf8:	4b09      	ldr	r3, [pc, #36]	; (ce20 <region_allocate_and_init+0x30>)
    cdfa:	9003      	str	r0, [sp, #12]
    cdfc:	9302      	str	r3, [sp, #8]
    cdfe:	2300      	movs	r3, #0
    ce00:	2201      	movs	r2, #1
    ce02:	4618      	mov	r0, r3
    ce04:	e9cd 3300 	strd	r3, r3, [sp]
    ce08:	4906      	ldr	r1, [pc, #24]	; (ce24 <region_allocate_and_init+0x34>)
    ce0a:	f00b f896 	bl	17f3a <z_log_msg_runtime_create.constprop.0>
    ce0e:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    ce12:	4620      	mov	r0, r4
    ce14:	b004      	add	sp, #16
    ce16:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
    ce18:	f7ff ffd0 	bl	cdbc <region_init>
	return index;
    ce1c:	e7f9      	b.n	ce12 <region_allocate_and_init+0x22>
    ce1e:	bf00      	nop
    ce20:	0001c812 	.word	0x0001c812
    ce24:	0001b62c 	.word	0x0001b62c

0000ce28 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    ce28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce2c:	4689      	mov	r9, r1
    ce2e:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    ce30:	4606      	mov	r6, r0
    ce32:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    ce36:	4d54      	ldr	r5, [pc, #336]	; (cf88 <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    ce38:	b089      	sub	sp, #36	; 0x24
	for (i = 0; i < regions_num; i++) {
    ce3a:	45c8      	cmp	r8, r9
    ce3c:	da2d      	bge.n	ce9a <mpu_configure_regions_and_partition.constprop.0+0x72>
		if (regions[i].size == 0U) {
    ce3e:	f8d6 a004 	ldr.w	sl, [r6, #4]
    ce42:	f1ba 0f00 	cmp.w	sl, #0
    ce46:	d04a      	beq.n	cede <mpu_configure_regions_and_partition.constprop.0+0xb6>
		&&
    ce48:	f1ba 0f1f 	cmp.w	sl, #31
    ce4c:	d917      	bls.n	ce7e <mpu_configure_regions_and_partition.constprop.0+0x56>
		&&
    ce4e:	f01a 0f1f 	tst.w	sl, #31
    ce52:	d114      	bne.n	ce7e <mpu_configure_regions_and_partition.constprop.0+0x56>
		((part->start &
    ce54:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    ce58:	f01b 0f1f 	tst.w	fp, #31
    ce5c:	d10f      	bne.n	ce7e <mpu_configure_regions_and_partition.constprop.0+0x56>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    ce5e:	4658      	mov	r0, fp
    ce60:	f00b f862 	bl	17f28 <arm_cmse_mpu_region_get>
    ce64:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    ce66:	eb0a 000b 	add.w	r0, sl, fp
    ce6a:	3801      	subs	r0, #1
    ce6c:	f00b f85c 	bl	17f28 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    ce70:	4287      	cmp	r7, r0
    ce72:	d016      	beq.n	cea2 <mpu_configure_regions_and_partition.constprop.0+0x7a>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    ce74:	f06f 0715 	mvn.w	r7, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    ce78:	4b44      	ldr	r3, [pc, #272]	; (cf8c <mpu_configure_regions_and_partition.constprop.0+0x164>)
    ce7a:	9703      	str	r7, [sp, #12]
    ce7c:	e002      	b.n	ce84 <mpu_configure_regions_and_partition.constprop.0+0x5c>
			LOG_ERR("Partition %u: sanity check failed.", i);
    ce7e:	4b44      	ldr	r3, [pc, #272]	; (cf90 <mpu_configure_regions_and_partition.constprop.0+0x168>)
    ce80:	f8cd 800c 	str.w	r8, [sp, #12]
			LOG_ERR("Invalid underlying region index %u",
    ce84:	9302      	str	r3, [sp, #8]
    ce86:	2300      	movs	r3, #0
    ce88:	2201      	movs	r2, #1
    ce8a:	4618      	mov	r0, r3
    ce8c:	e9cd 3300 	strd	r3, r3, [sp]
    ce90:	4940      	ldr	r1, [pc, #256]	; (cf94 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
    ce92:	f00b f852 	bl	17f3a <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
    ce96:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    ce9a:	4620      	mov	r0, r4
    ce9c:	b009      	add	sp, #36	; 0x24
    ce9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    cea2:	f117 0f16 	cmn.w	r7, #22
    cea6:	d0e7      	beq.n	ce78 <mpu_configure_regions_and_partition.constprop.0+0x50>
    cea8:	42bc      	cmp	r4, r7
    ceaa:	dde5      	ble.n	ce78 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = rnr;
    ceac:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
    ceb0:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    ceb4:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
    ceb8:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    cebc:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    cec0:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    cec4:	e9d6 3200 	ldrd	r3, r2, [r6]
    cec8:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    ceca:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    cecc:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    ced0:	d11d      	bne.n	cf0e <mpu_configure_regions_and_partition.constprop.0+0xe6>
    ced2:	45d3      	cmp	fp, sl
    ced4:	d107      	bne.n	cee6 <mpu_configure_regions_and_partition.constprop.0+0xbe>
			mpu_configure_region(u_reg_index, &regions[i]);
    ced6:	4631      	mov	r1, r6
    ced8:	b2f8      	uxtb	r0, r7
    ceda:	f00b f83e 	bl	17f5a <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    cede:	f108 0801 	add.w	r8, r8, #1
    cee2:	360c      	adds	r6, #12
    cee4:	e7a9      	b.n	ce3a <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    cee6:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    cee8:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
    ceec:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    cef0:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    cef4:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    cef8:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    cefa:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    cefe:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    cf00:	f00b f82b 	bl	17f5a <mpu_configure_region>
			if (reg_index == -EINVAL) {
    cf04:	f110 0f16 	cmn.w	r0, #22
    cf08:	d0c5      	beq.n	ce96 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			reg_index++;
    cf0a:	1c44      	adds	r4, r0, #1
    cf0c:	e7e7      	b.n	cede <mpu_configure_regions_and_partition.constprop.0+0xb6>
	MPU->RNR = rnr;
    cf0e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
    cf12:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    cf16:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    cf18:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    cf1c:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    cf20:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    cf22:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    cf24:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    cf26:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    cf28:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    cf2c:	d0e8      	beq.n	cf00 <mpu_configure_regions_and_partition.constprop.0+0xd8>
				mpu_configure_region(reg_index, &regions[i]);
    cf2e:	f00b f814 	bl	17f5a <mpu_configure_region>
			if (reg_index == -EINVAL) {
    cf32:	f110 0f16 	cmn.w	r0, #22
    cf36:	d0ae      	beq.n	ce96 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	MPU->RNR = rnr;
    cf38:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
    cf3c:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    cf40:	f89d 3018 	ldrb.w	r3, [sp, #24]
			REGION_LIMIT_ADDR((regions[i].start +
    cf44:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = mpu_get_rbar() &
    cf48:	f362 0304 	bfi	r3, r2, #0, #5
    cf4c:	f88d 3018 	strb.w	r3, [sp, #24]
	return MPU->RLAR;
    cf50:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    cf54:	f89d 2018 	ldrb.w	r2, [sp, #24]
    cf58:	085b      	lsrs	r3, r3, #1
    cf5a:	f363 1247 	bfi	r2, r3, #5, #3
    cf5e:	f88d 2018 	strb.w	r2, [sp, #24]
			fill_region.base = regions[i].start +
    cf62:	e9d6 3200 	ldrd	r3, r2, [r6]
    cf66:	4413      	add	r3, r2
    cf68:	9304      	str	r3, [sp, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    cf6a:	f023 031f 	bic.w	r3, r3, #31
    cf6e:	445b      	add	r3, fp
    cf70:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
    cf74:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    cf76:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
    cf7a:	a904      	add	r1, sp, #16
    cf7c:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
    cf7e:	9307      	str	r3, [sp, #28]
				region_allocate_and_init(reg_index,
    cf80:	f7ff ff36 	bl	cdf0 <region_allocate_and_init>
    cf84:	e7be      	b.n	cf04 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    cf86:	bf00      	nop
    cf88:	e000ed00 	.word	0xe000ed00
    cf8c:	0001c85b 	.word	0x0001c85b
    cf90:	0001c838 	.word	0x0001c838
    cf94:	0001b62c 	.word	0x0001b62c

0000cf98 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    cf98:	2205      	movs	r2, #5
    cf9a:	4b04      	ldr	r3, [pc, #16]	; (cfac <arm_core_mpu_enable+0x14>)
    cf9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    cfa0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cfa4:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    cfa8:	4770      	bx	lr
    cfaa:	bf00      	nop
    cfac:	e000ed00 	.word	0xe000ed00

0000cfb0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    cfb0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    cfb4:	2200      	movs	r2, #0
    cfb6:	4b02      	ldr	r3, [pc, #8]	; (cfc0 <arm_core_mpu_disable+0x10>)
    cfb8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    cfbc:	4770      	bx	lr
    cfbe:	bf00      	nop
    cfc0:	e000ed00 	.word	0xe000ed00

0000cfc4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    cfc4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    cfc6:	4c03      	ldr	r4, [pc, #12]	; (cfd4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    cfc8:	7822      	ldrb	r2, [r4, #0]
    cfca:	f7ff ff2d 	bl	ce28 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    cfce:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    cfd0:	bd10      	pop	{r4, pc}
    cfd2:	bf00      	nop
    cfd4:	2000d743 	.word	0x2000d743

0000cfd8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    cfd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfdc:	4d29      	ldr	r5, [pc, #164]	; (d084 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    cfde:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    cfe0:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    cfe2:	f04f 0800 	mov.w	r8, #0
    cfe6:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    cfe8:	4f27      	ldr	r7, [pc, #156]	; (d088 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    cfea:	45d0      	cmp	r8, sl
    cfec:	da1b      	bge.n	d026 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    cfee:	f8d6 9004 	ldr.w	r9, [r6, #4]
    cff2:	f1b9 0f00 	cmp.w	r9, #0
    cff6:	d03f      	beq.n	d078 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    cff8:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    cffa:	4608      	mov	r0, r1
    cffc:	9101      	str	r1, [sp, #4]
    cffe:	f00a ff93 	bl	17f28 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d002:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d004:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d006:	eb09 0001 	add.w	r0, r9, r1
    d00a:	3801      	subs	r0, #1
    d00c:	f00a ff8c 	bl	17f28 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d010:	4284      	cmp	r4, r0
    d012:	f04f 0214 	mov.w	r2, #20
    d016:	4b1d      	ldr	r3, [pc, #116]	; (d08c <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    d018:	d008      	beq.n	d02c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    d01a:	fb02 f308 	mul.w	r3, r2, r8
    d01e:	f06f 0215 	mvn.w	r2, #21
    d022:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    d026:	b003      	add	sp, #12
    d028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    d02c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    d030:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    d032:	d0f8      	beq.n	d026 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    d034:	7819      	ldrb	r1, [r3, #0]
    d036:	42a1      	cmp	r1, r4
    d038:	ddf5      	ble.n	d026 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    d03a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    d03e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    d042:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    d046:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    d04a:	f100 0108 	add.w	r1, r0, #8
    d04e:	7b00      	ldrb	r0, [r0, #12]
    d050:	f364 0004 	bfi	r0, r4, #0, #5
    d054:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    d056:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    d05a:	790c      	ldrb	r4, [r1, #4]
    d05c:	0840      	lsrs	r0, r0, #1
    d05e:	f360 1447 	bfi	r4, r0, #5, #3
    d062:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    d064:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    d068:	f021 011f 	bic.w	r1, r1, #31
    d06c:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    d06e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    d072:	f021 011f 	bic.w	r1, r1, #31
    d076:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d078:	f108 0801 	add.w	r8, r8, #1
    d07c:	3514      	adds	r5, #20
    d07e:	360c      	adds	r6, #12
    d080:	e7b3      	b.n	cfea <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    d082:	bf00      	nop
    d084:	2000d054 	.word	0x2000d054
    d088:	e000ed00 	.word	0xe000ed00
    d08c:	2000d743 	.word	0x2000d743

0000d090 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    d090:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    d092:	4d0e      	ldr	r5, [pc, #56]	; (d0cc <z_arm_mpu_init+0x3c>)
    d094:	682c      	ldr	r4, [r5, #0]
    d096:	2c10      	cmp	r4, #16
    d098:	d815      	bhi.n	d0c6 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d09a:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    d09c:	f7ff ff88 	bl	cfb0 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    d0a0:	4b0b      	ldr	r3, [pc, #44]	; (d0d0 <z_arm_mpu_init+0x40>)
    d0a2:	4a0c      	ldr	r2, [pc, #48]	; (d0d4 <z_arm_mpu_init+0x44>)
    d0a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d0a8:	4284      	cmp	r4, r0
    d0aa:	d105      	bne.n	d0b8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    d0ac:	4b0a      	ldr	r3, [pc, #40]	; (d0d8 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    d0ae:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    d0b0:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    d0b2:	f7ff ff71 	bl	cf98 <arm_core_mpu_enable>
}
    d0b6:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    d0b8:	6869      	ldr	r1, [r5, #4]
    d0ba:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    d0be:	f7ff fe7d 	bl	cdbc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d0c2:	3001      	adds	r0, #1
    d0c4:	e7f0      	b.n	d0a8 <z_arm_mpu_init+0x18>
		return -1;
    d0c6:	f04f 30ff 	mov.w	r0, #4294967295
    d0ca:	e7f4      	b.n	d0b6 <z_arm_mpu_init+0x26>
    d0cc:	0001b870 	.word	0x0001b870
    d0d0:	e000ed00 	.word	0xe000ed00
    d0d4:	0044ffaa 	.word	0x0044ffaa
    d0d8:	2000d743 	.word	0x2000d743

0000d0dc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    d0dc:	4b01      	ldr	r3, [pc, #4]	; (d0e4 <__stdout_hook_install+0x8>)
    d0de:	6018      	str	r0, [r3, #0]
}
    d0e0:	4770      	bx	lr
    d0e2:	bf00      	nop
    d0e4:	2000c5c4 	.word	0x2000c5c4

0000d0e8 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    d0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d0ea:	4606      	mov	r6, r0
    d0ec:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    d0ee:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
    d0f0:	4f06      	ldr	r7, [pc, #24]	; (d10c <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
    d0f2:	42ac      	cmp	r4, r5
    d0f4:	da08      	bge.n	d108 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    d0f6:	683b      	ldr	r3, [r7, #0]
    d0f8:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    d0fa:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    d0fc:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
    d0fe:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    d102:	d001      	beq.n	d108 <z_impl_zephyr_read_stdin+0x20>
    d104:	280d      	cmp	r0, #13
    d106:	d1f4      	bne.n	d0f2 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    d108:	4620      	mov	r0, r4
    d10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d10c:	2000c5c0 	.word	0x2000c5c0

0000d110 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    d110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d112:	460d      	mov	r5, r1
    d114:	4f09      	ldr	r7, [pc, #36]	; (d13c <z_impl_zephyr_write_stdout+0x2c>)
    d116:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    d118:	f1c0 0401 	rsb	r4, r0, #1
    d11c:	19a3      	adds	r3, r4, r6
    d11e:	429d      	cmp	r5, r3
    d120:	dc01      	bgt.n	d126 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    d122:	4628      	mov	r0, r5
    d124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    d126:	7873      	ldrb	r3, [r6, #1]
    d128:	2b0a      	cmp	r3, #10
    d12a:	d102      	bne.n	d132 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    d12c:	200d      	movs	r0, #13
    d12e:	683b      	ldr	r3, [r7, #0]
    d130:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    d132:	683b      	ldr	r3, [r7, #0]
    d134:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    d138:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    d13a:	e7ef      	b.n	d11c <z_impl_zephyr_write_stdout+0xc>
    d13c:	2000c5c4 	.word	0x2000c5c4

0000d140 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    d140:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    d142:	2105      	movs	r1, #5
    d144:	4801      	ldr	r0, [pc, #4]	; (d14c <_exit+0xc>)
    d146:	f7ff ffe3 	bl	d110 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    d14a:	e7fe      	b.n	d14a <_exit+0xa>
    d14c:	0001c87e 	.word	0x0001c87e

0000d150 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    d150:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    d152:	4c07      	ldr	r4, [pc, #28]	; (d170 <_sbrk+0x20>)
    d154:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    d156:	18c2      	adds	r2, r0, r3
    d158:	4806      	ldr	r0, [pc, #24]	; (d174 <_sbrk+0x24>)
    d15a:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    d15e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    d162:	428a      	cmp	r2, r1
		heap_sz += count;
    d164:	bf36      	itet	cc
    d166:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    d168:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
    d16c:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
    d16e:	bd10      	pop	{r4, pc}
    d170:	2000d068 	.word	0x2000d068
    d174:	20011918 	.word	0x20011918

0000d178 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
    d178:	4602      	mov	r2, r0
    d17a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    d17c:	4801      	ldr	r0, [pc, #4]	; (d184 <k_mutex_lock.constprop.0.isra.0+0xc>)
    d17e:	f007 ba1b 	b.w	145b8 <z_impl_k_mutex_lock>
    d182:	bf00      	nop
    d184:	2000c9d8 	.word	0x2000c9d8

0000d188 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    d188:	4801      	ldr	r0, [pc, #4]	; (d190 <k_mutex_unlock.constprop.0.isra.0+0x8>)
    d18a:	f007 ba8f 	b.w	146ac <z_impl_k_mutex_unlock>
    d18e:	bf00      	nop
    d190:	2000c9d8 	.word	0x2000c9d8

0000d194 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
    d194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
    d196:	f04f 30ff 	mov.w	r0, #4294967295
    d19a:	f04f 31ff 	mov.w	r1, #4294967295
    d19e:	f7ff ffeb 	bl	d178 <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
    d1a2:	4c0c      	ldr	r4, [pc, #48]	; (d1d4 <net_if_init+0x40>)
    d1a4:	4e0c      	ldr	r6, [pc, #48]	; (d1d8 <net_if_init+0x44>)
    d1a6:	42b4      	cmp	r4, r6
    d1a8:	4627      	mov	r7, r4
    d1aa:	d303      	bcc.n	d1b4 <net_if_init+0x20>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
    d1ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
    d1b0:	f7ff bfea 	b.w	d188 <k_mutex_unlock.constprop.0.isra.0>
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
    d1b4:	f854 0b04 	ldr.w	r0, [r4], #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
    d1b8:	6803      	ldr	r3, [r0, #0]
    d1ba:	689d      	ldr	r5, [r3, #8]
	if (!api || !api->init) {
    d1bc:	2d00      	cmp	r5, #0
    d1be:	d0f2      	beq.n	d1a6 <net_if_init+0x12>
    d1c0:	682b      	ldr	r3, [r5, #0]
    d1c2:	2b00      	cmp	r3, #0
    d1c4:	d0ef      	beq.n	d1a6 <net_if_init+0x12>
	net_if_flag_test_and_set(iface, NET_IF_LOWER_UP);
    d1c6:	2109      	movs	r1, #9
    d1c8:	f00a ff9e 	bl	18108 <net_if_flag_test_and_set.isra.0>
	api->init(iface);
    d1cc:	4638      	mov	r0, r7
    d1ce:	682b      	ldr	r3, [r5, #0]
    d1d0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
    d1d2:	e7e8      	b.n	d1a6 <net_if_init+0x12>
    d1d4:	2000ca74 	.word	0x2000ca74
    d1d8:	2000ca78 	.word	0x2000ca78

0000d1dc <net_if_post_init>:

void net_if_post_init(void)
{
    d1dc:	b538      	push	{r3, r4, r5, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
    d1de:	4c07      	ldr	r4, [pc, #28]	; (d1fc <net_if_post_init+0x20>)
    d1e0:	4d07      	ldr	r5, [pc, #28]	; (d200 <net_if_post_init+0x24>)
    d1e2:	42ac      	cmp	r4, r5
    d1e4:	d300      	bcc.n	d1e8 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
    d1e6:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
    d1e8:	2103      	movs	r1, #3
    d1ea:	4620      	mov	r0, r4
    d1ec:	f00a ff38 	bl	18060 <net_if_flag_is_set>
    d1f0:	b910      	cbnz	r0, d1f8 <net_if_post_init+0x1c>
			net_if_up(iface);
    d1f2:	4620      	mov	r0, r4
    d1f4:	f00a ff9a 	bl	1812c <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    d1f8:	3404      	adds	r4, #4
    d1fa:	e7f2      	b.n	d1e2 <net_if_post_init+0x6>
    d1fc:	2000ca74 	.word	0x2000ca74
    d200:	2000ca78 	.word	0x2000ca78

0000d204 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    d204:	4b08      	ldr	r3, [pc, #32]	; (d228 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    d206:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    d208:	1ac3      	subs	r3, r0, r3
{
    d20a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    d20c:	4907      	ldr	r1, [pc, #28]	; (d22c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    d20e:	109b      	asrs	r3, r3, #2
{
    d210:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    d212:	4359      	muls	r1, r3
    d214:	2240      	movs	r2, #64	; 0x40
    d216:	4806      	ldr	r0, [pc, #24]	; (d230 <onoff_stop+0x2c>)
    d218:	f00a ffcc 	bl	181b4 <stop>
	notify(mgr, res);
    d21c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    d21e:	4601      	mov	r1, r0
	notify(mgr, res);
    d220:	4620      	mov	r0, r4
}
    d222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    d226:	4718      	bx	r3
    d228:	2000d080 	.word	0x2000d080
    d22c:	b6db6db7 	.word	0xb6db6db7
    d230:	0001b2f0 	.word	0x0001b2f0

0000d234 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d234:	2340      	movs	r3, #64	; 0x40
{
    d236:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    d238:	4c0b      	ldr	r4, [pc, #44]	; (d268 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d23a:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    d23c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d23e:	460b      	mov	r3, r1
{
    d240:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d242:	490a      	ldr	r1, [pc, #40]	; (d26c <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    d244:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d246:	4361      	muls	r1, r4
{
    d248:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d24a:	4a09      	ldr	r2, [pc, #36]	; (d270 <onoff_start+0x3c>)
    d24c:	4809      	ldr	r0, [pc, #36]	; (d274 <onoff_start+0x40>)
    d24e:	f00a ffdd 	bl	1820c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    d252:	1e01      	subs	r1, r0, #0
    d254:	da05      	bge.n	d262 <onoff_start+0x2e>
		notify(mgr, err);
    d256:	4630      	mov	r0, r6
    d258:	462b      	mov	r3, r5
	}
}
    d25a:	b002      	add	sp, #8
    d25c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    d260:	4718      	bx	r3
}
    d262:	b002      	add	sp, #8
    d264:	bd70      	pop	{r4, r5, r6, pc}
    d266:	bf00      	nop
    d268:	2000d080 	.word	0x2000d080
    d26c:	b6db6db7 	.word	0xb6db6db7
    d270:	00018277 	.word	0x00018277
    d274:	0001b2f0 	.word	0x0001b2f0

0000d278 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    d278:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d27a:	2200      	movs	r2, #0
    d27c:	2101      	movs	r1, #1
{
    d27e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d280:	2005      	movs	r0, #5
    d282:	f7ff f8d1 	bl	c428 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    d286:	480f      	ldr	r0, [pc, #60]	; (d2c4 <clk_init+0x4c>)
    d288:	f003 ffb2 	bl	111f0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    d28c:	4b0e      	ldr	r3, [pc, #56]	; (d2c8 <clk_init+0x50>)
    d28e:	4298      	cmp	r0, r3
    d290:	d115      	bne.n	d2be <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    d292:	f003 ffbd 	bl	11210 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    d296:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    d298:	490c      	ldr	r1, [pc, #48]	; (d2cc <clk_init+0x54>)
    d29a:	4630      	mov	r0, r6
    d29c:	f00a fc55 	bl	17b4a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    d2a0:	2800      	cmp	r0, #0
    d2a2:	db0b      	blt.n	d2bc <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    d2a4:	2501      	movs	r5, #1
    d2a6:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    d2a8:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    d2aa:	4908      	ldr	r1, [pc, #32]	; (d2cc <clk_init+0x54>)
    d2ac:	f104 001c 	add.w	r0, r4, #28
    d2b0:	f00a fc4b 	bl	17b4a <onoff_manager_init>
		if (err < 0) {
    d2b4:	2800      	cmp	r0, #0
    d2b6:	db01      	blt.n	d2bc <clk_init+0x44>
	}

	return 0;
    d2b8:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    d2ba:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    d2bc:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    d2be:	f06f 0004 	mvn.w	r0, #4
    d2c2:	e7fb      	b.n	d2bc <clk_init+0x44>
    d2c4:	0000d305 	.word	0x0000d305
    d2c8:	0bad0000 	.word	0x0bad0000
    d2cc:	0001b898 	.word	0x0001b898

0000d2d0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    d2d0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    d2d2:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    d2d4:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    d2d6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    d2d8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    d2da:	4808      	ldr	r0, [pc, #32]	; (d2fc <clkstarted_handle.constprop.0+0x2c>)
    d2dc:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    d2de:	3340      	adds	r3, #64	; 0x40
    d2e0:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    d2e2:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    d2e6:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    d2e8:	f00a ff51 	bl	1818e <set_on_state>
	if (callback) {
    d2ec:	b12d      	cbz	r5, d2fa <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    d2ee:	4632      	mov	r2, r6
    d2f0:	462b      	mov	r3, r5
}
    d2f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    d2f6:	4802      	ldr	r0, [pc, #8]	; (d300 <clkstarted_handle.constprop.0+0x30>)
    d2f8:	4718      	bx	r3
}
    d2fa:	bd70      	pop	{r4, r5, r6, pc}
    d2fc:	2000d080 	.word	0x2000d080
    d300:	0001b2f0 	.word	0x0001b2f0

0000d304 <clock_event_handler>:
	switch (event) {
    d304:	b110      	cbz	r0, d30c <clock_event_handler+0x8>
    d306:	2801      	cmp	r0, #1
    d308:	d004      	beq.n	d314 <clock_event_handler+0x10>
    d30a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    d30c:	4b03      	ldr	r3, [pc, #12]	; (d31c <clock_event_handler+0x18>)
    d30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d310:	075b      	lsls	r3, r3, #29
    d312:	d101      	bne.n	d318 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    d314:	f7ff bfdc 	b.w	d2d0 <clkstarted_handle.constprop.0>
}
    d318:	4770      	bx	lr
    d31a:	bf00      	nop
    d31c:	2000d080 	.word	0x2000d080

0000d320 <generic_hfclk_start>:
{
    d320:	b508      	push	{r3, lr}
	__asm__ volatile(
    d322:	f04f 0320 	mov.w	r3, #32
    d326:	f3ef 8111 	mrs	r1, BASEPRI
    d32a:	f383 8812 	msr	BASEPRI_MAX, r3
    d32e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    d332:	4a11      	ldr	r2, [pc, #68]	; (d378 <generic_hfclk_start+0x58>)
    d334:	6813      	ldr	r3, [r2, #0]
    d336:	f043 0002 	orr.w	r0, r3, #2
    d33a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    d33c:	07da      	lsls	r2, r3, #31
    d33e:	d408      	bmi.n	d352 <generic_hfclk_start+0x32>
	__asm__ volatile(
    d340:	f381 8811 	msr	BASEPRI, r1
    d344:	f3bf 8f6f 	isb	sy
}
    d348:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    d34c:	2001      	movs	r0, #1
    d34e:	f003 bf6f 	b.w	11230 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    d352:	4b0a      	ldr	r3, [pc, #40]	; (d37c <generic_hfclk_start+0x5c>)
    d354:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    d358:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    d35c:	07d3      	lsls	r3, r2, #31
    d35e:	d5ef      	bpl.n	d340 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    d360:	4807      	ldr	r0, [pc, #28]	; (d380 <generic_hfclk_start+0x60>)
    d362:	f00a ff14 	bl	1818e <set_on_state>
    d366:	f381 8811 	msr	BASEPRI, r1
    d36a:	f3bf 8f6f 	isb	sy
}
    d36e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    d372:	2000      	movs	r0, #0
    d374:	f7ff bfac 	b.w	d2d0 <clkstarted_handle.constprop.0>
    d378:	2000d0d0 	.word	0x2000d0d0
    d37c:	40005000 	.word	0x40005000
    d380:	2000d0c0 	.word	0x2000d0c0

0000d384 <api_blocking_start>:
{
    d384:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d386:	2200      	movs	r2, #0
    d388:	2301      	movs	r3, #1
    d38a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    d38e:	ab04      	add	r3, sp, #16
    d390:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    d394:	4a09      	ldr	r2, [pc, #36]	; (d3bc <api_blocking_start+0x38>)
    d396:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d398:	f8cd d000 	str.w	sp, [sp]
    d39c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    d3a0:	f00a ff62 	bl	18268 <api_start>
	if (err < 0) {
    d3a4:	2800      	cmp	r0, #0
    d3a6:	db05      	blt.n	d3b4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    d3a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d3ac:	2300      	movs	r3, #0
    d3ae:	4668      	mov	r0, sp
    d3b0:	f007 fa12 	bl	147d8 <z_impl_k_sem_take>
}
    d3b4:	b007      	add	sp, #28
    d3b6:	f85d fb04 	ldr.w	pc, [sp], #4
    d3ba:	bf00      	nop
    d3bc:	00018297 	.word	0x00018297

0000d3c0 <generic_hfclk_stop>:
{
    d3c0:	b510      	push	{r4, lr}
	__asm__ volatile(
    d3c2:	f04f 0320 	mov.w	r3, #32
    d3c6:	f3ef 8411 	mrs	r4, BASEPRI
    d3ca:	f383 8812 	msr	BASEPRI_MAX, r3
    d3ce:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    d3d2:	4a07      	ldr	r2, [pc, #28]	; (d3f0 <generic_hfclk_stop+0x30>)
    d3d4:	6813      	ldr	r3, [r2, #0]
    d3d6:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    d3da:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    d3dc:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    d3de:	d402      	bmi.n	d3e6 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    d3e0:	2001      	movs	r0, #1
    d3e2:	f00b fe34 	bl	1904e <nrfx_clock_stop>
	__asm__ volatile(
    d3e6:	f384 8811 	msr	BASEPRI, r4
    d3ea:	f3bf 8f6f 	isb	sy
}
    d3ee:	bd10      	pop	{r4, pc}
    d3f0:	2000d0d0 	.word	0x2000d0d0

0000d3f4 <z_nrf_clock_control_lf_on>:
{
    d3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d3f8:	2201      	movs	r2, #1
    d3fa:	4607      	mov	r7, r0
    d3fc:	4935      	ldr	r1, [pc, #212]	; (d4d4 <z_nrf_clock_control_lf_on+0xe0>)
    d3fe:	e8d1 3fef 	ldaex	r3, [r1]
    d402:	e8c1 2fe0 	stlex	r0, r2, [r1]
    d406:	2800      	cmp	r0, #0
    d408:	d1f9      	bne.n	d3fe <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    d40a:	b933      	cbnz	r3, d41a <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    d40c:	4932      	ldr	r1, [pc, #200]	; (d4d8 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
    d40e:	4833      	ldr	r0, [pc, #204]	; (d4dc <z_nrf_clock_control_lf_on+0xe8>)
    d410:	604b      	str	r3, [r1, #4]
    d412:	60cb      	str	r3, [r1, #12]
    d414:	608a      	str	r2, [r1, #8]
    d416:	f00a fbab 	bl	17b70 <onoff_request>
	switch (start_mode) {
    d41a:	1e7b      	subs	r3, r7, #1
    d41c:	2b01      	cmp	r3, #1
    d41e:	d828      	bhi.n	d472 <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    d420:	2f01      	cmp	r7, #1
    d422:	d106      	bne.n	d432 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    d424:	4b2e      	ldr	r3, [pc, #184]	; (d4e0 <z_nrf_clock_control_lf_on+0xec>)
    d426:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    d42a:	f003 0303 	and.w	r3, r3, #3
    d42e:	2b02      	cmp	r3, #2
    d430:	d01f      	beq.n	d472 <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    d432:	f00c fd79 	bl	19f28 <k_is_in_isr>
    d436:	4605      	mov	r5, r0
    d438:	b9e8      	cbnz	r0, d476 <z_nrf_clock_control_lf_on+0x82>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    d43a:	4b2a      	ldr	r3, [pc, #168]	; (d4e4 <z_nrf_clock_control_lf_on+0xf0>)
    d43c:	781b      	ldrb	r3, [r3, #0]
    d43e:	b1d3      	cbz	r3, d476 <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
    d440:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    d442:	4606      	mov	r6, r0
    d444:	4b26      	ldr	r3, [pc, #152]	; (d4e0 <z_nrf_clock_control_lf_on+0xec>)
    d446:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d44a:	4c25      	ldr	r4, [pc, #148]	; (d4e0 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d44c:	f8df 8098 	ldr.w	r8, [pc, #152]	; d4e8 <z_nrf_clock_control_lf_on+0xf4>
    d450:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d454:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    d458:	03d2      	lsls	r2, r2, #15
    d45a:	d516      	bpl.n	d48a <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    d45c:	f003 0303 	and.w	r3, r3, #3
    d460:	2b02      	cmp	r3, #2
    d462:	d001      	beq.n	d468 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    d464:	2f01      	cmp	r7, #1
    d466:	d110      	bne.n	d48a <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
    d468:	b375      	cbz	r5, d4c8 <z_nrf_clock_control_lf_on+0xd4>
    d46a:	f386 8811 	msr	BASEPRI, r6
    d46e:	f3bf 8f6f 	isb	sy
}
    d472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    d476:	f04f 0320 	mov.w	r3, #32
    d47a:	f3ef 8611 	mrs	r6, BASEPRI
    d47e:	f383 8812 	msr	BASEPRI_MAX, r3
    d482:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    d486:	2501      	movs	r5, #1
    d488:	e7df      	b.n	d44a <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    d48a:	b1c5      	cbz	r5, d4be <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    d48c:	4630      	mov	r0, r6
    d48e:	f7fe ff0f 	bl	c2b0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    d492:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    d496:	b2db      	uxtb	r3, r3
    d498:	2b01      	cmp	r3, #1
    d49a:	d1d9      	bne.n	d450 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d49c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    d4a0:	2a00      	cmp	r2, #0
    d4a2:	d0d5      	beq.n	d450 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d4a4:	2200      	movs	r2, #0
    d4a6:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    d4aa:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    d4ae:	2202      	movs	r2, #2
    d4b0:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    d4b4:	2220      	movs	r2, #32
    d4b6:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d4ba:	60a3      	str	r3, [r4, #8]
}
    d4bc:	e7c8      	b.n	d450 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
    d4be:	2100      	movs	r1, #0
    d4c0:	2021      	movs	r0, #33	; 0x21
    d4c2:	f007 fd0b 	bl	14edc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    d4c6:	e7e4      	b.n	d492 <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
    d4c8:	2202      	movs	r2, #2
    d4ca:	4b05      	ldr	r3, [pc, #20]	; (d4e0 <z_nrf_clock_control_lf_on+0xec>)
    d4cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    d4d0:	e7cf      	b.n	d472 <z_nrf_clock_control_lf_on+0x7e>
    d4d2:	bf00      	nop
    d4d4:	2000d07c 	.word	0x2000d07c
    d4d8:	2000d06c 	.word	0x2000d06c
    d4dc:	2000d09c 	.word	0x2000d09c
    d4e0:	40005000 	.word	0x40005000
    d4e4:	2000ecae 	.word	0x2000ecae
    d4e8:	e000e100 	.word	0xe000e100

0000d4ec <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    d4ec:	b508      	push	{r3, lr}
    d4ee:	4807      	ldr	r0, [pc, #28]	; (d50c <uart_console_init+0x20>)
    d4f0:	f00c fc7e 	bl	19df0 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    d4f4:	b138      	cbz	r0, d506 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    d4f6:	4806      	ldr	r0, [pc, #24]	; (d510 <uart_console_init+0x24>)
    d4f8:	f7ff fdf0 	bl	d0dc <__stdout_hook_install>
	__printk_hook_install(console_out);
    d4fc:	4804      	ldr	r0, [pc, #16]	; (d510 <uart_console_init+0x24>)
    d4fe:	f7fd ff81 	bl	b404 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    d502:	2000      	movs	r0, #0
}
    d504:	bd08      	pop	{r3, pc}
		return -ENODEV;
    d506:	f06f 0012 	mvn.w	r0, #18
    d50a:	e7fb      	b.n	d504 <uart_console_init+0x18>
    d50c:	0001b344 	.word	0x0001b344
    d510:	0000d515 	.word	0x0000d515

0000d514 <console_out>:
	if ('\n' == c) {
    d514:	280a      	cmp	r0, #10
{
    d516:	b538      	push	{r3, r4, r5, lr}
    d518:	4604      	mov	r4, r0
    d51a:	4d07      	ldr	r5, [pc, #28]	; (d538 <console_out+0x24>)
	if ('\n' == c) {
    d51c:	d104      	bne.n	d528 <console_out+0x14>
    d51e:	68ab      	ldr	r3, [r5, #8]
    d520:	210d      	movs	r1, #13
    d522:	4628      	mov	r0, r5
    d524:	685b      	ldr	r3, [r3, #4]
    d526:	4798      	blx	r3
    d528:	68ab      	ldr	r3, [r5, #8]
    d52a:	4803      	ldr	r0, [pc, #12]	; (d538 <console_out+0x24>)
    d52c:	685b      	ldr	r3, [r3, #4]
    d52e:	b2e1      	uxtb	r1, r4
    d530:	4798      	blx	r3
}
    d532:	4620      	mov	r0, r4
    d534:	bd38      	pop	{r3, r4, r5, pc}
    d536:	bf00      	nop
    d538:	0001b344 	.word	0x0001b344

0000d53c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    d53c:	b530      	push	{r4, r5, lr}
	return port->config;
    d53e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    d540:	f001 041f 	and.w	r4, r1, #31
    d544:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    d546:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    d54a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    d54c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    d550:	d105      	bne.n	d55e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    d552:	4620      	mov	r0, r4
    d554:	f004 f932 	bl	117bc <nrfx_gpiote_trigger_disable>

		return 0;
    d558:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    d55a:	b005      	add	sp, #20
    d55c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    d55e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    d560:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    d564:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    d568:	d114      	bne.n	d594 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    d56a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    d56e:	bf0c      	ite	eq
    d570:	2304      	moveq	r3, #4
    d572:	2305      	movne	r3, #5
    d574:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    d578:	2300      	movs	r3, #0
    d57a:	4620      	mov	r0, r4
    d57c:	4619      	mov	r1, r3
    d57e:	aa02      	add	r2, sp, #8
    d580:	f003 ff52 	bl	11428 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    d584:	4b1c      	ldr	r3, [pc, #112]	; (d5f8 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    d586:	4298      	cmp	r0, r3
    d588:	d133      	bne.n	d5f2 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    d58a:	2101      	movs	r1, #1
    d58c:	4620      	mov	r0, r4
    d58e:	f004 f8d1 	bl	11734 <nrfx_gpiote_trigger_enable>
	return 0;
    d592:	e7e1      	b.n	d558 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    d594:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    d598:	d020      	beq.n	d5dc <gpio_nrfx_pin_interrupt_configure+0xa0>
    d59a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    d59e:	bf14      	ite	ne
    d5a0:	2301      	movne	r3, #1
    d5a2:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    d5a4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    d5a8:	6883      	ldr	r3, [r0, #8]
    d5aa:	40cb      	lsrs	r3, r1
    d5ac:	07d9      	lsls	r1, r3, #31
    d5ae:	d4e3      	bmi.n	d578 <gpio_nrfx_pin_interrupt_configure+0x3c>
    d5b0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    d5b4:	d1e0      	bne.n	d578 <gpio_nrfx_pin_interrupt_configure+0x3c>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    d5b6:	4a11      	ldr	r2, [pc, #68]	; (d5fc <gpio_nrfx_pin_interrupt_configure+0xc0>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    d5b8:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    d5bc:	3380      	adds	r3, #128	; 0x80
    d5be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    d5c2:	07db      	lsls	r3, r3, #31
    d5c4:	d4d8      	bmi.n	d578 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d5c6:	f10d 0507 	add.w	r5, sp, #7
    d5ca:	4629      	mov	r1, r5
    d5cc:	4620      	mov	r0, r4
    d5ce:	f004 f85d 	bl	1168c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    d5d2:	4b0b      	ldr	r3, [pc, #44]	; (d600 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    d5d4:	4298      	cmp	r0, r3
    d5d6:	d003      	beq.n	d5e0 <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
    d5d8:	9503      	str	r5, [sp, #12]
    d5da:	e7cd      	b.n	d578 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    d5dc:	2303      	movs	r3, #3
    d5de:	e7e1      	b.n	d5a4 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    d5e0:	4628      	mov	r0, r5
    d5e2:	f004 f8a1 	bl	11728 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    d5e6:	4b04      	ldr	r3, [pc, #16]	; (d5f8 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    d5e8:	4298      	cmp	r0, r3
    d5ea:	d0f5      	beq.n	d5d8 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
    d5ec:	f06f 000b 	mvn.w	r0, #11
    d5f0:	e7b3      	b.n	d55a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    d5f2:	f06f 0015 	mvn.w	r0, #21
    d5f6:	e7b0      	b.n	d55a <gpio_nrfx_pin_interrupt_configure+0x1e>
    d5f8:	0bad0000 	.word	0x0bad0000
    d5fc:	40842500 	.word	0x40842500
    d600:	0bad0004 	.word	0x0bad0004

0000d604 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    d604:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    d606:	f004 f87f 	bl	11708 <nrfx_gpiote_is_init>
    d60a:	4604      	mov	r4, r0
    d60c:	b968      	cbnz	r0, d62a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    d60e:	f004 f853 	bl	116b8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    d612:	4b08      	ldr	r3, [pc, #32]	; (d634 <gpio_nrfx_init+0x30>)
    d614:	4298      	cmp	r0, r3
    d616:	d10a      	bne.n	d62e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    d618:	4621      	mov	r1, r4
    d61a:	4807      	ldr	r0, [pc, #28]	; (d638 <gpio_nrfx_init+0x34>)
    d61c:	f004 f830 	bl	11680 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    d620:	4622      	mov	r2, r4
    d622:	2105      	movs	r1, #5
    d624:	2031      	movs	r0, #49	; 0x31
    d626:	f7fe feff 	bl	c428 <z_arm_irq_priority_set>
		return 0;
    d62a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    d62c:	bd10      	pop	{r4, pc}
		return -EIO;
    d62e:	f06f 0004 	mvn.w	r0, #4
    d632:	e7fb      	b.n	d62c <gpio_nrfx_init+0x28>
    d634:	0bad0000 	.word	0x0bad0000
    d638:	0000d63d 	.word	0x0000d63d

0000d63c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d63c:	0943      	lsrs	r3, r0, #5
{
    d63e:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d640:	d107      	bne.n	d652 <nrfx_gpio_handler+0x16>
	return list->head;
    d642:	4b0b      	ldr	r3, [pc, #44]	; (d670 <nrfx_gpio_handler+0x34>)
    d644:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d646:	b121      	cbz	r1, d652 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    d648:	2501      	movs	r5, #1
	return node->next;
    d64a:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    d64c:	4e09      	ldr	r6, [pc, #36]	; (d674 <nrfx_gpio_handler+0x38>)
    d64e:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d650:	b901      	cbnz	r1, d654 <nrfx_gpio_handler+0x18>
}
    d652:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    d654:	688a      	ldr	r2, [r1, #8]
    d656:	402a      	ands	r2, r5
    d658:	d002      	beq.n	d660 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    d65a:	4630      	mov	r0, r6
    d65c:	684b      	ldr	r3, [r1, #4]
    d65e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d660:	b11c      	cbz	r4, d66a <nrfx_gpio_handler+0x2e>
    d662:	6823      	ldr	r3, [r4, #0]
    d664:	4621      	mov	r1, r4
    d666:	461c      	mov	r4, r3
    d668:	e7f2      	b.n	d650 <nrfx_gpio_handler+0x14>
    d66a:	4623      	mov	r3, r4
    d66c:	e7fa      	b.n	d664 <nrfx_gpio_handler+0x28>
    d66e:	bf00      	nop
    d670:	2000d0d4 	.word	0x2000d0d4
    d674:	0001b30c 	.word	0x0001b30c

0000d678 <gpio_nrfx_pin_configure>:
{
    d678:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    d67c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d67e:	f001 051f 	and.w	r5, r1, #31
    d682:	7b3b      	ldrb	r3, [r7, #12]
{
    d684:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d686:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    d68a:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d68c:	4628      	mov	r0, r5
    d68e:	f10d 0103 	add.w	r1, sp, #3
    d692:	f003 fffb 	bl	1168c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    d696:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d69a:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    d69c:	d10b      	bne.n	d6b6 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    d69e:	4628      	mov	r0, r5
    d6a0:	f004 f8b4 	bl	1180c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    d6a4:	4b3c      	ldr	r3, [pc, #240]	; (d798 <gpio_nrfx_pin_configure+0x120>)
    d6a6:	4598      	cmp	r8, r3
    d6a8:	d103      	bne.n	d6b2 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    d6aa:	f89d 0003 	ldrb.w	r0, [sp, #3]
    d6ae:	f004 f835 	bl	1171c <nrfx_gpiote_channel_free>
		return 0;
    d6b2:	2000      	movs	r0, #0
    d6b4:	e00c      	b.n	d6d0 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    d6b6:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    d6b8:	4628      	mov	r0, r5
    d6ba:	4619      	mov	r1, r3
    d6bc:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    d6be:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    d6c2:	f003 feb1 	bl	11428 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    d6c6:	4b34      	ldr	r3, [pc, #208]	; (d798 <gpio_nrfx_pin_configure+0x120>)
    d6c8:	4298      	cmp	r0, r3
    d6ca:	d004      	beq.n	d6d6 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    d6cc:	f06f 0015 	mvn.w	r0, #21
}
    d6d0:	b004      	add	sp, #16
    d6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    d6d6:	4580      	cmp	r8, r0
    d6d8:	d103      	bne.n	d6e2 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    d6da:	f89d 0003 	ldrb.w	r0, [sp, #3]
    d6de:	f004 f81d 	bl	1171c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    d6e2:	03a3      	lsls	r3, r4, #14
    d6e4:	d549      	bpl.n	d77a <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    d6e6:	f240 3306 	movw	r3, #774	; 0x306
    d6ea:	4023      	ands	r3, r4
    d6ec:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    d6f0:	d019      	beq.n	d726 <gpio_nrfx_pin_configure+0xae>
    d6f2:	d80c      	bhi.n	d70e <gpio_nrfx_pin_configure+0x96>
    d6f4:	2b06      	cmp	r3, #6
    d6f6:	d017      	beq.n	d728 <gpio_nrfx_pin_configure+0xb0>
    d6f8:	d804      	bhi.n	d704 <gpio_nrfx_pin_configure+0x8c>
    d6fa:	b1ab      	cbz	r3, d728 <gpio_nrfx_pin_configure+0xb0>
    d6fc:	2b02      	cmp	r3, #2
    d6fe:	d1e5      	bne.n	d6cc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    d700:	2304      	movs	r3, #4
    d702:	e011      	b.n	d728 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    d704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    d708:	d1e0      	bne.n	d6cc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    d70a:	2301      	movs	r3, #1
    d70c:	e00c      	b.n	d728 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    d70e:	f240 2202 	movw	r2, #514	; 0x202
    d712:	4293      	cmp	r3, r2
    d714:	d026      	beq.n	d764 <gpio_nrfx_pin_configure+0xec>
    d716:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    d71a:	d025      	beq.n	d768 <gpio_nrfx_pin_configure+0xf0>
    d71c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    d720:	d1d4      	bne.n	d6cc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    d722:	2302      	movs	r3, #2
    d724:	e000      	b.n	d728 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    d726:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    d728:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    d72c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    d730:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    d734:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    d736:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    d73a:	bf4c      	ite	mi
    d73c:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    d73e:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    d742:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    d744:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    d748:	d510      	bpl.n	d76c <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    d74a:	2301      	movs	r3, #1
    d74c:	687a      	ldr	r2, [r7, #4]
    d74e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    d750:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    d752:	2200      	movs	r2, #0
    d754:	4628      	mov	r0, r5
    d756:	a901      	add	r1, sp, #4
    d758:	f003 ff12 	bl	11580 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    d75c:	4b0e      	ldr	r3, [pc, #56]	; (d798 <gpio_nrfx_pin_configure+0x120>)
    d75e:	4298      	cmp	r0, r3
    d760:	d0a7      	beq.n	d6b2 <gpio_nrfx_pin_configure+0x3a>
    d762:	e7b3      	b.n	d6cc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    d764:	2305      	movs	r3, #5
    d766:	e7df      	b.n	d728 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    d768:	2303      	movs	r3, #3
    d76a:	e7dd      	b.n	d728 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    d76c:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    d76e:	bf41      	itttt	mi
    d770:	2301      	movmi	r3, #1
    d772:	687a      	ldrmi	r2, [r7, #4]
    d774:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    d776:	60d3      	strmi	r3, [r2, #12]
}
    d778:	e7eb      	b.n	d752 <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    d77a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    d77c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    d780:	bf4c      	ite	mi
    d782:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    d784:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    d788:	461a      	mov	r2, r3
    d78a:	4628      	mov	r0, r5
    d78c:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    d78e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    d792:	f003 fe49 	bl	11428 <nrfx_gpiote_input_configure>
    d796:	e7e1      	b.n	d75c <gpio_nrfx_pin_configure+0xe4>
    d798:	0bad0000 	.word	0x0bad0000

0000d79c <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    d79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    d7a0:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
    d7a2:	4e3f      	ldr	r6, [pc, #252]	; (d8a0 <pinctrl_configure_pins+0x104>)
    d7a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    d7a8:	4281      	cmp	r1, r0
    d7aa:	d102      	bne.n	d7b2 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    d7ac:	2000      	movs	r0, #0
}
    d7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    d7b2:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    d7b4:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    d7b8:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
    d7bc:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    d7be:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    d7c2:	bf08      	it	eq
    d7c4:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    d7c8:	2d19      	cmp	r5, #25
    d7ca:	d866      	bhi.n	d89a <pinctrl_configure_pins+0xfe>
    d7cc:	e8df f005 	tbb	[pc, r5]
    d7d0:	1e1b160d 	.word	0x1e1b160d
    d7d4:	651e2d21 	.word	0x651e2d21
    d7d8:	31656565 	.word	0x31656565
    d7dc:	65656551 	.word	0x65656551
    d7e0:	65656565 	.word	0x65656565
    d7e4:	5c546565 	.word	0x5c546565
    d7e8:	625f      	.short	0x625f
			NRF_PSEL_UART(reg, TXD) = pin;
    d7ea:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    d7ee:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    d7f2:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
    d7f6:	60b5      	str	r5, [r6, #8]
}
    d7f8:	2501      	movs	r5, #1
    d7fa:	e002      	b.n	d802 <pinctrl_configure_pins+0x66>
			NRF_PSEL_UART(reg, RXD) = pin;
    d7fc:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    d800:	2500      	movs	r5, #0
    d802:	46ac      	mov	ip, r5
    d804:	e01c      	b.n	d840 <pinctrl_configure_pins+0xa4>
			NRF_PSEL_UART(reg, RTS) = pin;
    d806:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    d80a:	e7f0      	b.n	d7ee <pinctrl_configure_pins+0x52>
			NRF_PSEL_UART(reg, CTS) = pin;
    d80c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    d810:	e7f6      	b.n	d800 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    d812:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    d814:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    d818:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    d81c:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    d820:	f8c6 c00c 	str.w	ip, [r6, #12]
}
    d824:	f04f 0c01 	mov.w	ip, #1
    d828:	e00a      	b.n	d840 <pinctrl_configure_pins+0xa4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    d82a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    d82e:	2501      	movs	r5, #1
    d830:	e7f2      	b.n	d818 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    d832:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    d836:	2c00      	cmp	r4, #0
    d838:	d1e2      	bne.n	d800 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    d83a:	2500      	movs	r5, #0
				drive = NRF_DRIVE_S0D1;
    d83c:	2406      	movs	r4, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    d83e:	46ac      	mov	ip, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    d840:	f850 eb04 	ldr.w	lr, [r0], #4
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    d844:	0224      	lsls	r4, r4, #8
    d846:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    d84a:	f1b8 0f00 	cmp.w	r8, #0
    d84e:	bf1c      	itt	ne
    d850:	f04f 0c00 	movne.w	ip, #0
    d854:	2501      	movne	r5, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    d856:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
    d85a:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    *p_pin = pin_number & 0x1F;
    d85e:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    d862:	ea44 040c 	orr.w	r4, r4, ip
    d866:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    d86a:	3380      	adds	r3, #128	; 0x80
    d86c:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    d870:	e79a      	b.n	d7a8 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    d872:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    d876:	e7de      	b.n	d836 <pinctrl_configure_pins+0x9a>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    d878:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    d87c:	6805      	ldr	r5, [r0, #0]
    d87e:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
    d882:	2d00      	cmp	r5, #0
    d884:	d0d3      	beq.n	d82e <pinctrl_configure_pins+0x92>
    d886:	e7b2      	b.n	d7ee <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    d888:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    d88c:	e7f6      	b.n	d87c <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    d88e:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    d892:	e7f3      	b.n	d87c <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    d894:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    d898:	e7f0      	b.n	d87c <pinctrl_configure_pins+0xe0>
		switch (NRF_GET_FUN(pins[i])) {
    d89a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    d89e:	e786      	b.n	d7ae <pinctrl_configure_pins+0x12>
    d8a0:	40842500 	.word	0x40842500

0000d8a4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    d8a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    d8a6:	ab0b      	add	r3, sp, #44	; 0x2c
    d8a8:	9305      	str	r3, [sp, #20]
    d8aa:	9303      	str	r3, [sp, #12]
    d8ac:	4b05      	ldr	r3, [pc, #20]	; (d8c4 <z_log_msg_runtime_create.constprop.0+0x20>)
    d8ae:	2201      	movs	r2, #1
    d8b0:	9302      	str	r3, [sp, #8]
    d8b2:	2300      	movs	r3, #0
    d8b4:	4618      	mov	r0, r3
    d8b6:	e9cd 3300 	strd	r3, r3, [sp]
    d8ba:	f7fe f83b 	bl	b934 <z_impl_z_log_msg_runtime_vcreate>
}
    d8be:	b007      	add	sp, #28
    d8c0:	f85d fb04 	ldr.w	pc, [sp], #4
    d8c4:	0001c929 	.word	0x0001c929

0000d8c8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    d8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    d8ca:	794b      	ldrb	r3, [r1, #5]
    d8cc:	2b01      	cmp	r3, #1
    d8ce:	d026      	beq.n	d91e <uarte_nrfx_configure+0x56>
    d8d0:	2b03      	cmp	r3, #3
    d8d2:	d121      	bne.n	d918 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    d8d4:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    d8d6:	798b      	ldrb	r3, [r1, #6]
    d8d8:	2b03      	cmp	r3, #3
    d8da:	d11d      	bne.n	d918 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    d8dc:	79ce      	ldrb	r6, [r1, #7]
    d8de:	b10e      	cbz	r6, d8e4 <uarte_nrfx_configure+0x1c>
    d8e0:	2e01      	cmp	r6, #1
    d8e2:	d119      	bne.n	d918 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    d8e4:	790a      	ldrb	r2, [r1, #4]
    d8e6:	b112      	cbz	r2, d8ee <uarte_nrfx_configure+0x26>
    d8e8:	2a02      	cmp	r2, #2
    d8ea:	d115      	bne.n	d918 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    d8ec:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    d8ee:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    d8f0:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    d8f2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    d8f6:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    d8f8:	d067      	beq.n	d9ca <uarte_nrfx_configure+0x102>
    d8fa:	d82d      	bhi.n	d958 <uarte_nrfx_configure+0x90>
    d8fc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    d900:	d066      	beq.n	d9d0 <uarte_nrfx_configure+0x108>
    d902:	d816      	bhi.n	d932 <uarte_nrfx_configure+0x6a>
    d904:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    d908:	d064      	beq.n	d9d4 <uarte_nrfx_configure+0x10c>
    d90a:	d80a      	bhi.n	d922 <uarte_nrfx_configure+0x5a>
    d90c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    d910:	d063      	beq.n	d9da <uarte_nrfx_configure+0x112>
    d912:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    d916:	d063      	beq.n	d9e0 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    d918:	f06f 0085 	mvn.w	r0, #133	; 0x85
    d91c:	e054      	b.n	d9c8 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    d91e:	2500      	movs	r5, #0
    d920:	e7d9      	b.n	d8d6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    d922:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    d926:	d05e      	beq.n	d9e6 <uarte_nrfx_configure+0x11e>
    d928:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    d92c:	d1f4      	bne.n	d918 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    d92e:	4b38      	ldr	r3, [pc, #224]	; (da10 <uarte_nrfx_configure+0x148>)
    d930:	e03c      	b.n	d9ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    d932:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    d936:	d059      	beq.n	d9ec <uarte_nrfx_configure+0x124>
    d938:	d807      	bhi.n	d94a <uarte_nrfx_configure+0x82>
    d93a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    d93e:	d057      	beq.n	d9f0 <uarte_nrfx_configure+0x128>
    d940:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    d944:	d1e8      	bne.n	d918 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    d946:	4b33      	ldr	r3, [pc, #204]	; (da14 <uarte_nrfx_configure+0x14c>)
    d948:	e030      	b.n	d9ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    d94a:	f647 2412 	movw	r4, #31250	; 0x7a12
    d94e:	42a3      	cmp	r3, r4
    d950:	d1e2      	bne.n	d918 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    d952:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    d956:	e029      	b.n	d9ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    d958:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    d95c:	d04a      	beq.n	d9f4 <uarte_nrfx_configure+0x12c>
    d95e:	d813      	bhi.n	d988 <uarte_nrfx_configure+0xc0>
    d960:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    d964:	d049      	beq.n	d9fa <uarte_nrfx_configure+0x132>
    d966:	d809      	bhi.n	d97c <uarte_nrfx_configure+0xb4>
    d968:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    d96c:	42a3      	cmp	r3, r4
    d96e:	d046      	beq.n	d9fe <uarte_nrfx_configure+0x136>
    d970:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    d974:	d1d0      	bne.n	d918 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    d976:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    d97a:	e017      	b.n	d9ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    d97c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    d980:	d1ca      	bne.n	d918 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    d982:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    d986:	e011      	b.n	d9ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    d988:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    d98c:	d03a      	beq.n	da04 <uarte_nrfx_configure+0x13c>
    d98e:	d808      	bhi.n	d9a2 <uarte_nrfx_configure+0xda>
    d990:	4c21      	ldr	r4, [pc, #132]	; (da18 <uarte_nrfx_configure+0x150>)
    d992:	42a3      	cmp	r3, r4
    d994:	d039      	beq.n	da0a <uarte_nrfx_configure+0x142>
    d996:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    d99a:	d1bd      	bne.n	d918 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    d99c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    d9a0:	e004      	b.n	d9ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    d9a2:	4c1e      	ldr	r4, [pc, #120]	; (da1c <uarte_nrfx_configure+0x154>)
    d9a4:	42a3      	cmp	r3, r4
    d9a6:	d1b7      	bne.n	d918 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    d9a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    d9ac:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    d9ae:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    d9b2:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    d9b4:	4335      	orrs	r5, r6
    d9b6:	681b      	ldr	r3, [r3, #0]
    d9b8:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    d9ba:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    d9be:	1d23      	adds	r3, r4, #4
    d9c0:	c903      	ldmia	r1, {r0, r1}
    d9c2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    d9c6:	2000      	movs	r0, #0
}
    d9c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    d9ca:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    d9ce:	e7ed      	b.n	d9ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    d9d0:	4b13      	ldr	r3, [pc, #76]	; (da20 <uarte_nrfx_configure+0x158>)
    d9d2:	e7eb      	b.n	d9ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    d9d4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    d9d8:	e7e8      	b.n	d9ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    d9da:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    d9de:	e7e5      	b.n	d9ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    d9e0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    d9e4:	e7e2      	b.n	d9ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    d9e6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    d9ea:	e7df      	b.n	d9ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    d9ec:	4b0d      	ldr	r3, [pc, #52]	; (da24 <uarte_nrfx_configure+0x15c>)
    d9ee:	e7dd      	b.n	d9ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    d9f0:	4b0d      	ldr	r3, [pc, #52]	; (da28 <uarte_nrfx_configure+0x160>)
    d9f2:	e7db      	b.n	d9ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    d9f4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    d9f8:	e7d8      	b.n	d9ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    d9fa:	4b0c      	ldr	r3, [pc, #48]	; (da2c <uarte_nrfx_configure+0x164>)
    d9fc:	e7d6      	b.n	d9ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    d9fe:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    da02:	e7d3      	b.n	d9ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    da04:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    da08:	e7d0      	b.n	d9ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    da0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    da0e:	e7cd      	b.n	d9ac <uarte_nrfx_configure+0xe4>
    da10:	0013b000 	.word	0x0013b000
    da14:	004ea000 	.word	0x004ea000
    da18:	0003d090 	.word	0x0003d090
    da1c:	000f4240 	.word	0x000f4240
    da20:	00275000 	.word	0x00275000
    da24:	0075c000 	.word	0x0075c000
    da28:	003af000 	.word	0x003af000
    da2c:	013a9000 	.word	0x013a9000

0000da30 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    da30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    da34:	4680      	mov	r8, r0
    da36:	2200      	movs	r2, #0
    da38:	2101      	movs	r1, #1
    da3a:	2008      	movs	r0, #8
    da3c:	f7fe fcf4 	bl	c428 <z_arm_irq_priority_set>
    da40:	2008      	movs	r0, #8
    da42:	f7fe fcd5 	bl	c3f0 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    da46:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    da48:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    da4c:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    da50:	683c      	ldr	r4, [r7, #0]
    da52:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    da56:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    da5a:	68f8      	ldr	r0, [r7, #12]
    da5c:	f00a fe18 	bl	18690 <pinctrl_apply_state>
	if (err < 0) {
    da60:	1e05      	subs	r5, r0, #0
    da62:	db1b      	blt.n	da9c <uarte_0_init+0x6c>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    da64:	4640      	mov	r0, r8
    da66:	1d31      	adds	r1, r6, #4
    da68:	f7ff ff2e 	bl	d8c8 <uarte_nrfx_configure>
	if (err) {
    da6c:	4605      	mov	r5, r0
    da6e:	b9a8      	cbnz	r0, da9c <uarte_0_init+0x6c>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    da70:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    da72:	0799      	lsls	r1, r3, #30
    da74:	d523      	bpl.n	dabe <uarte_0_init+0x8e>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    da76:	f106 001c 	add.w	r0, r6, #28
    da7a:	f003 fc4d 	bl	11318 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    da7e:	4b24      	ldr	r3, [pc, #144]	; (db10 <uarte_0_init+0xe0>)
    da80:	4298      	cmp	r0, r3
    da82:	d00f      	beq.n	daa4 <uarte_0_init+0x74>
		LOG_ERR("Failed to allocate PPI Channel");
    da84:	4b23      	ldr	r3, [pc, #140]	; (db14 <uarte_0_init+0xe4>)
    da86:	4628      	mov	r0, r5
    da88:	e9cd 5301 	strd	r5, r3, [sp, #4]
    da8c:	9500      	str	r5, [sp, #0]
    da8e:	462b      	mov	r3, r5
    da90:	2201      	movs	r2, #1
    da92:	4921      	ldr	r1, [pc, #132]	; (db18 <uarte_0_init+0xe8>)
    da94:	f7ff ff06 	bl	d8a4 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    da98:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    da9c:	4628      	mov	r0, r5
    da9e:	b004      	add	sp, #16
    daa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    daa4:	7f33      	ldrb	r3, [r6, #28]
    daa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    daaa:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    daae:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    dab2:	2301      	movs	r3, #1
    dab4:	7f32      	ldrb	r2, [r6, #28]
    dab6:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    dab8:	4a18      	ldr	r2, [pc, #96]	; (db1c <uarte_0_init+0xec>)
    daba:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    dabe:	2308      	movs	r3, #8
    dac0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    dac4:	7a3b      	ldrb	r3, [r7, #8]
    dac6:	b953      	cbnz	r3, dade <uarte_0_init+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dac8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    dacc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    dad0:	69b3      	ldr	r3, [r6, #24]
    dad2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    dad6:	2301      	movs	r3, #1
    dad8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dadc:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    dade:	687b      	ldr	r3, [r7, #4]
    dae0:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    dae2:	bf5c      	itt	pl
    dae4:	f44f 7380 	movpl.w	r3, #256	; 0x100
    dae8:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    daec:	687b      	ldr	r3, [r7, #4]
    daee:	06db      	lsls	r3, r3, #27
    daf0:	bf44      	itt	mi
    daf2:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    daf6:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    dafa:	6973      	ldr	r3, [r6, #20]
    dafc:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    db00:	2300      	movs	r3, #0
    db02:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    db06:	2301      	movs	r3, #1
    db08:	60a3      	str	r3, [r4, #8]
    db0a:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    db0c:	e7c6      	b.n	da9c <uarte_0_init+0x6c>
    db0e:	bf00      	nop
    db10:	0bad0000 	.word	0x0bad0000
    db14:	0001c929 	.word	0x0001c929
    db18:	0001b69c 	.word	0x0001b69c
    db1c:	40017000 	.word	0x40017000

0000db20 <uarte_nrfx_poll_out>:
{
    db20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db22:	4604      	mov	r4, r0
    db24:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    db26:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    db28:	f00c f9fe 	bl	19f28 <k_is_in_isr>
    db2c:	b9b0      	cbnz	r0, db5c <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    db2e:	4b21      	ldr	r3, [pc, #132]	; (dbb4 <uarte_nrfx_poll_out+0x94>)
    db30:	781b      	ldrb	r3, [r3, #0]
    db32:	b19b      	cbz	r3, db5c <uarte_nrfx_poll_out+0x3c>
{
    db34:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    db36:	6860      	ldr	r0, [r4, #4]
    db38:	f00a fd00 	bl	1853c <is_tx_ready.isra.0>
    db3c:	bb00      	cbnz	r0, db80 <uarte_nrfx_poll_out+0x60>
    db3e:	2001      	movs	r0, #1
    db40:	f00b fa83 	bl	1904a <nrfx_busy_wait>
    db44:	3e01      	subs	r6, #1
    db46:	d1f6      	bne.n	db36 <uarte_nrfx_poll_out+0x16>
    db48:	2100      	movs	r1, #0
    db4a:	2021      	movs	r0, #33	; 0x21
    db4c:	f007 f9c6 	bl	14edc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    db50:	e7f0      	b.n	db34 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    db52:	f381 8811 	msr	BASEPRI, r1
    db56:	f3bf 8f6f 	isb	sy
}
    db5a:	e7f5      	b.n	db48 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    db5c:	f04f 0320 	mov.w	r3, #32
    db60:	f3ef 8111 	mrs	r1, BASEPRI
    db64:	f383 8812 	msr	BASEPRI_MAX, r3
    db68:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    db6c:	6860      	ldr	r0, [r4, #4]
    db6e:	460e      	mov	r6, r1
    db70:	f00a fce4 	bl	1853c <is_tx_ready.isra.0>
    db74:	b990      	cbnz	r0, db9c <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    db76:	f381 8811 	msr	BASEPRI, r1
    db7a:	f3bf 8f6f 	isb	sy
}
    db7e:	e7ed      	b.n	db5c <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    db80:	f04f 0320 	mov.w	r3, #32
    db84:	f3ef 8111 	mrs	r1, BASEPRI
    db88:	f383 8812 	msr	BASEPRI_MAX, r3
    db8c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    db90:	6860      	ldr	r0, [r4, #4]
    db92:	460e      	mov	r6, r1
    db94:	f00a fcd2 	bl	1853c <is_tx_ready.isra.0>
    db98:	2800      	cmp	r0, #0
    db9a:	d0da      	beq.n	db52 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    db9c:	697b      	ldr	r3, [r7, #20]
	tx_start(dev, data->char_out, 1);
    db9e:	2201      	movs	r2, #1
	*data->char_out = c;
    dba0:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
    dba2:	4620      	mov	r0, r4
    dba4:	6979      	ldr	r1, [r7, #20]
    dba6:	f00a fc9b 	bl	184e0 <tx_start>
	__asm__ volatile(
    dbaa:	f386 8811 	msr	BASEPRI, r6
    dbae:	f3bf 8f6f 	isb	sy
}
    dbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dbb4:	2000ecae 	.word	0x2000ecae

0000dbb8 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    dbb8:	2301      	movs	r3, #1
    dbba:	4083      	lsls	r3, r0
{
    dbbc:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    dbbe:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    dbc0:	4a0b      	ldr	r2, [pc, #44]	; (dbf0 <compare_int_lock+0x38>)
    dbc2:	e8d2 1fef 	ldaex	r1, [r2]
    dbc6:	ea01 0504 	and.w	r5, r1, r4
    dbca:	e8c2 5fe6 	stlex	r6, r5, [r2]
    dbce:	2e00      	cmp	r6, #0
    dbd0:	d1f7      	bne.n	dbc2 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    dbd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    dbd6:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    dbd8:	4806      	ldr	r0, [pc, #24]	; (dbf4 <compare_int_lock+0x3c>)
    dbda:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    dbde:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    dbe2:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    dbe6:	420b      	tst	r3, r1
}
    dbe8:	bf14      	ite	ne
    dbea:	2001      	movne	r0, #1
    dbec:	2000      	moveq	r0, #0
    dbee:	bd70      	pop	{r4, r5, r6, pc}
    dbf0:	2000d0e4 	.word	0x2000d0e4
    dbf4:	40015000 	.word	0x40015000

0000dbf8 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    dbf8:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    dbfa:	490e      	ldr	r1, [pc, #56]	; (dc34 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    dbfc:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    dc00:	e9d1 3400 	ldrd	r3, r4, [r1]
    dc04:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    dc06:	18c3      	adds	r3, r0, r3
    dc08:	f144 0400 	adc.w	r4, r4, #0
    dc0c:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    dc10:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    dc14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    dc18:	d209      	bcs.n	dc2e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    dc1a:	4b07      	ldr	r3, [pc, #28]	; (dc38 <sys_clock_timeout_handler+0x40>)
    dc1c:	681b      	ldr	r3, [r3, #0]
    dc1e:	0a1a      	lsrs	r2, r3, #8
    dc20:	061b      	lsls	r3, r3, #24
    dc22:	199c      	adds	r4, r3, r6
    dc24:	4b05      	ldr	r3, [pc, #20]	; (dc3c <sys_clock_timeout_handler+0x44>)
    dc26:	f142 0500 	adc.w	r5, r2, #0
    dc2a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    dc2e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    dc30:	f007 babc 	b.w	151ac <sys_clock_announce>
    dc34:	2000cbb0 	.word	0x2000cbb0
    dc38:	2000d0e8 	.word	0x2000d0e8
    dc3c:	2000cbb8 	.word	0x2000cbb8

0000dc40 <compare_int_unlock>:
	if (key) {
    dc40:	b1d9      	cbz	r1, dc7a <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    dc42:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    dc44:	4a0d      	ldr	r2, [pc, #52]	; (dc7c <compare_int_unlock+0x3c>)
    dc46:	4083      	lsls	r3, r0
    dc48:	e8d2 cfef 	ldaex	ip, [r2]
    dc4c:	ea4c 0c03 	orr.w	ip, ip, r3
    dc50:	e8c2 cfe1 	stlex	r1, ip, [r2]
    dc54:	2900      	cmp	r1, #0
    dc56:	d1f7      	bne.n	dc48 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    dc58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    dc5c:	4a08      	ldr	r2, [pc, #32]	; (dc80 <compare_int_unlock+0x40>)
    dc5e:	4083      	lsls	r3, r0
    dc60:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dc64:	4b07      	ldr	r3, [pc, #28]	; (dc84 <compare_int_unlock+0x44>)
    dc66:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    dc6a:	40c3      	lsrs	r3, r0
    dc6c:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    dc6e:	bf42      	ittt	mi
    dc70:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    dc74:	4b04      	ldrmi	r3, [pc, #16]	; (dc88 <compare_int_unlock+0x48>)
    dc76:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    dc7a:	4770      	bx	lr
    dc7c:	2000d0e4 	.word	0x2000d0e4
    dc80:	40015000 	.word	0x40015000
    dc84:	2000d0e0 	.word	0x2000d0e0
    dc88:	e000e100 	.word	0xe000e100

0000dc8c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    dc8c:	4b0d      	ldr	r3, [pc, #52]	; (dcc4 <z_nrf_rtc_timer_read+0x38>)
    dc8e:	6818      	ldr	r0, [r3, #0]
    dc90:	0a01      	lsrs	r1, r0, #8
    dc92:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    dc94:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    dc98:	4b0b      	ldr	r3, [pc, #44]	; (dcc8 <z_nrf_rtc_timer_read+0x3c>)
    dc9a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    dc9e:	1818      	adds	r0, r3, r0
    dca0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    dca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    dca8:	d20a      	bcs.n	dcc0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    dcaa:	4b08      	ldr	r3, [pc, #32]	; (dccc <z_nrf_rtc_timer_read+0x40>)
    dcac:	e9d3 2300 	ldrd	r2, r3, [r3]
    dcb0:	4290      	cmp	r0, r2
    dcb2:	eb71 0303 	sbcs.w	r3, r1, r3
    dcb6:	d203      	bcs.n	dcc0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    dcb8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    dcbc:	f141 0100 	adc.w	r1, r1, #0
}
    dcc0:	4770      	bx	lr
    dcc2:	bf00      	nop
    dcc4:	2000d0e8 	.word	0x2000d0e8
    dcc8:	40015000 	.word	0x40015000
    dccc:	2000cbb8 	.word	0x2000cbb8

0000dcd0 <compare_set>:
{
    dcd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcd4:	4616      	mov	r6, r2
    dcd6:	461f      	mov	r7, r3
    dcd8:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    dcda:	f7ff ff6d 	bl	dbb8 <compare_int_lock>
    dcde:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    dce0:	f7ff ffd4 	bl	dc8c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    dce4:	42b0      	cmp	r0, r6
    dce6:	eb71 0307 	sbcs.w	r3, r1, r7
    dcea:	d251      	bcs.n	dd90 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    dcec:	4b38      	ldr	r3, [pc, #224]	; (ddd0 <compare_set+0x100>)
    dcee:	1a30      	subs	r0, r6, r0
    dcf0:	eb67 0101 	sbc.w	r1, r7, r1
    dcf4:	4298      	cmp	r0, r3
    dcf6:	f171 0100 	sbcs.w	r1, r1, #0
    dcfa:	d266      	bcs.n	ddca <compare_set+0xfa>
		if (target_time != cc_data[chan].target_time) {
    dcfc:	4b35      	ldr	r3, [pc, #212]	; (ddd4 <compare_set+0x104>)
    dcfe:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    dd02:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    dd06:	429f      	cmp	r7, r3
    dd08:	bf08      	it	eq
    dd0a:	4296      	cmpeq	r6, r2
    dd0c:	d04a      	beq.n	dda4 <compare_set+0xd4>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    dd0e:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    dd12:	4931      	ldr	r1, [pc, #196]	; (ddd8 <compare_set+0x108>)
    dd14:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
    dd18:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    dd1a:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    dd1e:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    dd22:	f00a fd55 	bl	187d0 <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    dd26:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
    dd2a:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    dd2c:	f104 0550 	add.w	r5, r4, #80	; 0x50
    dd30:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dd32:	b2ad      	uxth	r5, r5
    dd34:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    dd38:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    dd3c:	f8df c0a0 	ldr.w	ip, [pc, #160]	; dde0 <compare_set+0x110>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dd40:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
    p_reg->CC[ch] = cc_val;
    dd44:	9301      	str	r3, [sp, #4]
    dd46:	9a01      	ldr	r2, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    dd48:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    dd4c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    p_reg->EVTENSET = mask;
    dd50:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    dd54:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    dd58:	eba0 0008 	sub.w	r0, r0, r8
    dd5c:	3803      	subs	r0, #3
    dd5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    dd62:	4560      	cmp	r0, ip
    dd64:	d91e      	bls.n	dda4 <compare_set+0xd4>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dd66:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    dd68:	b168      	cbz	r0, dd86 <compare_set+0xb6>
     return p_reg->COUNTER;
    dd6a:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    dd6e:	eba8 000b 	sub.w	r0, r8, fp
    dd72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    dd76:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    dd7a:	d913      	bls.n	dda4 <compare_set+0xd4>
					event_clear(chan);
    dd7c:	4620      	mov	r0, r4
    dd7e:	f00a fd27 	bl	187d0 <event_clear>
    dd82:	f8df c05c 	ldr.w	ip, [pc, #92]	; dde0 <compare_set+0x110>
			cc_val = now + cc_inc;
    dd86:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
    dd8a:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    dd8e:	e7da      	b.n	dd46 <compare_set+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    dd90:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    dd92:	4a12      	ldr	r2, [pc, #72]	; (dddc <compare_set+0x10c>)
    dd94:	40a3      	lsls	r3, r4
    dd96:	e8d2 0fef 	ldaex	r0, [r2]
    dd9a:	4318      	orrs	r0, r3
    dd9c:	e8c2 0fe1 	stlex	r1, r0, [r2]
    dda0:	2900      	cmp	r1, #0
    dda2:	d1f8      	bne.n	dd96 <compare_set+0xc6>
	return ret;
    dda4:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
    dda6:	490b      	ldr	r1, [pc, #44]	; (ddd4 <compare_set+0x104>)
	cc_data[chan].callback = handler;
    dda8:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    ddaa:	0123      	lsls	r3, r4, #4
    ddac:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
    ddb0:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    ddb2:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
    ddb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ddb8:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    ddba:	4620      	mov	r0, r4
    ddbc:	9900      	ldr	r1, [sp, #0]
    ddbe:	f7ff ff3f 	bl	dc40 <compare_int_unlock>
}
    ddc2:	4628      	mov	r0, r5
    ddc4:	b003      	add	sp, #12
    ddc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    ddca:	f06f 0515 	mvn.w	r5, #21
    ddce:	e7f4      	b.n	ddba <compare_set+0xea>
    ddd0:	00800001 	.word	0x00800001
    ddd4:	2000cba0 	.word	0x2000cba0
    ddd8:	40015000 	.word	0x40015000
    dddc:	2000d0e0 	.word	0x2000d0e0
    dde0:	007ffffd 	.word	0x007ffffd

0000dde4 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    dde4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    dde6:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    dde8:	f04f 30ff 	mov.w	r0, #4294967295
    ddec:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->INTENCLR = mask;
    ddf0:	4c18      	ldr	r4, [pc, #96]	; (de54 <sys_clock_driver_init+0x70>)
    ddf2:	4b19      	ldr	r3, [pc, #100]	; (de58 <sys_clock_driver_init+0x74>)
    p_reg->INTENSET = mask;
    ddf4:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
    ddf6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    ddfa:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    ddfe:	4b17      	ldr	r3, [pc, #92]	; (de5c <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    de00:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    de04:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    de08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    de0c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    de10:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    de14:	4b12      	ldr	r3, [pc, #72]	; (de60 <sys_clock_driver_init+0x7c>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    de16:	2101      	movs	r1, #1
    de18:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    de1c:	2015      	movs	r0, #21
    de1e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    de22:	462a      	mov	r2, r5
    de24:	f7fe fb00 	bl	c428 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    de28:	2015      	movs	r0, #21
    de2a:	f7fe fae1 	bl	c3f0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    de2e:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    de30:	4a0c      	ldr	r2, [pc, #48]	; (de64 <sys_clock_driver_init+0x80>)
    de32:	60a3      	str	r3, [r4, #8]
    de34:	6023      	str	r3, [r4, #0]
    de36:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    de38:	4b0b      	ldr	r3, [pc, #44]	; (de68 <sys_clock_driver_init+0x84>)
    de3a:	4a0c      	ldr	r2, [pc, #48]	; (de6c <sys_clock_driver_init+0x88>)
    de3c:	9300      	str	r3, [sp, #0]
    de3e:	4628      	mov	r0, r5
    de40:	2300      	movs	r3, #0
    de42:	9501      	str	r5, [sp, #4]
    de44:	f7ff ff44 	bl	dcd0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    de48:	4630      	mov	r0, r6
    de4a:	f7ff fad3 	bl	d3f4 <z_nrf_clock_control_lf_on>

	return 0;
}
    de4e:	4628      	mov	r0, r5
    de50:	b002      	add	sp, #8
    de52:	bd70      	pop	{r4, r5, r6, pc}
    de54:	40015000 	.word	0x40015000
    de58:	000f0003 	.word	0x000f0003
    de5c:	2000cba0 	.word	0x2000cba0
    de60:	e000e100 	.word	0xe000e100
    de64:	2000d0e4 	.word	0x2000d0e4
    de68:	0000dbf9 	.word	0x0000dbf9
    de6c:	007fffff 	.word	0x007fffff

0000de70 <rtc_nrf_isr>:
{
    de70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    de74:	4b2e      	ldr	r3, [pc, #184]	; (df30 <rtc_nrf_isr+0xc0>)
    de76:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    de7a:	0790      	lsls	r0, r2, #30
    de7c:	d50b      	bpl.n	de96 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    de7e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    de82:	b142      	cbz	r2, de96 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    de84:	2200      	movs	r2, #0
    de86:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    de8a:	4a2a      	ldr	r2, [pc, #168]	; (df34 <rtc_nrf_isr+0xc4>)
    de8c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    de90:	6813      	ldr	r3, [r2, #0]
    de92:	3301      	adds	r3, #1
    de94:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    de96:	4a26      	ldr	r2, [pc, #152]	; (df30 <rtc_nrf_isr+0xc0>)
    de98:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    de9c:	03d9      	lsls	r1, r3, #15
    de9e:	d527      	bpl.n	def0 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    dea0:	4b25      	ldr	r3, [pc, #148]	; (df38 <rtc_nrf_isr+0xc8>)
    dea2:	e8d3 1fef 	ldaex	r1, [r3]
    dea6:	f021 0001 	bic.w	r0, r1, #1
    deaa:	e8c3 0fe4 	stlex	r4, r0, [r3]
    deae:	2c00      	cmp	r4, #0
    deb0:	d1f7      	bne.n	dea2 <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    deb2:	07cb      	lsls	r3, r1, #31
    deb4:	d402      	bmi.n	debc <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    deb6:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    deba:	b1cb      	cbz	r3, def0 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    debc:	2500      	movs	r5, #0
    debe:	4c1c      	ldr	r4, [pc, #112]	; (df30 <rtc_nrf_isr+0xc0>)
    dec0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    dec4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    dec8:	f7ff fee0 	bl	dc8c <z_nrf_rtc_timer_read>
	__asm__ volatile(
    decc:	f04f 0320 	mov.w	r3, #32
    ded0:	f3ef 8211 	mrs	r2, BASEPRI
    ded4:	f383 8812 	msr	BASEPRI_MAX, r3
    ded8:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    dedc:	4b17      	ldr	r3, [pc, #92]	; (df3c <rtc_nrf_isr+0xcc>)
    dede:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    dee2:	42b0      	cmp	r0, r6
    dee4:	41b9      	sbcs	r1, r7
    dee6:	d206      	bcs.n	def6 <rtc_nrf_isr+0x86>
	__asm__ volatile(
    dee8:	f382 8811 	msr	BASEPRI, r2
    deec:	f3bf 8f6f 	isb	sy
}
    def0:	b003      	add	sp, #12
    def2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    def6:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
    defa:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    defe:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
    df02:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    df04:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    df08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    df0c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    df10:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    df14:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    df18:	f382 8811 	msr	BASEPRI, r2
    df1c:	f3bf 8f6f 	isb	sy
		if (handler) {
    df20:	2900      	cmp	r1, #0
    df22:	d0e5      	beq.n	def0 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
    df24:	9000      	str	r0, [sp, #0]
    df26:	4632      	mov	r2, r6
    df28:	463b      	mov	r3, r7
    df2a:	4628      	mov	r0, r5
    df2c:	4788      	blx	r1
    df2e:	e7df      	b.n	def0 <rtc_nrf_isr+0x80>
    df30:	40015000 	.word	0x40015000
    df34:	2000d0e8 	.word	0x2000d0e8
    df38:	2000d0e0 	.word	0x2000d0e0
    df3c:	2000cba0 	.word	0x2000cba0

0000df40 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    df40:	1c43      	adds	r3, r0, #1
{
    df42:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    df44:	d021      	beq.n	df8a <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    df46:	2801      	cmp	r0, #1
    df48:	dd21      	ble.n	df8e <sys_clock_set_timeout+0x4e>
    df4a:	4a12      	ldr	r2, [pc, #72]	; (df94 <sys_clock_set_timeout+0x54>)
    df4c:	4b12      	ldr	r3, [pc, #72]	; (df98 <sys_clock_set_timeout+0x58>)
    df4e:	4290      	cmp	r0, r2
    df50:	bfd4      	ite	le
    df52:	4604      	movle	r4, r0
    df54:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    df56:	f7ff fe99 	bl	dc8c <z_nrf_rtc_timer_read>
    df5a:	4b10      	ldr	r3, [pc, #64]	; (df9c <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    df5c:	490e      	ldr	r1, [pc, #56]	; (df98 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    df5e:	e9d3 2300 	ldrd	r2, r3, [r3]
    df62:	1a80      	subs	r0, r0, r2
		cyc = 0;
    df64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    df68:	bf28      	it	cs
    df6a:	2400      	movcs	r4, #0
	cyc += unannounced;
    df6c:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    df6e:	428c      	cmp	r4, r1
    df70:	bf28      	it	cs
    df72:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    df74:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    df76:	490a      	ldr	r1, [pc, #40]	; (dfa0 <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
    df78:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    df7a:	9001      	str	r0, [sp, #4]
    df7c:	9100      	str	r1, [sp, #0]
    df7e:	f143 0300 	adc.w	r3, r3, #0
    df82:	f7ff fea5 	bl	dcd0 <compare_set>
}
    df86:	b002      	add	sp, #8
    df88:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    df8a:	4c03      	ldr	r4, [pc, #12]	; (df98 <sys_clock_set_timeout+0x58>)
    df8c:	e7e3      	b.n	df56 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    df8e:	2401      	movs	r4, #1
    df90:	e7e1      	b.n	df56 <sys_clock_set_timeout+0x16>
    df92:	bf00      	nop
    df94:	007ffffe 	.word	0x007ffffe
    df98:	007fffff 	.word	0x007fffff
    df9c:	2000cbb0 	.word	0x2000cbb0
    dfa0:	0000dbf9 	.word	0x0000dbf9

0000dfa4 <sys_clock_elapsed>:
{
    dfa4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    dfa6:	f7ff fe71 	bl	dc8c <z_nrf_rtc_timer_read>
    dfaa:	4b02      	ldr	r3, [pc, #8]	; (dfb4 <sys_clock_elapsed+0x10>)
    dfac:	681b      	ldr	r3, [r3, #0]
}
    dfae:	1ac0      	subs	r0, r0, r3
    dfb0:	bd08      	pop	{r3, pc}
    dfb2:	bf00      	nop
    dfb4:	2000cbb0 	.word	0x2000cbb0

0000dfb8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    dfb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    dfba:	ab0b      	add	r3, sp, #44	; 0x2c
    dfbc:	9305      	str	r3, [sp, #20]
    dfbe:	9303      	str	r3, [sp, #12]
    dfc0:	4b05      	ldr	r3, [pc, #20]	; (dfd8 <z_log_msg_runtime_create.constprop.0+0x20>)
    dfc2:	2202      	movs	r2, #2
    dfc4:	9302      	str	r3, [sp, #8]
    dfc6:	2300      	movs	r3, #0
    dfc8:	4618      	mov	r0, r3
    dfca:	e9cd 3300 	strd	r3, r3, [sp]
    dfce:	f7fd fcb1 	bl	b934 <z_impl_z_log_msg_runtime_vcreate>
}
    dfd2:	b007      	add	sp, #28
    dfd4:	f85d fb04 	ldr.w	pc, [sp], #4
    dfd8:	0001c962 	.word	0x0001c962

0000dfdc <nrf_modem_lib_init>:

	return rc;
}

int nrf_modem_lib_init(void)
{
    dfdc:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(NRF_MODEM_IPC_IRQ, CONFIG_NRF_MODEM_LIB_IPC_IRQ_PRIO,
    dfde:	2200      	movs	r2, #0
    dfe0:	2101      	movs	r1, #1
    dfe2:	202a      	movs	r0, #42	; 0x2a
    dfe4:	f7fe fa20 	bl	c428 <z_arm_irq_priority_set>
	rc = nrf_modem_init(&init_params);
    dfe8:	4807      	ldr	r0, [pc, #28]	; (e008 <nrf_modem_lib_init+0x2c>)
    dfea:	f005 fe8f 	bl	13d0c <nrf_modem_init>
    dfee:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
    dff0:	4c06      	ldr	r4, [pc, #24]	; (e00c <nrf_modem_lib_init+0x30>)
    dff2:	4e07      	ldr	r6, [pc, #28]	; (e010 <nrf_modem_lib_init+0x34>)
    dff4:	42b4      	cmp	r4, r6
    dff6:	d301      	bcc.n	dffc <nrf_modem_lib_init+0x20>
	return _nrf_modem_lib_init();
}
    dff8:	4628      	mov	r0, r5
    dffa:	bd70      	pop	{r4, r5, r6, pc}
		e->callback(rc, e->context);
    dffc:	e9d4 3100 	ldrd	r3, r1, [r4]
    e000:	4628      	mov	r0, r5
    e002:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
    e004:	3408      	adds	r4, #8
    e006:	e7f5      	b.n	dff4 <nrf_modem_lib_init+0x18>
    e008:	0001b9ac 	.word	0x0001b9ac
    e00c:	0001e2e4 	.word	0x0001e2e4
    e010:	0001e2f4 	.word	0x0001e2f4

0000e014 <nrf_modem_lib_shutdown>:
{
	return nrf_modem_bootloader_init(&bootloader_init_params);
}

int nrf_modem_lib_shutdown(void)
{
    e014:	b530      	push	{r4, r5, lr}
	int ret;
	uint16_t mode;

	LOG_DBG("Shutting down modem library");
	STRUCT_SECTION_FOREACH(nrf_modem_lib_shutdown_cb, e) {
    e016:	4c13      	ldr	r4, [pc, #76]	; (e064 <nrf_modem_lib_shutdown+0x50>)
    e018:	4d13      	ldr	r5, [pc, #76]	; (e068 <nrf_modem_lib_shutdown+0x54>)
{
    e01a:	b087      	sub	sp, #28
	STRUCT_SECTION_FOREACH(nrf_modem_lib_shutdown_cb, e) {
    e01c:	42ac      	cmp	r4, r5
    e01e:	d31c      	bcc.n	e05a <nrf_modem_lib_shutdown+0x46>
		LOG_DBG("Modem shutdown callback: %p", e->callback);
		e->callback(e->context);
	}

	/* The application must set CFUN=0 before calling nrf_modem_shutdown. */
	ret = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode);
    e020:	4912      	ldr	r1, [pc, #72]	; (e06c <nrf_modem_lib_shutdown+0x58>)
    e022:	4813      	ldr	r0, [pc, #76]	; (e070 <nrf_modem_lib_shutdown+0x5c>)
    e024:	f10d 0216 	add.w	r2, sp, #22
    e028:	f004 f9e4 	bl	123f4 <nrf_modem_at_scanf>
	if (ret == 1 && mode != AT_CFUN0_VAL) {
    e02c:	2801      	cmp	r0, #1
    e02e:	d10f      	bne.n	e050 <nrf_modem_lib_shutdown+0x3c>
    e030:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    e034:	b163      	cbz	r3, e050 <nrf_modem_lib_shutdown+0x3c>
		LOG_WRN("Application should set minimal functional mode (CFUN=0) before "
    e036:	4b0f      	ldr	r3, [pc, #60]	; (e074 <nrf_modem_lib_shutdown+0x60>)
    e038:	2202      	movs	r2, #2
    e03a:	9302      	str	r3, [sp, #8]
    e03c:	2300      	movs	r3, #0
    e03e:	490e      	ldr	r1, [pc, #56]	; (e078 <nrf_modem_lib_shutdown+0x64>)
    e040:	4618      	mov	r0, r3
    e042:	e9cd 3300 	strd	r3, r3, [sp]
    e046:	f7ff ffb7 	bl	dfb8 <z_log_msg_runtime_create.constprop.0>
			"shutting down modem library");
		nrf_modem_at_printf("AT+CFUN=0");
    e04a:	480c      	ldr	r0, [pc, #48]	; (e07c <nrf_modem_lib_shutdown+0x68>)
    e04c:	f004 f8f2 	bl	12234 <nrf_modem_at_printf>
	}

	nrf_modem_shutdown();
    e050:	f005 fea2 	bl	13d98 <nrf_modem_shutdown>
	 */
	nrf_modem_lib_trace_processing_done_wait(K_FOREVER);
#endif

	return 0;
}
    e054:	2000      	movs	r0, #0
    e056:	b007      	add	sp, #28
    e058:	bd30      	pop	{r4, r5, pc}
		e->callback(e->context);
    e05a:	e9d4 3000 	ldrd	r3, r0, [r4]
    e05e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_shutdown_cb, e) {
    e060:	3408      	adds	r4, #8
    e062:	e7db      	b.n	e01c <nrf_modem_lib_shutdown+0x8>
    e064:	0001e2f4 	.word	0x0001e2f4
    e068:	0001e2fc 	.word	0x0001e2fc
    e06c:	0001c9bd 	.word	0x0001c9bd
    e070:	0001c9c8 	.word	0x0001c9c8
    e074:	0001c962 	.word	0x0001c962
    e078:	0001b674 	.word	0x0001b674
    e07c:	0001c9d1 	.word	0x0001c9d1

0000e080 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
    e080:	b5f0      	push	{r4, r5, r6, r7, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
    e082:	4b0f      	ldr	r3, [pc, #60]	; (e0c0 <thread_monitor_entry_get+0x40>)
{
    e084:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
    e086:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
    e088:	4b0e      	ldr	r3, [pc, #56]	; (e0c4 <thread_monitor_entry_get+0x44>)
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    e08a:	250b      	movs	r5, #11
	int entry_age, oldest_entry_age = 0;
    e08c:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
    e08e:	4618      	mov	r0, r3
    e090:	461f      	mov	r7, r3
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    e092:	42b8      	cmp	r0, r7
    e094:	d301      	bcc.n	e09a <thread_monitor_entry_get+0x1a>
    e096:	3d01      	subs	r5, #1
    e098:	d104      	bne.n	e0a4 <thread_monitor_entry_get+0x24>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
    e09a:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
    e09c:	3a01      	subs	r2, #1
	new_entry->id = id;
    e09e:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
    e0a0:	605a      	str	r2, [r3, #4]
}
    e0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (entry->id == id) {
    e0a4:	6804      	ldr	r4, [r0, #0]
    e0a6:	428c      	cmp	r4, r1
    e0a8:	d0fb      	beq.n	e0a2 <thread_monitor_entry_get+0x22>
		} else if (entry->id == 0) {
    e0aa:	b13c      	cbz	r4, e0bc <thread_monitor_entry_get+0x3c>
		entry_age = rpc_event_cnt - entry->cnt;
    e0ac:	6844      	ldr	r4, [r0, #4]
    e0ae:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
    e0b0:	42a6      	cmp	r6, r4
    e0b2:	bfbc      	itt	lt
    e0b4:	4603      	movlt	r3, r0
    e0b6:	4626      	movlt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    e0b8:	3008      	adds	r0, #8
    e0ba:	e7ea      	b.n	e092 <thread_monitor_entry_get+0x12>
    e0bc:	4603      	mov	r3, r0
    e0be:	e7ec      	b.n	e09a <thread_monitor_entry_get+0x1a>
    e0c0:	2000d194 	.word	0x2000d194
    e0c4:	2000d1a0 	.word	0x2000d1a0

0000e0c8 <on_init>:
	list->head = NULL;
    e0c8:	2000      	movs	r0, #0
    e0ca:	4b05      	ldr	r3, [pc, #20]	; (e0e0 <on_init+0x18>)
	list->tail = NULL;
    e0cc:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e0d0:	4b04      	ldr	r3, [pc, #16]	; (e0e4 <on_init+0x1c>)
    e0d2:	e8d3 2fef 	ldaex	r2, [r3]
    e0d6:	e8c3 0fe1 	stlex	r1, r0, [r3]
    e0da:	2900      	cmp	r1, #0
    e0dc:	d1f9      	bne.n	e0d2 <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
    e0de:	4770      	bx	lr
    e0e0:	2000d198 	.word	0x2000d198
    e0e4:	2000d194 	.word	0x2000d194

0000e0e8 <nrf_modem_os_timedwait>:
{
    e0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e0ec:	b088      	sub	sp, #32
    e0ee:	4605      	mov	r5, r0
    e0f0:	460e      	mov	r6, r1
	if (!nrf_modem_is_initialized()) {
    e0f2:	f00b fe7a 	bl	19dea <nrf_modem_is_initialized>
    e0f6:	b920      	cbnz	r0, e102 <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
    e0f8:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
    e0fc:	b008      	add	sp, #32
    e0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
    e102:	f00c f921 	bl	1a348 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
    e106:	6833      	ldr	r3, [r6, #0]
    e108:	4604      	mov	r4, r0
    e10a:	2b00      	cmp	r3, #0
    e10c:	460f      	mov	r7, r1
    e10e:	d104      	bne.n	e11a <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
    e110:	f006 fe62 	bl	14dd8 <z_impl_k_yield>
		return -NRF_EAGAIN;
    e114:	f06f 000a 	mvn.w	r0, #10
    e118:	e7f0      	b.n	e0fc <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
    e11a:	bfbc      	itt	lt
    e11c:	f04f 33ff 	movlt.w	r3, #4294967295
    e120:	6033      	strlt	r3, [r6, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    e122:	2201      	movs	r2, #1
    e124:	2100      	movs	r1, #0
    e126:	a801      	add	r0, sp, #4
    e128:	f00b ff9e 	bl	1a068 <z_impl_k_sem_init>
    e12c:	46e8      	mov	r8, sp
	thread->context = context;
    e12e:	9507      	str	r5, [sp, #28]
	__asm__ volatile(
    e130:	f04f 0320 	mov.w	r3, #32
    e134:	f3ef 8a11 	mrs	sl, BASEPRI
    e138:	f383 8812 	msr	BASEPRI_MAX, r3
    e13c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    e140:	f006 fee6 	bl	14f10 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    e144:	f7ff ff9c 	bl	e080 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
    e148:	f8df 911c 	ldr.w	r9, [pc, #284]	; e268 <nrf_modem_os_timedwait+0x180>
    e14c:	6842      	ldr	r2, [r0, #4]
    e14e:	f8d9 3000 	ldr.w	r3, [r9]
    e152:	429a      	cmp	r2, r3
    e154:	d16d      	bne.n	e232 <nrf_modem_os_timedwait+0x14a>
	parent->next = child;
    e156:	2300      	movs	r3, #0
	return list->tail;
    e158:	4d42      	ldr	r5, [pc, #264]	; (e264 <nrf_modem_os_timedwait+0x17c>)
	parent->next = child;
    e15a:	9300      	str	r3, [sp, #0]
	return list->tail;
    e15c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    e15e:	2b00      	cmp	r3, #0
    e160:	d16e      	bne.n	e240 <nrf_modem_os_timedwait+0x158>
	list->head = node;
    e162:	e9c5 8800 	strd	r8, r8, [r5]
	__asm__ volatile(
    e166:	f38a 8811 	msr	BASEPRI, sl
    e16a:	f3bf 8f6f 	isb	sy
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
    e16e:	6833      	ldr	r3, [r6, #0]
    e170:	1c5a      	adds	r2, r3, #1
    e172:	d06a      	beq.n	e24a <nrf_modem_os_timedwait+0x162>
			return ((t * to_hz + off) / from_hz);
    e174:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    e178:	f240 30e7 	movw	r0, #999	; 0x3e7
    e17c:	2100      	movs	r1, #0
    e17e:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
    e182:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e186:	2300      	movs	r3, #0
    e188:	fbcc 010e 	smlal	r0, r1, ip, lr
    e18c:	f7fa fbfa 	bl	8984 <__aeabi_uldivmod>
    e190:	4602      	mov	r2, r0
    e192:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    e194:	a801      	add	r0, sp, #4
    e196:	f006 fb1f 	bl	147d8 <z_impl_k_sem_take>
	__asm__ volatile(
    e19a:	f04f 0320 	mov.w	r3, #32
    e19e:	f3ef 8a11 	mrs	sl, BASEPRI
    e1a2:	f383 8812 	msr	BASEPRI_MAX, r3
    e1a6:	f3bf 8f6f 	isb	sy
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e1aa:	2200      	movs	r2, #0
	return list->head;
    e1ac:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e1ae:	b15b      	cbz	r3, e1c8 <nrf_modem_os_timedwait+0xe0>
    e1b0:	4543      	cmp	r3, r8
    e1b2:	d154      	bne.n	e25e <nrf_modem_os_timedwait+0x176>
	return node->next;
    e1b4:	9900      	ldr	r1, [sp, #0]
Z_GENLIST_REMOVE(slist, snode)
    e1b6:	2a00      	cmp	r2, #0
    e1b8:	d14b      	bne.n	e252 <nrf_modem_os_timedwait+0x16a>
    e1ba:	686a      	ldr	r2, [r5, #4]
	list->head = node;
    e1bc:	6029      	str	r1, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
    e1be:	429a      	cmp	r2, r3
    e1c0:	d100      	bne.n	e1c4 <nrf_modem_os_timedwait+0xdc>
	list->tail = node;
    e1c2:	6069      	str	r1, [r5, #4]
	parent->next = child;
    e1c4:	2300      	movs	r3, #0
    e1c6:	9300      	str	r3, [sp, #0]
	return z_impl_z_current_get();
    e1c8:	f006 fea2 	bl	14f10 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    e1cc:	f7ff ff58 	bl	e080 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
    e1d0:	f8d9 3000 	ldr.w	r3, [r9]
    e1d4:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
    e1d6:	f38a 8811 	msr	BASEPRI, sl
    e1da:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
    e1de:	f00b fe04 	bl	19dea <nrf_modem_is_initialized>
    e1e2:	2800      	cmp	r0, #0
    e1e4:	d088      	beq.n	e0f8 <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
    e1e6:	6835      	ldr	r5, [r6, #0]
    e1e8:	1c6b      	adds	r3, r5, #1
    e1ea:	d027      	beq.n	e23c <nrf_modem_os_timedwait+0x154>
	return z_impl_k_uptime_ticks();
    e1ec:	f00c f8ac 	bl	1a348 <z_impl_k_uptime_ticks>
    e1f0:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
    e1f4:	fba0 320e 	umull	r3, r2, r0, lr
    e1f8:	fb0e 2101 	mla	r1, lr, r1, r2
    e1fc:	fba4 420e 	umull	r4, r2, r4, lr
    e200:	fb0e 2207 	mla	r2, lr, r7, r2
    e204:	0bdb      	lsrs	r3, r3, #15
    e206:	0be4      	lsrs	r4, r4, #15
    e208:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    e20c:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
	delta = uptime - *reftime;
    e210:	1b1b      	subs	r3, r3, r4
    e212:	ea4f 31d1 	mov.w	r1, r1, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
    e216:	ea4f 7ce5 	mov.w	ip, r5, asr #31
    e21a:	eb61 31d2 	sbc.w	r1, r1, r2, lsr #15
    e21e:	1aed      	subs	r5, r5, r3
    e220:	eb6c 0c01 	sbc.w	ip, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
    e224:	f1bc 0f00 	cmp.w	ip, #0
    e228:	bfb8      	it	lt
    e22a:	2500      	movlt	r5, #0
    e22c:	6035      	str	r5, [r6, #0]
	if (*timeout == 0) {
    e22e:	b92d      	cbnz	r5, e23c <nrf_modem_os_timedwait+0x154>
    e230:	e770      	b.n	e114 <nrf_modem_os_timedwait+0x2c>
	entry->cnt = rpc_event_cnt;
    e232:	6043      	str	r3, [r0, #4]
    e234:	f38a 8811 	msr	BASEPRI, sl
    e238:	f3bf 8f6f 	isb	sy
		return 0;
    e23c:	2000      	movs	r0, #0
    e23e:	e75d      	b.n	e0fc <nrf_modem_os_timedwait+0x14>
    e240:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
    e244:	f8c5 8004 	str.w	r8, [r5, #4]
    e248:	e78d      	b.n	e166 <nrf_modem_os_timedwait+0x7e>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
    e24a:	f04f 32ff 	mov.w	r2, #4294967295
    e24e:	4613      	mov	r3, r2
    e250:	e7a0      	b.n	e194 <nrf_modem_os_timedwait+0xac>
	parent->next = child;
    e252:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    e254:	6869      	ldr	r1, [r5, #4]
    e256:	4299      	cmp	r1, r3
	list->tail = node;
    e258:	bf08      	it	eq
    e25a:	606a      	streq	r2, [r5, #4]
}
    e25c:	e7b2      	b.n	e1c4 <nrf_modem_os_timedwait+0xdc>
	return node->next;
    e25e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e260:	681b      	ldr	r3, [r3, #0]
    e262:	e7a4      	b.n	e1ae <nrf_modem_os_timedwait+0xc6>
    e264:	2000d198 	.word	0x2000d198
    e268:	2000d194 	.word	0x2000d194

0000e26c <nrf_modem_os_sem_init>:
{
    e26c:	b470      	push	{r4, r5, r6}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
    e26e:	6804      	ldr	r4, [r0, #0]
    e270:	4b0a      	ldr	r3, [pc, #40]	; (e29c <nrf_modem_os_sem_init+0x30>)
    e272:	b12c      	cbz	r4, e280 <nrf_modem_os_sem_init+0x14>
    e274:	429c      	cmp	r4, r3
    e276:	d303      	bcc.n	e280 <nrf_modem_os_sem_init+0x14>
    e278:	f103 05a8 	add.w	r5, r3, #168	; 0xa8
    e27c:	42ac      	cmp	r4, r5
    e27e:	d308      	bcc.n	e292 <nrf_modem_os_sem_init+0x26>
	*sem = &nrf_modem_os_sems[used++];
    e280:	4d07      	ldr	r5, [pc, #28]	; (e2a0 <nrf_modem_os_sem_init+0x34>)
    e282:	782c      	ldrb	r4, [r5, #0]
    e284:	1c66      	adds	r6, r4, #1
    e286:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e28a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    e28e:	702e      	strb	r6, [r5, #0]
    e290:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
    e292:	6800      	ldr	r0, [r0, #0]
}
    e294:	bc70      	pop	{r4, r5, r6}
	return z_impl_k_sem_init(sem, initial_count, limit);
    e296:	f00b bee7 	b.w	1a068 <z_impl_k_sem_init>
    e29a:	bf00      	nop
    e29c:	2000d0ec 	.word	0x2000d0ec
    e2a0:	2000d766 	.word	0x2000d766

0000e2a4 <nrf_modem_os_event_notify>:
{
    e2a4:	b538      	push	{r3, r4, r5, lr}
    e2a6:	4605      	mov	r5, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    e2a8:	4b0a      	ldr	r3, [pc, #40]	; (e2d4 <nrf_modem_os_event_notify+0x30>)
    e2aa:	e8d3 1fef 	ldaex	r1, [r3]
    e2ae:	3101      	adds	r1, #1
    e2b0:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e2b4:	2a00      	cmp	r2, #0
    e2b6:	d1f8      	bne.n	e2aa <nrf_modem_os_event_notify+0x6>
	return list->head;
    e2b8:	4b07      	ldr	r3, [pc, #28]	; (e2d8 <nrf_modem_os_event_notify+0x34>)
    e2ba:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    e2bc:	b904      	cbnz	r4, e2c0 <nrf_modem_os_event_notify+0x1c>
}
    e2be:	bd38      	pop	{r3, r4, r5, pc}
		if ((thread->context == context) || (context == 0)) {
    e2c0:	69e3      	ldr	r3, [r4, #28]
    e2c2:	42ab      	cmp	r3, r5
    e2c4:	d000      	beq.n	e2c8 <nrf_modem_os_event_notify+0x24>
    e2c6:	b915      	cbnz	r5, e2ce <nrf_modem_os_event_notify+0x2a>
	z_impl_k_sem_give(sem);
    e2c8:	1d20      	adds	r0, r4, #4
    e2ca:	f006 fa5f 	bl	1478c <z_impl_k_sem_give>
	return node->next;
    e2ce:	6824      	ldr	r4, [r4, #0]
    e2d0:	e7f4      	b.n	e2bc <nrf_modem_os_event_notify+0x18>
    e2d2:	bf00      	nop
    e2d4:	2000d194 	.word	0x2000d194
    e2d8:	2000d198 	.word	0x2000d198

0000e2dc <nrf_modem_os_alloc>:
{
    e2dc:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
    e2de:	2200      	movs	r2, #0
    e2e0:	2300      	movs	r3, #0
    e2e2:	4801      	ldr	r0, [pc, #4]	; (e2e8 <nrf_modem_os_alloc+0xc>)
    e2e4:	f00b bdf9 	b.w	19eda <k_heap_alloc>
    e2e8:	2000d1f0 	.word	0x2000d1f0

0000e2ec <nrf_modem_os_free>:
{
    e2ec:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_heap, mem);
    e2ee:	4801      	ldr	r0, [pc, #4]	; (e2f4 <nrf_modem_os_free+0x8>)
    e2f0:	f00b bdfd 	b.w	19eee <k_heap_free>
    e2f4:	2000d1f0 	.word	0x2000d1f0

0000e2f8 <nrf_modem_os_shm_tx_alloc>:
{
    e2f8:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
    e2fa:	2200      	movs	r2, #0
    e2fc:	2300      	movs	r3, #0
    e2fe:	4801      	ldr	r0, [pc, #4]	; (e304 <nrf_modem_os_shm_tx_alloc+0xc>)
    e300:	f00b bdeb 	b.w	19eda <k_heap_alloc>
    e304:	2000d204 	.word	0x2000d204

0000e308 <nrf_modem_os_shm_tx_free>:
{
    e308:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
    e30a:	4801      	ldr	r0, [pc, #4]	; (e310 <nrf_modem_os_shm_tx_free+0x8>)
    e30c:	f00b bdef 	b.w	19eee <k_heap_free>
    e310:	2000d204 	.word	0x2000d204

0000e314 <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
    e314:	b508      	push	{r3, lr}
	/* Initialize heaps */
	k_heap_init(&nrf_modem_lib_heap, library_heap_buf, sizeof(library_heap_buf));
    e316:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e31a:	4906      	ldr	r1, [pc, #24]	; (e334 <nrf_modem_os_init+0x20>)
    e31c:	4806      	ldr	r0, [pc, #24]	; (e338 <nrf_modem_os_init+0x24>)
    e31e:	f00b fd86 	bl	19e2e <k_heap_init>
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
		    CONFIG_NRF_MODEM_LIB_SHMEM_TX_SIZE);
}
    e322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
    e326:	f44f 5202 	mov.w	r2, #8320	; 0x2080
    e32a:	4904      	ldr	r1, [pc, #16]	; (e33c <nrf_modem_os_init+0x28>)
    e32c:	4804      	ldr	r0, [pc, #16]	; (e340 <nrf_modem_os_init+0x2c>)
    e32e:	f00b bd7e 	b.w	19e2e <k_heap_init>
    e332:	bf00      	nop
    e334:	2000d767 	.word	0x2000d767
    e338:	2000d1f0 	.word	0x2000d1f0
    e33c:	200084e8 	.word	0x200084e8
    e340:	2000d204 	.word	0x2000d204

0000e344 <nrf_modem_os_shutdown>:

void nrf_modem_os_shutdown(void)
{
    e344:	b510      	push	{r4, lr}
	return list->head;
    e346:	4b04      	ldr	r3, [pc, #16]	; (e358 <nrf_modem_os_shutdown+0x14>)
    e348:	681c      	ldr	r4, [r3, #0]
	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    e34a:	b904      	cbnz	r4, e34e <nrf_modem_os_shutdown+0xa>
		k_sem_give(&thread->sem);
	}
}
    e34c:	bd10      	pop	{r4, pc}
    e34e:	1d20      	adds	r0, r4, #4
    e350:	f006 fa1c 	bl	1478c <z_impl_k_sem_give>
	return node->next;
    e354:	6824      	ldr	r4, [r4, #0]
    e356:	e7f8      	b.n	e34a <nrf_modem_os_shutdown+0x6>
    e358:	2000d198 	.word	0x2000d198

0000e35c <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
    e35c:	2801      	cmp	r0, #1
    e35e:	d01e      	beq.n	e39e <z_to_nrf_optname+0x42>
    e360:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
    e364:	d123      	bne.n	e3ae <z_to_nrf_optname+0x52>
	case SOL_TLS:
		switch (z_in_optname) {
    e366:	1e4b      	subs	r3, r1, #1
    e368:	2b14      	cmp	r3, #20
    e36a:	d820      	bhi.n	e3ae <z_to_nrf_optname+0x52>
    e36c:	e8df f003 	tbb	[pc, r3]
    e370:	0c0c0c0c 	.word	0x0c0c0c0c
    e374:	1f1f0c0c 	.word	0x1f1f0c0c
    e378:	0c1f1f1f 	.word	0x0c1f1f1f
    e37c:	1f1f0c0c 	.word	0x1f1f0c0c
    e380:	13110f0b 	.word	0x13110f0b
    e384:	15          	.byte	0x15
    e385:	00          	.byte	0x00
		case TLS_CIPHERSUITE_USED:
			*nrf_out_optname = NRF_SO_SEC_CIPHERSUITE_USED;
			break;
		case TLS_DTLS_CID:
			*nrf_out_optname = NRF_SO_SEC_DTLS_CID;
			break;
    e386:	210f      	movs	r1, #15
	int retval = 0;
    e388:	2000      	movs	r0, #0
		switch (z_in_optname) {
		case SO_ERROR:
			*nrf_out_optname = NRF_SO_ERROR;
			break;
		case SO_RCVTIMEO:
			*nrf_out_optname = NRF_SO_RCVTIMEO;
    e38a:	6011      	str	r1, [r2, #0]
    e38c:	4770      	bx	lr
			break;
    e38e:	2110      	movs	r1, #16
    e390:	e7fa      	b.n	e388 <z_to_nrf_optname+0x2c>
			break;
    e392:	2111      	movs	r1, #17
    e394:	e7f8      	b.n	e388 <z_to_nrf_optname+0x2c>
			break;
    e396:	2112      	movs	r1, #18
    e398:	e7f6      	b.n	e388 <z_to_nrf_optname+0x2c>
			break;
    e39a:	2113      	movs	r1, #19
    e39c:	e7f4      	b.n	e388 <z_to_nrf_optname+0x2c>
		switch (z_in_optname) {
    e39e:	2937      	cmp	r1, #55	; 0x37
    e3a0:	dc05      	bgt.n	e3ae <z_to_nrf_optname+0x52>
    e3a2:	2913      	cmp	r1, #19
    e3a4:	dc06      	bgt.n	e3b4 <z_to_nrf_optname+0x58>
    e3a6:	2902      	cmp	r1, #2
    e3a8:	d0ee      	beq.n	e388 <z_to_nrf_optname+0x2c>
    e3aa:	2904      	cmp	r1, #4
    e3ac:	d0ec      	beq.n	e388 <z_to_nrf_optname+0x2c>
    e3ae:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
    e3b2:	4770      	bx	lr
    e3b4:	f1a1 0314 	sub.w	r3, r1, #20
    e3b8:	2b23      	cmp	r3, #35	; 0x23
    e3ba:	d8f8      	bhi.n	e3ae <z_to_nrf_optname+0x52>
    e3bc:	a001      	add	r0, pc, #4	; (adr r0, e3c4 <z_to_nrf_optname+0x68>)
    e3be:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    e3c2:	bf00      	nop
    e3c4:	0000e389 	.word	0x0000e389
    e3c8:	0000e389 	.word	0x0000e389
    e3cc:	0000e3af 	.word	0x0000e3af
    e3d0:	0000e3af 	.word	0x0000e3af
    e3d4:	0000e3af 	.word	0x0000e3af
    e3d8:	0000e389 	.word	0x0000e389
    e3dc:	0000e3af 	.word	0x0000e3af
    e3e0:	0000e3af 	.word	0x0000e3af
    e3e4:	0000e3af 	.word	0x0000e3af
    e3e8:	0000e3af 	.word	0x0000e3af
    e3ec:	0000e389 	.word	0x0000e389
    e3f0:	0000e389 	.word	0x0000e389
    e3f4:	0000e389 	.word	0x0000e389
    e3f8:	0000e3af 	.word	0x0000e3af
    e3fc:	0000e3af 	.word	0x0000e3af
    e400:	0000e3af 	.word	0x0000e3af
    e404:	0000e3af 	.word	0x0000e3af
    e408:	0000e3af 	.word	0x0000e3af
    e40c:	0000e3af 	.word	0x0000e3af
    e410:	0000e3af 	.word	0x0000e3af
    e414:	0000e3af 	.word	0x0000e3af
    e418:	0000e3af 	.word	0x0000e3af
    e41c:	0000e3af 	.word	0x0000e3af
    e420:	0000e3af 	.word	0x0000e3af
    e424:	0000e3af 	.word	0x0000e3af
    e428:	0000e3af 	.word	0x0000e3af
    e42c:	0000e3af 	.word	0x0000e3af
    e430:	0000e3af 	.word	0x0000e3af
    e434:	0000e3af 	.word	0x0000e3af
    e438:	0000e3af 	.word	0x0000e3af
    e43c:	0000e389 	.word	0x0000e389
    e440:	0000e389 	.word	0x0000e389
    e444:	0000e389 	.word	0x0000e389
    e448:	0000e389 	.word	0x0000e389
    e44c:	0000e389 	.word	0x0000e389
    e450:	0000e389 	.word	0x0000e389

0000e454 <nrf91_socket_offload_init>:
static int nrf91_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
    e454:	f04f 32ff 	mov.w	r2, #4294967295
    e458:	4b06      	ldr	r3, [pc, #24]	; (e474 <nrf91_socket_offload_init+0x20>)
	}

	return 0;
}
    e45a:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
    e45c:	601a      	str	r2, [r3, #0]
    e45e:	619a      	str	r2, [r3, #24]
    e460:	631a      	str	r2, [r3, #48]	; 0x30
    e462:	649a      	str	r2, [r3, #72]	; 0x48
    e464:	661a      	str	r2, [r3, #96]	; 0x60
    e466:	679a      	str	r2, [r3, #120]	; 0x78
    e468:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    e46c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
    e470:	4770      	bx	lr
    e472:	bf00      	nop
    e474:	2000d21c 	.word	0x2000d21c

0000e478 <nrf91_socket_is_supported>:
	if (offload_disabled) {
    e478:	490b      	ldr	r1, [pc, #44]	; (e4a8 <nrf91_socket_is_supported+0x30>)
{
    e47a:	4603      	mov	r3, r0
	if (offload_disabled) {
    e47c:	7808      	ldrb	r0, [r1, #0]
    e47e:	b980      	cbnz	r0, e4a2 <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
    e480:	490a      	ldr	r1, [pc, #40]	; (e4ac <nrf91_socket_is_supported+0x34>)
    e482:	7809      	ldrb	r1, [r1, #0]
    e484:	b139      	cbz	r1, e496 <nrf91_socket_is_supported+0x1e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
    e486:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
    e48a:	2902      	cmp	r1, #2
    e48c:	d90a      	bls.n	e4a4 <nrf91_socket_is_supported+0x2c>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
    e48e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
    e492:	2a01      	cmp	r2, #1
    e494:	d906      	bls.n	e4a4 <nrf91_socket_is_supported+0x2c>
	return (family == AF_PACKET) || (family == AF_INET) || (family == AF_INET6);
    e496:	3b01      	subs	r3, #1
    e498:	2b02      	cmp	r3, #2
    e49a:	bf8c      	ite	hi
    e49c:	2000      	movhi	r0, #0
    e49e:	2001      	movls	r0, #1
	return af_is_supported(family);
    e4a0:	4770      	bx	lr
		return false;
    e4a2:	2000      	movs	r0, #0
}
    e4a4:	4770      	bx	lr
    e4a6:	bf00      	nop
    e4a8:	2000dbe8 	.word	0x2000dbe8
    e4ac:	2000dbe7 	.word	0x2000dbe7

0000e4b0 <pollcb>:
{
    e4b0:	b470      	push	{r4, r5, r6}
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
    e4b2:	2300      	movs	r3, #0
    e4b4:	2518      	movs	r5, #24
	ctx = find_ctx(pollfd->fd);
    e4b6:	6801      	ldr	r1, [r0, #0]
		if (offload_ctx[i].nrf_fd == fd) {
    e4b8:	4c08      	ldr	r4, [pc, #32]	; (e4dc <pollcb+0x2c>)
    e4ba:	fb05 f203 	mul.w	r2, r5, r3
    e4be:	58a6      	ldr	r6, [r4, r2]
    e4c0:	42b1      	cmp	r1, r6
    e4c2:	d106      	bne.n	e4d2 <pollcb+0x22>
	k_poll_signal_raise(&ctx->poll, pollfd->revents);
    e4c4:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
    e4c8:	3208      	adds	r2, #8
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    e4ca:	18a0      	adds	r0, r4, r2
}
    e4cc:	bc70      	pop	{r4, r5, r6}
    e4ce:	f006 bf4d 	b.w	1536c <z_impl_k_poll_signal_raise>
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
    e4d2:	3301      	adds	r3, #1
    e4d4:	2b08      	cmp	r3, #8
    e4d6:	d1f0      	bne.n	e4ba <pollcb+0xa>
}
    e4d8:	bc70      	pop	{r4, r5, r6}
    e4da:	4770      	bx	lr
    e4dc:	2000d21c 	.word	0x2000d21c

0000e4e0 <nrf91_socket_offload_getaddrinfo>:
{
    e4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4e4:	4614      	mov	r4, r2
    e4e6:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
    e4e8:	2100      	movs	r1, #0
{
    e4ea:	b08b      	sub	sp, #44	; 0x2c
    e4ec:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
    e4ee:	2220      	movs	r2, #32
    e4f0:	a802      	add	r0, sp, #8
{
    e4f2:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
    e4f4:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
    e4f6:	f00c f902 	bl	1a6fe <memset>
	if (hints != NULL) {
    e4fa:	b15c      	cbz	r4, e514 <nrf91_socket_offload_getaddrinfo+0x34>
	nrf_out->ai_flags = z_in->ai_flags;
    e4fc:	6863      	ldr	r3, [r4, #4]
    e4fe:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_in->ai_socktype;
    e500:	68e3      	ldr	r3, [r4, #12]
    e502:	9304      	str	r3, [sp, #16]
	nrf_out->ai_family = z_in->ai_family;
    e504:	68a3      	ldr	r3, [r4, #8]
    e506:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_in->ai_protocol;
    e508:	6923      	ldr	r3, [r4, #16]
    e50a:	9305      	str	r3, [sp, #20]
	if (z_in->ai_canonname != NULL) {
    e50c:	69e3      	ldr	r3, [r4, #28]
    e50e:	b103      	cbz	r3, e512 <nrf91_socket_offload_getaddrinfo+0x32>
		nrf_out->ai_canonname = z_in->ai_canonname;
    e510:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
    e512:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
    e514:	f04f 32ff 	mov.w	r2, #4294967295
    e518:	f04f 33ff 	mov.w	r3, #4294967295
    e51c:	4834      	ldr	r0, [pc, #208]	; (e5f0 <nrf91_socket_offload_getaddrinfo+0x110>)
    e51e:	f00a fb00 	bl	18b22 <k_mutex_lock.constprop.0.isra.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
    e522:	4631      	mov	r1, r6
    e524:	4622      	mov	r2, r4
    e526:	4628      	mov	r0, r5
    e528:	ab01      	add	r3, sp, #4
    e52a:	f004 f8e5 	bl	126f8 <nrf_getaddrinfo>
	if (retval != 0) {
    e52e:	4606      	mov	r6, r0
    e530:	b948      	cbnz	r0, e546 <nrf91_socket_offload_getaddrinfo+0x66>
	struct zsock_addrinfo *latest_z_res = NULL;
    e532:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
    e534:	4681      	mov	r9, r0
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
    e536:	f04f 0a18 	mov.w	sl, #24
	struct nrf_addrinfo *next_nrf_res = nrf_res;
    e53a:	9d01      	ldr	r5, [sp, #4]
	*res = NULL;
    e53c:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
    e53e:	b94d      	cbnz	r5, e554 <nrf91_socket_offload_getaddrinfo+0x74>
	nrf_freeaddrinfo(nrf_res);
    e540:	9801      	ldr	r0, [sp, #4]
    e542:	f00a ffb1 	bl	194a8 <nrf_freeaddrinfo>
	k_mutex_unlock(&getaddrinfo_lock);
    e546:	482a      	ldr	r0, [pc, #168]	; (e5f0 <nrf91_socket_offload_getaddrinfo+0x110>)
    e548:	f00a faed 	bl	18b26 <k_mutex_unlock.isra.0>
}
    e54c:	4630      	mov	r0, r6
    e54e:	b00b      	add	sp, #44	; 0x2c
    e550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					k_malloc(sizeof(struct zsock_addrinfo));
    e554:	2050      	movs	r0, #80	; 0x50
    e556:	f00c f891 	bl	1a67c <k_malloc>
		if (next_z_res == NULL) {
    e55a:	4604      	mov	r4, r0
    e55c:	2800      	cmp	r0, #0
    e55e:	d040      	beq.n	e5e2 <nrf91_socket_offload_getaddrinfo+0x102>
	z_out->ai_next = NULL;
    e560:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
    e564:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_in->ai_flags;
    e568:	682b      	ldr	r3, [r5, #0]
    e56a:	6043      	str	r3, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
    e56c:	68ab      	ldr	r3, [r5, #8]
    e56e:	60c3      	str	r3, [r0, #12]
	z_out->ai_family = nrf_in->ai_family;
    e570:	686b      	ldr	r3, [r5, #4]
    e572:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_in->ai_protocol;
    e574:	68eb      	ldr	r3, [r5, #12]
    e576:	6103      	str	r3, [r0, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
    e578:	f8d5 b004 	ldr.w	fp, [r5, #4]
    e57c:	f1bb 0f01 	cmp.w	fp, #1
    e580:	d114      	bne.n	e5ac <nrf91_socket_offload_getaddrinfo+0xcc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
    e582:	2008      	movs	r0, #8
    e584:	f00c f87a 	bl	1a67c <k_malloc>
    e588:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
    e58a:	b338      	cbz	r0, e5dc <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
    e58c:	2308      	movs	r3, #8
    e58e:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
    e590:	696b      	ldr	r3, [r5, #20]
	ptr->sin_port = nrf_in->sin_port;
    e592:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_family = AF_INET;
    e594:	f8a0 b000 	strh.w	fp, [r0]
	ptr->sin_port = nrf_in->sin_port;
    e598:	8042      	strh	r2, [r0, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
    e59a:	68db      	ldr	r3, [r3, #12]
    e59c:	6043      	str	r3, [r0, #4]
		if (latest_z_res == NULL) {
    e59e:	f1b8 0f00 	cmp.w	r8, #0
    e5a2:	d121      	bne.n	e5e8 <nrf91_socket_offload_getaddrinfo+0x108>
			*res = next_z_res;
    e5a4:	603c      	str	r4, [r7, #0]
					k_malloc(sizeof(struct zsock_addrinfo));
    e5a6:	46a0      	mov	r8, r4
		next_nrf_res = next_nrf_res->ai_next;
    e5a8:	69ed      	ldr	r5, [r5, #28]
    e5aa:	e7c8      	b.n	e53e <nrf91_socket_offload_getaddrinfo+0x5e>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
    e5ac:	f1bb 0f02 	cmp.w	fp, #2
    e5b0:	d009      	beq.n	e5c6 <nrf91_socket_offload_getaddrinfo+0xe6>
			k_free(next_z_res);
    e5b2:	f00c f85c 	bl	1a66e <k_free>
			retval = DNS_EAI_FAMILY;
    e5b6:	f06f 0605 	mvn.w	r6, #5
		nrf91_socket_offload_freeaddrinfo(*res);
    e5ba:	6838      	ldr	r0, [r7, #0]
    e5bc:	f00a f9e6 	bl	1898c <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
    e5c0:	2300      	movs	r3, #0
    e5c2:	603b      	str	r3, [r7, #0]
    e5c4:	e7bc      	b.n	e540 <nrf91_socket_offload_getaddrinfo+0x60>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
    e5c6:	2018      	movs	r0, #24
    e5c8:	f00c f858 	bl	1a67c <k_malloc>
    e5cc:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
    e5ce:	b128      	cbz	r0, e5dc <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
    e5d0:	f8c4 a014 	str.w	sl, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
    e5d4:	6969      	ldr	r1, [r5, #20]
    e5d6:	f00a f9e6 	bl	189a6 <nrf_to_z_ipv6>
		if (err == -ENOMEM) {
    e5da:	e7e0      	b.n	e59e <nrf91_socket_offload_getaddrinfo+0xbe>
			k_free(next_z_res);
    e5dc:	4620      	mov	r0, r4
    e5de:	f00c f846 	bl	1a66e <k_free>
					k_malloc(sizeof(struct zsock_addrinfo));
    e5e2:	f06f 0609 	mvn.w	r6, #9
    e5e6:	e7e8      	b.n	e5ba <nrf91_socket_offload_getaddrinfo+0xda>
			latest_z_res->ai_next = next_z_res;
    e5e8:	f8c8 4000 	str.w	r4, [r8]
    e5ec:	e7db      	b.n	e5a6 <nrf91_socket_offload_getaddrinfo+0xc6>
    e5ee:	bf00      	nop
    e5f0:	2000c9b0 	.word	0x2000c9b0

0000e5f4 <nrf91_socket_offload_sendmsg>:
{
    e5f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    e5f8:	4607      	mov	r7, r0
    e5fa:	4690      	mov	r8, r2
	if (msg == NULL) {
    e5fc:	460c      	mov	r4, r1
    e5fe:	b379      	cbz	r1, e660 <nrf91_socket_offload_sendmsg+0x6c>
	for (i = 0; i < msg->msg_iovlen; i++) {
    e600:	2300      	movs	r3, #0
	ssize_t len = 0;
    e602:	461a      	mov	r2, r3
    e604:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
    e606:	4283      	cmp	r3, r0
    e608:	d134      	bne.n	e674 <nrf91_socket_offload_sendmsg+0x80>
	if (len <= sizeof(buf)) {
    e60a:	2a80      	cmp	r2, #128	; 0x80
    e60c:	d871      	bhi.n	e6f2 <nrf91_socket_offload_sendmsg+0xfe>
		for (i = 0; i < msg->msg_iovlen; i++) {
    e60e:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
    e610:	f04f 32ff 	mov.w	r2, #4294967295
    e614:	f04f 33ff 	mov.w	r3, #4294967295
    e618:	4838      	ldr	r0, [pc, #224]	; (e6fc <nrf91_socket_offload_sendmsg+0x108>)
    e61a:	f00a fa82 	bl	18b22 <k_mutex_lock.constprop.0.isra.0>
		len = 0;
    e61e:	46a9      	mov	r9, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
    e620:	4e37      	ldr	r6, [pc, #220]	; (e700 <nrf91_socket_offload_sendmsg+0x10c>)
		for (i = 0; i < msg->msg_iovlen; i++) {
    e622:	68e3      	ldr	r3, [r4, #12]
    e624:	429d      	cmp	r5, r3
    e626:	d32c      	bcc.n	e682 <nrf91_socket_offload_sendmsg+0x8e>
		offset = 0;
    e628:	2600      	movs	r6, #0
		ret = 0;
    e62a:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
    e62c:	f8df a0d0 	ldr.w	sl, [pc, #208]	; e700 <nrf91_socket_offload_sendmsg+0x10c>
		while ((offset < len) && (ret >= 0)) {
    e630:	45b1      	cmp	r9, r6
    e632:	dd11      	ble.n	e658 <nrf91_socket_offload_sendmsg+0x64>
    e634:	b985      	cbnz	r5, e658 <nrf91_socket_offload_sendmsg+0x64>
			ret = nrf91_socket_offload_sendto(obj,
    e636:	6863      	ldr	r3, [r4, #4]
    e638:	4638      	mov	r0, r7
    e63a:	9301      	str	r3, [sp, #4]
    e63c:	6823      	ldr	r3, [r4, #0]
    e63e:	eba9 0206 	sub.w	r2, r9, r6
    e642:	9300      	str	r3, [sp, #0]
    e644:	eb0a 0106 	add.w	r1, sl, r6
    e648:	4643      	mov	r3, r8
    e64a:	f00a f9d9 	bl	18a00 <nrf91_socket_offload_sendto>
			if (ret > 0) {
    e64e:	1e05      	subs	r5, r0, #0
    e650:	ddee      	ble.n	e630 <nrf91_socket_offload_sendmsg+0x3c>
				offset += ret;
    e652:	442e      	add	r6, r5
		while ((offset < len) && (ret >= 0)) {
    e654:	45b1      	cmp	r9, r6
    e656:	dcee      	bgt.n	e636 <nrf91_socket_offload_sendmsg+0x42>
		k_mutex_unlock(&sendmsg_lock);
    e658:	4828      	ldr	r0, [pc, #160]	; (e6fc <nrf91_socket_offload_sendmsg+0x108>)
    e65a:	f00a fa64 	bl	18b26 <k_mutex_unlock.isra.0>
		return ret;
    e65e:	e005      	b.n	e66c <nrf91_socket_offload_sendmsg+0x78>
		errno = EINVAL;
    e660:	f009 fcc8 	bl	17ff4 <__errno>
    e664:	2316      	movs	r3, #22
		return -1;
    e666:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
    e66a:	6003      	str	r3, [r0, #0]
}
    e66c:	4628      	mov	r0, r5
    e66e:	b002      	add	sp, #8
    e670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
    e674:	68a1      	ldr	r1, [r4, #8]
    e676:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    e67a:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
    e67c:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
    e67e:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
    e680:	e7c1      	b.n	e606 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
    e682:	68a3      	ldr	r3, [r4, #8]
    e684:	eb06 0009 	add.w	r0, r6, r9
    e688:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
    e68c:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
    e690:	6852      	ldr	r2, [r2, #4]
    e692:	f00c f827 	bl	1a6e4 <memcpy>
			len += msg->msg_iov[i].iov_len;
    e696:	68a3      	ldr	r3, [r4, #8]
    e698:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
    e69c:	4453      	add	r3, sl
    e69e:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
    e6a0:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
    e6a2:	4499      	add	r9, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
    e6a4:	e7bd      	b.n	e622 <nrf91_socket_offload_sendmsg+0x2e>
		if (msg->msg_iov[i].iov_len == 0) {
    e6a6:	68a3      	ldr	r3, [r4, #8]
    e6a8:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
    e6ac:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    e6b0:	685b      	ldr	r3, [r3, #4]
    e6b2:	b13b      	cbz	r3, e6c4 <nrf91_socket_offload_sendmsg+0xd0>
		offset = 0;
    e6b4:	f04f 0900 	mov.w	r9, #0
		while (offset < msg->msg_iov[i].iov_len) {
    e6b8:	68a3      	ldr	r3, [r4, #8]
    e6ba:	eb03 020a 	add.w	r2, r3, sl
    e6be:	6852      	ldr	r2, [r2, #4]
    e6c0:	4591      	cmp	r9, r2
    e6c2:	d304      	bcc.n	e6ce <nrf91_socket_offload_sendmsg+0xda>
	for (i = 0; i < msg->msg_iovlen; i++) {
    e6c4:	3601      	adds	r6, #1
    e6c6:	68e3      	ldr	r3, [r4, #12]
    e6c8:	429e      	cmp	r6, r3
    e6ca:	d3ec      	bcc.n	e6a6 <nrf91_socket_offload_sendmsg+0xb2>
    e6cc:	e7ce      	b.n	e66c <nrf91_socket_offload_sendmsg+0x78>
			ret = nrf91_socket_offload_sendto(obj,
    e6ce:	f853 100a 	ldr.w	r1, [r3, sl]
    e6d2:	6863      	ldr	r3, [r4, #4]
    e6d4:	4449      	add	r1, r9
    e6d6:	9301      	str	r3, [sp, #4]
    e6d8:	6823      	ldr	r3, [r4, #0]
    e6da:	4638      	mov	r0, r7
    e6dc:	9300      	str	r3, [sp, #0]
    e6de:	eba2 0209 	sub.w	r2, r2, r9
    e6e2:	4643      	mov	r3, r8
    e6e4:	f00a f98c 	bl	18a00 <nrf91_socket_offload_sendto>
			if (ret < 0) {
    e6e8:	1e01      	subs	r1, r0, #0
    e6ea:	db05      	blt.n	e6f8 <nrf91_socket_offload_sendmsg+0x104>
			offset += ret;
    e6ec:	4489      	add	r9, r1
			len += ret;
    e6ee:	440d      	add	r5, r1
    e6f0:	e7e2      	b.n	e6b8 <nrf91_socket_offload_sendmsg+0xc4>
	for (i = 0; i < msg->msg_iovlen; i++) {
    e6f2:	2600      	movs	r6, #0
	len = 0;
    e6f4:	4635      	mov	r5, r6
    e6f6:	e7e6      	b.n	e6c6 <nrf91_socket_offload_sendmsg+0xd2>
			ret = nrf91_socket_offload_sendto(obj,
    e6f8:	460d      	mov	r5, r1
    e6fa:	e7b7      	b.n	e66c <nrf91_socket_offload_sendmsg+0x78>
    e6fc:	2000c9ec 	.word	0x2000c9ec
    e700:	2000db67 	.word	0x2000db67

0000e704 <allocate_ctx>:
	k_mutex_lock(&ctx_lock, K_FOREVER);
    e704:	f04f 32ff 	mov.w	r2, #4294967295
    e708:	f04f 33ff 	mov.w	r3, #4294967295
{
    e70c:	b570      	push	{r4, r5, r6, lr}
    e70e:	4605      	mov	r5, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
    e710:	480b      	ldr	r0, [pc, #44]	; (e740 <allocate_ctx+0x3c>)
    e712:	f00a fa06 	bl	18b22 <k_mutex_lock.constprop.0.isra.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
    e716:	2300      	movs	r3, #0
    e718:	2018      	movs	r0, #24
		if (offload_ctx[i].nrf_fd == -1) {
    e71a:	4a0a      	ldr	r2, [pc, #40]	; (e744 <allocate_ctx+0x40>)
    e71c:	fb00 f103 	mul.w	r1, r0, r3
    e720:	5856      	ldr	r6, [r2, r1]
    e722:	188c      	adds	r4, r1, r2
    e724:	3601      	adds	r6, #1
    e726:	d105      	bne.n	e734 <allocate_ctx+0x30>
			ctx->nrf_fd = nrf_fd;
    e728:	5055      	str	r5, [r2, r1]
	k_mutex_unlock(&ctx_lock);
    e72a:	4805      	ldr	r0, [pc, #20]	; (e740 <allocate_ctx+0x3c>)
    e72c:	f00a f9fb 	bl	18b26 <k_mutex_unlock.isra.0>
}
    e730:	4620      	mov	r0, r4
    e732:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
    e734:	3301      	adds	r3, #1
    e736:	2b08      	cmp	r3, #8
    e738:	d1f0      	bne.n	e71c <allocate_ctx+0x18>
	struct nrf_sock_ctx *ctx = NULL;
    e73a:	2400      	movs	r4, #0
    e73c:	e7f5      	b.n	e72a <allocate_ctx+0x26>
    e73e:	bf00      	nop
    e740:	2000c988 	.word	0x2000c988
    e744:	2000d21c 	.word	0x2000d21c

0000e748 <release_ctx>:
{
    e748:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
    e74a:	4d09      	ldr	r5, [pc, #36]	; (e770 <release_ctx+0x28>)
{
    e74c:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
    e74e:	f04f 32ff 	mov.w	r2, #4294967295
    e752:	4628      	mov	r0, r5
    e754:	f04f 33ff 	mov.w	r3, #4294967295
    e758:	f00a f9e3 	bl	18b22 <k_mutex_lock.constprop.0.isra.0>
	ctx->lock = NULL;
    e75c:	2300      	movs	r3, #0
    e75e:	f04f 32ff 	mov.w	r2, #4294967295
    e762:	e9c4 2300 	strd	r2, r3, [r4]
	k_mutex_unlock(&ctx_lock);
    e766:	4628      	mov	r0, r5
}
    e768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
    e76c:	f00a b9db 	b.w	18b26 <k_mutex_unlock.isra.0>
    e770:	2000c988 	.word	0x2000c988

0000e774 <nrf91_socket_offload_accept>:
{
    e774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e778:	b08b      	sub	sp, #44	; 0x2c
    e77a:	4607      	mov	r7, r0
    e77c:	460c      	mov	r4, r1
    e77e:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
    e780:	f7fc fdd2 	bl	b328 <z_reserve_fd>
    e784:	4606      	mov	r6, r0
	if (fd < 0) {
    e786:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
    e788:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
    e78a:	db1e      	blt.n	e7ca <nrf91_socket_offload_accept+0x56>
	if ((addr != NULL) && (addrlen != NULL)) {
    e78c:	b304      	cbz	r4, e7d0 <nrf91_socket_offload_accept+0x5c>
    e78e:	b315      	cbz	r5, e7d6 <nrf91_socket_offload_accept+0x62>
		if (*addrlen == sizeof(struct sockaddr_in)) {
    e790:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
    e792:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
    e794:	2b08      	cmp	r3, #8
    e796:	bf14      	ite	ne
    e798:	2324      	movne	r3, #36	; 0x24
    e79a:	2310      	moveq	r3, #16
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
    e79c:	f10d 0904 	add.w	r9, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
    e7a0:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
    e7a2:	4649      	mov	r1, r9
    e7a4:	f00b f800 	bl	197a8 <nrf_accept>
	if (new_sd < 0) {
    e7a8:	f1b0 0800 	subs.w	r8, r0, #0
    e7ac:	db0a      	blt.n	e7c4 <nrf91_socket_offload_accept+0x50>
	ctx = allocate_ctx(new_sd);
    e7ae:	f7ff ffa9 	bl	e704 <allocate_ctx>
	if (ctx == NULL) {
    e7b2:	4607      	mov	r7, r0
    e7b4:	b990      	cbnz	r0, e7dc <nrf91_socket_offload_accept+0x68>
		errno = ENOMEM;
    e7b6:	f009 fc1d 	bl	17ff4 <__errno>
    e7ba:	230c      	movs	r3, #12
    e7bc:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
    e7be:	4640      	mov	r0, r8
    e7c0:	f004 fa40 	bl	12c44 <nrf_close>
	z_free_fd(fd);
    e7c4:	4630      	mov	r0, r6
    e7c6:	f7fc fdff 	bl	b3c8 <z_free_fd>
		return -1;
    e7ca:	f04f 36ff 	mov.w	r6, #4294967295
    e7ce:	e018      	b.n	e802 <nrf91_socket_offload_accept+0x8e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
    e7d0:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
    e7d2:	46a1      	mov	r9, r4
    e7d4:	e7e5      	b.n	e7a2 <nrf91_socket_offload_accept+0x2e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
    e7d6:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
    e7d8:	46a9      	mov	r9, r5
    e7da:	e7e2      	b.n	e7a2 <nrf91_socket_offload_accept+0x2e>
	if ((addr != NULL) && (addrlen != NULL)) {
    e7dc:	b164      	cbz	r4, e7f8 <nrf91_socket_offload_accept+0x84>
    e7de:	b15d      	cbz	r5, e7f8 <nrf91_socket_offload_accept+0x84>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
    e7e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
    e7e4:	2b01      	cmp	r3, #1
    e7e6:	d110      	bne.n	e80a <nrf91_socket_offload_accept+0x96>
			*addrlen = sizeof(struct sockaddr_in);
    e7e8:	2208      	movs	r2, #8
    e7ea:	602a      	str	r2, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
    e7ec:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	ptr->sin_family = AF_INET;
    e7f0:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
    e7f2:	9b04      	ldr	r3, [sp, #16]
	ptr->sin_port = nrf_in->sin_port;
    e7f4:	8062      	strh	r2, [r4, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
    e7f6:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
    e7f8:	4639      	mov	r1, r7
    e7fa:	4630      	mov	r0, r6
    e7fc:	4a0d      	ldr	r2, [pc, #52]	; (e834 <nrf91_socket_offload_accept+0xc0>)
    e7fe:	f7fc fdc9 	bl	b394 <z_finalize_fd>
}
    e802:	4630      	mov	r0, r6
    e804:	b00b      	add	sp, #44	; 0x2c
    e806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
    e80a:	2b02      	cmp	r3, #2
    e80c:	d106      	bne.n	e81c <nrf91_socket_offload_accept+0xa8>
			*addrlen = sizeof(struct sockaddr_in6);
    e80e:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
    e810:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
    e812:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
    e814:	a901      	add	r1, sp, #4
    e816:	f00a f8c6 	bl	189a6 <nrf_to_z_ipv6>
    e81a:	e7ed      	b.n	e7f8 <nrf91_socket_offload_accept+0x84>
			errno = ENOTSUP;
    e81c:	f009 fbea 	bl	17ff4 <__errno>
    e820:	2386      	movs	r3, #134	; 0x86
    e822:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
    e824:	4640      	mov	r0, r8
    e826:	f004 fa0d 	bl	12c44 <nrf_close>
		release_ctx(ctx);
    e82a:	4638      	mov	r0, r7
    e82c:	f7ff ff8c 	bl	e748 <release_ctx>
    e830:	e7c8      	b.n	e7c4 <nrf91_socket_offload_accept+0x50>
    e832:	bf00      	nop
    e834:	0001b9dc 	.word	0x0001b9dc

0000e838 <nrf91_iface_api_init>:
static struct nrf91_iface_data {
	struct net_if *iface;
} nrf91_iface_data;

static void nrf91_iface_api_init(struct net_if *iface)
{
    e838:	b510      	push	{r4, lr}
    e83a:	4604      	mov	r4, r0
	nrf91_iface_data.iface = iface;
    e83c:	4b09      	ldr	r3, [pc, #36]	; (e864 <nrf91_iface_api_init+0x2c>)

	iface->if_dev->socket_offload = nrf91_socket_create;
    e83e:	4a0a      	ldr	r2, [pc, #40]	; (e868 <nrf91_iface_api_init+0x30>)
	nrf91_iface_data.iface = iface;
    e840:	6018      	str	r0, [r3, #0]
	iface->if_dev->socket_offload = nrf91_socket_create;
    e842:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
    e844:	4809      	ldr	r0, [pc, #36]	; (e86c <nrf91_iface_api_init+0x34>)
	iface->if_dev->socket_offload = nrf91_socket_create;
    e846:	61da      	str	r2, [r3, #28]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
    e848:	f7fd fd18 	bl	c27c <socket_offload_dns_register>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e84c:	6823      	ldr	r3, [r4, #0]
    e84e:	330c      	adds	r3, #12
    e850:	e8d3 1fef 	ldaex	r1, [r3]
    e854:	f041 0108 	orr.w	r1, r1, #8
    e858:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e85c:	2a00      	cmp	r2, #0
    e85e:	d1f7      	bne.n	e850 <nrf91_iface_api_init+0x18>

	if (!IS_ENABLED(CONFIG_NRF_MODEM_LIB_NET_IF_AUTO_START)) {
		net_if_flag_set(iface, NET_IF_NO_AUTO_START);
	}
}
    e860:	bd10      	pop	{r4, pc}
    e862:	bf00      	nop
    e864:	2000d218 	.word	0x2000d218
    e868:	0000e97d 	.word	0x0000e97d
    e86c:	0001b9d4 	.word	0x0001b9d4

0000e870 <nrf91_socket_offload_ioctl>:
{
    e870:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (request) {
    e872:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
	int sd = OBJ_TO_SD(obj);
    e876:	6804      	ldr	r4, [r0, #0]
{
    e878:	b087      	sub	sp, #28
	switch (request) {
    e87a:	2b03      	cmp	r3, #3
    e87c:	d857      	bhi.n	e92e <nrf91_socket_offload_ioctl+0xbe>
    e87e:	e8df f003 	tbb	[pc, r3]
    e882:	4002      	.short	0x4002
    e884:	5377      	.short	0x5377
	struct nrf_modem_pollcb pcb = {
    e886:	2701      	movs	r7, #1
		pev_end = va_arg(args, struct k_poll_event *);
    e888:	e9d2 6101 	ldrd	r6, r1, [r2, #4]
		return nrf91_poll_prepare(obj, pfd, pev, pev_end);
    e88c:	6813      	ldr	r3, [r2, #0]
	struct nrf_modem_pollcb pcb = {
    e88e:	4a3a      	ldr	r2, [pc, #232]	; (e978 <nrf91_socket_offload_ioctl+0x108>)
    e890:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    e894:	9204      	str	r2, [sp, #16]
    e896:	f8ad 3014 	strh.w	r3, [sp, #20]
    e89a:	f88d 7016 	strb.w	r7, [sp, #22]
	if (*pev == pev_end) {
    e89e:	6833      	ldr	r3, [r6, #0]
    e8a0:	4299      	cmp	r1, r3
    e8a2:	d104      	bne.n	e8ae <nrf91_socket_offload_ioctl+0x3e>
		errno = ENOMEM;
    e8a4:	f009 fba6 	bl	17ff4 <__errno>
    e8a8:	230c      	movs	r3, #12
		errno = EINVAL;
    e8aa:	6003      	str	r3, [r0, #0]
    e8ac:	e014      	b.n	e8d8 <nrf91_socket_offload_ioctl+0x68>
	k_poll_signal_init(&ctx->poll);
    e8ae:	f100 0508 	add.w	r5, r0, #8
	z_impl_k_poll_signal_init(sig);
    e8b2:	4628      	mov	r0, r5
    e8b4:	f00b febe 	bl	1a634 <z_impl_k_poll_signal_init>
	k_poll_event_init(*pev, K_POLL_TYPE_SIGNAL, K_POLL_MODE_NOTIFY_ONLY, &ctx->poll);
    e8b8:	462b      	mov	r3, r5
    e8ba:	2200      	movs	r2, #0
    e8bc:	4639      	mov	r1, r7
    e8be:	6830      	ldr	r0, [r6, #0]
    e8c0:	f00b fe9b 	bl	1a5fa <k_poll_event_init>
	err = nrf_setsockopt(fd, NRF_SOL_SOCKET, NRF_SO_POLLCB, &pcb, sizeof(pcb));
    e8c4:	2308      	movs	r3, #8
    e8c6:	4620      	mov	r0, r4
    e8c8:	9300      	str	r3, [sp, #0]
    e8ca:	223c      	movs	r2, #60	; 0x3c
    e8cc:	4639      	mov	r1, r7
    e8ce:	ab04      	add	r3, sp, #16
    e8d0:	f004 faf8 	bl	12ec4 <nrf_setsockopt>
	if (err) {
    e8d4:	4604      	mov	r4, r0
    e8d6:	b110      	cbz	r0, e8de <nrf91_socket_offload_ioctl+0x6e>
		retval = -1;
    e8d8:	f04f 34ff 	mov.w	r4, #4294967295
		return nrf91_socket_offload_fcntl(sd, request, args);
    e8dc:	e00e      	b.n	e8fc <nrf91_socket_offload_ioctl+0x8c>
	(*pev)++;
    e8de:	6833      	ldr	r3, [r6, #0]
    e8e0:	3314      	adds	r3, #20
    e8e2:	6033      	str	r3, [r6, #0]
	flags = 0;
    e8e4:	e9cd 0002 	strd	r0, r0, [sp, #8]
	z_impl_k_poll_signal_check(sig, signaled, result);
    e8e8:	4628      	mov	r0, r5
    e8ea:	aa02      	add	r2, sp, #8
    e8ec:	a903      	add	r1, sp, #12
    e8ee:	f00b fea6 	bl	1a63e <z_impl_k_poll_signal_check>
	if (!signaled) {
    e8f2:	9b03      	ldr	r3, [sp, #12]
	return -EALREADY;
    e8f4:	2b00      	cmp	r3, #0
    e8f6:	bf18      	it	ne
    e8f8:	f06f 0477 	mvnne.w	r4, #119	; 0x77
}
    e8fc:	4620      	mov	r0, r4
    e8fe:	b007      	add	sp, #28
    e900:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pev = va_arg(args, struct k_poll_event **);
    e902:	e9d2 4200 	ldrd	r4, r2, [r2]
	(*pev)++;
    e906:	6813      	ldr	r3, [r2, #0]
    e908:	3314      	adds	r3, #20
    e90a:	6013      	str	r3, [r2, #0]
	signaled = 0;
    e90c:	2300      	movs	r3, #0
	flags = 0;
    e90e:	e9cd 3303 	strd	r3, r3, [sp, #12]
    e912:	aa03      	add	r2, sp, #12
    e914:	a904      	add	r1, sp, #16
    e916:	3008      	adds	r0, #8
    e918:	f00b fe91 	bl	1a63e <z_impl_k_poll_signal_check>
	if (!signaled) {
    e91c:	9b04      	ldr	r3, [sp, #16]
    e91e:	b10b      	cbz	r3, e924 <nrf91_socket_offload_ioctl+0xb4>
	pfd->revents = flags;
    e920:	9b03      	ldr	r3, [sp, #12]
    e922:	80e3      	strh	r3, [r4, #6]
		return nrf91_poll_update(obj, pfd, pev);
    e924:	2400      	movs	r4, #0
    e926:	e7e9      	b.n	e8fc <nrf91_socket_offload_ioctl+0x8c>
		ctx->lock = va_arg(args, struct k_mutex *);
    e928:	6813      	ldr	r3, [r2, #0]
    e92a:	6043      	str	r3, [r0, #4]
		return 0;
    e92c:	e7fa      	b.n	e924 <nrf91_socket_offload_ioctl+0xb4>
	switch (cmd) {
    e92e:	2903      	cmp	r1, #3
    e930:	d012      	beq.n	e958 <nrf91_socket_offload_ioctl+0xe8>
    e932:	2904      	cmp	r1, #4
    e934:	d118      	bne.n	e968 <nrf91_socket_offload_ioctl+0xf8>
		flags = va_arg(args, int);
    e936:	6815      	ldr	r5, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK) {
    e938:	f435 4380 	bics.w	r3, r5, #16384	; 0x4000
    e93c:	d003      	beq.n	e946 <nrf91_socket_offload_ioctl+0xd6>
			errno = EINVAL;
    e93e:	f009 fb59 	bl	17ff4 <__errno>
    e942:	2316      	movs	r3, #22
    e944:	6003      	str	r3, [r0, #0]
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
    e946:	2104      	movs	r1, #4
    e948:	4620      	mov	r0, r4
    e94a:	f3c5 3280 	ubfx	r2, r5, #14, #1
}
    e94e:	b007      	add	sp, #28
    e950:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
    e954:	f00b b970 	b.w	19c38 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
    e958:	4620      	mov	r0, r4
    e95a:	2200      	movs	r2, #0
    e95c:	f00b f96c 	bl	19c38 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
    e960:	0384      	lsls	r4, r0, #14
    e962:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
		break;
    e966:	e7c9      	b.n	e8fc <nrf91_socket_offload_ioctl+0x8c>
		errno = EINVAL;
    e968:	f009 fb44 	bl	17ff4 <__errno>
    e96c:	2316      	movs	r3, #22
    e96e:	e79c      	b.n	e8aa <nrf91_socket_offload_ioctl+0x3a>
	switch (request) {
    e970:	f06f 045e 	mvn.w	r4, #94	; 0x5e
    e974:	e7c2      	b.n	e8fc <nrf91_socket_offload_ioctl+0x8c>
    e976:	bf00      	nop
    e978:	0000e4b1 	.word	0x0000e4b1

0000e97c <nrf91_socket_create>:
{
    e97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (type & SOCK_NATIVE) {
    e980:	1e0d      	subs	r5, r1, #0
{
    e982:	4607      	mov	r7, r0
    e984:	4690      	mov	r8, r2
	if (type & SOCK_NATIVE) {
    e986:	da12      	bge.n	e9ae <nrf91_socket_create+0x32>
	k_sched_lock();
    e988:	f006 f9ee 	bl	14d68 <k_sched_lock>
	*offload_lock = true;
    e98c:	4e1c      	ldr	r6, [pc, #112]	; (ea00 <nrf91_socket_create+0x84>)
    e98e:	2301      	movs	r3, #1
    e990:	7033      	strb	r3, [r6, #0]
		union { uintptr_t x; int val; } parm2 = { .val = proto };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_SOCKET);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_socket(family, type, proto);
    e992:	4642      	mov	r2, r8
    e994:	4638      	mov	r0, r7
    e996:	f025 4140 	bic.w	r1, r5, #3221225472	; 0xc0000000
    e99a:	f7fd fc45 	bl	c228 <z_impl_zsock_socket>
	*offload_lock = false;
    e99e:	2300      	movs	r3, #0
    e9a0:	7033      	strb	r3, [r6, #0]
    e9a2:	4604      	mov	r4, r0
	k_sched_unlock();
    e9a4:	f006 f9f4 	bl	14d90 <k_sched_unlock>
}
    e9a8:	4620      	mov	r0, r4
    e9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (type & SOCK_NATIVE_TLS) {
    e9ae:	006b      	lsls	r3, r5, #1
    e9b0:	d503      	bpl.n	e9ba <nrf91_socket_create+0x3e>
	k_sched_lock();
    e9b2:	f006 f9d9 	bl	14d68 <k_sched_lock>
	*offload_lock = true;
    e9b6:	4e13      	ldr	r6, [pc, #76]	; (ea04 <nrf91_socket_create+0x88>)
    e9b8:	e7e9      	b.n	e98e <nrf91_socket_create+0x12>
	fd = z_reserve_fd();
    e9ba:	f7fc fcb5 	bl	b328 <z_reserve_fd>
	if (fd < 0) {
    e9be:	1e04      	subs	r4, r0, #0
    e9c0:	db09      	blt.n	e9d6 <nrf91_socket_create+0x5a>
	retval = nrf_socket(family, type, proto);
    e9c2:	4629      	mov	r1, r5
    e9c4:	4642      	mov	r2, r8
    e9c6:	4638      	mov	r0, r7
    e9c8:	f00a fd81 	bl	194ce <nrf_socket>
	if (sd < 0) {
    e9cc:	1e05      	subs	r5, r0, #0
    e9ce:	da05      	bge.n	e9dc <nrf91_socket_create+0x60>
		z_free_fd(fd);
    e9d0:	4620      	mov	r0, r4
    e9d2:	f7fc fcf9 	bl	b3c8 <z_free_fd>
		return -1;
    e9d6:	f04f 34ff 	mov.w	r4, #4294967295
    e9da:	e7e5      	b.n	e9a8 <nrf91_socket_create+0x2c>
	ctx = allocate_ctx(sd);
    e9dc:	f7ff fe92 	bl	e704 <allocate_ctx>
	if (ctx == NULL) {
    e9e0:	4601      	mov	r1, r0
    e9e2:	b938      	cbnz	r0, e9f4 <nrf91_socket_create+0x78>
		errno = ENOMEM;
    e9e4:	f009 fb06 	bl	17ff4 <__errno>
    e9e8:	230c      	movs	r3, #12
    e9ea:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
    e9ec:	4628      	mov	r0, r5
    e9ee:	f004 f929 	bl	12c44 <nrf_close>
		z_free_fd(fd);
    e9f2:	e7ed      	b.n	e9d0 <nrf91_socket_create+0x54>
	z_finalize_fd(fd, ctx,
    e9f4:	4620      	mov	r0, r4
    e9f6:	4a04      	ldr	r2, [pc, #16]	; (ea08 <nrf91_socket_create+0x8c>)
    e9f8:	f7fc fccc 	bl	b394 <z_finalize_fd>
	return fd;
    e9fc:	e7d4      	b.n	e9a8 <nrf91_socket_create+0x2c>
    e9fe:	bf00      	nop
    ea00:	2000dbe8 	.word	0x2000dbe8
    ea04:	2000dbe7 	.word	0x2000dbe7
    ea08:	0001b9dc 	.word	0x0001b9dc

0000ea0c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    ea0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    ea0e:	ab0b      	add	r3, sp, #44	; 0x2c
    ea10:	9305      	str	r3, [sp, #20]
    ea12:	9303      	str	r3, [sp, #12]
    ea14:	4b05      	ldr	r3, [pc, #20]	; (ea2c <z_log_msg_runtime_create.constprop.0+0x20>)
    ea16:	2201      	movs	r2, #1
    ea18:	9302      	str	r3, [sp, #8]
    ea1a:	2300      	movs	r3, #0
    ea1c:	4618      	mov	r0, r3
    ea1e:	e9cd 3300 	strd	r3, r3, [sp]
    ea22:	f7fc ff87 	bl	b934 <z_impl_z_log_msg_runtime_vcreate>
}
    ea26:	b007      	add	sp, #28
    ea28:	f85d fb04 	ldr.w	pc, [sp], #4
    ea2c:	0001c9f2 	.word	0x0001c9f2

0000ea30 <nrf_modem_fault_handler>:
}
#endif /* CONFIG_NRF_MODEM_LIB_FAULT_STRERROR */

#ifndef CONFIG_NRF_MODEM_LIB_ON_FAULT_APPLICATION_SPECIFIC
void nrf_modem_fault_handler(struct nrf_modem_fault_info *fault)
{
    ea30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Modem has crashed, reason 0x%x %s, PC: 0x%x",
		fault->reason,
		nrf_modem_lib_fault_strerror(fault->reason),
		fault->program_counter);
#else
	LOG_ERR("Modem has crashed, reason 0x%x, PC: 0x%x",
    ea32:	6843      	ldr	r3, [r0, #4]
    ea34:	2201      	movs	r2, #1
    ea36:	9304      	str	r3, [sp, #16]
    ea38:	6803      	ldr	r3, [r0, #0]
    ea3a:	4906      	ldr	r1, [pc, #24]	; (ea54 <nrf_modem_fault_handler+0x24>)
    ea3c:	9303      	str	r3, [sp, #12]
    ea3e:	4b06      	ldr	r3, [pc, #24]	; (ea58 <nrf_modem_fault_handler+0x28>)
    ea40:	9302      	str	r3, [sp, #8]
    ea42:	2300      	movs	r3, #0
    ea44:	4618      	mov	r0, r3
    ea46:	e9cd 3300 	strd	r3, r3, [sp]
    ea4a:	f7ff ffdf 	bl	ea0c <z_log_msg_runtime_create.constprop.0>
		fault->reason, fault->program_counter);
#endif
#if CONFIG_NRF_MODEM_LIB_ON_FAULT_RESET_MODEM
	k_sem_give(&fault_sem);
#endif
}
    ea4e:	b007      	add	sp, #28
    ea50:	f85d fb04 	ldr.w	pc, [sp], #4
    ea54:	0001b674 	.word	0x0001b674
    ea58:	0001c9f2 	.word	0x0001c9f2

0000ea5c <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(void)
{
    ea5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
    ea5e:	4809      	ldr	r0, [pc, #36]	; (ea84 <at_monitor_sys_init+0x28>)
    ea60:	f003 fbe2 	bl	12228 <nrf_modem_at_notif_handler_set>
	if (err) {
    ea64:	b150      	cbz	r0, ea7c <at_monitor_sys_init+0x20>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
    ea66:	4b08      	ldr	r3, [pc, #32]	; (ea88 <at_monitor_sys_init+0x2c>)
    ea68:	9003      	str	r0, [sp, #12]
    ea6a:	9302      	str	r3, [sp, #8]
    ea6c:	2300      	movs	r3, #0
    ea6e:	2201      	movs	r2, #1
    ea70:	4618      	mov	r0, r3
    ea72:	e9cd 3300 	strd	r3, r3, [sp]
    ea76:	4905      	ldr	r1, [pc, #20]	; (ea8c <at_monitor_sys_init+0x30>)
    ea78:	f00a f8c1 	bl	18bfe <z_log_msg_runtime_create.constprop.0>
	}

	return 0;
}
    ea7c:	2000      	movs	r0, #0
    ea7e:	b005      	add	sp, #20
    ea80:	f85d fb04 	ldr.w	pc, [sp], #4
    ea84:	0000ea91 	.word	0x0000ea91
    ea88:	0001ca1b 	.word	0x0001ca1b
    ea8c:	0001b5d4 	.word	0x0001b5d4

0000ea90 <at_monitor_dispatch>:
{
    ea90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    ea94:	4605      	mov	r5, r0
	monitored = false;
    ea96:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    ea98:	4c1e      	ldr	r4, [pc, #120]	; (eb14 <at_monitor_dispatch+0x84>)
    ea9a:	f8df 8090 	ldr.w	r8, [pc, #144]	; eb2c <at_monitor_dispatch+0x9c>
    ea9e:	4544      	cmp	r4, r8
    eaa0:	d318      	bcc.n	ead4 <at_monitor_dispatch+0x44>
	if (!monitored) {
    eaa2:	b1a6      	cbz	r6, eace <at_monitor_dispatch+0x3e>
	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
    eaa4:	4628      	mov	r0, r5
    eaa6:	f7fa f9a5 	bl	8df4 <strlen>
	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
    eaaa:	2200      	movs	r2, #0
    eaac:	1d41      	adds	r1, r0, #5
    eaae:	2300      	movs	r3, #0
    eab0:	4819      	ldr	r0, [pc, #100]	; (eb18 <at_monitor_dispatch+0x88>)
    eab2:	f00b fa12 	bl	19eda <k_heap_alloc>
    eab6:	4604      	mov	r4, r0
	if (!at_notif) {
    eab8:	b9f0      	cbnz	r0, eaf8 <at_monitor_dispatch+0x68>
		LOG_WRN("No heap space for incoming notification: %s",
    eaba:	4b18      	ldr	r3, [pc, #96]	; (eb1c <at_monitor_dispatch+0x8c>)
    eabc:	2202      	movs	r2, #2
    eabe:	e9cd 0301 	strd	r0, r3, [sp, #4]
    eac2:	4917      	ldr	r1, [pc, #92]	; (eb20 <at_monitor_dispatch+0x90>)
    eac4:	4603      	mov	r3, r0
    eac6:	9503      	str	r5, [sp, #12]
    eac8:	9000      	str	r0, [sp, #0]
    eaca:	f00a f898 	bl	18bfe <z_log_msg_runtime_create.constprop.0>
}
    eace:	b004      	add	sp, #16
    ead0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return mon->flags.paused;
    ead4:	7a27      	ldrb	r7, [r4, #8]
		if (!is_paused(e) && has_match(e, notif)) {
    ead6:	07fa      	lsls	r2, r7, #31
    ead8:	d40a      	bmi.n	eaf0 <at_monitor_dispatch+0x60>
    eada:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
    eadc:	b119      	cbz	r1, eae6 <at_monitor_dispatch+0x56>
    eade:	4628      	mov	r0, r5
    eae0:	f00b ffb3 	bl	1aa4a <strstr>
    eae4:	b120      	cbz	r0, eaf0 <at_monitor_dispatch+0x60>
			if (is_direct(e)) {
    eae6:	07bb      	lsls	r3, r7, #30
    eae8:	d504      	bpl.n	eaf4 <at_monitor_dispatch+0x64>
				e->handler(notif);
    eaea:	4628      	mov	r0, r5
    eaec:	6863      	ldr	r3, [r4, #4]
    eaee:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    eaf0:	340c      	adds	r4, #12
    eaf2:	e7d4      	b.n	ea9e <at_monitor_dispatch+0xe>
				monitored = true;
    eaf4:	2601      	movs	r6, #1
    eaf6:	e7fb      	b.n	eaf0 <at_monitor_dispatch+0x60>
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    eaf8:	4629      	mov	r1, r5
    eafa:	3004      	adds	r0, #4
    eafc:	f00b ff6c 	bl	1a9d8 <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
    eb00:	4621      	mov	r1, r4
    eb02:	4808      	ldr	r0, [pc, #32]	; (eb24 <at_monitor_dispatch+0x94>)
    eb04:	f00b faa5 	bl	1a052 <k_queue_append>
	k_work_submit(&at_monitor_work);
    eb08:	4807      	ldr	r0, [pc, #28]	; (eb28 <at_monitor_dispatch+0x98>)
}
    eb0a:	b004      	add	sp, #16
    eb0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_submit(&at_monitor_work);
    eb10:	f005 bee4 	b.w	148dc <k_work_submit>
    eb14:	2000c8b0 	.word	0x2000c8b0
    eb18:	2000c938 	.word	0x2000c938
    eb1c:	0001ca48 	.word	0x0001ca48
    eb20:	0001b5d4 	.word	0x0001b5d4
    eb24:	2000ca5c 	.word	0x2000ca5c
    eb28:	2000c614 	.word	0x2000c614
    eb2c:	2000c910 	.word	0x2000c910

0000eb30 <at_monitor_task>:
{
    eb30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
    eb34:	4e13      	ldr	r6, [pc, #76]	; (eb84 <at_monitor_task+0x54>)
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    eb36:	4f14      	ldr	r7, [pc, #80]	; (eb88 <at_monitor_task+0x58>)
		k_heap_free(&at_monitor_heap, at_notif);
    eb38:	f8df 8054 	ldr.w	r8, [pc, #84]	; eb90 <at_monitor_task+0x60>
    eb3c:	2200      	movs	r2, #0
    eb3e:	2300      	movs	r3, #0
    eb40:	4630      	mov	r0, r6
    eb42:	f005 fdef 	bl	14724 <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
    eb46:	4605      	mov	r5, r0
    eb48:	b9b8      	cbnz	r0, eb7a <at_monitor_task+0x4a>
}
    eb4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return mon->flags.paused;
    eb4e:	7a23      	ldrb	r3, [r4, #8]
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
    eb50:	07da      	lsls	r2, r3, #31
    eb52:	d40a      	bmi.n	eb6a <at_monitor_task+0x3a>
    eb54:	079b      	lsls	r3, r3, #30
    eb56:	d408      	bmi.n	eb6a <at_monitor_task+0x3a>
    eb58:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
    eb5a:	b119      	cbz	r1, eb64 <at_monitor_task+0x34>
    eb5c:	4648      	mov	r0, r9
    eb5e:	f00b ff74 	bl	1aa4a <strstr>
    eb62:	b110      	cbz	r0, eb6a <at_monitor_task+0x3a>
				e->handler(at_notif->data);
    eb64:	4648      	mov	r0, r9
    eb66:	6863      	ldr	r3, [r4, #4]
    eb68:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    eb6a:	340c      	adds	r4, #12
    eb6c:	42bc      	cmp	r4, r7
    eb6e:	d3ee      	bcc.n	eb4e <at_monitor_task+0x1e>
		k_heap_free(&at_monitor_heap, at_notif);
    eb70:	4629      	mov	r1, r5
    eb72:	4640      	mov	r0, r8
    eb74:	f00b f9bb 	bl	19eee <k_heap_free>
    eb78:	e7e0      	b.n	eb3c <at_monitor_task+0xc>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    eb7a:	4c04      	ldr	r4, [pc, #16]	; (eb8c <at_monitor_task+0x5c>)
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
    eb7c:	f105 0904 	add.w	r9, r5, #4
    eb80:	e7f4      	b.n	eb6c <at_monitor_task+0x3c>
    eb82:	bf00      	nop
    eb84:	2000ca5c 	.word	0x2000ca5c
    eb88:	2000c910 	.word	0x2000c910
    eb8c:	2000c8b0 	.word	0x2000c8b0
    eb90:	2000c938 	.word	0x2000c938

0000eb94 <z_impl_uart_irq_rx_enable.constprop.0>:
__syscall void uart_irq_rx_enable(const struct device *dev);

static inline void z_impl_uart_irq_rx_enable(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    eb94:	4802      	ldr	r0, [pc, #8]	; (eba0 <z_impl_uart_irq_rx_enable.constprop.0+0xc>)
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_enable != NULL) {
    eb96:	6883      	ldr	r3, [r0, #8]
    eb98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    eb9a:	b103      	cbz	r3, eb9e <z_impl_uart_irq_rx_enable.constprop.0+0xa>
		api->irq_rx_enable(dev);
    eb9c:	4718      	bx	r3
	}
#else
	ARG_UNUSED(dev);
#endif
}
    eb9e:	4770      	bx	lr
    eba0:	0001b344 	.word	0x0001b344

0000eba4 <write_uart_string>:
static char at_buf[AT_BUF_SIZE]; /* AT command and modem response buffer */
static struct k_work_q at_host_work_q;
static struct k_work cmd_send_work;

static inline void write_uart_string(const char *str)
{
    eba4:	b538      	push	{r3, r4, r5, lr}
	api->poll_out(dev, out_char);
    eba6:	4d05      	ldr	r5, [pc, #20]	; (ebbc <write_uart_string+0x18>)
    eba8:	1e44      	subs	r4, r0, #1
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
    ebaa:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    ebae:	b901      	cbnz	r1, ebb2 <write_uart_string+0xe>
		uart_poll_out(uart_dev, str[i]);
	}
}
    ebb0:	bd38      	pop	{r3, r4, r5, pc}
    ebb2:	68ab      	ldr	r3, [r5, #8]
    ebb4:	4801      	ldr	r0, [pc, #4]	; (ebbc <write_uart_string+0x18>)
    ebb6:	685b      	ldr	r3, [r3, #4]
    ebb8:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
    ebba:	e7f6      	b.n	ebaa <write_uart_string+0x6>
    ebbc:	0001b344 	.word	0x0001b344

0000ebc0 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
    ebc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(work);

    /* Sending through string format rather than raw buffer in case
     * the buffer contains characters that need to be escaped
     */
	err = nrf_modem_at_cmd(at_buf, sizeof(at_buf), "%s", at_buf);
    ebc2:	4b0f      	ldr	r3, [pc, #60]	; (ec00 <cmd_send+0x40>)
    ebc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    ebc8:	4618      	mov	r0, r3
    ebca:	4a0e      	ldr	r2, [pc, #56]	; (ec04 <cmd_send+0x44>)
    ebcc:	f003 fb7e 	bl	122cc <nrf_modem_at_cmd>
	if (err < 0) {
    ebd0:	2800      	cmp	r0, #0
    ebd2:	da0a      	bge.n	ebea <cmd_send+0x2a>
		LOG_ERR("Error while processing AT command: %d", err);
    ebd4:	4b0c      	ldr	r3, [pc, #48]	; (ec08 <cmd_send+0x48>)
    ebd6:	9003      	str	r0, [sp, #12]
    ebd8:	9302      	str	r3, [sp, #8]
    ebda:	2300      	movs	r3, #0
    ebdc:	2201      	movs	r2, #1
    ebde:	4618      	mov	r0, r3
    ebe0:	e9cd 3300 	strd	r3, r3, [sp]
    ebe4:	4909      	ldr	r1, [pc, #36]	; (ec0c <cmd_send+0x4c>)
    ebe6:	f00a f81b 	bl	18c20 <z_log_msg_runtime_create.constprop.0>
	}

	write_uart_string(at_buf);
    ebea:	4805      	ldr	r0, [pc, #20]	; (ec00 <cmd_send+0x40>)
    ebec:	f7ff ffda 	bl	eba4 <write_uart_string>

	at_buf_busy = false;
    ebf0:	2200      	movs	r2, #0
    ebf2:	4b07      	ldr	r3, [pc, #28]	; (ec10 <cmd_send+0x50>)
    ebf4:	701a      	strb	r2, [r3, #0]
	uart_irq_rx_enable(uart_dev);
}
    ebf6:	b005      	add	sp, #20
    ebf8:	f85d eb04 	ldr.w	lr, [sp], #4
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
    ebfc:	f7ff bfca 	b.w	eb94 <z_impl_uart_irq_rx_enable.constprop.0>
    ec00:	2000dbea 	.word	0x2000dbea
    ec04:	0001cfa7 	.word	0x0001cfa7
    ec08:	0001ca7f 	.word	0x0001ca7f
    ec0c:	0001b5cc 	.word	0x0001b5cc
    ec10:	2000ebea 	.word	0x2000ebea

0000ec14 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
    ec14:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec16:	4604      	mov	r4, r0
    ec18:	b087      	sub	sp, #28
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
    ec1a:	6883      	ldr	r3, [r0, #8]
    ec1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ec1e:	b103      	cbz	r3, ec22 <isr+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
    ec20:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
    ec22:	68a3      	ldr	r3, [r4, #8]
    ec24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ec26:	b9c3      	cbnz	r3, ec5a <isr+0x46>

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!at_buf_busy) &&
    ec28:	4e50      	ldr	r6, [pc, #320]	; (ed6c <isr+0x158>)
		if (at_cmd_len > 0) {
    ec2a:	4d51      	ldr	r5, [pc, #324]	; (ed70 <isr+0x15c>)
	while ((!at_buf_busy) &&
    ec2c:	7833      	ldrb	r3, [r6, #0]
    ec2e:	b9c3      	cbnz	r3, ec62 <isr+0x4e>
	if (api->fifo_read == NULL) {
    ec30:	68a3      	ldr	r3, [r4, #8]
    ec32:	699b      	ldr	r3, [r3, #24]
    ec34:	b12b      	cbz	r3, ec42 <isr+0x2e>
	return api->fifo_read(dev, rx_data, size);
    ec36:	2201      	movs	r2, #1
    ec38:	4620      	mov	r0, r4
    ec3a:	f10d 0117 	add.w	r1, sp, #23
    ec3e:	4798      	blx	r3
    ec40:	b178      	cbz	r0, ec62 <isr+0x4e>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
    ec42:	f89d 3017 	ldrb.w	r3, [sp, #23]
	switch (character) {
    ec46:	2b08      	cmp	r3, #8
    ec48:	d001      	beq.n	ec4e <isr+0x3a>
    ec4a:	2b7f      	cmp	r3, #127	; 0x7f
    ec4c:	d10b      	bne.n	ec66 <isr+0x52>
		if (at_cmd_len > 0) {
    ec4e:	682b      	ldr	r3, [r5, #0]
    ec50:	2b00      	cmp	r3, #0
    ec52:	d0eb      	beq.n	ec2c <isr+0x18>
			at_cmd_len--;
    ec54:	3b01      	subs	r3, #1
    ec56:	602b      	str	r3, [r5, #0]
    ec58:	e7e8      	b.n	ec2c <isr+0x18>
	return api->irq_rx_ready(dev);
    ec5a:	4620      	mov	r0, r4
    ec5c:	4798      	blx	r3
	if (!uart_irq_rx_ready(dev)) {
    ec5e:	2800      	cmp	r0, #0
    ec60:	d1e2      	bne.n	ec28 <isr+0x14>
	}
}
    ec62:	b007      	add	sp, #28
    ec64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!inside_quotes) {
    ec66:	4843      	ldr	r0, [pc, #268]	; (ed74 <isr+0x160>)
    ec68:	7802      	ldrb	r2, [r0, #0]
    ec6a:	2a00      	cmp	r2, #0
    ec6c:	d151      	bne.n	ed12 <isr+0xfe>
		switch (character) {
    ec6e:	2b0a      	cmp	r3, #10
    ec70:	d023      	beq.n	ecba <isr+0xa6>
    ec72:	2b0d      	cmp	r3, #13
    ec74:	d00e      	beq.n	ec94 <isr+0x80>
    ec76:	2b00      	cmp	r3, #0
    ec78:	d14b      	bne.n	ed12 <isr+0xfe>
			if (term_mode == MODE_NULL_TERM) {
    ec7a:	4a3f      	ldr	r2, [pc, #252]	; (ed78 <isr+0x164>)
    ec7c:	7812      	ldrb	r2, [r2, #0]
    ec7e:	b16a      	cbz	r2, ec9c <isr+0x88>
			LOG_WRN("Ignored null; would terminate string early.");
    ec80:	4a3e      	ldr	r2, [pc, #248]	; (ed7c <isr+0x168>)
    ec82:	4618      	mov	r0, r3
    ec84:	e9cd 3201 	strd	r3, r2, [sp, #4]
    ec88:	493d      	ldr	r1, [pc, #244]	; (ed80 <isr+0x16c>)
    ec8a:	2202      	movs	r2, #2
    ec8c:	9300      	str	r3, [sp, #0]
    ec8e:	f009 ffc7 	bl	18c20 <z_log_msg_runtime_create.constprop.0>
			return;
    ec92:	e7cb      	b.n	ec2c <isr+0x18>
			if (term_mode == MODE_CR) {
    ec94:	4a38      	ldr	r2, [pc, #224]	; (ed78 <isr+0x164>)
    ec96:	7812      	ldrb	r2, [r2, #0]
    ec98:	2a01      	cmp	r2, #1
    ec9a:	d130      	bne.n	ecfe <isr+0xea>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
    ec9c:	2200      	movs	r2, #0
    ec9e:	4934      	ldr	r1, [pc, #208]	; (ed70 <isr+0x15c>)
    eca0:	4b38      	ldr	r3, [pc, #224]	; (ed84 <isr+0x170>)
    eca2:	680f      	ldr	r7, [r1, #0]
	at_cmd_len = 0;
    eca4:	600a      	str	r2, [r1, #0]
    eca6:	4619      	mov	r1, r3
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
    eca8:	55da      	strb	r2, [r3, r7]
	inside_quotes = false;
    ecaa:	7002      	strb	r2, [r0, #0]
		if (*c > ' ') {
    ecac:	f813 2b01 	ldrb.w	r2, [r3], #1
    ecb0:	2a20      	cmp	r2, #32
    ecb2:	d84b      	bhi.n	ed4c <isr+0x138>
		} else if (*c == '\0') {
    ecb4:	2a00      	cmp	r2, #0
    ecb6:	d1f9      	bne.n	ecac <isr+0x98>
    ecb8:	e7b8      	b.n	ec2c <isr+0x18>
			if (term_mode == MODE_LF) {
    ecba:	4a2f      	ldr	r2, [pc, #188]	; (ed78 <isr+0x164>)
    ecbc:	7817      	ldrb	r7, [r2, #0]
    ecbe:	2f02      	cmp	r7, #2
    ecc0:	d0ec      	beq.n	ec9c <isr+0x88>
		if (at_cmd_len > 0) {
    ecc2:	492b      	ldr	r1, [pc, #172]	; (ed70 <isr+0x15c>)
			if (term_mode == MODE_CR_LF &&
    ecc4:	2f03      	cmp	r7, #3
		if (at_cmd_len > 0) {
    ecc6:	680a      	ldr	r2, [r1, #0]
			if (term_mode == MODE_CR_LF &&
    ecc8:	d113      	bne.n	ecf2 <isr+0xde>
    ecca:	4f2e      	ldr	r7, [pc, #184]	; (ed84 <isr+0x170>)
    eccc:	b16a      	cbz	r2, ecea <isr+0xd6>
			    at_buf[at_cmd_len - 1] == '\r') {
    ecce:	eb07 0c02 	add.w	ip, r7, r2
			    at_cmd_len > 0 &&
    ecd2:	f81c cc01 	ldrb.w	ip, [ip, #-1]
    ecd6:	f1bc 0f0d 	cmp.w	ip, #13
    ecda:	d0df      	beq.n	ec9c <isr+0x88>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
    ecdc:	1c50      	adds	r0, r2, #1
    ecde:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    ece2:	d21b      	bcs.n	ed1c <isr+0x108>
	at_buf[at_cmd_len] = character;
    ece4:	54bb      	strb	r3, [r7, r2]
	at_cmd_len++;
    ece6:	6008      	str	r0, [r1, #0]
	if (character == '"') {
    ece8:	e7a0      	b.n	ec2c <isr+0x18>
	at_buf[at_cmd_len] = character;
    ecea:	703b      	strb	r3, [r7, #0]
	at_cmd_len++;
    ecec:	2301      	movs	r3, #1
    ecee:	600b      	str	r3, [r1, #0]
	if (character == '"') {
    ecf0:	e79c      	b.n	ec2c <isr+0x18>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
    ecf2:	1c50      	adds	r0, r2, #1
    ecf4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    ecf8:	d210      	bcs.n	ed1c <isr+0x108>
	at_buf[at_cmd_len] = character;
    ecfa:	4f22      	ldr	r7, [pc, #136]	; (ed84 <isr+0x170>)
    ecfc:	e7f2      	b.n	ece4 <isr+0xd0>
		if (at_cmd_len > 0) {
    ecfe:	4a1c      	ldr	r2, [pc, #112]	; (ed70 <isr+0x15c>)
    ed00:	6810      	ldr	r0, [r2, #0]
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
    ed02:	1c41      	adds	r1, r0, #1
    ed04:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    ed08:	d208      	bcs.n	ed1c <isr+0x108>
	at_buf[at_cmd_len] = character;
    ed0a:	4f1e      	ldr	r7, [pc, #120]	; (ed84 <isr+0x170>)
	at_cmd_len++;
    ed0c:	6011      	str	r1, [r2, #0]
	at_buf[at_cmd_len] = character;
    ed0e:	543b      	strb	r3, [r7, r0]
	if (character == '"') {
    ed10:	e78c      	b.n	ec2c <isr+0x18>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
    ed12:	682f      	ldr	r7, [r5, #0]
    ed14:	1c79      	adds	r1, r7, #1
    ed16:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    ed1a:	d30b      	bcc.n	ed34 <isr+0x120>
	switch (character) {
    ed1c:	9303      	str	r3, [sp, #12]
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
    ed1e:	4b1a      	ldr	r3, [pc, #104]	; (ed88 <isr+0x174>)
    ed20:	2201      	movs	r2, #1
    ed22:	9302      	str	r3, [sp, #8]
    ed24:	2300      	movs	r3, #0
    ed26:	4916      	ldr	r1, [pc, #88]	; (ed80 <isr+0x16c>)
    ed28:	4618      	mov	r0, r3
    ed2a:	e9cd 3300 	strd	r3, r3, [sp]
    ed2e:	f009 ff77 	bl	18c20 <z_log_msg_runtime_create.constprop.0>
		return;
    ed32:	e77b      	b.n	ec2c <isr+0x18>
	at_buf[at_cmd_len] = character;
    ed34:	f8df c04c 	ldr.w	ip, [pc, #76]	; ed84 <isr+0x170>
	if (character == '"') {
    ed38:	2b22      	cmp	r3, #34	; 0x22
	at_buf[at_cmd_len] = character;
    ed3a:	f80c 3007 	strb.w	r3, [ip, r7]
	at_cmd_len++;
    ed3e:	6029      	str	r1, [r5, #0]
	if (character == '"') {
    ed40:	f47f af74 	bne.w	ec2c <isr+0x18>
	if (!inside_quotes) {
    ed44:	f082 0201 	eor.w	r2, r2, #1
		inside_quotes = !inside_quotes;
    ed48:	7002      	strb	r2, [r0, #0]
    ed4a:	e76f      	b.n	ec2c <isr+0x18>
	if (at_buf[0]) {
    ed4c:	780b      	ldrb	r3, [r1, #0]
    ed4e:	2b00      	cmp	r3, #0
    ed50:	f43f af6c 	beq.w	ec2c <isr+0x18>
	const struct uart_driver_api *api =
    ed54:	480d      	ldr	r0, [pc, #52]	; (ed8c <isr+0x178>)
	if (api->irq_rx_disable != NULL) {
    ed56:	6883      	ldr	r3, [r0, #8]
    ed58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ed5a:	b103      	cbz	r3, ed5e <isr+0x14a>
		api->irq_rx_disable(dev);
    ed5c:	4798      	blx	r3
		at_buf_busy = true;
    ed5e:	2301      	movs	r3, #1
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
    ed60:	490b      	ldr	r1, [pc, #44]	; (ed90 <isr+0x17c>)
    ed62:	480c      	ldr	r0, [pc, #48]	; (ed94 <isr+0x180>)
		at_buf_busy = true;
    ed64:	7033      	strb	r3, [r6, #0]
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
    ed66:	f00b f9be 	bl	1a0e6 <k_work_submit_to_queue>
    ed6a:	e75f      	b.n	ec2c <isr+0x18>
    ed6c:	2000ebea 	.word	0x2000ebea
    ed70:	2000d2dc 	.word	0x2000d2dc
    ed74:	2000dbe9 	.word	0x2000dbe9
    ed78:	2000ebeb 	.word	0x2000ebeb
    ed7c:	0001caa5 	.word	0x0001caa5
    ed80:	0001b5cc 	.word	0x0001b5cc
    ed84:	2000dbea 	.word	0x2000dbea
    ed88:	0001cad1 	.word	0x0001cad1
    ed8c:	0001b344 	.word	0x0001b344
    ed90:	2000d2e0 	.word	0x2000d2e0
    ed94:	2000cbc0 	.word	0x2000cbc0

0000ed98 <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(void)
{
    ed98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	enum term_modes mode = CONFIG_AT_HOST_TERMINATION;


	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
    ed9c:	2401      	movs	r4, #1
    ed9e:	4b45      	ldr	r3, [pc, #276]	; (eeb4 <at_host_init+0x11c>)
{
    eda0:	b087      	sub	sp, #28
		term_mode = mode;
    eda2:	701c      	strb	r4, [r3, #0]
    eda4:	4844      	ldr	r0, [pc, #272]	; (eeb8 <at_host_init+0x120>)
    eda6:	f00b f823 	bl	19df0 <z_device_is_ready>
    edaa:	4603      	mov	r3, r0
	if (!device_is_ready(uart_dev)) {
    edac:	b9d0      	cbnz	r0, ede4 <at_host_init+0x4c>
		LOG_ERR("UART device not ready");
    edae:	4a43      	ldr	r2, [pc, #268]	; (eebc <at_host_init+0x124>)
    edb0:	4943      	ldr	r1, [pc, #268]	; (eec0 <at_host_init+0x128>)
    edb2:	e9cd 0201 	strd	r0, r2, [sp, #4]
    edb6:	9000      	str	r0, [sp, #0]
    edb8:	4622      	mov	r2, r4
    edba:	f009 ff31 	bl	18c20 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
    edbe:	f06f 0312 	mvn.w	r3, #18
	}

	/* Initialize the UART module */
	err = at_uart_init(uart_dev);
	if (err) {
		LOG_ERR("UART could not be initialized: %d", err);
    edc2:	9303      	str	r3, [sp, #12]
    edc4:	4b3f      	ldr	r3, [pc, #252]	; (eec4 <at_host_init+0x12c>)
    edc6:	2201      	movs	r2, #1
    edc8:	9302      	str	r3, [sp, #8]
    edca:	2300      	movs	r3, #0
    edcc:	493c      	ldr	r1, [pc, #240]	; (eec0 <at_host_init+0x128>)
    edce:	4618      	mov	r0, r3
    edd0:	e9cd 3300 	strd	r3, r3, [sp]
    edd4:	f009 ff24 	bl	18c20 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
    edd8:	f06f 090d 	mvn.w	r9, #13
			   K_THREAD_STACK_SIZEOF(at_host_stack_area),
			   CONFIG_AT_HOST_THREAD_PRIO, NULL);
	uart_irq_rx_enable(uart_dev);

	return err;
}
    eddc:	4648      	mov	r0, r9
    edde:	b007      	add	sp, #28
    ede0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_uptime_ticks();
    ede4:	f00b fab0 	bl	1a348 <z_impl_k_uptime_ticks>
    ede8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    edec:	fba0 0302 	umull	r0, r3, r0, r2
    edf0:	fb02 3301 	mla	r3, r2, r1, r3
	const struct uart_driver_api *api =
    edf4:	4e30      	ldr	r6, [pc, #192]	; (eeb8 <at_host_init+0x120>)
    edf6:	0bc0      	lsrs	r0, r0, #15
    edf8:	68b7      	ldr	r7, [r6, #8]
			LOG_INF("UART check failed: %d. "
    edfa:	f8df 80e4 	ldr.w	r8, [pc, #228]	; eee0 <at_host_init+0x148>
    edfe:	ea40 4543 	orr.w	r5, r0, r3, lsl #17
	if (api->err_check == NULL) {
    ee02:	68bb      	ldr	r3, [r7, #8]
    ee04:	b1b3      	cbz	r3, ee34 <at_host_init+0x9c>
	return api->err_check(dev);
    ee06:	4630      	mov	r0, r6
    ee08:	4798      	blx	r3
		if (err) {
    ee0a:	4681      	mov	r9, r0
    ee0c:	b9a0      	cbnz	r0, ee38 <at_host_init+0xa0>
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    ee0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ee10:	2b00      	cmp	r3, #0
    ee12:	d149      	bne.n	eea8 <at_host_init+0x110>
	k_work_init(&cmd_send_work, cmd_send);
    ee14:	492c      	ldr	r1, [pc, #176]	; (eec8 <at_host_init+0x130>)
    ee16:	482d      	ldr	r0, [pc, #180]	; (eecc <at_host_init+0x134>)
    ee18:	f00b f948 	bl	1a0ac <k_work_init>
	k_work_queue_start(&at_host_work_q, at_host_stack_area,
    ee1c:	2300      	movs	r3, #0
    ee1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ee22:	9300      	str	r3, [sp, #0]
    ee24:	492a      	ldr	r1, [pc, #168]	; (eed0 <at_host_init+0x138>)
    ee26:	230a      	movs	r3, #10
    ee28:	482a      	ldr	r0, [pc, #168]	; (eed4 <at_host_init+0x13c>)
    ee2a:	f005 fd5d 	bl	148e8 <k_work_queue_start>
    ee2e:	f7ff feb1 	bl	eb94 <z_impl_uart_irq_rx_enable.constprop.0>
}
    ee32:	e7d3      	b.n	eddc <at_host_init+0x44>
		return -ENOSYS;
    ee34:	f06f 0957 	mvn.w	r9, #87	; 0x57
    ee38:	f00b fa86 	bl	1a348 <z_impl_k_uptime_ticks>
    ee3c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    ee40:	fba0 0204 	umull	r0, r2, r0, r4
    ee44:	fb04 2201 	mla	r2, r4, r1, r2
    ee48:	0bc4      	lsrs	r4, r0, #15
    ee4a:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			if (k_uptime_get_32() - start_time >
    ee4e:	1b64      	subs	r4, r4, r5
    ee50:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    ee54:	f04f 0300 	mov.w	r3, #0
				LOG_ERR("UART check failed: %d. "
    ee58:	f8cd 900c 	str.w	r9, [sp, #12]
			if (k_uptime_get_32() - start_time >
    ee5c:	d90b      	bls.n	ee76 <at_host_init+0xde>
				LOG_ERR("UART check failed: %d. "
    ee5e:	4a1e      	ldr	r2, [pc, #120]	; (eed8 <at_host_init+0x140>)
    ee60:	4618      	mov	r0, r3
    ee62:	e9cd 3201 	strd	r3, r2, [sp, #4]
    ee66:	9300      	str	r3, [sp, #0]
    ee68:	2201      	movs	r2, #1
    ee6a:	4915      	ldr	r1, [pc, #84]	; (eec0 <at_host_init+0x128>)
    ee6c:	f009 fed8 	bl	18c20 <z_log_msg_runtime_create.constprop.0>
				return -EIO;
    ee70:	f06f 0304 	mvn.w	r3, #4
    ee74:	e7a5      	b.n	edc2 <at_host_init+0x2a>
			LOG_INF("UART check failed: %d. "
    ee76:	2203      	movs	r2, #3
    ee78:	4618      	mov	r0, r3
    ee7a:	e9cd 3801 	strd	r3, r8, [sp, #4]
    ee7e:	4910      	ldr	r1, [pc, #64]	; (eec0 <at_host_init+0x128>)
    ee80:	9300      	str	r3, [sp, #0]
    ee82:	f009 fecd 	bl	18c20 <z_log_msg_runtime_create.constprop.0>
	if (api->fifo_read == NULL) {
    ee86:	68b4      	ldr	r4, [r6, #8]
    ee88:	69a3      	ldr	r3, [r4, #24]
    ee8a:	2b00      	cmp	r3, #0
    ee8c:	d0fc      	beq.n	ee88 <at_host_init+0xf0>
	return api->fifo_read(dev, rx_data, size);
    ee8e:	2201      	movs	r2, #1
    ee90:	4630      	mov	r0, r6
    ee92:	f10d 0117 	add.w	r1, sp, #23
    ee96:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
    ee98:	2800      	cmp	r0, #0
    ee9a:	d1f5      	bne.n	ee88 <at_host_init+0xf0>
	return z_impl_k_sleep(timeout);
    ee9c:	2100      	movs	r1, #0
    ee9e:	f44f 70a4 	mov.w	r0, #328	; 0x148
    eea2:	f006 f81b 	bl	14edc <z_impl_k_sleep>
	} while (err);
    eea6:	e7ac      	b.n	ee02 <at_host_init+0x6a>
		api->irq_callback_set(dev, cb, user_data);
    eea8:	4602      	mov	r2, r0
    eeaa:	490c      	ldr	r1, [pc, #48]	; (eedc <at_host_init+0x144>)
    eeac:	4802      	ldr	r0, [pc, #8]	; (eeb8 <at_host_init+0x120>)
    eeae:	4798      	blx	r3
	if (err) {
    eeb0:	e7b0      	b.n	ee14 <at_host_init+0x7c>
    eeb2:	bf00      	nop
    eeb4:	2000ebeb 	.word	0x2000ebeb
    eeb8:	0001b344 	.word	0x0001b344
    eebc:	0001caf1 	.word	0x0001caf1
    eec0:	0001b5cc 	.word	0x0001b5cc
    eec4:	0001cb72 	.word	0x0001cb72
    eec8:	0000ebc1 	.word	0x0000ebc1
    eecc:	2000d2e0 	.word	0x2000d2e0
    eed0:	2000edb0 	.word	0x2000edb0
    eed4:	2000cbc0 	.word	0x2000cbc0
    eed8:	0001cb07 	.word	0x0001cb07
    eedc:	0000ec15 	.word	0x0000ec15
    eee0:	0001cb3d 	.word	0x0001cb3d

0000eee4 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
    eee4:	4b09      	ldr	r3, [pc, #36]	; (ef0c <is_valid_notification_char+0x28>)
    eee6:	5c1b      	ldrb	r3, [r3, r0]
    eee8:	f003 0303 	and.w	r3, r3, #3
    eeec:	2b02      	cmp	r3, #2
    eeee:	bf08      	it	eq
    eef0:	3820      	subeq	r0, #32
    eef2:	b2c0      	uxtb	r0, r0

	if (((chr >= 'A') && (chr <= 'Z')) || (chr == '_')) {
    eef4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    eef8:	2b19      	cmp	r3, #25
    eefa:	d904      	bls.n	ef06 <is_valid_notification_char+0x22>
    eefc:	f1a0 035f 	sub.w	r3, r0, #95	; 0x5f
    ef00:	4258      	negs	r0, r3
    ef02:	4158      	adcs	r0, r3
    ef04:	4770      	bx	lr
		return true;
    ef06:	2001      	movs	r0, #1
	}

	return false;
}
    ef08:	4770      	bx	lr
    ef0a:	bf00      	nop
    ef0c:	0001e02d 	.word	0x0001e02d

0000ef10 <is_separator>:
 * @retval true  If character is ':' or ','
 * @retval false In all other cases
 */
static inline bool is_separator(char chr)
{
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
    ef10:	f1a0 032c 	sub.w	r3, r0, #44	; 0x2c
    ef14:	b2db      	uxtb	r3, r3
    ef16:	2b11      	cmp	r3, #17
    ef18:	bf9d      	ittte	ls
    ef1a:	4803      	ldrls	r0, [pc, #12]	; (ef28 <is_separator+0x18>)
    ef1c:	40d8      	lsrls	r0, r3
    ef1e:	f000 0001 	andls.w	r0, r0, #1
{
    ef22:	2000      	movhi	r0, #0
	    (chr == AT_CMD_SEPARATOR)) {
		return true;
	}

	return false;
}
    ef24:	4770      	bx	lr
    ef26:	bf00      	nop
    ef28:	00024001 	.word	0x00024001

0000ef2c <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
    ef2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef2e:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
    ef30:	2400      	movs	r4, #0
    ef32:	4e09      	ldr	r6, [pc, #36]	; (ef58 <is_result+0x2c>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
    ef34:	f856 7b04 	ldr.w	r7, [r6], #4
    ef38:	4638      	mov	r0, r7
    ef3a:	f7f9 ff5b 	bl	8df4 <strlen>
    ef3e:	4639      	mov	r1, r7
    ef40:	4602      	mov	r2, r0
    ef42:	4628      	mov	r0, r5
    ef44:	f00b fd50 	bl	1a9e8 <strncmp>
		if (!diff) {
    ef48:	b120      	cbz	r0, ef54 <is_result+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
    ef4a:	3401      	adds	r4, #1
    ef4c:	2c04      	cmp	r4, #4
    ef4e:	d1f1      	bne.n	ef34 <is_result+0x8>
			return true;
		}
	}

	return false;
    ef50:	2000      	movs	r0, #0
}
    ef52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
    ef54:	2001      	movs	r0, #1
    ef56:	e7fc      	b.n	ef52 <is_result+0x26>
    ef58:	0001ba1c 	.word	0x0001ba1c

0000ef5c <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
    ef5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
    ef60:	6804      	ldr	r4, [r0, #0]
{
    ef62:	b0a3      	sub	sp, #140	; 0x8c
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
    ef64:	7823      	ldrb	r3, [r4, #0]
    ef66:	4680      	mov	r8, r0
    ef68:	460e      	mov	r6, r1
    ef6a:	4615      	mov	r5, r2
	const char *tmpstr = *str;
    ef6c:	9400      	str	r4, [sp, #0]
    ef6e:	2b00      	cmp	r3, #0
    ef70:	f000 80cf 	beq.w	f112 <at_parse_process_element+0x1b6>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
    ef74:	4b68      	ldr	r3, [pc, #416]	; (f118 <at_parse_process_element+0x1bc>)
    ef76:	781b      	ldrb	r3, [r3, #0]
    ef78:	2b06      	cmp	r3, #6
    ef7a:	d113      	bne.n	efa4 <at_parse_process_element+0x48>
		const char *start_ptr = tmpstr++;

		while (is_valid_notification_char(*tmpstr)) {
    ef7c:	2000      	movs	r0, #0
		const char *start_ptr = tmpstr++;
    ef7e:	1c62      	adds	r2, r4, #1
    ef80:	9200      	str	r2, [sp, #0]
		while (is_valid_notification_char(*tmpstr)) {
    ef82:	4611      	mov	r1, r2
    ef84:	4607      	mov	r7, r0
    ef86:	f812 0b01 	ldrb.w	r0, [r2], #1
    ef8a:	f7ff ffab 	bl	eee4 <is_valid_notification_char>
    ef8e:	2800      	cmp	r0, #0
    ef90:	d1f7      	bne.n	ef82 <at_parse_process_element+0x26>
    ef92:	b107      	cbz	r7, ef96 <at_parse_process_element+0x3a>
    ef94:	9100      	str	r1, [sp, #0]
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
    ef96:	1b0b      	subs	r3, r1, r4

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
    ef98:	4622      	mov	r2, r4
    ef9a:	4631      	mov	r1, r6
    ef9c:	4628      	mov	r0, r5
    ef9e:	f009 feec 	bl	18d7a <at_params_string_put>
    efa2:	e046      	b.n	f032 <at_parse_process_element+0xd6>
	} else if (state == COMMAND) {
    efa4:	3b01      	subs	r3, #1
    efa6:	2b08      	cmp	r3, #8
    efa8:	d843      	bhi.n	f032 <at_parse_process_element+0xd6>
    efaa:	e8df f003 	tbb	[pc, r3]
    efae:	4964      	.short	0x4964
    efb0:	420da25a 	.word	0x420da25a
    efb4:	3f1c      	.short	0x3f1c
    efb6:	05          	.byte	0x05
    efb7:	00          	.byte	0x00
    efb8:	4622      	mov	r2, r4
	if (state == NOTIFICATION) {
    efba:	2100      	movs	r1, #0
    efbc:	4613      	mov	r3, r2
    efbe:	f812 0b01 	ldrb.w	r0, [r2], #1
    efc2:	b160      	cbz	r0, efde <at_parse_process_element+0x82>
    efc4:	2101      	movs	r1, #1
    efc6:	e7f9      	b.n	efbc <at_parse_process_element+0x60>
    efc8:	4622      	mov	r2, r4
    efca:	2100      	movs	r1, #0
		while (isxdigit((int)*tmpstr)) {
    efcc:	4f53      	ldr	r7, [pc, #332]	; (f11c <at_parse_process_element+0x1c0>)
    efce:	4613      	mov	r3, r2
    efd0:	f812 0b01 	ldrb.w	r0, [r2], #1
    efd4:	5c38      	ldrb	r0, [r7, r0]
    efd6:	f010 0f44 	tst.w	r0, #68	; 0x44
    efda:	f040 8098 	bne.w	f10e <at_parse_process_element+0x1b2>
    efde:	b101      	cbz	r1, efe2 <at_parse_process_element+0x86>
    efe0:	9300      	str	r3, [sp, #0]
		at_params_string_put(list, index, start_ptr,
    efe2:	1b1b      	subs	r3, r3, r4
    efe4:	e7d8      	b.n	ef98 <at_parse_process_element+0x3c>
		skip_command_prefix(&tmpstr);
    efe6:	4668      	mov	r0, sp
    efe8:	f009 fe3e 	bl	18c68 <skip_command_prefix>
		while (is_valid_command_char(*tmpstr)) {
    efec:	2200      	movs	r2, #0
    efee:	9b00      	ldr	r3, [sp, #0]
	if (isalpha((int)chr) || isdigit((int)chr)) {
    eff0:	484a      	ldr	r0, [pc, #296]	; (f11c <at_parse_process_element+0x1c0>)
    eff2:	461f      	mov	r7, r3
    eff4:	f813 1b01 	ldrb.w	r1, [r3], #1
    eff8:	5c41      	ldrb	r1, [r0, r1]
    effa:	0749      	lsls	r1, r1, #29
    effc:	d110      	bne.n	f020 <at_parse_process_element+0xc4>
    effe:	b102      	cbz	r2, f002 <at_parse_process_element+0xa6>
    f000:	9700      	str	r7, [sp, #0]
		at_params_string_put(list, index, start_ptr,
    f002:	1b3b      	subs	r3, r7, r4
    f004:	4622      	mov	r2, r4
    f006:	4631      	mov	r1, r6
    f008:	4628      	mov	r0, r5
    f00a:	f009 feb6 	bl	18d7a <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
    f00e:	783b      	ldrb	r3, [r7, #0]
    f010:	2b3d      	cmp	r3, #61	; 0x3d
    f012:	d107      	bne.n	f024 <at_parse_process_element+0xc8>
    f014:	787b      	ldrb	r3, [r7, #1]
    f016:	2b3f      	cmp	r3, #63	; 0x3f
    f018:	d10b      	bne.n	f032 <at_parse_process_element+0xd6>
			tmpstr += 2;
    f01a:	3702      	adds	r7, #2
		tmpstr++;
    f01c:	9700      	str	r7, [sp, #0]
    f01e:	e008      	b.n	f032 <at_parse_process_element+0xd6>
    f020:	2201      	movs	r2, #1
    f022:	e7e6      	b.n	eff2 <at_parse_process_element+0x96>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
    f024:	2b3f      	cmp	r3, #63	; 0x3f
    f026:	d104      	bne.n	f032 <at_parse_process_element+0xd6>
			tmpstr++;
    f028:	3701      	adds	r7, #1
    f02a:	e7f7      	b.n	f01c <at_parse_process_element+0xc0>
		at_params_empty_put(list, index);
    f02c:	4628      	mov	r0, r5
    f02e:	f009 fe7a 	bl	18d26 <at_params_empty_put>
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
    f032:	2000      	movs	r0, #0
	*str = tmpstr;
    f034:	9b00      	ldr	r3, [sp, #0]
    f036:	f8c8 3000 	str.w	r3, [r8]
}
    f03a:	b023      	add	sp, #140	; 0x8c
    f03c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state == NOTIFICATION) {
    f040:	4627      	mov	r7, r4
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
    f042:	783a      	ldrb	r2, [r7, #0]
    f044:	4610      	mov	r0, r2
    f046:	f009 fe06 	bl	18c56 <is_lfcr>
    f04a:	463b      	mov	r3, r7
			tmpstr++;
    f04c:	3701      	adds	r7, #1
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
    f04e:	b908      	cbnz	r0, f054 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
    f050:	2a00      	cmp	r2, #0
    f052:	d1f6      	bne.n	f042 <at_parse_process_element+0xe6>
		at_params_string_put(list, index, start_ptr,
    f054:	4622      	mov	r2, r4
    f056:	4631      	mov	r1, r6
    f058:	4628      	mov	r0, r5
    f05a:	1b1b      	subs	r3, r3, r4
    f05c:	f009 fe8d 	bl	18d7a <at_params_string_put>
    f060:	e7dc      	b.n	f01c <at_parse_process_element+0xc0>
	if (state == NOTIFICATION) {
    f062:	4627      	mov	r7, r4
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
    f064:	783a      	ldrb	r2, [r7, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
    f066:	463b      	mov	r3, r7
    f068:	2a22      	cmp	r2, #34	; 0x22
			tmpstr++;
    f06a:	f107 0701 	add.w	r7, r7, #1
    f06e:	d0f1      	beq.n	f054 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
    f070:	2a00      	cmp	r2, #0
    f072:	d1f7      	bne.n	f064 <at_parse_process_element+0x108>
    f074:	e7ee      	b.n	f054 <at_parse_process_element+0xf8>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
    f076:	4620      	mov	r0, r4
    f078:	220a      	movs	r2, #10
    f07a:	a901      	add	r1, sp, #4
    f07c:	f006 ffb2 	bl	15fe4 <strtoul>
    f080:	2401      	movs	r4, #1
		tmpstr = next;
    f082:	9b01      	ldr	r3, [sp, #4]
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
    f084:	9002      	str	r0, [sp, #8]
		tmpstr = next;
    f086:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
    f088:	9b00      	ldr	r3, [sp, #0]
    f08a:	7818      	ldrb	r0, [r3, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
    f08c:	2829      	cmp	r0, #41	; 0x29
    f08e:	d025      	beq.n	f0dc <at_parse_process_element+0x180>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
    f090:	b320      	cbz	r0, f0dc <at_parse_process_element+0x180>
					(uint32_t)strtoul(++tmpstr, &next, 10);
    f092:	f103 0901 	add.w	r9, r3, #1
			if (is_separator(*tmpstr)) {
    f096:	f7ff ff3b 	bl	ef10 <is_separator>
				tmparray[i++] =
    f09a:	f8cd 9000 	str.w	r9, [sp]
			if (is_separator(*tmpstr)) {
    f09e:	b908      	cbnz	r0, f0a4 <at_parse_process_element+0x148>
					tmpstr = next;
    f0a0:	4627      	mov	r7, r4
    f0a2:	e019      	b.n	f0d8 <at_parse_process_element+0x17c>
					(uint32_t)strtoul(++tmpstr, &next, 10);
    f0a4:	220a      	movs	r2, #10
    f0a6:	a901      	add	r1, sp, #4
    f0a8:	4648      	mov	r0, r9
    f0aa:	f006 ff9b 	bl	15fe4 <strtoul>
				tmparray[i++] =
    f0ae:	ab22      	add	r3, sp, #136	; 0x88
    f0b0:	1c67      	adds	r7, r4, #1
    f0b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    f0b6:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
    f0ba:	4648      	mov	r0, r9
    f0bc:	f7f9 fe9a 	bl	8df4 <strlen>
    f0c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
    f0c4:	4604      	mov	r4, r0
    f0c6:	4648      	mov	r0, r9
    f0c8:	f7f9 fe94 	bl	8df4 <strlen>
    f0cc:	4284      	cmp	r4, r0
    f0ce:	d006      	beq.n	f0de <at_parse_process_element+0x182>
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
    f0d0:	2f20      	cmp	r7, #32
					tmpstr = next;
    f0d2:	f8cd 9000 	str.w	r9, [sp]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
    f0d6:	d002      	beq.n	f0de <at_parse_process_element+0x182>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
    f0d8:	463c      	mov	r4, r7
    f0da:	e7d5      	b.n	f088 <at_parse_process_element+0x12c>
    f0dc:	4627      	mov	r7, r4
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
    f0de:	00bb      	lsls	r3, r7, #2
    f0e0:	4631      	mov	r1, r6
    f0e2:	4628      	mov	r0, r5
    f0e4:	aa02      	add	r2, sp, #8
    f0e6:	f009 fe6b 	bl	18dc0 <at_params_array_put>
		tmpstr++;
    f0ea:	9b00      	ldr	r3, [sp, #0]
    f0ec:	3301      	adds	r3, #1
    f0ee:	9300      	str	r3, [sp, #0]
    f0f0:	e79f      	b.n	f032 <at_parse_process_element+0xd6>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
    f0f2:	220a      	movs	r2, #10
    f0f4:	4620      	mov	r0, r4
    f0f6:	a902      	add	r1, sp, #8
    f0f8:	f006 fef8 	bl	15eec <strtoll>
    f0fc:	460b      	mov	r3, r1
		tmpstr = next;
    f0fe:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
    f100:	4602      	mov	r2, r0
		tmpstr = next;
    f102:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
    f104:	4628      	mov	r0, r5
    f106:	4631      	mov	r1, r6
    f108:	f009 fe22 	bl	18d50 <at_params_int_put>
    f10c:	e791      	b.n	f032 <at_parse_process_element+0xd6>
    f10e:	2101      	movs	r1, #1
    f110:	e75d      	b.n	efce <at_parse_process_element+0x72>
		return -1;
    f112:	f04f 30ff 	mov.w	r0, #4294967295
    f116:	e790      	b.n	f03a <at_parse_process_element+0xde>
    f118:	2000ebed 	.word	0x2000ebed
    f11c:	0001e02d 	.word	0x0001e02d

0000f120 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
    f120:	b510      	push	{r4, lr}
    f122:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
    f124:	f7f9 fe66 	bl	8df4 <strlen>
    f128:	2801      	cmp	r0, #1
    f12a:	d921      	bls.n	f170 <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
    f12c:	7823      	ldrb	r3, [r4, #0]
    f12e:	4912      	ldr	r1, [pc, #72]	; (f178 <is_command+0x58>)
    f130:	5cca      	ldrb	r2, [r1, r3]
    f132:	f002 0203 	and.w	r2, r2, #3
    f136:	2a02      	cmp	r2, #2
    f138:	bf08      	it	eq
    f13a:	3b20      	subeq	r3, #32
    f13c:	2b41      	cmp	r3, #65	; 0x41
    f13e:	d117      	bne.n	f170 <is_command+0x50>
    f140:	7863      	ldrb	r3, [r4, #1]
    f142:	5cca      	ldrb	r2, [r1, r3]
    f144:	f002 0203 	and.w	r2, r2, #3
    f148:	2a02      	cmp	r2, #2
    f14a:	bf08      	it	eq
    f14c:	3b20      	subeq	r3, #32
    f14e:	2b54      	cmp	r3, #84	; 0x54
    f150:	d10e      	bne.n	f170 <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
    f152:	78a2      	ldrb	r2, [r4, #2]
    f154:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
    f158:	2b23      	cmp	r3, #35	; 0x23
    f15a:	d00b      	beq.n	f174 <is_command+0x54>
    f15c:	2a25      	cmp	r2, #37	; 0x25
    f15e:	d009      	beq.n	f174 <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
    f160:	4610      	mov	r0, r2
    f162:	f009 fd78 	bl	18c56 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
    f166:	b910      	cbnz	r0, f16e <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
    f168:	fab2 f082 	clz	r0, r2
    f16c:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
    f16e:	bd10      	pop	{r4, pc}
		return false;
    f170:	2000      	movs	r0, #0
    f172:	e7fc      	b.n	f16e <is_command+0x4e>
		return true;
    f174:	2001      	movs	r0, #1
    f176:	e7fa      	b.n	f16e <is_command+0x4e>
    f178:	0001e02d 	.word	0x0001e02d

0000f17c <at_parse_detect_type>:
{
    f17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f180:	4607      	mov	r7, r0
	const char *tmpstr = *str;
    f182:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
    f184:	f8df 81b0 	ldr.w	r8, [pc, #432]	; f338 <at_parse_detect_type+0x1bc>
    f188:	2900      	cmp	r1, #0
    f18a:	d13d      	bne.n	f208 <at_parse_detect_type+0x8c>
    f18c:	7820      	ldrb	r0, [r4, #0]
    f18e:	f009 fd56 	bl	18c3e <is_notification>
    f192:	4e61      	ldr	r6, [pc, #388]	; (f318 <at_parse_detect_type+0x19c>)
    f194:	4605      	mov	r5, r0
    f196:	b360      	cbz	r0, f1f2 <at_parse_detect_type+0x76>
	state = new_state;
    f198:	2306      	movs	r3, #6
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
    f19a:	2205      	movs	r2, #5
    f19c:	4620      	mov	r0, r4
    f19e:	495f      	ldr	r1, [pc, #380]	; (f31c <at_parse_detect_type+0x1a0>)
	state = new_state;
    f1a0:	7033      	strb	r3, [r6, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
    f1a2:	f00b fc21 	bl	1a9e8 <strncmp>
    f1a6:	b1f8      	cbz	r0, f1e8 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
    f1a8:	2205      	movs	r2, #5
    f1aa:	4620      	mov	r0, r4
    f1ac:	495c      	ldr	r1, [pc, #368]	; (f320 <at_parse_detect_type+0x1a4>)
    f1ae:	f00b fc1b 	bl	1a9e8 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
    f1b2:	b1c8      	cbz	r0, f1e8 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
    f1b4:	220b      	movs	r2, #11
    f1b6:	4620      	mov	r0, r4
    f1b8:	495a      	ldr	r1, [pc, #360]	; (f324 <at_parse_detect_type+0x1a8>)
    f1ba:	f00b fc15 	bl	1a9e8 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
    f1be:	b198      	cbz	r0, f1e8 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
    f1c0:	220a      	movs	r2, #10
    f1c2:	4620      	mov	r0, r4
    f1c4:	4958      	ldr	r1, [pc, #352]	; (f328 <at_parse_detect_type+0x1ac>)
    f1c6:	f00b fc0f 	bl	1a9e8 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
    f1ca:	b168      	cbz	r0, f1e8 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
    f1cc:	220b      	movs	r2, #11
    f1ce:	4620      	mov	r0, r4
    f1d0:	4956      	ldr	r1, [pc, #344]	; (f32c <at_parse_detect_type+0x1b0>)
    f1d2:	f00b fc09 	bl	1a9e8 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
    f1d6:	b138      	cbz	r0, f1e8 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
    f1d8:	2207      	movs	r2, #7
    f1da:	4620      	mov	r0, r4
    f1dc:	4954      	ldr	r1, [pc, #336]	; (f330 <at_parse_detect_type+0x1b4>)
    f1de:	f00b fc03 	bl	1a9e8 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
    f1e2:	fab0 f580 	clz	r5, r0
    f1e6:	096d      	lsrs	r5, r5, #5
		set_type_string = check_response_for_forced_string(tmpstr);
    f1e8:	f888 5000 	strb.w	r5, [r8]
	return 0;
    f1ec:	2000      	movs	r0, #0
	*str = tmpstr;
    f1ee:	603c      	str	r4, [r7, #0]
	return 0;
    f1f0:	e04e      	b.n	f290 <at_parse_detect_type+0x114>
	} else if (set_type_string) {
    f1f2:	f898 3000 	ldrb.w	r3, [r8]
    f1f6:	b953      	cbnz	r3, f20e <at_parse_detect_type+0x92>
	} else if ((index == 0) && is_command(tmpstr)) {
    f1f8:	4620      	mov	r0, r4
    f1fa:	f7ff ff91 	bl	f120 <is_command>
    f1fe:	2800      	cmp	r0, #0
    f200:	d048      	beq.n	f294 <at_parse_detect_type+0x118>
	state = new_state;
    f202:	2307      	movs	r3, #7
    f204:	7033      	strb	r3, [r6, #0]
}
    f206:	e7f1      	b.n	f1ec <at_parse_detect_type+0x70>
	} else if (set_type_string) {
    f208:	f898 3000 	ldrb.w	r3, [r8]
    f20c:	b11b      	cbz	r3, f216 <at_parse_detect_type+0x9a>
	state = new_state;
    f20e:	2202      	movs	r2, #2
    f210:	4b41      	ldr	r3, [pc, #260]	; (f318 <at_parse_detect_type+0x19c>)
    f212:	701a      	strb	r2, [r3, #0]
}
    f214:	e7ea      	b.n	f1ec <at_parse_detect_type+0x70>
	} else if ((index > 0) && is_clac(tmpstr)) {
    f216:	2900      	cmp	r1, #0
    f218:	dd43      	ble.n	f2a2 <at_parse_detect_type+0x126>
    f21a:	4622      	mov	r2, r4
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
    f21c:	7815      	ldrb	r5, [r2, #0]
    f21e:	4616      	mov	r6, r2
    f220:	4628      	mov	r0, r5
    f222:	3201      	adds	r2, #1
    f224:	f009 fd17 	bl	18c56 <is_lfcr>
    f228:	2800      	cmp	r0, #0
    f22a:	d1f7      	bne.n	f21c <at_parse_detect_type+0xa0>
		str++;
	}

	if (strlen(str) < 4) {
    f22c:	4630      	mov	r0, r6
    f22e:	f7f9 fde1 	bl	8df4 <strlen>
    f232:	2803      	cmp	r0, #3
    f234:	d930      	bls.n	f298 <at_parse_detect_type+0x11c>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
    f236:	462b      	mov	r3, r5
    f238:	4a3e      	ldr	r2, [pc, #248]	; (f334 <at_parse_detect_type+0x1b8>)
    f23a:	5d51      	ldrb	r1, [r2, r5]
    f23c:	f001 0103 	and.w	r1, r1, #3
    f240:	2902      	cmp	r1, #2
    f242:	bf08      	it	eq
    f244:	f1a5 0320 	subeq.w	r3, r5, #32
    f248:	2b41      	cmp	r3, #65	; 0x41
    f24a:	d125      	bne.n	f298 <at_parse_detect_type+0x11c>
    f24c:	7873      	ldrb	r3, [r6, #1]
    f24e:	5cd1      	ldrb	r1, [r2, r3]
    f250:	f001 0103 	and.w	r1, r1, #3
    f254:	2902      	cmp	r1, #2
    f256:	bf08      	it	eq
    f258:	3b20      	subeq	r3, #32
    f25a:	2b54      	cmp	r3, #84	; 0x54
    f25c:	d11c      	bne.n	f298 <at_parse_detect_type+0x11c>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
    f25e:	78b3      	ldrb	r3, [r6, #2]
    f260:	5cd1      	ldrb	r1, [r2, r3]
    f262:	f001 0103 	and.w	r1, r1, #3
    f266:	2902      	cmp	r1, #2
    f268:	bf08      	it	eq
    f26a:	3b20      	subeq	r3, #32
    f26c:	2b2b      	cmp	r3, #43	; 0x2b
    f26e:	d00a      	beq.n	f286 <at_parse_detect_type+0x10a>
    f270:	2b25      	cmp	r3, #37	; 0x25
    f272:	d111      	bne.n	f298 <at_parse_detect_type+0x11c>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
    f274:	78f3      	ldrb	r3, [r6, #3]
    f276:	5cd2      	ldrb	r2, [r2, r3]
    f278:	f002 0203 	and.w	r2, r2, #3
    f27c:	2a02      	cmp	r2, #2
    f27e:	bf08      	it	eq
    f280:	3b20      	subeq	r3, #32
    f282:	2b58      	cmp	r3, #88	; 0x58
    f284:	d008      	beq.n	f298 <at_parse_detect_type+0x11c>
	state = new_state;
    f286:	2209      	movs	r2, #9
		return -2;
    f288:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
    f28c:	4b22      	ldr	r3, [pc, #136]	; (f318 <at_parse_detect_type+0x19c>)
    f28e:	701a      	strb	r2, [r3, #0]
}
    f290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	state = new_state;
    f294:	2302      	movs	r3, #2
    f296:	e7b5      	b.n	f204 <at_parse_detect_type+0x88>
	} else if ((index > 0) && is_notification(*tmpstr)) {
    f298:	7820      	ldrb	r0, [r4, #0]
    f29a:	f009 fcd0 	bl	18c3e <is_notification>
    f29e:	2800      	cmp	r0, #0
    f2a0:	d136      	bne.n	f310 <at_parse_detect_type+0x194>
	} else if (is_number(*tmpstr)) {
    f2a2:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
    f2a4:	4b23      	ldr	r3, [pc, #140]	; (f334 <at_parse_detect_type+0x1b8>)
    f2a6:	5c9b      	ldrb	r3, [r3, r2]
    f2a8:	075b      	lsls	r3, r3, #29
    f2aa:	d40a      	bmi.n	f2c2 <at_parse_detect_type+0x146>
    f2ac:	2a2d      	cmp	r2, #45	; 0x2d
    f2ae:	d008      	beq.n	f2c2 <at_parse_detect_type+0x146>
    f2b0:	2a2b      	cmp	r2, #43	; 0x2b
    f2b2:	d006      	beq.n	f2c2 <at_parse_detect_type+0x146>
	if (chr == '"') {
    f2b4:	2a22      	cmp	r2, #34	; 0x22
    f2b6:	d107      	bne.n	f2c8 <at_parse_detect_type+0x14c>
	state = new_state;
    f2b8:	2203      	movs	r2, #3
    f2ba:	4b17      	ldr	r3, [pc, #92]	; (f318 <at_parse_detect_type+0x19c>)
		tmpstr++;
    f2bc:	3401      	adds	r4, #1
	state = new_state;
    f2be:	701a      	strb	r2, [r3, #0]
		tmpstr++;
    f2c0:	e794      	b.n	f1ec <at_parse_detect_type+0x70>
	state = new_state;
    f2c2:	2204      	movs	r2, #4
    f2c4:	4b14      	ldr	r3, [pc, #80]	; (f318 <at_parse_detect_type+0x19c>)
    f2c6:	e7a4      	b.n	f212 <at_parse_detect_type+0x96>
	if (chr == '(') {
    f2c8:	2a28      	cmp	r2, #40	; 0x28
    f2ca:	d104      	bne.n	f2d6 <at_parse_detect_type+0x15a>
    f2cc:	2201      	movs	r2, #1
    f2ce:	4b12      	ldr	r3, [pc, #72]	; (f318 <at_parse_detect_type+0x19c>)
		tmpstr++;
    f2d0:	4414      	add	r4, r2
	state = new_state;
    f2d2:	701a      	strb	r2, [r3, #0]
		tmpstr++;
    f2d4:	e78a      	b.n	f1ec <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
    f2d6:	4610      	mov	r0, r2
    f2d8:	f009 fcbd 	bl	18c56 <is_lfcr>
    f2dc:	b188      	cbz	r0, f302 <at_parse_detect_type+0x186>
    f2de:	490e      	ldr	r1, [pc, #56]	; (f318 <at_parse_detect_type+0x19c>)
    f2e0:	780b      	ldrb	r3, [r1, #0]
    f2e2:	2b04      	cmp	r3, #4
    f2e4:	d10a      	bne.n	f2fc <at_parse_detect_type+0x180>
    f2e6:	4622      	mov	r2, r4
    f2e8:	4614      	mov	r4, r2
		while (is_lfcr(*tmpstr)) {
    f2ea:	f812 0b01 	ldrb.w	r0, [r2], #1
    f2ee:	f009 fcb2 	bl	18c56 <is_lfcr>
    f2f2:	2800      	cmp	r0, #0
    f2f4:	d1f8      	bne.n	f2e8 <at_parse_detect_type+0x16c>
	state = new_state;
    f2f6:	2305      	movs	r3, #5
    f2f8:	700b      	strb	r3, [r1, #0]
}
    f2fa:	e777      	b.n	f1ec <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
    f2fc:	2b08      	cmp	r3, #8
    f2fe:	f43f af75 	beq.w	f1ec <at_parse_detect_type+0x70>
	} else if (is_separator(*tmpstr)) {
    f302:	4610      	mov	r0, r2
    f304:	f7ff fe04 	bl	ef10 <is_separator>
    f308:	b110      	cbz	r0, f310 <at_parse_detect_type+0x194>
	state = new_state;
    f30a:	2208      	movs	r2, #8
    f30c:	4b02      	ldr	r3, [pc, #8]	; (f318 <at_parse_detect_type+0x19c>)
    f30e:	e780      	b.n	f212 <at_parse_detect_type+0x96>
		return -1;
    f310:	f04f 30ff 	mov.w	r0, #4294967295
    f314:	e7bc      	b.n	f290 <at_parse_detect_type+0x114>
    f316:	bf00      	nop
    f318:	2000ebed 	.word	0x2000ebed
    f31c:	0001cb9c 	.word	0x0001cb9c
    f320:	0001cba2 	.word	0x0001cba2
    f324:	0001cba8 	.word	0x0001cba8
    f328:	0001cbb4 	.word	0x0001cbb4
    f32c:	0001cbbf 	.word	0x0001cbbf
    f330:	0001cbcb 	.word	0x0001cbcb
    f334:	0001e02d 	.word	0x0001e02d
    f338:	2000ebec 	.word	0x2000ebec

0000f33c <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
    f33c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f340:	4689      	mov	r9, r1
    f342:	4616      	mov	r6, r2
    f344:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
    f346:	4680      	mov	r8, r0
    f348:	2800      	cmp	r0, #0
    f34a:	f000 8099 	beq.w	f480 <at_parser_max_params_from_str+0x144>
    f34e:	2a00      	cmp	r2, #0
    f350:	f000 8096 	beq.w	f480 <at_parser_max_params_from_str+0x144>
    f354:	6853      	ldr	r3, [r2, #4]
    f356:	2b00      	cmp	r3, #0
    f358:	f000 8092 	beq.w	f480 <at_parser_max_params_from_str+0x144>
	state = IDLE;
    f35c:	2400      	movs	r4, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
    f35e:	4610      	mov	r0, r2
    f360:	f009 fcbc 	bl	18cdc <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
    f364:	4642      	mov	r2, r8
    f366:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
    f368:	f8cd 8004 	str.w	r8, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
    f36c:	429f      	cmp	r7, r3
    f36e:	bf28      	it	cs
    f370:	461f      	movcs	r7, r3
	state = IDLE;
    f372:	4b45      	ldr	r3, [pc, #276]	; (f488 <at_parser_max_params_from_str+0x14c>)
    f374:	701c      	strb	r4, [r3, #0]
	set_type_string = false;
    f376:	4b45      	ldr	r3, [pc, #276]	; (f48c <at_parser_max_params_from_str+0x150>)
    f378:	701c      	strb	r4, [r3, #0]
    f37a:	4611      	mov	r1, r2
	while (is_lfcr(*str)) {
    f37c:	7808      	ldrb	r0, [r1, #0]
    f37e:	f009 fc6a 	bl	18c56 <is_lfcr>
    f382:	4625      	mov	r5, r4
    f384:	3201      	adds	r2, #1
    f386:	4604      	mov	r4, r0
    f388:	2800      	cmp	r0, #0
    f38a:	d1f6      	bne.n	f37a <at_parser_max_params_from_str+0x3e>
    f38c:	b105      	cbz	r5, f390 <at_parser_max_params_from_str+0x54>
    f38e:	9101      	str	r1, [sp, #4]
	int index = 0;
    f390:	2500      	movs	r5, #0
		if (isspace((int)*str)) {
    f392:	f8df b0fc 	ldr.w	fp, [pc, #252]	; f490 <at_parser_max_params_from_str+0x154>
	while ((!is_terminated(*str)) && (index < max_params)) {
    f396:	9b01      	ldr	r3, [sp, #4]
    f398:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
    f39a:	2a00      	cmp	r2, #0
    f39c:	d050      	beq.n	f440 <at_parser_max_params_from_str+0x104>
    f39e:	42af      	cmp	r7, r5
    f3a0:	d94e      	bls.n	f440 <at_parser_max_params_from_str+0x104>
		if (isspace((int)*str)) {
    f3a2:	f81b 2002 	ldrb.w	r2, [fp, r2]
		ret = at_parse_detect_type(&str, index);
    f3a6:	4629      	mov	r1, r5
		if (isspace((int)*str)) {
    f3a8:	0712      	lsls	r2, r2, #28
			str++;
    f3aa:	bf48      	it	mi
    f3ac:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
    f3ae:	a801      	add	r0, sp, #4
			str++;
    f3b0:	bf48      	it	mi
    f3b2:	9301      	strmi	r3, [sp, #4]
		ret = at_parse_detect_type(&str, index);
    f3b4:	f7ff fee2 	bl	f17c <at_parse_detect_type>
		if (ret == -1) {
    f3b8:	1c43      	adds	r3, r0, #1
    f3ba:	d041      	beq.n	f440 <at_parser_max_params_from_str+0x104>
		if (ret == -2) {
    f3bc:	3002      	adds	r0, #2
			index = 0;
    f3be:	bf08      	it	eq
    f3c0:	2500      	moveq	r5, #0
		if (at_parse_process_element(&str, index, list) == -1) {
    f3c2:	4632      	mov	r2, r6
    f3c4:	4629      	mov	r1, r5
    f3c6:	a801      	add	r0, sp, #4
			str = *at_params_str;
    f3c8:	bf08      	it	eq
    f3ca:	f8cd 8004 	streq.w	r8, [sp, #4]
		if (at_parse_process_element(&str, index, list) == -1) {
    f3ce:	f7ff fdc5 	bl	ef5c <at_parse_process_element>
    f3d2:	3001      	adds	r0, #1
    f3d4:	d034      	beq.n	f440 <at_parser_max_params_from_str+0x104>
		if (is_separator(*str)) {
    f3d6:	9a01      	ldr	r2, [sp, #4]
    f3d8:	7810      	ldrb	r0, [r2, #0]
    f3da:	f7ff fd99 	bl	ef10 <is_separator>
    f3de:	b1b0      	cbz	r0, f40e <at_parser_max_params_from_str+0xd2>
			if (is_lfcr(*(str + 1))) {
    f3e0:	7850      	ldrb	r0, [r2, #1]
    f3e2:	f009 fc38 	bl	18c56 <is_lfcr>
    f3e6:	b178      	cbz	r0, f408 <at_parser_max_params_from_str+0xcc>
				index++;
    f3e8:	3501      	adds	r5, #1
				if (index == max_params) {
    f3ea:	42bd      	cmp	r5, r7
    f3ec:	d041      	beq.n	f472 <at_parser_max_params_from_str+0x136>
				if (at_parse_detect_type(&str, index) == -1) {
    f3ee:	4629      	mov	r1, r5
    f3f0:	a801      	add	r0, sp, #4
    f3f2:	f7ff fec3 	bl	f17c <at_parse_detect_type>
    f3f6:	3001      	adds	r0, #1
    f3f8:	d022      	beq.n	f440 <at_parser_max_params_from_str+0x104>
				if (at_parse_process_element(&str, index,
    f3fa:	4632      	mov	r2, r6
    f3fc:	4629      	mov	r1, r5
    f3fe:	a801      	add	r0, sp, #4
    f400:	f7ff fdac 	bl	ef5c <at_parse_process_element>
    f404:	3001      	adds	r0, #1
    f406:	d01b      	beq.n	f440 <at_parser_max_params_from_str+0x104>
			str++;
    f408:	9b01      	ldr	r3, [sp, #4]
    f40a:	3301      	adds	r3, #1
    f40c:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
    f40e:	9a01      	ldr	r2, [sp, #4]
    f410:	7810      	ldrb	r0, [r2, #0]
    f412:	f009 fc20 	bl	18c56 <is_lfcr>
    f416:	b338      	cbz	r0, f468 <at_parser_max_params_from_str+0x12c>
    f418:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
    f41a:	7811      	ldrb	r1, [r2, #0]
    f41c:	4692      	mov	sl, r2
    f41e:	4608      	mov	r0, r1
    f420:	3201      	adds	r2, #1
    f422:	f009 fc18 	bl	18c56 <is_lfcr>
    f426:	2800      	cmp	r0, #0
    f428:	d1f7      	bne.n	f41a <at_parser_max_params_from_str+0xde>
    f42a:	b139      	cbz	r1, f43c <at_parser_max_params_from_str+0x100>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
    f42c:	4608      	mov	r0, r1
    f42e:	f009 fc06 	bl	18c3e <is_notification>
    f432:	b918      	cbnz	r0, f43c <at_parser_max_params_from_str+0x100>
			    is_result(str + i)) {
    f434:	4650      	mov	r0, sl
    f436:	f7ff fd79 	bl	ef2c <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
    f43a:	b1a8      	cbz	r0, f468 <at_parser_max_params_from_str+0x12c>
				str += i;
    f43c:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
    f440:	9d01      	ldr	r5, [sp, #4]
	if (oversized) {
    f442:	b9c4      	cbnz	r4, f476 <at_parser_max_params_from_str+0x13a>
    f444:	782b      	ldrb	r3, [r5, #0]
    f446:	b1cb      	cbz	r3, f47c <at_parser_max_params_from_str+0x140>
	if (!is_terminated(*str) && !is_result(str)) {
    f448:	4628      	mov	r0, r5
    f44a:	f7ff fd6f 	bl	ef2c <is_result>
		return -EAGAIN;
    f44e:	2800      	cmp	r0, #0
    f450:	bf14      	ite	ne
    f452:	2000      	movne	r0, #0
    f454:	f06f 000a 	mvneq.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
    f458:	f1b9 0f00 	cmp.w	r9, #0
    f45c:	d001      	beq.n	f462 <at_parser_max_params_from_str+0x126>
		*next_param_str = (char *)at_params_str;
    f45e:	f8c9 5000 	str.w	r5, [r9]
	}

	return err;
}
    f462:	b003      	add	sp, #12
    f464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
    f468:	3501      	adds	r5, #1
			oversized = true;
    f46a:	42bd      	cmp	r5, r7
    f46c:	bf08      	it	eq
    f46e:	2401      	moveq	r4, #1
    f470:	e791      	b.n	f396 <at_parser_max_params_from_str+0x5a>
					oversized = true;
    f472:	4604      	mov	r4, r0
    f474:	e7e4      	b.n	f440 <at_parser_max_params_from_str+0x104>
		return -E2BIG;
    f476:	f06f 0006 	mvn.w	r0, #6
    f47a:	e7ed      	b.n	f458 <at_parser_max_params_from_str+0x11c>
	return 0;
    f47c:	4620      	mov	r0, r4
    f47e:	e7eb      	b.n	f458 <at_parser_max_params_from_str+0x11c>
		return -EINVAL;
    f480:	f06f 0015 	mvn.w	r0, #21
    f484:	e7ed      	b.n	f462 <at_parser_max_params_from_str+0x126>
    f486:	bf00      	nop
    f488:	2000ebed 	.word	0x2000ebed
    f48c:	2000ebec 	.word	0x2000ebec
    f490:	0001e02d 	.word	0x0001e02d

0000f494 <enable_notifications>:

	event_handler_list_dispatch(&evt);
}

static int enable_notifications(void)
{
    f494:	b530      	push	{r4, r5, lr}
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
    f496:	4825      	ldr	r0, [pc, #148]	; (f52c <enable_notifications+0x98>)
{
    f498:	b093      	sub	sp, #76	; 0x4c
	err = nrf_modem_at_printf(AT_CEREG_5);
    f49a:	f002 fecb 	bl	12234 <nrf_modem_at_printf>
	if (err) {
    f49e:	4604      	mov	r4, r0
    f4a0:	b178      	cbz	r0, f4c2 <enable_notifications+0x2e>
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
    f4a2:	4b23      	ldr	r3, [pc, #140]	; (f530 <enable_notifications+0x9c>)
    f4a4:	9003      	str	r0, [sp, #12]
    f4a6:	9302      	str	r3, [sp, #8]
    f4a8:	2300      	movs	r3, #0
    f4aa:	2201      	movs	r2, #1
    f4ac:	4618      	mov	r0, r3
    f4ae:	e9cd 3300 	strd	r3, r3, [sp]
    f4b2:	4920      	ldr	r1, [pc, #128]	; (f534 <enable_notifications+0xa0>)
    f4b4:	f009 fd3c 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
    f4b8:	f06f 040d 	mvn.w	r4, #13
			LOG_WRN("Current modem firmware version: %s", buf);
		}
	}

	return 0;
}
    f4bc:	4620      	mov	r0, r4
    f4be:	b013      	add	sp, #76	; 0x4c
    f4c0:	bd30      	pop	{r4, r5, pc}
	err = nrf_modem_at_printf(cscon);
    f4c2:	481d      	ldr	r0, [pc, #116]	; (f538 <enable_notifications+0xa4>)
    f4c4:	f002 feb6 	bl	12234 <nrf_modem_at_printf>
	if (err) {
    f4c8:	2800      	cmp	r0, #0
    f4ca:	d0f7      	beq.n	f4bc <enable_notifications+0x28>
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
    f4cc:	4b1b      	ldr	r3, [pc, #108]	; (f53c <enable_notifications+0xa8>)
    f4ce:	2202      	movs	r2, #2
    f4d0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    f4d4:	4917      	ldr	r1, [pc, #92]	; (f534 <enable_notifications+0xa0>)
    f4d6:	4623      	mov	r3, r4
    f4d8:	9003      	str	r0, [sp, #12]
    f4da:	9400      	str	r4, [sp, #0]
    f4dc:	4620      	mov	r0, r4
    f4de:	f009 fd27 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
    f4e2:	4b17      	ldr	r3, [pc, #92]	; (f540 <enable_notifications+0xac>)
    f4e4:	2202      	movs	r2, #2
    f4e6:	4620      	mov	r0, r4
    f4e8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    f4ec:	4911      	ldr	r1, [pc, #68]	; (f534 <enable_notifications+0xa0>)
    f4ee:	4623      	mov	r3, r4
    f4f0:	9400      	str	r4, [sp, #0]
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
    f4f2:	ad05      	add	r5, sp, #20
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
    f4f4:	f009 fd1c 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
    f4f8:	2132      	movs	r1, #50	; 0x32
    f4fa:	4628      	mov	r0, r5
    f4fc:	4a11      	ldr	r2, [pc, #68]	; (f544 <enable_notifications+0xb0>)
    f4fe:	f002 fee5 	bl	122cc <nrf_modem_at_cmd>
		if (err == 0) {
    f502:	2800      	cmp	r0, #0
    f504:	d1da      	bne.n	f4bc <enable_notifications+0x28>
			char *end = strstr(buf, "\r\nOK");
    f506:	4628      	mov	r0, r5
    f508:	490f      	ldr	r1, [pc, #60]	; (f548 <enable_notifications+0xb4>)
    f50a:	f00b fa9e 	bl	1aa4a <strstr>
			if (end) {
    f50e:	b100      	cbz	r0, f512 <enable_notifications+0x7e>
				*end = '\0';
    f510:	7004      	strb	r4, [r0, #0]
			LOG_WRN("Current modem firmware version: %s", buf);
    f512:	4b0e      	ldr	r3, [pc, #56]	; (f54c <enable_notifications+0xb8>)
    f514:	2202      	movs	r2, #2
    f516:	9302      	str	r3, [sp, #8]
    f518:	2300      	movs	r3, #0
    f51a:	4906      	ldr	r1, [pc, #24]	; (f534 <enable_notifications+0xa0>)
    f51c:	4618      	mov	r0, r3
    f51e:	e9cd 3300 	strd	r3, r3, [sp]
    f522:	9503      	str	r5, [sp, #12]
    f524:	f009 fd04 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
    f528:	e7c8      	b.n	f4bc <enable_notifications+0x28>
    f52a:	bf00      	nop
    f52c:	0001cbf6 	.word	0x0001cbf6
    f530:	0001cc01 	.word	0x0001cc01
    f534:	0001b614 	.word	0x0001b614
    f538:	0001d3aa 	.word	0x0001d3aa
    f53c:	0001cc37 	.word	0x0001cc37
    f540:	0001cc6f 	.word	0x0001cc6f
    f544:	0001cca0 	.word	0x0001cca0
    f548:	0001cca8 	.word	0x0001cca8
    f54c:	0001ccad 	.word	0x0001ccad

0000f550 <at_handler_mdmev>:
{
    f550:	b510      	push	{r4, lr}
    f552:	4604      	mov	r4, r0
    f554:	b096      	sub	sp, #88	; 0x58
	struct lte_lc_evt evt = {0};
    f556:	2100      	movs	r1, #0
    f558:	2248      	movs	r2, #72	; 0x48
    f55a:	a804      	add	r0, sp, #16
    f55c:	f00b f8cf 	bl	1a6fe <memset>
	err = parse_mdmev(response, &evt.modem_evt);
    f560:	4620      	mov	r0, r4
    f562:	a906      	add	r1, sp, #24
    f564:	f001 fc72 	bl	10e4c <parse_mdmev>
	if (err) {
    f568:	b160      	cbz	r0, f584 <at_handler_mdmev+0x34>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
    f56a:	4b0a      	ldr	r3, [pc, #40]	; (f594 <at_handler_mdmev+0x44>)
    f56c:	9003      	str	r0, [sp, #12]
    f56e:	9302      	str	r3, [sp, #8]
    f570:	2300      	movs	r3, #0
    f572:	2201      	movs	r2, #1
    f574:	4618      	mov	r0, r3
    f576:	e9cd 3300 	strd	r3, r3, [sp]
    f57a:	4907      	ldr	r1, [pc, #28]	; (f598 <at_handler_mdmev+0x48>)
    f57c:	f009 fcd8 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
}
    f580:	b016      	add	sp, #88	; 0x58
    f582:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_MODEM_EVENT;
    f584:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
    f586:	a804      	add	r0, sp, #16
	evt.type = LTE_LC_EVT_MODEM_EVENT;
    f588:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
    f58c:	f000 fd52 	bl	10034 <event_handler_list_dispatch>
    f590:	e7f6      	b.n	f580 <at_handler_mdmev+0x30>
    f592:	bf00      	nop
    f594:	0001ccd0 	.word	0x0001ccd0
    f598:	0001b614 	.word	0x0001b614

0000f59c <at_handler_xmodemsleep>:
{
    f59c:	b510      	push	{r4, lr}
    f59e:	4604      	mov	r4, r0
    f5a0:	b096      	sub	sp, #88	; 0x58
	struct lte_lc_evt evt = {0};
    f5a2:	2100      	movs	r1, #0
    f5a4:	2248      	movs	r2, #72	; 0x48
    f5a6:	a804      	add	r0, sp, #16
    f5a8:	f00b f8a9 	bl	1a6fe <memset>
	err = parse_xmodemsleep(response, &evt.modem_sleep);
    f5ac:	4620      	mov	r0, r4
    f5ae:	a906      	add	r1, sp, #24
    f5b0:	f001 fbda 	bl	10d68 <parse_xmodemsleep>
	if (err) {
    f5b4:	b160      	cbz	r0, f5d0 <at_handler_xmodemsleep+0x34>
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
    f5b6:	4b14      	ldr	r3, [pc, #80]	; (f608 <at_handler_xmodemsleep+0x6c>)
    f5b8:	9003      	str	r0, [sp, #12]
    f5ba:	9302      	str	r3, [sp, #8]
    f5bc:	2300      	movs	r3, #0
    f5be:	2201      	movs	r2, #1
    f5c0:	4618      	mov	r0, r3
    f5c2:	e9cd 3300 	strd	r3, r3, [sp]
    f5c6:	4911      	ldr	r1, [pc, #68]	; (f60c <at_handler_xmodemsleep+0x70>)
    f5c8:	f009 fcb2 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
}
    f5cc:	b016      	add	sp, #88	; 0x58
    f5ce:	bd10      	pop	{r4, pc}
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
    f5d0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    f5d4:	1e5a      	subs	r2, r3, #1
    f5d6:	2a03      	cmp	r2, #3
    f5d8:	d901      	bls.n	f5de <at_handler_xmodemsleep+0x42>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_FLIGHT_MODE) &&
    f5da:	2b07      	cmp	r3, #7
    f5dc:	d1f6      	bne.n	f5cc <at_handler_xmodemsleep+0x30>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
    f5de:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
    f5e2:	f5a2 539c 	sub.w	r3, r2, #4992	; 0x1380
    f5e6:	3b08      	subs	r3, #8
    f5e8:	430b      	orrs	r3, r1
    f5ea:	d008      	beq.n	f5fe <at_handler_xmodemsleep+0x62>
	} else if (evt.modem_sleep.time == 0) {
    f5ec:	430a      	orrs	r2, r1
    f5ee:	d008      	beq.n	f602 <at_handler_xmodemsleep+0x66>
    f5f0:	230a      	movs	r3, #10
	event_handler_list_dispatch(&evt);
    f5f2:	a804      	add	r0, sp, #16
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
    f5f4:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
    f5f8:	f000 fd1c 	bl	10034 <event_handler_list_dispatch>
    f5fc:	e7e6      	b.n	f5cc <at_handler_xmodemsleep+0x30>
    f5fe:	2308      	movs	r3, #8
    f600:	e7f7      	b.n	f5f2 <at_handler_xmodemsleep+0x56>
    f602:	2309      	movs	r3, #9
    f604:	e7f5      	b.n	f5f2 <at_handler_xmodemsleep+0x56>
    f606:	bf00      	nop
    f608:	0001cd00 	.word	0x0001cd00
    f60c:	0001b614 	.word	0x0001b614

0000f610 <at_handler_ncellmeas>:
{
    f610:	b570      	push	{r4, r5, r6, lr}
    f612:	b0a8      	sub	sp, #160	; 0xa0
	struct lte_lc_evt evt = {0};
    f614:	2100      	movs	r1, #0
    f616:	2248      	movs	r2, #72	; 0x48
{
    f618:	4605      	mov	r5, r0
	struct lte_lc_evt evt = {0};
    f61a:	a804      	add	r0, sp, #16
    f61c:	f00b f86f 	bl	1a6fe <memset>
	if (event_handler_list_is_empty() || !ncellmeas_ongoing) {
    f620:	f000 fd00 	bl	10024 <event_handler_list_is_empty>
    f624:	4e4e      	ldr	r6, [pc, #312]	; (f760 <at_handler_ncellmeas+0x150>)
    f626:	4601      	mov	r1, r0
    f628:	b9c8      	cbnz	r0, f65e <at_handler_ncellmeas+0x4e>
    f62a:	7833      	ldrb	r3, [r6, #0]
    f62c:	b1bb      	cbz	r3, f65e <at_handler_ncellmeas+0x4e>
	if (ncellmeas_params.search_type > LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
    f62e:	4c4d      	ldr	r4, [pc, #308]	; (f764 <at_handler_ncellmeas+0x154>)
    f630:	7823      	ldrb	r3, [r4, #0]
    f632:	2b03      	cmp	r3, #3
    f634:	d952      	bls.n	f6dc <at_handler_ncellmeas+0xcc>
	struct lte_lc_evt evt = {0};
    f636:	2248      	movs	r2, #72	; 0x48
    f638:	a816      	add	r0, sp, #88	; 0x58
    f63a:	f00b f860 	bl	1a6fe <memset>
	int max_cell_count = ncellmeas_params.gci_count;
    f63e:	7860      	ldrb	r0, [r4, #1]
	if (max_cell_count != 0) {
    f640:	b188      	cbz	r0, f666 <at_handler_ncellmeas+0x56>
		cells = k_calloc(max_cell_count, sizeof(struct lte_lc_cell));
    f642:	2130      	movs	r1, #48	; 0x30
    f644:	f00b f81e 	bl	1a684 <k_calloc>
		if (cells == NULL) {
    f648:	4604      	mov	r4, r0
    f64a:	b968      	cbnz	r0, f668 <at_handler_ncellmeas+0x58>
			LOG_ERR("Failed to allocate memory for the GCI cells");
    f64c:	4b46      	ldr	r3, [pc, #280]	; (f768 <at_handler_ncellmeas+0x158>)
			LOG_ERR("Failed to allocate memory for neighbor cells");
    f64e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    f652:	2201      	movs	r2, #1
    f654:	4623      	mov	r3, r4
    f656:	4945      	ldr	r1, [pc, #276]	; (f76c <at_handler_ncellmeas+0x15c>)
    f658:	9400      	str	r4, [sp, #0]
    f65a:	f009 fc69 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
	ncellmeas_ongoing = false;
    f65e:	2300      	movs	r3, #0
    f660:	7033      	strb	r3, [r6, #0]
}
    f662:	b028      	add	sp, #160	; 0xa0
    f664:	bd70      	pop	{r4, r5, r6, pc}
	struct lte_lc_cell *cells = NULL;
    f666:	4604      	mov	r4, r0
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
    f668:	aa18      	add	r2, sp, #96	; 0x60
    f66a:	4629      	mov	r1, r5
    f66c:	483d      	ldr	r0, [pc, #244]	; (f764 <at_handler_ncellmeas+0x154>)
	evt.cells_info.gci_cells = cells;
    f66e:	9427      	str	r4, [sp, #156]	; 0x9c
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
    f670:	f001 f904 	bl	1087c <parse_ncellmeas_gci>
	switch (err) {
    f674:	1dc2      	adds	r2, r0, #7
    f676:	d00d      	beq.n	f694 <at_handler_ncellmeas+0x84>
    f678:	2801      	cmp	r0, #1
    f67a:	d922      	bls.n	f6c2 <at_handler_ncellmeas+0xb2>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
    f67c:	4b3c      	ldr	r3, [pc, #240]	; (f770 <at_handler_ncellmeas+0x160>)
    f67e:	9003      	str	r0, [sp, #12]
    f680:	9302      	str	r3, [sp, #8]
    f682:	2300      	movs	r3, #0
    f684:	2201      	movs	r2, #1
    f686:	4618      	mov	r0, r3
    f688:	e9cd 3300 	strd	r3, r3, [sp]
    f68c:	4937      	ldr	r1, [pc, #220]	; (f76c <at_handler_ncellmeas+0x15c>)
    f68e:	f009 fc4f 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
    f692:	e01c      	b.n	f6ce <at_handler_ncellmeas+0xbe>
		LOG_WRN("Not all neighbor cells could be parsed");
    f694:	2500      	movs	r5, #0
    f696:	4b37      	ldr	r3, [pc, #220]	; (f774 <at_handler_ncellmeas+0x164>)
    f698:	2202      	movs	r2, #2
    f69a:	4628      	mov	r0, r5
    f69c:	4933      	ldr	r1, [pc, #204]	; (f76c <at_handler_ncellmeas+0x15c>)
    f69e:	9302      	str	r3, [sp, #8]
    f6a0:	e9cd 5500 	strd	r5, r5, [sp]
    f6a4:	462b      	mov	r3, r5
    f6a6:	f009 fc43 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
    f6aa:	230a      	movs	r3, #10
    f6ac:	9303      	str	r3, [sp, #12]
    f6ae:	4b32      	ldr	r3, [pc, #200]	; (f778 <at_handler_ncellmeas+0x168>)
    f6b0:	2202      	movs	r2, #2
    f6b2:	e9cd 5301 	strd	r5, r3, [sp, #4]
    f6b6:	4628      	mov	r0, r5
    f6b8:	462b      	mov	r3, r5
    f6ba:	492c      	ldr	r1, [pc, #176]	; (f76c <at_handler_ncellmeas+0x15c>)
    f6bc:	9500      	str	r5, [sp, #0]
    f6be:	f009 fc37 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
    f6c2:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
    f6c4:	a816      	add	r0, sp, #88	; 0x58
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
    f6c6:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		event_handler_list_dispatch(&evt);
    f6ca:	f000 fcb3 	bl	10034 <event_handler_list_dispatch>
	k_free(cells);
    f6ce:	4620      	mov	r0, r4
    f6d0:	f00a ffcd 	bl	1a66e <k_free>
	k_free(evt.cells_info.neighbor_cells);
    f6d4:	9825      	ldr	r0, [sp, #148]	; 0x94
		k_free(neighbor_cells);
    f6d6:	f00a ffca 	bl	1a66e <k_free>
    f6da:	e7c0      	b.n	f65e <at_handler_ncellmeas+0x4e>
	int ncell_count = neighborcell_count_get(response);
    f6dc:	4628      	mov	r0, r5
    f6de:	f000 ff3f 	bl	10560 <neighborcell_count_get>
    f6e2:	4604      	mov	r4, r0
	if (ncell_count != 0) {
    f6e4:	b130      	cbz	r0, f6f4 <at_handler_ncellmeas+0xe4>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
    f6e6:	2110      	movs	r1, #16
    f6e8:	f00a ffcc 	bl	1a684 <k_calloc>
		if (neighbor_cells == NULL) {
    f6ec:	4604      	mov	r4, r0
    f6ee:	b908      	cbnz	r0, f6f4 <at_handler_ncellmeas+0xe4>
			LOG_ERR("Failed to allocate memory for neighbor cells");
    f6f0:	4b22      	ldr	r3, [pc, #136]	; (f77c <at_handler_ncellmeas+0x16c>)
    f6f2:	e7ac      	b.n	f64e <at_handler_ncellmeas+0x3e>
	err = parse_ncellmeas(response, &evt.cells_info);
    f6f4:	4628      	mov	r0, r5
    f6f6:	a906      	add	r1, sp, #24
	evt.cells_info.neighbor_cells = neighbor_cells;
    f6f8:	9413      	str	r4, [sp, #76]	; 0x4c
	err = parse_ncellmeas(response, &evt.cells_info);
    f6fa:	f000 ff55 	bl	105a8 <parse_ncellmeas>
	switch (err) {
    f6fe:	1dc3      	adds	r3, r0, #7
    f700:	d00d      	beq.n	f71e <at_handler_ncellmeas+0x10e>
    f702:	2801      	cmp	r0, #1
    f704:	d922      	bls.n	f74c <at_handler_ncellmeas+0x13c>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
    f706:	4b1a      	ldr	r3, [pc, #104]	; (f770 <at_handler_ncellmeas+0x160>)
    f708:	9003      	str	r0, [sp, #12]
    f70a:	9302      	str	r3, [sp, #8]
    f70c:	2300      	movs	r3, #0
    f70e:	2201      	movs	r2, #1
    f710:	4618      	mov	r0, r3
    f712:	e9cd 3300 	strd	r3, r3, [sp]
    f716:	4915      	ldr	r1, [pc, #84]	; (f76c <at_handler_ncellmeas+0x15c>)
    f718:	f009 fc0a 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
    f71c:	e01c      	b.n	f758 <at_handler_ncellmeas+0x148>
		LOG_WRN("Not all neighbor cells could be parsed");
    f71e:	2500      	movs	r5, #0
    f720:	4b14      	ldr	r3, [pc, #80]	; (f774 <at_handler_ncellmeas+0x164>)
    f722:	2202      	movs	r2, #2
    f724:	4628      	mov	r0, r5
    f726:	4911      	ldr	r1, [pc, #68]	; (f76c <at_handler_ncellmeas+0x15c>)
    f728:	9302      	str	r3, [sp, #8]
    f72a:	e9cd 5500 	strd	r5, r5, [sp]
    f72e:	462b      	mov	r3, r5
    f730:	f009 fbfe 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
    f734:	230a      	movs	r3, #10
    f736:	9303      	str	r3, [sp, #12]
    f738:	4b0f      	ldr	r3, [pc, #60]	; (f778 <at_handler_ncellmeas+0x168>)
    f73a:	2202      	movs	r2, #2
    f73c:	e9cd 5301 	strd	r5, r3, [sp, #4]
    f740:	4628      	mov	r0, r5
    f742:	462b      	mov	r3, r5
    f744:	4909      	ldr	r1, [pc, #36]	; (f76c <at_handler_ncellmeas+0x15c>)
    f746:	9500      	str	r5, [sp, #0]
    f748:	f009 fbf2 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
    f74c:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
    f74e:	a804      	add	r0, sp, #16
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
    f750:	f88d 3010 	strb.w	r3, [sp, #16]
		event_handler_list_dispatch(&evt);
    f754:	f000 fc6e 	bl	10034 <event_handler_list_dispatch>
	if (neighbor_cells) {
    f758:	2c00      	cmp	r4, #0
    f75a:	d080      	beq.n	f65e <at_handler_ncellmeas+0x4e>
		k_free(neighbor_cells);
    f75c:	4620      	mov	r0, r4
    f75e:	e7ba      	b.n	f6d6 <at_handler_ncellmeas+0xc6>
    f760:	2000ec93 	.word	0x2000ec93
    f764:	2000ec94 	.word	0x2000ec94
    f768:	0001cd3c 	.word	0x0001cd3c
    f76c:	0001b614 	.word	0x0001b614
    f770:	0001cdc9 	.word	0x0001cdc9
    f774:	0001cd68 	.word	0x0001cd68
    f778:	0001cd8f 	.word	0x0001cd8f
    f77c:	0001cdf3 	.word	0x0001cdf3

0000f780 <at_handler_xt3412>:
{
    f780:	b510      	push	{r4, lr}
    f782:	4604      	mov	r4, r0
    f784:	b096      	sub	sp, #88	; 0x58
	struct lte_lc_evt evt = {0};
    f786:	2100      	movs	r1, #0
    f788:	2248      	movs	r2, #72	; 0x48
    f78a:	a804      	add	r0, sp, #16
    f78c:	f00a ffb7 	bl	1a6fe <memset>
	err = parse_xt3412(response, &evt.time);
    f790:	4620      	mov	r0, r4
    f792:	a906      	add	r1, sp, #24
    f794:	f000 fe82 	bl	1049c <parse_xt3412>
	if (err) {
    f798:	b160      	cbz	r0, f7b4 <at_handler_xt3412+0x34>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
    f79a:	4b0d      	ldr	r3, [pc, #52]	; (f7d0 <at_handler_xt3412+0x50>)
    f79c:	9003      	str	r0, [sp, #12]
    f79e:	9302      	str	r3, [sp, #8]
    f7a0:	2300      	movs	r3, #0
    f7a2:	2201      	movs	r2, #1
    f7a4:	4618      	mov	r0, r3
    f7a6:	e9cd 3300 	strd	r3, r3, [sp]
    f7aa:	490a      	ldr	r1, [pc, #40]	; (f7d4 <at_handler_xt3412+0x54>)
    f7ac:	f009 fbc0 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
}
    f7b0:	b016      	add	sp, #88	; 0x58
    f7b2:	bd10      	pop	{r4, pc}
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
    f7b4:	9b06      	ldr	r3, [sp, #24]
    f7b6:	9a07      	ldr	r2, [sp, #28]
    f7b8:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
    f7bc:	3b08      	subs	r3, #8
    f7be:	4313      	orrs	r3, r2
    f7c0:	d1f6      	bne.n	f7b0 <at_handler_xt3412+0x30>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
    f7c2:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
    f7c4:	a804      	add	r0, sp, #16
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
    f7c6:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
    f7ca:	f000 fc33 	bl	10034 <event_handler_list_dispatch>
    f7ce:	e7ef      	b.n	f7b0 <at_handler_xt3412+0x30>
    f7d0:	0001ce20 	.word	0x0001ce20
    f7d4:	0001b614 	.word	0x0001b614

0000f7d8 <at_handler_cedrxp>:
{
    f7d8:	b510      	push	{r4, lr}
    f7da:	4604      	mov	r4, r0
    f7dc:	b096      	sub	sp, #88	; 0x58
	struct lte_lc_evt evt = {0};
    f7de:	2100      	movs	r1, #0
    f7e0:	2248      	movs	r2, #72	; 0x48
    f7e2:	a804      	add	r0, sp, #16
    f7e4:	f00a ff8b 	bl	1a6fe <memset>
	err = parse_edrx(response, &evt.edrx_cfg);
    f7e8:	4620      	mov	r0, r4
    f7ea:	a906      	add	r1, sp, #24
    f7ec:	f7fa f978 	bl	9ae0 <parse_edrx>
	if (err) {
    f7f0:	b160      	cbz	r0, f80c <at_handler_cedrxp+0x34>
		LOG_ERR("Can't parse eDRX, error: %d", err);
    f7f2:	4b0a      	ldr	r3, [pc, #40]	; (f81c <at_handler_cedrxp+0x44>)
    f7f4:	9003      	str	r0, [sp, #12]
    f7f6:	9302      	str	r3, [sp, #8]
    f7f8:	2300      	movs	r3, #0
    f7fa:	2201      	movs	r2, #1
    f7fc:	4618      	mov	r0, r3
    f7fe:	e9cd 3300 	strd	r3, r3, [sp]
    f802:	4907      	ldr	r1, [pc, #28]	; (f820 <at_handler_cedrxp+0x48>)
    f804:	f009 fb94 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
}
    f808:	b016      	add	sp, #88	; 0x58
    f80a:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
    f80c:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
    f80e:	a804      	add	r0, sp, #16
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
    f810:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
    f814:	f000 fc0e 	bl	10034 <event_handler_list_dispatch>
    f818:	e7f6      	b.n	f808 <at_handler_cedrxp+0x30>
    f81a:	bf00      	nop
    f81c:	0001ce54 	.word	0x0001ce54
    f820:	0001b614 	.word	0x0001b614

0000f824 <at_handler_cscon>:
{
    f824:	b510      	push	{r4, lr}
    f826:	4604      	mov	r4, r0
    f828:	b096      	sub	sp, #88	; 0x58
	struct lte_lc_evt evt = {0};
    f82a:	2248      	movs	r2, #72	; 0x48
    f82c:	2100      	movs	r1, #0
    f82e:	a804      	add	r0, sp, #16
    f830:	f00a ff65 	bl	1a6fe <memset>
	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
    f834:	2201      	movs	r2, #1
    f836:	4620      	mov	r0, r4
    f838:	a906      	add	r1, sp, #24
    f83a:	f000 fcdf 	bl	101fc <parse_rrc_mode>
	if (err) {
    f83e:	b160      	cbz	r0, f85a <at_handler_cscon+0x36>
		LOG_ERR("Can't parse signalling mode, error: %d", err);
    f840:	4b09      	ldr	r3, [pc, #36]	; (f868 <at_handler_cscon+0x44>)
    f842:	9003      	str	r0, [sp, #12]
    f844:	9302      	str	r3, [sp, #8]
    f846:	2300      	movs	r3, #0
    f848:	2201      	movs	r2, #1
    f84a:	4618      	mov	r0, r3
    f84c:	e9cd 3300 	strd	r3, r3, [sp]
    f850:	4906      	ldr	r1, [pc, #24]	; (f86c <at_handler_cscon+0x48>)
    f852:	f009 fb6d 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
}
    f856:	b016      	add	sp, #88	; 0x58
    f858:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_RRC_UPDATE;
    f85a:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
    f85c:	a804      	add	r0, sp, #16
	evt.type = LTE_LC_EVT_RRC_UPDATE;
    f85e:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
    f862:	f000 fbe7 	bl	10034 <event_handler_list_dispatch>
    f866:	e7f6      	b.n	f856 <at_handler_cscon+0x32>
    f868:	0001ce70 	.word	0x0001ce70
    f86c:	0001b614 	.word	0x0001b614

0000f870 <lte_lc_psm_req>:

	return 0;
}

int lte_lc_psm_req(bool enable)
{
    f870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	if (enable) {
    f872:	b368      	cbz	r0, f8d0 <lte_lc_psm_req+0x60>
		if (strlen(psm_param_rptau) == 8 &&
    f874:	4817      	ldr	r0, [pc, #92]	; (f8d4 <lte_lc_psm_req+0x64>)
    f876:	f7f9 fabd 	bl	8df4 <strlen>
    f87a:	4604      	mov	r4, r0
		    strlen(psm_param_rat) == 8) {
    f87c:	4816      	ldr	r0, [pc, #88]	; (f8d8 <lte_lc_psm_req+0x68>)
    f87e:	f7f9 fab9 	bl	8df4 <strlen>
		if (strlen(psm_param_rptau) == 8 &&
    f882:	2c08      	cmp	r4, #8
    f884:	d11b      	bne.n	f8be <lte_lc_psm_req+0x4e>
    f886:	2808      	cmp	r0, #8
    f888:	d114      	bne.n	f8b4 <lte_lc_psm_req+0x44>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\",\"%s\"",
    f88a:	4a13      	ldr	r2, [pc, #76]	; (f8d8 <lte_lc_psm_req+0x68>)
    f88c:	4911      	ldr	r1, [pc, #68]	; (f8d4 <lte_lc_psm_req+0x64>)
    f88e:	4813      	ldr	r0, [pc, #76]	; (f8dc <lte_lc_psm_req+0x6c>)
    f890:	f002 fcd0 	bl	12234 <nrf_modem_at_printf>
		}
	} else {
		err = nrf_modem_at_printf(psm_disable);
	}

	if (err) {
    f894:	b160      	cbz	r0, f8b0 <lte_lc_psm_req+0x40>
		LOG_ERR("nrf_modem_at_printf failed, reported error: %d", err);
    f896:	4b12      	ldr	r3, [pc, #72]	; (f8e0 <lte_lc_psm_req+0x70>)
    f898:	9003      	str	r0, [sp, #12]
    f89a:	9302      	str	r3, [sp, #8]
    f89c:	2300      	movs	r3, #0
    f89e:	2201      	movs	r2, #1
    f8a0:	4618      	mov	r0, r3
    f8a2:	e9cd 3300 	strd	r3, r3, [sp]
    f8a6:	490f      	ldr	r1, [pc, #60]	; (f8e4 <lte_lc_psm_req+0x74>)
    f8a8:	f009 fb42 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
    f8ac:	f06f 000d 	mvn.w	r0, #13
	}

	return 0;
}
    f8b0:	b004      	add	sp, #16
    f8b2:	bd10      	pop	{r4, pc}
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\"", psm_param_rptau);
    f8b4:	4907      	ldr	r1, [pc, #28]	; (f8d4 <lte_lc_psm_req+0x64>)
    f8b6:	480c      	ldr	r0, [pc, #48]	; (f8e8 <lte_lc_psm_req+0x78>)
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
    f8b8:	f002 fcbc 	bl	12234 <nrf_modem_at_printf>
    f8bc:	e7ea      	b.n	f894 <lte_lc_psm_req+0x24>
		} else if (strlen(psm_param_rat) == 8) {
    f8be:	2808      	cmp	r0, #8
    f8c0:	d102      	bne.n	f8c8 <lte_lc_psm_req+0x58>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
    f8c2:	4905      	ldr	r1, [pc, #20]	; (f8d8 <lte_lc_psm_req+0x68>)
    f8c4:	4809      	ldr	r0, [pc, #36]	; (f8ec <lte_lc_psm_req+0x7c>)
    f8c6:	e7f7      	b.n	f8b8 <lte_lc_psm_req+0x48>
			err = nrf_modem_at_printf("AT+CPSMS=1");
    f8c8:	4809      	ldr	r0, [pc, #36]	; (f8f0 <lte_lc_psm_req+0x80>)
		err = nrf_modem_at_printf(psm_disable);
    f8ca:	f002 fcb3 	bl	12234 <nrf_modem_at_printf>
    f8ce:	e7e1      	b.n	f894 <lte_lc_psm_req+0x24>
    f8d0:	4808      	ldr	r0, [pc, #32]	; (f8f4 <lte_lc_psm_req+0x84>)
    f8d2:	e7fa      	b.n	f8ca <lte_lc_psm_req+0x5a>
    f8d4:	2000c891 	.word	0x2000c891
    f8d8:	2000c89a 	.word	0x2000c89a
    f8dc:	0001ce97 	.word	0x0001ce97
    f8e0:	0001cede 	.word	0x0001cede
    f8e4:	0001b614 	.word	0x0001b614
    f8e8:	0001ceae 	.word	0x0001ceae
    f8ec:	0001cec0 	.word	0x0001cec0
    f8f0:	0001ced3 	.word	0x0001ced3
    f8f4:	0001d3b5 	.word	0x0001d3b5

0000f8f8 <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
    f8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
    f8fa:	2400      	movs	r4, #0
{
    f8fc:	b091      	sub	sp, #68	; 0x44
    f8fe:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
    f900:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
    f902:	e9cd 4407 	strd	r4, r4, [sp, #28]
	char tau_ext_str[9] = {0};
    f906:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
	char tau_legacy_str[9] = {0};
    f90a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	char active_time_str[9] = {0};
    f90e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
	char tau_ext_str[9] = {0};
    f912:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
	char tau_legacy_str[9] = {0};
    f916:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
	if ((tau == NULL) || (active_time == NULL)) {
    f91a:	2800      	cmp	r0, #0
    f91c:	d06c      	beq.n	f9f8 <lte_lc_psm_get+0x100>
    f91e:	2900      	cmp	r1, #0
    f920:	d06a      	beq.n	f9f8 <lte_lc_psm_get+0x100>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
    f922:	4f37      	ldr	r7, [pc, #220]	; (fa00 <lte_lc_psm_get+0x108>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
    f924:	21a0      	movs	r1, #160	; 0xa0
    f926:	4638      	mov	r0, r7
    f928:	4a36      	ldr	r2, [pc, #216]	; (fa04 <lte_lc_psm_get+0x10c>)
	response[0] = '\0';
    f92a:	703c      	strb	r4, [r7, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
    f92c:	f002 fcce 	bl	122cc <nrf_modem_at_cmd>
	if (err) {
    f930:	b178      	cbz	r0, f952 <lte_lc_psm_get+0x5a>
		LOG_ERR("AT command failed, error: %d", err);
    f932:	4b35      	ldr	r3, [pc, #212]	; (fa08 <lte_lc_psm_get+0x110>)
    f934:	9003      	str	r0, [sp, #12]
    f936:	e9cd 4301 	strd	r4, r3, [sp, #4]
    f93a:	4620      	mov	r0, r4
    f93c:	4623      	mov	r3, r4
    f93e:	9400      	str	r4, [sp, #0]
    f940:	2201      	movs	r2, #1
    f942:	4932      	ldr	r1, [pc, #200]	; (fa0c <lte_lc_psm_get+0x114>)
    f944:	f009 faf4 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
    f948:	f06f 040d 	mvn.w	r4, #13
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec", *tau, *active_time);

	return 0;
}
    f94c:	4620      	mov	r0, r4
    f94e:	b011      	add	sp, #68	; 0x44
    f950:	bdf0      	pop	{r4, r5, r6, r7, pc}
	comma_ptr = strchr(response, ch);
    f952:	212c      	movs	r1, #44	; 0x2c
    f954:	4638      	mov	r0, r7
    f956:	f00b f832 	bl	1a9be <strchr>
	if (!comma_ptr) {
    f95a:	4604      	mov	r4, r0
    f95c:	b970      	cbnz	r0, f97c <lte_lc_psm_get+0x84>
		return -EBADMSG;
    f95e:	f06f 044c 	mvn.w	r4, #76	; 0x4c
    f962:	e7f3      	b.n	f94c <lte_lc_psm_get+0x54>
		if (comma_ptr) {
    f964:	b95c      	cbnz	r4, f97e <lte_lc_psm_get+0x86>
			LOG_ERR("AT command parsing failed");
    f966:	4b2a      	ldr	r3, [pc, #168]	; (fa10 <lte_lc_psm_get+0x118>)
    f968:	2201      	movs	r2, #1
    f96a:	9302      	str	r3, [sp, #8]
    f96c:	2300      	movs	r3, #0
    f96e:	4927      	ldr	r1, [pc, #156]	; (fa0c <lte_lc_psm_get+0x114>)
    f970:	4618      	mov	r0, r3
    f972:	e9cd 3300 	strd	r3, r3, [sp]
    f976:	f009 fadb 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
			return -EBADMSG;
    f97a:	e7f0      	b.n	f95e <lte_lc_psm_get+0x66>
    f97c:	270c      	movs	r7, #12
			comma_ptr = strchr(comma_ptr + 1, ch);
    f97e:	1c60      	adds	r0, r4, #1
    f980:	212c      	movs	r1, #44	; 0x2c
    f982:	f00b f81c 	bl	1a9be <strchr>
	for (int i = 0; i < 12; i++) {
    f986:	3f01      	subs	r7, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
    f988:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
    f98a:	d1eb      	bne.n	f964 <lte_lc_psm_get+0x6c>
	if (comma_ptr) {
    f98c:	2800      	cmp	r0, #0
    f98e:	d0ea      	beq.n	f966 <lte_lc_psm_get+0x6e>
		strncpy(active_time_str, comma_ptr + 2, 8);
    f990:	1c81      	adds	r1, r0, #2
    f992:	2208      	movs	r2, #8
    f994:	a807      	add	r0, sp, #28
    f996:	f00b f839 	bl	1aa0c <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
    f99a:	1c60      	adds	r0, r4, #1
    f99c:	212c      	movs	r1, #44	; 0x2c
    f99e:	f00b f80e 	bl	1a9be <strchr>
	if (comma_ptr) {
    f9a2:	4604      	mov	r4, r0
    f9a4:	2800      	cmp	r0, #0
    f9a6:	d0de      	beq.n	f966 <lte_lc_psm_get+0x6e>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
    f9a8:	1c81      	adds	r1, r0, #2
    f9aa:	2208      	movs	r2, #8
    f9ac:	a80a      	add	r0, sp, #40	; 0x28
    f9ae:	f00b f82d 	bl	1aa0c <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
    f9b2:	212c      	movs	r1, #44	; 0x2c
    f9b4:	1c60      	adds	r0, r4, #1
    f9b6:	f00b f802 	bl	1a9be <strchr>
	if (comma_ptr) {
    f9ba:	b120      	cbz	r0, f9c6 <lte_lc_psm_get+0xce>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
    f9bc:	1c81      	adds	r1, r0, #2
    f9be:	2208      	movs	r2, #8
    f9c0:	a80d      	add	r0, sp, #52	; 0x34
    f9c2:	f00b f823 	bl	1aa0c <strncpy>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
    f9c6:	ab05      	add	r3, sp, #20
    f9c8:	aa0d      	add	r2, sp, #52	; 0x34
    f9ca:	a90a      	add	r1, sp, #40	; 0x28
    f9cc:	a807      	add	r0, sp, #28
    f9ce:	f000 fb7b 	bl	100c8 <parse_psm>
	if (err) {
    f9d2:	4604      	mov	r4, r0
    f9d4:	b158      	cbz	r0, f9ee <lte_lc_psm_get+0xf6>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
    f9d6:	4b0f      	ldr	r3, [pc, #60]	; (fa14 <lte_lc_psm_get+0x11c>)
    f9d8:	9003      	str	r0, [sp, #12]
    f9da:	9302      	str	r3, [sp, #8]
    f9dc:	2300      	movs	r3, #0
    f9de:	2201      	movs	r2, #1
    f9e0:	4618      	mov	r0, r3
    f9e2:	e9cd 3300 	strd	r3, r3, [sp]
    f9e6:	4909      	ldr	r1, [pc, #36]	; (fa0c <lte_lc_psm_get+0x114>)
    f9e8:	f009 faa2 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
		return err;
    f9ec:	e7ae      	b.n	f94c <lte_lc_psm_get+0x54>
	*tau = psm_cfg.tau;
    f9ee:	9b05      	ldr	r3, [sp, #20]
    f9f0:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
    f9f2:	9b06      	ldr	r3, [sp, #24]
    f9f4:	602b      	str	r3, [r5, #0]
	return 0;
    f9f6:	e7a9      	b.n	f94c <lte_lc_psm_get+0x54>
		return -EINVAL;
    f9f8:	f06f 0415 	mvn.w	r4, #21
    f9fc:	e7a6      	b.n	f94c <lte_lc_psm_get+0x54>
    f9fe:	bf00      	nop
    fa00:	2000ebee 	.word	0x2000ebee
    fa04:	0001cf0d 	.word	0x0001cf0d
    fa08:	0001cf1a 	.word	0x0001cf1a
    fa0c:	0001b614 	.word	0x0001b614
    fa10:	0001cf37 	.word	0x0001cf37
    fa14:	0001cf51 	.word	0x0001cf51

0000fa18 <at_handler_cereg>:
{
    fa18:	b5f0      	push	{r4, r5, r6, r7, lr}
	enum lte_lc_nw_reg_status reg_status = 0;
    fa1a:	2400      	movs	r4, #0
{
    fa1c:	4605      	mov	r5, r0
    fa1e:	b0a9      	sub	sp, #164	; 0xa4
	struct lte_lc_evt evt = {0};
    fa20:	2248      	movs	r2, #72	; 0x48
    fa22:	2100      	movs	r1, #0
    fa24:	a816      	add	r0, sp, #88	; 0x58
    fa26:	f00a fe6a 	bl	1a6fe <memset>
	struct lte_lc_cell cell = {0};
    fa2a:	2230      	movs	r2, #48	; 0x30
    fa2c:	4621      	mov	r1, r4
    fa2e:	a80a      	add	r0, sp, #40	; 0x28
	enum lte_lc_nw_reg_status reg_status = 0;
    fa30:	f88d 401e 	strb.w	r4, [sp, #30]
	struct lte_lc_psm_cfg psm_cfg = {0};
    fa34:	af08      	add	r7, sp, #32
	struct lte_lc_cell cell = {0};
    fa36:	f00a fe62 	bl	1a6fe <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
    fa3a:	f10d 031f 	add.w	r3, sp, #31
	struct lte_lc_psm_cfg psm_cfg = {0};
    fa3e:	607c      	str	r4, [r7, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
    fa40:	2101      	movs	r1, #1
    fa42:	9300      	str	r3, [sp, #0]
    fa44:	4628      	mov	r0, r5
    fa46:	ab0a      	add	r3, sp, #40	; 0x28
    fa48:	f10d 021e 	add.w	r2, sp, #30
	struct lte_lc_psm_cfg psm_cfg = {0};
    fa4c:	9408      	str	r4, [sp, #32]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
    fa4e:	f000 fc33 	bl	102b8 <parse_cereg>
	if (err) {
    fa52:	b168      	cbz	r0, fa70 <at_handler_cereg+0x58>
		LOG_ERR("Failed to parse notification (error %d): %s",
    fa54:	4b48      	ldr	r3, [pc, #288]	; (fb78 <at_handler_cereg+0x160>)
    fa56:	e9cd 0503 	strd	r0, r5, [sp, #12]
    fa5a:	e9cd 4301 	strd	r4, r3, [sp, #4]
    fa5e:	2201      	movs	r2, #1
    fa60:	4623      	mov	r3, r4
    fa62:	4620      	mov	r0, r4
    fa64:	4945      	ldr	r1, [pc, #276]	; (fb7c <at_handler_cereg+0x164>)
    fa66:	9400      	str	r4, [sp, #0]
    fa68:	f009 fa62 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
}
    fa6c:	b029      	add	sp, #164	; 0xa4
    fa6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    fa70:	f89d 301e 	ldrb.w	r3, [sp, #30]
    fa74:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    fa78:	2b01      	cmp	r3, #1
    fa7a:	d105      	bne.n	fa88 <at_handler_cereg+0x70>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
    fa7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fa7e:	3301      	adds	r3, #1
    fa80:	d05e      	beq.n	fb40 <at_handler_cereg+0x128>
	z_impl_k_sem_give(sem);
    fa82:	483f      	ldr	r0, [pc, #252]	; (fb80 <at_handler_cereg+0x168>)
    fa84:	f004 fe82 	bl	1478c <z_impl_k_sem_give>
	if (event_handler_list_is_empty()) {
    fa88:	f000 facc 	bl	10024 <event_handler_list_is_empty>
    fa8c:	2800      	cmp	r0, #0
    fa8e:	d1ed      	bne.n	fa6c <at_handler_cereg+0x54>
	if (reg_status != prev_reg_status) {
    fa90:	4a3c      	ldr	r2, [pc, #240]	; (fb84 <at_handler_cereg+0x16c>)
    fa92:	f89d 301e 	ldrb.w	r3, [sp, #30]
    fa96:	7811      	ldrb	r1, [r2, #0]
    fa98:	4299      	cmp	r1, r3
    fa9a:	d007      	beq.n	faac <at_handler_cereg+0x94>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
    fa9c:	f88d 0058 	strb.w	r0, [sp, #88]	; 0x58
		event_handler_list_dispatch(&evt);
    faa0:	a816      	add	r0, sp, #88	; 0x58
		prev_reg_status = reg_status;
    faa2:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
    faa4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		event_handler_list_dispatch(&evt);
    faa8:	f000 fac4 	bl	10034 <event_handler_list_dispatch>
	if ((cell.id != prev_cell.id) || (cell.tac != prev_cell.tac)) {
    faac:	4b36      	ldr	r3, [pc, #216]	; (fb88 <at_handler_cereg+0x170>)
    faae:	990c      	ldr	r1, [sp, #48]	; 0x30
    fab0:	689a      	ldr	r2, [r3, #8]
    fab2:	4291      	cmp	r1, r2
    fab4:	d103      	bne.n	fabe <at_handler_cereg+0xa6>
    fab6:	68db      	ldr	r3, [r3, #12]
    fab8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    faba:	429a      	cmp	r2, r3
    fabc:	d019      	beq.n	faf2 <at_handler_cereg+0xda>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
    fabe:	2304      	movs	r3, #4
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
    fac0:	4d31      	ldr	r5, [pc, #196]	; (fb88 <at_handler_cereg+0x170>)
    fac2:	ac0a      	add	r4, sp, #40	; 0x28
		evt.type = LTE_LC_EVT_CELL_UPDATE;
    fac4:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
    fac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    faca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    facc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    face:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    fad0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    fad4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
    fad8:	ae18      	add	r6, sp, #96	; 0x60
    fada:	ad0a      	add	r5, sp, #40	; 0x28
    fadc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    fade:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    fae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    fae2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    fae4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    fae8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
    faec:	a816      	add	r0, sp, #88	; 0x58
    faee:	f000 faa1 	bl	10034 <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
    faf2:	4a26      	ldr	r2, [pc, #152]	; (fb8c <at_handler_cereg+0x174>)
    faf4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    faf8:	7811      	ldrb	r1, [r2, #0]
    fafa:	4299      	cmp	r1, r3
    fafc:	d008      	beq.n	fb10 <at_handler_cereg+0xf8>
		prev_lte_mode = lte_mode;
    fafe:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
    fb00:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
    fb02:	a816      	add	r0, sp, #88	; 0x58
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
    fb04:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
		evt.lte_mode = lte_mode;
    fb08:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		event_handler_list_dispatch(&evt);
    fb0c:	f000 fa92 	bl	10034 <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
    fb10:	f89d 401e 	ldrb.w	r4, [sp, #30]
    fb14:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
    fb18:	2c01      	cmp	r4, #1
    fb1a:	d1a7      	bne.n	fa6c <at_handler_cereg+0x54>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
    fb1c:	4638      	mov	r0, r7
    fb1e:	a909      	add	r1, sp, #36	; 0x24
    fb20:	f7ff feea 	bl	f8f8 <lte_lc_psm_get>
	if (err) {
    fb24:	b180      	cbz	r0, fb48 <at_handler_cereg+0x130>
		if (err != -EBADMSG) {
    fb26:	304d      	adds	r0, #77	; 0x4d
    fb28:	d0a0      	beq.n	fa6c <at_handler_cereg+0x54>
			LOG_ERR("Failed to get PSM information");
    fb2a:	4b19      	ldr	r3, [pc, #100]	; (fb90 <at_handler_cereg+0x178>)
    fb2c:	4622      	mov	r2, r4
    fb2e:	9302      	str	r3, [sp, #8]
    fb30:	2300      	movs	r3, #0
    fb32:	4912      	ldr	r1, [pc, #72]	; (fb7c <at_handler_cereg+0x164>)
    fb34:	4618      	mov	r0, r3
    fb36:	e9cd 3300 	strd	r3, r3, [sp]
    fb3a:	f009 f9f9 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
    fb3e:	e795      	b.n	fa6c <at_handler_cereg+0x54>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
    fb40:	2304      	movs	r3, #4
    fb42:	f88d 301e 	strb.w	r3, [sp, #30]
    fb46:	e79f      	b.n	fa88 <at_handler_cereg+0x70>
	if ((psm_cfg.tau != prev_psm_cfg.tau) ||
    fb48:	4b12      	ldr	r3, [pc, #72]	; (fb94 <at_handler_cereg+0x17c>)
    fb4a:	9908      	ldr	r1, [sp, #32]
    fb4c:	681a      	ldr	r2, [r3, #0]
    fb4e:	4291      	cmp	r1, r2
    fb50:	461a      	mov	r2, r3
    fb52:	d103      	bne.n	fb5c <at_handler_cereg+0x144>
    fb54:	685b      	ldr	r3, [r3, #4]
    fb56:	9909      	ldr	r1, [sp, #36]	; 0x24
    fb58:	4299      	cmp	r1, r3
    fb5a:	d087      	beq.n	fa6c <at_handler_cereg+0x54>
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
    fb5c:	e897 0003 	ldmia.w	r7, {r0, r1}
		evt.type = LTE_LC_EVT_PSM_UPDATE;
    fb60:	2301      	movs	r3, #1
    fb62:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
    fb66:	ab18      	add	r3, sp, #96	; 0x60
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
    fb68:	e882 0003 	stmia.w	r2, {r0, r1}
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
    fb6c:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
    fb70:	a816      	add	r0, sp, #88	; 0x58
    fb72:	f000 fa5f 	bl	10034 <event_handler_list_dispatch>
    fb76:	e779      	b.n	fa6c <at_handler_cereg+0x54>
    fb78:	0001cf7e 	.word	0x0001cf7e
    fb7c:	0001b614 	.word	0x0001b614
    fb80:	2000d2f8 	.word	0x2000d2f8
    fb84:	2000ec8f 	.word	0x2000ec8f
    fb88:	2000cca8 	.word	0x2000cca8
    fb8c:	2000ec8e 	.word	0x2000ec8e
    fb90:	0001cfaa 	.word	0x0001cfaa
    fb94:	2000d2f0 	.word	0x2000d2f0

0000fb98 <lte_lc_edrx_req>:
}

int lte_lc_edrx_req(bool enable)
{
	int err;
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
    fb98:	2204      	movs	r2, #4
    fb9a:	2305      	movs	r3, #5
{
    fb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fba0:	b087      	sub	sp, #28

	if (!enable) {
    fba2:	4604      	mov	r4, r0
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
    fba4:	e9cd 2304 	strd	r2, r3, [sp, #16]
	if (!enable) {
    fba8:	b958      	cbnz	r0, fbc2 <lte_lc_edrx_req+0x2a>
		err = nrf_modem_at_printf(edrx_disable);
    fbaa:	4829      	ldr	r0, [pc, #164]	; (fc50 <lte_lc_edrx_req+0xb8>)
    fbac:	f002 fb42 	bl	12234 <nrf_modem_at_printf>
		if (err) {
    fbb0:	2800      	cmp	r0, #0
    fbb2:	d04b      	beq.n	fc4c <lte_lc_edrx_req+0xb4>
			LOG_ERR("Failed to disable eDRX, reported error: %d", err);
    fbb4:	4b27      	ldr	r3, [pc, #156]	; (fc54 <lte_lc_edrx_req+0xbc>)
    fbb6:	9003      	str	r0, [sp, #12]
			continue;
		}

		err = nrf_modem_at_printf("AT%%XPTW=%d,\"%s\"", actt[i], ptw_param);
		if (err) {
			LOG_ERR("Failed to request PTW, reported error: %d", err);
    fbb8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    fbbc:	9400      	str	r4, [sp, #0]
    fbbe:	4623      	mov	r3, r4
    fbc0:	e023      	b.n	fc0a <lte_lc_edrx_req+0x72>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
    fbc2:	2500      	movs	r5, #0
					edrx_param_ltem : edrx_param_nbiot;
    fbc4:	4f24      	ldr	r7, [pc, #144]	; (fc58 <lte_lc_edrx_req+0xc0>)
    fbc6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; fc78 <lte_lc_edrx_req+0xe0>
    fbca:	f8df 90b0 	ldr.w	r9, [pc, #176]	; fc7c <lte_lc_edrx_req+0xe4>
    fbce:	ae04      	add	r6, sp, #16
		char *edrx_param = (actt[i] == AT_CEDRXS_ACTT_WB) ?
    fbd0:	f856 ab04 	ldr.w	sl, [r6], #4
					edrx_param_ltem : edrx_param_nbiot;
    fbd4:	4b21      	ldr	r3, [pc, #132]	; (fc5c <lte_lc_edrx_req+0xc4>)
    fbd6:	f1ba 0f04 	cmp.w	sl, #4
    fbda:	bf14      	ite	ne
    fbdc:	463c      	movne	r4, r7
    fbde:	4644      	moveq	r4, r8
		if (strlen(edrx_param) == 4) {
    fbe0:	4620      	mov	r0, r4
					edrx_param_ltem : edrx_param_nbiot;
    fbe2:	bf14      	ite	ne
    fbe4:	46cb      	movne	fp, r9
    fbe6:	469b      	moveq	fp, r3
		if (strlen(edrx_param) == 4) {
    fbe8:	f7f9 f904 	bl	8df4 <strlen>
    fbec:	2804      	cmp	r0, #4
    fbee:	d118      	bne.n	fc22 <lte_lc_edrx_req+0x8a>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d,\"%s\"", actt[i], edrx_param);
    fbf0:	4622      	mov	r2, r4
    fbf2:	4651      	mov	r1, sl
    fbf4:	481a      	ldr	r0, [pc, #104]	; (fc60 <lte_lc_edrx_req+0xc8>)
    fbf6:	f002 fb1d 	bl	12234 <nrf_modem_at_printf>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d", actt[i]);
    fbfa:	4604      	mov	r4, r0
		if (err) {
    fbfc:	b1b0      	cbz	r0, fc2c <lte_lc_edrx_req+0x94>
			LOG_ERR("Failed to enable eDRX, reported error: %d", err);
    fbfe:	4b19      	ldr	r3, [pc, #100]	; (fc64 <lte_lc_edrx_req+0xcc>)
    fc00:	9003      	str	r0, [sp, #12]
    fc02:	9302      	str	r3, [sp, #8]
    fc04:	2300      	movs	r3, #0
    fc06:	e9cd 3300 	strd	r3, r3, [sp]
    fc0a:	4618      	mov	r0, r3
    fc0c:	2201      	movs	r2, #1
    fc0e:	4916      	ldr	r1, [pc, #88]	; (fc68 <lte_lc_edrx_req+0xd0>)
    fc10:	f009 f98e 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
			return -EFAULT;
    fc14:	f06f 000d 	mvn.w	r0, #13
			return -EFAULT;
		}
	}

	return 0;
}
    fc18:	b007      	add	sp, #28
    fc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
    fc1e:	2501      	movs	r5, #1
    fc20:	e7d6      	b.n	fbd0 <lte_lc_edrx_req+0x38>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d", actt[i]);
    fc22:	4651      	mov	r1, sl
    fc24:	4811      	ldr	r0, [pc, #68]	; (fc6c <lte_lc_edrx_req+0xd4>)
    fc26:	f002 fb05 	bl	12234 <nrf_modem_at_printf>
    fc2a:	e7e6      	b.n	fbfa <lte_lc_edrx_req+0x62>
		if (strlen(ptw_param) != 4) {
    fc2c:	4658      	mov	r0, fp
    fc2e:	f7f9 f8e1 	bl	8df4 <strlen>
    fc32:	2804      	cmp	r0, #4
    fc34:	d108      	bne.n	fc48 <lte_lc_edrx_req+0xb0>
		err = nrf_modem_at_printf("AT%%XPTW=%d,\"%s\"", actt[i], ptw_param);
    fc36:	465a      	mov	r2, fp
    fc38:	4651      	mov	r1, sl
    fc3a:	480d      	ldr	r0, [pc, #52]	; (fc70 <lte_lc_edrx_req+0xd8>)
    fc3c:	f002 fafa 	bl	12234 <nrf_modem_at_printf>
		if (err) {
    fc40:	b110      	cbz	r0, fc48 <lte_lc_edrx_req+0xb0>
			LOG_ERR("Failed to request PTW, reported error: %d", err);
    fc42:	4b0c      	ldr	r3, [pc, #48]	; (fc74 <lte_lc_edrx_req+0xdc>)
    fc44:	9003      	str	r0, [sp, #12]
    fc46:	e7b7      	b.n	fbb8 <lte_lc_edrx_req+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
    fc48:	2d00      	cmp	r5, #0
    fc4a:	d0e8      	beq.n	fc1e <lte_lc_edrx_req+0x86>
		return 0;
    fc4c:	2000      	movs	r0, #0
    fc4e:	e7e3      	b.n	fc18 <lte_lc_edrx_req+0x80>
    fc50:	0001d3bf 	.word	0x0001d3bf
    fc54:	0001cfc8 	.word	0x0001cfc8
    fc58:	2000c8a3 	.word	0x2000c8a3
    fc5c:	2000ec9b 	.word	0x2000ec9b
    fc60:	0001cff3 	.word	0x0001cff3
    fc64:	0001d016 	.word	0x0001d016
    fc68:	0001b614 	.word	0x0001b614
    fc6c:	0001d007 	.word	0x0001d007
    fc70:	0001d040 	.word	0x0001d040
    fc74:	0001d051 	.word	0x0001d051
    fc78:	2000c8a8 	.word	0x2000c8a8
    fc7c:	2000ec96 	.word	0x2000ec96

0000fc80 <lte_lc_system_mode_set>:
	return 0;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
    fc80:	b530      	push	{r4, r5, lr}
	int err;

	switch (mode) {
    fc82:	2807      	cmp	r0, #7
{
    fc84:	4605      	mov	r5, r0
    fc86:	460c      	mov	r4, r1
    fc88:	b085      	sub	sp, #20
	switch (mode) {
    fc8a:	d90e      	bls.n	fcaa <lte_lc_system_mode_set+0x2a>
	case LTE_LC_SYSTEM_MODE_GPS:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
    fc8c:	4b19      	ldr	r3, [pc, #100]	; (fcf4 <lte_lc_system_mode_set+0x74>)
    fc8e:	9003      	str	r0, [sp, #12]
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT:
	case LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO:
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO:
		break;
	default:
		LOG_ERR("Invalid LTE preference requested: %d", preference);
    fc90:	9302      	str	r3, [sp, #8]
    fc92:	2300      	movs	r3, #0
    fc94:	2201      	movs	r2, #1
    fc96:	4618      	mov	r0, r3
    fc98:	e9cd 3300 	strd	r3, r3, [sp]
    fc9c:	4916      	ldr	r1, [pc, #88]	; (fcf8 <lte_lc_system_mode_set+0x78>)
    fc9e:	f009 f947 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    fca2:	f06f 0015 	mvn.w	r0, #21
	sys_mode_target = mode;
	mode_pref_current = preference;
	mode_pref_target = preference;

	return 0;
}
    fca6:	b005      	add	sp, #20
    fca8:	bd30      	pop	{r4, r5, pc}
	switch (preference) {
    fcaa:	2904      	cmp	r1, #4
    fcac:	d902      	bls.n	fcb4 <lte_lc_system_mode_set+0x34>
		LOG_ERR("Invalid LTE preference requested: %d", preference);
    fcae:	4b13      	ldr	r3, [pc, #76]	; (fcfc <lte_lc_system_mode_set+0x7c>)
    fcb0:	9103      	str	r1, [sp, #12]
    fcb2:	e7ed      	b.n	fc90 <lte_lc_system_mode_set+0x10>
	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
    fcb4:	4b12      	ldr	r3, [pc, #72]	; (fd00 <lte_lc_system_mode_set+0x80>)
    fcb6:	5c5a      	ldrb	r2, [r3, r1]
    fcb8:	4b12      	ldr	r3, [pc, #72]	; (fd04 <lte_lc_system_mode_set+0x84>)
    fcba:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    fcbe:	4812      	ldr	r0, [pc, #72]	; (fd08 <lte_lc_system_mode_set+0x88>)
    fcc0:	f002 fab8 	bl	12234 <nrf_modem_at_printf>
	if (err) {
    fcc4:	b168      	cbz	r0, fce2 <lte_lc_system_mode_set+0x62>
		LOG_ERR("Could not send AT command, error: %d", err);
    fcc6:	4b11      	ldr	r3, [pc, #68]	; (fd0c <lte_lc_system_mode_set+0x8c>)
    fcc8:	9003      	str	r0, [sp, #12]
    fcca:	9302      	str	r3, [sp, #8]
    fccc:	2300      	movs	r3, #0
    fcce:	2201      	movs	r2, #1
    fcd0:	4618      	mov	r0, r3
    fcd2:	e9cd 3300 	strd	r3, r3, [sp]
    fcd6:	4908      	ldr	r1, [pc, #32]	; (fcf8 <lte_lc_system_mode_set+0x78>)
    fcd8:	f009 f92a 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
    fcdc:	f06f 000d 	mvn.w	r0, #13
    fce0:	e7e1      	b.n	fca6 <lte_lc_system_mode_set+0x26>
	sys_mode_current = mode;
    fce2:	4b0b      	ldr	r3, [pc, #44]	; (fd10 <lte_lc_system_mode_set+0x90>)
    fce4:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
    fce6:	4b0b      	ldr	r3, [pc, #44]	; (fd14 <lte_lc_system_mode_set+0x94>)
    fce8:	701d      	strb	r5, [r3, #0]
	mode_pref_current = preference;
    fcea:	4b0b      	ldr	r3, [pc, #44]	; (fd18 <lte_lc_system_mode_set+0x98>)
    fcec:	701c      	strb	r4, [r3, #0]
	mode_pref_target = preference;
    fcee:	4b0b      	ldr	r3, [pc, #44]	; (fd1c <lte_lc_system_mode_set+0x9c>)
    fcf0:	701c      	strb	r4, [r3, #0]
	return 0;
    fcf2:	e7d8      	b.n	fca6 <lte_lc_system_mode_set+0x26>
    fcf4:	0001d07b 	.word	0x0001d07b
    fcf8:	0001b614 	.word	0x0001b614
    fcfc:	0001d09d 	.word	0x0001d09d
    fd00:	0001d3a5 	.word	0x0001d3a5
    fd04:	0001ba2c 	.word	0x0001ba2c
    fd08:	0001d0c2 	.word	0x0001d0c2
    fd0c:	0001d0d8 	.word	0x0001d0d8
    fd10:	2000ec90 	.word	0x2000ec90
    fd14:	2000c890 	.word	0x2000c890
    fd18:	2000ec91 	.word	0x2000ec91
    fd1c:	2000ec92 	.word	0x2000ec92

0000fd20 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode,
			   enum lte_lc_system_mode_preference *preference)
{
    fd20:	b570      	push	{r4, r5, r6, lr}
	int err;
	int mode_bitmask = 0;
	int ltem_mode = 0;
    fd22:	2600      	movs	r6, #0
{
    fd24:	b088      	sub	sp, #32
    fd26:	460c      	mov	r4, r1
	int nbiot_mode = 0;
	int gps_mode = 0;
	int mode_preference = 0;

	if (mode == NULL) {
    fd28:	4605      	mov	r5, r0
	int nbiot_mode = 0;
    fd2a:	e9cd 6604 	strd	r6, r6, [sp, #16]
	int mode_preference = 0;
    fd2e:	e9cd 6606 	strd	r6, r6, [sp, #24]
	if (mode == NULL) {
    fd32:	2800      	cmp	r0, #0
    fd34:	f000 8081 	beq.w	fe3a <lte_lc_system_mode_get+0x11a>
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
    fd38:	ab07      	add	r3, sp, #28
    fd3a:	9301      	str	r3, [sp, #4]
    fd3c:	ab06      	add	r3, sp, #24
    fd3e:	9300      	str	r3, [sp, #0]
    fd40:	493f      	ldr	r1, [pc, #252]	; (fe40 <lte_lc_system_mode_get+0x120>)
    fd42:	4840      	ldr	r0, [pc, #256]	; (fe44 <lte_lc_system_mode_get+0x124>)
    fd44:	ab05      	add	r3, sp, #20
    fd46:	aa04      	add	r2, sp, #16
    fd48:	f002 fb54 	bl	123f4 <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
    fd4c:	2804      	cmp	r0, #4
    fd4e:	d00b      	beq.n	fd68 <lte_lc_system_mode_get+0x48>
		LOG_ERR("Failed to get system mode, error: %d", err);
    fd50:	4b3d      	ldr	r3, [pc, #244]	; (fe48 <lte_lc_system_mode_get+0x128>)
    fd52:	9003      	str	r0, [sp, #12]
    fd54:	e9cd 6301 	strd	r6, r3, [sp, #4]
    fd58:	9600      	str	r6, [sp, #0]
			break;
		case 4:
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
			break;
		default:
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
    fd5a:	2300      	movs	r3, #0
    fd5c:	2201      	movs	r2, #1
    fd5e:	4618      	mov	r0, r3
    fd60:	493a      	ldr	r1, [pc, #232]	; (fe4c <lte_lc_system_mode_get+0x12c>)
    fd62:	f009 f8e5 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
			return -EFAULT;
    fd66:	e03d      	b.n	fde4 <lte_lc_system_mode_get+0xc4>
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
    fd68:	9b05      	ldr	r3, [sp, #20]
    fd6a:	1e1a      	subs	r2, r3, #0
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
    fd6c:	9b04      	ldr	r3, [sp, #16]
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
    fd6e:	bf18      	it	ne
    fd70:	2201      	movne	r2, #1
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
    fd72:	3b00      	subs	r3, #0
    fd74:	bf18      	it	ne
    fd76:	2301      	movne	r3, #1
    fd78:	005b      	lsls	r3, r3, #1
    fd7a:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
    fd7e:	9a06      	ldr	r2, [sp, #24]
    fd80:	3a00      	subs	r2, #0
    fd82:	bf18      	it	ne
    fd84:	2201      	movne	r2, #1
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
    fd86:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
	switch (mode_bitmask) {
    fd8a:	2b0e      	cmp	r3, #14
    fd8c:	d820      	bhi.n	fdd0 <lte_lc_system_mode_get+0xb0>
    fd8e:	e8df f003 	tbb	[pc, r3]
    fd92:	1f2c      	.short	0x1f2c
    fd94:	1f2e1f08 	.word	0x1f2e1f08
    fd98:	1f151f1b 	.word	0x1f151f1b
    fd9c:	1f191f17 	.word	0x1f191f17
    fda0:	1d          	.byte	0x1d
    fda1:	00          	.byte	0x00
    fda2:	2301      	movs	r3, #1
		*mode = LTE_LC_SYSTEM_MODE_NONE;
    fda4:	702b      	strb	r3, [r5, #0]
	if (preference != NULL) {
    fda6:	2c00      	cmp	r4, #0
    fda8:	d03d      	beq.n	fe26 <lte_lc_system_mode_get+0x106>
		switch (mode_preference) {
    fdaa:	9a07      	ldr	r2, [sp, #28]
    fdac:	2300      	movs	r3, #0
    fdae:	2a04      	cmp	r2, #4
    fdb0:	d833      	bhi.n	fe1a <lte_lc_system_mode_get+0xfa>
    fdb2:	e8df f002 	tbb	[pc, r2]
    fdb6:	1e1f      	.short	0x1e1f
    fdb8:	2e2c      	.short	0x2e2c
    fdba:	30          	.byte	0x30
    fdbb:	00          	.byte	0x00
		break;
    fdbc:	2303      	movs	r3, #3
    fdbe:	e7f1      	b.n	fda4 <lte_lc_system_mode_get+0x84>
		break;
    fdc0:	2304      	movs	r3, #4
    fdc2:	e7ef      	b.n	fda4 <lte_lc_system_mode_get+0x84>
		break;
    fdc4:	2305      	movs	r3, #5
    fdc6:	e7ed      	b.n	fda4 <lte_lc_system_mode_get+0x84>
		break;
    fdc8:	2306      	movs	r3, #6
    fdca:	e7eb      	b.n	fda4 <lte_lc_system_mode_get+0x84>
		break;
    fdcc:	2307      	movs	r3, #7
    fdce:	e7e9      	b.n	fda4 <lte_lc_system_mode_get+0x84>
		LOG_ERR("Invalid system mode, assuming parsing error");
    fdd0:	4b1f      	ldr	r3, [pc, #124]	; (fe50 <lte_lc_system_mode_get+0x130>)
    fdd2:	2201      	movs	r2, #1
    fdd4:	e9cd 6301 	strd	r6, r3, [sp, #4]
    fdd8:	2300      	movs	r3, #0
    fdda:	491c      	ldr	r1, [pc, #112]	; (fe4c <lte_lc_system_mode_get+0x12c>)
    fddc:	4618      	mov	r0, r3
    fdde:	9600      	str	r6, [sp, #0]
    fde0:	f009 f8a6 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
    fde4:	f06f 000d 	mvn.w	r0, #13
    fde8:	e023      	b.n	fe32 <lte_lc_system_mode_get+0x112>
	switch (mode_bitmask) {
    fdea:	2300      	movs	r3, #0
    fdec:	e7da      	b.n	fda4 <lte_lc_system_mode_get+0x84>
    fdee:	2302      	movs	r3, #2
    fdf0:	e7d8      	b.n	fda4 <lte_lc_system_mode_get+0x84>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
    fdf2:	2301      	movs	r3, #1
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
    fdf4:	7023      	strb	r3, [r4, #0]
		}
	}

	if (sys_mode_current != *mode) {
    fdf6:	4b17      	ldr	r3, [pc, #92]	; (fe54 <lte_lc_system_mode_get+0x134>)
    fdf8:	782a      	ldrb	r2, [r5, #0]
    fdfa:	7819      	ldrb	r1, [r3, #0]
    fdfc:	4291      	cmp	r1, r2
    fdfe:	d11a      	bne.n	fe36 <lte_lc_system_mode_get+0x116>
		LOG_DBG("Current system mode updated from %d to %d",
			sys_mode_current, *mode);
		sys_mode_current = *mode;
	}

	if ((preference != NULL) && (mode_pref_current != *preference)) {
    fe00:	4b15      	ldr	r3, [pc, #84]	; (fe58 <lte_lc_system_mode_get+0x138>)
    fe02:	7822      	ldrb	r2, [r4, #0]
    fe04:	7819      	ldrb	r1, [r3, #0]
    fe06:	4291      	cmp	r1, r2
    fe08:	d012      	beq.n	fe30 <lte_lc_system_mode_get+0x110>
		LOG_DBG("Current system mode preference updated from %d to %d",
			mode_pref_current, *preference);
		mode_pref_current = *preference;
    fe0a:	701a      	strb	r2, [r3, #0]
    fe0c:	e010      	b.n	fe30 <lte_lc_system_mode_get+0x110>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
    fe0e:	2302      	movs	r3, #2
    fe10:	e7f0      	b.n	fdf4 <lte_lc_system_mode_get+0xd4>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
    fe12:	2303      	movs	r3, #3
    fe14:	e7ee      	b.n	fdf4 <lte_lc_system_mode_get+0xd4>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
    fe16:	2304      	movs	r3, #4
    fe18:	e7ec      	b.n	fdf4 <lte_lc_system_mode_get+0xd4>
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
    fe1a:	9203      	str	r2, [sp, #12]
    fe1c:	4a0f      	ldr	r2, [pc, #60]	; (fe5c <lte_lc_system_mode_get+0x13c>)
    fe1e:	9300      	str	r3, [sp, #0]
    fe20:	e9cd 3201 	strd	r3, r2, [sp, #4]
    fe24:	e799      	b.n	fd5a <lte_lc_system_mode_get+0x3a>
	if (sys_mode_current != *mode) {
    fe26:	4a0b      	ldr	r2, [pc, #44]	; (fe54 <lte_lc_system_mode_get+0x134>)
    fe28:	7811      	ldrb	r1, [r2, #0]
    fe2a:	4299      	cmp	r1, r3
		sys_mode_current = *mode;
    fe2c:	bf18      	it	ne
    fe2e:	7013      	strbne	r3, [r2, #0]
	}

	return 0;
    fe30:	2000      	movs	r0, #0
}
    fe32:	b008      	add	sp, #32
    fe34:	bd70      	pop	{r4, r5, r6, pc}
		sys_mode_current = *mode;
    fe36:	701a      	strb	r2, [r3, #0]
	if ((preference != NULL) && (mode_pref_current != *preference)) {
    fe38:	e7e2      	b.n	fe00 <lte_lc_system_mode_get+0xe0>
		return -EINVAL;
    fe3a:	f06f 0015 	mvn.w	r0, #21
    fe3e:	e7f8      	b.n	fe32 <lte_lc_system_mode_get+0x112>
    fe40:	0001d0fd 	.word	0x0001d0fd
    fe44:	0001d118 	.word	0x0001d118
    fe48:	0001d128 	.word	0x0001d128
    fe4c:	0001b614 	.word	0x0001b614
    fe50:	0001d14d 	.word	0x0001d14d
    fe54:	2000ec90 	.word	0x2000ec90
    fe58:	2000ec91 	.word	0x2000ec91
    fe5c:	0001d179 	.word	0x0001d179

0000fe60 <init_and_config>:
{
    fe60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (is_initialized) {
    fe64:	4d20      	ldr	r5, [pc, #128]	; (fee8 <init_and_config+0x88>)
    fe66:	7829      	ldrb	r1, [r5, #0]
    fe68:	b121      	cbz	r1, fe74 <init_and_config+0x14>
		printk("The library is already initialized and configured");
    fe6a:	4820      	ldr	r0, [pc, #128]	; (feec <init_and_config+0x8c>)
    fe6c:	f007 fc3b 	bl	176e6 <printk>
		return 0;
    fe70:	2400      	movs	r4, #0
    fe72:	e010      	b.n	fe96 <init_and_config+0x36>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
    fe74:	f8df 809c 	ldr.w	r8, [pc, #156]	; ff14 <init_and_config+0xb4>
    fe78:	4e1d      	ldr	r6, [pc, #116]	; (fef0 <init_and_config+0x90>)
	return z_impl_k_sem_init(sem, initial_count, limit);
    fe7a:	2201      	movs	r2, #1
    fe7c:	481d      	ldr	r0, [pc, #116]	; (fef4 <init_and_config+0x94>)
    fe7e:	f00a f8f3 	bl	1a068 <z_impl_k_sem_init>
    fe82:	4641      	mov	r1, r8
    fe84:	4630      	mov	r0, r6
    fe86:	f7ff ff4b 	bl	fd20 <lte_lc_system_mode_get>
	if (err) {
    fe8a:	4604      	mov	r4, r0
    fe8c:	b130      	cbz	r0, fe9c <init_and_config+0x3c>
		printk("Could not get current system mode, error: %d", err);
    fe8e:	4601      	mov	r1, r0
    fe90:	4819      	ldr	r0, [pc, #100]	; (fef8 <init_and_config+0x98>)
			printk("Could not set system mode, error: %d", err);
    fe92:	f007 fc28 	bl	176e6 <printk>
}
    fe96:	4620      	mov	r0, r4
    fe98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((sys_mode_current != sys_mode_target) ||
    fe9c:	7833      	ldrb	r3, [r6, #0]
    fe9e:	4e17      	ldr	r6, [pc, #92]	; (fefc <init_and_config+0x9c>)
	    (mode_pref_current != mode_pref_target)) {
    fea0:	4f17      	ldr	r7, [pc, #92]	; (ff00 <init_and_config+0xa0>)
	if ((sys_mode_current != sys_mode_target) ||
    fea2:	7830      	ldrb	r0, [r6, #0]
	    (mode_pref_current != mode_pref_target)) {
    fea4:	7839      	ldrb	r1, [r7, #0]
	if ((sys_mode_current != sys_mode_target) ||
    fea6:	4283      	cmp	r3, r0
    fea8:	d103      	bne.n	feb2 <init_and_config+0x52>
	    (mode_pref_current != mode_pref_target)) {
    feaa:	f898 2000 	ldrb.w	r2, [r8]
	if ((sys_mode_current != sys_mode_target) ||
    feae:	428a      	cmp	r2, r1
    feb0:	d013      	beq.n	feda <init_and_config+0x7a>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
    feb2:	f7ff fee5 	bl	fc80 <lte_lc_system_mode_set>
		if (err) {
    feb6:	4604      	mov	r4, r0
    feb8:	b110      	cbz	r0, fec0 <init_and_config+0x60>
			printk("Could not set system mode, error: %d", err);
    feba:	4601      	mov	r1, r0
    febc:	4811      	ldr	r0, [pc, #68]	; (ff04 <init_and_config+0xa4>)
    febe:	e7e8      	b.n	fe92 <init_and_config+0x32>
		printk("System mode (%d) and preference (%d) configured",
    fec0:	783a      	ldrb	r2, [r7, #0]
    fec2:	7831      	ldrb	r1, [r6, #0]
    fec4:	4810      	ldr	r0, [pc, #64]	; (ff08 <init_and_config+0xa8>)
		printk("System mode (%d) and preference (%d) are already configured",
    fec6:	f007 fc0e 	bl	176e6 <printk>
	err = enable_notifications();
    feca:	f7ff fae3 	bl	f494 <enable_notifications>
	if (err) {
    fece:	4604      	mov	r4, r0
    fed0:	b130      	cbz	r0, fee0 <init_and_config+0x80>
		printk("Failed to enable notifications");
    fed2:	480e      	ldr	r0, [pc, #56]	; (ff0c <init_and_config+0xac>)
    fed4:	f007 fc07 	bl	176e6 <printk>
		return err;
    fed8:	e7dd      	b.n	fe96 <init_and_config+0x36>
		printk("System mode (%d) and preference (%d) are already configured",
    feda:	4619      	mov	r1, r3
    fedc:	480c      	ldr	r0, [pc, #48]	; (ff10 <init_and_config+0xb0>)
    fede:	e7f2      	b.n	fec6 <init_and_config+0x66>
	is_initialized = true;
    fee0:	2301      	movs	r3, #1
    fee2:	702b      	strb	r3, [r5, #0]
	return 0;
    fee4:	e7c4      	b.n	fe70 <init_and_config+0x10>
    fee6:	bf00      	nop
    fee8:	2000eca0 	.word	0x2000eca0
    feec:	0001d198 	.word	0x0001d198
    fef0:	2000ec90 	.word	0x2000ec90
    fef4:	2000d2f8 	.word	0x2000d2f8
    fef8:	0001d1ca 	.word	0x0001d1ca
    fefc:	2000c890 	.word	0x2000c890
    ff00:	2000ec92 	.word	0x2000ec92
    ff04:	0001d1f7 	.word	0x0001d1f7
    ff08:	0001d21c 	.word	0x0001d21c
    ff0c:	0001d288 	.word	0x0001d288
    ff10:	0001d24c 	.word	0x0001d24c
    ff14:	2000ec91 	.word	0x2000ec91

0000ff18 <lte_lc_func_mode_set>:

	return 0;
}

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
    ff18:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	switch (mode) {
    ff1a:	2804      	cmp	r0, #4
{
    ff1c:	4604      	mov	r4, r0
    ff1e:	b085      	sub	sp, #20
	switch (mode) {
    ff20:	d820      	bhi.n	ff64 <lte_lc_func_mode_set+0x4c>
    ff22:	2804      	cmp	r0, #4
    ff24:	d823      	bhi.n	ff6e <lte_lc_func_mode_set+0x56>
    ff26:	e8df f000 	tbb	[pc, r0]
    ff2a:	303a      	.short	0x303a
    ff2c:	223a      	.short	0x223a
    ff2e:	3a          	.byte	0x3a
    ff2f:	00          	.byte	0x00
    ff30:	2501      	movs	r5, #1
    ff32:	4b29      	ldr	r3, [pc, #164]	; (ffd8 <lte_lc_func_mode_set+0xc0>)
    ff34:	40b5      	lsls	r5, r6
    ff36:	401d      	ands	r5, r3
    ff38:	d131      	bne.n	ff9e <lte_lc_func_mode_set+0x86>
    ff3a:	2e01      	cmp	r6, #1
    ff3c:	d117      	bne.n	ff6e <lte_lc_func_mode_set+0x56>
	case LTE_LC_FUNC_MODE_ACTIVATE_LTE:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_ACTIVATE_LTE);

		err = enable_notifications();
    ff3e:	f7ff faa9 	bl	f494 <enable_notifications>
		if (err) {
    ff42:	b360      	cbz	r0, ff9e <lte_lc_func_mode_set+0x86>
			LOG_ERR("Failed to enable notifications, error: %d", err);
    ff44:	4b25      	ldr	r3, [pc, #148]	; (ffdc <lte_lc_func_mode_set+0xc4>)
    ff46:	9003      	str	r0, [sp, #12]
    ff48:	e9cd 5301 	strd	r5, r3, [sp, #4]
    ff4c:	462b      	mov	r3, r5
    ff4e:	9500      	str	r5, [sp, #0]
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
		if (err) {
			LOG_ERR("Failed to enable notifications, error: %d", err);
    ff50:	2201      	movs	r2, #1
    ff52:	4618      	mov	r0, r3
    ff54:	4922      	ldr	r1, [pc, #136]	; (ffe0 <lte_lc_func_mode_set+0xc8>)
    ff56:	f008 ffeb 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
			return -EFAULT;
    ff5a:	f06f 050d 	mvn.w	r5, #13
		LOG_DBG("CFUN monitor callback: %p", e->callback);
		e->callback(mode, e->context);
	}

	return 0;
}
    ff5e:	4628      	mov	r0, r5
    ff60:	b005      	add	sp, #20
    ff62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (mode) {
    ff64:	f1a0 0614 	sub.w	r6, r0, #20
    ff68:	b2f6      	uxtb	r6, r6
    ff6a:	2e18      	cmp	r6, #24
    ff6c:	d9e0      	bls.n	ff30 <lte_lc_func_mode_set+0x18>
		LOG_ERR("Invalid functional mode: %d", mode);
    ff6e:	4b1d      	ldr	r3, [pc, #116]	; (ffe4 <lte_lc_func_mode_set+0xcc>)
    ff70:	2201      	movs	r2, #1
    ff72:	9302      	str	r3, [sp, #8]
    ff74:	2300      	movs	r3, #0
    ff76:	491a      	ldr	r1, [pc, #104]	; (ffe0 <lte_lc_func_mode_set+0xc8>)
    ff78:	4618      	mov	r0, r3
    ff7a:	e9cd 3300 	strd	r3, r3, [sp]
    ff7e:	9403      	str	r4, [sp, #12]
    ff80:	f008 ffd6 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    ff84:	f06f 0515 	mvn.w	r5, #21
    ff88:	e7e9      	b.n	ff5e <lte_lc_func_mode_set+0x46>
		err = enable_notifications();
    ff8a:	f7ff fa83 	bl	f494 <enable_notifications>
		if (err) {
    ff8e:	b130      	cbz	r0, ff9e <lte_lc_func_mode_set+0x86>
			LOG_ERR("Failed to enable notifications, error: %d", err);
    ff90:	4b12      	ldr	r3, [pc, #72]	; (ffdc <lte_lc_func_mode_set+0xc4>)
    ff92:	9003      	str	r0, [sp, #12]
    ff94:	9302      	str	r3, [sp, #8]
    ff96:	2300      	movs	r3, #0
    ff98:	e9cd 3300 	strd	r3, r3, [sp]
    ff9c:	e7d8      	b.n	ff50 <lte_lc_func_mode_set+0x38>
	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
    ff9e:	4621      	mov	r1, r4
    ffa0:	4811      	ldr	r0, [pc, #68]	; (ffe8 <lte_lc_func_mode_set+0xd0>)
    ffa2:	f002 f947 	bl	12234 <nrf_modem_at_printf>
	if (err) {
    ffa6:	4605      	mov	r5, r0
    ffa8:	b190      	cbz	r0, ffd0 <lte_lc_func_mode_set+0xb8>
		LOG_ERR("Failed to set functional mode. Please check XSYSTEMMODE.");
    ffaa:	4b10      	ldr	r3, [pc, #64]	; (ffec <lte_lc_func_mode_set+0xd4>)
    ffac:	2201      	movs	r2, #1
    ffae:	9302      	str	r3, [sp, #8]
    ffb0:	2300      	movs	r3, #0
    ffb2:	490b      	ldr	r1, [pc, #44]	; (ffe0 <lte_lc_func_mode_set+0xc8>)
    ffb4:	4618      	mov	r0, r3
    ffb6:	e9cd 3300 	strd	r3, r3, [sp]
    ffba:	f008 ffb9 	bl	18f30 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
    ffbe:	e7cc      	b.n	ff5a <lte_lc_func_mode_set+0x42>
		e->callback(mode, e->context);
    ffc0:	e9d6 3100 	ldrd	r3, r1, [r6]
    ffc4:	4620      	mov	r0, r4
    ffc6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
    ffc8:	3608      	adds	r6, #8
    ffca:	42be      	cmp	r6, r7
    ffcc:	d3f8      	bcc.n	ffc0 <lte_lc_func_mode_set+0xa8>
    ffce:	e7c6      	b.n	ff5e <lte_lc_func_mode_set+0x46>
    ffd0:	4e07      	ldr	r6, [pc, #28]	; (fff0 <lte_lc_func_mode_set+0xd8>)
    ffd2:	4f08      	ldr	r7, [pc, #32]	; (fff4 <lte_lc_func_mode_set+0xdc>)
    ffd4:	e7f9      	b.n	ffca <lte_lc_func_mode_set+0xb2>
    ffd6:	bf00      	nop
    ffd8:	01300c01 	.word	0x01300c01
    ffdc:	0001d2a7 	.word	0x0001d2a7
    ffe0:	0001b614 	.word	0x0001b614
    ffe4:	0001d2d1 	.word	0x0001d2d1
    ffe8:	0001d2ed 	.word	0x0001d2ed
    ffec:	0001d2f8 	.word	0x0001d2f8
    fff0:	0001e2e4 	.word	0x0001e2e4
    fff4:	0001e2e4 	.word	0x0001e2e4

0000fff8 <lte_lc_deinit>:
{
    fff8:	b508      	push	{r3, lr}
	if (is_initialized) {
    fffa:	4b06      	ldr	r3, [pc, #24]	; (10014 <lte_lc_deinit+0x1c>)
    fffc:	781a      	ldrb	r2, [r3, #0]
    fffe:	b122      	cbz	r2, 1000a <lte_lc_deinit+0x12>
		is_initialized = false;
   10000:	2000      	movs	r0, #0
   10002:	7018      	strb	r0, [r3, #0]
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   10004:	f7ff ff88 	bl	ff18 <lte_lc_func_mode_set>
   10008:	b908      	cbnz	r0, 1000e <lte_lc_deinit+0x16>
   1000a:	2000      	movs	r0, #0
}
   1000c:	bd08      	pop	{r3, pc}
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   1000e:	f06f 000d 	mvn.w	r0, #13
   10012:	e7fb      	b.n	1000c <lte_lc_deinit+0x14>
   10014:	2000eca0 	.word	0x2000eca0

00010018 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   10018:	4801      	ldr	r0, [pc, #4]	; (10020 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   1001a:	f004 bb47 	b.w	146ac <z_impl_k_mutex_unlock>
   1001e:	bf00      	nop
   10020:	2000c9c4 	.word	0x2000c9c4

00010024 <event_handler_list_is_empty>:
	return list->head;
   10024:	4b02      	ldr	r3, [pc, #8]	; (10030 <event_handler_list_is_empty+0xc>)
Z_GENLIST_IS_EMPTY(slist)
   10026:	6818      	ldr	r0, [r3, #0]
}
   10028:	fab0 f080 	clz	r0, r0
   1002c:	0940      	lsrs	r0, r0, #5
   1002e:	4770      	bx	lr
   10030:	2000d310 	.word	0x2000d310

00010034 <event_handler_list_dispatch>:
{
   10034:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   10036:	4c0f      	ldr	r4, [pc, #60]	; (10074 <event_handler_list_dispatch+0x40>)
   10038:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   1003a:	6823      	ldr	r3, [r4, #0]
   1003c:	b1c3      	cbz	r3, 10070 <event_handler_list_dispatch+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   1003e:	f04f 33ff 	mov.w	r3, #4294967295
   10042:	f04f 32ff 	mov.w	r2, #4294967295
   10046:	480c      	ldr	r0, [pc, #48]	; (10078 <event_handler_list_dispatch+0x44>)
   10048:	f004 fab6 	bl	145b8 <z_impl_k_mutex_lock>
   1004c:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1004e:	b10b      	cbz	r3, 10054 <event_handler_list_dispatch+0x20>
	return node->next;
   10050:	681c      	ldr	r4, [r3, #0]
   10052:	b91b      	cbnz	r3, 1005c <event_handler_list_dispatch+0x28>
}
   10054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   10058:	f7ff bfde 	b.w	10018 <k_mutex_unlock.constprop.0.isra.0>
		curr->handler(evt);
   1005c:	4628      	mov	r0, r5
   1005e:	685b      	ldr	r3, [r3, #4]
   10060:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   10062:	b11c      	cbz	r4, 1006c <event_handler_list_dispatch+0x38>
   10064:	6822      	ldr	r2, [r4, #0]
   10066:	4623      	mov	r3, r4
   10068:	4614      	mov	r4, r2
   1006a:	e7f2      	b.n	10052 <event_handler_list_dispatch+0x1e>
   1006c:	4622      	mov	r2, r4
   1006e:	e7fa      	b.n	10066 <event_handler_list_dispatch+0x32>
}
   10070:	bd38      	pop	{r3, r4, r5, pc}
   10072:	bf00      	nop
   10074:	2000d310 	.word	0x2000d310
   10078:	2000c9c4 	.word	0x2000c9c4

0001007c <response_is_valid>:
{
   1007c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1007e:	460e      	mov	r6, r1
   10080:	4614      	mov	r4, r2
	if ((response == NULL) || (check == NULL)) {
   10082:	4605      	mov	r5, r0
   10084:	b100      	cbz	r0, 10088 <response_is_valid+0xc>
   10086:	b962      	cbnz	r2, 100a2 <response_is_valid+0x26>
		LOG_ERR("Invalid pointer provided");
   10088:	4b0d      	ldr	r3, [pc, #52]	; (100c0 <response_is_valid+0x44>)
   1008a:	2201      	movs	r2, #1
   1008c:	9302      	str	r3, [sp, #8]
   1008e:	2300      	movs	r3, #0
   10090:	490c      	ldr	r1, [pc, #48]	; (100c4 <response_is_valid+0x48>)
   10092:	4618      	mov	r0, r3
   10094:	e9cd 3300 	strd	r3, r3, [sp]
   10098:	f008 ff61 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
		return false;
   1009c:	2000      	movs	r0, #0
}
   1009e:	b004      	add	sp, #16
   100a0:	bd70      	pop	{r4, r5, r6, pc}
	if ((response_len < strlen(check)) ||
   100a2:	4610      	mov	r0, r2
   100a4:	f7f8 fea6 	bl	8df4 <strlen>
   100a8:	42b0      	cmp	r0, r6
   100aa:	d8f7      	bhi.n	1009c <response_is_valid+0x20>
	    (memcmp(response, check, response_len) != 0)) {
   100ac:	4632      	mov	r2, r6
   100ae:	4621      	mov	r1, r4
   100b0:	4628      	mov	r0, r5
   100b2:	f00a fb07 	bl	1a6c4 <memcmp>
	if ((response_len < strlen(check)) ||
   100b6:	fab0 f080 	clz	r0, r0
   100ba:	0940      	lsrs	r0, r0, #5
   100bc:	e7ef      	b.n	1009e <response_is_valid+0x22>
   100be:	bf00      	nop
   100c0:	0001d3cb 	.word	0x0001d3cb
   100c4:	0001b61c 	.word	0x0001b61c

000100c8 <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   100c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
   100cc:	2700      	movs	r7, #0
{
   100ce:	b087      	sub	sp, #28
   100d0:	4680      	mov	r8, r0
   100d2:	460e      	mov	r6, r1
   100d4:	4614      	mov	r4, r2
   100d6:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   100d8:	9705      	str	r7, [sp, #20]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   100da:	f7f8 fe8b 	bl	8df4 <strlen>
   100de:	2808      	cmp	r0, #8
   100e0:	d11b      	bne.n	1011a <parse_psm+0x52>
   100e2:	4630      	mov	r0, r6
   100e4:	f7f8 fe86 	bl	8df4 <strlen>
   100e8:	2808      	cmp	r0, #8
   100ea:	d116      	bne.n	1011a <parse_psm+0x52>
		return -EINVAL;
	}

	/* Parse T3412-extended (periodic TAU) timer */
	memcpy(unit_str, tau_ext_str, unit_str_len);
   100ec:	8832      	ldrh	r2, [r6, #0]
   100ee:	78b3      	ldrb	r3, [r6, #2]
   100f0:	f8ad 2014 	strh.w	r2, [sp, #20]

	lut_idx = strtoul(unit_str, NULL, 2);
   100f4:	4639      	mov	r1, r7
   100f6:	2202      	movs	r2, #2
   100f8:	a805      	add	r0, sp, #20
	memcpy(unit_str, tau_ext_str, unit_str_len);
   100fa:	f88d 3016 	strb.w	r3, [sp, #22]
	lut_idx = strtoul(unit_str, NULL, 2);
   100fe:	f005 ff71 	bl	15fe4 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   10102:	2807      	cmp	r0, #7
   10104:	d90e      	bls.n	10124 <parse_psm+0x5c>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   10106:	4b36      	ldr	r3, [pc, #216]	; (101e0 <parse_psm+0x118>)
   10108:	9700      	str	r7, [sp, #0]
   1010a:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1010e:	463b      	mov	r3, r7
   10110:	2201      	movs	r2, #1
   10112:	4618      	mov	r0, r3
   10114:	4933      	ldr	r1, [pc, #204]	; (101e4 <parse_psm+0x11c>)
   10116:	f008 ff22 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1011a:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   1011e:	b007      	add	sp, #28
   10120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	timer_unit = t3412_ext_lookup[lut_idx];
   10124:	4b30      	ldr	r3, [pc, #192]	; (101e8 <parse_psm+0x120>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   10126:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   10128:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   1012c:	4639      	mov	r1, r7
   1012e:	1cf0      	adds	r0, r6, #3
   10130:	f005 ff58 	bl	15fe4 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   10134:	f1b9 0f00 	cmp.w	r9, #0
   10138:	d11b      	bne.n	10172 <parse_psm+0xaa>
   1013a:	f04f 33ff 	mov.w	r3, #4294967295
   1013e:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   10140:	b1e4      	cbz	r4, 1017c <parse_psm+0xb4>
   10142:	4620      	mov	r0, r4
   10144:	f7f8 fe56 	bl	8df4 <strlen>
   10148:	2808      	cmp	r0, #8
   1014a:	d117      	bne.n	1017c <parse_psm+0xb4>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   1014c:	8822      	ldrh	r2, [r4, #0]
   1014e:	78a3      	ldrb	r3, [r4, #2]
   10150:	f8ad 2014 	strh.w	r2, [sp, #20]
		lut_idx = strtoul(unit_str, NULL, 2);
   10154:	2100      	movs	r1, #0
   10156:	2202      	movs	r2, #2
   10158:	a805      	add	r0, sp, #20
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   1015a:	f88d 3016 	strb.w	r3, [sp, #22]
		lut_idx = strtoul(unit_str, NULL, 2);
   1015e:	f005 ff41 	bl	15fe4 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   10162:	2807      	cmp	r0, #7
   10164:	d91b      	bls.n	1019e <parse_psm+0xd6>
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   10166:	4b21      	ldr	r3, [pc, #132]	; (101ec <parse_psm+0x124>)
		LOG_ERR("Unable to parse active time string");
   10168:	9302      	str	r3, [sp, #8]
   1016a:	2300      	movs	r3, #0
   1016c:	e9cd 3300 	strd	r3, r3, [sp]
   10170:	e7ce      	b.n	10110 <parse_psm+0x48>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   10172:	fb09 f000 	mul.w	r0, r9, r0
   10176:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   10178:	3001      	adds	r0, #1
   1017a:	d0e1      	beq.n	10140 <parse_psm+0x78>
	memcpy(unit_str, active_time_str, unit_str_len);
   1017c:	f8b8 2000 	ldrh.w	r2, [r8]
   10180:	f898 3002 	ldrb.w	r3, [r8, #2]
   10184:	f8ad 2014 	strh.w	r2, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   10188:	2100      	movs	r1, #0
   1018a:	2202      	movs	r2, #2
   1018c:	a805      	add	r0, sp, #20
	memcpy(unit_str, active_time_str, unit_str_len);
   1018e:	f88d 3016 	strb.w	r3, [sp, #22]
	lut_idx = strtoul(unit_str, NULL, 2);
   10192:	f005 ff27 	bl	15fe4 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   10196:	2807      	cmp	r0, #7
   10198:	d910      	bls.n	101bc <parse_psm+0xf4>
		LOG_ERR("Unable to parse active time string");
   1019a:	4b15      	ldr	r3, [pc, #84]	; (101f0 <parse_psm+0x128>)
   1019c:	e7e4      	b.n	10168 <parse_psm+0xa0>
		timer_unit = t3412_lookup[lut_idx];
   1019e:	4b15      	ldr	r3, [pc, #84]	; (101f4 <parse_psm+0x12c>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   101a0:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   101a2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   101a6:	2100      	movs	r1, #0
   101a8:	1ce0      	adds	r0, r4, #3
   101aa:	f005 ff1b 	bl	15fe4 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   101ae:	b116      	cbz	r6, 101b6 <parse_psm+0xee>
   101b0:	4346      	muls	r6, r0
   101b2:	602e      	str	r6, [r5, #0]
   101b4:	e7e2      	b.n	1017c <parse_psm+0xb4>
   101b6:	f04f 36ff 	mov.w	r6, #4294967295
   101ba:	e7fa      	b.n	101b2 <parse_psm+0xea>
	timer_unit = t3324_lookup[lut_idx];
   101bc:	4b0e      	ldr	r3, [pc, #56]	; (101f8 <parse_psm+0x130>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   101be:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   101c0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   101c4:	2100      	movs	r1, #0
   101c6:	f108 0003 	add.w	r0, r8, #3
   101ca:	f005 ff0b 	bl	15fe4 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   101ce:	b11c      	cbz	r4, 101d8 <parse_psm+0x110>
   101d0:	4344      	muls	r4, r0
	return 0;
   101d2:	2000      	movs	r0, #0
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   101d4:	606c      	str	r4, [r5, #4]
	return 0;
   101d6:	e7a2      	b.n	1011e <parse_psm+0x56>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   101d8:	f04f 34ff 	mov.w	r4, #4294967295
   101dc:	e7f9      	b.n	101d2 <parse_psm+0x10a>
   101de:	bf00      	nop
   101e0:	0001d51b 	.word	0x0001d51b
   101e4:	0001b61c 	.word	0x0001b61c
   101e8:	0001ba94 	.word	0x0001ba94
   101ec:	0001d550 	.word	0x0001d550
   101f0:	0001d57c 	.word	0x0001d57c
   101f4:	0001ba74 	.word	0x0001ba74
   101f8:	0001ba74 	.word	0x0001ba74

000101fc <parse_rrc_mode>:
 * @return Zero on success or (negative) error code otherwise.
 */
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
   101fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   10200:	2500      	movs	r5, #0
{
   10202:	b088      	sub	sp, #32
   10204:	4680      	mov	r8, r0
   10206:	460e      	mov	r6, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   10208:	a806      	add	r0, sp, #24
   1020a:	2104      	movs	r1, #4
{
   1020c:	4617      	mov	r7, r2
	struct at_param_list resp_list = {0};
   1020e:	e9cd 5506 	strd	r5, r5, [sp, #24]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   10212:	f008 fd50 	bl	18cb6 <at_params_list_init>
	if (err) {
   10216:	4604      	mov	r4, r0
   10218:	b170      	cbz	r0, 10238 <parse_rrc_mode+0x3c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1021a:	4b22      	ldr	r3, [pc, #136]	; (102a4 <parse_rrc_mode+0xa8>)
   1021c:	9003      	str	r0, [sp, #12]
   1021e:	e9cd 5301 	strd	r5, r3, [sp, #4]
   10222:	2201      	movs	r2, #1
   10224:	462b      	mov	r3, r5
   10226:	4628      	mov	r0, r5
   10228:	491f      	ldr	r1, [pc, #124]	; (102a8 <parse_rrc_mode+0xac>)
   1022a:	9500      	str	r5, [sp, #0]
   1022c:	f008 fe97 	bl	18f5e <z_log_msg_runtime_create.constprop.0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   10230:	4620      	mov	r0, r4
   10232:	b008      	add	sp, #32
   10234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_parser_params_from_str(at_response,
   10238:	4601      	mov	r1, r0
   1023a:	aa06      	add	r2, sp, #24
   1023c:	4640      	mov	r0, r8
   1023e:	f008 fd21 	bl	18c84 <at_parser_params_from_str>
	if (err) {
   10242:	4604      	mov	r4, r0
   10244:	b170      	cbz	r0, 10264 <parse_rrc_mode+0x68>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   10246:	4b19      	ldr	r3, [pc, #100]	; (102ac <parse_rrc_mode+0xb0>)
   10248:	9003      	str	r0, [sp, #12]
		LOG_ERR("Could not get signalling mode, error: %d", err);
   1024a:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1024e:	2201      	movs	r2, #1
   10250:	462b      	mov	r3, r5
   10252:	4628      	mov	r0, r5
   10254:	4914      	ldr	r1, [pc, #80]	; (102a8 <parse_rrc_mode+0xac>)
   10256:	9500      	str	r5, [sp, #0]
   10258:	f008 fe81 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   1025c:	a806      	add	r0, sp, #24
   1025e:	f008 fd54 	bl	18d0a <at_params_list_free>
	return err;
   10262:	e7e5      	b.n	10230 <parse_rrc_mode+0x34>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   10264:	4639      	mov	r1, r7
   10266:	aa05      	add	r2, sp, #20
   10268:	a806      	add	r0, sp, #24
   1026a:	f008 fe00 	bl	18e6e <at_params_int_get>
	if (err) {
   1026e:	4604      	mov	r4, r0
   10270:	b110      	cbz	r0, 10278 <parse_rrc_mode+0x7c>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   10272:	4b0f      	ldr	r3, [pc, #60]	; (102b0 <parse_rrc_mode+0xb4>)
   10274:	9003      	str	r0, [sp, #12]
   10276:	e7e8      	b.n	1024a <parse_rrc_mode+0x4e>
	if (temp_mode == 0) {
   10278:	9b05      	ldr	r3, [sp, #20]
   1027a:	b11b      	cbz	r3, 10284 <parse_rrc_mode+0x88>
	} else if (temp_mode == 1) {
   1027c:	2b01      	cmp	r3, #1
   1027e:	d103      	bne.n	10288 <parse_rrc_mode+0x8c>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   10280:	7033      	strb	r3, [r6, #0]
   10282:	e7eb      	b.n	1025c <parse_rrc_mode+0x60>
   10284:	4603      	mov	r3, r0
   10286:	e7fb      	b.n	10280 <parse_rrc_mode+0x84>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   10288:	9303      	str	r3, [sp, #12]
   1028a:	4b0a      	ldr	r3, [pc, #40]	; (102b4 <parse_rrc_mode+0xb8>)
   1028c:	2201      	movs	r2, #1
   1028e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   10292:	4905      	ldr	r1, [pc, #20]	; (102a8 <parse_rrc_mode+0xac>)
   10294:	4603      	mov	r3, r0
   10296:	9000      	str	r0, [sp, #0]
   10298:	f008 fe61 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
		err = -EINVAL;
   1029c:	f06f 0415 	mvn.w	r4, #21
   102a0:	e7dc      	b.n	1025c <parse_rrc_mode+0x60>
   102a2:	bf00      	nop
   102a4:	0001d3e4 	.word	0x0001d3e4
   102a8:	0001b61c 	.word	0x0001b61c
   102ac:	0001d59f 	.word	0x0001d59f
   102b0:	0001d5ca 	.word	0x0001d5ca
   102b4:	0001d5f3 	.word	0x0001d5f3

000102b8 <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   102b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   102bc:	2600      	movs	r6, #0
{
   102be:	4617      	mov	r7, r2
   102c0:	461d      	mov	r5, r3
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   102c2:	2207      	movs	r2, #7
   102c4:	2309      	movs	r3, #9
{
   102c6:	b08e      	sub	sp, #56	; 0x38
   102c8:	4682      	mov	sl, r0
   102ca:	4688      	mov	r8, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   102cc:	a809      	add	r0, sp, #36	; 0x24
   102ce:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   102d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   102d4:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   102d8:	9607      	str	r6, [sp, #28]
   102da:	f8ad 6020 	strh.w	r6, [sp, #32]
   102de:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   102e2:	f008 fce8 	bl	18cb6 <at_params_list_init>
	if (err) {
   102e6:	4604      	mov	r4, r0
   102e8:	b170      	cbz	r0, 10308 <parse_cereg+0x50>
		LOG_ERR("Could not init AT params list, error: %d", err);
   102ea:	4b63      	ldr	r3, [pc, #396]	; (10478 <parse_cereg+0x1c0>)
   102ec:	9003      	str	r0, [sp, #12]
   102ee:	e9cd 6301 	strd	r6, r3, [sp, #4]
   102f2:	2201      	movs	r2, #1
   102f4:	4633      	mov	r3, r6
   102f6:	4630      	mov	r0, r6
   102f8:	4960      	ldr	r1, [pc, #384]	; (1047c <parse_cereg+0x1c4>)
   102fa:	9600      	str	r6, [sp, #0]
   102fc:	f008 fe2f 	bl	18f5e <z_log_msg_runtime_create.constprop.0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   10300:	4620      	mov	r0, r4
   10302:	b00e      	add	sp, #56	; 0x38
   10304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   10308:	4601      	mov	r1, r0
   1030a:	aa09      	add	r2, sp, #36	; 0x24
   1030c:	4650      	mov	r0, sl
   1030e:	f008 fcb9 	bl	18c84 <at_parser_params_from_str>
	if (err) {
   10312:	4604      	mov	r4, r0
   10314:	b170      	cbz	r0, 10334 <parse_cereg+0x7c>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   10316:	4b5a      	ldr	r3, [pc, #360]	; (10480 <parse_cereg+0x1c8>)
   10318:	9003      	str	r0, [sp, #12]
		LOG_ERR("Could not get response prefix, error: %d", err);
   1031a:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1031e:	2201      	movs	r2, #1
   10320:	4633      	mov	r3, r6
   10322:	4630      	mov	r0, r6
   10324:	4955      	ldr	r1, [pc, #340]	; (1047c <parse_cereg+0x1c4>)
   10326:	9600      	str	r6, [sp, #0]
   10328:	f008 fe19 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   1032c:	a809      	add	r0, sp, #36	; 0x24
   1032e:	f008 fcec 	bl	18d0a <at_params_list_free>
	return err;
   10332:	e7e5      	b.n	10300 <parse_cereg+0x48>
	err = at_params_string_get(&resp_list,
   10334:	4601      	mov	r1, r0
   10336:	ab04      	add	r3, sp, #16
   10338:	aa07      	add	r2, sp, #28
   1033a:	a809      	add	r0, sp, #36	; 0x24
   1033c:	f008 fdc3 	bl	18ec6 <at_params_string_get>
	if (err) {
   10340:	4604      	mov	r4, r0
   10342:	b110      	cbz	r0, 1034a <parse_cereg+0x92>
		LOG_ERR("Could not get response prefix, error: %d", err);
   10344:	4b4f      	ldr	r3, [pc, #316]	; (10484 <parse_cereg+0x1cc>)
   10346:	9003      	str	r0, [sp, #12]
   10348:	e7e7      	b.n	1031a <parse_cereg+0x62>
	if (!response_is_valid(response_prefix, response_prefix_len,
   1034a:	4a4f      	ldr	r2, [pc, #316]	; (10488 <parse_cereg+0x1d0>)
   1034c:	9904      	ldr	r1, [sp, #16]
   1034e:	a807      	add	r0, sp, #28
   10350:	f7ff fe94 	bl	1007c <response_is_valid>
   10354:	2800      	cmp	r0, #0
   10356:	d0e9      	beq.n	1032c <parse_cereg+0x74>
	err = at_params_int_get(list, reg_status_index, &reg_status);
   10358:	aa0b      	add	r2, sp, #44	; 0x2c
   1035a:	f1c8 0102 	rsb	r1, r8, #2
   1035e:	a809      	add	r0, sp, #36	; 0x24
   10360:	f008 fd85 	bl	18e6e <at_params_int_get>
	if (err) {
   10364:	1e06      	subs	r6, r0, #0
   10366:	d14a      	bne.n	103fe <parse_cereg+0x146>
	switch (reg_status) {
   10368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1036a:	2b08      	cmp	r3, #8
   1036c:	d031      	beq.n	103d2 <parse_cereg+0x11a>
   1036e:	dc1b      	bgt.n	103a8 <parse_cereg+0xf0>
   10370:	2b05      	cmp	r3, #5
   10372:	d92e      	bls.n	103d2 <parse_cereg+0x11a>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   10374:	9303      	str	r3, [sp, #12]
   10376:	4b45      	ldr	r3, [pc, #276]	; (1048c <parse_cereg+0x1d4>)
   10378:	2201      	movs	r2, #1
   1037a:	9302      	str	r3, [sp, #8]
   1037c:	2300      	movs	r3, #0
   1037e:	493f      	ldr	r1, [pc, #252]	; (1047c <parse_cereg+0x1c4>)
   10380:	4618      	mov	r0, r3
   10382:	e9cd 3300 	strd	r3, r3, [sp]
   10386:	f008 fdea 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1038a:	f06f 0615 	mvn.w	r6, #21
		LOG_ERR("Could not get registration status, error: %d", status);
   1038e:	4b40      	ldr	r3, [pc, #256]	; (10490 <parse_cereg+0x1d8>)
   10390:	9603      	str	r6, [sp, #12]
			LOG_ERR("Could not get tracking area code, error: %d", err);
   10392:	9302      	str	r3, [sp, #8]
   10394:	2300      	movs	r3, #0
   10396:	2201      	movs	r2, #1
   10398:	4618      	mov	r0, r3
   1039a:	e9cd 3300 	strd	r3, r3, [sp]
   1039e:	4937      	ldr	r1, [pc, #220]	; (1047c <parse_cereg+0x1c4>)
   103a0:	f008 fddd 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
			goto clean_exit;
   103a4:	4634      	mov	r4, r6
   103a6:	e7c1      	b.n	1032c <parse_cereg+0x74>
	switch (reg_status) {
   103a8:	2b5a      	cmp	r3, #90	; 0x5a
   103aa:	d1e3      	bne.n	10374 <parse_cereg+0xbc>
	if (reg_status) {
   103ac:	b107      	cbz	r7, 103b0 <parse_cereg+0xf8>
		*reg_status = status;
   103ae:	703b      	strb	r3, [r7, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   103b0:	bb65      	cbnz	r5, 1040c <parse_cereg+0x154>
	if (lte_mode) {
   103b2:	f1b9 0f00 	cmp.w	r9, #0
   103b6:	d0b9      	beq.n	1032c <parse_cereg+0x74>
		err = at_params_int_get(&resp_list,
   103b8:	aa06      	add	r2, sp, #24
   103ba:	f1c8 0105 	rsb	r1, r8, #5
   103be:	a809      	add	r0, sp, #36	; 0x24
   103c0:	f008 fd55 	bl	18e6e <at_params_int_get>
		if (err) {
   103c4:	2800      	cmp	r0, #0
   103c6:	d155      	bne.n	10474 <parse_cereg+0x1bc>
			*lte_mode = mode;
   103c8:	f89d 3018 	ldrb.w	r3, [sp, #24]
			LOG_DBG("LTE mode: %d", *lte_mode);
   103cc:	f889 3000 	strb.w	r3, [r9]
   103d0:	e7ac      	b.n	1032c <parse_cereg+0x74>
	if (reg_status) {
   103d2:	b997      	cbnz	r7, 103fa <parse_cereg+0x142>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   103d4:	2d00      	cmp	r5, #0
   103d6:	d0ec      	beq.n	103b2 <parse_cereg+0xfa>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   103d8:	a809      	add	r0, sp, #36	; 0x24
   103da:	f008 fd94 	bl	18f06 <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   103de:	2803      	cmp	r0, #3
   103e0:	d914      	bls.n	1040c <parse_cereg+0x154>
		err = at_params_string_get(
   103e2:	ab05      	add	r3, sp, #20
   103e4:	aa0b      	add	r2, sp, #44	; 0x2c
   103e6:	f1c8 0103 	rsb	r1, r8, #3
   103ea:	a809      	add	r0, sp, #36	; 0x24
   103ec:	f008 fd6b 	bl	18ec6 <at_params_string_get>
		if (err) {
   103f0:	4606      	mov	r6, r0
   103f2:	b180      	cbz	r0, 10416 <parse_cereg+0x15e>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   103f4:	4b27      	ldr	r3, [pc, #156]	; (10494 <parse_cereg+0x1dc>)
   103f6:	9003      	str	r0, [sp, #12]
   103f8:	e7cb      	b.n	10392 <parse_cereg+0xda>
		*reg_status = status;
   103fa:	703b      	strb	r3, [r7, #0]
   103fc:	e7ea      	b.n	103d4 <parse_cereg+0x11c>
	if (status < 0) {
   103fe:	dbc6      	blt.n	1038e <parse_cereg+0xd6>
	if (reg_status) {
   10400:	b107      	cbz	r7, 10404 <parse_cereg+0x14c>
		*reg_status = status;
   10402:	703e      	strb	r6, [r7, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   10404:	2d00      	cmp	r5, #0
   10406:	d0d4      	beq.n	103b2 <parse_cereg+0xfa>
   10408:	2e5a      	cmp	r6, #90	; 0x5a
   1040a:	d1e5      	bne.n	103d8 <parse_cereg+0x120>
		cell->tac = UINT32_MAX;
   1040c:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   10410:	e9c5 3302 	strd	r3, r3, [r5, #8]
   10414:	e7cd      	b.n	103b2 <parse_cereg+0xfa>
		str_buf[len] = '\0';
   10416:	9b05      	ldr	r3, [sp, #20]
		cell->tac = strtoul(str_buf, NULL, 16);
   10418:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   1041a:	3338      	adds	r3, #56	; 0x38
   1041c:	446b      	add	r3, sp
   1041e:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   10422:	2210      	movs	r2, #16
   10424:	a80b      	add	r0, sp, #44	; 0x2c
   10426:	f005 fddd 	bl	15fe4 <strtoul>
		len = sizeof(str_buf) - 1;
   1042a:	2309      	movs	r3, #9
		cell->tac = strtoul(str_buf, NULL, 16);
   1042c:	60e8      	str	r0, [r5, #12]
		len = sizeof(str_buf) - 1;
   1042e:	9305      	str	r3, [sp, #20]
		err = at_params_string_get(&resp_list,
   10430:	aa0b      	add	r2, sp, #44	; 0x2c
   10432:	ab05      	add	r3, sp, #20
   10434:	f1c8 0104 	rsb	r1, r8, #4
   10438:	a809      	add	r0, sp, #36	; 0x24
   1043a:	f008 fd44 	bl	18ec6 <at_params_string_get>
		if (err) {
   1043e:	4607      	mov	r7, r0
   10440:	b160      	cbz	r0, 1045c <parse_cereg+0x1a4>
			LOG_ERR("Could not get cell ID, error: %d", err);
   10442:	4b15      	ldr	r3, [pc, #84]	; (10498 <parse_cereg+0x1e0>)
   10444:	9003      	str	r0, [sp, #12]
   10446:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1044a:	2201      	movs	r2, #1
   1044c:	4633      	mov	r3, r6
   1044e:	4630      	mov	r0, r6
   10450:	490a      	ldr	r1, [pc, #40]	; (1047c <parse_cereg+0x1c4>)
   10452:	9600      	str	r6, [sp, #0]
   10454:	f008 fd83 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
			goto clean_exit;
   10458:	463c      	mov	r4, r7
   1045a:	e767      	b.n	1032c <parse_cereg+0x74>
		str_buf[len] = '\0';
   1045c:	9b05      	ldr	r3, [sp, #20]
		cell->id = strtoul(str_buf, NULL, 16);
   1045e:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   10460:	3338      	adds	r3, #56	; 0x38
   10462:	446b      	add	r3, sp
   10464:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   10468:	2210      	movs	r2, #16
   1046a:	a80b      	add	r0, sp, #44	; 0x2c
   1046c:	f005 fdba 	bl	15fe4 <strtoul>
   10470:	60a8      	str	r0, [r5, #8]
   10472:	e79e      	b.n	103b2 <parse_cereg+0xfa>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   10474:	2300      	movs	r3, #0
   10476:	e7a9      	b.n	103cc <parse_cereg+0x114>
   10478:	0001d3e4 	.word	0x0001d3e4
   1047c:	0001b61c 	.word	0x0001b61c
   10480:	0001d60f 	.word	0x0001d60f
   10484:	0001d63c 	.word	0x0001d63c
   10488:	0001d367 	.word	0x0001d367
   1048c:	0001d665 	.word	0x0001d665
   10490:	0001d68d 	.word	0x0001d68d
   10494:	0001d6ba 	.word	0x0001d6ba
   10498:	0001d6e6 	.word	0x0001d6e6

0001049c <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
   1049c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	struct at_param_list resp_list = {0};
   1049e:	2500      	movs	r5, #0
{
   104a0:	b087      	sub	sp, #28
   104a2:	4607      	mov	r7, r0

	if (time == NULL || at_response == NULL) {
   104a4:	460e      	mov	r6, r1
	struct at_param_list resp_list = {0};
   104a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (time == NULL || at_response == NULL) {
   104aa:	2900      	cmp	r1, #0
   104ac:	d049      	beq.n	10542 <parse_xt3412+0xa6>
   104ae:	2800      	cmp	r0, #0
   104b0:	d047      	beq.n	10542 <parse_xt3412+0xa6>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   104b2:	2104      	movs	r1, #4
   104b4:	a804      	add	r0, sp, #16
   104b6:	f008 fbfe 	bl	18cb6 <at_params_list_init>
	if (err) {
   104ba:	4604      	mov	r4, r0
   104bc:	b168      	cbz	r0, 104da <parse_xt3412+0x3e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   104be:	4b22      	ldr	r3, [pc, #136]	; (10548 <parse_xt3412+0xac>)
   104c0:	9003      	str	r0, [sp, #12]
   104c2:	e9cd 5301 	strd	r5, r3, [sp, #4]
   104c6:	2201      	movs	r2, #1
   104c8:	462b      	mov	r3, r5
   104ca:	4628      	mov	r0, r5
   104cc:	491f      	ldr	r1, [pc, #124]	; (1054c <parse_xt3412+0xb0>)
   104ce:	9500      	str	r5, [sp, #0]
   104d0:	f008 fd45 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   104d4:	4620      	mov	r0, r4
   104d6:	b007      	add	sp, #28
   104d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   104da:	4601      	mov	r1, r0
   104dc:	aa04      	add	r2, sp, #16
   104de:	4638      	mov	r0, r7
   104e0:	f008 fbd0 	bl	18c84 <at_parser_params_from_str>
	if (err) {
   104e4:	4604      	mov	r4, r0
   104e6:	b170      	cbz	r0, 10506 <parse_xt3412+0x6a>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   104e8:	4b19      	ldr	r3, [pc, #100]	; (10550 <parse_xt3412+0xb4>)
   104ea:	9003      	str	r0, [sp, #12]
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   104ec:	e9cd 5301 	strd	r5, r3, [sp, #4]
   104f0:	2201      	movs	r2, #1
   104f2:	462b      	mov	r3, r5
   104f4:	4628      	mov	r0, r5
   104f6:	4915      	ldr	r1, [pc, #84]	; (1054c <parse_xt3412+0xb0>)
   104f8:	9500      	str	r5, [sp, #0]
   104fa:	f008 fd30 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   104fe:	a804      	add	r0, sp, #16
   10500:	f008 fc03 	bl	18d0a <at_params_list_free>
	return err;
   10504:	e7e6      	b.n	104d4 <parse_xt3412+0x38>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   10506:	4632      	mov	r2, r6
   10508:	2102      	movs	r1, #2
   1050a:	a804      	add	r0, sp, #16
   1050c:	f008 fcc7 	bl	18e9e <at_params_int64_get>
	if (err) {
   10510:	4604      	mov	r4, r0
   10512:	b110      	cbz	r0, 1051a <parse_xt3412+0x7e>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   10514:	4b0f      	ldr	r3, [pc, #60]	; (10554 <parse_xt3412+0xb8>)
   10516:	9003      	str	r0, [sp, #12]
   10518:	e7e8      	b.n	104ec <parse_xt3412+0x50>
	if ((*time > T3412_MAX) || *time < 0) {
   1051a:	490f      	ldr	r1, [pc, #60]	; (10558 <parse_xt3412+0xbc>)
   1051c:	e9d6 3200 	ldrd	r3, r2, [r6]
   10520:	4299      	cmp	r1, r3
   10522:	f04f 0308 	mov.w	r3, #8
   10526:	4193      	sbcs	r3, r2
   10528:	d2e9      	bcs.n	104fe <parse_xt3412+0x62>
		LOG_WRN("Parsed time parameter not within valid range");
   1052a:	4b0c      	ldr	r3, [pc, #48]	; (1055c <parse_xt3412+0xc0>)
   1052c:	2202      	movs	r2, #2
   1052e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   10532:	4906      	ldr	r1, [pc, #24]	; (1054c <parse_xt3412+0xb0>)
   10534:	4603      	mov	r3, r0
   10536:	9000      	str	r0, [sp, #0]
   10538:	f008 fd11 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
		err = -EINVAL;
   1053c:	f06f 0415 	mvn.w	r4, #21
   10540:	e7dd      	b.n	104fe <parse_xt3412+0x62>
		return -EINVAL;
   10542:	f06f 0415 	mvn.w	r4, #21
   10546:	e7c5      	b.n	104d4 <parse_xt3412+0x38>
   10548:	0001d3e4 	.word	0x0001d3e4
   1054c:	0001b61c 	.word	0x0001b61c
   10550:	0001d707 	.word	0x0001d707
   10554:	0001d734 	.word	0x0001d734
   10558:	5099e000 	.word	0x5099e000
   1055c:	0001d761 	.word	0x0001d761

00010560 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   10560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   10562:	4603      	mov	r3, r0
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   10564:	b958      	cbnz	r0, 1057e <neighborcell_count_get+0x1e>
		LOG_ERR("at_response is NULL, can't get cell count");
   10566:	4a0e      	ldr	r2, [pc, #56]	; (105a0 <neighborcell_count_get+0x40>)
   10568:	490e      	ldr	r1, [pc, #56]	; (105a4 <neighborcell_count_get+0x44>)
   1056a:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1056e:	9000      	str	r0, [sp, #0]
   10570:	2201      	movs	r2, #1
   10572:	f008 fcf4 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
		return 0;
   10576:	2000      	movs	r0, #0
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   10578:	b005      	add	sp, #20
   1057a:	f85d fb04 	ldr.w	pc, [sp], #4
   1057e:	1e43      	subs	r3, r0, #1
	uint32_t count = 0;
   10580:	2000      	movs	r0, #0
		if (*str == c) {
   10582:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   10586:	2a2c      	cmp	r2, #44	; 0x2c
   10588:	d101      	bne.n	1058e <neighborcell_count_get+0x2e>
			count++;
   1058a:	3001      	adds	r0, #1
	} while (*(str++) != '\0');
   1058c:	e7f9      	b.n	10582 <neighborcell_count_get+0x22>
   1058e:	2a00      	cmp	r2, #0
   10590:	d1f7      	bne.n	10582 <neighborcell_count_get+0x22>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   10592:	280a      	cmp	r0, #10
   10594:	d9ef      	bls.n	10576 <neighborcell_count_get+0x16>
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   10596:	2305      	movs	r3, #5
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   10598:	3809      	subs	r0, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   1059a:	fbb0 f0f3 	udiv	r0, r0, r3
	return ncell_count;
   1059e:	e7eb      	b.n	10578 <neighborcell_count_get+0x18>
   105a0:	0001d78e 	.word	0x0001d78e
   105a4:	0001b61c 	.word	0x0001b61c

000105a8 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   105a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   105ac:	230b      	movs	r3, #11
{
   105ae:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   105b0:	2100      	movs	r1, #0
{
   105b2:	4607      	mov	r7, r0
   105b4:	b091      	sub	sp, #68	; 0x44
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   105b6:	e9cd 110d 	strd	r1, r1, [sp, #52]	; 0x34
	size_t response_prefix_len = sizeof(response_prefix);
   105ba:	9308      	str	r3, [sp, #32]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   105bc:	f8cd 103b 	str.w	r1, [sp, #59]	; 0x3b
static uint32_t get_char_frequency(const char *str, char c)
   105c0:	1e43      	subs	r3, r0, #1
		if (*str == c) {
   105c2:	f813 6f01 	ldrb.w	r6, [r3, #1]!
   105c6:	2e2c      	cmp	r6, #44	; 0x2c
   105c8:	d101      	bne.n	105ce <parse_ncellmeas+0x26>
			count++;
   105ca:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   105cc:	e7f9      	b.n	105c2 <parse_ncellmeas+0x1a>
   105ce:	2e00      	cmp	r6, #0
   105d0:	d1f7      	bne.n	105c2 <parse_ncellmeas+0x1a>
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   105d2:	f04f 33ff 	mov.w	r3, #4294967295
	cells->ncells_count = 0;
   105d6:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   105da:	60ab      	str	r3, [r5, #8]

	err = at_params_list_init(&resp_list, param_count);
   105dc:	3103      	adds	r1, #3
   105de:	a80b      	add	r0, sp, #44	; 0x2c
   105e0:	f008 fb69 	bl	18cb6 <at_params_list_init>
	if (err) {
   105e4:	4604      	mov	r4, r0
   105e6:	b170      	cbz	r0, 10606 <parse_ncellmeas+0x5e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   105e8:	4b9f      	ldr	r3, [pc, #636]	; (10868 <parse_ncellmeas+0x2c0>)
   105ea:	9003      	str	r0, [sp, #12]
   105ec:	e9cd 6301 	strd	r6, r3, [sp, #4]
   105f0:	2201      	movs	r2, #1
   105f2:	4633      	mov	r3, r6
   105f4:	4630      	mov	r0, r6
   105f6:	499d      	ldr	r1, [pc, #628]	; (1086c <parse_ncellmeas+0x2c4>)
   105f8:	9600      	str	r6, [sp, #0]
   105fa:	f008 fcb0 	bl	18f5e <z_log_msg_runtime_create.constprop.0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   105fe:	4620      	mov	r0, r4
   10600:	b011      	add	sp, #68	; 0x44
   10602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   10606:	4601      	mov	r1, r0
   10608:	aa0b      	add	r2, sp, #44	; 0x2c
   1060a:	4638      	mov	r0, r7
   1060c:	f008 fb3a 	bl	18c84 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   10610:	4604      	mov	r4, r0
   10612:	b180      	cbz	r0, 10636 <parse_ncellmeas+0x8e>
   10614:	1dc3      	adds	r3, r0, #7
   10616:	d01e      	beq.n	10656 <parse_ncellmeas+0xae>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   10618:	4b95      	ldr	r3, [pc, #596]	; (10870 <parse_ncellmeas+0x2c8>)
   1061a:	9003      	str	r0, [sp, #12]
   1061c:	e9cd 6301 	strd	r6, r3, [sp, #4]
   10620:	4633      	mov	r3, r6
   10622:	9600      	str	r6, [sp, #0]
		LOG_ERR("Could not get response prefix, error: %d", err);
   10624:	2201      	movs	r2, #1
   10626:	4618      	mov	r0, r3
   10628:	4990      	ldr	r1, [pc, #576]	; (1086c <parse_ncellmeas+0x2c4>)
   1062a:	f008 fc98 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   1062e:	a80b      	add	r0, sp, #44	; 0x2c
   10630:	f008 fb6b 	bl	18d0a <at_params_list_free>
	return err;
   10634:	e7e3      	b.n	105fe <parse_ncellmeas+0x56>
	bool incomplete = false;
   10636:	4606      	mov	r6, r0
	err = at_params_string_get(&resp_list,
   10638:	2100      	movs	r1, #0
   1063a:	ab08      	add	r3, sp, #32
   1063c:	aa0d      	add	r2, sp, #52	; 0x34
   1063e:	a80b      	add	r0, sp, #44	; 0x2c
   10640:	f008 fc41 	bl	18ec6 <at_params_string_get>
	if (err) {
   10644:	4604      	mov	r4, r0
   10646:	b140      	cbz	r0, 1065a <parse_ncellmeas+0xb2>
		LOG_ERR("Could not get response prefix, error: %d", err);
   10648:	4b8a      	ldr	r3, [pc, #552]	; (10874 <parse_ncellmeas+0x2cc>)
   1064a:	9003      	str	r0, [sp, #12]
   1064c:	9302      	str	r3, [sp, #8]
   1064e:	2300      	movs	r3, #0
   10650:	e9cd 3300 	strd	r3, r3, [sp]
   10654:	e7e6      	b.n	10624 <parse_ncellmeas+0x7c>
		incomplete = true;
   10656:	2601      	movs	r6, #1
   10658:	e7ee      	b.n	10638 <parse_ncellmeas+0x90>
	if (!response_is_valid(response_prefix, response_prefix_len,
   1065a:	4a87      	ldr	r2, [pc, #540]	; (10878 <parse_ncellmeas+0x2d0>)
   1065c:	9908      	ldr	r1, [sp, #32]
   1065e:	a80d      	add	r0, sp, #52	; 0x34
   10660:	f7ff fd0c 	bl	1007c <response_is_valid>
   10664:	2800      	cmp	r0, #0
   10666:	f000 80a5 	beq.w	107b4 <parse_ncellmeas+0x20c>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   1066a:	2101      	movs	r1, #1
   1066c:	aa05      	add	r2, sp, #20
   1066e:	a80b      	add	r0, sp, #44	; 0x2c
   10670:	f008 fbfd 	bl	18e6e <at_params_int_get>
	if (err) {
   10674:	4604      	mov	r4, r0
   10676:	2800      	cmp	r0, #0
   10678:	d1d9      	bne.n	1062e <parse_ncellmeas+0x86>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   1067a:	9b05      	ldr	r3, [sp, #20]
   1067c:	2b00      	cmp	r3, #0
   1067e:	f040 80f0 	bne.w	10862 <parse_ncellmeas+0x2ba>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   10682:	2102      	movs	r1, #2
   10684:	aa06      	add	r2, sp, #24
   10686:	a80b      	add	r0, sp, #44	; 0x2c
   10688:	f008 fc9e 	bl	18fc8 <string_param_to_int.constprop.0>
	if (err) {
   1068c:	4604      	mov	r4, r0
   1068e:	2800      	cmp	r0, #0
   10690:	d1cd      	bne.n	1062e <parse_ncellmeas+0x86>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   10692:	9b06      	ldr	r3, [sp, #24]
	len = sizeof(tmp_str);
   10694:	f04f 0807 	mov.w	r8, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   10698:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1069c:	bfa4      	itt	ge
   1069e:	f04f 33ff 	movge.w	r3, #4294967295
   106a2:	9306      	strge	r3, [sp, #24]
	cells->current_cell.id = tmp;
   106a4:	9b06      	ldr	r3, [sp, #24]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   106a6:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   106a8:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   106aa:	aa09      	add	r2, sp, #36	; 0x24
   106ac:	ab07      	add	r3, sp, #28
   106ae:	a80b      	add	r0, sp, #44	; 0x2c
	len = sizeof(tmp_str);
   106b0:	f8cd 801c 	str.w	r8, [sp, #28]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   106b4:	f008 fc07 	bl	18ec6 <at_params_string_get>
	if (err) {
   106b8:	4604      	mov	r4, r0
   106ba:	2800      	cmp	r0, #0
   106bc:	d1b7      	bne.n	1062e <parse_ncellmeas+0x86>
	tmp_str[len] = '\0';
   106be:	9b07      	ldr	r3, [sp, #28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   106c0:	210a      	movs	r1, #10
	tmp_str[len] = '\0';
   106c2:	3340      	adds	r3, #64	; 0x40
   106c4:	446b      	add	r3, sp
   106c6:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   106ca:	1d2a      	adds	r2, r5, #4
   106cc:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   106d0:	f008 fc54 	bl	18f7c <string_to_int>
	if (err) {
   106d4:	4604      	mov	r4, r0
   106d6:	2800      	cmp	r0, #0
   106d8:	d1a9      	bne.n	1062e <parse_ncellmeas+0x86>
	tmp_str[3] = '\0';
   106da:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   106de:	462a      	mov	r2, r5
   106e0:	210a      	movs	r1, #10
   106e2:	a809      	add	r0, sp, #36	; 0x24
   106e4:	f008 fc4a 	bl	18f7c <string_to_int>
	if (err) {
   106e8:	4604      	mov	r4, r0
   106ea:	2800      	cmp	r0, #0
   106ec:	d19f      	bne.n	1062e <parse_ncellmeas+0x86>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   106ee:	2104      	movs	r1, #4
   106f0:	aa06      	add	r2, sp, #24
   106f2:	a80b      	add	r0, sp, #44	; 0x2c
   106f4:	f008 fc68 	bl	18fc8 <string_param_to_int.constprop.0>
	if (err) {
   106f8:	4604      	mov	r4, r0
   106fa:	2800      	cmp	r0, #0
   106fc:	d197      	bne.n	1062e <parse_ncellmeas+0x86>
	cells->current_cell.tac = tmp;
   106fe:	9b06      	ldr	r3, [sp, #24]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   10700:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   10702:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   10704:	aa06      	add	r2, sp, #24
   10706:	a80b      	add	r0, sp, #44	; 0x2c
   10708:	f008 fbb1 	bl	18e6e <at_params_int_get>
	if (err) {
   1070c:	4604      	mov	r4, r0
   1070e:	2800      	cmp	r0, #0
   10710:	d18d      	bne.n	1062e <parse_ncellmeas+0x86>
	cells->current_cell.timing_advance = tmp;
   10712:	9b06      	ldr	r3, [sp, #24]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   10714:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   10716:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   10718:	f105 0210 	add.w	r2, r5, #16
   1071c:	a80b      	add	r0, sp, #44	; 0x2c
   1071e:	f008 fba6 	bl	18e6e <at_params_int_get>
	if (err) {
   10722:	4604      	mov	r4, r0
   10724:	2800      	cmp	r0, #0
   10726:	d182      	bne.n	1062e <parse_ncellmeas+0x86>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   10728:	4641      	mov	r1, r8
   1072a:	f105 0228 	add.w	r2, r5, #40	; 0x28
   1072e:	a80b      	add	r0, sp, #44	; 0x2c
   10730:	f008 fb69 	bl	18e06 <at_params_short_get>
	if (err) {
   10734:	4604      	mov	r4, r0
   10736:	2800      	cmp	r0, #0
   10738:	f47f af79 	bne.w	1062e <parse_ncellmeas+0x86>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   1073c:	2108      	movs	r1, #8
   1073e:	aa06      	add	r2, sp, #24
   10740:	a80b      	add	r0, sp, #44	; 0x2c
   10742:	f008 fb94 	bl	18e6e <at_params_int_get>
	if (err) {
   10746:	4604      	mov	r4, r0
   10748:	2800      	cmp	r0, #0
   1074a:	f47f af70 	bne.w	1062e <parse_ncellmeas+0x86>
	cells->current_cell.rsrp = tmp;
   1074e:	9b06      	ldr	r3, [sp, #24]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   10750:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   10752:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   10754:	aa06      	add	r2, sp, #24
   10756:	a80b      	add	r0, sp, #44	; 0x2c
   10758:	f008 fb89 	bl	18e6e <at_params_int_get>
	if (err) {
   1075c:	4604      	mov	r4, r0
   1075e:	2800      	cmp	r0, #0
   10760:	f47f af65 	bne.w	1062e <parse_ncellmeas+0x86>
	cells->current_cell.rsrq = tmp;
   10764:	9b06      	ldr	r3, [sp, #24]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   10766:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   10768:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   1076a:	f105 0220 	add.w	r2, r5, #32
   1076e:	a80b      	add	r0, sp, #44	; 0x2c
   10770:	f008 fb95 	bl	18e9e <at_params_int64_get>
	if (err) {
   10774:	4604      	mov	r4, r0
   10776:	2800      	cmp	r0, #0
   10778:	f47f af59 	bne.w	1062e <parse_ncellmeas+0x86>
	cells->ncells_count = neighborcell_count_get(at_response);
   1077c:	4638      	mov	r0, r7
   1077e:	f7ff feef 	bl	10560 <neighborcell_count_get>
   10782:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   10786:	b2c0      	uxtb	r0, r0
   10788:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   1078c:	f100 040b 	add.w	r4, r0, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   10790:	a80b      	add	r0, sp, #44	; 0x2c
   10792:	f008 fbb8 	bl	18f06 <at_params_valid_count_get>
   10796:	42a0      	cmp	r0, r4
   10798:	d90e      	bls.n	107b8 <parse_ncellmeas+0x210>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   1079a:	4621      	mov	r1, r4
   1079c:	f105 0218 	add.w	r2, r5, #24
   107a0:	a80b      	add	r0, sp, #44	; 0x2c
   107a2:	f008 fb7c 	bl	18e9e <at_params_int64_get>
		if (err) {
   107a6:	4604      	mov	r4, r0
   107a8:	2800      	cmp	r0, #0
   107aa:	f47f af40 	bne.w	1062e <parse_ncellmeas+0x86>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   107ae:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   107b2:	b933      	cbnz	r3, 107c2 <parse_ncellmeas+0x21a>
	err = at_params_string_get(&resp_list,
   107b4:	2400      	movs	r4, #0
   107b6:	e73a      	b.n	1062e <parse_ncellmeas+0x86>
		cells->current_cell.timing_advance_meas_time = 0;
   107b8:	2200      	movs	r2, #0
   107ba:	2300      	movs	r3, #0
   107bc:	e9c5 2306 	strd	r2, r3, [r5, #24]
   107c0:	e7f5      	b.n	107ae <parse_ncellmeas+0x206>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   107c2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   107c4:	2b00      	cmp	r3, #0
   107c6:	d0f5      	beq.n	107b4 <parse_ncellmeas+0x20c>
   107c8:	270f      	movs	r7, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   107ca:	f04f 0800 	mov.w	r8, #0
   107ce:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   107d2:	4598      	cmp	r8, r3
   107d4:	d304      	bcc.n	107e0 <parse_ncellmeas+0x238>
	if (incomplete) {
   107d6:	2e00      	cmp	r6, #0
   107d8:	d0ec      	beq.n	107b4 <parse_ncellmeas+0x20c>
		err = -E2BIG;
   107da:	f06f 0406 	mvn.w	r4, #6
   107de:	e726      	b.n	1062e <parse_ncellmeas+0x86>
					&cells->neighbor_cells[i].earfcn);
   107e0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   107e2:	1f39      	subs	r1, r7, #4
   107e4:	eb02 1208 	add.w	r2, r2, r8, lsl #4
   107e8:	a80b      	add	r0, sp, #44	; 0x2c
   107ea:	f008 fb40 	bl	18e6e <at_params_int_get>
		if (err) {
   107ee:	ea4f 1908 	mov.w	r9, r8, lsl #4
   107f2:	4604      	mov	r4, r0
   107f4:	2800      	cmp	r0, #0
   107f6:	f47f af1a 	bne.w	1062e <parse_ncellmeas+0x86>
					  &cells->neighbor_cells[i].phys_cell_id);
   107fa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   107fc:	1ef9      	subs	r1, r7, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   107fe:	444a      	add	r2, r9
		err = at_params_short_get(&resp_list,
   10800:	3208      	adds	r2, #8
   10802:	a80b      	add	r0, sp, #44	; 0x2c
   10804:	f008 faff 	bl	18e06 <at_params_short_get>
		if (err) {
   10808:	4604      	mov	r4, r0
   1080a:	2800      	cmp	r0, #0
   1080c:	f47f af0f 	bne.w	1062e <parse_ncellmeas+0x86>
		err = at_params_int_get(&resp_list,
   10810:	aa06      	add	r2, sp, #24
   10812:	1eb9      	subs	r1, r7, #2
   10814:	a80b      	add	r0, sp, #44	; 0x2c
   10816:	f008 fb2a 	bl	18e6e <at_params_int_get>
		if (err) {
   1081a:	4604      	mov	r4, r0
   1081c:	2800      	cmp	r0, #0
   1081e:	f47f af06 	bne.w	1062e <parse_ncellmeas+0x86>
		cells->neighbor_cells[i].rsrp = tmp;
   10822:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   10824:	9a06      	ldr	r2, [sp, #24]
   10826:	444b      	add	r3, r9
   10828:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   1082a:	1e79      	subs	r1, r7, #1
   1082c:	aa06      	add	r2, sp, #24
   1082e:	a80b      	add	r0, sp, #44	; 0x2c
   10830:	f008 fb1d 	bl	18e6e <at_params_int_get>
		if (err) {
   10834:	4604      	mov	r4, r0
   10836:	2800      	cmp	r0, #0
   10838:	f47f aef9 	bne.w	1062e <parse_ncellmeas+0x86>
		cells->neighbor_cells[i].rsrq = tmp;
   1083c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1083e:	9a06      	ldr	r2, [sp, #24]
   10840:	444b      	add	r3, r9
   10842:	819a      	strh	r2, [r3, #12]
					&cells->neighbor_cells[i].time_diff);
   10844:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   10846:	4639      	mov	r1, r7
					&cells->neighbor_cells[i].time_diff);
   10848:	444a      	add	r2, r9
		err = at_params_int_get(&resp_list,
   1084a:	3204      	adds	r2, #4
   1084c:	a80b      	add	r0, sp, #44	; 0x2c
   1084e:	f008 fb0e 	bl	18e6e <at_params_int_get>
		if (err) {
   10852:	3705      	adds	r7, #5
   10854:	4604      	mov	r4, r0
   10856:	2800      	cmp	r0, #0
   10858:	f47f aee9 	bne.w	1062e <parse_ncellmeas+0x86>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   1085c:	f108 0801 	add.w	r8, r8, #1
   10860:	e7b5      	b.n	107ce <parse_ncellmeas+0x226>
		err = 1;
   10862:	2401      	movs	r4, #1
   10864:	e6e3      	b.n	1062e <parse_ncellmeas+0x86>
   10866:	bf00      	nop
   10868:	0001d3e4 	.word	0x0001d3e4
   1086c:	0001b61c 	.word	0x0001b61c
   10870:	0001d7b8 	.word	0x0001d7b8
   10874:	0001d63c 	.word	0x0001d63c
   10878:	0001d345 	.word	0x0001d345

0001087c <parse_ncellmeas_gci>:
{
	struct at_param_list resp_list;
	struct lte_lc_ncell *ncells = NULL;
	int err, status, tmp_int, len;
	int16_t tmp_short;
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   1087c:	2300      	movs	r3, #0
{
   1087e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10882:	4616      	mov	r6, r2
	size_t response_prefix_len = sizeof(response_prefix);
   10884:	220b      	movs	r2, #11
{
   10886:	460d      	mov	r5, r1
	uint32_t count = 0;
   10888:	4699      	mov	r9, r3
{
   1088a:	b0a3      	sub	sp, #140	; 0x8c
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   1088c:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
	size_t response_prefix_len = sizeof(response_prefix);
   10890:	920e      	str	r2, [sp, #56]	; 0x38
{
   10892:	9007      	str	r0, [sp, #28]
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   10894:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
static uint32_t get_char_frequency(const char *str, char c)
   10898:	1e4a      	subs	r2, r1, #1
		if (*str == c) {
   1089a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1089e:	2b2c      	cmp	r3, #44	; 0x2c
   108a0:	d102      	bne.n	108a8 <parse_ncellmeas_gci+0x2c>
			count++;
   108a2:	f109 0901 	add.w	r9, r9, #1
	} while (*(str++) != '\0');
   108a6:	e7f8      	b.n	1089a <parse_ncellmeas_gci+0x1e>
   108a8:	2b00      	cmp	r3, #0
   108aa:	d1f6      	bne.n	1089a <parse_ncellmeas_gci+0x1e>
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	/* Fill the defaults */
	cells->gci_cells_count = 0;
	cells->ncells_count = 0;
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   108ac:	f04f 32ff 	mov.w	r2, #4294967295
   108b0:	2430      	movs	r4, #48	; 0x30
	size_t param_count = get_char_frequency(at_response, ',') + 3;
   108b2:	f109 0703 	add.w	r7, r9, #3
	cells->gci_cells_count = 0;
   108b6:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	cells->ncells_count = 0;
   108ba:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   108be:	60b2      	str	r2, [r6, #8]

	for (i = 0; i < params->gci_count; i++) {
   108c0:	9907      	ldr	r1, [sp, #28]
   108c2:	7849      	ldrb	r1, [r1, #1]
   108c4:	4299      	cmp	r1, r3
   108c6:	d80c      	bhi.n	108e2 <parse_ncellmeas_gci+0x66>
	 *		<meas_time>,<serving>,<neighbor_count>
	 *	[,<n_earfcn1>,<n_phys_cell_id1>,<n_rsrp1>,<n_rsrq1>,<time_diff1>]
	 *	[,<n_earfcn2>,<n_phys_cell_id2>,<n_rsrp2>,<n_rsrq2>,<time_diff2>]...]...
	 */

	err = at_params_list_init(&resp_list, param_count);
   108c8:	4639      	mov	r1, r7
   108ca:	a811      	add	r0, sp, #68	; 0x44
   108cc:	f008 f9f3 	bl	18cb6 <at_params_list_init>
	if (err) {
   108d0:	4604      	mov	r4, r0
   108d2:	b180      	cbz	r0, 108f6 <parse_ncellmeas_gci+0x7a>
		LOG_ERR("Could not init AT params list for cell_list, error: %d", err);
   108d4:	4ba1      	ldr	r3, [pc, #644]	; (10b5c <parse_ncellmeas_gci+0x2e0>)
   108d6:	9003      	str	r0, [sp, #12]
		}
	}

	if (incomplete) {
		err = -E2BIG;
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   108d8:	9302      	str	r3, [sp, #8]
   108da:	2300      	movs	r3, #0
   108dc:	e9cd 3300 	strd	r3, r3, [sp]
   108e0:	e10a      	b.n	10af8 <parse_ncellmeas_gci+0x27c>
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   108e2:	fb04 f003 	mul.w	r0, r4, r3
   108e6:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
	for (i = 0; i < params->gci_count; i++) {
   108e8:	3301      	adds	r3, #1
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   108ea:	4401      	add	r1, r0
   108ec:	608a      	str	r2, [r1, #8]
		cells->gci_cells[i].timing_advance = LTE_LC_CELL_TIMING_ADVANCE_INVALID;
   108ee:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   108f0:	4401      	add	r1, r0
   108f2:	828a      	strh	r2, [r1, #20]
	for (i = 0; i < params->gci_count; i++) {
   108f4:	e7e4      	b.n	108c0 <parse_ncellmeas_gci+0x44>
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   108f6:	4601      	mov	r1, r0
   108f8:	aa11      	add	r2, sp, #68	; 0x44
   108fa:	4628      	mov	r0, r5
   108fc:	f008 f9c2 	bl	18c84 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   10900:	4604      	mov	r4, r0
   10902:	b370      	cbz	r0, 10962 <parse_ncellmeas_gci+0xe6>
   10904:	1dc3      	adds	r3, r0, #7
   10906:	d002      	beq.n	1090e <parse_ncellmeas_gci+0x92>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   10908:	4b95      	ldr	r3, [pc, #596]	; (10b60 <parse_ncellmeas_gci+0x2e4>)
   1090a:	9003      	str	r0, [sp, #12]
   1090c:	e7e4      	b.n	108d8 <parse_ncellmeas_gci+0x5c>
		LOG_WRN("E2BIG was returned, continue. param_count %d, err %d, str %s",
   1090e:	4b95      	ldr	r3, [pc, #596]	; (10b64 <parse_ncellmeas_gci+0x2e8>)
   10910:	e9cd 0504 	strd	r0, r5, [sp, #16]
   10914:	9302      	str	r3, [sp, #8]
   10916:	2300      	movs	r3, #0
   10918:	2202      	movs	r2, #2
   1091a:	4618      	mov	r0, r3
   1091c:	e9cd 3300 	strd	r3, r3, [sp]
   10920:	4991      	ldr	r1, [pc, #580]	; (10b68 <parse_ncellmeas_gci+0x2ec>)
   10922:	9703      	str	r7, [sp, #12]
   10924:	f008 fb1b 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
		incomplete = true;
   10928:	2301      	movs	r3, #1
   1092a:	9306      	str	r3, [sp, #24]
	err = at_params_string_get(&resp_list,
   1092c:	2100      	movs	r1, #0
   1092e:	ab0e      	add	r3, sp, #56	; 0x38
   10930:	aa13      	add	r2, sp, #76	; 0x4c
   10932:	a811      	add	r0, sp, #68	; 0x44
   10934:	f008 fac7 	bl	18ec6 <at_params_string_get>
	if (err) {
   10938:	4605      	mov	r5, r0
   1093a:	b1a0      	cbz	r0, 10966 <parse_ncellmeas_gci+0xea>
		LOG_ERR("Could not get response prefix, error: %d", err);
   1093c:	4b8b      	ldr	r3, [pc, #556]	; (10b6c <parse_ncellmeas_gci+0x2f0>)
   1093e:	9003      	str	r0, [sp, #12]
   10940:	9302      	str	r3, [sp, #8]
   10942:	2300      	movs	r3, #0
   10944:	2201      	movs	r2, #1
   10946:	4618      	mov	r0, r3
   10948:	e9cd 3300 	strd	r3, r3, [sp]
   1094c:	4986      	ldr	r1, [pc, #536]	; (10b68 <parse_ncellmeas_gci+0x2ec>)
   1094e:	f008 fb06 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
		goto clean_exit;
   10952:	462c      	mov	r4, r5
	}

clean_exit:
	at_params_list_free(&resp_list);
   10954:	a811      	add	r0, sp, #68	; 0x44
   10956:	f008 f9d8 	bl	18d0a <at_params_list_free>

	return err;
}
   1095a:	4620      	mov	r0, r4
   1095c:	b023      	add	sp, #140	; 0x8c
   1095e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool incomplete = false;
   10962:	9006      	str	r0, [sp, #24]
   10964:	e7e2      	b.n	1092c <parse_ncellmeas_gci+0xb0>
	if (!response_is_valid(response_prefix, response_prefix_len,
   10966:	4a82      	ldr	r2, [pc, #520]	; (10b70 <parse_ncellmeas_gci+0x2f4>)
   10968:	990e      	ldr	r1, [sp, #56]	; 0x38
   1096a:	a813      	add	r0, sp, #76	; 0x4c
   1096c:	f7ff fb86 	bl	1007c <response_is_valid>
   10970:	4607      	mov	r7, r0
   10972:	b950      	cbnz	r0, 1098a <parse_ncellmeas_gci+0x10e>
		LOG_ERR("Not a valid NCELLMEAS response");
   10974:	4b7f      	ldr	r3, [pc, #508]	; (10b74 <parse_ncellmeas_gci+0x2f8>)
   10976:	2201      	movs	r2, #1
   10978:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1097c:	497a      	ldr	r1, [pc, #488]	; (10b68 <parse_ncellmeas_gci+0x2ec>)
   1097e:	4603      	mov	r3, r0
   10980:	9000      	str	r0, [sp, #0]
   10982:	f008 faec 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
	err = at_params_string_get(&resp_list,
   10986:	2400      	movs	r4, #0
   10988:	e7e4      	b.n	10954 <parse_ncellmeas_gci+0xd8>
	err = at_params_int_get(&resp_list, curr_index, &status);
   1098a:	2101      	movs	r1, #1
   1098c:	aa0b      	add	r2, sp, #44	; 0x2c
   1098e:	a811      	add	r0, sp, #68	; 0x44
   10990:	f008 fa6d 	bl	18e6e <at_params_int_get>
	if (err) {
   10994:	4604      	mov	r4, r0
   10996:	2800      	cmp	r0, #0
   10998:	d1dc      	bne.n	10954 <parse_ncellmeas_gci+0xd8>
	if (status == AT_NCELLMEAS_STATUS_VALUE_FAIL) {
   1099a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1099c:	2c01      	cmp	r4, #1
   1099e:	d0d9      	beq.n	10954 <parse_ncellmeas_gci+0xd8>
	} else if (status == AT_NCELLMEAS_STATUS_VALUE_INCOMPLETE) {
   109a0:	2c02      	cmp	r4, #2
   109a2:	d108      	bne.n	109b6 <parse_ncellmeas_gci+0x13a>
		LOG_WRN("NCELLMEAS measurements interrupted; results incomplete");
   109a4:	4b74      	ldr	r3, [pc, #464]	; (10b78 <parse_ncellmeas_gci+0x2fc>)
   109a6:	4622      	mov	r2, r4
   109a8:	e9cd 5301 	strd	r5, r3, [sp, #4]
   109ac:	496e      	ldr	r1, [pc, #440]	; (10b68 <parse_ncellmeas_gci+0x2ec>)
   109ae:	462b      	mov	r3, r5
   109b0:	9500      	str	r5, [sp, #0]
   109b2:	f008 fad4 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   109b6:	f04f 0b00 	mov.w	fp, #0
   109ba:	2501      	movs	r5, #1
   109bc:	46d8      	mov	r8, fp
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   109be:	f1a9 030a 	sub.w	r3, r9, #10
   109c2:	9309      	str	r3, [sp, #36]	; 0x24
   109c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   109c6:	42ab      	cmp	r3, r5
   109c8:	d903      	bls.n	109d2 <parse_ncellmeas_gci+0x156>
			i < params->gci_count; i++) {
   109ca:	9b07      	ldr	r3, [sp, #28]
   109cc:	785b      	ldrb	r3, [r3, #1]
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   109ce:	4598      	cmp	r8, r3
   109d0:	d307      	bcc.n	109e2 <parse_ncellmeas_gci+0x166>
	if (incomplete) {
   109d2:	9b06      	ldr	r3, [sp, #24]
   109d4:	2b00      	cmp	r3, #0
   109d6:	d0d6      	beq.n	10986 <parse_ncellmeas_gci+0x10a>
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   109d8:	f06f 0406 	mvn.w	r4, #6
   109dc:	4b67      	ldr	r3, [pc, #412]	; (10b7c <parse_ncellmeas_gci+0x300>)
   109de:	9403      	str	r4, [sp, #12]
   109e0:	e77a      	b.n	108d8 <parse_ncellmeas_gci+0x5c>
		curr_index++;
   109e2:	f105 0901 	add.w	r9, r5, #1
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   109e6:	4649      	mov	r1, r9
   109e8:	aa0c      	add	r2, sp, #48	; 0x30
   109ea:	a811      	add	r0, sp, #68	; 0x44
   109ec:	f008 faec 	bl	18fc8 <string_param_to_int.constprop.0>
		if (err) {
   109f0:	4604      	mov	r4, r0
   109f2:	b170      	cbz	r0, 10a12 <parse_ncellmeas_gci+0x196>
			LOG_ERR("Could not parse cell_id, index %d, i %d error: %d",
   109f4:	4b62      	ldr	r3, [pc, #392]	; (10b80 <parse_ncellmeas_gci+0x304>)
   109f6:	e9cd 8004 	strd	r8, r0, [sp, #16]
   109fa:	9302      	str	r3, [sp, #8]
   109fc:	2300      	movs	r3, #0
   109fe:	2201      	movs	r2, #1
   10a00:	4618      	mov	r0, r3
   10a02:	e9cd 3300 	strd	r3, r3, [sp]
   10a06:	4958      	ldr	r1, [pc, #352]	; (10b68 <parse_ncellmeas_gci+0x2ec>)
   10a08:	f8cd 900c 	str.w	r9, [sp, #12]
   10a0c:	f008 faa7 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
			goto clean_exit;
   10a10:	e7a0      	b.n	10954 <parse_ncellmeas_gci+0xd8>
		if (tmp_int > LTE_LC_CELL_EUTRAN_ID_MAX) {
   10a12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10a14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   10a18:	db0c      	blt.n	10a34 <parse_ncellmeas_gci+0x1b8>
			LOG_WRN("cell_id = %d which is > LTE_LC_CELL_EUTRAN_ID_MAX; "
   10a1a:	9303      	str	r3, [sp, #12]
   10a1c:	4b59      	ldr	r3, [pc, #356]	; (10b84 <parse_ncellmeas_gci+0x308>)
   10a1e:	2202      	movs	r2, #2
   10a20:	e9cd 0301 	strd	r0, r3, [sp, #4]
   10a24:	4950      	ldr	r1, [pc, #320]	; (10b68 <parse_ncellmeas_gci+0x2ec>)
   10a26:	4603      	mov	r3, r0
   10a28:	9000      	str	r0, [sp, #0]
   10a2a:	f008 fa98 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
			tmp_int = LTE_LC_CELL_EUTRAN_ID_INVALID;
   10a2e:	f04f 33ff 	mov.w	r3, #4294967295
   10a32:	930c      	str	r3, [sp, #48]	; 0x30
		parsed_cell.id = tmp_int;
   10a34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   10a36:	aa0f      	add	r2, sp, #60	; 0x3c
		parsed_cell.id = tmp_int;
   10a38:	9318      	str	r3, [sp, #96]	; 0x60
		len = sizeof(tmp_str);
   10a3a:	2307      	movs	r3, #7
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   10a3c:	1ca9      	adds	r1, r5, #2
		len = sizeof(tmp_str);
   10a3e:	930d      	str	r3, [sp, #52]	; 0x34
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   10a40:	a811      	add	r0, sp, #68	; 0x44
   10a42:	ab0d      	add	r3, sp, #52	; 0x34
   10a44:	f008 fa3f 	bl	18ec6 <at_params_string_get>
		if (err) {
   10a48:	4604      	mov	r4, r0
   10a4a:	b110      	cbz	r0, 10a52 <parse_ncellmeas_gci+0x1d6>
			LOG_ERR("Could not parse plmn, error: %d", err);
   10a4c:	4b4e      	ldr	r3, [pc, #312]	; (10b88 <parse_ncellmeas_gci+0x30c>)
   10a4e:	9003      	str	r0, [sp, #12]
   10a50:	e742      	b.n	108d8 <parse_ncellmeas_gci+0x5c>
		tmp_str[len] = '\0';
   10a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10a54:	4682      	mov	sl, r0
   10a56:	3388      	adds	r3, #136	; 0x88
   10a58:	446b      	add	r3, sp
   10a5a:	f803 0c4c 	strb.w	r0, [r3, #-76]
		err = string_to_int(&tmp_str[3], 10, &parsed_cell.mnc);
   10a5e:	210a      	movs	r1, #10
   10a60:	aa17      	add	r2, sp, #92	; 0x5c
   10a62:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
   10a66:	f008 fa89 	bl	18f7c <string_to_int>
		if (err) {
   10a6a:	4604      	mov	r4, r0
   10a6c:	b138      	cbz	r0, 10a7e <parse_ncellmeas_gci+0x202>
			LOG_ERR("string_to_int, error: %d", err);
   10a6e:	4b47      	ldr	r3, [pc, #284]	; (10b8c <parse_ncellmeas_gci+0x310>)
   10a70:	9403      	str	r4, [sp, #12]
			LOG_ERR("Could not parse rsrp, error: %d", err);
   10a72:	e9cd a301 	strd	sl, r3, [sp, #4]
   10a76:	f8cd a000 	str.w	sl, [sp]
   10a7a:	4653      	mov	r3, sl
   10a7c:	e03c      	b.n	10af8 <parse_ncellmeas_gci+0x27c>
		tmp_str[3] = '\0';
   10a7e:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   10a82:	4681      	mov	r9, r0
		err = string_to_int(tmp_str, 10, &parsed_cell.mcc);
   10a84:	210a      	movs	r1, #10
   10a86:	aa16      	add	r2, sp, #88	; 0x58
   10a88:	a80f      	add	r0, sp, #60	; 0x3c
   10a8a:	f008 fa77 	bl	18f7c <string_to_int>
		if (err) {
   10a8e:	4604      	mov	r4, r0
   10a90:	2800      	cmp	r0, #0
   10a92:	d1ec      	bne.n	10a6e <parse_ncellmeas_gci+0x1f2>
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   10a94:	aa0c      	add	r2, sp, #48	; 0x30
   10a96:	1ce9      	adds	r1, r5, #3
   10a98:	a811      	add	r0, sp, #68	; 0x44
   10a9a:	f008 fa95 	bl	18fc8 <string_param_to_int.constprop.0>
		if (err) {
   10a9e:	4604      	mov	r4, r0
   10aa0:	b168      	cbz	r0, 10abe <parse_ncellmeas_gci+0x242>
			LOG_ERR("Could not parse tracking_area_code in i %d, error: %d", i, err);
   10aa2:	4b3b      	ldr	r3, [pc, #236]	; (10b90 <parse_ncellmeas_gci+0x314>)
   10aa4:	e9cd 8003 	strd	r8, r0, [sp, #12]
   10aa8:	e9cd 9301 	strd	r9, r3, [sp, #4]
   10aac:	2201      	movs	r2, #1
   10aae:	464b      	mov	r3, r9
   10ab0:	4648      	mov	r0, r9
   10ab2:	492d      	ldr	r1, [pc, #180]	; (10b68 <parse_ncellmeas_gci+0x2ec>)
   10ab4:	f8cd 9000 	str.w	r9, [sp]
   10ab8:	f008 fa51 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
			goto clean_exit;
   10abc:	e74a      	b.n	10954 <parse_ncellmeas_gci+0xd8>
		parsed_cell.tac = tmp_int;
   10abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   10ac0:	aa0c      	add	r2, sp, #48	; 0x30
   10ac2:	1d29      	adds	r1, r5, #4
   10ac4:	a811      	add	r0, sp, #68	; 0x44
		parsed_cell.tac = tmp_int;
   10ac6:	9319      	str	r3, [sp, #100]	; 0x64
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   10ac8:	f008 f9d1 	bl	18e6e <at_params_int_get>
		if (err) {
   10acc:	4604      	mov	r4, r0
   10ace:	b110      	cbz	r0, 10ad6 <parse_ncellmeas_gci+0x25a>
			LOG_ERR("Could not parse timing_advance, error: %d", err);
   10ad0:	4b30      	ldr	r3, [pc, #192]	; (10b94 <parse_ncellmeas_gci+0x318>)
   10ad2:	9003      	str	r0, [sp, #12]
   10ad4:	e7cd      	b.n	10a72 <parse_ncellmeas_gci+0x1f6>
		parsed_cell.timing_advance = tmp_int;
   10ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		err = at_params_int64_get(&resp_list, curr_index,
   10ad8:	aa1c      	add	r2, sp, #112	; 0x70
   10ada:	1d69      	adds	r1, r5, #5
   10adc:	a811      	add	r0, sp, #68	; 0x44
		parsed_cell.timing_advance = tmp_int;
   10ade:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
		err = at_params_int64_get(&resp_list, curr_index,
   10ae2:	f008 f9dc 	bl	18e9e <at_params_int64_get>
		if (err) {
   10ae6:	4604      	mov	r4, r0
   10ae8:	b160      	cbz	r0, 10b04 <parse_ncellmeas_gci+0x288>
			LOG_ERR("Could not parse timing_advance_meas_time, error: %d", err);
   10aea:	4b2b      	ldr	r3, [pc, #172]	; (10b98 <parse_ncellmeas_gci+0x31c>)
   10aec:	9003      	str	r0, [sp, #12]
			LOG_ERR("Could not parse phys_cell_id, error: %d", err);
   10aee:	e9cd 9301 	strd	r9, r3, [sp, #4]
   10af2:	464b      	mov	r3, r9
   10af4:	f8cd 9000 	str.w	r9, [sp]
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   10af8:	2201      	movs	r2, #1
   10afa:	4618      	mov	r0, r3
   10afc:	491a      	ldr	r1, [pc, #104]	; (10b68 <parse_ncellmeas_gci+0x2ec>)
   10afe:	f008 fa2e 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
   10b02:	e727      	b.n	10954 <parse_ncellmeas_gci+0xd8>
		err = at_params_int_get(&resp_list, curr_index, &parsed_cell.earfcn);
   10b04:	aa1a      	add	r2, sp, #104	; 0x68
   10b06:	1da9      	adds	r1, r5, #6
   10b08:	a811      	add	r0, sp, #68	; 0x44
   10b0a:	f008 f9b0 	bl	18e6e <at_params_int_get>
		if (err) {
   10b0e:	4604      	mov	r4, r0
   10b10:	b110      	cbz	r0, 10b18 <parse_ncellmeas_gci+0x29c>
			LOG_ERR("Could not parse earfcn, error: %d", err);
   10b12:	4b22      	ldr	r3, [pc, #136]	; (10b9c <parse_ncellmeas_gci+0x320>)
   10b14:	9003      	str	r0, [sp, #12]
   10b16:	e7ac      	b.n	10a72 <parse_ncellmeas_gci+0x1f6>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.phys_cell_id);
   10b18:	aa20      	add	r2, sp, #128	; 0x80
   10b1a:	1de9      	adds	r1, r5, #7
   10b1c:	a811      	add	r0, sp, #68	; 0x44
   10b1e:	f008 f972 	bl	18e06 <at_params_short_get>
		if (err) {
   10b22:	4604      	mov	r4, r0
   10b24:	b110      	cbz	r0, 10b2c <parse_ncellmeas_gci+0x2b0>
			LOG_ERR("Could not parse phys_cell_id, error: %d", err);
   10b26:	4b1e      	ldr	r3, [pc, #120]	; (10ba0 <parse_ncellmeas_gci+0x324>)
   10b28:	9003      	str	r0, [sp, #12]
   10b2a:	e7e0      	b.n	10aee <parse_ncellmeas_gci+0x272>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrp);
   10b2c:	f10d 0282 	add.w	r2, sp, #130	; 0x82
   10b30:	f105 0108 	add.w	r1, r5, #8
   10b34:	a811      	add	r0, sp, #68	; 0x44
   10b36:	f008 f966 	bl	18e06 <at_params_short_get>
		if (err) {
   10b3a:	4604      	mov	r4, r0
   10b3c:	b110      	cbz	r0, 10b44 <parse_ncellmeas_gci+0x2c8>
			LOG_ERR("Could not parse rsrp, error: %d", err);
   10b3e:	4b19      	ldr	r3, [pc, #100]	; (10ba4 <parse_ncellmeas_gci+0x328>)
   10b40:	9003      	str	r0, [sp, #12]
   10b42:	e796      	b.n	10a72 <parse_ncellmeas_gci+0x1f6>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrq);
   10b44:	aa21      	add	r2, sp, #132	; 0x84
   10b46:	f105 0109 	add.w	r1, r5, #9
   10b4a:	a811      	add	r0, sp, #68	; 0x44
   10b4c:	f008 f95b 	bl	18e06 <at_params_short_get>
		if (err) {
   10b50:	4604      	mov	r4, r0
   10b52:	b358      	cbz	r0, 10bac <parse_ncellmeas_gci+0x330>
			LOG_ERR("Could not parse rsrq, error: %d", err);
   10b54:	4b14      	ldr	r3, [pc, #80]	; (10ba8 <parse_ncellmeas_gci+0x32c>)
   10b56:	9003      	str	r0, [sp, #12]
   10b58:	e6be      	b.n	108d8 <parse_ncellmeas_gci+0x5c>
   10b5a:	bf00      	nop
   10b5c:	0001d7ea 	.word	0x0001d7ea
   10b60:	0001d7b8 	.word	0x0001d7b8
   10b64:	0001d821 	.word	0x0001d821
   10b68:	0001b61c 	.word	0x0001b61c
   10b6c:	0001d63c 	.word	0x0001d63c
   10b70:	0001d345 	.word	0x0001d345
   10b74:	0001d85e 	.word	0x0001d85e
   10b78:	0001d87d 	.word	0x0001d87d
   10b7c:	0001dc35 	.word	0x0001dc35
   10b80:	0001d8b4 	.word	0x0001d8b4
   10b84:	0001d8e6 	.word	0x0001d8e6
   10b88:	0001d929 	.word	0x0001d929
   10b8c:	0001d949 	.word	0x0001d949
   10b90:	0001d962 	.word	0x0001d962
   10b94:	0001d998 	.word	0x0001d998
   10b98:	0001d9c2 	.word	0x0001d9c2
   10b9c:	0001d9f6 	.word	0x0001d9f6
   10ba0:	0001da18 	.word	0x0001da18
   10ba4:	0001da40 	.word	0x0001da40
   10ba8:	0001da60 	.word	0x0001da60
		err = at_params_int64_get(&resp_list, curr_index, &parsed_cell.measurement_time);
   10bac:	aa1e      	add	r2, sp, #120	; 0x78
   10bae:	f105 010a 	add.w	r1, r5, #10
   10bb2:	a811      	add	r0, sp, #68	; 0x44
   10bb4:	f008 f973 	bl	18e9e <at_params_int64_get>
		if (err) {
   10bb8:	4604      	mov	r4, r0
   10bba:	b110      	cbz	r0, 10bc2 <parse_ncellmeas_gci+0x346>
			LOG_ERR("Could not parse meas_time, error: %d", err);
   10bbc:	4b5f      	ldr	r3, [pc, #380]	; (10d3c <parse_ncellmeas_gci+0x4c0>)
   10bbe:	9003      	str	r0, [sp, #12]
   10bc0:	e68a      	b.n	108d8 <parse_ncellmeas_gci+0x5c>
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   10bc2:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
   10bc6:	f105 010b 	add.w	r1, r5, #11
   10bca:	a811      	add	r0, sp, #68	; 0x44
   10bcc:	f008 f91b 	bl	18e06 <at_params_short_get>
		if (err) {
   10bd0:	4604      	mov	r4, r0
   10bd2:	b110      	cbz	r0, 10bda <parse_ncellmeas_gci+0x35e>
			LOG_ERR("Could not parse serving, error: %d", err);
   10bd4:	4b5a      	ldr	r3, [pc, #360]	; (10d40 <parse_ncellmeas_gci+0x4c4>)
   10bd6:	9003      	str	r0, [sp, #12]
   10bd8:	e67e      	b.n	108d8 <parse_ncellmeas_gci+0x5c>
		curr_index++;
   10bda:	350c      	adds	r5, #12
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   10bdc:	4629      	mov	r1, r5
   10bde:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
   10be2:	a811      	add	r0, sp, #68	; 0x44
		is_serving_cell = tmp_short;
   10be4:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   10be8:	f008 f90d 	bl	18e06 <at_params_short_get>
		if (err) {
   10bec:	4604      	mov	r4, r0
   10bee:	b110      	cbz	r0, 10bf6 <parse_ncellmeas_gci+0x37a>
			LOG_ERR("Could not parse neighbor_count, error: %d", err);
   10bf0:	4b54      	ldr	r3, [pc, #336]	; (10d44 <parse_ncellmeas_gci+0x4c8>)
   10bf2:	9003      	str	r0, [sp, #12]
   10bf4:	e670      	b.n	108d8 <parse_ncellmeas_gci+0x5c>
		if (is_serving_cell) {
   10bf6:	f1b9 0f00 	cmp.w	r9, #0
   10bfa:	f000 8087 	beq.w	10d0c <parse_ncellmeas_gci+0x490>
			cells->current_cell = parsed_cell;
   10bfe:	46b6      	mov	lr, r6
   10c00:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
   10c04:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   10c08:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   10c0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   10c10:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   10c14:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
		parsed_ncells_count = tmp_short;
   10c18:	f89d 902a 	ldrb.w	r9, [sp, #42]	; 0x2a
			cells->current_cell = parsed_cell;
   10c1c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
			if (parsed_ncells_count != 0) {
   10c20:	f1b9 0f00 	cmp.w	r9, #0
   10c24:	d026      	beq.n	10c74 <parse_ncellmeas_gci+0x3f8>
				if (parsed_ncells_count > CONFIG_LTE_NEIGHBOR_CELLS_MAX) {
   10c26:	f1b9 0f0a 	cmp.w	r9, #10
   10c2a:	d90e      	bls.n	10c4a <parse_ncellmeas_gci+0x3ce>
					LOG_WRN("Cutting response, because received neigbor cell"
   10c2c:	f04f 090a 	mov.w	r9, #10
   10c30:	4b45      	ldr	r3, [pc, #276]	; (10d48 <parse_ncellmeas_gci+0x4cc>)
   10c32:	2202      	movs	r2, #2
   10c34:	e9cd 4301 	strd	r4, r3, [sp, #4]
   10c38:	4620      	mov	r0, r4
   10c3a:	4623      	mov	r3, r4
   10c3c:	4943      	ldr	r1, [pc, #268]	; (10d4c <parse_ncellmeas_gci+0x4d0>)
   10c3e:	f8cd 900c 	str.w	r9, [sp, #12]
   10c42:	9400      	str	r4, [sp, #0]
   10c44:	f008 f98b 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
					incomplete = true;
   10c48:	9706      	str	r7, [sp, #24]
				ncells = k_calloc(
   10c4a:	2110      	movs	r1, #16
   10c4c:	4648      	mov	r0, r9
   10c4e:	f009 fd19 	bl	1a684 <k_calloc>
					to_be_parsed_ncell_count = parsed_ncells_count;
   10c52:	464c      	mov	r4, r9
				ncells = k_calloc(
   10c54:	4603      	mov	r3, r0
				if (ncells == NULL) {
   10c56:	b950      	cbnz	r0, 10c6e <parse_ncellmeas_gci+0x3f2>
					LOG_WRN("Failed to allocate memory for the ncells"
   10c58:	4a3d      	ldr	r2, [pc, #244]	; (10d50 <parse_ncellmeas_gci+0x4d4>)
   10c5a:	493c      	ldr	r1, [pc, #240]	; (10d4c <parse_ncellmeas_gci+0x4d0>)
   10c5c:	e9cd 0201 	strd	r0, r2, [sp, #4]
   10c60:	9000      	str	r0, [sp, #0]
   10c62:	2202      	movs	r2, #2
   10c64:	f008 f97b 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
			i < params->gci_count; i++) {
   10c68:	f108 0801 	add.w	r8, r8, #1
   10c6c:	e6aa      	b.n	109c4 <parse_ncellmeas_gci+0x148>
				cells->neighbor_cells = ncells;
   10c6e:	6370      	str	r0, [r6, #52]	; 0x34
				cells->ncells_count = to_be_parsed_ncell_count;
   10c70:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   10c74:	f04f 0900 	mov.w	r9, #0
   10c78:	9408      	str	r4, [sp, #32]
   10c7a:	9b08      	ldr	r3, [sp, #32]
   10c7c:	4599      	cmp	r9, r3
   10c7e:	d0f3      	beq.n	10c68 <parse_ncellmeas_gci+0x3ec>
							&cells->neighbor_cells[j].earfcn);
   10c80:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_int_get(&resp_list,
   10c82:	1c69      	adds	r1, r5, #1
   10c84:	eb02 1209 	add.w	r2, r2, r9, lsl #4
   10c88:	a811      	add	r0, sp, #68	; 0x44
   10c8a:	f008 f8f0 	bl	18e6e <at_params_int_get>
				if (err) {
   10c8e:	ea4f 1a09 	mov.w	sl, r9, lsl #4
   10c92:	4604      	mov	r4, r0
   10c94:	b110      	cbz	r0, 10c9c <parse_ncellmeas_gci+0x420>
					LOG_ERR("Could not parse n_earfcn, error: %d", err);
   10c96:	4b2f      	ldr	r3, [pc, #188]	; (10d54 <parse_ncellmeas_gci+0x4d8>)
   10c98:	9003      	str	r0, [sp, #12]
   10c9a:	e61d      	b.n	108d8 <parse_ncellmeas_gci+0x5c>
							  &cells->neighbor_cells[j].phys_cell_id);
   10c9c:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_short_get(&resp_list,
   10c9e:	1ca9      	adds	r1, r5, #2
							  &cells->neighbor_cells[j].phys_cell_id);
   10ca0:	4452      	add	r2, sl
				err = at_params_short_get(&resp_list,
   10ca2:	3208      	adds	r2, #8
   10ca4:	a811      	add	r0, sp, #68	; 0x44
   10ca6:	f008 f8ae 	bl	18e06 <at_params_short_get>
				if (err) {
   10caa:	4604      	mov	r4, r0
   10cac:	b110      	cbz	r0, 10cb4 <parse_ncellmeas_gci+0x438>
					LOG_ERR("Could not parse n_phys_cell_id, error: %d", err);
   10cae:	4b2a      	ldr	r3, [pc, #168]	; (10d58 <parse_ncellmeas_gci+0x4dc>)
   10cb0:	9003      	str	r0, [sp, #12]
   10cb2:	e611      	b.n	108d8 <parse_ncellmeas_gci+0x5c>
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   10cb4:	aa0c      	add	r2, sp, #48	; 0x30
   10cb6:	1ce9      	adds	r1, r5, #3
   10cb8:	a811      	add	r0, sp, #68	; 0x44
   10cba:	f008 f8d8 	bl	18e6e <at_params_int_get>
				if (err) {
   10cbe:	4604      	mov	r4, r0
   10cc0:	b110      	cbz	r0, 10cc8 <parse_ncellmeas_gci+0x44c>
					LOG_ERR("Could not parse n_rsrp, error: %d", err);
   10cc2:	4b26      	ldr	r3, [pc, #152]	; (10d5c <parse_ncellmeas_gci+0x4e0>)
   10cc4:	9003      	str	r0, [sp, #12]
   10cc6:	e607      	b.n	108d8 <parse_ncellmeas_gci+0x5c>
				cells->neighbor_cells[j].rsrp = tmp_int;
   10cc8:	6b73      	ldr	r3, [r6, #52]	; 0x34
   10cca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10ccc:	4453      	add	r3, sl
   10cce:	815a      	strh	r2, [r3, #10]
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   10cd0:	1d29      	adds	r1, r5, #4
   10cd2:	aa0c      	add	r2, sp, #48	; 0x30
   10cd4:	a811      	add	r0, sp, #68	; 0x44
   10cd6:	f008 f8ca 	bl	18e6e <at_params_int_get>
				if (err) {
   10cda:	4604      	mov	r4, r0
   10cdc:	b110      	cbz	r0, 10ce4 <parse_ncellmeas_gci+0x468>
					LOG_ERR("Could not parse n_rsrq, error: %d", err);
   10cde:	4b20      	ldr	r3, [pc, #128]	; (10d60 <parse_ncellmeas_gci+0x4e4>)
   10ce0:	9003      	str	r0, [sp, #12]
   10ce2:	e5f9      	b.n	108d8 <parse_ncellmeas_gci+0x5c>
				cells->neighbor_cells[j].rsrq = tmp_int;
   10ce4:	6b73      	ldr	r3, [r6, #52]	; 0x34
   10ce6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10ce8:	4453      	add	r3, sl
   10cea:	819a      	strh	r2, [r3, #12]
							&cells->neighbor_cells[j].time_diff);
   10cec:	6b72      	ldr	r2, [r6, #52]	; 0x34
				curr_index++;
   10cee:	3505      	adds	r5, #5
							&cells->neighbor_cells[j].time_diff);
   10cf0:	4452      	add	r2, sl
				err = at_params_int_get(&resp_list,
   10cf2:	4629      	mov	r1, r5
   10cf4:	3204      	adds	r2, #4
   10cf6:	a811      	add	r0, sp, #68	; 0x44
   10cf8:	f008 f8b9 	bl	18e6e <at_params_int_get>
				if (err) {
   10cfc:	4604      	mov	r4, r0
   10cfe:	b110      	cbz	r0, 10d06 <parse_ncellmeas_gci+0x48a>
					LOG_ERR("Could not parse time_diff, error: %d", err);
   10d00:	4b18      	ldr	r3, [pc, #96]	; (10d64 <parse_ncellmeas_gci+0x4e8>)
   10d02:	9003      	str	r0, [sp, #12]
   10d04:	e5e8      	b.n	108d8 <parse_ncellmeas_gci+0x5c>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   10d06:	f109 0901 	add.w	r9, r9, #1
   10d0a:	e7b6      	b.n	10c7a <parse_ncellmeas_gci+0x3fe>
			cells->gci_cells[k] = parsed_cell;
   10d0c:	2230      	movs	r2, #48	; 0x30
   10d0e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   10d10:	ac16      	add	r4, sp, #88	; 0x58
   10d12:	fb02 3c0b 	mla	ip, r2, fp, r3
   10d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   10d18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   10d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   10d1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   10d22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   10d26:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   10d2a:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
			k++;
   10d2e:	f10b 0b01 	add.w	fp, fp, #1
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   10d32:	3301      	adds	r3, #1
   10d34:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
			k++;
   10d38:	e796      	b.n	10c68 <parse_ncellmeas_gci+0x3ec>
   10d3a:	bf00      	nop
   10d3c:	0001da80 	.word	0x0001da80
   10d40:	0001daa5 	.word	0x0001daa5
   10d44:	0001dac8 	.word	0x0001dac8
   10d48:	0001daf2 	.word	0x0001daf2
   10d4c:	0001b61c 	.word	0x0001b61c
   10d50:	0001db4a 	.word	0x0001db4a
   10d54:	0001db7e 	.word	0x0001db7e
   10d58:	0001dba2 	.word	0x0001dba2
   10d5c:	0001dbcc 	.word	0x0001dbcc
   10d60:	0001dbee 	.word	0x0001dbee
   10d64:	0001dc10 	.word	0x0001dc10

00010d68 <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
   10d68:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	struct at_param_list resp_list = {0};
   10d6a:	2500      	movs	r5, #0
{
   10d6c:	b089      	sub	sp, #36	; 0x24
   10d6e:	4607      	mov	r7, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   10d70:	460e      	mov	r6, r1
	struct at_param_list resp_list = {0};
   10d72:	e9cd 5506 	strd	r5, r5, [sp, #24]
	if (modem_sleep == NULL || at_response == NULL) {
   10d76:	2900      	cmp	r1, #0
   10d78:	d05b      	beq.n	10e32 <parse_xmodemsleep+0xca>
   10d7a:	2800      	cmp	r0, #0
   10d7c:	d059      	beq.n	10e32 <parse_xmodemsleep+0xca>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   10d7e:	2104      	movs	r1, #4
   10d80:	a806      	add	r0, sp, #24
   10d82:	f007 ff98 	bl	18cb6 <at_params_list_init>
	if (err) {
   10d86:	4604      	mov	r4, r0
   10d88:	b168      	cbz	r0, 10da6 <parse_xmodemsleep+0x3e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   10d8a:	4b2b      	ldr	r3, [pc, #172]	; (10e38 <parse_xmodemsleep+0xd0>)
   10d8c:	9003      	str	r0, [sp, #12]
   10d8e:	e9cd 5301 	strd	r5, r3, [sp, #4]
   10d92:	2201      	movs	r2, #1
   10d94:	462b      	mov	r3, r5
   10d96:	4628      	mov	r0, r5
   10d98:	4928      	ldr	r1, [pc, #160]	; (10e3c <parse_xmodemsleep+0xd4>)
   10d9a:	9500      	str	r5, [sp, #0]
   10d9c:	f008 f8df 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   10da0:	4620      	mov	r0, r4
   10da2:	b009      	add	sp, #36	; 0x24
   10da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   10da6:	4601      	mov	r1, r0
   10da8:	aa06      	add	r2, sp, #24
   10daa:	4638      	mov	r0, r7
   10dac:	f007 ff6a 	bl	18c84 <at_parser_params_from_str>
	if (err) {
   10db0:	4604      	mov	r4, r0
   10db2:	b170      	cbz	r0, 10dd2 <parse_xmodemsleep+0x6a>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   10db4:	4b22      	ldr	r3, [pc, #136]	; (10e40 <parse_xmodemsleep+0xd8>)
   10db6:	9003      	str	r0, [sp, #12]
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   10db8:	e9cd 5301 	strd	r5, r3, [sp, #4]
   10dbc:	2201      	movs	r2, #1
   10dbe:	462b      	mov	r3, r5
   10dc0:	4628      	mov	r0, r5
   10dc2:	491e      	ldr	r1, [pc, #120]	; (10e3c <parse_xmodemsleep+0xd4>)
   10dc4:	9500      	str	r5, [sp, #0]
   10dc6:	f008 f8ca 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   10dca:	a806      	add	r0, sp, #24
   10dcc:	f007 ff9d 	bl	18d0a <at_params_list_free>
	return err;
   10dd0:	e7e6      	b.n	10da0 <parse_xmodemsleep+0x38>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   10dd2:	2101      	movs	r1, #1
   10dd4:	f10d 0216 	add.w	r2, sp, #22
   10dd8:	a806      	add	r0, sp, #24
   10dda:	f008 f830 	bl	18e3e <at_params_unsigned_short_get>
	if (err) {
   10dde:	4604      	mov	r4, r0
   10de0:	b110      	cbz	r0, 10de8 <parse_xmodemsleep+0x80>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   10de2:	4b18      	ldr	r3, [pc, #96]	; (10e44 <parse_xmodemsleep+0xdc>)
   10de4:	9003      	str	r0, [sp, #12]
   10de6:	e7e7      	b.n	10db8 <parse_xmodemsleep+0x50>
	modem_sleep->type = type;
   10de8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   10dec:	a806      	add	r0, sp, #24
	modem_sleep->type = type;
   10dee:	7033      	strb	r3, [r6, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   10df0:	f008 f889 	bl	18f06 <at_params_valid_count_get>
   10df4:	2802      	cmp	r0, #2
   10df6:	d806      	bhi.n	10e06 <parse_xmodemsleep+0x9e>
		modem_sleep->time = -1;
   10df8:	f04f 32ff 	mov.w	r2, #4294967295
   10dfc:	f04f 33ff 	mov.w	r3, #4294967295
   10e00:	e9c6 2302 	strd	r2, r3, [r6, #8]
		goto clean_exit;
   10e04:	e7e1      	b.n	10dca <parse_xmodemsleep+0x62>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   10e06:	2102      	movs	r1, #2
   10e08:	f106 0208 	add.w	r2, r6, #8
   10e0c:	a806      	add	r0, sp, #24
   10e0e:	f008 f846 	bl	18e9e <at_params_int64_get>
	if (err) {
   10e12:	4605      	mov	r5, r0
   10e14:	2800      	cmp	r0, #0
   10e16:	d0d8      	beq.n	10dca <parse_xmodemsleep+0x62>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   10e18:	4b0b      	ldr	r3, [pc, #44]	; (10e48 <parse_xmodemsleep+0xe0>)
   10e1a:	9003      	str	r0, [sp, #12]
   10e1c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   10e20:	4620      	mov	r0, r4
   10e22:	4623      	mov	r3, r4
   10e24:	9400      	str	r4, [sp, #0]
   10e26:	2201      	movs	r2, #1
   10e28:	4904      	ldr	r1, [pc, #16]	; (10e3c <parse_xmodemsleep+0xd4>)
   10e2a:	f008 f898 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
		goto clean_exit;
   10e2e:	462c      	mov	r4, r5
   10e30:	e7cb      	b.n	10dca <parse_xmodemsleep+0x62>
		return -EINVAL;
   10e32:	f06f 0415 	mvn.w	r4, #21
   10e36:	e7b3      	b.n	10da0 <parse_xmodemsleep+0x38>
   10e38:	0001d3e4 	.word	0x0001d3e4
   10e3c:	0001b61c 	.word	0x0001b61c
   10e40:	0001dc61 	.word	0x0001dc61
   10e44:	0001dc93 	.word	0x0001dc93
   10e48:	0001dcbc 	.word	0x0001dcbc

00010e4c <parse_mdmev>:

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   10e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e4e:	460d      	mov	r5, r1
		[LTE_LC_MODEM_EVT_CE_LEVEL_1] = AT_MDMEV_CE_LEVEL_1,
		[LTE_LC_MODEM_EVT_CE_LEVEL_2] = AT_MDMEV_CE_LEVEL_2,
		[LTE_LC_MODEM_EVT_CE_LEVEL_3] = AT_MDMEV_CE_LEVEL_3,
	};

	if (at_response == NULL || modem_evt == NULL) {
   10e50:	4604      	mov	r4, r0
{
   10e52:	b085      	sub	sp, #20
	if (at_response == NULL || modem_evt == NULL) {
   10e54:	b318      	cbz	r0, 10e9e <parse_mdmev+0x52>
   10e56:	b311      	cbz	r1, 10e9e <parse_mdmev+0x52>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   10e58:	2108      	movs	r1, #8
   10e5a:	4a12      	ldr	r2, [pc, #72]	; (10ea4 <parse_mdmev+0x58>)
   10e5c:	f7ff f90e 	bl	1007c <response_is_valid>
   10e60:	4603      	mov	r3, r0
   10e62:	b958      	cbnz	r0, 10e7c <parse_mdmev+0x30>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
   10e64:	4a10      	ldr	r2, [pc, #64]	; (10ea8 <parse_mdmev+0x5c>)
   10e66:	9000      	str	r0, [sp, #0]
   10e68:	e9cd 0201 	strd	r0, r2, [sp, #4]
   10e6c:	490f      	ldr	r1, [pc, #60]	; (10eac <parse_mdmev+0x60>)
   10e6e:	2201      	movs	r2, #1
   10e70:	f008 f875 	bl	18f5e <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   10e74:	f06f 0004 	mvn.w	r0, #4
	}

	LOG_DBG("No modem event type found: %s", at_response);

	return -ENODATA;
}
   10e78:	b005      	add	sp, #20
   10e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   10e7c:	2600      	movs	r6, #0
   10e7e:	4f0c      	ldr	r7, [pc, #48]	; (10eb0 <parse_mdmev+0x64>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   10e80:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   10e82:	4621      	mov	r1, r4
   10e84:	f857 0b04 	ldr.w	r0, [r7], #4
   10e88:	f7f7 ffaa 	bl	8de0 <strcmp>
   10e8c:	b908      	cbnz	r0, 10e92 <parse_mdmev+0x46>
			*modem_evt = i;
   10e8e:	702e      	strb	r6, [r5, #0]
			return 0;
   10e90:	e7f2      	b.n	10e78 <parse_mdmev+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   10e92:	3601      	adds	r6, #1
   10e94:	2e0a      	cmp	r6, #10
   10e96:	d1f4      	bne.n	10e82 <parse_mdmev+0x36>
	return -ENODATA;
   10e98:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   10e9c:	e7ec      	b.n	10e78 <parse_mdmev+0x2c>
		return -EINVAL;
   10e9e:	f06f 0015 	mvn.w	r0, #21
   10ea2:	e7e9      	b.n	10e78 <parse_mdmev+0x2c>
   10ea4:	0001dcf1 	.word	0x0001dcf1
   10ea8:	0001dcfa 	.word	0x0001dcfa
   10eac:	0001b61c 	.word	0x0001b61c
   10eb0:	0001ba4c 	.word	0x0001ba4c

00010eb4 <on_modem_init>:

NRF_MODEM_LIB_ON_INIT(lte_lc_init_hook, on_modem_init, NULL);
NRF_MODEM_LIB_ON_SHUTDOWN(lte_lc_shutdown_hook, on_modem_shutdown, NULL);

static void on_modem_init(int err, void *ctx)
{
   10eb4:	b530      	push	{r4, r5, lr}
	if (err) {
   10eb6:	4604      	mov	r4, r0
{
   10eb8:	b085      	sub	sp, #20
	if (err) {
   10eba:	b178      	cbz	r0, 10edc <on_modem_init+0x28>
		if (err == NRF_MODEM_DFU_RESULT_OK) {
   10ebc:	4b13      	ldr	r3, [pc, #76]	; (10f0c <on_modem_init+0x58>)
   10ebe:	4298      	cmp	r0, r3
   10ec0:	d00a      	beq.n	10ed8 <on_modem_init+0x24>
			LOG_DBG("Modem DFU, lte_lc not initialized");
			return;
		}
		LOG_ERR("Modem library init error: %d, lte_lc not initialized", err);
   10ec2:	4b13      	ldr	r3, [pc, #76]	; (10f10 <on_modem_init+0x5c>)
   10ec4:	9003      	str	r0, [sp, #12]
   10ec6:	9302      	str	r3, [sp, #8]
   10ec8:	2300      	movs	r3, #0
   10eca:	e9cd 3300 	strd	r3, r3, [sp]
		return;
	}

	err = lte_lc_edrx_req(IS_ENABLED(CONFIG_LTE_EDRX_REQ));
	if (err) {
		LOG_ERR("Failed to configure eDRX, err %d", err);
   10ece:	2201      	movs	r2, #1
   10ed0:	4618      	mov	r0, r3
   10ed2:	4910      	ldr	r1, [pc, #64]	; (10f14 <on_modem_init+0x60>)
   10ed4:	f008 f894 	bl	19000 <z_log_msg_runtime_create.constprop.0>
	if (err) {
		LOG_ERR("Lte_lc failed to initialize and connect, err %d", err);
		return;
	}
#endif
}
   10ed8:	b005      	add	sp, #20
   10eda:	bd30      	pop	{r4, r5, pc}
	err = lte_lc_psm_req(IS_ENABLED(CONFIG_LTE_PSM_REQ));
   10edc:	f7fe fcc8 	bl	f870 <lte_lc_psm_req>
	if (err) {
   10ee0:	4605      	mov	r5, r0
   10ee2:	b130      	cbz	r0, 10ef2 <on_modem_init+0x3e>
		LOG_ERR("Failed to configure PSM, err %d", err);
   10ee4:	4b0c      	ldr	r3, [pc, #48]	; (10f18 <on_modem_init+0x64>)
   10ee6:	9003      	str	r0, [sp, #12]
   10ee8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   10eec:	9400      	str	r4, [sp, #0]
   10eee:	4623      	mov	r3, r4
   10ef0:	e7ed      	b.n	10ece <on_modem_init+0x1a>
	err = lte_lc_edrx_req(IS_ENABLED(CONFIG_LTE_EDRX_REQ));
   10ef2:	2001      	movs	r0, #1
   10ef4:	f7fe fe50 	bl	fb98 <lte_lc_edrx_req>
	if (err) {
   10ef8:	2800      	cmp	r0, #0
   10efa:	d0ed      	beq.n	10ed8 <on_modem_init+0x24>
		LOG_ERR("Failed to configure eDRX, err %d", err);
   10efc:	4b07      	ldr	r3, [pc, #28]	; (10f1c <on_modem_init+0x68>)
   10efe:	9003      	str	r0, [sp, #12]
   10f00:	e9cd 5301 	strd	r5, r3, [sp, #4]
   10f04:	9500      	str	r5, [sp, #0]
   10f06:	462b      	mov	r3, r5
   10f08:	e7e1      	b.n	10ece <on_modem_init+0x1a>
   10f0a:	bf00      	nop
   10f0c:	05500001 	.word	0x05500001
   10f10:	0001ddc8 	.word	0x0001ddc8
   10f14:	0001b614 	.word	0x0001b614
   10f18:	0001ddfd 	.word	0x0001ddfd
   10f1c:	0001de1d 	.word	0x0001de1d

00010f20 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   10f20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   10f22:	ab0b      	add	r3, sp, #44	; 0x2c
   10f24:	9305      	str	r3, [sp, #20]
   10f26:	9303      	str	r3, [sp, #12]
   10f28:	4b05      	ldr	r3, [pc, #20]	; (10f40 <z_log_msg_runtime_create.constprop.0+0x20>)
   10f2a:	2201      	movs	r2, #1
   10f2c:	9302      	str	r3, [sp, #8]
   10f2e:	2300      	movs	r3, #0
   10f30:	4618      	mov	r0, r3
   10f32:	e9cd 3300 	strd	r3, r3, [sp]
   10f36:	f7fa fcfd 	bl	b934 <z_impl_z_log_msg_runtime_vcreate>
}
   10f3a:	b007      	add	sp, #28
   10f3c:	f85d fb04 	ldr.w	pc, [sp], #4
   10f40:	0001de3e 	.word	0x0001de3e

00010f44 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   10f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   10f46:	2400      	movs	r4, #0
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   10f48:	f7fa fc84 	bl	b854 <z_impl_log_panic>
   10f4c:	4b06      	ldr	r3, [pc, #24]	; (10f68 <k_sys_fatal_error_handler+0x24>)
   10f4e:	4620      	mov	r0, r4
   10f50:	9302      	str	r3, [sp, #8]
   10f52:	2201      	movs	r2, #1
   10f54:	4623      	mov	r3, r4
   10f56:	e9cd 4400 	strd	r4, r4, [sp]
   10f5a:	4904      	ldr	r1, [pc, #16]	; (10f6c <k_sys_fatal_error_handler+0x28>)
   10f5c:	f7ff ffe0 	bl	10f20 <z_log_msg_runtime_create.constprop.0>
		sys_arch_reboot(0);
   10f60:	4620      	mov	r0, r4
   10f62:	f7fb feaf 	bl	ccc4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   10f66:	bf00      	nop
   10f68:	0001de3e 	.word	0x0001de3e
   10f6c:	0001b5ec 	.word	0x0001b5ec

00010f70 <on_modem_lib_init>:
LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
{
   10f70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	if (ret != 0) {
   10f72:	4604      	mov	r4, r0
   10f74:	b9f8      	cbnz	r0, 10fb6 <on_modem_lib_init+0x46>
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
   10f76:	4911      	ldr	r1, [pc, #68]	; (10fbc <on_modem_lib_init+0x4c>)
   10f78:	4811      	ldr	r0, [pc, #68]	; (10fc0 <on_modem_lib_init+0x50>)
   10f7a:	f001 f95b 	bl	12234 <nrf_modem_at_printf>
		if (err) {
   10f7e:	b150      	cbz	r0, 10f96 <on_modem_lib_init+0x26>
			LOG_ERR("Failed to set MAGPIO configuration (err: %d)", err);
   10f80:	4b10      	ldr	r3, [pc, #64]	; (10fc4 <on_modem_lib_init+0x54>)
   10f82:	9003      	str	r0, [sp, #12]
   10f84:	e9cd 4301 	strd	r4, r3, [sp, #4]
   10f88:	2201      	movs	r2, #1
   10f8a:	4623      	mov	r3, r4
   10f8c:	4620      	mov	r0, r4
   10f8e:	490e      	ldr	r1, [pc, #56]	; (10fc8 <on_modem_lib_init+0x58>)
   10f90:	9400      	str	r4, [sp, #0]
   10f92:	f008 f845 	bl	19020 <z_log_msg_runtime_create.constprop.0>
		}
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_COEX0) > 0) {
		LOG_DBG("Setting COEX0 configuration: %s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
   10f96:	490d      	ldr	r1, [pc, #52]	; (10fcc <on_modem_lib_init+0x5c>)
   10f98:	4809      	ldr	r0, [pc, #36]	; (10fc0 <on_modem_lib_init+0x50>)
   10f9a:	f001 f94b 	bl	12234 <nrf_modem_at_printf>
		if (err) {
   10f9e:	b150      	cbz	r0, 10fb6 <on_modem_lib_init+0x46>
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
   10fa0:	4b0b      	ldr	r3, [pc, #44]	; (10fd0 <on_modem_lib_init+0x60>)
   10fa2:	9003      	str	r0, [sp, #12]
   10fa4:	9302      	str	r3, [sp, #8]
   10fa6:	2300      	movs	r3, #0
   10fa8:	2201      	movs	r2, #1
   10faa:	4618      	mov	r0, r3
   10fac:	e9cd 3300 	strd	r3, r3, [sp]
   10fb0:	4905      	ldr	r1, [pc, #20]	; (10fc8 <on_modem_lib_init+0x58>)
   10fb2:	f008 f835 	bl	19020 <z_log_msg_runtime_create.constprop.0>
		}
	}
}
   10fb6:	b004      	add	sp, #16
   10fb8:	bd10      	pop	{r4, pc}
   10fba:	bf00      	nop
   10fbc:	0001de5b 	.word	0x0001de5b
   10fc0:	0001cfa7 	.word	0x0001cfa7
   10fc4:	0001de7a 	.word	0x0001de7a
   10fc8:	0001b624 	.word	0x0001b624
   10fcc:	0001dea7 	.word	0x0001dea7
   10fd0:	0001deb1 	.word	0x0001deb1

00010fd4 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   10fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10fd8:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   10fda:	4b15      	ldr	r3, [pc, #84]	; (11030 <tfm_ns_interface_dispatch+0x5c>)
   10fdc:	4604      	mov	r4, r0
   10fde:	f893 8000 	ldrb.w	r8, [r3]
   10fe2:	460d      	mov	r5, r1
   10fe4:	4616      	mov	r6, r2
   10fe6:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();
	int tfm_ns_saved_prio;

	if (!is_pre_kernel) {
   10fe8:	f1b8 0f00 	cmp.w	r8, #0
   10fec:	d115      	bne.n	1101a <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   10fee:	4668      	mov	r0, sp
   10ff0:	f006 ff6c 	bl	17ecc <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   10ff4:	463a      	mov	r2, r7
   10ff6:	4631      	mov	r1, r6
   10ff8:	4628      	mov	r0, r5
   10ffa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   10ffc:	47a0      	blx	r4
   10ffe:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   11000:	4668      	mov	r0, sp
   11002:	f006 ff7b 	bl	17efc <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   11006:	f1b8 0f00 	cmp.w	r8, #0
   1100a:	d002      	beq.n	11012 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   1100c:	4809      	ldr	r0, [pc, #36]	; (11034 <tfm_ns_interface_dispatch+0x60>)
   1100e:	f003 fb4d 	bl	146ac <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   11012:	4620      	mov	r0, r4
   11014:	b022      	add	sp, #136	; 0x88
   11016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   1101a:	f04f 32ff 	mov.w	r2, #4294967295
   1101e:	f04f 33ff 	mov.w	r3, #4294967295
   11022:	4804      	ldr	r0, [pc, #16]	; (11034 <tfm_ns_interface_dispatch+0x60>)
   11024:	f003 fac8 	bl	145b8 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   11028:	2800      	cmp	r0, #0
   1102a:	d0e0      	beq.n	10fee <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   1102c:	241f      	movs	r4, #31
   1102e:	e7f0      	b.n	11012 <tfm_ns_interface_dispatch+0x3e>
   11030:	2000ecae 	.word	0x2000ecae
   11034:	2000ca00 	.word	0x2000ca00

00011038 <psa_generate_random>:
    return API_DISPATCH_NO_OUTVEC(in_vec);
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   11038:	b570      	push	{r4, r5, r6, lr}
    struct tfm_crypto_pack_iovec iov = {
   1103a:	2630      	movs	r6, #48	; 0x30
{
   1103c:	b092      	sub	sp, #72	; 0x48
    struct tfm_crypto_pack_iovec iov = {
   1103e:	ab06      	add	r3, sp, #24
{
   11040:	4605      	mov	r5, r0
   11042:	460c      	mov	r4, r1
    struct tfm_crypto_pack_iovec iov = {
   11044:	4632      	mov	r2, r6
   11046:	2100      	movs	r1, #0
   11048:	4618      	mov	r0, r3
   1104a:	f009 fb58 	bl	1a6fe <memset>

    psa_invec in_vec[] = {
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   1104e:	e9cd 5404 	strd	r5, r4, [sp, #16]
    psa_invec in_vec[] = {
   11052:	e9cd 0602 	strd	r0, r6, [sp, #8]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   11056:	b154      	cbz	r4, 1106e <psa_generate_random+0x36>
        return PSA_SUCCESS;
    }

    return API_DISPATCH(in_vec, out_vec);
   11058:	2301      	movs	r3, #1
   1105a:	aa04      	add	r2, sp, #16
   1105c:	9200      	str	r2, [sp, #0]
   1105e:	2100      	movs	r1, #0
   11060:	4804      	ldr	r0, [pc, #16]	; (11074 <psa_generate_random+0x3c>)
   11062:	9301      	str	r3, [sp, #4]
   11064:	aa02      	add	r2, sp, #8
   11066:	f000 f807 	bl	11078 <psa_call>
}
   1106a:	b012      	add	sp, #72	; 0x48
   1106c:	bd70      	pop	{r4, r5, r6, pc}
        return PSA_SUCCESS;
   1106e:	4620      	mov	r0, r4
   11070:	e7fb      	b.n	1106a <psa_generate_random+0x32>
   11072:	bf00      	nop
   11074:	40000100 	.word	0x40000100

00011078 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   11078:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   1107a:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   1107e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   11082:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   11084:	d20d      	bcs.n	110a2 <psa_call+0x2a>
        (type < INT16_MIN) ||
   11086:	ea43 0504 	orr.w	r5, r3, r4
   1108a:	2dff      	cmp	r5, #255	; 0xff
   1108c:	d809      	bhi.n	110a2 <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   1108e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   11092:	4613      	mov	r3, r2
   11094:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   11098:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   1109a:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   1109c:	4803      	ldr	r0, [pc, #12]	; (110ac <psa_call+0x34>)
   1109e:	f7ff bf99 	b.w	10fd4 <tfm_ns_interface_dispatch>
}
   110a2:	f06f 0080 	mvn.w	r0, #128	; 0x80
   110a6:	bc30      	pop	{r4, r5}
   110a8:	4770      	bx	lr
   110aa:	bf00      	nop
   110ac:	00007c11 	.word	0x00007c11

000110b0 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
   110b0:	4a05      	ldr	r2, [pc, #20]	; (110c8 <SystemInit+0x18>)
   110b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   110b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   110ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   110be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   110c2:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
    #endif
}
   110c6:	4770      	bx	lr
   110c8:	e000ed00 	.word	0xe000ed00

000110cc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   110cc:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   110ce:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   110d0:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   110d2:	fab2 f382 	clz	r3, r2
   110d6:	f1c3 031f 	rsb	r3, r3, #31
   110da:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   110dc:	fa05 f403 	lsl.w	r4, r5, r3
   110e0:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   110e4:	e8d0 6fef 	ldaex	r6, [r0]
   110e8:	4296      	cmp	r6, r2
   110ea:	d104      	bne.n	110f6 <nrfx_flag32_alloc+0x2a>
   110ec:	e8c0 4fec 	stlex	ip, r4, [r0]
   110f0:	f1bc 0f00 	cmp.w	ip, #0
   110f4:	d1f6      	bne.n	110e4 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   110f6:	d1eb      	bne.n	110d0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   110f8:	4801      	ldr	r0, [pc, #4]	; (11100 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   110fa:	700b      	strb	r3, [r1, #0]
}
   110fc:	bd70      	pop	{r4, r5, r6, pc}
   110fe:	bf00      	nop
   11100:	0bad0000 	.word	0x0bad0000

00011104 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   11104:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   11106:	6803      	ldr	r3, [r0, #0]
   11108:	40cb      	lsrs	r3, r1
   1110a:	07db      	lsls	r3, r3, #31
   1110c:	d410      	bmi.n	11130 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1110e:	2301      	movs	r3, #1
   11110:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   11112:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   11114:	ea43 0102 	orr.w	r1, r3, r2
   11118:	e8d0 4fef 	ldaex	r4, [r0]
   1111c:	4294      	cmp	r4, r2
   1111e:	d104      	bne.n	1112a <nrfx_flag32_free+0x26>
   11120:	e8c0 1fec 	stlex	ip, r1, [r0]
   11124:	f1bc 0f00 	cmp.w	ip, #0
   11128:	d1f6      	bne.n	11118 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1112a:	d1f2      	bne.n	11112 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1112c:	4801      	ldr	r0, [pc, #4]	; (11134 <nrfx_flag32_free+0x30>)
}
   1112e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   11130:	4801      	ldr	r0, [pc, #4]	; (11138 <nrfx_flag32_free+0x34>)
   11132:	e7fc      	b.n	1112e <nrfx_flag32_free+0x2a>
   11134:	0bad0000 	.word	0x0bad0000
   11138:	0bad0004 	.word	0x0bad0004

0001113c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   1113c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   1113e:	4604      	mov	r4, r0
   11140:	b118      	cbz	r0, 1114a <clock_stop+0xe>
   11142:	2801      	cmp	r0, #1
   11144:	d01e      	beq.n	11184 <clock_stop+0x48>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   11146:	b003      	add	sp, #12
   11148:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   1114a:	2202      	movs	r2, #2
   1114c:	4b27      	ldr	r3, [pc, #156]	; (111ec <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1114e:	4607      	mov	r7, r0
   11150:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11154:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   11158:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1115c:	2201      	movs	r2, #1
   1115e:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   11160:	2301      	movs	r3, #1
   11162:	f242 7510 	movw	r5, #10000	; 0x2710
   11166:	4e21      	ldr	r6, [pc, #132]	; (111ec <clock_stop+0xb0>)
   11168:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   1116c:	b1b4      	cbz	r4, 1119c <clock_stop+0x60>
   1116e:	2c01      	cmp	r4, #1
   11170:	d1e9      	bne.n	11146 <clock_stop+0xa>
            if (p_clk_src != NULL)
   11172:	b387      	cbz	r7, 111d6 <clock_stop+0x9a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   11174:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   11178:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1117c:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1117e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   11182:	e013      	b.n	111ac <clock_stop+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11184:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   11186:	4b19      	ldr	r3, [pc, #100]	; (111ec <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   11188:	f10d 0707 	add.w	r7, sp, #7
   1118c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11190:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   11194:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11198:	6058      	str	r0, [r3, #4]
   1119a:	e7e1      	b.n	11160 <clock_stop+0x24>
            if (p_clk_src != NULL)
   1119c:	b18f      	cbz	r7, 111c2 <clock_stop+0x86>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1119e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   111a2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   111a6:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   111a8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   111ac:	03da      	lsls	r2, r3, #15
   111ae:	d5ca      	bpl.n	11146 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   111b0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   111b4:	2801      	cmp	r0, #1
   111b6:	d1c6      	bne.n	11146 <clock_stop+0xa>
   111b8:	f007 ff47 	bl	1904a <nrfx_busy_wait>
   111bc:	3d01      	subs	r5, #1
   111be:	d1d5      	bne.n	1116c <clock_stop+0x30>
   111c0:	e7c1      	b.n	11146 <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   111c2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   111c6:	03d9      	lsls	r1, r3, #15
   111c8:	d5bd      	bpl.n	11146 <clock_stop+0xa>
   111ca:	2001      	movs	r0, #1
   111cc:	f007 ff3d 	bl	1904a <nrfx_busy_wait>
   111d0:	3d01      	subs	r5, #1
   111d2:	d1f6      	bne.n	111c2 <clock_stop+0x86>
   111d4:	e7b7      	b.n	11146 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   111d6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   111da:	03db      	lsls	r3, r3, #15
   111dc:	d5b3      	bpl.n	11146 <clock_stop+0xa>
   111de:	2001      	movs	r0, #1
   111e0:	f007 ff33 	bl	1904a <nrfx_busy_wait>
   111e4:	3d01      	subs	r5, #1
   111e6:	d1f6      	bne.n	111d6 <clock_stop+0x9a>
   111e8:	e7ad      	b.n	11146 <clock_stop+0xa>
   111ea:	bf00      	nop
   111ec:	40005000 	.word	0x40005000

000111f0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   111f0:	4b04      	ldr	r3, [pc, #16]	; (11204 <nrfx_clock_init+0x14>)
   111f2:	791a      	ldrb	r2, [r3, #4]
   111f4:	b922      	cbnz	r2, 11200 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   111f6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   111f8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   111fa:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   111fc:	4802      	ldr	r0, [pc, #8]	; (11208 <nrfx_clock_init+0x18>)
   111fe:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   11200:	4802      	ldr	r0, [pc, #8]	; (1120c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   11202:	4770      	bx	lr
   11204:	2000d318 	.word	0x2000d318
   11208:	0bad0000 	.word	0x0bad0000
   1120c:	0bad000c 	.word	0x0bad000c

00011210 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   11210:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   11212:	2005      	movs	r0, #5
   11214:	f7fb f8fa 	bl	c40c <arch_irq_is_enabled>
   11218:	b910      	cbnz	r0, 11220 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1121a:	2005      	movs	r0, #5
   1121c:	f7fb f8e8 	bl	c3f0 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   11220:	2201      	movs	r2, #1
   11222:	4b02      	ldr	r3, [pc, #8]	; (1122c <nrfx_clock_enable+0x1c>)
   11224:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   11228:	bd08      	pop	{r3, pc}
   1122a:	bf00      	nop
   1122c:	40005000 	.word	0x40005000

00011230 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   11230:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   11232:	b110      	cbz	r0, 1123a <nrfx_clock_start+0xa>
   11234:	2801      	cmp	r0, #1
   11236:	d02e      	beq.n	11296 <nrfx_clock_start+0x66>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   11238:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1123a:	4a1c      	ldr	r2, [pc, #112]	; (112ac <nrfx_clock_start+0x7c>)
   1123c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   11240:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   11244:	03c9      	lsls	r1, r1, #15
   11246:	d40e      	bmi.n	11266 <nrfx_clock_start+0x36>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   11248:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1124c:	07db      	lsls	r3, r3, #31
   1124e:	d513      	bpl.n	11278 <nrfx_clock_start+0x48>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   11250:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   11254:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   11258:	3b01      	subs	r3, #1
   1125a:	2b01      	cmp	r3, #1
   1125c:	d809      	bhi.n	11272 <nrfx_clock_start+0x42>
    p_reg->INTENSET = mask;
   1125e:	2302      	movs	r3, #2
   11260:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   11264:	e7e8      	b.n	11238 <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   11266:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1126a:	2b02      	cmp	r3, #2
   1126c:	d005      	beq.n	1127a <nrfx_clock_start+0x4a>
   1126e:	2b01      	cmp	r3, #1
   11270:	d002      	beq.n	11278 <nrfx_clock_start+0x48>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   11272:	2000      	movs	r0, #0
   11274:	f7ff ff62 	bl	1113c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   11278:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   1127a:	4a0c      	ldr	r2, [pc, #48]	; (112ac <nrfx_clock_start+0x7c>)
   1127c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11280:	2300      	movs	r3, #0
   11282:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   11286:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   1128a:	2302      	movs	r3, #2
   1128c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11290:	2301      	movs	r3, #1
   11292:	6093      	str	r3, [r2, #8]
}
   11294:	e7d0      	b.n	11238 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11296:	2200      	movs	r2, #0
   11298:	4b04      	ldr	r3, [pc, #16]	; (112ac <nrfx_clock_start+0x7c>)
   1129a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1129e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   112a2:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   112a6:	6018      	str	r0, [r3, #0]
}
   112a8:	e7c6      	b.n	11238 <nrfx_clock_start+0x8>
   112aa:	bf00      	nop
   112ac:	40005000 	.word	0x40005000

000112b0 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   112b0:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   112b2:	4b17      	ldr	r3, [pc, #92]	; (11310 <nrfx_power_clock_irq_handler+0x60>)
   112b4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   112b8:	b152      	cbz	r2, 112d0 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   112ba:	2000      	movs	r0, #0
   112bc:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   112c0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   112c4:	2201      	movs	r2, #1
   112c6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   112ca:	4b12      	ldr	r3, [pc, #72]	; (11314 <nrfx_power_clock_irq_handler+0x64>)
   112cc:	681b      	ldr	r3, [r3, #0]
   112ce:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   112d0:	4b0f      	ldr	r3, [pc, #60]	; (11310 <nrfx_power_clock_irq_handler+0x60>)
   112d2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   112d6:	b18a      	cbz	r2, 112fc <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   112d8:	2200      	movs	r2, #0
   112da:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   112de:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   112e2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   112e6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   112ea:	f002 0203 	and.w	r2, r2, #3
   112ee:	2a01      	cmp	r2, #1
   112f0:	f04f 0102 	mov.w	r1, #2
   112f4:	d103      	bne.n	112fe <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   112f6:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   112fa:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   112fc:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   112fe:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   11302:	4b04      	ldr	r3, [pc, #16]	; (11314 <nrfx_power_clock_irq_handler+0x64>)
   11304:	2001      	movs	r0, #1
}
   11306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1130a:	681b      	ldr	r3, [r3, #0]
   1130c:	4718      	bx	r3
   1130e:	bf00      	nop
   11310:	40005000 	.word	0x40005000
   11314:	2000d318 	.word	0x2000d318

00011318 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   11318:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   1131a:	4801      	ldr	r0, [pc, #4]	; (11320 <nrfx_dppi_channel_alloc+0x8>)
   1131c:	f7ff bed6 	b.w	110cc <nrfx_flag32_alloc>
   11320:	2000c624 	.word	0x2000c624

00011324 <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
   11324:	4a06      	ldr	r2, [pc, #24]	; (11340 <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
   11326:	f000 001f 	and.w	r0, r0, #31
   1132a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1132e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    cnf &= ~to_update;
   11332:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   11336:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1133a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
   1133e:	4770      	bx	lr
   11340:	40842500 	.word	0x40842500

00011344 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   11344:	4b03      	ldr	r3, [pc, #12]	; (11354 <pin_in_use_by_te+0x10>)
   11346:	3008      	adds	r0, #8
   11348:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1134c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   11350:	4770      	bx	lr
   11352:	bf00      	nop
   11354:	2000c628 	.word	0x2000c628

00011358 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   11358:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1135a:	4c0d      	ldr	r4, [pc, #52]	; (11390 <call_handler+0x38>)
   1135c:	f100 0308 	add.w	r3, r0, #8
   11360:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   11364:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   11366:	05da      	lsls	r2, r3, #23
{
   11368:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1136a:	d507      	bpl.n	1137c <call_handler+0x24>
   1136c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   11370:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   11374:	6852      	ldr	r2, [r2, #4]
   11376:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1137a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1137c:	68a3      	ldr	r3, [r4, #8]
   1137e:	b12b      	cbz	r3, 1138c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   11380:	4631      	mov	r1, r6
   11382:	4628      	mov	r0, r5
   11384:	68e2      	ldr	r2, [r4, #12]
    }
}
   11386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1138a:	4718      	bx	r3
}
   1138c:	bd70      	pop	{r4, r5, r6, pc}
   1138e:	bf00      	nop
   11390:	2000c628 	.word	0x2000c628

00011394 <release_handler>:
{
   11394:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   11396:	4a13      	ldr	r2, [pc, #76]	; (113e4 <release_handler+0x50>)
   11398:	3008      	adds	r0, #8
   1139a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1139e:	05d9      	lsls	r1, r3, #23
   113a0:	d51c      	bpl.n	113dc <release_handler+0x48>
   113a2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   113a6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   113aa:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   113ae:	2000      	movs	r0, #0
   113b0:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   113b4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   113b8:	f413 7f80 	tst.w	r3, #256	; 0x100
   113bc:	d003      	beq.n	113c6 <release_handler+0x32>
   113be:	f3c3 2343 	ubfx	r3, r3, #9, #4
   113c2:	4299      	cmp	r1, r3
   113c4:	d00a      	beq.n	113dc <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   113c6:	3001      	adds	r0, #1
   113c8:	2820      	cmp	r0, #32
   113ca:	d1f3      	bne.n	113b4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   113cc:	2300      	movs	r3, #0
   113ce:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   113d2:	4805      	ldr	r0, [pc, #20]	; (113e8 <release_handler+0x54>)
}
   113d4:	f85d 4b04 	ldr.w	r4, [sp], #4
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   113d8:	f7ff be94 	b.w	11104 <nrfx_flag32_free>
}
   113dc:	f85d 4b04 	ldr.w	r4, [sp], #4
   113e0:	4770      	bx	lr
   113e2:	bf00      	nop
   113e4:	2000c628 	.word	0x2000c628
   113e8:	2000c67c 	.word	0x2000c67c

000113ec <pin_handler_trigger_uninit>:
{
   113ec:	b538      	push	{r3, r4, r5, lr}
   113ee:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   113f0:	f7ff ffa8 	bl	11344 <pin_in_use_by_te>
   113f4:	4c0b      	ldr	r4, [pc, #44]	; (11424 <pin_handler_trigger_uninit+0x38>)
   113f6:	f102 0508 	add.w	r5, r2, #8
   113fa:	b160      	cbz	r0, 11416 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   113fc:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   113fe:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   11402:	0b5b      	lsrs	r3, r3, #13
   11404:	009b      	lsls	r3, r3, #2
   11406:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1140a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   1140e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
   11412:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   11416:	4610      	mov	r0, r2
   11418:	f7ff ffbc 	bl	11394 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1141c:	2300      	movs	r3, #0
   1141e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   11422:	bd38      	pop	{r3, r4, r5, pc}
   11424:	2000c628 	.word	0x2000c628

00011428 <nrfx_gpiote_input_configure>:
{
   11428:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1142c:	4604      	mov	r4, r0
   1142e:	461d      	mov	r5, r3
    if (p_input_config)
   11430:	b309      	cbz	r1, 11476 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   11432:	4f4e      	ldr	r7, [pc, #312]	; (1156c <nrfx_gpiote_input_configure+0x144>)
   11434:	f100 0808 	add.w	r8, r0, #8
   11438:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1143c:	07b3      	lsls	r3, r6, #30
   1143e:	d506      	bpl.n	1144e <nrfx_gpiote_input_configure+0x26>
   11440:	f7ff ff80 	bl	11344 <pin_in_use_by_te>
   11444:	b118      	cbz	r0, 1144e <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
   11446:	484a      	ldr	r0, [pc, #296]	; (11570 <nrfx_gpiote_input_configure+0x148>)
}
   11448:	b002      	add	sp, #8
   1144a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1144e:	4849      	ldr	r0, [pc, #292]	; (11574 <nrfx_gpiote_input_configure+0x14c>)
    *p_pin = pin_number & 0x1F;
   11450:	f004 031f 	and.w	r3, r4, #31
   11454:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   11458:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1145c:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
   1145e:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   11462:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   11466:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1146a:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
   1146e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
   11472:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
   11476:	b19a      	cbz	r2, 114a0 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   11478:	4e3c      	ldr	r6, [pc, #240]	; (1156c <nrfx_gpiote_input_configure+0x144>)
   1147a:	f104 0708 	add.w	r7, r4, #8
   1147e:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   11482:	7813      	ldrb	r3, [r2, #0]
        if (pin_is_output(pin))
   11484:	f011 0f02 	tst.w	r1, #2
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   11488:	6850      	ldr	r0, [r2, #4]
        if (pin_is_output(pin))
   1148a:	d00c      	beq.n	114a6 <nrfx_gpiote_input_configure+0x7e>
            if (use_evt)
   1148c:	2800      	cmp	r0, #0
   1148e:	d1da      	bne.n	11446 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   11490:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
   11494:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   11498:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
   1149c:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
   114a0:	bbd5      	cbnz	r5, 11518 <nrfx_gpiote_input_configure+0xf0>
        err = NRFX_SUCCESS;
   114a2:	4835      	ldr	r0, [pc, #212]	; (11578 <nrfx_gpiote_input_configure+0x150>)
   114a4:	e7d0      	b.n	11448 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   114a6:	f021 0120 	bic.w	r1, r1, #32
   114aa:	04c9      	lsls	r1, r1, #19
   114ac:	0cc9      	lsrs	r1, r1, #19
   114ae:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
   114b2:	2800      	cmp	r0, #0
   114b4:	d0ec      	beq.n	11490 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   114b6:	2b03      	cmp	r3, #3
   114b8:	d8c5      	bhi.n	11446 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   114ba:	6852      	ldr	r2, [r2, #4]
   114bc:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   114c0:	4662      	mov	r2, ip
   114c2:	0092      	lsls	r2, r2, #2
   114c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   114c8:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   114cc:	b923      	cbnz	r3, 114d8 <nrfx_gpiote_input_configure+0xb0>
    p_reg->CONFIG[idx] = 0;
   114ce:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   114d2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
   114d6:	e7db      	b.n	11490 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   114d8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   114dc:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   114e0:	f020 0003 	bic.w	r0, r0, #3
   114e4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   114e8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   114ec:	f041 0120 	orr.w	r1, r1, #32
   114f0:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   114f4:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   114f8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   114fc:	0220      	lsls	r0, r4, #8
   114fe:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   11502:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   11506:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   1150a:	ea40 000e 	orr.w	r0, r0, lr
   1150e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   11512:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
   11516:	e7bb      	b.n	11490 <nrfx_gpiote_input_configure+0x68>
    release_handler(pin);
   11518:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1151a:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1151e:	f7ff ff39 	bl	11394 <release_handler>
    if (!handler)
   11522:	2e00      	cmp	r6, #0
   11524:	d0bd      	beq.n	114a2 <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   11526:	4d11      	ldr	r5, [pc, #68]	; (1156c <nrfx_gpiote_input_configure+0x144>)
   11528:	e9d5 2300 	ldrd	r2, r3, [r5]
   1152c:	4296      	cmp	r6, r2
   1152e:	d101      	bne.n	11534 <nrfx_gpiote_input_configure+0x10c>
   11530:	429f      	cmp	r7, r3
   11532:	d018      	beq.n	11566 <nrfx_gpiote_input_configure+0x13e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   11534:	4811      	ldr	r0, [pc, #68]	; (1157c <nrfx_gpiote_input_configure+0x154>)
   11536:	f10d 0107 	add.w	r1, sp, #7
   1153a:	f7ff fdc7 	bl	110cc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1153e:	4b0e      	ldr	r3, [pc, #56]	; (11578 <nrfx_gpiote_input_configure+0x150>)
   11540:	4298      	cmp	r0, r3
   11542:	d181      	bne.n	11448 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
   11544:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
   11548:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1154c:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1154e:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   11550:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   11554:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   11558:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1155c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   11560:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   11564:	e79d      	b.n	114a2 <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   11566:	2200      	movs	r2, #0
   11568:	e7ee      	b.n	11548 <nrfx_gpiote_input_configure+0x120>
   1156a:	bf00      	nop
   1156c:	2000c628 	.word	0x2000c628
   11570:	0bad0004 	.word	0x0bad0004
   11574:	40842500 	.word	0x40842500
   11578:	0bad0000 	.word	0x0bad0000
   1157c:	2000c67c 	.word	0x2000c67c

00011580 <nrfx_gpiote_output_configure>:
{
   11580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11582:	4604      	mov	r4, r0
    if (p_config)
   11584:	b379      	cbz	r1, 115e6 <nrfx_gpiote_output_configure+0x66>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   11586:	4e3a      	ldr	r6, [pc, #232]	; (11670 <nrfx_gpiote_output_configure+0xf0>)
   11588:	f100 0708 	add.w	r7, r0, #8
   1158c:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   11590:	07ab      	lsls	r3, r5, #30
   11592:	d404      	bmi.n	1159e <nrfx_gpiote_output_configure+0x1e>
   11594:	f7ff fed6 	bl	11344 <pin_in_use_by_te>
   11598:	b108      	cbz	r0, 1159e <nrfx_gpiote_output_configure+0x1e>
{
   1159a:	4836      	ldr	r0, [pc, #216]	; (11674 <nrfx_gpiote_output_configure+0xf4>)
}
   1159c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1159e:	f015 0f1c 	tst.w	r5, #28
   115a2:	784b      	ldrb	r3, [r1, #1]
   115a4:	d122      	bne.n	115ec <nrfx_gpiote_output_configure+0x6c>
    *p_pin = pin_number & 0x1F;
   115a6:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   115aa:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 11678 <nrfx_gpiote_output_configure+0xf8>
   115ae:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   115b2:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   115b6:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   115ba:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
   115bc:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   115c0:	7809      	ldrb	r1, [r1, #0]
   115c2:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    cnf &= ~to_update;
   115c6:	f02c 0c07 	bic.w	ip, ip, #7
   115ca:	ea43 030c 	orr.w	r3, r3, ip
   115ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   115d2:	4929      	ldr	r1, [pc, #164]	; (11678 <nrfx_gpiote_output_configure+0xf8>)
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   115d4:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   115d8:	3080      	adds	r0, #128	; 0x80
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   115da:	f045 0503 	orr.w	r5, r5, #3
   115de:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   115e2:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
   115e6:	b922      	cbnz	r2, 115f2 <nrfx_gpiote_output_configure+0x72>
    return NRFX_SUCCESS;
   115e8:	4824      	ldr	r0, [pc, #144]	; (1167c <nrfx_gpiote_output_configure+0xfc>)
   115ea:	e7d7      	b.n	1159c <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   115ec:	2b01      	cmp	r3, #1
   115ee:	d1da      	bne.n	115a6 <nrfx_gpiote_output_configure+0x26>
   115f0:	e7d3      	b.n	1159a <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   115f2:	4e1f      	ldr	r6, [pc, #124]	; (11670 <nrfx_gpiote_output_configure+0xf0>)
   115f4:	f104 0708 	add.w	r7, r4, #8
   115f8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   115fc:	0783      	lsls	r3, r0, #30
   115fe:	d5cc      	bpl.n	1159a <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   11600:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
   11604:	2300      	movs	r3, #0
   11606:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   11608:	f020 0020 	bic.w	r0, r0, #32
   1160c:	0089      	lsls	r1, r1, #2
   1160e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   11612:	04c0      	lsls	r0, r0, #19
   11614:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   11618:	0cc0      	lsrs	r0, r0, #19
   1161a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1161e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   11622:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   11626:	7855      	ldrb	r5, [r2, #1]
   11628:	2d00      	cmp	r5, #0
   1162a:	d0dd      	beq.n	115e8 <nrfx_gpiote_output_configure+0x68>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1162c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   11630:	7892      	ldrb	r2, [r2, #2]
   11632:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   11636:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1163a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1163e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   11642:	0223      	lsls	r3, r4, #8
   11644:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   11648:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1164a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1164e:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   11652:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11654:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   11656:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1165a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1165e:	4313      	orrs	r3, r2
   11660:	f040 0020 	orr.w	r0, r0, #32
   11664:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   11668:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1166c:	e7bc      	b.n	115e8 <nrfx_gpiote_output_configure+0x68>
   1166e:	bf00      	nop
   11670:	2000c628 	.word	0x2000c628
   11674:	0bad0004 	.word	0x0bad0004
   11678:	40842500 	.word	0x40842500
   1167c:	0bad0000 	.word	0x0bad0000

00011680 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   11680:	4b01      	ldr	r3, [pc, #4]	; (11688 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   11682:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   11686:	4770      	bx	lr
   11688:	2000c628 	.word	0x2000c628

0001168c <nrfx_gpiote_channel_get>:
{
   1168c:	b508      	push	{r3, lr}
   1168e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   11690:	f7ff fe58 	bl	11344 <pin_in_use_by_te>
   11694:	b138      	cbz	r0, 116a6 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   11696:	4b05      	ldr	r3, [pc, #20]	; (116ac <nrfx_gpiote_channel_get+0x20>)
   11698:	3208      	adds	r2, #8
   1169a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   1169e:	4804      	ldr	r0, [pc, #16]	; (116b0 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   116a0:	0b5b      	lsrs	r3, r3, #13
   116a2:	700b      	strb	r3, [r1, #0]
}
   116a4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   116a6:	4803      	ldr	r0, [pc, #12]	; (116b4 <nrfx_gpiote_channel_get+0x28>)
   116a8:	e7fc      	b.n	116a4 <nrfx_gpiote_channel_get+0x18>
   116aa:	bf00      	nop
   116ac:	2000c628 	.word	0x2000c628
   116b0:	0bad0000 	.word	0x0bad0000
   116b4:	0bad0004 	.word	0x0bad0004

000116b8 <nrfx_gpiote_init>:
{
   116b8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   116ba:	4c0f      	ldr	r4, [pc, #60]	; (116f8 <nrfx_gpiote_init+0x40>)
   116bc:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   116c0:	b9bd      	cbnz	r5, 116f2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   116c2:	2240      	movs	r2, #64	; 0x40
   116c4:	4629      	mov	r1, r5
   116c6:	f104 0010 	add.w	r0, r4, #16
   116ca:	f009 f818 	bl	1a6fe <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   116ce:	2031      	movs	r0, #49	; 0x31
   116d0:	f7fa fe8e 	bl	c3f0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   116d4:	4b09      	ldr	r3, [pc, #36]	; (116fc <nrfx_gpiote_init+0x44>)
    return err_code;
   116d6:	480a      	ldr	r0, [pc, #40]	; (11700 <nrfx_gpiote_init+0x48>)
   116d8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   116dc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   116e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   116e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   116e8:	2301      	movs	r3, #1
   116ea:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   116ee:	6563      	str	r3, [r4, #84]	; 0x54
}
   116f0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   116f2:	4804      	ldr	r0, [pc, #16]	; (11704 <nrfx_gpiote_init+0x4c>)
   116f4:	e7fc      	b.n	116f0 <nrfx_gpiote_init+0x38>
   116f6:	bf00      	nop
   116f8:	2000c628 	.word	0x2000c628
   116fc:	40031000 	.word	0x40031000
   11700:	0bad0000 	.word	0x0bad0000
   11704:	0bad0005 	.word	0x0bad0005

00011708 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   11708:	4b03      	ldr	r3, [pc, #12]	; (11718 <nrfx_gpiote_is_init+0x10>)
   1170a:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   1170e:	3800      	subs	r0, #0
   11710:	bf18      	it	ne
   11712:	2001      	movne	r0, #1
   11714:	4770      	bx	lr
   11716:	bf00      	nop
   11718:	2000c628 	.word	0x2000c628

0001171c <nrfx_gpiote_channel_free>:
{
   1171c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1171e:	4801      	ldr	r0, [pc, #4]	; (11724 <nrfx_gpiote_channel_free+0x8>)
   11720:	f7ff bcf0 	b.w	11104 <nrfx_flag32_free>
   11724:	2000c678 	.word	0x2000c678

00011728 <nrfx_gpiote_channel_alloc>:
{
   11728:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1172a:	4801      	ldr	r0, [pc, #4]	; (11730 <nrfx_gpiote_channel_alloc+0x8>)
   1172c:	f7ff bcce 	b.w	110cc <nrfx_flag32_alloc>
   11730:	2000c678 	.word	0x2000c678

00011734 <nrfx_gpiote_trigger_enable>:
{
   11734:	4602      	mov	r2, r0
   11736:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   11738:	f7ff fe04 	bl	11344 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1173c:	4b1b      	ldr	r3, [pc, #108]	; (117ac <nrfx_gpiote_trigger_enable+0x78>)
   1173e:	f102 0408 	add.w	r4, r2, #8
   11742:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   11746:	b1c8      	cbz	r0, 1177c <nrfx_gpiote_trigger_enable+0x48>
   11748:	f013 0402 	ands.w	r4, r3, #2
   1174c:	d116      	bne.n	1177c <nrfx_gpiote_trigger_enable+0x48>
    return ((uint32_t)p_reg + event);
   1174e:	4818      	ldr	r0, [pc, #96]	; (117b0 <nrfx_gpiote_trigger_enable+0x7c>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   11750:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   11752:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11754:	5084      	str	r4, [r0, r2]
   11756:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   11758:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1175c:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   11760:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   11764:	f040 0001 	orr.w	r0, r0, #1
   11768:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   1176c:	b129      	cbz	r1, 1177a <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1176e:	2201      	movs	r2, #1
   11770:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   11774:	4a0f      	ldr	r2, [pc, #60]	; (117b4 <nrfx_gpiote_trigger_enable+0x80>)
   11776:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1177a:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1177c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   11780:	2b04      	cmp	r3, #4
   11782:	d00e      	beq.n	117a2 <nrfx_gpiote_trigger_enable+0x6e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   11784:	2b05      	cmp	r3, #5
   11786:	d00e      	beq.n	117a6 <nrfx_gpiote_trigger_enable+0x72>
    return p_reg->IN;
   11788:	4b0b      	ldr	r3, [pc, #44]	; (117b8 <nrfx_gpiote_trigger_enable+0x84>)
   1178a:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
   1178c:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   11790:	40d9      	lsrs	r1, r3
   11792:	f001 0101 	and.w	r1, r1, #1
   11796:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   11798:	4610      	mov	r0, r2
}
   1179a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1179e:	f7ff bdc1 	b.w	11324 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   117a2:	2103      	movs	r1, #3
   117a4:	e7f8      	b.n	11798 <nrfx_gpiote_trigger_enable+0x64>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   117a6:	2102      	movs	r1, #2
   117a8:	e7f6      	b.n	11798 <nrfx_gpiote_trigger_enable+0x64>
   117aa:	bf00      	nop
   117ac:	2000c628 	.word	0x2000c628
   117b0:	40031100 	.word	0x40031100
   117b4:	40031000 	.word	0x40031000
   117b8:	40842500 	.word	0x40842500

000117bc <nrfx_gpiote_trigger_disable>:
{
   117bc:	b508      	push	{r3, lr}
   117be:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   117c0:	f7ff fdc0 	bl	11344 <pin_in_use_by_te>
   117c4:	b1c0      	cbz	r0, 117f8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   117c6:	4b0f      	ldr	r3, [pc, #60]	; (11804 <nrfx_gpiote_trigger_disable+0x48>)
   117c8:	f102 0108 	add.w	r1, r2, #8
   117cc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   117d0:	0799      	lsls	r1, r3, #30
   117d2:	d411      	bmi.n	117f8 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   117d4:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   117d6:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   117d8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   117da:	490b      	ldr	r1, [pc, #44]	; (11808 <nrfx_gpiote_trigger_disable+0x4c>)
   117dc:	009b      	lsls	r3, r3, #2
   117de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   117e2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   117e6:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   117ea:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   117ee:	f022 0203 	bic.w	r2, r2, #3
   117f2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   117f6:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   117f8:	2100      	movs	r1, #0
}
   117fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   117fe:	4610      	mov	r0, r2
   11800:	f7ff bd90 	b.w	11324 <nrf_gpio_cfg_sense_set>
   11804:	2000c628 	.word	0x2000c628
   11808:	40031000 	.word	0x40031000

0001180c <nrfx_gpiote_pin_uninit>:
{
   1180c:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1180e:	4b0c      	ldr	r3, [pc, #48]	; (11840 <nrfx_gpiote_pin_uninit+0x34>)
   11810:	f100 0208 	add.w	r2, r0, #8
   11814:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   11818:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1181a:	07db      	lsls	r3, r3, #31
   1181c:	d50d      	bpl.n	1183a <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
   1181e:	f7ff ffcd 	bl	117bc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   11822:	4620      	mov	r0, r4
   11824:	f7ff fde2 	bl	113ec <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   11828:	2202      	movs	r2, #2
   1182a:	4b06      	ldr	r3, [pc, #24]	; (11844 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
   1182c:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
   11830:	3480      	adds	r4, #128	; 0x80
   11832:	4805      	ldr	r0, [pc, #20]	; (11848 <nrfx_gpiote_pin_uninit+0x3c>)
   11834:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   11838:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1183a:	4804      	ldr	r0, [pc, #16]	; (1184c <nrfx_gpiote_pin_uninit+0x40>)
   1183c:	e7fc      	b.n	11838 <nrfx_gpiote_pin_uninit+0x2c>
   1183e:	bf00      	nop
   11840:	2000c628 	.word	0x2000c628
   11844:	40842500 	.word	0x40842500
   11848:	0bad0000 	.word	0x0bad0000
   1184c:	0bad0004 	.word	0x0bad0004

00011850 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   11850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   11854:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   11856:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11858:	462c      	mov	r4, r5
{
   1185a:	4b4d      	ldr	r3, [pc, #308]	; (11990 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
   1185c:	484d      	ldr	r0, [pc, #308]	; (11994 <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1185e:	494e      	ldr	r1, [pc, #312]	; (11998 <nrfx_gpiote_irq_handler+0x148>)
{
   11860:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11862:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   11864:	b136      	cbz	r6, 11874 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   11866:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   1186a:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1186c:	bf1e      	ittt	ne
   1186e:	601c      	strne	r4, [r3, #0]
   11870:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   11872:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   11874:	3304      	adds	r3, #4
   11876:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   11878:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1187c:	d1f1      	bne.n	11862 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1187e:	4f45      	ldr	r7, [pc, #276]	; (11994 <nrfx_gpiote_irq_handler+0x144>)
   11880:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   11884:	b193      	cbz	r3, 118ac <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
   11886:	4e45      	ldr	r6, [pc, #276]	; (1199c <nrfx_gpiote_irq_handler+0x14c>)
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   11888:	f10d 090c 	add.w	r9, sp, #12
   1188c:	6a33      	ldr	r3, [r6, #32]
   1188e:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   11890:	6233      	str	r3, [r6, #32]
   11892:	f04f 0a01 	mov.w	sl, #1
            while (latch[i])
   11896:	9803      	ldr	r0, [sp, #12]
   11898:	b970      	cbnz	r0, 118b8 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1189a:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
   1189e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   118a2:	6a33      	ldr	r3, [r6, #32]
   118a4:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   118a6:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
   118a8:	2b00      	cmp	r3, #0
   118aa:	d1f2      	bne.n	11892 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   118ac:	2401      	movs	r4, #1
    while (mask)
   118ae:	2d00      	cmp	r5, #0
   118b0:	d156      	bne.n	11960 <nrfx_gpiote_irq_handler+0x110>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   118b2:	b005      	add	sp, #20
   118b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   118b8:	fa90 fba0 	rbit	fp, r0
   118bc:	fabb fb8b 	clz	fp, fp
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   118c0:	4a37      	ldr	r2, [pc, #220]	; (119a0 <nrfx_gpiote_irq_handler+0x150>)
   118c2:	f10b 0308 	add.w	r3, fp, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   118c6:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
   118ca:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
   118ce:	f00b 0407 	and.w	r4, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   118d2:	f819 300c 	ldrb.w	r3, [r9, ip]
   118d6:	fa0a f404 	lsl.w	r4, sl, r4
   118da:	ea23 0304 	bic.w	r3, r3, r4
   118de:	f809 300c 	strb.w	r3, [r9, ip]
   118e2:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   118e6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
   118ea:	f3c1 0282 	ubfx	r2, r1, #2, #3
    if (is_level(trigger))
   118ee:	06c9      	lsls	r1, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   118f0:	4690      	mov	r8, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   118f2:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
   118f6:	d518      	bpl.n	1192a <nrfx_gpiote_irq_handler+0xda>
        call_handler(pin, trigger);
   118f8:	4611      	mov	r1, r2
   118fa:	4658      	mov	r0, fp
   118fc:	9301      	str	r3, [sp, #4]
   118fe:	f7ff fd2b 	bl	11358 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   11902:	9b01      	ldr	r3, [sp, #4]
   11904:	b2e4      	uxtb	r4, r4
   11906:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1190a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1190e:	429c      	cmp	r4, r3
   11910:	d107      	bne.n	11922 <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   11912:	2100      	movs	r1, #0
   11914:	4658      	mov	r0, fp
   11916:	f7ff fd05 	bl	11324 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1191a:	4621      	mov	r1, r4
   1191c:	4658      	mov	r0, fp
   1191e:	f7ff fd01 	bl	11324 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   11922:	fa0a f00b 	lsl.w	r0, sl, fp
   11926:	6230      	str	r0, [r6, #32]
}
   11928:	e7b5      	b.n	11896 <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1192a:	2c02      	cmp	r4, #2
   1192c:	d10c      	bne.n	11948 <nrfx_gpiote_irq_handler+0xf8>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1192e:	2103      	movs	r1, #3
   11930:	4658      	mov	r0, fp
   11932:	f7ff fcf7 	bl	11324 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   11936:	f008 0305 	and.w	r3, r8, #5
   1193a:	2b01      	cmp	r3, #1
   1193c:	d1f1      	bne.n	11922 <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
   1193e:	4641      	mov	r1, r8
   11940:	4658      	mov	r0, fp
   11942:	f7ff fd09 	bl	11358 <call_handler>
   11946:	e7ec      	b.n	11922 <nrfx_gpiote_irq_handler+0xd2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   11948:	2102      	movs	r1, #2
   1194a:	4658      	mov	r0, fp
   1194c:	9201      	str	r2, [sp, #4]
   1194e:	f7ff fce9 	bl	11324 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   11952:	9a01      	ldr	r2, [sp, #4]
   11954:	2a03      	cmp	r2, #3
   11956:	d0f2      	beq.n	1193e <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   11958:	2c03      	cmp	r4, #3
   1195a:	d1e2      	bne.n	11922 <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1195c:	428a      	cmp	r2, r1
   1195e:	e7ed      	b.n	1193c <nrfx_gpiote_irq_handler+0xec>
        uint32_t ch = NRF_CTZ(mask);
   11960:	fa95 f3a5 	rbit	r3, r5
   11964:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   11968:	fa04 f203 	lsl.w	r2, r4, r3
   1196c:	009b      	lsls	r3, r3, #2
   1196e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11972:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   11976:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1197a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1197e:	f3c0 2004 	ubfx	r0, r0, #8, #5
   11982:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   11986:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1198a:	f7ff fce5 	bl	11358 <call_handler>
   1198e:	e78e      	b.n	118ae <nrfx_gpiote_irq_handler+0x5e>
   11990:	40031100 	.word	0x40031100
   11994:	40031000 	.word	0x40031000
   11998:	40031120 	.word	0x40031120
   1199c:	40842500 	.word	0x40842500
   119a0:	2000c628 	.word	0x2000c628

000119a4 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   119a4:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   119a6:	4c08      	ldr	r4, [pc, #32]	; (119c8 <nrfx_ipc_init+0x24>)
{
   119a8:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   119aa:	7923      	ldrb	r3, [r4, #4]
{
   119ac:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   119ae:	b943      	cbnz	r3, 119c2 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   119b0:	202a      	movs	r0, #42	; 0x2a
   119b2:	f7fa fd1d 	bl	c3f0 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   119b6:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   119b8:	4804      	ldr	r0, [pc, #16]	; (119cc <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   119ba:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   119bc:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   119be:	60a5      	str	r5, [r4, #8]
}
   119c0:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   119c2:	4803      	ldr	r0, [pc, #12]	; (119d0 <nrfx_ipc_init+0x2c>)
   119c4:	e7fc      	b.n	119c0 <nrfx_ipc_init+0x1c>
   119c6:	bf00      	nop
   119c8:	2000d320 	.word	0x2000d320
   119cc:	0bad0000 	.word	0x0bad0000
   119d0:	0bad000c 	.word	0x0bad000c

000119d4 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   119d4:	2300      	movs	r3, #0
{
   119d6:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   119d8:	4a0d      	ldr	r2, [pc, #52]	; (11a10 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   119da:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   119de:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   119e2:	3301      	adds	r3, #1
   119e4:	2b08      	cmp	r3, #8
   119e6:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   119ea:	d1f6      	bne.n	119da <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   119ec:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   119ee:	4a08      	ldr	r2, [pc, #32]	; (11a10 <nrfx_ipc_config_load+0x3c>)
   119f0:	f100 011c 	add.w	r1, r0, #28
   119f4:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   119f8:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   119fc:	3301      	adds	r3, #1
   119fe:	2b08      	cmp	r3, #8
   11a00:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   11a04:	d1f6      	bne.n	119f4 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   11a06:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   11a08:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   11a0c:	bd30      	pop	{r4, r5, pc}
   11a0e:	bf00      	nop
   11a10:	4002a000 	.word	0x4002a000

00011a14 <nrfx_ipc_uninit>:
    p_reg->SEND_CNF[index] = channels_mask;
   11a14:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   11a16:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->SEND_CNF[index] = channels_mask;
   11a1a:	4a13      	ldr	r2, [pc, #76]	; (11a68 <nrfx_ipc_uninit+0x54>)
   11a1c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   11a20:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   11a24:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   11a28:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   11a2c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   11a30:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   11a34:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   11a38:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
   11a3c:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   11a40:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   11a44:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   11a48:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   11a4c:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   11a50:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   11a54:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
   11a58:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
   11a5c:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   11a60:	4a02      	ldr	r2, [pc, #8]	; (11a6c <nrfx_ipc_uninit+0x58>)
   11a62:	7113      	strb	r3, [r2, #4]
}
   11a64:	4770      	bx	lr
   11a66:	bf00      	nop
   11a68:	4002a000 	.word	0x4002a000
   11a6c:	2000d320 	.word	0x2000d320

00011a70 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   11a70:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   11a72:	4a02      	ldr	r2, [pc, #8]	; (11a7c <nrfx_ipc_receive_event_enable+0xc>)
   11a74:	4083      	lsls	r3, r0
   11a76:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   11a7a:	4770      	bx	lr
   11a7c:	4002a000 	.word	0x4002a000

00011a80 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   11a80:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
   11a82:	4a02      	ldr	r2, [pc, #8]	; (11a8c <nrfx_ipc_receive_event_disable+0xc>)
   11a84:	4083      	lsls	r3, r0
   11a86:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   11a8a:	4770      	bx	lr
   11a8c:	4002a000 	.word	0x4002a000

00011a90 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   11a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   11a92:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11a94:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   11a96:	4b0b      	ldr	r3, [pc, #44]	; (11ac4 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   11a98:	4d0b      	ldr	r5, [pc, #44]	; (11ac8 <nrfx_ipc_irq_handler+0x38>)
   11a9a:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   11a9e:	b904      	cbnz	r4, 11aa2 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   11aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   11aa2:	fa94 f0a4 	rbit	r0, r4
   11aa6:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   11aaa:	fa06 f300 	lsl.w	r3, r6, r0
   11aae:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11ab2:	4b06      	ldr	r3, [pc, #24]	; (11acc <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   11ab4:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11ab6:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   11ab8:	682b      	ldr	r3, [r5, #0]
   11aba:	2b00      	cmp	r3, #0
   11abc:	d0ef      	beq.n	11a9e <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   11abe:	68a9      	ldr	r1, [r5, #8]
   11ac0:	4798      	blx	r3
   11ac2:	e7ec      	b.n	11a9e <nrfx_ipc_irq_handler+0xe>
   11ac4:	4002a000 	.word	0x4002a000
   11ac8:	2000d320 	.word	0x2000d320
   11acc:	4002a100 	.word	0x4002a100

00011ad0 <rpc_handle_data_message>:
   11ad0:	b570      	push	{r4, r5, r6, lr}
   11ad2:	6803      	ldr	r3, [r0, #0]
   11ad4:	4604      	mov	r4, r0
   11ad6:	3b03      	subs	r3, #3
   11ad8:	b2db      	uxtb	r3, r3
   11ada:	2b04      	cmp	r3, #4
   11adc:	d803      	bhi.n	11ae6 <rpc_handle_data_message+0x16>
   11ade:	4a09      	ldr	r2, [pc, #36]	; (11b04 <rpc_handle_data_message+0x34>)
   11ae0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   11ae4:	b92d      	cbnz	r5, 11af2 <rpc_handle_data_message+0x22>
   11ae6:	68a0      	ldr	r0, [r4, #8]
   11ae8:	b108      	cbz	r0, 11aee <rpc_handle_data_message+0x1e>
   11aea:	f000 f825 	bl	11b38 <rpc_transport_msg_data_rx_free>
   11aee:	2000      	movs	r0, #0
   11af0:	bd70      	pop	{r4, r5, r6, pc}
   11af2:	f007 fb11 	bl	19118 <rpc_client_msg_from_rpc_msg_get>
   11af6:	6821      	ldr	r1, [r4, #0]
   11af8:	462b      	mov	r3, r5
   11afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11afe:	0c09      	lsrs	r1, r1, #16
   11b00:	4718      	bx	r3
   11b02:	bf00      	nop
   11b04:	0001bab4 	.word	0x0001bab4

00011b08 <rpc_transport_init>:
   11b08:	4b01      	ldr	r3, [pc, #4]	; (11b10 <rpc_transport_init+0x8>)
   11b0a:	699b      	ldr	r3, [r3, #24]
   11b0c:	4718      	bx	r3
   11b0e:	bf00      	nop
   11b10:	2000c684 	.word	0x2000c684

00011b14 <rpc_transport_msg_alloc>:
   11b14:	4b01      	ldr	r3, [pc, #4]	; (11b1c <rpc_transport_msg_alloc+0x8>)
   11b16:	681b      	ldr	r3, [r3, #0]
   11b18:	4718      	bx	r3
   11b1a:	bf00      	nop
   11b1c:	2000c684 	.word	0x2000c684

00011b20 <rpc_transport_msg_data_tx_size>:
   11b20:	4b01      	ldr	r3, [pc, #4]	; (11b28 <rpc_transport_msg_data_tx_size+0x8>)
   11b22:	685b      	ldr	r3, [r3, #4]
   11b24:	4718      	bx	r3
   11b26:	bf00      	nop
   11b28:	2000c684 	.word	0x2000c684

00011b2c <rpc_transport_msg_rx_free>:
   11b2c:	4b01      	ldr	r3, [pc, #4]	; (11b34 <rpc_transport_msg_rx_free+0x8>)
   11b2e:	68db      	ldr	r3, [r3, #12]
   11b30:	4718      	bx	r3
   11b32:	bf00      	nop
   11b34:	2000c684 	.word	0x2000c684

00011b38 <rpc_transport_msg_data_rx_free>:
   11b38:	4b01      	ldr	r3, [pc, #4]	; (11b40 <rpc_transport_msg_data_rx_free+0x8>)
   11b3a:	695b      	ldr	r3, [r3, #20]
   11b3c:	4718      	bx	r3
   11b3e:	bf00      	nop
   11b40:	2000c684 	.word	0x2000c684

00011b44 <rpc_transport_msg_send>:
   11b44:	4b01      	ldr	r3, [pc, #4]	; (11b4c <rpc_transport_msg_send+0x8>)
   11b46:	689b      	ldr	r3, [r3, #8]
   11b48:	4718      	bx	r3
   11b4a:	bf00      	nop
   11b4c:	2000c684 	.word	0x2000c684

00011b50 <rpc_transport_request_shutdown>:
   11b50:	4b01      	ldr	r3, [pc, #4]	; (11b58 <rpc_transport_request_shutdown+0x8>)
   11b52:	69db      	ldr	r3, [r3, #28]
   11b54:	4718      	bx	r3
   11b56:	bf00      	nop
   11b58:	2000c684 	.word	0x2000c684

00011b5c <rpc_transport_shutdown>:
   11b5c:	4b01      	ldr	r3, [pc, #4]	; (11b64 <rpc_transport_shutdown+0x8>)
   11b5e:	6a1b      	ldr	r3, [r3, #32]
   11b60:	4718      	bx	r3
   11b62:	bf00      	nop
   11b64:	2000c684 	.word	0x2000c684

00011b68 <rpc_transport_data_rx_suspend>:
   11b68:	4b01      	ldr	r3, [pc, #4]	; (11b70 <rpc_transport_data_rx_suspend+0x8>)
   11b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11b6c:	4718      	bx	r3
   11b6e:	bf00      	nop
   11b70:	2000c684 	.word	0x2000c684

00011b74 <rpc_transport_data_rx_resume>:
   11b74:	4b01      	ldr	r3, [pc, #4]	; (11b7c <rpc_transport_data_rx_resume+0x8>)
   11b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11b78:	4718      	bx	r3
   11b7a:	bf00      	nop
   11b7c:	2000c684 	.word	0x2000c684

00011b80 <rpc_transport_ipc_msg_data_tx_size>:
   11b80:	4b01      	ldr	r3, [pc, #4]	; (11b88 <rpc_transport_ipc_msg_data_tx_size+0x8>)
   11b82:	681b      	ldr	r3, [r3, #0]
   11b84:	68d8      	ldr	r0, [r3, #12]
   11b86:	4770      	bx	lr
   11b88:	2000d32c 	.word	0x2000d32c

00011b8c <rpc_transport_ipc_msg_rx_free>:
   11b8c:	2300      	movs	r3, #0
   11b8e:	b530      	push	{r4, r5, lr}
   11b90:	4910      	ldr	r1, [pc, #64]	; (11bd4 <rpc_transport_ipc_msg_rx_free+0x48>)
   11b92:	680a      	ldr	r2, [r1, #0]
   11b94:	6814      	ldr	r4, [r2, #0]
   11b96:	42a3      	cmp	r3, r4
   11b98:	d10b      	bne.n	11bb2 <rpc_transport_ipc_msg_rx_free+0x26>
   11b9a:	2300      	movs	r3, #0
   11b9c:	684a      	ldr	r2, [r1, #4]
   11b9e:	6811      	ldr	r1, [r2, #0]
   11ba0:	428b      	cmp	r3, r1
   11ba2:	d015      	beq.n	11bd0 <rpc_transport_ipc_msg_rx_free+0x44>
   11ba4:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   11ba8:	68a4      	ldr	r4, [r4, #8]
   11baa:	42a0      	cmp	r0, r4
   11bac:	d008      	beq.n	11bc0 <rpc_transport_ipc_msg_rx_free+0x34>
   11bae:	3301      	adds	r3, #1
   11bb0:	e7f6      	b.n	11ba0 <rpc_transport_ipc_msg_rx_free+0x14>
   11bb2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   11bb6:	68ad      	ldr	r5, [r5, #8]
   11bb8:	42a8      	cmp	r0, r5
   11bba:	d001      	beq.n	11bc0 <rpc_transport_ipc_msg_rx_free+0x34>
   11bbc:	3301      	adds	r3, #1
   11bbe:	e7ea      	b.n	11b96 <rpc_transport_ipc_msg_rx_free+0xa>
   11bc0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   11bc4:	6853      	ldr	r3, [r2, #4]
   11bc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   11bca:	f043 0303 	orr.w	r3, r3, #3
   11bce:	6053      	str	r3, [r2, #4]
   11bd0:	bd30      	pop	{r4, r5, pc}
   11bd2:	bf00      	nop
   11bd4:	2000d34c 	.word	0x2000d34c

00011bd8 <rpc_transport_ipc_msg_tx_free>:
   11bd8:	2200      	movs	r2, #0
   11bda:	b530      	push	{r4, r5, lr}
   11bdc:	4b0b      	ldr	r3, [pc, #44]	; (11c0c <rpc_transport_ipc_msg_tx_free+0x34>)
   11bde:	6819      	ldr	r1, [r3, #0]
   11be0:	680c      	ldr	r4, [r1, #0]
   11be2:	4294      	cmp	r4, r2
   11be4:	d00f      	beq.n	11c06 <rpc_transport_ipc_msg_tx_free+0x2e>
   11be6:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   11bea:	689d      	ldr	r5, [r3, #8]
   11bec:	42a8      	cmp	r0, r5
   11bee:	d10b      	bne.n	11c08 <rpc_transport_ipc_msg_tx_free+0x30>
   11bf0:	f04f 0203 	mov.w	r2, #3
   11bf4:	3304      	adds	r3, #4
   11bf6:	e8d3 1fcf 	ldaexb	r1, [r3]
   11bfa:	2900      	cmp	r1, #0
   11bfc:	d103      	bne.n	11c06 <rpc_transport_ipc_msg_tx_free+0x2e>
   11bfe:	e8c3 2fc0 	stlexb	r0, r2, [r3]
   11c02:	2800      	cmp	r0, #0
   11c04:	d1f7      	bne.n	11bf6 <rpc_transport_ipc_msg_tx_free+0x1e>
   11c06:	bd30      	pop	{r4, r5, pc}
   11c08:	3201      	adds	r2, #1
   11c0a:	e7ea      	b.n	11be2 <rpc_transport_ipc_msg_tx_free+0xa>
   11c0c:	2000d344 	.word	0x2000d344

00011c10 <handle_modem_rpc_msg>:
   11c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c14:	2500      	movs	r5, #0
   11c16:	4606      	mov	r6, r0
   11c18:	460f      	mov	r7, r1
   11c1a:	4628      	mov	r0, r5
   11c1c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 11c84 <handle_modem_rpc_msg+0x74>
   11c20:	6833      	ldr	r3, [r6, #0]
   11c22:	42ab      	cmp	r3, r5
   11c24:	d801      	bhi.n	11c2a <handle_modem_rpc_msg+0x1a>
   11c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11c2a:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   11c2e:	6863      	ldr	r3, [r4, #4]
   11c30:	b2db      	uxtb	r3, r3
   11c32:	2b01      	cmp	r3, #1
   11c34:	d117      	bne.n	11c66 <handle_modem_rpc_msg+0x56>
   11c36:	6862      	ldr	r2, [r4, #4]
   11c38:	f8b8 3000 	ldrh.w	r3, [r8]
   11c3c:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   11c40:	d111      	bne.n	11c66 <handle_modem_rpc_msg+0x56>
   11c42:	2f02      	cmp	r7, #2
   11c44:	68a0      	ldr	r0, [r4, #8]
   11c46:	d110      	bne.n	11c6a <handle_modem_rpc_msg+0x5a>
   11c48:	f7ff ff42 	bl	11ad0 <rpc_handle_data_message>
   11c4c:	b990      	cbnz	r0, 11c74 <handle_modem_rpc_msg+0x64>
   11c4e:	6863      	ldr	r3, [r4, #4]
   11c50:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   11c54:	f043 0303 	orr.w	r3, r3, #3
   11c58:	6063      	str	r3, [r4, #4]
   11c5a:	2001      	movs	r0, #1
   11c5c:	f8b8 3000 	ldrh.w	r3, [r8]
   11c60:	3301      	adds	r3, #1
   11c62:	f8a8 3000 	strh.w	r3, [r8]
   11c66:	3501      	adds	r5, #1
   11c68:	e7da      	b.n	11c20 <handle_modem_rpc_msg+0x10>
   11c6a:	6801      	ldr	r1, [r0, #0]
   11c6c:	0c09      	lsrs	r1, r1, #16
   11c6e:	f007 f9f2 	bl	19056 <rpc_handle_ctrl_message>
   11c72:	e7eb      	b.n	11c4c <handle_modem_rpc_msg+0x3c>
   11c74:	2801      	cmp	r0, #1
   11c76:	d1f0      	bne.n	11c5a <handle_modem_rpc_msg+0x4a>
   11c78:	6863      	ldr	r3, [r4, #4]
   11c7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   11c7e:	f043 0302 	orr.w	r3, r3, #2
   11c82:	e7e9      	b.n	11c58 <handle_modem_rpc_msg+0x48>
   11c84:	2000d738 	.word	0x2000d738

00011c88 <rpc_message_handler>:
   11c88:	b538      	push	{r3, r4, r5, lr}
   11c8a:	4d07      	ldr	r5, [pc, #28]	; (11ca8 <rpc_message_handler+0x20>)
   11c8c:	2101      	movs	r1, #1
   11c8e:	6828      	ldr	r0, [r5, #0]
   11c90:	f7ff ffbe 	bl	11c10 <handle_modem_rpc_msg>
   11c94:	2102      	movs	r1, #2
   11c96:	4604      	mov	r4, r0
   11c98:	6868      	ldr	r0, [r5, #4]
   11c9a:	f7ff ffb9 	bl	11c10 <handle_modem_rpc_msg>
   11c9e:	2800      	cmp	r0, #0
   11ca0:	d1f4      	bne.n	11c8c <rpc_message_handler+0x4>
   11ca2:	2c00      	cmp	r4, #0
   11ca4:	d1f2      	bne.n	11c8c <rpc_message_handler+0x4>
   11ca6:	bd38      	pop	{r3, r4, r5, pc}
   11ca8:	2000d34c 	.word	0x2000d34c

00011cac <ipc_irq_handler>:
   11cac:	b570      	push	{r4, r5, r6, lr}
   11cae:	2807      	cmp	r0, #7
   11cb0:	d868      	bhi.n	11d84 <ipc_irq_handler+0xd8>
   11cb2:	e8df f000 	tbb	[pc, r0]
   11cb6:	670b      	.short	0x670b
   11cb8:	674b674f 	.word	0x674b674f
   11cbc:	0440      	.short	0x0440
   11cbe:	f002 f917 	bl	13ef0 <ipc_trace_handler>
   11cc2:	2003      	movs	r0, #3
   11cc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11cc8:	f7fc baec 	b.w	e2a4 <nrf_modem_os_event_notify>
   11ccc:	2003      	movs	r0, #3
   11cce:	4b2e      	ldr	r3, [pc, #184]	; (11d88 <ipc_irq_handler+0xdc>)
   11cd0:	f8d3 4614 	ldr.w	r4, [r3, #1556]	; 0x614
   11cd4:	f8d3 6618 	ldr.w	r6, [r3, #1560]	; 0x618
   11cd8:	4b2c      	ldr	r3, [pc, #176]	; (11d8c <ipc_irq_handler+0xe0>)
   11cda:	781d      	ldrb	r5, [r3, #0]
   11cdc:	7018      	strb	r0, [r3, #0]
   11cde:	f002 f8d5 	bl	13e8c <nrf_modem_state_set>
   11ce2:	4b2b      	ldr	r3, [pc, #172]	; (11d90 <ipc_irq_handler+0xe4>)
   11ce4:	b2ed      	uxtb	r5, r5
   11ce6:	6818      	ldr	r0, [r3, #0]
   11ce8:	f006 fda4 	bl	18834 <nrf_modem_os_sem_give>
   11cec:	2d01      	cmp	r5, #1
   11cee:	d11c      	bne.n	11d2a <ipc_irq_handler+0x7e>
   11cf0:	4b28      	ldr	r3, [pc, #160]	; (11d94 <ipc_irq_handler+0xe8>)
   11cf2:	429c      	cmp	r4, r3
   11cf4:	d010      	beq.n	11d18 <ipc_irq_handler+0x6c>
   11cf6:	d809      	bhi.n	11d0c <ipc_irq_handler+0x60>
   11cf8:	3b02      	subs	r3, #2
   11cfa:	429c      	cmp	r4, r3
   11cfc:	d00f      	beq.n	11d1e <ipc_irq_handler+0x72>
   11cfe:	3301      	adds	r3, #1
   11d00:	429c      	cmp	r4, r3
   11d02:	d00f      	beq.n	11d24 <ipc_irq_handler+0x78>
   11d04:	4b24      	ldr	r3, [pc, #144]	; (11d98 <ipc_irq_handler+0xec>)
   11d06:	601c      	str	r4, [r3, #0]
   11d08:	2000      	movs	r0, #0
   11d0a:	e7db      	b.n	11cc4 <ipc_irq_handler+0x18>
   11d0c:	4b23      	ldr	r3, [pc, #140]	; (11d9c <ipc_irq_handler+0xf0>)
   11d0e:	429c      	cmp	r4, r3
   11d10:	d1f8      	bne.n	11d04 <ipc_irq_handler+0x58>
   11d12:	f06f 040c 	mvn.w	r4, #12
   11d16:	e7f5      	b.n	11d04 <ipc_irq_handler+0x58>
   11d18:	f06f 040b 	mvn.w	r4, #11
   11d1c:	e7f2      	b.n	11d04 <ipc_irq_handler+0x58>
   11d1e:	f06f 0415 	mvn.w	r4, #21
   11d22:	e7ef      	b.n	11d04 <ipc_irq_handler+0x58>
   11d24:	f06f 0485 	mvn.w	r4, #133	; 0x85
   11d28:	e7ec      	b.n	11d04 <ipc_irq_handler+0x58>
   11d2a:	4631      	mov	r1, r6
   11d2c:	f3c4 000b 	ubfx	r0, r4, #0, #12
   11d30:	f002 f8a0 	bl	13e74 <nrf_modem_fault_handler_internal>
   11d34:	e7e8      	b.n	11d08 <ipc_irq_handler+0x5c>
   11d36:	2202      	movs	r2, #2
   11d38:	4b14      	ldr	r3, [pc, #80]	; (11d8c <ipc_irq_handler+0xe0>)
   11d3a:	2000      	movs	r0, #0
   11d3c:	701a      	strb	r2, [r3, #0]
   11d3e:	f002 f8a5 	bl	13e8c <nrf_modem_state_set>
   11d42:	4b13      	ldr	r3, [pc, #76]	; (11d90 <ipc_irq_handler+0xe4>)
   11d44:	6818      	ldr	r0, [r3, #0]
   11d46:	f006 fd75 	bl	18834 <nrf_modem_os_sem_give>
   11d4a:	e7dd      	b.n	11d08 <ipc_irq_handler+0x5c>
   11d4c:	f7ff ff9c 	bl	11c88 <rpc_message_handler>
   11d50:	2002      	movs	r0, #2
   11d52:	e7b7      	b.n	11cc4 <ipc_irq_handler+0x18>
   11d54:	4b0d      	ldr	r3, [pc, #52]	; (11d8c <ipc_irq_handler+0xe0>)
   11d56:	781a      	ldrb	r2, [r3, #0]
   11d58:	2a01      	cmp	r2, #1
   11d5a:	b2d0      	uxtb	r0, r2
   11d5c:	d10e      	bne.n	11d7c <ipc_irq_handler+0xd0>
   11d5e:	4a10      	ldr	r2, [pc, #64]	; (11da0 <ipc_irq_handler+0xf4>)
   11d60:	6811      	ldr	r1, [r2, #0]
   11d62:	4a10      	ldr	r2, [pc, #64]	; (11da4 <ipc_irq_handler+0xf8>)
   11d64:	688c      	ldr	r4, [r1, #8]
   11d66:	6054      	str	r4, [r2, #4]
   11d68:	6849      	ldr	r1, [r1, #4]
   11d6a:	6011      	str	r1, [r2, #0]
   11d6c:	2200      	movs	r2, #0
   11d6e:	701a      	strb	r2, [r3, #0]
   11d70:	f002 f88c 	bl	13e8c <nrf_modem_state_set>
   11d74:	4b06      	ldr	r3, [pc, #24]	; (11d90 <ipc_irq_handler+0xe4>)
   11d76:	6818      	ldr	r0, [r3, #0]
   11d78:	f006 fd5c 	bl	18834 <nrf_modem_os_sem_give>
   11d7c:	f7ff ff84 	bl	11c88 <rpc_message_handler>
   11d80:	2001      	movs	r0, #1
   11d82:	e79f      	b.n	11cc4 <ipc_irq_handler+0x18>
   11d84:	bd70      	pop	{r4, r5, r6, pc}
   11d86:	bf00      	nop
   11d88:	4002a000 	.word	0x4002a000
   11d8c:	2000eca2 	.word	0x2000eca2
   11d90:	2000d334 	.word	0x2000d334
   11d94:	00010022 	.word	0x00010022
   11d98:	2000d348 	.word	0x2000d348
   11d9c:	00013032 	.word	0x00013032
   11da0:	2000d330 	.word	0x2000d330
   11da4:	2000d34c 	.word	0x2000d34c

00011da8 <rpc_transport_ipc_data_msg_send>:
   11da8:	b570      	push	{r4, r5, r6, lr}
   11daa:	4b16      	ldr	r3, [pc, #88]	; (11e04 <rpc_transport_ipc_data_msg_send+0x5c>)
   11dac:	6842      	ldr	r2, [r0, #4]
   11dae:	681b      	ldr	r3, [r3, #0]
   11db0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   11db4:	f042 0202 	orr.w	r2, r2, #2
   11db8:	1ac3      	subs	r3, r0, r3
   11dba:	6042      	str	r2, [r0, #4]
   11dbc:	4812      	ldr	r0, [pc, #72]	; (11e08 <rpc_transport_ipc_data_msg_send+0x60>)
   11dbe:	4a13      	ldr	r2, [pc, #76]	; (11e0c <rpc_transport_ipc_data_msg_send+0x64>)
   11dc0:	6801      	ldr	r1, [r0, #0]
   11dc2:	f3c3 1389 	ubfx	r3, r3, #6, #10
   11dc6:	e8d2 4fdf 	ldaexh	r4, [r2]
   11dca:	1c65      	adds	r5, r4, #1
   11dcc:	e8c2 5fd6 	stlexh	r6, r5, [r2]
   11dd0:	2e00      	cmp	r6, #0
   11dd2:	d1f8      	bne.n	11dc6 <rpc_transport_ipc_data_msg_send+0x1e>
   11dd4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   11dd8:	684a      	ldr	r2, [r1, #4]
   11dda:	b292      	uxth	r2, r2
   11ddc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   11de0:	604a      	str	r2, [r1, #4]
   11de2:	6802      	ldr	r2, [r0, #0]
   11de4:	2003      	movs	r0, #3
   11de6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   11dea:	6853      	ldr	r3, [r2, #4]
   11dec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   11df0:	f043 0301 	orr.w	r3, r3, #1
   11df4:	6053      	str	r3, [r2, #4]
   11df6:	f006 fcfb 	bl	187f0 <nrf_modem_os_busywait>
   11dfa:	2201      	movs	r2, #1
   11dfc:	4b04      	ldr	r3, [pc, #16]	; (11e10 <rpc_transport_ipc_data_msg_send+0x68>)
   11dfe:	60da      	str	r2, [r3, #12]
   11e00:	bd70      	pop	{r4, r5, r6, pc}
   11e02:	bf00      	nop
   11e04:	2000d33c 	.word	0x2000d33c
   11e08:	2000d344 	.word	0x2000d344
   11e0c:	2000d73a 	.word	0x2000d73a
   11e10:	4002a000 	.word	0x4002a000

00011e14 <rpc_transport_ipc_ctrl_msg_alloc>:
   11e14:	230a      	movs	r3, #10
   11e16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11e18:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   11e1c:	4e0c      	ldr	r6, [pc, #48]	; (11e50 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   11e1e:	4f0d      	ldr	r7, [pc, #52]	; (11e54 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
   11e20:	9301      	str	r3, [sp, #4]
   11e22:	6831      	ldr	r1, [r6, #0]
   11e24:	6838      	ldr	r0, [r7, #0]
   11e26:	f007 f952 	bl	190ce <rpc_transport_ipc_msg_alloc>
   11e2a:	4604      	mov	r4, r0
   11e2c:	b940      	cbnz	r0, 11e40 <rpc_transport_ipc_ctrl_msg_alloc+0x2c>
   11e2e:	f006 fcff 	bl	18830 <nrf_modem_os_is_in_isr>
   11e32:	b940      	cbnz	r0, 11e46 <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   11e34:	2001      	movs	r0, #1
   11e36:	a901      	add	r1, sp, #4
   11e38:	f7fc f956 	bl	e0e8 <nrf_modem_os_timedwait>
   11e3c:	306e      	adds	r0, #110	; 0x6e
   11e3e:	d1f0      	bne.n	11e22 <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   11e40:	4620      	mov	r0, r4
   11e42:	b003      	add	sp, #12
   11e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11e46:	9801      	ldr	r0, [sp, #4]
   11e48:	4368      	muls	r0, r5
   11e4a:	f006 fcd1 	bl	187f0 <nrf_modem_os_busywait>
   11e4e:	e7e8      	b.n	11e22 <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   11e50:	2000d338 	.word	0x2000d338
   11e54:	2000d340 	.word	0x2000d340

00011e58 <rpc_transport_ipc_data_msg_alloc>:
   11e58:	4b05      	ldr	r3, [pc, #20]	; (11e70 <rpc_transport_ipc_data_msg_alloc+0x18>)
   11e5a:	781b      	ldrb	r3, [r3, #0]
   11e5c:	b92b      	cbnz	r3, 11e6a <rpc_transport_ipc_data_msg_alloc+0x12>
   11e5e:	4b05      	ldr	r3, [pc, #20]	; (11e74 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   11e60:	6819      	ldr	r1, [r3, #0]
   11e62:	4b05      	ldr	r3, [pc, #20]	; (11e78 <rpc_transport_ipc_data_msg_alloc+0x20>)
   11e64:	6818      	ldr	r0, [r3, #0]
   11e66:	f007 b932 	b.w	190ce <rpc_transport_ipc_msg_alloc>
   11e6a:	2000      	movs	r0, #0
   11e6c:	4770      	bx	lr
   11e6e:	bf00      	nop
   11e70:	2000eca1 	.word	0x2000eca1
   11e74:	2000d33c 	.word	0x2000d33c
   11e78:	2000d344 	.word	0x2000d344

00011e7c <rpc_transport_ipc_init>:
   11e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e80:	b095      	sub	sp, #84	; 0x54
   11e82:	2238      	movs	r2, #56	; 0x38
   11e84:	2100      	movs	r1, #0
   11e86:	4606      	mov	r6, r0
   11e88:	a803      	add	r0, sp, #12
   11e8a:	f008 fc38 	bl	1a6fe <memset>
   11e8e:	2302      	movs	r3, #2
   11e90:	9304      	str	r3, [sp, #16]
   11e92:	2308      	movs	r3, #8
   11e94:	9306      	str	r3, [sp, #24]
   11e96:	2320      	movs	r3, #32
   11e98:	9308      	str	r3, [sp, #32]
   11e9a:	2304      	movs	r3, #4
   11e9c:	930d      	str	r3, [sp, #52]	; 0x34
   11e9e:	2310      	movs	r3, #16
   11ea0:	2540      	movs	r5, #64	; 0x40
   11ea2:	930f      	str	r3, [sp, #60]	; 0x3c
   11ea4:	2380      	movs	r3, #128	; 0x80
   11ea6:	2201      	movs	r2, #1
   11ea8:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
   11eac:	23d5      	movs	r3, #213	; 0xd5
   11eae:	2100      	movs	r1, #0
   11eb0:	4855      	ldr	r0, [pc, #340]	; (12008 <rpc_transport_ipc_init+0x18c>)
   11eb2:	920b      	str	r2, [sp, #44]	; 0x2c
   11eb4:	9313      	str	r3, [sp, #76]	; 0x4c
   11eb6:	f7fc f9d9 	bl	e26c <nrf_modem_os_sem_init>
   11eba:	4605      	mov	r5, r0
   11ebc:	2800      	cmp	r0, #0
   11ebe:	f040 80a0 	bne.w	12002 <rpc_transport_ipc_init+0x186>
   11ec2:	4602      	mov	r2, r0
   11ec4:	4951      	ldr	r1, [pc, #324]	; (1200c <rpc_transport_ipc_init+0x190>)
   11ec6:	7930      	ldrb	r0, [r6, #4]
   11ec8:	f7ff fd6c 	bl	119a4 <nrfx_ipc_init>
   11ecc:	a803      	add	r0, sp, #12
   11ece:	f7ff fd81 	bl	119d4 <nrfx_ipc_config_load>
   11ed2:	6834      	ldr	r4, [r6, #0]
   11ed4:	6862      	ldr	r2, [r4, #4]
   11ed6:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
   11eda:	f040 808a 	bne.w	11ff2 <rpc_transport_ipc_init+0x176>
   11ede:	6961      	ldr	r1, [r4, #20]
   11ee0:	68e3      	ldr	r3, [r4, #12]
   11ee2:	440b      	add	r3, r1
   11ee4:	69e1      	ldr	r1, [r4, #28]
   11ee6:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
   11eea:	440b      	add	r3, r1
   11eec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   11ef0:	d87f      	bhi.n	11ff2 <rpc_transport_ipc_init+0x176>
   11ef2:	6820      	ldr	r0, [r4, #0]
   11ef4:	4629      	mov	r1, r5
   11ef6:	f008 fc02 	bl	1a6fe <memset>
   11efa:	6833      	ldr	r3, [r6, #0]
   11efc:	681c      	ldr	r4, [r3, #0]
   11efe:	f8d3 901c 	ldr.w	r9, [r3, #28]
   11f02:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
   11f06:	9200      	str	r2, [sp, #0]
   11f08:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   11f0c:	9201      	str	r2, [sp, #4]
   11f0e:	f104 0760 	add.w	r7, r4, #96	; 0x60
   11f12:	4a3f      	ldr	r2, [pc, #252]	; (12010 <rpc_transport_ipc_init+0x194>)
   11f14:	f104 08a4 	add.w	r8, r4, #164	; 0xa4
   11f18:	f104 0b20 	add.w	fp, r4, #32
   11f1c:	f1b9 0f00 	cmp.w	r9, #0
   11f20:	d15a      	bne.n	11fd8 <rpc_transport_ipc_init+0x15c>
   11f22:	f8c2 b000 	str.w	fp, [r2]
   11f26:	2500      	movs	r5, #0
   11f28:	f04f 0a01 	mov.w	sl, #1
   11f2c:	7025      	strb	r5, [r4, #0]
   11f2e:	7065      	strb	r5, [r4, #1]
   11f30:	f884 a002 	strb.w	sl, [r4, #2]
   11f34:	70e5      	strb	r5, [r4, #3]
   11f36:	6833      	ldr	r3, [r6, #0]
   11f38:	4640      	mov	r0, r8
   11f3a:	691b      	ldr	r3, [r3, #16]
   11f3c:	6063      	str	r3, [r4, #4]
   11f3e:	6833      	ldr	r3, [r6, #0]
   11f40:	695b      	ldr	r3, [r3, #20]
   11f42:	f8c4 b014 	str.w	fp, [r4, #20]
   11f46:	60a3      	str	r3, [r4, #8]
   11f48:	4b32      	ldr	r3, [pc, #200]	; (12014 <rpc_transport_ipc_init+0x198>)
   11f4a:	f8c4 9018 	str.w	r9, [r4, #24]
   11f4e:	f8c3 8000 	str.w	r8, [r3]
   11f52:	4b31      	ldr	r3, [pc, #196]	; (12018 <rpc_transport_ipc_init+0x19c>)
   11f54:	60e7      	str	r7, [r4, #12]
   11f56:	601f      	str	r7, [r3, #0]
   11f58:	2308      	movs	r3, #8
   11f5a:	f8c4 8010 	str.w	r8, [r4, #16]
   11f5e:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
   11f62:	f888 5001 	strb.w	r5, [r8, #1]
   11f66:	f888 5002 	strb.w	r5, [r8, #2]
   11f6a:	f888 5003 	strb.w	r5, [r8, #3]
   11f6e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
   11f72:	707d      	strb	r5, [r7, #1]
   11f74:	70bd      	strb	r5, [r7, #2]
   11f76:	70fd      	strb	r5, [r7, #3]
   11f78:	f007 f891 	bl	1909e <rpc_list_preambles_init>
   11f7c:	4638      	mov	r0, r7
   11f7e:	f007 f88e 	bl	1909e <rpc_list_preambles_init>
   11f82:	9a01      	ldr	r2, [sp, #4]
   11f84:	4b25      	ldr	r3, [pc, #148]	; (1201c <rpc_transport_ipc_init+0x1a0>)
   11f86:	6831      	ldr	r1, [r6, #0]
   11f88:	601a      	str	r2, [r3, #0]
   11f8a:	9a00      	ldr	r2, [sp, #0]
   11f8c:	4b24      	ldr	r3, [pc, #144]	; (12020 <rpc_transport_ipc_init+0x1a4>)
   11f8e:	601a      	str	r2, [r3, #0]
   11f90:	4b24      	ldr	r3, [pc, #144]	; (12024 <rpc_transport_ipc_init+0x1a8>)
   11f92:	6019      	str	r1, [r3, #0]
   11f94:	4b24      	ldr	r3, [pc, #144]	; (12028 <rpc_transport_ipc_init+0x1ac>)
   11f96:	4925      	ldr	r1, [pc, #148]	; (1202c <rpc_transport_ipc_init+0x1b0>)
   11f98:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
   11f9c:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
   11fa0:	4b23      	ldr	r3, [pc, #140]	; (12030 <rpc_transport_ipc_init+0x1b4>)
   11fa2:	4c24      	ldr	r4, [pc, #144]	; (12034 <rpc_transport_ipc_init+0x1b8>)
   11fa4:	801d      	strh	r5, [r3, #0]
   11fa6:	4b24      	ldr	r3, [pc, #144]	; (12038 <rpc_transport_ipc_init+0x1bc>)
   11fa8:	6025      	str	r5, [r4, #0]
   11faa:	801d      	strh	r5, [r3, #0]
   11fac:	4b23      	ldr	r3, [pc, #140]	; (1203c <rpc_transport_ipc_init+0x1c0>)
   11fae:	f883 a000 	strb.w	sl, [r3]
   11fb2:	4b23      	ldr	r3, [pc, #140]	; (12040 <rpc_transport_ipc_init+0x1c4>)
   11fb4:	9502      	str	r5, [sp, #8]
   11fb6:	611d      	str	r5, [r3, #16]
   11fb8:	691b      	ldr	r3, [r3, #16]
   11fba:	9302      	str	r3, [sp, #8]
   11fbc:	9b02      	ldr	r3, [sp, #8]
   11fbe:	4b12      	ldr	r3, [pc, #72]	; (12008 <rpc_transport_ipc_init+0x18c>)
   11fc0:	6818      	ldr	r0, [r3, #0]
   11fc2:	f006 fc39 	bl	18838 <nrf_modem_os_sem_take>
   11fc6:	b9c8      	cbnz	r0, 11ffc <rpc_transport_ipc_init+0x180>
   11fc8:	6824      	ldr	r4, [r4, #0]
   11fca:	b9a4      	cbnz	r4, 11ff6 <rpc_transport_ipc_init+0x17a>
   11fcc:	4b1d      	ldr	r3, [pc, #116]	; (12044 <rpc_transport_ipc_init+0x1c8>)
   11fce:	701c      	strb	r4, [r3, #0]
   11fd0:	4620      	mov	r0, r4
   11fd2:	b015      	add	sp, #84	; 0x54
   11fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fd8:	699b      	ldr	r3, [r3, #24]
   11fda:	f104 0940 	add.w	r9, r4, #64	; 0x40
   11fde:	6463      	str	r3, [r4, #68]	; 0x44
   11fe0:	6833      	ldr	r3, [r6, #0]
   11fe2:	4648      	mov	r0, r9
   11fe4:	69db      	ldr	r3, [r3, #28]
   11fe6:	f8c2 b000 	str.w	fp, [r2]
   11fea:	6423      	str	r3, [r4, #64]	; 0x40
   11fec:	f001 ff64 	bl	13eb8 <ipc_trace_init>
   11ff0:	e799      	b.n	11f26 <rpc_transport_ipc_init+0xaa>
   11ff2:	f06f 0415 	mvn.w	r4, #21
   11ff6:	f7ff fd0d 	bl	11a14 <nrfx_ipc_uninit>
   11ffa:	e7e9      	b.n	11fd0 <rpc_transport_ipc_init+0x154>
   11ffc:	f06f 0473 	mvn.w	r4, #115	; 0x73
   12000:	e7f9      	b.n	11ff6 <rpc_transport_ipc_init+0x17a>
   12002:	f06f 042d 	mvn.w	r4, #45	; 0x2d
   12006:	e7e3      	b.n	11fd0 <rpc_transport_ipc_init+0x154>
   12008:	2000d334 	.word	0x2000d334
   1200c:	00011cad 	.word	0x00011cad
   12010:	2000d330 	.word	0x2000d330
   12014:	2000d344 	.word	0x2000d344
   12018:	2000d340 	.word	0x2000d340
   1201c:	2000d33c 	.word	0x2000d33c
   12020:	2000d338 	.word	0x2000d338
   12024:	2000d32c 	.word	0x2000d32c
   12028:	4002a000 	.word	0x4002a000
   1202c:	000249f0 	.word	0x000249f0
   12030:	2000d73a 	.word	0x2000d73a
   12034:	2000d348 	.word	0x2000d348
   12038:	2000d738 	.word	0x2000d738
   1203c:	2000eca2 	.word	0x2000eca2
   12040:	40005600 	.word	0x40005600
   12044:	2000eca1 	.word	0x2000eca1

00012048 <rpc_transport_ipc_ctrl_msg_send>:
   12048:	b570      	push	{r4, r5, r6, lr}
   1204a:	4b16      	ldr	r3, [pc, #88]	; (120a4 <rpc_transport_ipc_ctrl_msg_send+0x5c>)
   1204c:	6842      	ldr	r2, [r0, #4]
   1204e:	681b      	ldr	r3, [r3, #0]
   12050:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   12054:	f042 0201 	orr.w	r2, r2, #1
   12058:	1ac3      	subs	r3, r0, r3
   1205a:	6042      	str	r2, [r0, #4]
   1205c:	4812      	ldr	r0, [pc, #72]	; (120a8 <rpc_transport_ipc_ctrl_msg_send+0x60>)
   1205e:	4a13      	ldr	r2, [pc, #76]	; (120ac <rpc_transport_ipc_ctrl_msg_send+0x64>)
   12060:	6801      	ldr	r1, [r0, #0]
   12062:	f3c3 1389 	ubfx	r3, r3, #6, #10
   12066:	e8d2 4fdf 	ldaexh	r4, [r2]
   1206a:	1c65      	adds	r5, r4, #1
   1206c:	e8c2 5fd6 	stlexh	r6, r5, [r2]
   12070:	2e00      	cmp	r6, #0
   12072:	d1f8      	bne.n	12066 <rpc_transport_ipc_ctrl_msg_send+0x1e>
   12074:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   12078:	684a      	ldr	r2, [r1, #4]
   1207a:	b292      	uxth	r2, r2
   1207c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   12080:	604a      	str	r2, [r1, #4]
   12082:	6802      	ldr	r2, [r0, #0]
   12084:	2003      	movs	r0, #3
   12086:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1208a:	6853      	ldr	r3, [r2, #4]
   1208c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12090:	f043 0301 	orr.w	r3, r3, #1
   12094:	6053      	str	r3, [r2, #4]
   12096:	f006 fbab 	bl	187f0 <nrf_modem_os_busywait>
   1209a:	2201      	movs	r2, #1
   1209c:	4b04      	ldr	r3, [pc, #16]	; (120b0 <rpc_transport_ipc_ctrl_msg_send+0x68>)
   1209e:	605a      	str	r2, [r3, #4]
   120a0:	bd70      	pop	{r4, r5, r6, pc}
   120a2:	bf00      	nop
   120a4:	2000d338 	.word	0x2000d338
   120a8:	2000d340 	.word	0x2000d340
   120ac:	2000d73a 	.word	0x2000d73a
   120b0:	4002a000 	.word	0x4002a000

000120b4 <rpc_transport_ipc_request_shutdown>:
   120b4:	b510      	push	{r4, lr}
   120b6:	f7ff fead 	bl	11e14 <rpc_transport_ipc_ctrl_msg_alloc>
   120ba:	2401      	movs	r4, #1
   120bc:	2200      	movs	r2, #0
   120be:	2103      	movs	r1, #3
   120c0:	7004      	strb	r4, [r0, #0]
   120c2:	7081      	strb	r1, [r0, #2]
   120c4:	7042      	strb	r2, [r0, #1]
   120c6:	70c2      	strb	r2, [r0, #3]
   120c8:	f7ff ffbe 	bl	12048 <rpc_transport_ipc_ctrl_msg_send>
   120cc:	4b05      	ldr	r3, [pc, #20]	; (120e4 <rpc_transport_ipc_request_shutdown+0x30>)
   120ce:	701c      	strb	r4, [r3, #0]
   120d0:	f006 fff8 	bl	190c4 <rpc_transport_ipc_data_rx_suspend>
   120d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   120d8:	4b03      	ldr	r3, [pc, #12]	; (120e8 <rpc_transport_ipc_request_shutdown+0x34>)
   120da:	f247 5130 	movw	r1, #30000	; 0x7530
   120de:	6818      	ldr	r0, [r3, #0]
   120e0:	f006 bbaa 	b.w	18838 <nrf_modem_os_sem_take>
   120e4:	2000eca1 	.word	0x2000eca1
   120e8:	2000d334 	.word	0x2000d334

000120ec <rpc_transport_ipc_msg_data_rx_free>:
   120ec:	b510      	push	{r4, lr}
   120ee:	4b0a      	ldr	r3, [pc, #40]	; (12118 <rpc_transport_ipc_msg_data_rx_free+0x2c>)
   120f0:	4604      	mov	r4, r0
   120f2:	781b      	ldrb	r3, [r3, #0]
   120f4:	2b03      	cmp	r3, #3
   120f6:	d00e      	beq.n	12116 <rpc_transport_ipc_msg_data_rx_free+0x2a>
   120f8:	f7ff fe8c 	bl	11e14 <rpc_transport_ipc_ctrl_msg_alloc>
   120fc:	b158      	cbz	r0, 12116 <rpc_transport_ipc_msg_data_rx_free+0x2a>
   120fe:	2101      	movs	r1, #1
   12100:	2200      	movs	r2, #0
   12102:	7001      	strb	r1, [r0, #0]
   12104:	2102      	movs	r1, #2
   12106:	6084      	str	r4, [r0, #8]
   12108:	7042      	strb	r2, [r0, #1]
   1210a:	7081      	strb	r1, [r0, #2]
   1210c:	70c2      	strb	r2, [r0, #3]
   1210e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12112:	f7ff bf99 	b.w	12048 <rpc_transport_ipc_ctrl_msg_send>
   12116:	bd10      	pop	{r4, pc}
   12118:	2000eca2 	.word	0x2000eca2

0001211c <at_cmd_send>:
   1211c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12120:	4605      	mov	r5, r0
   12122:	2000      	movs	r0, #0
   12124:	4617      	mov	r7, r2
   12126:	4688      	mov	r8, r1
   12128:	461e      	mov	r6, r3
   1212a:	f006 fff7 	bl	1911c <rpc_client_msg_alloc>
   1212e:	4602      	mov	r2, r0
   12130:	b940      	cbnz	r0, 12144 <at_cmd_send+0x28>
   12132:	b115      	cbz	r5, 1213a <at_cmd_send+0x1e>
   12134:	4628      	mov	r0, r5
   12136:	f007 f81d 	bl	19174 <rpc_client_msg_data_tx_free>
   1213a:	f06f 000b 	mvn.w	r0, #11
   1213e:	b002      	add	sp, #8
   12140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12144:	f06f 0358 	mvn.w	r3, #88	; 0x58
   12148:	2400      	movs	r4, #0
   1214a:	7303      	strb	r3, [r0, #12]
   1214c:	2304      	movs	r3, #4
   1214e:	6005      	str	r5, [r0, #0]
   12150:	4d0e      	ldr	r5, [pc, #56]	; (1218c <at_cmd_send+0x70>)
   12152:	7203      	strb	r3, [r0, #8]
   12154:	7344      	strb	r4, [r0, #13]
   12156:	7384      	strb	r4, [r0, #14]
   12158:	73c4      	strb	r4, [r0, #15]
   1215a:	7244      	strb	r4, [r0, #9]
   1215c:	7284      	strb	r4, [r0, #10]
   1215e:	72c4      	strb	r4, [r0, #11]
   12160:	f8c0 8004 	str.w	r8, [r0, #4]
   12164:	4639      	mov	r1, r7
   12166:	2003      	movs	r0, #3
   12168:	702c      	strb	r4, [r5, #0]
   1216a:	f006 fff3 	bl	19154 <rpc_client_msg_send>
   1216e:	f04f 33ff 	mov.w	r3, #4294967295
   12172:	9301      	str	r3, [sp, #4]
   12174:	782b      	ldrb	r3, [r5, #0]
   12176:	42b3      	cmp	r3, r6
   12178:	d101      	bne.n	1217e <at_cmd_send+0x62>
   1217a:	2000      	movs	r0, #0
   1217c:	e7df      	b.n	1213e <at_cmd_send+0x22>
   1217e:	2002      	movs	r0, #2
   12180:	a901      	add	r1, sp, #4
   12182:	f7fb ffb1 	bl	e0e8 <nrf_modem_os_timedwait>
   12186:	2800      	cmp	r0, #0
   12188:	d0f4      	beq.n	12174 <at_cmd_send+0x58>
   1218a:	e7d8      	b.n	1213e <at_cmd_send+0x22>
   1218c:	2000eca3 	.word	0x2000eca3

00012190 <at_response_match>:
   12190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12192:	4605      	mov	r5, r0
   12194:	2400      	movs	r4, #0
   12196:	4f0f      	ldr	r7, [pc, #60]	; (121d4 <at_response_match+0x44>)
   12198:	f857 6b04 	ldr.w	r6, [r7], #4
   1219c:	4628      	mov	r0, r5
   1219e:	4631      	mov	r1, r6
   121a0:	f008 fc53 	bl	1aa4a <strstr>
   121a4:	b928      	cbnz	r0, 121b2 <at_response_match+0x22>
   121a6:	3401      	adds	r4, #1
   121a8:	2c04      	cmp	r4, #4
   121aa:	d1f5      	bne.n	12198 <at_response_match+0x8>
   121ac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   121b0:	e00d      	b.n	121ce <at_response_match+0x3e>
   121b2:	b16c      	cbz	r4, 121d0 <at_response_match+0x40>
   121b4:	1ea3      	subs	r3, r4, #2
   121b6:	2b01      	cmp	r3, #1
   121b8:	d8f8      	bhi.n	121ac <at_response_match+0x1c>
   121ba:	4630      	mov	r0, r6
   121bc:	f7f6 fe1a 	bl	8df4 <strlen>
   121c0:	220a      	movs	r2, #10
   121c2:	2100      	movs	r1, #0
   121c4:	4428      	add	r0, r5
   121c6:	f003 fdf3 	bl	15db0 <strtol>
   121ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   121ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   121d0:	4620      	mov	r0, r4
   121d2:	e7fc      	b.n	121ce <at_response_match+0x3e>
   121d4:	0001bac8 	.word	0x0001bac8

000121d8 <at_vsprintf>:
   121d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   121dc:	2500      	movs	r5, #0
   121de:	4681      	mov	r9, r0
   121e0:	460f      	mov	r7, r1
   121e2:	4810      	ldr	r0, [pc, #64]	; (12224 <at_vsprintf+0x4c>)
   121e4:	4629      	mov	r1, r5
   121e6:	4690      	mov	r8, r2
   121e8:	461e      	mov	r6, r3
   121ea:	9301      	str	r3, [sp, #4]
   121ec:	f003 ff04 	bl	15ff8 <vsniprintf>
   121f0:	1e04      	subs	r4, r0, #0
   121f2:	db11      	blt.n	12218 <at_vsprintf+0x40>
   121f4:	3401      	adds	r4, #1
   121f6:	4620      	mov	r0, r4
   121f8:	f006 ffba 	bl	19170 <rpc_client_msg_data_tx_alloc>
   121fc:	f8c9 0000 	str.w	r0, [r9]
   12200:	b168      	cbz	r0, 1221e <at_vsprintf+0x46>
   12202:	4633      	mov	r3, r6
   12204:	4642      	mov	r2, r8
   12206:	4621      	mov	r1, r4
   12208:	9601      	str	r6, [sp, #4]
   1220a:	f003 fef5 	bl	15ff8 <vsniprintf>
   1220e:	4628      	mov	r0, r5
   12210:	603c      	str	r4, [r7, #0]
   12212:	b003      	add	sp, #12
   12214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12218:	f06f 0015 	mvn.w	r0, #21
   1221c:	e7f9      	b.n	12212 <at_vsprintf+0x3a>
   1221e:	f06f 000b 	mvn.w	r0, #11
   12222:	e7f6      	b.n	12212 <at_vsprintf+0x3a>
   12224:	0001b6ec 	.word	0x0001b6ec

00012228 <nrf_modem_at_notif_handler_set>:
   12228:	4b01      	ldr	r3, [pc, #4]	; (12230 <nrf_modem_at_notif_handler_set+0x8>)
   1222a:	6018      	str	r0, [r3, #0]
   1222c:	2000      	movs	r0, #0
   1222e:	4770      	bx	lr
   12230:	2000d360 	.word	0x2000d360

00012234 <nrf_modem_at_printf>:
   12234:	b40f      	push	{r0, r1, r2, r3}
   12236:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12238:	9c08      	ldr	r4, [sp, #32]
   1223a:	f001 fe2d 	bl	13e98 <nrf_modem_state_is_initialized>
   1223e:	2800      	cmp	r0, #0
   12240:	d039      	beq.n	122b6 <nrf_modem_at_printf+0x82>
   12242:	2c00      	cmp	r4, #0
   12244:	d03a      	beq.n	122bc <nrf_modem_at_printf+0x88>
   12246:	4622      	mov	r2, r4
   12248:	ab09      	add	r3, sp, #36	; 0x24
   1224a:	a903      	add	r1, sp, #12
   1224c:	a802      	add	r0, sp, #8
   1224e:	9301      	str	r3, [sp, #4]
   12250:	f7ff ffc2 	bl	121d8 <at_vsprintf>
   12254:	4604      	mov	r4, r0
   12256:	b960      	cbnz	r0, 12272 <nrf_modem_at_printf+0x3e>
   12258:	4e1a      	ldr	r6, [pc, #104]	; (122c4 <nrf_modem_at_printf+0x90>)
   1225a:	f04f 31ff 	mov.w	r1, #4294967295
   1225e:	6830      	ldr	r0, [r6, #0]
   12260:	f006 faea 	bl	18838 <nrf_modem_os_sem_take>
   12264:	4603      	mov	r3, r0
   12266:	9802      	ldr	r0, [sp, #8]
   12268:	b14b      	cbz	r3, 1227e <nrf_modem_at_printf+0x4a>
   1226a:	f006 ff83 	bl	19174 <rpc_client_msg_data_tx_free>
   1226e:	f06f 040a 	mvn.w	r4, #10
   12272:	4620      	mov	r0, r4
   12274:	b004      	add	sp, #16
   12276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1227a:	b004      	add	sp, #16
   1227c:	4770      	bx	lr
   1227e:	2302      	movs	r3, #2
   12280:	2201      	movs	r2, #1
   12282:	9903      	ldr	r1, [sp, #12]
   12284:	f7ff ff4a 	bl	1211c <at_cmd_send>
   12288:	4604      	mov	r4, r0
   1228a:	b118      	cbz	r0, 12294 <nrf_modem_at_printf+0x60>
   1228c:	6830      	ldr	r0, [r6, #0]
   1228e:	f006 fad1 	bl	18834 <nrf_modem_os_sem_give>
   12292:	e7ee      	b.n	12272 <nrf_modem_at_printf+0x3e>
   12294:	4d0c      	ldr	r5, [pc, #48]	; (122c8 <nrf_modem_at_printf+0x94>)
   12296:	682b      	ldr	r3, [r5, #0]
   12298:	6818      	ldr	r0, [r3, #0]
   1229a:	f7ff ff79 	bl	12190 <at_response_match>
   1229e:	4604      	mov	r4, r0
   122a0:	6830      	ldr	r0, [r6, #0]
   122a2:	f006 fac7 	bl	18834 <nrf_modem_os_sem_give>
   122a6:	682b      	ldr	r3, [r5, #0]
   122a8:	6818      	ldr	r0, [r3, #0]
   122aa:	f006 ff5d 	bl	19168 <rpc_client_msg_data_rx_free>
   122ae:	6828      	ldr	r0, [r5, #0]
   122b0:	f006 ff57 	bl	19162 <rpc_client_msg_rx_free>
   122b4:	e7dd      	b.n	12272 <nrf_modem_at_printf+0x3e>
   122b6:	f04f 34ff 	mov.w	r4, #4294967295
   122ba:	e7da      	b.n	12272 <nrf_modem_at_printf+0x3e>
   122bc:	f06f 040d 	mvn.w	r4, #13
   122c0:	e7d7      	b.n	12272 <nrf_modem_at_printf+0x3e>
   122c2:	bf00      	nop
   122c4:	2000d368 	.word	0x2000d368
   122c8:	2000d364 	.word	0x2000d364

000122cc <nrf_modem_at_cmd>:
   122cc:	b40c      	push	{r2, r3}
   122ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   122d2:	b085      	sub	sp, #20
   122d4:	4606      	mov	r6, r0
   122d6:	460d      	mov	r5, r1
   122d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   122da:	f001 fddd 	bl	13e98 <nrf_modem_state_is_initialized>
   122de:	2800      	cmp	r0, #0
   122e0:	d076      	beq.n	123d0 <nrf_modem_at_cmd+0x104>
   122e2:	2e00      	cmp	r6, #0
   122e4:	d077      	beq.n	123d6 <nrf_modem_at_cmd+0x10a>
   122e6:	2c00      	cmp	r4, #0
   122e8:	d075      	beq.n	123d6 <nrf_modem_at_cmd+0x10a>
   122ea:	2d00      	cmp	r5, #0
   122ec:	d076      	beq.n	123dc <nrf_modem_at_cmd+0x110>
   122ee:	4622      	mov	r2, r4
   122f0:	ab0d      	add	r3, sp, #52	; 0x34
   122f2:	a903      	add	r1, sp, #12
   122f4:	a802      	add	r0, sp, #8
   122f6:	9301      	str	r3, [sp, #4]
   122f8:	f7ff ff6e 	bl	121d8 <at_vsprintf>
   122fc:	4604      	mov	r4, r0
   122fe:	bba0      	cbnz	r0, 1236a <nrf_modem_at_cmd+0x9e>
   12300:	4b38      	ldr	r3, [pc, #224]	; (123e4 <nrf_modem_at_cmd+0x118>)
   12302:	9f02      	ldr	r7, [sp, #8]
   12304:	f8d3 8000 	ldr.w	r8, [r3]
   12308:	f1b8 0f00 	cmp.w	r8, #0
   1230c:	d00f      	beq.n	1232e <nrf_modem_at_cmd+0x62>
   1230e:	4b36      	ldr	r3, [pc, #216]	; (123e8 <nrf_modem_at_cmd+0x11c>)
   12310:	f8d3 9000 	ldr.w	r9, [r3]
   12314:	454c      	cmp	r4, r9
   12316:	d00a      	beq.n	1232e <nrf_modem_at_cmd+0x62>
   12318:	4638      	mov	r0, r7
   1231a:	f858 1034 	ldr.w	r1, [r8, r4, lsl #3]
   1231e:	f008 fb94 	bl	1aa4a <strstr>
   12322:	b198      	cbz	r0, 1234c <nrf_modem_at_cmd+0x80>
   12324:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
   12328:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1232c:	b983      	cbnz	r3, 12350 <nrf_modem_at_cmd+0x84>
   1232e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 123f0 <nrf_modem_at_cmd+0x124>
   12332:	f04f 31ff 	mov.w	r1, #4294967295
   12336:	f8d8 0000 	ldr.w	r0, [r8]
   1233a:	f006 fa7d 	bl	18838 <nrf_modem_os_sem_take>
   1233e:	b1d0      	cbz	r0, 12376 <nrf_modem_at_cmd+0xaa>
   12340:	4638      	mov	r0, r7
   12342:	f006 ff17 	bl	19174 <rpc_client_msg_data_tx_free>
   12346:	f06f 040a 	mvn.w	r4, #10
   1234a:	e00e      	b.n	1236a <nrf_modem_at_cmd+0x9e>
   1234c:	3401      	adds	r4, #1
   1234e:	e7e1      	b.n	12314 <nrf_modem_at_cmd+0x48>
   12350:	463a      	mov	r2, r7
   12352:	4629      	mov	r1, r5
   12354:	4630      	mov	r0, r6
   12356:	4798      	blx	r3
   12358:	4604      	mov	r4, r0
   1235a:	b918      	cbnz	r0, 12364 <nrf_modem_at_cmd+0x98>
   1235c:	4630      	mov	r0, r6
   1235e:	f7ff ff17 	bl	12190 <at_response_match>
   12362:	4604      	mov	r4, r0
   12364:	4638      	mov	r0, r7
   12366:	f006 ff05 	bl	19174 <rpc_client_msg_data_tx_free>
   1236a:	4620      	mov	r0, r4
   1236c:	b005      	add	sp, #20
   1236e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12372:	b002      	add	sp, #8
   12374:	4770      	bx	lr
   12376:	2302      	movs	r3, #2
   12378:	2201      	movs	r2, #1
   1237a:	4638      	mov	r0, r7
   1237c:	9903      	ldr	r1, [sp, #12]
   1237e:	f7ff fecd 	bl	1211c <at_cmd_send>
   12382:	4604      	mov	r4, r0
   12384:	b120      	cbz	r0, 12390 <nrf_modem_at_cmd+0xc4>
   12386:	f8d8 0000 	ldr.w	r0, [r8]
   1238a:	f006 fa53 	bl	18834 <nrf_modem_os_sem_give>
   1238e:	e7ec      	b.n	1236a <nrf_modem_at_cmd+0x9e>
   12390:	4f16      	ldr	r7, [pc, #88]	; (123ec <nrf_modem_at_cmd+0x120>)
   12392:	4630      	mov	r0, r6
   12394:	683c      	ldr	r4, [r7, #0]
   12396:	6862      	ldr	r2, [r4, #4]
   12398:	6821      	ldr	r1, [r4, #0]
   1239a:	42aa      	cmp	r2, r5
   1239c:	bf28      	it	cs
   1239e:	462a      	movcs	r2, r5
   123a0:	f008 f9a0 	bl	1a6e4 <memcpy>
   123a4:	6863      	ldr	r3, [r4, #4]
   123a6:	42ab      	cmp	r3, r5
   123a8:	d80f      	bhi.n	123ca <nrf_modem_at_cmd+0xfe>
   123aa:	6820      	ldr	r0, [r4, #0]
   123ac:	f7ff fef0 	bl	12190 <at_response_match>
   123b0:	4604      	mov	r4, r0
   123b2:	f8d8 0000 	ldr.w	r0, [r8]
   123b6:	f006 fa3d 	bl	18834 <nrf_modem_os_sem_give>
   123ba:	683b      	ldr	r3, [r7, #0]
   123bc:	6818      	ldr	r0, [r3, #0]
   123be:	f006 fed3 	bl	19168 <rpc_client_msg_data_rx_free>
   123c2:	6838      	ldr	r0, [r7, #0]
   123c4:	f006 fecd 	bl	19162 <rpc_client_msg_rx_free>
   123c8:	e7cf      	b.n	1236a <nrf_modem_at_cmd+0x9e>
   123ca:	f06f 0406 	mvn.w	r4, #6
   123ce:	e7f0      	b.n	123b2 <nrf_modem_at_cmd+0xe6>
   123d0:	f04f 34ff 	mov.w	r4, #4294967295
   123d4:	e7c9      	b.n	1236a <nrf_modem_at_cmd+0x9e>
   123d6:	f06f 040d 	mvn.w	r4, #13
   123da:	e7c6      	b.n	1236a <nrf_modem_at_cmd+0x9e>
   123dc:	f06f 0415 	mvn.w	r4, #21
   123e0:	e7c3      	b.n	1236a <nrf_modem_at_cmd+0x9e>
   123e2:	bf00      	nop
   123e4:	2000d358 	.word	0x2000d358
   123e8:	2000d354 	.word	0x2000d354
   123ec:	2000d364 	.word	0x2000d364
   123f0:	2000d368 	.word	0x2000d368

000123f4 <nrf_modem_at_scanf>:
   123f4:	b40e      	push	{r1, r2, r3}
   123f6:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
   123f8:	9f07      	ldr	r7, [sp, #28]
   123fa:	4606      	mov	r6, r0
   123fc:	f001 fd4c 	bl	13e98 <nrf_modem_state_is_initialized>
   12400:	2800      	cmp	r0, #0
   12402:	d042      	beq.n	1248a <nrf_modem_at_scanf+0x96>
   12404:	2e00      	cmp	r6, #0
   12406:	d043      	beq.n	12490 <nrf_modem_at_scanf+0x9c>
   12408:	2f00      	cmp	r7, #0
   1240a:	d041      	beq.n	12490 <nrf_modem_at_scanf+0x9c>
   1240c:	4630      	mov	r0, r6
   1240e:	f7f6 fcf1 	bl	8df4 <strlen>
   12412:	1c45      	adds	r5, r0, #1
   12414:	4628      	mov	r0, r5
   12416:	f006 feab 	bl	19170 <rpc_client_msg_data_tx_alloc>
   1241a:	4604      	mov	r4, r0
   1241c:	2800      	cmp	r0, #0
   1241e:	d03a      	beq.n	12496 <nrf_modem_at_scanf+0xa2>
   12420:	4631      	mov	r1, r6
   12422:	4e1e      	ldr	r6, [pc, #120]	; (1249c <nrf_modem_at_scanf+0xa8>)
   12424:	462a      	mov	r2, r5
   12426:	f008 faf1 	bl	1aa0c <strncpy>
   1242a:	f04f 31ff 	mov.w	r1, #4294967295
   1242e:	6830      	ldr	r0, [r6, #0]
   12430:	f006 fa02 	bl	18838 <nrf_modem_os_sem_take>
   12434:	b150      	cbz	r0, 1244c <nrf_modem_at_scanf+0x58>
   12436:	4620      	mov	r0, r4
   12438:	f006 fe9c 	bl	19174 <rpc_client_msg_data_tx_free>
   1243c:	f06f 040a 	mvn.w	r4, #10
   12440:	4620      	mov	r0, r4
   12442:	b002      	add	sp, #8
   12444:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   12448:	b003      	add	sp, #12
   1244a:	4770      	bx	lr
   1244c:	4620      	mov	r0, r4
   1244e:	2302      	movs	r3, #2
   12450:	2201      	movs	r2, #1
   12452:	4629      	mov	r1, r5
   12454:	f7ff fe62 	bl	1211c <at_cmd_send>
   12458:	4604      	mov	r4, r0
   1245a:	b990      	cbnz	r0, 12482 <nrf_modem_at_scanf+0x8e>
   1245c:	4d10      	ldr	r5, [pc, #64]	; (124a0 <nrf_modem_at_scanf+0xac>)
   1245e:	aa08      	add	r2, sp, #32
   12460:	682b      	ldr	r3, [r5, #0]
   12462:	4639      	mov	r1, r7
   12464:	6818      	ldr	r0, [r3, #0]
   12466:	9201      	str	r2, [sp, #4]
   12468:	f003 fdf8 	bl	1605c <vsiscanf>
   1246c:	682b      	ldr	r3, [r5, #0]
   1246e:	1e04      	subs	r4, r0, #0
   12470:	6818      	ldr	r0, [r3, #0]
   12472:	bf08      	it	eq
   12474:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   12478:	f006 fe76 	bl	19168 <rpc_client_msg_data_rx_free>
   1247c:	6828      	ldr	r0, [r5, #0]
   1247e:	f006 fe70 	bl	19162 <rpc_client_msg_rx_free>
   12482:	6830      	ldr	r0, [r6, #0]
   12484:	f006 f9d6 	bl	18834 <nrf_modem_os_sem_give>
   12488:	e7da      	b.n	12440 <nrf_modem_at_scanf+0x4c>
   1248a:	f04f 34ff 	mov.w	r4, #4294967295
   1248e:	e7d7      	b.n	12440 <nrf_modem_at_scanf+0x4c>
   12490:	f06f 040d 	mvn.w	r4, #13
   12494:	e7d4      	b.n	12440 <nrf_modem_at_scanf+0x4c>
   12496:	f06f 040b 	mvn.w	r4, #11
   1249a:	e7d1      	b.n	12440 <nrf_modem_at_scanf+0x4c>
   1249c:	2000d368 	.word	0x2000d368
   124a0:	2000d364 	.word	0x2000d364

000124a4 <rpc_at_event_handler>:
   124a4:	b538      	push	{r3, r4, r5, lr}
   124a6:	68c3      	ldr	r3, [r0, #12]
   124a8:	4604      	mov	r4, r0
   124aa:	2ba7      	cmp	r3, #167	; 0xa7
   124ac:	d003      	beq.n	124b6 <rpc_at_event_handler+0x12>
   124ae:	6820      	ldr	r0, [r4, #0]
   124b0:	f006 fe5a 	bl	19168 <rpc_client_msg_data_rx_free>
   124b4:	e008      	b.n	124c8 <rpc_at_event_handler+0x24>
   124b6:	2903      	cmp	r1, #3
   124b8:	d008      	beq.n	124cc <rpc_at_event_handler+0x28>
   124ba:	2904      	cmp	r1, #4
   124bc:	d021      	beq.n	12502 <rpc_at_event_handler+0x5e>
   124be:	2902      	cmp	r1, #2
   124c0:	bf02      	ittt	eq
   124c2:	2201      	moveq	r2, #1
   124c4:	4b12      	ldreq	r3, [pc, #72]	; (12510 <rpc_at_event_handler+0x6c>)
   124c6:	701a      	strbeq	r2, [r3, #0]
   124c8:	2000      	movs	r0, #0
   124ca:	bd38      	pop	{r3, r4, r5, pc}
   124cc:	4d11      	ldr	r5, [pc, #68]	; (12514 <rpc_at_event_handler+0x70>)
   124ce:	682b      	ldr	r3, [r5, #0]
   124d0:	b13b      	cbz	r3, 124e2 <rpc_at_event_handler+0x3e>
   124d2:	6800      	ldr	r0, [r0, #0]
   124d4:	4798      	blx	r3
   124d6:	2300      	movs	r3, #0
   124d8:	6820      	ldr	r0, [r4, #0]
   124da:	602b      	str	r3, [r5, #0]
   124dc:	f006 fe44 	bl	19168 <rpc_client_msg_data_rx_free>
   124e0:	e006      	b.n	124f0 <rpc_at_event_handler+0x4c>
   124e2:	4b0b      	ldr	r3, [pc, #44]	; (12510 <rpc_at_event_handler+0x6c>)
   124e4:	781a      	ldrb	r2, [r3, #0]
   124e6:	2a02      	cmp	r2, #2
   124e8:	d105      	bne.n	124f6 <rpc_at_event_handler+0x52>
   124ea:	6800      	ldr	r0, [r0, #0]
   124ec:	2800      	cmp	r0, #0
   124ee:	d1f5      	bne.n	124dc <rpc_at_event_handler+0x38>
   124f0:	2000      	movs	r0, #0
   124f2:	b2c0      	uxtb	r0, r0
   124f4:	e7e9      	b.n	124ca <rpc_at_event_handler+0x26>
   124f6:	4a08      	ldr	r2, [pc, #32]	; (12518 <rpc_at_event_handler+0x74>)
   124f8:	6010      	str	r0, [r2, #0]
   124fa:	2202      	movs	r2, #2
   124fc:	2001      	movs	r0, #1
   124fe:	701a      	strb	r2, [r3, #0]
   12500:	e7f7      	b.n	124f2 <rpc_at_event_handler+0x4e>
   12502:	4b06      	ldr	r3, [pc, #24]	; (1251c <rpc_at_event_handler+0x78>)
   12504:	681b      	ldr	r3, [r3, #0]
   12506:	2b00      	cmp	r3, #0
   12508:	d0d1      	beq.n	124ae <rpc_at_event_handler+0xa>
   1250a:	6800      	ldr	r0, [r0, #0]
   1250c:	4798      	blx	r3
   1250e:	e7ce      	b.n	124ae <rpc_at_event_handler+0xa>
   12510:	2000eca3 	.word	0x2000eca3
   12514:	2000d35c 	.word	0x2000d35c
   12518:	2000d364 	.word	0x2000d364
   1251c:	2000d360 	.word	0x2000d360

00012520 <rpc_at_init>:
   12520:	2201      	movs	r2, #1
   12522:	b510      	push	{r4, lr}
   12524:	4611      	mov	r1, r2
   12526:	4807      	ldr	r0, [pc, #28]	; (12544 <rpc_at_init+0x24>)
   12528:	f7fb fea0 	bl	e26c <nrf_modem_os_sem_init>
   1252c:	4601      	mov	r1, r0
   1252e:	b928      	cbnz	r0, 1253c <rpc_at_init+0x1c>
   12530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12534:	2301      	movs	r3, #1
   12536:	2205      	movs	r2, #5
   12538:	f7ff bdf0 	b.w	1211c <at_cmd_send>
   1253c:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   12540:	bd10      	pop	{r4, pc}
   12542:	bf00      	nop
   12544:	2000d368 	.word	0x2000d368

00012548 <sock_init>:
   12548:	f44f 7248 	mov.w	r2, #800	; 0x320
   1254c:	2100      	movs	r1, #0
   1254e:	b508      	push	{r3, lr}
   12550:	4808      	ldr	r0, [pc, #32]	; (12574 <sock_init+0x2c>)
   12552:	f008 f8d4 	bl	1a6fe <memset>
   12556:	2300      	movs	r3, #0
   12558:	4619      	mov	r1, r3
   1255a:	4a07      	ldr	r2, [pc, #28]	; (12578 <sock_init+0x30>)
   1255c:	4807      	ldr	r0, [pc, #28]	; (1257c <sock_init+0x34>)
   1255e:	7013      	strb	r3, [r2, #0]
   12560:	4a04      	ldr	r2, [pc, #16]	; (12574 <sock_init+0x2c>)
   12562:	3301      	adds	r3, #1
   12564:	2b08      	cmp	r3, #8
   12566:	e9c2 0100 	strd	r0, r1, [r2]
   1256a:	6091      	str	r1, [r2, #8]
   1256c:	f102 0264 	add.w	r2, r2, #100	; 0x64
   12570:	d1f7      	bne.n	12562 <sock_init+0x1a>
   12572:	bd08      	pop	{r3, pc}
   12574:	2000d36c 	.word	0x2000d36c
   12578:	2000eca4 	.word	0x2000eca4
   1257c:	1badf11e 	.word	0x1badf11e

00012580 <sock_open>:
   12580:	b570      	push	{r4, r5, r6, lr}
   12582:	2300      	movs	r3, #0
   12584:	2464      	movs	r4, #100	; 0x64
   12586:	4a0e      	ldr	r2, [pc, #56]	; (125c0 <sock_open+0x40>)
   12588:	4d0e      	ldr	r5, [pc, #56]	; (125c4 <sock_open+0x44>)
   1258a:	fb04 f103 	mul.w	r1, r4, r3
   1258e:	5856      	ldr	r6, [r2, r1]
   12590:	1888      	adds	r0, r1, r2
   12592:	42ae      	cmp	r6, r5
   12594:	d10e      	bne.n	125b4 <sock_open+0x34>
   12596:	f04f 33ff 	mov.w	r3, #4294967295
   1259a:	5053      	str	r3, [r2, r1]
   1259c:	4a0a      	ldr	r2, [pc, #40]	; (125c8 <sock_open+0x48>)
   1259e:	7f03      	ldrb	r3, [r0, #28]
   125a0:	7812      	ldrb	r2, [r2, #0]
   125a2:	f362 1386 	bfi	r3, r2, #6, #1
   125a6:	7703      	strb	r3, [r0, #28]
   125a8:	2302      	movs	r3, #2
   125aa:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
   125ae:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   125b2:	bd70      	pop	{r4, r5, r6, pc}
   125b4:	3301      	adds	r3, #1
   125b6:	2b08      	cmp	r3, #8
   125b8:	d1e7      	bne.n	1258a <sock_open+0xa>
   125ba:	2000      	movs	r0, #0
   125bc:	e7f9      	b.n	125b2 <sock_open+0x32>
   125be:	bf00      	nop
   125c0:	2000d36c 	.word	0x2000d36c
   125c4:	1badf11e 	.word	0x1badf11e
   125c8:	2000eca4 	.word	0x2000eca4

000125cc <sock_find>:
   125cc:	b530      	push	{r4, r5, lr}
   125ce:	4602      	mov	r2, r0
   125d0:	2300      	movs	r3, #0
   125d2:	2564      	movs	r5, #100	; 0x64
   125d4:	4905      	ldr	r1, [pc, #20]	; (125ec <sock_find+0x20>)
   125d6:	fb05 f403 	mul.w	r4, r5, r3
   125da:	1860      	adds	r0, r4, r1
   125dc:	590c      	ldr	r4, [r1, r4]
   125de:	4294      	cmp	r4, r2
   125e0:	d003      	beq.n	125ea <sock_find+0x1e>
   125e2:	3301      	adds	r3, #1
   125e4:	2b08      	cmp	r3, #8
   125e6:	d1f6      	bne.n	125d6 <sock_find+0xa>
   125e8:	2000      	movs	r0, #0
   125ea:	bd30      	pop	{r4, r5, pc}
   125ec:	2000d36c 	.word	0x2000d36c

000125f0 <_sock_close>:
   125f0:	b538      	push	{r3, r4, r5, lr}
   125f2:	f7ff ffeb 	bl	125cc <sock_find>
   125f6:	4604      	mov	r4, r0
   125f8:	1d05      	adds	r5, r0, #4
   125fa:	4628      	mov	r0, r5
   125fc:	f006 ff44 	bl	19488 <pkt_flush>
   12600:	6c20      	ldr	r0, [r4, #64]	; 0x40
   12602:	b108      	cbz	r0, 12608 <_sock_close+0x18>
   12604:	f7fb fe72 	bl	e2ec <nrf_modem_os_free>
   12608:	2260      	movs	r2, #96	; 0x60
   1260a:	2100      	movs	r1, #0
   1260c:	4628      	mov	r0, r5
   1260e:	f008 f876 	bl	1a6fe <memset>
   12612:	4b01      	ldr	r3, [pc, #4]	; (12618 <_sock_close+0x28>)
   12614:	6023      	str	r3, [r4, #0]
   12616:	bd38      	pop	{r3, r4, r5, pc}
   12618:	1badf11e 	.word	0x1badf11e

0001261c <sock_shutdown>:
   1261c:	b570      	push	{r4, r5, r6, lr}
   1261e:	2400      	movs	r4, #0
   12620:	4d05      	ldr	r5, [pc, #20]	; (12638 <sock_shutdown+0x1c>)
   12622:	4e06      	ldr	r6, [pc, #24]	; (1263c <sock_shutdown+0x20>)
   12624:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   12628:	42b0      	cmp	r0, r6
   1262a:	d001      	beq.n	12630 <sock_shutdown+0x14>
   1262c:	f7ff ffe0 	bl	125f0 <_sock_close>
   12630:	3419      	adds	r4, #25
   12632:	2cc8      	cmp	r4, #200	; 0xc8
   12634:	d1f6      	bne.n	12624 <sock_shutdown+0x8>
   12636:	bd70      	pop	{r4, r5, r6, pc}
   12638:	2000d36c 	.word	0x2000d36c
   1263c:	1badf11e 	.word	0x1badf11e

00012640 <sock_flow_control_set>:
   12640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12644:	1e02      	subs	r2, r0, #0
   12646:	4c10      	ldr	r4, [pc, #64]	; (12688 <sock_flow_control_set+0x48>)
   12648:	bf18      	it	ne
   1264a:	2201      	movne	r2, #1
   1264c:	4606      	mov	r6, r0
   1264e:	2500      	movs	r5, #0
   12650:	46a0      	mov	r8, r4
   12652:	f04f 0964 	mov.w	r9, #100	; 0x64
   12656:	4b0d      	ldr	r3, [pc, #52]	; (1268c <sock_flow_control_set+0x4c>)
   12658:	4f0d      	ldr	r7, [pc, #52]	; (12690 <sock_flow_control_set+0x50>)
   1265a:	701a      	strb	r2, [r3, #0]
   1265c:	6823      	ldr	r3, [r4, #0]
   1265e:	42bb      	cmp	r3, r7
   12660:	d00a      	beq.n	12678 <sock_flow_control_set+0x38>
   12662:	fb09 8305 	mla	r3, r9, r5, r8
   12666:	7f1a      	ldrb	r2, [r3, #28]
   12668:	f366 1286 	bfi	r2, r6, #6, #1
   1266c:	771a      	strb	r2, [r3, #28]
   1266e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12670:	b113      	cbz	r3, 12678 <sock_flow_control_set+0x38>
   12672:	4620      	mov	r0, r4
   12674:	f006 fdbf 	bl	191f6 <sock_pollcb>
   12678:	3501      	adds	r5, #1
   1267a:	2d08      	cmp	r5, #8
   1267c:	f104 0464 	add.w	r4, r4, #100	; 0x64
   12680:	d1ec      	bne.n	1265c <sock_flow_control_set+0x1c>
   12682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12686:	bf00      	nop
   12688:	2000d36c 	.word	0x2000d36c
   1268c:	2000eca4 	.word	0x2000eca4
   12690:	1badf11e 	.word	0x1badf11e

00012694 <sock_proto_is_valid>:
   12694:	2811      	cmp	r0, #17
   12696:	dc06      	bgt.n	126a6 <sock_proto_is_valid+0x12>
   12698:	2800      	cmp	r0, #0
   1269a:	db0d      	blt.n	126b8 <sock_proto_is_valid+0x24>
   1269c:	4b08      	ldr	r3, [pc, #32]	; (126c0 <sock_proto_is_valid+0x2c>)
   1269e:	40c3      	lsrs	r3, r0
   126a0:	f003 0001 	and.w	r0, r3, #1
   126a4:	4770      	bx	lr
   126a6:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   126aa:	d007      	beq.n	126bc <sock_proto_is_valid+0x28>
   126ac:	f240 1311 	movw	r3, #273	; 0x111
   126b0:	1ac3      	subs	r3, r0, r3
   126b2:	4258      	negs	r0, r3
   126b4:	4158      	adcs	r0, r3
   126b6:	4770      	bx	lr
   126b8:	2000      	movs	r0, #0
   126ba:	4770      	bx	lr
   126bc:	2001      	movs	r0, #1
   126be:	4770      	bx	lr
   126c0:	00020041 	.word	0x00020041

000126c4 <on_getaddrinfo_res>:
   126c4:	2301      	movs	r3, #1
   126c6:	4a03      	ldr	r2, [pc, #12]	; (126d4 <on_getaddrinfo_res+0x10>)
   126c8:	7013      	strb	r3, [r2, #0]
   126ca:	4a03      	ldr	r2, [pc, #12]	; (126d8 <on_getaddrinfo_res+0x14>)
   126cc:	6010      	str	r0, [r2, #0]
   126ce:	4618      	mov	r0, r3
   126d0:	4770      	bx	lr
   126d2:	bf00      	nop
   126d4:	2000eca5 	.word	0x2000eca5
   126d8:	2000d68c 	.word	0x2000d68c

000126dc <addrinfo_init>:
   126dc:	2201      	movs	r2, #1
   126de:	b508      	push	{r3, lr}
   126e0:	4611      	mov	r1, r2
   126e2:	4804      	ldr	r0, [pc, #16]	; (126f4 <addrinfo_init+0x18>)
   126e4:	f7fb fdc2 	bl	e26c <nrf_modem_os_sem_init>
   126e8:	2800      	cmp	r0, #0
   126ea:	bf18      	it	ne
   126ec:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   126f0:	bd08      	pop	{r3, pc}
   126f2:	bf00      	nop
   126f4:	2000d690 	.word	0x2000d690

000126f8 <nrf_getaddrinfo>:
   126f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126fc:	b085      	sub	sp, #20
   126fe:	4682      	mov	sl, r0
   12700:	460f      	mov	r7, r1
   12702:	4616      	mov	r6, r2
   12704:	461d      	mov	r5, r3
   12706:	f001 fbc7 	bl	13e98 <nrf_modem_state_is_initialized>
   1270a:	b928      	cbnz	r0, 12718 <nrf_getaddrinfo+0x20>
   1270c:	2001      	movs	r0, #1
   1270e:	f006 f889 	bl	18824 <nrf_modem_os_errno_set>
   12712:	f06f 040a 	mvn.w	r4, #10
   12716:	e01c      	b.n	12752 <nrf_getaddrinfo+0x5a>
   12718:	ea5a 0307 	orrs.w	r3, sl, r7
   1271c:	f000 8157 	beq.w	129ce <nrf_getaddrinfo+0x2d6>
   12720:	b31e      	cbz	r6, 1276a <nrf_getaddrinfo+0x72>
   12722:	6833      	ldr	r3, [r6, #0]
   12724:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
   12728:	f023 0302 	bic.w	r3, r3, #2
   1272c:	2b00      	cmp	r3, #0
   1272e:	f040 8151 	bne.w	129d4 <nrf_getaddrinfo+0x2dc>
   12732:	6870      	ldr	r0, [r6, #4]
   12734:	b938      	cbnz	r0, 12746 <nrf_getaddrinfo+0x4e>
   12736:	68b0      	ldr	r0, [r6, #8]
   12738:	b178      	cbz	r0, 1275a <nrf_getaddrinfo+0x62>
   1273a:	f006 fe42 	bl	193c2 <sock_type_is_valid>
   1273e:	b960      	cbnz	r0, 1275a <nrf_getaddrinfo+0x62>
   12740:	f06f 0406 	mvn.w	r4, #6
   12744:	e005      	b.n	12752 <nrf_getaddrinfo+0x5a>
   12746:	f006 fe36 	bl	193b6 <sock_family_is_valid>
   1274a:	2800      	cmp	r0, #0
   1274c:	d1f3      	bne.n	12736 <nrf_getaddrinfo+0x3e>
   1274e:	f06f 0405 	mvn.w	r4, #5
   12752:	4620      	mov	r0, r4
   12754:	b005      	add	sp, #20
   12756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1275a:	68f0      	ldr	r0, [r6, #12]
   1275c:	b128      	cbz	r0, 1276a <nrf_getaddrinfo+0x72>
   1275e:	68b1      	ldr	r1, [r6, #8]
   12760:	f006 fe35 	bl	193ce <sock_proto_supports_type>
   12764:	b908      	cbnz	r0, 1276a <nrf_getaddrinfo+0x72>
   12766:	206b      	movs	r0, #107	; 0x6b
   12768:	e7d1      	b.n	1270e <nrf_getaddrinfo+0x16>
   1276a:	4b9d      	ldr	r3, [pc, #628]	; (129e0 <nrf_getaddrinfo+0x2e8>)
   1276c:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   12770:	6818      	ldr	r0, [r3, #0]
   12772:	f006 f861 	bl	18838 <nrf_modem_os_sem_take>
   12776:	4604      	mov	r4, r0
   12778:	2800      	cmp	r0, #0
   1277a:	f040 812e 	bne.w	129da <nrf_getaddrinfo+0x2e2>
   1277e:	2f00      	cmp	r7, #0
   12780:	d062      	beq.n	12848 <nrf_getaddrinfo+0x150>
   12782:	b1f6      	cbz	r6, 127c2 <nrf_getaddrinfo+0xca>
   12784:	6833      	ldr	r3, [r6, #0]
   12786:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
   1278a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1278e:	d118      	bne.n	127c2 <nrf_getaddrinfo+0xca>
   12790:	6833      	ldr	r3, [r6, #0]
   12792:	04db      	lsls	r3, r3, #19
   12794:	d443      	bmi.n	1281e <nrf_getaddrinfo+0x126>
   12796:	f04f 38ff 	mov.w	r8, #4294967295
   1279a:	6870      	ldr	r0, [r6, #4]
   1279c:	b108      	cbz	r0, 127a2 <nrf_getaddrinfo+0xaa>
   1279e:	f000 fe69 	bl	13474 <nrf_af_to_rpc_af>
   127a2:	4b90      	ldr	r3, [pc, #576]	; (129e4 <nrf_getaddrinfo+0x2ec>)
   127a4:	4a90      	ldr	r2, [pc, #576]	; (129e8 <nrf_getaddrinfo+0x2f0>)
   127a6:	6018      	str	r0, [r3, #0]
   127a8:	68b3      	ldr	r3, [r6, #8]
   127aa:	2b00      	cmp	r3, #0
   127ac:	bf08      	it	eq
   127ae:	2301      	moveq	r3, #1
   127b0:	6013      	str	r3, [r2, #0]
   127b2:	68f3      	ldr	r3, [r6, #12]
   127b4:	4a8d      	ldr	r2, [pc, #564]	; (129ec <nrf_getaddrinfo+0x2f4>)
   127b6:	2b00      	cmp	r3, #0
   127b8:	bf08      	it	eq
   127ba:	2306      	moveq	r3, #6
   127bc:	6013      	str	r3, [r2, #0]
   127be:	6833      	ldr	r3, [r6, #0]
   127c0:	e01c      	b.n	127fc <nrf_getaddrinfo+0x104>
   127c2:	220a      	movs	r2, #10
   127c4:	2100      	movs	r1, #0
   127c6:	4638      	mov	r0, r7
   127c8:	f003 fc0c 	bl	15fe4 <strtoul>
   127cc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   127d0:	1e42      	subs	r2, r0, #1
   127d2:	429a      	cmp	r2, r3
   127d4:	f200 80f8 	bhi.w	129c8 <nrf_getaddrinfo+0x2d0>
   127d8:	4a85      	ldr	r2, [pc, #532]	; (129f0 <nrf_getaddrinfo+0x2f8>)
   127da:	0203      	lsls	r3, r0, #8
   127dc:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
   127e0:	8013      	strh	r3, [r2, #0]
   127e2:	2e00      	cmp	r6, #0
   127e4:	d1d4      	bne.n	12790 <nrf_getaddrinfo+0x98>
   127e6:	2300      	movs	r3, #0
   127e8:	2101      	movs	r1, #1
   127ea:	4a7e      	ldr	r2, [pc, #504]	; (129e4 <nrf_getaddrinfo+0x2ec>)
   127ec:	f04f 38ff 	mov.w	r8, #4294967295
   127f0:	6013      	str	r3, [r2, #0]
   127f2:	4a7d      	ldr	r2, [pc, #500]	; (129e8 <nrf_getaddrinfo+0x2f0>)
   127f4:	6011      	str	r1, [r2, #0]
   127f6:	2106      	movs	r1, #6
   127f8:	4a7c      	ldr	r2, [pc, #496]	; (129ec <nrf_getaddrinfo+0x2f4>)
   127fa:	6011      	str	r1, [r2, #0]
   127fc:	4f7d      	ldr	r7, [pc, #500]	; (129f4 <nrf_getaddrinfo+0x2fc>)
   127fe:	4650      	mov	r0, sl
   12800:	603b      	str	r3, [r7, #0]
   12802:	f1ba 0f00 	cmp.w	sl, #0
   12806:	d16f      	bne.n	128e8 <nrf_getaddrinfo+0x1f0>
   12808:	f006 fc88 	bl	1911c <rpc_client_msg_alloc>
   1280c:	4606      	mov	r6, r0
   1280e:	bb00      	cbnz	r0, 12852 <nrf_getaddrinfo+0x15a>
   12810:	f06f 0409 	mvn.w	r4, #9
   12814:	4b72      	ldr	r3, [pc, #456]	; (129e0 <nrf_getaddrinfo+0x2e8>)
   12816:	6818      	ldr	r0, [r3, #0]
   12818:	f006 f80c 	bl	18834 <nrf_modem_os_sem_give>
   1281c:	e799      	b.n	12752 <nrf_getaddrinfo+0x5a>
   1281e:	213a      	movs	r1, #58	; 0x3a
   12820:	4638      	mov	r0, r7
   12822:	f008 f8cc 	bl	1a9be <strchr>
   12826:	b100      	cbz	r0, 1282a <nrf_getaddrinfo+0x132>
   12828:	1c47      	adds	r7, r0, #1
   1282a:	4638      	mov	r0, r7
   1282c:	4972      	ldr	r1, [pc, #456]	; (129f8 <nrf_getaddrinfo+0x300>)
   1282e:	f008 f90c 	bl	1aa4a <strstr>
   12832:	220a      	movs	r2, #10
   12834:	b128      	cbz	r0, 12842 <nrf_getaddrinfo+0x14a>
   12836:	2100      	movs	r1, #0
   12838:	3003      	adds	r0, #3
   1283a:	f003 fab9 	bl	15db0 <strtol>
   1283e:	4680      	mov	r8, r0
   12840:	e7ab      	b.n	1279a <nrf_getaddrinfo+0xa2>
   12842:	4601      	mov	r1, r0
   12844:	4638      	mov	r0, r7
   12846:	e7f8      	b.n	1283a <nrf_getaddrinfo+0x142>
   12848:	4b69      	ldr	r3, [pc, #420]	; (129f0 <nrf_getaddrinfo+0x2f8>)
   1284a:	8018      	strh	r0, [r3, #0]
   1284c:	2e00      	cmp	r6, #0
   1284e:	d0ca      	beq.n	127e6 <nrf_getaddrinfo+0xee>
   12850:	e7a1      	b.n	12796 <nrf_getaddrinfo+0x9e>
   12852:	f8c0 8010 	str.w	r8, [r0, #16]
   12856:	4b63      	ldr	r3, [pc, #396]	; (129e4 <nrf_getaddrinfo+0x2ec>)
   12858:	f8df b18c 	ldr.w	fp, [pc, #396]	; 129e8 <nrf_getaddrinfo+0x2f0>
   1285c:	681b      	ldr	r3, [r3, #0]
   1285e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 129ec <nrf_getaddrinfo+0x2f4>
   12862:	61b3      	str	r3, [r6, #24]
   12864:	f8db 3000 	ldr.w	r3, [fp]
   12868:	4632      	mov	r2, r6
   1286a:	61f3      	str	r3, [r6, #28]
   1286c:	f8da 3000 	ldr.w	r3, [sl]
   12870:	f247 010d 	movw	r1, #28685	; 0x700d
   12874:	6233      	str	r3, [r6, #32]
   12876:	683b      	ldr	r3, [r7, #0]
   12878:	2004      	movs	r0, #4
   1287a:	6173      	str	r3, [r6, #20]
   1287c:	f006 fc6a 	bl	19154 <rpc_client_msg_send>
   12880:	2300      	movs	r3, #0
   12882:	4e5e      	ldr	r6, [pc, #376]	; (129fc <nrf_getaddrinfo+0x304>)
   12884:	7033      	strb	r3, [r6, #0]
   12886:	f04f 33ff 	mov.w	r3, #4294967295
   1288a:	9303      	str	r3, [sp, #12]
   1288c:	7833      	ldrb	r3, [r6, #0]
   1288e:	2b01      	cmp	r3, #1
   12890:	d13c      	bne.n	1290c <nrf_getaddrinfo+0x214>
   12892:	f8df 816c 	ldr.w	r8, [pc, #364]	; 12a00 <nrf_getaddrinfo+0x308>
   12896:	f8d8 3000 	ldr.w	r3, [r8]
   1289a:	6958      	ldr	r0, [r3, #20]
   1289c:	2800      	cmp	r0, #0
   1289e:	f040 808f 	bne.w	129c0 <nrf_getaddrinfo+0x2c8>
   128a2:	2020      	movs	r0, #32
   128a4:	f8d3 9000 	ldr.w	r9, [r3]
   128a8:	f7fb fd18 	bl	e2dc <nrf_modem_os_alloc>
   128ac:	6028      	str	r0, [r5, #0]
   128ae:	b170      	cbz	r0, 128ce <nrf_getaddrinfo+0x1d6>
   128b0:	f109 0318 	add.w	r3, r9, #24
   128b4:	4a4e      	ldr	r2, [pc, #312]	; (129f0 <nrf_getaddrinfo+0x2f8>)
   128b6:	9300      	str	r3, [sp, #0]
   128b8:	4618      	mov	r0, r3
   128ba:	8812      	ldrh	r2, [r2, #0]
   128bc:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   128c0:	f006 fc60 	bl	19184 <sockaddr_init>
   128c4:	4606      	mov	r6, r0
   128c6:	bb68      	cbnz	r0, 12924 <nrf_getaddrinfo+0x22c>
   128c8:	6828      	ldr	r0, [r5, #0]
   128ca:	f7fb fd0f 	bl	e2ec <nrf_modem_os_free>
   128ce:	f06f 0409 	mvn.w	r4, #9
   128d2:	f8d8 3000 	ldr.w	r3, [r8]
   128d6:	6818      	ldr	r0, [r3, #0]
   128d8:	b108      	cbz	r0, 128de <nrf_getaddrinfo+0x1e6>
   128da:	f006 fc45 	bl	19168 <rpc_client_msg_data_rx_free>
   128de:	f8d8 0000 	ldr.w	r0, [r8]
   128e2:	f006 fc3e 	bl	19162 <rpc_client_msg_rx_free>
   128e6:	e795      	b.n	12814 <nrf_getaddrinfo+0x11c>
   128e8:	f7f6 fa84 	bl	8df4 <strlen>
   128ec:	f006 fc16 	bl	1911c <rpc_client_msg_alloc>
   128f0:	4606      	mov	r6, r0
   128f2:	2800      	cmp	r0, #0
   128f4:	d08c      	beq.n	12810 <nrf_getaddrinfo+0x118>
   128f6:	f8c0 8010 	str.w	r8, [r0, #16]
   128fa:	4650      	mov	r0, sl
   128fc:	f7f6 fa7a 	bl	8df4 <strlen>
   12900:	4651      	mov	r1, sl
   12902:	4602      	mov	r2, r0
   12904:	6830      	ldr	r0, [r6, #0]
   12906:	f007 feed 	bl	1a6e4 <memcpy>
   1290a:	e7a4      	b.n	12856 <nrf_getaddrinfo+0x15e>
   1290c:	2002      	movs	r0, #2
   1290e:	a903      	add	r1, sp, #12
   12910:	f7fb fbea 	bl	e0e8 <nrf_modem_os_timedwait>
   12914:	2800      	cmp	r0, #0
   12916:	d0b9      	beq.n	1288c <nrf_getaddrinfo+0x194>
   12918:	206e      	movs	r0, #110	; 0x6e
   1291a:	f005 ff83 	bl	18824 <nrf_modem_os_errno_set>
   1291e:	f06f 040a 	mvn.w	r4, #10
   12922:	e777      	b.n	12814 <nrf_getaddrinfo+0x11c>
   12924:	f8d9 2008 	ldr.w	r2, [r9, #8]
   12928:	2a01      	cmp	r2, #1
   1292a:	d004      	beq.n	12936 <nrf_getaddrinfo+0x23e>
   1292c:	2a02      	cmp	r2, #2
   1292e:	d01a      	beq.n	12966 <nrf_getaddrinfo+0x26e>
   12930:	f06f 0405 	mvn.w	r4, #5
   12934:	e7cd      	b.n	128d2 <nrf_getaddrinfo+0x1da>
   12936:	2110      	movs	r1, #16
   12938:	682a      	ldr	r2, [r5, #0]
   1293a:	6111      	str	r1, [r2, #16]
   1293c:	683a      	ldr	r2, [r7, #0]
   1293e:	6829      	ldr	r1, [r5, #0]
   12940:	f012 0202 	ands.w	r2, r2, #2
   12944:	d03a      	beq.n	129bc <nrf_getaddrinfo+0x2c4>
   12946:	9101      	str	r1, [sp, #4]
   12948:	f8b9 0016 	ldrh.w	r0, [r9, #22]
   1294c:	3001      	adds	r0, #1
   1294e:	f7fb fcc5 	bl	e2dc <nrf_modem_os_alloc>
   12952:	9901      	ldr	r1, [sp, #4]
   12954:	6188      	str	r0, [r1, #24]
   12956:	682a      	ldr	r2, [r5, #0]
   12958:	6990      	ldr	r0, [r2, #24]
   1295a:	b938      	cbnz	r0, 1296c <nrf_getaddrinfo+0x274>
   1295c:	4628      	mov	r0, r5
   1295e:	f7fb fcc5 	bl	e2ec <nrf_modem_os_free>
   12962:	4630      	mov	r0, r6
   12964:	e7b1      	b.n	128ca <nrf_getaddrinfo+0x1d2>
   12966:	2124      	movs	r1, #36	; 0x24
   12968:	682a      	ldr	r2, [r5, #0]
   1296a:	e7e6      	b.n	1293a <nrf_getaddrinfo+0x242>
   1296c:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   12970:	9b00      	ldr	r3, [sp, #0]
   12972:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   12976:	440b      	add	r3, r1
   12978:	4619      	mov	r1, r3
   1297a:	f007 feb3 	bl	1a6e4 <memcpy>
   1297e:	2000      	movs	r0, #0
   12980:	6829      	ldr	r1, [r5, #0]
   12982:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   12986:	6989      	ldr	r1, [r1, #24]
   12988:	5488      	strb	r0, [r1, r2]
   1298a:	682a      	ldr	r2, [r5, #0]
   1298c:	9200      	str	r2, [sp, #0]
   1298e:	f8d9 0008 	ldr.w	r0, [r9, #8]
   12992:	f007 f96a 	bl	19c6a <rpc_af_to_nrf_af>
   12996:	9a00      	ldr	r2, [sp, #0]
   12998:	6050      	str	r0, [r2, #4]
   1299a:	682b      	ldr	r3, [r5, #0]
   1299c:	f8db 2000 	ldr.w	r2, [fp]
   129a0:	609a      	str	r2, [r3, #8]
   129a2:	682b      	ldr	r3, [r5, #0]
   129a4:	f8da 2000 	ldr.w	r2, [sl]
   129a8:	60da      	str	r2, [r3, #12]
   129aa:	682b      	ldr	r3, [r5, #0]
   129ac:	683a      	ldr	r2, [r7, #0]
   129ae:	601a      	str	r2, [r3, #0]
   129b0:	2200      	movs	r2, #0
   129b2:	682b      	ldr	r3, [r5, #0]
   129b4:	615e      	str	r6, [r3, #20]
   129b6:	682b      	ldr	r3, [r5, #0]
   129b8:	61da      	str	r2, [r3, #28]
   129ba:	e78a      	b.n	128d2 <nrf_getaddrinfo+0x1da>
   129bc:	618a      	str	r2, [r1, #24]
   129be:	e7e4      	b.n	1298a <nrf_getaddrinfo+0x292>
   129c0:	f007 f999 	bl	19cf6 <rpc_error_to_nrf_gai_errno>
   129c4:	4604      	mov	r4, r0
   129c6:	e784      	b.n	128d2 <nrf_getaddrinfo+0x1da>
   129c8:	f06f 0407 	mvn.w	r4, #7
   129cc:	e722      	b.n	12814 <nrf_getaddrinfo+0x11c>
   129ce:	f06f 0401 	mvn.w	r4, #1
   129d2:	e6be      	b.n	12752 <nrf_getaddrinfo+0x5a>
   129d4:	f04f 34ff 	mov.w	r4, #4294967295
   129d8:	e6bb      	b.n	12752 <nrf_getaddrinfo+0x5a>
   129da:	f06f 0402 	mvn.w	r4, #2
   129de:	e6b8      	b.n	12752 <nrf_getaddrinfo+0x5a>
   129e0:	2000d690 	.word	0x2000d690
   129e4:	2000d69c 	.word	0x2000d69c
   129e8:	2000d698 	.word	0x2000d698
   129ec:	2000d694 	.word	0x2000d694
   129f0:	2000d73c 	.word	0x2000d73c
   129f4:	2000d6a0 	.word	0x2000d6a0
   129f8:	0001df24 	.word	0x0001df24
   129fc:	2000eca5 	.word	0x2000eca5
   12a00:	2000d68c 	.word	0x2000d68c

00012a04 <rpc_ip_event_handler>:
   12a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a06:	f248 030f 	movw	r3, #32783	; 0x800f
   12a0a:	4299      	cmp	r1, r3
   12a0c:	4606      	mov	r6, r0
   12a0e:	460d      	mov	r5, r1
   12a10:	d03b      	beq.n	12a8a <rpc_ip_event_handler+0x86>
   12a12:	d822      	bhi.n	12a5a <rpc_ip_event_handler+0x56>
   12a14:	f248 030d 	movw	r3, #32781	; 0x800d
   12a18:	4299      	cmp	r1, r3
   12a1a:	d02f      	beq.n	12a7c <rpc_ip_event_handler+0x78>
   12a1c:	f248 030e 	movw	r3, #32782	; 0x800e
   12a20:	4299      	cmp	r1, r3
   12a22:	d02f      	beq.n	12a84 <rpc_ip_event_handler+0x80>
   12a24:	6900      	ldr	r0, [r0, #16]
   12a26:	f7ff fdd1 	bl	125cc <sock_find>
   12a2a:	4604      	mov	r4, r0
   12a2c:	b308      	cbz	r0, 12a72 <rpc_ip_event_handler+0x6e>
   12a2e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   12a32:	d91e      	bls.n	12a72 <rpc_ip_event_handler+0x6e>
   12a34:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
   12a38:	3d01      	subs	r5, #1
   12a3a:	2d0b      	cmp	r5, #11
   12a3c:	d819      	bhi.n	12a72 <rpc_ip_event_handler+0x6e>
   12a3e:	e8df f015 	tbh	[pc, r5, lsl #1]
   12a42:	0090      	.short	0x0090
   12a44:	009400b3 	.word	0x009400b3
   12a48:	00940094 	.word	0x00940094
   12a4c:	00ee00ee 	.word	0x00ee00ee
   12a50:	00990094 	.word	0x00990094
   12a54:	00180018 	.word	0x00180018
   12a58:	00d2      	.short	0x00d2
   12a5a:	f249 0304 	movw	r3, #36868	; 0x9004
   12a5e:	4299      	cmp	r1, r3
   12a60:	d016      	beq.n	12a90 <rpc_ip_event_handler+0x8c>
   12a62:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   12a66:	d924      	bls.n	12ab2 <rpc_ip_event_handler+0xae>
   12a68:	68c0      	ldr	r0, [r0, #12]
   12a6a:	f7ff fdaf 	bl	125cc <sock_find>
   12a6e:	4604      	mov	r4, r0
   12a70:	bb70      	cbnz	r0, 12ad0 <rpc_ip_event_handler+0xcc>
   12a72:	6830      	ldr	r0, [r6, #0]
   12a74:	b1b0      	cbz	r0, 12aa4 <rpc_ip_event_handler+0xa0>
   12a76:	f006 fb77 	bl	19168 <rpc_client_msg_data_rx_free>
   12a7a:	e013      	b.n	12aa4 <rpc_ip_event_handler+0xa0>
   12a7c:	f7ff fe22 	bl	126c4 <on_getaddrinfo_res>
   12a80:	b2c0      	uxtb	r0, r0
   12a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12a84:	f006 fd21 	bl	194ca <on_getifaddrs_res>
   12a88:	e7fa      	b.n	12a80 <rpc_ip_event_handler+0x7c>
   12a8a:	f006 fd0b 	bl	194a4 <on_conf_dnssrv_res>
   12a8e:	e7f7      	b.n	12a80 <rpc_ip_event_handler+0x7c>
   12a90:	6903      	ldr	r3, [r0, #16]
   12a92:	2b03      	cmp	r3, #3
   12a94:	d806      	bhi.n	12aa4 <rpc_ip_event_handler+0xa0>
   12a96:	e8df f003 	tbb	[pc, r3]
   12a9a:	0a02      	.short	0x0a02
   12a9c:	0702      	.short	0x0702
   12a9e:	2000      	movs	r0, #0
   12aa0:	f7ff fdce 	bl	12640 <sock_flow_control_set>
   12aa4:	2000      	movs	r0, #0
   12aa6:	e7ec      	b.n	12a82 <rpc_ip_event_handler+0x7e>
   12aa8:	2201      	movs	r2, #1
   12aaa:	4b65      	ldr	r3, [pc, #404]	; (12c40 <rpc_ip_event_handler+0x23c>)
   12aac:	701a      	strb	r2, [r3, #0]
   12aae:	2001      	movs	r0, #1
   12ab0:	e7f6      	b.n	12aa0 <rpc_ip_event_handler+0x9c>
   12ab2:	6900      	ldr	r0, [r0, #16]
   12ab4:	f7ff fd8a 	bl	125cc <sock_find>
   12ab8:	4604      	mov	r4, r0
   12aba:	2800      	cmp	r0, #0
   12abc:	d0d9      	beq.n	12a72 <rpc_ip_event_handler+0x6e>
   12abe:	f248 0381 	movw	r3, #32897	; 0x8081
   12ac2:	429d      	cmp	r5, r3
   12ac4:	d1d5      	bne.n	12a72 <rpc_ip_event_handler+0x6e>
   12ac6:	4601      	mov	r1, r0
   12ac8:	4630      	mov	r0, r6
   12aca:	f000 fc2d 	bl	13328 <on_tls_attach_res>
   12ace:	e04f      	b.n	12b70 <rpc_ip_event_handler+0x16c>
   12ad0:	f249 0302 	movw	r3, #36866	; 0x9002
   12ad4:	429d      	cmp	r5, r3
   12ad6:	f000 809e 	beq.w	12c16 <rpc_ip_event_handler+0x212>
   12ada:	d835      	bhi.n	12b48 <rpc_ip_event_handler+0x144>
   12adc:	f006 fc06 	bl	192ec <sock_has_stream_error>
   12ae0:	4607      	mov	r7, r0
   12ae2:	b9e0      	cbnz	r0, 12b1e <rpc_ip_event_handler+0x11a>
   12ae4:	2010      	movs	r0, #16
   12ae6:	f7fb fbf9 	bl	e2dc <nrf_modem_os_alloc>
   12aea:	4605      	mov	r5, r0
   12aec:	b1b8      	cbz	r0, 12b1e <rpc_ip_event_handler+0x11a>
   12aee:	4639      	mov	r1, r7
   12af0:	2210      	movs	r2, #16
   12af2:	f007 fe04 	bl	1a6fe <memset>
   12af6:	6833      	ldr	r3, [r6, #0]
   12af8:	606b      	str	r3, [r5, #4]
   12afa:	6873      	ldr	r3, [r6, #4]
   12afc:	812b      	strh	r3, [r5, #8]
   12afe:	8a71      	ldrh	r1, [r6, #18]
   12b00:	2900      	cmp	r1, #0
   12b02:	f000 8097 	beq.w	12c34 <rpc_ip_event_handler+0x230>
   12b06:	8a32      	ldrh	r2, [r6, #16]
   12b08:	f106 0014 	add.w	r0, r6, #20
   12b0c:	f006 fb3a 	bl	19184 <sockaddr_init>
   12b10:	60e8      	str	r0, [r5, #12]
   12b12:	2800      	cmp	r0, #0
   12b14:	f040 808e 	bne.w	12c34 <rpc_ip_event_handler+0x230>
   12b18:	4628      	mov	r0, r5
   12b1a:	f7fb fbe7 	bl	e2ec <nrf_modem_os_free>
   12b1e:	6830      	ldr	r0, [r6, #0]
   12b20:	f006 fb22 	bl	19168 <rpc_client_msg_data_rx_free>
   12b24:	4620      	mov	r0, r4
   12b26:	f006 fba3 	bl	19270 <sock_is_stream>
   12b2a:	b148      	cbz	r0, 12b40 <rpc_ip_event_handler+0x13c>
   12b2c:	4620      	mov	r0, r4
   12b2e:	f006 fbdd 	bl	192ec <sock_has_stream_error>
   12b32:	b928      	cbnz	r0, 12b40 <rpc_ip_event_handler+0x13c>
   12b34:	230c      	movs	r3, #12
   12b36:	61a3      	str	r3, [r4, #24]
   12b38:	7f23      	ldrb	r3, [r4, #28]
   12b3a:	f063 037e 	orn	r3, r3, #126	; 0x7e
   12b3e:	7723      	strb	r3, [r4, #28]
   12b40:	4620      	mov	r0, r4
   12b42:	f006 fb9a 	bl	1927a <sock_is_datagram>
   12b46:	e025      	b.n	12b94 <rpc_ip_event_handler+0x190>
   12b48:	f249 0303 	movw	r3, #36867	; 0x9003
   12b4c:	429d      	cmp	r5, r3
   12b4e:	d018      	beq.n	12b82 <rpc_ip_event_handler+0x17e>
   12b50:	f249 0382 	movw	r3, #36994	; 0x9082
   12b54:	429d      	cmp	r5, r3
   12b56:	d18c      	bne.n	12a72 <rpc_ip_event_handler+0x6e>
   12b58:	4601      	mov	r1, r0
   12b5a:	4630      	mov	r0, r6
   12b5c:	f000 fbf8 	bl	13350 <on_tls_handshake_ntf>
   12b60:	e006      	b.n	12b70 <rpc_ip_event_handler+0x16c>
   12b62:	6973      	ldr	r3, [r6, #20]
   12b64:	b90b      	cbnz	r3, 12b6a <rpc_ip_event_handler+0x166>
   12b66:	69b3      	ldr	r3, [r6, #24]
   12b68:	6003      	str	r3, [r0, #0]
   12b6a:	4630      	mov	r0, r6
   12b6c:	f007 f90d 	bl	19d8a <res_forward>
   12b70:	4605      	mov	r5, r0
   12b72:	e010      	b.n	12b96 <rpc_ip_event_handler+0x192>
   12b74:	7f03      	ldrb	r3, [r0, #28]
   12b76:	f023 0303 	bic.w	r3, r3, #3
   12b7a:	f043 0303 	orr.w	r3, r3, #3
   12b7e:	7703      	strb	r3, [r0, #28]
   12b80:	e7f3      	b.n	12b6a <rpc_ip_event_handler+0x166>
   12b82:	7f03      	ldrb	r3, [r0, #28]
   12b84:	f043 0301 	orr.w	r3, r3, #1
   12b88:	7703      	strb	r3, [r0, #28]
   12b8a:	6930      	ldr	r0, [r6, #16]
   12b8c:	2869      	cmp	r0, #105	; 0x69
   12b8e:	d112      	bne.n	12bb6 <rpc_ip_event_handler+0x1b2>
   12b90:	2368      	movs	r3, #104	; 0x68
   12b92:	61a3      	str	r3, [r4, #24]
   12b94:	2500      	movs	r5, #0
   12b96:	4620      	mov	r0, r4
   12b98:	f006 fbb6 	bl	19308 <sock_has_pollcb>
   12b9c:	b110      	cbz	r0, 12ba4 <rpc_ip_event_handler+0x1a0>
   12b9e:	4620      	mov	r0, r4
   12ba0:	f006 fb29 	bl	191f6 <sock_pollcb>
   12ba4:	b2e8      	uxtb	r0, r5
   12ba6:	e76c      	b.n	12a82 <rpc_ip_event_handler+0x7e>
   12ba8:	7f03      	ldrb	r3, [r0, #28]
   12baa:	68f5      	ldr	r5, [r6, #12]
   12bac:	f36f 0382 	bfc	r3, #2, #1
   12bb0:	7703      	strb	r3, [r0, #28]
   12bb2:	6970      	ldr	r0, [r6, #20]
   12bb4:	b118      	cbz	r0, 12bbe <rpc_ip_event_handler+0x1ba>
   12bb6:	f000 fc71 	bl	1349c <rpc_error_to_nrf_errno>
   12bba:	61a0      	str	r0, [r4, #24]
   12bbc:	e7ea      	b.n	12b94 <rpc_ip_event_handler+0x190>
   12bbe:	4620      	mov	r0, r4
   12bc0:	f006 fb65 	bl	1928e <sock_proto_is_secure>
   12bc4:	b918      	cbnz	r0, 12bce <rpc_ip_event_handler+0x1ca>
   12bc6:	7f23      	ldrb	r3, [r4, #28]
   12bc8:	f043 0308 	orr.w	r3, r3, #8
   12bcc:	7723      	strb	r3, [r4, #28]
   12bce:	4620      	mov	r0, r4
   12bd0:	f006 fb5d 	bl	1928e <sock_proto_is_secure>
   12bd4:	2800      	cmp	r0, #0
   12bd6:	d0cb      	beq.n	12b70 <rpc_ip_event_handler+0x16c>
   12bd8:	2d00      	cmp	r5, #0
   12bda:	d0dc      	beq.n	12b96 <rpc_ip_event_handler+0x192>
   12bdc:	2100      	movs	r1, #0
   12bde:	4620      	mov	r0, r4
   12be0:	f000 fbd0 	bl	13384 <tls_attach>
   12be4:	e7d6      	b.n	12b94 <rpc_ip_event_handler+0x190>
   12be6:	7f43      	ldrb	r3, [r0, #29]
   12be8:	3b01      	subs	r3, #1
   12bea:	7743      	strb	r3, [r0, #29]
   12bec:	6973      	ldr	r3, [r6, #20]
   12bee:	2b00      	cmp	r3, #0
   12bf0:	d1bb      	bne.n	12b6a <rpc_ip_event_handler+0x166>
   12bf2:	4630      	mov	r0, r6
   12bf4:	f007 f8c7 	bl	19d86 <res_cookie_get>
   12bf8:	69b2      	ldr	r2, [r6, #24]
   12bfa:	6843      	ldr	r3, [r0, #4]
   12bfc:	601a      	str	r2, [r3, #0]
   12bfe:	6842      	ldr	r2, [r0, #4]
   12c00:	7f13      	ldrb	r3, [r2, #28]
   12c02:	f043 0308 	orr.w	r3, r3, #8
   12c06:	7713      	strb	r3, [r2, #28]
   12c08:	6843      	ldr	r3, [r0, #4]
   12c0a:	6922      	ldr	r2, [r4, #16]
   12c0c:	611a      	str	r2, [r3, #16]
   12c0e:	6843      	ldr	r3, [r0, #4]
   12c10:	6962      	ldr	r2, [r4, #20]
   12c12:	615a      	str	r2, [r3, #20]
   12c14:	e7a9      	b.n	12b6a <rpc_ip_event_handler+0x166>
   12c16:	7f43      	ldrb	r3, [r0, #29]
   12c18:	3301      	adds	r3, #1
   12c1a:	7743      	strb	r3, [r0, #29]
   12c1c:	e7ba      	b.n	12b94 <rpc_ip_event_handler+0x190>
   12c1e:	4630      	mov	r0, r6
   12c20:	f007 f8b1 	bl	19d86 <res_cookie_get>
   12c24:	6973      	ldr	r3, [r6, #20]
   12c26:	b913      	cbnz	r3, 12c2e <rpc_ip_event_handler+0x22a>
   12c28:	69b3      	ldr	r3, [r6, #24]
   12c2a:	6043      	str	r3, [r0, #4]
   12c2c:	e79d      	b.n	12b6a <rpc_ip_event_handler+0x166>
   12c2e:	f04f 33ff 	mov.w	r3, #4294967295
   12c32:	e7fa      	b.n	12c2a <rpc_ip_event_handler+0x226>
   12c34:	4629      	mov	r1, r5
   12c36:	4620      	mov	r0, r4
   12c38:	f006 fafa 	bl	19230 <sock_pkt_append>
   12c3c:	e7aa      	b.n	12b94 <rpc_ip_event_handler+0x190>
   12c3e:	bf00      	nop
   12c40:	2000eca6 	.word	0x2000eca6

00012c44 <nrf_close>:
   12c44:	b570      	push	{r4, r5, r6, lr}
   12c46:	4604      	mov	r4, r0
   12c48:	f7ff fcc0 	bl	125cc <sock_find>
   12c4c:	4605      	mov	r5, r0
   12c4e:	b930      	cbnz	r0, 12c5e <nrf_close+0x1a>
   12c50:	2009      	movs	r0, #9
   12c52:	f005 fde7 	bl	18824 <nrf_modem_os_errno_set>
   12c56:	f04f 36ff 	mov.w	r6, #4294967295
   12c5a:	4630      	mov	r0, r6
   12c5c:	bd70      	pop	{r4, r5, r6, pc}
   12c5e:	f001 f91b 	bl	13e98 <nrf_modem_state_is_initialized>
   12c62:	b960      	cbnz	r0, 12c7e <nrf_close+0x3a>
   12c64:	2600      	movs	r6, #0
   12c66:	4628      	mov	r0, r5
   12c68:	f006 fb25 	bl	192b6 <sock_is_attaching>
   12c6c:	b118      	cbz	r0, 12c76 <nrf_close+0x32>
   12c6e:	4b0e      	ldr	r3, [pc, #56]	; (12ca8 <nrf_close+0x64>)
   12c70:	6818      	ldr	r0, [r3, #0]
   12c72:	f005 fddf 	bl	18834 <nrf_modem_os_sem_give>
   12c76:	4620      	mov	r0, r4
   12c78:	f7ff fcba 	bl	125f0 <_sock_close>
   12c7c:	e7ed      	b.n	12c5a <nrf_close+0x16>
   12c7e:	2000      	movs	r0, #0
   12c80:	f006 fa4c 	bl	1911c <rpc_client_msg_alloc>
   12c84:	4601      	mov	r1, r0
   12c86:	b908      	cbnz	r0, 12c8c <nrf_close+0x48>
   12c88:	2069      	movs	r0, #105	; 0x69
   12c8a:	e7e2      	b.n	12c52 <nrf_close+0xe>
   12c8c:	6104      	str	r4, [r0, #16]
   12c8e:	f247 0009 	movw	r0, #28681	; 0x7009
   12c92:	f007 f84a 	bl	19d2a <req_forward>
   12c96:	2800      	cmp	r0, #0
   12c98:	d0e4      	beq.n	12c64 <nrf_close+0x20>
   12c9a:	2816      	cmp	r0, #22
   12c9c:	d0e2      	beq.n	12c64 <nrf_close+0x20>
   12c9e:	f005 fdc1 	bl	18824 <nrf_modem_os_errno_set>
   12ca2:	f04f 36ff 	mov.w	r6, #4294967295
   12ca6:	e7de      	b.n	12c66 <nrf_close+0x22>
   12ca8:	2000d6a4 	.word	0x2000d6a4

00012cac <nrf_sendto>:
   12cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cb0:	4698      	mov	r8, r3
   12cb2:	2300      	movs	r3, #0
   12cb4:	b085      	sub	sp, #20
   12cb6:	4682      	mov	sl, r0
   12cb8:	4689      	mov	r9, r1
   12cba:	4616      	mov	r6, r2
   12cbc:	e9cd 3302 	strd	r3, r3, [sp, #8]
   12cc0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   12cc2:	f7ff fc83 	bl	125cc <sock_find>
   12cc6:	4605      	mov	r5, r0
   12cc8:	b940      	cbnz	r0, 12cdc <nrf_sendto+0x30>
   12cca:	2009      	movs	r0, #9
   12ccc:	f005 fdaa 	bl	18824 <nrf_modem_os_errno_set>
   12cd0:	f04f 34ff 	mov.w	r4, #4294967295
   12cd4:	4620      	mov	r0, r4
   12cd6:	b005      	add	sp, #20
   12cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cdc:	f038 0340 	bics.w	r3, r8, #64	; 0x40
   12ce0:	d001      	beq.n	12ce6 <nrf_sendto+0x3a>
   12ce2:	205f      	movs	r0, #95	; 0x5f
   12ce4:	e7f2      	b.n	12ccc <nrf_sendto+0x20>
   12ce6:	f006 fb14 	bl	19312 <sock_has_rai_no_data>
   12cea:	b128      	cbz	r0, 12cf8 <nrf_sendto+0x4c>
   12cec:	4628      	mov	r0, r5
   12cee:	f006 fb00 	bl	192f2 <sock_has_error>
   12cf2:	b128      	cbz	r0, 12d00 <nrf_sendto+0x54>
   12cf4:	69a8      	ldr	r0, [r5, #24]
   12cf6:	e7e9      	b.n	12ccc <nrf_sendto+0x20>
   12cf8:	4628      	mov	r0, r5
   12cfa:	f006 fae4 	bl	192c6 <sock_is_closed>
   12cfe:	e7f8      	b.n	12cf2 <nrf_sendto+0x46>
   12d00:	4628      	mov	r0, r5
   12d02:	b1d7      	cbz	r7, 12d3a <nrf_sendto+0x8e>
   12d04:	f006 fab4 	bl	19270 <sock_is_stream>
   12d08:	bb00      	cbnz	r0, 12d4c <nrf_sendto+0xa0>
   12d0a:	4639      	mov	r1, r7
   12d0c:	4628      	mov	r0, r5
   12d0e:	f006 fb8c 	bl	1942a <sock_sockaddr_fam_is_valid>
   12d12:	b908      	cbnz	r0, 12d18 <nrf_sendto+0x6c>
   12d14:	206a      	movs	r0, #106	; 0x6a
   12d16:	e7d9      	b.n	12ccc <nrf_sendto+0x20>
   12d18:	4638      	mov	r0, r7
   12d1a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   12d1c:	f006 fb71 	bl	19402 <sock_sockaddr_len_is_valid>
   12d20:	b908      	cbnz	r0, 12d26 <nrf_sendto+0x7a>
   12d22:	2016      	movs	r0, #22
   12d24:	e7d2      	b.n	12ccc <nrf_sendto+0x20>
   12d26:	4628      	mov	r0, r5
   12d28:	f006 faa7 	bl	1927a <sock_is_datagram>
   12d2c:	b170      	cbz	r0, 12d4c <nrf_sendto+0xa0>
   12d2e:	4628      	mov	r0, r5
   12d30:	f006 faad 	bl	1928e <sock_proto_is_secure>
   12d34:	b150      	cbz	r0, 12d4c <nrf_sendto+0xa0>
   12d36:	207f      	movs	r0, #127	; 0x7f
   12d38:	e7c8      	b.n	12ccc <nrf_sendto+0x20>
   12d3a:	f006 fa9e 	bl	1927a <sock_is_datagram>
   12d3e:	b128      	cbz	r0, 12d4c <nrf_sendto+0xa0>
   12d40:	4628      	mov	r0, r5
   12d42:	f006 fab4 	bl	192ae <sock_is_connected>
   12d46:	b908      	cbnz	r0, 12d4c <nrf_sendto+0xa0>
   12d48:	2079      	movs	r0, #121	; 0x79
   12d4a:	e7bf      	b.n	12ccc <nrf_sendto+0x20>
   12d4c:	4628      	mov	r0, r5
   12d4e:	f006 fb20 	bl	19392 <sock_sndtimeo_ms_get>
   12d52:	9001      	str	r0, [sp, #4]
   12d54:	4628      	mov	r0, r5
   12d56:	f006 fab2 	bl	192be <sock_is_nonblock>
   12d5a:	bb78      	cbnz	r0, 12dbc <nrf_sendto+0x110>
   12d5c:	f3c8 1880 	ubfx	r8, r8, #6, #1
   12d60:	4628      	mov	r0, r5
   12d62:	f006 fa85 	bl	19270 <sock_is_stream>
   12d66:	b140      	cbz	r0, 12d7a <nrf_sendto+0xce>
   12d68:	4628      	mov	r0, r5
   12d6a:	f006 fa90 	bl	1928e <sock_proto_is_secure>
   12d6e:	b120      	cbz	r0, 12d7a <nrf_sendto+0xce>
   12d70:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
   12d74:	bf28      	it	cs
   12d76:	f44f 6600 	movcs.w	r6, #2048	; 0x800
   12d7a:	f006 f9f7 	bl	1916c <rpc_client_msg_data_tx_size>
   12d7e:	42b0      	cmp	r0, r6
   12d80:	d206      	bcs.n	12d90 <nrf_sendto+0xe4>
   12d82:	4628      	mov	r0, r5
   12d84:	f006 fa74 	bl	19270 <sock_is_stream>
   12d88:	b1d8      	cbz	r0, 12dc2 <nrf_sendto+0x116>
   12d8a:	f006 f9ef 	bl	1916c <rpc_client_msg_data_tx_size>
   12d8e:	4606      	mov	r6, r0
   12d90:	4628      	mov	r0, r5
   12d92:	f006 fab5 	bl	19300 <sock_has_flow_control>
   12d96:	b118      	cbz	r0, 12da0 <nrf_sendto+0xf4>
   12d98:	4628      	mov	r0, r5
   12d9a:	f006 fa94 	bl	192c6 <sock_is_closed>
   12d9e:	b190      	cbz	r0, 12dc6 <nrf_sendto+0x11a>
   12da0:	4630      	mov	r0, r6
   12da2:	f006 f9bb 	bl	1911c <rpc_client_msg_alloc>
   12da6:	4604      	mov	r4, r0
   12da8:	b9e0      	cbnz	r0, 12de4 <nrf_sendto+0x138>
   12daa:	2001      	movs	r0, #1
   12dac:	a901      	add	r1, sp, #4
   12dae:	f7fb f99b 	bl	e0e8 <nrf_modem_os_timedwait>
   12db2:	b998      	cbnz	r0, 12ddc <nrf_sendto+0x130>
   12db4:	f1b8 0f00 	cmp.w	r8, #0
   12db8:	d0f2      	beq.n	12da0 <nrf_sendto+0xf4>
   12dba:	e007      	b.n	12dcc <nrf_sendto+0x120>
   12dbc:	f04f 0801 	mov.w	r8, #1
   12dc0:	e7ce      	b.n	12d60 <nrf_sendto+0xb4>
   12dc2:	207a      	movs	r0, #122	; 0x7a
   12dc4:	e782      	b.n	12ccc <nrf_sendto+0x20>
   12dc6:	f1b8 0f00 	cmp.w	r8, #0
   12dca:	d001      	beq.n	12dd0 <nrf_sendto+0x124>
   12dcc:	200b      	movs	r0, #11
   12dce:	e77d      	b.n	12ccc <nrf_sendto+0x20>
   12dd0:	2002      	movs	r0, #2
   12dd2:	a901      	add	r1, sp, #4
   12dd4:	f7fb f988 	bl	e0e8 <nrf_modem_os_timedwait>
   12dd8:	2800      	cmp	r0, #0
   12dda:	d0d9      	beq.n	12d90 <nrf_sendto+0xe4>
   12ddc:	2800      	cmp	r0, #0
   12dde:	bfb8      	it	lt
   12de0:	4240      	neglt	r0, r0
   12de2:	e773      	b.n	12ccc <nrf_sendto+0x20>
   12de4:	f8c0 a010 	str.w	sl, [r0, #16]
   12de8:	f1b9 0f00 	cmp.w	r9, #0
   12dec:	d004      	beq.n	12df8 <nrf_sendto+0x14c>
   12dee:	4632      	mov	r2, r6
   12df0:	4649      	mov	r1, r9
   12df2:	6800      	ldr	r0, [r0, #0]
   12df4:	f007 fc76 	bl	1a6e4 <memcpy>
   12df8:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
   12dfc:	f1bb 0f00 	cmp.w	fp, #0
   12e00:	d001      	beq.n	12e06 <nrf_sendto+0x15a>
   12e02:	2300      	movs	r3, #0
   12e04:	632b      	str	r3, [r5, #48]	; 0x30
   12e06:	b3cf      	cbz	r7, 12e7c <nrf_sendto+0x1d0>
   12e08:	4628      	mov	r0, r5
   12e0a:	f006 fa31 	bl	19270 <sock_is_stream>
   12e0e:	bba8      	cbnz	r0, 12e7c <nrf_sendto+0x1d0>
   12e10:	2318      	movs	r3, #24
   12e12:	7260      	strb	r0, [r4, #9]
   12e14:	7223      	strb	r3, [r4, #8]
   12e16:	72a0      	strb	r0, [r4, #10]
   12e18:	72e0      	strb	r0, [r4, #11]
   12e1a:	f8c4 b014 	str.w	fp, [r4, #20]
   12e1e:	687b      	ldr	r3, [r7, #4]
   12e20:	2b01      	cmp	r3, #1
   12e22:	d012      	beq.n	12e4a <nrf_sendto+0x19e>
   12e24:	2b02      	cmp	r3, #2
   12e26:	d018      	beq.n	12e5a <nrf_sendto+0x1ae>
   12e28:	f247 0b07 	movw	fp, #28679	; 0x7007
   12e2c:	4620      	mov	r0, r4
   12e2e:	a902      	add	r1, sp, #8
   12e30:	f006 ffa7 	bl	19d82 <req_cookie_set>
   12e34:	4621      	mov	r1, r4
   12e36:	4658      	mov	r0, fp
   12e38:	f006 ff77 	bl	19d2a <req_forward>
   12e3c:	4603      	mov	r3, r0
   12e3e:	bb40      	cbnz	r0, 12e92 <nrf_sendto+0x1e6>
   12e40:	e9dd 0402 	ldrd	r0, r4, [sp, #8]
   12e44:	f006 f98d 	bl	19162 <rpc_client_msg_rx_free>
   12e48:	e744      	b.n	12cd4 <nrf_sendto+0x28>
   12e4a:	893b      	ldrh	r3, [r7, #8]
   12e4c:	76e0      	strb	r0, [r4, #27]
   12e4e:	8323      	strh	r3, [r4, #24]
   12e50:	2304      	movs	r3, #4
   12e52:	76a3      	strb	r3, [r4, #26]
   12e54:	68fb      	ldr	r3, [r7, #12]
   12e56:	61e3      	str	r3, [r4, #28]
   12e58:	e7e6      	b.n	12e28 <nrf_sendto+0x17c>
   12e5a:	893b      	ldrh	r3, [r7, #8]
   12e5c:	f104 021c 	add.w	r2, r4, #28
   12e60:	8323      	strh	r3, [r4, #24]
   12e62:	2310      	movs	r3, #16
   12e64:	76e0      	strb	r0, [r4, #27]
   12e66:	76a3      	strb	r3, [r4, #26]
   12e68:	f107 0120 	add.w	r1, r7, #32
   12e6c:	18fb      	adds	r3, r7, r3
   12e6e:	f853 0b04 	ldr.w	r0, [r3], #4
   12e72:	428b      	cmp	r3, r1
   12e74:	f842 0b04 	str.w	r0, [r2], #4
   12e78:	d1f9      	bne.n	12e6e <nrf_sendto+0x1c2>
   12e7a:	e7d5      	b.n	12e28 <nrf_sendto+0x17c>
   12e7c:	2300      	movs	r3, #0
   12e7e:	2204      	movs	r2, #4
   12e80:	f8c4 b014 	str.w	fp, [r4, #20]
   12e84:	7222      	strb	r2, [r4, #8]
   12e86:	f247 0b06 	movw	fp, #28678	; 0x7006
   12e8a:	7263      	strb	r3, [r4, #9]
   12e8c:	72a3      	strb	r3, [r4, #10]
   12e8e:	72e3      	strb	r3, [r4, #11]
   12e90:	e7cc      	b.n	12e2c <nrf_sendto+0x180>
   12e92:	280c      	cmp	r0, #12
   12e94:	dc0f      	bgt.n	12eb6 <nrf_sendto+0x20a>
   12e96:	280a      	cmp	r0, #10
   12e98:	dd10      	ble.n	12ebc <nrf_sendto+0x210>
   12e9a:	4b09      	ldr	r3, [pc, #36]	; (12ec0 <nrf_sendto+0x214>)
   12e9c:	781b      	ldrb	r3, [r3, #0]
   12e9e:	b92b      	cbnz	r3, 12eac <nrf_sendto+0x200>
   12ea0:	2001      	movs	r0, #1
   12ea2:	a901      	add	r1, sp, #4
   12ea4:	f7fb f920 	bl	e0e8 <nrf_modem_os_timedwait>
   12ea8:	2800      	cmp	r0, #0
   12eaa:	d197      	bne.n	12ddc <nrf_sendto+0x130>
   12eac:	f1b8 0f00 	cmp.w	r8, #0
   12eb0:	f43f af6e 	beq.w	12d90 <nrf_sendto+0xe4>
   12eb4:	e78a      	b.n	12dcc <nrf_sendto+0x120>
   12eb6:	288c      	cmp	r0, #140	; 0x8c
   12eb8:	f43f af08 	beq.w	12ccc <nrf_sendto+0x20>
   12ebc:	4618      	mov	r0, r3
   12ebe:	e705      	b.n	12ccc <nrf_sendto+0x20>
   12ec0:	2000eca6 	.word	0x2000eca6

00012ec4 <nrf_setsockopt>:
   12ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12ec8:	b085      	sub	sp, #20
   12eca:	4681      	mov	r9, r0
   12ecc:	4688      	mov	r8, r1
   12ece:	4617      	mov	r7, r2
   12ed0:	461e      	mov	r6, r3
   12ed2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   12ed4:	f7ff fb7a 	bl	125cc <sock_find>
   12ed8:	4604      	mov	r4, r0
   12eda:	b938      	cbnz	r0, 12eec <nrf_setsockopt+0x28>
   12edc:	2009      	movs	r0, #9
   12ede:	f005 fca1 	bl	18824 <nrf_modem_os_errno_set>
   12ee2:	f04f 30ff 	mov.w	r0, #4294967295
   12ee6:	b005      	add	sp, #20
   12ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12eec:	b916      	cbnz	r6, 12ef4 <nrf_setsockopt+0x30>
   12eee:	b10d      	cbz	r5, 12ef4 <nrf_setsockopt+0x30>
   12ef0:	2016      	movs	r0, #22
   12ef2:	e7f4      	b.n	12ede <nrf_setsockopt+0x1a>
   12ef4:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
   12ef8:	f000 80fe 	beq.w	130f8 <nrf_setsockopt+0x234>
   12efc:	dc0c      	bgt.n	12f18 <nrf_setsockopt+0x54>
   12efe:	f1b8 0f01 	cmp.w	r8, #1
   12f02:	d012      	beq.n	12f2a <nrf_setsockopt+0x66>
   12f04:	f1b8 0f06 	cmp.w	r8, #6
   12f08:	f000 80f0 	beq.w	130ec <nrf_setsockopt+0x228>
   12f0c:	f1b8 0f00 	cmp.w	r8, #0
   12f10:	f000 80f0 	beq.w	130f4 <nrf_setsockopt+0x230>
   12f14:	206d      	movs	r0, #109	; 0x6d
   12f16:	e7e2      	b.n	12ede <nrf_setsockopt+0x1a>
   12f18:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   12f1c:	f000 8092 	beq.w	13044 <nrf_setsockopt+0x180>
   12f20:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   12f24:	d1f6      	bne.n	12f14 <nrf_setsockopt+0x50>
   12f26:	2f1e      	cmp	r7, #30
   12f28:	e0e1      	b.n	130ee <nrf_setsockopt+0x22a>
   12f2a:	2f3c      	cmp	r7, #60	; 0x3c
   12f2c:	dcf2      	bgt.n	12f14 <nrf_setsockopt+0x50>
   12f2e:	2f31      	cmp	r7, #49	; 0x31
   12f30:	dc0f      	bgt.n	12f52 <nrf_setsockopt+0x8e>
   12f32:	2f15      	cmp	r7, #21
   12f34:	d046      	beq.n	12fc4 <nrf_setsockopt+0x100>
   12f36:	dc29      	bgt.n	12f8c <nrf_setsockopt+0xc8>
   12f38:	2f02      	cmp	r7, #2
   12f3a:	d03a      	beq.n	12fb2 <nrf_setsockopt+0xee>
   12f3c:	2f14      	cmp	r7, #20
   12f3e:	d1e9      	bne.n	12f14 <nrf_setsockopt+0x50>
   12f40:	f104 0020 	add.w	r0, r4, #32
   12f44:	2d00      	cmp	r5, #0
   12f46:	d143      	bne.n	12fd0 <nrf_setsockopt+0x10c>
   12f48:	2300      	movs	r3, #0
   12f4a:	6223      	str	r3, [r4, #32]
   12f4c:	6043      	str	r3, [r0, #4]
   12f4e:	2000      	movs	r0, #0
   12f50:	e7c9      	b.n	12ee6 <nrf_setsockopt+0x22>
   12f52:	3f32      	subs	r7, #50	; 0x32
   12f54:	2f0a      	cmp	r7, #10
   12f56:	d8dd      	bhi.n	12f14 <nrf_setsockopt+0x50>
   12f58:	a301      	add	r3, pc, #4	; (adr r3, 12f60 <nrf_setsockopt+0x9c>)
   12f5a:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
   12f5e:	bf00      	nop
   12f60:	00013029 	.word	0x00013029
   12f64:	0001300f 	.word	0x0001300f
   12f68:	00013017 	.word	0x00013017
   12f6c:	0001301d 	.word	0x0001301d
   12f70:	00013023 	.word	0x00013023
   12f74:	00012f15 	.word	0x00012f15
   12f78:	00012f15 	.word	0x00012f15
   12f7c:	00012f15 	.word	0x00012f15
   12f80:	00012f15 	.word	0x00012f15
   12f84:	00012f15 	.word	0x00012f15
   12f88:	00012fe1 	.word	0x00012fe1
   12f8c:	2f19      	cmp	r7, #25
   12f8e:	d1c1      	bne.n	12f14 <nrf_setsockopt+0x50>
   12f90:	2e00      	cmp	r6, #0
   12f92:	d0ad      	beq.n	12ef0 <nrf_setsockopt+0x2c>
   12f94:	2203      	movs	r2, #3
   12f96:	4969      	ldr	r1, [pc, #420]	; (1313c <nrf_setsockopt+0x278>)
   12f98:	4630      	mov	r0, r6
   12f9a:	f007 fb93 	bl	1a6c4 <memcmp>
   12f9e:	220a      	movs	r2, #10
   12fa0:	2100      	movs	r1, #0
   12fa2:	2800      	cmp	r0, #0
   12fa4:	d14c      	bne.n	13040 <nrf_setsockopt+0x17c>
   12fa6:	1cf0      	adds	r0, r6, #3
   12fa8:	f003 f81c 	bl	15fe4 <strtoul>
   12fac:	2504      	movs	r5, #4
   12fae:	9003      	str	r0, [sp, #12]
   12fb0:	ae03      	add	r6, sp, #12
   12fb2:	4628      	mov	r0, r5
   12fb4:	f006 f8b2 	bl	1911c <rpc_client_msg_alloc>
   12fb8:	4604      	mov	r4, r0
   12fba:	2800      	cmp	r0, #0
   12fbc:	f040 809e 	bne.w	130fc <nrf_setsockopt+0x238>
   12fc0:	2069      	movs	r0, #105	; 0x69
   12fc2:	e78c      	b.n	12ede <nrf_setsockopt+0x1a>
   12fc4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   12fc8:	b915      	cbnz	r5, 12fd0 <nrf_setsockopt+0x10c>
   12fca:	62a5      	str	r5, [r4, #40]	; 0x28
   12fcc:	6045      	str	r5, [r0, #4]
   12fce:	e7be      	b.n	12f4e <nrf_setsockopt+0x8a>
   12fd0:	2d08      	cmp	r5, #8
   12fd2:	462a      	mov	r2, r5
   12fd4:	4631      	mov	r1, r6
   12fd6:	bf28      	it	cs
   12fd8:	2208      	movcs	r2, #8
   12fda:	f007 fb83 	bl	1a6e4 <memcpy>
   12fde:	e7b6      	b.n	12f4e <nrf_setsockopt+0x8a>
   12fe0:	b17e      	cbz	r6, 13002 <nrf_setsockopt+0x13e>
   12fe2:	2d08      	cmp	r5, #8
   12fe4:	d184      	bne.n	12ef0 <nrf_setsockopt+0x2c>
   12fe6:	f7fe fdbf 	bl	11b68 <rpc_transport_data_rx_suspend>
   12fea:	e896 0003 	ldmia.w	r6, {r0, r1}
   12fee:	f104 0334 	add.w	r3, r4, #52	; 0x34
   12ff2:	e883 0003 	stmia.w	r3, {r0, r1}
   12ff6:	4620      	mov	r0, r4
   12ff8:	f006 f8fd 	bl	191f6 <sock_pollcb>
   12ffc:	f7fe fdba 	bl	11b74 <rpc_transport_data_rx_resume>
   13000:	e7a5      	b.n	12f4e <nrf_setsockopt+0x8a>
   13002:	2d00      	cmp	r5, #0
   13004:	f47f af74 	bne.w	12ef0 <nrf_setsockopt+0x2c>
   13008:	6365      	str	r5, [r4, #52]	; 0x34
   1300a:	63a5      	str	r5, [r4, #56]	; 0x38
   1300c:	e79f      	b.n	12f4e <nrf_setsockopt+0x8a>
   1300e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   13012:	6323      	str	r3, [r4, #48]	; 0x30
   13014:	e79b      	b.n	12f4e <nrf_setsockopt+0x8a>
   13016:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1301a:	e7fa      	b.n	13012 <nrf_setsockopt+0x14e>
   1301c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   13020:	e7f7      	b.n	13012 <nrf_setsockopt+0x14e>
   13022:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13026:	e7f4      	b.n	13012 <nrf_setsockopt+0x14e>
   13028:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   1302c:	6323      	str	r3, [r4, #48]	; 0x30
   1302e:	2300      	movs	r3, #0
   13030:	4648      	mov	r0, r9
   13032:	461a      	mov	r2, r3
   13034:	4619      	mov	r1, r3
   13036:	e9cd 3300 	strd	r3, r3, [sp]
   1303a:	f7ff fe37 	bl	12cac <nrf_sendto>
   1303e:	e752      	b.n	12ee6 <nrf_setsockopt+0x22>
   13040:	4630      	mov	r0, r6
   13042:	e7b1      	b.n	12fa8 <nrf_setsockopt+0xe4>
   13044:	1e7b      	subs	r3, r7, #1
   13046:	2b11      	cmp	r3, #17
   13048:	f63f af64 	bhi.w	12f14 <nrf_setsockopt+0x50>
   1304c:	a201      	add	r2, pc, #4	; (adr r2, 13054 <nrf_setsockopt+0x190>)
   1304e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13052:	bf00      	nop
   13054:	000130ad 	.word	0x000130ad
   13058:	000130dd 	.word	0x000130dd
   1305c:	00012fb3 	.word	0x00012fb3
   13060:	00012f15 	.word	0x00012f15
   13064:	000130cd 	.word	0x000130cd
   13068:	0001309d 	.word	0x0001309d
   1306c:	00012f15 	.word	0x00012f15
   13070:	00012f15 	.word	0x00012f15
   13074:	00012f15 	.word	0x00012f15
   13078:	00012f15 	.word	0x00012f15
   1307c:	00012f15 	.word	0x00012f15
   13080:	000130bd 	.word	0x000130bd
   13084:	00012fb3 	.word	0x00012fb3
   13088:	00012fb3 	.word	0x00012fb3
   1308c:	00012fb3 	.word	0x00012fb3
   13090:	00012f15 	.word	0x00012f15
   13094:	00012fb3 	.word	0x00012fb3
   13098:	00012fb3 	.word	0x00012fb3
   1309c:	462a      	mov	r2, r5
   1309e:	4631      	mov	r1, r6
   130a0:	4620      	mov	r0, r4
   130a2:	b005      	add	sp, #20
   130a4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   130a8:	f006 bd0c 	b.w	19ac4 <tls_setopt_role>
   130ac:	462a      	mov	r2, r5
   130ae:	4631      	mov	r1, r6
   130b0:	4620      	mov	r0, r4
   130b2:	b005      	add	sp, #20
   130b4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   130b8:	f006 bd18 	b.w	19aec <tls_setopt_taglist>
   130bc:	462a      	mov	r2, r5
   130be:	4631      	mov	r1, r6
   130c0:	4620      	mov	r0, r4
   130c2:	b005      	add	sp, #20
   130c4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   130c8:	f006 bd25 	b.w	19b16 <tls_setopt_sess_cache>
   130cc:	462a      	mov	r2, r5
   130ce:	4631      	mov	r1, r6
   130d0:	4620      	mov	r0, r4
   130d2:	b005      	add	sp, #20
   130d4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   130d8:	f006 bd2f 	b.w	19b3a <tls_setopt_peer_verify>
   130dc:	462a      	mov	r2, r5
   130de:	4631      	mov	r1, r6
   130e0:	4620      	mov	r0, r4
   130e2:	b005      	add	sp, #20
   130e4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   130e8:	f006 bd36 	b.w	19b58 <tls_setopt_hostname>
   130ec:	2f37      	cmp	r7, #55	; 0x37
   130ee:	f43f af60 	beq.w	12fb2 <nrf_setsockopt+0xee>
   130f2:	e70f      	b.n	12f14 <nrf_setsockopt+0x50>
   130f4:	2f1f      	cmp	r7, #31
   130f6:	e7fa      	b.n	130ee <nrf_setsockopt+0x22a>
   130f8:	2f20      	cmp	r7, #32
   130fa:	e7f8      	b.n	130ee <nrf_setsockopt+0x22a>
   130fc:	2300      	movs	r3, #0
   130fe:	2208      	movs	r2, #8
   13100:	7243      	strb	r3, [r0, #9]
   13102:	7202      	strb	r2, [r0, #8]
   13104:	7283      	strb	r3, [r0, #10]
   13106:	72c3      	strb	r3, [r0, #11]
   13108:	f8c0 9010 	str.w	r9, [r0, #16]
   1310c:	4640      	mov	r0, r8
   1310e:	f006 fdd5 	bl	19cbc <nrf_sol_to_rpc_sol>
   13112:	6160      	str	r0, [r4, #20]
   13114:	4638      	mov	r0, r7
   13116:	f000 f9b5 	bl	13484 <nrf_so_to_rpc_so>
   1311a:	4631      	mov	r1, r6
   1311c:	61a0      	str	r0, [r4, #24]
   1311e:	462a      	mov	r2, r5
   13120:	6820      	ldr	r0, [r4, #0]
   13122:	f007 fadf 	bl	1a6e4 <memcpy>
   13126:	4621      	mov	r1, r4
   13128:	f247 0003 	movw	r0, #28675	; 0x7003
   1312c:	6065      	str	r5, [r4, #4]
   1312e:	f006 fdfc 	bl	19d2a <req_forward>
   13132:	2800      	cmp	r0, #0
   13134:	f43f af0b 	beq.w	12f4e <nrf_setsockopt+0x8a>
   13138:	e6d1      	b.n	12ede <nrf_setsockopt+0x1a>
   1313a:	bf00      	nop
   1313c:	0001df24 	.word	0x0001df24

00013140 <nrf_getsockopt>:
   13140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13144:	9c08      	ldr	r4, [sp, #32]
   13146:	4681      	mov	r9, r0
   13148:	4688      	mov	r8, r1
   1314a:	4617      	mov	r7, r2
   1314c:	461e      	mov	r6, r3
   1314e:	f7ff fa3d 	bl	125cc <sock_find>
   13152:	b930      	cbnz	r0, 13162 <nrf_getsockopt+0x22>
   13154:	2009      	movs	r0, #9
   13156:	f005 fb65 	bl	18824 <nrf_modem_os_errno_set>
   1315a:	f04f 30ff 	mov.w	r0, #4294967295
   1315e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13162:	b106      	cbz	r6, 13166 <nrf_getsockopt+0x26>
   13164:	b90c      	cbnz	r4, 1316a <nrf_getsockopt+0x2a>
   13166:	200e      	movs	r0, #14
   13168:	e7f5      	b.n	13156 <nrf_getsockopt+0x16>
   1316a:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
   1316e:	f000 8096 	beq.w	1329e <nrf_getsockopt+0x15e>
   13172:	dc0c      	bgt.n	1318e <nrf_getsockopt+0x4e>
   13174:	f1b8 0f01 	cmp.w	r8, #1
   13178:	d011      	beq.n	1319e <nrf_getsockopt+0x5e>
   1317a:	f1b8 0f06 	cmp.w	r8, #6
   1317e:	f000 8082 	beq.w	13286 <nrf_getsockopt+0x146>
   13182:	f1b8 0f00 	cmp.w	r8, #0
   13186:	f000 8088 	beq.w	1329a <nrf_getsockopt+0x15a>
   1318a:	206d      	movs	r0, #109	; 0x6d
   1318c:	e7e3      	b.n	13156 <nrf_getsockopt+0x16>
   1318e:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   13192:	d024      	beq.n	131de <nrf_getsockopt+0x9e>
   13194:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   13198:	d1f7      	bne.n	1318a <nrf_getsockopt+0x4a>
   1319a:	2f1e      	cmp	r7, #30
   1319c:	e074      	b.n	13288 <nrf_getsockopt+0x148>
   1319e:	2f14      	cmp	r7, #20
   131a0:	d00a      	beq.n	131b8 <nrf_getsockopt+0x78>
   131a2:	2f15      	cmp	r7, #21
   131a4:	d013      	beq.n	131ce <nrf_getsockopt+0x8e>
   131a6:	2f04      	cmp	r7, #4
   131a8:	d1ef      	bne.n	1318a <nrf_getsockopt+0x4a>
   131aa:	6983      	ldr	r3, [r0, #24]
   131ac:	6027      	str	r7, [r4, #0]
   131ae:	6033      	str	r3, [r6, #0]
   131b0:	2300      	movs	r3, #0
   131b2:	6183      	str	r3, [r0, #24]
   131b4:	2000      	movs	r0, #0
   131b6:	e7d2      	b.n	1315e <nrf_getsockopt+0x1e>
   131b8:	6822      	ldr	r2, [r4, #0]
   131ba:	f100 0120 	add.w	r1, r0, #32
   131be:	2a08      	cmp	r2, #8
   131c0:	bf28      	it	cs
   131c2:	2208      	movcs	r2, #8
   131c4:	6022      	str	r2, [r4, #0]
   131c6:	4630      	mov	r0, r6
   131c8:	f007 fa8c 	bl	1a6e4 <memcpy>
   131cc:	e7f2      	b.n	131b4 <nrf_getsockopt+0x74>
   131ce:	6822      	ldr	r2, [r4, #0]
   131d0:	f100 0128 	add.w	r1, r0, #40	; 0x28
   131d4:	2a08      	cmp	r2, #8
   131d6:	bf28      	it	cs
   131d8:	2208      	movcs	r2, #8
   131da:	6022      	str	r2, [r4, #0]
   131dc:	e7f3      	b.n	131c6 <nrf_getsockopt+0x86>
   131de:	1e7b      	subs	r3, r7, #1
   131e0:	2b12      	cmp	r3, #18
   131e2:	d8d2      	bhi.n	1318a <nrf_getsockopt+0x4a>
   131e4:	a201      	add	r2, pc, #4	; (adr r2, 131ec <nrf_getsockopt+0xac>)
   131e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   131ea:	bf00      	nop
   131ec:	00013259 	.word	0x00013259
   131f0:	0001326f 	.word	0x0001326f
   131f4:	0001328d 	.word	0x0001328d
   131f8:	0001328d 	.word	0x0001328d
   131fc:	0001324f 	.word	0x0001324f
   13200:	00013239 	.word	0x00013239
   13204:	0001318b 	.word	0x0001318b
   13208:	0001318b 	.word	0x0001318b
   1320c:	0001318b 	.word	0x0001318b
   13210:	0001318b 	.word	0x0001318b
   13214:	0001318b 	.word	0x0001318b
   13218:	00013245 	.word	0x00013245
   1321c:	0001318b 	.word	0x0001318b
   13220:	0001328d 	.word	0x0001328d
   13224:	0001328d 	.word	0x0001328d
   13228:	0001328d 	.word	0x0001328d
   1322c:	0001318b 	.word	0x0001318b
   13230:	0001318b 	.word	0x0001318b
   13234:	0001328d 	.word	0x0001328d
   13238:	2304      	movs	r3, #4
   1323a:	6023      	str	r3, [r4, #0]
   1323c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
   13240:	6033      	str	r3, [r6, #0]
   13242:	e7b7      	b.n	131b4 <nrf_getsockopt+0x74>
   13244:	2304      	movs	r3, #4
   13246:	6023      	str	r3, [r4, #0]
   13248:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
   1324c:	e7f8      	b.n	13240 <nrf_getsockopt+0x100>
   1324e:	2304      	movs	r3, #4
   13250:	6023      	str	r3, [r4, #0]
   13252:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
   13256:	e7f3      	b.n	13240 <nrf_getsockopt+0x100>
   13258:	f890 2047 	ldrb.w	r2, [r0, #71]	; 0x47
   1325c:	6823      	ldr	r3, [r4, #0]
   1325e:	0092      	lsls	r2, r2, #2
   13260:	429a      	cmp	r2, r3
   13262:	bf28      	it	cs
   13264:	461a      	movcs	r2, r3
   13266:	f100 0148 	add.w	r1, r0, #72	; 0x48
   1326a:	6022      	str	r2, [r4, #0]
   1326c:	e7ab      	b.n	131c6 <nrf_getsockopt+0x86>
   1326e:	6c05      	ldr	r5, [r0, #64]	; 0x40
   13270:	4628      	mov	r0, r5
   13272:	f7f5 fdbf 	bl	8df4 <strlen>
   13276:	6823      	ldr	r3, [r4, #0]
   13278:	1c42      	adds	r2, r0, #1
   1327a:	429a      	cmp	r2, r3
   1327c:	bf28      	it	cs
   1327e:	461a      	movcs	r2, r3
   13280:	4629      	mov	r1, r5
   13282:	6022      	str	r2, [r4, #0]
   13284:	e79f      	b.n	131c6 <nrf_getsockopt+0x86>
   13286:	2f37      	cmp	r7, #55	; 0x37
   13288:	f47f af7f 	bne.w	1318a <nrf_getsockopt+0x4a>
   1328c:	6820      	ldr	r0, [r4, #0]
   1328e:	f005 ff45 	bl	1911c <rpc_client_msg_alloc>
   13292:	4605      	mov	r5, r0
   13294:	b928      	cbnz	r0, 132a2 <nrf_getsockopt+0x162>
   13296:	2069      	movs	r0, #105	; 0x69
   13298:	e75d      	b.n	13156 <nrf_getsockopt+0x16>
   1329a:	2f1f      	cmp	r7, #31
   1329c:	e7f4      	b.n	13288 <nrf_getsockopt+0x148>
   1329e:	2f20      	cmp	r7, #32
   132a0:	e7f2      	b.n	13288 <nrf_getsockopt+0x148>
   132a2:	2300      	movs	r3, #0
   132a4:	2208      	movs	r2, #8
   132a6:	7243      	strb	r3, [r0, #9]
   132a8:	7202      	strb	r2, [r0, #8]
   132aa:	7283      	strb	r3, [r0, #10]
   132ac:	72c3      	strb	r3, [r0, #11]
   132ae:	f8c0 9010 	str.w	r9, [r0, #16]
   132b2:	4640      	mov	r0, r8
   132b4:	f006 fd02 	bl	19cbc <nrf_sol_to_rpc_sol>
   132b8:	6168      	str	r0, [r5, #20]
   132ba:	4638      	mov	r0, r7
   132bc:	f000 f8e2 	bl	13484 <nrf_so_to_rpc_so>
   132c0:	4629      	mov	r1, r5
   132c2:	61a8      	str	r0, [r5, #24]
   132c4:	f247 0004 	movw	r0, #28676	; 0x7004
   132c8:	f8d5 8000 	ldr.w	r8, [r5]
   132cc:	f006 fd2d 	bl	19d2a <req_forward>
   132d0:	4607      	mov	r7, r0
   132d2:	b120      	cbz	r0, 132de <nrf_getsockopt+0x19e>
   132d4:	4640      	mov	r0, r8
   132d6:	f005 ff4d 	bl	19174 <rpc_client_msg_data_tx_free>
   132da:	4638      	mov	r0, r7
   132dc:	e73b      	b.n	13156 <nrf_getsockopt+0x16>
   132de:	686a      	ldr	r2, [r5, #4]
   132e0:	6823      	ldr	r3, [r4, #0]
   132e2:	4641      	mov	r1, r8
   132e4:	429a      	cmp	r2, r3
   132e6:	bf28      	it	cs
   132e8:	461a      	movcs	r2, r3
   132ea:	4630      	mov	r0, r6
   132ec:	6022      	str	r2, [r4, #0]
   132ee:	f007 f9f9 	bl	1a6e4 <memcpy>
   132f2:	4640      	mov	r0, r8
   132f4:	f005 ff3e 	bl	19174 <rpc_client_msg_data_tx_free>
   132f8:	e75c      	b.n	131b4 <nrf_getsockopt+0x74>
   132fa:	bf00      	nop

000132fc <rpc_ip_init>:
   132fc:	b508      	push	{r3, lr}
   132fe:	f7ff f923 	bl	12548 <sock_init>
   13302:	f7ff f9eb 	bl	126dc <addrinfo_init>
   13306:	2200      	movs	r2, #0
   13308:	4b05      	ldr	r3, [pc, #20]	; (13320 <rpc_ip_init+0x24>)
   1330a:	4806      	ldr	r0, [pc, #24]	; (13324 <rpc_ip_init+0x28>)
   1330c:	701a      	strb	r2, [r3, #0]
   1330e:	2201      	movs	r2, #1
   13310:	4611      	mov	r1, r2
   13312:	f7fa ffab 	bl	e26c <nrf_modem_os_sem_init>
   13316:	2800      	cmp	r0, #0
   13318:	bf18      	it	ne
   1331a:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   1331e:	bd08      	pop	{r3, pc}
   13320:	2000eca6 	.word	0x2000eca6
   13324:	2000d6a4 	.word	0x2000d6a4

00013328 <on_tls_attach_res>:
   13328:	b510      	push	{r4, lr}
   1332a:	6943      	ldr	r3, [r0, #20]
   1332c:	460c      	mov	r4, r1
   1332e:	b15b      	cbz	r3, 13348 <on_tls_attach_res+0x20>
   13330:	7f0b      	ldrb	r3, [r1, #28]
   13332:	f36f 1304 	bfc	r3, #4, #1
   13336:	770b      	strb	r3, [r1, #28]
   13338:	6940      	ldr	r0, [r0, #20]
   1333a:	f000 f8af 	bl	1349c <rpc_error_to_nrf_errno>
   1333e:	4b03      	ldr	r3, [pc, #12]	; (1334c <on_tls_attach_res+0x24>)
   13340:	61a0      	str	r0, [r4, #24]
   13342:	6818      	ldr	r0, [r3, #0]
   13344:	f005 fa76 	bl	18834 <nrf_modem_os_sem_give>
   13348:	2000      	movs	r0, #0
   1334a:	bd10      	pop	{r4, pc}
   1334c:	2000d6a4 	.word	0x2000d6a4

00013350 <on_tls_handshake_ntf>:
   13350:	b510      	push	{r4, lr}
   13352:	7f0b      	ldrb	r3, [r1, #28]
   13354:	460c      	mov	r4, r1
   13356:	f36f 1304 	bfc	r3, #4, #1
   1335a:	770b      	strb	r3, [r1, #28]
   1335c:	6900      	ldr	r0, [r0, #16]
   1335e:	b958      	cbnz	r0, 13378 <on_tls_handshake_ntf+0x28>
   13360:	b2db      	uxtb	r3, r3
   13362:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   13366:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1336a:	770b      	strb	r3, [r1, #28]
   1336c:	4b04      	ldr	r3, [pc, #16]	; (13380 <on_tls_handshake_ntf+0x30>)
   1336e:	6818      	ldr	r0, [r3, #0]
   13370:	f005 fa60 	bl	18834 <nrf_modem_os_sem_give>
   13374:	2000      	movs	r0, #0
   13376:	bd10      	pop	{r4, pc}
   13378:	f000 f890 	bl	1349c <rpc_error_to_nrf_errno>
   1337c:	61a0      	str	r0, [r4, #24]
   1337e:	e7f5      	b.n	1336c <on_tls_handshake_ntf+0x1c>
   13380:	2000d6a4 	.word	0x2000d6a4

00013384 <tls_attach>:
   13384:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13388:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 13470 <tls_attach+0xec>
   1338c:	4605      	mov	r5, r0
   1338e:	f8d8 0000 	ldr.w	r0, [r8]
   13392:	9101      	str	r1, [sp, #4]
   13394:	f005 fa50 	bl	18838 <nrf_modem_os_sem_take>
   13398:	4607      	mov	r7, r0
   1339a:	b150      	cbz	r0, 133b2 <tls_attach+0x2e>
   1339c:	9b01      	ldr	r3, [sp, #4]
   1339e:	2b00      	cmp	r3, #0
   133a0:	d163      	bne.n	1346a <tls_attach+0xe6>
   133a2:	2310      	movs	r3, #16
   133a4:	61ab      	str	r3, [r5, #24]
   133a6:	f04f 37ff 	mov.w	r7, #4294967295
   133aa:	4638      	mov	r0, r7
   133ac:	b002      	add	sp, #8
   133ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   133b2:	6c28      	ldr	r0, [r5, #64]	; 0x40
   133b4:	b1a8      	cbz	r0, 133e2 <tls_attach+0x5e>
   133b6:	f7f5 fd1d 	bl	8df4 <strlen>
   133ba:	1c46      	adds	r6, r0, #1
   133bc:	4630      	mov	r0, r6
   133be:	f005 fead 	bl	1911c <rpc_client_msg_alloc>
   133c2:	4604      	mov	r4, r0
   133c4:	b978      	cbnz	r0, 133e6 <tls_attach+0x62>
   133c6:	4628      	mov	r0, r5
   133c8:	f005 ff79 	bl	192be <sock_is_nonblock>
   133cc:	b108      	cbz	r0, 133d2 <tls_attach+0x4e>
   133ce:	2369      	movs	r3, #105	; 0x69
   133d0:	61ab      	str	r3, [r5, #24]
   133d2:	f8d8 0000 	ldr.w	r0, [r8]
   133d6:	f005 fa2d 	bl	18834 <nrf_modem_os_sem_give>
   133da:	2069      	movs	r0, #105	; 0x69
   133dc:	f005 fa22 	bl	18824 <nrf_modem_os_errno_set>
   133e0:	e7e1      	b.n	133a6 <tls_attach+0x22>
   133e2:	463e      	mov	r6, r7
   133e4:	e7ea      	b.n	133bc <tls_attach+0x38>
   133e6:	682b      	ldr	r3, [r5, #0]
   133e8:	2204      	movs	r2, #4
   133ea:	6103      	str	r3, [r0, #16]
   133ec:	2300      	movs	r3, #0
   133ee:	7202      	strb	r2, [r0, #8]
   133f0:	7243      	strb	r3, [r0, #9]
   133f2:	7283      	strb	r3, [r0, #10]
   133f4:	72c3      	strb	r3, [r0, #11]
   133f6:	f895 2047 	ldrb.w	r2, [r5, #71]	; 0x47
   133fa:	f105 0144 	add.w	r1, r5, #68	; 0x44
   133fe:	3201      	adds	r2, #1
   13400:	0092      	lsls	r2, r2, #2
   13402:	6082      	str	r2, [r0, #8]
   13404:	3014      	adds	r0, #20
   13406:	f007 f96d 	bl	1a6e4 <memcpy>
   1340a:	b1e6      	cbz	r6, 13446 <tls_attach+0xc2>
   1340c:	4632      	mov	r2, r6
   1340e:	6c29      	ldr	r1, [r5, #64]	; 0x40
   13410:	6820      	ldr	r0, [r4, #0]
   13412:	f007 fafb 	bl	1aa0c <strncpy>
   13416:	6066      	str	r6, [r4, #4]
   13418:	7f2b      	ldrb	r3, [r5, #28]
   1341a:	2004      	movs	r0, #4
   1341c:	f043 0310 	orr.w	r3, r3, #16
   13420:	4622      	mov	r2, r4
   13422:	f247 0181 	movw	r1, #28801	; 0x7081
   13426:	772b      	strb	r3, [r5, #28]
   13428:	f005 fe94 	bl	19154 <rpc_client_msg_send>
   1342c:	4628      	mov	r0, r5
   1342e:	f005 ff46 	bl	192be <sock_is_nonblock>
   13432:	2800      	cmp	r0, #0
   13434:	d1b9      	bne.n	133aa <tls_attach+0x26>
   13436:	4628      	mov	r0, r5
   13438:	f005 ff3d 	bl	192b6 <sock_is_attaching>
   1343c:	b940      	cbnz	r0, 13450 <tls_attach+0xcc>
   1343e:	69a8      	ldr	r0, [r5, #24]
   13440:	2800      	cmp	r0, #0
   13442:	d0b2      	beq.n	133aa <tls_attach+0x26>
   13444:	e7ca      	b.n	133dc <tls_attach+0x58>
   13446:	7026      	strb	r6, [r4, #0]
   13448:	7066      	strb	r6, [r4, #1]
   1344a:	70a6      	strb	r6, [r4, #2]
   1344c:	70e6      	strb	r6, [r4, #3]
   1344e:	e7e2      	b.n	13416 <tls_attach+0x92>
   13450:	2002      	movs	r0, #2
   13452:	a901      	add	r1, sp, #4
   13454:	f7fa fe48 	bl	e0e8 <nrf_modem_os_timedwait>
   13458:	f110 0f0b 	cmn.w	r0, #11
   1345c:	d005      	beq.n	1346a <tls_attach+0xe6>
   1345e:	2800      	cmp	r0, #0
   13460:	d0e9      	beq.n	13436 <tls_attach+0xb2>
   13462:	2800      	cmp	r0, #0
   13464:	bfb8      	it	lt
   13466:	4240      	neglt	r0, r0
   13468:	e7b8      	b.n	133dc <tls_attach+0x58>
   1346a:	2074      	movs	r0, #116	; 0x74
   1346c:	e7b6      	b.n	133dc <tls_attach+0x58>
   1346e:	bf00      	nop
   13470:	2000d6a4 	.word	0x2000d6a4

00013474 <nrf_af_to_rpc_af>:
   13474:	2803      	cmp	r0, #3
   13476:	bf9c      	itt	ls
   13478:	4b01      	ldrls	r3, [pc, #4]	; (13480 <nrf_af_to_rpc_af+0xc>)
   1347a:	5618      	ldrsbls	r0, [r3, r0]
   1347c:	4770      	bx	lr
   1347e:	bf00      	nop
   13480:	0001df28 	.word	0x0001df28

00013484 <nrf_so_to_rpc_so>:
   13484:	3802      	subs	r0, #2
   13486:	2835      	cmp	r0, #53	; 0x35
   13488:	bf9a      	itte	ls
   1348a:	4b03      	ldrls	r3, [pc, #12]	; (13498 <nrf_so_to_rpc_so+0x14>)
   1348c:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   13490:	f04f 30ff 	movhi.w	r0, #4294967295
   13494:	4770      	bx	lr
   13496:	bf00      	nop
   13498:	0001bc9c 	.word	0x0001bc9c

0001349c <rpc_error_to_nrf_errno>:
   1349c:	2870      	cmp	r0, #112	; 0x70
   1349e:	bf9a      	itte	ls
   134a0:	4b02      	ldrls	r3, [pc, #8]	; (134ac <rpc_error_to_nrf_errno+0x10>)
   134a2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   134a6:	4802      	ldrhi	r0, [pc, #8]	; (134b0 <rpc_error_to_nrf_errno+0x14>)
   134a8:	4770      	bx	lr
   134aa:	bf00      	nop
   134ac:	0001bad8 	.word	0x0001bad8
   134b0:	baadbaad 	.word	0xbaadbaad

000134b4 <send_message>:
   134b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   134b6:	4605      	mov	r5, r0
   134b8:	460e      	mov	r6, r1
   134ba:	4614      	mov	r4, r2
   134bc:	f000 fcec 	bl	13e98 <nrf_modem_state_is_initialized>
   134c0:	2800      	cmp	r0, #0
   134c2:	d05b      	beq.n	1357c <send_message+0xc8>
   134c4:	2300      	movs	r3, #0
   134c6:	4f2f      	ldr	r7, [pc, #188]	; (13584 <send_message+0xd0>)
   134c8:	4632      	mov	r2, r6
   134ca:	4629      	mov	r1, r5
   134cc:	2007      	movs	r0, #7
   134ce:	607b      	str	r3, [r7, #4]
   134d0:	f005 fe40 	bl	19154 <rpc_client_msg_send>
   134d4:	f04f 33ff 	mov.w	r3, #4294967295
   134d8:	9301      	str	r3, [sp, #4]
   134da:	2002      	movs	r0, #2
   134dc:	a901      	add	r1, sp, #4
   134de:	f7fa fe03 	bl	e0e8 <nrf_modem_os_timedwait>
   134e2:	687d      	ldr	r5, [r7, #4]
   134e4:	4606      	mov	r6, r0
   134e6:	b92d      	cbnz	r5, 134f4 <send_message+0x40>
   134e8:	f110 0f6e 	cmn.w	r0, #110	; 0x6e
   134ec:	d1f5      	bne.n	134da <send_message+0x26>
   134ee:	4630      	mov	r0, r6
   134f0:	b003      	add	sp, #12
   134f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   134f4:	f110 0f6e 	cmn.w	r0, #110	; 0x6e
   134f8:	d0f9      	beq.n	134ee <send_message+0x3a>
   134fa:	686b      	ldr	r3, [r5, #4]
   134fc:	2b02      	cmp	r3, #2
   134fe:	d034      	beq.n	1356a <send_message+0xb6>
   13500:	f647 72ff 	movw	r2, #32767	; 0x7fff
   13504:	4293      	cmp	r3, r2
   13506:	d033      	beq.n	13570 <send_message+0xbc>
   13508:	bbab      	cbnz	r3, 13576 <send_message+0xc2>
   1350a:	b344      	cbz	r4, 1355e <send_message+0xaa>
   1350c:	f242 0309 	movw	r3, #8201	; 0x2009
   13510:	883a      	ldrh	r2, [r7, #0]
   13512:	429a      	cmp	r2, r3
   13514:	d123      	bne.n	1355e <send_message+0xaa>
   13516:	4620      	mov	r0, r4
   13518:	892b      	ldrh	r3, [r5, #8]
   1351a:	2280      	movs	r2, #128	; 0x80
   1351c:	f840 3b04 	str.w	r3, [r0], #4
   13520:	f105 010a 	add.w	r1, r5, #10
   13524:	f007 f8de 	bl	1a6e4 <memcpy>
   13528:	2280      	movs	r2, #128	; 0x80
   1352a:	f105 018a 	add.w	r1, r5, #138	; 0x8a
   1352e:	f104 0084 	add.w	r0, r4, #132	; 0x84
   13532:	f007 f8d7 	bl	1a6e4 <memcpy>
   13536:	f8d5 310a 	ldr.w	r3, [r5, #266]	; 0x10a
   1353a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1353e:	f8d5 310e 	ldr.w	r3, [r5, #270]	; 0x10e
   13542:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   13546:	f8d5 3112 	ldr.w	r3, [r5, #274]	; 0x112
   1354a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   1354e:	f8d5 3116 	ldr.w	r3, [r5, #278]	; 0x116
   13552:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   13556:	f8d5 311a 	ldr.w	r3, [r5, #282]	; 0x11a
   1355a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1355e:	6878      	ldr	r0, [r7, #4]
   13560:	2800      	cmp	r0, #0
   13562:	d0c4      	beq.n	134ee <send_message+0x3a>
   13564:	f005 fe00 	bl	19168 <rpc_client_msg_data_rx_free>
   13568:	e7c1      	b.n	134ee <send_message+0x3a>
   1356a:	f06f 060c 	mvn.w	r6, #12
   1356e:	e7f6      	b.n	1355e <send_message+0xaa>
   13570:	f06f 065e 	mvn.w	r6, #94	; 0x5e
   13574:	e7f3      	b.n	1355e <send_message+0xaa>
   13576:	f06f 0615 	mvn.w	r6, #21
   1357a:	e7f0      	b.n	1355e <send_message+0xaa>
   1357c:	f04f 36ff 	mov.w	r6, #4294967295
   13580:	e7b5      	b.n	134ee <send_message+0x3a>
   13582:	bf00      	nop
   13584:	2000d6b8 	.word	0x2000d6b8

00013588 <nrf_modem_gnss_read>:
   13588:	b570      	push	{r4, r5, r6, lr}
   1358a:	4604      	mov	r4, r0
   1358c:	2800      	cmp	r0, #0
   1358e:	f000 815c 	beq.w	1384a <nrf_modem_gnss_read+0x2c2>
   13592:	2a02      	cmp	r2, #2
   13594:	f000 813d 	beq.w	13812 <nrf_modem_gnss_read+0x28a>
   13598:	2a03      	cmp	r2, #3
   1359a:	f000 8147 	beq.w	1382c <nrf_modem_gnss_read+0x2a4>
   1359e:	2a01      	cmp	r2, #1
   135a0:	f040 8153 	bne.w	1384a <nrf_modem_gnss_read+0x2c2>
   135a4:	29e7      	cmp	r1, #231	; 0xe7
   135a6:	f240 8153 	bls.w	13850 <nrf_modem_gnss_read+0x2c8>
   135aa:	4dac      	ldr	r5, [pc, #688]	; (1385c <nrf_modem_gnss_read+0x2d4>)
   135ac:	682b      	ldr	r3, [r5, #0]
   135ae:	2b00      	cmp	r3, #0
   135b0:	f000 8151 	beq.w	13856 <nrf_modem_gnss_read+0x2ce>
   135b4:	f7fe fad8 	bl	11b68 <rpc_transport_data_rx_suspend>
   135b8:	22e8      	movs	r2, #232	; 0xe8
   135ba:	2100      	movs	r1, #0
   135bc:	4620      	mov	r0, r4
   135be:	f007 f89e 	bl	1a6fe <memset>
   135c2:	4ba7      	ldr	r3, [pc, #668]	; (13860 <nrf_modem_gnss_read+0x2d8>)
   135c4:	781b      	ldrb	r3, [r3, #0]
   135c6:	2b01      	cmp	r3, #1
   135c8:	d072      	beq.n	136b0 <nrf_modem_gnss_read+0x128>
   135ca:	2b02      	cmp	r3, #2
   135cc:	682b      	ldr	r3, [r5, #0]
   135ce:	6858      	ldr	r0, [r3, #4]
   135d0:	6899      	ldr	r1, [r3, #8]
   135d2:	e9c4 0100 	strd	r0, r1, [r4]
   135d6:	68d8      	ldr	r0, [r3, #12]
   135d8:	6919      	ldr	r1, [r3, #16]
   135da:	e9c4 0102 	strd	r0, r1, [r4, #8]
   135de:	695a      	ldr	r2, [r3, #20]
   135e0:	6122      	str	r2, [r4, #16]
   135e2:	699a      	ldr	r2, [r3, #24]
   135e4:	6162      	str	r2, [r4, #20]
   135e6:	69da      	ldr	r2, [r3, #28]
   135e8:	f040 80c3 	bne.w	13772 <nrf_modem_gnss_read+0x1ea>
   135ec:	61a2      	str	r2, [r4, #24]
   135ee:	6a1a      	ldr	r2, [r3, #32]
   135f0:	4619      	mov	r1, r3
   135f2:	61e2      	str	r2, [r4, #28]
   135f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   135f6:	260a      	movs	r6, #10
   135f8:	6222      	str	r2, [r4, #32]
   135fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   135fc:	6262      	str	r2, [r4, #36]	; 0x24
   135fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13600:	62a2      	str	r2, [r4, #40]	; 0x28
   13602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   13604:	62e2      	str	r2, [r4, #44]	; 0x2c
   13606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   13608:	6322      	str	r2, [r4, #48]	; 0x30
   1360a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
   1360e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
   13612:	f8d3 2041 	ldr.w	r2, [r3, #65]	; 0x41
   13616:	6422      	str	r2, [r4, #64]	; 0x40
   13618:	f8d3 2045 	ldr.w	r2, [r3, #69]	; 0x45
   1361c:	6462      	str	r2, [r4, #68]	; 0x44
   1361e:	f8d3 2049 	ldr.w	r2, [r3, #73]	; 0x49
   13622:	64a2      	str	r2, [r4, #72]	; 0x48
   13624:	f8d3 204d 	ldr.w	r2, [r3, #77]	; 0x4d
   13628:	64e2      	str	r2, [r4, #76]	; 0x4c
   1362a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   1362c:	86a2      	strh	r2, [r4, #52]	; 0x34
   1362e:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   13632:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
   13636:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
   1363a:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
   1363e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
   13642:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
   13646:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
   1364a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
   1364e:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
   13652:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
   13656:	f8b3 203f 	ldrh.w	r2, [r3, #63]	; 0x3f
   1365a:	87a2      	strh	r2, [r4, #60]	; 0x3c
   1365c:	f8d3 20ca 	ldr.w	r2, [r3, #202]	; 0xca
   13660:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
   13664:	2200      	movs	r2, #0
   13666:	fb06 3002 	mla	r0, r6, r2, r3
   1366a:	f8b0 5052 	ldrh.w	r5, [r0, #82]	; 0x52
   1366e:	3201      	adds	r2, #1
   13670:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
   13674:	f891 5054 	ldrb.w	r5, [r1, #84]	; 0x54
   13678:	2a0c      	cmp	r2, #12
   1367a:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
   1367e:	f8b0 5055 	ldrh.w	r5, [r0, #85]	; 0x55
   13682:	f104 040c 	add.w	r4, r4, #12
   13686:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
   1368a:	f9b0 5057 	ldrsh.w	r5, [r0, #87]	; 0x57
   1368e:	f101 010a 	add.w	r1, r1, #10
   13692:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
   13696:	f9b0 0059 	ldrsh.w	r0, [r0, #89]	; 0x59
   1369a:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
   1369e:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
   136a2:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
   136a6:	d1de      	bne.n	13666 <nrf_modem_gnss_read+0xde>
   136a8:	f7fe fa64 	bl	11b74 <rpc_transport_data_rx_resume>
   136ac:	2000      	movs	r0, #0
   136ae:	bd70      	pop	{r4, r5, r6, pc}
   136b0:	682b      	ldr	r3, [r5, #0]
   136b2:	260a      	movs	r6, #10
   136b4:	6858      	ldr	r0, [r3, #4]
   136b6:	6899      	ldr	r1, [r3, #8]
   136b8:	e9c4 0100 	strd	r0, r1, [r4]
   136bc:	6919      	ldr	r1, [r3, #16]
   136be:	68d8      	ldr	r0, [r3, #12]
   136c0:	e9c4 0102 	strd	r0, r1, [r4, #8]
   136c4:	695a      	ldr	r2, [r3, #20]
   136c6:	4619      	mov	r1, r3
   136c8:	6122      	str	r2, [r4, #16]
   136ca:	699a      	ldr	r2, [r3, #24]
   136cc:	6162      	str	r2, [r4, #20]
   136ce:	69da      	ldr	r2, [r3, #28]
   136d0:	61e2      	str	r2, [r4, #28]
   136d2:	6a1a      	ldr	r2, [r3, #32]
   136d4:	6222      	str	r2, [r4, #32]
   136d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   136d8:	62e2      	str	r2, [r4, #44]	; 0x2c
   136da:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
   136de:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
   136e2:	f8d3 2031 	ldr.w	r2, [r3, #49]	; 0x31
   136e6:	6422      	str	r2, [r4, #64]	; 0x40
   136e8:	f8d3 2035 	ldr.w	r2, [r3, #53]	; 0x35
   136ec:	6462      	str	r2, [r4, #68]	; 0x44
   136ee:	f8d3 2039 	ldr.w	r2, [r3, #57]	; 0x39
   136f2:	64a2      	str	r2, [r4, #72]	; 0x48
   136f4:	f8d3 203d 	ldr.w	r2, [r3, #61]	; 0x3d
   136f8:	64e2      	str	r2, [r4, #76]	; 0x4c
   136fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   136fc:	86a2      	strh	r2, [r4, #52]	; 0x34
   136fe:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   13702:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
   13706:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
   1370a:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
   1370e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   13712:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
   13716:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
   1371a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
   1371e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   13722:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
   13726:	f8b3 202f 	ldrh.w	r2, [r3, #47]	; 0x2f
   1372a:	87a2      	strh	r2, [r4, #60]	; 0x3c
   1372c:	2200      	movs	r2, #0
   1372e:	fb06 3002 	mla	r0, r6, r2, r3
   13732:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
   13736:	3201      	adds	r2, #1
   13738:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
   1373c:	f891 5044 	ldrb.w	r5, [r1, #68]	; 0x44
   13740:	2a0c      	cmp	r2, #12
   13742:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
   13746:	f8b0 5045 	ldrh.w	r5, [r0, #69]	; 0x45
   1374a:	f104 040c 	add.w	r4, r4, #12
   1374e:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
   13752:	f9b0 5047 	ldrsh.w	r5, [r0, #71]	; 0x47
   13756:	f101 010a 	add.w	r1, r1, #10
   1375a:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
   1375e:	f9b0 0049 	ldrsh.w	r0, [r0, #73]	; 0x49
   13762:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
   13766:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
   1376a:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
   1376e:	d1de      	bne.n	1372e <nrf_modem_gnss_read+0x1a6>
   13770:	e79a      	b.n	136a8 <nrf_modem_gnss_read+0x120>
   13772:	61e2      	str	r2, [r4, #28]
   13774:	6a1a      	ldr	r2, [r3, #32]
   13776:	4619      	mov	r1, r3
   13778:	62e2      	str	r2, [r4, #44]	; 0x2c
   1377a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
   1377e:	260a      	movs	r6, #10
   13780:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
   13784:	f8d3 202d 	ldr.w	r2, [r3, #45]	; 0x2d
   13788:	6422      	str	r2, [r4, #64]	; 0x40
   1378a:	f8d3 2031 	ldr.w	r2, [r3, #49]	; 0x31
   1378e:	6462      	str	r2, [r4, #68]	; 0x44
   13790:	f8d3 2035 	ldr.w	r2, [r3, #53]	; 0x35
   13794:	64a2      	str	r2, [r4, #72]	; 0x48
   13796:	f8d3 2039 	ldr.w	r2, [r3, #57]	; 0x39
   1379a:	64e2      	str	r2, [r4, #76]	; 0x4c
   1379c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   1379e:	86a2      	strh	r2, [r4, #52]	; 0x34
   137a0:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   137a4:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
   137a8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   137ac:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
   137b0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   137b4:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
   137b8:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   137bc:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
   137c0:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   137c4:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
   137c8:	f8b3 202b 	ldrh.w	r2, [r3, #43]	; 0x2b
   137cc:	87a2      	strh	r2, [r4, #60]	; 0x3c
   137ce:	2200      	movs	r2, #0
   137d0:	fb06 3002 	mla	r0, r6, r2, r3
   137d4:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
   137d6:	3201      	adds	r2, #1
   137d8:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
   137dc:	f891 5040 	ldrb.w	r5, [r1, #64]	; 0x40
   137e0:	2a0c      	cmp	r2, #12
   137e2:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
   137e6:	f8b0 5041 	ldrh.w	r5, [r0, #65]	; 0x41
   137ea:	f104 040c 	add.w	r4, r4, #12
   137ee:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
   137f2:	f9b0 5043 	ldrsh.w	r5, [r0, #67]	; 0x43
   137f6:	f101 010a 	add.w	r1, r1, #10
   137fa:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
   137fe:	f9b0 0045 	ldrsh.w	r0, [r0, #69]	; 0x45
   13802:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
   13806:	f891 003d 	ldrb.w	r0, [r1, #61]	; 0x3d
   1380a:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
   1380e:	d1df      	bne.n	137d0 <nrf_modem_gnss_read+0x248>
   13810:	e74a      	b.n	136a8 <nrf_modem_gnss_read+0x120>
   13812:	2952      	cmp	r1, #82	; 0x52
   13814:	d91c      	bls.n	13850 <nrf_modem_gnss_read+0x2c8>
   13816:	4d13      	ldr	r5, [pc, #76]	; (13864 <nrf_modem_gnss_read+0x2dc>)
   13818:	682b      	ldr	r3, [r5, #0]
   1381a:	b1e3      	cbz	r3, 13856 <nrf_modem_gnss_read+0x2ce>
   1381c:	f7fe f9a4 	bl	11b68 <rpc_transport_data_rx_suspend>
   13820:	2253      	movs	r2, #83	; 0x53
   13822:	4620      	mov	r0, r4
   13824:	6829      	ldr	r1, [r5, #0]
   13826:	f006 ff5d 	bl	1a6e4 <memcpy>
   1382a:	e73d      	b.n	136a8 <nrf_modem_gnss_read+0x120>
   1382c:	290b      	cmp	r1, #11
   1382e:	d90f      	bls.n	13850 <nrf_modem_gnss_read+0x2c8>
   13830:	4d0d      	ldr	r5, [pc, #52]	; (13868 <nrf_modem_gnss_read+0x2e0>)
   13832:	682b      	ldr	r3, [r5, #0]
   13834:	b17b      	cbz	r3, 13856 <nrf_modem_gnss_read+0x2ce>
   13836:	f7fe f997 	bl	11b68 <rpc_transport_data_rx_suspend>
   1383a:	682b      	ldr	r3, [r5, #0]
   1383c:	681a      	ldr	r2, [r3, #0]
   1383e:	6022      	str	r2, [r4, #0]
   13840:	685a      	ldr	r2, [r3, #4]
   13842:	6062      	str	r2, [r4, #4]
   13844:	891b      	ldrh	r3, [r3, #8]
   13846:	60a3      	str	r3, [r4, #8]
   13848:	e72e      	b.n	136a8 <nrf_modem_gnss_read+0x120>
   1384a:	f06f 0015 	mvn.w	r0, #21
   1384e:	e72e      	b.n	136ae <nrf_modem_gnss_read+0x126>
   13850:	f06f 0079 	mvn.w	r0, #121	; 0x79
   13854:	e72b      	b.n	136ae <nrf_modem_gnss_read+0x126>
   13856:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1385a:	e728      	b.n	136ae <nrf_modem_gnss_read+0x126>
   1385c:	2000d6b4 	.word	0x2000d6b4
   13860:	2000eca7 	.word	0x2000eca7
   13864:	2000d6b0 	.word	0x2000d6b0
   13868:	2000d6ac 	.word	0x2000d6ac

0001386c <nrf_modem_gnss_start>:
   1386c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13870:	f000 fb12 	bl	13e98 <nrf_modem_state_is_initialized>
   13874:	2800      	cmp	r0, #0
   13876:	d063      	beq.n	13940 <nrf_modem_gnss_start+0xd4>
   13878:	4d33      	ldr	r5, [pc, #204]	; (13948 <nrf_modem_gnss_start+0xdc>)
   1387a:	f04f 31ff 	mov.w	r1, #4294967295
   1387e:	6828      	ldr	r0, [r5, #0]
   13880:	f004 ffda 	bl	18838 <nrf_modem_os_sem_take>
   13884:	4604      	mov	r4, r0
   13886:	2800      	cmp	r0, #0
   13888:	d149      	bne.n	1391e <nrf_modem_gnss_start+0xb2>
   1388a:	4e30      	ldr	r6, [pc, #192]	; (1394c <nrf_modem_gnss_start+0xe0>)
   1388c:	7833      	ldrb	r3, [r6, #0]
   1388e:	bb93      	cbnz	r3, 138f6 <nrf_modem_gnss_start+0x8a>
   13890:	2702      	movs	r7, #2
   13892:	f04f 0905 	mov.w	r9, #5
   13896:	46b8      	mov	r8, r7
   13898:	f000 fafe 	bl	13e98 <nrf_modem_state_is_initialized>
   1389c:	2800      	cmp	r0, #0
   1389e:	d041      	beq.n	13924 <nrf_modem_gnss_start+0xb8>
   138a0:	2014      	movs	r0, #20
   138a2:	f006 fa76 	bl	19d92 <gnss_msg_alloc_and_set_common>
   138a6:	4601      	mov	r1, r0
   138a8:	2800      	cmp	r0, #0
   138aa:	d043      	beq.n	13934 <nrf_modem_gnss_start+0xc8>
   138ac:	6803      	ldr	r3, [r0, #0]
   138ae:	2200      	movs	r2, #0
   138b0:	f241 0004 	movw	r0, #4100	; 0x1004
   138b4:	f883 9004 	strb.w	r9, [r3, #4]
   138b8:	f8c3 8005 	str.w	r8, [r3, #5]
   138bc:	f7ff fdfa 	bl	134b4 <send_message>
   138c0:	4604      	mov	r4, r0
   138c2:	bb88      	cbnz	r0, 13928 <nrf_modem_gnss_start+0xbc>
   138c4:	f000 fae8 	bl	13e98 <nrf_modem_state_is_initialized>
   138c8:	b1a8      	cbz	r0, 138f6 <nrf_modem_gnss_start+0x8a>
   138ca:	2014      	movs	r0, #20
   138cc:	f006 fa61 	bl	19d92 <gnss_msg_alloc_and_set_common>
   138d0:	4601      	mov	r1, r0
   138d2:	b180      	cbz	r0, 138f6 <nrf_modem_gnss_start+0x8a>
   138d4:	6803      	ldr	r3, [r0, #0]
   138d6:	2200      	movs	r2, #0
   138d8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   138dc:	2701      	movs	r7, #1
   138de:	7118      	strb	r0, [r3, #4]
   138e0:	715a      	strb	r2, [r3, #5]
   138e2:	f241 2003 	movw	r0, #4611	; 0x1203
   138e6:	719a      	strb	r2, [r3, #6]
   138e8:	71da      	strb	r2, [r3, #7]
   138ea:	749f      	strb	r7, [r3, #18]
   138ec:	f7ff fde2 	bl	134b4 <send_message>
   138f0:	4320      	orrs	r0, r4
   138f2:	bf08      	it	eq
   138f4:	7037      	strbeq	r7, [r6, #0]
   138f6:	2014      	movs	r0, #20
   138f8:	f006 fa4b 	bl	19d92 <gnss_msg_alloc_and_set_common>
   138fc:	4601      	mov	r1, r0
   138fe:	b1e0      	cbz	r0, 1393a <nrf_modem_gnss_start+0xce>
   13900:	2601      	movs	r6, #1
   13902:	6803      	ldr	r3, [r0, #0]
   13904:	2200      	movs	r2, #0
   13906:	f241 0004 	movw	r0, #4100	; 0x1004
   1390a:	711e      	strb	r6, [r3, #4]
   1390c:	f7ff fdd2 	bl	134b4 <send_message>
   13910:	4604      	mov	r4, r0
   13912:	b908      	cbnz	r0, 13918 <nrf_modem_gnss_start+0xac>
   13914:	4b0e      	ldr	r3, [pc, #56]	; (13950 <nrf_modem_gnss_start+0xe4>)
   13916:	701e      	strb	r6, [r3, #0]
   13918:	6828      	ldr	r0, [r5, #0]
   1391a:	f004 ff8b 	bl	18834 <nrf_modem_os_sem_give>
   1391e:	4620      	mov	r0, r4
   13920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13924:	f04f 34ff 	mov.w	r4, #4294967295
   13928:	f04f 0801 	mov.w	r8, #1
   1392c:	4547      	cmp	r7, r8
   1392e:	d0c9      	beq.n	138c4 <nrf_modem_gnss_start+0x58>
   13930:	4647      	mov	r7, r8
   13932:	e7b1      	b.n	13898 <nrf_modem_gnss_start+0x2c>
   13934:	f06f 040b 	mvn.w	r4, #11
   13938:	e7f6      	b.n	13928 <nrf_modem_gnss_start+0xbc>
   1393a:	f06f 040b 	mvn.w	r4, #11
   1393e:	e7eb      	b.n	13918 <nrf_modem_gnss_start+0xac>
   13940:	f04f 34ff 	mov.w	r4, #4294967295
   13944:	e7eb      	b.n	1391e <nrf_modem_gnss_start+0xb2>
   13946:	bf00      	nop
   13948:	2000d6c0 	.word	0x2000d6c0
   1394c:	2000eca9 	.word	0x2000eca9
   13950:	2000ecaa 	.word	0x2000ecaa

00013954 <nrf_modem_gnss_prio_mode_enable>:
   13954:	b538      	push	{r3, r4, r5, lr}
   13956:	f000 fa9f 	bl	13e98 <nrf_modem_state_is_initialized>
   1395a:	b1e8      	cbz	r0, 13998 <nrf_modem_gnss_prio_mode_enable+0x44>
   1395c:	4d10      	ldr	r5, [pc, #64]	; (139a0 <nrf_modem_gnss_prio_mode_enable+0x4c>)
   1395e:	f04f 31ff 	mov.w	r1, #4294967295
   13962:	6828      	ldr	r0, [r5, #0]
   13964:	f004 ff68 	bl	18838 <nrf_modem_os_sem_take>
   13968:	4604      	mov	r4, r0
   1396a:	b980      	cbnz	r0, 1398e <nrf_modem_gnss_prio_mode_enable+0x3a>
   1396c:	2014      	movs	r0, #20
   1396e:	f006 fa10 	bl	19d92 <gnss_msg_alloc_and_set_common>
   13972:	4601      	mov	r1, r0
   13974:	b168      	cbz	r0, 13992 <nrf_modem_gnss_prio_mode_enable+0x3e>
   13976:	2202      	movs	r2, #2
   13978:	6803      	ldr	r3, [r0, #0]
   1397a:	f241 0004 	movw	r0, #4100	; 0x1004
   1397e:	711a      	strb	r2, [r3, #4]
   13980:	4622      	mov	r2, r4
   13982:	f7ff fd97 	bl	134b4 <send_message>
   13986:	4604      	mov	r4, r0
   13988:	6828      	ldr	r0, [r5, #0]
   1398a:	f004 ff53 	bl	18834 <nrf_modem_os_sem_give>
   1398e:	4620      	mov	r0, r4
   13990:	bd38      	pop	{r3, r4, r5, pc}
   13992:	f06f 040b 	mvn.w	r4, #11
   13996:	e7f7      	b.n	13988 <nrf_modem_gnss_prio_mode_enable+0x34>
   13998:	f04f 34ff 	mov.w	r4, #4294967295
   1399c:	e7f7      	b.n	1398e <nrf_modem_gnss_prio_mode_enable+0x3a>
   1399e:	bf00      	nop
   139a0:	2000d6c0 	.word	0x2000d6c0

000139a4 <nrf_modem_gnss_use_case_set>:
   139a4:	b570      	push	{r4, r5, r6, lr}
   139a6:	4605      	mov	r5, r0
   139a8:	f000 fa76 	bl	13e98 <nrf_modem_state_is_initialized>
   139ac:	b308      	cbz	r0, 139f2 <nrf_modem_gnss_use_case_set+0x4e>
   139ae:	4e12      	ldr	r6, [pc, #72]	; (139f8 <nrf_modem_gnss_use_case_set+0x54>)
   139b0:	f04f 31ff 	mov.w	r1, #4294967295
   139b4:	6830      	ldr	r0, [r6, #0]
   139b6:	f004 ff3f 	bl	18838 <nrf_modem_os_sem_take>
   139ba:	4604      	mov	r4, r0
   139bc:	b9a0      	cbnz	r0, 139e8 <nrf_modem_gnss_use_case_set+0x44>
   139be:	2014      	movs	r0, #20
   139c0:	f006 f9e7 	bl	19d92 <gnss_msg_alloc_and_set_common>
   139c4:	4601      	mov	r1, r0
   139c6:	b188      	cbz	r0, 139ec <nrf_modem_gnss_use_case_set+0x48>
   139c8:	2202      	movs	r2, #2
   139ca:	6803      	ldr	r3, [r0, #0]
   139cc:	f241 1003 	movw	r0, #4355	; 0x1103
   139d0:	711a      	strb	r2, [r3, #4]
   139d2:	715c      	strb	r4, [r3, #5]
   139d4:	4622      	mov	r2, r4
   139d6:	719c      	strb	r4, [r3, #6]
   139d8:	71dc      	strb	r4, [r3, #7]
   139da:	725d      	strb	r5, [r3, #9]
   139dc:	f7ff fd6a 	bl	134b4 <send_message>
   139e0:	4604      	mov	r4, r0
   139e2:	6830      	ldr	r0, [r6, #0]
   139e4:	f004 ff26 	bl	18834 <nrf_modem_os_sem_give>
   139e8:	4620      	mov	r0, r4
   139ea:	bd70      	pop	{r4, r5, r6, pc}
   139ec:	f06f 040b 	mvn.w	r4, #11
   139f0:	e7f7      	b.n	139e2 <nrf_modem_gnss_use_case_set+0x3e>
   139f2:	f04f 34ff 	mov.w	r4, #4294967295
   139f6:	e7f7      	b.n	139e8 <nrf_modem_gnss_use_case_set+0x44>
   139f8:	2000d6c0 	.word	0x2000d6c0

000139fc <nrf_modem_gnss_fix_interval_set>:
   139fc:	b570      	push	{r4, r5, r6, lr}
   139fe:	4605      	mov	r5, r0
   13a00:	f000 fa4a 	bl	13e98 <nrf_modem_state_is_initialized>
   13a04:	b310      	cbz	r0, 13a4c <nrf_modem_gnss_fix_interval_set+0x50>
   13a06:	4e13      	ldr	r6, [pc, #76]	; (13a54 <nrf_modem_gnss_fix_interval_set+0x58>)
   13a08:	f04f 31ff 	mov.w	r1, #4294967295
   13a0c:	6830      	ldr	r0, [r6, #0]
   13a0e:	f004 ff13 	bl	18838 <nrf_modem_os_sem_take>
   13a12:	4604      	mov	r4, r0
   13a14:	b9a8      	cbnz	r0, 13a42 <nrf_modem_gnss_fix_interval_set+0x46>
   13a16:	2014      	movs	r0, #20
   13a18:	f006 f9bb 	bl	19d92 <gnss_msg_alloc_and_set_common>
   13a1c:	4601      	mov	r1, r0
   13a1e:	b190      	cbz	r0, 13a46 <nrf_modem_gnss_fix_interval_set+0x4a>
   13a20:	2208      	movs	r2, #8
   13a22:	6803      	ldr	r3, [r0, #0]
   13a24:	f241 1003 	movw	r0, #4355	; 0x1103
   13a28:	711a      	strb	r2, [r3, #4]
   13a2a:	715c      	strb	r4, [r3, #5]
   13a2c:	4622      	mov	r2, r4
   13a2e:	719c      	strb	r4, [r3, #6]
   13a30:	71dc      	strb	r4, [r3, #7]
   13a32:	f8a3 500b 	strh.w	r5, [r3, #11]
   13a36:	f7ff fd3d 	bl	134b4 <send_message>
   13a3a:	4604      	mov	r4, r0
   13a3c:	6830      	ldr	r0, [r6, #0]
   13a3e:	f004 fef9 	bl	18834 <nrf_modem_os_sem_give>
   13a42:	4620      	mov	r0, r4
   13a44:	bd70      	pop	{r4, r5, r6, pc}
   13a46:	f06f 040b 	mvn.w	r4, #11
   13a4a:	e7f7      	b.n	13a3c <nrf_modem_gnss_fix_interval_set+0x40>
   13a4c:	f04f 34ff 	mov.w	r4, #4294967295
   13a50:	e7f7      	b.n	13a42 <nrf_modem_gnss_fix_interval_set+0x46>
   13a52:	bf00      	nop
   13a54:	2000d6c0 	.word	0x2000d6c0

00013a58 <nrf_modem_gnss_fix_retry_set>:
   13a58:	b570      	push	{r4, r5, r6, lr}
   13a5a:	4605      	mov	r5, r0
   13a5c:	f000 fa1c 	bl	13e98 <nrf_modem_state_is_initialized>
   13a60:	b310      	cbz	r0, 13aa8 <nrf_modem_gnss_fix_retry_set+0x50>
   13a62:	4e13      	ldr	r6, [pc, #76]	; (13ab0 <nrf_modem_gnss_fix_retry_set+0x58>)
   13a64:	f04f 31ff 	mov.w	r1, #4294967295
   13a68:	6830      	ldr	r0, [r6, #0]
   13a6a:	f004 fee5 	bl	18838 <nrf_modem_os_sem_take>
   13a6e:	4604      	mov	r4, r0
   13a70:	b9a8      	cbnz	r0, 13a9e <nrf_modem_gnss_fix_retry_set+0x46>
   13a72:	2014      	movs	r0, #20
   13a74:	f006 f98d 	bl	19d92 <gnss_msg_alloc_and_set_common>
   13a78:	4601      	mov	r1, r0
   13a7a:	b190      	cbz	r0, 13aa2 <nrf_modem_gnss_fix_retry_set+0x4a>
   13a7c:	2210      	movs	r2, #16
   13a7e:	6803      	ldr	r3, [r0, #0]
   13a80:	f241 1003 	movw	r0, #4355	; 0x1103
   13a84:	711a      	strb	r2, [r3, #4]
   13a86:	715c      	strb	r4, [r3, #5]
   13a88:	4622      	mov	r2, r4
   13a8a:	719c      	strb	r4, [r3, #6]
   13a8c:	71dc      	strb	r4, [r3, #7]
   13a8e:	f8a3 500d 	strh.w	r5, [r3, #13]
   13a92:	f7ff fd0f 	bl	134b4 <send_message>
   13a96:	4604      	mov	r4, r0
   13a98:	6830      	ldr	r0, [r6, #0]
   13a9a:	f004 fecb 	bl	18834 <nrf_modem_os_sem_give>
   13a9e:	4620      	mov	r0, r4
   13aa0:	bd70      	pop	{r4, r5, r6, pc}
   13aa2:	f06f 040b 	mvn.w	r4, #11
   13aa6:	e7f7      	b.n	13a98 <nrf_modem_gnss_fix_retry_set+0x40>
   13aa8:	f04f 34ff 	mov.w	r4, #4294967295
   13aac:	e7f7      	b.n	13a9e <nrf_modem_gnss_fix_retry_set+0x46>
   13aae:	bf00      	nop
   13ab0:	2000d6c0 	.word	0x2000d6c0

00013ab4 <nrf_modem_gnss_nmea_mask_set>:
   13ab4:	b570      	push	{r4, r5, r6, lr}
   13ab6:	4605      	mov	r5, r0
   13ab8:	f000 f9ee 	bl	13e98 <nrf_modem_state_is_initialized>
   13abc:	b310      	cbz	r0, 13b04 <nrf_modem_gnss_nmea_mask_set+0x50>
   13abe:	4e13      	ldr	r6, [pc, #76]	; (13b0c <nrf_modem_gnss_nmea_mask_set+0x58>)
   13ac0:	f04f 31ff 	mov.w	r1, #4294967295
   13ac4:	6830      	ldr	r0, [r6, #0]
   13ac6:	f004 feb7 	bl	18838 <nrf_modem_os_sem_take>
   13aca:	4604      	mov	r4, r0
   13acc:	b9a8      	cbnz	r0, 13afa <nrf_modem_gnss_nmea_mask_set+0x46>
   13ace:	2014      	movs	r0, #20
   13ad0:	f006 f95f 	bl	19d92 <gnss_msg_alloc_and_set_common>
   13ad4:	4601      	mov	r1, r0
   13ad6:	b190      	cbz	r0, 13afe <nrf_modem_gnss_nmea_mask_set+0x4a>
   13ad8:	2220      	movs	r2, #32
   13ada:	6803      	ldr	r3, [r0, #0]
   13adc:	f241 1003 	movw	r0, #4355	; 0x1103
   13ae0:	711a      	strb	r2, [r3, #4]
   13ae2:	715c      	strb	r4, [r3, #5]
   13ae4:	4622      	mov	r2, r4
   13ae6:	719c      	strb	r4, [r3, #6]
   13ae8:	71dc      	strb	r4, [r3, #7]
   13aea:	f8a3 500f 	strh.w	r5, [r3, #15]
   13aee:	f7ff fce1 	bl	134b4 <send_message>
   13af2:	4604      	mov	r4, r0
   13af4:	6830      	ldr	r0, [r6, #0]
   13af6:	f004 fe9d 	bl	18834 <nrf_modem_os_sem_give>
   13afa:	4620      	mov	r0, r4
   13afc:	bd70      	pop	{r4, r5, r6, pc}
   13afe:	f06f 040b 	mvn.w	r4, #11
   13b02:	e7f7      	b.n	13af4 <nrf_modem_gnss_nmea_mask_set+0x40>
   13b04:	f04f 34ff 	mov.w	r4, #4294967295
   13b08:	e7f7      	b.n	13afa <nrf_modem_gnss_nmea_mask_set+0x46>
   13b0a:	bf00      	nop
   13b0c:	2000d6c0 	.word	0x2000d6c0

00013b10 <nrf_modem_gnss_event_handler_set>:
   13b10:	4b01      	ldr	r3, [pc, #4]	; (13b18 <nrf_modem_gnss_event_handler_set+0x8>)
   13b12:	6018      	str	r0, [r3, #0]
   13b14:	2000      	movs	r0, #0
   13b16:	4770      	bx	lr
   13b18:	2000d6a8 	.word	0x2000d6a8

00013b1c <rpc_gnss_event_handler>:
   13b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b1e:	6804      	ldr	r4, [r0, #0]
   13b20:	4606      	mov	r6, r0
   13b22:	b13c      	cbz	r4, 13b34 <rpc_gnss_event_handler+0x18>
   13b24:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   13b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   13b2c:	d104      	bne.n	13b38 <rpc_gnss_event_handler+0x1c>
   13b2e:	4b41      	ldr	r3, [pc, #260]	; (13c34 <rpc_gnss_event_handler+0x118>)
   13b30:	e9c3 1400 	strd	r1, r4, [r3]
   13b34:	2000      	movs	r0, #0
   13b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13b38:	4d3f      	ldr	r5, [pc, #252]	; (13c38 <rpc_gnss_event_handler+0x11c>)
   13b3a:	682b      	ldr	r3, [r5, #0]
   13b3c:	2b00      	cmp	r3, #0
   13b3e:	d06f      	beq.n	13c20 <rpc_gnss_event_handler+0x104>
   13b40:	f244 0204 	movw	r2, #16388	; 0x4004
   13b44:	4291      	cmp	r1, r2
   13b46:	d80b      	bhi.n	13b60 <rpc_gnss_event_handler+0x44>
   13b48:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   13b4c:	d968      	bls.n	13c20 <rpc_gnss_event_handler+0x104>
   13b4e:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
   13b52:	3902      	subs	r1, #2
   13b54:	2902      	cmp	r1, #2
   13b56:	d82a      	bhi.n	13bae <rpc_gnss_event_handler+0x92>
   13b58:	e8df f001 	tbb	[pc, r1]
   13b5c:	5047      	.short	0x5047
   13b5e:	59          	.byte	0x59
   13b5f:	00          	.byte	0x00
   13b60:	f244 1301 	movw	r3, #16641	; 0x4101
   13b64:	4299      	cmp	r1, r3
   13b66:	d02e      	beq.n	13bc6 <rpc_gnss_event_handler+0xaa>
   13b68:	f244 2301 	movw	r3, #16897	; 0x4201
   13b6c:	4299      	cmp	r1, r3
   13b6e:	d157      	bne.n	13c20 <rpc_gnss_event_handler+0x104>
   13b70:	4e32      	ldr	r6, [pc, #200]	; (13c3c <rpc_gnss_event_handler+0x120>)
   13b72:	6830      	ldr	r0, [r6, #0]
   13b74:	b108      	cbz	r0, 13b7a <rpc_gnss_event_handler+0x5e>
   13b76:	f005 faf7 	bl	19168 <rpc_client_msg_data_rx_free>
   13b7a:	2202      	movs	r2, #2
   13b7c:	4b30      	ldr	r3, [pc, #192]	; (13c40 <rpc_gnss_event_handler+0x124>)
   13b7e:	6034      	str	r4, [r6, #0]
   13b80:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   13b84:	701a      	strb	r2, [r3, #0]
   13b86:	4e2f      	ldr	r6, [pc, #188]	; (13c44 <rpc_gnss_event_handler+0x128>)
   13b88:	f014 0708 	ands.w	r7, r4, #8
   13b8c:	682b      	ldr	r3, [r5, #0]
   13b8e:	7832      	ldrb	r2, [r6, #0]
   13b90:	d025      	beq.n	13bde <rpc_gnss_event_handler+0xc2>
   13b92:	b91a      	cbnz	r2, 13b9c <rpc_gnss_event_handler+0x80>
   13b94:	2005      	movs	r0, #5
   13b96:	4798      	blx	r3
   13b98:	2301      	movs	r3, #1
   13b9a:	7033      	strb	r3, [r6, #0]
   13b9c:	07e3      	lsls	r3, r4, #31
   13b9e:	d502      	bpl.n	13ba6 <rpc_gnss_event_handler+0x8a>
   13ba0:	2002      	movs	r0, #2
   13ba2:	682b      	ldr	r3, [r5, #0]
   13ba4:	4798      	blx	r3
   13ba6:	2001      	movs	r0, #1
   13ba8:	682b      	ldr	r3, [r5, #0]
   13baa:	4798      	blx	r3
   13bac:	e7c2      	b.n	13b34 <rpc_gnss_event_handler+0x18>
   13bae:	4e23      	ldr	r6, [pc, #140]	; (13c3c <rpc_gnss_event_handler+0x120>)
   13bb0:	6830      	ldr	r0, [r6, #0]
   13bb2:	b108      	cbz	r0, 13bb8 <rpc_gnss_event_handler+0x9c>
   13bb4:	f005 fad8 	bl	19168 <rpc_client_msg_data_rx_free>
   13bb8:	2200      	movs	r2, #0
   13bba:	4b21      	ldr	r3, [pc, #132]	; (13c40 <rpc_gnss_event_handler+0x124>)
   13bbc:	6034      	str	r4, [r6, #0]
   13bbe:	701a      	strb	r2, [r3, #0]
   13bc0:	f894 403d 	ldrb.w	r4, [r4, #61]	; 0x3d
   13bc4:	e7df      	b.n	13b86 <rpc_gnss_event_handler+0x6a>
   13bc6:	4e1d      	ldr	r6, [pc, #116]	; (13c3c <rpc_gnss_event_handler+0x120>)
   13bc8:	6830      	ldr	r0, [r6, #0]
   13bca:	b108      	cbz	r0, 13bd0 <rpc_gnss_event_handler+0xb4>
   13bcc:	f005 facc 	bl	19168 <rpc_client_msg_data_rx_free>
   13bd0:	2201      	movs	r2, #1
   13bd2:	4b1b      	ldr	r3, [pc, #108]	; (13c40 <rpc_gnss_event_handler+0x124>)
   13bd4:	6034      	str	r4, [r6, #0]
   13bd6:	701a      	strb	r2, [r3, #0]
   13bd8:	f894 4041 	ldrb.w	r4, [r4, #65]	; 0x41
   13bdc:	e7d3      	b.n	13b86 <rpc_gnss_event_handler+0x6a>
   13bde:	2a00      	cmp	r2, #0
   13be0:	d0dc      	beq.n	13b9c <rpc_gnss_event_handler+0x80>
   13be2:	2006      	movs	r0, #6
   13be4:	4798      	blx	r3
   13be6:	7037      	strb	r7, [r6, #0]
   13be8:	e7d8      	b.n	13b9c <rpc_gnss_event_handler+0x80>
   13bea:	4e17      	ldr	r6, [pc, #92]	; (13c48 <rpc_gnss_event_handler+0x12c>)
   13bec:	6830      	ldr	r0, [r6, #0]
   13bee:	b108      	cbz	r0, 13bf4 <rpc_gnss_event_handler+0xd8>
   13bf0:	f005 faba 	bl	19168 <rpc_client_msg_data_rx_free>
   13bf4:	2003      	movs	r0, #3
   13bf6:	682b      	ldr	r3, [r5, #0]
   13bf8:	6034      	str	r4, [r6, #0]
   13bfa:	e7d6      	b.n	13baa <rpc_gnss_event_handler+0x8e>
   13bfc:	4e13      	ldr	r6, [pc, #76]	; (13c4c <rpc_gnss_event_handler+0x130>)
   13bfe:	6830      	ldr	r0, [r6, #0]
   13c00:	b108      	cbz	r0, 13c06 <rpc_gnss_event_handler+0xea>
   13c02:	f005 fab1 	bl	19168 <rpc_client_msg_data_rx_free>
   13c06:	2004      	movs	r0, #4
   13c08:	682b      	ldr	r3, [r5, #0]
   13c0a:	6034      	str	r4, [r6, #0]
   13c0c:	e7cd      	b.n	13baa <rpc_gnss_event_handler+0x8e>
   13c0e:	7822      	ldrb	r2, [r4, #0]
   13c10:	2a03      	cmp	r2, #3
   13c12:	d805      	bhi.n	13c20 <rpc_gnss_event_handler+0x104>
   13c14:	e8df f002 	tbb	[pc, r2]
   13c18:	0c0a0802 	.word	0x0c0a0802
   13c1c:	2007      	movs	r0, #7
   13c1e:	4798      	blx	r3
   13c20:	6830      	ldr	r0, [r6, #0]
   13c22:	f005 faa1 	bl	19168 <rpc_client_msg_data_rx_free>
   13c26:	e785      	b.n	13b34 <rpc_gnss_event_handler+0x18>
   13c28:	2008      	movs	r0, #8
   13c2a:	e7f8      	b.n	13c1e <rpc_gnss_event_handler+0x102>
   13c2c:	2009      	movs	r0, #9
   13c2e:	e7f6      	b.n	13c1e <rpc_gnss_event_handler+0x102>
   13c30:	200a      	movs	r0, #10
   13c32:	e7f4      	b.n	13c1e <rpc_gnss_event_handler+0x102>
   13c34:	2000d6b8 	.word	0x2000d6b8
   13c38:	2000d6a8 	.word	0x2000d6a8
   13c3c:	2000d6b4 	.word	0x2000d6b4
   13c40:	2000eca7 	.word	0x2000eca7
   13c44:	2000eca8 	.word	0x2000eca8
   13c48:	2000d6b0 	.word	0x2000d6b0
   13c4c:	2000d6ac 	.word	0x2000d6ac

00013c50 <rpc_gnss_init>:
   13c50:	b508      	push	{r3, lr}
   13c52:	2300      	movs	r3, #0
   13c54:	4a09      	ldr	r2, [pc, #36]	; (13c7c <rpc_gnss_init+0x2c>)
   13c56:	480a      	ldr	r0, [pc, #40]	; (13c80 <rpc_gnss_init+0x30>)
   13c58:	7013      	strb	r3, [r2, #0]
   13c5a:	4a0a      	ldr	r2, [pc, #40]	; (13c84 <rpc_gnss_init+0x34>)
   13c5c:	7013      	strb	r3, [r2, #0]
   13c5e:	4a0a      	ldr	r2, [pc, #40]	; (13c88 <rpc_gnss_init+0x38>)
   13c60:	7013      	strb	r3, [r2, #0]
   13c62:	4a0a      	ldr	r2, [pc, #40]	; (13c8c <rpc_gnss_init+0x3c>)
   13c64:	7013      	strb	r3, [r2, #0]
   13c66:	4a0a      	ldr	r2, [pc, #40]	; (13c90 <rpc_gnss_init+0x40>)
   13c68:	6013      	str	r3, [r2, #0]
   13c6a:	2201      	movs	r2, #1
   13c6c:	4611      	mov	r1, r2
   13c6e:	f7fa fafd 	bl	e26c <nrf_modem_os_sem_init>
   13c72:	2800      	cmp	r0, #0
   13c74:	bf18      	it	ne
   13c76:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   13c7a:	bd08      	pop	{r3, pc}
   13c7c:	2000eca8 	.word	0x2000eca8
   13c80:	2000d6c0 	.word	0x2000d6c0
   13c84:	2000ecaa 	.word	0x2000ecaa
   13c88:	2000eca9 	.word	0x2000eca9
   13c8c:	2000eca7 	.word	0x2000eca7
   13c90:	2000d6a8 	.word	0x2000d6a8

00013c94 <rpc_gnss_deinit>:
   13c94:	b510      	push	{r4, lr}
   13c96:	4c0b      	ldr	r4, [pc, #44]	; (13cc4 <rpc_gnss_deinit+0x30>)
   13c98:	6820      	ldr	r0, [r4, #0]
   13c9a:	b118      	cbz	r0, 13ca4 <rpc_gnss_deinit+0x10>
   13c9c:	f005 fa64 	bl	19168 <rpc_client_msg_data_rx_free>
   13ca0:	2300      	movs	r3, #0
   13ca2:	6023      	str	r3, [r4, #0]
   13ca4:	4c08      	ldr	r4, [pc, #32]	; (13cc8 <rpc_gnss_deinit+0x34>)
   13ca6:	6820      	ldr	r0, [r4, #0]
   13ca8:	b118      	cbz	r0, 13cb2 <rpc_gnss_deinit+0x1e>
   13caa:	f005 fa5d 	bl	19168 <rpc_client_msg_data_rx_free>
   13cae:	2300      	movs	r3, #0
   13cb0:	6023      	str	r3, [r4, #0]
   13cb2:	4c06      	ldr	r4, [pc, #24]	; (13ccc <rpc_gnss_deinit+0x38>)
   13cb4:	6820      	ldr	r0, [r4, #0]
   13cb6:	b118      	cbz	r0, 13cc0 <rpc_gnss_deinit+0x2c>
   13cb8:	f005 fa56 	bl	19168 <rpc_client_msg_data_rx_free>
   13cbc:	2300      	movs	r3, #0
   13cbe:	6023      	str	r3, [r4, #0]
   13cc0:	2000      	movs	r0, #0
   13cc2:	bd10      	pop	{r4, pc}
   13cc4:	2000d6b4 	.word	0x2000d6b4
   13cc8:	2000d6b0 	.word	0x2000d6b0
   13ccc:	2000d6ac 	.word	0x2000d6ac

00013cd0 <modem_off>:
   13cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13cd2:	2501      	movs	r5, #1
   13cd4:	4c07      	ldr	r4, [pc, #28]	; (13cf4 <modem_off+0x24>)
   13cd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   13cda:	6165      	str	r5, [r4, #20]
   13cdc:	f004 fd88 	bl	187f0 <nrf_modem_os_busywait>
   13ce0:	2300      	movs	r3, #0
   13ce2:	6163      	str	r3, [r4, #20]
   13ce4:	9301      	str	r3, [sp, #4]
   13ce6:	6125      	str	r5, [r4, #16]
   13ce8:	6923      	ldr	r3, [r4, #16]
   13cea:	9301      	str	r3, [sp, #4]
   13cec:	9b01      	ldr	r3, [sp, #4]
   13cee:	b003      	add	sp, #12
   13cf0:	bd30      	pop	{r4, r5, pc}
   13cf2:	bf00      	nop
   13cf4:	40005600 	.word	0x40005600

00013cf8 <atomic_set.constprop.0.isra.0>:
   13cf8:	4b03      	ldr	r3, [pc, #12]	; (13d08 <atomic_set.constprop.0.isra.0+0x10>)
   13cfa:	e8d3 2fef 	ldaex	r2, [r3]
   13cfe:	e8c3 0fe1 	stlex	r1, r0, [r3]
   13d02:	2900      	cmp	r1, #0
   13d04:	d1f9      	bne.n	13cfa <atomic_set.constprop.0.isra.0+0x2>
   13d06:	4770      	bx	lr
   13d08:	2000d6c4 	.word	0x2000d6c4

00013d0c <nrf_modem_init>:
   13d0c:	b570      	push	{r4, r5, r6, lr}
   13d0e:	4604      	mov	r4, r0
   13d10:	b086      	sub	sp, #24
   13d12:	b390      	cbz	r0, 13d7a <nrf_modem_init+0x6e>
   13d14:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13d16:	b3ab      	cbz	r3, 13d84 <nrf_modem_init+0x78>
   13d18:	2201      	movs	r2, #1
   13d1a:	4b1d      	ldr	r3, [pc, #116]	; (13d90 <nrf_modem_init+0x84>)
   13d1c:	e8d3 1fef 	ldaex	r1, [r3]
   13d20:	2900      	cmp	r1, #0
   13d22:	d103      	bne.n	13d2c <nrf_modem_init+0x20>
   13d24:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13d28:	2800      	cmp	r0, #0
   13d2a:	d1f7      	bne.n	13d1c <nrf_modem_init+0x10>
   13d2c:	d12d      	bne.n	13d8a <nrf_modem_init+0x7e>
   13d2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   13d30:	f000 f89a 	bl	13e68 <nrf_modem_fault_handler_set>
   13d34:	f7fa faee 	bl	e314 <nrf_modem_os_init>
   13d38:	6a23      	ldr	r3, [r4, #32]
   13d3a:	ad02      	add	r5, sp, #8
   13d3c:	f88d 3004 	strb.w	r3, [sp, #4]
   13d40:	4b14      	ldr	r3, [pc, #80]	; (13d94 <nrf_modem_init+0x88>)
   13d42:	9400      	str	r4, [sp, #0]
   13d44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   13d46:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   13d4a:	4668      	mov	r0, sp
   13d4c:	f005 f99b 	bl	19086 <rpc_init>
   13d50:	4604      	mov	r4, r0
   13d52:	b950      	cbnz	r0, 13d6a <nrf_modem_init+0x5e>
   13d54:	4606      	mov	r6, r0
   13d56:	f855 3b04 	ldr.w	r3, [r5], #4
   13d5a:	4798      	blx	r3
   13d5c:	4604      	mov	r4, r0
   13d5e:	b920      	cbnz	r0, 13d6a <nrf_modem_init+0x5e>
   13d60:	3601      	adds	r6, #1
   13d62:	2e04      	cmp	r6, #4
   13d64:	d1f7      	bne.n	13d56 <nrf_modem_init+0x4a>
   13d66:	2002      	movs	r0, #2
   13d68:	e004      	b.n	13d74 <nrf_modem_init+0x68>
   13d6a:	f7ff ffb1 	bl	13cd0 <modem_off>
   13d6e:	f7fa fae9 	bl	e344 <nrf_modem_os_shutdown>
   13d72:	2000      	movs	r0, #0
   13d74:	f7ff ffc0 	bl	13cf8 <atomic_set.constprop.0.isra.0>
   13d78:	e001      	b.n	13d7e <nrf_modem_init+0x72>
   13d7a:	f06f 040d 	mvn.w	r4, #13
   13d7e:	4620      	mov	r0, r4
   13d80:	b006      	add	sp, #24
   13d82:	bd70      	pop	{r4, r5, r6, pc}
   13d84:	f06f 0415 	mvn.w	r4, #21
   13d88:	e7f9      	b.n	13d7e <nrf_modem_init+0x72>
   13d8a:	f04f 34ff 	mov.w	r4, #4294967295
   13d8e:	e7f6      	b.n	13d7e <nrf_modem_init+0x72>
   13d90:	2000d6c4 	.word	0x2000d6c4
   13d94:	0001b6c0 	.word	0x0001b6c0

00013d98 <nrf_modem_shutdown>:
   13d98:	b530      	push	{r4, r5, lr}
   13d9a:	4b2f      	ldr	r3, [pc, #188]	; (13e58 <nrf_modem_shutdown+0xc0>)
   13d9c:	b085      	sub	sp, #20
   13d9e:	681a      	ldr	r2, [r3, #0]
   13da0:	2a02      	cmp	r2, #2
   13da2:	d005      	beq.n	13db0 <nrf_modem_shutdown+0x18>
   13da4:	2a03      	cmp	r2, #3
   13da6:	d046      	beq.n	13e36 <nrf_modem_shutdown+0x9e>
   13da8:	f04f 30ff 	mov.w	r0, #4294967295
   13dac:	b005      	add	sp, #20
   13dae:	bd30      	pop	{r4, r5, pc}
   13db0:	2204      	movs	r2, #4
   13db2:	e8d3 1fef 	ldaex	r1, [r3]
   13db6:	2902      	cmp	r1, #2
   13db8:	d103      	bne.n	13dc2 <nrf_modem_shutdown+0x2a>
   13dba:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13dbe:	2800      	cmp	r0, #0
   13dc0:	d1f7      	bne.n	13db2 <nrf_modem_shutdown+0x1a>
   13dc2:	d1f1      	bne.n	13da8 <nrf_modem_shutdown+0x10>
   13dc4:	466c      	mov	r4, sp
   13dc6:	2500      	movs	r5, #0
   13dc8:	4b24      	ldr	r3, [pc, #144]	; (13e5c <nrf_modem_shutdown+0xc4>)
   13dca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   13dcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   13dd0:	f854 3b04 	ldr.w	r3, [r4], #4
   13dd4:	3501      	adds	r5, #1
   13dd6:	4798      	blx	r3
   13dd8:	2d04      	cmp	r5, #4
   13dda:	d1f9      	bne.n	13dd0 <nrf_modem_shutdown+0x38>
   13ddc:	f000 f864 	bl	13ea8 <nrf_modem_state_is_fault>
   13de0:	b910      	cbnz	r0, 13de8 <nrf_modem_shutdown+0x50>
   13de2:	2064      	movs	r0, #100	; 0x64
   13de4:	f004 fd06 	bl	187f4 <nrf_modem_os_sleep>
   13de8:	f005 f94f 	bl	1908a <rpc_shutdown>
   13dec:	f000 f85c 	bl	13ea8 <nrf_modem_state_is_fault>
   13df0:	b150      	cbz	r0, 13e08 <nrf_modem_shutdown+0x70>
   13df2:	2000      	movs	r0, #0
   13df4:	f000 f84a 	bl	13e8c <nrf_modem_state_set>
   13df8:	f7ff ff6a 	bl	13cd0 <modem_off>
   13dfc:	f7fa faa2 	bl	e344 <nrf_modem_os_shutdown>
   13e00:	2000      	movs	r0, #0
   13e02:	f7ff ff79 	bl	13cf8 <atomic_set.constprop.0.isra.0>
   13e06:	e7d1      	b.n	13dac <nrf_modem_shutdown+0x14>
   13e08:	4b15      	ldr	r3, [pc, #84]	; (13e60 <nrf_modem_shutdown+0xc8>)
   13e0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   13e0e:	07db      	lsls	r3, r3, #31
   13e10:	d50d      	bpl.n	13e2e <nrf_modem_shutdown+0x96>
   13e12:	200a      	movs	r0, #10
   13e14:	f004 fcee 	bl	187f4 <nrf_modem_os_sleep>
   13e18:	e7ee      	b.n	13df8 <nrf_modem_shutdown+0x60>
   13e1a:	200a      	movs	r0, #10
   13e1c:	f004 fcea 	bl	187f4 <nrf_modem_os_sleep>
   13e20:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
   13e24:	2b01      	cmp	r3, #1
   13e26:	d1e7      	bne.n	13df8 <nrf_modem_shutdown+0x60>
   13e28:	3c01      	subs	r4, #1
   13e2a:	d1f6      	bne.n	13e1a <nrf_modem_shutdown+0x82>
   13e2c:	e7e4      	b.n	13df8 <nrf_modem_shutdown+0x60>
   13e2e:	f241 24c1 	movw	r4, #4801	; 0x12c1
   13e32:	4d0c      	ldr	r5, [pc, #48]	; (13e64 <nrf_modem_shutdown+0xcc>)
   13e34:	e7f4      	b.n	13e20 <nrf_modem_shutdown+0x88>
   13e36:	2204      	movs	r2, #4
   13e38:	e8d3 1fef 	ldaex	r1, [r3]
   13e3c:	2903      	cmp	r1, #3
   13e3e:	d103      	bne.n	13e48 <nrf_modem_shutdown+0xb0>
   13e40:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13e44:	2800      	cmp	r0, #0
   13e46:	d1f7      	bne.n	13e38 <nrf_modem_shutdown+0xa0>
   13e48:	d1ae      	bne.n	13da8 <nrf_modem_shutdown+0x10>
   13e4a:	2000      	movs	r0, #0
   13e4c:	f000 f81e 	bl	13e8c <nrf_modem_state_set>
   13e50:	f005 f8ff 	bl	19052 <ipc_bootloader_shutdown>
   13e54:	e7d0      	b.n	13df8 <nrf_modem_shutdown+0x60>
   13e56:	bf00      	nop
   13e58:	2000d6c4 	.word	0x2000d6c4
   13e5c:	0001b6d0 	.word	0x0001b6d0
   13e60:	e000ed00 	.word	0xe000ed00
   13e64:	40005000 	.word	0x40005000

00013e68 <nrf_modem_fault_handler_set>:
   13e68:	4b01      	ldr	r3, [pc, #4]	; (13e70 <nrf_modem_fault_handler_set+0x8>)
   13e6a:	6018      	str	r0, [r3, #0]
   13e6c:	4770      	bx	lr
   13e6e:	bf00      	nop
   13e70:	2000d6c8 	.word	0x2000d6c8

00013e74 <nrf_modem_fault_handler_internal>:
   13e74:	b507      	push	{r0, r1, r2, lr}
   13e76:	4b04      	ldr	r3, [pc, #16]	; (13e88 <nrf_modem_fault_handler_internal+0x14>)
   13e78:	e9cd 0100 	strd	r0, r1, [sp]
   13e7c:	681b      	ldr	r3, [r3, #0]
   13e7e:	4668      	mov	r0, sp
   13e80:	4798      	blx	r3
   13e82:	b003      	add	sp, #12
   13e84:	f85d fb04 	ldr.w	pc, [sp], #4
   13e88:	2000d6c8 	.word	0x2000d6c8

00013e8c <nrf_modem_state_set>:
   13e8c:	4b01      	ldr	r3, [pc, #4]	; (13e94 <nrf_modem_state_set+0x8>)
   13e8e:	7018      	strb	r0, [r3, #0]
   13e90:	4770      	bx	lr
   13e92:	bf00      	nop
   13e94:	2000ecab 	.word	0x2000ecab

00013e98 <nrf_modem_state_is_initialized>:
   13e98:	4b02      	ldr	r3, [pc, #8]	; (13ea4 <nrf_modem_state_is_initialized+0xc>)
   13e9a:	7818      	ldrb	r0, [r3, #0]
   13e9c:	1e43      	subs	r3, r0, #1
   13e9e:	4258      	negs	r0, r3
   13ea0:	4158      	adcs	r0, r3
   13ea2:	4770      	bx	lr
   13ea4:	2000ecab 	.word	0x2000ecab

00013ea8 <nrf_modem_state_is_fault>:
   13ea8:	4b02      	ldr	r3, [pc, #8]	; (13eb4 <nrf_modem_state_is_fault+0xc>)
   13eaa:	7818      	ldrb	r0, [r3, #0]
   13eac:	1ec3      	subs	r3, r0, #3
   13eae:	4258      	negs	r0, r3
   13eb0:	4158      	adcs	r0, r3
   13eb2:	4770      	bx	lr
   13eb4:	2000ecab 	.word	0x2000ecab

00013eb8 <ipc_trace_init>:
   13eb8:	2100      	movs	r1, #0
   13eba:	4b07      	ldr	r3, [pc, #28]	; (13ed8 <ipc_trace_init+0x20>)
   13ebc:	2201      	movs	r2, #1
   13ebe:	7019      	strb	r1, [r3, #0]
   13ec0:	4b06      	ldr	r3, [pc, #24]	; (13edc <ipc_trace_init+0x24>)
   13ec2:	7019      	strb	r1, [r3, #0]
   13ec4:	4b06      	ldr	r3, [pc, #24]	; (13ee0 <ipc_trace_init+0x28>)
   13ec6:	6019      	str	r1, [r3, #0]
   13ec8:	4b06      	ldr	r3, [pc, #24]	; (13ee4 <ipc_trace_init+0x2c>)
   13eca:	6019      	str	r1, [r3, #0]
   13ecc:	4b06      	ldr	r3, [pc, #24]	; (13ee8 <ipc_trace_init+0x30>)
   13ece:	6018      	str	r0, [r3, #0]
   13ed0:	4806      	ldr	r0, [pc, #24]	; (13eec <ipc_trace_init+0x34>)
   13ed2:	f7fa b9cb 	b.w	e26c <nrf_modem_os_sem_init>
   13ed6:	bf00      	nop
   13ed8:	2000ecac 	.word	0x2000ecac
   13edc:	2000ecad 	.word	0x2000ecad
   13ee0:	2000d6d0 	.word	0x2000d6d0
   13ee4:	2000d6d4 	.word	0x2000d6d4
   13ee8:	2000d6e4 	.word	0x2000d6e4
   13eec:	2000d6cc 	.word	0x2000d6cc

00013ef0 <ipc_trace_handler>:
   13ef0:	b470      	push	{r4, r5, r6}
   13ef2:	4b2d      	ldr	r3, [pc, #180]	; (13fa8 <ipc_trace_handler+0xb8>)
   13ef4:	681b      	ldr	r3, [r3, #0]
   13ef6:	6919      	ldr	r1, [r3, #16]
   13ef8:	6958      	ldr	r0, [r3, #20]
   13efa:	7c1a      	ldrb	r2, [r3, #16]
   13efc:	2200      	movs	r2, #0
   13efe:	741a      	strb	r2, [r3, #16]
   13f00:	7c5c      	ldrb	r4, [r3, #17]
   13f02:	745a      	strb	r2, [r3, #17]
   13f04:	7c9c      	ldrb	r4, [r3, #18]
   13f06:	749a      	strb	r2, [r3, #18]
   13f08:	7cdc      	ldrb	r4, [r3, #19]
   13f0a:	74da      	strb	r2, [r3, #19]
   13f0c:	7d1c      	ldrb	r4, [r3, #20]
   13f0e:	751a      	strb	r2, [r3, #20]
   13f10:	7d5c      	ldrb	r4, [r3, #21]
   13f12:	755a      	strb	r2, [r3, #21]
   13f14:	7d9c      	ldrb	r4, [r3, #22]
   13f16:	2903      	cmp	r1, #3
   13f18:	759a      	strb	r2, [r3, #22]
   13f1a:	7ddc      	ldrb	r4, [r3, #23]
   13f1c:	75da      	strb	r2, [r3, #23]
   13f1e:	d029      	beq.n	13f74 <ipc_trace_handler+0x84>
   13f20:	2904      	cmp	r1, #4
   13f22:	d033      	beq.n	13f8c <ipc_trace_handler+0x9c>
   13f24:	2901      	cmp	r1, #1
   13f26:	d12f      	bne.n	13f88 <ipc_trace_handler+0x98>
   13f28:	6885      	ldr	r5, [r0, #8]
   13f2a:	4e20      	ldr	r6, [pc, #128]	; (13fac <ipc_trace_handler+0xbc>)
   13f2c:	4295      	cmp	r5, r2
   13f2e:	d110      	bne.n	13f52 <ipc_trace_handler+0x62>
   13f30:	2101      	movs	r1, #1
   13f32:	7a1a      	ldrb	r2, [r3, #8]
   13f34:	2200      	movs	r2, #0
   13f36:	7219      	strb	r1, [r3, #8]
   13f38:	7a59      	ldrb	r1, [r3, #9]
   13f3a:	725a      	strb	r2, [r3, #9]
   13f3c:	7a99      	ldrb	r1, [r3, #10]
   13f3e:	729a      	strb	r2, [r3, #10]
   13f40:	7ada      	ldrb	r2, [r3, #11]
   13f42:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   13f46:	72da      	strb	r2, [r3, #11]
   13f48:	4b19      	ldr	r3, [pc, #100]	; (13fb0 <ipc_trace_handler+0xc0>)
   13f4a:	bc70      	pop	{r4, r5, r6}
   13f4c:	6818      	ldr	r0, [r3, #0]
   13f4e:	f004 bc71 	b.w	18834 <nrf_modem_os_sem_give>
   13f52:	1c91      	adds	r1, r2, #2
   13f54:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   13f58:	684c      	ldr	r4, [r1, #4]
   13f5a:	7821      	ldrb	r1, [r4, #0]
   13f5c:	2962      	cmp	r1, #98	; 0x62
   13f5e:	d007      	beq.n	13f70 <ipc_trace_handler+0x80>
   13f60:	3963      	subs	r1, #99	; 0x63
   13f62:	bf18      	it	ne
   13f64:	2101      	movne	r1, #1
   13f66:	0049      	lsls	r1, r1, #1
   13f68:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
   13f6c:	3201      	adds	r2, #1
   13f6e:	e7dd      	b.n	13f2c <ipc_trace_handler+0x3c>
   13f70:	2101      	movs	r1, #1
   13f72:	e7f9      	b.n	13f68 <ipc_trace_handler+0x78>
   13f74:	7a18      	ldrb	r0, [r3, #8]
   13f76:	7219      	strb	r1, [r3, #8]
   13f78:	7a59      	ldrb	r1, [r3, #9]
   13f7a:	725a      	strb	r2, [r3, #9]
   13f7c:	7a99      	ldrb	r1, [r3, #10]
   13f7e:	729a      	strb	r2, [r3, #10]
   13f80:	7ada      	ldrb	r2, [r3, #11]
   13f82:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   13f86:	72da      	strb	r2, [r3, #11]
   13f88:	bc70      	pop	{r4, r5, r6}
   13f8a:	4770      	bx	lr
   13f8c:	7a18      	ldrb	r0, [r3, #8]
   13f8e:	7219      	strb	r1, [r3, #8]
   13f90:	7a59      	ldrb	r1, [r3, #9]
   13f92:	725a      	strb	r2, [r3, #9]
   13f94:	7a99      	ldrb	r1, [r3, #10]
   13f96:	729a      	strb	r2, [r3, #10]
   13f98:	7ada      	ldrb	r2, [r3, #11]
   13f9a:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   13f9e:	72da      	strb	r2, [r3, #11]
   13fa0:	2201      	movs	r2, #1
   13fa2:	4b04      	ldr	r3, [pc, #16]	; (13fb4 <ipc_trace_handler+0xc4>)
   13fa4:	701a      	strb	r2, [r3, #0]
   13fa6:	e7ef      	b.n	13f88 <ipc_trace_handler+0x98>
   13fa8:	2000d6e4 	.word	0x2000d6e4
   13fac:	2000d6d8 	.word	0x2000d6d8
   13fb0:	2000d6cc 	.word	0x2000d6cc
   13fb4:	2000ecad 	.word	0x2000ecad

00013fb8 <z_device_get_all_static>:
#include <syscalls/device_is_ready_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
   13fb8:	4a03      	ldr	r2, [pc, #12]	; (13fc8 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
   13fba:	4b04      	ldr	r3, [pc, #16]	; (13fcc <z_device_get_all_static+0x14>)
	*devices = __device_start;
   13fbc:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   13fbe:	1a9b      	subs	r3, r3, r2
}
   13fc0:	4803      	ldr	r0, [pc, #12]	; (13fd0 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
   13fc2:	109b      	asrs	r3, r3, #2
}
   13fc4:	4358      	muls	r0, r3
   13fc6:	4770      	bx	lr
   13fc8:	0001b2f0 	.word	0x0001b2f0
   13fcc:	0001b37c 	.word	0x0001b37c
   13fd0:	b6db6db7 	.word	0xb6db6db7

00013fd4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   13fd4:	4b01      	ldr	r3, [pc, #4]	; (13fdc <z_impl_z_errno+0x8>)
   13fd6:	6898      	ldr	r0, [r3, #8]
}
   13fd8:	3064      	adds	r0, #100	; 0x64
   13fda:	4770      	bx	lr
   13fdc:	2000d6e8 	.word	0x2000d6e8

00013fe0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   13fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13fe4:	4606      	mov	r6, r0
   13fe6:	b086      	sub	sp, #24
   13fe8:	460f      	mov	r7, r1
	__asm__ volatile(
   13fea:	f04f 0320 	mov.w	r3, #32
   13fee:	f3ef 8811 	mrs	r8, BASEPRI
   13ff2:	f383 8812 	msr	BASEPRI_MAX, r3
   13ff6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   13ffa:	f000 ff89 	bl	14f10 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   13ffe:	2400      	movs	r4, #0
   14000:	2e04      	cmp	r6, #4
   14002:	bf96      	itet	ls
   14004:	4b21      	ldrls	r3, [pc, #132]	; (1408c <z_fatal_error+0xac>)
   14006:	4b22      	ldrhi	r3, [pc, #136]	; (14090 <z_fatal_error+0xb0>)
   14008:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
   1400c:	4605      	mov	r5, r0
   1400e:	e9cd 3404 	strd	r3, r4, [sp, #16]
   14012:	4b20      	ldr	r3, [pc, #128]	; (14094 <z_fatal_error+0xb4>)
   14014:	2201      	movs	r2, #1
   14016:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1401a:	4620      	mov	r0, r4
   1401c:	4623      	mov	r3, r4
   1401e:	491e      	ldr	r1, [pc, #120]	; (14098 <z_fatal_error+0xb8>)
   14020:	9603      	str	r6, [sp, #12]
   14022:	9400      	str	r4, [sp, #0]
   14024:	f005 feef 	bl	19e06 <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   14028:	b16f      	cbz	r7, 14046 <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1402a:	69fb      	ldr	r3, [r7, #28]
   1402c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   14030:	b14b      	cbz	r3, 14046 <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
   14032:	4b1a      	ldr	r3, [pc, #104]	; (1409c <z_fatal_error+0xbc>)
   14034:	2201      	movs	r2, #1
   14036:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1403a:	4620      	mov	r0, r4
   1403c:	4623      	mov	r3, r4
   1403e:	4916      	ldr	r1, [pc, #88]	; (14098 <z_fatal_error+0xb8>)
   14040:	9400      	str	r4, [sp, #0]
   14042:	f005 fee0 	bl	19e06 <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   14046:	b12d      	cbz	r5, 14054 <z_fatal_error+0x74>
   14048:	4628      	mov	r0, r5
   1404a:	f005 ff76 	bl	19f3a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1404e:	b108      	cbz	r0, 14054 <z_fatal_error+0x74>
   14050:	7803      	ldrb	r3, [r0, #0]
   14052:	b903      	cbnz	r3, 14056 <z_fatal_error+0x76>
		thread_name = "unknown";
   14054:	4812      	ldr	r0, [pc, #72]	; (140a0 <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   14056:	4b13      	ldr	r3, [pc, #76]	; (140a4 <z_fatal_error+0xc4>)
   14058:	2201      	movs	r2, #1
   1405a:	9302      	str	r3, [sp, #8]
   1405c:	2300      	movs	r3, #0
   1405e:	e9cd 5003 	strd	r5, r0, [sp, #12]
   14062:	e9cd 3300 	strd	r3, r3, [sp]
   14066:	4618      	mov	r0, r3
   14068:	490b      	ldr	r1, [pc, #44]	; (14098 <z_fatal_error+0xb8>)
   1406a:	f005 fecc 	bl	19e06 <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1406e:	4639      	mov	r1, r7
   14070:	4630      	mov	r0, r6
   14072:	f7fc ff67 	bl	10f44 <k_sys_fatal_error_handler>
	__asm__ volatile(
   14076:	f388 8811 	msr	BASEPRI, r8
   1407a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1407e:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   14080:	b006      	add	sp, #24
   14082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14086:	f7f8 be67 	b.w	cd58 <z_impl_k_thread_abort>
   1408a:	bf00      	nop
   1408c:	0001bd78 	.word	0x0001bd78
   14090:	0001df2c 	.word	0x0001df2c
   14094:	0001df42 	.word	0x0001df42
   14098:	0001b67c 	.word	0x0001b67c
   1409c:	0001df6a 	.word	0x0001df6a
   140a0:	0001df3a 	.word	0x0001df3a
   140a4:	0001df8b 	.word	0x0001df8b

000140a8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   140a8:	4b10      	ldr	r3, [pc, #64]	; (140ec <z_sys_init_run_level+0x44>)
{
   140aa:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   140ac:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   140b0:	3001      	adds	r0, #1
   140b2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   140b6:	42a6      	cmp	r6, r4
   140b8:	d800      	bhi.n	140bc <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   140ba:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   140bc:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   140c0:	b18d      	cbz	r5, 140e6 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   140c2:	4628      	mov	r0, r5
   140c4:	4798      	blx	r3
			if (rc != 0) {
   140c6:	b138      	cbz	r0, 140d8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   140c8:	2800      	cmp	r0, #0
   140ca:	bfb8      	it	lt
   140cc:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   140ce:	28ff      	cmp	r0, #255	; 0xff
   140d0:	bfa8      	it	ge
   140d2:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   140d4:	68eb      	ldr	r3, [r5, #12]
   140d6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   140d8:	68ea      	ldr	r2, [r5, #12]
   140da:	7853      	ldrb	r3, [r2, #1]
   140dc:	f043 0301 	orr.w	r3, r3, #1
   140e0:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   140e2:	3408      	adds	r4, #8
   140e4:	e7e7      	b.n	140b6 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   140e6:	4798      	blx	r3
   140e8:	e7fb      	b.n	140e2 <z_sys_init_run_level+0x3a>
   140ea:	bf00      	nop
   140ec:	0001bd8c 	.word	0x0001bd8c

000140f0 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   140f0:	2201      	movs	r2, #1
{
   140f2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   140f4:	4b09      	ldr	r3, [pc, #36]	; (1411c <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   140f6:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   140f8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   140fa:	f7ff ffd5 	bl	140a8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   140fe:	f001 f983 	bl	15408 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   14102:	2004      	movs	r0, #4
   14104:	f7ff ffd0 	bl	140a8 <z_sys_init_run_level>

	z_init_static_threads();
   14108:	f000 f92c 	bl	14364 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   1410c:	f7f6 fda0 	bl	ac50 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   14110:	4a03      	ldr	r2, [pc, #12]	; (14120 <bg_thread_main+0x30>)
   14112:	7b13      	ldrb	r3, [r2, #12]
   14114:	f023 0301 	bic.w	r3, r3, #1
   14118:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1411a:	bd08      	pop	{r3, pc}
   1411c:	2000ecae 	.word	0x2000ecae
   14120:	2000cda0 	.word	0x2000cda0

00014124 <z_bss_zero>:
{
   14124:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   14126:	4803      	ldr	r0, [pc, #12]	; (14134 <z_bss_zero+0x10>)
   14128:	4a03      	ldr	r2, [pc, #12]	; (14138 <z_bss_zero+0x14>)
   1412a:	2100      	movs	r1, #0
   1412c:	1a12      	subs	r2, r2, r0
   1412e:	f005 fe7a 	bl	19e26 <z_early_memset>
}
   14132:	bd08      	pop	{r3, pc}
   14134:	2000cab0 	.word	0x2000cab0
   14138:	2000ecb0 	.word	0x2000ecb0

0001413c <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   1413c:	23c8      	movs	r3, #200	; 0xc8
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1413e:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   14140:	4e13      	ldr	r6, [pc, #76]	; (14190 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   14142:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   14144:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   14148:	2300      	movs	r3, #0
{
   1414a:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1414c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   14150:	220f      	movs	r2, #15
   14152:	9301      	str	r3, [sp, #4]
   14154:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   14158:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   1415a:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1415e:	4d0d      	ldr	r5, [pc, #52]	; (14194 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   14160:	490d      	ldr	r1, [pc, #52]	; (14198 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   14162:	fb03 5500 	mla	r5, r3, r0, r5
{
   14166:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   14168:	fb02 1100 	mla	r1, r2, r0, r1
   1416c:	4b0b      	ldr	r3, [pc, #44]	; (1419c <z_init_cpu+0x60>)
   1416e:	4630      	mov	r0, r6
   14170:	9500      	str	r5, [sp, #0]
   14172:	f000 f89b 	bl	142ac <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14176:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   14178:	742c      	strb	r4, [r5, #16]
   1417a:	f023 0304 	bic.w	r3, r3, #4
   1417e:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   14180:	4b07      	ldr	r3, [pc, #28]	; (141a0 <z_init_cpu+0x64>)
   14182:	3401      	adds	r4, #1
   14184:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   14188:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   1418a:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1418c:	b006      	add	sp, #24
   1418e:	bd70      	pop	{r4, r5, r6, pc}
   14190:	2000ccd8 	.word	0x2000ccd8
   14194:	2000d6e8 	.word	0x2000d6e8
   14198:	2000f9b0 	.word	0x2000f9b0
   1419c:	0001441d 	.word	0x0001441d
   141a0:	2000f1b0 	.word	0x2000f1b0

000141a4 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   141a4:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   141a6:	2000      	movs	r0, #0
{
   141a8:	b0b8      	sub	sp, #224	; 0xe0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   141aa:	f7ff ff7d 	bl	140a8 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   141ae:	4b2f      	ldr	r3, [pc, #188]	; (1426c <z_cstart+0xc8>)
	uint32_t msp =
   141b0:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   141b4:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   141b8:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   141bc:	2400      	movs	r4, #0
   141be:	23e0      	movs	r3, #224	; 0xe0
   141c0:	4d2b      	ldr	r5, [pc, #172]	; (14270 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   141c2:	4e2c      	ldr	r6, [pc, #176]	; (14274 <z_cstart+0xd0>)
   141c4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   141c8:	77ec      	strb	r4, [r5, #31]
   141ca:	762c      	strb	r4, [r5, #24]
   141cc:	766c      	strb	r4, [r5, #25]
   141ce:	76ac      	strb	r4, [r5, #26]
   141d0:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   141d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   141d6:	4f28      	ldr	r7, [pc, #160]	; (14278 <z_cstart+0xd4>)
   141d8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   141dc:	626b      	str	r3, [r5, #36]	; 0x24
   141de:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   141e2:	f7f8 fd1d 	bl	cc20 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   141e6:	f7f8 f84f 	bl	c288 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   141ea:	f04f 33ff 	mov.w	r3, #4294967295
   141ee:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   141f0:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   141f2:	f7f8 ff4d 	bl	d090 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   141f6:	f7f8 fdc5 	bl	cd84 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   141fa:	f7f7 fb17 	bl	b82c <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   141fe:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   14202:	ad06      	add	r5, sp, #24
   14204:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   14206:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   1420a:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   1420e:	f001 f8dd 	bl	153cc <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   14212:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   14214:	f005 fdeb 	bl	19dee <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   14218:	2001      	movs	r0, #1
   1421a:	f7ff ff45 	bl	140a8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1421e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   14220:	4d16      	ldr	r5, [pc, #88]	; (1427c <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   14222:	f7ff ff41 	bl	140a8 <z_sys_init_run_level>
	z_sched_init();
   14226:	f000 fdcf 	bl	14dc8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1422a:	4b15      	ldr	r3, [pc, #84]	; (14280 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   1422c:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1422e:	9305      	str	r3, [sp, #20]
   14230:	2301      	movs	r3, #1
   14232:	4914      	ldr	r1, [pc, #80]	; (14284 <z_cstart+0xe0>)
   14234:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   14238:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1423c:	4628      	mov	r0, r5
   1423e:	463b      	mov	r3, r7
   14240:	e9cd 4401 	strd	r4, r4, [sp, #4]
   14244:	9400      	str	r4, [sp, #0]
   14246:	f000 f831 	bl	142ac <z_setup_new_thread>
   1424a:	4606      	mov	r6, r0
   1424c:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   1424e:	4628      	mov	r0, r5
   14250:	f022 0204 	bic.w	r2, r2, #4
   14254:	736a      	strb	r2, [r5, #13]
   14256:	f005 ff9a 	bl	1a18e <z_ready_thread>
	z_init_cpu(0);
   1425a:	4620      	mov	r0, r4
   1425c:	f7ff ff6e 	bl	1413c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   14260:	463a      	mov	r2, r7
   14262:	4631      	mov	r1, r6
   14264:	4628      	mov	r0, r5
   14266:	f7f8 f9bb 	bl	c5e0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1426a:	bf00      	nop
   1426c:	2000f1b0 	.word	0x2000f1b0
   14270:	e000ed00 	.word	0xe000ed00
   14274:	2000d6e8 	.word	0x2000d6e8
   14278:	000140f1 	.word	0x000140f1
   1427c:	2000cda0 	.word	0x2000cda0
   14280:	0001dfed 	.word	0x0001dfed
   14284:	2000faf0 	.word	0x2000faf0

00014288 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   14288:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1428a:	4c06      	ldr	r4, [pc, #24]	; (142a4 <statics_init+0x1c>)
   1428c:	4d06      	ldr	r5, [pc, #24]	; (142a8 <statics_init+0x20>)
   1428e:	42ac      	cmp	r4, r5
   14290:	d301      	bcc.n	14296 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   14292:	2000      	movs	r0, #0
   14294:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   14296:	4620      	mov	r0, r4
   14298:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1429c:	f005 fdc7 	bl	19e2e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   142a0:	3414      	adds	r4, #20
   142a2:	e7f4      	b.n	1428e <statics_init+0x6>
   142a4:	2000c924 	.word	0x2000c924
   142a8:	2000c94c 	.word	0x2000c94c

000142ac <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   142ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   142b0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   142b2:	f100 0558 	add.w	r5, r0, #88	; 0x58
   142b6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   142b8:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   142ba:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   142be:	2500      	movs	r5, #0
{
   142c0:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
   142c2:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   142c4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   142c6:	e9c0 5506 	strd	r5, r5, [r0, #24]
   142ca:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   142cc:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   142ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   142d0:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
   142d4:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   142d8:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   142da:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   142dc:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   142de:	9202      	str	r2, [sp, #8]
   142e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   142e2:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   142e6:	9201      	str	r2, [sp, #4]
   142e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   142ea:	9200      	str	r2, [sp, #0]
   142ec:	4642      	mov	r2, r8
   142ee:	f7f8 f957 	bl	c5a0 <arch_new_thread>
	if (!_current) {
   142f2:	4b05      	ldr	r3, [pc, #20]	; (14308 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   142f4:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   142f6:	689b      	ldr	r3, [r3, #8]
   142f8:	b103      	cbz	r3, 142fc <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   142fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   142fc:	4640      	mov	r0, r8
   142fe:	6763      	str	r3, [r4, #116]	; 0x74
   14300:	b004      	add	sp, #16
   14302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14306:	bf00      	nop
   14308:	2000d6e8 	.word	0x2000d6e8

0001430c <z_impl_k_thread_create>:
{
   1430c:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1430e:	2500      	movs	r5, #0
{
   14310:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14312:	9505      	str	r5, [sp, #20]
   14314:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   14316:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1431a:	9504      	str	r5, [sp, #16]
   1431c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   1431e:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14320:	9503      	str	r5, [sp, #12]
   14322:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   14324:	9502      	str	r5, [sp, #8]
   14326:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   14328:	9501      	str	r5, [sp, #4]
   1432a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1432c:	9500      	str	r5, [sp, #0]
   1432e:	f7ff ffbd 	bl	142ac <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   14332:	f1b6 3fff 	cmp.w	r6, #4294967295
   14336:	bf08      	it	eq
   14338:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   1433c:	d005      	beq.n	1434a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1433e:	ea56 0307 	orrs.w	r3, r6, r7
   14342:	d105      	bne.n	14350 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   14344:	4620      	mov	r0, r4
   14346:	f000 fcbf 	bl	14cc8 <z_sched_start>
}
   1434a:	4620      	mov	r0, r4
   1434c:	b007      	add	sp, #28
   1434e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   14350:	463a      	mov	r2, r7
   14352:	4633      	mov	r3, r6
   14354:	4902      	ldr	r1, [pc, #8]	; (14360 <z_impl_k_thread_create+0x54>)
   14356:	f104 0018 	add.w	r0, r4, #24
   1435a:	f000 feb1 	bl	150c0 <z_add_timeout>
   1435e:	e7f4      	b.n	1434a <z_impl_k_thread_create+0x3e>
   14360:	0001a1f3 	.word	0x0001a1f3

00014364 <z_init_static_threads>:
{
   14364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14368:	4c29      	ldr	r4, [pc, #164]	; (14410 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1436a:	4d2a      	ldr	r5, [pc, #168]	; (14414 <z_init_static_threads+0xb0>)
{
   1436c:	b087      	sub	sp, #28
   1436e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   14370:	42ae      	cmp	r6, r5
   14372:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   14376:	d30f      	bcc.n	14398 <z_init_static_threads+0x34>
	k_sched_lock();
   14378:	f000 fcf6 	bl	14d68 <k_sched_lock>
   1437c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   14380:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   14384:	4c22      	ldr	r4, [pc, #136]	; (14410 <z_init_static_threads+0xac>)
   14386:	f8df 9090 	ldr.w	r9, [pc, #144]	; 14418 <z_init_static_threads+0xb4>
   1438a:	42ac      	cmp	r4, r5
   1438c:	d320      	bcc.n	143d0 <z_init_static_threads+0x6c>
}
   1438e:	b007      	add	sp, #28
   14390:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   14394:	f000 bcfc 	b.w	14d90 <k_sched_unlock>
		z_setup_new_thread(
   14398:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1439c:	9305      	str	r3, [sp, #20]
   1439e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   143a2:	9304      	str	r3, [sp, #16]
   143a4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   143a8:	9303      	str	r3, [sp, #12]
   143aa:	f854 3c14 	ldr.w	r3, [r4, #-20]
   143ae:	9302      	str	r3, [sp, #8]
   143b0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   143b4:	9301      	str	r3, [sp, #4]
   143b6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   143ba:	9300      	str	r3, [sp, #0]
   143bc:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   143c0:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   143c4:	f7ff ff72 	bl	142ac <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   143c8:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   143cc:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   143ce:	e7ce      	b.n	1436e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   143d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   143d2:	1c5a      	adds	r2, r3, #1
   143d4:	d00d      	beq.n	143f2 <z_init_static_threads+0x8e>
   143d6:	2100      	movs	r1, #0
   143d8:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   143da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   143de:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   143e2:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   143e6:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   143ea:	d104      	bne.n	143f6 <z_init_static_threads+0x92>
	z_sched_start(thread);
   143ec:	4640      	mov	r0, r8
   143ee:	f000 fc6b 	bl	14cc8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   143f2:	342c      	adds	r4, #44	; 0x2c
   143f4:	e7c9      	b.n	1438a <z_init_static_threads+0x26>
   143f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   143fa:	2300      	movs	r3, #0
   143fc:	f7f4 fac2 	bl	8984 <__aeabi_uldivmod>
   14400:	4602      	mov	r2, r0
   14402:	460b      	mov	r3, r1
   14404:	f108 0018 	add.w	r0, r8, #24
   14408:	4649      	mov	r1, r9
   1440a:	f000 fe59 	bl	150c0 <z_add_timeout>
   1440e:	e7f0      	b.n	143f2 <z_init_static_threads+0x8e>
   14410:	0001b584 	.word	0x0001b584
   14414:	0001b584 	.word	0x0001b584
   14418:	0001a1f3 	.word	0x0001a1f3

0001441c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1441c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1441e:	4c0b      	ldr	r4, [pc, #44]	; (1444c <idle+0x30>)
   14420:	4d0b      	ldr	r5, [pc, #44]	; (14450 <idle+0x34>)
	__asm__ volatile(
   14422:	f04f 0220 	mov.w	r2, #32
   14426:	f3ef 8311 	mrs	r3, BASEPRI
   1442a:	f382 8812 	msr	BASEPRI_MAX, r2
   1442e:	f3bf 8f6f 	isb	sy
   14432:	f005 ff75 	bl	1a320 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   14436:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   14438:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1443a:	b913      	cbnz	r3, 14442 <idle+0x26>
	arch_cpu_idle();
   1443c:	f7f7 ff2a 	bl	c294 <arch_cpu_idle>
}
   14440:	e7ef      	b.n	14422 <idle+0x6>
   14442:	f7f7 fd53 	bl	beec <pm_system_suspend>
   14446:	2800      	cmp	r0, #0
   14448:	d1eb      	bne.n	14422 <idle+0x6>
   1444a:	e7f7      	b.n	1443c <idle+0x20>
   1444c:	2000d6e8 	.word	0x2000d6e8
   14450:	2000ecae 	.word	0x2000ecae

00014454 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   14454:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14458:	4604      	mov	r4, r0
   1445a:	460e      	mov	r6, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   1445c:	f100 0808 	add.w	r8, r0, #8
   14460:	f04f 0120 	mov.w	r1, #32
   14464:	f3ef 8711 	mrs	r7, BASEPRI
   14468:	f381 8812 	msr	BASEPRI_MAX, r1
   1446c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   14470:	6a05      	ldr	r5, [r0, #32]
   14472:	68c1      	ldr	r1, [r0, #12]
   14474:	428d      	cmp	r5, r1
   14476:	d231      	bcs.n	144dc <z_impl_k_msgq_put+0x88>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   14478:	f005 febf 	bl	1a1fa <z_unpend_first_thread>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1447c:	4631      	mov	r1, r6
		if (pending_thread != NULL) {
   1447e:	4605      	mov	r5, r0
   14480:	68a2      	ldr	r2, [r4, #8]
   14482:	b178      	cbz	r0, 144a4 <z_impl_k_msgq_put+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   14484:	2400      	movs	r4, #0
   14486:	6940      	ldr	r0, [r0, #20]
   14488:	f006 f92c 	bl	1a6e4 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1448c:	4628      	mov	r0, r5
   1448e:	67ec      	str	r4, [r5, #124]	; 0x7c
   14490:	f005 fe7d 	bl	1a18e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   14494:	4640      	mov	r0, r8
   14496:	4639      	mov	r1, r7
   14498:	f000 fc04 	bl	14ca4 <z_reschedule>
			return 0;
   1449c:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1449e:	b002      	add	sp, #8
   144a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   144a4:	69e0      	ldr	r0, [r4, #28]
   144a6:	f006 f91d 	bl	1a6e4 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   144aa:	69e3      	ldr	r3, [r4, #28]
   144ac:	68a2      	ldr	r2, [r4, #8]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   144ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->write_ptr += msgq->msg_size;
   144b2:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   144b4:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   144b6:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   144b8:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   144ba:	bf08      	it	eq
   144bc:	6923      	ldreq	r3, [r4, #16]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   144be:	f04f 0110 	mov.w	r1, #16
				msgq->write_ptr = msgq->buffer_start;
   144c2:	bf08      	it	eq
   144c4:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   144c6:	6a23      	ldr	r3, [r4, #32]
   144c8:	3301      	adds	r3, #1
   144ca:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   144cc:	f006 f8a4 	bl	1a618 <z_handle_obj_poll_events>
		result = 0;
   144d0:	2000      	movs	r0, #0
	__asm__ volatile(
   144d2:	f387 8811 	msr	BASEPRI, r7
   144d6:	f3bf 8f6f 	isb	sy
	return result;
   144da:	e7e0      	b.n	1449e <z_impl_k_msgq_put+0x4a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   144dc:	ea52 0103 	orrs.w	r1, r2, r3
   144e0:	d00a      	beq.n	144f8 <z_impl_k_msgq_put+0xa4>
		_current->base.swap_data = (void *) data;
   144e2:	4907      	ldr	r1, [pc, #28]	; (14500 <z_impl_k_msgq_put+0xac>)
   144e4:	6889      	ldr	r1, [r1, #8]
   144e6:	614e      	str	r6, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   144e8:	e9cd 2300 	strd	r2, r3, [sp]
   144ec:	4639      	mov	r1, r7
   144ee:	4602      	mov	r2, r0
   144f0:	4640      	mov	r0, r8
   144f2:	f000 fb73 	bl	14bdc <z_pend_curr>
		return result;
   144f6:	e7d2      	b.n	1449e <z_impl_k_msgq_put+0x4a>
		result = -ENOMSG;
   144f8:	f06f 0022 	mvn.w	r0, #34	; 0x22
   144fc:	e7e9      	b.n	144d2 <z_impl_k_msgq_put+0x7e>
   144fe:	bf00      	nop
   14500:	2000d6e8 	.word	0x2000d6e8

00014504 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   14504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14506:	4604      	mov	r4, r0
   14508:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1450a:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
   1450e:	f04f 0120 	mov.w	r1, #32
   14512:	f3ef 8611 	mrs	r6, BASEPRI
   14516:	f381 8812 	msr	BASEPRI_MAX, r1
   1451a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   1451e:	6a21      	ldr	r1, [r4, #32]
   14520:	2900      	cmp	r1, #0
   14522:	d031      	beq.n	14588 <z_impl_k_msgq_get+0x84>
   14524:	68a2      	ldr	r2, [r4, #8]
   14526:	69a1      	ldr	r1, [r4, #24]
   14528:	f006 f8dc 	bl	1a6e4 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   1452c:	69a3      	ldr	r3, [r4, #24]
   1452e:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   14530:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   14532:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   14534:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   14536:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   14538:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   1453a:	bf04      	itt	eq
   1453c:	6923      	ldreq	r3, [r4, #16]
   1453e:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   14540:	6a23      	ldr	r3, [r4, #32]
   14542:	3b01      	subs	r3, #1
   14544:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   14546:	f005 fe58 	bl	1a1fa <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1454a:	4605      	mov	r5, r0
   1454c:	b360      	cbz	r0, 145a8 <z_impl_k_msgq_get+0xa4>
   1454e:	6941      	ldr	r1, [r0, #20]
   14550:	68a2      	ldr	r2, [r4, #8]
   14552:	69e0      	ldr	r0, [r4, #28]
   14554:	f006 f8c6 	bl	1a6e4 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   14558:	69e3      	ldr	r3, [r4, #28]
   1455a:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1455c:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   1455e:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   14560:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   14562:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   14564:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   14566:	bf04      	itt	eq
   14568:	6923      	ldreq	r3, [r4, #16]
   1456a:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1456c:	6a23      	ldr	r3, [r4, #32]
   1456e:	3301      	adds	r3, #1
   14570:	6223      	str	r3, [r4, #32]
   14572:	2400      	movs	r4, #0
   14574:	67ec      	str	r4, [r5, #124]	; 0x7c
			z_ready_thread(pending_thread);
   14576:	f005 fe0a 	bl	1a18e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1457a:	4638      	mov	r0, r7
   1457c:	4631      	mov	r1, r6
   1457e:	f000 fb91 	bl	14ca4 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   14582:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   14584:	b003      	add	sp, #12
   14586:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14588:	ea52 0103 	orrs.w	r1, r2, r3
   1458c:	d00a      	beq.n	145a4 <z_impl_k_msgq_get+0xa0>
		_current->base.swap_data = data;
   1458e:	4909      	ldr	r1, [pc, #36]	; (145b4 <z_impl_k_msgq_get+0xb0>)
   14590:	6889      	ldr	r1, [r1, #8]
   14592:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   14594:	e9cd 2300 	strd	r2, r3, [sp]
   14598:	4631      	mov	r1, r6
   1459a:	4622      	mov	r2, r4
   1459c:	4638      	mov	r0, r7
   1459e:	f000 fb1d 	bl	14bdc <z_pend_curr>
		return result;
   145a2:	e7ef      	b.n	14584 <z_impl_k_msgq_get+0x80>
		result = -ENOMSG;
   145a4:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   145a8:	f386 8811 	msr	BASEPRI, r6
   145ac:	f3bf 8f6f 	isb	sy
	return result;
   145b0:	e7e8      	b.n	14584 <z_impl_k_msgq_get+0x80>
   145b2:	bf00      	nop
   145b4:	2000d6e8 	.word	0x2000d6e8

000145b8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   145b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   145bc:	4604      	mov	r4, r0
   145be:	4617      	mov	r7, r2
   145c0:	461e      	mov	r6, r3
	__asm__ volatile(
   145c2:	f04f 0320 	mov.w	r3, #32
   145c6:	f3ef 8811 	mrs	r8, BASEPRI
   145ca:	f383 8812 	msr	BASEPRI_MAX, r3
   145ce:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   145d2:	68c3      	ldr	r3, [r0, #12]
   145d4:	4a33      	ldr	r2, [pc, #204]	; (146a4 <z_impl_k_mutex_lock+0xec>)
   145d6:	b17b      	cbz	r3, 145f8 <z_impl_k_mutex_lock+0x40>
   145d8:	6880      	ldr	r0, [r0, #8]
   145da:	6891      	ldr	r1, [r2, #8]
   145dc:	4288      	cmp	r0, r1
   145de:	d019      	beq.n	14614 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   145e0:	ea57 0306 	orrs.w	r3, r7, r6
   145e4:	d118      	bne.n	14618 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   145e6:	f388 8811 	msr	BASEPRI, r8
   145ea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   145ee:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   145f2:	b002      	add	sp, #8
   145f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   145f8:	6891      	ldr	r1, [r2, #8]
   145fa:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   145fe:	3301      	adds	r3, #1
   14600:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   14602:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   14604:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   14606:	60a3      	str	r3, [r4, #8]
   14608:	f388 8811 	msr	BASEPRI, r8
   1460c:	f3bf 8f6f 	isb	sy
		return 0;
   14610:	2000      	movs	r0, #0
   14612:	e7ee      	b.n	145f2 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   14614:	6921      	ldr	r1, [r4, #16]
   14616:	e7f2      	b.n	145fe <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   14618:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1461c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   14620:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   14624:	4299      	cmp	r1, r3
   14626:	bfa8      	it	ge
   14628:	4619      	movge	r1, r3
   1462a:	4291      	cmp	r1, r2
   1462c:	bfb8      	it	lt
   1462e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   14630:	428b      	cmp	r3, r1
   14632:	dd2e      	ble.n	14692 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   14634:	f005 fc8c 	bl	19f50 <adjust_owner_prio.isra.0>
   14638:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1463a:	4622      	mov	r2, r4
   1463c:	4641      	mov	r1, r8
   1463e:	e9cd 7600 	strd	r7, r6, [sp]
   14642:	4819      	ldr	r0, [pc, #100]	; (146a8 <z_impl_k_mutex_lock+0xf0>)
   14644:	f000 faca 	bl	14bdc <z_pend_curr>
	if (got_mutex == 0) {
   14648:	2800      	cmp	r0, #0
   1464a:	d0e1      	beq.n	14610 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   1464c:	f04f 0320 	mov.w	r3, #32
   14650:	f3ef 8611 	mrs	r6, BASEPRI
   14654:	f383 8812 	msr	BASEPRI_MAX, r3
   14658:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   1465c:	68a0      	ldr	r0, [r4, #8]
   1465e:	b1d0      	cbz	r0, 14696 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   14660:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   14662:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14664:	429c      	cmp	r4, r3
   14666:	d00a      	beq.n	1467e <z_impl_k_mutex_lock+0xc6>
   14668:	b14b      	cbz	r3, 1467e <z_impl_k_mutex_lock+0xc6>
   1466a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1466e:	4299      	cmp	r1, r3
   14670:	bfa8      	it	ge
   14672:	4619      	movge	r1, r3
   14674:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   14678:	4299      	cmp	r1, r3
   1467a:	bfb8      	it	lt
   1467c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1467e:	f005 fc67 	bl	19f50 <adjust_owner_prio.isra.0>
   14682:	b140      	cbz	r0, 14696 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   14684:	4631      	mov	r1, r6
   14686:	4808      	ldr	r0, [pc, #32]	; (146a8 <z_impl_k_mutex_lock+0xf0>)
   14688:	f000 fb0c 	bl	14ca4 <z_reschedule>
	return -EAGAIN;
   1468c:	f06f 000a 	mvn.w	r0, #10
   14690:	e7af      	b.n	145f2 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   14692:	2500      	movs	r5, #0
   14694:	e7d1      	b.n	1463a <z_impl_k_mutex_lock+0x82>
	if (resched) {
   14696:	2d00      	cmp	r5, #0
   14698:	d1f4      	bne.n	14684 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1469a:	f386 8811 	msr	BASEPRI, r6
   1469e:	f3bf 8f6f 	isb	sy
   146a2:	e7f3      	b.n	1468c <z_impl_k_mutex_lock+0xd4>
   146a4:	2000d6e8 	.word	0x2000d6e8
   146a8:	2000ecaf 	.word	0x2000ecaf

000146ac <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   146ac:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   146ae:	6883      	ldr	r3, [r0, #8]
{
   146b0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   146b2:	b36b      	cbz	r3, 14710 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   146b4:	4a19      	ldr	r2, [pc, #100]	; (1471c <z_impl_k_mutex_unlock+0x70>)
   146b6:	6892      	ldr	r2, [r2, #8]
   146b8:	4293      	cmp	r3, r2
   146ba:	d12c      	bne.n	14716 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   146bc:	68c3      	ldr	r3, [r0, #12]
   146be:	2b01      	cmp	r3, #1
   146c0:	d903      	bls.n	146ca <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   146c2:	3b01      	subs	r3, #1
   146c4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   146c6:	2000      	movs	r0, #0
}
   146c8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   146ca:	f04f 0320 	mov.w	r3, #32
   146ce:	f3ef 8511 	mrs	r5, BASEPRI
   146d2:	f383 8812 	msr	BASEPRI_MAX, r3
   146d6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   146da:	6901      	ldr	r1, [r0, #16]
   146dc:	6880      	ldr	r0, [r0, #8]
   146de:	f005 fc37 	bl	19f50 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   146e2:	4620      	mov	r0, r4
   146e4:	f005 fd89 	bl	1a1fa <z_unpend_first_thread>
	mutex->owner = new_owner;
   146e8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   146ea:	b158      	cbz	r0, 14704 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   146ec:	f990 200e 	ldrsb.w	r2, [r0, #14]
   146f0:	6122      	str	r2, [r4, #16]
   146f2:	2200      	movs	r2, #0
   146f4:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   146f6:	f005 fd4a 	bl	1a18e <z_ready_thread>
		z_reschedule(&lock, key);
   146fa:	4629      	mov	r1, r5
   146fc:	4808      	ldr	r0, [pc, #32]	; (14720 <z_impl_k_mutex_unlock+0x74>)
   146fe:	f000 fad1 	bl	14ca4 <z_reschedule>
   14702:	e7e0      	b.n	146c6 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   14704:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   14706:	f385 8811 	msr	BASEPRI, r5
   1470a:	f3bf 8f6f 	isb	sy
   1470e:	e7da      	b.n	146c6 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   14710:	f06f 0015 	mvn.w	r0, #21
   14714:	e7d8      	b.n	146c8 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   14716:	f04f 30ff 	mov.w	r0, #4294967295
   1471a:	e7d5      	b.n	146c8 <z_impl_k_mutex_unlock+0x1c>
   1471c:	2000d6e8 	.word	0x2000d6e8
   14720:	2000ecaf 	.word	0x2000ecaf

00014724 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   14724:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14726:	4611      	mov	r1, r2
	__asm__ volatile(
   14728:	f04f 0220 	mov.w	r2, #32
   1472c:	f3ef 8511 	mrs	r5, BASEPRI
   14730:	f382 8812 	msr	BASEPRI_MAX, r2
   14734:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   14738:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1473a:	b19c      	cbz	r4, 14764 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1473c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1473e:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14740:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   14744:	4294      	cmp	r4, r2
	list->head = node;
   14746:	6003      	str	r3, [r0, #0]
	list->tail = node;
   14748:	bf08      	it	eq
   1474a:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1474c:	2101      	movs	r1, #1
   1474e:	4620      	mov	r0, r4
   14750:	f005 fc73 	bl	1a03a <z_queue_node_peek>
   14754:	4604      	mov	r4, r0
	__asm__ volatile(
   14756:	f385 8811 	msr	BASEPRI, r5
   1475a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1475e:	4620      	mov	r0, r4
   14760:	b003      	add	sp, #12
   14762:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14764:	ea51 0203 	orrs.w	r2, r1, r3
   14768:	d0f5      	beq.n	14756 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1476a:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1476e:	e9cd 1300 	strd	r1, r3, [sp]
   14772:	4610      	mov	r0, r2
   14774:	4629      	mov	r1, r5
   14776:	f000 fa31 	bl	14bdc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1477a:	2800      	cmp	r0, #0
   1477c:	d1ef      	bne.n	1475e <z_impl_k_queue_get+0x3a>
   1477e:	4b02      	ldr	r3, [pc, #8]	; (14788 <z_impl_k_queue_get+0x64>)
   14780:	689b      	ldr	r3, [r3, #8]
   14782:	695c      	ldr	r4, [r3, #20]
   14784:	e7eb      	b.n	1475e <z_impl_k_queue_get+0x3a>
   14786:	bf00      	nop
   14788:	2000d6e8 	.word	0x2000d6e8

0001478c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1478c:	b538      	push	{r3, r4, r5, lr}
   1478e:	4604      	mov	r4, r0
	__asm__ volatile(
   14790:	f04f 0320 	mov.w	r3, #32
   14794:	f3ef 8511 	mrs	r5, BASEPRI
   14798:	f383 8812 	msr	BASEPRI_MAX, r3
   1479c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   147a0:	f005 fd2b 	bl	1a1fa <z_unpend_first_thread>

	if (thread != NULL) {
   147a4:	b148      	cbz	r0, 147ba <z_impl_k_sem_give+0x2e>
   147a6:	2200      	movs	r2, #0
   147a8:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   147aa:	f005 fcf0 	bl	1a18e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   147ae:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   147b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   147b4:	4807      	ldr	r0, [pc, #28]	; (147d4 <z_impl_k_sem_give+0x48>)
   147b6:	f000 ba75 	b.w	14ca4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   147ba:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   147be:	429a      	cmp	r2, r3
   147c0:	bf18      	it	ne
   147c2:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   147c4:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   147c6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   147c8:	f104 0010 	add.w	r0, r4, #16
   147cc:	f005 ff24 	bl	1a618 <z_handle_obj_poll_events>
}
   147d0:	e7ed      	b.n	147ae <z_impl_k_sem_give+0x22>
   147d2:	bf00      	nop
   147d4:	2000ecaf 	.word	0x2000ecaf

000147d8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   147d8:	b513      	push	{r0, r1, r4, lr}
   147da:	f04f 0420 	mov.w	r4, #32
   147de:	f3ef 8111 	mrs	r1, BASEPRI
   147e2:	f384 8812 	msr	BASEPRI_MAX, r4
   147e6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   147ea:	6884      	ldr	r4, [r0, #8]
   147ec:	b144      	cbz	r4, 14800 <z_impl_k_sem_take+0x28>
		sem->count--;
   147ee:	3c01      	subs	r4, #1
   147f0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   147f2:	f381 8811 	msr	BASEPRI, r1
   147f6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   147fa:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   147fc:	b002      	add	sp, #8
   147fe:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14800:	ea52 0403 	orrs.w	r4, r2, r3
   14804:	d106      	bne.n	14814 <z_impl_k_sem_take+0x3c>
   14806:	f381 8811 	msr	BASEPRI, r1
   1480a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1480e:	f06f 000f 	mvn.w	r0, #15
   14812:	e7f3      	b.n	147fc <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   14814:	e9cd 2300 	strd	r2, r3, [sp]
   14818:	4602      	mov	r2, r0
   1481a:	4802      	ldr	r0, [pc, #8]	; (14824 <z_impl_k_sem_take+0x4c>)
   1481c:	f000 f9de 	bl	14bdc <z_pend_curr>
	return ret;
   14820:	e7ec      	b.n	147fc <z_impl_k_sem_take+0x24>
   14822:	bf00      	nop
   14824:	2000ecaf 	.word	0x2000ecaf

00014828 <submit_to_queue_locked>:
{
   14828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1482a:	68c3      	ldr	r3, [r0, #12]
{
   1482c:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1482e:	079a      	lsls	r2, r3, #30
{
   14830:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   14832:	f3c3 0640 	ubfx	r6, r3, #1, #1
   14836:	d42c      	bmi.n	14892 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   14838:	075b      	lsls	r3, r3, #29
   1483a:	d41a      	bmi.n	14872 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   1483c:	680b      	ldr	r3, [r1, #0]
   1483e:	b90b      	cbnz	r3, 14844 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   14840:	6883      	ldr	r3, [r0, #8]
   14842:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   14844:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   14846:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   14848:	bf42      	ittt	mi
   1484a:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   1484c:	2602      	movmi	r6, #2
			*queuep = work->queue;
   1484e:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   14850:	683d      	ldr	r5, [r7, #0]
		ret = 1;
   14852:	bf58      	it	pl
   14854:	2601      	movpl	r6, #1
	if (queue == NULL) {
   14856:	2d00      	cmp	r5, #0
   14858:	d03a      	beq.n	148d0 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1485a:	4b1f      	ldr	r3, [pc, #124]	; (148d8 <submit_to_queue_locked+0xb0>)
   1485c:	689b      	ldr	r3, [r3, #8]
   1485e:	42ab      	cmp	r3, r5
   14860:	d00a      	beq.n	14878 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   14862:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   14866:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   14868:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1486c:	d414      	bmi.n	14898 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   1486e:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   14872:	2300      	movs	r3, #0
   14874:	603b      	str	r3, [r7, #0]
	return ret;
   14876:	e025      	b.n	148c4 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   14878:	f005 fb56 	bl	19f28 <k_is_in_isr>
   1487c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   14880:	2800      	cmp	r0, #0
   14882:	d1f0      	bne.n	14866 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   14884:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   14886:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1488a:	d5f0      	bpl.n	1486e <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   1488c:	b152      	cbz	r2, 148a4 <submit_to_queue_locked+0x7c>
   1488e:	075b      	lsls	r3, r3, #29
   14890:	d408      	bmi.n	148a4 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   14892:	f06f 060f 	mvn.w	r6, #15
   14896:	e7ec      	b.n	14872 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   14898:	2a00      	cmp	r2, #0
   1489a:	d1fa      	bne.n	14892 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   1489c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   148a0:	2b00      	cmp	r3, #0
   148a2:	d1f6      	bne.n	14892 <submit_to_queue_locked+0x6a>
	parent->next = child;
   148a4:	2300      	movs	r3, #0
   148a6:	6023      	str	r3, [r4, #0]
	return list->tail;
   148a8:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
Z_GENLIST_APPEND(slist, snode)
   148ac:	b963      	cbnz	r3, 148c8 <submit_to_queue_locked+0xa0>
	list->head = node;
   148ae:	e9c5 4432 	strd	r4, r4, [r5, #200]	; 0xc8
		(void)notify_queue_locked(queue);
   148b2:	4628      	mov	r0, r5
   148b4:	f005 fbf3 	bl	1a09e <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   148b8:	68e3      	ldr	r3, [r4, #12]
   148ba:	f043 0304 	orr.w	r3, r3, #4
   148be:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   148c0:	683b      	ldr	r3, [r7, #0]
   148c2:	60a3      	str	r3, [r4, #8]
}
   148c4:	4630      	mov	r0, r6
   148c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   148c8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   148ca:	f8c5 40cc 	str.w	r4, [r5, #204]	; 0xcc
}
   148ce:	e7f0      	b.n	148b2 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   148d0:	f06f 0615 	mvn.w	r6, #21
   148d4:	e7cd      	b.n	14872 <submit_to_queue_locked+0x4a>
   148d6:	bf00      	nop
   148d8:	2000d6e8 	.word	0x2000d6e8

000148dc <k_work_submit>:
{
   148dc:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   148de:	4801      	ldr	r0, [pc, #4]	; (148e4 <k_work_submit+0x8>)
   148e0:	f005 bc01 	b.w	1a0e6 <k_work_submit_to_queue>
   148e4:	2000ce88 	.word	0x2000ce88

000148e8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   148e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   148ea:	4604      	mov	r4, r0
	list->head = NULL;
   148ec:	2000      	movs	r0, #0
   148ee:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   148f0:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8
   148f4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   148f6:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
	list->tail = (sys_dnode_t *)list;
   148fa:	e9c4 0034 	strd	r0, r0, [r4, #208]	; 0xd0
   148fe:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   14902:	e9c4 0036 	strd	r0, r0, [r4, #216]	; 0xd8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   14906:	b31d      	cbz	r5, 14950 <k_work_queue_start+0x68>
   14908:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1490a:	2800      	cmp	r0, #0
   1490c:	f240 1001 	movw	r0, #257	; 0x101
   14910:	bf08      	it	eq
   14912:	2001      	moveq	r0, #1
	*flagp = flags;
   14914:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14918:	2000      	movs	r0, #0
   1491a:	f04f 36ff 	mov.w	r6, #4294967295
   1491e:	f04f 37ff 	mov.w	r7, #4294967295
   14922:	e9cd 3003 	strd	r3, r0, [sp, #12]
   14926:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1492a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1492e:	4620      	mov	r0, r4
   14930:	4b08      	ldr	r3, [pc, #32]	; (14954 <k_work_queue_start+0x6c>)
   14932:	9400      	str	r4, [sp, #0]
   14934:	f7ff fcea 	bl	1430c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   14938:	b125      	cbz	r5, 14944 <k_work_queue_start+0x5c>
   1493a:	6829      	ldr	r1, [r5, #0]
   1493c:	b111      	cbz	r1, 14944 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1493e:	4620      	mov	r0, r4
   14940:	f005 faf8 	bl	19f34 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   14944:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   14946:	b009      	add	sp, #36	; 0x24
   14948:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1494c:	f005 baf7 	b.w	19f3e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   14950:	2001      	movs	r0, #1
   14952:	e7df      	b.n	14914 <k_work_queue_start+0x2c>
   14954:	00009ce1 	.word	0x00009ce1

00014958 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   14958:	89c3      	ldrh	r3, [r0, #14]
   1495a:	2b7f      	cmp	r3, #127	; 0x7f
   1495c:	d812      	bhi.n	14984 <sliceable+0x2c>
	int ret = slice_ticks;
   1495e:	4b0a      	ldr	r3, [pc, #40]	; (14988 <sliceable+0x30>)
   14960:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   14962:	b163      	cbz	r3, 1497e <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   14964:	4b09      	ldr	r3, [pc, #36]	; (1498c <sliceable+0x34>)
   14966:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1496a:	681b      	ldr	r3, [r3, #0]
   1496c:	429a      	cmp	r2, r3
   1496e:	db09      	blt.n	14984 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   14970:	7b43      	ldrb	r3, [r0, #13]
   14972:	06db      	lsls	r3, r3, #27
   14974:	d106      	bne.n	14984 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   14976:	4b06      	ldr	r3, [pc, #24]	; (14990 <sliceable+0x38>)
   14978:	1ac3      	subs	r3, r0, r3
   1497a:	bf18      	it	ne
   1497c:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   1497e:	f003 0001 	and.w	r0, r3, #1
   14982:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   14984:	2300      	movs	r3, #0
   14986:	e7fa      	b.n	1497e <sliceable+0x26>
   14988:	2000d724 	.word	0x2000d724
   1498c:	2000d720 	.word	0x2000d720
   14990:	2000ccd8 	.word	0x2000ccd8

00014994 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
   14994:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   14996:	4b04      	ldr	r3, [pc, #16]	; (149a8 <slice_timeout+0x14>)
   14998:	1ac0      	subs	r0, r0, r3
   1499a:	4b04      	ldr	r3, [pc, #16]	; (149ac <slice_timeout+0x18>)
   1499c:	10c0      	asrs	r0, r0, #3
   1499e:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
   149a0:	4b03      	ldr	r3, [pc, #12]	; (149b0 <slice_timeout+0x1c>)
   149a2:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   149a4:	4770      	bx	lr
   149a6:	bf00      	nop
   149a8:	2000ce68 	.word	0x2000ce68
   149ac:	aaaaaaab 	.word	0xaaaaaaab
   149b0:	2000ecaf 	.word	0x2000ecaf

000149b4 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   149b4:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   149b6:	4b0e      	ldr	r3, [pc, #56]	; (149f0 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   149b8:	4c0e      	ldr	r4, [pc, #56]	; (149f4 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   149ba:	7c1e      	ldrb	r6, [r3, #16]
{
   149bc:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   149be:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   149c2:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   149c6:	4620      	mov	r0, r4
   149c8:	f005 fc94 	bl	1a2f4 <z_abort_timeout>
	slice_expired[cpu] = false;
   149cc:	2200      	movs	r2, #0
   149ce:	4b0a      	ldr	r3, [pc, #40]	; (149f8 <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
   149d0:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   149d2:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   149d4:	f7ff ffc0 	bl	14958 <sliceable>
   149d8:	b148      	cbz	r0, 149ee <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   149da:	4b08      	ldr	r3, [pc, #32]	; (149fc <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   149dc:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
   149de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
   149e2:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   149e4:	4906      	ldr	r1, [pc, #24]	; (14a00 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   149e6:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   149e8:	17d3      	asrs	r3, r2, #31
   149ea:	f000 bb69 	b.w	150c0 <z_add_timeout>
}
   149ee:	bd70      	pop	{r4, r5, r6, pc}
   149f0:	2000d6e8 	.word	0x2000d6e8
   149f4:	2000ce68 	.word	0x2000ce68
   149f8:	2000ecaf 	.word	0x2000ecaf
   149fc:	2000d724 	.word	0x2000d724
   14a00:	00014995 	.word	0x00014995

00014a04 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   14a04:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   14a06:	4d0d      	ldr	r5, [pc, #52]	; (14a3c <update_cache+0x38>)
   14a08:	462b      	mov	r3, r5
   14a0a:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14a0e:	429c      	cmp	r4, r3
   14a10:	d000      	beq.n	14a14 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   14a12:	b904      	cbnz	r4, 14a16 <update_cache+0x12>
   14a14:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   14a16:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   14a18:	b938      	cbnz	r0, 14a2a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   14a1a:	7b5a      	ldrb	r2, [r3, #13]
   14a1c:	06d2      	lsls	r2, r2, #27
   14a1e:	d104      	bne.n	14a2a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   14a20:	69a2      	ldr	r2, [r4, #24]
   14a22:	b912      	cbnz	r2, 14a2a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   14a24:	89da      	ldrh	r2, [r3, #14]
   14a26:	2a7f      	cmp	r2, #127	; 0x7f
   14a28:	d805      	bhi.n	14a36 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   14a2a:	429c      	cmp	r4, r3
   14a2c:	d002      	beq.n	14a34 <update_cache+0x30>
			z_reset_time_slice(thread);
   14a2e:	4620      	mov	r0, r4
   14a30:	f7ff ffc0 	bl	149b4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   14a34:	4623      	mov	r3, r4
   14a36:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   14a38:	bd38      	pop	{r3, r4, r5, pc}
   14a3a:	bf00      	nop
   14a3c:	2000d6e8 	.word	0x2000d6e8

00014a40 <move_thread_to_end_of_prio_q>:
{
   14a40:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   14a42:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   14a46:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   14a48:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   14a4a:	7b43      	ldrb	r3, [r0, #13]
   14a4c:	da04      	bge.n	14a58 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14a52:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   14a54:	f005 fb58 	bl	1a108 <sys_dlist_remove>
	return list->head == list;
   14a58:	4a15      	ldr	r2, [pc, #84]	; (14ab0 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
   14a5a:	7b4b      	ldrb	r3, [r1, #13]
   14a5c:	4610      	mov	r0, r2
   14a5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14a62:	734b      	strb	r3, [r1, #13]
   14a64:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   14a68:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14a6a:	4283      	cmp	r3, r0
   14a6c:	bf08      	it	eq
   14a6e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14a70:	b923      	cbnz	r3, 14a7c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   14a72:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   14a76:	6021      	str	r1, [r4, #0]
	list->tail = node;
   14a78:	6251      	str	r1, [r2, #36]	; 0x24
}
   14a7a:	e00c      	b.n	14a96 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   14a7c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   14a80:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   14a84:	42b5      	cmp	r5, r6
   14a86:	d00e      	beq.n	14aa6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   14a88:	42ae      	cmp	r6, r5
   14a8a:	dd0c      	ble.n	14aa6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   14a8c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   14a8e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   14a92:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   14a94:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   14a96:	6890      	ldr	r0, [r2, #8]
}
   14a98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   14a9c:	1a43      	subs	r3, r0, r1
   14a9e:	4258      	negs	r0, r3
   14aa0:	4158      	adcs	r0, r3
   14aa2:	f7ff bfaf 	b.w	14a04 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   14aa6:	429c      	cmp	r4, r3
   14aa8:	d0e3      	beq.n	14a72 <move_thread_to_end_of_prio_q+0x32>
   14aaa:	681b      	ldr	r3, [r3, #0]
   14aac:	e7e0      	b.n	14a70 <move_thread_to_end_of_prio_q+0x30>
   14aae:	bf00      	nop
   14ab0:	2000d6e8 	.word	0x2000d6e8

00014ab4 <ready_thread>:
{
   14ab4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   14ab6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   14aba:	7b42      	ldrb	r2, [r0, #13]
   14abc:	2b00      	cmp	r3, #0
   14abe:	db29      	blt.n	14b14 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   14ac0:	06d3      	lsls	r3, r2, #27
   14ac2:	d127      	bne.n	14b14 <ready_thread+0x60>
	return node->next != NULL;
   14ac4:	6983      	ldr	r3, [r0, #24]
   14ac6:	bb2b      	cbnz	r3, 14b14 <ready_thread+0x60>
	return list->head == list;
   14ac8:	4913      	ldr	r1, [pc, #76]	; (14b18 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   14aca:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14ace:	7342      	strb	r2, [r0, #13]
   14ad0:	460a      	mov	r2, r1
   14ad2:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14ad6:	4294      	cmp	r4, r2
   14ad8:	bf18      	it	ne
   14ada:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   14adc:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14ade:	b923      	cbnz	r3, 14aea <ready_thread+0x36>
	node->prev = tail;
   14ae0:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   14ae4:	6020      	str	r0, [r4, #0]
	list->tail = node;
   14ae6:	6248      	str	r0, [r1, #36]	; 0x24
}
   14ae8:	e00c      	b.n	14b04 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   14aea:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   14aee:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   14af2:	42b5      	cmp	r5, r6
   14af4:	d00a      	beq.n	14b0c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   14af6:	42ae      	cmp	r6, r5
   14af8:	dd08      	ble.n	14b0c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   14afa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   14afc:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   14b00:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   14b02:	6058      	str	r0, [r3, #4]
		update_cache(0);
   14b04:	2000      	movs	r0, #0
}
   14b06:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   14b08:	f7ff bf7c 	b.w	14a04 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   14b0c:	42a3      	cmp	r3, r4
   14b0e:	d0e7      	beq.n	14ae0 <ready_thread+0x2c>
   14b10:	681b      	ldr	r3, [r3, #0]
   14b12:	e7e4      	b.n	14ade <ready_thread+0x2a>
}
   14b14:	bc70      	pop	{r4, r5, r6}
   14b16:	4770      	bx	lr
   14b18:	2000d6e8 	.word	0x2000d6e8

00014b1c <unready_thread>:
{
   14b1c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   14b1e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   14b22:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   14b24:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   14b26:	7b43      	ldrb	r3, [r0, #13]
   14b28:	da04      	bge.n	14b34 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14b2e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   14b30:	f005 faea 	bl	1a108 <sys_dlist_remove>
	update_cache(thread == _current);
   14b34:	4b04      	ldr	r3, [pc, #16]	; (14b48 <unready_thread+0x2c>)
   14b36:	6898      	ldr	r0, [r3, #8]
   14b38:	1a43      	subs	r3, r0, r1
   14b3a:	4258      	negs	r0, r3
   14b3c:	4158      	adcs	r0, r3
}
   14b3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   14b42:	f7ff bf5f 	b.w	14a04 <update_cache>
   14b46:	bf00      	nop
   14b48:	2000d6e8 	.word	0x2000d6e8

00014b4c <pend_locked>:
{
   14b4c:	b570      	push	{r4, r5, r6, lr}
   14b4e:	4615      	mov	r5, r2
   14b50:	461c      	mov	r4, r3
   14b52:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   14b54:	f005 faf3 	bl	1a13e <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14b58:	f1b4 3fff 	cmp.w	r4, #4294967295
   14b5c:	bf08      	it	eq
   14b5e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   14b62:	d008      	beq.n	14b76 <pend_locked+0x2a>
   14b64:	462a      	mov	r2, r5
   14b66:	4623      	mov	r3, r4
   14b68:	f106 0018 	add.w	r0, r6, #24
   14b6c:	4902      	ldr	r1, [pc, #8]	; (14b78 <pend_locked+0x2c>)
}
   14b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14b72:	f000 baa5 	b.w	150c0 <z_add_timeout>
   14b76:	bd70      	pop	{r4, r5, r6, pc}
   14b78:	0001a1f3 	.word	0x0001a1f3

00014b7c <z_time_slice>:
{
   14b7c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   14b7e:	f04f 0320 	mov.w	r3, #32
   14b82:	f3ef 8511 	mrs	r5, BASEPRI
   14b86:	f383 8812 	msr	BASEPRI_MAX, r3
   14b8a:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   14b8e:	4b10      	ldr	r3, [pc, #64]	; (14bd0 <z_time_slice+0x54>)
	if (pending_current == curr) {
   14b90:	4a10      	ldr	r2, [pc, #64]	; (14bd4 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   14b92:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   14b94:	6810      	ldr	r0, [r2, #0]
   14b96:	42a0      	cmp	r0, r4
   14b98:	d106      	bne.n	14ba8 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   14b9a:	f7ff ff0b 	bl	149b4 <z_reset_time_slice>
	__asm__ volatile(
   14b9e:	f385 8811 	msr	BASEPRI, r5
   14ba2:	f3bf 8f6f 	isb	sy
}
   14ba6:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   14ba8:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   14baa:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   14bac:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   14bae:	4a0a      	ldr	r2, [pc, #40]	; (14bd8 <z_time_slice+0x5c>)
   14bb0:	5cd3      	ldrb	r3, [r2, r3]
   14bb2:	2b00      	cmp	r3, #0
   14bb4:	d0f3      	beq.n	14b9e <z_time_slice+0x22>
   14bb6:	4620      	mov	r0, r4
   14bb8:	f7ff fece 	bl	14958 <sliceable>
   14bbc:	2800      	cmp	r0, #0
   14bbe:	d0ee      	beq.n	14b9e <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   14bc0:	7b63      	ldrb	r3, [r4, #13]
   14bc2:	06db      	lsls	r3, r3, #27
   14bc4:	d102      	bne.n	14bcc <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   14bc6:	4620      	mov	r0, r4
   14bc8:	f7ff ff3a 	bl	14a40 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   14bcc:	4620      	mov	r0, r4
   14bce:	e7e4      	b.n	14b9a <z_time_slice+0x1e>
   14bd0:	2000d6e8 	.word	0x2000d6e8
   14bd4:	2000d71c 	.word	0x2000d71c
   14bd8:	2000ecaf 	.word	0x2000ecaf

00014bdc <z_pend_curr>:
{
   14bdc:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   14bde:	480c      	ldr	r0, [pc, #48]	; (14c10 <z_pend_curr+0x34>)
   14be0:	4d0c      	ldr	r5, [pc, #48]	; (14c14 <z_pend_curr+0x38>)
   14be2:	6886      	ldr	r6, [r0, #8]
{
   14be4:	460c      	mov	r4, r1
	pending_current = _current;
   14be6:	602e      	str	r6, [r5, #0]
{
   14be8:	4611      	mov	r1, r2
   14bea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   14bee:	f04f 0620 	mov.w	r6, #32
   14bf2:	f3ef 8511 	mrs	r5, BASEPRI
   14bf6:	f386 8812 	msr	BASEPRI_MAX, r6
   14bfa:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   14bfe:	6880      	ldr	r0, [r0, #8]
   14c00:	f7ff ffa4 	bl	14b4c <pend_locked>
	ret = arch_swap(key);
   14c04:	4620      	mov	r0, r4
}
   14c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14c0a:	f7f7 bc55 	b.w	c4b8 <arch_swap>
   14c0e:	bf00      	nop
   14c10:	2000d6e8 	.word	0x2000d6e8
   14c14:	2000d71c 	.word	0x2000d71c

00014c18 <z_set_prio>:
{
   14c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14c1a:	4604      	mov	r4, r0
   14c1c:	f04f 0320 	mov.w	r3, #32
   14c20:	f3ef 8611 	mrs	r6, BASEPRI
   14c24:	f383 8812 	msr	BASEPRI_MAX, r3
   14c28:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   14c2c:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   14c2e:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   14c30:	06da      	lsls	r2, r3, #27
   14c32:	d119      	bne.n	14c68 <z_set_prio+0x50>
	return node->next != NULL;
   14c34:	6985      	ldr	r5, [r0, #24]
   14c36:	b9bd      	cbnz	r5, 14c68 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14c3c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   14c3e:	f005 fa63 	bl	1a108 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   14c42:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   14c44:	4a16      	ldr	r2, [pc, #88]	; (14ca0 <z_set_prio+0x88>)
   14c46:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14c4a:	7343      	strb	r3, [r0, #13]
   14c4c:	4613      	mov	r3, r2
				thread->base.prio = prio;
   14c4e:	7381      	strb	r1, [r0, #14]
   14c50:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14c54:	4298      	cmp	r0, r3
   14c56:	bf18      	it	ne
   14c58:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   14c5a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14c5c:	b95d      	cbnz	r5, 14c76 <z_set_prio+0x5e>
	node->prev = tail;
   14c5e:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   14c62:	6004      	str	r4, [r0, #0]
	list->tail = node;
   14c64:	6254      	str	r4, [r2, #36]	; 0x24
}
   14c66:	e011      	b.n	14c8c <z_set_prio+0x74>
   14c68:	2000      	movs	r0, #0
			thread->base.prio = prio;
   14c6a:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
   14c6c:	f386 8811 	msr	BASEPRI, r6
   14c70:	f3bf 8f6f 	isb	sy
}
   14c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   14c76:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   14c7a:	42b9      	cmp	r1, r7
   14c7c:	d00b      	beq.n	14c96 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   14c7e:	428f      	cmp	r7, r1
   14c80:	dd09      	ble.n	14c96 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   14c82:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   14c84:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   14c88:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   14c8a:	606c      	str	r4, [r5, #4]
			update_cache(1);
   14c8c:	2001      	movs	r0, #1
   14c8e:	f7ff feb9 	bl	14a04 <update_cache>
   14c92:	2001      	movs	r0, #1
   14c94:	e7ea      	b.n	14c6c <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   14c96:	42a8      	cmp	r0, r5
   14c98:	d0e1      	beq.n	14c5e <z_set_prio+0x46>
   14c9a:	682d      	ldr	r5, [r5, #0]
   14c9c:	e7de      	b.n	14c5c <z_set_prio+0x44>
   14c9e:	bf00      	nop
   14ca0:	2000d6e8 	.word	0x2000d6e8

00014ca4 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   14ca4:	b949      	cbnz	r1, 14cba <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14ca6:	f3ef 8005 	mrs	r0, IPSR
   14caa:	b930      	cbnz	r0, 14cba <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   14cac:	4b05      	ldr	r3, [pc, #20]	; (14cc4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   14cae:	69da      	ldr	r2, [r3, #28]
   14cb0:	689b      	ldr	r3, [r3, #8]
   14cb2:	429a      	cmp	r2, r3
   14cb4:	d001      	beq.n	14cba <z_reschedule+0x16>
   14cb6:	f7f7 bbff 	b.w	c4b8 <arch_swap>
   14cba:	f381 8811 	msr	BASEPRI, r1
   14cbe:	f3bf 8f6f 	isb	sy
}
   14cc2:	4770      	bx	lr
   14cc4:	2000d6e8 	.word	0x2000d6e8

00014cc8 <z_sched_start>:
{
   14cc8:	b510      	push	{r4, lr}
	__asm__ volatile(
   14cca:	f04f 0220 	mov.w	r2, #32
   14cce:	f3ef 8411 	mrs	r4, BASEPRI
   14cd2:	f382 8812 	msr	BASEPRI_MAX, r2
   14cd6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   14cda:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   14cdc:	0751      	lsls	r1, r2, #29
   14cde:	d404      	bmi.n	14cea <z_sched_start+0x22>
	__asm__ volatile(
   14ce0:	f384 8811 	msr	BASEPRI, r4
   14ce4:	f3bf 8f6f 	isb	sy
}
   14ce8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14cea:	f022 0204 	bic.w	r2, r2, #4
   14cee:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   14cf0:	f7ff fee0 	bl	14ab4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   14cf4:	4621      	mov	r1, r4
}
   14cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   14cfa:	4801      	ldr	r0, [pc, #4]	; (14d00 <z_sched_start+0x38>)
   14cfc:	f7ff bfd2 	b.w	14ca4 <z_reschedule>
   14d00:	2000ecb0 	.word	0x2000ecb0

00014d04 <z_impl_k_thread_suspend>:
{
   14d04:	b570      	push	{r4, r5, r6, lr}
   14d06:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   14d08:	3018      	adds	r0, #24
   14d0a:	f005 faf3 	bl	1a2f4 <z_abort_timeout>
	__asm__ volatile(
   14d0e:	f04f 0320 	mov.w	r3, #32
   14d12:	f3ef 8611 	mrs	r6, BASEPRI
   14d16:	f383 8812 	msr	BASEPRI_MAX, r3
   14d1a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   14d1e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   14d22:	7b63      	ldrb	r3, [r4, #13]
   14d24:	2a00      	cmp	r2, #0
   14d26:	da05      	bge.n	14d34 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   14d2c:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14d2e:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   14d30:	f005 f9ea 	bl	1a108 <sys_dlist_remove>
		update_cache(thread == _current);
   14d34:	4d0b      	ldr	r5, [pc, #44]	; (14d64 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   14d36:	7b63      	ldrb	r3, [r4, #13]
   14d38:	68a8      	ldr	r0, [r5, #8]
   14d3a:	f043 0310 	orr.w	r3, r3, #16
   14d3e:	7363      	strb	r3, [r4, #13]
   14d40:	1b03      	subs	r3, r0, r4
   14d42:	4258      	negs	r0, r3
   14d44:	4158      	adcs	r0, r3
   14d46:	f7ff fe5d 	bl	14a04 <update_cache>
	__asm__ volatile(
   14d4a:	f386 8811 	msr	BASEPRI, r6
   14d4e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   14d52:	68ab      	ldr	r3, [r5, #8]
   14d54:	42a3      	cmp	r3, r4
   14d56:	d103      	bne.n	14d60 <z_impl_k_thread_suspend+0x5c>
}
   14d58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   14d5c:	f005 ba8d 	b.w	1a27a <z_reschedule_unlocked>
}
   14d60:	bd70      	pop	{r4, r5, r6, pc}
   14d62:	bf00      	nop
   14d64:	2000d6e8 	.word	0x2000d6e8

00014d68 <k_sched_lock>:
	__asm__ volatile(
   14d68:	f04f 0320 	mov.w	r3, #32
   14d6c:	f3ef 8111 	mrs	r1, BASEPRI
   14d70:	f383 8812 	msr	BASEPRI_MAX, r3
   14d74:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   14d78:	4b04      	ldr	r3, [pc, #16]	; (14d8c <k_sched_lock+0x24>)
   14d7a:	689a      	ldr	r2, [r3, #8]
   14d7c:	7bd3      	ldrb	r3, [r2, #15]
   14d7e:	3b01      	subs	r3, #1
   14d80:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   14d82:	f381 8811 	msr	BASEPRI, r1
   14d86:	f3bf 8f6f 	isb	sy
}
   14d8a:	4770      	bx	lr
   14d8c:	2000d6e8 	.word	0x2000d6e8

00014d90 <k_sched_unlock>:
{
   14d90:	b510      	push	{r4, lr}
	__asm__ volatile(
   14d92:	f04f 0320 	mov.w	r3, #32
   14d96:	f3ef 8411 	mrs	r4, BASEPRI
   14d9a:	f383 8812 	msr	BASEPRI_MAX, r3
   14d9e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   14da2:	4b08      	ldr	r3, [pc, #32]	; (14dc4 <k_sched_unlock+0x34>)
		update_cache(0);
   14da4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   14da6:	689a      	ldr	r2, [r3, #8]
   14da8:	7bd3      	ldrb	r3, [r2, #15]
   14daa:	3301      	adds	r3, #1
   14dac:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   14dae:	f7ff fe29 	bl	14a04 <update_cache>
	__asm__ volatile(
   14db2:	f384 8811 	msr	BASEPRI, r4
   14db6:	f3bf 8f6f 	isb	sy
}
   14dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   14dbe:	f005 ba5c 	b.w	1a27a <z_reschedule_unlocked>
   14dc2:	bf00      	nop
   14dc4:	2000d6e8 	.word	0x2000d6e8

00014dc8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   14dc8:	4b02      	ldr	r3, [pc, #8]	; (14dd4 <z_sched_init+0xc>)
   14dca:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   14dce:	e9c3 2208 	strd	r2, r2, [r3, #32]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   14dd2:	4770      	bx	lr
   14dd4:	2000d6e8 	.word	0x2000d6e8

00014dd8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   14dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   14dda:	f04f 0320 	mov.w	r3, #32
   14dde:	f3ef 8511 	mrs	r5, BASEPRI
   14de2:	f383 8812 	msr	BASEPRI_MAX, r3
   14de6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   14dea:	4919      	ldr	r1, [pc, #100]	; (14e50 <z_impl_k_yield+0x78>)
   14dec:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14dee:	7b43      	ldrb	r3, [r0, #13]
   14df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14df4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   14df6:	f005 f987 	bl	1a108 <sys_dlist_remove>
	return list->head == list;
   14dfa:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   14dfc:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   14dfe:	7b5a      	ldrb	r2, [r3, #13]
   14e00:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14e04:	735a      	strb	r2, [r3, #13]
   14e06:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   14e0a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14e0c:	4282      	cmp	r2, r0
   14e0e:	bf08      	it	eq
   14e10:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14e12:	b922      	cbnz	r2, 14e1e <z_impl_k_yield+0x46>
	node->prev = tail;
   14e14:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   14e18:	6023      	str	r3, [r4, #0]
	list->tail = node;
   14e1a:	624b      	str	r3, [r1, #36]	; 0x24
}
   14e1c:	e00c      	b.n	14e38 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   14e1e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   14e22:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   14e26:	42be      	cmp	r6, r7
   14e28:	d00e      	beq.n	14e48 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   14e2a:	42b7      	cmp	r7, r6
   14e2c:	dd0c      	ble.n	14e48 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   14e2e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   14e30:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   14e34:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   14e36:	6053      	str	r3, [r2, #4]
	update_cache(1);
   14e38:	2001      	movs	r0, #1
   14e3a:	f7ff fde3 	bl	14a04 <update_cache>
   14e3e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   14e40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14e44:	f7f7 bb38 	b.w	c4b8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   14e48:	42a2      	cmp	r2, r4
   14e4a:	d0e3      	beq.n	14e14 <z_impl_k_yield+0x3c>
   14e4c:	6812      	ldr	r2, [r2, #0]
   14e4e:	e7e0      	b.n	14e12 <z_impl_k_yield+0x3a>
   14e50:	2000d6e8 	.word	0x2000d6e8

00014e54 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   14e54:	ea50 0301 	orrs.w	r3, r0, r1
{
   14e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e5c:	4605      	mov	r5, r0
   14e5e:	460e      	mov	r6, r1
	if (ticks == 0) {
   14e60:	d103      	bne.n	14e6a <z_tick_sleep+0x16>
	z_impl_k_yield();
   14e62:	f7ff ffb9 	bl	14dd8 <z_impl_k_yield>
		k_yield();
		return 0;
   14e66:	2000      	movs	r0, #0
   14e68:	e02c      	b.n	14ec4 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   14e6a:	1c83      	adds	r3, r0, #2
   14e6c:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   14e70:	db2a      	blt.n	14ec8 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   14e72:	f005 fa65 	bl	1a340 <sys_clock_tick_get_32>
   14e76:	182c      	adds	r4, r5, r0
   14e78:	f04f 0320 	mov.w	r3, #32
   14e7c:	f3ef 8811 	mrs	r8, BASEPRI
   14e80:	f383 8812 	msr	BASEPRI_MAX, r3
   14e84:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   14e88:	4f11      	ldr	r7, [pc, #68]	; (14ed0 <z_tick_sleep+0x7c>)
   14e8a:	4b12      	ldr	r3, [pc, #72]	; (14ed4 <z_tick_sleep+0x80>)
   14e8c:	68b8      	ldr	r0, [r7, #8]
   14e8e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   14e90:	f7ff fe44 	bl	14b1c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   14e94:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   14e96:	4910      	ldr	r1, [pc, #64]	; (14ed8 <z_tick_sleep+0x84>)
   14e98:	462a      	mov	r2, r5
   14e9a:	4633      	mov	r3, r6
   14e9c:	3018      	adds	r0, #24
   14e9e:	f000 f90f 	bl	150c0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   14ea2:	68ba      	ldr	r2, [r7, #8]
   14ea4:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   14ea6:	7b53      	ldrb	r3, [r2, #13]
   14ea8:	f043 0310 	orr.w	r3, r3, #16
   14eac:	7353      	strb	r3, [r2, #13]
   14eae:	f7f7 fb03 	bl	c4b8 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   14eb2:	f005 fa45 	bl	1a340 <sys_clock_tick_get_32>
   14eb6:	1a20      	subs	r0, r4, r0
   14eb8:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   14ebc:	2801      	cmp	r0, #1
   14ebe:	f173 0300 	sbcs.w	r3, r3, #0
   14ec2:	dbd0      	blt.n	14e66 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   14ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   14ec8:	f06f 0401 	mvn.w	r4, #1
   14ecc:	1a24      	subs	r4, r4, r0
   14ece:	e7d3      	b.n	14e78 <z_tick_sleep+0x24>
   14ed0:	2000d6e8 	.word	0x2000d6e8
   14ed4:	2000d71c 	.word	0x2000d71c
   14ed8:	0001a1f3 	.word	0x0001a1f3

00014edc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14edc:	f1b1 3fff 	cmp.w	r1, #4294967295
   14ee0:	bf08      	it	eq
   14ee2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   14ee6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14ee8:	d106      	bne.n	14ef8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   14eea:	4b08      	ldr	r3, [pc, #32]	; (14f0c <z_impl_k_sleep+0x30>)
   14eec:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   14eee:	f7ff ff09 	bl	14d04 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   14ef2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   14ef6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   14ef8:	f7ff ffac 	bl	14e54 <z_tick_sleep>
   14efc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   14f00:	fb80 0303 	smull	r0, r3, r0, r3
   14f04:	0bc0      	lsrs	r0, r0, #15
   14f06:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   14f0a:	e7f4      	b.n	14ef6 <z_impl_k_sleep+0x1a>
   14f0c:	2000d6e8 	.word	0x2000d6e8

00014f10 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   14f10:	4b01      	ldr	r3, [pc, #4]	; (14f18 <z_impl_z_current_get+0x8>)
   14f12:	6898      	ldr	r0, [r3, #8]
   14f14:	4770      	bx	lr
   14f16:	bf00      	nop
   14f18:	2000d6e8 	.word	0x2000d6e8

00014f1c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   14f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14f20:	4604      	mov	r4, r0
   14f22:	f04f 0320 	mov.w	r3, #32
   14f26:	f3ef 8611 	mrs	r6, BASEPRI
   14f2a:	f383 8812 	msr	BASEPRI_MAX, r3
   14f2e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   14f32:	7b03      	ldrb	r3, [r0, #12]
   14f34:	07d9      	lsls	r1, r3, #31
   14f36:	d50b      	bpl.n	14f50 <z_thread_abort+0x34>
	__asm__ volatile(
   14f38:	f386 8811 	msr	BASEPRI, r6
   14f3c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   14f40:	4040      	eors	r0, r0
   14f42:	f380 8811 	msr	BASEPRI, r0
   14f46:	f04f 0004 	mov.w	r0, #4
   14f4a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   14f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   14f50:	7b43      	ldrb	r3, [r0, #13]
   14f52:	071a      	lsls	r2, r3, #28
   14f54:	d504      	bpl.n	14f60 <z_thread_abort+0x44>
   14f56:	f386 8811 	msr	BASEPRI, r6
   14f5a:	f3bf 8f6f 	isb	sy
   14f5e:	e7f5      	b.n	14f4c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   14f60:	f023 0220 	bic.w	r2, r3, #32
   14f64:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   14f68:	09d2      	lsrs	r2, r2, #7
   14f6a:	d120      	bne.n	14fae <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   14f6c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   14f6e:	68a3      	ldr	r3, [r4, #8]
   14f70:	b113      	cbz	r3, 14f78 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   14f72:	4620      	mov	r0, r4
   14f74:	f005 f8d0 	bl	1a118 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   14f78:	f104 0018 	add.w	r0, r4, #24
   14f7c:	f005 f9ba 	bl	1a2f4 <z_abort_timeout>
   14f80:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   14f84:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   14f88:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14f8a:	42bd      	cmp	r5, r7
   14f8c:	d000      	beq.n	14f90 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   14f8e:	b9b5      	cbnz	r5, 14fbe <z_thread_abort+0xa2>
		update_cache(1);
   14f90:	2001      	movs	r0, #1
   14f92:	f7ff fd37 	bl	14a04 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   14f96:	4b10      	ldr	r3, [pc, #64]	; (14fd8 <z_thread_abort+0xbc>)
   14f98:	689b      	ldr	r3, [r3, #8]
   14f9a:	42a3      	cmp	r3, r4
   14f9c:	d1db      	bne.n	14f56 <z_thread_abort+0x3a>
   14f9e:	f3ef 8305 	mrs	r3, IPSR
   14fa2:	2b00      	cmp	r3, #0
   14fa4:	d1d7      	bne.n	14f56 <z_thread_abort+0x3a>
   14fa6:	4630      	mov	r0, r6
   14fa8:	f7f7 fa86 	bl	c4b8 <arch_swap>
	return ret;
   14fac:	e7d3      	b.n	14f56 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14fae:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   14fb2:	f043 0308 	orr.w	r3, r3, #8
   14fb6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   14fb8:	f005 f8a6 	bl	1a108 <sys_dlist_remove>
}
   14fbc:	e7d7      	b.n	14f6e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   14fbe:	4628      	mov	r0, r5
   14fc0:	f005 f8aa 	bl	1a118 <unpend_thread_no_timeout>
   14fc4:	f105 0018 	add.w	r0, r5, #24
   14fc8:	f005 f994 	bl	1a2f4 <z_abort_timeout>
		ready_thread(thread);
   14fcc:	4628      	mov	r0, r5
   14fce:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   14fd2:	f7ff fd6f 	bl	14ab4 <ready_thread>
   14fd6:	e7d7      	b.n	14f88 <z_thread_abort+0x6c>
   14fd8:	2000d6e8 	.word	0x2000d6e8

00014fdc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   14fdc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   14fde:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   14fe2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   14fe4:	e9cd 6700 	strd	r6, r7, [sp]
   14fe8:	f7ff fdf8 	bl	14bdc <z_pend_curr>

	if (data != NULL) {
   14fec:	b11c      	cbz	r4, 14ff6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   14fee:	4b03      	ldr	r3, [pc, #12]	; (14ffc <z_sched_wait+0x20>)
   14ff0:	689b      	ldr	r3, [r3, #8]
   14ff2:	695b      	ldr	r3, [r3, #20]
   14ff4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   14ff6:	b002      	add	sp, #8
   14ff8:	bdd0      	pop	{r4, r6, r7, pc}
   14ffa:	bf00      	nop
   14ffc:	2000d6e8 	.word	0x2000d6e8

00015000 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   15000:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   15002:	4806      	ldr	r0, [pc, #24]	; (1501c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   15004:	4a06      	ldr	r2, [pc, #24]	; (15020 <z_data_copy+0x20>)
   15006:	4907      	ldr	r1, [pc, #28]	; (15024 <z_data_copy+0x24>)
   15008:	1a12      	subs	r2, r2, r0
   1500a:	f004 ff0e 	bl	19e2a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1500e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   15012:	4a05      	ldr	r2, [pc, #20]	; (15028 <z_data_copy+0x28>)
   15014:	4905      	ldr	r1, [pc, #20]	; (1502c <z_data_copy+0x2c>)
   15016:	4806      	ldr	r0, [pc, #24]	; (15030 <z_data_copy+0x30>)
   15018:	f004 bf07 	b.w	19e2a <z_early_memcpy>
   1501c:	2000c580 	.word	0x2000c580
   15020:	2000caac 	.word	0x2000caac
   15024:	0001e314 	.word	0x0001e314
   15028:	00000000 	.word	0x00000000
   1502c:	0001e2fc 	.word	0x0001e2fc
   15030:	2000c580 	.word	0x2000c580

00015034 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   15034:	4b03      	ldr	r3, [pc, #12]	; (15044 <elapsed+0x10>)
   15036:	681b      	ldr	r3, [r3, #0]
   15038:	b90b      	cbnz	r3, 1503e <elapsed+0xa>
   1503a:	f7f8 bfb3 	b.w	dfa4 <sys_clock_elapsed>
}
   1503e:	2000      	movs	r0, #0
   15040:	4770      	bx	lr
   15042:	bf00      	nop
   15044:	2000d728 	.word	0x2000d728

00015048 <next_timeout>:

static int32_t next_timeout(void)
{
   15048:	b510      	push	{r4, lr}
	return list->head == list;
   1504a:	4b0e      	ldr	r3, [pc, #56]	; (15084 <next_timeout+0x3c>)
   1504c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1504e:	429c      	cmp	r4, r3
   15050:	d104      	bne.n	1505c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   15052:	f7ff ffef 	bl	15034 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   15056:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   1505a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   1505c:	f7ff ffea 	bl	15034 <elapsed>
	if ((to == NULL) ||
   15060:	2c00      	cmp	r4, #0
   15062:	d0f8      	beq.n	15056 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   15064:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   15068:	1a1b      	subs	r3, r3, r0
   1506a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   1506e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   15072:	f172 0100 	sbcs.w	r1, r2, #0
   15076:	daee      	bge.n	15056 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   15078:	2a00      	cmp	r2, #0
   1507a:	bfac      	ite	ge
   1507c:	4618      	movge	r0, r3
   1507e:	2000      	movlt	r0, #0
	return ret;
   15080:	e7eb      	b.n	1505a <next_timeout+0x12>
   15082:	bf00      	nop
   15084:	2000c6b0 	.word	0x2000c6b0

00015088 <remove_timeout>:
{
   15088:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1508a:	b170      	cbz	r0, 150aa <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1508c:	4b0b      	ldr	r3, [pc, #44]	; (150bc <remove_timeout+0x34>)
   1508e:	685b      	ldr	r3, [r3, #4]
   15090:	4298      	cmp	r0, r3
   15092:	d00a      	beq.n	150aa <remove_timeout+0x22>
   15094:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   15096:	b143      	cbz	r3, 150aa <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   15098:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1509c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   150a0:	1912      	adds	r2, r2, r4
   150a2:	eb41 0105 	adc.w	r1, r1, r5
   150a6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   150aa:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   150ae:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   150b0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   150b2:	2300      	movs	r3, #0
	node->prev = NULL;
   150b4:	e9c0 3300 	strd	r3, r3, [r0]
}
   150b8:	bd30      	pop	{r4, r5, pc}
   150ba:	bf00      	nop
   150bc:	2000c6b0 	.word	0x2000c6b0

000150c0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   150c0:	f1b3 3fff 	cmp.w	r3, #4294967295
   150c4:	bf08      	it	eq
   150c6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   150ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   150cc:	4604      	mov	r4, r0
   150ce:	461d      	mov	r5, r3
   150d0:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   150d2:	d05c      	beq.n	1518e <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   150d4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   150d6:	f04f 0320 	mov.w	r3, #32
   150da:	f3ef 8711 	mrs	r7, BASEPRI
   150de:	f383 8812 	msr	BASEPRI_MAX, r3
   150e2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   150e6:	3201      	adds	r2, #1
   150e8:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   150ec:	da24      	bge.n	15138 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   150ee:	f06f 0301 	mvn.w	r3, #1
   150f2:	492c      	ldr	r1, [pc, #176]	; (151a4 <z_add_timeout+0xe4>)
   150f4:	e9d1 2000 	ldrd	r2, r0, [r1]
   150f8:	1a9b      	subs	r3, r3, r2
   150fa:	f04f 32ff 	mov.w	r2, #4294967295
   150fe:	eb62 0000 	sbc.w	r0, r2, r0
   15102:	1b9e      	subs	r6, r3, r6
   15104:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   15108:	2e01      	cmp	r6, #1
   1510a:	f170 0300 	sbcs.w	r3, r0, #0
   1510e:	da01      	bge.n	15114 <z_add_timeout+0x54>
   15110:	2601      	movs	r6, #1
   15112:	2000      	movs	r0, #0
   15114:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   15118:	4e23      	ldr	r6, [pc, #140]	; (151a8 <z_add_timeout+0xe8>)
   1511a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   1511e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15120:	45b4      	cmp	ip, r6
   15122:	bf08      	it	eq
   15124:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   15128:	f1bc 0f00 	cmp.w	ip, #0
   1512c:	d10d      	bne.n	1514a <z_add_timeout+0x8a>
	node->prev = tail;
   1512e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   15132:	602c      	str	r4, [r5, #0]
	list->tail = node;
   15134:	6074      	str	r4, [r6, #4]
}
   15136:	e01c      	b.n	15172 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   15138:	f7ff ff7c 	bl	15034 <elapsed>
   1513c:	3601      	adds	r6, #1
   1513e:	f145 0500 	adc.w	r5, r5, #0
   15142:	1836      	adds	r6, r6, r0
   15144:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   15148:	e7e4      	b.n	15114 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   1514a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   1514e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   15152:	4293      	cmp	r3, r2
   15154:	eb71 0e00 	sbcs.w	lr, r1, r0
   15158:	da1a      	bge.n	15190 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   1515a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   1515c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   15160:	eb60 0001 	sbc.w	r0, r0, r1
   15164:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   15168:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   1516c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1516e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   15172:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15174:	42b3      	cmp	r3, r6
   15176:	d006      	beq.n	15186 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   15178:	429c      	cmp	r4, r3
   1517a:	d104      	bne.n	15186 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   1517c:	f7ff ff64 	bl	15048 <next_timeout>
   15180:	2100      	movs	r1, #0
   15182:	f7f8 fedd 	bl	df40 <sys_clock_set_timeout>
	__asm__ volatile(
   15186:	f387 8811 	msr	BASEPRI, r7
   1518a:	f3bf 8f6f 	isb	sy
		}
	}
}
   1518e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   15190:	1a9b      	subs	r3, r3, r2
   15192:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   15196:	45ac      	cmp	ip, r5
   15198:	e9c4 3104 	strd	r3, r1, [r4, #16]
   1519c:	d0c7      	beq.n	1512e <z_add_timeout+0x6e>
   1519e:	f8dc c000 	ldr.w	ip, [ip]
   151a2:	e7c1      	b.n	15128 <z_add_timeout+0x68>
   151a4:	2000ce80 	.word	0x2000ce80
   151a8:	2000c6b0 	.word	0x2000c6b0

000151ac <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   151ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   151b0:	f04f 0320 	mov.w	r3, #32
   151b4:	f3ef 8711 	mrs	r7, BASEPRI
   151b8:	f383 8812 	msr	BASEPRI_MAX, r3
   151bc:	f3bf 8f6f 	isb	sy
	return list->head == list;
   151c0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 1527c <sys_clock_announce+0xd0>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   151c4:	4e2b      	ldr	r6, [pc, #172]	; (15274 <sys_clock_announce+0xc8>)
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
   151c6:	f04f 0a00 	mov.w	sl, #0
	announce_remaining = ticks;
   151ca:	6030      	str	r0, [r6, #0]
   151cc:	f8d9 0000 	ldr.w	r0, [r9]
		t->dticks = 0;
   151d0:	f04f 0b00 	mov.w	fp, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   151d4:	4548      	cmp	r0, r9
   151d6:	bf08      	it	eq
   151d8:	2000      	moveq	r0, #0
		curr_tick += dt;
   151da:	4c27      	ldr	r4, [pc, #156]	; (15278 <sys_clock_announce+0xcc>)
   151dc:	463d      	mov	r5, r7
   151de:	e9d4 1e00 	ldrd	r1, lr, [r4]
	     (t != NULL) && (t->dticks <= announce_remaining);
   151e2:	6833      	ldr	r3, [r6, #0]
   151e4:	b388      	cbz	r0, 1524a <sys_clock_announce+0x9e>
   151e6:	e9d0 8704 	ldrd	r8, r7, [r0, #16]
   151ea:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   151ee:	4543      	cmp	r3, r8
   151f0:	eb7c 0207 	sbcs.w	r2, ip, r7
   151f4:	da06      	bge.n	15204 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   151f6:	ebb8 0203 	subs.w	r2, r8, r3
   151fa:	eb67 070c 	sbc.w	r7, r7, ip
   151fe:	e9c0 2704 	strd	r2, r7, [r0, #16]
   15202:	e022      	b.n	1524a <sys_clock_announce+0x9e>
		curr_tick += dt;
   15204:	eb18 0101 	adds.w	r1, r8, r1
   15208:	eb4e 73e8 	adc.w	r3, lr, r8, asr #31
		t->dticks = 0;
   1520c:	e9c0 ab04 	strd	sl, fp, [r0, #16]
		curr_tick += dt;
   15210:	e9c4 1300 	strd	r1, r3, [r4]
		remove_timeout(t);
   15214:	f7ff ff38 	bl	15088 <remove_timeout>
	__asm__ volatile(
   15218:	f385 8811 	msr	BASEPRI, r5
   1521c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   15220:	6883      	ldr	r3, [r0, #8]
   15222:	4798      	blx	r3
	__asm__ volatile(
   15224:	f04f 0320 	mov.w	r3, #32
   15228:	f3ef 8511 	mrs	r5, BASEPRI
   1522c:	f383 8812 	msr	BASEPRI_MAX, r3
   15230:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   15234:	6833      	ldr	r3, [r6, #0]
	return list->head == list;
   15236:	f8d9 0000 	ldr.w	r0, [r9]
   1523a:	eba3 0308 	sub.w	r3, r3, r8
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1523e:	4548      	cmp	r0, r9
	k.key = arch_irq_lock();
   15240:	462f      	mov	r7, r5
   15242:	6033      	str	r3, [r6, #0]
   15244:	d1ca      	bne.n	151dc <sys_clock_announce+0x30>
		curr_tick += dt;
   15246:	e9d4 1e00 	ldrd	r1, lr, [r4]
	}

	curr_tick += announce_remaining;
   1524a:	1859      	adds	r1, r3, r1
   1524c:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
   15250:	e9c4 1300 	strd	r1, r3, [r4]
	announce_remaining = 0;
   15254:	2400      	movs	r4, #0
   15256:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   15258:	f7ff fef6 	bl	15048 <next_timeout>
   1525c:	4621      	mov	r1, r4
   1525e:	f7f8 fe6f 	bl	df40 <sys_clock_set_timeout>
	__asm__ volatile(
   15262:	f385 8811 	msr	BASEPRI, r5
   15266:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   1526a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   1526e:	f7ff bc85 	b.w	14b7c <z_time_slice>
   15272:	bf00      	nop
   15274:	2000d728 	.word	0x2000d728
   15278:	2000ce80 	.word	0x2000ce80
   1527c:	2000c6b0 	.word	0x2000c6b0

00015280 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   15280:	b510      	push	{r4, lr}
	__asm__ volatile(
   15282:	f04f 0320 	mov.w	r3, #32
   15286:	f3ef 8411 	mrs	r4, BASEPRI
   1528a:	f383 8812 	msr	BASEPRI_MAX, r3
   1528e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   15292:	f7ff fecf 	bl	15034 <elapsed>
   15296:	4603      	mov	r3, r0
   15298:	4a05      	ldr	r2, [pc, #20]	; (152b0 <sys_clock_tick_get+0x30>)
   1529a:	e9d2 0100 	ldrd	r0, r1, [r2]
   1529e:	1818      	adds	r0, r3, r0
   152a0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   152a4:	f384 8811 	msr	BASEPRI, r4
   152a8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   152ac:	bd10      	pop	{r4, pc}
   152ae:	bf00      	nop
   152b0:	2000ce80 	.word	0x2000ce80

000152b4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   152b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   152b8:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   152ba:	4b29      	ldr	r3, [pc, #164]	; (15360 <z_impl_k_poll+0xac>)
{
   152bc:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   152be:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   152c0:	2301      	movs	r3, #1
   152c2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   152c6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   152ca:	ea52 0305 	orrs.w	r3, r2, r5
   152ce:	bf0c      	ite	eq
   152d0:	2301      	moveq	r3, #1
   152d2:	2300      	movne	r3, #0
   152d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   152d8:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   152da:	f005 f88e 	bl	1a3fa <register_events>
   152de:	4681      	mov	r9, r0
	__asm__ volatile(
   152e0:	f04f 0320 	mov.w	r3, #32
   152e4:	f3ef 8a11 	mrs	sl, BASEPRI
   152e8:	f383 8812 	msr	BASEPRI_MAX, r3
   152ec:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   152f0:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   152f4:	b964      	cbnz	r4, 15310 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   152f6:	4601      	mov	r1, r0
   152f8:	4652      	mov	r2, sl
   152fa:	4640      	mov	r0, r8
   152fc:	f005 f94e 	bl	1a59c <clear_event_registrations>
	__asm__ volatile(
   15300:	f38a 8811 	msr	BASEPRI, sl
   15304:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   15308:	4620      	mov	r0, r4
   1530a:	b002      	add	sp, #8
   1530c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   15310:	2300      	movs	r3, #0
   15312:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15316:	ea56 0305 	orrs.w	r3, r6, r5
   1531a:	d106      	bne.n	1532a <z_impl_k_poll+0x76>
   1531c:	f38a 8811 	msr	BASEPRI, sl
   15320:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   15324:	f06f 040a 	mvn.w	r4, #10
   15328:	e7ee      	b.n	15308 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1532a:	4651      	mov	r1, sl
   1532c:	e9cd 6500 	strd	r6, r5, [sp]
   15330:	4a0c      	ldr	r2, [pc, #48]	; (15364 <z_impl_k_poll+0xb0>)
   15332:	480d      	ldr	r0, [pc, #52]	; (15368 <z_impl_k_poll+0xb4>)
   15334:	f7ff fc52 	bl	14bdc <z_pend_curr>
   15338:	4604      	mov	r4, r0
	__asm__ volatile(
   1533a:	f04f 0320 	mov.w	r3, #32
   1533e:	f3ef 8511 	mrs	r5, BASEPRI
   15342:	f383 8812 	msr	BASEPRI_MAX, r3
   15346:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1534a:	462a      	mov	r2, r5
   1534c:	4649      	mov	r1, r9
   1534e:	4640      	mov	r0, r8
   15350:	f005 f924 	bl	1a59c <clear_event_registrations>
	__asm__ volatile(
   15354:	f385 8811 	msr	BASEPRI, r5
   15358:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1535c:	e7d4      	b.n	15308 <z_impl_k_poll+0x54>
   1535e:	bf00      	nop
   15360:	2000d6e8 	.word	0x2000d6e8
   15364:	2000c6b8 	.word	0x2000c6b8
   15368:	2000ecb0 	.word	0x2000ecb0

0001536c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1536c:	b538      	push	{r3, r4, r5, lr}
   1536e:	4603      	mov	r3, r0
	__asm__ volatile(
   15370:	f04f 0220 	mov.w	r2, #32
   15374:	f3ef 8511 	mrs	r5, BASEPRI
   15378:	f382 8812 	msr	BASEPRI_MAX, r2
   1537c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   15380:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   15382:	2101      	movs	r1, #1
   15384:	6081      	str	r1, [r0, #8]
	return list->head == list;
   15386:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   15388:	4283      	cmp	r3, r0
   1538a:	d106      	bne.n	1539a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1538c:	f385 8811 	msr	BASEPRI, r5
   15390:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   15394:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   15396:	4620      	mov	r0, r4
   15398:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1539a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1539e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   153a0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   153a2:	2300      	movs	r3, #0
	node->prev = NULL;
   153a4:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   153a8:	f005 f89e 	bl	1a4e8 <signal_poll_event>
	z_reschedule(&lock, key);
   153ac:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   153ae:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   153b0:	4801      	ldr	r0, [pc, #4]	; (153b8 <z_impl_k_poll_signal_raise+0x4c>)
   153b2:	f7ff fc77 	bl	14ca4 <z_reschedule>
	return rc;
   153b6:	e7ee      	b.n	15396 <z_impl_k_poll_signal_raise+0x2a>
   153b8:	2000ecb0 	.word	0x2000ecb0

000153bc <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   153bc:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   153be:	4601      	mov	r1, r0
   153c0:	4801      	ldr	r0, [pc, #4]	; (153c8 <k_aligned_alloc+0xc>)
   153c2:	f005 b941 	b.w	1a648 <z_heap_aligned_alloc>
   153c6:	bf00      	nop
   153c8:	2000c924 	.word	0x2000c924

000153cc <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   153cc:	4b01      	ldr	r3, [pc, #4]	; (153d4 <k_thread_system_pool_assign+0x8>)
   153ce:	6743      	str	r3, [r0, #116]	; 0x74
}
   153d0:	4770      	bx	lr
   153d2:	bf00      	nop
   153d4:	2000c924 	.word	0x2000c924

000153d8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   153d8:	b538      	push	{r3, r4, r5, lr}
   153da:	4604      	mov	r4, r0
   153dc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   153de:	f004 fda3 	bl	19f28 <k_is_in_isr>
   153e2:	b920      	cbnz	r0, 153ee <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   153e4:	4b06      	ldr	r3, [pc, #24]	; (15400 <z_thread_aligned_alloc+0x28>)
   153e6:	689b      	ldr	r3, [r3, #8]
   153e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   153ea:	b90b      	cbnz	r3, 153f0 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   153ec:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   153ee:	4b05      	ldr	r3, [pc, #20]	; (15404 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   153f0:	462a      	mov	r2, r5
   153f2:	4621      	mov	r1, r4
   153f4:	4618      	mov	r0, r3
}
   153f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   153fa:	f005 b925 	b.w	1a648 <z_heap_aligned_alloc>
   153fe:	bf00      	nop
   15400:	2000d6e8 	.word	0x2000d6e8
   15404:	2000c924 	.word	0x2000c924

00015408 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   15408:	4801      	ldr	r0, [pc, #4]	; (15410 <boot_banner+0x8>)
   1540a:	f002 b96c 	b.w	176e6 <printk>
   1540e:	bf00      	nop
   15410:	0001dff5 	.word	0x0001dff5

00015414 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   15414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   15416:	2400      	movs	r4, #0
   15418:	4b08      	ldr	r3, [pc, #32]	; (1543c <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1541a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
	struct k_work_queue_config cfg = {
   1541e:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   15420:	ab02      	add	r3, sp, #8
   15422:	9300      	str	r3, [sp, #0]
   15424:	4906      	ldr	r1, [pc, #24]	; (15440 <k_sys_work_q_init+0x2c>)
   15426:	f04f 33ff 	mov.w	r3, #4294967295
   1542a:	4806      	ldr	r0, [pc, #24]	; (15444 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1542c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   15430:	f7ff fa5a 	bl	148e8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   15434:	4620      	mov	r0, r4
   15436:	b004      	add	sp, #16
   15438:	bd10      	pop	{r4, pc}
   1543a:	bf00      	nop
   1543c:	0001e023 	.word	0x0001e023
   15440:	200112f0 	.word	0x200112f0
   15444:	2000ce88 	.word	0x2000ce88

00015448 <malloc>:
   15448:	4b02      	ldr	r3, [pc, #8]	; (15454 <malloc+0xc>)
   1544a:	4601      	mov	r1, r0
   1544c:	6818      	ldr	r0, [r3, #0]
   1544e:	f000 b84d 	b.w	154ec <_malloc_r>
   15452:	bf00      	nop
   15454:	2000c6c0 	.word	0x2000c6c0

00015458 <_free_r>:
   15458:	b538      	push	{r3, r4, r5, lr}
   1545a:	4605      	mov	r5, r0
   1545c:	2900      	cmp	r1, #0
   1545e:	d041      	beq.n	154e4 <_free_r+0x8c>
   15460:	f851 3c04 	ldr.w	r3, [r1, #-4]
   15464:	1f0c      	subs	r4, r1, #4
   15466:	2b00      	cmp	r3, #0
   15468:	bfb8      	it	lt
   1546a:	18e4      	addlt	r4, r4, r3
   1546c:	f000 fef8 	bl	16260 <__malloc_lock>
   15470:	4a1d      	ldr	r2, [pc, #116]	; (154e8 <_free_r+0x90>)
   15472:	6813      	ldr	r3, [r2, #0]
   15474:	b933      	cbnz	r3, 15484 <_free_r+0x2c>
   15476:	6063      	str	r3, [r4, #4]
   15478:	6014      	str	r4, [r2, #0]
   1547a:	4628      	mov	r0, r5
   1547c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15480:	f000 bef4 	b.w	1626c <__malloc_unlock>
   15484:	42a3      	cmp	r3, r4
   15486:	d908      	bls.n	1549a <_free_r+0x42>
   15488:	6820      	ldr	r0, [r4, #0]
   1548a:	1821      	adds	r1, r4, r0
   1548c:	428b      	cmp	r3, r1
   1548e:	bf01      	itttt	eq
   15490:	6819      	ldreq	r1, [r3, #0]
   15492:	685b      	ldreq	r3, [r3, #4]
   15494:	1809      	addeq	r1, r1, r0
   15496:	6021      	streq	r1, [r4, #0]
   15498:	e7ed      	b.n	15476 <_free_r+0x1e>
   1549a:	461a      	mov	r2, r3
   1549c:	685b      	ldr	r3, [r3, #4]
   1549e:	b10b      	cbz	r3, 154a4 <_free_r+0x4c>
   154a0:	42a3      	cmp	r3, r4
   154a2:	d9fa      	bls.n	1549a <_free_r+0x42>
   154a4:	6811      	ldr	r1, [r2, #0]
   154a6:	1850      	adds	r0, r2, r1
   154a8:	42a0      	cmp	r0, r4
   154aa:	d10b      	bne.n	154c4 <_free_r+0x6c>
   154ac:	6820      	ldr	r0, [r4, #0]
   154ae:	4401      	add	r1, r0
   154b0:	1850      	adds	r0, r2, r1
   154b2:	6011      	str	r1, [r2, #0]
   154b4:	4283      	cmp	r3, r0
   154b6:	d1e0      	bne.n	1547a <_free_r+0x22>
   154b8:	6818      	ldr	r0, [r3, #0]
   154ba:	685b      	ldr	r3, [r3, #4]
   154bc:	4408      	add	r0, r1
   154be:	6053      	str	r3, [r2, #4]
   154c0:	6010      	str	r0, [r2, #0]
   154c2:	e7da      	b.n	1547a <_free_r+0x22>
   154c4:	d902      	bls.n	154cc <_free_r+0x74>
   154c6:	230c      	movs	r3, #12
   154c8:	602b      	str	r3, [r5, #0]
   154ca:	e7d6      	b.n	1547a <_free_r+0x22>
   154cc:	6820      	ldr	r0, [r4, #0]
   154ce:	1821      	adds	r1, r4, r0
   154d0:	428b      	cmp	r3, r1
   154d2:	bf02      	ittt	eq
   154d4:	6819      	ldreq	r1, [r3, #0]
   154d6:	685b      	ldreq	r3, [r3, #4]
   154d8:	1809      	addeq	r1, r1, r0
   154da:	6063      	str	r3, [r4, #4]
   154dc:	bf08      	it	eq
   154de:	6021      	streq	r1, [r4, #0]
   154e0:	6054      	str	r4, [r2, #4]
   154e2:	e7ca      	b.n	1547a <_free_r+0x22>
   154e4:	bd38      	pop	{r3, r4, r5, pc}
   154e6:	bf00      	nop
   154e8:	2000d730 	.word	0x2000d730

000154ec <_malloc_r>:
   154ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   154ee:	1ccd      	adds	r5, r1, #3
   154f0:	4606      	mov	r6, r0
   154f2:	f025 0503 	bic.w	r5, r5, #3
   154f6:	3508      	adds	r5, #8
   154f8:	2d0c      	cmp	r5, #12
   154fa:	bf38      	it	cc
   154fc:	250c      	movcc	r5, #12
   154fe:	2d00      	cmp	r5, #0
   15500:	db01      	blt.n	15506 <_malloc_r+0x1a>
   15502:	42a9      	cmp	r1, r5
   15504:	d903      	bls.n	1550e <_malloc_r+0x22>
   15506:	230c      	movs	r3, #12
   15508:	6033      	str	r3, [r6, #0]
   1550a:	2000      	movs	r0, #0
   1550c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1550e:	f000 fea7 	bl	16260 <__malloc_lock>
   15512:	4921      	ldr	r1, [pc, #132]	; (15598 <_malloc_r+0xac>)
   15514:	680a      	ldr	r2, [r1, #0]
   15516:	4614      	mov	r4, r2
   15518:	b99c      	cbnz	r4, 15542 <_malloc_r+0x56>
   1551a:	4f20      	ldr	r7, [pc, #128]	; (1559c <_malloc_r+0xb0>)
   1551c:	683b      	ldr	r3, [r7, #0]
   1551e:	b923      	cbnz	r3, 1552a <_malloc_r+0x3e>
   15520:	4621      	mov	r1, r4
   15522:	4630      	mov	r0, r6
   15524:	f000 fbb6 	bl	15c94 <_sbrk_r>
   15528:	6038      	str	r0, [r7, #0]
   1552a:	4629      	mov	r1, r5
   1552c:	4630      	mov	r0, r6
   1552e:	f000 fbb1 	bl	15c94 <_sbrk_r>
   15532:	1c43      	adds	r3, r0, #1
   15534:	d123      	bne.n	1557e <_malloc_r+0x92>
   15536:	230c      	movs	r3, #12
   15538:	4630      	mov	r0, r6
   1553a:	6033      	str	r3, [r6, #0]
   1553c:	f000 fe96 	bl	1626c <__malloc_unlock>
   15540:	e7e3      	b.n	1550a <_malloc_r+0x1e>
   15542:	6823      	ldr	r3, [r4, #0]
   15544:	1b5b      	subs	r3, r3, r5
   15546:	d417      	bmi.n	15578 <_malloc_r+0x8c>
   15548:	2b0b      	cmp	r3, #11
   1554a:	d903      	bls.n	15554 <_malloc_r+0x68>
   1554c:	6023      	str	r3, [r4, #0]
   1554e:	441c      	add	r4, r3
   15550:	6025      	str	r5, [r4, #0]
   15552:	e004      	b.n	1555e <_malloc_r+0x72>
   15554:	6863      	ldr	r3, [r4, #4]
   15556:	42a2      	cmp	r2, r4
   15558:	bf0c      	ite	eq
   1555a:	600b      	streq	r3, [r1, #0]
   1555c:	6053      	strne	r3, [r2, #4]
   1555e:	4630      	mov	r0, r6
   15560:	f000 fe84 	bl	1626c <__malloc_unlock>
   15564:	f104 000b 	add.w	r0, r4, #11
   15568:	1d23      	adds	r3, r4, #4
   1556a:	f020 0007 	bic.w	r0, r0, #7
   1556e:	1ac2      	subs	r2, r0, r3
   15570:	bf1c      	itt	ne
   15572:	1a1b      	subne	r3, r3, r0
   15574:	50a3      	strne	r3, [r4, r2]
   15576:	e7c9      	b.n	1550c <_malloc_r+0x20>
   15578:	4622      	mov	r2, r4
   1557a:	6864      	ldr	r4, [r4, #4]
   1557c:	e7cc      	b.n	15518 <_malloc_r+0x2c>
   1557e:	1cc4      	adds	r4, r0, #3
   15580:	f024 0403 	bic.w	r4, r4, #3
   15584:	42a0      	cmp	r0, r4
   15586:	d0e3      	beq.n	15550 <_malloc_r+0x64>
   15588:	1a21      	subs	r1, r4, r0
   1558a:	4630      	mov	r0, r6
   1558c:	f000 fb82 	bl	15c94 <_sbrk_r>
   15590:	3001      	adds	r0, #1
   15592:	d1dd      	bne.n	15550 <_malloc_r+0x64>
   15594:	e7cf      	b.n	15536 <_malloc_r+0x4a>
   15596:	bf00      	nop
   15598:	2000d730 	.word	0x2000d730
   1559c:	2000d72c 	.word	0x2000d72c

000155a0 <_printf_float>:
   155a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155a4:	b08d      	sub	sp, #52	; 0x34
   155a6:	460c      	mov	r4, r1
   155a8:	4616      	mov	r6, r2
   155aa:	461f      	mov	r7, r3
   155ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   155b0:	4605      	mov	r5, r0
   155b2:	f000 fe3f 	bl	16234 <_localeconv_r>
   155b6:	6803      	ldr	r3, [r0, #0]
   155b8:	4618      	mov	r0, r3
   155ba:	9304      	str	r3, [sp, #16]
   155bc:	f7f3 fc1a 	bl	8df4 <strlen>
   155c0:	2300      	movs	r3, #0
   155c2:	9005      	str	r0, [sp, #20]
   155c4:	930a      	str	r3, [sp, #40]	; 0x28
   155c6:	f8d8 3000 	ldr.w	r3, [r8]
   155ca:	f894 a018 	ldrb.w	sl, [r4, #24]
   155ce:	3307      	adds	r3, #7
   155d0:	f8d4 b000 	ldr.w	fp, [r4]
   155d4:	f023 0307 	bic.w	r3, r3, #7
   155d8:	f103 0208 	add.w	r2, r3, #8
   155dc:	f8c8 2000 	str.w	r2, [r8]
   155e0:	f04f 32ff 	mov.w	r2, #4294967295
   155e4:	e9d3 8900 	ldrd	r8, r9, [r3]
   155e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   155ec:	f8cd 8018 	str.w	r8, [sp, #24]
   155f0:	9307      	str	r3, [sp, #28]
   155f2:	4b9c      	ldr	r3, [pc, #624]	; (15864 <_printf_float+0x2c4>)
   155f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   155f8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   155fc:	f7f3 fa64 	bl	8ac8 <__aeabi_dcmpun>
   15600:	bb70      	cbnz	r0, 15660 <_printf_float+0xc0>
   15602:	f04f 32ff 	mov.w	r2, #4294967295
   15606:	4b97      	ldr	r3, [pc, #604]	; (15864 <_printf_float+0x2c4>)
   15608:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1560c:	f7f3 fa3e 	bl	8a8c <__aeabi_dcmple>
   15610:	bb30      	cbnz	r0, 15660 <_printf_float+0xc0>
   15612:	2200      	movs	r2, #0
   15614:	2300      	movs	r3, #0
   15616:	4640      	mov	r0, r8
   15618:	4649      	mov	r1, r9
   1561a:	f7f3 fa2d 	bl	8a78 <__aeabi_dcmplt>
   1561e:	b110      	cbz	r0, 15626 <_printf_float+0x86>
   15620:	232d      	movs	r3, #45	; 0x2d
   15622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   15626:	4a90      	ldr	r2, [pc, #576]	; (15868 <_printf_float+0x2c8>)
   15628:	4b90      	ldr	r3, [pc, #576]	; (1586c <_printf_float+0x2cc>)
   1562a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   1562e:	bf94      	ite	ls
   15630:	4690      	movls	r8, r2
   15632:	4698      	movhi	r8, r3
   15634:	2303      	movs	r3, #3
   15636:	f04f 0900 	mov.w	r9, #0
   1563a:	6123      	str	r3, [r4, #16]
   1563c:	f02b 0304 	bic.w	r3, fp, #4
   15640:	6023      	str	r3, [r4, #0]
   15642:	4633      	mov	r3, r6
   15644:	aa0b      	add	r2, sp, #44	; 0x2c
   15646:	4621      	mov	r1, r4
   15648:	4628      	mov	r0, r5
   1564a:	9700      	str	r7, [sp, #0]
   1564c:	f005 f900 	bl	1a850 <_printf_common>
   15650:	3001      	adds	r0, #1
   15652:	f040 8096 	bne.w	15782 <_printf_float+0x1e2>
   15656:	f04f 30ff 	mov.w	r0, #4294967295
   1565a:	b00d      	add	sp, #52	; 0x34
   1565c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15660:	4642      	mov	r2, r8
   15662:	464b      	mov	r3, r9
   15664:	4640      	mov	r0, r8
   15666:	4649      	mov	r1, r9
   15668:	f7f3 fa2e 	bl	8ac8 <__aeabi_dcmpun>
   1566c:	b140      	cbz	r0, 15680 <_printf_float+0xe0>
   1566e:	464b      	mov	r3, r9
   15670:	4a7f      	ldr	r2, [pc, #508]	; (15870 <_printf_float+0x2d0>)
   15672:	2b00      	cmp	r3, #0
   15674:	bfbc      	itt	lt
   15676:	232d      	movlt	r3, #45	; 0x2d
   15678:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   1567c:	4b7d      	ldr	r3, [pc, #500]	; (15874 <_printf_float+0x2d4>)
   1567e:	e7d4      	b.n	1562a <_printf_float+0x8a>
   15680:	6863      	ldr	r3, [r4, #4]
   15682:	1c5a      	adds	r2, r3, #1
   15684:	d126      	bne.n	156d4 <_printf_float+0x134>
   15686:	2306      	movs	r3, #6
   15688:	6063      	str	r3, [r4, #4]
   1568a:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   1568e:	2300      	movs	r3, #0
   15690:	4628      	mov	r0, r5
   15692:	6022      	str	r2, [r4, #0]
   15694:	9303      	str	r3, [sp, #12]
   15696:	ab0a      	add	r3, sp, #40	; 0x28
   15698:	e9cd a301 	strd	sl, r3, [sp, #4]
   1569c:	ab09      	add	r3, sp, #36	; 0x24
   1569e:	ec49 8b10 	vmov	d0, r8, r9
   156a2:	9300      	str	r3, [sp, #0]
   156a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   156a8:	6861      	ldr	r1, [r4, #4]
   156aa:	f005 f830 	bl	1a70e <__cvt>
   156ae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   156b2:	4680      	mov	r8, r0
   156b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   156b6:	d115      	bne.n	156e4 <_printf_float+0x144>
   156b8:	1ccb      	adds	r3, r1, #3
   156ba:	db3b      	blt.n	15734 <_printf_float+0x194>
   156bc:	6863      	ldr	r3, [r4, #4]
   156be:	4299      	cmp	r1, r3
   156c0:	dc38      	bgt.n	15734 <_printf_float+0x194>
   156c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   156c4:	4299      	cmp	r1, r3
   156c6:	db55      	blt.n	15774 <_printf_float+0x1d4>
   156c8:	6823      	ldr	r3, [r4, #0]
   156ca:	6121      	str	r1, [r4, #16]
   156cc:	07d8      	lsls	r0, r3, #31
   156ce:	d545      	bpl.n	1575c <_printf_float+0x1bc>
   156d0:	1c4b      	adds	r3, r1, #1
   156d2:	e042      	b.n	1575a <_printf_float+0x1ba>
   156d4:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   156d8:	2a47      	cmp	r2, #71	; 0x47
   156da:	d1d6      	bne.n	1568a <_printf_float+0xea>
   156dc:	2b00      	cmp	r3, #0
   156de:	d1d4      	bne.n	1568a <_printf_float+0xea>
   156e0:	2301      	movs	r3, #1
   156e2:	e7d1      	b.n	15688 <_printf_float+0xe8>
   156e4:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   156e8:	d107      	bne.n	156fa <_printf_float+0x15a>
   156ea:	1cc8      	adds	r0, r1, #3
   156ec:	db25      	blt.n	1573a <_printf_float+0x19a>
   156ee:	6863      	ldr	r3, [r4, #4]
   156f0:	428b      	cmp	r3, r1
   156f2:	db22      	blt.n	1573a <_printf_float+0x19a>
   156f4:	f04f 0a67 	mov.w	sl, #103	; 0x67
   156f8:	e7e3      	b.n	156c2 <_printf_float+0x122>
   156fa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   156fe:	d81f      	bhi.n	15740 <_printf_float+0x1a0>
   15700:	3901      	subs	r1, #1
   15702:	4652      	mov	r2, sl
   15704:	f104 0050 	add.w	r0, r4, #80	; 0x50
   15708:	9109      	str	r1, [sp, #36]	; 0x24
   1570a:	f005 f868 	bl	1a7de <__exponent>
   1570e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15710:	4681      	mov	r9, r0
   15712:	1813      	adds	r3, r2, r0
   15714:	2a01      	cmp	r2, #1
   15716:	6123      	str	r3, [r4, #16]
   15718:	dc02      	bgt.n	15720 <_printf_float+0x180>
   1571a:	6822      	ldr	r2, [r4, #0]
   1571c:	07d2      	lsls	r2, r2, #31
   1571e:	d501      	bpl.n	15724 <_printf_float+0x184>
   15720:	3301      	adds	r3, #1
   15722:	6123      	str	r3, [r4, #16]
   15724:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   15728:	2b00      	cmp	r3, #0
   1572a:	d08a      	beq.n	15642 <_printf_float+0xa2>
   1572c:	232d      	movs	r3, #45	; 0x2d
   1572e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   15732:	e786      	b.n	15642 <_printf_float+0xa2>
   15734:	f04f 0a65 	mov.w	sl, #101	; 0x65
   15738:	e7e2      	b.n	15700 <_printf_float+0x160>
   1573a:	f04f 0a45 	mov.w	sl, #69	; 0x45
   1573e:	e7df      	b.n	15700 <_printf_float+0x160>
   15740:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   15744:	d1bd      	bne.n	156c2 <_printf_float+0x122>
   15746:	2900      	cmp	r1, #0
   15748:	6863      	ldr	r3, [r4, #4]
   1574a:	dd0b      	ble.n	15764 <_printf_float+0x1c4>
   1574c:	6121      	str	r1, [r4, #16]
   1574e:	b913      	cbnz	r3, 15756 <_printf_float+0x1b6>
   15750:	6822      	ldr	r2, [r4, #0]
   15752:	07d0      	lsls	r0, r2, #31
   15754:	d502      	bpl.n	1575c <_printf_float+0x1bc>
   15756:	3301      	adds	r3, #1
   15758:	440b      	add	r3, r1
   1575a:	6123      	str	r3, [r4, #16]
   1575c:	f04f 0900 	mov.w	r9, #0
   15760:	65a1      	str	r1, [r4, #88]	; 0x58
   15762:	e7df      	b.n	15724 <_printf_float+0x184>
   15764:	b913      	cbnz	r3, 1576c <_printf_float+0x1cc>
   15766:	6822      	ldr	r2, [r4, #0]
   15768:	07d2      	lsls	r2, r2, #31
   1576a:	d501      	bpl.n	15770 <_printf_float+0x1d0>
   1576c:	3302      	adds	r3, #2
   1576e:	e7f4      	b.n	1575a <_printf_float+0x1ba>
   15770:	2301      	movs	r3, #1
   15772:	e7f2      	b.n	1575a <_printf_float+0x1ba>
   15774:	2900      	cmp	r1, #0
   15776:	bfd4      	ite	le
   15778:	f1c1 0202 	rsble	r2, r1, #2
   1577c:	2201      	movgt	r2, #1
   1577e:	4413      	add	r3, r2
   15780:	e7eb      	b.n	1575a <_printf_float+0x1ba>
   15782:	6823      	ldr	r3, [r4, #0]
   15784:	055a      	lsls	r2, r3, #21
   15786:	d407      	bmi.n	15798 <_printf_float+0x1f8>
   15788:	6923      	ldr	r3, [r4, #16]
   1578a:	4642      	mov	r2, r8
   1578c:	4631      	mov	r1, r6
   1578e:	4628      	mov	r0, r5
   15790:	47b8      	blx	r7
   15792:	3001      	adds	r0, #1
   15794:	d12b      	bne.n	157ee <_printf_float+0x24e>
   15796:	e75e      	b.n	15656 <_printf_float+0xb6>
   15798:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   1579c:	f240 80dd 	bls.w	1595a <_printf_float+0x3ba>
   157a0:	2200      	movs	r2, #0
   157a2:	2300      	movs	r3, #0
   157a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   157a8:	f7f3 f95c 	bl	8a64 <__aeabi_dcmpeq>
   157ac:	2800      	cmp	r0, #0
   157ae:	d033      	beq.n	15818 <_printf_float+0x278>
   157b0:	2301      	movs	r3, #1
   157b2:	4a31      	ldr	r2, [pc, #196]	; (15878 <_printf_float+0x2d8>)
   157b4:	4631      	mov	r1, r6
   157b6:	4628      	mov	r0, r5
   157b8:	47b8      	blx	r7
   157ba:	3001      	adds	r0, #1
   157bc:	f43f af4b 	beq.w	15656 <_printf_float+0xb6>
   157c0:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	; 0x24
   157c4:	4543      	cmp	r3, r8
   157c6:	db02      	blt.n	157ce <_printf_float+0x22e>
   157c8:	6823      	ldr	r3, [r4, #0]
   157ca:	07d8      	lsls	r0, r3, #31
   157cc:	d50f      	bpl.n	157ee <_printf_float+0x24e>
   157ce:	4631      	mov	r1, r6
   157d0:	4628      	mov	r0, r5
   157d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   157d6:	47b8      	blx	r7
   157d8:	3001      	adds	r0, #1
   157da:	f43f af3c 	beq.w	15656 <_printf_float+0xb6>
   157de:	f04f 0900 	mov.w	r9, #0
   157e2:	f108 38ff 	add.w	r8, r8, #4294967295
   157e6:	f104 0a1a 	add.w	sl, r4, #26
   157ea:	45c8      	cmp	r8, r9
   157ec:	dc09      	bgt.n	15802 <_printf_float+0x262>
   157ee:	6823      	ldr	r3, [r4, #0]
   157f0:	079b      	lsls	r3, r3, #30
   157f2:	f100 8103 	bmi.w	159fc <_printf_float+0x45c>
   157f6:	68e0      	ldr	r0, [r4, #12]
   157f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   157fa:	4298      	cmp	r0, r3
   157fc:	bfb8      	it	lt
   157fe:	4618      	movlt	r0, r3
   15800:	e72b      	b.n	1565a <_printf_float+0xba>
   15802:	2301      	movs	r3, #1
   15804:	4652      	mov	r2, sl
   15806:	4631      	mov	r1, r6
   15808:	4628      	mov	r0, r5
   1580a:	47b8      	blx	r7
   1580c:	3001      	adds	r0, #1
   1580e:	f43f af22 	beq.w	15656 <_printf_float+0xb6>
   15812:	f109 0901 	add.w	r9, r9, #1
   15816:	e7e8      	b.n	157ea <_printf_float+0x24a>
   15818:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1581a:	2b00      	cmp	r3, #0
   1581c:	dc39      	bgt.n	15892 <_printf_float+0x2f2>
   1581e:	2301      	movs	r3, #1
   15820:	4a15      	ldr	r2, [pc, #84]	; (15878 <_printf_float+0x2d8>)
   15822:	4631      	mov	r1, r6
   15824:	4628      	mov	r0, r5
   15826:	47b8      	blx	r7
   15828:	3001      	adds	r0, #1
   1582a:	f43f af14 	beq.w	15656 <_printf_float+0xb6>
   1582e:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	; 0x24
   15832:	ea59 0303 	orrs.w	r3, r9, r3
   15836:	d102      	bne.n	1583e <_printf_float+0x29e>
   15838:	6823      	ldr	r3, [r4, #0]
   1583a:	07d9      	lsls	r1, r3, #31
   1583c:	d5d7      	bpl.n	157ee <_printf_float+0x24e>
   1583e:	4631      	mov	r1, r6
   15840:	4628      	mov	r0, r5
   15842:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   15846:	47b8      	blx	r7
   15848:	3001      	adds	r0, #1
   1584a:	f43f af04 	beq.w	15656 <_printf_float+0xb6>
   1584e:	f04f 0a00 	mov.w	sl, #0
   15852:	f104 0b1a 	add.w	fp, r4, #26
   15856:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15858:	425b      	negs	r3, r3
   1585a:	4553      	cmp	r3, sl
   1585c:	dc0e      	bgt.n	1587c <_printf_float+0x2dc>
   1585e:	464b      	mov	r3, r9
   15860:	e793      	b.n	1578a <_printf_float+0x1ea>
   15862:	bf00      	nop
   15864:	7fefffff 	.word	0x7fefffff
   15868:	0001e12d 	.word	0x0001e12d
   1586c:	0001c2cd 	.word	0x0001c2cd
   15870:	0001e131 	.word	0x0001e131
   15874:	0001e135 	.word	0x0001e135
   15878:	0001d372 	.word	0x0001d372
   1587c:	2301      	movs	r3, #1
   1587e:	465a      	mov	r2, fp
   15880:	4631      	mov	r1, r6
   15882:	4628      	mov	r0, r5
   15884:	47b8      	blx	r7
   15886:	3001      	adds	r0, #1
   15888:	f43f aee5 	beq.w	15656 <_printf_float+0xb6>
   1588c:	f10a 0a01 	add.w	sl, sl, #1
   15890:	e7e1      	b.n	15856 <_printf_float+0x2b6>
   15892:	6da3      	ldr	r3, [r4, #88]	; 0x58
   15894:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   15898:	4553      	cmp	r3, sl
   1589a:	bfa8      	it	ge
   1589c:	4653      	movge	r3, sl
   1589e:	2b00      	cmp	r3, #0
   158a0:	4699      	mov	r9, r3
   158a2:	dc36      	bgt.n	15912 <_printf_float+0x372>
   158a4:	f04f 0b00 	mov.w	fp, #0
   158a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   158ac:	f104 021a 	add.w	r2, r4, #26
   158b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
   158b2:	9306      	str	r3, [sp, #24]
   158b4:	eba3 0309 	sub.w	r3, r3, r9
   158b8:	455b      	cmp	r3, fp
   158ba:	dc31      	bgt.n	15920 <_printf_float+0x380>
   158bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   158be:	459a      	cmp	sl, r3
   158c0:	dc3a      	bgt.n	15938 <_printf_float+0x398>
   158c2:	6823      	ldr	r3, [r4, #0]
   158c4:	07da      	lsls	r2, r3, #31
   158c6:	d437      	bmi.n	15938 <_printf_float+0x398>
   158c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   158ca:	ebaa 0903 	sub.w	r9, sl, r3
   158ce:	9b06      	ldr	r3, [sp, #24]
   158d0:	ebaa 0303 	sub.w	r3, sl, r3
   158d4:	4599      	cmp	r9, r3
   158d6:	bfa8      	it	ge
   158d8:	4699      	movge	r9, r3
   158da:	f1b9 0f00 	cmp.w	r9, #0
   158de:	dc33      	bgt.n	15948 <_printf_float+0x3a8>
   158e0:	f04f 0800 	mov.w	r8, #0
   158e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   158e8:	f104 0b1a 	add.w	fp, r4, #26
   158ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   158ee:	ebaa 0303 	sub.w	r3, sl, r3
   158f2:	eba3 0309 	sub.w	r3, r3, r9
   158f6:	4543      	cmp	r3, r8
   158f8:	f77f af79 	ble.w	157ee <_printf_float+0x24e>
   158fc:	2301      	movs	r3, #1
   158fe:	465a      	mov	r2, fp
   15900:	4631      	mov	r1, r6
   15902:	4628      	mov	r0, r5
   15904:	47b8      	blx	r7
   15906:	3001      	adds	r0, #1
   15908:	f43f aea5 	beq.w	15656 <_printf_float+0xb6>
   1590c:	f108 0801 	add.w	r8, r8, #1
   15910:	e7ec      	b.n	158ec <_printf_float+0x34c>
   15912:	4642      	mov	r2, r8
   15914:	4631      	mov	r1, r6
   15916:	4628      	mov	r0, r5
   15918:	47b8      	blx	r7
   1591a:	3001      	adds	r0, #1
   1591c:	d1c2      	bne.n	158a4 <_printf_float+0x304>
   1591e:	e69a      	b.n	15656 <_printf_float+0xb6>
   15920:	2301      	movs	r3, #1
   15922:	4631      	mov	r1, r6
   15924:	4628      	mov	r0, r5
   15926:	9206      	str	r2, [sp, #24]
   15928:	47b8      	blx	r7
   1592a:	3001      	adds	r0, #1
   1592c:	f43f ae93 	beq.w	15656 <_printf_float+0xb6>
   15930:	f10b 0b01 	add.w	fp, fp, #1
   15934:	9a06      	ldr	r2, [sp, #24]
   15936:	e7bb      	b.n	158b0 <_printf_float+0x310>
   15938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1593c:	4631      	mov	r1, r6
   1593e:	4628      	mov	r0, r5
   15940:	47b8      	blx	r7
   15942:	3001      	adds	r0, #1
   15944:	d1c0      	bne.n	158c8 <_printf_float+0x328>
   15946:	e686      	b.n	15656 <_printf_float+0xb6>
   15948:	9a06      	ldr	r2, [sp, #24]
   1594a:	464b      	mov	r3, r9
   1594c:	4631      	mov	r1, r6
   1594e:	4628      	mov	r0, r5
   15950:	4442      	add	r2, r8
   15952:	47b8      	blx	r7
   15954:	3001      	adds	r0, #1
   15956:	d1c3      	bne.n	158e0 <_printf_float+0x340>
   15958:	e67d      	b.n	15656 <_printf_float+0xb6>
   1595a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1595e:	f1ba 0f01 	cmp.w	sl, #1
   15962:	dc01      	bgt.n	15968 <_printf_float+0x3c8>
   15964:	07db      	lsls	r3, r3, #31
   15966:	d536      	bpl.n	159d6 <_printf_float+0x436>
   15968:	2301      	movs	r3, #1
   1596a:	4642      	mov	r2, r8
   1596c:	4631      	mov	r1, r6
   1596e:	4628      	mov	r0, r5
   15970:	47b8      	blx	r7
   15972:	3001      	adds	r0, #1
   15974:	f43f ae6f 	beq.w	15656 <_printf_float+0xb6>
   15978:	4631      	mov	r1, r6
   1597a:	4628      	mov	r0, r5
   1597c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   15980:	47b8      	blx	r7
   15982:	3001      	adds	r0, #1
   15984:	f43f ae67 	beq.w	15656 <_printf_float+0xb6>
   15988:	2200      	movs	r2, #0
   1598a:	2300      	movs	r3, #0
   1598c:	f10a 3aff 	add.w	sl, sl, #4294967295
   15990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   15994:	f7f3 f866 	bl	8a64 <__aeabi_dcmpeq>
   15998:	b9c0      	cbnz	r0, 159cc <_printf_float+0x42c>
   1599a:	4653      	mov	r3, sl
   1599c:	f108 0201 	add.w	r2, r8, #1
   159a0:	4631      	mov	r1, r6
   159a2:	4628      	mov	r0, r5
   159a4:	47b8      	blx	r7
   159a6:	3001      	adds	r0, #1
   159a8:	d10c      	bne.n	159c4 <_printf_float+0x424>
   159aa:	e654      	b.n	15656 <_printf_float+0xb6>
   159ac:	2301      	movs	r3, #1
   159ae:	465a      	mov	r2, fp
   159b0:	4631      	mov	r1, r6
   159b2:	4628      	mov	r0, r5
   159b4:	47b8      	blx	r7
   159b6:	3001      	adds	r0, #1
   159b8:	f43f ae4d 	beq.w	15656 <_printf_float+0xb6>
   159bc:	f108 0801 	add.w	r8, r8, #1
   159c0:	45d0      	cmp	r8, sl
   159c2:	dbf3      	blt.n	159ac <_printf_float+0x40c>
   159c4:	464b      	mov	r3, r9
   159c6:	f104 0250 	add.w	r2, r4, #80	; 0x50
   159ca:	e6df      	b.n	1578c <_printf_float+0x1ec>
   159cc:	f04f 0800 	mov.w	r8, #0
   159d0:	f104 0b1a 	add.w	fp, r4, #26
   159d4:	e7f4      	b.n	159c0 <_printf_float+0x420>
   159d6:	2301      	movs	r3, #1
   159d8:	4642      	mov	r2, r8
   159da:	e7e1      	b.n	159a0 <_printf_float+0x400>
   159dc:	2301      	movs	r3, #1
   159de:	464a      	mov	r2, r9
   159e0:	4631      	mov	r1, r6
   159e2:	4628      	mov	r0, r5
   159e4:	47b8      	blx	r7
   159e6:	3001      	adds	r0, #1
   159e8:	f43f ae35 	beq.w	15656 <_printf_float+0xb6>
   159ec:	f108 0801 	add.w	r8, r8, #1
   159f0:	68e3      	ldr	r3, [r4, #12]
   159f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   159f4:	1a5b      	subs	r3, r3, r1
   159f6:	4543      	cmp	r3, r8
   159f8:	dcf0      	bgt.n	159dc <_printf_float+0x43c>
   159fa:	e6fc      	b.n	157f6 <_printf_float+0x256>
   159fc:	f04f 0800 	mov.w	r8, #0
   15a00:	f104 0919 	add.w	r9, r4, #25
   15a04:	e7f4      	b.n	159f0 <_printf_float+0x450>
   15a06:	bf00      	nop

00015a08 <_printf_i>:
   15a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   15a0c:	7e0f      	ldrb	r7, [r1, #24]
   15a0e:	4691      	mov	r9, r2
   15a10:	4680      	mov	r8, r0
   15a12:	460c      	mov	r4, r1
   15a14:	2f78      	cmp	r7, #120	; 0x78
   15a16:	469a      	mov	sl, r3
   15a18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   15a1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
   15a1e:	d807      	bhi.n	15a30 <_printf_i+0x28>
   15a20:	2f62      	cmp	r7, #98	; 0x62
   15a22:	d80a      	bhi.n	15a3a <_printf_i+0x32>
   15a24:	2f00      	cmp	r7, #0
   15a26:	f000 80e0 	beq.w	15bea <_printf_i+0x1e2>
   15a2a:	2f58      	cmp	r7, #88	; 0x58
   15a2c:	f000 80bb 	beq.w	15ba6 <_printf_i+0x19e>
   15a30:	f104 0642 	add.w	r6, r4, #66	; 0x42
   15a34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   15a38:	e03a      	b.n	15ab0 <_printf_i+0xa8>
   15a3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   15a3e:	2b15      	cmp	r3, #21
   15a40:	d8f6      	bhi.n	15a30 <_printf_i+0x28>
   15a42:	a101      	add	r1, pc, #4	; (adr r1, 15a48 <_printf_i+0x40>)
   15a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   15a48:	00015aa1 	.word	0x00015aa1
   15a4c:	00015ab5 	.word	0x00015ab5
   15a50:	00015a31 	.word	0x00015a31
   15a54:	00015a31 	.word	0x00015a31
   15a58:	00015a31 	.word	0x00015a31
   15a5c:	00015a31 	.word	0x00015a31
   15a60:	00015ab5 	.word	0x00015ab5
   15a64:	00015a31 	.word	0x00015a31
   15a68:	00015a31 	.word	0x00015a31
   15a6c:	00015a31 	.word	0x00015a31
   15a70:	00015a31 	.word	0x00015a31
   15a74:	00015bd1 	.word	0x00015bd1
   15a78:	00015b45 	.word	0x00015b45
   15a7c:	00015b87 	.word	0x00015b87
   15a80:	00015a31 	.word	0x00015a31
   15a84:	00015a31 	.word	0x00015a31
   15a88:	00015bf3 	.word	0x00015bf3
   15a8c:	00015a31 	.word	0x00015a31
   15a90:	00015b45 	.word	0x00015b45
   15a94:	00015a31 	.word	0x00015a31
   15a98:	00015a31 	.word	0x00015a31
   15a9c:	00015b8f 	.word	0x00015b8f
   15aa0:	682b      	ldr	r3, [r5, #0]
   15aa2:	f104 0642 	add.w	r6, r4, #66	; 0x42
   15aa6:	1d1a      	adds	r2, r3, #4
   15aa8:	681b      	ldr	r3, [r3, #0]
   15aaa:	602a      	str	r2, [r5, #0]
   15aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   15ab0:	2301      	movs	r3, #1
   15ab2:	e0ab      	b.n	15c0c <_printf_i+0x204>
   15ab4:	6823      	ldr	r3, [r4, #0]
   15ab6:	6829      	ldr	r1, [r5, #0]
   15ab8:	061f      	lsls	r7, r3, #24
   15aba:	f101 0004 	add.w	r0, r1, #4
   15abe:	6028      	str	r0, [r5, #0]
   15ac0:	d501      	bpl.n	15ac6 <_printf_i+0xbe>
   15ac2:	680d      	ldr	r5, [r1, #0]
   15ac4:	e003      	b.n	15ace <_printf_i+0xc6>
   15ac6:	065e      	lsls	r6, r3, #25
   15ac8:	d5fb      	bpl.n	15ac2 <_printf_i+0xba>
   15aca:	f9b1 5000 	ldrsh.w	r5, [r1]
   15ace:	2d00      	cmp	r5, #0
   15ad0:	6861      	ldr	r1, [r4, #4]
   15ad2:	da7a      	bge.n	15bca <_printf_i+0x1c2>
   15ad4:	202d      	movs	r0, #45	; 0x2d
   15ad6:	2900      	cmp	r1, #0
   15ad8:	60a1      	str	r1, [r4, #8]
   15ada:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   15ade:	da2d      	bge.n	15b3c <_printf_i+0x134>
   15ae0:	426d      	negs	r5, r5
   15ae2:	485e      	ldr	r0, [pc, #376]	; (15c5c <_printf_i+0x254>)
   15ae4:	230a      	movs	r3, #10
   15ae6:	4616      	mov	r6, r2
   15ae8:	fbb5 f1f3 	udiv	r1, r5, r3
   15aec:	fb03 5711 	mls	r7, r3, r1, r5
   15af0:	5dc7      	ldrb	r7, [r0, r7]
   15af2:	f806 7d01 	strb.w	r7, [r6, #-1]!
   15af6:	462f      	mov	r7, r5
   15af8:	460d      	mov	r5, r1
   15afa:	42bb      	cmp	r3, r7
   15afc:	d9f4      	bls.n	15ae8 <_printf_i+0xe0>
   15afe:	2b08      	cmp	r3, #8
   15b00:	d10b      	bne.n	15b1a <_printf_i+0x112>
   15b02:	6823      	ldr	r3, [r4, #0]
   15b04:	07df      	lsls	r7, r3, #31
   15b06:	d508      	bpl.n	15b1a <_printf_i+0x112>
   15b08:	6923      	ldr	r3, [r4, #16]
   15b0a:	6861      	ldr	r1, [r4, #4]
   15b0c:	4299      	cmp	r1, r3
   15b0e:	bfde      	ittt	le
   15b10:	2330      	movle	r3, #48	; 0x30
   15b12:	f806 3c01 	strble.w	r3, [r6, #-1]
   15b16:	f106 36ff 	addle.w	r6, r6, #4294967295
   15b1a:	1b92      	subs	r2, r2, r6
   15b1c:	6122      	str	r2, [r4, #16]
   15b1e:	464b      	mov	r3, r9
   15b20:	aa03      	add	r2, sp, #12
   15b22:	4621      	mov	r1, r4
   15b24:	4640      	mov	r0, r8
   15b26:	f8cd a000 	str.w	sl, [sp]
   15b2a:	f004 fe91 	bl	1a850 <_printf_common>
   15b2e:	3001      	adds	r0, #1
   15b30:	d171      	bne.n	15c16 <_printf_i+0x20e>
   15b32:	f04f 30ff 	mov.w	r0, #4294967295
   15b36:	b004      	add	sp, #16
   15b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15b3c:	f023 0304 	bic.w	r3, r3, #4
   15b40:	6023      	str	r3, [r4, #0]
   15b42:	e7cd      	b.n	15ae0 <_printf_i+0xd8>
   15b44:	682b      	ldr	r3, [r5, #0]
   15b46:	6820      	ldr	r0, [r4, #0]
   15b48:	1d19      	adds	r1, r3, #4
   15b4a:	6029      	str	r1, [r5, #0]
   15b4c:	0605      	lsls	r5, r0, #24
   15b4e:	d501      	bpl.n	15b54 <_printf_i+0x14c>
   15b50:	681d      	ldr	r5, [r3, #0]
   15b52:	e002      	b.n	15b5a <_printf_i+0x152>
   15b54:	0641      	lsls	r1, r0, #25
   15b56:	d5fb      	bpl.n	15b50 <_printf_i+0x148>
   15b58:	881d      	ldrh	r5, [r3, #0]
   15b5a:	2f6f      	cmp	r7, #111	; 0x6f
   15b5c:	483f      	ldr	r0, [pc, #252]	; (15c5c <_printf_i+0x254>)
   15b5e:	bf14      	ite	ne
   15b60:	230a      	movne	r3, #10
   15b62:	2308      	moveq	r3, #8
   15b64:	2100      	movs	r1, #0
   15b66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   15b6a:	6866      	ldr	r6, [r4, #4]
   15b6c:	2e00      	cmp	r6, #0
   15b6e:	60a6      	str	r6, [r4, #8]
   15b70:	dbb9      	blt.n	15ae6 <_printf_i+0xde>
   15b72:	6821      	ldr	r1, [r4, #0]
   15b74:	f021 0104 	bic.w	r1, r1, #4
   15b78:	6021      	str	r1, [r4, #0]
   15b7a:	2d00      	cmp	r5, #0
   15b7c:	d1b3      	bne.n	15ae6 <_printf_i+0xde>
   15b7e:	2e00      	cmp	r6, #0
   15b80:	d1b1      	bne.n	15ae6 <_printf_i+0xde>
   15b82:	4616      	mov	r6, r2
   15b84:	e7bb      	b.n	15afe <_printf_i+0xf6>
   15b86:	6823      	ldr	r3, [r4, #0]
   15b88:	f043 0320 	orr.w	r3, r3, #32
   15b8c:	6023      	str	r3, [r4, #0]
   15b8e:	2778      	movs	r7, #120	; 0x78
   15b90:	4833      	ldr	r0, [pc, #204]	; (15c60 <_printf_i+0x258>)
   15b92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   15b96:	6829      	ldr	r1, [r5, #0]
   15b98:	6823      	ldr	r3, [r4, #0]
   15b9a:	1d0e      	adds	r6, r1, #4
   15b9c:	602e      	str	r6, [r5, #0]
   15b9e:	061e      	lsls	r6, r3, #24
   15ba0:	d503      	bpl.n	15baa <_printf_i+0x1a2>
   15ba2:	680d      	ldr	r5, [r1, #0]
   15ba4:	e004      	b.n	15bb0 <_printf_i+0x1a8>
   15ba6:	482d      	ldr	r0, [pc, #180]	; (15c5c <_printf_i+0x254>)
   15ba8:	e7f3      	b.n	15b92 <_printf_i+0x18a>
   15baa:	065d      	lsls	r5, r3, #25
   15bac:	d5f9      	bpl.n	15ba2 <_printf_i+0x19a>
   15bae:	880d      	ldrh	r5, [r1, #0]
   15bb0:	07d9      	lsls	r1, r3, #31
   15bb2:	bf44      	itt	mi
   15bb4:	f043 0320 	orrmi.w	r3, r3, #32
   15bb8:	6023      	strmi	r3, [r4, #0]
   15bba:	b10d      	cbz	r5, 15bc0 <_printf_i+0x1b8>
   15bbc:	2310      	movs	r3, #16
   15bbe:	e7d1      	b.n	15b64 <_printf_i+0x15c>
   15bc0:	6823      	ldr	r3, [r4, #0]
   15bc2:	f023 0320 	bic.w	r3, r3, #32
   15bc6:	6023      	str	r3, [r4, #0]
   15bc8:	e7f8      	b.n	15bbc <_printf_i+0x1b4>
   15bca:	4824      	ldr	r0, [pc, #144]	; (15c5c <_printf_i+0x254>)
   15bcc:	230a      	movs	r3, #10
   15bce:	e7cc      	b.n	15b6a <_printf_i+0x162>
   15bd0:	682b      	ldr	r3, [r5, #0]
   15bd2:	6826      	ldr	r6, [r4, #0]
   15bd4:	1d18      	adds	r0, r3, #4
   15bd6:	6961      	ldr	r1, [r4, #20]
   15bd8:	6028      	str	r0, [r5, #0]
   15bda:	0635      	lsls	r5, r6, #24
   15bdc:	681b      	ldr	r3, [r3, #0]
   15bde:	d501      	bpl.n	15be4 <_printf_i+0x1dc>
   15be0:	6019      	str	r1, [r3, #0]
   15be2:	e002      	b.n	15bea <_printf_i+0x1e2>
   15be4:	0670      	lsls	r0, r6, #25
   15be6:	d5fb      	bpl.n	15be0 <_printf_i+0x1d8>
   15be8:	8019      	strh	r1, [r3, #0]
   15bea:	2300      	movs	r3, #0
   15bec:	4616      	mov	r6, r2
   15bee:	6123      	str	r3, [r4, #16]
   15bf0:	e795      	b.n	15b1e <_printf_i+0x116>
   15bf2:	682b      	ldr	r3, [r5, #0]
   15bf4:	2100      	movs	r1, #0
   15bf6:	1d1a      	adds	r2, r3, #4
   15bf8:	602a      	str	r2, [r5, #0]
   15bfa:	681e      	ldr	r6, [r3, #0]
   15bfc:	6862      	ldr	r2, [r4, #4]
   15bfe:	4630      	mov	r0, r6
   15c00:	f004 fd52 	bl	1a6a8 <memchr>
   15c04:	b108      	cbz	r0, 15c0a <_printf_i+0x202>
   15c06:	1b80      	subs	r0, r0, r6
   15c08:	6060      	str	r0, [r4, #4]
   15c0a:	6863      	ldr	r3, [r4, #4]
   15c0c:	6123      	str	r3, [r4, #16]
   15c0e:	2300      	movs	r3, #0
   15c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   15c14:	e783      	b.n	15b1e <_printf_i+0x116>
   15c16:	6923      	ldr	r3, [r4, #16]
   15c18:	4632      	mov	r2, r6
   15c1a:	4649      	mov	r1, r9
   15c1c:	4640      	mov	r0, r8
   15c1e:	47d0      	blx	sl
   15c20:	3001      	adds	r0, #1
   15c22:	d086      	beq.n	15b32 <_printf_i+0x12a>
   15c24:	6823      	ldr	r3, [r4, #0]
   15c26:	079b      	lsls	r3, r3, #30
   15c28:	d414      	bmi.n	15c54 <_printf_i+0x24c>
   15c2a:	68e0      	ldr	r0, [r4, #12]
   15c2c:	9b03      	ldr	r3, [sp, #12]
   15c2e:	4298      	cmp	r0, r3
   15c30:	bfb8      	it	lt
   15c32:	4618      	movlt	r0, r3
   15c34:	e77f      	b.n	15b36 <_printf_i+0x12e>
   15c36:	2301      	movs	r3, #1
   15c38:	4632      	mov	r2, r6
   15c3a:	4649      	mov	r1, r9
   15c3c:	4640      	mov	r0, r8
   15c3e:	47d0      	blx	sl
   15c40:	3001      	adds	r0, #1
   15c42:	f43f af76 	beq.w	15b32 <_printf_i+0x12a>
   15c46:	3501      	adds	r5, #1
   15c48:	68e3      	ldr	r3, [r4, #12]
   15c4a:	9903      	ldr	r1, [sp, #12]
   15c4c:	1a5b      	subs	r3, r3, r1
   15c4e:	42ab      	cmp	r3, r5
   15c50:	dcf1      	bgt.n	15c36 <_printf_i+0x22e>
   15c52:	e7ea      	b.n	15c2a <_printf_i+0x222>
   15c54:	2500      	movs	r5, #0
   15c56:	f104 0619 	add.w	r6, r4, #25
   15c5a:	e7f5      	b.n	15c48 <_printf_i+0x240>
   15c5c:	0001e139 	.word	0x0001e139
   15c60:	0001e14a 	.word	0x0001e14a

00015c64 <iprintf>:
   15c64:	b40f      	push	{r0, r1, r2, r3}
   15c66:	4b0a      	ldr	r3, [pc, #40]	; (15c90 <iprintf+0x2c>)
   15c68:	b513      	push	{r0, r1, r4, lr}
   15c6a:	681c      	ldr	r4, [r3, #0]
   15c6c:	b124      	cbz	r4, 15c78 <iprintf+0x14>
   15c6e:	69a3      	ldr	r3, [r4, #24]
   15c70:	b913      	cbnz	r3, 15c78 <iprintf+0x14>
   15c72:	4620      	mov	r0, r4
   15c74:	f000 fa60 	bl	16138 <__sinit>
   15c78:	ab05      	add	r3, sp, #20
   15c7a:	9a04      	ldr	r2, [sp, #16]
   15c7c:	68a1      	ldr	r1, [r4, #8]
   15c7e:	4620      	mov	r0, r4
   15c80:	9301      	str	r3, [sp, #4]
   15c82:	f001 f88d 	bl	16da0 <_vfiprintf_r>
   15c86:	b002      	add	sp, #8
   15c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15c8c:	b004      	add	sp, #16
   15c8e:	4770      	bx	lr
   15c90:	2000c6c0 	.word	0x2000c6c0

00015c94 <_sbrk_r>:
   15c94:	b538      	push	{r3, r4, r5, lr}
   15c96:	2300      	movs	r3, #0
   15c98:	4d05      	ldr	r5, [pc, #20]	; (15cb0 <_sbrk_r+0x1c>)
   15c9a:	4604      	mov	r4, r0
   15c9c:	4608      	mov	r0, r1
   15c9e:	602b      	str	r3, [r5, #0]
   15ca0:	f7f7 fa56 	bl	d150 <_sbrk>
   15ca4:	1c43      	adds	r3, r0, #1
   15ca6:	d102      	bne.n	15cae <_sbrk_r+0x1a>
   15ca8:	682b      	ldr	r3, [r5, #0]
   15caa:	b103      	cbz	r3, 15cae <_sbrk_r+0x1a>
   15cac:	6023      	str	r3, [r4, #0]
   15cae:	bd38      	pop	{r3, r4, r5, pc}
   15cb0:	2000d734 	.word	0x2000d734

00015cb4 <_strtol_l.constprop.0>:
   15cb4:	2b24      	cmp	r3, #36	; 0x24
   15cb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15cba:	4686      	mov	lr, r0
   15cbc:	4690      	mov	r8, r2
   15cbe:	d801      	bhi.n	15cc4 <_strtol_l.constprop.0+0x10>
   15cc0:	2b01      	cmp	r3, #1
   15cc2:	d106      	bne.n	15cd2 <_strtol_l.constprop.0+0x1e>
   15cc4:	f002 f996 	bl	17ff4 <__errno>
   15cc8:	2316      	movs	r3, #22
   15cca:	6003      	str	r3, [r0, #0]
   15ccc:	2000      	movs	r0, #0
   15cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15cd2:	460d      	mov	r5, r1
   15cd4:	4835      	ldr	r0, [pc, #212]	; (15dac <_strtol_l.constprop.0+0xf8>)
   15cd6:	462a      	mov	r2, r5
   15cd8:	f815 4b01 	ldrb.w	r4, [r5], #1
   15cdc:	5d06      	ldrb	r6, [r0, r4]
   15cde:	f016 0608 	ands.w	r6, r6, #8
   15ce2:	d1f8      	bne.n	15cd6 <_strtol_l.constprop.0+0x22>
   15ce4:	2c2d      	cmp	r4, #45	; 0x2d
   15ce6:	d124      	bne.n	15d32 <_strtol_l.constprop.0+0x7e>
   15ce8:	782c      	ldrb	r4, [r5, #0]
   15cea:	2601      	movs	r6, #1
   15cec:	1c95      	adds	r5, r2, #2
   15cee:	bb2b      	cbnz	r3, 15d3c <_strtol_l.constprop.0+0x88>
   15cf0:	2c30      	cmp	r4, #48	; 0x30
   15cf2:	d030      	beq.n	15d56 <_strtol_l.constprop.0+0xa2>
   15cf4:	230a      	movs	r3, #10
   15cf6:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   15cfa:	2200      	movs	r2, #0
   15cfc:	f10c 3cff 	add.w	ip, ip, #4294967295
   15d00:	4610      	mov	r0, r2
   15d02:	fbbc f9f3 	udiv	r9, ip, r3
   15d06:	fb03 ca19 	mls	sl, r3, r9, ip
   15d0a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   15d0e:	2f09      	cmp	r7, #9
   15d10:	d828      	bhi.n	15d64 <_strtol_l.constprop.0+0xb0>
   15d12:	463c      	mov	r4, r7
   15d14:	42a3      	cmp	r3, r4
   15d16:	dd34      	ble.n	15d82 <_strtol_l.constprop.0+0xce>
   15d18:	1c57      	adds	r7, r2, #1
   15d1a:	d007      	beq.n	15d2c <_strtol_l.constprop.0+0x78>
   15d1c:	4581      	cmp	r9, r0
   15d1e:	d32d      	bcc.n	15d7c <_strtol_l.constprop.0+0xc8>
   15d20:	d101      	bne.n	15d26 <_strtol_l.constprop.0+0x72>
   15d22:	45a2      	cmp	sl, r4
   15d24:	db2a      	blt.n	15d7c <_strtol_l.constprop.0+0xc8>
   15d26:	fb00 4003 	mla	r0, r0, r3, r4
   15d2a:	2201      	movs	r2, #1
   15d2c:	f815 4b01 	ldrb.w	r4, [r5], #1
   15d30:	e7eb      	b.n	15d0a <_strtol_l.constprop.0+0x56>
   15d32:	2c2b      	cmp	r4, #43	; 0x2b
   15d34:	bf04      	itt	eq
   15d36:	782c      	ldrbeq	r4, [r5, #0]
   15d38:	1c95      	addeq	r5, r2, #2
   15d3a:	e7d8      	b.n	15cee <_strtol_l.constprop.0+0x3a>
   15d3c:	2b10      	cmp	r3, #16
   15d3e:	d1da      	bne.n	15cf6 <_strtol_l.constprop.0+0x42>
   15d40:	2c30      	cmp	r4, #48	; 0x30
   15d42:	d1d8      	bne.n	15cf6 <_strtol_l.constprop.0+0x42>
   15d44:	782a      	ldrb	r2, [r5, #0]
   15d46:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   15d4a:	2a58      	cmp	r2, #88	; 0x58
   15d4c:	d1d3      	bne.n	15cf6 <_strtol_l.constprop.0+0x42>
   15d4e:	786c      	ldrb	r4, [r5, #1]
   15d50:	2310      	movs	r3, #16
   15d52:	3502      	adds	r5, #2
   15d54:	e7cf      	b.n	15cf6 <_strtol_l.constprop.0+0x42>
   15d56:	782b      	ldrb	r3, [r5, #0]
   15d58:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   15d5c:	2b58      	cmp	r3, #88	; 0x58
   15d5e:	d0f6      	beq.n	15d4e <_strtol_l.constprop.0+0x9a>
   15d60:	2308      	movs	r3, #8
   15d62:	e7c8      	b.n	15cf6 <_strtol_l.constprop.0+0x42>
   15d64:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   15d68:	2f19      	cmp	r7, #25
   15d6a:	d801      	bhi.n	15d70 <_strtol_l.constprop.0+0xbc>
   15d6c:	3c37      	subs	r4, #55	; 0x37
   15d6e:	e7d1      	b.n	15d14 <_strtol_l.constprop.0+0x60>
   15d70:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   15d74:	2f19      	cmp	r7, #25
   15d76:	d804      	bhi.n	15d82 <_strtol_l.constprop.0+0xce>
   15d78:	3c57      	subs	r4, #87	; 0x57
   15d7a:	e7cb      	b.n	15d14 <_strtol_l.constprop.0+0x60>
   15d7c:	f04f 32ff 	mov.w	r2, #4294967295
   15d80:	e7d4      	b.n	15d2c <_strtol_l.constprop.0+0x78>
   15d82:	1c53      	adds	r3, r2, #1
   15d84:	d108      	bne.n	15d98 <_strtol_l.constprop.0+0xe4>
   15d86:	2322      	movs	r3, #34	; 0x22
   15d88:	4660      	mov	r0, ip
   15d8a:	f8ce 3000 	str.w	r3, [lr]
   15d8e:	f1b8 0f00 	cmp.w	r8, #0
   15d92:	d09c      	beq.n	15cce <_strtol_l.constprop.0+0x1a>
   15d94:	1e69      	subs	r1, r5, #1
   15d96:	e006      	b.n	15da6 <_strtol_l.constprop.0+0xf2>
   15d98:	b106      	cbz	r6, 15d9c <_strtol_l.constprop.0+0xe8>
   15d9a:	4240      	negs	r0, r0
   15d9c:	f1b8 0f00 	cmp.w	r8, #0
   15da0:	d095      	beq.n	15cce <_strtol_l.constprop.0+0x1a>
   15da2:	2a00      	cmp	r2, #0
   15da4:	d1f6      	bne.n	15d94 <_strtol_l.constprop.0+0xe0>
   15da6:	f8c8 1000 	str.w	r1, [r8]
   15daa:	e790      	b.n	15cce <_strtol_l.constprop.0+0x1a>
   15dac:	0001e02d 	.word	0x0001e02d

00015db0 <strtol>:
   15db0:	4613      	mov	r3, r2
   15db2:	460a      	mov	r2, r1
   15db4:	4601      	mov	r1, r0
   15db6:	4802      	ldr	r0, [pc, #8]	; (15dc0 <strtol+0x10>)
   15db8:	6800      	ldr	r0, [r0, #0]
   15dba:	f7ff bf7b 	b.w	15cb4 <_strtol_l.constprop.0>
   15dbe:	bf00      	nop
   15dc0:	2000c6c0 	.word	0x2000c6c0

00015dc4 <_strtoll_l.constprop.0>:
   15dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dc8:	4690      	mov	r8, r2
   15dca:	b085      	sub	sp, #20
   15dcc:	4689      	mov	r9, r1
   15dce:	461e      	mov	r6, r3
   15dd0:	460d      	mov	r5, r1
   15dd2:	4a45      	ldr	r2, [pc, #276]	; (15ee8 <_strtoll_l.constprop.0+0x124>)
   15dd4:	9002      	str	r0, [sp, #8]
   15dd6:	462b      	mov	r3, r5
   15dd8:	f815 4b01 	ldrb.w	r4, [r5], #1
   15ddc:	5d17      	ldrb	r7, [r2, r4]
   15dde:	f017 0708 	ands.w	r7, r7, #8
   15de2:	d1f8      	bne.n	15dd6 <_strtoll_l.constprop.0+0x12>
   15de4:	2c2d      	cmp	r4, #45	; 0x2d
   15de6:	d141      	bne.n	15e6c <_strtoll_l.constprop.0+0xa8>
   15de8:	782c      	ldrb	r4, [r5, #0]
   15dea:	2701      	movs	r7, #1
   15dec:	1c9d      	adds	r5, r3, #2
   15dee:	2e00      	cmp	r6, #0
   15df0:	d141      	bne.n	15e76 <_strtoll_l.constprop.0+0xb2>
   15df2:	2c30      	cmp	r4, #48	; 0x30
   15df4:	d04c      	beq.n	15e90 <_strtoll_l.constprop.0+0xcc>
   15df6:	260a      	movs	r6, #10
   15df8:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   15dfc:	f107 3bff 	add.w	fp, r7, #4294967295
   15e00:	17f3      	asrs	r3, r6, #31
   15e02:	4632      	mov	r2, r6
   15e04:	f10a 3aff 	add.w	sl, sl, #4294967295
   15e08:	4658      	mov	r0, fp
   15e0a:	9303      	str	r3, [sp, #12]
   15e0c:	4651      	mov	r1, sl
   15e0e:	f7f2 fdb9 	bl	8984 <__aeabi_uldivmod>
   15e12:	9201      	str	r2, [sp, #4]
   15e14:	2200      	movs	r2, #0
   15e16:	468e      	mov	lr, r1
   15e18:	4684      	mov	ip, r0
   15e1a:	4611      	mov	r1, r2
   15e1c:	4610      	mov	r0, r2
   15e1e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   15e22:	2b09      	cmp	r3, #9
   15e24:	d905      	bls.n	15e32 <_strtoll_l.constprop.0+0x6e>
   15e26:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   15e2a:	2b19      	cmp	r3, #25
   15e2c:	d837      	bhi.n	15e9e <_strtoll_l.constprop.0+0xda>
   15e2e:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   15e32:	429e      	cmp	r6, r3
   15e34:	dd3d      	ble.n	15eb2 <_strtoll_l.constprop.0+0xee>
   15e36:	1c54      	adds	r4, r2, #1
   15e38:	d015      	beq.n	15e66 <_strtoll_l.constprop.0+0xa2>
   15e3a:	4584      	cmp	ip, r0
   15e3c:	eb7e 0201 	sbcs.w	r2, lr, r1
   15e40:	d334      	bcc.n	15eac <_strtoll_l.constprop.0+0xe8>
   15e42:	458e      	cmp	lr, r1
   15e44:	bf08      	it	eq
   15e46:	4584      	cmpeq	ip, r0
   15e48:	d102      	bne.n	15e50 <_strtoll_l.constprop.0+0x8c>
   15e4a:	9a01      	ldr	r2, [sp, #4]
   15e4c:	429a      	cmp	r2, r3
   15e4e:	db2d      	blt.n	15eac <_strtoll_l.constprop.0+0xe8>
   15e50:	9a03      	ldr	r2, [sp, #12]
   15e52:	4371      	muls	r1, r6
   15e54:	fb00 1102 	mla	r1, r0, r2, r1
   15e58:	fba6 0200 	umull	r0, r2, r6, r0
   15e5c:	440a      	add	r2, r1
   15e5e:	1818      	adds	r0, r3, r0
   15e60:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
   15e64:	2201      	movs	r2, #1
   15e66:	f815 4b01 	ldrb.w	r4, [r5], #1
   15e6a:	e7d8      	b.n	15e1e <_strtoll_l.constprop.0+0x5a>
   15e6c:	2c2b      	cmp	r4, #43	; 0x2b
   15e6e:	bf04      	itt	eq
   15e70:	782c      	ldrbeq	r4, [r5, #0]
   15e72:	1c9d      	addeq	r5, r3, #2
   15e74:	e7bb      	b.n	15dee <_strtoll_l.constprop.0+0x2a>
   15e76:	2e10      	cmp	r6, #16
   15e78:	d1be      	bne.n	15df8 <_strtoll_l.constprop.0+0x34>
   15e7a:	2c30      	cmp	r4, #48	; 0x30
   15e7c:	d1bc      	bne.n	15df8 <_strtoll_l.constprop.0+0x34>
   15e7e:	782b      	ldrb	r3, [r5, #0]
   15e80:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   15e84:	2b58      	cmp	r3, #88	; 0x58
   15e86:	d1b7      	bne.n	15df8 <_strtoll_l.constprop.0+0x34>
   15e88:	786c      	ldrb	r4, [r5, #1]
   15e8a:	2610      	movs	r6, #16
   15e8c:	3502      	adds	r5, #2
   15e8e:	e7b3      	b.n	15df8 <_strtoll_l.constprop.0+0x34>
   15e90:	782b      	ldrb	r3, [r5, #0]
   15e92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   15e96:	2b58      	cmp	r3, #88	; 0x58
   15e98:	d0f6      	beq.n	15e88 <_strtoll_l.constprop.0+0xc4>
   15e9a:	2608      	movs	r6, #8
   15e9c:	e7ac      	b.n	15df8 <_strtoll_l.constprop.0+0x34>
   15e9e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   15ea2:	2b19      	cmp	r3, #25
   15ea4:	d805      	bhi.n	15eb2 <_strtoll_l.constprop.0+0xee>
   15ea6:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   15eaa:	e7c2      	b.n	15e32 <_strtoll_l.constprop.0+0x6e>
   15eac:	f04f 32ff 	mov.w	r2, #4294967295
   15eb0:	e7d9      	b.n	15e66 <_strtoll_l.constprop.0+0xa2>
   15eb2:	1c53      	adds	r3, r2, #1
   15eb4:	d10a      	bne.n	15ecc <_strtoll_l.constprop.0+0x108>
   15eb6:	2322      	movs	r3, #34	; 0x22
   15eb8:	9a02      	ldr	r2, [sp, #8]
   15eba:	4658      	mov	r0, fp
   15ebc:	4651      	mov	r1, sl
   15ebe:	6013      	str	r3, [r2, #0]
   15ec0:	f1b8 0f00 	cmp.w	r8, #0
   15ec4:	d10a      	bne.n	15edc <_strtoll_l.constprop.0+0x118>
   15ec6:	b005      	add	sp, #20
   15ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ecc:	b117      	cbz	r7, 15ed4 <_strtoll_l.constprop.0+0x110>
   15ece:	4240      	negs	r0, r0
   15ed0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   15ed4:	f1b8 0f00 	cmp.w	r8, #0
   15ed8:	d0f5      	beq.n	15ec6 <_strtoll_l.constprop.0+0x102>
   15eda:	b10a      	cbz	r2, 15ee0 <_strtoll_l.constprop.0+0x11c>
   15edc:	f105 39ff 	add.w	r9, r5, #4294967295
   15ee0:	f8c8 9000 	str.w	r9, [r8]
   15ee4:	e7ef      	b.n	15ec6 <_strtoll_l.constprop.0+0x102>
   15ee6:	bf00      	nop
   15ee8:	0001e02d 	.word	0x0001e02d

00015eec <strtoll>:
   15eec:	4613      	mov	r3, r2
   15eee:	460a      	mov	r2, r1
   15ef0:	4601      	mov	r1, r0
   15ef2:	4802      	ldr	r0, [pc, #8]	; (15efc <strtoll+0x10>)
   15ef4:	6800      	ldr	r0, [r0, #0]
   15ef6:	f7ff bf65 	b.w	15dc4 <_strtoll_l.constprop.0>
   15efa:	bf00      	nop
   15efc:	2000c6c0 	.word	0x2000c6c0

00015f00 <_strtoul_l.constprop.0>:
   15f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15f04:	4686      	mov	lr, r0
   15f06:	460d      	mov	r5, r1
   15f08:	4e35      	ldr	r6, [pc, #212]	; (15fe0 <_strtoul_l.constprop.0+0xe0>)
   15f0a:	4628      	mov	r0, r5
   15f0c:	f815 4b01 	ldrb.w	r4, [r5], #1
   15f10:	5d37      	ldrb	r7, [r6, r4]
   15f12:	f017 0708 	ands.w	r7, r7, #8
   15f16:	d1f8      	bne.n	15f0a <_strtoul_l.constprop.0+0xa>
   15f18:	2c2d      	cmp	r4, #45	; 0x2d
   15f1a:	d126      	bne.n	15f6a <_strtoul_l.constprop.0+0x6a>
   15f1c:	782c      	ldrb	r4, [r5, #0]
   15f1e:	2701      	movs	r7, #1
   15f20:	1c85      	adds	r5, r0, #2
   15f22:	bb3b      	cbnz	r3, 15f74 <_strtoul_l.constprop.0+0x74>
   15f24:	2c30      	cmp	r4, #48	; 0x30
   15f26:	d032      	beq.n	15f8e <_strtoul_l.constprop.0+0x8e>
   15f28:	230a      	movs	r3, #10
   15f2a:	f04f 38ff 	mov.w	r8, #4294967295
   15f2e:	2600      	movs	r6, #0
   15f30:	fbb8 f8f3 	udiv	r8, r8, r3
   15f34:	fb03 f908 	mul.w	r9, r3, r8
   15f38:	4630      	mov	r0, r6
   15f3a:	ea6f 0909 	mvn.w	r9, r9
   15f3e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   15f42:	f1bc 0f09 	cmp.w	ip, #9
   15f46:	d829      	bhi.n	15f9c <_strtoul_l.constprop.0+0x9c>
   15f48:	4664      	mov	r4, ip
   15f4a:	42a3      	cmp	r3, r4
   15f4c:	dd37      	ble.n	15fbe <_strtoul_l.constprop.0+0xbe>
   15f4e:	f1b6 3fff 	cmp.w	r6, #4294967295
   15f52:	d007      	beq.n	15f64 <_strtoul_l.constprop.0+0x64>
   15f54:	4580      	cmp	r8, r0
   15f56:	d32f      	bcc.n	15fb8 <_strtoul_l.constprop.0+0xb8>
   15f58:	d101      	bne.n	15f5e <_strtoul_l.constprop.0+0x5e>
   15f5a:	45a1      	cmp	r9, r4
   15f5c:	db2c      	blt.n	15fb8 <_strtoul_l.constprop.0+0xb8>
   15f5e:	fb00 4003 	mla	r0, r0, r3, r4
   15f62:	2601      	movs	r6, #1
   15f64:	f815 4b01 	ldrb.w	r4, [r5], #1
   15f68:	e7e9      	b.n	15f3e <_strtoul_l.constprop.0+0x3e>
   15f6a:	2c2b      	cmp	r4, #43	; 0x2b
   15f6c:	bf04      	itt	eq
   15f6e:	782c      	ldrbeq	r4, [r5, #0]
   15f70:	1c85      	addeq	r5, r0, #2
   15f72:	e7d6      	b.n	15f22 <_strtoul_l.constprop.0+0x22>
   15f74:	2b10      	cmp	r3, #16
   15f76:	d1d8      	bne.n	15f2a <_strtoul_l.constprop.0+0x2a>
   15f78:	2c30      	cmp	r4, #48	; 0x30
   15f7a:	d1d6      	bne.n	15f2a <_strtoul_l.constprop.0+0x2a>
   15f7c:	7828      	ldrb	r0, [r5, #0]
   15f7e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   15f82:	2858      	cmp	r0, #88	; 0x58
   15f84:	d1d1      	bne.n	15f2a <_strtoul_l.constprop.0+0x2a>
   15f86:	786c      	ldrb	r4, [r5, #1]
   15f88:	2310      	movs	r3, #16
   15f8a:	3502      	adds	r5, #2
   15f8c:	e7cd      	b.n	15f2a <_strtoul_l.constprop.0+0x2a>
   15f8e:	782b      	ldrb	r3, [r5, #0]
   15f90:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   15f94:	2b58      	cmp	r3, #88	; 0x58
   15f96:	d0f6      	beq.n	15f86 <_strtoul_l.constprop.0+0x86>
   15f98:	2308      	movs	r3, #8
   15f9a:	e7c6      	b.n	15f2a <_strtoul_l.constprop.0+0x2a>
   15f9c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   15fa0:	f1bc 0f19 	cmp.w	ip, #25
   15fa4:	d801      	bhi.n	15faa <_strtoul_l.constprop.0+0xaa>
   15fa6:	3c37      	subs	r4, #55	; 0x37
   15fa8:	e7cf      	b.n	15f4a <_strtoul_l.constprop.0+0x4a>
   15faa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   15fae:	f1bc 0f19 	cmp.w	ip, #25
   15fb2:	d804      	bhi.n	15fbe <_strtoul_l.constprop.0+0xbe>
   15fb4:	3c57      	subs	r4, #87	; 0x57
   15fb6:	e7c8      	b.n	15f4a <_strtoul_l.constprop.0+0x4a>
   15fb8:	f04f 36ff 	mov.w	r6, #4294967295
   15fbc:	e7d2      	b.n	15f64 <_strtoul_l.constprop.0+0x64>
   15fbe:	1c73      	adds	r3, r6, #1
   15fc0:	d106      	bne.n	15fd0 <_strtoul_l.constprop.0+0xd0>
   15fc2:	2322      	movs	r3, #34	; 0x22
   15fc4:	4630      	mov	r0, r6
   15fc6:	f8ce 3000 	str.w	r3, [lr]
   15fca:	b932      	cbnz	r2, 15fda <_strtoul_l.constprop.0+0xda>
   15fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15fd0:	b107      	cbz	r7, 15fd4 <_strtoul_l.constprop.0+0xd4>
   15fd2:	4240      	negs	r0, r0
   15fd4:	2a00      	cmp	r2, #0
   15fd6:	d0f9      	beq.n	15fcc <_strtoul_l.constprop.0+0xcc>
   15fd8:	b106      	cbz	r6, 15fdc <_strtoul_l.constprop.0+0xdc>
   15fda:	1e69      	subs	r1, r5, #1
   15fdc:	6011      	str	r1, [r2, #0]
   15fde:	e7f5      	b.n	15fcc <_strtoul_l.constprop.0+0xcc>
   15fe0:	0001e02d 	.word	0x0001e02d

00015fe4 <strtoul>:
   15fe4:	4613      	mov	r3, r2
   15fe6:	460a      	mov	r2, r1
   15fe8:	4601      	mov	r1, r0
   15fea:	4802      	ldr	r0, [pc, #8]	; (15ff4 <strtoul+0x10>)
   15fec:	6800      	ldr	r0, [r0, #0]
   15fee:	f7ff bf87 	b.w	15f00 <_strtoul_l.constprop.0>
   15ff2:	bf00      	nop
   15ff4:	2000c6c0 	.word	0x2000c6c0

00015ff8 <vsniprintf>:
   15ff8:	b507      	push	{r0, r1, r2, lr}
   15ffa:	9300      	str	r3, [sp, #0]
   15ffc:	4613      	mov	r3, r2
   15ffe:	460a      	mov	r2, r1
   16000:	4601      	mov	r1, r0
   16002:	4803      	ldr	r0, [pc, #12]	; (16010 <vsniprintf+0x18>)
   16004:	6800      	ldr	r0, [r0, #0]
   16006:	f004 fd3a 	bl	1aa7e <_vsniprintf_r>
   1600a:	b003      	add	sp, #12
   1600c:	f85d fb04 	ldr.w	pc, [sp], #4
   16010:	2000c6c0 	.word	0x2000c6c0

00016014 <_vsiscanf_r>:
   16014:	b570      	push	{r4, r5, r6, lr}
   16016:	461e      	mov	r6, r3
   16018:	b09a      	sub	sp, #104	; 0x68
   1601a:	f44f 7301 	mov.w	r3, #516	; 0x204
   1601e:	4604      	mov	r4, r0
   16020:	4608      	mov	r0, r1
   16022:	4615      	mov	r5, r2
   16024:	f8ad 300c 	strh.w	r3, [sp, #12]
   16028:	9100      	str	r1, [sp, #0]
   1602a:	9104      	str	r1, [sp, #16]
   1602c:	f7f2 fee2 	bl	8df4 <strlen>
   16030:	4b09      	ldr	r3, [pc, #36]	; (16058 <_vsiscanf_r+0x44>)
   16032:	462a      	mov	r2, r5
   16034:	4669      	mov	r1, sp
   16036:	9001      	str	r0, [sp, #4]
   16038:	9309      	str	r3, [sp, #36]	; 0x24
   1603a:	2300      	movs	r3, #0
   1603c:	9005      	str	r0, [sp, #20]
   1603e:	4620      	mov	r0, r4
   16040:	930d      	str	r3, [sp, #52]	; 0x34
   16042:	9312      	str	r3, [sp, #72]	; 0x48
   16044:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16048:	f8ad 300e 	strh.w	r3, [sp, #14]
   1604c:	4633      	mov	r3, r6
   1604e:	f000 fd2f 	bl	16ab0 <__ssvfiscanf_r>
   16052:	b01a      	add	sp, #104	; 0x68
   16054:	bd70      	pop	{r4, r5, r6, pc}
   16056:	bf00      	nop
   16058:	0001a957 	.word	0x0001a957

0001605c <vsiscanf>:
   1605c:	4613      	mov	r3, r2
   1605e:	460a      	mov	r2, r1
   16060:	4601      	mov	r1, r0
   16062:	4802      	ldr	r0, [pc, #8]	; (1606c <vsiscanf+0x10>)
   16064:	6800      	ldr	r0, [r0, #0]
   16066:	f7ff bfd5 	b.w	16014 <_vsiscanf_r>
   1606a:	bf00      	nop
   1606c:	2000c6c0 	.word	0x2000c6c0

00016070 <_write_r>:
   16070:	b538      	push	{r3, r4, r5, lr}
   16072:	4604      	mov	r4, r0
   16074:	4d06      	ldr	r5, [pc, #24]	; (16090 <_write_r+0x20>)
   16076:	4608      	mov	r0, r1
   16078:	4611      	mov	r1, r2
   1607a:	2200      	movs	r2, #0
   1607c:	602a      	str	r2, [r5, #0]
   1607e:	461a      	mov	r2, r3
   16080:	f001 ff8f 	bl	17fa2 <_write>
   16084:	1c43      	adds	r3, r0, #1
   16086:	d102      	bne.n	1608e <_write_r+0x1e>
   16088:	682b      	ldr	r3, [r5, #0]
   1608a:	b103      	cbz	r3, 1608e <_write_r+0x1e>
   1608c:	6023      	str	r3, [r4, #0]
   1608e:	bd38      	pop	{r3, r4, r5, pc}
   16090:	2000d734 	.word	0x2000d734

00016094 <_close_r>:
   16094:	b538      	push	{r3, r4, r5, lr}
   16096:	2300      	movs	r3, #0
   16098:	4d05      	ldr	r5, [pc, #20]	; (160b0 <_close_r+0x1c>)
   1609a:	4604      	mov	r4, r0
   1609c:	4608      	mov	r0, r1
   1609e:	602b      	str	r3, [r5, #0]
   160a0:	f001 ff83 	bl	17faa <_close>
   160a4:	1c43      	adds	r3, r0, #1
   160a6:	d102      	bne.n	160ae <_close_r+0x1a>
   160a8:	682b      	ldr	r3, [r5, #0]
   160aa:	b103      	cbz	r3, 160ae <_close_r+0x1a>
   160ac:	6023      	str	r3, [r4, #0]
   160ae:	bd38      	pop	{r3, r4, r5, pc}
   160b0:	2000d734 	.word	0x2000d734

000160b4 <std>:
   160b4:	2300      	movs	r3, #0
   160b6:	b510      	push	{r4, lr}
   160b8:	4604      	mov	r4, r0
   160ba:	6083      	str	r3, [r0, #8]
   160bc:	8181      	strh	r1, [r0, #12]
   160be:	4619      	mov	r1, r3
   160c0:	6643      	str	r3, [r0, #100]	; 0x64
   160c2:	81c2      	strh	r2, [r0, #14]
   160c4:	2208      	movs	r2, #8
   160c6:	6183      	str	r3, [r0, #24]
   160c8:	e9c0 3300 	strd	r3, r3, [r0]
   160cc:	e9c0 3304 	strd	r3, r3, [r0, #16]
   160d0:	305c      	adds	r0, #92	; 0x5c
   160d2:	f004 fb14 	bl	1a6fe <memset>
   160d6:	4b05      	ldr	r3, [pc, #20]	; (160ec <std+0x38>)
   160d8:	6224      	str	r4, [r4, #32]
   160da:	6263      	str	r3, [r4, #36]	; 0x24
   160dc:	4b04      	ldr	r3, [pc, #16]	; (160f0 <std+0x3c>)
   160de:	62a3      	str	r3, [r4, #40]	; 0x28
   160e0:	4b04      	ldr	r3, [pc, #16]	; (160f4 <std+0x40>)
   160e2:	62e3      	str	r3, [r4, #44]	; 0x2c
   160e4:	4b04      	ldr	r3, [pc, #16]	; (160f8 <std+0x44>)
   160e6:	6323      	str	r3, [r4, #48]	; 0x30
   160e8:	bd10      	pop	{r4, pc}
   160ea:	bf00      	nop
   160ec:	0001a935 	.word	0x0001a935
   160f0:	0001a95b 	.word	0x0001a95b
   160f4:	0001a993 	.word	0x0001a993
   160f8:	0001a9b7 	.word	0x0001a9b7

000160fc <_cleanup_r>:
   160fc:	4901      	ldr	r1, [pc, #4]	; (16104 <_cleanup_r+0x8>)
   160fe:	f004 bd8c 	b.w	1ac1a <_fwalk_reent>
   16102:	bf00      	nop
   16104:	00017485 	.word	0x00017485

00016108 <__sfp_lock_acquire>:
   16108:	4801      	ldr	r0, [pc, #4]	; (16110 <__sfp_lock_acquire+0x8>)
   1610a:	f001 bf6b 	b.w	17fe4 <__retarget_lock_acquire_recursive>
   1610e:	bf00      	nop
   16110:	2000c960 	.word	0x2000c960

00016114 <__sfp_lock_release>:
   16114:	4801      	ldr	r0, [pc, #4]	; (1611c <__sfp_lock_release+0x8>)
   16116:	f001 bf6b 	b.w	17ff0 <__retarget_lock_release_recursive>
   1611a:	bf00      	nop
   1611c:	2000c960 	.word	0x2000c960

00016120 <__sinit_lock_acquire>:
   16120:	4801      	ldr	r0, [pc, #4]	; (16128 <__sinit_lock_acquire+0x8>)
   16122:	f001 bf5f 	b.w	17fe4 <__retarget_lock_acquire_recursive>
   16126:	bf00      	nop
   16128:	2000c974 	.word	0x2000c974

0001612c <__sinit_lock_release>:
   1612c:	4801      	ldr	r0, [pc, #4]	; (16134 <__sinit_lock_release+0x8>)
   1612e:	f001 bf5f 	b.w	17ff0 <__retarget_lock_release_recursive>
   16132:	bf00      	nop
   16134:	2000c974 	.word	0x2000c974

00016138 <__sinit>:
   16138:	b510      	push	{r4, lr}
   1613a:	4604      	mov	r4, r0
   1613c:	f7ff fff0 	bl	16120 <__sinit_lock_acquire>
   16140:	69a3      	ldr	r3, [r4, #24]
   16142:	b11b      	cbz	r3, 1614c <__sinit+0x14>
   16144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16148:	f7ff bff0 	b.w	1612c <__sinit_lock_release>
   1614c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   16150:	6523      	str	r3, [r4, #80]	; 0x50
   16152:	4620      	mov	r0, r4
   16154:	4b12      	ldr	r3, [pc, #72]	; (161a0 <__sinit+0x68>)
   16156:	4a13      	ldr	r2, [pc, #76]	; (161a4 <__sinit+0x6c>)
   16158:	681b      	ldr	r3, [r3, #0]
   1615a:	62a2      	str	r2, [r4, #40]	; 0x28
   1615c:	42a3      	cmp	r3, r4
   1615e:	bf04      	itt	eq
   16160:	2301      	moveq	r3, #1
   16162:	61a3      	streq	r3, [r4, #24]
   16164:	f000 f820 	bl	161a8 <__sfp>
   16168:	6060      	str	r0, [r4, #4]
   1616a:	4620      	mov	r0, r4
   1616c:	f000 f81c 	bl	161a8 <__sfp>
   16170:	60a0      	str	r0, [r4, #8]
   16172:	4620      	mov	r0, r4
   16174:	f000 f818 	bl	161a8 <__sfp>
   16178:	2200      	movs	r2, #0
   1617a:	2104      	movs	r1, #4
   1617c:	60e0      	str	r0, [r4, #12]
   1617e:	6860      	ldr	r0, [r4, #4]
   16180:	f7ff ff98 	bl	160b4 <std>
   16184:	2201      	movs	r2, #1
   16186:	2109      	movs	r1, #9
   16188:	68a0      	ldr	r0, [r4, #8]
   1618a:	f7ff ff93 	bl	160b4 <std>
   1618e:	2202      	movs	r2, #2
   16190:	2112      	movs	r1, #18
   16192:	68e0      	ldr	r0, [r4, #12]
   16194:	f7ff ff8e 	bl	160b4 <std>
   16198:	2301      	movs	r3, #1
   1619a:	61a3      	str	r3, [r4, #24]
   1619c:	e7d2      	b.n	16144 <__sinit+0xc>
   1619e:	bf00      	nop
   161a0:	0001be04 	.word	0x0001be04
   161a4:	000160fd 	.word	0x000160fd

000161a8 <__sfp>:
   161a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   161aa:	4607      	mov	r7, r0
   161ac:	f7ff ffac 	bl	16108 <__sfp_lock_acquire>
   161b0:	4b1e      	ldr	r3, [pc, #120]	; (1622c <__sfp+0x84>)
   161b2:	681e      	ldr	r6, [r3, #0]
   161b4:	69b3      	ldr	r3, [r6, #24]
   161b6:	b913      	cbnz	r3, 161be <__sfp+0x16>
   161b8:	4630      	mov	r0, r6
   161ba:	f7ff ffbd 	bl	16138 <__sinit>
   161be:	3648      	adds	r6, #72	; 0x48
   161c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   161c4:	3b01      	subs	r3, #1
   161c6:	d503      	bpl.n	161d0 <__sfp+0x28>
   161c8:	6833      	ldr	r3, [r6, #0]
   161ca:	b30b      	cbz	r3, 16210 <__sfp+0x68>
   161cc:	6836      	ldr	r6, [r6, #0]
   161ce:	e7f7      	b.n	161c0 <__sfp+0x18>
   161d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   161d4:	b9d5      	cbnz	r5, 1620c <__sfp+0x64>
   161d6:	4b16      	ldr	r3, [pc, #88]	; (16230 <__sfp+0x88>)
   161d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   161dc:	6665      	str	r5, [r4, #100]	; 0x64
   161de:	60e3      	str	r3, [r4, #12]
   161e0:	f001 fef6 	bl	17fd0 <__retarget_lock_init_recursive>
   161e4:	f7ff ff96 	bl	16114 <__sfp_lock_release>
   161e8:	2208      	movs	r2, #8
   161ea:	4629      	mov	r1, r5
   161ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   161f0:	6025      	str	r5, [r4, #0]
   161f2:	61a5      	str	r5, [r4, #24]
   161f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
   161f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
   161fc:	f004 fa7f 	bl	1a6fe <memset>
   16200:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   16204:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   16208:	4620      	mov	r0, r4
   1620a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1620c:	3468      	adds	r4, #104	; 0x68
   1620e:	e7d9      	b.n	161c4 <__sfp+0x1c>
   16210:	2104      	movs	r1, #4
   16212:	4638      	mov	r0, r7
   16214:	f004 fceb 	bl	1abee <__sfmoreglue>
   16218:	4604      	mov	r4, r0
   1621a:	6030      	str	r0, [r6, #0]
   1621c:	2800      	cmp	r0, #0
   1621e:	d1d5      	bne.n	161cc <__sfp+0x24>
   16220:	f7ff ff78 	bl	16114 <__sfp_lock_release>
   16224:	230c      	movs	r3, #12
   16226:	603b      	str	r3, [r7, #0]
   16228:	e7ee      	b.n	16208 <__sfp+0x60>
   1622a:	bf00      	nop
   1622c:	0001be04 	.word	0x0001be04
   16230:	ffff0001 	.word	0xffff0001

00016234 <_localeconv_r>:
   16234:	4800      	ldr	r0, [pc, #0]	; (16238 <_localeconv_r+0x4>)
   16236:	4770      	bx	lr
   16238:	2000c814 	.word	0x2000c814

0001623c <_lseek_r>:
   1623c:	b538      	push	{r3, r4, r5, lr}
   1623e:	4604      	mov	r4, r0
   16240:	4d06      	ldr	r5, [pc, #24]	; (1625c <_lseek_r+0x20>)
   16242:	4608      	mov	r0, r1
   16244:	4611      	mov	r1, r2
   16246:	2200      	movs	r2, #0
   16248:	602a      	str	r2, [r5, #0]
   1624a:	461a      	mov	r2, r3
   1624c:	f001 feb0 	bl	17fb0 <_lseek>
   16250:	1c43      	adds	r3, r0, #1
   16252:	d102      	bne.n	1625a <_lseek_r+0x1e>
   16254:	682b      	ldr	r3, [r5, #0]
   16256:	b103      	cbz	r3, 1625a <_lseek_r+0x1e>
   16258:	6023      	str	r3, [r4, #0]
   1625a:	bd38      	pop	{r3, r4, r5, pc}
   1625c:	2000d734 	.word	0x2000d734

00016260 <__malloc_lock>:
   16260:	4801      	ldr	r0, [pc, #4]	; (16268 <__malloc_lock+0x8>)
   16262:	f001 bebf 	b.w	17fe4 <__retarget_lock_acquire_recursive>
   16266:	bf00      	nop
   16268:	2000c94c 	.word	0x2000c94c

0001626c <__malloc_unlock>:
   1626c:	4801      	ldr	r0, [pc, #4]	; (16274 <__malloc_unlock+0x8>)
   1626e:	f001 bebf 	b.w	17ff0 <__retarget_lock_release_recursive>
   16272:	bf00      	nop
   16274:	2000c94c 	.word	0x2000c94c

00016278 <_Balloc>:
   16278:	b570      	push	{r4, r5, r6, lr}
   1627a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1627c:	4604      	mov	r4, r0
   1627e:	460d      	mov	r5, r1
   16280:	b976      	cbnz	r6, 162a0 <_Balloc+0x28>
   16282:	2010      	movs	r0, #16
   16284:	f7ff f8e0 	bl	15448 <malloc>
   16288:	4602      	mov	r2, r0
   1628a:	6260      	str	r0, [r4, #36]	; 0x24
   1628c:	b920      	cbnz	r0, 16298 <_Balloc+0x20>
   1628e:	4b18      	ldr	r3, [pc, #96]	; (162f0 <_Balloc+0x78>)
   16290:	2166      	movs	r1, #102	; 0x66
   16292:	4818      	ldr	r0, [pc, #96]	; (162f4 <_Balloc+0x7c>)
   16294:	f001 f8d8 	bl	17448 <__assert_func>
   16298:	e9c0 6601 	strd	r6, r6, [r0, #4]
   1629c:	6006      	str	r6, [r0, #0]
   1629e:	60c6      	str	r6, [r0, #12]
   162a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
   162a2:	68f3      	ldr	r3, [r6, #12]
   162a4:	b183      	cbz	r3, 162c8 <_Balloc+0x50>
   162a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   162a8:	68db      	ldr	r3, [r3, #12]
   162aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   162ae:	b9b8      	cbnz	r0, 162e0 <_Balloc+0x68>
   162b0:	2101      	movs	r1, #1
   162b2:	4620      	mov	r0, r4
   162b4:	fa01 f605 	lsl.w	r6, r1, r5
   162b8:	1d72      	adds	r2, r6, #5
   162ba:	0092      	lsls	r2, r2, #2
   162bc:	f004 fd36 	bl	1ad2c <_calloc_r>
   162c0:	b160      	cbz	r0, 162dc <_Balloc+0x64>
   162c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
   162c6:	e00e      	b.n	162e6 <_Balloc+0x6e>
   162c8:	2221      	movs	r2, #33	; 0x21
   162ca:	2104      	movs	r1, #4
   162cc:	4620      	mov	r0, r4
   162ce:	f004 fd2d 	bl	1ad2c <_calloc_r>
   162d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   162d4:	60f0      	str	r0, [r6, #12]
   162d6:	68db      	ldr	r3, [r3, #12]
   162d8:	2b00      	cmp	r3, #0
   162da:	d1e4      	bne.n	162a6 <_Balloc+0x2e>
   162dc:	2000      	movs	r0, #0
   162de:	bd70      	pop	{r4, r5, r6, pc}
   162e0:	6802      	ldr	r2, [r0, #0]
   162e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   162e6:	2300      	movs	r3, #0
   162e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   162ec:	e7f7      	b.n	162de <_Balloc+0x66>
   162ee:	bf00      	nop
   162f0:	0001e168 	.word	0x0001e168
   162f4:	0001e204 	.word	0x0001e204

000162f8 <_Bfree>:
   162f8:	b570      	push	{r4, r5, r6, lr}
   162fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
   162fc:	4605      	mov	r5, r0
   162fe:	460c      	mov	r4, r1
   16300:	b976      	cbnz	r6, 16320 <_Bfree+0x28>
   16302:	2010      	movs	r0, #16
   16304:	f7ff f8a0 	bl	15448 <malloc>
   16308:	4602      	mov	r2, r0
   1630a:	6268      	str	r0, [r5, #36]	; 0x24
   1630c:	b920      	cbnz	r0, 16318 <_Bfree+0x20>
   1630e:	4b09      	ldr	r3, [pc, #36]	; (16334 <_Bfree+0x3c>)
   16310:	218a      	movs	r1, #138	; 0x8a
   16312:	4809      	ldr	r0, [pc, #36]	; (16338 <_Bfree+0x40>)
   16314:	f001 f898 	bl	17448 <__assert_func>
   16318:	e9c0 6601 	strd	r6, r6, [r0, #4]
   1631c:	6006      	str	r6, [r0, #0]
   1631e:	60c6      	str	r6, [r0, #12]
   16320:	b13c      	cbz	r4, 16332 <_Bfree+0x3a>
   16322:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   16324:	6862      	ldr	r2, [r4, #4]
   16326:	68db      	ldr	r3, [r3, #12]
   16328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1632c:	6021      	str	r1, [r4, #0]
   1632e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   16332:	bd70      	pop	{r4, r5, r6, pc}
   16334:	0001e168 	.word	0x0001e168
   16338:	0001e204 	.word	0x0001e204

0001633c <__multadd>:
   1633c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16340:	f101 0c14 	add.w	ip, r1, #20
   16344:	4607      	mov	r7, r0
   16346:	460c      	mov	r4, r1
   16348:	461e      	mov	r6, r3
   1634a:	690d      	ldr	r5, [r1, #16]
   1634c:	2000      	movs	r0, #0
   1634e:	f8dc 3000 	ldr.w	r3, [ip]
   16352:	3001      	adds	r0, #1
   16354:	b299      	uxth	r1, r3
   16356:	4285      	cmp	r5, r0
   16358:	fb02 6101 	mla	r1, r2, r1, r6
   1635c:	ea4f 4613 	mov.w	r6, r3, lsr #16
   16360:	ea4f 4311 	mov.w	r3, r1, lsr #16
   16364:	b289      	uxth	r1, r1
   16366:	fb02 3306 	mla	r3, r2, r6, r3
   1636a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   1636e:	ea4f 4613 	mov.w	r6, r3, lsr #16
   16372:	f84c 1b04 	str.w	r1, [ip], #4
   16376:	dcea      	bgt.n	1634e <__multadd+0x12>
   16378:	b30e      	cbz	r6, 163be <__multadd+0x82>
   1637a:	68a3      	ldr	r3, [r4, #8]
   1637c:	42ab      	cmp	r3, r5
   1637e:	dc19      	bgt.n	163b4 <__multadd+0x78>
   16380:	6861      	ldr	r1, [r4, #4]
   16382:	4638      	mov	r0, r7
   16384:	3101      	adds	r1, #1
   16386:	f7ff ff77 	bl	16278 <_Balloc>
   1638a:	4680      	mov	r8, r0
   1638c:	b928      	cbnz	r0, 1639a <__multadd+0x5e>
   1638e:	4602      	mov	r2, r0
   16390:	4b0c      	ldr	r3, [pc, #48]	; (163c4 <__multadd+0x88>)
   16392:	21b5      	movs	r1, #181	; 0xb5
   16394:	480c      	ldr	r0, [pc, #48]	; (163c8 <__multadd+0x8c>)
   16396:	f001 f857 	bl	17448 <__assert_func>
   1639a:	6922      	ldr	r2, [r4, #16]
   1639c:	f104 010c 	add.w	r1, r4, #12
   163a0:	300c      	adds	r0, #12
   163a2:	3202      	adds	r2, #2
   163a4:	0092      	lsls	r2, r2, #2
   163a6:	f004 f99d 	bl	1a6e4 <memcpy>
   163aa:	4621      	mov	r1, r4
   163ac:	4644      	mov	r4, r8
   163ae:	4638      	mov	r0, r7
   163b0:	f7ff ffa2 	bl	162f8 <_Bfree>
   163b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   163b8:	3501      	adds	r5, #1
   163ba:	615e      	str	r6, [r3, #20]
   163bc:	6125      	str	r5, [r4, #16]
   163be:	4620      	mov	r0, r4
   163c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   163c4:	0001e1f3 	.word	0x0001e1f3
   163c8:	0001e204 	.word	0x0001e204

000163cc <__i2b>:
   163cc:	b510      	push	{r4, lr}
   163ce:	460c      	mov	r4, r1
   163d0:	2101      	movs	r1, #1
   163d2:	f7ff ff51 	bl	16278 <_Balloc>
   163d6:	4602      	mov	r2, r0
   163d8:	b928      	cbnz	r0, 163e6 <__i2b+0x1a>
   163da:	4b05      	ldr	r3, [pc, #20]	; (163f0 <__i2b+0x24>)
   163dc:	f44f 71a0 	mov.w	r1, #320	; 0x140
   163e0:	4804      	ldr	r0, [pc, #16]	; (163f4 <__i2b+0x28>)
   163e2:	f001 f831 	bl	17448 <__assert_func>
   163e6:	2301      	movs	r3, #1
   163e8:	6144      	str	r4, [r0, #20]
   163ea:	6103      	str	r3, [r0, #16]
   163ec:	bd10      	pop	{r4, pc}
   163ee:	bf00      	nop
   163f0:	0001e1f3 	.word	0x0001e1f3
   163f4:	0001e204 	.word	0x0001e204

000163f8 <__multiply>:
   163f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163fc:	4614      	mov	r4, r2
   163fe:	690a      	ldr	r2, [r1, #16]
   16400:	460f      	mov	r7, r1
   16402:	b085      	sub	sp, #20
   16404:	6923      	ldr	r3, [r4, #16]
   16406:	429a      	cmp	r2, r3
   16408:	bfa2      	ittt	ge
   1640a:	4623      	movge	r3, r4
   1640c:	460c      	movge	r4, r1
   1640e:	461f      	movge	r7, r3
   16410:	f8d4 a010 	ldr.w	sl, [r4, #16]
   16414:	68a3      	ldr	r3, [r4, #8]
   16416:	f8d7 9010 	ldr.w	r9, [r7, #16]
   1641a:	6861      	ldr	r1, [r4, #4]
   1641c:	eb0a 0609 	add.w	r6, sl, r9
   16420:	42b3      	cmp	r3, r6
   16422:	bfb8      	it	lt
   16424:	3101      	addlt	r1, #1
   16426:	f7ff ff27 	bl	16278 <_Balloc>
   1642a:	b930      	cbnz	r0, 1643a <__multiply+0x42>
   1642c:	4602      	mov	r2, r0
   1642e:	4b45      	ldr	r3, [pc, #276]	; (16544 <__multiply+0x14c>)
   16430:	f240 115d 	movw	r1, #349	; 0x15d
   16434:	4844      	ldr	r0, [pc, #272]	; (16548 <__multiply+0x150>)
   16436:	f001 f807 	bl	17448 <__assert_func>
   1643a:	f100 0514 	add.w	r5, r0, #20
   1643e:	2200      	movs	r2, #0
   16440:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   16444:	462b      	mov	r3, r5
   16446:	4543      	cmp	r3, r8
   16448:	d321      	bcc.n	1648e <__multiply+0x96>
   1644a:	f107 0114 	add.w	r1, r7, #20
   1644e:	f104 0214 	add.w	r2, r4, #20
   16452:	f104 0715 	add.w	r7, r4, #21
   16456:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   1645a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   1645e:	9302      	str	r3, [sp, #8]
   16460:	1b13      	subs	r3, r2, r4
   16462:	3b15      	subs	r3, #21
   16464:	f023 0303 	bic.w	r3, r3, #3
   16468:	3304      	adds	r3, #4
   1646a:	42ba      	cmp	r2, r7
   1646c:	bf38      	it	cc
   1646e:	2304      	movcc	r3, #4
   16470:	9301      	str	r3, [sp, #4]
   16472:	9b02      	ldr	r3, [sp, #8]
   16474:	9103      	str	r1, [sp, #12]
   16476:	428b      	cmp	r3, r1
   16478:	d80c      	bhi.n	16494 <__multiply+0x9c>
   1647a:	2e00      	cmp	r6, #0
   1647c:	dd03      	ble.n	16486 <__multiply+0x8e>
   1647e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   16482:	2b00      	cmp	r3, #0
   16484:	d05b      	beq.n	1653e <__multiply+0x146>
   16486:	6106      	str	r6, [r0, #16]
   16488:	b005      	add	sp, #20
   1648a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1648e:	f843 2b04 	str.w	r2, [r3], #4
   16492:	e7d8      	b.n	16446 <__multiply+0x4e>
   16494:	f8b1 a000 	ldrh.w	sl, [r1]
   16498:	f1ba 0f00 	cmp.w	sl, #0
   1649c:	d024      	beq.n	164e8 <__multiply+0xf0>
   1649e:	f104 0e14 	add.w	lr, r4, #20
   164a2:	46a9      	mov	r9, r5
   164a4:	f04f 0c00 	mov.w	ip, #0
   164a8:	f85e 7b04 	ldr.w	r7, [lr], #4
   164ac:	f8d9 3000 	ldr.w	r3, [r9]
   164b0:	fa1f fb87 	uxth.w	fp, r7
   164b4:	4572      	cmp	r2, lr
   164b6:	b29b      	uxth	r3, r3
   164b8:	fb0a 330b 	mla	r3, sl, fp, r3
   164bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
   164c0:	f8d9 7000 	ldr.w	r7, [r9]
   164c4:	4463      	add	r3, ip
   164c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   164ca:	fb0a c70b 	mla	r7, sl, fp, ip
   164ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   164d2:	b29b      	uxth	r3, r3
   164d4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   164d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   164dc:	f849 3b04 	str.w	r3, [r9], #4
   164e0:	d8e2      	bhi.n	164a8 <__multiply+0xb0>
   164e2:	9b01      	ldr	r3, [sp, #4]
   164e4:	f845 c003 	str.w	ip, [r5, r3]
   164e8:	9b03      	ldr	r3, [sp, #12]
   164ea:	3104      	adds	r1, #4
   164ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   164f0:	f1b9 0f00 	cmp.w	r9, #0
   164f4:	d021      	beq.n	1653a <__multiply+0x142>
   164f6:	682b      	ldr	r3, [r5, #0]
   164f8:	f104 0c14 	add.w	ip, r4, #20
   164fc:	46ae      	mov	lr, r5
   164fe:	f04f 0a00 	mov.w	sl, #0
   16502:	f8bc b000 	ldrh.w	fp, [ip]
   16506:	b29b      	uxth	r3, r3
   16508:	f8be 7002 	ldrh.w	r7, [lr, #2]
   1650c:	fb09 770b 	mla	r7, r9, fp, r7
   16510:	4457      	add	r7, sl
   16512:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   16516:	f84e 3b04 	str.w	r3, [lr], #4
   1651a:	f85c 3b04 	ldr.w	r3, [ip], #4
   1651e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   16522:	f8be 3000 	ldrh.w	r3, [lr]
   16526:	4562      	cmp	r2, ip
   16528:	fb09 330a 	mla	r3, r9, sl, r3
   1652c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   16530:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   16534:	d8e5      	bhi.n	16502 <__multiply+0x10a>
   16536:	9f01      	ldr	r7, [sp, #4]
   16538:	51eb      	str	r3, [r5, r7]
   1653a:	3504      	adds	r5, #4
   1653c:	e799      	b.n	16472 <__multiply+0x7a>
   1653e:	3e01      	subs	r6, #1
   16540:	e79b      	b.n	1647a <__multiply+0x82>
   16542:	bf00      	nop
   16544:	0001e1f3 	.word	0x0001e1f3
   16548:	0001e204 	.word	0x0001e204

0001654c <__pow5mult>:
   1654c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16550:	4615      	mov	r5, r2
   16552:	f012 0203 	ands.w	r2, r2, #3
   16556:	4607      	mov	r7, r0
   16558:	460e      	mov	r6, r1
   1655a:	d007      	beq.n	1656c <__pow5mult+0x20>
   1655c:	3a01      	subs	r2, #1
   1655e:	4c25      	ldr	r4, [pc, #148]	; (165f4 <__pow5mult+0xa8>)
   16560:	2300      	movs	r3, #0
   16562:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   16566:	f7ff fee9 	bl	1633c <__multadd>
   1656a:	4606      	mov	r6, r0
   1656c:	10ad      	asrs	r5, r5, #2
   1656e:	d03d      	beq.n	165ec <__pow5mult+0xa0>
   16570:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   16572:	b97c      	cbnz	r4, 16594 <__pow5mult+0x48>
   16574:	2010      	movs	r0, #16
   16576:	f7fe ff67 	bl	15448 <malloc>
   1657a:	4602      	mov	r2, r0
   1657c:	6278      	str	r0, [r7, #36]	; 0x24
   1657e:	b928      	cbnz	r0, 1658c <__pow5mult+0x40>
   16580:	4b1d      	ldr	r3, [pc, #116]	; (165f8 <__pow5mult+0xac>)
   16582:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   16586:	481d      	ldr	r0, [pc, #116]	; (165fc <__pow5mult+0xb0>)
   16588:	f000 ff5e 	bl	17448 <__assert_func>
   1658c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   16590:	6004      	str	r4, [r0, #0]
   16592:	60c4      	str	r4, [r0, #12]
   16594:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   16598:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1659c:	b94c      	cbnz	r4, 165b2 <__pow5mult+0x66>
   1659e:	f240 2171 	movw	r1, #625	; 0x271
   165a2:	4638      	mov	r0, r7
   165a4:	f7ff ff12 	bl	163cc <__i2b>
   165a8:	2300      	movs	r3, #0
   165aa:	4604      	mov	r4, r0
   165ac:	f8c8 0008 	str.w	r0, [r8, #8]
   165b0:	6003      	str	r3, [r0, #0]
   165b2:	f04f 0900 	mov.w	r9, #0
   165b6:	07eb      	lsls	r3, r5, #31
   165b8:	d50a      	bpl.n	165d0 <__pow5mult+0x84>
   165ba:	4631      	mov	r1, r6
   165bc:	4622      	mov	r2, r4
   165be:	4638      	mov	r0, r7
   165c0:	f7ff ff1a 	bl	163f8 <__multiply>
   165c4:	4680      	mov	r8, r0
   165c6:	4631      	mov	r1, r6
   165c8:	4638      	mov	r0, r7
   165ca:	4646      	mov	r6, r8
   165cc:	f7ff fe94 	bl	162f8 <_Bfree>
   165d0:	106d      	asrs	r5, r5, #1
   165d2:	d00b      	beq.n	165ec <__pow5mult+0xa0>
   165d4:	6820      	ldr	r0, [r4, #0]
   165d6:	b938      	cbnz	r0, 165e8 <__pow5mult+0x9c>
   165d8:	4622      	mov	r2, r4
   165da:	4621      	mov	r1, r4
   165dc:	4638      	mov	r0, r7
   165de:	f7ff ff0b 	bl	163f8 <__multiply>
   165e2:	6020      	str	r0, [r4, #0]
   165e4:	f8c0 9000 	str.w	r9, [r0]
   165e8:	4604      	mov	r4, r0
   165ea:	e7e4      	b.n	165b6 <__pow5mult+0x6a>
   165ec:	4630      	mov	r0, r6
   165ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   165f2:	bf00      	nop
   165f4:	0001be08 	.word	0x0001be08
   165f8:	0001e168 	.word	0x0001e168
   165fc:	0001e204 	.word	0x0001e204

00016600 <__lshift>:
   16600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16604:	460c      	mov	r4, r1
   16606:	4607      	mov	r7, r0
   16608:	4691      	mov	r9, r2
   1660a:	ea4f 1a62 	mov.w	sl, r2, asr #5
   1660e:	6923      	ldr	r3, [r4, #16]
   16610:	6849      	ldr	r1, [r1, #4]
   16612:	eb03 1862 	add.w	r8, r3, r2, asr #5
   16616:	68a3      	ldr	r3, [r4, #8]
   16618:	f108 0601 	add.w	r6, r8, #1
   1661c:	42b3      	cmp	r3, r6
   1661e:	db0b      	blt.n	16638 <__lshift+0x38>
   16620:	4638      	mov	r0, r7
   16622:	f7ff fe29 	bl	16278 <_Balloc>
   16626:	4605      	mov	r5, r0
   16628:	b948      	cbnz	r0, 1663e <__lshift+0x3e>
   1662a:	4602      	mov	r2, r0
   1662c:	4b28      	ldr	r3, [pc, #160]	; (166d0 <__lshift+0xd0>)
   1662e:	f240 11d9 	movw	r1, #473	; 0x1d9
   16632:	4828      	ldr	r0, [pc, #160]	; (166d4 <__lshift+0xd4>)
   16634:	f000 ff08 	bl	17448 <__assert_func>
   16638:	3101      	adds	r1, #1
   1663a:	005b      	lsls	r3, r3, #1
   1663c:	e7ee      	b.n	1661c <__lshift+0x1c>
   1663e:	2300      	movs	r3, #0
   16640:	f100 0114 	add.w	r1, r0, #20
   16644:	f100 0210 	add.w	r2, r0, #16
   16648:	4618      	mov	r0, r3
   1664a:	4553      	cmp	r3, sl
   1664c:	db33      	blt.n	166b6 <__lshift+0xb6>
   1664e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   16652:	f104 0314 	add.w	r3, r4, #20
   16656:	6920      	ldr	r0, [r4, #16]
   16658:	f019 091f 	ands.w	r9, r9, #31
   1665c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   16660:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   16664:	d02b      	beq.n	166be <__lshift+0xbe>
   16666:	f1c9 0e20 	rsb	lr, r9, #32
   1666a:	468a      	mov	sl, r1
   1666c:	2200      	movs	r2, #0
   1666e:	6818      	ldr	r0, [r3, #0]
   16670:	fa00 f009 	lsl.w	r0, r0, r9
   16674:	4310      	orrs	r0, r2
   16676:	f84a 0b04 	str.w	r0, [sl], #4
   1667a:	f853 2b04 	ldr.w	r2, [r3], #4
   1667e:	459c      	cmp	ip, r3
   16680:	fa22 f20e 	lsr.w	r2, r2, lr
   16684:	d8f3      	bhi.n	1666e <__lshift+0x6e>
   16686:	ebac 0304 	sub.w	r3, ip, r4
   1668a:	f104 0015 	add.w	r0, r4, #21
   1668e:	3b15      	subs	r3, #21
   16690:	f023 0303 	bic.w	r3, r3, #3
   16694:	3304      	adds	r3, #4
   16696:	4584      	cmp	ip, r0
   16698:	bf38      	it	cc
   1669a:	2304      	movcc	r3, #4
   1669c:	50ca      	str	r2, [r1, r3]
   1669e:	b10a      	cbz	r2, 166a4 <__lshift+0xa4>
   166a0:	f108 0602 	add.w	r6, r8, #2
   166a4:	3e01      	subs	r6, #1
   166a6:	4638      	mov	r0, r7
   166a8:	4621      	mov	r1, r4
   166aa:	612e      	str	r6, [r5, #16]
   166ac:	f7ff fe24 	bl	162f8 <_Bfree>
   166b0:	4628      	mov	r0, r5
   166b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   166b6:	3301      	adds	r3, #1
   166b8:	f842 0f04 	str.w	r0, [r2, #4]!
   166bc:	e7c5      	b.n	1664a <__lshift+0x4a>
   166be:	3904      	subs	r1, #4
   166c0:	f853 2b04 	ldr.w	r2, [r3], #4
   166c4:	459c      	cmp	ip, r3
   166c6:	f841 2f04 	str.w	r2, [r1, #4]!
   166ca:	d8f9      	bhi.n	166c0 <__lshift+0xc0>
   166cc:	e7ea      	b.n	166a4 <__lshift+0xa4>
   166ce:	bf00      	nop
   166d0:	0001e1f3 	.word	0x0001e1f3
   166d4:	0001e204 	.word	0x0001e204

000166d8 <__mdiff>:
   166d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166dc:	4689      	mov	r9, r1
   166de:	4606      	mov	r6, r0
   166e0:	4611      	mov	r1, r2
   166e2:	4614      	mov	r4, r2
   166e4:	4648      	mov	r0, r9
   166e6:	f004 fb06 	bl	1acf6 <__mcmp>
   166ea:	1e05      	subs	r5, r0, #0
   166ec:	d112      	bne.n	16714 <__mdiff+0x3c>
   166ee:	4629      	mov	r1, r5
   166f0:	4630      	mov	r0, r6
   166f2:	f7ff fdc1 	bl	16278 <_Balloc>
   166f6:	4602      	mov	r2, r0
   166f8:	b928      	cbnz	r0, 16706 <__mdiff+0x2e>
   166fa:	4b41      	ldr	r3, [pc, #260]	; (16800 <__mdiff+0x128>)
   166fc:	f240 2132 	movw	r1, #562	; 0x232
   16700:	4840      	ldr	r0, [pc, #256]	; (16804 <__mdiff+0x12c>)
   16702:	f000 fea1 	bl	17448 <__assert_func>
   16706:	2301      	movs	r3, #1
   16708:	e9c0 3504 	strd	r3, r5, [r0, #16]
   1670c:	4610      	mov	r0, r2
   1670e:	b003      	add	sp, #12
   16710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16714:	bfbc      	itt	lt
   16716:	464b      	movlt	r3, r9
   16718:	46a1      	movlt	r9, r4
   1671a:	4630      	mov	r0, r6
   1671c:	bfb8      	it	lt
   1671e:	2501      	movlt	r5, #1
   16720:	f8d9 1004 	ldr.w	r1, [r9, #4]
   16724:	bfb4      	ite	lt
   16726:	461c      	movlt	r4, r3
   16728:	2500      	movge	r5, #0
   1672a:	f7ff fda5 	bl	16278 <_Balloc>
   1672e:	4602      	mov	r2, r0
   16730:	b918      	cbnz	r0, 1673a <__mdiff+0x62>
   16732:	4b33      	ldr	r3, [pc, #204]	; (16800 <__mdiff+0x128>)
   16734:	f44f 7110 	mov.w	r1, #576	; 0x240
   16738:	e7e2      	b.n	16700 <__mdiff+0x28>
   1673a:	f8d9 7010 	ldr.w	r7, [r9, #16]
   1673e:	f104 0e14 	add.w	lr, r4, #20
   16742:	6926      	ldr	r6, [r4, #16]
   16744:	f100 0b14 	add.w	fp, r0, #20
   16748:	60c5      	str	r5, [r0, #12]
   1674a:	f109 0514 	add.w	r5, r9, #20
   1674e:	f109 0310 	add.w	r3, r9, #16
   16752:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   16756:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   1675a:	46d9      	mov	r9, fp
   1675c:	f04f 0c00 	mov.w	ip, #0
   16760:	9301      	str	r3, [sp, #4]
   16762:	9b01      	ldr	r3, [sp, #4]
   16764:	f85e 0b04 	ldr.w	r0, [lr], #4
   16768:	f853 af04 	ldr.w	sl, [r3, #4]!
   1676c:	4576      	cmp	r6, lr
   1676e:	9301      	str	r3, [sp, #4]
   16770:	fa1f f38a 	uxth.w	r3, sl
   16774:	4619      	mov	r1, r3
   16776:	b283      	uxth	r3, r0
   16778:	ea4f 4010 	mov.w	r0, r0, lsr #16
   1677c:	eba1 0303 	sub.w	r3, r1, r3
   16780:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   16784:	4463      	add	r3, ip
   16786:	eb00 4023 	add.w	r0, r0, r3, asr #16
   1678a:	b29b      	uxth	r3, r3
   1678c:	ea4f 4c20 	mov.w	ip, r0, asr #16
   16790:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   16794:	f849 3b04 	str.w	r3, [r9], #4
   16798:	d8e3      	bhi.n	16762 <__mdiff+0x8a>
   1679a:	1b33      	subs	r3, r6, r4
   1679c:	3415      	adds	r4, #21
   1679e:	3b15      	subs	r3, #21
   167a0:	f023 0303 	bic.w	r3, r3, #3
   167a4:	3304      	adds	r3, #4
   167a6:	42a6      	cmp	r6, r4
   167a8:	bf38      	it	cc
   167aa:	2304      	movcc	r3, #4
   167ac:	441d      	add	r5, r3
   167ae:	445b      	add	r3, fp
   167b0:	462c      	mov	r4, r5
   167b2:	461e      	mov	r6, r3
   167b4:	4544      	cmp	r4, r8
   167b6:	d30e      	bcc.n	167d6 <__mdiff+0xfe>
   167b8:	f108 0103 	add.w	r1, r8, #3
   167bc:	1b49      	subs	r1, r1, r5
   167be:	3d03      	subs	r5, #3
   167c0:	f021 0103 	bic.w	r1, r1, #3
   167c4:	45a8      	cmp	r8, r5
   167c6:	bf38      	it	cc
   167c8:	2100      	movcc	r1, #0
   167ca:	440b      	add	r3, r1
   167cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   167d0:	b199      	cbz	r1, 167fa <__mdiff+0x122>
   167d2:	6117      	str	r7, [r2, #16]
   167d4:	e79a      	b.n	1670c <__mdiff+0x34>
   167d6:	f854 1b04 	ldr.w	r1, [r4], #4
   167da:	46e6      	mov	lr, ip
   167dc:	fa1f fc81 	uxth.w	ip, r1
   167e0:	0c08      	lsrs	r0, r1, #16
   167e2:	4471      	add	r1, lr
   167e4:	44f4      	add	ip, lr
   167e6:	b289      	uxth	r1, r1
   167e8:	eb00 402c 	add.w	r0, r0, ip, asr #16
   167ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   167f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
   167f4:	f846 1b04 	str.w	r1, [r6], #4
   167f8:	e7dc      	b.n	167b4 <__mdiff+0xdc>
   167fa:	3f01      	subs	r7, #1
   167fc:	e7e6      	b.n	167cc <__mdiff+0xf4>
   167fe:	bf00      	nop
   16800:	0001e1f3 	.word	0x0001e1f3
   16804:	0001e204 	.word	0x0001e204

00016808 <__d2b>:
   16808:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1680c:	460f      	mov	r7, r1
   1680e:	2101      	movs	r1, #1
   16810:	4616      	mov	r6, r2
   16812:	ec59 8b10 	vmov	r8, r9, d0
   16816:	f7ff fd2f 	bl	16278 <_Balloc>
   1681a:	4604      	mov	r4, r0
   1681c:	b930      	cbnz	r0, 1682c <__d2b+0x24>
   1681e:	4602      	mov	r2, r0
   16820:	4b23      	ldr	r3, [pc, #140]	; (168b0 <_flash_used+0x6c>)
   16822:	f240 310a 	movw	r1, #778	; 0x30a
   16826:	4823      	ldr	r0, [pc, #140]	; (168b4 <_flash_used+0x70>)
   16828:	f000 fe0e 	bl	17448 <__assert_func>
   1682c:	f3c9 550a 	ubfx	r5, r9, #20, #11
   16830:	f3c9 0313 	ubfx	r3, r9, #0, #20
   16834:	b10d      	cbz	r5, 1683a <__d2b+0x32>
   16836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1683a:	9301      	str	r3, [sp, #4]
   1683c:	f1b8 0300 	subs.w	r3, r8, #0
   16840:	d023      	beq.n	1688a <_flash_used+0x46>
   16842:	4668      	mov	r0, sp
   16844:	9300      	str	r3, [sp, #0]
   16846:	f004 fa29 	bl	1ac9c <__lo0bits>
   1684a:	e9dd 1200 	ldrd	r1, r2, [sp]
   1684e:	b1d0      	cbz	r0, 16886 <_flash_used+0x42>
   16850:	f1c0 0320 	rsb	r3, r0, #32
   16854:	fa02 f303 	lsl.w	r3, r2, r3
   16858:	40c2      	lsrs	r2, r0
   1685a:	430b      	orrs	r3, r1
   1685c:	9201      	str	r2, [sp, #4]
   1685e:	6163      	str	r3, [r4, #20]
   16860:	9b01      	ldr	r3, [sp, #4]
   16862:	2b00      	cmp	r3, #0
   16864:	61a3      	str	r3, [r4, #24]
   16866:	bf0c      	ite	eq
   16868:	2201      	moveq	r2, #1
   1686a:	2202      	movne	r2, #2
   1686c:	6122      	str	r2, [r4, #16]
   1686e:	b1a5      	cbz	r5, 1689a <_flash_used+0x56>
   16870:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   16874:	4405      	add	r5, r0
   16876:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   1687a:	603d      	str	r5, [r7, #0]
   1687c:	6030      	str	r0, [r6, #0]
   1687e:	4620      	mov	r0, r4
   16880:	b003      	add	sp, #12
   16882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16886:	6161      	str	r1, [r4, #20]
   16888:	e7ea      	b.n	16860 <_flash_used+0x1c>
   1688a:	a801      	add	r0, sp, #4
   1688c:	f004 fa06 	bl	1ac9c <__lo0bits>
   16890:	9b01      	ldr	r3, [sp, #4]
   16892:	3020      	adds	r0, #32
   16894:	2201      	movs	r2, #1
   16896:	6163      	str	r3, [r4, #20]
   16898:	e7e8      	b.n	1686c <_flash_used+0x28>
   1689a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   1689e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   168a2:	6038      	str	r0, [r7, #0]
   168a4:	6918      	ldr	r0, [r3, #16]
   168a6:	f004 f9d7 	bl	1ac58 <__hi0bits>
   168aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   168ae:	e7e5      	b.n	1687c <_flash_used+0x38>
   168b0:	0001e1f3 	.word	0x0001e1f3
   168b4:	0001e204 	.word	0x0001e204

000168b8 <_svfiprintf_r>:
   168b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168bc:	4698      	mov	r8, r3
   168be:	898b      	ldrh	r3, [r1, #12]
   168c0:	b09d      	sub	sp, #116	; 0x74
   168c2:	4607      	mov	r7, r0
   168c4:	061b      	lsls	r3, r3, #24
   168c6:	460d      	mov	r5, r1
   168c8:	4614      	mov	r4, r2
   168ca:	d510      	bpl.n	168ee <_svfiprintf_r+0x36>
   168cc:	690b      	ldr	r3, [r1, #16]
   168ce:	b973      	cbnz	r3, 168ee <_svfiprintf_r+0x36>
   168d0:	2140      	movs	r1, #64	; 0x40
   168d2:	f7fe fe0b 	bl	154ec <_malloc_r>
   168d6:	6028      	str	r0, [r5, #0]
   168d8:	6128      	str	r0, [r5, #16]
   168da:	b930      	cbnz	r0, 168ea <_svfiprintf_r+0x32>
   168dc:	230c      	movs	r3, #12
   168de:	603b      	str	r3, [r7, #0]
   168e0:	f04f 30ff 	mov.w	r0, #4294967295
   168e4:	b01d      	add	sp, #116	; 0x74
   168e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168ea:	2340      	movs	r3, #64	; 0x40
   168ec:	616b      	str	r3, [r5, #20]
   168ee:	2300      	movs	r3, #0
   168f0:	f8cd 800c 	str.w	r8, [sp, #12]
   168f4:	f04f 0901 	mov.w	r9, #1
   168f8:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 16a9c <_svfiprintf_r+0x1e4>
   168fc:	9309      	str	r3, [sp, #36]	; 0x24
   168fe:	2320      	movs	r3, #32
   16900:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   16904:	2330      	movs	r3, #48	; 0x30
   16906:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1690a:	4623      	mov	r3, r4
   1690c:	469a      	mov	sl, r3
   1690e:	f813 2b01 	ldrb.w	r2, [r3], #1
   16912:	b10a      	cbz	r2, 16918 <_svfiprintf_r+0x60>
   16914:	2a25      	cmp	r2, #37	; 0x25
   16916:	d1f9      	bne.n	1690c <_svfiprintf_r+0x54>
   16918:	ebba 0b04 	subs.w	fp, sl, r4
   1691c:	d00b      	beq.n	16936 <_svfiprintf_r+0x7e>
   1691e:	465b      	mov	r3, fp
   16920:	4622      	mov	r2, r4
   16922:	4629      	mov	r1, r5
   16924:	4638      	mov	r0, r7
   16926:	f004 fa0f 	bl	1ad48 <__ssputs_r>
   1692a:	3001      	adds	r0, #1
   1692c:	f000 80a7 	beq.w	16a7e <_svfiprintf_r+0x1c6>
   16930:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16932:	445a      	add	r2, fp
   16934:	9209      	str	r2, [sp, #36]	; 0x24
   16936:	f89a 3000 	ldrb.w	r3, [sl]
   1693a:	2b00      	cmp	r3, #0
   1693c:	f000 809f 	beq.w	16a7e <_svfiprintf_r+0x1c6>
   16940:	2300      	movs	r3, #0
   16942:	f04f 32ff 	mov.w	r2, #4294967295
   16946:	f10a 0a01 	add.w	sl, sl, #1
   1694a:	9304      	str	r3, [sp, #16]
   1694c:	9307      	str	r3, [sp, #28]
   1694e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   16952:	931a      	str	r3, [sp, #104]	; 0x68
   16954:	e9cd 2305 	strd	r2, r3, [sp, #20]
   16958:	4654      	mov	r4, sl
   1695a:	2205      	movs	r2, #5
   1695c:	484f      	ldr	r0, [pc, #316]	; (16a9c <_svfiprintf_r+0x1e4>)
   1695e:	f814 1b01 	ldrb.w	r1, [r4], #1
   16962:	f003 fea1 	bl	1a6a8 <memchr>
   16966:	9a04      	ldr	r2, [sp, #16]
   16968:	b9d8      	cbnz	r0, 169a2 <_svfiprintf_r+0xea>
   1696a:	06d0      	lsls	r0, r2, #27
   1696c:	bf44      	itt	mi
   1696e:	2320      	movmi	r3, #32
   16970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   16974:	0711      	lsls	r1, r2, #28
   16976:	bf44      	itt	mi
   16978:	232b      	movmi	r3, #43	; 0x2b
   1697a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1697e:	f89a 3000 	ldrb.w	r3, [sl]
   16982:	2b2a      	cmp	r3, #42	; 0x2a
   16984:	d015      	beq.n	169b2 <_svfiprintf_r+0xfa>
   16986:	9a07      	ldr	r2, [sp, #28]
   16988:	4654      	mov	r4, sl
   1698a:	2000      	movs	r0, #0
   1698c:	f04f 0c0a 	mov.w	ip, #10
   16990:	4621      	mov	r1, r4
   16992:	f811 3b01 	ldrb.w	r3, [r1], #1
   16996:	3b30      	subs	r3, #48	; 0x30
   16998:	2b09      	cmp	r3, #9
   1699a:	d94b      	bls.n	16a34 <_svfiprintf_r+0x17c>
   1699c:	b1b0      	cbz	r0, 169cc <_svfiprintf_r+0x114>
   1699e:	9207      	str	r2, [sp, #28]
   169a0:	e014      	b.n	169cc <_svfiprintf_r+0x114>
   169a2:	eba0 0308 	sub.w	r3, r0, r8
   169a6:	46a2      	mov	sl, r4
   169a8:	fa09 f303 	lsl.w	r3, r9, r3
   169ac:	4313      	orrs	r3, r2
   169ae:	9304      	str	r3, [sp, #16]
   169b0:	e7d2      	b.n	16958 <_svfiprintf_r+0xa0>
   169b2:	9b03      	ldr	r3, [sp, #12]
   169b4:	1d19      	adds	r1, r3, #4
   169b6:	681b      	ldr	r3, [r3, #0]
   169b8:	2b00      	cmp	r3, #0
   169ba:	9103      	str	r1, [sp, #12]
   169bc:	bfbb      	ittet	lt
   169be:	425b      	neglt	r3, r3
   169c0:	f042 0202 	orrlt.w	r2, r2, #2
   169c4:	9307      	strge	r3, [sp, #28]
   169c6:	9307      	strlt	r3, [sp, #28]
   169c8:	bfb8      	it	lt
   169ca:	9204      	strlt	r2, [sp, #16]
   169cc:	7823      	ldrb	r3, [r4, #0]
   169ce:	2b2e      	cmp	r3, #46	; 0x2e
   169d0:	d10a      	bne.n	169e8 <_svfiprintf_r+0x130>
   169d2:	7863      	ldrb	r3, [r4, #1]
   169d4:	2b2a      	cmp	r3, #42	; 0x2a
   169d6:	d132      	bne.n	16a3e <_svfiprintf_r+0x186>
   169d8:	9b03      	ldr	r3, [sp, #12]
   169da:	3402      	adds	r4, #2
   169dc:	1d1a      	adds	r2, r3, #4
   169de:	681b      	ldr	r3, [r3, #0]
   169e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   169e4:	9203      	str	r2, [sp, #12]
   169e6:	9305      	str	r3, [sp, #20]
   169e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 16aac <_svfiprintf_r+0x1f4>
   169ec:	2203      	movs	r2, #3
   169ee:	7821      	ldrb	r1, [r4, #0]
   169f0:	4650      	mov	r0, sl
   169f2:	f003 fe59 	bl	1a6a8 <memchr>
   169f6:	b138      	cbz	r0, 16a08 <_svfiprintf_r+0x150>
   169f8:	eba0 000a 	sub.w	r0, r0, sl
   169fc:	2240      	movs	r2, #64	; 0x40
   169fe:	9b04      	ldr	r3, [sp, #16]
   16a00:	3401      	adds	r4, #1
   16a02:	4082      	lsls	r2, r0
   16a04:	4313      	orrs	r3, r2
   16a06:	9304      	str	r3, [sp, #16]
   16a08:	f814 1b01 	ldrb.w	r1, [r4], #1
   16a0c:	2206      	movs	r2, #6
   16a0e:	4824      	ldr	r0, [pc, #144]	; (16aa0 <_svfiprintf_r+0x1e8>)
   16a10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   16a14:	f003 fe48 	bl	1a6a8 <memchr>
   16a18:	2800      	cmp	r0, #0
   16a1a:	d036      	beq.n	16a8a <_svfiprintf_r+0x1d2>
   16a1c:	4b21      	ldr	r3, [pc, #132]	; (16aa4 <_svfiprintf_r+0x1ec>)
   16a1e:	bb1b      	cbnz	r3, 16a68 <_svfiprintf_r+0x1b0>
   16a20:	9b03      	ldr	r3, [sp, #12]
   16a22:	3307      	adds	r3, #7
   16a24:	f023 0307 	bic.w	r3, r3, #7
   16a28:	3308      	adds	r3, #8
   16a2a:	9303      	str	r3, [sp, #12]
   16a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16a2e:	4433      	add	r3, r6
   16a30:	9309      	str	r3, [sp, #36]	; 0x24
   16a32:	e76a      	b.n	1690a <_svfiprintf_r+0x52>
   16a34:	fb0c 3202 	mla	r2, ip, r2, r3
   16a38:	460c      	mov	r4, r1
   16a3a:	2001      	movs	r0, #1
   16a3c:	e7a8      	b.n	16990 <_svfiprintf_r+0xd8>
   16a3e:	2300      	movs	r3, #0
   16a40:	3401      	adds	r4, #1
   16a42:	f04f 0c0a 	mov.w	ip, #10
   16a46:	4619      	mov	r1, r3
   16a48:	9305      	str	r3, [sp, #20]
   16a4a:	4620      	mov	r0, r4
   16a4c:	f810 2b01 	ldrb.w	r2, [r0], #1
   16a50:	3a30      	subs	r2, #48	; 0x30
   16a52:	2a09      	cmp	r2, #9
   16a54:	d903      	bls.n	16a5e <_svfiprintf_r+0x1a6>
   16a56:	2b00      	cmp	r3, #0
   16a58:	d0c6      	beq.n	169e8 <_svfiprintf_r+0x130>
   16a5a:	9105      	str	r1, [sp, #20]
   16a5c:	e7c4      	b.n	169e8 <_svfiprintf_r+0x130>
   16a5e:	fb0c 2101 	mla	r1, ip, r1, r2
   16a62:	4604      	mov	r4, r0
   16a64:	2301      	movs	r3, #1
   16a66:	e7f0      	b.n	16a4a <_svfiprintf_r+0x192>
   16a68:	ab03      	add	r3, sp, #12
   16a6a:	462a      	mov	r2, r5
   16a6c:	a904      	add	r1, sp, #16
   16a6e:	4638      	mov	r0, r7
   16a70:	9300      	str	r3, [sp, #0]
   16a72:	4b0d      	ldr	r3, [pc, #52]	; (16aa8 <_svfiprintf_r+0x1f0>)
   16a74:	f7fe fd94 	bl	155a0 <_printf_float>
   16a78:	1c42      	adds	r2, r0, #1
   16a7a:	4606      	mov	r6, r0
   16a7c:	d1d6      	bne.n	16a2c <_svfiprintf_r+0x174>
   16a7e:	89ab      	ldrh	r3, [r5, #12]
   16a80:	065b      	lsls	r3, r3, #25
   16a82:	f53f af2d 	bmi.w	168e0 <_svfiprintf_r+0x28>
   16a86:	9809      	ldr	r0, [sp, #36]	; 0x24
   16a88:	e72c      	b.n	168e4 <_svfiprintf_r+0x2c>
   16a8a:	ab03      	add	r3, sp, #12
   16a8c:	462a      	mov	r2, r5
   16a8e:	a904      	add	r1, sp, #16
   16a90:	4638      	mov	r0, r7
   16a92:	9300      	str	r3, [sp, #0]
   16a94:	4b04      	ldr	r3, [pc, #16]	; (16aa8 <_svfiprintf_r+0x1f0>)
   16a96:	f7fe ffb7 	bl	15a08 <_printf_i>
   16a9a:	e7ed      	b.n	16a78 <_svfiprintf_r+0x1c0>
   16a9c:	0001e279 	.word	0x0001e279
   16aa0:	0001e283 	.word	0x0001e283
   16aa4:	000155a1 	.word	0x000155a1
   16aa8:	0001ad49 	.word	0x0001ad49
   16aac:	0001e27f 	.word	0x0001e27f

00016ab0 <__ssvfiscanf_r>:
   16ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16ab4:	460c      	mov	r4, r1
   16ab6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   16aba:	2100      	movs	r1, #0
   16abc:	4606      	mov	r6, r0
   16abe:	f10d 0804 	add.w	r8, sp, #4
   16ac2:	4fa7      	ldr	r7, [pc, #668]	; (16d60 <__ssvfiscanf_r+0x2b0>)
   16ac4:	9300      	str	r3, [sp, #0]
   16ac6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   16aca:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   16ace:	49a5      	ldr	r1, [pc, #660]	; (16d64 <__ssvfiscanf_r+0x2b4>)
   16ad0:	91a0      	str	r1, [sp, #640]	; 0x280
   16ad2:	49a5      	ldr	r1, [pc, #660]	; (16d68 <__ssvfiscanf_r+0x2b8>)
   16ad4:	91a1      	str	r1, [sp, #644]	; 0x284
   16ad6:	7813      	ldrb	r3, [r2, #0]
   16ad8:	2b00      	cmp	r3, #0
   16ada:	f000 815c 	beq.w	16d96 <__ssvfiscanf_r+0x2e6>
   16ade:	5cf9      	ldrb	r1, [r7, r3]
   16ae0:	1c55      	adds	r5, r2, #1
   16ae2:	f011 0108 	ands.w	r1, r1, #8
   16ae6:	d019      	beq.n	16b1c <__ssvfiscanf_r+0x6c>
   16ae8:	6863      	ldr	r3, [r4, #4]
   16aea:	2b00      	cmp	r3, #0
   16aec:	dd0f      	ble.n	16b0e <__ssvfiscanf_r+0x5e>
   16aee:	6823      	ldr	r3, [r4, #0]
   16af0:	781a      	ldrb	r2, [r3, #0]
   16af2:	5cba      	ldrb	r2, [r7, r2]
   16af4:	0712      	lsls	r2, r2, #28
   16af6:	d401      	bmi.n	16afc <__ssvfiscanf_r+0x4c>
   16af8:	462a      	mov	r2, r5
   16afa:	e7ec      	b.n	16ad6 <__ssvfiscanf_r+0x26>
   16afc:	9a45      	ldr	r2, [sp, #276]	; 0x114
   16afe:	3301      	adds	r3, #1
   16b00:	3201      	adds	r2, #1
   16b02:	6023      	str	r3, [r4, #0]
   16b04:	9245      	str	r2, [sp, #276]	; 0x114
   16b06:	6862      	ldr	r2, [r4, #4]
   16b08:	3a01      	subs	r2, #1
   16b0a:	6062      	str	r2, [r4, #4]
   16b0c:	e7ec      	b.n	16ae8 <__ssvfiscanf_r+0x38>
   16b0e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   16b10:	4621      	mov	r1, r4
   16b12:	4630      	mov	r0, r6
   16b14:	4798      	blx	r3
   16b16:	2800      	cmp	r0, #0
   16b18:	d0e9      	beq.n	16aee <__ssvfiscanf_r+0x3e>
   16b1a:	e7ed      	b.n	16af8 <__ssvfiscanf_r+0x48>
   16b1c:	2b25      	cmp	r3, #37	; 0x25
   16b1e:	d012      	beq.n	16b46 <__ssvfiscanf_r+0x96>
   16b20:	4699      	mov	r9, r3
   16b22:	6863      	ldr	r3, [r4, #4]
   16b24:	2b00      	cmp	r3, #0
   16b26:	f340 8094 	ble.w	16c52 <__ssvfiscanf_r+0x1a2>
   16b2a:	6822      	ldr	r2, [r4, #0]
   16b2c:	7813      	ldrb	r3, [r2, #0]
   16b2e:	454b      	cmp	r3, r9
   16b30:	f040 8131 	bne.w	16d96 <__ssvfiscanf_r+0x2e6>
   16b34:	6863      	ldr	r3, [r4, #4]
   16b36:	3201      	adds	r2, #1
   16b38:	3b01      	subs	r3, #1
   16b3a:	6022      	str	r2, [r4, #0]
   16b3c:	6063      	str	r3, [r4, #4]
   16b3e:	9b45      	ldr	r3, [sp, #276]	; 0x114
   16b40:	3301      	adds	r3, #1
   16b42:	9345      	str	r3, [sp, #276]	; 0x114
   16b44:	e7d8      	b.n	16af8 <__ssvfiscanf_r+0x48>
   16b46:	9141      	str	r1, [sp, #260]	; 0x104
   16b48:	9143      	str	r1, [sp, #268]	; 0x10c
   16b4a:	7853      	ldrb	r3, [r2, #1]
   16b4c:	2b2a      	cmp	r3, #42	; 0x2a
   16b4e:	bf04      	itt	eq
   16b50:	2310      	moveq	r3, #16
   16b52:	1c95      	addeq	r5, r2, #2
   16b54:	f04f 020a 	mov.w	r2, #10
   16b58:	bf08      	it	eq
   16b5a:	9341      	streq	r3, [sp, #260]	; 0x104
   16b5c:	46a9      	mov	r9, r5
   16b5e:	f819 1b01 	ldrb.w	r1, [r9], #1
   16b62:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   16b66:	2b09      	cmp	r3, #9
   16b68:	d91e      	bls.n	16ba8 <__ssvfiscanf_r+0xf8>
   16b6a:	f8df a200 	ldr.w	sl, [pc, #512]	; 16d6c <__ssvfiscanf_r+0x2bc>
   16b6e:	2203      	movs	r2, #3
   16b70:	4650      	mov	r0, sl
   16b72:	f003 fd99 	bl	1a6a8 <memchr>
   16b76:	b138      	cbz	r0, 16b88 <__ssvfiscanf_r+0xd8>
   16b78:	eba0 000a 	sub.w	r0, r0, sl
   16b7c:	2301      	movs	r3, #1
   16b7e:	9a41      	ldr	r2, [sp, #260]	; 0x104
   16b80:	464d      	mov	r5, r9
   16b82:	4083      	lsls	r3, r0
   16b84:	4313      	orrs	r3, r2
   16b86:	9341      	str	r3, [sp, #260]	; 0x104
   16b88:	f815 3b01 	ldrb.w	r3, [r5], #1
   16b8c:	2b78      	cmp	r3, #120	; 0x78
   16b8e:	d806      	bhi.n	16b9e <__ssvfiscanf_r+0xee>
   16b90:	2b57      	cmp	r3, #87	; 0x57
   16b92:	d810      	bhi.n	16bb6 <__ssvfiscanf_r+0x106>
   16b94:	2b25      	cmp	r3, #37	; 0x25
   16b96:	d0c3      	beq.n	16b20 <__ssvfiscanf_r+0x70>
   16b98:	d856      	bhi.n	16c48 <__ssvfiscanf_r+0x198>
   16b9a:	2b00      	cmp	r3, #0
   16b9c:	d064      	beq.n	16c68 <__ssvfiscanf_r+0x1b8>
   16b9e:	2303      	movs	r3, #3
   16ba0:	9347      	str	r3, [sp, #284]	; 0x11c
   16ba2:	230a      	movs	r3, #10
   16ba4:	9342      	str	r3, [sp, #264]	; 0x108
   16ba6:	e06a      	b.n	16c7e <__ssvfiscanf_r+0x1ce>
   16ba8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   16baa:	464d      	mov	r5, r9
   16bac:	fb02 1103 	mla	r1, r2, r3, r1
   16bb0:	3930      	subs	r1, #48	; 0x30
   16bb2:	9143      	str	r1, [sp, #268]	; 0x10c
   16bb4:	e7d2      	b.n	16b5c <__ssvfiscanf_r+0xac>
   16bb6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   16bba:	2a20      	cmp	r2, #32
   16bbc:	d8ef      	bhi.n	16b9e <__ssvfiscanf_r+0xee>
   16bbe:	a101      	add	r1, pc, #4	; (adr r1, 16bc4 <__ssvfiscanf_r+0x114>)
   16bc0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   16bc4:	00016cb3 	.word	0x00016cb3
   16bc8:	00016b9f 	.word	0x00016b9f
   16bcc:	00016b9f 	.word	0x00016b9f
   16bd0:	00016cd5 	.word	0x00016cd5
   16bd4:	00016b9f 	.word	0x00016b9f
   16bd8:	00016b9f 	.word	0x00016b9f
   16bdc:	00016b9f 	.word	0x00016b9f
   16be0:	00016b9f 	.word	0x00016b9f
   16be4:	00016b9f 	.word	0x00016b9f
   16be8:	00016b9f 	.word	0x00016b9f
   16bec:	00016b9f 	.word	0x00016b9f
   16bf0:	00016ceb 	.word	0x00016ceb
   16bf4:	00016cd1 	.word	0x00016cd1
   16bf8:	00016c4f 	.word	0x00016c4f
   16bfc:	00016c4f 	.word	0x00016c4f
   16c00:	00016c4f 	.word	0x00016c4f
   16c04:	00016b9f 	.word	0x00016b9f
   16c08:	00016cc5 	.word	0x00016cc5
   16c0c:	00016b9f 	.word	0x00016b9f
   16c10:	00016b9f 	.word	0x00016b9f
   16c14:	00016b9f 	.word	0x00016b9f
   16c18:	00016b9f 	.word	0x00016b9f
   16c1c:	00016cfb 	.word	0x00016cfb
   16c20:	00016ccd 	.word	0x00016ccd
   16c24:	00016c6f 	.word	0x00016c6f
   16c28:	00016b9f 	.word	0x00016b9f
   16c2c:	00016b9f 	.word	0x00016b9f
   16c30:	00016cf7 	.word	0x00016cf7
   16c34:	00016b9f 	.word	0x00016b9f
   16c38:	00016cd1 	.word	0x00016cd1
   16c3c:	00016b9f 	.word	0x00016b9f
   16c40:	00016b9f 	.word	0x00016b9f
   16c44:	00016cb3 	.word	0x00016cb3
   16c48:	3b45      	subs	r3, #69	; 0x45
   16c4a:	2b02      	cmp	r3, #2
   16c4c:	d8a7      	bhi.n	16b9e <__ssvfiscanf_r+0xee>
   16c4e:	2305      	movs	r3, #5
   16c50:	e014      	b.n	16c7c <__ssvfiscanf_r+0x1cc>
   16c52:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   16c54:	4621      	mov	r1, r4
   16c56:	4630      	mov	r0, r6
   16c58:	4798      	blx	r3
   16c5a:	2800      	cmp	r0, #0
   16c5c:	f43f af65 	beq.w	16b2a <__ssvfiscanf_r+0x7a>
   16c60:	9844      	ldr	r0, [sp, #272]	; 0x110
   16c62:	2800      	cmp	r0, #0
   16c64:	f040 808f 	bne.w	16d86 <__ssvfiscanf_r+0x2d6>
   16c68:	f04f 30ff 	mov.w	r0, #4294967295
   16c6c:	e08f      	b.n	16d8e <__ssvfiscanf_r+0x2de>
   16c6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
   16c70:	f443 7308 	orr.w	r3, r3, #544	; 0x220
   16c74:	9341      	str	r3, [sp, #260]	; 0x104
   16c76:	2310      	movs	r3, #16
   16c78:	9342      	str	r3, [sp, #264]	; 0x108
   16c7a:	2304      	movs	r3, #4
   16c7c:	9347      	str	r3, [sp, #284]	; 0x11c
   16c7e:	6863      	ldr	r3, [r4, #4]
   16c80:	2b00      	cmp	r3, #0
   16c82:	dd4a      	ble.n	16d1a <__ssvfiscanf_r+0x26a>
   16c84:	9b41      	ldr	r3, [sp, #260]	; 0x104
   16c86:	0659      	lsls	r1, r3, #25
   16c88:	d404      	bmi.n	16c94 <__ssvfiscanf_r+0x1e4>
   16c8a:	6823      	ldr	r3, [r4, #0]
   16c8c:	781a      	ldrb	r2, [r3, #0]
   16c8e:	5cba      	ldrb	r2, [r7, r2]
   16c90:	0712      	lsls	r2, r2, #28
   16c92:	d449      	bmi.n	16d28 <__ssvfiscanf_r+0x278>
   16c94:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   16c96:	2b02      	cmp	r3, #2
   16c98:	dc58      	bgt.n	16d4c <__ssvfiscanf_r+0x29c>
   16c9a:	466b      	mov	r3, sp
   16c9c:	4622      	mov	r2, r4
   16c9e:	a941      	add	r1, sp, #260	; 0x104
   16ca0:	4630      	mov	r0, r6
   16ca2:	f000 f9a9 	bl	16ff8 <_scanf_chars>
   16ca6:	2801      	cmp	r0, #1
   16ca8:	d075      	beq.n	16d96 <__ssvfiscanf_r+0x2e6>
   16caa:	2802      	cmp	r0, #2
   16cac:	f47f af24 	bne.w	16af8 <__ssvfiscanf_r+0x48>
   16cb0:	e7d6      	b.n	16c60 <__ssvfiscanf_r+0x1b0>
   16cb2:	9a41      	ldr	r2, [sp, #260]	; 0x104
   16cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   16cb8:	9241      	str	r2, [sp, #260]	; 0x104
   16cba:	2210      	movs	r2, #16
   16cbc:	2b6e      	cmp	r3, #110	; 0x6e
   16cbe:	9242      	str	r2, [sp, #264]	; 0x108
   16cc0:	d902      	bls.n	16cc8 <__ssvfiscanf_r+0x218>
   16cc2:	e7da      	b.n	16c7a <__ssvfiscanf_r+0x1ca>
   16cc4:	2300      	movs	r3, #0
   16cc6:	9342      	str	r3, [sp, #264]	; 0x108
   16cc8:	2303      	movs	r3, #3
   16cca:	e7d7      	b.n	16c7c <__ssvfiscanf_r+0x1cc>
   16ccc:	2308      	movs	r3, #8
   16cce:	e7d3      	b.n	16c78 <__ssvfiscanf_r+0x1c8>
   16cd0:	220a      	movs	r2, #10
   16cd2:	e7f3      	b.n	16cbc <__ssvfiscanf_r+0x20c>
   16cd4:	4629      	mov	r1, r5
   16cd6:	4640      	mov	r0, r8
   16cd8:	f004 f912 	bl	1af00 <__sccl>
   16cdc:	9b41      	ldr	r3, [sp, #260]	; 0x104
   16cde:	4605      	mov	r5, r0
   16ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16ce4:	9341      	str	r3, [sp, #260]	; 0x104
   16ce6:	2301      	movs	r3, #1
   16ce8:	e7c8      	b.n	16c7c <__ssvfiscanf_r+0x1cc>
   16cea:	9b41      	ldr	r3, [sp, #260]	; 0x104
   16cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16cf0:	9341      	str	r3, [sp, #260]	; 0x104
   16cf2:	2300      	movs	r3, #0
   16cf4:	e7c2      	b.n	16c7c <__ssvfiscanf_r+0x1cc>
   16cf6:	2302      	movs	r3, #2
   16cf8:	e7c0      	b.n	16c7c <__ssvfiscanf_r+0x1cc>
   16cfa:	9841      	ldr	r0, [sp, #260]	; 0x104
   16cfc:	06c3      	lsls	r3, r0, #27
   16cfe:	f53f aefb 	bmi.w	16af8 <__ssvfiscanf_r+0x48>
   16d02:	9b00      	ldr	r3, [sp, #0]
   16d04:	f010 0f01 	tst.w	r0, #1
   16d08:	9a45      	ldr	r2, [sp, #276]	; 0x114
   16d0a:	f103 0104 	add.w	r1, r3, #4
   16d0e:	9100      	str	r1, [sp, #0]
   16d10:	681b      	ldr	r3, [r3, #0]
   16d12:	bf14      	ite	ne
   16d14:	801a      	strhne	r2, [r3, #0]
   16d16:	601a      	streq	r2, [r3, #0]
   16d18:	e6ee      	b.n	16af8 <__ssvfiscanf_r+0x48>
   16d1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   16d1c:	4621      	mov	r1, r4
   16d1e:	4630      	mov	r0, r6
   16d20:	4798      	blx	r3
   16d22:	2800      	cmp	r0, #0
   16d24:	d0ae      	beq.n	16c84 <__ssvfiscanf_r+0x1d4>
   16d26:	e79b      	b.n	16c60 <__ssvfiscanf_r+0x1b0>
   16d28:	9a45      	ldr	r2, [sp, #276]	; 0x114
   16d2a:	3201      	adds	r2, #1
   16d2c:	9245      	str	r2, [sp, #276]	; 0x114
   16d2e:	6862      	ldr	r2, [r4, #4]
   16d30:	3a01      	subs	r2, #1
   16d32:	2a00      	cmp	r2, #0
   16d34:	6062      	str	r2, [r4, #4]
   16d36:	dd02      	ble.n	16d3e <__ssvfiscanf_r+0x28e>
   16d38:	3301      	adds	r3, #1
   16d3a:	6023      	str	r3, [r4, #0]
   16d3c:	e7a5      	b.n	16c8a <__ssvfiscanf_r+0x1da>
   16d3e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   16d40:	4621      	mov	r1, r4
   16d42:	4630      	mov	r0, r6
   16d44:	4798      	blx	r3
   16d46:	2800      	cmp	r0, #0
   16d48:	d09f      	beq.n	16c8a <__ssvfiscanf_r+0x1da>
   16d4a:	e789      	b.n	16c60 <__ssvfiscanf_r+0x1b0>
   16d4c:	2b04      	cmp	r3, #4
   16d4e:	dc0f      	bgt.n	16d70 <__ssvfiscanf_r+0x2c0>
   16d50:	466b      	mov	r3, sp
   16d52:	4622      	mov	r2, r4
   16d54:	a941      	add	r1, sp, #260	; 0x104
   16d56:	4630      	mov	r0, r6
   16d58:	f000 f9a8 	bl	170ac <_scanf_i>
   16d5c:	e7a3      	b.n	16ca6 <__ssvfiscanf_r+0x1f6>
   16d5e:	bf00      	nop
   16d60:	0001e02d 	.word	0x0001e02d
   16d64:	0001adff 	.word	0x0001adff
   16d68:	0001ae75 	.word	0x0001ae75
   16d6c:	0001e27f 	.word	0x0001e27f
   16d70:	4b0a      	ldr	r3, [pc, #40]	; (16d9c <__ssvfiscanf_r+0x2ec>)
   16d72:	2b00      	cmp	r3, #0
   16d74:	f43f aec0 	beq.w	16af8 <__ssvfiscanf_r+0x48>
   16d78:	466b      	mov	r3, sp
   16d7a:	4622      	mov	r2, r4
   16d7c:	a941      	add	r1, sp, #260	; 0x104
   16d7e:	4630      	mov	r0, r6
   16d80:	f3af 8000 	nop.w
   16d84:	e78f      	b.n	16ca6 <__ssvfiscanf_r+0x1f6>
   16d86:	89a3      	ldrh	r3, [r4, #12]
   16d88:	065b      	lsls	r3, r3, #25
   16d8a:	f53f af6d 	bmi.w	16c68 <__ssvfiscanf_r+0x1b8>
   16d8e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   16d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16d96:	9844      	ldr	r0, [sp, #272]	; 0x110
   16d98:	e7f9      	b.n	16d8e <__ssvfiscanf_r+0x2de>
   16d9a:	bf00      	nop
   16d9c:	00000000 	.word	0x00000000

00016da0 <_vfiprintf_r>:
   16da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16da4:	460d      	mov	r5, r1
   16da6:	b09d      	sub	sp, #116	; 0x74
   16da8:	4614      	mov	r4, r2
   16daa:	4698      	mov	r8, r3
   16dac:	4606      	mov	r6, r0
   16dae:	b118      	cbz	r0, 16db8 <_vfiprintf_r+0x18>
   16db0:	6983      	ldr	r3, [r0, #24]
   16db2:	b90b      	cbnz	r3, 16db8 <_vfiprintf_r+0x18>
   16db4:	f7ff f9c0 	bl	16138 <__sinit>
   16db8:	4b87      	ldr	r3, [pc, #540]	; (16fd8 <_vfiprintf_r+0x238>)
   16dba:	429d      	cmp	r5, r3
   16dbc:	d11b      	bne.n	16df6 <_vfiprintf_r+0x56>
   16dbe:	6875      	ldr	r5, [r6, #4]
   16dc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   16dc2:	07d9      	lsls	r1, r3, #31
   16dc4:	d405      	bmi.n	16dd2 <_vfiprintf_r+0x32>
   16dc6:	89ab      	ldrh	r3, [r5, #12]
   16dc8:	059a      	lsls	r2, r3, #22
   16dca:	d402      	bmi.n	16dd2 <_vfiprintf_r+0x32>
   16dcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   16dce:	f001 f909 	bl	17fe4 <__retarget_lock_acquire_recursive>
   16dd2:	89ab      	ldrh	r3, [r5, #12]
   16dd4:	071b      	lsls	r3, r3, #28
   16dd6:	d501      	bpl.n	16ddc <_vfiprintf_r+0x3c>
   16dd8:	692b      	ldr	r3, [r5, #16]
   16dda:	b9eb      	cbnz	r3, 16e18 <_vfiprintf_r+0x78>
   16ddc:	4629      	mov	r1, r5
   16dde:	4630      	mov	r0, r6
   16de0:	f000 fac6 	bl	17370 <__swsetup_r>
   16de4:	b1c0      	cbz	r0, 16e18 <_vfiprintf_r+0x78>
   16de6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   16de8:	07dc      	lsls	r4, r3, #31
   16dea:	d50e      	bpl.n	16e0a <_vfiprintf_r+0x6a>
   16dec:	f04f 30ff 	mov.w	r0, #4294967295
   16df0:	b01d      	add	sp, #116	; 0x74
   16df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16df6:	4b79      	ldr	r3, [pc, #484]	; (16fdc <_vfiprintf_r+0x23c>)
   16df8:	429d      	cmp	r5, r3
   16dfa:	d101      	bne.n	16e00 <_vfiprintf_r+0x60>
   16dfc:	68b5      	ldr	r5, [r6, #8]
   16dfe:	e7df      	b.n	16dc0 <_vfiprintf_r+0x20>
   16e00:	4b77      	ldr	r3, [pc, #476]	; (16fe0 <_vfiprintf_r+0x240>)
   16e02:	429d      	cmp	r5, r3
   16e04:	bf08      	it	eq
   16e06:	68f5      	ldreq	r5, [r6, #12]
   16e08:	e7da      	b.n	16dc0 <_vfiprintf_r+0x20>
   16e0a:	89ab      	ldrh	r3, [r5, #12]
   16e0c:	0598      	lsls	r0, r3, #22
   16e0e:	d4ed      	bmi.n	16dec <_vfiprintf_r+0x4c>
   16e10:	6da8      	ldr	r0, [r5, #88]	; 0x58
   16e12:	f001 f8ed 	bl	17ff0 <__retarget_lock_release_recursive>
   16e16:	e7e9      	b.n	16dec <_vfiprintf_r+0x4c>
   16e18:	2300      	movs	r3, #0
   16e1a:	f8cd 800c 	str.w	r8, [sp, #12]
   16e1e:	f04f 0901 	mov.w	r9, #1
   16e22:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 16fe4 <_vfiprintf_r+0x244>
   16e26:	9309      	str	r3, [sp, #36]	; 0x24
   16e28:	2320      	movs	r3, #32
   16e2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   16e2e:	2330      	movs	r3, #48	; 0x30
   16e30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   16e34:	4623      	mov	r3, r4
   16e36:	469a      	mov	sl, r3
   16e38:	f813 2b01 	ldrb.w	r2, [r3], #1
   16e3c:	b10a      	cbz	r2, 16e42 <_vfiprintf_r+0xa2>
   16e3e:	2a25      	cmp	r2, #37	; 0x25
   16e40:	d1f9      	bne.n	16e36 <_vfiprintf_r+0x96>
   16e42:	ebba 0b04 	subs.w	fp, sl, r4
   16e46:	d00b      	beq.n	16e60 <_vfiprintf_r+0xc0>
   16e48:	465b      	mov	r3, fp
   16e4a:	4622      	mov	r2, r4
   16e4c:	4629      	mov	r1, r5
   16e4e:	4630      	mov	r0, r6
   16e50:	f004 f844 	bl	1aedc <__sfputs_r>
   16e54:	3001      	adds	r0, #1
   16e56:	f000 80a6 	beq.w	16fa6 <_vfiprintf_r+0x206>
   16e5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16e5c:	445a      	add	r2, fp
   16e5e:	9209      	str	r2, [sp, #36]	; 0x24
   16e60:	f89a 3000 	ldrb.w	r3, [sl]
   16e64:	2b00      	cmp	r3, #0
   16e66:	f000 809e 	beq.w	16fa6 <_vfiprintf_r+0x206>
   16e6a:	2300      	movs	r3, #0
   16e6c:	f04f 32ff 	mov.w	r2, #4294967295
   16e70:	f10a 0a01 	add.w	sl, sl, #1
   16e74:	9304      	str	r3, [sp, #16]
   16e76:	9307      	str	r3, [sp, #28]
   16e78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   16e7c:	931a      	str	r3, [sp, #104]	; 0x68
   16e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   16e82:	4654      	mov	r4, sl
   16e84:	2205      	movs	r2, #5
   16e86:	4857      	ldr	r0, [pc, #348]	; (16fe4 <_vfiprintf_r+0x244>)
   16e88:	f814 1b01 	ldrb.w	r1, [r4], #1
   16e8c:	f003 fc0c 	bl	1a6a8 <memchr>
   16e90:	9b04      	ldr	r3, [sp, #16]
   16e92:	b9d0      	cbnz	r0, 16eca <_vfiprintf_r+0x12a>
   16e94:	06d9      	lsls	r1, r3, #27
   16e96:	bf44      	itt	mi
   16e98:	2220      	movmi	r2, #32
   16e9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   16e9e:	071a      	lsls	r2, r3, #28
   16ea0:	bf44      	itt	mi
   16ea2:	222b      	movmi	r2, #43	; 0x2b
   16ea4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   16ea8:	f89a 2000 	ldrb.w	r2, [sl]
   16eac:	2a2a      	cmp	r2, #42	; 0x2a
   16eae:	d014      	beq.n	16eda <_vfiprintf_r+0x13a>
   16eb0:	9a07      	ldr	r2, [sp, #28]
   16eb2:	4654      	mov	r4, sl
   16eb4:	2000      	movs	r0, #0
   16eb6:	f04f 0c0a 	mov.w	ip, #10
   16eba:	4621      	mov	r1, r4
   16ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
   16ec0:	3b30      	subs	r3, #48	; 0x30
   16ec2:	2b09      	cmp	r3, #9
   16ec4:	d94a      	bls.n	16f5c <_vfiprintf_r+0x1bc>
   16ec6:	b970      	cbnz	r0, 16ee6 <_vfiprintf_r+0x146>
   16ec8:	e014      	b.n	16ef4 <_vfiprintf_r+0x154>
   16eca:	eba0 0008 	sub.w	r0, r0, r8
   16ece:	46a2      	mov	sl, r4
   16ed0:	fa09 f000 	lsl.w	r0, r9, r0
   16ed4:	4318      	orrs	r0, r3
   16ed6:	9004      	str	r0, [sp, #16]
   16ed8:	e7d3      	b.n	16e82 <_vfiprintf_r+0xe2>
   16eda:	9a03      	ldr	r2, [sp, #12]
   16edc:	1d11      	adds	r1, r2, #4
   16ede:	6812      	ldr	r2, [r2, #0]
   16ee0:	2a00      	cmp	r2, #0
   16ee2:	9103      	str	r1, [sp, #12]
   16ee4:	db01      	blt.n	16eea <_vfiprintf_r+0x14a>
   16ee6:	9207      	str	r2, [sp, #28]
   16ee8:	e004      	b.n	16ef4 <_vfiprintf_r+0x154>
   16eea:	4252      	negs	r2, r2
   16eec:	f043 0302 	orr.w	r3, r3, #2
   16ef0:	9207      	str	r2, [sp, #28]
   16ef2:	9304      	str	r3, [sp, #16]
   16ef4:	7823      	ldrb	r3, [r4, #0]
   16ef6:	2b2e      	cmp	r3, #46	; 0x2e
   16ef8:	d10a      	bne.n	16f10 <_vfiprintf_r+0x170>
   16efa:	7863      	ldrb	r3, [r4, #1]
   16efc:	2b2a      	cmp	r3, #42	; 0x2a
   16efe:	d132      	bne.n	16f66 <_vfiprintf_r+0x1c6>
   16f00:	9b03      	ldr	r3, [sp, #12]
   16f02:	3402      	adds	r4, #2
   16f04:	1d1a      	adds	r2, r3, #4
   16f06:	681b      	ldr	r3, [r3, #0]
   16f08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   16f0c:	9203      	str	r2, [sp, #12]
   16f0e:	9305      	str	r3, [sp, #20]
   16f10:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 16ff4 <_vfiprintf_r+0x254>
   16f14:	2203      	movs	r2, #3
   16f16:	7821      	ldrb	r1, [r4, #0]
   16f18:	4650      	mov	r0, sl
   16f1a:	f003 fbc5 	bl	1a6a8 <memchr>
   16f1e:	b138      	cbz	r0, 16f30 <_vfiprintf_r+0x190>
   16f20:	eba0 000a 	sub.w	r0, r0, sl
   16f24:	2240      	movs	r2, #64	; 0x40
   16f26:	9b04      	ldr	r3, [sp, #16]
   16f28:	3401      	adds	r4, #1
   16f2a:	4082      	lsls	r2, r0
   16f2c:	4313      	orrs	r3, r2
   16f2e:	9304      	str	r3, [sp, #16]
   16f30:	f814 1b01 	ldrb.w	r1, [r4], #1
   16f34:	2206      	movs	r2, #6
   16f36:	482c      	ldr	r0, [pc, #176]	; (16fe8 <_vfiprintf_r+0x248>)
   16f38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   16f3c:	f003 fbb4 	bl	1a6a8 <memchr>
   16f40:	2800      	cmp	r0, #0
   16f42:	d03f      	beq.n	16fc4 <_vfiprintf_r+0x224>
   16f44:	4b29      	ldr	r3, [pc, #164]	; (16fec <_vfiprintf_r+0x24c>)
   16f46:	bb1b      	cbnz	r3, 16f90 <_vfiprintf_r+0x1f0>
   16f48:	9b03      	ldr	r3, [sp, #12]
   16f4a:	3307      	adds	r3, #7
   16f4c:	f023 0307 	bic.w	r3, r3, #7
   16f50:	3308      	adds	r3, #8
   16f52:	9303      	str	r3, [sp, #12]
   16f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16f56:	443b      	add	r3, r7
   16f58:	9309      	str	r3, [sp, #36]	; 0x24
   16f5a:	e76b      	b.n	16e34 <_vfiprintf_r+0x94>
   16f5c:	fb0c 3202 	mla	r2, ip, r2, r3
   16f60:	460c      	mov	r4, r1
   16f62:	2001      	movs	r0, #1
   16f64:	e7a9      	b.n	16eba <_vfiprintf_r+0x11a>
   16f66:	2300      	movs	r3, #0
   16f68:	3401      	adds	r4, #1
   16f6a:	f04f 0c0a 	mov.w	ip, #10
   16f6e:	4619      	mov	r1, r3
   16f70:	9305      	str	r3, [sp, #20]
   16f72:	4620      	mov	r0, r4
   16f74:	f810 2b01 	ldrb.w	r2, [r0], #1
   16f78:	3a30      	subs	r2, #48	; 0x30
   16f7a:	2a09      	cmp	r2, #9
   16f7c:	d903      	bls.n	16f86 <_vfiprintf_r+0x1e6>
   16f7e:	2b00      	cmp	r3, #0
   16f80:	d0c6      	beq.n	16f10 <_vfiprintf_r+0x170>
   16f82:	9105      	str	r1, [sp, #20]
   16f84:	e7c4      	b.n	16f10 <_vfiprintf_r+0x170>
   16f86:	fb0c 2101 	mla	r1, ip, r1, r2
   16f8a:	4604      	mov	r4, r0
   16f8c:	2301      	movs	r3, #1
   16f8e:	e7f0      	b.n	16f72 <_vfiprintf_r+0x1d2>
   16f90:	ab03      	add	r3, sp, #12
   16f92:	462a      	mov	r2, r5
   16f94:	a904      	add	r1, sp, #16
   16f96:	4630      	mov	r0, r6
   16f98:	9300      	str	r3, [sp, #0]
   16f9a:	4b15      	ldr	r3, [pc, #84]	; (16ff0 <_vfiprintf_r+0x250>)
   16f9c:	f7fe fb00 	bl	155a0 <_printf_float>
   16fa0:	4607      	mov	r7, r0
   16fa2:	1c78      	adds	r0, r7, #1
   16fa4:	d1d6      	bne.n	16f54 <_vfiprintf_r+0x1b4>
   16fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   16fa8:	07d9      	lsls	r1, r3, #31
   16faa:	d405      	bmi.n	16fb8 <_vfiprintf_r+0x218>
   16fac:	89ab      	ldrh	r3, [r5, #12]
   16fae:	059a      	lsls	r2, r3, #22
   16fb0:	d402      	bmi.n	16fb8 <_vfiprintf_r+0x218>
   16fb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
   16fb4:	f001 f81c 	bl	17ff0 <__retarget_lock_release_recursive>
   16fb8:	89ab      	ldrh	r3, [r5, #12]
   16fba:	065b      	lsls	r3, r3, #25
   16fbc:	f53f af16 	bmi.w	16dec <_vfiprintf_r+0x4c>
   16fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
   16fc2:	e715      	b.n	16df0 <_vfiprintf_r+0x50>
   16fc4:	ab03      	add	r3, sp, #12
   16fc6:	462a      	mov	r2, r5
   16fc8:	a904      	add	r1, sp, #16
   16fca:	4630      	mov	r0, r6
   16fcc:	9300      	str	r3, [sp, #0]
   16fce:	4b08      	ldr	r3, [pc, #32]	; (16ff0 <_vfiprintf_r+0x250>)
   16fd0:	f7fe fd1a 	bl	15a08 <_printf_i>
   16fd4:	e7e4      	b.n	16fa0 <_vfiprintf_r+0x200>
   16fd6:	bf00      	nop
   16fd8:	0001bde4 	.word	0x0001bde4
   16fdc:	0001bdc4 	.word	0x0001bdc4
   16fe0:	0001bda4 	.word	0x0001bda4
   16fe4:	0001e279 	.word	0x0001e279
   16fe8:	0001e283 	.word	0x0001e283
   16fec:	000155a1 	.word	0x000155a1
   16ff0:	0001aedd 	.word	0x0001aedd
   16ff4:	0001e27f 	.word	0x0001e27f

00016ff8 <_scanf_chars>:
   16ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16ffc:	4615      	mov	r5, r2
   16ffe:	688a      	ldr	r2, [r1, #8]
   17000:	4680      	mov	r8, r0
   17002:	460c      	mov	r4, r1
   17004:	b932      	cbnz	r2, 17014 <_scanf_chars+0x1c>
   17006:	698a      	ldr	r2, [r1, #24]
   17008:	2a00      	cmp	r2, #0
   1700a:	bf14      	ite	ne
   1700c:	f04f 32ff 	movne.w	r2, #4294967295
   17010:	2201      	moveq	r2, #1
   17012:	608a      	str	r2, [r1, #8]
   17014:	6822      	ldr	r2, [r4, #0]
   17016:	2700      	movs	r7, #0
   17018:	f8df 908c 	ldr.w	r9, [pc, #140]	; 170a8 <_scanf_chars+0xb0>
   1701c:	06d1      	lsls	r1, r2, #27
   1701e:	bf5f      	itttt	pl
   17020:	681a      	ldrpl	r2, [r3, #0]
   17022:	1d11      	addpl	r1, r2, #4
   17024:	6019      	strpl	r1, [r3, #0]
   17026:	6816      	ldrpl	r6, [r2, #0]
   17028:	69a0      	ldr	r0, [r4, #24]
   1702a:	b188      	cbz	r0, 17050 <_scanf_chars+0x58>
   1702c:	2801      	cmp	r0, #1
   1702e:	d107      	bne.n	17040 <_scanf_chars+0x48>
   17030:	682b      	ldr	r3, [r5, #0]
   17032:	781a      	ldrb	r2, [r3, #0]
   17034:	6963      	ldr	r3, [r4, #20]
   17036:	5c9b      	ldrb	r3, [r3, r2]
   17038:	b953      	cbnz	r3, 17050 <_scanf_chars+0x58>
   1703a:	2f00      	cmp	r7, #0
   1703c:	d031      	beq.n	170a2 <_scanf_chars+0xaa>
   1703e:	e022      	b.n	17086 <_scanf_chars+0x8e>
   17040:	2802      	cmp	r0, #2
   17042:	d120      	bne.n	17086 <_scanf_chars+0x8e>
   17044:	682b      	ldr	r3, [r5, #0]
   17046:	781b      	ldrb	r3, [r3, #0]
   17048:	f819 3003 	ldrb.w	r3, [r9, r3]
   1704c:	071b      	lsls	r3, r3, #28
   1704e:	d41a      	bmi.n	17086 <_scanf_chars+0x8e>
   17050:	6823      	ldr	r3, [r4, #0]
   17052:	3701      	adds	r7, #1
   17054:	06da      	lsls	r2, r3, #27
   17056:	bf5e      	ittt	pl
   17058:	682b      	ldrpl	r3, [r5, #0]
   1705a:	781b      	ldrbpl	r3, [r3, #0]
   1705c:	f806 3b01 	strbpl.w	r3, [r6], #1
   17060:	682a      	ldr	r2, [r5, #0]
   17062:	686b      	ldr	r3, [r5, #4]
   17064:	3201      	adds	r2, #1
   17066:	3b01      	subs	r3, #1
   17068:	602a      	str	r2, [r5, #0]
   1706a:	68a2      	ldr	r2, [r4, #8]
   1706c:	606b      	str	r3, [r5, #4]
   1706e:	3a01      	subs	r2, #1
   17070:	60a2      	str	r2, [r4, #8]
   17072:	b142      	cbz	r2, 17086 <_scanf_chars+0x8e>
   17074:	2b00      	cmp	r3, #0
   17076:	dcd7      	bgt.n	17028 <_scanf_chars+0x30>
   17078:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   1707c:	4629      	mov	r1, r5
   1707e:	4640      	mov	r0, r8
   17080:	4798      	blx	r3
   17082:	2800      	cmp	r0, #0
   17084:	d0d0      	beq.n	17028 <_scanf_chars+0x30>
   17086:	6823      	ldr	r3, [r4, #0]
   17088:	f013 0310 	ands.w	r3, r3, #16
   1708c:	d105      	bne.n	1709a <_scanf_chars+0xa2>
   1708e:	68e2      	ldr	r2, [r4, #12]
   17090:	3201      	adds	r2, #1
   17092:	60e2      	str	r2, [r4, #12]
   17094:	69a2      	ldr	r2, [r4, #24]
   17096:	b102      	cbz	r2, 1709a <_scanf_chars+0xa2>
   17098:	7033      	strb	r3, [r6, #0]
   1709a:	6923      	ldr	r3, [r4, #16]
   1709c:	2000      	movs	r0, #0
   1709e:	443b      	add	r3, r7
   170a0:	6123      	str	r3, [r4, #16]
   170a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   170a6:	bf00      	nop
   170a8:	0001e02d 	.word	0x0001e02d

000170ac <_scanf_i>:
   170ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170b0:	4698      	mov	r8, r3
   170b2:	b087      	sub	sp, #28
   170b4:	4b78      	ldr	r3, [pc, #480]	; (17298 <_scanf_i+0x1ec>)
   170b6:	460c      	mov	r4, r1
   170b8:	4682      	mov	sl, r0
   170ba:	4616      	mov	r6, r2
   170bc:	4627      	mov	r7, r4
   170be:	f04f 0b00 	mov.w	fp, #0
   170c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   170c6:	ab03      	add	r3, sp, #12
   170c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   170cc:	4b73      	ldr	r3, [pc, #460]	; (1729c <_scanf_i+0x1f0>)
   170ce:	69a1      	ldr	r1, [r4, #24]
   170d0:	4a73      	ldr	r2, [pc, #460]	; (172a0 <_scanf_i+0x1f4>)
   170d2:	2903      	cmp	r1, #3
   170d4:	bf08      	it	eq
   170d6:	461a      	moveq	r2, r3
   170d8:	68a3      	ldr	r3, [r4, #8]
   170da:	9201      	str	r2, [sp, #4]
   170dc:	1e5a      	subs	r2, r3, #1
   170de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   170e2:	bf89      	itett	hi
   170e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   170e8:	f04f 0900 	movls.w	r9, #0
   170ec:	eb03 0905 	addhi.w	r9, r3, r5
   170f0:	f240 135d 	movwhi	r3, #349	; 0x15d
   170f4:	bf88      	it	hi
   170f6:	60a3      	strhi	r3, [r4, #8]
   170f8:	f857 3b1c 	ldr.w	r3, [r7], #28
   170fc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   17100:	463d      	mov	r5, r7
   17102:	6023      	str	r3, [r4, #0]
   17104:	6831      	ldr	r1, [r6, #0]
   17106:	ab03      	add	r3, sp, #12
   17108:	2202      	movs	r2, #2
   1710a:	7809      	ldrb	r1, [r1, #0]
   1710c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   17110:	f003 faca 	bl	1a6a8 <memchr>
   17114:	2800      	cmp	r0, #0
   17116:	d040      	beq.n	1719a <_scanf_i+0xee>
   17118:	f1bb 0f01 	cmp.w	fp, #1
   1711c:	d112      	bne.n	17144 <_scanf_i+0x98>
   1711e:	6862      	ldr	r2, [r4, #4]
   17120:	b92a      	cbnz	r2, 1712e <_scanf_i+0x82>
   17122:	6822      	ldr	r2, [r4, #0]
   17124:	2108      	movs	r1, #8
   17126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   1712a:	6061      	str	r1, [r4, #4]
   1712c:	6022      	str	r2, [r4, #0]
   1712e:	6822      	ldr	r2, [r4, #0]
   17130:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   17134:	6022      	str	r2, [r4, #0]
   17136:	68a2      	ldr	r2, [r4, #8]
   17138:	1e51      	subs	r1, r2, #1
   1713a:	60a1      	str	r1, [r4, #8]
   1713c:	b9da      	cbnz	r2, 17176 <_scanf_i+0xca>
   1713e:	f04f 0b02 	mov.w	fp, #2
   17142:	e7df      	b.n	17104 <_scanf_i+0x58>
   17144:	f1bb 0f02 	cmp.w	fp, #2
   17148:	d006      	beq.n	17158 <_scanf_i+0xac>
   1714a:	68a2      	ldr	r2, [r4, #8]
   1714c:	1e51      	subs	r1, r2, #1
   1714e:	60a1      	str	r1, [r4, #8]
   17150:	b98a      	cbnz	r2, 17176 <_scanf_i+0xca>
   17152:	f04f 0b01 	mov.w	fp, #1
   17156:	e7d5      	b.n	17104 <_scanf_i+0x58>
   17158:	6822      	ldr	r2, [r4, #0]
   1715a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   1715e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   17162:	d11f      	bne.n	171a4 <_scanf_i+0xf8>
   17164:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   17168:	2110      	movs	r1, #16
   1716a:	6022      	str	r2, [r4, #0]
   1716c:	68a2      	ldr	r2, [r4, #8]
   1716e:	6061      	str	r1, [r4, #4]
   17170:	1e51      	subs	r1, r2, #1
   17172:	60a1      	str	r1, [r4, #8]
   17174:	b1b2      	cbz	r2, 171a4 <_scanf_i+0xf8>
   17176:	6832      	ldr	r2, [r6, #0]
   17178:	1c51      	adds	r1, r2, #1
   1717a:	6031      	str	r1, [r6, #0]
   1717c:	7812      	ldrb	r2, [r2, #0]
   1717e:	f805 2b01 	strb.w	r2, [r5], #1
   17182:	6872      	ldr	r2, [r6, #4]
   17184:	3a01      	subs	r2, #1
   17186:	2a00      	cmp	r2, #0
   17188:	6072      	str	r2, [r6, #4]
   1718a:	dc06      	bgt.n	1719a <_scanf_i+0xee>
   1718c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   17190:	4631      	mov	r1, r6
   17192:	4650      	mov	r0, sl
   17194:	4790      	blx	r2
   17196:	2800      	cmp	r0, #0
   17198:	d174      	bne.n	17284 <_scanf_i+0x1d8>
   1719a:	f10b 0b01 	add.w	fp, fp, #1
   1719e:	f1bb 0f03 	cmp.w	fp, #3
   171a2:	d1af      	bne.n	17104 <_scanf_i+0x58>
   171a4:	6863      	ldr	r3, [r4, #4]
   171a6:	b90b      	cbnz	r3, 171ac <_scanf_i+0x100>
   171a8:	230a      	movs	r3, #10
   171aa:	6063      	str	r3, [r4, #4]
   171ac:	6863      	ldr	r3, [r4, #4]
   171ae:	f04f 0b00 	mov.w	fp, #0
   171b2:	493c      	ldr	r1, [pc, #240]	; (172a4 <_scanf_i+0x1f8>)
   171b4:	6960      	ldr	r0, [r4, #20]
   171b6:	1ac9      	subs	r1, r1, r3
   171b8:	f003 fea2 	bl	1af00 <__sccl>
   171bc:	68a3      	ldr	r3, [r4, #8]
   171be:	6822      	ldr	r2, [r4, #0]
   171c0:	b373      	cbz	r3, 17220 <_scanf_i+0x174>
   171c2:	6831      	ldr	r1, [r6, #0]
   171c4:	6960      	ldr	r0, [r4, #20]
   171c6:	f891 c000 	ldrb.w	ip, [r1]
   171ca:	f810 000c 	ldrb.w	r0, [r0, ip]
   171ce:	b338      	cbz	r0, 17220 <_scanf_i+0x174>
   171d0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   171d4:	d116      	bne.n	17204 <_scanf_i+0x158>
   171d6:	0510      	lsls	r0, r2, #20
   171d8:	d514      	bpl.n	17204 <_scanf_i+0x158>
   171da:	f10b 0b01 	add.w	fp, fp, #1
   171de:	f1b9 0f00 	cmp.w	r9, #0
   171e2:	d003      	beq.n	171ec <_scanf_i+0x140>
   171e4:	3301      	adds	r3, #1
   171e6:	f109 39ff 	add.w	r9, r9, #4294967295
   171ea:	60a3      	str	r3, [r4, #8]
   171ec:	6873      	ldr	r3, [r6, #4]
   171ee:	3b01      	subs	r3, #1
   171f0:	2b00      	cmp	r3, #0
   171f2:	6073      	str	r3, [r6, #4]
   171f4:	dd0d      	ble.n	17212 <_scanf_i+0x166>
   171f6:	6833      	ldr	r3, [r6, #0]
   171f8:	3301      	adds	r3, #1
   171fa:	6033      	str	r3, [r6, #0]
   171fc:	68a3      	ldr	r3, [r4, #8]
   171fe:	3b01      	subs	r3, #1
   17200:	60a3      	str	r3, [r4, #8]
   17202:	e7db      	b.n	171bc <_scanf_i+0x110>
   17204:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   17208:	6022      	str	r2, [r4, #0]
   1720a:	780b      	ldrb	r3, [r1, #0]
   1720c:	f805 3b01 	strb.w	r3, [r5], #1
   17210:	e7ec      	b.n	171ec <_scanf_i+0x140>
   17212:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   17216:	4631      	mov	r1, r6
   17218:	4650      	mov	r0, sl
   1721a:	4798      	blx	r3
   1721c:	2800      	cmp	r0, #0
   1721e:	d0ed      	beq.n	171fc <_scanf_i+0x150>
   17220:	6823      	ldr	r3, [r4, #0]
   17222:	05d9      	lsls	r1, r3, #23
   17224:	d50d      	bpl.n	17242 <_scanf_i+0x196>
   17226:	42bd      	cmp	r5, r7
   17228:	d909      	bls.n	1723e <_scanf_i+0x192>
   1722a:	f105 39ff 	add.w	r9, r5, #4294967295
   1722e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   17232:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   17236:	4632      	mov	r2, r6
   17238:	464d      	mov	r5, r9
   1723a:	4650      	mov	r0, sl
   1723c:	4798      	blx	r3
   1723e:	42bd      	cmp	r5, r7
   17240:	d028      	beq.n	17294 <_scanf_i+0x1e8>
   17242:	6822      	ldr	r2, [r4, #0]
   17244:	f012 0210 	ands.w	r2, r2, #16
   17248:	d113      	bne.n	17272 <_scanf_i+0x1c6>
   1724a:	702a      	strb	r2, [r5, #0]
   1724c:	4639      	mov	r1, r7
   1724e:	6863      	ldr	r3, [r4, #4]
   17250:	4650      	mov	r0, sl
   17252:	9e01      	ldr	r6, [sp, #4]
   17254:	47b0      	blx	r6
   17256:	f8d8 3000 	ldr.w	r3, [r8]
   1725a:	6821      	ldr	r1, [r4, #0]
   1725c:	1d1a      	adds	r2, r3, #4
   1725e:	f011 0f20 	tst.w	r1, #32
   17262:	f8c8 2000 	str.w	r2, [r8]
   17266:	681b      	ldr	r3, [r3, #0]
   17268:	d00f      	beq.n	1728a <_scanf_i+0x1de>
   1726a:	6018      	str	r0, [r3, #0]
   1726c:	68e3      	ldr	r3, [r4, #12]
   1726e:	3301      	adds	r3, #1
   17270:	60e3      	str	r3, [r4, #12]
   17272:	1bed      	subs	r5, r5, r7
   17274:	6923      	ldr	r3, [r4, #16]
   17276:	2000      	movs	r0, #0
   17278:	445d      	add	r5, fp
   1727a:	442b      	add	r3, r5
   1727c:	6123      	str	r3, [r4, #16]
   1727e:	b007      	add	sp, #28
   17280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17284:	f04f 0b00 	mov.w	fp, #0
   17288:	e7ca      	b.n	17220 <_scanf_i+0x174>
   1728a:	07ca      	lsls	r2, r1, #31
   1728c:	bf4c      	ite	mi
   1728e:	8018      	strhmi	r0, [r3, #0]
   17290:	6018      	strpl	r0, [r3, #0]
   17292:	e7eb      	b.n	1726c <_scanf_i+0x1c0>
   17294:	2001      	movs	r0, #1
   17296:	e7f2      	b.n	1727e <_scanf_i+0x1d2>
   17298:	0001b6e0 	.word	0x0001b6e0
   1729c:	0001aa77 	.word	0x0001aa77
   172a0:	0001aa7b 	.word	0x0001aa7b
   172a4:	0001e29a 	.word	0x0001e29a

000172a8 <_read_r>:
   172a8:	b538      	push	{r3, r4, r5, lr}
   172aa:	4604      	mov	r4, r0
   172ac:	4d06      	ldr	r5, [pc, #24]	; (172c8 <_read_r+0x20>)
   172ae:	4608      	mov	r0, r1
   172b0:	4611      	mov	r1, r2
   172b2:	2200      	movs	r2, #0
   172b4:	602a      	str	r2, [r5, #0]
   172b6:	461a      	mov	r2, r3
   172b8:	f000 fe6f 	bl	17f9a <_read>
   172bc:	1c43      	adds	r3, r0, #1
   172be:	d102      	bne.n	172c6 <_read_r+0x1e>
   172c0:	682b      	ldr	r3, [r5, #0]
   172c2:	b103      	cbz	r3, 172c6 <_read_r+0x1e>
   172c4:	6023      	str	r3, [r4, #0]
   172c6:	bd38      	pop	{r3, r4, r5, pc}
   172c8:	2000d734 	.word	0x2000d734

000172cc <__swbuf_r>:
   172cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   172ce:	460e      	mov	r6, r1
   172d0:	4614      	mov	r4, r2
   172d2:	4605      	mov	r5, r0
   172d4:	b118      	cbz	r0, 172de <__swbuf_r+0x12>
   172d6:	6983      	ldr	r3, [r0, #24]
   172d8:	b90b      	cbnz	r3, 172de <__swbuf_r+0x12>
   172da:	f7fe ff2d 	bl	16138 <__sinit>
   172de:	4b21      	ldr	r3, [pc, #132]	; (17364 <__swbuf_r+0x98>)
   172e0:	429c      	cmp	r4, r3
   172e2:	d110      	bne.n	17306 <__swbuf_r+0x3a>
   172e4:	686c      	ldr	r4, [r5, #4]
   172e6:	69a3      	ldr	r3, [r4, #24]
   172e8:	60a3      	str	r3, [r4, #8]
   172ea:	89a3      	ldrh	r3, [r4, #12]
   172ec:	071a      	lsls	r2, r3, #28
   172ee:	d501      	bpl.n	172f4 <__swbuf_r+0x28>
   172f0:	6923      	ldr	r3, [r4, #16]
   172f2:	b993      	cbnz	r3, 1731a <__swbuf_r+0x4e>
   172f4:	4621      	mov	r1, r4
   172f6:	4628      	mov	r0, r5
   172f8:	f000 f83a 	bl	17370 <__swsetup_r>
   172fc:	b168      	cbz	r0, 1731a <__swbuf_r+0x4e>
   172fe:	f04f 37ff 	mov.w	r7, #4294967295
   17302:	4638      	mov	r0, r7
   17304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17306:	4b18      	ldr	r3, [pc, #96]	; (17368 <__swbuf_r+0x9c>)
   17308:	429c      	cmp	r4, r3
   1730a:	d101      	bne.n	17310 <__swbuf_r+0x44>
   1730c:	68ac      	ldr	r4, [r5, #8]
   1730e:	e7ea      	b.n	172e6 <__swbuf_r+0x1a>
   17310:	4b16      	ldr	r3, [pc, #88]	; (1736c <__swbuf_r+0xa0>)
   17312:	429c      	cmp	r4, r3
   17314:	bf08      	it	eq
   17316:	68ec      	ldreq	r4, [r5, #12]
   17318:	e7e5      	b.n	172e6 <__swbuf_r+0x1a>
   1731a:	6923      	ldr	r3, [r4, #16]
   1731c:	b2f6      	uxtb	r6, r6
   1731e:	6820      	ldr	r0, [r4, #0]
   17320:	4637      	mov	r7, r6
   17322:	1ac0      	subs	r0, r0, r3
   17324:	6963      	ldr	r3, [r4, #20]
   17326:	4283      	cmp	r3, r0
   17328:	dc05      	bgt.n	17336 <__swbuf_r+0x6a>
   1732a:	4621      	mov	r1, r4
   1732c:	4628      	mov	r0, r5
   1732e:	f000 f8a9 	bl	17484 <_fflush_r>
   17332:	2800      	cmp	r0, #0
   17334:	d1e3      	bne.n	172fe <__swbuf_r+0x32>
   17336:	68a3      	ldr	r3, [r4, #8]
   17338:	3001      	adds	r0, #1
   1733a:	3b01      	subs	r3, #1
   1733c:	60a3      	str	r3, [r4, #8]
   1733e:	6823      	ldr	r3, [r4, #0]
   17340:	1c5a      	adds	r2, r3, #1
   17342:	6022      	str	r2, [r4, #0]
   17344:	701e      	strb	r6, [r3, #0]
   17346:	6963      	ldr	r3, [r4, #20]
   17348:	4283      	cmp	r3, r0
   1734a:	d004      	beq.n	17356 <__swbuf_r+0x8a>
   1734c:	89a3      	ldrh	r3, [r4, #12]
   1734e:	07db      	lsls	r3, r3, #31
   17350:	d5d7      	bpl.n	17302 <__swbuf_r+0x36>
   17352:	2e0a      	cmp	r6, #10
   17354:	d1d5      	bne.n	17302 <__swbuf_r+0x36>
   17356:	4621      	mov	r1, r4
   17358:	4628      	mov	r0, r5
   1735a:	f000 f893 	bl	17484 <_fflush_r>
   1735e:	2800      	cmp	r0, #0
   17360:	d0cf      	beq.n	17302 <__swbuf_r+0x36>
   17362:	e7cc      	b.n	172fe <__swbuf_r+0x32>
   17364:	0001bde4 	.word	0x0001bde4
   17368:	0001bdc4 	.word	0x0001bdc4
   1736c:	0001bda4 	.word	0x0001bda4

00017370 <__swsetup_r>:
   17370:	4b31      	ldr	r3, [pc, #196]	; (17438 <__swsetup_r+0xc8>)
   17372:	b570      	push	{r4, r5, r6, lr}
   17374:	681d      	ldr	r5, [r3, #0]
   17376:	4606      	mov	r6, r0
   17378:	460c      	mov	r4, r1
   1737a:	b125      	cbz	r5, 17386 <__swsetup_r+0x16>
   1737c:	69ab      	ldr	r3, [r5, #24]
   1737e:	b913      	cbnz	r3, 17386 <__swsetup_r+0x16>
   17380:	4628      	mov	r0, r5
   17382:	f7fe fed9 	bl	16138 <__sinit>
   17386:	4b2d      	ldr	r3, [pc, #180]	; (1743c <__swsetup_r+0xcc>)
   17388:	429c      	cmp	r4, r3
   1738a:	d10e      	bne.n	173aa <__swsetup_r+0x3a>
   1738c:	686c      	ldr	r4, [r5, #4]
   1738e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17392:	071a      	lsls	r2, r3, #28
   17394:	d42c      	bmi.n	173f0 <__swsetup_r+0x80>
   17396:	06dd      	lsls	r5, r3, #27
   17398:	d411      	bmi.n	173be <__swsetup_r+0x4e>
   1739a:	2209      	movs	r2, #9
   1739c:	6032      	str	r2, [r6, #0]
   1739e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   173a2:	f04f 30ff 	mov.w	r0, #4294967295
   173a6:	81a3      	strh	r3, [r4, #12]
   173a8:	e03d      	b.n	17426 <__swsetup_r+0xb6>
   173aa:	4b25      	ldr	r3, [pc, #148]	; (17440 <__swsetup_r+0xd0>)
   173ac:	429c      	cmp	r4, r3
   173ae:	d101      	bne.n	173b4 <__swsetup_r+0x44>
   173b0:	68ac      	ldr	r4, [r5, #8]
   173b2:	e7ec      	b.n	1738e <__swsetup_r+0x1e>
   173b4:	4b23      	ldr	r3, [pc, #140]	; (17444 <__swsetup_r+0xd4>)
   173b6:	429c      	cmp	r4, r3
   173b8:	bf08      	it	eq
   173ba:	68ec      	ldreq	r4, [r5, #12]
   173bc:	e7e7      	b.n	1738e <__swsetup_r+0x1e>
   173be:	0758      	lsls	r0, r3, #29
   173c0:	d512      	bpl.n	173e8 <__swsetup_r+0x78>
   173c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   173c4:	b141      	cbz	r1, 173d8 <__swsetup_r+0x68>
   173c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
   173ca:	4299      	cmp	r1, r3
   173cc:	d002      	beq.n	173d4 <__swsetup_r+0x64>
   173ce:	4630      	mov	r0, r6
   173d0:	f7fe f842 	bl	15458 <_free_r>
   173d4:	2300      	movs	r3, #0
   173d6:	6363      	str	r3, [r4, #52]	; 0x34
   173d8:	89a3      	ldrh	r3, [r4, #12]
   173da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   173de:	81a3      	strh	r3, [r4, #12]
   173e0:	2300      	movs	r3, #0
   173e2:	6063      	str	r3, [r4, #4]
   173e4:	6923      	ldr	r3, [r4, #16]
   173e6:	6023      	str	r3, [r4, #0]
   173e8:	89a3      	ldrh	r3, [r4, #12]
   173ea:	f043 0308 	orr.w	r3, r3, #8
   173ee:	81a3      	strh	r3, [r4, #12]
   173f0:	6923      	ldr	r3, [r4, #16]
   173f2:	b94b      	cbnz	r3, 17408 <__swsetup_r+0x98>
   173f4:	89a3      	ldrh	r3, [r4, #12]
   173f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
   173fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   173fe:	d003      	beq.n	17408 <__swsetup_r+0x98>
   17400:	4621      	mov	r1, r4
   17402:	4630      	mov	r0, r6
   17404:	f000 f88c 	bl	17520 <__smakebuf_r>
   17408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1740c:	f013 0201 	ands.w	r2, r3, #1
   17410:	d00a      	beq.n	17428 <__swsetup_r+0xb8>
   17412:	2200      	movs	r2, #0
   17414:	60a2      	str	r2, [r4, #8]
   17416:	6962      	ldr	r2, [r4, #20]
   17418:	4252      	negs	r2, r2
   1741a:	61a2      	str	r2, [r4, #24]
   1741c:	6922      	ldr	r2, [r4, #16]
   1741e:	b942      	cbnz	r2, 17432 <__swsetup_r+0xc2>
   17420:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   17424:	d1bb      	bne.n	1739e <__swsetup_r+0x2e>
   17426:	bd70      	pop	{r4, r5, r6, pc}
   17428:	0799      	lsls	r1, r3, #30
   1742a:	bf58      	it	pl
   1742c:	6962      	ldrpl	r2, [r4, #20]
   1742e:	60a2      	str	r2, [r4, #8]
   17430:	e7f4      	b.n	1741c <__swsetup_r+0xac>
   17432:	2000      	movs	r0, #0
   17434:	e7f7      	b.n	17426 <__swsetup_r+0xb6>
   17436:	bf00      	nop
   17438:	2000c6c0 	.word	0x2000c6c0
   1743c:	0001bde4 	.word	0x0001bde4
   17440:	0001bdc4 	.word	0x0001bdc4
   17444:	0001bda4 	.word	0x0001bda4

00017448 <__assert_func>:
   17448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1744a:	4614      	mov	r4, r2
   1744c:	461a      	mov	r2, r3
   1744e:	4b09      	ldr	r3, [pc, #36]	; (17474 <__assert_func+0x2c>)
   17450:	4605      	mov	r5, r0
   17452:	681b      	ldr	r3, [r3, #0]
   17454:	68d8      	ldr	r0, [r3, #12]
   17456:	b954      	cbnz	r4, 1746e <__assert_func+0x26>
   17458:	4b07      	ldr	r3, [pc, #28]	; (17478 <__assert_func+0x30>)
   1745a:	461c      	mov	r4, r3
   1745c:	9100      	str	r1, [sp, #0]
   1745e:	4907      	ldr	r1, [pc, #28]	; (1747c <__assert_func+0x34>)
   17460:	e9cd 3401 	strd	r3, r4, [sp, #4]
   17464:	462b      	mov	r3, r5
   17466:	f000 f849 	bl	174fc <fiprintf>
   1746a:	f003 febf 	bl	1b1ec <abort>
   1746e:	4b04      	ldr	r3, [pc, #16]	; (17480 <__assert_func+0x38>)
   17470:	e7f4      	b.n	1745c <__assert_func+0x14>
   17472:	bf00      	nop
   17474:	2000c6c0 	.word	0x2000c6c0
   17478:	0001dd7f 	.word	0x0001dd7f
   1747c:	0001e2af 	.word	0x0001e2af
   17480:	0001e2a2 	.word	0x0001e2a2

00017484 <_fflush_r>:
   17484:	b538      	push	{r3, r4, r5, lr}
   17486:	690b      	ldr	r3, [r1, #16]
   17488:	4605      	mov	r5, r0
   1748a:	460c      	mov	r4, r1
   1748c:	b913      	cbnz	r3, 17494 <_fflush_r+0x10>
   1748e:	2500      	movs	r5, #0
   17490:	4628      	mov	r0, r5
   17492:	bd38      	pop	{r3, r4, r5, pc}
   17494:	b118      	cbz	r0, 1749e <_fflush_r+0x1a>
   17496:	6983      	ldr	r3, [r0, #24]
   17498:	b90b      	cbnz	r3, 1749e <_fflush_r+0x1a>
   1749a:	f7fe fe4d 	bl	16138 <__sinit>
   1749e:	4b14      	ldr	r3, [pc, #80]	; (174f0 <_fflush_r+0x6c>)
   174a0:	429c      	cmp	r4, r3
   174a2:	d11b      	bne.n	174dc <_fflush_r+0x58>
   174a4:	686c      	ldr	r4, [r5, #4]
   174a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   174aa:	2b00      	cmp	r3, #0
   174ac:	d0ef      	beq.n	1748e <_fflush_r+0xa>
   174ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
   174b0:	07d0      	lsls	r0, r2, #31
   174b2:	d404      	bmi.n	174be <_fflush_r+0x3a>
   174b4:	0599      	lsls	r1, r3, #22
   174b6:	d402      	bmi.n	174be <_fflush_r+0x3a>
   174b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   174ba:	f000 fd93 	bl	17fe4 <__retarget_lock_acquire_recursive>
   174be:	4628      	mov	r0, r5
   174c0:	4621      	mov	r1, r4
   174c2:	f003 fd8d 	bl	1afe0 <__sflush_r>
   174c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   174c8:	4605      	mov	r5, r0
   174ca:	07da      	lsls	r2, r3, #31
   174cc:	d4e0      	bmi.n	17490 <_fflush_r+0xc>
   174ce:	89a3      	ldrh	r3, [r4, #12]
   174d0:	059b      	lsls	r3, r3, #22
   174d2:	d4dd      	bmi.n	17490 <_fflush_r+0xc>
   174d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   174d6:	f000 fd8b 	bl	17ff0 <__retarget_lock_release_recursive>
   174da:	e7d9      	b.n	17490 <_fflush_r+0xc>
   174dc:	4b05      	ldr	r3, [pc, #20]	; (174f4 <_fflush_r+0x70>)
   174de:	429c      	cmp	r4, r3
   174e0:	d101      	bne.n	174e6 <_fflush_r+0x62>
   174e2:	68ac      	ldr	r4, [r5, #8]
   174e4:	e7df      	b.n	174a6 <_fflush_r+0x22>
   174e6:	4b04      	ldr	r3, [pc, #16]	; (174f8 <_fflush_r+0x74>)
   174e8:	429c      	cmp	r4, r3
   174ea:	bf08      	it	eq
   174ec:	68ec      	ldreq	r4, [r5, #12]
   174ee:	e7da      	b.n	174a6 <_fflush_r+0x22>
   174f0:	0001bde4 	.word	0x0001bde4
   174f4:	0001bdc4 	.word	0x0001bdc4
   174f8:	0001bda4 	.word	0x0001bda4

000174fc <fiprintf>:
   174fc:	b40e      	push	{r1, r2, r3}
   174fe:	b503      	push	{r0, r1, lr}
   17500:	ab03      	add	r3, sp, #12
   17502:	4601      	mov	r1, r0
   17504:	4805      	ldr	r0, [pc, #20]	; (1751c <fiprintf+0x20>)
   17506:	f853 2b04 	ldr.w	r2, [r3], #4
   1750a:	6800      	ldr	r0, [r0, #0]
   1750c:	9301      	str	r3, [sp, #4]
   1750e:	f7ff fc47 	bl	16da0 <_vfiprintf_r>
   17512:	b002      	add	sp, #8
   17514:	f85d eb04 	ldr.w	lr, [sp], #4
   17518:	b003      	add	sp, #12
   1751a:	4770      	bx	lr
   1751c:	2000c6c0 	.word	0x2000c6c0

00017520 <__smakebuf_r>:
   17520:	898b      	ldrh	r3, [r1, #12]
   17522:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17524:	079d      	lsls	r5, r3, #30
   17526:	4606      	mov	r6, r0
   17528:	460c      	mov	r4, r1
   1752a:	d507      	bpl.n	1753c <__smakebuf_r+0x1c>
   1752c:	f104 0347 	add.w	r3, r4, #71	; 0x47
   17530:	6023      	str	r3, [r4, #0]
   17532:	6123      	str	r3, [r4, #16]
   17534:	2301      	movs	r3, #1
   17536:	6163      	str	r3, [r4, #20]
   17538:	b003      	add	sp, #12
   1753a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1753c:	ab01      	add	r3, sp, #4
   1753e:	466a      	mov	r2, sp
   17540:	f003 fdd1 	bl	1b0e6 <__swhatbuf_r>
   17544:	9f00      	ldr	r7, [sp, #0]
   17546:	4605      	mov	r5, r0
   17548:	4630      	mov	r0, r6
   1754a:	4639      	mov	r1, r7
   1754c:	f7fd ffce 	bl	154ec <_malloc_r>
   17550:	b948      	cbnz	r0, 17566 <__smakebuf_r+0x46>
   17552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17556:	059a      	lsls	r2, r3, #22
   17558:	d4ee      	bmi.n	17538 <__smakebuf_r+0x18>
   1755a:	f023 0303 	bic.w	r3, r3, #3
   1755e:	f043 0302 	orr.w	r3, r3, #2
   17562:	81a3      	strh	r3, [r4, #12]
   17564:	e7e2      	b.n	1752c <__smakebuf_r+0xc>
   17566:	4b0d      	ldr	r3, [pc, #52]	; (1759c <__smakebuf_r+0x7c>)
   17568:	62b3      	str	r3, [r6, #40]	; 0x28
   1756a:	89a3      	ldrh	r3, [r4, #12]
   1756c:	6020      	str	r0, [r4, #0]
   1756e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17572:	81a3      	strh	r3, [r4, #12]
   17574:	9b01      	ldr	r3, [sp, #4]
   17576:	e9c4 0704 	strd	r0, r7, [r4, #16]
   1757a:	b15b      	cbz	r3, 17594 <__smakebuf_r+0x74>
   1757c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   17580:	4630      	mov	r0, r6
   17582:	f000 f81f 	bl	175c4 <_isatty_r>
   17586:	b128      	cbz	r0, 17594 <__smakebuf_r+0x74>
   17588:	89a3      	ldrh	r3, [r4, #12]
   1758a:	f023 0303 	bic.w	r3, r3, #3
   1758e:	f043 0301 	orr.w	r3, r3, #1
   17592:	81a3      	strh	r3, [r4, #12]
   17594:	89a3      	ldrh	r3, [r4, #12]
   17596:	431d      	orrs	r5, r3
   17598:	81a5      	strh	r5, [r4, #12]
   1759a:	e7cd      	b.n	17538 <__smakebuf_r+0x18>
   1759c:	000160fd 	.word	0x000160fd

000175a0 <_fstat_r>:
   175a0:	b538      	push	{r3, r4, r5, lr}
   175a2:	2300      	movs	r3, #0
   175a4:	4d06      	ldr	r5, [pc, #24]	; (175c0 <_fstat_r+0x20>)
   175a6:	4604      	mov	r4, r0
   175a8:	4608      	mov	r0, r1
   175aa:	4611      	mov	r1, r2
   175ac:	602b      	str	r3, [r5, #0]
   175ae:	f000 fd0a 	bl	17fc6 <_fstat>
   175b2:	1c43      	adds	r3, r0, #1
   175b4:	d102      	bne.n	175bc <_fstat_r+0x1c>
   175b6:	682b      	ldr	r3, [r5, #0]
   175b8:	b103      	cbz	r3, 175bc <_fstat_r+0x1c>
   175ba:	6023      	str	r3, [r4, #0]
   175bc:	bd38      	pop	{r3, r4, r5, pc}
   175be:	bf00      	nop
   175c0:	2000d734 	.word	0x2000d734

000175c4 <_isatty_r>:
   175c4:	b538      	push	{r3, r4, r5, lr}
   175c6:	2300      	movs	r3, #0
   175c8:	4d05      	ldr	r5, [pc, #20]	; (175e0 <_isatty_r+0x1c>)
   175ca:	4604      	mov	r4, r0
   175cc:	4608      	mov	r0, r1
   175ce:	602b      	str	r3, [r5, #0]
   175d0:	f000 fcf0 	bl	17fb4 <_isatty>
   175d4:	1c43      	adds	r3, r0, #1
   175d6:	d102      	bne.n	175de <_isatty_r+0x1a>
   175d8:	682b      	ldr	r3, [r5, #0]
   175da:	b103      	cbz	r3, 175de <_isatty_r+0x1a>
   175dc:	6023      	str	r3, [r4, #0]
   175de:	bd38      	pop	{r3, r4, r5, pc}
   175e0:	2000d734 	.word	0x2000d734

000175e4 <raise>:
   175e4:	4b02      	ldr	r3, [pc, #8]	; (175f0 <raise+0xc>)
   175e6:	4601      	mov	r1, r0
   175e8:	6818      	ldr	r0, [r3, #0]
   175ea:	f003 be0e 	b.w	1b20a <_raise_r>
   175ee:	bf00      	nop
   175f0:	2000c6c0 	.word	0x2000c6c0

000175f4 <_kill_r>:
   175f4:	b538      	push	{r3, r4, r5, lr}
   175f6:	2300      	movs	r3, #0
   175f8:	4d06      	ldr	r5, [pc, #24]	; (17614 <_kill_r+0x20>)
   175fa:	4604      	mov	r4, r0
   175fc:	4608      	mov	r0, r1
   175fe:	4611      	mov	r1, r2
   17600:	602b      	str	r3, [r5, #0]
   17602:	f000 fcdc 	bl	17fbe <_kill>
   17606:	1c43      	adds	r3, r0, #1
   17608:	d102      	bne.n	17610 <_kill_r+0x1c>
   1760a:	682b      	ldr	r3, [r5, #0]
   1760c:	b103      	cbz	r3, 17610 <_kill_r+0x1c>
   1760e:	6023      	str	r3, [r4, #0]
   17610:	bd38      	pop	{r3, r4, r5, pc}
   17612:	bf00      	nop
   17614:	2000d734 	.word	0x2000d734

00017618 <gpio_pin_configure_dt>:
{
   17618:	4603      	mov	r3, r0
   1761a:	b470      	push	{r4, r5, r6}
   1761c:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
   1761e:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   17620:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   17622:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   17624:	4322      	orrs	r2, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
   17626:	2401      	movs	r4, #1
	struct gpio_driver_data *data =
   17628:	6905      	ldr	r5, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1762a:	408c      	lsls	r4, r1
   1762c:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1762e:	f012 0f01 	tst.w	r2, #1
	const struct gpio_driver_api *api =
   17632:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   17634:	bf14      	ite	ne
   17636:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   17638:	43a3      	biceq	r3, r4
   1763a:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   1763c:	6833      	ldr	r3, [r6, #0]
}
   1763e:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   17640:	4718      	bx	r3

00017642 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   17642:	4601      	mov	r1, r0
   17644:	f240 30e7 	movw	r0, #999	; 0x3e7
   17648:	b508      	push	{r3, lr}
   1764a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1764e:	2300      	movs	r3, #0
   17650:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   17654:	1449      	asrs	r1, r1, #17
   17656:	f7f1 f995 	bl	8984 <__aeabi_uldivmod>
}
   1765a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   1765e:	f7fd bc3d 	b.w	14edc <z_impl_k_sleep>

00017662 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
   17662:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17666:	4606      	mov	r6, r0
   17668:	460d      	mov	r5, r1
   1766a:	4617      	mov	r7, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
   1766c:	4698      	mov	r8, r3
   1766e:	b32b      	cbz	r3, 176bc <cbpprintf_external+0x5a>
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   17670:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   17674:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   17678:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1767c:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   1767e:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   17680:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   17684:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   17688:	441c      	add	r4, r3
   1768a:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   1768c:	45ca      	cmp	sl, r9
   1768e:	d309      	bcc.n	176a4 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   17690:	4639      	mov	r1, r7
   17692:	4630      	mov	r0, r6
   17694:	46ac      	mov	ip, r5
   17696:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1769a:	f108 0308 	add.w	r3, r8, #8
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
   1769e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   176a2:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   176a4:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   176a8:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   176ac:	4620      	mov	r0, r4
		*ps = s;
   176ae:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   176b2:	f7f1 fb9f 	bl	8df4 <strlen>
   176b6:	3001      	adds	r0, #1
   176b8:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   176ba:	e7e7      	b.n	1768c <cbpprintf_external+0x2a>
}
   176bc:	f06f 0015 	mvn.w	r0, #21
   176c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000176c4 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   176c4:	b40c      	push	{r2, r3}
   176c6:	4603      	mov	r3, r0
   176c8:	b507      	push	{r0, r1, r2, lr}
   176ca:	4608      	mov	r0, r1
				       unsigned long request, ...)
{
	va_list args;
	int res;

	va_start(args, request);
   176cc:	aa05      	add	r2, sp, #20
	res = vtable->ioctl(obj, request, args);
   176ce:	f240 1105 	movw	r1, #261	; 0x105
   176d2:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   176d4:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   176d6:	4798      	blx	r3
	va_end(args);

	return res;
}
   176d8:	b003      	add	sp, #12
   176da:	f85d eb04 	ldr.w	lr, [sp], #4
   176de:	b002      	add	sp, #8
   176e0:	4770      	bx	lr

000176e2 <arch_printk_char_out>:
}
   176e2:	2000      	movs	r0, #0
   176e4:	4770      	bx	lr

000176e6 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   176e6:	b40f      	push	{r0, r1, r2, r3}
   176e8:	b507      	push	{r0, r1, r2, lr}
   176ea:	a904      	add	r1, sp, #16
   176ec:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   176f0:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   176f2:	f000 fb2f 	bl	17d54 <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
   176f6:	b003      	add	sp, #12
   176f8:	f85d eb04 	ldr.w	lr, [sp], #4
   176fc:	b004      	add	sp, #16
   176fe:	4770      	bx	lr

00017700 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   17700:	4604      	mov	r4, r0
   17702:	b508      	push	{r3, lr}
   17704:	4608      	mov	r0, r1
   17706:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   17708:	461a      	mov	r2, r3
   1770a:	47a0      	blx	r4
	return z_impl_z_current_get();
   1770c:	f7fd fc00 	bl	14f10 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   17710:	f7f5 fb22 	bl	cd58 <z_impl_k_thread_abort>

00017714 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   17714:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   17718:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1771a:	0840      	lsrs	r0, r0, #1
   1771c:	4770      	bx	lr

0001771e <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1771e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17720:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   17722:	f7ff fff7 	bl	17714 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   17726:	fab0 f080 	clz	r0, r0
   1772a:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1772e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   17732:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   17736:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   17738:	1d17      	adds	r7, r2, #4
{
   1773a:	460c      	mov	r4, r1
   1773c:	3206      	adds	r2, #6
   1773e:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   17740:	b956      	cbnz	r6, 17758 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   17742:	2101      	movs	r1, #1
   17744:	fa01 f000 	lsl.w	r0, r1, r0
   17748:	68d9      	ldr	r1, [r3, #12]
   1774a:	4301      	orrs	r1, r0
   1774c:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1774e:	f8cc 4010 	str.w	r4, [ip, #16]
   17752:	53dd      	strh	r5, [r3, r7]
   17754:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   17756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   17758:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1775a:	3104      	adds	r1, #4
   1775c:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1775e:	53d8      	strh	r0, [r3, r7]
   17760:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   17764:	529e      	strh	r6, [r3, r2]
   17766:	80c5      	strh	r5, [r0, #6]
   17768:	525d      	strh	r5, [r3, r1]
   1776a:	e7f4      	b.n	17756 <free_list_add+0x38>

0001776c <free_list_remove_bidx>:
{
   1776c:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1776e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   17772:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   17774:	4299      	cmp	r1, r3
   17776:	f102 0104 	add.w	r1, r2, #4
   1777a:	d10a      	bne.n	17792 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1777c:	2301      	movs	r3, #1
   1777e:	fa03 f202 	lsl.w	r2, r3, r2
   17782:	68c3      	ldr	r3, [r0, #12]
   17784:	ea23 0302 	bic.w	r3, r3, r2
   17788:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1778a:	2300      	movs	r3, #0
   1778c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   17790:	bd10      	pop	{r4, pc}
   17792:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   17794:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   17798:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1779c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   177a0:	80cb      	strh	r3, [r1, #6]
   177a2:	8082      	strh	r2, [r0, #4]
}
   177a4:	e7f4      	b.n	17790 <free_list_remove_bidx+0x24>

000177a6 <free_list_remove>:
{
   177a6:	b508      	push	{r3, lr}
   177a8:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   177aa:	f7ff ffb3 	bl	17714 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   177ae:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   177b2:	4618      	mov	r0, r3
}
   177b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   177b8:	f1c2 021f 	rsb	r2, r2, #31
   177bc:	f7ff bfd6 	b.w	1776c <free_list_remove_bidx>

000177c0 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   177c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   177c4:	fab1 f581 	clz	r5, r1
   177c8:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   177cc:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   177d0:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   177d4:	4603      	mov	r3, r0
   177d6:	460e      	mov	r6, r1
	if (b->next) {
   177d8:	b1c2      	cbz	r2, 1780c <alloc_chunk+0x4c>
   177da:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   177dc:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   177e0:	4618      	mov	r0, r3
   177e2:	4621      	mov	r1, r4
   177e4:	f7ff ff96 	bl	17714 <chunk_size>
   177e8:	42b0      	cmp	r0, r6
   177ea:	d306      	bcc.n	177fa <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   177ec:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   177ee:	4618      	mov	r0, r3
   177f0:	f7ff ffbc 	bl	1776c <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   177f4:	4620      	mov	r0, r4
   177f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   177fa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   177fe:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   17800:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   17802:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   17806:	d001      	beq.n	1780c <alloc_chunk+0x4c>
   17808:	4282      	cmp	r2, r0
   1780a:	d1e7      	bne.n	177dc <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1780c:	f04f 34ff 	mov.w	r4, #4294967295
   17810:	f1c5 0220 	rsb	r2, r5, #32
   17814:	4094      	lsls	r4, r2
   17816:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   17818:	4014      	ands	r4, r2
   1781a:	d0eb      	beq.n	177f4 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1781c:	fa94 f2a4 	rbit	r2, r4
   17820:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   17824:	1d11      	adds	r1, r2, #4
   17826:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1782a:	4621      	mov	r1, r4
   1782c:	e7df      	b.n	177ee <alloc_chunk+0x2e>

0001782e <merge_chunks>:
{
   1782e:	b538      	push	{r3, r4, r5, lr}
   17830:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   17832:	f7ff ff6f 	bl	17714 <chunk_size>
{
   17836:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   17838:	4604      	mov	r4, r0
   1783a:	4611      	mov	r1, r2
   1783c:	4618      	mov	r0, r3
   1783e:	f7ff ff69 	bl	17714 <chunk_size>
   17842:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   17844:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   17846:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1784a:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1784c:	4618      	mov	r0, r3
   1784e:	f7ff ff61 	bl	17714 <chunk_size>
	void *cmem = &buf[c];
   17852:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   17854:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   17858:	bd38      	pop	{r3, r4, r5, pc}

0001785a <split_chunks>:
{
   1785a:	b538      	push	{r3, r4, r5, lr}
   1785c:	460c      	mov	r4, r1
   1785e:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   17860:	f7ff ff58 	bl	17714 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   17864:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   17866:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   17868:	4405      	add	r5, r0
   1786a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1786e:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   17870:	8060      	strh	r0, [r4, #2]
   17872:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   17876:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   17878:	8044      	strh	r4, [r0, #2]
   1787a:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1787e:	4618      	mov	r0, r3
   17880:	4611      	mov	r1, r2
   17882:	f7ff ff47 	bl	17714 <chunk_size>
	void *cmem = &buf[c];
   17886:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   17888:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1788c:	bd38      	pop	{r3, r4, r5, pc}

0001788e <free_chunk>:
{
   1788e:	b538      	push	{r3, r4, r5, lr}
   17890:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   17892:	f7ff ff3f 	bl	17714 <chunk_size>
   17896:	460c      	mov	r4, r1
   17898:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1789a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1789e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   178a0:	07da      	lsls	r2, r3, #31
   178a2:	d40a      	bmi.n	178ba <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   178a4:	4628      	mov	r0, r5
   178a6:	f7ff ff7e 	bl	177a6 <free_list_remove>
	return c + chunk_size(h, c);
   178aa:	4621      	mov	r1, r4
   178ac:	4628      	mov	r0, r5
   178ae:	f7ff ff31 	bl	17714 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   178b2:	1822      	adds	r2, r4, r0
   178b4:	4628      	mov	r0, r5
   178b6:	f7ff ffba 	bl	1782e <merge_chunks>
		return ((uint16_t *)cmem)[f];
   178ba:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   178be:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   178c0:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   178c4:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   178c6:	07db      	lsls	r3, r3, #31
   178c8:	d40c      	bmi.n	178e4 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   178ca:	4628      	mov	r0, r5
   178cc:	f7ff ff6b 	bl	177a6 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   178d0:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   178d4:	4622      	mov	r2, r4
   178d6:	1a61      	subs	r1, r4, r1
   178d8:	4628      	mov	r0, r5
   178da:	f7ff ffa8 	bl	1782e <merge_chunks>
   178de:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   178e2:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   178e4:	4621      	mov	r1, r4
   178e6:	4628      	mov	r0, r5
}
   178e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   178ec:	f7ff bf17 	b.w	1771e <free_list_add>

000178f0 <sys_heap_free>:
	if (mem == NULL) {
   178f0:	b161      	cbz	r1, 1790c <sys_heap_free+0x1c>
   178f2:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   178f4:	3904      	subs	r1, #4
   178f6:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   178f8:	f021 0307 	bic.w	r3, r1, #7
   178fc:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   178fe:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   17900:	08c9      	lsrs	r1, r1, #3
   17902:	f022 0201 	bic.w	r2, r2, #1
   17906:	805a      	strh	r2, [r3, #2]
   17908:	f7ff bfc1 	b.w	1788e <free_chunk>
}
   1790c:	4770      	bx	lr

0001790e <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1790e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   17910:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   17912:	b909      	cbnz	r1, 17918 <sys_heap_alloc+0xa>
		return NULL;
   17914:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   17916:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   17918:	68ab      	ldr	r3, [r5, #8]
   1791a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1791e:	d9f9      	bls.n	17914 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   17920:	310b      	adds	r1, #11
   17922:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   17924:	4621      	mov	r1, r4
   17926:	4628      	mov	r0, r5
   17928:	f7ff ff4a 	bl	177c0 <alloc_chunk>
	if (c == 0U) {
   1792c:	4606      	mov	r6, r0
   1792e:	2800      	cmp	r0, #0
   17930:	d0f0      	beq.n	17914 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   17932:	4601      	mov	r1, r0
   17934:	4628      	mov	r0, r5
   17936:	f7ff feed 	bl	17714 <chunk_size>
   1793a:	42a0      	cmp	r0, r4
   1793c:	d907      	bls.n	1794e <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1793e:	4628      	mov	r0, r5
   17940:	1932      	adds	r2, r6, r4
   17942:	f7ff ff8a 	bl	1785a <split_chunks>
		free_list_add(h, c + chunk_sz);
   17946:	4611      	mov	r1, r2
   17948:	4628      	mov	r0, r5
   1794a:	f7ff fee8 	bl	1771e <free_list_add>
	void *cmem = &buf[c];
   1794e:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   17952:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   17954:	8853      	ldrh	r3, [r2, #2]
   17956:	3004      	adds	r0, #4
   17958:	f043 0301 	orr.w	r3, r3, #1
   1795c:	8053      	strh	r3, [r2, #2]
	return mem;
   1795e:	e7da      	b.n	17916 <sys_heap_alloc+0x8>

00017960 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   17960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17964:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   17968:	ea19 0901 	ands.w	r9, r9, r1
{
   1796c:	460f      	mov	r7, r1
   1796e:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   17970:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   17972:	d00c      	beq.n	1798e <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   17974:	424b      	negs	r3, r1
   17976:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   17978:	2b04      	cmp	r3, #4
   1797a:	461a      	mov	r2, r3
   1797c:	464f      	mov	r7, r9
   1797e:	bf28      	it	cs
   17980:	2204      	movcs	r2, #4
	rew = align & -align;
   17982:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   17984:	b964      	cbnz	r4, 179a0 <sys_heap_aligned_alloc+0x40>
		return NULL;
   17986:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   17988:	4628      	mov	r0, r5
   1798a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1798e:	2904      	cmp	r1, #4
   17990:	d804      	bhi.n	1799c <sys_heap_aligned_alloc+0x3c>
}
   17992:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   17996:	4611      	mov	r1, r2
   17998:	f7ff bfb9 	b.w	1790e <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   1799c:	2204      	movs	r2, #4
   1799e:	e7f1      	b.n	17984 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   179a0:	68b3      	ldr	r3, [r6, #8]
   179a2:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   179a6:	d9ee      	bls.n	17986 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   179a8:	f104 010b 	add.w	r1, r4, #11
   179ac:	4439      	add	r1, r7
   179ae:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   179b0:	4630      	mov	r0, r6
   179b2:	08c9      	lsrs	r1, r1, #3
   179b4:	f7ff ff04 	bl	177c0 <alloc_chunk>
	if (c0 == 0) {
   179b8:	4680      	mov	r8, r0
   179ba:	2800      	cmp	r0, #0
   179bc:	d0e3      	beq.n	17986 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   179be:	f109 0504 	add.w	r5, r9, #4
   179c2:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   179c6:	1e7b      	subs	r3, r7, #1
   179c8:	4435      	add	r5, r6
   179ca:	441d      	add	r5, r3
   179cc:	427f      	negs	r7, r7
   179ce:	403d      	ands	r5, r7
   179d0:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   179d4:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   179d6:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   179d8:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   179da:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   179dc:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   179e0:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   179e2:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   179e6:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   179ea:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   179ee:	d208      	bcs.n	17a02 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   179f0:	4601      	mov	r1, r0
   179f2:	463a      	mov	r2, r7
   179f4:	4630      	mov	r0, r6
   179f6:	f7ff ff30 	bl	1785a <split_chunks>
		free_list_add(h, c0);
   179fa:	4641      	mov	r1, r8
   179fc:	4630      	mov	r0, r6
   179fe:	f7ff fe8e 	bl	1771e <free_list_add>
	return c + chunk_size(h, c);
   17a02:	4639      	mov	r1, r7
   17a04:	4630      	mov	r0, r6
   17a06:	f7ff fe85 	bl	17714 <chunk_size>
   17a0a:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   17a0c:	4284      	cmp	r4, r0
   17a0e:	d207      	bcs.n	17a20 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   17a10:	4630      	mov	r0, r6
   17a12:	4622      	mov	r2, r4
   17a14:	f7ff ff21 	bl	1785a <split_chunks>
		free_list_add(h, c_end);
   17a18:	4621      	mov	r1, r4
   17a1a:	4630      	mov	r0, r6
   17a1c:	f7ff fe7f 	bl	1771e <free_list_add>
	void *cmem = &buf[c];
   17a20:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   17a24:	8873      	ldrh	r3, [r6, #2]
   17a26:	f043 0301 	orr.w	r3, r3, #1
   17a2a:	8073      	strh	r3, [r6, #2]
   17a2c:	e7ac      	b.n	17988 <sys_heap_aligned_alloc+0x28>

00017a2e <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   17a2e:	3a04      	subs	r2, #4
{
   17a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   17a34:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   17a36:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   17a38:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   17a3c:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   17a40:	1b0e      	subs	r6, r1, r4
   17a42:	08f7      	lsrs	r7, r6, #3
	return 31 - __builtin_clz(usable_sz);
   17a44:	fab7 f287 	clz	r2, r7
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   17a48:	f04f 0800 	mov.w	r8, #0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   17a4c:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
   17a50:	00ad      	lsls	r5, r5, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   17a52:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   17a54:	f1c2 0220 	rsb	r2, r2, #32
   17a58:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   17a5a:	6004      	str	r4, [r0, #0]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   17a5c:	4641      	mov	r1, r8
	h->end_chunk = heap_sz;
   17a5e:	60a7      	str	r7, [r4, #8]
	h->avail_buckets = 0;
   17a60:	f8c4 800c 	str.w	r8, [r4, #12]
		h->buckets[i].next = 0;
   17a64:	0092      	lsls	r2, r2, #2
   17a66:	f104 0010 	add.w	r0, r4, #16
   17a6a:	f002 fe48 	bl	1a6fe <memset>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   17a6e:	006b      	lsls	r3, r5, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   17a70:	f043 0301 	orr.w	r3, r3, #1
   17a74:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   17a76:	1b7b      	subs	r3, r7, r5
		((uint16_t *)cmem)[f] = val;
   17a78:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   17a7c:	0059      	lsls	r1, r3, #1
		((uint16_t *)cmem)[f] = val;
   17a7e:	f8a4 8000 	strh.w	r8, [r4]
   17a82:	8051      	strh	r1, [r2, #2]
   17a84:	19a2      	adds	r2, r4, r6
   17a86:	f824 5035 	strh.w	r5, [r4, r5, lsl #3]
   17a8a:	f8a2 8002 	strh.w	r8, [r2, #2]
   17a8e:	53a3      	strh	r3, [r4, r6]
	void *cmem = &buf[c];
   17a90:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   17a94:	885a      	ldrh	r2, [r3, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   17a96:	4629      	mov	r1, r5
   17a98:	f042 0201 	orr.w	r2, r2, #1
   17a9c:	805a      	strh	r2, [r3, #2]
   17a9e:	4620      	mov	r0, r4
}
   17aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
   17aa4:	f7ff be3b 	b.w	1771e <free_list_add>

00017aa8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   17aa8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   17aaa:	f013 0307 	ands.w	r3, r3, #7
   17aae:	d105      	bne.n	17abc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   17ab0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   17ab2:	2b00      	cmp	r3, #0
   17ab4:	bf0c      	ite	eq
   17ab6:	2000      	moveq	r0, #0
   17ab8:	2003      	movne	r0, #3
   17aba:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   17abc:	2b02      	cmp	r3, #2
   17abe:	d105      	bne.n	17acc <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   17ac0:	8b40      	ldrh	r0, [r0, #26]
   17ac2:	fab0 f080 	clz	r0, r0
   17ac6:	0940      	lsrs	r0, r0, #5
   17ac8:	0080      	lsls	r0, r0, #2
   17aca:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   17acc:	2b01      	cmp	r3, #1
   17ace:	d105      	bne.n	17adc <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   17ad0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   17ad2:	2b00      	cmp	r3, #0
   17ad4:	bf0c      	ite	eq
   17ad6:	2000      	moveq	r0, #0
   17ad8:	2005      	movne	r0, #5
   17ada:	4770      	bx	lr
	int evt = EVT_NOP;
   17adc:	2000      	movs	r0, #0
}
   17ade:	4770      	bx	lr

00017ae0 <validate_args>:
{
   17ae0:	b510      	push	{r4, lr}
   17ae2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   17ae4:	b100      	cbz	r0, 17ae8 <validate_args+0x8>
   17ae6:	b911      	cbnz	r1, 17aee <validate_args+0xe>
		return -EINVAL;
   17ae8:	f06f 0015 	mvn.w	r0, #21
}
   17aec:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   17aee:	1d08      	adds	r0, r1, #4
   17af0:	f000 f896 	bl	17c20 <sys_notify_validate>
	if ((rv == 0)
   17af4:	2800      	cmp	r0, #0
   17af6:	d1f9      	bne.n	17aec <validate_args+0xc>
	    && ((cli->notify.flags
   17af8:	68a3      	ldr	r3, [r4, #8]
   17afa:	2b03      	cmp	r3, #3
   17afc:	d9f6      	bls.n	17aec <validate_args+0xc>
   17afe:	e7f3      	b.n	17ae8 <validate_args+0x8>

00017b00 <notify_one>:
{
   17b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17b04:	460d      	mov	r5, r1
   17b06:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   17b08:	4619      	mov	r1, r3
   17b0a:	1d28      	adds	r0, r5, #4
{
   17b0c:	4690      	mov	r8, r2
   17b0e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   17b10:	f000 f89a 	bl	17c48 <sys_notify_finalize>
	if (cb) {
   17b14:	4604      	mov	r4, r0
   17b16:	b138      	cbz	r0, 17b28 <notify_one+0x28>
		cb(mgr, cli, state, res);
   17b18:	4633      	mov	r3, r6
   17b1a:	4642      	mov	r2, r8
   17b1c:	4629      	mov	r1, r5
   17b1e:	4638      	mov	r0, r7
   17b20:	46a4      	mov	ip, r4
}
   17b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   17b26:	4760      	bx	ip
}
   17b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017b2c <transition_complete>:
{
   17b2c:	b410      	push	{r4}
	__asm__ volatile(
   17b2e:	f04f 0420 	mov.w	r4, #32
   17b32:	f3ef 8211 	mrs	r2, BASEPRI
   17b36:	f384 8812 	msr	BASEPRI_MAX, r4
   17b3a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   17b3e:	6141      	str	r1, [r0, #20]
}
   17b40:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   17b44:	2101      	movs	r1, #1
   17b46:	f7f3 bc63 	b.w	b410 <process_event>

00017b4a <onoff_manager_init>:
{
   17b4a:	b538      	push	{r3, r4, r5, lr}
   17b4c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   17b4e:	4605      	mov	r5, r0
   17b50:	b158      	cbz	r0, 17b6a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   17b52:	b151      	cbz	r1, 17b6a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   17b54:	680b      	ldr	r3, [r1, #0]
   17b56:	b143      	cbz	r3, 17b6a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   17b58:	684b      	ldr	r3, [r1, #4]
   17b5a:	b133      	cbz	r3, 17b6a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   17b5c:	221c      	movs	r2, #28
   17b5e:	2100      	movs	r1, #0
   17b60:	f002 fdcd 	bl	1a6fe <memset>
	return 0;
   17b64:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   17b66:	612c      	str	r4, [r5, #16]
}
   17b68:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   17b6a:	f06f 0015 	mvn.w	r0, #21
   17b6e:	e7fb      	b.n	17b68 <onoff_manager_init+0x1e>

00017b70 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   17b70:	b570      	push	{r4, r5, r6, lr}
   17b72:	4605      	mov	r5, r0
   17b74:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   17b76:	f7ff ffb3 	bl	17ae0 <validate_args>

	if (rv < 0) {
   17b7a:	1e04      	subs	r4, r0, #0
   17b7c:	db15      	blt.n	17baa <onoff_request+0x3a>
   17b7e:	f04f 0320 	mov.w	r3, #32
   17b82:	f3ef 8211 	mrs	r2, BASEPRI
   17b86:	f383 8812 	msr	BASEPRI_MAX, r3
   17b8a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   17b8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17b92:	8b6b      	ldrh	r3, [r5, #26]
   17b94:	8b2c      	ldrh	r4, [r5, #24]
   17b96:	428b      	cmp	r3, r1
   17b98:	f004 0407 	and.w	r4, r4, #7
   17b9c:	d107      	bne.n	17bae <onoff_request+0x3e>
	__asm__ volatile(
   17b9e:	f382 8811 	msr	BASEPRI, r2
   17ba2:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   17ba6:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   17baa:	4620      	mov	r0, r4
   17bac:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   17bae:	2c02      	cmp	r4, #2
   17bb0:	d10c      	bne.n	17bcc <onoff_request+0x5c>
		mgr->refs += 1U;
   17bb2:	3301      	adds	r3, #1
   17bb4:	836b      	strh	r3, [r5, #26]
   17bb6:	f382 8811 	msr	BASEPRI, r2
   17bba:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   17bbe:	2300      	movs	r3, #0
   17bc0:	4622      	mov	r2, r4
   17bc2:	4631      	mov	r1, r6
   17bc4:	4628      	mov	r0, r5
   17bc6:	f7ff ff9b 	bl	17b00 <notify_one>
   17bca:	e7ee      	b.n	17baa <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   17bcc:	2c06      	cmp	r4, #6
   17bce:	d814      	bhi.n	17bfa <onoff_request+0x8a>
   17bd0:	e8df f004 	tbb	[pc, r4]
   17bd4:	13131304 	.word	0x13131304
   17bd8:	1a04      	.short	0x1a04
   17bda:	04          	.byte	0x04
   17bdb:	00          	.byte	0x00
	parent->next = child;
   17bdc:	2300      	movs	r3, #0
   17bde:	6033      	str	r3, [r6, #0]
	return list->tail;
   17be0:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   17be2:	b93b      	cbnz	r3, 17bf4 <onoff_request+0x84>
	list->head = node;
   17be4:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   17be8:	b9ac      	cbnz	r4, 17c16 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   17bea:	2102      	movs	r1, #2
   17bec:	4628      	mov	r0, r5
   17bee:	f7f3 fc0f 	bl	b410 <process_event>
   17bf2:	e7da      	b.n	17baa <onoff_request+0x3a>
	parent->next = child;
   17bf4:	601e      	str	r6, [r3, #0]
	list->tail = node;
   17bf6:	606e      	str	r6, [r5, #4]
}
   17bf8:	e7f6      	b.n	17be8 <onoff_request+0x78>
   17bfa:	f382 8811 	msr	BASEPRI, r2
   17bfe:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   17c02:	f06f 0404 	mvn.w	r4, #4
   17c06:	e7d0      	b.n	17baa <onoff_request+0x3a>
   17c08:	f382 8811 	msr	BASEPRI, r2
   17c0c:	f3bf 8f6f 	isb	sy
   17c10:	f06f 0485 	mvn.w	r4, #133	; 0x85
   17c14:	e7c9      	b.n	17baa <onoff_request+0x3a>
   17c16:	f382 8811 	msr	BASEPRI, r2
   17c1a:	f3bf 8f6f 	isb	sy
		if (notify) {
   17c1e:	e7c4      	b.n	17baa <onoff_request+0x3a>

00017c20 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   17c20:	4603      	mov	r3, r0
   17c22:	b140      	cbz	r0, 17c36 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   17c24:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   17c26:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   17c2a:	2a02      	cmp	r2, #2
   17c2c:	d006      	beq.n	17c3c <sys_notify_validate+0x1c>
   17c2e:	2a03      	cmp	r2, #3
   17c30:	d004      	beq.n	17c3c <sys_notify_validate+0x1c>
   17c32:	2a01      	cmp	r2, #1
   17c34:	d005      	beq.n	17c42 <sys_notify_validate+0x22>
   17c36:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   17c3a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   17c3c:	681a      	ldr	r2, [r3, #0]
   17c3e:	2a00      	cmp	r2, #0
   17c40:	d0f9      	beq.n	17c36 <sys_notify_validate+0x16>
		notify->result = 0;
   17c42:	2000      	movs	r0, #0
   17c44:	6098      	str	r0, [r3, #8]
   17c46:	4770      	bx	lr

00017c48 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   17c48:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   17c4a:	6842      	ldr	r2, [r0, #4]
   17c4c:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   17c4e:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   17c52:	2a02      	cmp	r2, #2
   17c54:	f04f 0400 	mov.w	r4, #0
	notify->result = res;
   17c58:	6081      	str	r1, [r0, #8]
	switch (method) {
   17c5a:	d007      	beq.n	17c6c <sys_notify_finalize+0x24>
   17c5c:	2a03      	cmp	r2, #3
   17c5e:	d002      	beq.n	17c66 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   17c60:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   17c62:	2000      	movs	r0, #0
   17c64:	e001      	b.n	17c6a <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   17c66:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   17c68:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   17c6a:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   17c6c:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   17c6e:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   17c70:	2800      	cmp	r0, #0
   17c72:	d0f6      	beq.n	17c62 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   17c74:	f7fd fb7a 	bl	1536c <z_impl_k_poll_signal_raise>
   17c78:	e7f3      	b.n	17c62 <sys_notify_finalize+0x1a>

00017c7a <_ldiv5>:
	uint32_t v_lo = *v;
   17c7a:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   17c7e:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   17c80:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   17c84:	fba2 2403 	umull	r2, r4, r2, r3
   17c88:	18d5      	adds	r5, r2, r3
   17c8a:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   17c8e:	fba1 1303 	umull	r1, r3, r1, r3
   17c92:	1852      	adds	r2, r2, r1
   17c94:	eb44 0403 	adc.w	r4, r4, r3
   17c98:	1952      	adds	r2, r2, r5
   17c9a:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   17c9e:	1889      	adds	r1, r1, r2
   17ca0:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   17ca4:	e9c0 1300 	strd	r1, r3, [r0]
}
   17ca8:	bd30      	pop	{r4, r5, pc}

00017caa <_get_digit>:
{
   17caa:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   17cac:	680a      	ldr	r2, [r1, #0]
{
   17cae:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   17cb0:	2a00      	cmp	r2, #0
   17cb2:	dd0f      	ble.n	17cd4 <_get_digit+0x2a>
		--*digit_count;
   17cb4:	3a01      	subs	r2, #1
   17cb6:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   17cb8:	6844      	ldr	r4, [r0, #4]
   17cba:	200a      	movs	r0, #10
   17cbc:	681a      	ldr	r2, [r3, #0]
   17cbe:	fba2 1200 	umull	r1, r2, r2, r0
   17cc2:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   17cc6:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   17cc8:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   17ccc:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   17cd0:	3030      	adds	r0, #48	; 0x30
}
   17cd2:	bd10      	pop	{r4, pc}
		rval = '0';
   17cd4:	2030      	movs	r0, #48	; 0x30
   17cd6:	e7fc      	b.n	17cd2 <_get_digit+0x28>

00017cd8 <outs>:
{
   17cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17cdc:	4607      	mov	r7, r0
   17cde:	4688      	mov	r8, r1
   17ce0:	4615      	mov	r5, r2
   17ce2:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   17ce4:	4614      	mov	r4, r2
   17ce6:	42b4      	cmp	r4, r6
   17ce8:	d305      	bcc.n	17cf6 <outs+0x1e>
   17cea:	b10e      	cbz	r6, 17cf0 <outs+0x18>
	return (int)count;
   17cec:	1b60      	subs	r0, r4, r5
   17cee:	e008      	b.n	17d02 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   17cf0:	7823      	ldrb	r3, [r4, #0]
   17cf2:	2b00      	cmp	r3, #0
   17cf4:	d0fa      	beq.n	17cec <outs+0x14>
		int rc = out((int)*sp++, ctx);
   17cf6:	4641      	mov	r1, r8
   17cf8:	f814 0b01 	ldrb.w	r0, [r4], #1
   17cfc:	47b8      	blx	r7
		if (rc < 0) {
   17cfe:	2800      	cmp	r0, #0
   17d00:	daf1      	bge.n	17ce6 <outs+0xe>
}
   17d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017d06 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_GNSS_SAMPLE_LOG_LEVEL_DEFAULT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_GNSS_SAMPLE_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   17d06:	4770      	bx	lr

00017d08 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   17d08:	2806      	cmp	r0, #6
   17d0a:	d108      	bne.n	17d1e <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   17d0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   17d10:	2201      	movs	r2, #1
   17d12:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   17d16:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   17d1a:	bf20      	wfe
    while (true)
   17d1c:	e7fd      	b.n	17d1a <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   17d1e:	4770      	bx	lr

00017d20 <pm_state_exit_post_ops>:
   17d20:	2300      	movs	r3, #0
   17d22:	f383 8811 	msr	BASEPRI, r3
   17d26:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   17d2a:	4770      	bx	lr

00017d2c <dummy_timestamp>:
}
   17d2c:	2000      	movs	r0, #0
   17d2e:	4770      	bx	lr

00017d30 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   17d30:	f000 bd5a 	b.w	187e8 <sys_clock_cycle_get_32>

00017d34 <atomic_inc>:
{
   17d34:	4603      	mov	r3, r0
}
   17d36:	e8d3 0fef 	ldaex	r0, [r3]
   17d3a:	1c42      	adds	r2, r0, #1
   17d3c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   17d40:	2900      	cmp	r1, #0
   17d42:	d1f8      	bne.n	17d36 <atomic_inc+0x2>
   17d44:	4770      	bx	lr

00017d46 <enable_logger>:
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
   17d46:	2100      	movs	r1, #0
{
   17d48:	b508      	push	{r3, lr}
		(void)z_log_init(false, false);
   17d4a:	4608      	mov	r0, r1
   17d4c:	f7f3 fcf0 	bl	b730 <z_log_init.isra.0>
	}

	return 0;
}
   17d50:	2000      	movs	r0, #0
   17d52:	bd08      	pop	{r3, pc}

00017d54 <z_log_vprintk>:
{
   17d54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   17d56:	2300      	movs	r3, #0
   17d58:	e9cd 0102 	strd	r0, r1, [sp, #8]
   17d5c:	461a      	mov	r2, r3
   17d5e:	4619      	mov	r1, r3
   17d60:	4618      	mov	r0, r3
   17d62:	e9cd 3300 	strd	r3, r3, [sp]
   17d66:	f7f3 fde5 	bl	b934 <z_impl_z_log_msg_runtime_vcreate>
}
   17d6a:	b005      	add	sp, #20
   17d6c:	f85d fb04 	ldr.w	pc, [sp], #4

00017d70 <z_log_notify_backend_enabled>:
}
   17d70:	4770      	bx	lr

00017d72 <z_log_get_tag>:
}
   17d72:	2000      	movs	r0, #0
   17d74:	4770      	bx	lr

00017d76 <z_log_msg_finalize>:
{
   17d76:	b570      	push	{r4, r5, r6, lr}
   17d78:	460e      	mov	r6, r1
   17d7a:	4615      	mov	r5, r2
   17d7c:	4619      	mov	r1, r3
	if (!msg) {
   17d7e:	4604      	mov	r4, r0
   17d80:	0d12      	lsrs	r2, r2, #20
   17d82:	b918      	cbnz	r0, 17d8c <z_log_msg_finalize+0x16>
}
   17d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   17d88:	f7f3 bd82 	b.w	b890 <z_log_dropped>
	if (data) {
   17d8c:	b12b      	cbz	r3, 17d9a <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
   17d8e:	3010      	adds	r0, #16
   17d90:	f3c5 234a 	ubfx	r3, r5, #9, #11
   17d94:	4418      	add	r0, r3
   17d96:	f002 fca5 	bl	1a6e4 <memcpy>
	msg->hdr.source = source;
   17d9a:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   17d9e:	4620      	mov	r0, r4
}
   17da0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   17da4:	f7f3 bd88 	b.w	b8b8 <z_log_msg_commit>

00017da8 <out_func>:
{
   17da8:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   17daa:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
   17dae:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   17db2:	2101      	movs	r1, #1
   17db4:	6852      	ldr	r2, [r2, #4]
   17db6:	f10d 0007 	add.w	r0, sp, #7
   17dba:	4798      	blx	r3
}
   17dbc:	2000      	movs	r0, #0
   17dbe:	b003      	add	sp, #12
   17dc0:	f85d fb04 	ldr.w	pc, [sp], #4

00017dc4 <cr_out_func>:
	if (c == '\n') {
   17dc4:	280a      	cmp	r0, #10
{
   17dc6:	b538      	push	{r3, r4, r5, lr}
   17dc8:	4604      	mov	r4, r0
   17dca:	460d      	mov	r5, r1
	if (c == '\n') {
   17dcc:	d102      	bne.n	17dd4 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   17dce:	200d      	movs	r0, #13
   17dd0:	f7ff ffea 	bl	17da8 <out_func>
	out_func(c, ctx);
   17dd4:	4629      	mov	r1, r5
   17dd6:	4620      	mov	r0, r4
   17dd8:	f7ff ffe6 	bl	17da8 <out_func>
}
   17ddc:	2000      	movs	r0, #0
   17dde:	bd38      	pop	{r3, r4, r5, pc}

00017de0 <buffer_write>:
{
   17de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17de2:	4606      	mov	r6, r0
   17de4:	460d      	mov	r5, r1
   17de6:	4614      	mov	r4, r2
   17de8:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   17dea:	4621      	mov	r1, r4
   17dec:	4628      	mov	r0, r5
   17dee:	463a      	mov	r2, r7
   17df0:	47b0      	blx	r6
	} while (len != 0);
   17df2:	1a24      	subs	r4, r4, r0
		buf += processed;
   17df4:	4405      	add	r5, r0
	} while (len != 0);
   17df6:	d1f8      	bne.n	17dea <buffer_write+0xa>
}
   17df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017dfa <cbvprintf>:
{
   17dfa:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   17dfc:	2400      	movs	r4, #0
   17dfe:	9400      	str	r4, [sp, #0]
   17e00:	f7f1 f802 	bl	8e08 <z_cbvprintf_impl>
}
   17e04:	b002      	add	sp, #8
   17e06:	bd10      	pop	{r4, pc}

00017e08 <log_output_flush>:
{
   17e08:	b510      	push	{r4, lr}
		     output->control_block->offset,
   17e0a:	6842      	ldr	r2, [r0, #4]
{
   17e0c:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   17e0e:	e9d2 2300 	ldrd	r2, r3, [r2]
   17e12:	6881      	ldr	r1, [r0, #8]
   17e14:	6800      	ldr	r0, [r0, #0]
   17e16:	f7ff ffe3 	bl	17de0 <buffer_write>
	output->control_block->offset = 0;
   17e1a:	2200      	movs	r2, #0
   17e1c:	6863      	ldr	r3, [r4, #4]
   17e1e:	601a      	str	r2, [r3, #0]
}
   17e20:	bd10      	pop	{r4, pc}

00017e22 <log_backend_uart_init>:
}
   17e22:	4770      	bx	lr

00017e24 <pm_device_state_get>:
}

int pm_device_state_get(const struct device *dev,
			enum pm_device_state *state)
{
	struct pm_device *pm = dev->pm;
   17e24:	6983      	ldr	r3, [r0, #24]

	if (pm == NULL) {
   17e26:	b11b      	cbz	r3, 17e30 <pm_device_state_get+0xc>
		return -ENOSYS;
	}

	*state = pm->state;
   17e28:	7a1b      	ldrb	r3, [r3, #8]

	return 0;
   17e2a:	2000      	movs	r0, #0
	*state = pm->state;
   17e2c:	700b      	strb	r3, [r1, #0]
	return 0;
   17e2e:	4770      	bx	lr
		return -ENOSYS;
   17e30:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
   17e34:	4770      	bx	lr

00017e36 <pm_device_is_busy>:
	return false;
}

bool pm_device_is_busy(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   17e36:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   17e38:	b120      	cbz	r0, 17e44 <pm_device_is_busy+0xe>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17e3a:	3004      	adds	r0, #4
   17e3c:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17e40:	f000 0001 	and.w	r0, r0, #1
		return false;
	}

	return atomic_test_bit(&pm->flags, PM_DEVICE_FLAG_BUSY);
}
   17e44:	4770      	bx	lr

00017e46 <pm_device_wakeup_is_enabled>:
	return atomic_cas(&pm->flags, flags, new_flags);
}

bool pm_device_wakeup_is_enabled(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   17e46:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   17e48:	b120      	cbz	r0, 17e54 <pm_device_wakeup_is_enabled+0xe>
   17e4a:	3004      	adds	r0, #4
   17e4c:	e8d0 0faf 	lda	r0, [r0]
   17e50:	f3c0 1000 	ubfx	r0, r0, #4, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
			       PM_DEVICE_FLAG_WS_ENABLED);
}
   17e54:	4770      	bx	lr

00017e56 <pm_device_state_is_locked>:
	}
}

bool pm_device_state_is_locked(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   17e56:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   17e58:	b120      	cbz	r0, 17e64 <pm_device_state_is_locked+0xe>
   17e5a:	3004      	adds	r0, #4
   17e5c:	e8d0 0faf 	lda	r0, [r0]
   17e60:	f3c0 1080 	ubfx	r0, r0, #6, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
			       PM_DEVICE_FLAG_STATE_LOCKED);
}
   17e64:	4770      	bx	lr

00017e66 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   17e66:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   17e68:	ab0b      	add	r3, sp, #44	; 0x2c
   17e6a:	9305      	str	r3, [sp, #20]
   17e6c:	9303      	str	r3, [sp, #12]
   17e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17e70:	2201      	movs	r2, #1
   17e72:	9302      	str	r3, [sp, #8]
   17e74:	2300      	movs	r3, #0
   17e76:	4618      	mov	r0, r3
   17e78:	e9cd 3300 	strd	r3, r3, [sp]
   17e7c:	f7f3 fd5a 	bl	b934 <z_impl_z_log_msg_runtime_vcreate>
}
   17e80:	b007      	add	sp, #28
   17e82:	f85d fb04 	ldr.w	pc, [sp], #4

00017e86 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   17e86:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   17e88:	6800      	ldr	r0, [r0, #0]
   17e8a:	f7f4 ba1d 	b.w	c2c8 <z_arm_fatal_error>

00017e8e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   17e8e:	2100      	movs	r1, #0
   17e90:	2001      	movs	r0, #1
   17e92:	f7f4 ba19 	b.w	c2c8 <z_arm_fatal_error>

00017e96 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   17e96:	b508      	push	{r3, lr}
	handler();
   17e98:	f7f4 fadc 	bl	c454 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   17e9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   17ea0:	f7f4 bbe0 	b.w	c664 <z_arm_exc_exit>

00017ea4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   17ea4:	6e83      	ldr	r3, [r0, #104]	; 0x68
   17ea6:	f383 880b 	msr	PSPLIM, r3
}
   17eaa:	4770      	bx	lr

00017eac <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   17eac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   17eae:	ab0b      	add	r3, sp, #44	; 0x2c
   17eb0:	9305      	str	r3, [sp, #20]
   17eb2:	9303      	str	r3, [sp, #12]
   17eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17eb6:	2201      	movs	r2, #1
   17eb8:	9302      	str	r3, [sp, #8]
   17eba:	2300      	movs	r3, #0
   17ebc:	4618      	mov	r0, r3
   17ebe:	e9cd 3300 	strd	r3, r3, [sp]
   17ec2:	f7f3 fd37 	bl	b934 <z_impl_z_log_msg_runtime_vcreate>
}
   17ec6:	b007      	add	sp, #28
   17ec8:	f85d fb04 	ldr.w	pc, [sp], #4

00017ecc <z_arm_save_fp_context>:
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   17ecc:	f3ef 8314 	mrs	r3, CONTROL
#if defined(CONFIG_FPU_SHARING)
	__ASSERT_NO_MSG(buffer != NULL);

	uint32_t CONTROL = __get_CONTROL();

	if (CONTROL & CONTROL_FPCA_Msk) {
   17ed0:	075a      	lsls	r2, r3, #29
   17ed2:	d512      	bpl.n	17efa <z_arm_save_fp_context+0x2e>
		/* Store caller-saved and callee-saved FP registers. */
		__asm__ volatile(
   17ed4:	f100 0240 	add.w	r2, r0, #64	; 0x40
   17ed8:	ec80 0a10 	vstmia	r0, {s0-s15}
   17edc:	ec82 8a10 	vstmia	r2, {s16-s31}
  return __builtin_arm_get_fpscr();
   17ee0:	eef1 2a10 	vmrs	r2, fpscr
			"vstmia %0, {s0-s15}\n"
			"vstmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);

		buffer->fpscr = __get_FPSCR();
   17ee4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		buffer->ctx_saved = true;
   17ee8:	2201      	movs	r2, #1

		/* Disable FPCA so no stacking of FP registers happens in TFM. */
		__set_CONTROL(CONTROL & ~CONTROL_FPCA_Msk);
   17eea:	f023 0304 	bic.w	r3, r3, #4
		buffer->ctx_saved = true;
   17eee:	f880 2084 	strb.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   17ef2:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   17ef6:	f3bf 8f6f 	isb	sy
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   17efa:	4770      	bx	lr

00017efc <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
{
#if defined(CONFIG_FPU_SHARING)
	if (buffer->ctx_saved) {
   17efc:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
   17f00:	b18b      	cbz	r3, 17f26 <z_arm_restore_fp_context+0x2a>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   17f02:	f3ef 8314 	mrs	r3, CONTROL
		/* Set FPCA first so it is set even if an interrupt happens
		 * during restoration.
		 */
		__set_CONTROL(__get_CONTROL() | CONTROL_FPCA_Msk);
   17f06:	f043 0304 	orr.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   17f0a:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   17f0e:	f3bf 8f6f 	isb	sy
  __builtin_arm_set_fpscr(fpscr);
   17f12:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   17f16:	eee1 3a10 	vmsr	fpscr, r3

		/* Restore FP state. */
		__set_FPSCR(buffer->fpscr);

		__asm__ volatile(
   17f1a:	f100 0340 	add.w	r3, r0, #64	; 0x40
   17f1e:	ec90 0a10 	vldmia	r0, {s0-s15}
   17f22:	ec93 8a10 	vldmia	r3, {s16-s31}
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   17f26:	4770      	bx	lr

00017f28 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   17f28:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   17f2c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   17f30:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   17f32:	bf08      	it	eq
   17f34:	f06f 0015 	mvneq.w	r0, #21
   17f38:	4770      	bx	lr

00017f3a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   17f3a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   17f3c:	ab0b      	add	r3, sp, #44	; 0x2c
   17f3e:	9305      	str	r3, [sp, #20]
   17f40:	9303      	str	r3, [sp, #12]
   17f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17f44:	2201      	movs	r2, #1
   17f46:	9302      	str	r3, [sp, #8]
   17f48:	2300      	movs	r3, #0
   17f4a:	4618      	mov	r0, r3
   17f4c:	e9cd 3300 	strd	r3, r3, [sp]
   17f50:	f7f3 fcf0 	bl	b934 <z_impl_z_log_msg_runtime_vcreate>
}
   17f54:	b007      	add	sp, #28
   17f56:	f85d fb04 	ldr.w	pc, [sp], #4

00017f5a <mpu_configure_region>:
{
   17f5a:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   17f5c:	680c      	ldr	r4, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   17f5e:	684b      	ldr	r3, [r1, #4]
{
   17f60:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   17f62:	890a      	ldrh	r2, [r1, #8]
   17f64:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   17f66:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   17f68:	3b01      	subs	r3, #1
   17f6a:	f024 041f 	bic.w	r4, r4, #31
   17f6e:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   17f70:	f002 021f 	and.w	r2, r2, #31
   17f74:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   17f78:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   17f7c:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   17f7e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   17f82:	9303      	str	r3, [sp, #12]
   17f84:	f7f4 ff34 	bl	cdf0 <region_allocate_and_init>
}
   17f88:	b005      	add	sp, #20
   17f8a:	bd30      	pop	{r4, r5, pc}

00017f8c <malloc_prepare>:
}
   17f8c:	2000      	movs	r0, #0
   17f8e:	4770      	bx	lr

00017f90 <_stdout_hook_default>:
}
   17f90:	f04f 30ff 	mov.w	r0, #4294967295
   17f94:	4770      	bx	lr

00017f96 <_stdin_hook_default>:
}
   17f96:	2000      	movs	r0, #0
   17f98:	4770      	bx	lr

00017f9a <_read>:
{
   17f9a:	4608      	mov	r0, r1
   17f9c:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   17f9e:	f7f5 b8a3 	b.w	d0e8 <z_impl_zephyr_read_stdin>

00017fa2 <_write>:
{
   17fa2:	4608      	mov	r0, r1
   17fa4:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   17fa6:	f7f5 b8b3 	b.w	d110 <z_impl_zephyr_write_stdout>

00017faa <_close>:
int _close(int file)
   17faa:	f04f 30ff 	mov.w	r0, #4294967295
   17fae:	4770      	bx	lr

00017fb0 <_lseek>:
}
   17fb0:	2000      	movs	r0, #0
   17fb2:	4770      	bx	lr

00017fb4 <_isatty>:
}
   17fb4:	2802      	cmp	r0, #2
   17fb6:	bfcc      	ite	gt
   17fb8:	2000      	movgt	r0, #0
   17fba:	2001      	movle	r0, #1
   17fbc:	4770      	bx	lr

00017fbe <_kill>:
}
   17fbe:	2000      	movs	r0, #0
   17fc0:	4770      	bx	lr

00017fc2 <_getpid>:
int _getpid(void)
   17fc2:	2000      	movs	r0, #0
   17fc4:	4770      	bx	lr

00017fc6 <_fstat>:
	st->st_mode = S_IFCHR;
   17fc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   17fca:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   17fcc:	604b      	str	r3, [r1, #4]
}
   17fce:	4770      	bx	lr

00017fd0 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   17fd0:	b510      	push	{r4, lr}
   17fd2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   17fd4:	2014      	movs	r0, #20
   17fd6:	f7fd fa37 	bl	15448 <malloc>
   17fda:	6020      	str	r0, [r4, #0]
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
   17fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   17fe0:	f001 bfbe 	b.w	19f60 <z_impl_k_mutex_init>

00017fe4 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   17fe4:	f04f 32ff 	mov.w	r2, #4294967295
   17fe8:	f04f 33ff 	mov.w	r3, #4294967295
   17fec:	f7fc bae4 	b.w	145b8 <z_impl_k_mutex_lock>

00017ff0 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   17ff0:	f7fc bb5c 	b.w	146ac <z_impl_k_mutex_unlock>

00017ff4 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   17ff4:	f7fb bfee 	b.w	13fd4 <z_impl_z_errno>

00017ff8 <offloaded_netdev_if_enable>:
   17ff8:	6803      	ldr	r3, [r0, #0]
#include <zephyr/net/net_if.h>
#include <zephyr/net/offloaded_netdev.h>

static inline int offloaded_netdev_if_enable(struct net_if *iface, bool state)
{
	const struct offloaded_if_api *off_if = net_if_get_device(iface)->api;
   17ffa:	681b      	ldr	r3, [r3, #0]
   17ffc:	689b      	ldr	r3, [r3, #8]

	if (!off_if || !(off_if->enable)) {
   17ffe:	b113      	cbz	r3, 18006 <offloaded_netdev_if_enable+0xe>
   18000:	685b      	ldr	r3, [r3, #4]
   18002:	b103      	cbz	r3, 18006 <offloaded_netdev_if_enable+0xe>
		return 0;
	}

	return off_if->enable(iface, state);
   18004:	4718      	bx	r3
}
   18006:	2000      	movs	r0, #0
   18008:	4770      	bx	lr

0001800a <net_init>:

	return status;
}

static int net_init(void)
{
   1800a:	b508      	push	{r3, lr}
	net_if_init();
   1800c:	f7f5 f8c2 	bl	d194 <net_if_init>
	net_if_post_init();
   18010:	f7f5 f8e4 	bl	d1dc <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   18014:	2000      	movs	r0, #0
   18016:	bd08      	pop	{r3, pc}

00018018 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   18018:	b110      	cbz	r0, 18020 <net_if_l2+0x8>
   1801a:	6800      	ldr	r0, [r0, #0]
   1801c:	b100      	cbz	r0, 18020 <net_if_l2+0x8>
	return iface->if_dev->l2;
   1801e:	6840      	ldr	r0, [r0, #4]
}
   18020:	4770      	bx	lr

00018022 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   18022:	2301      	movs	r3, #1
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   18024:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   18026:	f001 011f 	and.w	r1, r1, #31
   1802a:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1802c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   18030:	e8d0 2fef 	ldaex	r2, [r0]
   18034:	431a      	orrs	r2, r3
   18036:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1803a:	2900      	cmp	r1, #0
   1803c:	d1f8      	bne.n	18030 <atomic_set_bit+0xe>
}
   1803e:	4770      	bx	lr

00018040 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   18040:	2301      	movs	r3, #1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18042:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   18044:	f001 011f 	and.w	r1, r1, #31
   18048:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1804a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1804c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   18050:	e8d0 2fef 	ldaex	r2, [r0]
   18054:	401a      	ands	r2, r3
   18056:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1805a:	2900      	cmp	r1, #0
   1805c:	d1f8      	bne.n	18050 <atomic_clear_bit+0x10>
}
   1805e:	4770      	bx	lr

00018060 <net_if_flag_is_set>:
	if (iface == NULL) {
   18060:	b130      	cbz	r0, 18070 <net_if_flag_is_set+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18062:	6803      	ldr	r3, [r0, #0]
   18064:	330c      	adds	r3, #12
   18066:	e8d3 0faf 	lda	r0, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1806a:	4108      	asrs	r0, r1
   1806c:	f000 0001 	and.w	r0, r0, #1
}
   18070:	4770      	bx	lr

00018072 <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
   18072:	b510      	push	{r4, lr}
   18074:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   18076:	f7ff ffcf 	bl	18018 <net_if_l2>
   1807a:	b128      	cbz	r0, 18088 <l2_flags_get.isra.0+0x16>
   1807c:	68c2      	ldr	r2, [r0, #12]
   1807e:	b11a      	cbz	r2, 18088 <l2_flags_get.isra.0+0x16>
}
   18080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   18084:	4618      	mov	r0, r3
   18086:	4710      	bx	r2
}
   18088:	bd10      	pop	{r4, pc}

0001808a <update_operational_state>:
{
   1808a:	b510      	push	{r4, lr}
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   1808c:	6803      	ldr	r3, [r0, #0]
 */
static inline bool net_if_is_admin_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_UP);
   1808e:	2100      	movs	r1, #0
{
   18090:	4604      	mov	r4, r0
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   18092:	f893 2020 	ldrb.w	r2, [r3, #32]
   18096:	f7ff ffe3 	bl	18060 <net_if_flag_is_set>
	if (!net_if_is_admin_up(iface)) {
   1809a:	b978      	cbnz	r0, 180bc <update_operational_state+0x32>
		iface->if_dev->oper_state = oper_state;
   1809c:	2102      	movs	r1, #2
   1809e:	6823      	ldr	r3, [r4, #0]
   180a0:	f883 1020 	strb.w	r1, [r3, #32]
	return iface->if_dev->oper_state;
   180a4:	6820      	ldr	r0, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   180a6:	f890 3020 	ldrb.w	r3, [r0, #32]
   180aa:	428b      	cmp	r3, r1
   180ac:	d12b      	bne.n	18106 <update_operational_state+0x7c>
		if (prev_state == NET_IF_OPER_UP) {
   180ae:	2a06      	cmp	r2, #6
   180b0:	d129      	bne.n	18106 <update_operational_state+0x7c>
	atomic_clear_bit(iface->if_dev->flags, value);
   180b2:	2108      	movs	r1, #8
   180b4:	300c      	adds	r0, #12
   180b6:	f7ff ffc3 	bl	18040 <atomic_clear_bit>
	return (iface->if_dev->socket_offload != NULL);
   180ba:	e01c      	b.n	180f6 <update_operational_state+0x6c>
 */
static inline bool net_if_is_carrier_ok(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_LOWER_UP);
   180bc:	2109      	movs	r1, #9
   180be:	4620      	mov	r0, r4
   180c0:	f7ff ffce 	bl	18060 <net_if_flag_is_set>
	if (!net_if_is_carrier_ok(iface)) {
   180c4:	2800      	cmp	r0, #0
   180c6:	d0e9      	beq.n	1809c <update_operational_state+0x12>
 */
static inline bool net_if_is_dormant(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_DORMANT);
   180c8:	210a      	movs	r1, #10
   180ca:	4620      	mov	r0, r4
   180cc:	f7ff ffc8 	bl	18060 <net_if_flag_is_set>
		iface->if_dev->oper_state = oper_state;
   180d0:	6821      	ldr	r1, [r4, #0]
   180d2:	f1c0 0306 	rsb	r3, r0, #6
   180d6:	b2db      	uxtb	r3, r3
   180d8:	f881 3020 	strb.w	r3, [r1, #32]
	return iface->if_dev->oper_state;
   180dc:	6820      	ldr	r0, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   180de:	f890 1020 	ldrb.w	r1, [r0, #32]
   180e2:	4299      	cmp	r1, r3
   180e4:	d10f      	bne.n	18106 <update_operational_state+0x7c>
	if (net_if_oper_state(iface) == NET_IF_OPER_UP) {
   180e6:	2906      	cmp	r1, #6
   180e8:	d1e1      	bne.n	180ae <update_operational_state+0x24>
		if (prev_state != NET_IF_OPER_UP) {
   180ea:	2a06      	cmp	r2, #6
   180ec:	d00b      	beq.n	18106 <update_operational_state+0x7c>
	atomic_set_bit(iface->if_dev->flags, value);
   180ee:	2108      	movs	r1, #8
   180f0:	300c      	adds	r0, #12
   180f2:	f7ff ff96 	bl	18022 <atomic_set_bit>
	return (iface->if_dev->socket_offload != NULL);
   180f6:	6823      	ldr	r3, [r4, #0]
	if (!is_iface_offloaded(iface) &&
   180f8:	69db      	ldr	r3, [r3, #28]
   180fa:	b923      	cbnz	r3, 18106 <update_operational_state+0x7c>
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   180fc:	4620      	mov	r0, r4
}
   180fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   18102:	f7ff bfb6 	b.w	18072 <l2_flags_get.isra.0>
}
   18106:	bd10      	pop	{r4, pc}

00018108 <net_if_flag_test_and_set.isra.0>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   18108:	2301      	movs	r3, #1
static inline bool net_if_flag_test_and_set(struct net_if *iface,
   1810a:	b510      	push	{r4, lr}
   1810c:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18110:	300c      	adds	r0, #12
   18112:	e8d0 3fef 	ldaex	r3, [r0]
   18116:	ea43 0201 	orr.w	r2, r3, r1
   1811a:	e8c0 2fe4 	stlex	r4, r2, [r0]
   1811e:	2c00      	cmp	r4, #0
   18120:	d1f7      	bne.n	18112 <net_if_flag_test_and_set.isra.0+0xa>
	return (old & mask) != 0;
   18122:	4219      	tst	r1, r3
}
   18124:	bf14      	ite	ne
   18126:	2001      	movne	r0, #1
   18128:	2000      	moveq	r0, #0
   1812a:	bd10      	pop	{r4, pc}

0001812c <net_if_up>:
{
   1812c:	b538      	push	{r3, r4, r5, lr}
   1812e:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
   18130:	f04f 31ff 	mov.w	r1, #4294967295
   18134:	f04f 30ff 	mov.w	r0, #4294967295
   18138:	f7f5 f81e 	bl	d178 <k_mutex_lock.constprop.0.isra.0>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1813c:	2100      	movs	r1, #0
   1813e:	4628      	mov	r0, r5
   18140:	f7ff ff8e 	bl	18060 <net_if_flag_is_set>
   18144:	b9b8      	cbnz	r0, 18176 <net_if_up+0x4a>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   18146:	4628      	mov	r0, r5
   18148:	f7ff ff66 	bl	18018 <net_if_l2>
   1814c:	4604      	mov	r4, r0
   1814e:	b130      	cbz	r0, 1815e <net_if_up+0x32>
   18150:	6884      	ldr	r4, [r0, #8]
   18152:	b124      	cbz	r4, 1815e <net_if_up+0x32>
	status = net_if_l2(iface)->enable(iface, true);
   18154:	2101      	movs	r1, #1
   18156:	4628      	mov	r0, r5
   18158:	47a0      	blx	r4
	if (status < 0) {
   1815a:	1e04      	subs	r4, r0, #0
   1815c:	db07      	blt.n	1816e <net_if_up+0x42>
	atomic_set_bit(iface->if_dev->flags, value);
   1815e:	6828      	ldr	r0, [r5, #0]
   18160:	2100      	movs	r1, #0
   18162:	300c      	adds	r0, #12
   18164:	f7ff ff5d 	bl	18022 <atomic_set_bit>
	update_operational_state(iface);
   18168:	4628      	mov	r0, r5
   1816a:	f7ff ff8e 	bl	1808a <update_operational_state>
	k_mutex_unlock(&lock);
   1816e:	f7f5 f80b 	bl	d188 <k_mutex_unlock.constprop.0.isra.0>
}
   18172:	4620      	mov	r0, r4
   18174:	bd38      	pop	{r3, r4, r5, pc}
		status = -EALREADY;
   18176:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1817a:	e7f8      	b.n	1816e <net_if_up+0x42>

0001817c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1817c:	220c      	movs	r2, #12
   1817e:	6903      	ldr	r3, [r0, #16]
   18180:	b2c9      	uxtb	r1, r1
   18182:	fb01 3302 	mla	r3, r1, r2, r3
   18186:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   18188:	f000 0007 	and.w	r0, r0, #7
   1818c:	4770      	bx	lr

0001818e <set_on_state>:
	__asm__ volatile(
   1818e:	f04f 0320 	mov.w	r3, #32
   18192:	f3ef 8211 	mrs	r2, BASEPRI
   18196:	f383 8812 	msr	BASEPRI_MAX, r3
   1819a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1819e:	6803      	ldr	r3, [r0, #0]
   181a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   181a4:	f043 0302 	orr.w	r3, r3, #2
   181a8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   181aa:	f382 8811 	msr	BASEPRI, r2
   181ae:	f3bf 8f6f 	isb	sy
}
   181b2:	4770      	bx	lr

000181b4 <stop>:
{
   181b4:	b570      	push	{r4, r5, r6, lr}
   181b6:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   181b8:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   181ba:	f04f 0420 	mov.w	r4, #32
   181be:	f3ef 8511 	mrs	r5, BASEPRI
   181c2:	f384 8812 	msr	BASEPRI_MAX, r4
   181c6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   181ca:	260c      	movs	r6, #12
   181cc:	fb06 3401 	mla	r4, r6, r1, r3
   181d0:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   181d2:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   181d6:	d008      	beq.n	181ea <stop+0x36>
   181d8:	42a2      	cmp	r2, r4
   181da:	d006      	beq.n	181ea <stop+0x36>
	__asm__ volatile(
   181dc:	f385 8811 	msr	BASEPRI, r5
   181e0:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   181e4:	f04f 30ff 	mov.w	r0, #4294967295
}
   181e8:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   181ea:	2201      	movs	r2, #1
   181ec:	4371      	muls	r1, r6
   181ee:	440b      	add	r3, r1
   181f0:	641a      	str	r2, [r3, #64]	; 0x40
   181f2:	f385 8811 	msr	BASEPRI, r5
   181f6:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   181fa:	6843      	ldr	r3, [r0, #4]
   181fc:	440b      	add	r3, r1
   181fe:	685b      	ldr	r3, [r3, #4]
   18200:	4798      	blx	r3
	return 0;
   18202:	2000      	movs	r0, #0
   18204:	e7f0      	b.n	181e8 <stop+0x34>

00018206 <api_stop>:
	return stop(dev, subsys, CTX_API);
   18206:	2280      	movs	r2, #128	; 0x80
   18208:	f7ff bfd4 	b.w	181b4 <stop>

0001820c <async_start>:
{
   1820c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1820e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   18210:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   18212:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   18214:	f04f 0520 	mov.w	r5, #32
   18218:	f3ef 8611 	mrs	r6, BASEPRI
   1821c:	f385 8812 	msr	BASEPRI_MAX, r5
   18220:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   18224:	250c      	movs	r5, #12
   18226:	4369      	muls	r1, r5
   18228:	440c      	add	r4, r1
   1822a:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1822c:	f005 0c07 	and.w	ip, r5, #7
   18230:	f1bc 0f01 	cmp.w	ip, #1
   18234:	d10b      	bne.n	1824e <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   18236:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   18238:	f386 8811 	msr	BASEPRI, r6
   1823c:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   18240:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   18244:	6843      	ldr	r3, [r0, #4]
   18246:	585b      	ldr	r3, [r3, r1]
   18248:	4798      	blx	r3
	return 0;
   1824a:	2000      	movs	r0, #0
}
   1824c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1824e:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   18252:	42af      	cmp	r7, r5
   18254:	f386 8811 	msr	BASEPRI, r6
   18258:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   1825c:	bf0c      	ite	eq
   1825e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   18262:	f04f 30ff 	movne.w	r0, #4294967295
   18266:	e7f1      	b.n	1824c <async_start+0x40>

00018268 <api_start>:
{
   18268:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1826a:	2480      	movs	r4, #128	; 0x80
   1826c:	9400      	str	r4, [sp, #0]
   1826e:	f7ff ffcd 	bl	1820c <async_start>
}
   18272:	b002      	add	sp, #8
   18274:	bd10      	pop	{r4, pc}

00018276 <onoff_started_callback>:
{
   18276:	b410      	push	{r4}
	notify(mgr, 0);
   18278:	241c      	movs	r4, #28
	return &data->mgr[type];
   1827a:	6900      	ldr	r0, [r0, #16]
   1827c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1827e:	fb03 0004 	mla	r0, r3, r4, r0
   18282:	2100      	movs	r1, #0
}
   18284:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   18288:	4710      	bx	r2

0001828a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1828a:	2000      	movs	r0, #0
   1828c:	f7f8 bfd0 	b.w	11230 <nrfx_clock_start>

00018290 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   18290:	2000      	movs	r0, #0
   18292:	f000 bedc 	b.w	1904e <nrfx_clock_stop>

00018296 <blocking_start_callback>:
{
   18296:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   18298:	f7fc ba78 	b.w	1478c <z_impl_k_sem_give>

0001829c <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   1829c:	4608      	mov	r0, r1
   1829e:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   182a0:	4611      	mov	r1, r2
   182a2:	f7f8 fec9 	bl	11038 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   182a6:	2800      	cmp	r0, #0
	}

	return 0;
}
   182a8:	bf18      	it	ne
   182aa:	f06f 0004 	mvnne.w	r0, #4
   182ae:	bd08      	pop	{r3, pc}

000182b0 <entropy_psa_crypto_rng_init>:
{
   182b0:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   182b2:	f000 fec7 	bl	19044 <psa_crypto_init>
		return -EIO;
   182b6:	2800      	cmp	r0, #0
}
   182b8:	bf18      	it	ne
   182ba:	f06f 0004 	mvnne.w	r0, #4
   182be:	bd08      	pop	{r3, pc}

000182c0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   182c0:	6843      	ldr	r3, [r0, #4]
}
   182c2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   182c4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   182c6:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   182c8:	600b      	str	r3, [r1, #0]
}
   182ca:	4770      	bx	lr

000182cc <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   182cc:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   182ce:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   182d2:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   182d4:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   182d8:	6098      	str	r0, [r3, #8]
}
   182da:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   182dc:	60d9      	str	r1, [r3, #12]
   182de:	4770      	bx	lr

000182e0 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   182e0:	6843      	ldr	r3, [r0, #4]
}
   182e2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   182e4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   182e6:	6099      	str	r1, [r3, #8]
}
   182e8:	4770      	bx	lr

000182ea <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   182ea:	6843      	ldr	r3, [r0, #4]
}
   182ec:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   182ee:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   182f0:	60d9      	str	r1, [r3, #12]
}
   182f2:	4770      	bx	lr

000182f4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   182f4:	6843      	ldr	r3, [r0, #4]
   182f6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   182f8:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   182fa:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   182fe:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   18300:	6090      	str	r0, [r2, #8]
}
   18302:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   18304:	60d3      	str	r3, [r2, #12]
   18306:	4770      	bx	lr

00018308 <gpio_nrfx_manage_callback>:
{
   18308:	b510      	push	{r4, lr}
	return port->data;
   1830a:	6903      	ldr	r3, [r0, #16]
	return list->head;
   1830c:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   1830e:	b1f8      	cbz	r0, 18350 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18310:	4288      	cmp	r0, r1
   18312:	d119      	bne.n	18348 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   18314:	689c      	ldr	r4, [r3, #8]
	return node->next;
   18316:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   18318:	42a1      	cmp	r1, r4
	list->head = node;
   1831a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1831c:	d100      	bne.n	18320 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   1831e:	6098      	str	r0, [r3, #8]
	parent->next = child;
   18320:	2000      	movs	r0, #0
   18322:	6008      	str	r0, [r1, #0]
	if (set) {
   18324:	b12a      	cbz	r2, 18332 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   18326:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   18328:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1832a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1832c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1832e:	b902      	cbnz	r2, 18332 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   18330:	6099      	str	r1, [r3, #8]
	return 0;
   18332:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   18334:	e010      	b.n	18358 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18336:	4281      	cmp	r1, r0
   18338:	d106      	bne.n	18348 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   1833a:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1833c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1833e:	6898      	ldr	r0, [r3, #8]
   18340:	4281      	cmp	r1, r0
   18342:	d1ed      	bne.n	18320 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   18344:	609c      	str	r4, [r3, #8]
}
   18346:	e7eb      	b.n	18320 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   18348:	4604      	mov	r4, r0
   1834a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1834c:	2800      	cmp	r0, #0
   1834e:	d1f2      	bne.n	18336 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   18350:	2a00      	cmp	r2, #0
   18352:	d1e8      	bne.n	18326 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   18354:	f06f 0015 	mvn.w	r0, #21
}
   18358:	bd10      	pop	{r4, pc}

0001835a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1835a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   1835c:	6843      	ldr	r3, [r0, #4]
   1835e:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   18360:	7a05      	ldrb	r5, [r0, #8]
   18362:	6844      	ldr	r4, [r0, #4]
   18364:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   18368:	42a3      	cmp	r3, r4
   1836a:	d302      	bcc.n	18372 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   1836c:	f06f 0001 	mvn.w	r0, #1
}
   18370:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   18372:	795c      	ldrb	r4, [r3, #5]
   18374:	428c      	cmp	r4, r1
   18376:	d001      	beq.n	1837c <pinctrl_lookup_state+0x22>
		(*state)++;
   18378:	3308      	adds	r3, #8
   1837a:	e7f0      	b.n	1835e <pinctrl_lookup_state+0x4>
			return 0;
   1837c:	2000      	movs	r0, #0
   1837e:	e7f7      	b.n	18370 <pinctrl_lookup_state+0x16>

00018380 <uarte_nrfx_config_get>:
{
   18380:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   18382:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   18384:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   18388:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1838c:	2000      	movs	r0, #0
   1838e:	4770      	bx	lr

00018390 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   18390:	6843      	ldr	r3, [r0, #4]
   18392:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   18394:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   18398:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1839c:	4770      	bx	lr

0001839e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1839e:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   183a0:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   183a2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   183a4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   183a8:	b150      	cbz	r0, 183c0 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   183aa:	2000      	movs	r0, #0
	*c = *data->rx_data;
   183ac:	6992      	ldr	r2, [r2, #24]
   183ae:	7812      	ldrb	r2, [r2, #0]
   183b0:	700a      	strb	r2, [r1, #0]
   183b2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   183b6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   183ba:	2201      	movs	r2, #1
   183bc:	601a      	str	r2, [r3, #0]
	return 0;
   183be:	4770      	bx	lr
		return -1;
   183c0:	f04f 30ff 	mov.w	r0, #4294967295
}
   183c4:	4770      	bx	lr

000183c6 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   183c6:	2a00      	cmp	r2, #0
{
   183c8:	b510      	push	{r4, lr}
   183ca:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   183cc:	dd10      	ble.n	183f0 <uarte_nrfx_fifo_read+0x2a>
	return config->uarte_regs;
   183ce:	6843      	ldr	r3, [r0, #4]
   183d0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   183d2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   183d6:	b150      	cbz	r0, 183ee <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   183d8:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = dev->data;
   183da:	6922      	ldr	r2, [r4, #16]
   183dc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   183e0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   183e4:	2001      	movs	r0, #1
		rx_data[num_rx++] = *data->rx_data;
   183e6:	6992      	ldr	r2, [r2, #24]
   183e8:	7812      	ldrb	r2, [r2, #0]
   183ea:	700a      	strb	r2, [r1, #0]
   183ec:	6018      	str	r0, [r3, #0]
}
   183ee:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   183f0:	2000      	movs	r0, #0
   183f2:	e7fc      	b.n	183ee <uarte_nrfx_fifo_read+0x28>

000183f4 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   183f4:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   183f6:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   183f8:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   183fa:	f04f 0020 	mov.w	r0, #32
   183fe:	f3ef 8311 	mrs	r3, BASEPRI
   18402:	f380 8812 	msr	BASEPRI_MAX, r0
   18406:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   1840a:	2000      	movs	r0, #0
   1840c:	68c9      	ldr	r1, [r1, #12]
   1840e:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   18410:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   18414:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   18418:	f383 8811 	msr	BASEPRI, r3
   1841c:	f3bf 8f6f 	isb	sy
}
   18420:	4770      	bx	lr

00018422 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   18422:	2201      	movs	r2, #1
   18424:	6903      	ldr	r3, [r0, #16]
   18426:	68db      	ldr	r3, [r3, #12]
   18428:	739a      	strb	r2, [r3, #14]
}
   1842a:	4770      	bx	lr

0001842c <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   1842c:	6903      	ldr	r3, [r0, #16]
   1842e:	68db      	ldr	r3, [r3, #12]
   18430:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   18432:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   18436:	b962      	cbnz	r2, 18452 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   18438:	6842      	ldr	r2, [r0, #4]
   1843a:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1843c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   18440:	b140      	cbz	r0, 18454 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   18442:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   18446:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1844a:	d003      	beq.n	18454 <uarte_nrfx_irq_tx_ready_complete+0x28>
   1844c:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   1844e:	6119      	str	r1, [r3, #16]
   18450:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   18452:	2000      	movs	r0, #0
}
   18454:	4770      	bx	lr

00018456 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   18456:	6843      	ldr	r3, [r0, #4]
   18458:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1845a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1845e:	3800      	subs	r0, #0
   18460:	bf18      	it	ne
   18462:	2001      	movne	r0, #1
   18464:	4770      	bx	lr

00018466 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   18466:	2210      	movs	r2, #16
	return config->uarte_regs;
   18468:	6843      	ldr	r3, [r0, #4]
   1846a:	681b      	ldr	r3, [r3, #0]
   1846c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   18470:	4770      	bx	lr

00018472 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   18472:	2210      	movs	r2, #16
	return config->uarte_regs;
   18474:	6843      	ldr	r3, [r0, #4]
   18476:	681b      	ldr	r3, [r3, #0]
   18478:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1847c:	4770      	bx	lr

0001847e <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1847e:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   18482:	6843      	ldr	r3, [r0, #4]
   18484:	681b      	ldr	r3, [r3, #0]
   18486:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1848a:	4770      	bx	lr

0001848c <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1848c:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   18490:	6843      	ldr	r3, [r0, #4]
   18492:	681b      	ldr	r3, [r3, #0]
   18494:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   18498:	4770      	bx	lr

0001849a <uarte_nrfx_irq_is_pending>:
{
   1849a:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   1849c:	6843      	ldr	r3, [r0, #4]
{
   1849e:	4604      	mov	r4, r0
	return config->uarte_regs;
   184a0:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   184a2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   184a6:	025b      	lsls	r3, r3, #9
   184a8:	d405      	bmi.n	184b6 <uarte_nrfx_irq_is_pending+0x1c>
   184aa:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   184ae:	f010 0010 	ands.w	r0, r0, #16
   184b2:	d106      	bne.n	184c2 <uarte_nrfx_irq_is_pending+0x28>
}
   184b4:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   184b6:	f7ff ffb9 	bl	1842c <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   184ba:	2800      	cmp	r0, #0
   184bc:	d0f5      	beq.n	184aa <uarte_nrfx_irq_is_pending+0x10>
		||
   184be:	2001      	movs	r0, #1
   184c0:	e7f8      	b.n	184b4 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   184c2:	4620      	mov	r0, r4
   184c4:	f7ff ffc7 	bl	18456 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   184c8:	3800      	subs	r0, #0
   184ca:	bf18      	it	ne
   184cc:	2001      	movne	r0, #1
   184ce:	e7f1      	b.n	184b4 <uarte_nrfx_irq_is_pending+0x1a>

000184d0 <uarte_nrfx_irq_update>:
}
   184d0:	2001      	movs	r0, #1
   184d2:	4770      	bx	lr

000184d4 <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   184d4:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   184d6:	68d8      	ldr	r0, [r3, #12]
   184d8:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   184da:	68db      	ldr	r3, [r3, #12]
   184dc:	605a      	str	r2, [r3, #4]
}
   184de:	4770      	bx	lr

000184e0 <tx_start>:
{
   184e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = dev->config;
   184e4:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   184e8:	460f      	mov	r7, r1
	(void)pm_device_state_get(dev, &state);
   184ea:	f10d 0107 	add.w	r1, sp, #7
{
   184ee:	4605      	mov	r5, r0
   184f0:	4616      	mov	r6, r2
	return config->uarte_regs;
   184f2:	f8d8 4000 	ldr.w	r4, [r8]
	(void)pm_device_state_get(dev, &state);
   184f6:	f7ff fc95 	bl	17e24 <pm_device_state_get>
	if (state != PM_DEVICE_STATE_ACTIVE) {
   184fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   184fe:	b9d3      	cbnz	r3, 18536 <tx_start+0x56>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   18500:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   18504:	f8c4 6548 	str.w	r6, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18508:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1850c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   18510:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   18514:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   18518:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1851c:	06db      	lsls	r3, r3, #27
   1851e:	d508      	bpl.n	18532 <tx_start+0x52>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   18520:	2208      	movs	r2, #8
	return config->uarte_regs;
   18522:	686b      	ldr	r3, [r5, #4]
   18524:	681b      	ldr	r3, [r3, #0]
   18526:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1852a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1852e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18532:	2301      	movs	r3, #1
   18534:	60a3      	str	r3, [r4, #8]
}
   18536:	b002      	add	sp, #8
   18538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001853c <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1853c:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1853e:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18540:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   18544:	b940      	cbnz	r0, 18558 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   18546:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   18548:	079b      	lsls	r3, r3, #30
   1854a:	d406      	bmi.n	1855a <is_tx_ready.isra.0+0x1e>
   1854c:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   18550:	3800      	subs	r0, #0
   18552:	bf18      	it	ne
   18554:	2001      	movne	r0, #1
   18556:	4770      	bx	lr
   18558:	2001      	movs	r0, #1
}
   1855a:	4770      	bx	lr

0001855c <uarte_nrfx_fifo_fill>:
{
   1855c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   1855e:	6906      	ldr	r6, [r0, #16]
{
   18560:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
   18562:	68f3      	ldr	r3, [r6, #12]
   18564:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18566:	3310      	adds	r3, #16
   18568:	4294      	cmp	r4, r2
   1856a:	bfa8      	it	ge
   1856c:	4614      	movge	r4, r2
   1856e:	2201      	movs	r2, #1
   18570:	e8d3 0fef 	ldaex	r0, [r3]
   18574:	2800      	cmp	r0, #0
   18576:	d103      	bne.n	18580 <uarte_nrfx_fifo_fill+0x24>
   18578:	e8c3 2fe7 	stlex	r7, r2, [r3]
   1857c:	2f00      	cmp	r7, #0
   1857e:	d1f7      	bne.n	18570 <uarte_nrfx_fifo_fill+0x14>
   18580:	bf0c      	ite	eq
   18582:	4613      	moveq	r3, r2
   18584:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   18586:	d11f      	bne.n	185c8 <uarte_nrfx_fifo_fill+0x6c>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
   18588:	68f3      	ldr	r3, [r6, #12]
   1858a:	4622      	mov	r2, r4
   1858c:	6898      	ldr	r0, [r3, #8]
   1858e:	f002 f8a9 	bl	1a6e4 <memcpy>
	__asm__ volatile(
   18592:	f04f 0320 	mov.w	r3, #32
   18596:	f3ef 8711 	mrs	r7, BASEPRI
   1859a:	f383 8812 	msr	BASEPRI_MAX, r3
   1859e:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   185a2:	6868      	ldr	r0, [r5, #4]
   185a4:	f7ff ffca 	bl	1853c <is_tx_ready.isra.0>
   185a8:	68f3      	ldr	r3, [r6, #12]
   185aa:	b938      	cbnz	r0, 185bc <uarte_nrfx_fifo_fill+0x60>
		len = 0;
   185ac:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   185ae:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   185b0:	f387 8811 	msr	BASEPRI, r7
   185b4:	f3bf 8f6f 	isb	sy
}
   185b8:	4620      	mov	r0, r4
   185ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   185bc:	4622      	mov	r2, r4
   185be:	4628      	mov	r0, r5
   185c0:	6899      	ldr	r1, [r3, #8]
   185c2:	f7ff ff8d 	bl	184e0 <tx_start>
   185c6:	e7f3      	b.n	185b0 <uarte_nrfx_fifo_fill+0x54>
		return 0;
   185c8:	461c      	mov	r4, r3
   185ca:	e7f5      	b.n	185b8 <uarte_nrfx_fifo_fill+0x5c>

000185cc <uarte_nrfx_isr_int>:
{
   185cc:	b410      	push	{r4}
	const struct uarte_nrfx_config *config = dev->config;
   185ce:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   185d0:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   185d2:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   185d6:	05c9      	lsls	r1, r1, #23
   185d8:	d518      	bpl.n	1860c <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   185da:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   185de:	b1a9      	cbz	r1, 1860c <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   185e0:	f04f 0420 	mov.w	r4, #32
   185e4:	f3ef 8111 	mrs	r1, BASEPRI
   185e8:	f384 8812 	msr	BASEPRI_MAX, r4
   185ec:	f3bf 8f6f 	isb	sy
   185f0:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   185f4:	b134      	cbz	r4, 18604 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   185f6:	2400      	movs	r4, #0
   185f8:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   185fc:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18600:	2401      	movs	r4, #1
   18602:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   18604:	f381 8811 	msr	BASEPRI, r1
   18608:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1860c:	6852      	ldr	r2, [r2, #4]
   1860e:	06d2      	lsls	r2, r2, #27
   18610:	d51a      	bpl.n	18648 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   18612:	f04f 0220 	mov.w	r2, #32
   18616:	f3ef 8111 	mrs	r1, BASEPRI
   1861a:	f382 8812 	msr	BASEPRI_MAX, r2
   1861e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18622:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   18626:	b112      	cbz	r2, 1862e <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   18628:	2200      	movs	r2, #0
   1862a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   1862e:	6902      	ldr	r2, [r0, #16]
   18630:	68d2      	ldr	r2, [r2, #12]
   18632:	b10a      	cbz	r2, 18638 <uarte_nrfx_isr_int+0x6c>
   18634:	6912      	ldr	r2, [r2, #16]
   18636:	b91a      	cbnz	r2, 18640 <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   18638:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1863c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   18640:	f381 8811 	msr	BASEPRI, r1
   18644:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
   18648:	6902      	ldr	r2, [r0, #16]
	if (!data->int_driven) {
   1864a:	68d4      	ldr	r4, [r2, #12]
   1864c:	b16c      	cbz	r4, 1866a <uarte_nrfx_isr_int+0x9e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1864e:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   18652:	b169      	cbz	r1, 18670 <uarte_nrfx_isr_int+0xa4>
		data->int_driven->fifo_fill_lock = 0;
   18654:	2100      	movs	r1, #0
   18656:	6121      	str	r1, [r4, #16]
		if (data->int_driven->disable_tx_irq) {
   18658:	68d4      	ldr	r4, [r2, #12]
   1865a:	7ba4      	ldrb	r4, [r4, #14]
   1865c:	b144      	cbz	r4, 18670 <uarte_nrfx_isr_int+0xa4>
    p_reg->INTENCLR = mask;
   1865e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   18662:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   18666:	68d3      	ldr	r3, [r2, #12]
   18668:	7399      	strb	r1, [r3, #14]
}
   1866a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1866e:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18670:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   18674:	b121      	cbz	r1, 18680 <uarte_nrfx_isr_int+0xb4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18676:	2100      	movs	r1, #0
   18678:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   1867c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   18680:	68d2      	ldr	r2, [r2, #12]
   18682:	6813      	ldr	r3, [r2, #0]
   18684:	2b00      	cmp	r3, #0
   18686:	d0f0      	beq.n	1866a <uarte_nrfx_isr_int+0x9e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   18688:	6851      	ldr	r1, [r2, #4]
}
   1868a:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1868e:	4718      	bx	r3

00018690 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   18690:	b513      	push	{r0, r1, r4, lr}
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   18692:	aa01      	add	r2, sp, #4
{
   18694:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   18696:	f7ff fe60 	bl	1835a <pinctrl_lookup_state>
	if (ret < 0) {
   1869a:	2800      	cmp	r0, #0
   1869c:	db05      	blt.n	186aa <pinctrl_apply_state+0x1a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1869e:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   186a0:	6822      	ldr	r2, [r4, #0]
   186a2:	7919      	ldrb	r1, [r3, #4]
   186a4:	6818      	ldr	r0, [r3, #0]
   186a6:	f7f5 f879 	bl	d79c <pinctrl_configure_pins>
}
   186aa:	b002      	add	sp, #8
   186ac:	bd10      	pop	{r4, pc}

000186ae <uarte_nrfx_pm_action>:
{
   186ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = dev->config;
   186b2:	6846      	ldr	r6, [r0, #4]
{
   186b4:	4605      	mov	r5, r0
	return config->uarte_regs;
   186b6:	6834      	ldr	r4, [r6, #0]
	struct uarte_nrfx_data *data = dev->data;
   186b8:	6907      	ldr	r7, [r0, #16]
	switch (action) {
   186ba:	b309      	cbz	r1, 18700 <uarte_nrfx_pm_action+0x52>
   186bc:	2901      	cmp	r1, #1
   186be:	f040 8083 	bne.w	187c8 <uarte_nrfx_pm_action+0x11a>
		if (cfg->flags & UARTE_CFG_FLAG_GPIO_MGMT) {
   186c2:	6873      	ldr	r3, [r6, #4]
   186c4:	07da      	lsls	r2, r3, #31
   186c6:	d413      	bmi.n	186f0 <uarte_nrfx_pm_action+0x42>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   186c8:	2308      	movs	r3, #8
   186ca:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   186ce:	7a33      	ldrb	r3, [r6, #8]
   186d0:	b963      	cbnz	r3, 186ec <uarte_nrfx_pm_action+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   186d2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   186d6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   186da:	2301      	movs	r3, #1
   186dc:	6023      	str	r3, [r4, #0]
			if (data->int_driven &&
   186de:	68fb      	ldr	r3, [r7, #12]
   186e0:	b123      	cbz	r3, 186ec <uarte_nrfx_pm_action+0x3e>
   186e2:	7bdb      	ldrb	r3, [r3, #15]
   186e4:	b113      	cbz	r3, 186ec <uarte_nrfx_pm_action+0x3e>
    p_reg->INTENSET = mask;
   186e6:	2310      	movs	r3, #16
   186e8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	return 0;
   186ec:	2000      	movs	r0, #0
   186ee:	e005      	b.n	186fc <uarte_nrfx_pm_action+0x4e>
			ret = pinctrl_apply_state(cfg->pcfg,
   186f0:	2100      	movs	r1, #0
   186f2:	68f0      	ldr	r0, [r6, #12]
   186f4:	f7ff ffcc 	bl	18690 <pinctrl_apply_state>
			if (ret < 0) {
   186f8:	2800      	cmp	r0, #0
   186fa:	dae5      	bge.n	186c8 <uarte_nrfx_pm_action+0x1a>
}
   186fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18700:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   18704:	b313      	cbz	r3, 1874c <uarte_nrfx_pm_action+0x9e>
			if (data->int_driven) {
   18706:	68fa      	ldr	r2, [r7, #12]
   18708:	b152      	cbz	r2, 18720 <uarte_nrfx_pm_action+0x72>
    return p_reg->INTENSET & mask;
   1870a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
					nrf_uarte_int_enable_check(uarte,
   1870e:	f3c3 1300 	ubfx	r3, r3, #4, #1
				data->int_driven->rx_irq_enabled =
   18712:	73d3      	strb	r3, [r2, #15]
				if (data->int_driven->rx_irq_enabled) {
   18714:	68fb      	ldr	r3, [r7, #12]
   18716:	7bdb      	ldrb	r3, [r3, #15]
   18718:	b113      	cbz	r3, 18720 <uarte_nrfx_pm_action+0x72>
    p_reg->INTENCLR = mask;
   1871a:	2310      	movs	r3, #16
   1871c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18720:	2301      	movs	r3, #1
   18722:	6063      	str	r3, [r4, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18724:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
						      NRF_UARTE_EVENT_RXTO) &&
   18728:	b91b      	cbnz	r3, 18732 <uarte_nrfx_pm_action+0x84>
   1872a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1872e:	2b00      	cmp	r3, #0
   18730:	d0f8      	beq.n	18724 <uarte_nrfx_pm_action+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18732:	2300      	movs	r3, #0
   18734:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   18738:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   1873c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   18740:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   18744:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18748:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	const struct uarte_nrfx_config *config = dev->config;
   1874c:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   1874e:	e9d2 4300 	ldrd	r4, r3, [r2]
	if (!ppi_endtx) {
   18752:	f013 0802 	ands.w	r8, r3, #2
   18756:	d117      	bne.n	18788 <uarte_nrfx_pm_action+0xda>
    p_reg->INTENCLR = mask;
   18758:	f44f 7380 	mov.w	r3, #256	; 0x100
   1875c:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   18760:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
		NRFX_WAIT_FOR(is_tx_ready(dev), 1000, 1, res);
   18764:	6868      	ldr	r0, [r5, #4]
   18766:	f7ff fee9 	bl	1853c <is_tx_ready.isra.0>
   1876a:	b920      	cbnz	r0, 18776 <uarte_nrfx_pm_action+0xc8>
   1876c:	2001      	movs	r0, #1
   1876e:	f000 fc6c 	bl	1904a <nrfx_busy_wait>
   18772:	3f01      	subs	r7, #1
   18774:	d1f6      	bne.n	18764 <uarte_nrfx_pm_action+0xb6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18776:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1877a:	b92b      	cbnz	r3, 18788 <uarte_nrfx_pm_action+0xda>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1877c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   18780:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18784:	2301      	movs	r3, #1
   18786:	60e3      	str	r3, [r4, #12]
    p_reg->INTENCLR = mask;
   18788:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1878c:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED),
   18790:	b923      	cbnz	r3, 1879c <uarte_nrfx_pm_action+0xee>
   18792:	2001      	movs	r0, #1
   18794:	f000 fc59 	bl	1904a <nrfx_busy_wait>
   18798:	3f01      	subs	r7, #1
   1879a:	d1f7      	bne.n	1878c <uarte_nrfx_pm_action+0xde>
	if (!ppi_endtx) {
   1879c:	f1b8 0f00 	cmp.w	r8, #0
   187a0:	d103      	bne.n	187aa <uarte_nrfx_pm_action+0xfc>
    p_reg->INTENSET = mask;
   187a2:	f44f 7380 	mov.w	r3, #256	; 0x100
   187a6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   187aa:	2200      	movs	r2, #0
	return config->uarte_regs;
   187ac:	686b      	ldr	r3, [r5, #4]
   187ae:	681b      	ldr	r3, [r3, #0]
   187b0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (cfg->flags & UARTE_CFG_FLAG_GPIO_MGMT) {
   187b4:	6873      	ldr	r3, [r6, #4]
   187b6:	07db      	lsls	r3, r3, #31
   187b8:	d598      	bpl.n	186ec <uarte_nrfx_pm_action+0x3e>
			ret = pinctrl_apply_state(cfg->pcfg,
   187ba:	2101      	movs	r1, #1
   187bc:	68f0      	ldr	r0, [r6, #12]
   187be:	f7ff ff67 	bl	18690 <pinctrl_apply_state>
			if (ret < 0) {
   187c2:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   187c6:	e799      	b.n	186fc <uarte_nrfx_pm_action+0x4e>
	switch (action) {
   187c8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   187cc:	e796      	b.n	186fc <uarte_nrfx_pm_action+0x4e>

000187ce <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   187ce:	4770      	bx	lr

000187d0 <event_clear>:
   187d0:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   187d2:	f100 0350 	add.w	r3, r0, #80	; 0x50
   187d6:	009b      	lsls	r3, r3, #2
   187d8:	b29b      	uxth	r3, r3
   187da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   187de:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   187e2:	601a      	str	r2, [r3, #0]
   187e4:	681b      	ldr	r3, [r3, #0]
}
   187e6:	4770      	bx	lr

000187e8 <sys_clock_cycle_get_32>:
{
   187e8:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   187ea:	f7f5 fa4f 	bl	dc8c <z_nrf_rtc_timer_read>
}
   187ee:	bd08      	pop	{r3, pc}

000187f0 <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   187f0:	f001 bdac 	b.w	1a34c <z_impl_k_busy_wait>

000187f4 <nrf_modem_os_sleep>:
{
   187f4:	b538      	push	{r3, r4, r5, lr}
	if (timeout == NRF_MODEM_OS_NO_WAIT || timeout == NRF_MODEM_OS_FOREVER) {
   187f6:	1e43      	subs	r3, r0, #1
   187f8:	3303      	adds	r3, #3
{
   187fa:	4604      	mov	r4, r0
	if (timeout == NRF_MODEM_OS_NO_WAIT || timeout == NRF_MODEM_OS_FOREVER) {
   187fc:	d80f      	bhi.n	1881e <nrf_modem_os_sleep+0x2a>
   187fe:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   18802:	f240 30e7 	movw	r0, #999	; 0x3e7
   18806:	2100      	movs	r1, #0
   18808:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1880c:	2300      	movs	r3, #0
   1880e:	fbe4 0105 	umlal	r0, r1, r4, r5
   18812:	f7f0 f8b7 	bl	8984 <__aeabi_uldivmod>
}
   18816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
   1881a:	f7fc bb5f 	b.w	14edc <z_impl_k_sleep>
   1881e:	f06f 0015 	mvn.w	r0, #21
   18822:	bd38      	pop	{r3, r4, r5, pc}

00018824 <nrf_modem_os_errno_set>:
{
   18824:	b510      	push	{r4, lr}
   18826:	4604      	mov	r4, r0
	errno = err_code;
   18828:	f7ff fbe4 	bl	17ff4 <__errno>
   1882c:	6004      	str	r4, [r0, #0]
}
   1882e:	bd10      	pop	{r4, pc}

00018830 <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   18830:	f001 bb7a 	b.w	19f28 <k_is_in_isr>

00018834 <nrf_modem_os_sem_give>:
	z_impl_k_sem_give(sem);
   18834:	f7fb bfaa 	b.w	1478c <z_impl_k_sem_give>

00018838 <nrf_modem_os_sem_take>:
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   18838:	1c4b      	adds	r3, r1, #1
{
   1883a:	b570      	push	{r4, r5, r6, lr}
   1883c:	4605      	mov	r5, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   1883e:	d017      	beq.n	18870 <nrf_modem_os_sem_take+0x38>
   18840:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   18844:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   18848:	f240 30e7 	movw	r0, #999	; 0x3e7
   1884c:	2100      	movs	r1, #0
   1884e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18852:	2300      	movs	r3, #0
   18854:	fbc4 0106 	smlal	r0, r1, r4, r6
   18858:	f7f0 f894 	bl	8984 <__aeabi_uldivmod>
   1885c:	4602      	mov	r2, r0
   1885e:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   18860:	4628      	mov	r0, r5
   18862:	f7fb ffb9 	bl	147d8 <z_impl_k_sem_take>
		return -NRF_EAGAIN;
   18866:	2800      	cmp	r0, #0
}
   18868:	bf18      	it	ne
   1886a:	f06f 000a 	mvnne.w	r0, #10
   1886e:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   18870:	f04f 32ff 	mov.w	r2, #4294967295
   18874:	4613      	mov	r3, r2
   18876:	e7f3      	b.n	18860 <nrf_modem_os_sem_take+0x28>

00018878 <nrf91_iface_enable>:
#else
	ARG_UNUSED(iface);
	ARG_UNUSED(enabled);
	return 0;
#endif /* CONFIG_NRF9160_CONNECTIVITY */
}
   18878:	2000      	movs	r0, #0
   1887a:	4770      	bx	lr

0001887c <nrf91_socket_offload_setsockopt>:
{
   1887c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18880:	460e      	mov	r6, r1
   18882:	4615      	mov	r5, r2
   18884:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = { 0 };
   18886:	2300      	movs	r3, #0
{
   18888:	b086      	sub	sp, #24
	int sd = OBJ_TO_SD(obj);
   1888a:	f8d0 8000 	ldr.w	r8, [r0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   1888e:	4629      	mov	r1, r5
   18890:	4630      	mov	r0, r6
   18892:	aa03      	add	r2, sp, #12
	struct nrf_timeval nrf_timeo = { 0 };
   18894:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
   18898:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   1889a:	f7f5 fd5f 	bl	e35c <z_to_nrf_optname>
   1889e:	2800      	cmp	r0, #0
   188a0:	da08      	bge.n	188b4 <nrf91_socket_offload_setsockopt+0x38>
		errno = ENOPROTOOPT;
   188a2:	f7ff fba7 	bl	17ff4 <__errno>
   188a6:	236d      	movs	r3, #109	; 0x6d
   188a8:	6003      	str	r3, [r0, #0]
		return -1;
   188aa:	f04f 30ff 	mov.w	r0, #4294967295
}
   188ae:	b006      	add	sp, #24
   188b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   188b4:	2e01      	cmp	r6, #1
   188b6:	d111      	bne.n	188dc <nrf91_socket_offload_setsockopt+0x60>
   188b8:	3d14      	subs	r5, #20
   188ba:	2d01      	cmp	r5, #1
   188bc:	d806      	bhi.n	188cc <nrf91_socket_offload_setsockopt+0x50>
		if (optval != NULL) {
   188be:	b12c      	cbz	r4, 188cc <nrf91_socket_offload_setsockopt+0x50>
			nrf_optlen = sizeof(struct nrf_timeval);
   188c0:	2708      	movs	r7, #8
			nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   188c2:	6823      	ldr	r3, [r4, #0]
   188c4:	9304      	str	r3, [sp, #16]
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   188c6:	68a3      	ldr	r3, [r4, #8]
			nrf_optval = &nrf_timeo;
   188c8:	ac04      	add	r4, sp, #16
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   188ca:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   188cc:	4623      	mov	r3, r4
   188ce:	4631      	mov	r1, r6
   188d0:	4640      	mov	r0, r8
   188d2:	9a03      	ldr	r2, [sp, #12]
   188d4:	9700      	str	r7, [sp, #0]
   188d6:	f7fa faf5 	bl	12ec4 <nrf_setsockopt>
	return retval;
   188da:	e7e8      	b.n	188ae <nrf91_socket_offload_setsockopt+0x32>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   188dc:	f5b6 7f8d 	cmp.w	r6, #282	; 0x11a
   188e0:	d1f4      	bne.n	188cc <nrf91_socket_offload_setsockopt+0x50>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   188e2:	2d0c      	cmp	r5, #12
   188e4:	bf08      	it	eq
   188e6:	2704      	moveq	r7, #4
   188e8:	e7f0      	b.n	188cc <nrf91_socket_offload_setsockopt+0x50>

000188ea <nrf91_socket_offload_getsockopt>:
{
   188ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   188ee:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   188f0:	2300      	movs	r3, #0
{
   188f2:	b086      	sub	sp, #24
   188f4:	460f      	mov	r7, r1
   188f6:	4615      	mov	r5, r2
	struct nrf_timeval nrf_timeo = {0, 0};
   188f8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   188fc:	2308      	movs	r3, #8
	int sd = OBJ_TO_SD(obj);
   188fe:	6806      	ldr	r6, [r0, #0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   18900:	4629      	mov	r1, r5
   18902:	4638      	mov	r0, r7
   18904:	eb0d 0203 	add.w	r2, sp, r3
{
   18908:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   1890c:	9303      	str	r3, [sp, #12]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   1890e:	f7f5 fd25 	bl	e35c <z_to_nrf_optname>
   18912:	2800      	cmp	r0, #0
   18914:	da09      	bge.n	1892a <nrf91_socket_offload_getsockopt+0x40>
		errno = ENOPROTOOPT;
   18916:	f7ff fb6d 	bl	17ff4 <__errno>
   1891a:	236d      	movs	r3, #109	; 0x6d
		return -1;
   1891c:	f04f 36ff 	mov.w	r6, #4294967295
		errno = ENOPROTOOPT;
   18920:	6003      	str	r3, [r0, #0]
}
   18922:	4630      	mov	r0, r6
   18924:	b006      	add	sp, #24
   18926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   1892a:	2f01      	cmp	r7, #1
   1892c:	d11c      	bne.n	18968 <nrf91_socket_offload_getsockopt+0x7e>
   1892e:	f1a5 0314 	sub.w	r3, r5, #20
   18932:	2b01      	cmp	r3, #1
   18934:	d818      	bhi.n	18968 <nrf91_socket_offload_getsockopt+0x7e>
		nrf_optlen = &nrf_timeo_size;
   18936:	aa03      	add	r2, sp, #12
		nrf_optval = &nrf_timeo;
   18938:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1893a:	4630      	mov	r0, r6
   1893c:	9200      	str	r2, [sp, #0]
   1893e:	4639      	mov	r1, r7
   18940:	9a02      	ldr	r2, [sp, #8]
   18942:	f7fa fbfd 	bl	13140 <nrf_getsockopt>
	if (retval == 0) {
   18946:	4606      	mov	r6, r0
   18948:	2800      	cmp	r0, #0
   1894a:	d1ea      	bne.n	18922 <nrf91_socket_offload_getsockopt+0x38>
		if (level == SOL_SOCKET) {
   1894c:	2f01      	cmp	r7, #1
   1894e:	d1e8      	bne.n	18922 <nrf91_socket_offload_getsockopt+0x38>
			if (optname == SO_ERROR) {
   18950:	2d04      	cmp	r5, #4
   18952:	d10c      	bne.n	1896e <nrf91_socket_offload_getsockopt+0x84>
				if (*(int *)optval != 0) {
   18954:	6820      	ldr	r0, [r4, #0]
   18956:	2800      	cmp	r0, #0
   18958:	d0e3      	beq.n	18922 <nrf91_socket_offload_getsockopt+0x38>
					nrf_modem_os_errno_set(*(int *)optval);
   1895a:	f7ff ff63 	bl	18824 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   1895e:	f7ff fb49 	bl	17ff4 <__errno>
   18962:	6803      	ldr	r3, [r0, #0]
   18964:	6023      	str	r3, [r4, #0]
   18966:	e7dc      	b.n	18922 <nrf91_socket_offload_getsockopt+0x38>
	nrf_socklen_t *nrf_optlen = (nrf_socklen_t *)optlen;
   18968:	4642      	mov	r2, r8
   1896a:	4623      	mov	r3, r4
   1896c:	e7e5      	b.n	1893a <nrf91_socket_offload_getsockopt+0x50>
			} else if ((optname == SO_RCVTIMEO) ||
   1896e:	3d14      	subs	r5, #20
   18970:	2d01      	cmp	r5, #1
   18972:	d8d6      	bhi.n	18922 <nrf91_socket_offload_getsockopt+0x38>
					nrf_timeo.tv_sec;
   18974:	9b04      	ldr	r3, [sp, #16]
   18976:	e9c4 3000 	strd	r3, r0, [r4]
				((struct timeval *)optval)->tv_usec =
   1897a:	9b05      	ldr	r3, [sp, #20]
   1897c:	60a3      	str	r3, [r4, #8]
				*optlen = sizeof(struct timeval);
   1897e:	2310      	movs	r3, #16
   18980:	f8c8 3000 	str.w	r3, [r8]
   18984:	e7cd      	b.n	18922 <nrf91_socket_offload_getsockopt+0x38>

00018986 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   18986:	6800      	ldr	r0, [r0, #0]
   18988:	f000 bee3 	b.w	19752 <nrf_listen>

0001898c <nrf91_socket_offload_freeaddrinfo>:
{
   1898c:	b538      	push	{r3, r4, r5, lr}
   1898e:	4604      	mov	r4, r0
	while (next != NULL) {
   18990:	b904      	cbnz	r4, 18994 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   18992:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   18994:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   18996:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   18998:	f001 fe69 	bl	1a66e <k_free>
		k_free(this);
   1899c:	4620      	mov	r0, r4
   1899e:	f001 fe66 	bl	1a66e <k_free>
		next = next->ai_next;
   189a2:	462c      	mov	r4, r5
   189a4:	e7f4      	b.n	18990 <nrf91_socket_offload_freeaddrinfo+0x4>

000189a6 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   189a6:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   189a8:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   189aa:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   189ac:	4603      	mov	r3, r0
{
   189ae:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   189b0:	f823 2b04 	strh.w	r2, [r3], #4
   189b4:	f101 0420 	add.w	r4, r1, #32
   189b8:	f101 0210 	add.w	r2, r1, #16
   189bc:	f852 5b04 	ldr.w	r5, [r2], #4
   189c0:	42a2      	cmp	r2, r4
   189c2:	f843 5b04 	str.w	r5, [r3], #4
   189c6:	d1f9      	bne.n	189bc <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   189c8:	6a0b      	ldr	r3, [r1, #32]
   189ca:	7503      	strb	r3, [r0, #20]
}
   189cc:	bd30      	pop	{r4, r5, pc}

000189ce <z_to_nrf_ipv6>:
{
   189ce:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   189d0:	2124      	movs	r1, #36	; 0x24
{
   189d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   189d4:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   189d6:	8841      	ldrh	r1, [r0, #2]
{
   189d8:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   189da:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   189dc:	2102      	movs	r1, #2
   189de:	1d04      	adds	r4, r0, #4
   189e0:	6059      	str	r1, [r3, #4]
   189e2:	f103 0610 	add.w	r6, r3, #16
   189e6:	f100 0714 	add.w	r7, r0, #20
   189ea:	4635      	mov	r5, r6
   189ec:	6820      	ldr	r0, [r4, #0]
   189ee:	6861      	ldr	r1, [r4, #4]
   189f0:	3408      	adds	r4, #8
   189f2:	c503      	stmia	r5!, {r0, r1}
   189f4:	42bc      	cmp	r4, r7
   189f6:	462e      	mov	r6, r5
   189f8:	d1f7      	bne.n	189ea <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   189fa:	7d12      	ldrb	r2, [r2, #20]
   189fc:	621a      	str	r2, [r3, #32]
}
   189fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018a00 <nrf91_socket_offload_sendto>:
{
   18a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18a04:	4604      	mov	r4, r0
   18a06:	b08c      	sub	sp, #48	; 0x30
   18a08:	9812      	ldr	r0, [sp, #72]	; 0x48
   18a0a:	460d      	mov	r5, r1
   18a0c:	4616      	mov	r6, r2
   18a0e:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   18a10:	6824      	ldr	r4, [r4, #0]
	if (to == NULL) {
   18a12:	b930      	cbnz	r0, 18a22 <nrf91_socket_offload_sendto+0x22>
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   18a14:	9013      	str	r0, [sp, #76]	; 0x4c
   18a16:	4620      	mov	r0, r4
}
   18a18:	b00c      	add	sp, #48	; 0x30
   18a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   18a1e:	f7fa b945 	b.w	12cac <nrf_sendto>
	} else if (to->sa_family == AF_INET) {
   18a22:	f8b0 c000 	ldrh.w	ip, [r0]
   18a26:	f1bc 0f01 	cmp.w	ip, #1
   18a2a:	d112      	bne.n	18a52 <nrf91_socket_offload_sendto+0x52>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   18a2c:	2510      	movs	r5, #16
	nrf_out->sin_port = ptr->sin_port;
   18a2e:	8846      	ldrh	r6, [r0, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   18a30:	6840      	ldr	r0, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   18a32:	f88d 500c 	strb.w	r5, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   18a36:	9006      	str	r0, [sp, #24]
		retval = nrf_sendto(sd, buf, len, flags,
   18a38:	a803      	add	r0, sp, #12
	nrf_out->sin_port = ptr->sin_port;
   18a3a:	f8ad 6014 	strh.w	r6, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   18a3e:	f8cd c010 	str.w	ip, [sp, #16]
		retval = nrf_sendto(sd, buf, len, flags,
   18a42:	9501      	str	r5, [sp, #4]
   18a44:	9000      	str	r0, [sp, #0]
		retval = nrf_sendto(sd, buf, len, flags,
   18a46:	4620      	mov	r0, r4
   18a48:	f7fa f930 	bl	12cac <nrf_sendto>
}
   18a4c:	b00c      	add	sp, #48	; 0x30
   18a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET6) {
   18a52:	f1bc 0f02 	cmp.w	ip, #2
   18a56:	d10b      	bne.n	18a70 <nrf91_socket_offload_sendto+0x70>
		z_to_nrf_ipv6(to, &ipv6);
   18a58:	f10d 080c 	add.w	r8, sp, #12
   18a5c:	4641      	mov	r1, r8
   18a5e:	f7ff ffb6 	bl	189ce <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, flags,
   18a62:	2324      	movs	r3, #36	; 0x24
   18a64:	4632      	mov	r2, r6
   18a66:	e9cd 8300 	strd	r8, r3, [sp]
   18a6a:	4629      	mov	r1, r5
   18a6c:	463b      	mov	r3, r7
   18a6e:	e7ea      	b.n	18a46 <nrf91_socket_offload_sendto+0x46>
		errno = EAFNOSUPPORT;
   18a70:	f7ff fac0 	bl	17ff4 <__errno>
   18a74:	236a      	movs	r3, #106	; 0x6a
   18a76:	6003      	str	r3, [r0, #0]
		retval = -1;
   18a78:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   18a7c:	e7e6      	b.n	18a4c <nrf91_socket_offload_sendto+0x4c>

00018a7e <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   18a7e:	2300      	movs	r3, #0
{
   18a80:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   18a82:	e9cd 3300 	strd	r3, r3, [sp]
   18a86:	f7ff ffbb 	bl	18a00 <nrf91_socket_offload_sendto>
}
   18a8a:	b003      	add	sp, #12
   18a8c:	f85d fb04 	ldr.w	pc, [sp], #4

00018a90 <nrf91_socket_offload_connect>:
{
   18a90:	4603      	mov	r3, r0
   18a92:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   18a94:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   18a96:	880b      	ldrh	r3, [r1, #0]
{
   18a98:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   18a9a:	2b01      	cmp	r3, #1
{
   18a9c:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   18a9e:	d10e      	bne.n	18abe <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   18aa0:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   18aa2:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   18aa4:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   18aa6:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   18aa8:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   18aac:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   18ab0:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   18ab2:	4620      	mov	r0, r4
   18ab4:	a901      	add	r1, sp, #4
   18ab6:	f000 fd69 	bl	1958c <nrf_connect>
}
   18aba:	b00a      	add	sp, #40	; 0x28
   18abc:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   18abe:	2b02      	cmp	r3, #2
   18ac0:	d104      	bne.n	18acc <nrf91_socket_offload_connect+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   18ac2:	a901      	add	r1, sp, #4
   18ac4:	f7ff ff83 	bl	189ce <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   18ac8:	2224      	movs	r2, #36	; 0x24
   18aca:	e7f2      	b.n	18ab2 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   18acc:	4620      	mov	r0, r4
}
   18ace:	b00a      	add	sp, #40	; 0x28
   18ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		retval = nrf_connect(sd, (void *)addr, addrlen);
   18ad4:	f000 bd5a 	b.w	1958c <nrf_connect>

00018ad8 <nrf91_socket_offload_bind>:
{
   18ad8:	4603      	mov	r3, r0
   18ada:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   18adc:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   18ade:	880b      	ldrh	r3, [r1, #0]
{
   18ae0:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   18ae2:	2b01      	cmp	r3, #1
{
   18ae4:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   18ae6:	d10e      	bne.n	18b06 <nrf91_socket_offload_bind+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   18ae8:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   18aea:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   18aec:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   18aee:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   18af0:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   18af4:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   18af8:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   18afa:	4620      	mov	r0, r4
   18afc:	a901      	add	r1, sp, #4
   18afe:	f000 fddf 	bl	196c0 <nrf_bind>
}
   18b02:	b00a      	add	sp, #40	; 0x28
   18b04:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   18b06:	2b02      	cmp	r3, #2
   18b08:	d104      	bne.n	18b14 <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   18b0a:	a901      	add	r1, sp, #4
   18b0c:	f7ff ff5f 	bl	189ce <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   18b10:	2224      	movs	r2, #36	; 0x24
   18b12:	e7f2      	b.n	18afa <nrf91_socket_offload_bind+0x22>
		errno = EAFNOSUPPORT;
   18b14:	f7ff fa6e 	bl	17ff4 <__errno>
   18b18:	236a      	movs	r3, #106	; 0x6a
   18b1a:	6003      	str	r3, [r0, #0]
		retval = -1;
   18b1c:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   18b20:	e7ef      	b.n	18b02 <nrf91_socket_offload_bind+0x2a>

00018b22 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   18b22:	f7fb bd49 	b.w	145b8 <z_impl_k_mutex_lock>

00018b26 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   18b26:	f7fb bdc1 	b.w	146ac <z_impl_k_mutex_unlock>

00018b2a <nrf91_socket_offload_recvfrom>:
{
   18b2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b2e:	4605      	mov	r5, r0
	if (ctx->lock) {
   18b30:	6840      	ldr	r0, [r0, #4]
{
   18b32:	b08d      	sub	sp, #52	; 0x34
   18b34:	460c      	mov	r4, r1
   18b36:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   18b3a:	4691      	mov	r9, r2
   18b3c:	469a      	mov	sl, r3
	if (ctx->lock) {
   18b3e:	b108      	cbz	r0, 18b44 <nrf91_socket_offload_recvfrom+0x1a>
		k_mutex_unlock(ctx->lock);
   18b40:	f7ff fff1 	bl	18b26 <k_mutex_unlock.isra.0>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   18b44:	f8d5 b000 	ldr.w	fp, [r5]
	if (from == NULL || fromlen == NULL) {
   18b48:	b106      	cbz	r6, 18b4c <nrf91_socket_offload_recvfrom+0x22>
   18b4a:	b9af      	cbnz	r7, 18b78 <nrf91_socket_offload_recvfrom+0x4e>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   18b4c:	2300      	movs	r3, #0
   18b4e:	4621      	mov	r1, r4
   18b50:	e9cd 3300 	strd	r3, r3, [sp]
   18b54:	464a      	mov	r2, r9
   18b56:	4653      	mov	r3, sl
   18b58:	4658      	mov	r0, fp
   18b5a:	f000 febf 	bl	198dc <nrf_recvfrom>
   18b5e:	4604      	mov	r4, r0
	if (ctx->lock) {
   18b60:	6868      	ldr	r0, [r5, #4]
   18b62:	b128      	cbz	r0, 18b70 <nrf91_socket_offload_recvfrom+0x46>
		k_mutex_lock(ctx->lock, K_FOREVER);
   18b64:	f04f 32ff 	mov.w	r2, #4294967295
   18b68:	f04f 33ff 	mov.w	r3, #4294967295
   18b6c:	f7ff ffd9 	bl	18b22 <k_mutex_lock.constprop.0.isra.0>
}
   18b70:	4620      	mov	r0, r4
   18b72:	b00d      	add	sp, #52	; 0x34
   18b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   18b78:	f10d 080c 	add.w	r8, sp, #12
   18b7c:	2224      	movs	r2, #36	; 0x24
   18b7e:	2100      	movs	r1, #0
   18b80:	4640      	mov	r0, r8
   18b82:	f001 fdbc 	bl	1a6fe <memset>
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   18b86:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   18b88:	ab02      	add	r3, sp, #8
   18b8a:	4621      	mov	r1, r4
   18b8c:	e9cd 8300 	strd	r8, r3, [sp]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   18b90:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   18b92:	4653      	mov	r3, sl
   18b94:	464a      	mov	r2, r9
   18b96:	4658      	mov	r0, fp
   18b98:	f000 fea0 	bl	198dc <nrf_recvfrom>
		if (retval < 0) {
   18b9c:	1e04      	subs	r4, r0, #0
   18b9e:	dbdf      	blt.n	18b60 <nrf91_socket_offload_recvfrom+0x36>
		if (cliaddr->sa_family == NRF_AF_INET &&
   18ba0:	9b04      	ldr	r3, [sp, #16]
   18ba2:	2b01      	cmp	r3, #1
   18ba4:	d10b      	bne.n	18bbe <nrf91_socket_offload_recvfrom+0x94>
   18ba6:	9a02      	ldr	r2, [sp, #8]
   18ba8:	2a10      	cmp	r2, #16
   18baa:	d1d9      	bne.n	18b60 <nrf91_socket_offload_recvfrom+0x36>
	ptr->sin_family = AF_INET;
   18bac:	8033      	strh	r3, [r6, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   18bae:	9b06      	ldr	r3, [sp, #24]
	ptr->sin_port = nrf_in->sin_port;
   18bb0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   18bb4:	6073      	str	r3, [r6, #4]
			*fromlen = sizeof(struct sockaddr_in);
   18bb6:	2308      	movs	r3, #8
	ptr->sin_port = nrf_in->sin_port;
   18bb8:	8072      	strh	r2, [r6, #2]
			*fromlen = sizeof(struct sockaddr_in6);
   18bba:	603b      	str	r3, [r7, #0]
   18bbc:	e7d0      	b.n	18b60 <nrf91_socket_offload_recvfrom+0x36>
		} else if (cliaddr->sa_family == NRF_AF_INET6 &&
   18bbe:	2b02      	cmp	r3, #2
   18bc0:	d1ce      	bne.n	18b60 <nrf91_socket_offload_recvfrom+0x36>
   18bc2:	9b02      	ldr	r3, [sp, #8]
   18bc4:	2b24      	cmp	r3, #36	; 0x24
   18bc6:	d1cb      	bne.n	18b60 <nrf91_socket_offload_recvfrom+0x36>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   18bc8:	4641      	mov	r1, r8
   18bca:	4630      	mov	r0, r6
   18bcc:	f7ff feeb 	bl	189a6 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   18bd0:	2318      	movs	r3, #24
   18bd2:	e7f2      	b.n	18bba <nrf91_socket_offload_recvfrom+0x90>

00018bd4 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   18bd4:	2300      	movs	r3, #0
{
   18bd6:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   18bd8:	e9cd 3300 	strd	r3, r3, [sp]
   18bdc:	f7ff ffa5 	bl	18b2a <nrf91_socket_offload_recvfrom>
}
   18be0:	b003      	add	sp, #12
   18be2:	f85d fb04 	ldr.w	pc, [sp], #4

00018be6 <nrf91_socket_offload_close>:
{
   18be6:	b538      	push	{r3, r4, r5, lr}
   18be8:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   18bea:	6800      	ldr	r0, [r0, #0]
   18bec:	f7fa f82a 	bl	12c44 <nrf_close>
	if (retval == 0) {
   18bf0:	4604      	mov	r4, r0
   18bf2:	b910      	cbnz	r0, 18bfa <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   18bf4:	4628      	mov	r0, r5
   18bf6:	f7f5 fda7 	bl	e748 <release_ctx>
}
   18bfa:	4620      	mov	r0, r4
   18bfc:	bd38      	pop	{r3, r4, r5, pc}

00018bfe <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   18bfe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   18c00:	ab0b      	add	r3, sp, #44	; 0x2c
   18c02:	9305      	str	r3, [sp, #20]
   18c04:	9303      	str	r3, [sp, #12]
   18c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18c08:	9302      	str	r3, [sp, #8]
   18c0a:	2300      	movs	r3, #0
   18c0c:	4618      	mov	r0, r3
   18c0e:	e9cd 3300 	strd	r3, r3, [sp]
   18c12:	f7f2 fe8f 	bl	b934 <z_impl_z_log_msg_runtime_vcreate>
}
   18c16:	b007      	add	sp, #28
   18c18:	f85d fb04 	ldr.w	pc, [sp], #4

00018c1c <response_handler>:
	write_uart_string(response);
   18c1c:	f7f5 bfc2 	b.w	eba4 <write_uart_string>

00018c20 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   18c20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   18c22:	ab0b      	add	r3, sp, #44	; 0x2c
   18c24:	9305      	str	r3, [sp, #20]
   18c26:	9303      	str	r3, [sp, #12]
   18c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18c2a:	9302      	str	r3, [sp, #8]
   18c2c:	2300      	movs	r3, #0
   18c2e:	4618      	mov	r0, r3
   18c30:	e9cd 3300 	strd	r3, r3, [sp]
   18c34:	f7f2 fe7e 	bl	b934 <z_impl_z_log_msg_runtime_vcreate>
}
   18c38:	b007      	add	sp, #28
   18c3a:	f85d fb04 	ldr.w	pc, [sp], #4

00018c3e <is_notification>:
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   18c3e:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
   18c42:	b2db      	uxtb	r3, r3
   18c44:	2b08      	cmp	r3, #8
   18c46:	bf9d      	ittte	ls
   18c48:	f240 1005 	movwls	r0, #261	; 0x105
   18c4c:	40d8      	lsrls	r0, r3
   18c4e:	f000 0001 	andls.w	r0, r0, #1
{
   18c52:	2000      	movhi	r0, #0
}
   18c54:	4770      	bx	lr

00018c56 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   18c56:	280d      	cmp	r0, #13
   18c58:	d004      	beq.n	18c64 <is_lfcr+0xe>
   18c5a:	f1a0 030a 	sub.w	r3, r0, #10
   18c5e:	4258      	negs	r0, r3
   18c60:	4158      	adcs	r0, r3
   18c62:	4770      	bx	lr
		return true;
   18c64:	2001      	movs	r0, #1
}
   18c66:	4770      	bx	lr

00018c68 <skip_command_prefix>:
{
   18c68:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   18c6a:	6801      	ldr	r1, [r0, #0]
{
   18c6c:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   18c6e:	1c8b      	adds	r3, r1, #2
   18c70:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   18c72:	788c      	ldrb	r4, [r1, #2]
   18c74:	4620      	mov	r0, r4
   18c76:	f7ff ffee 	bl	18c56 <is_lfcr>
   18c7a:	b910      	cbnz	r0, 18c82 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18c7c:	b10c      	cbz	r4, 18c82 <skip_command_prefix+0x1a>
	(*cmd)++;
   18c7e:	3103      	adds	r1, #3
   18c80:	6011      	str	r1, [r2, #0]
}
   18c82:	bd10      	pop	{r4, pc}

00018c84 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   18c84:	6813      	ldr	r3, [r2, #0]
   18c86:	f7f6 bb59 	b.w	f33c <at_parser_max_params_from_str>

00018c8a <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   18c8a:	6803      	ldr	r3, [r0, #0]
   18c8c:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   18c8e:	bf86      	itte	hi
   18c90:	6840      	ldrhi	r0, [r0, #4]
   18c92:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
		return NULL;
   18c96:	2000      	movls	r0, #0
}
   18c98:	4770      	bx	lr

00018c9a <at_param_clear>:
{
   18c9a:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   18c9c:	7803      	ldrb	r3, [r0, #0]
{
   18c9e:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   18ca0:	3b02      	subs	r3, #2
   18ca2:	2b01      	cmp	r3, #1
   18ca4:	d802      	bhi.n	18cac <at_param_clear+0x12>
		k_free(param->value.str_val);
   18ca6:	6880      	ldr	r0, [r0, #8]
   18ca8:	f001 fce1 	bl	1a66e <k_free>
	param->value.int_val = 0;
   18cac:	2200      	movs	r2, #0
   18cae:	2300      	movs	r3, #0
   18cb0:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   18cb4:	bd10      	pop	{r4, pc}

00018cb6 <at_params_list_init>:

	return 0;
}

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   18cb6:	b538      	push	{r3, r4, r5, lr}
   18cb8:	460d      	mov	r5, r1
	if (list == NULL) {
   18cba:	4604      	mov	r4, r0
   18cbc:	b140      	cbz	r0, 18cd0 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   18cbe:	2110      	movs	r1, #16
   18cc0:	4628      	mov	r0, r5
   18cc2:	f001 fcdf 	bl	1a684 <k_calloc>
   18cc6:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   18cc8:	b128      	cbz	r0, 18cd6 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   18cca:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   18ccc:	6025      	str	r5, [r4, #0]
}
   18cce:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   18cd0:	f06f 0015 	mvn.w	r0, #21
   18cd4:	e7fb      	b.n	18cce <at_params_list_init+0x18>
		return -ENOMEM;
   18cd6:	f06f 000b 	mvn.w	r0, #11
   18cda:	e7f8      	b.n	18cce <at_params_list_init+0x18>

00018cdc <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   18cdc:	b570      	push	{r4, r5, r6, lr}
	if (list == NULL || list->params == NULL) {
   18cde:	4604      	mov	r4, r0
   18ce0:	b128      	cbz	r0, 18cee <at_params_list_clear+0x12>
   18ce2:	6843      	ldr	r3, [r0, #4]
   18ce4:	b11b      	cbz	r3, 18cee <at_params_list_clear+0x12>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   18ce6:	2500      	movs	r5, #0
   18ce8:	6823      	ldr	r3, [r4, #0]
   18cea:	429d      	cmp	r5, r3
   18cec:	d300      	bcc.n	18cf0 <at_params_list_clear+0x14>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   18cee:	bd70      	pop	{r4, r5, r6, pc}
		at_param_clear(&params[i]);
   18cf0:	6866      	ldr	r6, [r4, #4]
   18cf2:	eb06 1605 	add.w	r6, r6, r5, lsl #4
   18cf6:	4630      	mov	r0, r6
   18cf8:	f7ff ffcf 	bl	18c9a <at_param_clear>
__ssp_bos_icheck3(memset, void *, int)
   18cfc:	2210      	movs	r2, #16
   18cfe:	2100      	movs	r1, #0
   18d00:	4630      	mov	r0, r6
   18d02:	f001 fcfc 	bl	1a6fe <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   18d06:	3501      	adds	r5, #1
   18d08:	e7ee      	b.n	18ce8 <at_params_list_clear+0xc>

00018d0a <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   18d0a:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   18d0c:	4604      	mov	r4, r0
   18d0e:	b148      	cbz	r0, 18d24 <at_params_list_free+0x1a>
   18d10:	6843      	ldr	r3, [r0, #4]
   18d12:	b13b      	cbz	r3, 18d24 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   18d14:	2500      	movs	r5, #0
	at_params_list_clear(list);
   18d16:	f7ff ffe1 	bl	18cdc <at_params_list_clear>
	k_free(list->params);
   18d1a:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   18d1c:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   18d1e:	f001 fca6 	bl	1a66e <k_free>
	list->params = NULL;
   18d22:	6065      	str	r5, [r4, #4]
}
   18d24:	bd38      	pop	{r3, r4, r5, pc}

00018d26 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   18d26:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   18d28:	b178      	cbz	r0, 18d4a <at_params_empty_put+0x24>
   18d2a:	6843      	ldr	r3, [r0, #4]
   18d2c:	b16b      	cbz	r3, 18d4a <at_params_empty_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   18d2e:	f7ff ffac 	bl	18c8a <at_params_get>

	if (param == NULL) {
   18d32:	4604      	mov	r4, r0
   18d34:	b148      	cbz	r0, 18d4a <at_params_empty_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   18d36:	f7ff ffb0 	bl	18c9a <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   18d3a:	2304      	movs	r3, #4
	param->value.int_val = 0;
   18d3c:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   18d3e:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   18d40:	2300      	movs	r3, #0

	return 0;
   18d42:	2000      	movs	r0, #0
	param->value.int_val = 0;
   18d44:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   18d48:	bd10      	pop	{r4, pc}
		return -EINVAL;
   18d4a:	f06f 0015 	mvn.w	r0, #21
   18d4e:	e7fb      	b.n	18d48 <at_params_empty_put+0x22>

00018d50 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   18d50:	b570      	push	{r4, r5, r6, lr}
   18d52:	4616      	mov	r6, r2
   18d54:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   18d56:	b168      	cbz	r0, 18d74 <at_params_int_put+0x24>
   18d58:	6843      	ldr	r3, [r0, #4]
   18d5a:	b15b      	cbz	r3, 18d74 <at_params_int_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   18d5c:	f7ff ff95 	bl	18c8a <at_params_get>

	if (param == NULL) {
   18d60:	4604      	mov	r4, r0
   18d62:	b138      	cbz	r0, 18d74 <at_params_int_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   18d64:	f7ff ff99 	bl	18c9a <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   18d68:	2301      	movs	r3, #1
	param->value.int_val = value;
	return 0;
   18d6a:	2000      	movs	r0, #0
	param->value.int_val = value;
   18d6c:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   18d70:	7023      	strb	r3, [r4, #0]
}
   18d72:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   18d74:	f06f 0015 	mvn.w	r0, #21
   18d78:	e7fb      	b.n	18d72 <at_params_int_put+0x22>

00018d7a <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   18d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18d7c:	4617      	mov	r7, r2
   18d7e:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   18d80:	b1c0      	cbz	r0, 18db4 <at_params_string_put+0x3a>
   18d82:	6843      	ldr	r3, [r0, #4]
   18d84:	b1b3      	cbz	r3, 18db4 <at_params_string_put+0x3a>
   18d86:	b1aa      	cbz	r2, 18db4 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   18d88:	f7ff ff7f 	bl	18c8a <at_params_get>

	if (param == NULL) {
   18d8c:	4604      	mov	r4, r0
   18d8e:	b188      	cbz	r0, 18db4 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   18d90:	1c68      	adds	r0, r5, #1
   18d92:	f001 fc73 	bl	1a67c <k_malloc>

	if (param_value == NULL) {
   18d96:	4606      	mov	r6, r0
   18d98:	b178      	cbz	r0, 18dba <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18d9a:	462a      	mov	r2, r5
   18d9c:	4639      	mov	r1, r7
   18d9e:	f001 fca1 	bl	1a6e4 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   18da2:	4620      	mov	r0, r4
   18da4:	f7ff ff79 	bl	18c9a <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   18da8:	2302      	movs	r3, #2
	param->value.str_val = param_value;

	return 0;
   18daa:	2000      	movs	r0, #0
	param->size = str_len;
   18dac:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   18dae:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   18db0:	60a6      	str	r6, [r4, #8]
}
   18db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   18db4:	f06f 0015 	mvn.w	r0, #21
   18db8:	e7fb      	b.n	18db2 <at_params_string_put+0x38>
		return -ENOMEM;
   18dba:	f06f 000b 	mvn.w	r0, #11
   18dbe:	e7f8      	b.n	18db2 <at_params_string_put+0x38>

00018dc0 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   18dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18dc2:	4617      	mov	r7, r2
   18dc4:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   18dc6:	b1c0      	cbz	r0, 18dfa <at_params_array_put+0x3a>
   18dc8:	6843      	ldr	r3, [r0, #4]
   18dca:	b1b3      	cbz	r3, 18dfa <at_params_array_put+0x3a>
   18dcc:	b1aa      	cbz	r2, 18dfa <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   18dce:	f7ff ff5c 	bl	18c8a <at_params_get>

	if (param == NULL) {
   18dd2:	4604      	mov	r4, r0
   18dd4:	b188      	cbz	r0, 18dfa <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   18dd6:	4628      	mov	r0, r5
   18dd8:	f001 fc50 	bl	1a67c <k_malloc>

	if (param_value == NULL) {
   18ddc:	4606      	mov	r6, r0
   18dde:	b178      	cbz	r0, 18e00 <at_params_array_put+0x40>
   18de0:	462a      	mov	r2, r5
   18de2:	4639      	mov	r1, r7
   18de4:	f001 fc7e 	bl	1a6e4 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   18de8:	4620      	mov	r0, r4
   18dea:	f7ff ff56 	bl	18c9a <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   18dee:	2303      	movs	r3, #3
	param->value.array_val = param_value;

	return 0;
   18df0:	2000      	movs	r0, #0
	param->size = array_len;
   18df2:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   18df4:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   18df6:	60a6      	str	r6, [r4, #8]
}
   18df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   18dfa:	f06f 0015 	mvn.w	r0, #21
   18dfe:	e7fb      	b.n	18df8 <at_params_array_put+0x38>
		return -ENOMEM;
   18e00:	f06f 000b 	mvn.w	r0, #11
   18e04:	e7f8      	b.n	18df8 <at_params_array_put+0x38>

00018e06 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   18e06:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   18e08:	b1b0      	cbz	r0, 18e38 <at_params_short_get+0x32>
   18e0a:	6843      	ldr	r3, [r0, #4]
   18e0c:	b1a3      	cbz	r3, 18e38 <at_params_short_get+0x32>
   18e0e:	b19a      	cbz	r2, 18e38 <at_params_short_get+0x32>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   18e10:	f7ff ff3b 	bl	18c8a <at_params_get>

	if (param == NULL) {
   18e14:	b180      	cbz	r0, 18e38 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   18e16:	7803      	ldrb	r3, [r0, #0]
   18e18:	2b01      	cmp	r3, #1
   18e1a:	d10d      	bne.n	18e38 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   18e1c:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   18e20:	f513 4000 	adds.w	r0, r3, #32768	; 0x8000
   18e24:	f141 0100 	adc.w	r1, r1, #0
   18e28:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   18e2c:	f171 0100 	sbcs.w	r1, r1, #0
   18e30:	d202      	bcs.n	18e38 <at_params_short_get+0x32>
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
   18e32:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   18e34:	8013      	strh	r3, [r2, #0]
}
   18e36:	bd08      	pop	{r3, pc}
		return -EINVAL;
   18e38:	f06f 0015 	mvn.w	r0, #21
   18e3c:	e7fb      	b.n	18e36 <at_params_short_get+0x30>

00018e3e <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   18e3e:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   18e40:	b190      	cbz	r0, 18e68 <at_params_unsigned_short_get+0x2a>
   18e42:	6843      	ldr	r3, [r0, #4]
   18e44:	b183      	cbz	r3, 18e68 <at_params_unsigned_short_get+0x2a>
   18e46:	b17a      	cbz	r2, 18e68 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   18e48:	f7ff ff1f 	bl	18c8a <at_params_get>

	if (param == NULL) {
   18e4c:	b160      	cbz	r0, 18e68 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   18e4e:	7803      	ldrb	r3, [r0, #0]
   18e50:	2b01      	cmp	r3, #1
   18e52:	d109      	bne.n	18e68 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   18e54:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   18e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   18e5c:	f171 0100 	sbcs.w	r1, r1, #0
   18e60:	d202      	bcs.n	18e68 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
   18e62:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   18e64:	8013      	strh	r3, [r2, #0]
}
   18e66:	bd08      	pop	{r3, pc}
		return -EINVAL;
   18e68:	f06f 0015 	mvn.w	r0, #21
   18e6c:	e7fb      	b.n	18e66 <at_params_unsigned_short_get+0x28>

00018e6e <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   18e6e:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   18e70:	b190      	cbz	r0, 18e98 <at_params_int_get+0x2a>
   18e72:	6843      	ldr	r3, [r0, #4]
   18e74:	b183      	cbz	r3, 18e98 <at_params_int_get+0x2a>
   18e76:	b17a      	cbz	r2, 18e98 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   18e78:	f7ff ff07 	bl	18c8a <at_params_get>

	if (param == NULL) {
   18e7c:	b160      	cbz	r0, 18e98 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   18e7e:	7803      	ldrb	r3, [r0, #0]
   18e80:	2b01      	cmp	r3, #1
   18e82:	d109      	bne.n	18e98 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   18e84:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   18e88:	f113 4000 	adds.w	r0, r3, #2147483648	; 0x80000000
   18e8c:	f141 0100 	adc.w	r1, r1, #0
   18e90:	b911      	cbnz	r1, 18e98 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
   18e92:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   18e94:	6013      	str	r3, [r2, #0]
}
   18e96:	bd08      	pop	{r3, pc}
		return -EINVAL;
   18e98:	f06f 0015 	mvn.w	r0, #21
   18e9c:	e7fb      	b.n	18e96 <at_params_int_get+0x28>

00018e9e <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   18e9e:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   18ea0:	b170      	cbz	r0, 18ec0 <at_params_int64_get+0x22>
   18ea2:	6843      	ldr	r3, [r0, #4]
   18ea4:	b163      	cbz	r3, 18ec0 <at_params_int64_get+0x22>
   18ea6:	b15a      	cbz	r2, 18ec0 <at_params_int64_get+0x22>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   18ea8:	f7ff feef 	bl	18c8a <at_params_get>

	if (param == NULL) {
   18eac:	b140      	cbz	r0, 18ec0 <at_params_int64_get+0x22>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   18eae:	7803      	ldrb	r3, [r0, #0]
   18eb0:	2b01      	cmp	r3, #1
   18eb2:	d105      	bne.n	18ec0 <at_params_int64_get+0x22>

	if ((param->value.int_val > INT64_MAX) || (param->value.int_val < INT64_MIN)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   18eb4:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   18eb8:	e9c2 0100 	strd	r0, r1, [r2]
	return 0;
   18ebc:	2000      	movs	r0, #0
}
   18ebe:	bd08      	pop	{r3, pc}
		return -EINVAL;
   18ec0:	f06f 0015 	mvn.w	r0, #21
   18ec4:	e7fb      	b.n	18ebe <at_params_int64_get+0x20>

00018ec6 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   18ec6:	b570      	push	{r4, r5, r6, lr}
   18ec8:	4615      	mov	r5, r2
   18eca:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL || len == NULL) {
   18ecc:	b1a8      	cbz	r0, 18efa <at_params_string_get+0x34>
   18ece:	6843      	ldr	r3, [r0, #4]
   18ed0:	b19b      	cbz	r3, 18efa <at_params_string_get+0x34>
   18ed2:	b192      	cbz	r2, 18efa <at_params_string_get+0x34>
   18ed4:	b18c      	cbz	r4, 18efa <at_params_string_get+0x34>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   18ed6:	f7ff fed8 	bl	18c8a <at_params_get>

	if (param == NULL) {
   18eda:	b170      	cbz	r0, 18efa <at_params_string_get+0x34>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   18edc:	7803      	ldrb	r3, [r0, #0]
   18ede:	2b02      	cmp	r3, #2
   18ee0:	d10b      	bne.n	18efa <at_params_string_get+0x34>
		return param->size;
   18ee2:	6846      	ldr	r6, [r0, #4]
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);

	if (*len < param_len) {
   18ee4:	6823      	ldr	r3, [r4, #0]
   18ee6:	42b3      	cmp	r3, r6
   18ee8:	d30a      	bcc.n	18f00 <at_params_string_get+0x3a>
   18eea:	6881      	ldr	r1, [r0, #8]
   18eec:	4632      	mov	r2, r6
   18eee:	4628      	mov	r0, r5
   18ef0:	f001 fbf8 	bl	1a6e4 <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   18ef4:	2000      	movs	r0, #0
	*len = param_len;
   18ef6:	6026      	str	r6, [r4, #0]
}
   18ef8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   18efa:	f06f 0015 	mvn.w	r0, #21
   18efe:	e7fb      	b.n	18ef8 <at_params_string_get+0x32>
		return -ENOMEM;
   18f00:	f06f 000b 	mvn.w	r0, #11
   18f04:	e7f8      	b.n	18ef8 <at_params_string_get+0x32>

00018f06 <at_params_valid_count_get>:
	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   18f06:	4602      	mov	r2, r0
{
   18f08:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   18f0a:	b170      	cbz	r0, 18f2a <at_params_valid_count_get+0x24>
   18f0c:	6840      	ldr	r0, [r0, #4]
   18f0e:	b160      	cbz	r0, 18f2a <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   18f10:	6811      	ldr	r1, [r2, #0]
   18f12:	b119      	cbz	r1, 18f1c <at_params_valid_count_get+0x16>
   18f14:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   18f16:	b108      	cbz	r0, 18f1c <at_params_valid_count_get+0x16>
   18f18:	7803      	ldrb	r3, [r0, #0]
   18f1a:	b90b      	cbnz	r3, 18f20 <at_params_valid_count_get+0x1a>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   18f1c:	4608      	mov	r0, r1
   18f1e:	bd08      	pop	{r3, pc}
		param = at_params_get(list, valid_i);
   18f20:	4610      	mov	r0, r2
		valid_i += 1;
   18f22:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   18f24:	f7ff feb1 	bl	18c8a <at_params_get>
   18f28:	e7f5      	b.n	18f16 <at_params_valid_count_get+0x10>
		return -EINVAL;
   18f2a:	f06f 0115 	mvn.w	r1, #21
   18f2e:	e7f5      	b.n	18f1c <at_params_valid_count_get+0x16>

00018f30 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   18f30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   18f32:	ab0b      	add	r3, sp, #44	; 0x2c
   18f34:	9305      	str	r3, [sp, #20]
   18f36:	9303      	str	r3, [sp, #12]
   18f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18f3a:	9302      	str	r3, [sp, #8]
   18f3c:	2300      	movs	r3, #0
   18f3e:	4618      	mov	r0, r3
   18f40:	e9cd 3300 	strd	r3, r3, [sp]
   18f44:	f7f2 fcf6 	bl	b934 <z_impl_z_log_msg_runtime_vcreate>
}
   18f48:	b007      	add	sp, #28
   18f4a:	f85d fb04 	ldr.w	pc, [sp], #4

00018f4e <lte_lc_init>:
{
   18f4e:	b508      	push	{r3, lr}
	int err = init_and_config();
   18f50:	f7f6 ff86 	bl	fe60 <init_and_config>
	return err ? -EFAULT : 0;
   18f54:	2800      	cmp	r0, #0
}
   18f56:	bf18      	it	ne
   18f58:	f06f 000d 	mvnne.w	r0, #13
   18f5c:	bd08      	pop	{r3, pc}

00018f5e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   18f5e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   18f60:	ab0b      	add	r3, sp, #44	; 0x2c
   18f62:	9305      	str	r3, [sp, #20]
   18f64:	9303      	str	r3, [sp, #12]
   18f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18f68:	9302      	str	r3, [sp, #8]
   18f6a:	2300      	movs	r3, #0
   18f6c:	4618      	mov	r0, r3
   18f6e:	e9cd 3300 	strd	r3, r3, [sp]
   18f72:	f7f2 fcdf 	bl	b934 <z_impl_z_log_msg_runtime_vcreate>
}
   18f76:	b007      	add	sp, #28
   18f78:	f85d fb04 	ldr.w	pc, [sp], #4

00018f7c <string_to_int>:
{
   18f7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18f7e:	460c      	mov	r4, r1
   18f80:	4605      	mov	r5, r0
   18f82:	4616      	mov	r6, r2
	errno = 0;
   18f84:	f7ff f836 	bl	17ff4 <__errno>
   18f88:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   18f8a:	4622      	mov	r2, r4
	errno = 0;
   18f8c:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   18f8e:	a901      	add	r1, sp, #4
   18f90:	4628      	mov	r0, r5
   18f92:	f7fc ff0d 	bl	15db0 <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   18f96:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   18f98:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   18f9a:	42ab      	cmp	r3, r5
   18f9c:	d103      	bne.n	18fa6 <string_to_int+0x2a>
		return -ENODATA;
   18f9e:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   18fa2:	b002      	add	sp, #8
   18fa4:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   18fa6:	781b      	ldrb	r3, [r3, #0]
   18fa8:	2b00      	cmp	r3, #0
   18faa:	d1f8      	bne.n	18f9e <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   18fac:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   18fb0:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   18fb2:	3303      	adds	r3, #3
   18fb4:	d802      	bhi.n	18fbc <string_to_int+0x40>
	return 0;
   18fb6:	2000      	movs	r0, #0
	*output = temp;
   18fb8:	6034      	str	r4, [r6, #0]
	return 0;
   18fba:	e7f2      	b.n	18fa2 <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   18fbc:	f7ff f81a 	bl	17ff4 <__errno>
   18fc0:	6803      	ldr	r3, [r0, #0]
   18fc2:	2b22      	cmp	r3, #34	; 0x22
   18fc4:	d1f7      	bne.n	18fb6 <string_to_int+0x3a>
   18fc6:	e7ea      	b.n	18f9e <string_to_int+0x22>

00018fc8 <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   18fc8:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   18fca:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   18fcc:	b087      	sub	sp, #28
   18fce:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   18fd0:	ab01      	add	r3, sp, #4
   18fd2:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   18fd4:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   18fd6:	f7ff ff76 	bl	18ec6 <at_params_string_get>
	if (err) {
   18fda:	b968      	cbnz	r0, 18ff8 <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   18fdc:	9b01      	ldr	r3, [sp, #4]
	if (string_to_int(str_buf, base, output)) {
   18fde:	4622      	mov	r2, r4
	str_buf[len] = '\0';
   18fe0:	3318      	adds	r3, #24
   18fe2:	446b      	add	r3, sp
   18fe4:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   18fe8:	4629      	mov	r1, r5
   18fea:	a802      	add	r0, sp, #8
   18fec:	f7ff ffc6 	bl	18f7c <string_to_int>
		return -ENODATA;
   18ff0:	2800      	cmp	r0, #0
   18ff2:	bf18      	it	ne
   18ff4:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   18ff8:	b007      	add	sp, #28
   18ffa:	bd30      	pop	{r4, r5, pc}

00018ffc <on_modem_shutdown>:

static void on_modem_shutdown(void *ctx)
{
	(void)lte_lc_deinit();
   18ffc:	f7f6 bffc 	b.w	fff8 <lte_lc_deinit>

00019000 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   19000:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   19002:	ab0b      	add	r3, sp, #44	; 0x2c
   19004:	9305      	str	r3, [sp, #20]
   19006:	9303      	str	r3, [sp, #12]
   19008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1900a:	2201      	movs	r2, #1
   1900c:	9302      	str	r3, [sp, #8]
   1900e:	2300      	movs	r3, #0
   19010:	4618      	mov	r0, r3
   19012:	e9cd 3300 	strd	r3, r3, [sp]
   19016:	f7f2 fc8d 	bl	b934 <z_impl_z_log_msg_runtime_vcreate>
}
   1901a:	b007      	add	sp, #28
   1901c:	f85d fb04 	ldr.w	pc, [sp], #4

00019020 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   19020:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   19022:	ab0b      	add	r3, sp, #44	; 0x2c
   19024:	9305      	str	r3, [sp, #20]
   19026:	9303      	str	r3, [sp, #12]
   19028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1902a:	2201      	movs	r2, #1
   1902c:	9302      	str	r3, [sp, #8]
   1902e:	2300      	movs	r3, #0
   19030:	4618      	mov	r0, r3
   19032:	e9cd 3300 	strd	r3, r3, [sp]
   19036:	f7f2 fc7d 	bl	b934 <z_impl_z_log_msg_runtime_vcreate>
}
   1903a:	b007      	add	sp, #28
   1903c:	f85d fb04 	ldr.w	pc, [sp], #4

00019040 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   19040:	2000      	movs	r0, #0
   19042:	4770      	bx	lr

00019044 <psa_crypto_init>:
}
   19044:	2000      	movs	r0, #0
   19046:	4770      	bx	lr

00019048 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   19048:	4700      	bx	r0

0001904a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1904a:	f001 b97f 	b.w	1a34c <z_impl_k_busy_wait>

0001904e <nrfx_clock_stop>:
    clock_stop(domain);
   1904e:	f7f8 b875 	b.w	1113c <clock_stop>

00019052 <ipc_bootloader_shutdown>:
   19052:	f7f8 bcdf 	b.w	11a14 <nrfx_ipc_uninit>

00019056 <rpc_handle_ctrl_message>:
   19056:	2902      	cmp	r1, #2
   19058:	b510      	push	{r4, lr}
   1905a:	4604      	mov	r4, r0
   1905c:	d005      	beq.n	1906a <rpc_handle_ctrl_message+0x14>
   1905e:	2904      	cmp	r1, #4
   19060:	d001      	beq.n	19066 <rpc_handle_ctrl_message+0x10>
   19062:	2901      	cmp	r1, #1
   19064:	d107      	bne.n	19076 <rpc_handle_ctrl_message+0x20>
   19066:	2000      	movs	r0, #0
   19068:	bd10      	pop	{r4, pc}
   1906a:	6880      	ldr	r0, [r0, #8]
   1906c:	2800      	cmp	r0, #0
   1906e:	d0fa      	beq.n	19066 <rpc_handle_ctrl_message+0x10>
   19070:	f7f5 f94a 	bl	e308 <nrf_modem_os_shm_tx_free>
   19074:	e7f7      	b.n	19066 <rpc_handle_ctrl_message+0x10>
   19076:	6880      	ldr	r0, [r0, #8]
   19078:	b108      	cbz	r0, 1907e <rpc_handle_ctrl_message+0x28>
   1907a:	f7f5 f945 	bl	e308 <nrf_modem_os_shm_tx_free>
   1907e:	4620      	mov	r0, r4
   19080:	f7f8 fd54 	bl	11b2c <rpc_transport_msg_rx_free>
   19084:	e7ef      	b.n	19066 <rpc_handle_ctrl_message+0x10>

00019086 <rpc_init>:
   19086:	f7f8 bd3f 	b.w	11b08 <rpc_transport_init>

0001908a <rpc_shutdown>:
   1908a:	b508      	push	{r3, lr}
   1908c:	f7fa ff0c 	bl	13ea8 <nrf_modem_state_is_fault>
   19090:	b908      	cbnz	r0, 19096 <rpc_shutdown+0xc>
   19092:	f7f8 fd5d 	bl	11b50 <rpc_transport_request_shutdown>
   19096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1909a:	f7f8 bd5f 	b.w	11b5c <rpc_transport_shutdown>

0001909e <rpc_list_preambles_init>:
   1909e:	2200      	movs	r2, #0
   190a0:	b510      	push	{r4, lr}
   190a2:	6804      	ldr	r4, [r0, #0]
   190a4:	4294      	cmp	r4, r2
   190a6:	d100      	bne.n	190aa <rpc_list_preambles_init+0xc>
   190a8:	bd10      	pop	{r4, pc}
   190aa:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   190ae:	684b      	ldr	r3, [r1, #4]
   190b0:	3201      	adds	r2, #1
   190b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   190b6:	f043 0303 	orr.w	r3, r3, #3
   190ba:	604b      	str	r3, [r1, #4]
   190bc:	e7f2      	b.n	190a4 <rpc_list_preambles_init+0x6>

000190be <rpc_transport_ipc_data_rx_resume>:
   190be:	2004      	movs	r0, #4
   190c0:	f7f8 bcd6 	b.w	11a70 <nrfx_ipc_receive_event_enable>

000190c4 <rpc_transport_ipc_data_rx_suspend>:
   190c4:	2004      	movs	r0, #4
   190c6:	f7f8 bcdb 	b.w	11a80 <nrfx_ipc_receive_event_disable>

000190ca <rpc_transport_ipc_shutdown>:
   190ca:	f7f8 bca3 	b.w	11a14 <nrfx_ipc_uninit>

000190ce <rpc_transport_ipc_msg_alloc>:
   190ce:	b538      	push	{r3, r4, r5, lr}
   190d0:	4604      	mov	r4, r0
   190d2:	2500      	movs	r5, #0
   190d4:	1d03      	adds	r3, r0, #4
   190d6:	6822      	ldr	r2, [r4, #0]
   190d8:	42aa      	cmp	r2, r5
   190da:	d801      	bhi.n	190e0 <rpc_transport_ipc_msg_alloc+0x12>
   190dc:	2300      	movs	r3, #0
   190de:	e019      	b.n	19114 <rpc_transport_ipc_msg_alloc+0x46>
   190e0:	f04f 0200 	mov.w	r2, #0
   190e4:	e8d3 0fcf 	ldaexb	r0, [r3]
   190e8:	2803      	cmp	r0, #3
   190ea:	d104      	bne.n	190f6 <rpc_transport_ipc_msg_alloc+0x28>
   190ec:	e8c3 2fcc 	stlexb	ip, r2, [r3]
   190f0:	f1bc 0f00 	cmp.w	ip, #0
   190f4:	d1f6      	bne.n	190e4 <rpc_transport_ipc_msg_alloc+0x16>
   190f6:	d002      	beq.n	190fe <rpc_transport_ipc_msg_alloc+0x30>
   190f8:	3308      	adds	r3, #8
   190fa:	3501      	adds	r5, #1
   190fc:	e7eb      	b.n	190d6 <rpc_transport_ipc_msg_alloc+0x8>
   190fe:	eb01 1385 	add.w	r3, r1, r5, lsl #6
   19102:	4618      	mov	r0, r3
   19104:	2240      	movs	r2, #64	; 0x40
   19106:	2100      	movs	r1, #0
   19108:	f001 faf9 	bl	1a6fe <memset>
   1910c:	4603      	mov	r3, r0
   1910e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   19112:	60a0      	str	r0, [r4, #8]
   19114:	4618      	mov	r0, r3
   19116:	bd38      	pop	{r3, r4, r5, pc}

00019118 <rpc_client_msg_from_rpc_msg_get>:
   19118:	3008      	adds	r0, #8
   1911a:	4770      	bx	lr

0001911c <rpc_client_msg_alloc>:
   1911c:	b538      	push	{r3, r4, r5, lr}
   1911e:	4605      	mov	r5, r0
   19120:	b920      	cbnz	r0, 1912c <rpc_client_msg_alloc+0x10>
   19122:	f7f8 fcf7 	bl	11b14 <rpc_transport_msg_alloc>
   19126:	b980      	cbnz	r0, 1914a <rpc_client_msg_alloc+0x2e>
   19128:	2000      	movs	r0, #0
   1912a:	bd38      	pop	{r3, r4, r5, pc}
   1912c:	f7f5 f8e4 	bl	e2f8 <nrf_modem_os_shm_tx_alloc>
   19130:	4604      	mov	r4, r0
   19132:	2800      	cmp	r0, #0
   19134:	d0f8      	beq.n	19128 <rpc_client_msg_alloc+0xc>
   19136:	f7f8 fced 	bl	11b14 <rpc_transport_msg_alloc>
   1913a:	b938      	cbnz	r0, 1914c <rpc_client_msg_alloc+0x30>
   1913c:	4620      	mov	r0, r4
   1913e:	f7f5 f8e3 	bl	e308 <nrf_modem_os_shm_tx_free>
   19142:	2001      	movs	r0, #1
   19144:	f7f5 f8ae 	bl	e2a4 <nrf_modem_os_event_notify>
   19148:	e7ee      	b.n	19128 <rpc_client_msg_alloc+0xc>
   1914a:	462c      	mov	r4, r5
   1914c:	60c5      	str	r5, [r0, #12]
   1914e:	f840 4f08 	str.w	r4, [r0, #8]!
   19152:	e7ea      	b.n	1912a <rpc_client_msg_alloc+0xe>

00019154 <rpc_client_msg_send>:
   19154:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   19158:	4610      	mov	r0, r2
   1915a:	f840 1d08 	str.w	r1, [r0, #-8]!
   1915e:	f7f8 bcf1 	b.w	11b44 <rpc_transport_msg_send>

00019162 <rpc_client_msg_rx_free>:
   19162:	3808      	subs	r0, #8
   19164:	f7f8 bce2 	b.w	11b2c <rpc_transport_msg_rx_free>

00019168 <rpc_client_msg_data_rx_free>:
   19168:	f7f8 bce6 	b.w	11b38 <rpc_transport_msg_data_rx_free>

0001916c <rpc_client_msg_data_tx_size>:
   1916c:	f7f8 bcd8 	b.w	11b20 <rpc_transport_msg_data_tx_size>

00019170 <rpc_client_msg_data_tx_alloc>:
   19170:	f7f5 b8c2 	b.w	e2f8 <nrf_modem_os_shm_tx_alloc>

00019174 <rpc_client_msg_data_tx_free>:
   19174:	b508      	push	{r3, lr}
   19176:	f7f5 f8c7 	bl	e308 <nrf_modem_os_shm_tx_free>
   1917a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1917e:	2001      	movs	r0, #1
   19180:	f7f5 b890 	b.w	e2a4 <nrf_modem_os_event_notify>

00019184 <sockaddr_init>:
   19184:	2904      	cmp	r1, #4
   19186:	b570      	push	{r4, r5, r6, lr}
   19188:	4605      	mov	r5, r0
   1918a:	4616      	mov	r6, r2
   1918c:	d003      	beq.n	19196 <sockaddr_init+0x12>
   1918e:	2910      	cmp	r1, #16
   19190:	d015      	beq.n	191be <sockaddr_init+0x3a>
   19192:	2400      	movs	r4, #0
   19194:	e011      	b.n	191ba <sockaddr_init+0x36>
   19196:	2010      	movs	r0, #16
   19198:	f7f5 f8a0 	bl	e2dc <nrf_modem_os_alloc>
   1919c:	4604      	mov	r4, r0
   1919e:	2800      	cmp	r0, #0
   191a0:	d0f7      	beq.n	19192 <sockaddr_init+0xe>
   191a2:	220f      	movs	r2, #15
   191a4:	2100      	movs	r1, #0
   191a6:	3001      	adds	r0, #1
   191a8:	f001 faa9 	bl	1a6fe <memset>
   191ac:	2310      	movs	r3, #16
   191ae:	7023      	strb	r3, [r4, #0]
   191b0:	2301      	movs	r3, #1
   191b2:	8126      	strh	r6, [r4, #8]
   191b4:	6063      	str	r3, [r4, #4]
   191b6:	682b      	ldr	r3, [r5, #0]
   191b8:	60e3      	str	r3, [r4, #12]
   191ba:	4620      	mov	r0, r4
   191bc:	bd70      	pop	{r4, r5, r6, pc}
   191be:	2024      	movs	r0, #36	; 0x24
   191c0:	f7f5 f88c 	bl	e2dc <nrf_modem_os_alloc>
   191c4:	4604      	mov	r4, r0
   191c6:	2800      	cmp	r0, #0
   191c8:	d0e3      	beq.n	19192 <sockaddr_init+0xe>
   191ca:	2223      	movs	r2, #35	; 0x23
   191cc:	2100      	movs	r1, #0
   191ce:	3001      	adds	r0, #1
   191d0:	f001 fa95 	bl	1a6fe <memset>
   191d4:	2324      	movs	r3, #36	; 0x24
   191d6:	7023      	strb	r3, [r4, #0]
   191d8:	2302      	movs	r3, #2
   191da:	4628      	mov	r0, r5
   191dc:	6063      	str	r3, [r4, #4]
   191de:	8126      	strh	r6, [r4, #8]
   191e0:	f104 0310 	add.w	r3, r4, #16
   191e4:	f105 0210 	add.w	r2, r5, #16
   191e8:	f850 1b04 	ldr.w	r1, [r0], #4
   191ec:	4290      	cmp	r0, r2
   191ee:	f843 1b04 	str.w	r1, [r3], #4
   191f2:	d1f9      	bne.n	191e8 <sockaddr_init+0x64>
   191f4:	e7e1      	b.n	191ba <sockaddr_init+0x36>

000191f6 <sock_pollcb>:
   191f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   191f8:	2500      	movs	r5, #0
   191fa:	6803      	ldr	r3, [r0, #0]
   191fc:	4604      	mov	r4, r0
   191fe:	9300      	str	r3, [sp, #0]
   19200:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   19202:	4668      	mov	r0, sp
   19204:	f8ad 5006 	strh.w	r5, [sp, #6]
   19208:	f8ad 3004 	strh.w	r3, [sp, #4]
   1920c:	f000 fccb 	bl	19ba6 <nrf_poll_one>
   19210:	b138      	cbz	r0, 19222 <sock_pollcb+0x2c>
   19212:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19214:	4668      	mov	r0, sp
   19216:	4798      	blx	r3
   19218:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   1921c:	b10b      	cbz	r3, 19222 <sock_pollcb+0x2c>
   1921e:	6365      	str	r5, [r4, #52]	; 0x34
   19220:	63a5      	str	r5, [r4, #56]	; 0x38
   19222:	b003      	add	sp, #12
   19224:	bd30      	pop	{r4, r5, pc}

00019226 <sock_has_pkt>:
   19226:	6840      	ldr	r0, [r0, #4]
   19228:	3800      	subs	r0, #0
   1922a:	bf18      	it	ne
   1922c:	2001      	movne	r0, #1
   1922e:	4770      	bx	lr

00019230 <sock_pkt_append>:
   19230:	2300      	movs	r3, #0
   19232:	600b      	str	r3, [r1, #0]
   19234:	6883      	ldr	r3, [r0, #8]
   19236:	b913      	cbnz	r3, 1923e <sock_pkt_append+0xe>
   19238:	e9c0 1101 	strd	r1, r1, [r0, #4]
   1923c:	4770      	bx	lr
   1923e:	6019      	str	r1, [r3, #0]
   19240:	6081      	str	r1, [r0, #8]
   19242:	4770      	bx	lr

00019244 <sock_pkt_remove>:
   19244:	b538      	push	{r3, r4, r5, lr}
   19246:	4605      	mov	r5, r0
   19248:	460c      	mov	r4, r1
   1924a:	f7f8 fc8d 	bl	11b68 <rpc_transport_data_rx_suspend>
   1924e:	68aa      	ldr	r2, [r5, #8]
   19250:	6823      	ldr	r3, [r4, #0]
   19252:	4294      	cmp	r4, r2
   19254:	606b      	str	r3, [r5, #4]
   19256:	bf08      	it	eq
   19258:	60ab      	streq	r3, [r5, #8]
   1925a:	2300      	movs	r3, #0
   1925c:	4620      	mov	r0, r4
   1925e:	6023      	str	r3, [r4, #0]
   19260:	f000 f904 	bl	1946c <pkt_free>
   19264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19268:	f7f8 bc84 	b.w	11b74 <rpc_transport_data_rx_resume>

0001926c <sock_pkt_peek_head>:
   1926c:	6840      	ldr	r0, [r0, #4]
   1926e:	4770      	bx	lr

00019270 <sock_is_stream>:
   19270:	6900      	ldr	r0, [r0, #16]
   19272:	1e43      	subs	r3, r0, #1
   19274:	4258      	negs	r0, r3
   19276:	4158      	adcs	r0, r3
   19278:	4770      	bx	lr

0001927a <sock_is_datagram>:
   1927a:	6900      	ldr	r0, [r0, #16]
   1927c:	1e83      	subs	r3, r0, #2
   1927e:	4258      	negs	r0, r3
   19280:	4158      	adcs	r0, r3
   19282:	4770      	bx	lr

00019284 <sock_is_raw>:
   19284:	6900      	ldr	r0, [r0, #16]
   19286:	1ec3      	subs	r3, r0, #3
   19288:	4258      	negs	r0, r3
   1928a:	4158      	adcs	r0, r3
   1928c:	4770      	bx	lr

0001928e <sock_proto_is_secure>:
   1928e:	6940      	ldr	r0, [r0, #20]
   19290:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   19294:	d005      	beq.n	192a2 <sock_proto_is_secure+0x14>
   19296:	f240 1311 	movw	r3, #273	; 0x111
   1929a:	1ac3      	subs	r3, r0, r3
   1929c:	4258      	negs	r0, r3
   1929e:	4158      	adcs	r0, r3
   192a0:	4770      	bx	lr
   192a2:	2001      	movs	r0, #1
   192a4:	4770      	bx	lr

000192a6 <sock_is_connecting>:
   192a6:	7f00      	ldrb	r0, [r0, #28]
   192a8:	f3c0 0080 	ubfx	r0, r0, #2, #1
   192ac:	4770      	bx	lr

000192ae <sock_is_connected>:
   192ae:	7f00      	ldrb	r0, [r0, #28]
   192b0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   192b4:	4770      	bx	lr

000192b6 <sock_is_attaching>:
   192b6:	7f00      	ldrb	r0, [r0, #28]
   192b8:	f3c0 1000 	ubfx	r0, r0, #4, #1
   192bc:	4770      	bx	lr

000192be <sock_is_nonblock>:
   192be:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   192c0:	f000 0001 	and.w	r0, r0, #1
   192c4:	4770      	bx	lr

000192c6 <sock_is_closed>:
   192c6:	7f00      	ldrb	r0, [r0, #28]
   192c8:	f000 0001 	and.w	r0, r0, #1
   192cc:	4770      	bx	lr

000192ce <sock_is_local_closed>:
   192ce:	7f00      	ldrb	r0, [r0, #28]
   192d0:	f3c0 0040 	ubfx	r0, r0, #1, #1
   192d4:	4770      	bx	lr

000192d6 <sock_is_eof>:
   192d6:	6903      	ldr	r3, [r0, #16]
   192d8:	2b01      	cmp	r3, #1
   192da:	d105      	bne.n	192e8 <sock_is_eof+0x12>
   192dc:	6980      	ldr	r0, [r0, #24]
   192de:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   192e2:	4258      	negs	r0, r3
   192e4:	4158      	adcs	r0, r3
   192e6:	4770      	bx	lr
   192e8:	2000      	movs	r0, #0
   192ea:	4770      	bx	lr

000192ec <sock_has_stream_error>:
   192ec:	7f00      	ldrb	r0, [r0, #28]
   192ee:	09c0      	lsrs	r0, r0, #7
   192f0:	4770      	bx	lr

000192f2 <sock_has_error>:
   192f2:	6983      	ldr	r3, [r0, #24]
   192f4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   192f8:	bf14      	ite	ne
   192fa:	2001      	movne	r0, #1
   192fc:	2000      	moveq	r0, #0
   192fe:	4770      	bx	lr

00019300 <sock_has_flow_control>:
   19300:	7f00      	ldrb	r0, [r0, #28]
   19302:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19306:	4770      	bx	lr

00019308 <sock_has_pollcb>:
   19308:	6b40      	ldr	r0, [r0, #52]	; 0x34
   1930a:	3800      	subs	r0, #0
   1930c:	bf18      	it	ne
   1930e:	2001      	movne	r0, #1
   19310:	4770      	bx	lr

00019312 <sock_has_rai_no_data>:
   19312:	6b00      	ldr	r0, [r0, #48]	; 0x30
   19314:	f1a0 0332 	sub.w	r3, r0, #50	; 0x32
   19318:	4258      	negs	r0, r3
   1931a:	4158      	adcs	r0, r3
   1931c:	4770      	bx	lr

0001931e <sock_can_read>:
   1931e:	6840      	ldr	r0, [r0, #4]
   19320:	3800      	subs	r0, #0
   19322:	bf18      	it	ne
   19324:	2001      	movne	r0, #1
   19326:	4770      	bx	lr

00019328 <sock_can_accept>:
   19328:	7f40      	ldrb	r0, [r0, #29]
   1932a:	3800      	subs	r0, #0
   1932c:	bf18      	it	ne
   1932e:	2001      	movne	r0, #1
   19330:	4770      	bx	lr

00019332 <sock_can_send>:
   19332:	b510      	push	{r4, lr}
   19334:	4602      	mov	r2, r0
   19336:	6904      	ldr	r4, [r0, #16]
   19338:	f7ff ffa9 	bl	1928e <sock_proto_is_secure>
   1933c:	2c01      	cmp	r4, #1
   1933e:	4601      	mov	r1, r0
   19340:	7f13      	ldrb	r3, [r2, #28]
   19342:	d103      	bne.n	1934c <sock_can_send+0x1a>
   19344:	071c      	lsls	r4, r3, #28
   19346:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1934a:	d50b      	bpl.n	19364 <sock_can_send+0x32>
   1934c:	b931      	cbnz	r1, 1935c <sock_can_send+0x2a>
   1934e:	07d9      	lsls	r1, r3, #31
   19350:	d40b      	bmi.n	1936a <sock_can_send+0x38>
   19352:	f3c3 1380 	ubfx	r3, r3, #6, #1
   19356:	f1c3 0001 	rsb	r0, r3, #1
   1935a:	e003      	b.n	19364 <sock_can_send+0x32>
   1935c:	069a      	lsls	r2, r3, #26
   1935e:	f3c3 1040 	ubfx	r0, r3, #5, #1
   19362:	d4f4      	bmi.n	1934e <sock_can_send+0x1c>
   19364:	f000 0001 	and.w	r0, r0, #1
   19368:	bd10      	pop	{r4, pc}
   1936a:	2000      	movs	r0, #0
   1936c:	e7fa      	b.n	19364 <sock_can_send+0x32>

0001936e <sock_rcvtimeo_ms_get>:
   1936e:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   19372:	ea53 0102 	orrs.w	r1, r3, r2
   19376:	d009      	beq.n	1938c <sock_rcvtimeo_ms_get+0x1e>
   19378:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1937c:	fbb3 f0f1 	udiv	r0, r3, r1
   19380:	fb01 0002 	mla	r0, r1, r2, r0
   19384:	2801      	cmp	r0, #1
   19386:	bfb8      	it	lt
   19388:	2001      	movlt	r0, #1
   1938a:	4770      	bx	lr
   1938c:	f04f 30ff 	mov.w	r0, #4294967295
   19390:	4770      	bx	lr

00019392 <sock_sndtimeo_ms_get>:
   19392:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   19396:	ea53 0102 	orrs.w	r1, r3, r2
   1939a:	d009      	beq.n	193b0 <sock_sndtimeo_ms_get+0x1e>
   1939c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   193a0:	fbb3 f0f1 	udiv	r0, r3, r1
   193a4:	fb01 0002 	mla	r0, r1, r2, r0
   193a8:	2801      	cmp	r0, #1
   193aa:	bfb8      	it	lt
   193ac:	2001      	movlt	r0, #1
   193ae:	4770      	bx	lr
   193b0:	f04f 30ff 	mov.w	r0, #4294967295
   193b4:	4770      	bx	lr

000193b6 <sock_family_is_valid>:
   193b6:	3801      	subs	r0, #1
   193b8:	2802      	cmp	r0, #2
   193ba:	bf8c      	ite	hi
   193bc:	2000      	movhi	r0, #0
   193be:	2001      	movls	r0, #1
   193c0:	4770      	bx	lr

000193c2 <sock_type_is_valid>:
   193c2:	3801      	subs	r0, #1
   193c4:	2802      	cmp	r0, #2
   193c6:	bf8c      	ite	hi
   193c8:	2000      	movhi	r0, #0
   193ca:	2001      	movls	r0, #1
   193cc:	4770      	bx	lr

000193ce <sock_proto_supports_type>:
   193ce:	2903      	cmp	r1, #3
   193d0:	d015      	beq.n	193fe <sock_proto_supports_type+0x30>
   193d2:	2811      	cmp	r0, #17
   193d4:	d00c      	beq.n	193f0 <sock_proto_supports_type+0x22>
   193d6:	dc04      	bgt.n	193e2 <sock_proto_supports_type+0x14>
   193d8:	b188      	cbz	r0, 193fe <sock_proto_supports_type+0x30>
   193da:	2806      	cmp	r0, #6
   193dc:	d00a      	beq.n	193f4 <sock_proto_supports_type+0x26>
   193de:	2000      	movs	r0, #0
   193e0:	4770      	bx	lr
   193e2:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   193e6:	d005      	beq.n	193f4 <sock_proto_supports_type+0x26>
   193e8:	f240 1311 	movw	r3, #273	; 0x111
   193ec:	4298      	cmp	r0, r3
   193ee:	d1f6      	bne.n	193de <sock_proto_supports_type+0x10>
   193f0:	2902      	cmp	r1, #2
   193f2:	e000      	b.n	193f6 <sock_proto_supports_type+0x28>
   193f4:	2901      	cmp	r1, #1
   193f6:	bf14      	ite	ne
   193f8:	2000      	movne	r0, #0
   193fa:	2001      	moveq	r0, #1
   193fc:	4770      	bx	lr
   193fe:	2001      	movs	r0, #1
   19400:	4770      	bx	lr

00019402 <sock_sockaddr_len_is_valid>:
   19402:	6843      	ldr	r3, [r0, #4]
   19404:	2b01      	cmp	r3, #1
   19406:	d003      	beq.n	19410 <sock_sockaddr_len_is_valid+0xe>
   19408:	2b02      	cmp	r3, #2
   1940a:	d009      	beq.n	19420 <sock_sockaddr_len_is_valid+0x1e>
   1940c:	2000      	movs	r0, #0
   1940e:	4770      	bx	lr
   19410:	7803      	ldrb	r3, [r0, #0]
   19412:	2b10      	cmp	r3, #16
   19414:	d1fa      	bne.n	1940c <sock_sockaddr_len_is_valid+0xa>
   19416:	2910      	cmp	r1, #16
   19418:	bf14      	ite	ne
   1941a:	2000      	movne	r0, #0
   1941c:	2001      	moveq	r0, #1
   1941e:	4770      	bx	lr
   19420:	7803      	ldrb	r3, [r0, #0]
   19422:	2b24      	cmp	r3, #36	; 0x24
   19424:	d1f2      	bne.n	1940c <sock_sockaddr_len_is_valid+0xa>
   19426:	2924      	cmp	r1, #36	; 0x24
   19428:	e7f6      	b.n	19418 <sock_sockaddr_len_is_valid+0x16>

0001942a <sock_sockaddr_fam_is_valid>:
   1942a:	68c3      	ldr	r3, [r0, #12]
   1942c:	2b01      	cmp	r3, #1
   1942e:	d003      	beq.n	19438 <sock_sockaddr_fam_is_valid+0xe>
   19430:	2b02      	cmp	r3, #2
   19432:	d007      	beq.n	19444 <sock_sockaddr_fam_is_valid+0x1a>
   19434:	2001      	movs	r0, #1
   19436:	4770      	bx	lr
   19438:	6848      	ldr	r0, [r1, #4]
   1943a:	2801      	cmp	r0, #1
   1943c:	bf14      	ite	ne
   1943e:	2000      	movne	r0, #0
   19440:	2001      	moveq	r0, #1
   19442:	4770      	bx	lr
   19444:	6848      	ldr	r0, [r1, #4]
   19446:	2802      	cmp	r0, #2
   19448:	e7f8      	b.n	1943c <sock_sockaddr_fam_is_valid+0x12>

0001944a <pkt_has_next>:
   1944a:	b100      	cbz	r0, 1944e <pkt_has_next+0x4>
   1944c:	6800      	ldr	r0, [r0, #0]
   1944e:	3800      	subs	r0, #0
   19450:	bf18      	it	ne
   19452:	2001      	movne	r0, #1
   19454:	4770      	bx	lr

00019456 <pkt_peek_next>:
   19456:	b100      	cbz	r0, 1945a <pkt_peek_next+0x4>
   19458:	6800      	ldr	r0, [r0, #0]
   1945a:	4770      	bx	lr

0001945c <pkt_bytes_get>:
   1945c:	8943      	ldrh	r3, [r0, #10]
   1945e:	6840      	ldr	r0, [r0, #4]
   19460:	4418      	add	r0, r3
   19462:	4770      	bx	lr

00019464 <pkt_bytes_left>:
   19464:	8902      	ldrh	r2, [r0, #8]
   19466:	8940      	ldrh	r0, [r0, #10]
   19468:	1a10      	subs	r0, r2, r0
   1946a:	4770      	bx	lr

0001946c <pkt_free>:
   1946c:	b510      	push	{r4, lr}
   1946e:	4604      	mov	r4, r0
   19470:	6840      	ldr	r0, [r0, #4]
   19472:	f7ff fe79 	bl	19168 <rpc_client_msg_data_rx_free>
   19476:	68e0      	ldr	r0, [r4, #12]
   19478:	b108      	cbz	r0, 1947e <pkt_free+0x12>
   1947a:	f7f4 ff37 	bl	e2ec <nrf_modem_os_free>
   1947e:	4620      	mov	r0, r4
   19480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19484:	f7f4 bf32 	b.w	e2ec <nrf_modem_os_free>

00019488 <pkt_flush>:
   19488:	b510      	push	{r4, lr}
   1948a:	4604      	mov	r4, r0
   1948c:	6820      	ldr	r0, [r4, #0]
   1948e:	b900      	cbnz	r0, 19492 <pkt_flush+0xa>
   19490:	bd10      	pop	{r4, pc}
   19492:	6862      	ldr	r2, [r4, #4]
   19494:	6803      	ldr	r3, [r0, #0]
   19496:	4290      	cmp	r0, r2
   19498:	6023      	str	r3, [r4, #0]
   1949a:	bf08      	it	eq
   1949c:	6063      	streq	r3, [r4, #4]
   1949e:	f7ff ffe5 	bl	1946c <pkt_free>
   194a2:	e7f3      	b.n	1948c <pkt_flush+0x4>

000194a4 <on_conf_dnssrv_res>:
   194a4:	f000 bc71 	b.w	19d8a <res_forward>

000194a8 <nrf_freeaddrinfo>:
   194a8:	b510      	push	{r4, lr}
   194aa:	4604      	mov	r4, r0
   194ac:	b160      	cbz	r0, 194c8 <nrf_freeaddrinfo+0x20>
   194ae:	6940      	ldr	r0, [r0, #20]
   194b0:	b108      	cbz	r0, 194b6 <nrf_freeaddrinfo+0xe>
   194b2:	f7f4 ff1b 	bl	e2ec <nrf_modem_os_free>
   194b6:	69a0      	ldr	r0, [r4, #24]
   194b8:	b108      	cbz	r0, 194be <nrf_freeaddrinfo+0x16>
   194ba:	f7f4 ff17 	bl	e2ec <nrf_modem_os_free>
   194be:	4620      	mov	r0, r4
   194c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   194c4:	f7f4 bf12 	b.w	e2ec <nrf_modem_os_free>
   194c8:	bd10      	pop	{r4, pc}

000194ca <on_getifaddrs_res>:
   194ca:	f000 bc5e 	b.w	19d8a <res_forward>

000194ce <nrf_socket>:
   194ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   194d2:	4681      	mov	r9, r0
   194d4:	460f      	mov	r7, r1
   194d6:	4616      	mov	r6, r2
   194d8:	f7ff ff6d 	bl	193b6 <sock_family_is_valid>
   194dc:	b930      	cbnz	r0, 194ec <nrf_socket+0x1e>
   194de:	206a      	movs	r0, #106	; 0x6a
   194e0:	f7ff f9a0 	bl	18824 <nrf_modem_os_errno_set>
   194e4:	f04f 30ff 	mov.w	r0, #4294967295
   194e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   194ec:	4630      	mov	r0, r6
   194ee:	f7f9 f8d1 	bl	12694 <sock_proto_is_valid>
   194f2:	b908      	cbnz	r0, 194f8 <nrf_socket+0x2a>
   194f4:	207b      	movs	r0, #123	; 0x7b
   194f6:	e7f3      	b.n	194e0 <nrf_socket+0x12>
   194f8:	4638      	mov	r0, r7
   194fa:	f7ff ff62 	bl	193c2 <sock_type_is_valid>
   194fe:	b908      	cbnz	r0, 19504 <nrf_socket+0x36>
   19500:	206b      	movs	r0, #107	; 0x6b
   19502:	e7ed      	b.n	194e0 <nrf_socket+0x12>
   19504:	4639      	mov	r1, r7
   19506:	4630      	mov	r0, r6
   19508:	f7ff ff61 	bl	193ce <sock_proto_supports_type>
   1950c:	2800      	cmp	r0, #0
   1950e:	d0f7      	beq.n	19500 <nrf_socket+0x32>
   19510:	f7f9 f836 	bl	12580 <sock_open>
   19514:	4605      	mov	r5, r0
   19516:	b908      	cbnz	r0, 1951c <nrf_socket+0x4e>
   19518:	2017      	movs	r0, #23
   1951a:	e7e1      	b.n	194e0 <nrf_socket+0x12>
   1951c:	2000      	movs	r0, #0
   1951e:	f7ff fdfd 	bl	1911c <rpc_client_msg_alloc>
   19522:	4604      	mov	r4, r0
   19524:	b920      	cbnz	r0, 19530 <nrf_socket+0x62>
   19526:	6828      	ldr	r0, [r5, #0]
   19528:	f7f9 f862 	bl	125f0 <_sock_close>
   1952c:	2069      	movs	r0, #105	; 0x69
   1952e:	e7d7      	b.n	194e0 <nrf_socket+0x12>
   19530:	2300      	movs	r3, #0
   19532:	220c      	movs	r2, #12
   19534:	f04f 38ff 	mov.w	r8, #4294967295
   19538:	7202      	strb	r2, [r0, #8]
   1953a:	7243      	strb	r3, [r0, #9]
   1953c:	7283      	strb	r3, [r0, #10]
   1953e:	72c3      	strb	r3, [r0, #11]
   19540:	f880 8010 	strb.w	r8, [r0, #16]
   19544:	f880 8011 	strb.w	r8, [r0, #17]
   19548:	f880 8012 	strb.w	r8, [r0, #18]
   1954c:	f880 8013 	strb.w	r8, [r0, #19]
   19550:	4648      	mov	r0, r9
   19552:	f7f9 ff8f 	bl	13474 <nrf_af_to_rpc_af>
   19556:	6160      	str	r0, [r4, #20]
   19558:	4638      	mov	r0, r7
   1955a:	f000 fb8e 	bl	19c7a <nrf_type_to_rpc_type>
   1955e:	4601      	mov	r1, r0
   19560:	61a0      	str	r0, [r4, #24]
   19562:	4630      	mov	r0, r6
   19564:	f000 fb8a 	bl	19c7c <nrf_proto_to_rpc_proto>
   19568:	4621      	mov	r1, r4
   1956a:	61e0      	str	r0, [r4, #28]
   1956c:	f247 0001 	movw	r0, #28673	; 0x7001
   19570:	e9c5 9703 	strd	r9, r7, [r5, #12]
   19574:	616e      	str	r6, [r5, #20]
   19576:	f000 fbd8 	bl	19d2a <req_forward>
   1957a:	4604      	mov	r4, r0
   1957c:	b120      	cbz	r0, 19588 <nrf_socket+0xba>
   1957e:	4640      	mov	r0, r8
   19580:	f7f9 f836 	bl	125f0 <_sock_close>
   19584:	4620      	mov	r0, r4
   19586:	e7ab      	b.n	194e0 <nrf_socket+0x12>
   19588:	6828      	ldr	r0, [r5, #0]
   1958a:	e7ad      	b.n	194e8 <nrf_socket+0x1a>

0001958c <nrf_connect>:
   1958c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1958e:	4607      	mov	r7, r0
   19590:	460d      	mov	r5, r1
   19592:	4616      	mov	r6, r2
   19594:	f7f9 f81a 	bl	125cc <sock_find>
   19598:	4604      	mov	r4, r0
   1959a:	b938      	cbnz	r0, 195ac <nrf_connect+0x20>
   1959c:	2009      	movs	r0, #9
   1959e:	f7ff f941 	bl	18824 <nrf_modem_os_errno_set>
   195a2:	f04f 35ff 	mov.w	r5, #4294967295
   195a6:	4628      	mov	r0, r5
   195a8:	b003      	add	sp, #12
   195aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   195ac:	f7ff fe8b 	bl	192c6 <sock_is_closed>
   195b0:	b108      	cbz	r0, 195b6 <nrf_connect+0x2a>
   195b2:	69a0      	ldr	r0, [r4, #24]
   195b4:	e7f3      	b.n	1959e <nrf_connect+0x12>
   195b6:	4620      	mov	r0, r4
   195b8:	f7ff fe79 	bl	192ae <sock_is_connected>
   195bc:	b108      	cbz	r0, 195c2 <nrf_connect+0x36>
   195be:	207f      	movs	r0, #127	; 0x7f
   195c0:	e7ed      	b.n	1959e <nrf_connect+0x12>
   195c2:	4620      	mov	r0, r4
   195c4:	f7ff fe6f 	bl	192a6 <sock_is_connecting>
   195c8:	b108      	cbz	r0, 195ce <nrf_connect+0x42>
   195ca:	2078      	movs	r0, #120	; 0x78
   195cc:	e7e7      	b.n	1959e <nrf_connect+0x12>
   195ce:	b90d      	cbnz	r5, 195d4 <nrf_connect+0x48>
   195d0:	200e      	movs	r0, #14
   195d2:	e7e4      	b.n	1959e <nrf_connect+0x12>
   195d4:	4631      	mov	r1, r6
   195d6:	4628      	mov	r0, r5
   195d8:	f7ff ff13 	bl	19402 <sock_sockaddr_len_is_valid>
   195dc:	b908      	cbnz	r0, 195e2 <nrf_connect+0x56>
   195de:	2016      	movs	r0, #22
   195e0:	e7dd      	b.n	1959e <nrf_connect+0x12>
   195e2:	4629      	mov	r1, r5
   195e4:	4620      	mov	r0, r4
   195e6:	f7ff ff20 	bl	1942a <sock_sockaddr_fam_is_valid>
   195ea:	b908      	cbnz	r0, 195f0 <nrf_connect+0x64>
   195ec:	206a      	movs	r0, #106	; 0x6a
   195ee:	e7d6      	b.n	1959e <nrf_connect+0x12>
   195f0:	4620      	mov	r0, r4
   195f2:	f7ff fe64 	bl	192be <sock_is_nonblock>
   195f6:	4606      	mov	r6, r0
   195f8:	b118      	cbz	r0, 19602 <nrf_connect+0x76>
   195fa:	6966      	ldr	r6, [r4, #20]
   195fc:	3e11      	subs	r6, #17
   195fe:	bf18      	it	ne
   19600:	2601      	movne	r6, #1
   19602:	2000      	movs	r0, #0
   19604:	f7ff fd8a 	bl	1911c <rpc_client_msg_alloc>
   19608:	4602      	mov	r2, r0
   1960a:	b908      	cbnz	r0, 19610 <nrf_connect+0x84>
   1960c:	2069      	movs	r0, #105	; 0x69
   1960e:	e7c6      	b.n	1959e <nrf_connect+0x12>
   19610:	2300      	movs	r3, #0
   19612:	2114      	movs	r1, #20
   19614:	6107      	str	r7, [r0, #16]
   19616:	7201      	strb	r1, [r0, #8]
   19618:	7243      	strb	r3, [r0, #9]
   1961a:	7283      	strb	r3, [r0, #10]
   1961c:	72c3      	strb	r3, [r0, #11]
   1961e:	6869      	ldr	r1, [r5, #4]
   19620:	2901      	cmp	r1, #1
   19622:	d00e      	beq.n	19642 <nrf_connect+0xb6>
   19624:	2902      	cmp	r1, #2
   19626:	d014      	beq.n	19652 <nrf_connect+0xc6>
   19628:	7f23      	ldrb	r3, [r4, #28]
   1962a:	f247 0102 	movw	r1, #28674	; 0x7002
   1962e:	f043 0304 	orr.w	r3, r3, #4
   19632:	7723      	strb	r3, [r4, #28]
   19634:	2004      	movs	r0, #4
   19636:	60d6      	str	r6, [r2, #12]
   19638:	f7ff fd8c 	bl	19154 <rpc_client_msg_send>
   1963c:	b1ce      	cbz	r6, 19672 <nrf_connect+0xe6>
   1963e:	2077      	movs	r0, #119	; 0x77
   19640:	e7ad      	b.n	1959e <nrf_connect+0x12>
   19642:	8929      	ldrh	r1, [r5, #8]
   19644:	75c3      	strb	r3, [r0, #23]
   19646:	8281      	strh	r1, [r0, #20]
   19648:	2104      	movs	r1, #4
   1964a:	7581      	strb	r1, [r0, #22]
   1964c:	68eb      	ldr	r3, [r5, #12]
   1964e:	6183      	str	r3, [r0, #24]
   19650:	e7ea      	b.n	19628 <nrf_connect+0x9c>
   19652:	8929      	ldrh	r1, [r5, #8]
   19654:	75c3      	strb	r3, [r0, #23]
   19656:	8281      	strh	r1, [r0, #20]
   19658:	2110      	movs	r1, #16
   1965a:	186b      	adds	r3, r5, r1
   1965c:	7581      	strb	r1, [r0, #22]
   1965e:	3520      	adds	r5, #32
   19660:	f100 0118 	add.w	r1, r0, #24
   19664:	f853 0b04 	ldr.w	r0, [r3], #4
   19668:	42ab      	cmp	r3, r5
   1966a:	f841 0b04 	str.w	r0, [r1], #4
   1966e:	d1f9      	bne.n	19664 <nrf_connect+0xd8>
   19670:	e7da      	b.n	19628 <nrf_connect+0x9c>
   19672:	4620      	mov	r0, r4
   19674:	f7ff fe8d 	bl	19392 <sock_sndtimeo_ms_get>
   19678:	9001      	str	r0, [sp, #4]
   1967a:	4620      	mov	r0, r4
   1967c:	f7ff fe13 	bl	192a6 <sock_is_connecting>
   19680:	b918      	cbnz	r0, 1968a <nrf_connect+0xfe>
   19682:	69a5      	ldr	r5, [r4, #24]
   19684:	b185      	cbz	r5, 196a8 <nrf_connect+0x11c>
   19686:	4628      	mov	r0, r5
   19688:	e789      	b.n	1959e <nrf_connect+0x12>
   1968a:	2002      	movs	r0, #2
   1968c:	a901      	add	r1, sp, #4
   1968e:	f7f4 fd2b 	bl	e0e8 <nrf_modem_os_timedwait>
   19692:	f110 0f0b 	cmn.w	r0, #11
   19696:	d005      	beq.n	196a4 <nrf_connect+0x118>
   19698:	2800      	cmp	r0, #0
   1969a:	d0ee      	beq.n	1967a <nrf_connect+0xee>
   1969c:	2800      	cmp	r0, #0
   1969e:	bfb8      	it	lt
   196a0:	4240      	neglt	r0, r0
   196a2:	e77c      	b.n	1959e <nrf_connect+0x12>
   196a4:	2074      	movs	r0, #116	; 0x74
   196a6:	e77a      	b.n	1959e <nrf_connect+0x12>
   196a8:	4620      	mov	r0, r4
   196aa:	f7ff fdf0 	bl	1928e <sock_proto_is_secure>
   196ae:	2800      	cmp	r0, #0
   196b0:	f43f af79 	beq.w	195a6 <nrf_connect+0x1a>
   196b4:	4620      	mov	r0, r4
   196b6:	9901      	ldr	r1, [sp, #4]
   196b8:	f7f9 fe64 	bl	13384 <tls_attach>
   196bc:	4605      	mov	r5, r0
   196be:	e772      	b.n	195a6 <nrf_connect+0x1a>

000196c0 <nrf_bind>:
   196c0:	b538      	push	{r3, r4, r5, lr}
   196c2:	4605      	mov	r5, r0
   196c4:	460c      	mov	r4, r1
   196c6:	f7f8 ff81 	bl	125cc <sock_find>
   196ca:	b930      	cbnz	r0, 196da <nrf_bind+0x1a>
   196cc:	2009      	movs	r0, #9
   196ce:	f7ff f8a9 	bl	18824 <nrf_modem_os_errno_set>
   196d2:	f04f 33ff 	mov.w	r3, #4294967295
   196d6:	4618      	mov	r0, r3
   196d8:	bd38      	pop	{r3, r4, r5, pc}
   196da:	b90c      	cbnz	r4, 196e0 <nrf_bind+0x20>
   196dc:	200e      	movs	r0, #14
   196de:	e7f6      	b.n	196ce <nrf_bind+0xe>
   196e0:	4621      	mov	r1, r4
   196e2:	f7ff fea2 	bl	1942a <sock_sockaddr_fam_is_valid>
   196e6:	b908      	cbnz	r0, 196ec <nrf_bind+0x2c>
   196e8:	206a      	movs	r0, #106	; 0x6a
   196ea:	e7f0      	b.n	196ce <nrf_bind+0xe>
   196ec:	2000      	movs	r0, #0
   196ee:	f7ff fd15 	bl	1911c <rpc_client_msg_alloc>
   196f2:	4601      	mov	r1, r0
   196f4:	b908      	cbnz	r0, 196fa <nrf_bind+0x3a>
   196f6:	2069      	movs	r0, #105	; 0x69
   196f8:	e7e9      	b.n	196ce <nrf_bind+0xe>
   196fa:	2300      	movs	r3, #0
   196fc:	2214      	movs	r2, #20
   196fe:	6105      	str	r5, [r0, #16]
   19700:	7202      	strb	r2, [r0, #8]
   19702:	7243      	strb	r3, [r0, #9]
   19704:	7283      	strb	r3, [r0, #10]
   19706:	72c3      	strb	r3, [r0, #11]
   19708:	6862      	ldr	r2, [r4, #4]
   1970a:	2a01      	cmp	r2, #1
   1970c:	d009      	beq.n	19722 <nrf_bind+0x62>
   1970e:	2a02      	cmp	r2, #2
   19710:	d00f      	beq.n	19732 <nrf_bind+0x72>
   19712:	f247 0005 	movw	r0, #28677	; 0x7005
   19716:	f000 fb08 	bl	19d2a <req_forward>
   1971a:	4603      	mov	r3, r0
   1971c:	2800      	cmp	r0, #0
   1971e:	d0da      	beq.n	196d6 <nrf_bind+0x16>
   19720:	e7d5      	b.n	196ce <nrf_bind+0xe>
   19722:	8922      	ldrh	r2, [r4, #8]
   19724:	75c3      	strb	r3, [r0, #23]
   19726:	8282      	strh	r2, [r0, #20]
   19728:	2204      	movs	r2, #4
   1972a:	7582      	strb	r2, [r0, #22]
   1972c:	68e3      	ldr	r3, [r4, #12]
   1972e:	6183      	str	r3, [r0, #24]
   19730:	e7ef      	b.n	19712 <nrf_bind+0x52>
   19732:	8922      	ldrh	r2, [r4, #8]
   19734:	75c3      	strb	r3, [r0, #23]
   19736:	8282      	strh	r2, [r0, #20]
   19738:	2210      	movs	r2, #16
   1973a:	18a3      	adds	r3, r4, r2
   1973c:	7582      	strb	r2, [r0, #22]
   1973e:	3420      	adds	r4, #32
   19740:	f100 0218 	add.w	r2, r0, #24
   19744:	f853 0b04 	ldr.w	r0, [r3], #4
   19748:	42a3      	cmp	r3, r4
   1974a:	f842 0b04 	str.w	r0, [r2], #4
   1974e:	d1f9      	bne.n	19744 <nrf_bind+0x84>
   19750:	e7df      	b.n	19712 <nrf_bind+0x52>

00019752 <nrf_listen>:
   19752:	b538      	push	{r3, r4, r5, lr}
   19754:	4605      	mov	r5, r0
   19756:	460c      	mov	r4, r1
   19758:	f7f8 ff38 	bl	125cc <sock_find>
   1975c:	b930      	cbnz	r0, 1976c <nrf_listen+0x1a>
   1975e:	2009      	movs	r0, #9
   19760:	f7ff f860 	bl	18824 <nrf_modem_os_errno_set>
   19764:	f04f 33ff 	mov.w	r3, #4294967295
   19768:	4618      	mov	r0, r3
   1976a:	bd38      	pop	{r3, r4, r5, pc}
   1976c:	f7ff fd80 	bl	19270 <sock_is_stream>
   19770:	b908      	cbnz	r0, 19776 <nrf_listen+0x24>
   19772:	205f      	movs	r0, #95	; 0x5f
   19774:	e7f4      	b.n	19760 <nrf_listen+0xe>
   19776:	2000      	movs	r0, #0
   19778:	f7ff fcd0 	bl	1911c <rpc_client_msg_alloc>
   1977c:	4601      	mov	r1, r0
   1977e:	b908      	cbnz	r0, 19784 <nrf_listen+0x32>
   19780:	2069      	movs	r0, #105	; 0x69
   19782:	e7ed      	b.n	19760 <nrf_listen+0xe>
   19784:	2300      	movs	r3, #0
   19786:	2204      	movs	r2, #4
   19788:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   1978c:	7243      	strb	r3, [r0, #9]
   1978e:	7283      	strb	r3, [r0, #10]
   19790:	72c3      	strb	r3, [r0, #11]
   19792:	6105      	str	r5, [r0, #16]
   19794:	7202      	strb	r2, [r0, #8]
   19796:	6144      	str	r4, [r0, #20]
   19798:	f247 0008 	movw	r0, #28680	; 0x7008
   1979c:	f000 fac5 	bl	19d2a <req_forward>
   197a0:	4603      	mov	r3, r0
   197a2:	2800      	cmp	r0, #0
   197a4:	d0e0      	beq.n	19768 <nrf_listen+0x16>
   197a6:	e7db      	b.n	19760 <nrf_listen+0xe>

000197a8 <nrf_accept>:
   197a8:	2300      	movs	r3, #0
   197aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   197ae:	b08d      	sub	sp, #52	; 0x34
   197b0:	4606      	mov	r6, r0
   197b2:	4688      	mov	r8, r1
   197b4:	4614      	mov	r4, r2
   197b6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   197ba:	f7f8 ff07 	bl	125cc <sock_find>
   197be:	4605      	mov	r5, r0
   197c0:	b938      	cbnz	r0, 197d2 <nrf_accept+0x2a>
   197c2:	2009      	movs	r0, #9
   197c4:	f7ff f82e 	bl	18824 <nrf_modem_os_errno_set>
   197c8:	f04f 30ff 	mov.w	r0, #4294967295
   197cc:	b00d      	add	sp, #52	; 0x34
   197ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   197d2:	f1b8 0f00 	cmp.w	r8, #0
   197d6:	d002      	beq.n	197de <nrf_accept+0x36>
   197d8:	b91c      	cbnz	r4, 197e2 <nrf_accept+0x3a>
   197da:	200e      	movs	r0, #14
   197dc:	e7f2      	b.n	197c4 <nrf_accept+0x1c>
   197de:	2c00      	cmp	r4, #0
   197e0:	d1fb      	bne.n	197da <nrf_accept+0x32>
   197e2:	4628      	mov	r0, r5
   197e4:	f7ff fd44 	bl	19270 <sock_is_stream>
   197e8:	b908      	cbnz	r0, 197ee <nrf_accept+0x46>
   197ea:	205f      	movs	r0, #95	; 0x5f
   197ec:	e7ea      	b.n	197c4 <nrf_accept+0x1c>
   197ee:	4628      	mov	r0, r5
   197f0:	f7ff fd65 	bl	192be <sock_is_nonblock>
   197f4:	b128      	cbz	r0, 19802 <nrf_accept+0x5a>
   197f6:	4628      	mov	r0, r5
   197f8:	f7ff fd96 	bl	19328 <sock_can_accept>
   197fc:	b908      	cbnz	r0, 19802 <nrf_accept+0x5a>
   197fe:	200b      	movs	r0, #11
   19800:	e7e0      	b.n	197c4 <nrf_accept+0x1c>
   19802:	f7f8 febd 	bl	12580 <sock_open>
   19806:	4607      	mov	r7, r0
   19808:	b908      	cbnz	r0, 1980e <nrf_accept+0x66>
   1980a:	2017      	movs	r0, #23
   1980c:	e7da      	b.n	197c4 <nrf_accept+0x1c>
   1980e:	2000      	movs	r0, #0
   19810:	f7ff fc84 	bl	1911c <rpc_client_msg_alloc>
   19814:	4605      	mov	r5, r0
   19816:	b920      	cbnz	r0, 19822 <nrf_accept+0x7a>
   19818:	6838      	ldr	r0, [r7, #0]
   1981a:	f7f8 fee9 	bl	125f0 <_sock_close>
   1981e:	2069      	movs	r0, #105	; 0x69
   19820:	e7d0      	b.n	197c4 <nrf_accept+0x1c>
   19822:	6106      	str	r6, [r0, #16]
   19824:	a901      	add	r1, sp, #4
   19826:	9702      	str	r7, [sp, #8]
   19828:	f000 faab 	bl	19d82 <req_cookie_set>
   1982c:	4629      	mov	r1, r5
   1982e:	f247 000c 	movw	r0, #28684	; 0x700c
   19832:	f000 fa7a 	bl	19d2a <req_forward>
   19836:	4606      	mov	r6, r0
   19838:	b120      	cbz	r0, 19844 <nrf_accept+0x9c>
   1983a:	6838      	ldr	r0, [r7, #0]
   1983c:	f7f8 fed8 	bl	125f0 <_sock_close>
   19840:	4630      	mov	r0, r6
   19842:	e7bf      	b.n	197c4 <nrf_accept+0x1c>
   19844:	9d01      	ldr	r5, [sp, #4]
   19846:	f1b8 0f00 	cmp.w	r8, #0
   1984a:	d006      	beq.n	1985a <nrf_accept+0xb2>
   1984c:	b12c      	cbz	r4, 1985a <nrf_accept+0xb2>
   1984e:	8beb      	ldrh	r3, [r5, #30]
   19850:	2b04      	cmp	r3, #4
   19852:	d007      	beq.n	19864 <nrf_accept+0xbc>
   19854:	2b10      	cmp	r3, #16
   19856:	d01e      	beq.n	19896 <nrf_accept+0xee>
   19858:	6026      	str	r6, [r4, #0]
   1985a:	4628      	mov	r0, r5
   1985c:	f7ff fc81 	bl	19162 <rpc_client_msg_rx_free>
   19860:	6838      	ldr	r0, [r7, #0]
   19862:	e7b3      	b.n	197cc <nrf_accept+0x24>
   19864:	2310      	movs	r3, #16
   19866:	9003      	str	r0, [sp, #12]
   19868:	f88d 300c 	strb.w	r3, [sp, #12]
   1986c:	2301      	movs	r3, #1
   1986e:	6826      	ldr	r6, [r4, #0]
   19870:	9005      	str	r0, [sp, #20]
   19872:	2e10      	cmp	r6, #16
   19874:	bf28      	it	cs
   19876:	2610      	movcs	r6, #16
   19878:	9304      	str	r3, [sp, #16]
   1987a:	7f2b      	ldrb	r3, [r5, #28]
   1987c:	7f6a      	ldrb	r2, [r5, #29]
   1987e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   19882:	f8ad 3014 	strh.w	r3, [sp, #20]
   19886:	6a2b      	ldr	r3, [r5, #32]
   19888:	9306      	str	r3, [sp, #24]
   1988a:	4632      	mov	r2, r6
   1988c:	4640      	mov	r0, r8
   1988e:	a903      	add	r1, sp, #12
   19890:	f000 ff28 	bl	1a6e4 <memcpy>
   19894:	e7e0      	b.n	19858 <nrf_accept+0xb0>
   19896:	f04f 0924 	mov.w	r9, #36	; 0x24
   1989a:	4601      	mov	r1, r0
   1989c:	464a      	mov	r2, r9
   1989e:	a803      	add	r0, sp, #12
   198a0:	f000 ff2d 	bl	1a6fe <memset>
   198a4:	2302      	movs	r3, #2
   198a6:	f88d 900c 	strb.w	r9, [sp, #12]
   198aa:	9304      	str	r3, [sp, #16]
   198ac:	7f2b      	ldrb	r3, [r5, #28]
   198ae:	7f6a      	ldrb	r2, [r5, #29]
   198b0:	ae07      	add	r6, sp, #28
   198b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   198b6:	f8ad 3014 	strh.w	r3, [sp, #20]
   198ba:	f105 0c30 	add.w	ip, r5, #48	; 0x30
   198be:	f105 0320 	add.w	r3, r5, #32
   198c2:	4632      	mov	r2, r6
   198c4:	6818      	ldr	r0, [r3, #0]
   198c6:	6859      	ldr	r1, [r3, #4]
   198c8:	3308      	adds	r3, #8
   198ca:	c203      	stmia	r2!, {r0, r1}
   198cc:	4563      	cmp	r3, ip
   198ce:	4616      	mov	r6, r2
   198d0:	d1f7      	bne.n	198c2 <nrf_accept+0x11a>
   198d2:	6826      	ldr	r6, [r4, #0]
   198d4:	2e24      	cmp	r6, #36	; 0x24
   198d6:	bf28      	it	cs
   198d8:	2624      	movcs	r6, #36	; 0x24
   198da:	e7d6      	b.n	1988a <nrf_accept+0xe2>

000198dc <nrf_recvfrom>:
   198dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198e0:	b085      	sub	sp, #20
   198e2:	4690      	mov	r8, r2
   198e4:	e9dd b70e 	ldrd	fp, r7, [sp, #56]	; 0x38
   198e8:	461e      	mov	r6, r3
   198ea:	9101      	str	r1, [sp, #4]
   198ec:	f403 7a80 	and.w	sl, r3, #256	; 0x100
   198f0:	f7f8 fe6c 	bl	125cc <sock_find>
   198f4:	4604      	mov	r4, r0
   198f6:	b940      	cbnz	r0, 1990a <nrf_recvfrom+0x2e>
   198f8:	2009      	movs	r0, #9
   198fa:	f7fe ff93 	bl	18824 <nrf_modem_os_errno_set>
   198fe:	f04f 39ff 	mov.w	r9, #4294967295
   19902:	4648      	mov	r0, r9
   19904:	b005      	add	sp, #20
   19906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1990a:	f436 79a1 	bics.w	r9, r6, #322	; 0x142
   1990e:	d001      	beq.n	19914 <nrf_recvfrom+0x38>
   19910:	205f      	movs	r0, #95	; 0x5f
   19912:	e7f2      	b.n	198fa <nrf_recvfrom+0x1e>
   19914:	f1bb 0f00 	cmp.w	fp, #0
   19918:	d002      	beq.n	19920 <nrf_recvfrom+0x44>
   1991a:	b91f      	cbnz	r7, 19924 <nrf_recvfrom+0x48>
   1991c:	200e      	movs	r0, #14
   1991e:	e7ec      	b.n	198fa <nrf_recvfrom+0x1e>
   19920:	2f00      	cmp	r7, #0
   19922:	d1fb      	bne.n	1991c <nrf_recvfrom+0x40>
   19924:	4620      	mov	r0, r4
   19926:	f7ff fca3 	bl	19270 <sock_is_stream>
   1992a:	b128      	cbz	r0, 19938 <nrf_recvfrom+0x5c>
   1992c:	4620      	mov	r0, r4
   1992e:	f7ff fcbe 	bl	192ae <sock_is_connected>
   19932:	b908      	cbnz	r0, 19938 <nrf_recvfrom+0x5c>
   19934:	2080      	movs	r0, #128	; 0x80
   19936:	e7e0      	b.n	198fa <nrf_recvfrom+0x1e>
   19938:	f1ba 0f00 	cmp.w	sl, #0
   1993c:	d117      	bne.n	1996e <nrf_recvfrom+0x92>
   1993e:	4620      	mov	r0, r4
   19940:	f7ff fcbd 	bl	192be <sock_is_nonblock>
   19944:	b9a8      	cbnz	r0, 19972 <nrf_recvfrom+0x96>
   19946:	f3c6 1580 	ubfx	r5, r6, #6, #1
   1994a:	4620      	mov	r0, r4
   1994c:	f7ff fd0f 	bl	1936e <sock_rcvtimeo_ms_get>
   19950:	9003      	str	r0, [sp, #12]
   19952:	4620      	mov	r0, r4
   19954:	f7ff fcb7 	bl	192c6 <sock_is_closed>
   19958:	b1b8      	cbz	r0, 1998a <nrf_recvfrom+0xae>
   1995a:	4620      	mov	r0, r4
   1995c:	f7ff fc63 	bl	19226 <sock_has_pkt>
   19960:	bb78      	cbnz	r0, 199c2 <nrf_recvfrom+0xe6>
   19962:	4620      	mov	r0, r4
   19964:	f7ff fcc5 	bl	192f2 <sock_has_error>
   19968:	b1c0      	cbz	r0, 1999c <nrf_recvfrom+0xc0>
   1996a:	69a0      	ldr	r0, [r4, #24]
   1996c:	e7c5      	b.n	198fa <nrf_recvfrom+0x1e>
   1996e:	2500      	movs	r5, #0
   19970:	e7eb      	b.n	1994a <nrf_recvfrom+0x6e>
   19972:	2501      	movs	r5, #1
   19974:	e7e9      	b.n	1994a <nrf_recvfrom+0x6e>
   19976:	2002      	movs	r0, #2
   19978:	a903      	add	r1, sp, #12
   1997a:	f7f4 fbb5 	bl	e0e8 <nrf_modem_os_timedwait>
   1997e:	2800      	cmp	r0, #0
   19980:	d0e7      	beq.n	19952 <nrf_recvfrom+0x76>
   19982:	2800      	cmp	r0, #0
   19984:	bfb8      	it	lt
   19986:	4240      	neglt	r0, r0
   19988:	e7b7      	b.n	198fa <nrf_recvfrom+0x1e>
   1998a:	4620      	mov	r0, r4
   1998c:	f7ff fc4b 	bl	19226 <sock_has_pkt>
   19990:	2800      	cmp	r0, #0
   19992:	d1e2      	bne.n	1995a <nrf_recvfrom+0x7e>
   19994:	2d00      	cmp	r5, #0
   19996:	d0ee      	beq.n	19976 <nrf_recvfrom+0x9a>
   19998:	200b      	movs	r0, #11
   1999a:	e7ae      	b.n	198fa <nrf_recvfrom+0x1e>
   1999c:	4620      	mov	r0, r4
   1999e:	f7ff fc9a 	bl	192d6 <sock_is_eof>
   199a2:	2800      	cmp	r0, #0
   199a4:	d1ad      	bne.n	19902 <nrf_recvfrom+0x26>
   199a6:	4620      	mov	r0, r4
   199a8:	f7ff fc91 	bl	192ce <sock_is_local_closed>
   199ac:	b148      	cbz	r0, 199c2 <nrf_recvfrom+0xe6>
   199ae:	4620      	mov	r0, r4
   199b0:	f7ff fc5e 	bl	19270 <sock_is_stream>
   199b4:	2800      	cmp	r0, #0
   199b6:	d1a4      	bne.n	19902 <nrf_recvfrom+0x26>
   199b8:	4620      	mov	r0, r4
   199ba:	f7ff fc5e 	bl	1927a <sock_is_datagram>
   199be:	2800      	cmp	r0, #0
   199c0:	d19a      	bne.n	198f8 <nrf_recvfrom+0x1c>
   199c2:	4620      	mov	r0, r4
   199c4:	f7ff fc52 	bl	1926c <sock_pkt_peek_head>
   199c8:	4605      	mov	r5, r0
   199ca:	f1bb 0f00 	cmp.w	fp, #0
   199ce:	d00a      	beq.n	199e6 <nrf_recvfrom+0x10a>
   199d0:	68c1      	ldr	r1, [r0, #12]
   199d2:	b369      	cbz	r1, 19a30 <nrf_recvfrom+0x154>
   199d4:	780a      	ldrb	r2, [r1, #0]
   199d6:	683b      	ldr	r3, [r7, #0]
   199d8:	4658      	mov	r0, fp
   199da:	429a      	cmp	r2, r3
   199dc:	bf28      	it	cs
   199de:	461a      	movcs	r2, r3
   199e0:	603a      	str	r2, [r7, #0]
   199e2:	f000 fe7f 	bl	1a6e4 <memcpy>
   199e6:	f006 0602 	and.w	r6, r6, #2
   199ea:	4628      	mov	r0, r5
   199ec:	f7ff fd3a 	bl	19464 <pkt_bytes_left>
   199f0:	4540      	cmp	r0, r8
   199f2:	d81f      	bhi.n	19a34 <nrf_recvfrom+0x158>
   199f4:	4628      	mov	r0, r5
   199f6:	f7ff fd35 	bl	19464 <pkt_bytes_left>
   199fa:	4607      	mov	r7, r0
   199fc:	2f00      	cmp	r7, #0
   199fe:	d080      	beq.n	19902 <nrf_recvfrom+0x26>
   19a00:	9b01      	ldr	r3, [sp, #4]
   19a02:	4628      	mov	r0, r5
   19a04:	eb03 0b09 	add.w	fp, r3, r9
   19a08:	f7ff fd28 	bl	1945c <pkt_bytes_get>
   19a0c:	463a      	mov	r2, r7
   19a0e:	4601      	mov	r1, r0
   19a10:	4658      	mov	r0, fp
   19a12:	f000 fe67 	bl	1a6e4 <memcpy>
   19a16:	4620      	mov	r0, r4
   19a18:	44b9      	add	r9, r7
   19a1a:	f7ff fc2e 	bl	1927a <sock_is_datagram>
   19a1e:	b158      	cbz	r0, 19a38 <nrf_recvfrom+0x15c>
   19a20:	2e00      	cmp	r6, #0
   19a22:	f47f af6e 	bne.w	19902 <nrf_recvfrom+0x26>
   19a26:	4629      	mov	r1, r5
   19a28:	4620      	mov	r0, r4
   19a2a:	f7ff fc0b 	bl	19244 <sock_pkt_remove>
   19a2e:	e768      	b.n	19902 <nrf_recvfrom+0x26>
   19a30:	6039      	str	r1, [r7, #0]
   19a32:	e7d8      	b.n	199e6 <nrf_recvfrom+0x10a>
   19a34:	4647      	mov	r7, r8
   19a36:	e7e1      	b.n	199fc <nrf_recvfrom+0x120>
   19a38:	4620      	mov	r0, r4
   19a3a:	f7ff fc23 	bl	19284 <sock_is_raw>
   19a3e:	2800      	cmp	r0, #0
   19a40:	d1ee      	bne.n	19a20 <nrf_recvfrom+0x144>
   19a42:	b956      	cbnz	r6, 19a5a <nrf_recvfrom+0x17e>
   19a44:	896b      	ldrh	r3, [r5, #10]
   19a46:	4628      	mov	r0, r5
   19a48:	443b      	add	r3, r7
   19a4a:	816b      	strh	r3, [r5, #10]
   19a4c:	f7ff fd0a 	bl	19464 <pkt_bytes_left>
   19a50:	b918      	cbnz	r0, 19a5a <nrf_recvfrom+0x17e>
   19a52:	4629      	mov	r1, r5
   19a54:	4620      	mov	r0, r4
   19a56:	f7ff fbf5 	bl	19244 <sock_pkt_remove>
   19a5a:	45b8      	cmp	r8, r7
   19a5c:	f43f af51 	beq.w	19902 <nrf_recvfrom+0x26>
   19a60:	f1ba 0f00 	cmp.w	sl, #0
   19a64:	d10a      	bne.n	19a7c <nrf_recvfrom+0x1a0>
   19a66:	b976      	cbnz	r6, 19a86 <nrf_recvfrom+0x1aa>
   19a68:	4620      	mov	r0, r4
   19a6a:	f7ff fbff 	bl	1926c <sock_pkt_peek_head>
   19a6e:	e00d      	b.n	19a8c <nrf_recvfrom+0x1b0>
   19a70:	4620      	mov	r0, r4
   19a72:	f7ff fc28 	bl	192c6 <sock_is_closed>
   19a76:	2800      	cmp	r0, #0
   19a78:	f47f af43 	bne.w	19902 <nrf_recvfrom+0x26>
   19a7c:	b16e      	cbz	r6, 19a9a <nrf_recvfrom+0x1be>
   19a7e:	4628      	mov	r0, r5
   19a80:	f7ff fce3 	bl	1944a <pkt_has_next>
   19a84:	b170      	cbz	r0, 19aa4 <nrf_recvfrom+0x1c8>
   19a86:	4628      	mov	r0, r5
   19a88:	f7ff fce5 	bl	19456 <pkt_peek_next>
   19a8c:	4605      	mov	r5, r0
   19a8e:	2800      	cmp	r0, #0
   19a90:	f43f af37 	beq.w	19902 <nrf_recvfrom+0x26>
   19a94:	eba8 0807 	sub.w	r8, r8, r7
   19a98:	e7a7      	b.n	199ea <nrf_recvfrom+0x10e>
   19a9a:	4620      	mov	r0, r4
   19a9c:	f7ff fbc3 	bl	19226 <sock_has_pkt>
   19aa0:	2800      	cmp	r0, #0
   19aa2:	d1e1      	bne.n	19a68 <nrf_recvfrom+0x18c>
   19aa4:	2002      	movs	r0, #2
   19aa6:	a903      	add	r1, sp, #12
   19aa8:	f7f4 fb1e 	bl	e0e8 <nrf_modem_os_timedwait>
   19aac:	2800      	cmp	r0, #0
   19aae:	d0df      	beq.n	19a70 <nrf_recvfrom+0x194>
   19ab0:	f1b9 0f00 	cmp.w	r9, #0
   19ab4:	f47f af25 	bne.w	19902 <nrf_recvfrom+0x26>
   19ab8:	e763      	b.n	19982 <nrf_recvfrom+0xa6>

00019aba <rpc_ip_deinit>:
   19aba:	b508      	push	{r3, lr}
   19abc:	f7f8 fdae 	bl	1261c <sock_shutdown>
   19ac0:	2000      	movs	r0, #0
   19ac2:	bd08      	pop	{r3, pc}

00019ac4 <tls_setopt_role>:
   19ac4:	b508      	push	{r3, lr}
   19ac6:	b109      	cbz	r1, 19acc <tls_setopt_role+0x8>
   19ac8:	2a04      	cmp	r2, #4
   19aca:	d005      	beq.n	19ad8 <tls_setopt_role+0x14>
   19acc:	2016      	movs	r0, #22
   19ace:	f7fe fea9 	bl	18824 <nrf_modem_os_errno_set>
   19ad2:	f04f 30ff 	mov.w	r0, #4294967295
   19ad6:	e006      	b.n	19ae6 <tls_setopt_role+0x22>
   19ad8:	780b      	ldrb	r3, [r1, #0]
   19ada:	b12b      	cbz	r3, 19ae8 <tls_setopt_role+0x24>
   19adc:	2b01      	cmp	r3, #1
   19ade:	d1f5      	bne.n	19acc <tls_setopt_role+0x8>
   19ae0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   19ae4:	2000      	movs	r0, #0
   19ae6:	bd08      	pop	{r3, pc}
   19ae8:	2302      	movs	r3, #2
   19aea:	e7f9      	b.n	19ae0 <tls_setopt_role+0x1c>

00019aec <tls_setopt_taglist>:
   19aec:	b510      	push	{r4, lr}
   19aee:	1e54      	subs	r4, r2, #1
   19af0:	2c1b      	cmp	r4, #27
   19af2:	d802      	bhi.n	19afa <tls_setopt_taglist+0xe>
   19af4:	f012 0403 	ands.w	r4, r2, #3
   19af8:	d005      	beq.n	19b06 <tls_setopt_taglist+0x1a>
   19afa:	2016      	movs	r0, #22
   19afc:	f7fe fe92 	bl	18824 <nrf_modem_os_errno_set>
   19b00:	f04f 30ff 	mov.w	r0, #4294967295
   19b04:	bd10      	pop	{r4, pc}
   19b06:	0893      	lsrs	r3, r2, #2
   19b08:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   19b0c:	3048      	adds	r0, #72	; 0x48
   19b0e:	f000 fde9 	bl	1a6e4 <memcpy>
   19b12:	4620      	mov	r0, r4
   19b14:	e7f6      	b.n	19b04 <tls_setopt_taglist+0x18>

00019b16 <tls_setopt_sess_cache>:
   19b16:	b508      	push	{r3, lr}
   19b18:	b109      	cbz	r1, 19b1e <tls_setopt_sess_cache+0x8>
   19b1a:	2a04      	cmp	r2, #4
   19b1c:	d005      	beq.n	19b2a <tls_setopt_sess_cache+0x14>
   19b1e:	2016      	movs	r0, #22
   19b20:	f7fe fe80 	bl	18824 <nrf_modem_os_errno_set>
   19b24:	f04f 30ff 	mov.w	r0, #4294967295
   19b28:	bd08      	pop	{r3, pc}
   19b2a:	780b      	ldrb	r3, [r1, #0]
   19b2c:	3b00      	subs	r3, #0
   19b2e:	bf18      	it	ne
   19b30:	2301      	movne	r3, #1
   19b32:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   19b36:	2000      	movs	r0, #0
   19b38:	e7f6      	b.n	19b28 <tls_setopt_sess_cache+0x12>

00019b3a <tls_setopt_peer_verify>:
   19b3a:	b508      	push	{r3, lr}
   19b3c:	b109      	cbz	r1, 19b42 <tls_setopt_peer_verify+0x8>
   19b3e:	2a04      	cmp	r2, #4
   19b40:	d005      	beq.n	19b4e <tls_setopt_peer_verify+0x14>
   19b42:	2016      	movs	r0, #22
   19b44:	f7fe fe6e 	bl	18824 <nrf_modem_os_errno_set>
   19b48:	f04f 30ff 	mov.w	r0, #4294967295
   19b4c:	bd08      	pop	{r3, pc}
   19b4e:	680b      	ldr	r3, [r1, #0]
   19b50:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   19b54:	2000      	movs	r0, #0
   19b56:	e7f9      	b.n	19b4c <tls_setopt_peer_verify+0x12>

00019b58 <tls_setopt_hostname>:
   19b58:	b570      	push	{r4, r5, r6, lr}
   19b5a:	4605      	mov	r5, r0
   19b5c:	4614      	mov	r4, r2
   19b5e:	460e      	mov	r6, r1
   19b60:	b931      	cbnz	r1, 19b70 <tls_setopt_hostname+0x18>
   19b62:	b192      	cbz	r2, 19b8a <tls_setopt_hostname+0x32>
   19b64:	2016      	movs	r0, #22
   19b66:	f7fe fe5d 	bl	18824 <nrf_modem_os_errno_set>
   19b6a:	f04f 30ff 	mov.w	r0, #4294967295
   19b6e:	bd70      	pop	{r4, r5, r6, pc}
   19b70:	2a00      	cmp	r2, #0
   19b72:	d0f7      	beq.n	19b64 <tls_setopt_hostname+0xc>
   19b74:	6c00      	ldr	r0, [r0, #64]	; 0x40
   19b76:	b108      	cbz	r0, 19b7c <tls_setopt_hostname+0x24>
   19b78:	f7f4 fbb8 	bl	e2ec <nrf_modem_os_free>
   19b7c:	1c60      	adds	r0, r4, #1
   19b7e:	f7f4 fbad 	bl	e2dc <nrf_modem_os_alloc>
   19b82:	6428      	str	r0, [r5, #64]	; 0x40
   19b84:	b938      	cbnz	r0, 19b96 <tls_setopt_hostname+0x3e>
   19b86:	2069      	movs	r0, #105	; 0x69
   19b88:	e7ed      	b.n	19b66 <tls_setopt_hostname+0xe>
   19b8a:	6c00      	ldr	r0, [r0, #64]	; 0x40
   19b8c:	b108      	cbz	r0, 19b92 <tls_setopt_hostname+0x3a>
   19b8e:	f7f4 fbad 	bl	e2ec <nrf_modem_os_free>
   19b92:	2000      	movs	r0, #0
   19b94:	e7eb      	b.n	19b6e <tls_setopt_hostname+0x16>
   19b96:	4622      	mov	r2, r4
   19b98:	4631      	mov	r1, r6
   19b9a:	f000 fda3 	bl	1a6e4 <memcpy>
   19b9e:	2200      	movs	r2, #0
   19ba0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   19ba2:	551a      	strb	r2, [r3, r4]
   19ba4:	e7f5      	b.n	19b92 <tls_setopt_hostname+0x3a>

00019ba6 <nrf_poll_one>:
   19ba6:	b538      	push	{r3, r4, r5, lr}
   19ba8:	4604      	mov	r4, r0
   19baa:	6800      	ldr	r0, [r0, #0]
   19bac:	f7f8 fd0e 	bl	125cc <sock_find>
   19bb0:	4605      	mov	r5, r0
   19bb2:	b928      	cbnz	r0, 19bc0 <nrf_poll_one+0x1a>
   19bb4:	2001      	movs	r0, #1
   19bb6:	88e3      	ldrh	r3, [r4, #6]
   19bb8:	f043 0320 	orr.w	r3, r3, #32
   19bbc:	80e3      	strh	r3, [r4, #6]
   19bbe:	bd38      	pop	{r3, r4, r5, pc}
   19bc0:	f7ff fb85 	bl	192ce <sock_is_local_closed>
   19bc4:	2800      	cmp	r0, #0
   19bc6:	d1f5      	bne.n	19bb4 <nrf_poll_one+0xe>
   19bc8:	4628      	mov	r0, r5
   19bca:	f7ff fb92 	bl	192f2 <sock_has_error>
   19bce:	b1f8      	cbz	r0, 19c10 <nrf_poll_one+0x6a>
   19bd0:	88e3      	ldrh	r3, [r4, #6]
   19bd2:	f043 0308 	orr.w	r3, r3, #8
   19bd6:	80e3      	strh	r3, [r4, #6]
   19bd8:	88a3      	ldrh	r3, [r4, #4]
   19bda:	07da      	lsls	r2, r3, #31
   19bdc:	d507      	bpl.n	19bee <nrf_poll_one+0x48>
   19bde:	4628      	mov	r0, r5
   19be0:	f7ff fb9d 	bl	1931e <sock_can_read>
   19be4:	b1e8      	cbz	r0, 19c22 <nrf_poll_one+0x7c>
   19be6:	88e3      	ldrh	r3, [r4, #6]
   19be8:	f043 0301 	orr.w	r3, r3, #1
   19bec:	80e3      	strh	r3, [r4, #6]
   19bee:	88a3      	ldrh	r3, [r4, #4]
   19bf0:	075b      	lsls	r3, r3, #29
   19bf2:	d507      	bpl.n	19c04 <nrf_poll_one+0x5e>
   19bf4:	4628      	mov	r0, r5
   19bf6:	f7ff fb9c 	bl	19332 <sock_can_send>
   19bfa:	b118      	cbz	r0, 19c04 <nrf_poll_one+0x5e>
   19bfc:	88e3      	ldrh	r3, [r4, #6]
   19bfe:	f043 0304 	orr.w	r3, r3, #4
   19c02:	80e3      	strh	r3, [r4, #6]
   19c04:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
   19c08:	3800      	subs	r0, #0
   19c0a:	bf18      	it	ne
   19c0c:	2001      	movne	r0, #1
   19c0e:	e7d6      	b.n	19bbe <nrf_poll_one+0x18>
   19c10:	4628      	mov	r0, r5
   19c12:	f7ff fb60 	bl	192d6 <sock_is_eof>
   19c16:	2800      	cmp	r0, #0
   19c18:	d0de      	beq.n	19bd8 <nrf_poll_one+0x32>
   19c1a:	88e3      	ldrh	r3, [r4, #6]
   19c1c:	f043 0310 	orr.w	r3, r3, #16
   19c20:	e7d9      	b.n	19bd6 <nrf_poll_one+0x30>
   19c22:	4628      	mov	r0, r5
   19c24:	f7ff fb80 	bl	19328 <sock_can_accept>
   19c28:	2800      	cmp	r0, #0
   19c2a:	d1dc      	bne.n	19be6 <nrf_poll_one+0x40>
   19c2c:	4628      	mov	r0, r5
   19c2e:	f7ff fb52 	bl	192d6 <sock_is_eof>
   19c32:	2800      	cmp	r0, #0
   19c34:	d1d7      	bne.n	19be6 <nrf_poll_one+0x40>
   19c36:	e7da      	b.n	19bee <nrf_poll_one+0x48>

00019c38 <nrf_fcntl>:
   19c38:	b538      	push	{r3, r4, r5, lr}
   19c3a:	460d      	mov	r5, r1
   19c3c:	4614      	mov	r4, r2
   19c3e:	f7f8 fcc5 	bl	125cc <sock_find>
   19c42:	b928      	cbnz	r0, 19c50 <nrf_fcntl+0x18>
   19c44:	2009      	movs	r0, #9
   19c46:	f7fe fded 	bl	18824 <nrf_modem_os_errno_set>
   19c4a:	f04f 30ff 	mov.w	r0, #4294967295
   19c4e:	e006      	b.n	19c5e <nrf_fcntl+0x26>
   19c50:	2d03      	cmp	r5, #3
   19c52:	d003      	beq.n	19c5c <nrf_fcntl+0x24>
   19c54:	2d04      	cmp	r5, #4
   19c56:	d003      	beq.n	19c60 <nrf_fcntl+0x28>
   19c58:	2016      	movs	r0, #22
   19c5a:	e7f4      	b.n	19c46 <nrf_fcntl+0xe>
   19c5c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   19c5e:	bd38      	pop	{r3, r4, r5, pc}
   19c60:	2c01      	cmp	r4, #1
   19c62:	d8f9      	bhi.n	19c58 <nrf_fcntl+0x20>
   19c64:	63c4      	str	r4, [r0, #60]	; 0x3c
   19c66:	2000      	movs	r0, #0
   19c68:	e7f9      	b.n	19c5e <nrf_fcntl+0x26>

00019c6a <rpc_af_to_nrf_af>:
   19c6a:	1f43      	subs	r3, r0, #5
   19c6c:	2b00      	cmp	r3, #0
   19c6e:	d803      	bhi.n	19c78 <rpc_af_to_nrf_af+0xe>
   19c70:	e8df f003 	tbb	[pc, r3]
   19c74:	01          	.byte	0x01
   19c75:	00          	.byte	0x00
   19c76:	2003      	movs	r0, #3
   19c78:	4770      	bx	lr

00019c7a <nrf_type_to_rpc_type>:
   19c7a:	4770      	bx	lr

00019c7c <nrf_proto_to_rpc_proto>:
   19c7c:	2829      	cmp	r0, #41	; 0x29
   19c7e:	d015      	beq.n	19cac <nrf_proto_to_rpc_proto+0x30>
   19c80:	dc05      	bgt.n	19c8e <nrf_proto_to_rpc_proto+0x12>
   19c82:	2806      	cmp	r0, #6
   19c84:	d014      	beq.n	19cb0 <nrf_proto_to_rpc_proto+0x34>
   19c86:	2811      	cmp	r0, #17
   19c88:	d014      	beq.n	19cb4 <nrf_proto_to_rpc_proto+0x38>
   19c8a:	b148      	cbz	r0, 19ca0 <nrf_proto_to_rpc_proto+0x24>
   19c8c:	4770      	bx	lr
   19c8e:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   19c92:	d00d      	beq.n	19cb0 <nrf_proto_to_rpc_proto+0x34>
   19c94:	f240 1311 	movw	r3, #273	; 0x111
   19c98:	4298      	cmp	r0, r3
   19c9a:	d00b      	beq.n	19cb4 <nrf_proto_to_rpc_proto+0x38>
   19c9c:	28ff      	cmp	r0, #255	; 0xff
   19c9e:	d10c      	bne.n	19cba <nrf_proto_to_rpc_proto+0x3e>
   19ca0:	2901      	cmp	r1, #1
   19ca2:	d009      	beq.n	19cb8 <nrf_proto_to_rpc_proto+0x3c>
   19ca4:	2902      	cmp	r1, #2
   19ca6:	bf08      	it	eq
   19ca8:	2002      	moveq	r0, #2
   19caa:	4770      	bx	lr
   19cac:	2006      	movs	r0, #6
   19cae:	4770      	bx	lr
   19cb0:	2001      	movs	r0, #1
   19cb2:	4770      	bx	lr
   19cb4:	2002      	movs	r0, #2
   19cb6:	4770      	bx	lr
   19cb8:	4608      	mov	r0, r1
   19cba:	4770      	bx	lr

00019cbc <nrf_sol_to_rpc_sol>:
   19cbc:	2829      	cmp	r0, #41	; 0x29
   19cbe:	d011      	beq.n	19ce4 <nrf_sol_to_rpc_sol+0x28>
   19cc0:	dc0a      	bgt.n	19cd8 <nrf_sol_to_rpc_sol+0x1c>
   19cc2:	2801      	cmp	r0, #1
   19cc4:	d010      	beq.n	19ce8 <nrf_sol_to_rpc_sol+0x2c>
   19cc6:	2806      	cmp	r0, #6
   19cc8:	d010      	beq.n	19cec <nrf_sol_to_rpc_sol+0x30>
   19cca:	2800      	cmp	r0, #0
   19ccc:	bf08      	it	eq
   19cce:	2004      	moveq	r0, #4
   19cd0:	bf18      	it	ne
   19cd2:	f04f 30ff 	movne.w	r0, #4294967295
   19cd6:	4770      	bx	lr
   19cd8:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   19cdc:	d008      	beq.n	19cf0 <nrf_sol_to_rpc_sol+0x34>
   19cde:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   19ce2:	e7f5      	b.n	19cd0 <nrf_sol_to_rpc_sol+0x14>
   19ce4:	2006      	movs	r0, #6
   19ce6:	4770      	bx	lr
   19ce8:	2008      	movs	r0, #8
   19cea:	4770      	bx	lr
   19cec:	2001      	movs	r0, #1
   19cee:	4770      	bx	lr
   19cf0:	f44f 7080 	mov.w	r0, #256	; 0x100
   19cf4:	4770      	bx	lr

00019cf6 <rpc_error_to_nrf_gai_errno>:
   19cf6:	b508      	push	{r3, lr}
   19cf8:	1f03      	subs	r3, r0, #4
   19cfa:	2b09      	cmp	r3, #9
   19cfc:	d80f      	bhi.n	19d1e <rpc_error_to_nrf_gai_errno+0x28>
   19cfe:	e8df f003 	tbb	[pc, r3]
   19d02:	1108      	.short	0x1108
   19d04:	0e0e0e05 	.word	0x0e0e0e05
   19d08:	050e0e0e 	.word	0x050e0e0e
   19d0c:	f06f 0001 	mvn.w	r0, #1
   19d10:	bd08      	pop	{r3, pc}
   19d12:	2073      	movs	r0, #115	; 0x73
   19d14:	f7fe fd86 	bl	18824 <nrf_modem_os_errno_set>
   19d18:	f06f 000a 	mvn.w	r0, #10
   19d1c:	e7f8      	b.n	19d10 <rpc_error_to_nrf_gai_errno+0x1a>
   19d1e:	f7f9 fbbd 	bl	1349c <rpc_error_to_nrf_errno>
   19d22:	e7f7      	b.n	19d14 <rpc_error_to_nrf_gai_errno+0x1e>
   19d24:	f06f 0063 	mvn.w	r0, #99	; 0x63
   19d28:	e7f2      	b.n	19d10 <rpc_error_to_nrf_gai_errno+0x1a>

00019d2a <req_forward>:
   19d2a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   19d2c:	2300      	movs	r3, #0
   19d2e:	460a      	mov	r2, r1
   19d30:	f04f 31ff 	mov.w	r1, #4294967295
   19d34:	9303      	str	r3, [sp, #12]
   19d36:	68d6      	ldr	r6, [r2, #12]
   19d38:	ad02      	add	r5, sp, #8
   19d3a:	9302      	str	r3, [sp, #8]
   19d3c:	9101      	str	r1, [sp, #4]
   19d3e:	b18e      	cbz	r6, 19d64 <req_forward+0x3a>
   19d40:	4635      	mov	r5, r6
   19d42:	b281      	uxth	r1, r0
   19d44:	602b      	str	r3, [r5, #0]
   19d46:	2004      	movs	r0, #4
   19d48:	f7ff fa04 	bl	19154 <rpc_client_msg_send>
   19d4c:	682b      	ldr	r3, [r5, #0]
   19d4e:	b15b      	cbz	r3, 19d68 <req_forward+0x3e>
   19d50:	6958      	ldr	r0, [r3, #20]
   19d52:	f7f9 fba3 	bl	1349c <rpc_error_to_nrf_errno>
   19d56:	4604      	mov	r4, r0
   19d58:	b106      	cbz	r6, 19d5c <req_forward+0x32>
   19d5a:	b178      	cbz	r0, 19d7c <req_forward+0x52>
   19d5c:	6828      	ldr	r0, [r5, #0]
   19d5e:	f7ff fa00 	bl	19162 <rpc_client_msg_rx_free>
   19d62:	e00b      	b.n	19d7c <req_forward+0x52>
   19d64:	60d5      	str	r5, [r2, #12]
   19d66:	e7ec      	b.n	19d42 <req_forward+0x18>
   19d68:	2002      	movs	r0, #2
   19d6a:	a901      	add	r1, sp, #4
   19d6c:	f7f4 f9bc 	bl	e0e8 <nrf_modem_os_timedwait>
   19d70:	2800      	cmp	r0, #0
   19d72:	d0eb      	beq.n	19d4c <req_forward+0x22>
   19d74:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
   19d78:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
   19d7c:	4620      	mov	r0, r4
   19d7e:	b004      	add	sp, #16
   19d80:	bd70      	pop	{r4, r5, r6, pc}

00019d82 <req_cookie_set>:
   19d82:	60c1      	str	r1, [r0, #12]
   19d84:	4770      	bx	lr

00019d86 <res_cookie_get>:
   19d86:	68c0      	ldr	r0, [r0, #12]
   19d88:	4770      	bx	lr

00019d8a <res_forward>:
   19d8a:	68c3      	ldr	r3, [r0, #12]
   19d8c:	6018      	str	r0, [r3, #0]
   19d8e:	2001      	movs	r0, #1
   19d90:	4770      	bx	lr

00019d92 <gnss_msg_alloc_and_set_common>:
   19d92:	b538      	push	{r3, r4, r5, lr}
   19d94:	4605      	mov	r5, r0
   19d96:	f7ff f9c1 	bl	1911c <rpc_client_msg_alloc>
   19d9a:	4604      	mov	r4, r0
   19d9c:	b190      	cbz	r0, 19dc4 <gnss_msg_alloc_and_set_common+0x32>
   19d9e:	6842      	ldr	r2, [r0, #4]
   19da0:	2100      	movs	r1, #0
   19da2:	6800      	ldr	r0, [r0, #0]
   19da4:	f000 fcab 	bl	1a6fe <memset>
   19da8:	2300      	movs	r3, #0
   19daa:	7223      	strb	r3, [r4, #8]
   19dac:	7263      	strb	r3, [r4, #9]
   19dae:	72a3      	strb	r3, [r4, #10]
   19db0:	72e3      	strb	r3, [r4, #11]
   19db2:	2343      	movs	r3, #67	; 0x43
   19db4:	7323      	strb	r3, [r4, #12]
   19db6:	2354      	movs	r3, #84	; 0x54
   19db8:	7363      	strb	r3, [r4, #13]
   19dba:	2376      	movs	r3, #118	; 0x76
   19dbc:	73a3      	strb	r3, [r4, #14]
   19dbe:	2349      	movs	r3, #73	; 0x49
   19dc0:	6065      	str	r5, [r4, #4]
   19dc2:	73e3      	strb	r3, [r4, #15]
   19dc4:	4620      	mov	r0, r4
   19dc6:	bd38      	pop	{r3, r4, r5, pc}

00019dc8 <rpc_dfu_event_handler>:
   19dc8:	b510      	push	{r4, lr}
   19dca:	4604      	mov	r4, r0
   19dcc:	6800      	ldr	r0, [r0, #0]
   19dce:	b108      	cbz	r0, 19dd4 <rpc_dfu_event_handler+0xc>
   19dd0:	f7ff f9ca 	bl	19168 <rpc_client_msg_data_rx_free>
   19dd4:	68e0      	ldr	r0, [r4, #12]
   19dd6:	b108      	cbz	r0, 19ddc <rpc_dfu_event_handler+0x14>
   19dd8:	6004      	str	r4, [r0, #0]
   19dda:	2001      	movs	r0, #1
   19ddc:	bd10      	pop	{r4, pc}

00019dde <rpc_at_deinit>:
   19dde:	2000      	movs	r0, #0
   19de0:	4770      	bx	lr

00019de2 <rpc_delta_dfu_deinit>:
   19de2:	2000      	movs	r0, #0
   19de4:	4770      	bx	lr

00019de6 <rpc_delta_dfu_init>:
   19de6:	2000      	movs	r0, #0
   19de8:	4770      	bx	lr

00019dea <nrf_modem_is_initialized>:
   19dea:	f7fa b855 	b.w	13e98 <nrf_modem_state_is_initialized>

00019dee <z_device_state_init>:
}
   19dee:	4770      	bx	lr

00019df0 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   19df0:	b140      	cbz	r0, 19e04 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   19df2:	68c3      	ldr	r3, [r0, #12]
   19df4:	7858      	ldrb	r0, [r3, #1]
   19df6:	f010 0001 	ands.w	r0, r0, #1
   19dfa:	bf1e      	ittt	ne
   19dfc:	7818      	ldrbne	r0, [r3, #0]
   19dfe:	fab0 f080 	clzne	r0, r0
   19e02:	0940      	lsrne	r0, r0, #5
}
   19e04:	4770      	bx	lr

00019e06 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   19e06:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   19e08:	ab0b      	add	r3, sp, #44	; 0x2c
   19e0a:	9305      	str	r3, [sp, #20]
   19e0c:	9303      	str	r3, [sp, #12]
   19e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19e10:	2201      	movs	r2, #1
   19e12:	9302      	str	r3, [sp, #8]
   19e14:	2300      	movs	r3, #0
   19e16:	4618      	mov	r0, r3
   19e18:	e9cd 3300 	strd	r3, r3, [sp]
   19e1c:	f7f1 fd8a 	bl	b934 <z_impl_z_log_msg_runtime_vcreate>
}
   19e20:	b007      	add	sp, #28
   19e22:	f85d fb04 	ldr.w	pc, [sp], #4

00019e26 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   19e26:	f000 bc6a 	b.w	1a6fe <memset>

00019e2a <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   19e2a:	f000 bc5b 	b.w	1a6e4 <memcpy>

00019e2e <k_heap_init>:
{
   19e2e:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   19e30:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   19e34:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   19e38:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   19e3c:	f7fd bdf7 	b.w	17a2e <sys_heap_init>

00019e40 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   19e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e44:	b085      	sub	sp, #20
   19e46:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   19e4a:	4607      	mov	r7, r0
   19e4c:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   19e4e:	4650      	mov	r0, sl
   19e50:	4621      	mov	r1, r4
{
   19e52:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   19e54:	f000 fa7e 	bl	1a354 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   19e58:	f1b4 3fff 	cmp.w	r4, #4294967295
   19e5c:	bf08      	it	eq
   19e5e:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   19e62:	4605      	mov	r5, r0
   19e64:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   19e66:	bf04      	itt	eq
   19e68:	f04f 35ff 	moveq.w	r5, #4294967295
   19e6c:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   19e70:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   19e74:	f04f 0320 	mov.w	r3, #32
   19e78:	f3ef 8411 	mrs	r4, BASEPRI
   19e7c:	f383 8812 	msr	BASEPRI_MAX, r3
   19e80:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   19e84:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   19e88:	464a      	mov	r2, r9
   19e8a:	4641      	mov	r1, r8
   19e8c:	4638      	mov	r0, r7
   19e8e:	f7fd fd67 	bl	17960 <sys_heap_aligned_alloc>
   19e92:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   19e94:	f7fb f9f4 	bl	15280 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   19e98:	9b03      	ldr	r3, [sp, #12]
   19e9a:	b13b      	cbz	r3, 19eac <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   19e9c:	f384 8811 	msr	BASEPRI, r4
   19ea0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   19ea4:	4618      	mov	r0, r3
   19ea6:	b005      	add	sp, #20
   19ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   19eac:	1a28      	subs	r0, r5, r0
   19eae:	eb66 0101 	sbc.w	r1, r6, r1
   19eb2:	2801      	cmp	r0, #1
   19eb4:	f171 0200 	sbcs.w	r2, r1, #0
   19eb8:	dbf0      	blt.n	19e9c <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   19eba:	e9cd 0100 	strd	r0, r1, [sp]
   19ebe:	465a      	mov	r2, fp
   19ec0:	4621      	mov	r1, r4
   19ec2:	4650      	mov	r0, sl
   19ec4:	f7fa fe8a 	bl	14bdc <z_pend_curr>
	__asm__ volatile(
   19ec8:	f04f 0320 	mov.w	r3, #32
   19ecc:	f3ef 8411 	mrs	r4, BASEPRI
   19ed0:	f383 8812 	msr	BASEPRI_MAX, r3
   19ed4:	f3bf 8f6f 	isb	sy
	return k;
   19ed8:	e7d6      	b.n	19e88 <k_heap_aligned_alloc+0x48>

00019eda <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   19eda:	b507      	push	{r0, r1, r2, lr}
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   19edc:	e9cd 2300 	strd	r2, r3, [sp]
   19ee0:	460a      	mov	r2, r1
   19ee2:	2104      	movs	r1, #4
   19ee4:	f7ff ffac 	bl	19e40 <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   19ee8:	b003      	add	sp, #12
   19eea:	f85d fb04 	ldr.w	pc, [sp], #4

00019eee <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   19eee:	b538      	push	{r3, r4, r5, lr}
   19ef0:	4604      	mov	r4, r0
   19ef2:	f04f 0320 	mov.w	r3, #32
   19ef6:	f3ef 8511 	mrs	r5, BASEPRI
   19efa:	f383 8812 	msr	BASEPRI_MAX, r3
   19efe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   19f02:	f7fd fcf5 	bl	178f0 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   19f06:	f104 000c 	add.w	r0, r4, #12
   19f0a:	f000 f9c0 	bl	1a28e <z_unpend_all>
   19f0e:	b130      	cbz	r0, 19f1e <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   19f10:	4629      	mov	r1, r5
   19f12:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   19f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   19f1a:	f7fa bec3 	b.w	14ca4 <z_reschedule>
	__asm__ volatile(
   19f1e:	f385 8811 	msr	BASEPRI, r5
   19f22:	f3bf 8f6f 	isb	sy
}
   19f26:	bd38      	pop	{r3, r4, r5, pc}

00019f28 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   19f28:	f3ef 8005 	mrs	r0, IPSR
}
   19f2c:	3800      	subs	r0, #0
   19f2e:	bf18      	it	ne
   19f30:	2001      	movne	r0, #1
   19f32:	4770      	bx	lr

00019f34 <z_impl_k_thread_name_set>:
}
   19f34:	f06f 0057 	mvn.w	r0, #87	; 0x57
   19f38:	4770      	bx	lr

00019f3a <k_thread_name_get>:
}
   19f3a:	2000      	movs	r0, #0
   19f3c:	4770      	bx	lr

00019f3e <z_impl_k_thread_start>:
	z_sched_start(thread);
   19f3e:	f7fa bec3 	b.w	14cc8 <z_sched_start>

00019f42 <z_pm_save_idle_exit>:
{
   19f42:	b508      	push	{r3, lr}
	pm_system_resume();
   19f44:	f7f1 ff9a 	bl	be7c <pm_system_resume>
}
   19f48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   19f4c:	f7fe bc3f 	b.w	187ce <sys_clock_idle_exit>

00019f50 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   19f50:	f990 300e 	ldrsb.w	r3, [r0, #14]
   19f54:	428b      	cmp	r3, r1
   19f56:	d001      	beq.n	19f5c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   19f58:	f7fa be5e 	b.w	14c18 <z_set_prio>
}
   19f5c:	2000      	movs	r0, #0
   19f5e:	4770      	bx	lr

00019f60 <z_impl_k_mutex_init>:
{
   19f60:	4603      	mov	r3, r0
	mutex->owner = NULL;
   19f62:	2000      	movs	r0, #0
   19f64:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   19f68:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   19f6c:	4770      	bx	lr

00019f6e <queue_insert>:
{
   19f6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19f72:	4699      	mov	r9, r3
   19f74:	4604      	mov	r4, r0
   19f76:	460d      	mov	r5, r1
   19f78:	4690      	mov	r8, r2
   19f7a:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   19f7e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   19f82:	f04f 0220 	mov.w	r2, #32
   19f86:	f3ef 8711 	mrs	r7, BASEPRI
   19f8a:	f382 8812 	msr	BASEPRI_MAX, r2
   19f8e:	f3bf 8f6f 	isb	sy
	if (is_append) {
   19f92:	b103      	cbz	r3, 19f96 <queue_insert+0x28>
	return list->tail;
   19f94:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   19f96:	4630      	mov	r0, r6
   19f98:	f000 f92f 	bl	1a1fa <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   19f9c:	b158      	cbz	r0, 19fb6 <queue_insert+0x48>
   19f9e:	2300      	movs	r3, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   19fa0:	f8c0 8014 	str.w	r8, [r0, #20]
   19fa4:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   19fa6:	f000 f8f2 	bl	1a18e <z_ready_thread>
	z_reschedule(&queue->lock, key);
   19faa:	4630      	mov	r0, r6
   19fac:	4639      	mov	r1, r7
   19fae:	f7fa fe79 	bl	14ca4 <z_reschedule>
		return 0;
   19fb2:	2000      	movs	r0, #0
   19fb4:	e00c      	b.n	19fd0 <queue_insert+0x62>
	if (alloc) {
   19fb6:	f1b9 0f00 	cmp.w	r9, #0
   19fba:	d01b      	beq.n	19ff4 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   19fbc:	2108      	movs	r1, #8
   19fbe:	f7fb fa0b 	bl	153d8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   19fc2:	b938      	cbnz	r0, 19fd4 <queue_insert+0x66>
	__asm__ volatile(
   19fc4:	f387 8811 	msr	BASEPRI, r7
   19fc8:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   19fcc:	f06f 000b 	mvn.w	r0, #11
}
   19fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   19fd4:	2201      	movs	r2, #1
		anode->data = data;
   19fd6:	f8c0 8004 	str.w	r8, [r0, #4]
   19fda:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   19fdc:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   19fde:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   19fe2:	b95d      	cbnz	r5, 19ffc <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   19fe4:	6822      	ldr	r2, [r4, #0]
   19fe6:	430a      	orrs	r2, r1
   19fe8:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   19fea:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   19fec:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   19fee:	b96a      	cbnz	r2, 1a00c <queue_insert+0x9e>
	list->tail = node;
   19ff0:	6060      	str	r0, [r4, #4]
}
   19ff2:	e00b      	b.n	1a00c <queue_insert+0x9e>
}
   19ff4:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   19ff6:	f8c8 9000 	str.w	r9, [r8]
}
   19ffa:	e7ef      	b.n	19fdc <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   19ffc:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   19ffe:	2a03      	cmp	r2, #3
   1a000:	d810      	bhi.n	1a024 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a002:	6001      	str	r1, [r0, #0]
	return list->tail;
   1a004:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1a006:	b939      	cbnz	r1, 1a018 <queue_insert+0xaa>
	list->head = node;
   1a008:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1a00c:	2104      	movs	r1, #4
   1a00e:	f104 0010 	add.w	r0, r4, #16
   1a012:	f000 fb01 	bl	1a618 <z_handle_obj_poll_events>
   1a016:	e7c8      	b.n	19faa <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a018:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a01a:	f002 0203 	and.w	r2, r2, #3
   1a01e:	4302      	orrs	r2, r0
   1a020:	600a      	str	r2, [r1, #0]
   1a022:	e7e5      	b.n	19ff0 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a024:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a028:	430a      	orrs	r2, r1
   1a02a:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a02c:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a02e:	f002 0203 	and.w	r2, r2, #3
   1a032:	ea40 0302 	orr.w	r3, r0, r2
   1a036:	602b      	str	r3, [r5, #0]
}
   1a038:	e7e8      	b.n	1a00c <queue_insert+0x9e>

0001a03a <z_queue_node_peek>:
{
   1a03a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1a03c:	4604      	mov	r4, r0
   1a03e:	b130      	cbz	r0, 1a04e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a040:	6802      	ldr	r2, [r0, #0]
   1a042:	0793      	lsls	r3, r2, #30
   1a044:	d003      	beq.n	1a04e <z_queue_node_peek+0x14>
		ret = anode->data;
   1a046:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1a048:	b109      	cbz	r1, 1a04e <z_queue_node_peek+0x14>
			k_free(anode);
   1a04a:	f000 fb10 	bl	1a66e <k_free>
}
   1a04e:	4620      	mov	r0, r4
   1a050:	bd10      	pop	{r4, pc}

0001a052 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1a052:	2301      	movs	r3, #1
{
   1a054:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1a056:	9300      	str	r3, [sp, #0]
   1a058:	2300      	movs	r3, #0
{
   1a05a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1a05c:	4619      	mov	r1, r3
   1a05e:	f7ff ff86 	bl	19f6e <queue_insert>
}
   1a062:	b003      	add	sp, #12
   1a064:	f85d fb04 	ldr.w	pc, [sp], #4

0001a068 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1a068:	b15a      	cbz	r2, 1a082 <z_impl_k_sem_init+0x1a>
   1a06a:	428a      	cmp	r2, r1
   1a06c:	d309      	bcc.n	1a082 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1a06e:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1a072:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1a076:	e9c0 0000 	strd	r0, r0, [r0]
   1a07a:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1a07e:	2000      	movs	r0, #0
   1a080:	4770      	bx	lr
		return -EINVAL;
   1a082:	f06f 0015 	mvn.w	r0, #21
}
   1a086:	4770      	bx	lr

0001a088 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   1a088:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   1a08a:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1a08c:	408b      	lsls	r3, r1
   1a08e:	ea22 0303 	bic.w	r3, r2, r3
   1a092:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1a094:	fa22 f001 	lsr.w	r0, r2, r1
}
   1a098:	f000 0001 	and.w	r0, r0, #1
   1a09c:	4770      	bx	lr

0001a09e <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1a09e:	b120      	cbz	r0, 1a0aa <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1a0a0:	2200      	movs	r2, #0
   1a0a2:	30d0      	adds	r0, #208	; 0xd0
   1a0a4:	4611      	mov	r1, r2
   1a0a6:	f000 b902 	b.w	1a2ae <z_sched_wake>
}
   1a0aa:	4770      	bx	lr

0001a0ac <k_work_init>:
{
   1a0ac:	b538      	push	{r3, r4, r5, lr}
   1a0ae:	4604      	mov	r4, r0
   1a0b0:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1a0b2:	2210      	movs	r2, #16
   1a0b4:	2100      	movs	r1, #0
   1a0b6:	f000 fb22 	bl	1a6fe <memset>
   1a0ba:	6065      	str	r5, [r4, #4]
}
   1a0bc:	bd38      	pop	{r3, r4, r5, pc}

0001a0be <z_work_submit_to_queue>:
{
   1a0be:	b513      	push	{r0, r1, r4, lr}
   1a0c0:	9001      	str	r0, [sp, #4]
   1a0c2:	4608      	mov	r0, r1
	__asm__ volatile(
   1a0c4:	f04f 0320 	mov.w	r3, #32
   1a0c8:	f3ef 8411 	mrs	r4, BASEPRI
   1a0cc:	f383 8812 	msr	BASEPRI_MAX, r3
   1a0d0:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1a0d4:	a901      	add	r1, sp, #4
   1a0d6:	f7fa fba7 	bl	14828 <submit_to_queue_locked>
	__asm__ volatile(
   1a0da:	f384 8811 	msr	BASEPRI, r4
   1a0de:	f3bf 8f6f 	isb	sy
}
   1a0e2:	b002      	add	sp, #8
   1a0e4:	bd10      	pop	{r4, pc}

0001a0e6 <k_work_submit_to_queue>:
{
   1a0e6:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   1a0e8:	f7ff ffe9 	bl	1a0be <z_work_submit_to_queue>
	if (ret > 0) {
   1a0ec:	1e04      	subs	r4, r0, #0
   1a0ee:	dd09      	ble.n	1a104 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   1a0f0:	f04f 0320 	mov.w	r3, #32
   1a0f4:	f3ef 8011 	mrs	r0, BASEPRI
   1a0f8:	f383 8812 	msr	BASEPRI_MAX, r3
   1a0fc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1a100:	f000 f8af 	bl	1a262 <z_reschedule_irqlock>
}
   1a104:	4620      	mov	r0, r4
   1a106:	bd10      	pop	{r4, pc}

0001a108 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1a108:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1a10c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1a10e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a110:	2300      	movs	r3, #0
	node->prev = NULL;
   1a112:	e9c0 3300 	strd	r3, r3, [r0]
}
   1a116:	4770      	bx	lr

0001a118 <unpend_thread_no_timeout>:
{
   1a118:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1a11a:	f7ff fff5 	bl	1a108 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1a11e:	7b43      	ldrb	r3, [r0, #13]
   1a120:	f023 0302 	bic.w	r3, r3, #2
   1a124:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1a126:	2300      	movs	r3, #0
   1a128:	6083      	str	r3, [r0, #8]
}
   1a12a:	bd08      	pop	{r3, pc}

0001a12c <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1a12c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1a130:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1a134:	4283      	cmp	r3, r0
		return b2 - b1;
   1a136:	bf14      	ite	ne
   1a138:	1ac0      	subne	r0, r0, r3
	return 0;
   1a13a:	2000      	moveq	r0, #0
}
   1a13c:	4770      	bx	lr

0001a13e <add_to_waitq_locked>:
{
   1a13e:	b538      	push	{r3, r4, r5, lr}
   1a140:	4604      	mov	r4, r0
   1a142:	460d      	mov	r5, r1
	unready_thread(thread);
   1a144:	f7fa fcea 	bl	14b1c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1a148:	7b63      	ldrb	r3, [r4, #13]
   1a14a:	f043 0302 	orr.w	r3, r3, #2
   1a14e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1a150:	b1e5      	cbz	r5, 1a18c <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   1a152:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   1a154:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a156:	429d      	cmp	r5, r3
   1a158:	d109      	bne.n	1a16e <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   1a15a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1a15c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1a160:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a162:	606c      	str	r4, [r5, #4]
}
   1a164:	e012      	b.n	1a18c <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1a166:	686a      	ldr	r2, [r5, #4]
   1a168:	4293      	cmp	r3, r2
   1a16a:	d0f6      	beq.n	1a15a <add_to_waitq_locked+0x1c>
   1a16c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a16e:	2b00      	cmp	r3, #0
   1a170:	d0f3      	beq.n	1a15a <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   1a172:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1a176:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1a17a:	428a      	cmp	r2, r1
   1a17c:	d0f3      	beq.n	1a166 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1a17e:	4291      	cmp	r1, r2
   1a180:	ddf1      	ble.n	1a166 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   1a182:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1a184:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1a188:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1a18a:	605c      	str	r4, [r3, #4]
}
   1a18c:	bd38      	pop	{r3, r4, r5, pc}

0001a18e <z_ready_thread>:
{
   1a18e:	b510      	push	{r4, lr}
   1a190:	f04f 0320 	mov.w	r3, #32
   1a194:	f3ef 8411 	mrs	r4, BASEPRI
   1a198:	f383 8812 	msr	BASEPRI_MAX, r3
   1a19c:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1a1a0:	f7fa fc88 	bl	14ab4 <ready_thread>
	__asm__ volatile(
   1a1a4:	f384 8811 	msr	BASEPRI, r4
   1a1a8:	f3bf 8f6f 	isb	sy
}
   1a1ac:	bd10      	pop	{r4, pc}

0001a1ae <z_sched_wake_thread>:
{
   1a1ae:	b538      	push	{r3, r4, r5, lr}
   1a1b0:	4604      	mov	r4, r0
	__asm__ volatile(
   1a1b2:	f04f 0320 	mov.w	r3, #32
   1a1b6:	f3ef 8511 	mrs	r5, BASEPRI
   1a1ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1a1be:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1a1c2:	7b43      	ldrb	r3, [r0, #13]
   1a1c4:	f013 0f28 	tst.w	r3, #40	; 0x28
   1a1c8:	d10b      	bne.n	1a1e2 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   1a1ca:	6883      	ldr	r3, [r0, #8]
   1a1cc:	b10b      	cbz	r3, 1a1d2 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   1a1ce:	f7ff ffa3 	bl	1a118 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1a1d2:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   1a1d4:	b951      	cbnz	r1, 1a1ec <z_sched_wake_thread+0x3e>
   1a1d6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
   1a1da:	4620      	mov	r0, r4
   1a1dc:	7363      	strb	r3, [r4, #13]
   1a1de:	f7fa fc69 	bl	14ab4 <ready_thread>
	__asm__ volatile(
   1a1e2:	f385 8811 	msr	BASEPRI, r5
   1a1e6:	f3bf 8f6f 	isb	sy
}
   1a1ea:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1a1ec:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   1a1f0:	e7f3      	b.n	1a1da <z_sched_wake_thread+0x2c>

0001a1f2 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   1a1f2:	2101      	movs	r1, #1
   1a1f4:	3818      	subs	r0, #24
   1a1f6:	f7ff bfda 	b.w	1a1ae <z_sched_wake_thread>

0001a1fa <z_unpend_first_thread>:
{
   1a1fa:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1a1fc:	f04f 0320 	mov.w	r3, #32
   1a200:	f3ef 8511 	mrs	r5, BASEPRI
   1a204:	f383 8812 	msr	BASEPRI_MAX, r3
   1a208:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1a20c:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a20e:	42a0      	cmp	r0, r4
   1a210:	d00d      	beq.n	1a22e <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   1a212:	b134      	cbz	r4, 1a222 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   1a214:	4620      	mov	r0, r4
   1a216:	f7ff ff7f 	bl	1a118 <unpend_thread_no_timeout>
   1a21a:	f104 0018 	add.w	r0, r4, #24
   1a21e:	f000 f869 	bl	1a2f4 <z_abort_timeout>
	__asm__ volatile(
   1a222:	f385 8811 	msr	BASEPRI, r5
   1a226:	f3bf 8f6f 	isb	sy
}
   1a22a:	4620      	mov	r0, r4
   1a22c:	bd38      	pop	{r3, r4, r5, pc}
   1a22e:	2400      	movs	r4, #0
   1a230:	e7f7      	b.n	1a222 <z_unpend_first_thread+0x28>

0001a232 <z_unpend_thread>:
{
   1a232:	4601      	mov	r1, r0
   1a234:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a236:	f04f 0320 	mov.w	r3, #32
   1a23a:	f3ef 8411 	mrs	r4, BASEPRI
   1a23e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a242:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   1a246:	6883      	ldr	r3, [r0, #8]
   1a248:	b10b      	cbz	r3, 1a24e <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   1a24a:	f7ff ff65 	bl	1a118 <unpend_thread_no_timeout>
	__asm__ volatile(
   1a24e:	f384 8811 	msr	BASEPRI, r4
   1a252:	f3bf 8f6f 	isb	sy
}
   1a256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a25a:	f101 0018 	add.w	r0, r1, #24
   1a25e:	f000 b849 	b.w	1a2f4 <z_abort_timeout>

0001a262 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1a262:	4603      	mov	r3, r0
   1a264:	b920      	cbnz	r0, 1a270 <z_reschedule_irqlock+0xe>
   1a266:	f3ef 8205 	mrs	r2, IPSR
   1a26a:	b90a      	cbnz	r2, 1a270 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1a26c:	f7f2 b924 	b.w	c4b8 <arch_swap>
   1a270:	f383 8811 	msr	BASEPRI, r3
   1a274:	f3bf 8f6f 	isb	sy
}
   1a278:	4770      	bx	lr

0001a27a <z_reschedule_unlocked>:
	__asm__ volatile(
   1a27a:	f04f 0320 	mov.w	r3, #32
   1a27e:	f3ef 8011 	mrs	r0, BASEPRI
   1a282:	f383 8812 	msr	BASEPRI_MAX, r3
   1a286:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1a28a:	f7ff bfea 	b.w	1a262 <z_reschedule_irqlock>

0001a28e <z_unpend_all>:
{
   1a28e:	b538      	push	{r3, r4, r5, lr}
   1a290:	4605      	mov	r5, r0
	int need_sched = 0;
   1a292:	2000      	movs	r0, #0
	return list->head == list;
   1a294:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a296:	42a5      	cmp	r5, r4
   1a298:	d000      	beq.n	1a29c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1a29a:	b904      	cbnz	r4, 1a29e <z_unpend_all+0x10>
}
   1a29c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1a29e:	4620      	mov	r0, r4
   1a2a0:	f7ff ffc7 	bl	1a232 <z_unpend_thread>
		z_ready_thread(thread);
   1a2a4:	4620      	mov	r0, r4
   1a2a6:	f7ff ff72 	bl	1a18e <z_ready_thread>
		need_sched = 1;
   1a2aa:	2001      	movs	r0, #1
   1a2ac:	e7f2      	b.n	1a294 <z_unpend_all+0x6>

0001a2ae <z_sched_wake>:
{
   1a2ae:	b538      	push	{r3, r4, r5, lr}
   1a2b0:	f04f 0320 	mov.w	r3, #32
   1a2b4:	f3ef 8511 	mrs	r5, BASEPRI
   1a2b8:	f383 8812 	msr	BASEPRI_MAX, r3
   1a2bc:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1a2c0:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a2c2:	42a0      	cmp	r0, r4
   1a2c4:	d012      	beq.n	1a2ec <z_sched_wake+0x3e>
		if (thread != NULL) {
   1a2c6:	b19c      	cbz	r4, 1a2f0 <z_sched_wake+0x42>
   1a2c8:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   1a2ca:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   1a2cc:	4620      	mov	r0, r4
   1a2ce:	f7ff ff23 	bl	1a118 <unpend_thread_no_timeout>
   1a2d2:	f104 0018 	add.w	r0, r4, #24
   1a2d6:	f000 f80d 	bl	1a2f4 <z_abort_timeout>
			ready_thread(thread);
   1a2da:	4620      	mov	r0, r4
   1a2dc:	f7fa fbea 	bl	14ab4 <ready_thread>
			ret = true;
   1a2e0:	2001      	movs	r0, #1
	__asm__ volatile(
   1a2e2:	f385 8811 	msr	BASEPRI, r5
   1a2e6:	f3bf 8f6f 	isb	sy
}
   1a2ea:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   1a2ec:	2000      	movs	r0, #0
   1a2ee:	e7f8      	b.n	1a2e2 <z_sched_wake+0x34>
   1a2f0:	4620      	mov	r0, r4
   1a2f2:	e7f6      	b.n	1a2e2 <z_sched_wake+0x34>

0001a2f4 <z_abort_timeout>:
{
   1a2f4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a2f6:	f04f 0220 	mov.w	r2, #32
   1a2fa:	f3ef 8411 	mrs	r4, BASEPRI
   1a2fe:	f382 8812 	msr	BASEPRI_MAX, r2
   1a302:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1a306:	6803      	ldr	r3, [r0, #0]
   1a308:	b13b      	cbz	r3, 1a31a <z_abort_timeout+0x26>
			remove_timeout(to);
   1a30a:	f7fa febd 	bl	15088 <remove_timeout>
			ret = 0;
   1a30e:	2000      	movs	r0, #0
	__asm__ volatile(
   1a310:	f384 8811 	msr	BASEPRI, r4
   1a314:	f3bf 8f6f 	isb	sy
}
   1a318:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1a31a:	f06f 0015 	mvn.w	r0, #21
   1a31e:	e7f7      	b.n	1a310 <z_abort_timeout+0x1c>

0001a320 <z_get_next_timeout_expiry>:
{
   1a320:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a322:	f04f 0320 	mov.w	r3, #32
   1a326:	f3ef 8411 	mrs	r4, BASEPRI
   1a32a:	f383 8812 	msr	BASEPRI_MAX, r3
   1a32e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1a332:	f7fa fe89 	bl	15048 <next_timeout>
	__asm__ volatile(
   1a336:	f384 8811 	msr	BASEPRI, r4
   1a33a:	f3bf 8f6f 	isb	sy
}
   1a33e:	bd10      	pop	{r4, pc}

0001a340 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1a340:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1a342:	f7fa ff9d 	bl	15280 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1a346:	bd08      	pop	{r3, pc}

0001a348 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1a348:	f7fa bf9a 	b.w	15280 <sys_clock_tick_get>

0001a34c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1a34c:	b108      	cbz	r0, 1a352 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1a34e:	f7f1 b9e3 	b.w	b718 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1a352:	4770      	bx	lr

0001a354 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a354:	f1b1 3fff 	cmp.w	r1, #4294967295
   1a358:	bf08      	it	eq
   1a35a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1a35e:	b538      	push	{r3, r4, r5, lr}
   1a360:	460c      	mov	r4, r1
   1a362:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a364:	d014      	beq.n	1a390 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a366:	4308      	orrs	r0, r1
   1a368:	d103      	bne.n	1a372 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1a36a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1a36e:	f7fa bf87 	b.w	15280 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1a372:	f06f 0001 	mvn.w	r0, #1
   1a376:	f04f 33ff 	mov.w	r3, #4294967295
   1a37a:	1b40      	subs	r0, r0, r5
   1a37c:	eb63 0101 	sbc.w	r1, r3, r1
   1a380:	2900      	cmp	r1, #0
   1a382:	da04      	bge.n	1a38e <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   1a384:	f7fa ff7c 	bl	15280 <sys_clock_tick_get>
   1a388:	1940      	adds	r0, r0, r5
   1a38a:	eb41 0104 	adc.w	r1, r1, r4
}
   1a38e:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1a390:	f04f 30ff 	mov.w	r0, #4294967295
   1a394:	4601      	mov	r1, r0
   1a396:	e7fa      	b.n	1a38e <sys_clock_timeout_end_calc+0x3a>

0001a398 <add_event>:
{
   1a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a39a:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1a39c:	e9d0 1300 	ldrd	r1, r3, [r0]
   1a3a0:	4288      	cmp	r0, r1
   1a3a2:	4604      	mov	r4, r0
   1a3a4:	d105      	bne.n	1a3b2 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   1a3a6:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1a3a8:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1a3ac:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1a3ae:	6065      	str	r5, [r4, #4]
   1a3b0:	e01d      	b.n	1a3ee <add_event+0x56>
	if ((pending == NULL) ||
   1a3b2:	2b00      	cmp	r3, #0
   1a3b4:	d0f7      	beq.n	1a3a6 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1a3b6:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1a3b8:	b100      	cbz	r0, 1a3bc <add_event+0x24>
   1a3ba:	3860      	subs	r0, #96	; 0x60
   1a3bc:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1a3c0:	4639      	mov	r1, r7
   1a3c2:	f7ff feb3 	bl	1a12c <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1a3c6:	2800      	cmp	r0, #0
   1a3c8:	dced      	bgt.n	1a3a6 <add_event+0xe>
	return list->head == list;
   1a3ca:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a3cc:	42b4      	cmp	r4, r6
   1a3ce:	d0ea      	beq.n	1a3a6 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1a3d0:	2e00      	cmp	r6, #0
   1a3d2:	d0e8      	beq.n	1a3a6 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   1a3d4:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1a3d6:	b101      	cbz	r1, 1a3da <add_event+0x42>
   1a3d8:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1a3da:	4638      	mov	r0, r7
   1a3dc:	f7ff fea6 	bl	1a12c <z_sched_prio_cmp>
   1a3e0:	2800      	cmp	r0, #0
   1a3e2:	dd05      	ble.n	1a3f0 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   1a3e4:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1a3e6:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1a3ea:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1a3ec:	6075      	str	r5, [r6, #4]
}
   1a3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1a3f0:	6863      	ldr	r3, [r4, #4]
   1a3f2:	429e      	cmp	r6, r3
   1a3f4:	d0d7      	beq.n	1a3a6 <add_event+0xe>
   1a3f6:	6836      	ldr	r6, [r6, #0]
   1a3f8:	e7ea      	b.n	1a3d0 <add_event+0x38>

0001a3fa <register_events>:
{
   1a3fa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1a3fe:	2500      	movs	r5, #0
{
   1a400:	468b      	mov	fp, r1
   1a402:	4614      	mov	r4, r2
   1a404:	461f      	mov	r7, r3
   1a406:	4682      	mov	sl, r0
	int events_registered = 0;
   1a408:	462e      	mov	r6, r5
	event->poller = NULL;
   1a40a:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   1a40c:	455d      	cmp	r5, fp
   1a40e:	db02      	blt.n	1a416 <register_events+0x1c>
}
   1a410:	4630      	mov	r0, r6
   1a412:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1a416:	f04f 0320 	mov.w	r3, #32
   1a41a:	f3ef 8911 	mrs	r9, BASEPRI
   1a41e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a422:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1a426:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1a42a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1a42e:	3b01      	subs	r3, #1
   1a430:	2b07      	cmp	r3, #7
   1a432:	d80f      	bhi.n	1a454 <register_events+0x5a>
   1a434:	e8df f003 	tbb	[pc, r3]
   1a438:	0a0e041e 	.word	0x0a0e041e
   1a43c:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   1a440:	f8da 3010 	ldr.w	r3, [sl, #16]
   1a444:	689b      	ldr	r3, [r3, #8]
   1a446:	b12b      	cbz	r3, 1a454 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1a448:	2302      	movs	r3, #2
   1a44a:	e020      	b.n	1a48e <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   1a44c:	f8da 3010 	ldr.w	r3, [sl, #16]
   1a450:	681b      	ldr	r3, [r3, #0]
   1a452:	bb8b      	cbnz	r3, 1a4b8 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   1a454:	bb47      	cbnz	r7, 1a4a8 <register_events+0xae>
   1a456:	7823      	ldrb	r3, [r4, #0]
   1a458:	b333      	cbz	r3, 1a4a8 <register_events+0xae>
	switch (event->type) {
   1a45a:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1a45e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1a462:	3b01      	subs	r3, #1
   1a464:	2b07      	cmp	r3, #7
   1a466:	d830      	bhi.n	1a4ca <register_events+0xd0>
   1a468:	e8df f003 	tbb	[pc, r3]
   1a46c:	282f2833 	.word	0x282f2833
   1a470:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   1a474:	f8da 3010 	ldr.w	r3, [sl, #16]
   1a478:	689b      	ldr	r3, [r3, #8]
   1a47a:	2b00      	cmp	r3, #0
   1a47c:	d0ea      	beq.n	1a454 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   1a47e:	2301      	movs	r3, #1
   1a480:	e005      	b.n	1a48e <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   1a482:	f8da 3010 	ldr.w	r3, [sl, #16]
   1a486:	6a1b      	ldr	r3, [r3, #32]
   1a488:	2b00      	cmp	r3, #0
   1a48a:	d0e3      	beq.n	1a454 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1a48c:	2310      	movs	r3, #16
	event->state |= state;
   1a48e:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   1a492:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   1a496:	f3c2 3186 	ubfx	r1, r2, #14, #7
   1a49a:	430b      	orrs	r3, r1
   1a49c:	f363 3294 	bfi	r2, r3, #14, #7
   1a4a0:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   1a4a4:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1a4a8:	f389 8811 	msr	BASEPRI, r9
   1a4ac:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1a4b0:	3501      	adds	r5, #1
   1a4b2:	f10a 0a14 	add.w	sl, sl, #20
   1a4b6:	e7a9      	b.n	1a40c <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1a4b8:	2304      	movs	r3, #4
   1a4ba:	e7e8      	b.n	1a48e <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   1a4bc:	4622      	mov	r2, r4
   1a4be:	4651      	mov	r1, sl
   1a4c0:	f8da 0010 	ldr.w	r0, [sl, #16]
   1a4c4:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1a4c6:	f7ff ff67 	bl	1a398 <add_event>
	event->poller = poller;
   1a4ca:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   1a4ce:	3601      	adds	r6, #1
   1a4d0:	e7ea      	b.n	1a4a8 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   1a4d2:	4622      	mov	r2, r4
   1a4d4:	4651      	mov	r1, sl
   1a4d6:	f8da 0010 	ldr.w	r0, [sl, #16]
   1a4da:	e7f4      	b.n	1a4c6 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   1a4dc:	f8da 0010 	ldr.w	r0, [sl, #16]
   1a4e0:	4622      	mov	r2, r4
   1a4e2:	4651      	mov	r1, sl
   1a4e4:	3024      	adds	r0, #36	; 0x24
   1a4e6:	e7ee      	b.n	1a4c6 <register_events+0xcc>

0001a4e8 <signal_poll_event>:
{
   1a4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1a4ec:	6884      	ldr	r4, [r0, #8]
{
   1a4ee:	4605      	mov	r5, r0
   1a4f0:	460e      	mov	r6, r1
	if (poller != NULL) {
   1a4f2:	b144      	cbz	r4, 1a506 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1a4f4:	7863      	ldrb	r3, [r4, #1]
   1a4f6:	2b01      	cmp	r3, #1
   1a4f8:	d12e      	bne.n	1a558 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   1a4fa:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1a4fe:	f013 0302 	ands.w	r3, r3, #2
   1a502:	d10a      	bne.n	1a51a <signal_poll_event+0x32>
		poller->is_polling = false;
   1a504:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1a506:	2000      	movs	r0, #0
	event->state |= state;
   1a508:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   1a50a:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1a50c:	f3c3 3286 	ubfx	r2, r3, #14, #7
   1a510:	4316      	orrs	r6, r2
   1a512:	f366 3394 	bfi	r3, r6, #14, #7
   1a516:	60eb      	str	r3, [r5, #12]
	return retcode;
   1a518:	e03e      	b.n	1a598 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   1a51a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1a51e:	f1b3 3fff 	cmp.w	r3, #4294967295
   1a522:	bf08      	it	eq
   1a524:	f112 0f02 	cmneq.w	r2, #2
   1a528:	d032      	beq.n	1a590 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1a52a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1a52e:	4640      	mov	r0, r8
   1a530:	f7ff fe7f 	bl	1a232 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1a534:	2e08      	cmp	r6, #8
   1a536:	bf0c      	ite	eq
   1a538:	f06f 0303 	mvneq.w	r3, #3
   1a53c:	2300      	movne	r3, #0
   1a53e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1a540:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1a544:	06db      	lsls	r3, r3, #27
   1a546:	d109      	bne.n	1a55c <signal_poll_event+0x74>
   1a548:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1a54c:	b937      	cbnz	r7, 1a55c <signal_poll_event+0x74>
	z_ready_thread(thread);
   1a54e:	4640      	mov	r0, r8
   1a550:	f7ff fe1d 	bl	1a18e <z_ready_thread>
		poller->is_polling = false;
   1a554:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1a556:	e7d6      	b.n	1a506 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1a558:	2b02      	cmp	r3, #2
   1a55a:	d001      	beq.n	1a560 <signal_poll_event+0x78>
		poller->is_polling = false;
   1a55c:	2300      	movs	r3, #0
   1a55e:	e7d1      	b.n	1a504 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1a560:	7823      	ldrb	r3, [r4, #0]
   1a562:	2b00      	cmp	r3, #0
   1a564:	d0cf      	beq.n	1a506 <signal_poll_event+0x1e>
   1a566:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1a56a:	2f00      	cmp	r7, #0
   1a56c:	d0f2      	beq.n	1a554 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1a56e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1a572:	f1a4 0914 	sub.w	r9, r4, #20
   1a576:	f104 0014 	add.w	r0, r4, #20
   1a57a:	f7ff febb 	bl	1a2f4 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   1a57e:	4649      	mov	r1, r9
   1a580:	4638      	mov	r0, r7
		twork->poll_result = 0;
   1a582:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   1a586:	f7ff fd9a 	bl	1a0be <z_work_submit_to_queue>
		poller->is_polling = false;
   1a58a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1a58e:	e7ba      	b.n	1a506 <signal_poll_event+0x1e>
		poller->is_polling = false;
   1a590:	2300      	movs	r3, #0
		return -EAGAIN;
   1a592:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   1a596:	7023      	strb	r3, [r4, #0]
}
   1a598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001a59c <clear_event_registrations>:
	while (num_events--) {
   1a59c:	2314      	movs	r3, #20
{
   1a59e:	b5f0      	push	{r4, r5, r6, r7, lr}
	event->poller = NULL;
   1a5a0:	2400      	movs	r4, #0
	switch (event->type) {
   1a5a2:	f44f 768b 	mov.w	r6, #278	; 0x116
   1a5a6:	fb03 0001 	mla	r0, r3, r1, r0
	while (num_events--) {
   1a5aa:	b901      	cbnz	r1, 1a5ae <clear_event_registrations+0x12>
}
   1a5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   1a5ae:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   1a5b2:	f1a0 0714 	sub.w	r7, r0, #20
   1a5b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1a5ba:	2b08      	cmp	r3, #8
	event->poller = NULL;
   1a5bc:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   1a5c0:	d80c      	bhi.n	1a5dc <clear_event_registrations+0x40>
   1a5c2:	fa26 f303 	lsr.w	r3, r6, r3
   1a5c6:	07db      	lsls	r3, r3, #31
   1a5c8:	d508      	bpl.n	1a5dc <clear_event_registrations+0x40>
	return node->next != NULL;
   1a5ca:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1a5ce:	b12b      	cbz	r3, 1a5dc <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   1a5d0:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   1a5d4:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1a5d6:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1a5d8:	e940 4405 	strd	r4, r4, [r0, #-20]
   1a5dc:	f382 8811 	msr	BASEPRI, r2
   1a5e0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1a5e4:	f04f 0320 	mov.w	r3, #32
   1a5e8:	f3ef 8211 	mrs	r2, BASEPRI
   1a5ec:	f383 8812 	msr	BASEPRI_MAX, r3
   1a5f0:	f3bf 8f6f 	isb	sy
   1a5f4:	4638      	mov	r0, r7
   1a5f6:	3901      	subs	r1, #1
   1a5f8:	e7d7      	b.n	1a5aa <clear_event_registrations+0xe>

0001a5fa <k_poll_event_init>:
{
   1a5fa:	b510      	push	{r4, lr}
	event->poller = NULL;
   1a5fc:	2400      	movs	r4, #0
	event->type = type;
   1a5fe:	0552      	lsls	r2, r2, #21
   1a600:	0209      	lsls	r1, r1, #8
   1a602:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   1a606:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   1a60a:	430a      	orrs	r2, r1
   1a60c:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   1a60e:	6084      	str	r4, [r0, #8]
	event->type = type;
   1a610:	430a      	orrs	r2, r1
	event->obj = obj;
   1a612:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   1a616:	bd10      	pop	{r4, pc}

0001a618 <z_handle_obj_poll_events>:
{
   1a618:	4603      	mov	r3, r0
	return list->head == list;
   1a61a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1a61c:	4283      	cmp	r3, r0
   1a61e:	d008      	beq.n	1a632 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1a620:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1a624:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1a626:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a628:	2300      	movs	r3, #0
	node->prev = NULL;
   1a62a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1a62e:	f7ff bf5b 	b.w	1a4e8 <signal_poll_event>
}
   1a632:	4770      	bx	lr

0001a634 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   1a634:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   1a636:	e9c0 0000 	strd	r0, r0, [r0]
   1a63a:	6083      	str	r3, [r0, #8]
}
   1a63c:	4770      	bx	lr

0001a63e <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   1a63e:	6883      	ldr	r3, [r0, #8]
   1a640:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   1a642:	68c3      	ldr	r3, [r0, #12]
   1a644:	6013      	str	r3, [r2, #0]
}
   1a646:	4770      	bx	lr

0001a648 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1a648:	3204      	adds	r2, #4
{
   1a64a:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1a64c:	4604      	mov	r4, r0
   1a64e:	d208      	bcs.n	1a662 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1a650:	2600      	movs	r6, #0
   1a652:	2700      	movs	r7, #0
   1a654:	f041 0104 	orr.w	r1, r1, #4
   1a658:	e9cd 6700 	strd	r6, r7, [sp]
   1a65c:	f7ff fbf0 	bl	19e40 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1a660:	b910      	cbnz	r0, 1a668 <z_heap_aligned_alloc+0x20>
		return NULL;
   1a662:	2000      	movs	r0, #0
}
   1a664:	b002      	add	sp, #8
   1a666:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   1a668:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   1a66c:	e7fa      	b.n	1a664 <z_heap_aligned_alloc+0x1c>

0001a66e <k_free>:
	if (ptr != NULL) {
   1a66e:	b120      	cbz	r0, 1a67a <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1a670:	1f01      	subs	r1, r0, #4
   1a672:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1a676:	f7ff bc3a 	b.w	19eee <k_heap_free>
}
   1a67a:	4770      	bx	lr

0001a67c <k_malloc>:
{
   1a67c:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   1a67e:	2004      	movs	r0, #4
   1a680:	f7fa be9c 	b.w	153bc <k_aligned_alloc>

0001a684 <k_calloc>:
{
   1a684:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   1a686:	fba0 5401 	umull	r5, r4, r0, r1
   1a68a:	b924      	cbnz	r4, 1a696 <k_calloc+0x12>
	ret = k_malloc(bounds);
   1a68c:	4628      	mov	r0, r5
   1a68e:	f7ff fff5 	bl	1a67c <k_malloc>
	if (ret != NULL) {
   1a692:	4606      	mov	r6, r0
   1a694:	b910      	cbnz	r0, 1a69c <k_calloc+0x18>
		return NULL;
   1a696:	2600      	movs	r6, #0
}
   1a698:	4630      	mov	r0, r6
   1a69a:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3(memset, void *, int)
   1a69c:	462a      	mov	r2, r5
   1a69e:	4621      	mov	r1, r4
   1a6a0:	f000 f82d 	bl	1a6fe <memset>
   1a6a4:	e7f8      	b.n	1a698 <k_calloc+0x14>

0001a6a6 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1a6a6:	4770      	bx	lr

0001a6a8 <memchr>:
   1a6a8:	b2c9      	uxtb	r1, r1
   1a6aa:	4603      	mov	r3, r0
   1a6ac:	4402      	add	r2, r0
   1a6ae:	b510      	push	{r4, lr}
   1a6b0:	4293      	cmp	r3, r2
   1a6b2:	4618      	mov	r0, r3
   1a6b4:	d101      	bne.n	1a6ba <memchr+0x12>
   1a6b6:	2000      	movs	r0, #0
   1a6b8:	e003      	b.n	1a6c2 <memchr+0x1a>
   1a6ba:	7804      	ldrb	r4, [r0, #0]
   1a6bc:	3301      	adds	r3, #1
   1a6be:	428c      	cmp	r4, r1
   1a6c0:	d1f6      	bne.n	1a6b0 <memchr+0x8>
   1a6c2:	bd10      	pop	{r4, pc}

0001a6c4 <memcmp>:
   1a6c4:	3901      	subs	r1, #1
   1a6c6:	4402      	add	r2, r0
   1a6c8:	b510      	push	{r4, lr}
   1a6ca:	4290      	cmp	r0, r2
   1a6cc:	d101      	bne.n	1a6d2 <memcmp+0xe>
   1a6ce:	2000      	movs	r0, #0
   1a6d0:	e005      	b.n	1a6de <memcmp+0x1a>
   1a6d2:	7803      	ldrb	r3, [r0, #0]
   1a6d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1a6d8:	42a3      	cmp	r3, r4
   1a6da:	d001      	beq.n	1a6e0 <memcmp+0x1c>
   1a6dc:	1b18      	subs	r0, r3, r4
   1a6de:	bd10      	pop	{r4, pc}
   1a6e0:	3001      	adds	r0, #1
   1a6e2:	e7f2      	b.n	1a6ca <memcmp+0x6>

0001a6e4 <memcpy>:
   1a6e4:	440a      	add	r2, r1
   1a6e6:	1e43      	subs	r3, r0, #1
   1a6e8:	4291      	cmp	r1, r2
   1a6ea:	d100      	bne.n	1a6ee <memcpy+0xa>
   1a6ec:	4770      	bx	lr
   1a6ee:	b510      	push	{r4, lr}
   1a6f0:	f811 4b01 	ldrb.w	r4, [r1], #1
   1a6f4:	4291      	cmp	r1, r2
   1a6f6:	f803 4f01 	strb.w	r4, [r3, #1]!
   1a6fa:	d1f9      	bne.n	1a6f0 <memcpy+0xc>
   1a6fc:	bd10      	pop	{r4, pc}

0001a6fe <memset>:
   1a6fe:	4402      	add	r2, r0
   1a700:	4603      	mov	r3, r0
   1a702:	4293      	cmp	r3, r2
   1a704:	d100      	bne.n	1a708 <memset+0xa>
   1a706:	4770      	bx	lr
   1a708:	f803 1b01 	strb.w	r1, [r3], #1
   1a70c:	e7f9      	b.n	1a702 <memset+0x4>

0001a70e <__cvt>:
   1a70e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a712:	b085      	sub	sp, #20
   1a714:	460c      	mov	r4, r1
   1a716:	4690      	mov	r8, r2
   1a718:	4619      	mov	r1, r3
   1a71a:	ec57 6b10 	vmov	r6, r7, d0
   1a71e:	2f00      	cmp	r7, #0
   1a720:	463b      	mov	r3, r7
   1a722:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   1a726:	bfbc      	itt	lt
   1a728:	f107 4300 	addlt.w	r3, r7, #2147483648	; 0x80000000
   1a72c:	4632      	movlt	r2, r6
   1a72e:	f02b 0a20 	bic.w	sl, fp, #32
   1a732:	bfaf      	iteee	ge
   1a734:	2300      	movge	r3, #0
   1a736:	461f      	movlt	r7, r3
   1a738:	4616      	movlt	r6, r2
   1a73a:	232d      	movlt	r3, #45	; 0x2d
   1a73c:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   1a740:	700b      	strb	r3, [r1, #0]
   1a742:	d005      	beq.n	1a750 <__cvt+0x42>
   1a744:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   1a748:	d100      	bne.n	1a74c <__cvt+0x3e>
   1a74a:	3401      	adds	r4, #1
   1a74c:	2102      	movs	r1, #2
   1a74e:	e000      	b.n	1a752 <__cvt+0x44>
   1a750:	2103      	movs	r1, #3
   1a752:	ab03      	add	r3, sp, #12
   1a754:	4622      	mov	r2, r4
   1a756:	9301      	str	r3, [sp, #4]
   1a758:	ab02      	add	r3, sp, #8
   1a75a:	ec47 6b10 	vmov	d0, r6, r7
   1a75e:	9300      	str	r3, [sp, #0]
   1a760:	464b      	mov	r3, r9
   1a762:	f7ef fb5d 	bl	9e20 <_dtoa_r>
   1a766:	f1bb 0f67 	cmp.w	fp, #103	; 0x67
   1a76a:	4605      	mov	r5, r0
   1a76c:	d119      	bne.n	1a7a2 <__cvt+0x94>
   1a76e:	f018 0f01 	tst.w	r8, #1
   1a772:	d00e      	beq.n	1a792 <__cvt+0x84>
   1a774:	eb05 0804 	add.w	r8, r5, r4
   1a778:	2200      	movs	r2, #0
   1a77a:	2300      	movs	r3, #0
   1a77c:	4630      	mov	r0, r6
   1a77e:	4639      	mov	r1, r7
   1a780:	f7ee f970 	bl	8a64 <__aeabi_dcmpeq>
   1a784:	b108      	cbz	r0, 1a78a <__cvt+0x7c>
   1a786:	f8cd 800c 	str.w	r8, [sp, #12]
   1a78a:	2230      	movs	r2, #48	; 0x30
   1a78c:	9b03      	ldr	r3, [sp, #12]
   1a78e:	4543      	cmp	r3, r8
   1a790:	d321      	bcc.n	1a7d6 <__cvt+0xc8>
   1a792:	9b03      	ldr	r3, [sp, #12]
   1a794:	4628      	mov	r0, r5
   1a796:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1a798:	1b5b      	subs	r3, r3, r5
   1a79a:	6013      	str	r3, [r2, #0]
   1a79c:	b005      	add	sp, #20
   1a79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a7a2:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   1a7a6:	d0e2      	beq.n	1a76e <__cvt+0x60>
   1a7a8:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   1a7ac:	eb00 0804 	add.w	r8, r0, r4
   1a7b0:	d1e2      	bne.n	1a778 <__cvt+0x6a>
   1a7b2:	7803      	ldrb	r3, [r0, #0]
   1a7b4:	2b30      	cmp	r3, #48	; 0x30
   1a7b6:	d10a      	bne.n	1a7ce <__cvt+0xc0>
   1a7b8:	2200      	movs	r2, #0
   1a7ba:	2300      	movs	r3, #0
   1a7bc:	4630      	mov	r0, r6
   1a7be:	4639      	mov	r1, r7
   1a7c0:	f7ee f950 	bl	8a64 <__aeabi_dcmpeq>
   1a7c4:	b918      	cbnz	r0, 1a7ce <__cvt+0xc0>
   1a7c6:	f1c4 0401 	rsb	r4, r4, #1
   1a7ca:	f8c9 4000 	str.w	r4, [r9]
   1a7ce:	f8d9 3000 	ldr.w	r3, [r9]
   1a7d2:	4498      	add	r8, r3
   1a7d4:	e7d0      	b.n	1a778 <__cvt+0x6a>
   1a7d6:	1c59      	adds	r1, r3, #1
   1a7d8:	9103      	str	r1, [sp, #12]
   1a7da:	701a      	strb	r2, [r3, #0]
   1a7dc:	e7d6      	b.n	1a78c <__cvt+0x7e>

0001a7de <__exponent>:
   1a7de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a7e0:	2900      	cmp	r1, #0
   1a7e2:	7002      	strb	r2, [r0, #0]
   1a7e4:	bfba      	itte	lt
   1a7e6:	4249      	neglt	r1, r1
   1a7e8:	232d      	movlt	r3, #45	; 0x2d
   1a7ea:	232b      	movge	r3, #43	; 0x2b
   1a7ec:	2909      	cmp	r1, #9
   1a7ee:	7043      	strb	r3, [r0, #1]
   1a7f0:	dd28      	ble.n	1a844 <__exponent+0x66>
   1a7f2:	f10d 0307 	add.w	r3, sp, #7
   1a7f6:	270a      	movs	r7, #10
   1a7f8:	461d      	mov	r5, r3
   1a7fa:	461a      	mov	r2, r3
   1a7fc:	3b01      	subs	r3, #1
   1a7fe:	fbb1 f6f7 	udiv	r6, r1, r7
   1a802:	fb07 1416 	mls	r4, r7, r6, r1
   1a806:	3430      	adds	r4, #48	; 0x30
   1a808:	f802 4c01 	strb.w	r4, [r2, #-1]
   1a80c:	460c      	mov	r4, r1
   1a80e:	4631      	mov	r1, r6
   1a810:	2c63      	cmp	r4, #99	; 0x63
   1a812:	dcf2      	bgt.n	1a7fa <__exponent+0x1c>
   1a814:	3130      	adds	r1, #48	; 0x30
   1a816:	1e94      	subs	r4, r2, #2
   1a818:	f803 1c01 	strb.w	r1, [r3, #-1]
   1a81c:	1c41      	adds	r1, r0, #1
   1a81e:	4623      	mov	r3, r4
   1a820:	42ab      	cmp	r3, r5
   1a822:	d30a      	bcc.n	1a83a <__exponent+0x5c>
   1a824:	f10d 0309 	add.w	r3, sp, #9
   1a828:	1a9b      	subs	r3, r3, r2
   1a82a:	42ac      	cmp	r4, r5
   1a82c:	bf88      	it	hi
   1a82e:	2300      	movhi	r3, #0
   1a830:	3302      	adds	r3, #2
   1a832:	4403      	add	r3, r0
   1a834:	1a18      	subs	r0, r3, r0
   1a836:	b003      	add	sp, #12
   1a838:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a83a:	f813 6b01 	ldrb.w	r6, [r3], #1
   1a83e:	f801 6f01 	strb.w	r6, [r1, #1]!
   1a842:	e7ed      	b.n	1a820 <__exponent+0x42>
   1a844:	2330      	movs	r3, #48	; 0x30
   1a846:	3130      	adds	r1, #48	; 0x30
   1a848:	7083      	strb	r3, [r0, #2]
   1a84a:	1d03      	adds	r3, r0, #4
   1a84c:	70c1      	strb	r1, [r0, #3]
   1a84e:	e7f1      	b.n	1a834 <__exponent+0x56>

0001a850 <_printf_common>:
   1a850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a854:	4616      	mov	r6, r2
   1a856:	4698      	mov	r8, r3
   1a858:	688a      	ldr	r2, [r1, #8]
   1a85a:	4607      	mov	r7, r0
   1a85c:	690b      	ldr	r3, [r1, #16]
   1a85e:	460c      	mov	r4, r1
   1a860:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1a864:	4293      	cmp	r3, r2
   1a866:	bfb8      	it	lt
   1a868:	4613      	movlt	r3, r2
   1a86a:	6033      	str	r3, [r6, #0]
   1a86c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   1a870:	b10a      	cbz	r2, 1a876 <_printf_common+0x26>
   1a872:	3301      	adds	r3, #1
   1a874:	6033      	str	r3, [r6, #0]
   1a876:	6823      	ldr	r3, [r4, #0]
   1a878:	0699      	lsls	r1, r3, #26
   1a87a:	bf42      	ittt	mi
   1a87c:	6833      	ldrmi	r3, [r6, #0]
   1a87e:	3302      	addmi	r3, #2
   1a880:	6033      	strmi	r3, [r6, #0]
   1a882:	6825      	ldr	r5, [r4, #0]
   1a884:	f015 0506 	ands.w	r5, r5, #6
   1a888:	d106      	bne.n	1a898 <_printf_common+0x48>
   1a88a:	f104 0a19 	add.w	sl, r4, #25
   1a88e:	68e3      	ldr	r3, [r4, #12]
   1a890:	6832      	ldr	r2, [r6, #0]
   1a892:	1a9b      	subs	r3, r3, r2
   1a894:	42ab      	cmp	r3, r5
   1a896:	dc2b      	bgt.n	1a8f0 <_printf_common+0xa0>
   1a898:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   1a89c:	6822      	ldr	r2, [r4, #0]
   1a89e:	3b00      	subs	r3, #0
   1a8a0:	bf18      	it	ne
   1a8a2:	2301      	movne	r3, #1
   1a8a4:	0692      	lsls	r2, r2, #26
   1a8a6:	d430      	bmi.n	1a90a <_printf_common+0xba>
   1a8a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1a8ac:	4641      	mov	r1, r8
   1a8ae:	4638      	mov	r0, r7
   1a8b0:	47c8      	blx	r9
   1a8b2:	3001      	adds	r0, #1
   1a8b4:	d023      	beq.n	1a8fe <_printf_common+0xae>
   1a8b6:	6823      	ldr	r3, [r4, #0]
   1a8b8:	341a      	adds	r4, #26
   1a8ba:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   1a8be:	f003 0306 	and.w	r3, r3, #6
   1a8c2:	2b04      	cmp	r3, #4
   1a8c4:	bf0a      	itet	eq
   1a8c6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   1a8ca:	2500      	movne	r5, #0
   1a8cc:	6833      	ldreq	r3, [r6, #0]
   1a8ce:	f04f 0600 	mov.w	r6, #0
   1a8d2:	bf08      	it	eq
   1a8d4:	1aed      	subeq	r5, r5, r3
   1a8d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
   1a8da:	bf08      	it	eq
   1a8dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   1a8e0:	4293      	cmp	r3, r2
   1a8e2:	bfc4      	itt	gt
   1a8e4:	1a9b      	subgt	r3, r3, r2
   1a8e6:	18ed      	addgt	r5, r5, r3
   1a8e8:	42b5      	cmp	r5, r6
   1a8ea:	d11a      	bne.n	1a922 <_printf_common+0xd2>
   1a8ec:	2000      	movs	r0, #0
   1a8ee:	e008      	b.n	1a902 <_printf_common+0xb2>
   1a8f0:	2301      	movs	r3, #1
   1a8f2:	4652      	mov	r2, sl
   1a8f4:	4641      	mov	r1, r8
   1a8f6:	4638      	mov	r0, r7
   1a8f8:	47c8      	blx	r9
   1a8fa:	3001      	adds	r0, #1
   1a8fc:	d103      	bne.n	1a906 <_printf_common+0xb6>
   1a8fe:	f04f 30ff 	mov.w	r0, #4294967295
   1a902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a906:	3501      	adds	r5, #1
   1a908:	e7c1      	b.n	1a88e <_printf_common+0x3e>
   1a90a:	18e1      	adds	r1, r4, r3
   1a90c:	1c5a      	adds	r2, r3, #1
   1a90e:	2030      	movs	r0, #48	; 0x30
   1a910:	3302      	adds	r3, #2
   1a912:	4422      	add	r2, r4
   1a914:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   1a918:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1a91c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   1a920:	e7c2      	b.n	1a8a8 <_printf_common+0x58>
   1a922:	2301      	movs	r3, #1
   1a924:	4622      	mov	r2, r4
   1a926:	4641      	mov	r1, r8
   1a928:	4638      	mov	r0, r7
   1a92a:	47c8      	blx	r9
   1a92c:	3001      	adds	r0, #1
   1a92e:	d0e6      	beq.n	1a8fe <_printf_common+0xae>
   1a930:	3601      	adds	r6, #1
   1a932:	e7d9      	b.n	1a8e8 <_printf_common+0x98>

0001a934 <__sread>:
   1a934:	b510      	push	{r4, lr}
   1a936:	460c      	mov	r4, r1
   1a938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1a93c:	f7fc fcb4 	bl	172a8 <_read_r>
   1a940:	2800      	cmp	r0, #0
   1a942:	bfab      	itete	ge
   1a944:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   1a946:	89a3      	ldrhlt	r3, [r4, #12]
   1a948:	181b      	addge	r3, r3, r0
   1a94a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   1a94e:	bfac      	ite	ge
   1a950:	6563      	strge	r3, [r4, #84]	; 0x54
   1a952:	81a3      	strhlt	r3, [r4, #12]
   1a954:	bd10      	pop	{r4, pc}

0001a956 <__seofread>:
   1a956:	2000      	movs	r0, #0
   1a958:	4770      	bx	lr

0001a95a <__swrite>:
   1a95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a95e:	461f      	mov	r7, r3
   1a960:	898b      	ldrh	r3, [r1, #12]
   1a962:	4605      	mov	r5, r0
   1a964:	460c      	mov	r4, r1
   1a966:	05db      	lsls	r3, r3, #23
   1a968:	4616      	mov	r6, r2
   1a96a:	d505      	bpl.n	1a978 <__swrite+0x1e>
   1a96c:	2302      	movs	r3, #2
   1a96e:	2200      	movs	r2, #0
   1a970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1a974:	f7fb fc62 	bl	1623c <_lseek_r>
   1a978:	89a3      	ldrh	r3, [r4, #12]
   1a97a:	4632      	mov	r2, r6
   1a97c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1a980:	4628      	mov	r0, r5
   1a982:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1a986:	81a3      	strh	r3, [r4, #12]
   1a988:	463b      	mov	r3, r7
   1a98a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a98e:	f7fb bb6f 	b.w	16070 <_write_r>

0001a992 <__sseek>:
   1a992:	b510      	push	{r4, lr}
   1a994:	460c      	mov	r4, r1
   1a996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1a99a:	f7fb fc4f 	bl	1623c <_lseek_r>
   1a99e:	1c43      	adds	r3, r0, #1
   1a9a0:	89a3      	ldrh	r3, [r4, #12]
   1a9a2:	bf15      	itete	ne
   1a9a4:	6560      	strne	r0, [r4, #84]	; 0x54
   1a9a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   1a9aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   1a9ae:	81a3      	strheq	r3, [r4, #12]
   1a9b0:	bf18      	it	ne
   1a9b2:	81a3      	strhne	r3, [r4, #12]
   1a9b4:	bd10      	pop	{r4, pc}

0001a9b6 <__sclose>:
   1a9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1a9ba:	f7fb bb6b 	b.w	16094 <_close_r>

0001a9be <strchr>:
   1a9be:	b2c9      	uxtb	r1, r1
   1a9c0:	4603      	mov	r3, r0
   1a9c2:	4618      	mov	r0, r3
   1a9c4:	f813 2b01 	ldrb.w	r2, [r3], #1
   1a9c8:	b112      	cbz	r2, 1a9d0 <strchr+0x12>
   1a9ca:	428a      	cmp	r2, r1
   1a9cc:	d1f9      	bne.n	1a9c2 <strchr+0x4>
   1a9ce:	4770      	bx	lr
   1a9d0:	2900      	cmp	r1, #0
   1a9d2:	bf18      	it	ne
   1a9d4:	2000      	movne	r0, #0
   1a9d6:	4770      	bx	lr

0001a9d8 <strcpy>:
   1a9d8:	4603      	mov	r3, r0
   1a9da:	f811 2b01 	ldrb.w	r2, [r1], #1
   1a9de:	f803 2b01 	strb.w	r2, [r3], #1
   1a9e2:	2a00      	cmp	r2, #0
   1a9e4:	d1f9      	bne.n	1a9da <strcpy+0x2>
   1a9e6:	4770      	bx	lr

0001a9e8 <strncmp>:
   1a9e8:	b510      	push	{r4, lr}
   1a9ea:	b16a      	cbz	r2, 1aa08 <strncmp+0x20>
   1a9ec:	3901      	subs	r1, #1
   1a9ee:	1884      	adds	r4, r0, r2
   1a9f0:	f810 2b01 	ldrb.w	r2, [r0], #1
   1a9f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1a9f8:	429a      	cmp	r2, r3
   1a9fa:	d103      	bne.n	1aa04 <strncmp+0x1c>
   1a9fc:	42a0      	cmp	r0, r4
   1a9fe:	d001      	beq.n	1aa04 <strncmp+0x1c>
   1aa00:	2a00      	cmp	r2, #0
   1aa02:	d1f5      	bne.n	1a9f0 <strncmp+0x8>
   1aa04:	1ad0      	subs	r0, r2, r3
   1aa06:	bd10      	pop	{r4, pc}
   1aa08:	4610      	mov	r0, r2
   1aa0a:	e7fc      	b.n	1aa06 <strncmp+0x1e>

0001aa0c <strncpy>:
   1aa0c:	3901      	subs	r1, #1
   1aa0e:	4603      	mov	r3, r0
   1aa10:	b510      	push	{r4, lr}
   1aa12:	b132      	cbz	r2, 1aa22 <strncpy+0x16>
   1aa14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1aa18:	3a01      	subs	r2, #1
   1aa1a:	f803 4b01 	strb.w	r4, [r3], #1
   1aa1e:	2c00      	cmp	r4, #0
   1aa20:	d1f7      	bne.n	1aa12 <strncpy+0x6>
   1aa22:	441a      	add	r2, r3
   1aa24:	2100      	movs	r1, #0
   1aa26:	4293      	cmp	r3, r2
   1aa28:	d100      	bne.n	1aa2c <strncpy+0x20>
   1aa2a:	bd10      	pop	{r4, pc}
   1aa2c:	f803 1b01 	strb.w	r1, [r3], #1
   1aa30:	e7f9      	b.n	1aa26 <strncpy+0x1a>

0001aa32 <strnlen>:
   1aa32:	4602      	mov	r2, r0
   1aa34:	4401      	add	r1, r0
   1aa36:	b510      	push	{r4, lr}
   1aa38:	428a      	cmp	r2, r1
   1aa3a:	4613      	mov	r3, r2
   1aa3c:	d003      	beq.n	1aa46 <strnlen+0x14>
   1aa3e:	781c      	ldrb	r4, [r3, #0]
   1aa40:	3201      	adds	r2, #1
   1aa42:	2c00      	cmp	r4, #0
   1aa44:	d1f8      	bne.n	1aa38 <strnlen+0x6>
   1aa46:	1a18      	subs	r0, r3, r0
   1aa48:	bd10      	pop	{r4, pc}

0001aa4a <strstr>:
   1aa4a:	780a      	ldrb	r2, [r1, #0]
   1aa4c:	b570      	push	{r4, r5, r6, lr}
   1aa4e:	b96a      	cbnz	r2, 1aa6c <strstr+0x22>
   1aa50:	bd70      	pop	{r4, r5, r6, pc}
   1aa52:	429a      	cmp	r2, r3
   1aa54:	d109      	bne.n	1aa6a <strstr+0x20>
   1aa56:	460c      	mov	r4, r1
   1aa58:	4605      	mov	r5, r0
   1aa5a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1aa5e:	2b00      	cmp	r3, #0
   1aa60:	d0f6      	beq.n	1aa50 <strstr+0x6>
   1aa62:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1aa66:	429e      	cmp	r6, r3
   1aa68:	d0f7      	beq.n	1aa5a <strstr+0x10>
   1aa6a:	3001      	adds	r0, #1
   1aa6c:	7803      	ldrb	r3, [r0, #0]
   1aa6e:	2b00      	cmp	r3, #0
   1aa70:	d1ef      	bne.n	1aa52 <strstr+0x8>
   1aa72:	4618      	mov	r0, r3
   1aa74:	e7ec      	b.n	1aa50 <strstr+0x6>

0001aa76 <_strtol_r>:
   1aa76:	f7fb b91d 	b.w	15cb4 <_strtol_l.constprop.0>

0001aa7a <_strtoul_r>:
   1aa7a:	f7fb ba41 	b.w	15f00 <_strtoul_l.constprop.0>

0001aa7e <_vsniprintf_r>:
   1aa7e:	b530      	push	{r4, r5, lr}
   1aa80:	4614      	mov	r4, r2
   1aa82:	b09b      	sub	sp, #108	; 0x6c
   1aa84:	4605      	mov	r5, r0
   1aa86:	461a      	mov	r2, r3
   1aa88:	2c00      	cmp	r4, #0
   1aa8a:	da05      	bge.n	1aa98 <_vsniprintf_r+0x1a>
   1aa8c:	238b      	movs	r3, #139	; 0x8b
   1aa8e:	6003      	str	r3, [r0, #0]
   1aa90:	f04f 30ff 	mov.w	r0, #4294967295
   1aa94:	b01b      	add	sp, #108	; 0x6c
   1aa96:	bd30      	pop	{r4, r5, pc}
   1aa98:	f44f 7302 	mov.w	r3, #520	; 0x208
   1aa9c:	9100      	str	r1, [sp, #0]
   1aa9e:	9104      	str	r1, [sp, #16]
   1aaa0:	4669      	mov	r1, sp
   1aaa2:	f8ad 300c 	strh.w	r3, [sp, #12]
   1aaa6:	bf14      	ite	ne
   1aaa8:	f104 33ff 	addne.w	r3, r4, #4294967295
   1aaac:	4623      	moveq	r3, r4
   1aaae:	9302      	str	r3, [sp, #8]
   1aab0:	9305      	str	r3, [sp, #20]
   1aab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1aab6:	f8ad 300e 	strh.w	r3, [sp, #14]
   1aaba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1aabc:	f7fb fefc 	bl	168b8 <_svfiprintf_r>
   1aac0:	1c43      	adds	r3, r0, #1
   1aac2:	bfbc      	itt	lt
   1aac4:	238b      	movlt	r3, #139	; 0x8b
   1aac6:	602b      	strlt	r3, [r5, #0]
   1aac8:	2c00      	cmp	r4, #0
   1aaca:	d0e3      	beq.n	1aa94 <_vsniprintf_r+0x16>
   1aacc:	9b00      	ldr	r3, [sp, #0]
   1aace:	2200      	movs	r2, #0
   1aad0:	701a      	strb	r2, [r3, #0]
   1aad2:	e7df      	b.n	1aa94 <_vsniprintf_r+0x16>

0001aad4 <quorem>:
   1aad4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aad8:	6903      	ldr	r3, [r0, #16]
   1aada:	4607      	mov	r7, r0
   1aadc:	690c      	ldr	r4, [r1, #16]
   1aade:	42a3      	cmp	r3, r4
   1aae0:	f2c0 8083 	blt.w	1abea <quorem+0x116>
   1aae4:	3c01      	subs	r4, #1
   1aae6:	f100 0514 	add.w	r5, r0, #20
   1aaea:	f101 0814 	add.w	r8, r1, #20
   1aaee:	00a3      	lsls	r3, r4, #2
   1aaf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   1aaf4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   1aaf8:	9300      	str	r3, [sp, #0]
   1aafa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   1aafe:	9301      	str	r3, [sp, #4]
   1ab00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   1ab04:	3301      	adds	r3, #1
   1ab06:	429a      	cmp	r2, r3
   1ab08:	fbb2 f6f3 	udiv	r6, r2, r3
   1ab0c:	d331      	bcc.n	1ab72 <quorem+0x9e>
   1ab0e:	f04f 0a00 	mov.w	sl, #0
   1ab12:	46c4      	mov	ip, r8
   1ab14:	46ae      	mov	lr, r5
   1ab16:	46d3      	mov	fp, sl
   1ab18:	f85c 3b04 	ldr.w	r3, [ip], #4
   1ab1c:	b298      	uxth	r0, r3
   1ab1e:	45e1      	cmp	r9, ip
   1ab20:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1ab24:	fb06 a000 	mla	r0, r6, r0, sl
   1ab28:	ea4f 4210 	mov.w	r2, r0, lsr #16
   1ab2c:	b280      	uxth	r0, r0
   1ab2e:	fb06 2303 	mla	r3, r6, r3, r2
   1ab32:	f8de 2000 	ldr.w	r2, [lr]
   1ab36:	b292      	uxth	r2, r2
   1ab38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   1ab3c:	eba2 0200 	sub.w	r2, r2, r0
   1ab40:	b29b      	uxth	r3, r3
   1ab42:	f8de 0000 	ldr.w	r0, [lr]
   1ab46:	445a      	add	r2, fp
   1ab48:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   1ab4c:	b292      	uxth	r2, r2
   1ab4e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   1ab52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   1ab56:	ea4f 4b23 	mov.w	fp, r3, asr #16
   1ab5a:	f84e 2b04 	str.w	r2, [lr], #4
   1ab5e:	d2db      	bcs.n	1ab18 <quorem+0x44>
   1ab60:	9b00      	ldr	r3, [sp, #0]
   1ab62:	58eb      	ldr	r3, [r5, r3]
   1ab64:	b92b      	cbnz	r3, 1ab72 <quorem+0x9e>
   1ab66:	9b01      	ldr	r3, [sp, #4]
   1ab68:	3b04      	subs	r3, #4
   1ab6a:	429d      	cmp	r5, r3
   1ab6c:	461a      	mov	r2, r3
   1ab6e:	d330      	bcc.n	1abd2 <quorem+0xfe>
   1ab70:	613c      	str	r4, [r7, #16]
   1ab72:	4638      	mov	r0, r7
   1ab74:	f000 f8bf 	bl	1acf6 <__mcmp>
   1ab78:	2800      	cmp	r0, #0
   1ab7a:	db26      	blt.n	1abca <quorem+0xf6>
   1ab7c:	4629      	mov	r1, r5
   1ab7e:	2000      	movs	r0, #0
   1ab80:	f858 2b04 	ldr.w	r2, [r8], #4
   1ab84:	f8d1 c000 	ldr.w	ip, [r1]
   1ab88:	fa1f fe82 	uxth.w	lr, r2
   1ab8c:	45c1      	cmp	r9, r8
   1ab8e:	fa1f f38c 	uxth.w	r3, ip
   1ab92:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1ab96:	eba3 030e 	sub.w	r3, r3, lr
   1ab9a:	4403      	add	r3, r0
   1ab9c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   1aba0:	b29b      	uxth	r3, r3
   1aba2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   1aba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1abaa:	ea4f 4022 	mov.w	r0, r2, asr #16
   1abae:	f841 3b04 	str.w	r3, [r1], #4
   1abb2:	d2e5      	bcs.n	1ab80 <quorem+0xac>
   1abb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   1abb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   1abbc:	b922      	cbnz	r2, 1abc8 <quorem+0xf4>
   1abbe:	3b04      	subs	r3, #4
   1abc0:	429d      	cmp	r5, r3
   1abc2:	461a      	mov	r2, r3
   1abc4:	d30b      	bcc.n	1abde <quorem+0x10a>
   1abc6:	613c      	str	r4, [r7, #16]
   1abc8:	3601      	adds	r6, #1
   1abca:	4630      	mov	r0, r6
   1abcc:	b003      	add	sp, #12
   1abce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abd2:	6812      	ldr	r2, [r2, #0]
   1abd4:	3b04      	subs	r3, #4
   1abd6:	2a00      	cmp	r2, #0
   1abd8:	d1ca      	bne.n	1ab70 <quorem+0x9c>
   1abda:	3c01      	subs	r4, #1
   1abdc:	e7c5      	b.n	1ab6a <quorem+0x96>
   1abde:	6812      	ldr	r2, [r2, #0]
   1abe0:	3b04      	subs	r3, #4
   1abe2:	2a00      	cmp	r2, #0
   1abe4:	d1ef      	bne.n	1abc6 <quorem+0xf2>
   1abe6:	3c01      	subs	r4, #1
   1abe8:	e7ea      	b.n	1abc0 <quorem+0xec>
   1abea:	2000      	movs	r0, #0
   1abec:	e7ee      	b.n	1abcc <quorem+0xf8>

0001abee <__sfmoreglue>:
   1abee:	b570      	push	{r4, r5, r6, lr}
   1abf0:	2368      	movs	r3, #104	; 0x68
   1abf2:	1e4d      	subs	r5, r1, #1
   1abf4:	460e      	mov	r6, r1
   1abf6:	435d      	muls	r5, r3
   1abf8:	f105 0174 	add.w	r1, r5, #116	; 0x74
   1abfc:	f7fa fc76 	bl	154ec <_malloc_r>
   1ac00:	4604      	mov	r4, r0
   1ac02:	b140      	cbz	r0, 1ac16 <__sfmoreglue+0x28>
   1ac04:	2100      	movs	r1, #0
   1ac06:	f105 0268 	add.w	r2, r5, #104	; 0x68
   1ac0a:	e9c0 1600 	strd	r1, r6, [r0]
   1ac0e:	300c      	adds	r0, #12
   1ac10:	60a0      	str	r0, [r4, #8]
   1ac12:	f7ff fd74 	bl	1a6fe <memset>
   1ac16:	4620      	mov	r0, r4
   1ac18:	bd70      	pop	{r4, r5, r6, pc}

0001ac1a <_fwalk_reent>:
   1ac1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ac1e:	4606      	mov	r6, r0
   1ac20:	4688      	mov	r8, r1
   1ac22:	f100 0448 	add.w	r4, r0, #72	; 0x48
   1ac26:	2700      	movs	r7, #0
   1ac28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   1ac2c:	f1b9 0901 	subs.w	r9, r9, #1
   1ac30:	d505      	bpl.n	1ac3e <_fwalk_reent+0x24>
   1ac32:	6824      	ldr	r4, [r4, #0]
   1ac34:	2c00      	cmp	r4, #0
   1ac36:	d1f7      	bne.n	1ac28 <_fwalk_reent+0xe>
   1ac38:	4638      	mov	r0, r7
   1ac3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ac3e:	89ab      	ldrh	r3, [r5, #12]
   1ac40:	2b01      	cmp	r3, #1
   1ac42:	d907      	bls.n	1ac54 <_fwalk_reent+0x3a>
   1ac44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   1ac48:	3301      	adds	r3, #1
   1ac4a:	d003      	beq.n	1ac54 <_fwalk_reent+0x3a>
   1ac4c:	4629      	mov	r1, r5
   1ac4e:	4630      	mov	r0, r6
   1ac50:	47c0      	blx	r8
   1ac52:	4307      	orrs	r7, r0
   1ac54:	3568      	adds	r5, #104	; 0x68
   1ac56:	e7e9      	b.n	1ac2c <_fwalk_reent+0x12>

0001ac58 <__hi0bits>:
   1ac58:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   1ac5c:	4603      	mov	r3, r0
   1ac5e:	bf36      	itet	cc
   1ac60:	0403      	lslcc	r3, r0, #16
   1ac62:	2000      	movcs	r0, #0
   1ac64:	2010      	movcc	r0, #16
   1ac66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1ac6a:	bf3c      	itt	cc
   1ac6c:	021b      	lslcc	r3, r3, #8
   1ac6e:	3008      	addcc	r0, #8
   1ac70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   1ac74:	bf3c      	itt	cc
   1ac76:	011b      	lslcc	r3, r3, #4
   1ac78:	3004      	addcc	r0, #4
   1ac7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   1ac7e:	d303      	bcc.n	1ac88 <__hi0bits+0x30>
   1ac80:	2b00      	cmp	r3, #0
   1ac82:	db0a      	blt.n	1ac9a <__hi0bits+0x42>
   1ac84:	3001      	adds	r0, #1
   1ac86:	4770      	bx	lr
   1ac88:	009b      	lsls	r3, r3, #2
   1ac8a:	d501      	bpl.n	1ac90 <__hi0bits+0x38>
   1ac8c:	3002      	adds	r0, #2
   1ac8e:	4770      	bx	lr
   1ac90:	005b      	lsls	r3, r3, #1
   1ac92:	d501      	bpl.n	1ac98 <__hi0bits+0x40>
   1ac94:	3003      	adds	r0, #3
   1ac96:	4770      	bx	lr
   1ac98:	2020      	movs	r0, #32
   1ac9a:	4770      	bx	lr

0001ac9c <__lo0bits>:
   1ac9c:	6803      	ldr	r3, [r0, #0]
   1ac9e:	4602      	mov	r2, r0
   1aca0:	f013 0007 	ands.w	r0, r3, #7
   1aca4:	d00b      	beq.n	1acbe <__lo0bits+0x22>
   1aca6:	07d9      	lsls	r1, r3, #31
   1aca8:	d421      	bmi.n	1acee <__lo0bits+0x52>
   1acaa:	0798      	lsls	r0, r3, #30
   1acac:	bf47      	ittee	mi
   1acae:	085b      	lsrmi	r3, r3, #1
   1acb0:	2001      	movmi	r0, #1
   1acb2:	089b      	lsrpl	r3, r3, #2
   1acb4:	2002      	movpl	r0, #2
   1acb6:	bf4c      	ite	mi
   1acb8:	6013      	strmi	r3, [r2, #0]
   1acba:	6013      	strpl	r3, [r2, #0]
   1acbc:	4770      	bx	lr
   1acbe:	b299      	uxth	r1, r3
   1acc0:	b909      	cbnz	r1, 1acc6 <__lo0bits+0x2a>
   1acc2:	0c1b      	lsrs	r3, r3, #16
   1acc4:	2010      	movs	r0, #16
   1acc6:	b2d9      	uxtb	r1, r3
   1acc8:	b909      	cbnz	r1, 1acce <__lo0bits+0x32>
   1acca:	3008      	adds	r0, #8
   1accc:	0a1b      	lsrs	r3, r3, #8
   1acce:	0719      	lsls	r1, r3, #28
   1acd0:	bf04      	itt	eq
   1acd2:	091b      	lsreq	r3, r3, #4
   1acd4:	3004      	addeq	r0, #4
   1acd6:	0799      	lsls	r1, r3, #30
   1acd8:	bf04      	itt	eq
   1acda:	089b      	lsreq	r3, r3, #2
   1acdc:	3002      	addeq	r0, #2
   1acde:	07d9      	lsls	r1, r3, #31
   1ace0:	d403      	bmi.n	1acea <__lo0bits+0x4e>
   1ace2:	085b      	lsrs	r3, r3, #1
   1ace4:	f100 0001 	add.w	r0, r0, #1
   1ace8:	d003      	beq.n	1acf2 <__lo0bits+0x56>
   1acea:	6013      	str	r3, [r2, #0]
   1acec:	4770      	bx	lr
   1acee:	2000      	movs	r0, #0
   1acf0:	4770      	bx	lr
   1acf2:	2020      	movs	r0, #32
   1acf4:	4770      	bx	lr

0001acf6 <__mcmp>:
   1acf6:	4603      	mov	r3, r0
   1acf8:	690a      	ldr	r2, [r1, #16]
   1acfa:	6900      	ldr	r0, [r0, #16]
   1acfc:	1a80      	subs	r0, r0, r2
   1acfe:	b530      	push	{r4, r5, lr}
   1ad00:	d10e      	bne.n	1ad20 <__mcmp+0x2a>
   1ad02:	3314      	adds	r3, #20
   1ad04:	3114      	adds	r1, #20
   1ad06:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   1ad0a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   1ad0e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   1ad12:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   1ad16:	4295      	cmp	r5, r2
   1ad18:	d003      	beq.n	1ad22 <__mcmp+0x2c>
   1ad1a:	d205      	bcs.n	1ad28 <__mcmp+0x32>
   1ad1c:	f04f 30ff 	mov.w	r0, #4294967295
   1ad20:	bd30      	pop	{r4, r5, pc}
   1ad22:	42a3      	cmp	r3, r4
   1ad24:	d3f3      	bcc.n	1ad0e <__mcmp+0x18>
   1ad26:	e7fb      	b.n	1ad20 <__mcmp+0x2a>
   1ad28:	2001      	movs	r0, #1
   1ad2a:	e7f9      	b.n	1ad20 <__mcmp+0x2a>

0001ad2c <_calloc_r>:
   1ad2c:	b538      	push	{r3, r4, r5, lr}
   1ad2e:	fb02 f501 	mul.w	r5, r2, r1
   1ad32:	4629      	mov	r1, r5
   1ad34:	f7fa fbda 	bl	154ec <_malloc_r>
   1ad38:	4604      	mov	r4, r0
   1ad3a:	b118      	cbz	r0, 1ad44 <_calloc_r+0x18>
   1ad3c:	462a      	mov	r2, r5
   1ad3e:	2100      	movs	r1, #0
   1ad40:	f7ff fcdd 	bl	1a6fe <memset>
   1ad44:	4620      	mov	r0, r4
   1ad46:	bd38      	pop	{r3, r4, r5, pc}

0001ad48 <__ssputs_r>:
   1ad48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ad4c:	461f      	mov	r7, r3
   1ad4e:	688e      	ldr	r6, [r1, #8]
   1ad50:	4682      	mov	sl, r0
   1ad52:	460c      	mov	r4, r1
   1ad54:	42be      	cmp	r6, r7
   1ad56:	4690      	mov	r8, r2
   1ad58:	680b      	ldr	r3, [r1, #0]
   1ad5a:	d82d      	bhi.n	1adb8 <__ssputs_r+0x70>
   1ad5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   1ad60:	f412 6f90 	tst.w	r2, #1152	; 0x480
   1ad64:	d026      	beq.n	1adb4 <__ssputs_r+0x6c>
   1ad66:	6965      	ldr	r5, [r4, #20]
   1ad68:	6909      	ldr	r1, [r1, #16]
   1ad6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1ad6e:	eba3 0901 	sub.w	r9, r3, r1
   1ad72:	1c7b      	adds	r3, r7, #1
   1ad74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1ad78:	444b      	add	r3, r9
   1ad7a:	106d      	asrs	r5, r5, #1
   1ad7c:	429d      	cmp	r5, r3
   1ad7e:	bf38      	it	cc
   1ad80:	461d      	movcc	r5, r3
   1ad82:	0553      	lsls	r3, r2, #21
   1ad84:	d527      	bpl.n	1add6 <__ssputs_r+0x8e>
   1ad86:	4629      	mov	r1, r5
   1ad88:	f7fa fbb0 	bl	154ec <_malloc_r>
   1ad8c:	4606      	mov	r6, r0
   1ad8e:	b360      	cbz	r0, 1adea <__ssputs_r+0xa2>
   1ad90:	464a      	mov	r2, r9
   1ad92:	6921      	ldr	r1, [r4, #16]
   1ad94:	f7ff fca6 	bl	1a6e4 <memcpy>
   1ad98:	89a3      	ldrh	r3, [r4, #12]
   1ad9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1ad9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1ada2:	81a3      	strh	r3, [r4, #12]
   1ada4:	6126      	str	r6, [r4, #16]
   1ada6:	444e      	add	r6, r9
   1ada8:	6165      	str	r5, [r4, #20]
   1adaa:	eba5 0509 	sub.w	r5, r5, r9
   1adae:	6026      	str	r6, [r4, #0]
   1adb0:	463e      	mov	r6, r7
   1adb2:	60a5      	str	r5, [r4, #8]
   1adb4:	42be      	cmp	r6, r7
   1adb6:	d900      	bls.n	1adba <__ssputs_r+0x72>
   1adb8:	463e      	mov	r6, r7
   1adba:	4632      	mov	r2, r6
   1adbc:	4641      	mov	r1, r8
   1adbe:	6820      	ldr	r0, [r4, #0]
   1adc0:	f000 f9c8 	bl	1b154 <memmove>
   1adc4:	68a3      	ldr	r3, [r4, #8]
   1adc6:	2000      	movs	r0, #0
   1adc8:	1b9b      	subs	r3, r3, r6
   1adca:	60a3      	str	r3, [r4, #8]
   1adcc:	6823      	ldr	r3, [r4, #0]
   1adce:	4433      	add	r3, r6
   1add0:	6023      	str	r3, [r4, #0]
   1add2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1add6:	462a      	mov	r2, r5
   1add8:	f000 f9d6 	bl	1b188 <_realloc_r>
   1addc:	4606      	mov	r6, r0
   1adde:	2800      	cmp	r0, #0
   1ade0:	d1e0      	bne.n	1ada4 <__ssputs_r+0x5c>
   1ade2:	6921      	ldr	r1, [r4, #16]
   1ade4:	4650      	mov	r0, sl
   1ade6:	f7fa fb37 	bl	15458 <_free_r>
   1adea:	230c      	movs	r3, #12
   1adec:	f04f 30ff 	mov.w	r0, #4294967295
   1adf0:	f8ca 3000 	str.w	r3, [sl]
   1adf4:	89a3      	ldrh	r3, [r4, #12]
   1adf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1adfa:	81a3      	strh	r3, [r4, #12]
   1adfc:	e7e9      	b.n	1add2 <__ssputs_r+0x8a>

0001adfe <_sungetc_r>:
   1adfe:	b538      	push	{r3, r4, r5, lr}
   1ae00:	1c4b      	adds	r3, r1, #1
   1ae02:	4614      	mov	r4, r2
   1ae04:	d103      	bne.n	1ae0e <_sungetc_r+0x10>
   1ae06:	f04f 35ff 	mov.w	r5, #4294967295
   1ae0a:	4628      	mov	r0, r5
   1ae0c:	bd38      	pop	{r3, r4, r5, pc}
   1ae0e:	8993      	ldrh	r3, [r2, #12]
   1ae10:	b2cd      	uxtb	r5, r1
   1ae12:	f023 0320 	bic.w	r3, r3, #32
   1ae16:	8193      	strh	r3, [r2, #12]
   1ae18:	6853      	ldr	r3, [r2, #4]
   1ae1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
   1ae1c:	b18a      	cbz	r2, 1ae42 <_sungetc_r+0x44>
   1ae1e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1ae20:	429a      	cmp	r2, r3
   1ae22:	dd08      	ble.n	1ae36 <_sungetc_r+0x38>
   1ae24:	6823      	ldr	r3, [r4, #0]
   1ae26:	1e5a      	subs	r2, r3, #1
   1ae28:	6022      	str	r2, [r4, #0]
   1ae2a:	f803 5c01 	strb.w	r5, [r3, #-1]
   1ae2e:	6863      	ldr	r3, [r4, #4]
   1ae30:	3301      	adds	r3, #1
   1ae32:	6063      	str	r3, [r4, #4]
   1ae34:	e7e9      	b.n	1ae0a <_sungetc_r+0xc>
   1ae36:	4621      	mov	r1, r4
   1ae38:	f000 f89b 	bl	1af72 <__submore>
   1ae3c:	2800      	cmp	r0, #0
   1ae3e:	d0f1      	beq.n	1ae24 <_sungetc_r+0x26>
   1ae40:	e7e1      	b.n	1ae06 <_sungetc_r+0x8>
   1ae42:	6921      	ldr	r1, [r4, #16]
   1ae44:	6822      	ldr	r2, [r4, #0]
   1ae46:	b141      	cbz	r1, 1ae5a <_sungetc_r+0x5c>
   1ae48:	4291      	cmp	r1, r2
   1ae4a:	d206      	bcs.n	1ae5a <_sungetc_r+0x5c>
   1ae4c:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   1ae50:	42a9      	cmp	r1, r5
   1ae52:	d102      	bne.n	1ae5a <_sungetc_r+0x5c>
   1ae54:	3a01      	subs	r2, #1
   1ae56:	6022      	str	r2, [r4, #0]
   1ae58:	e7ea      	b.n	1ae30 <_sungetc_r+0x32>
   1ae5a:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
   1ae5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1ae62:	6363      	str	r3, [r4, #52]	; 0x34
   1ae64:	2303      	movs	r3, #3
   1ae66:	63a3      	str	r3, [r4, #56]	; 0x38
   1ae68:	4623      	mov	r3, r4
   1ae6a:	f803 5f46 	strb.w	r5, [r3, #70]!
   1ae6e:	6023      	str	r3, [r4, #0]
   1ae70:	2301      	movs	r3, #1
   1ae72:	e7de      	b.n	1ae32 <_sungetc_r+0x34>

0001ae74 <__ssrefill_r>:
   1ae74:	b510      	push	{r4, lr}
   1ae76:	460c      	mov	r4, r1
   1ae78:	6b49      	ldr	r1, [r1, #52]	; 0x34
   1ae7a:	b169      	cbz	r1, 1ae98 <__ssrefill_r+0x24>
   1ae7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1ae80:	4299      	cmp	r1, r3
   1ae82:	d001      	beq.n	1ae88 <__ssrefill_r+0x14>
   1ae84:	f7fa fae8 	bl	15458 <_free_r>
   1ae88:	2000      	movs	r0, #0
   1ae8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1ae8c:	6360      	str	r0, [r4, #52]	; 0x34
   1ae8e:	6063      	str	r3, [r4, #4]
   1ae90:	b113      	cbz	r3, 1ae98 <__ssrefill_r+0x24>
   1ae92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1ae94:	6023      	str	r3, [r4, #0]
   1ae96:	bd10      	pop	{r4, pc}
   1ae98:	6923      	ldr	r3, [r4, #16]
   1ae9a:	f04f 30ff 	mov.w	r0, #4294967295
   1ae9e:	6023      	str	r3, [r4, #0]
   1aea0:	2300      	movs	r3, #0
   1aea2:	6063      	str	r3, [r4, #4]
   1aea4:	89a3      	ldrh	r3, [r4, #12]
   1aea6:	f043 0320 	orr.w	r3, r3, #32
   1aeaa:	81a3      	strh	r3, [r4, #12]
   1aeac:	e7f3      	b.n	1ae96 <__ssrefill_r+0x22>

0001aeae <__sfputc_r>:
   1aeae:	6893      	ldr	r3, [r2, #8]
   1aeb0:	3b01      	subs	r3, #1
   1aeb2:	2b00      	cmp	r3, #0
   1aeb4:	6093      	str	r3, [r2, #8]
   1aeb6:	b410      	push	{r4}
   1aeb8:	da08      	bge.n	1aecc <__sfputc_r+0x1e>
   1aeba:	6994      	ldr	r4, [r2, #24]
   1aebc:	42a3      	cmp	r3, r4
   1aebe:	db01      	blt.n	1aec4 <__sfputc_r+0x16>
   1aec0:	290a      	cmp	r1, #10
   1aec2:	d103      	bne.n	1aecc <__sfputc_r+0x1e>
   1aec4:	f85d 4b04 	ldr.w	r4, [sp], #4
   1aec8:	f7fc ba00 	b.w	172cc <__swbuf_r>
   1aecc:	6813      	ldr	r3, [r2, #0]
   1aece:	1c58      	adds	r0, r3, #1
   1aed0:	6010      	str	r0, [r2, #0]
   1aed2:	4608      	mov	r0, r1
   1aed4:	7019      	strb	r1, [r3, #0]
   1aed6:	f85d 4b04 	ldr.w	r4, [sp], #4
   1aeda:	4770      	bx	lr

0001aedc <__sfputs_r>:
   1aedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aede:	4606      	mov	r6, r0
   1aee0:	460f      	mov	r7, r1
   1aee2:	4614      	mov	r4, r2
   1aee4:	18d5      	adds	r5, r2, r3
   1aee6:	42ac      	cmp	r4, r5
   1aee8:	d101      	bne.n	1aeee <__sfputs_r+0x12>
   1aeea:	2000      	movs	r0, #0
   1aeec:	e007      	b.n	1aefe <__sfputs_r+0x22>
   1aeee:	463a      	mov	r2, r7
   1aef0:	f814 1b01 	ldrb.w	r1, [r4], #1
   1aef4:	4630      	mov	r0, r6
   1aef6:	f7ff ffda 	bl	1aeae <__sfputc_r>
   1aefa:	1c43      	adds	r3, r0, #1
   1aefc:	d1f3      	bne.n	1aee6 <__sfputs_r+0xa>
   1aefe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001af00 <__sccl>:
   1af00:	b570      	push	{r4, r5, r6, lr}
   1af02:	780b      	ldrb	r3, [r1, #0]
   1af04:	4604      	mov	r4, r0
   1af06:	3801      	subs	r0, #1
   1af08:	2b5e      	cmp	r3, #94	; 0x5e
   1af0a:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   1af0e:	bf13      	iteet	ne
   1af10:	1c4a      	addne	r2, r1, #1
   1af12:	1c8a      	addeq	r2, r1, #2
   1af14:	784b      	ldrbeq	r3, [r1, #1]
   1af16:	2100      	movne	r1, #0
   1af18:	bf08      	it	eq
   1af1a:	2101      	moveq	r1, #1
   1af1c:	f800 1f01 	strb.w	r1, [r0, #1]!
   1af20:	42a8      	cmp	r0, r5
   1af22:	d1fb      	bne.n	1af1c <__sccl+0x1c>
   1af24:	b90b      	cbnz	r3, 1af2a <__sccl+0x2a>
   1af26:	1e50      	subs	r0, r2, #1
   1af28:	bd70      	pop	{r4, r5, r6, pc}
   1af2a:	f081 0101 	eor.w	r1, r1, #1
   1af2e:	4610      	mov	r0, r2
   1af30:	54e1      	strb	r1, [r4, r3]
   1af32:	4602      	mov	r2, r0
   1af34:	f812 5b01 	ldrb.w	r5, [r2], #1
   1af38:	2d2d      	cmp	r5, #45	; 0x2d
   1af3a:	d005      	beq.n	1af48 <__sccl+0x48>
   1af3c:	2d5d      	cmp	r5, #93	; 0x5d
   1af3e:	d016      	beq.n	1af6e <__sccl+0x6e>
   1af40:	2d00      	cmp	r5, #0
   1af42:	d0f1      	beq.n	1af28 <__sccl+0x28>
   1af44:	462b      	mov	r3, r5
   1af46:	e7f2      	b.n	1af2e <__sccl+0x2e>
   1af48:	7846      	ldrb	r6, [r0, #1]
   1af4a:	2e5d      	cmp	r6, #93	; 0x5d
   1af4c:	d0fa      	beq.n	1af44 <__sccl+0x44>
   1af4e:	42b3      	cmp	r3, r6
   1af50:	dcf8      	bgt.n	1af44 <__sccl+0x44>
   1af52:	3002      	adds	r0, #2
   1af54:	461a      	mov	r2, r3
   1af56:	3201      	adds	r2, #1
   1af58:	4296      	cmp	r6, r2
   1af5a:	54a1      	strb	r1, [r4, r2]
   1af5c:	dcfb      	bgt.n	1af56 <__sccl+0x56>
   1af5e:	1af2      	subs	r2, r6, r3
   1af60:	1c5d      	adds	r5, r3, #1
   1af62:	3a01      	subs	r2, #1
   1af64:	42b3      	cmp	r3, r6
   1af66:	bfa8      	it	ge
   1af68:	2200      	movge	r2, #0
   1af6a:	18ab      	adds	r3, r5, r2
   1af6c:	e7e1      	b.n	1af32 <__sccl+0x32>
   1af6e:	4610      	mov	r0, r2
   1af70:	e7da      	b.n	1af28 <__sccl+0x28>

0001af72 <__submore>:
   1af72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af76:	460c      	mov	r4, r1
   1af78:	6b49      	ldr	r1, [r1, #52]	; 0x34
   1af7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1af7e:	4299      	cmp	r1, r3
   1af80:	d11a      	bne.n	1afb8 <__submore+0x46>
   1af82:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1af86:	f7fa fab1 	bl	154ec <_malloc_r>
   1af8a:	b918      	cbnz	r0, 1af94 <__submore+0x22>
   1af8c:	f04f 30ff 	mov.w	r0, #4294967295
   1af90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1af94:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1af98:	6360      	str	r0, [r4, #52]	; 0x34
   1af9a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   1af9e:	63a3      	str	r3, [r4, #56]	; 0x38
   1afa0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1afa4:	7083      	strb	r3, [r0, #2]
   1afa6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1afaa:	7043      	strb	r3, [r0, #1]
   1afac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1afb0:	7003      	strb	r3, [r0, #0]
   1afb2:	6020      	str	r0, [r4, #0]
   1afb4:	2000      	movs	r0, #0
   1afb6:	e7eb      	b.n	1af90 <__submore+0x1e>
   1afb8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   1afba:	0077      	lsls	r7, r6, #1
   1afbc:	463a      	mov	r2, r7
   1afbe:	f000 f8e3 	bl	1b188 <_realloc_r>
   1afc2:	4605      	mov	r5, r0
   1afc4:	2800      	cmp	r0, #0
   1afc6:	d0e1      	beq.n	1af8c <__submore+0x1a>
   1afc8:	eb00 0806 	add.w	r8, r0, r6
   1afcc:	4601      	mov	r1, r0
   1afce:	4632      	mov	r2, r6
   1afd0:	4640      	mov	r0, r8
   1afd2:	f7ff fb87 	bl	1a6e4 <memcpy>
   1afd6:	f8c4 8000 	str.w	r8, [r4]
   1afda:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   1afde:	e7e9      	b.n	1afb4 <__submore+0x42>

0001afe0 <__sflush_r>:
   1afe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   1afe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1afe8:	0717      	lsls	r7, r2, #28
   1afea:	4605      	mov	r5, r0
   1afec:	460c      	mov	r4, r1
   1afee:	d456      	bmi.n	1b09e <__sflush_r+0xbe>
   1aff0:	684b      	ldr	r3, [r1, #4]
   1aff2:	2b00      	cmp	r3, #0
   1aff4:	dc02      	bgt.n	1affc <__sflush_r+0x1c>
   1aff6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1aff8:	2b00      	cmp	r3, #0
   1affa:	dd3d      	ble.n	1b078 <__sflush_r+0x98>
   1affc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   1affe:	2e00      	cmp	r6, #0
   1b000:	d03a      	beq.n	1b078 <__sflush_r+0x98>
   1b002:	2300      	movs	r3, #0
   1b004:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   1b008:	682f      	ldr	r7, [r5, #0]
   1b00a:	6a21      	ldr	r1, [r4, #32]
   1b00c:	602b      	str	r3, [r5, #0]
   1b00e:	d025      	beq.n	1b05c <__sflush_r+0x7c>
   1b010:	6d62      	ldr	r2, [r4, #84]	; 0x54
   1b012:	89a3      	ldrh	r3, [r4, #12]
   1b014:	0758      	lsls	r0, r3, #29
   1b016:	d505      	bpl.n	1b024 <__sflush_r+0x44>
   1b018:	6863      	ldr	r3, [r4, #4]
   1b01a:	1ad2      	subs	r2, r2, r3
   1b01c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1b01e:	b10b      	cbz	r3, 1b024 <__sflush_r+0x44>
   1b020:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1b022:	1ad2      	subs	r2, r2, r3
   1b024:	6a21      	ldr	r1, [r4, #32]
   1b026:	2300      	movs	r3, #0
   1b028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   1b02a:	4628      	mov	r0, r5
   1b02c:	47b0      	blx	r6
   1b02e:	1c41      	adds	r1, r0, #1
   1b030:	d024      	beq.n	1b07c <__sflush_r+0x9c>
   1b032:	2300      	movs	r3, #0
   1b034:	6063      	str	r3, [r4, #4]
   1b036:	6923      	ldr	r3, [r4, #16]
   1b038:	6023      	str	r3, [r4, #0]
   1b03a:	89a3      	ldrh	r3, [r4, #12]
   1b03c:	04da      	lsls	r2, r3, #19
   1b03e:	d500      	bpl.n	1b042 <__sflush_r+0x62>
   1b040:	6560      	str	r0, [r4, #84]	; 0x54
   1b042:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1b044:	602f      	str	r7, [r5, #0]
   1b046:	b1b9      	cbz	r1, 1b078 <__sflush_r+0x98>
   1b048:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1b04c:	4299      	cmp	r1, r3
   1b04e:	d002      	beq.n	1b056 <__sflush_r+0x76>
   1b050:	4628      	mov	r0, r5
   1b052:	f7fa fa01 	bl	15458 <_free_r>
   1b056:	2300      	movs	r3, #0
   1b058:	6363      	str	r3, [r4, #52]	; 0x34
   1b05a:	e00d      	b.n	1b078 <__sflush_r+0x98>
   1b05c:	2301      	movs	r3, #1
   1b05e:	4628      	mov	r0, r5
   1b060:	47b0      	blx	r6
   1b062:	1c46      	adds	r6, r0, #1
   1b064:	4602      	mov	r2, r0
   1b066:	d1d4      	bne.n	1b012 <__sflush_r+0x32>
   1b068:	682b      	ldr	r3, [r5, #0]
   1b06a:	2b00      	cmp	r3, #0
   1b06c:	d0d1      	beq.n	1b012 <__sflush_r+0x32>
   1b06e:	2b1d      	cmp	r3, #29
   1b070:	d001      	beq.n	1b076 <__sflush_r+0x96>
   1b072:	2b16      	cmp	r3, #22
   1b074:	d12a      	bne.n	1b0cc <__sflush_r+0xec>
   1b076:	602f      	str	r7, [r5, #0]
   1b078:	2000      	movs	r0, #0
   1b07a:	e02e      	b.n	1b0da <__sflush_r+0xfa>
   1b07c:	682a      	ldr	r2, [r5, #0]
   1b07e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1b082:	b142      	cbz	r2, 1b096 <__sflush_r+0xb6>
   1b084:	2a1d      	cmp	r2, #29
   1b086:	d001      	beq.n	1b08c <__sflush_r+0xac>
   1b088:	2a16      	cmp	r2, #22
   1b08a:	d121      	bne.n	1b0d0 <__sflush_r+0xf0>
   1b08c:	2300      	movs	r3, #0
   1b08e:	6063      	str	r3, [r4, #4]
   1b090:	6923      	ldr	r3, [r4, #16]
   1b092:	6023      	str	r3, [r4, #0]
   1b094:	e7d5      	b.n	1b042 <__sflush_r+0x62>
   1b096:	6062      	str	r2, [r4, #4]
   1b098:	6922      	ldr	r2, [r4, #16]
   1b09a:	6022      	str	r2, [r4, #0]
   1b09c:	e7ce      	b.n	1b03c <__sflush_r+0x5c>
   1b09e:	690f      	ldr	r7, [r1, #16]
   1b0a0:	2f00      	cmp	r7, #0
   1b0a2:	d0e9      	beq.n	1b078 <__sflush_r+0x98>
   1b0a4:	0793      	lsls	r3, r2, #30
   1b0a6:	680e      	ldr	r6, [r1, #0]
   1b0a8:	600f      	str	r7, [r1, #0]
   1b0aa:	bf0c      	ite	eq
   1b0ac:	694b      	ldreq	r3, [r1, #20]
   1b0ae:	2300      	movne	r3, #0
   1b0b0:	eba6 0807 	sub.w	r8, r6, r7
   1b0b4:	608b      	str	r3, [r1, #8]
   1b0b6:	f1b8 0f00 	cmp.w	r8, #0
   1b0ba:	dddd      	ble.n	1b078 <__sflush_r+0x98>
   1b0bc:	4643      	mov	r3, r8
   1b0be:	463a      	mov	r2, r7
   1b0c0:	6a21      	ldr	r1, [r4, #32]
   1b0c2:	4628      	mov	r0, r5
   1b0c4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1b0c6:	47b0      	blx	r6
   1b0c8:	2800      	cmp	r0, #0
   1b0ca:	dc08      	bgt.n	1b0de <__sflush_r+0xfe>
   1b0cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1b0d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b0d4:	f04f 30ff 	mov.w	r0, #4294967295
   1b0d8:	81a3      	strh	r3, [r4, #12]
   1b0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b0de:	4407      	add	r7, r0
   1b0e0:	eba8 0800 	sub.w	r8, r8, r0
   1b0e4:	e7e7      	b.n	1b0b6 <__sflush_r+0xd6>

0001b0e6 <__swhatbuf_r>:
   1b0e6:	b570      	push	{r4, r5, r6, lr}
   1b0e8:	460c      	mov	r4, r1
   1b0ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1b0ee:	b096      	sub	sp, #88	; 0x58
   1b0f0:	4615      	mov	r5, r2
   1b0f2:	2900      	cmp	r1, #0
   1b0f4:	461e      	mov	r6, r3
   1b0f6:	da0c      	bge.n	1b112 <__swhatbuf_r+0x2c>
   1b0f8:	89a3      	ldrh	r3, [r4, #12]
   1b0fa:	2100      	movs	r1, #0
   1b0fc:	f013 0f80 	tst.w	r3, #128	; 0x80
   1b100:	bf14      	ite	ne
   1b102:	2340      	movne	r3, #64	; 0x40
   1b104:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   1b108:	2000      	movs	r0, #0
   1b10a:	6031      	str	r1, [r6, #0]
   1b10c:	602b      	str	r3, [r5, #0]
   1b10e:	b016      	add	sp, #88	; 0x58
   1b110:	bd70      	pop	{r4, r5, r6, pc}
   1b112:	466a      	mov	r2, sp
   1b114:	f7fc fa44 	bl	175a0 <_fstat_r>
   1b118:	2800      	cmp	r0, #0
   1b11a:	dbed      	blt.n	1b0f8 <__swhatbuf_r+0x12>
   1b11c:	9901      	ldr	r1, [sp, #4]
   1b11e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   1b122:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   1b126:	4259      	negs	r1, r3
   1b128:	4159      	adcs	r1, r3
   1b12a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1b12e:	e7eb      	b.n	1b108 <__swhatbuf_r+0x22>

0001b130 <__ascii_mbtowc>:
   1b130:	b082      	sub	sp, #8
   1b132:	b901      	cbnz	r1, 1b136 <__ascii_mbtowc+0x6>
   1b134:	a901      	add	r1, sp, #4
   1b136:	b142      	cbz	r2, 1b14a <__ascii_mbtowc+0x1a>
   1b138:	b14b      	cbz	r3, 1b14e <__ascii_mbtowc+0x1e>
   1b13a:	7813      	ldrb	r3, [r2, #0]
   1b13c:	600b      	str	r3, [r1, #0]
   1b13e:	7812      	ldrb	r2, [r2, #0]
   1b140:	1e10      	subs	r0, r2, #0
   1b142:	bf18      	it	ne
   1b144:	2001      	movne	r0, #1
   1b146:	b002      	add	sp, #8
   1b148:	4770      	bx	lr
   1b14a:	4610      	mov	r0, r2
   1b14c:	e7fb      	b.n	1b146 <__ascii_mbtowc+0x16>
   1b14e:	f06f 0001 	mvn.w	r0, #1
   1b152:	e7f8      	b.n	1b146 <__ascii_mbtowc+0x16>

0001b154 <memmove>:
   1b154:	4288      	cmp	r0, r1
   1b156:	b510      	push	{r4, lr}
   1b158:	eb01 0402 	add.w	r4, r1, r2
   1b15c:	d902      	bls.n	1b164 <memmove+0x10>
   1b15e:	4284      	cmp	r4, r0
   1b160:	4623      	mov	r3, r4
   1b162:	d807      	bhi.n	1b174 <memmove+0x20>
   1b164:	1e43      	subs	r3, r0, #1
   1b166:	42a1      	cmp	r1, r4
   1b168:	d008      	beq.n	1b17c <memmove+0x28>
   1b16a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1b16e:	f803 2f01 	strb.w	r2, [r3, #1]!
   1b172:	e7f8      	b.n	1b166 <memmove+0x12>
   1b174:	4402      	add	r2, r0
   1b176:	4601      	mov	r1, r0
   1b178:	428a      	cmp	r2, r1
   1b17a:	d100      	bne.n	1b17e <memmove+0x2a>
   1b17c:	bd10      	pop	{r4, pc}
   1b17e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1b182:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1b186:	e7f7      	b.n	1b178 <memmove+0x24>

0001b188 <_realloc_r>:
   1b188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b18a:	4607      	mov	r7, r0
   1b18c:	4615      	mov	r5, r2
   1b18e:	460c      	mov	r4, r1
   1b190:	b921      	cbnz	r1, 1b19c <_realloc_r+0x14>
   1b192:	4611      	mov	r1, r2
   1b194:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b198:	f7fa b9a8 	b.w	154ec <_malloc_r>
   1b19c:	b922      	cbnz	r2, 1b1a8 <_realloc_r+0x20>
   1b19e:	f7fa f95b 	bl	15458 <_free_r>
   1b1a2:	2400      	movs	r4, #0
   1b1a4:	4620      	mov	r0, r4
   1b1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b1a8:	f000 f827 	bl	1b1fa <_malloc_usable_size_r>
   1b1ac:	42a8      	cmp	r0, r5
   1b1ae:	d2f9      	bcs.n	1b1a4 <_realloc_r+0x1c>
   1b1b0:	4629      	mov	r1, r5
   1b1b2:	4638      	mov	r0, r7
   1b1b4:	f7fa f99a 	bl	154ec <_malloc_r>
   1b1b8:	4606      	mov	r6, r0
   1b1ba:	2800      	cmp	r0, #0
   1b1bc:	d0f1      	beq.n	1b1a2 <_realloc_r+0x1a>
   1b1be:	4621      	mov	r1, r4
   1b1c0:	462a      	mov	r2, r5
   1b1c2:	f7ff fa8f 	bl	1a6e4 <memcpy>
   1b1c6:	4621      	mov	r1, r4
   1b1c8:	4638      	mov	r0, r7
   1b1ca:	4634      	mov	r4, r6
   1b1cc:	f7fa f944 	bl	15458 <_free_r>
   1b1d0:	e7e8      	b.n	1b1a4 <_realloc_r+0x1c>

0001b1d2 <__ascii_wctomb>:
   1b1d2:	4603      	mov	r3, r0
   1b1d4:	4608      	mov	r0, r1
   1b1d6:	b141      	cbz	r1, 1b1ea <__ascii_wctomb+0x18>
   1b1d8:	2aff      	cmp	r2, #255	; 0xff
   1b1da:	d904      	bls.n	1b1e6 <__ascii_wctomb+0x14>
   1b1dc:	228a      	movs	r2, #138	; 0x8a
   1b1de:	f04f 30ff 	mov.w	r0, #4294967295
   1b1e2:	601a      	str	r2, [r3, #0]
   1b1e4:	4770      	bx	lr
   1b1e6:	2001      	movs	r0, #1
   1b1e8:	700a      	strb	r2, [r1, #0]
   1b1ea:	4770      	bx	lr

0001b1ec <abort>:
   1b1ec:	2006      	movs	r0, #6
   1b1ee:	b508      	push	{r3, lr}
   1b1f0:	f7fc f9f8 	bl	175e4 <raise>
   1b1f4:	2001      	movs	r0, #1
   1b1f6:	f7f1 ffa3 	bl	d140 <_exit>

0001b1fa <_malloc_usable_size_r>:
   1b1fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1b1fe:	1f18      	subs	r0, r3, #4
   1b200:	2b00      	cmp	r3, #0
   1b202:	bfbc      	itt	lt
   1b204:	580b      	ldrlt	r3, [r1, r0]
   1b206:	18c0      	addlt	r0, r0, r3
   1b208:	4770      	bx	lr

0001b20a <_raise_r>:
   1b20a:	291f      	cmp	r1, #31
   1b20c:	b538      	push	{r3, r4, r5, lr}
   1b20e:	4605      	mov	r5, r0
   1b210:	460c      	mov	r4, r1
   1b212:	d904      	bls.n	1b21e <_raise_r+0x14>
   1b214:	2316      	movs	r3, #22
   1b216:	6003      	str	r3, [r0, #0]
   1b218:	f04f 30ff 	mov.w	r0, #4294967295
   1b21c:	bd38      	pop	{r3, r4, r5, pc}
   1b21e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1b220:	b112      	cbz	r2, 1b228 <_raise_r+0x1e>
   1b222:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1b226:	b94b      	cbnz	r3, 1b23c <_raise_r+0x32>
   1b228:	4628      	mov	r0, r5
   1b22a:	f000 f816 	bl	1b25a <_getpid_r>
   1b22e:	4622      	mov	r2, r4
   1b230:	4601      	mov	r1, r0
   1b232:	4628      	mov	r0, r5
   1b234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b238:	f7fc b9dc 	b.w	175f4 <_kill_r>
   1b23c:	2b01      	cmp	r3, #1
   1b23e:	d00a      	beq.n	1b256 <_raise_r+0x4c>
   1b240:	1c59      	adds	r1, r3, #1
   1b242:	d103      	bne.n	1b24c <_raise_r+0x42>
   1b244:	2316      	movs	r3, #22
   1b246:	6003      	str	r3, [r0, #0]
   1b248:	2001      	movs	r0, #1
   1b24a:	e7e7      	b.n	1b21c <_raise_r+0x12>
   1b24c:	2100      	movs	r1, #0
   1b24e:	4620      	mov	r0, r4
   1b250:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   1b254:	4798      	blx	r3
   1b256:	2000      	movs	r0, #0
   1b258:	e7e0      	b.n	1b21c <_raise_r+0x12>

0001b25a <_getpid_r>:
   1b25a:	f7fc beb2 	b.w	17fc2 <_getpid>
	...
