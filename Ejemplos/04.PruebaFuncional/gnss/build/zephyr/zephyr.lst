
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	18 3d 01 20 2d e2 00 00 43 eb 01 00 01 e2 00 00     .=. -...C.......
    8010:	01 e2 00 00 01 e2 00 00 01 e2 00 00 01 e2 00 00     ................
	...
    802c:	49 db 00 00 01 e2 00 00 00 00 00 00 b5 da 00 00     I...............
    803c:	01 e2 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	ed db 00 00 ed db 00 00 ed db 00 00 ed db 00 00     ................
    8050:	ed db 00 00 ed db 00 00 ed db 00 00 ed db 00 00     ................
    8060:	ed db 00 00 ed db 00 00 ed db 00 00 ed db 00 00     ................
    8070:	ed db 00 00 ed db 00 00 ed db 00 00 ed db 00 00     ................
    8080:	ed db 00 00 ed db 00 00 ed db 00 00 ed db 00 00     ................
    8090:	ed db 00 00 ed db 00 00 ed db 00 00 ed db 00 00     ................
    80a0:	ed db 00 00 ed db 00 00 ed db 00 00 ed db 00 00     ................
    80b0:	ed db 00 00 ed db 00 00 ed db 00 00 ed db 00 00     ................
    80c0:	ed db 00 00 ed db 00 00 ed db 00 00 ed db 00 00     ................
    80d0:	ed db 00 00 ed db 00 00 ed db 00 00 ed db 00 00     ................
    80e0:	ed db 00 00 ed db 00 00 ed db 00 00 ed db 00 00     ................
    80f0:	ed db 00 00 ed db 00 00 ed db 00 00 ed db 00 00     ................
    8100:	ed db 00 00 ed db 00 00 ed db 00 00 ed db 00 00     ................
    8110:	ed db 00 00 ed db 00 00 ed db 00 00 ed db 00 00     ................
    8120:	ed db 00 00 ed db 00 00 ed db 00 00 ed db 00 00     ................
    8130:	ed db 00 00 ed db 00 00 ed db 00 00 ed db 00 00     ................
    8140:	ed db 00 00                                         ....

Disassembly of section text:

00008148 <__aeabi_drsub>:
    8148:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    814c:	e002      	b.n	8154 <__adddf3>
    814e:	bf00      	nop

00008150 <__aeabi_dsub>:
    8150:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008154 <__adddf3>:
    8154:	b530      	push	{r4, r5, lr}
    8156:	ea4f 0441 	mov.w	r4, r1, lsl #1
    815a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    815e:	ea94 0f05 	teq	r4, r5
    8162:	bf08      	it	eq
    8164:	ea90 0f02 	teqeq	r0, r2
    8168:	bf1f      	itttt	ne
    816a:	ea54 0c00 	orrsne.w	ip, r4, r0
    816e:	ea55 0c02 	orrsne.w	ip, r5, r2
    8172:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8176:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    817a:	f000 80e2 	beq.w	8342 <__adddf3+0x1ee>
    817e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8182:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8186:	bfb8      	it	lt
    8188:	426d      	neglt	r5, r5
    818a:	dd0c      	ble.n	81a6 <__adddf3+0x52>
    818c:	442c      	add	r4, r5
    818e:	ea80 0202 	eor.w	r2, r0, r2
    8192:	ea81 0303 	eor.w	r3, r1, r3
    8196:	ea82 0000 	eor.w	r0, r2, r0
    819a:	ea83 0101 	eor.w	r1, r3, r1
    819e:	ea80 0202 	eor.w	r2, r0, r2
    81a2:	ea81 0303 	eor.w	r3, r1, r3
    81a6:	2d36      	cmp	r5, #54	; 0x36
    81a8:	bf88      	it	hi
    81aa:	bd30      	pophi	{r4, r5, pc}
    81ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    81b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    81b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    81b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    81bc:	d002      	beq.n	81c4 <__adddf3+0x70>
    81be:	4240      	negs	r0, r0
    81c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    81c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    81c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    81cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    81d0:	d002      	beq.n	81d8 <__adddf3+0x84>
    81d2:	4252      	negs	r2, r2
    81d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    81d8:	ea94 0f05 	teq	r4, r5
    81dc:	f000 80a7 	beq.w	832e <__adddf3+0x1da>
    81e0:	f1a4 0401 	sub.w	r4, r4, #1
    81e4:	f1d5 0e20 	rsbs	lr, r5, #32
    81e8:	db0d      	blt.n	8206 <__adddf3+0xb2>
    81ea:	fa02 fc0e 	lsl.w	ip, r2, lr
    81ee:	fa22 f205 	lsr.w	r2, r2, r5
    81f2:	1880      	adds	r0, r0, r2
    81f4:	f141 0100 	adc.w	r1, r1, #0
    81f8:	fa03 f20e 	lsl.w	r2, r3, lr
    81fc:	1880      	adds	r0, r0, r2
    81fe:	fa43 f305 	asr.w	r3, r3, r5
    8202:	4159      	adcs	r1, r3
    8204:	e00e      	b.n	8224 <__adddf3+0xd0>
    8206:	f1a5 0520 	sub.w	r5, r5, #32
    820a:	f10e 0e20 	add.w	lr, lr, #32
    820e:	2a01      	cmp	r2, #1
    8210:	fa03 fc0e 	lsl.w	ip, r3, lr
    8214:	bf28      	it	cs
    8216:	f04c 0c02 	orrcs.w	ip, ip, #2
    821a:	fa43 f305 	asr.w	r3, r3, r5
    821e:	18c0      	adds	r0, r0, r3
    8220:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8224:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8228:	d507      	bpl.n	823a <__adddf3+0xe6>
    822a:	f04f 0e00 	mov.w	lr, #0
    822e:	f1dc 0c00 	rsbs	ip, ip, #0
    8232:	eb7e 0000 	sbcs.w	r0, lr, r0
    8236:	eb6e 0101 	sbc.w	r1, lr, r1
    823a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    823e:	d31b      	bcc.n	8278 <__adddf3+0x124>
    8240:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    8244:	d30c      	bcc.n	8260 <__adddf3+0x10c>
    8246:	0849      	lsrs	r1, r1, #1
    8248:	ea5f 0030 	movs.w	r0, r0, rrx
    824c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8250:	f104 0401 	add.w	r4, r4, #1
    8254:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8258:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    825c:	f080 809a 	bcs.w	8394 <__adddf3+0x240>
    8260:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8264:	bf08      	it	eq
    8266:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    826a:	f150 0000 	adcs.w	r0, r0, #0
    826e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8272:	ea41 0105 	orr.w	r1, r1, r5
    8276:	bd30      	pop	{r4, r5, pc}
    8278:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    827c:	4140      	adcs	r0, r0
    827e:	eb41 0101 	adc.w	r1, r1, r1
    8282:	3c01      	subs	r4, #1
    8284:	bf28      	it	cs
    8286:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    828a:	d2e9      	bcs.n	8260 <__adddf3+0x10c>
    828c:	f091 0f00 	teq	r1, #0
    8290:	bf04      	itt	eq
    8292:	4601      	moveq	r1, r0
    8294:	2000      	moveq	r0, #0
    8296:	fab1 f381 	clz	r3, r1
    829a:	bf08      	it	eq
    829c:	3320      	addeq	r3, #32
    829e:	f1a3 030b 	sub.w	r3, r3, #11
    82a2:	f1b3 0220 	subs.w	r2, r3, #32
    82a6:	da0c      	bge.n	82c2 <__adddf3+0x16e>
    82a8:	320c      	adds	r2, #12
    82aa:	dd08      	ble.n	82be <__adddf3+0x16a>
    82ac:	f102 0c14 	add.w	ip, r2, #20
    82b0:	f1c2 020c 	rsb	r2, r2, #12
    82b4:	fa01 f00c 	lsl.w	r0, r1, ip
    82b8:	fa21 f102 	lsr.w	r1, r1, r2
    82bc:	e00c      	b.n	82d8 <__adddf3+0x184>
    82be:	f102 0214 	add.w	r2, r2, #20
    82c2:	bfd8      	it	le
    82c4:	f1c2 0c20 	rsble	ip, r2, #32
    82c8:	fa01 f102 	lsl.w	r1, r1, r2
    82cc:	fa20 fc0c 	lsr.w	ip, r0, ip
    82d0:	bfdc      	itt	le
    82d2:	ea41 010c 	orrle.w	r1, r1, ip
    82d6:	4090      	lslle	r0, r2
    82d8:	1ae4      	subs	r4, r4, r3
    82da:	bfa2      	ittt	ge
    82dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    82e0:	4329      	orrge	r1, r5
    82e2:	bd30      	popge	{r4, r5, pc}
    82e4:	ea6f 0404 	mvn.w	r4, r4
    82e8:	3c1f      	subs	r4, #31
    82ea:	da1c      	bge.n	8326 <__adddf3+0x1d2>
    82ec:	340c      	adds	r4, #12
    82ee:	dc0e      	bgt.n	830e <__adddf3+0x1ba>
    82f0:	f104 0414 	add.w	r4, r4, #20
    82f4:	f1c4 0220 	rsb	r2, r4, #32
    82f8:	fa20 f004 	lsr.w	r0, r0, r4
    82fc:	fa01 f302 	lsl.w	r3, r1, r2
    8300:	ea40 0003 	orr.w	r0, r0, r3
    8304:	fa21 f304 	lsr.w	r3, r1, r4
    8308:	ea45 0103 	orr.w	r1, r5, r3
    830c:	bd30      	pop	{r4, r5, pc}
    830e:	f1c4 040c 	rsb	r4, r4, #12
    8312:	f1c4 0220 	rsb	r2, r4, #32
    8316:	fa20 f002 	lsr.w	r0, r0, r2
    831a:	fa01 f304 	lsl.w	r3, r1, r4
    831e:	ea40 0003 	orr.w	r0, r0, r3
    8322:	4629      	mov	r1, r5
    8324:	bd30      	pop	{r4, r5, pc}
    8326:	fa21 f004 	lsr.w	r0, r1, r4
    832a:	4629      	mov	r1, r5
    832c:	bd30      	pop	{r4, r5, pc}
    832e:	f094 0f00 	teq	r4, #0
    8332:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8336:	bf06      	itte	eq
    8338:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    833c:	3401      	addeq	r4, #1
    833e:	3d01      	subne	r5, #1
    8340:	e74e      	b.n	81e0 <__adddf3+0x8c>
    8342:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8346:	bf18      	it	ne
    8348:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    834c:	d029      	beq.n	83a2 <__adddf3+0x24e>
    834e:	ea94 0f05 	teq	r4, r5
    8352:	bf08      	it	eq
    8354:	ea90 0f02 	teqeq	r0, r2
    8358:	d005      	beq.n	8366 <__adddf3+0x212>
    835a:	ea54 0c00 	orrs.w	ip, r4, r0
    835e:	bf04      	itt	eq
    8360:	4619      	moveq	r1, r3
    8362:	4610      	moveq	r0, r2
    8364:	bd30      	pop	{r4, r5, pc}
    8366:	ea91 0f03 	teq	r1, r3
    836a:	bf1e      	ittt	ne
    836c:	2100      	movne	r1, #0
    836e:	2000      	movne	r0, #0
    8370:	bd30      	popne	{r4, r5, pc}
    8372:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8376:	d105      	bne.n	8384 <__adddf3+0x230>
    8378:	0040      	lsls	r0, r0, #1
    837a:	4149      	adcs	r1, r1
    837c:	bf28      	it	cs
    837e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8382:	bd30      	pop	{r4, r5, pc}
    8384:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8388:	bf3c      	itt	cc
    838a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    838e:	bd30      	popcc	{r4, r5, pc}
    8390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8394:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    8398:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    839c:	f04f 0000 	mov.w	r0, #0
    83a0:	bd30      	pop	{r4, r5, pc}
    83a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    83a6:	bf1a      	itte	ne
    83a8:	4619      	movne	r1, r3
    83aa:	4610      	movne	r0, r2
    83ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    83b0:	bf1c      	itt	ne
    83b2:	460b      	movne	r3, r1
    83b4:	4602      	movne	r2, r0
    83b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    83ba:	bf06      	itte	eq
    83bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    83c0:	ea91 0f03 	teqeq	r1, r3
    83c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    83c8:	bd30      	pop	{r4, r5, pc}
    83ca:	bf00      	nop

000083cc <__aeabi_ui2d>:
    83cc:	f090 0f00 	teq	r0, #0
    83d0:	bf04      	itt	eq
    83d2:	2100      	moveq	r1, #0
    83d4:	4770      	bxeq	lr
    83d6:	b530      	push	{r4, r5, lr}
    83d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
    83e0:	f04f 0500 	mov.w	r5, #0
    83e4:	f04f 0100 	mov.w	r1, #0
    83e8:	e750      	b.n	828c <__adddf3+0x138>
    83ea:	bf00      	nop

000083ec <__aeabi_i2d>:
    83ec:	f090 0f00 	teq	r0, #0
    83f0:	bf04      	itt	eq
    83f2:	2100      	moveq	r1, #0
    83f4:	4770      	bxeq	lr
    83f6:	b530      	push	{r4, r5, lr}
    83f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8400:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8404:	bf48      	it	mi
    8406:	4240      	negmi	r0, r0
    8408:	f04f 0100 	mov.w	r1, #0
    840c:	e73e      	b.n	828c <__adddf3+0x138>
    840e:	bf00      	nop

00008410 <__aeabi_f2d>:
    8410:	0042      	lsls	r2, r0, #1
    8412:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8416:	ea4f 0131 	mov.w	r1, r1, rrx
    841a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    841e:	bf1f      	itttt	ne
    8420:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8424:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8428:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    842c:	4770      	bxne	lr
    842e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8432:	bf08      	it	eq
    8434:	4770      	bxeq	lr
    8436:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    843a:	bf04      	itt	eq
    843c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8440:	4770      	bxeq	lr
    8442:	b530      	push	{r4, r5, lr}
    8444:	f44f 7460 	mov.w	r4, #896	; 0x380
    8448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    844c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8450:	e71c      	b.n	828c <__adddf3+0x138>
    8452:	bf00      	nop

00008454 <__aeabi_ul2d>:
    8454:	ea50 0201 	orrs.w	r2, r0, r1
    8458:	bf08      	it	eq
    845a:	4770      	bxeq	lr
    845c:	b530      	push	{r4, r5, lr}
    845e:	f04f 0500 	mov.w	r5, #0
    8462:	e00a      	b.n	847a <__aeabi_l2d+0x16>

00008464 <__aeabi_l2d>:
    8464:	ea50 0201 	orrs.w	r2, r0, r1
    8468:	bf08      	it	eq
    846a:	4770      	bxeq	lr
    846c:	b530      	push	{r4, r5, lr}
    846e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    8472:	d502      	bpl.n	847a <__aeabi_l2d+0x16>
    8474:	4240      	negs	r0, r0
    8476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    847a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    847e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8486:	f43f aed8 	beq.w	823a <__adddf3+0xe6>
    848a:	f04f 0203 	mov.w	r2, #3
    848e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    8492:	bf18      	it	ne
    8494:	3203      	addne	r2, #3
    8496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    849a:	bf18      	it	ne
    849c:	3203      	addne	r2, #3
    849e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    84a2:	f1c2 0320 	rsb	r3, r2, #32
    84a6:	fa00 fc03 	lsl.w	ip, r0, r3
    84aa:	fa20 f002 	lsr.w	r0, r0, r2
    84ae:	fa01 fe03 	lsl.w	lr, r1, r3
    84b2:	ea40 000e 	orr.w	r0, r0, lr
    84b6:	fa21 f102 	lsr.w	r1, r1, r2
    84ba:	4414      	add	r4, r2
    84bc:	e6bd      	b.n	823a <__adddf3+0xe6>
    84be:	bf00      	nop

000084c0 <__aeabi_dmul>:
    84c0:	b570      	push	{r4, r5, r6, lr}
    84c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    84c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    84ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    84ce:	bf1d      	ittte	ne
    84d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    84d4:	ea94 0f0c 	teqne	r4, ip
    84d8:	ea95 0f0c 	teqne	r5, ip
    84dc:	f000 f8de 	bleq	869c <__aeabi_dmul+0x1dc>
    84e0:	442c      	add	r4, r5
    84e2:	ea81 0603 	eor.w	r6, r1, r3
    84e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    84ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    84ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    84f2:	bf18      	it	ne
    84f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    84f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    84fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8500:	d038      	beq.n	8574 <__aeabi_dmul+0xb4>
    8502:	fba0 ce02 	umull	ip, lr, r0, r2
    8506:	f04f 0500 	mov.w	r5, #0
    850a:	fbe1 e502 	umlal	lr, r5, r1, r2
    850e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8512:	fbe0 e503 	umlal	lr, r5, r0, r3
    8516:	f04f 0600 	mov.w	r6, #0
    851a:	fbe1 5603 	umlal	r5, r6, r1, r3
    851e:	f09c 0f00 	teq	ip, #0
    8522:	bf18      	it	ne
    8524:	f04e 0e01 	orrne.w	lr, lr, #1
    8528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    852c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8534:	d204      	bcs.n	8540 <__aeabi_dmul+0x80>
    8536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    853a:	416d      	adcs	r5, r5
    853c:	eb46 0606 	adc.w	r6, r6, r6
    8540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    8544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    854c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    8554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8558:	bf88      	it	hi
    855a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    855e:	d81e      	bhi.n	859e <__aeabi_dmul+0xde>
    8560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    8564:	bf08      	it	eq
    8566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    856a:	f150 0000 	adcs.w	r0, r0, #0
    856e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8572:	bd70      	pop	{r4, r5, r6, pc}
    8574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8578:	ea46 0101 	orr.w	r1, r6, r1
    857c:	ea40 0002 	orr.w	r0, r0, r2
    8580:	ea81 0103 	eor.w	r1, r1, r3
    8584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8588:	bfc2      	ittt	gt
    858a:	ebd4 050c 	rsbsgt	r5, r4, ip
    858e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    8592:	bd70      	popgt	{r4, r5, r6, pc}
    8594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8598:	f04f 0e00 	mov.w	lr, #0
    859c:	3c01      	subs	r4, #1
    859e:	f300 80ab 	bgt.w	86f8 <__aeabi_dmul+0x238>
    85a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    85a6:	bfde      	ittt	le
    85a8:	2000      	movle	r0, #0
    85aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    85ae:	bd70      	pople	{r4, r5, r6, pc}
    85b0:	f1c4 0400 	rsb	r4, r4, #0
    85b4:	3c20      	subs	r4, #32
    85b6:	da35      	bge.n	8624 <__aeabi_dmul+0x164>
    85b8:	340c      	adds	r4, #12
    85ba:	dc1b      	bgt.n	85f4 <__aeabi_dmul+0x134>
    85bc:	f104 0414 	add.w	r4, r4, #20
    85c0:	f1c4 0520 	rsb	r5, r4, #32
    85c4:	fa00 f305 	lsl.w	r3, r0, r5
    85c8:	fa20 f004 	lsr.w	r0, r0, r4
    85cc:	fa01 f205 	lsl.w	r2, r1, r5
    85d0:	ea40 0002 	orr.w	r0, r0, r2
    85d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    85d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    85e0:	fa21 f604 	lsr.w	r6, r1, r4
    85e4:	eb42 0106 	adc.w	r1, r2, r6
    85e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    85ec:	bf08      	it	eq
    85ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    85f2:	bd70      	pop	{r4, r5, r6, pc}
    85f4:	f1c4 040c 	rsb	r4, r4, #12
    85f8:	f1c4 0520 	rsb	r5, r4, #32
    85fc:	fa00 f304 	lsl.w	r3, r0, r4
    8600:	fa20 f005 	lsr.w	r0, r0, r5
    8604:	fa01 f204 	lsl.w	r2, r1, r4
    8608:	ea40 0002 	orr.w	r0, r0, r2
    860c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8614:	f141 0100 	adc.w	r1, r1, #0
    8618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    861c:	bf08      	it	eq
    861e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8622:	bd70      	pop	{r4, r5, r6, pc}
    8624:	f1c4 0520 	rsb	r5, r4, #32
    8628:	fa00 f205 	lsl.w	r2, r0, r5
    862c:	ea4e 0e02 	orr.w	lr, lr, r2
    8630:	fa20 f304 	lsr.w	r3, r0, r4
    8634:	fa01 f205 	lsl.w	r2, r1, r5
    8638:	ea43 0302 	orr.w	r3, r3, r2
    863c:	fa21 f004 	lsr.w	r0, r1, r4
    8640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8644:	fa21 f204 	lsr.w	r2, r1, r4
    8648:	ea20 0002 	bic.w	r0, r0, r2
    864c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8654:	bf08      	it	eq
    8656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    865a:	bd70      	pop	{r4, r5, r6, pc}
    865c:	f094 0f00 	teq	r4, #0
    8660:	d10f      	bne.n	8682 <__aeabi_dmul+0x1c2>
    8662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    8666:	0040      	lsls	r0, r0, #1
    8668:	eb41 0101 	adc.w	r1, r1, r1
    866c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8670:	bf08      	it	eq
    8672:	3c01      	subeq	r4, #1
    8674:	d0f7      	beq.n	8666 <__aeabi_dmul+0x1a6>
    8676:	ea41 0106 	orr.w	r1, r1, r6
    867a:	f095 0f00 	teq	r5, #0
    867e:	bf18      	it	ne
    8680:	4770      	bxne	lr
    8682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    8686:	0052      	lsls	r2, r2, #1
    8688:	eb43 0303 	adc.w	r3, r3, r3
    868c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    8690:	bf08      	it	eq
    8692:	3d01      	subeq	r5, #1
    8694:	d0f7      	beq.n	8686 <__aeabi_dmul+0x1c6>
    8696:	ea43 0306 	orr.w	r3, r3, r6
    869a:	4770      	bx	lr
    869c:	ea94 0f0c 	teq	r4, ip
    86a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    86a4:	bf18      	it	ne
    86a6:	ea95 0f0c 	teqne	r5, ip
    86aa:	d00c      	beq.n	86c6 <__aeabi_dmul+0x206>
    86ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86b0:	bf18      	it	ne
    86b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86b6:	d1d1      	bne.n	865c <__aeabi_dmul+0x19c>
    86b8:	ea81 0103 	eor.w	r1, r1, r3
    86bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86c0:	f04f 0000 	mov.w	r0, #0
    86c4:	bd70      	pop	{r4, r5, r6, pc}
    86c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86ca:	bf06      	itte	eq
    86cc:	4610      	moveq	r0, r2
    86ce:	4619      	moveq	r1, r3
    86d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86d4:	d019      	beq.n	870a <__aeabi_dmul+0x24a>
    86d6:	ea94 0f0c 	teq	r4, ip
    86da:	d102      	bne.n	86e2 <__aeabi_dmul+0x222>
    86dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    86e0:	d113      	bne.n	870a <__aeabi_dmul+0x24a>
    86e2:	ea95 0f0c 	teq	r5, ip
    86e6:	d105      	bne.n	86f4 <__aeabi_dmul+0x234>
    86e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    86ec:	bf1c      	itt	ne
    86ee:	4610      	movne	r0, r2
    86f0:	4619      	movne	r1, r3
    86f2:	d10a      	bne.n	870a <__aeabi_dmul+0x24a>
    86f4:	ea81 0103 	eor.w	r1, r1, r3
    86f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8704:	f04f 0000 	mov.w	r0, #0
    8708:	bd70      	pop	{r4, r5, r6, pc}
    870a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    870e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8712:	bd70      	pop	{r4, r5, r6, pc}

00008714 <__aeabi_ddiv>:
    8714:	b570      	push	{r4, r5, r6, lr}
    8716:	f04f 0cff 	mov.w	ip, #255	; 0xff
    871a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    871e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8722:	bf1d      	ittte	ne
    8724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8728:	ea94 0f0c 	teqne	r4, ip
    872c:	ea95 0f0c 	teqne	r5, ip
    8730:	f000 f8a7 	bleq	8882 <__aeabi_ddiv+0x16e>
    8734:	eba4 0405 	sub.w	r4, r4, r5
    8738:	ea81 0e03 	eor.w	lr, r1, r3
    873c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8740:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8744:	f000 8088 	beq.w	8858 <__aeabi_ddiv+0x144>
    8748:	ea4f 3303 	mov.w	r3, r3, lsl #12
    874c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    8754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8758:	ea4f 2202 	mov.w	r2, r2, lsl #8
    875c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    8764:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    876c:	429d      	cmp	r5, r3
    876e:	bf08      	it	eq
    8770:	4296      	cmpeq	r6, r2
    8772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    8776:	f504 7440 	add.w	r4, r4, #768	; 0x300
    877a:	d202      	bcs.n	8782 <__aeabi_ddiv+0x6e>
    877c:	085b      	lsrs	r3, r3, #1
    877e:	ea4f 0232 	mov.w	r2, r2, rrx
    8782:	1ab6      	subs	r6, r6, r2
    8784:	eb65 0503 	sbc.w	r5, r5, r3
    8788:	085b      	lsrs	r3, r3, #1
    878a:	ea4f 0232 	mov.w	r2, r2, rrx
    878e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    8792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    8796:	ebb6 0e02 	subs.w	lr, r6, r2
    879a:	eb75 0e03 	sbcs.w	lr, r5, r3
    879e:	bf22      	ittt	cs
    87a0:	1ab6      	subcs	r6, r6, r2
    87a2:	4675      	movcs	r5, lr
    87a4:	ea40 000c 	orrcs.w	r0, r0, ip
    87a8:	085b      	lsrs	r3, r3, #1
    87aa:	ea4f 0232 	mov.w	r2, r2, rrx
    87ae:	ebb6 0e02 	subs.w	lr, r6, r2
    87b2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87b6:	bf22      	ittt	cs
    87b8:	1ab6      	subcs	r6, r6, r2
    87ba:	4675      	movcs	r5, lr
    87bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    87c0:	085b      	lsrs	r3, r3, #1
    87c2:	ea4f 0232 	mov.w	r2, r2, rrx
    87c6:	ebb6 0e02 	subs.w	lr, r6, r2
    87ca:	eb75 0e03 	sbcs.w	lr, r5, r3
    87ce:	bf22      	ittt	cs
    87d0:	1ab6      	subcs	r6, r6, r2
    87d2:	4675      	movcs	r5, lr
    87d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    87d8:	085b      	lsrs	r3, r3, #1
    87da:	ea4f 0232 	mov.w	r2, r2, rrx
    87de:	ebb6 0e02 	subs.w	lr, r6, r2
    87e2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87e6:	bf22      	ittt	cs
    87e8:	1ab6      	subcs	r6, r6, r2
    87ea:	4675      	movcs	r5, lr
    87ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    87f0:	ea55 0e06 	orrs.w	lr, r5, r6
    87f4:	d018      	beq.n	8828 <__aeabi_ddiv+0x114>
    87f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
    87fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    87fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    880a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    880e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8812:	d1c0      	bne.n	8796 <__aeabi_ddiv+0x82>
    8814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8818:	d10b      	bne.n	8832 <__aeabi_ddiv+0x11e>
    881a:	ea41 0100 	orr.w	r1, r1, r0
    881e:	f04f 0000 	mov.w	r0, #0
    8822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8826:	e7b6      	b.n	8796 <__aeabi_ddiv+0x82>
    8828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    882c:	bf04      	itt	eq
    882e:	4301      	orreq	r1, r0
    8830:	2000      	moveq	r0, #0
    8832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8836:	bf88      	it	hi
    8838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    883c:	f63f aeaf 	bhi.w	859e <__aeabi_dmul+0xde>
    8840:	ebb5 0c03 	subs.w	ip, r5, r3
    8844:	bf04      	itt	eq
    8846:	ebb6 0c02 	subseq.w	ip, r6, r2
    884a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    884e:	f150 0000 	adcs.w	r0, r0, #0
    8852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8856:	bd70      	pop	{r4, r5, r6, pc}
    8858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    885c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8864:	bfc2      	ittt	gt
    8866:	ebd4 050c 	rsbsgt	r5, r4, ip
    886a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    886e:	bd70      	popgt	{r4, r5, r6, pc}
    8870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8874:	f04f 0e00 	mov.w	lr, #0
    8878:	3c01      	subs	r4, #1
    887a:	e690      	b.n	859e <__aeabi_dmul+0xde>
    887c:	ea45 0e06 	orr.w	lr, r5, r6
    8880:	e68d      	b.n	859e <__aeabi_dmul+0xde>
    8882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8886:	ea94 0f0c 	teq	r4, ip
    888a:	bf08      	it	eq
    888c:	ea95 0f0c 	teqeq	r5, ip
    8890:	f43f af3b 	beq.w	870a <__aeabi_dmul+0x24a>
    8894:	ea94 0f0c 	teq	r4, ip
    8898:	d10a      	bne.n	88b0 <__aeabi_ddiv+0x19c>
    889a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    889e:	f47f af34 	bne.w	870a <__aeabi_dmul+0x24a>
    88a2:	ea95 0f0c 	teq	r5, ip
    88a6:	f47f af25 	bne.w	86f4 <__aeabi_dmul+0x234>
    88aa:	4610      	mov	r0, r2
    88ac:	4619      	mov	r1, r3
    88ae:	e72c      	b.n	870a <__aeabi_dmul+0x24a>
    88b0:	ea95 0f0c 	teq	r5, ip
    88b4:	d106      	bne.n	88c4 <__aeabi_ddiv+0x1b0>
    88b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88ba:	f43f aefd 	beq.w	86b8 <__aeabi_dmul+0x1f8>
    88be:	4610      	mov	r0, r2
    88c0:	4619      	mov	r1, r3
    88c2:	e722      	b.n	870a <__aeabi_dmul+0x24a>
    88c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    88c8:	bf18      	it	ne
    88ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    88ce:	f47f aec5 	bne.w	865c <__aeabi_dmul+0x19c>
    88d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    88d6:	f47f af0d 	bne.w	86f4 <__aeabi_dmul+0x234>
    88da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    88de:	f47f aeeb 	bne.w	86b8 <__aeabi_dmul+0x1f8>
    88e2:	e712      	b.n	870a <__aeabi_dmul+0x24a>

000088e4 <__gedf2>:
    88e4:	f04f 3cff 	mov.w	ip, #4294967295
    88e8:	e006      	b.n	88f8 <__cmpdf2+0x4>
    88ea:	bf00      	nop

000088ec <__ledf2>:
    88ec:	f04f 0c01 	mov.w	ip, #1
    88f0:	e002      	b.n	88f8 <__cmpdf2+0x4>
    88f2:	bf00      	nop

000088f4 <__cmpdf2>:
    88f4:	f04f 0c01 	mov.w	ip, #1
    88f8:	f84d cd04 	str.w	ip, [sp, #-4]!
    88fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8908:	bf18      	it	ne
    890a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    890e:	d01b      	beq.n	8948 <__cmpdf2+0x54>
    8910:	b001      	add	sp, #4
    8912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8916:	bf0c      	ite	eq
    8918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    891c:	ea91 0f03 	teqne	r1, r3
    8920:	bf02      	ittt	eq
    8922:	ea90 0f02 	teqeq	r0, r2
    8926:	2000      	moveq	r0, #0
    8928:	4770      	bxeq	lr
    892a:	f110 0f00 	cmn.w	r0, #0
    892e:	ea91 0f03 	teq	r1, r3
    8932:	bf58      	it	pl
    8934:	4299      	cmppl	r1, r3
    8936:	bf08      	it	eq
    8938:	4290      	cmpeq	r0, r2
    893a:	bf2c      	ite	cs
    893c:	17d8      	asrcs	r0, r3, #31
    893e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8942:	f040 0001 	orr.w	r0, r0, #1
    8946:	4770      	bx	lr
    8948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    894c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8950:	d102      	bne.n	8958 <__cmpdf2+0x64>
    8952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8956:	d107      	bne.n	8968 <__cmpdf2+0x74>
    8958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    895c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8960:	d1d6      	bne.n	8910 <__cmpdf2+0x1c>
    8962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8966:	d0d3      	beq.n	8910 <__cmpdf2+0x1c>
    8968:	f85d 0b04 	ldr.w	r0, [sp], #4
    896c:	4770      	bx	lr
    896e:	bf00      	nop

00008970 <__aeabi_cdrcmple>:
    8970:	4684      	mov	ip, r0
    8972:	4610      	mov	r0, r2
    8974:	4662      	mov	r2, ip
    8976:	468c      	mov	ip, r1
    8978:	4619      	mov	r1, r3
    897a:	4663      	mov	r3, ip
    897c:	e000      	b.n	8980 <__aeabi_cdcmpeq>
    897e:	bf00      	nop

00008980 <__aeabi_cdcmpeq>:
    8980:	b501      	push	{r0, lr}
    8982:	f7ff ffb7 	bl	88f4 <__cmpdf2>
    8986:	2800      	cmp	r0, #0
    8988:	bf48      	it	mi
    898a:	f110 0f00 	cmnmi.w	r0, #0
    898e:	bd01      	pop	{r0, pc}

00008990 <__aeabi_dcmpeq>:
    8990:	f84d ed08 	str.w	lr, [sp, #-8]!
    8994:	f7ff fff4 	bl	8980 <__aeabi_cdcmpeq>
    8998:	bf0c      	ite	eq
    899a:	2001      	moveq	r0, #1
    899c:	2000      	movne	r0, #0
    899e:	f85d fb08 	ldr.w	pc, [sp], #8
    89a2:	bf00      	nop

000089a4 <__aeabi_dcmplt>:
    89a4:	f84d ed08 	str.w	lr, [sp, #-8]!
    89a8:	f7ff ffea 	bl	8980 <__aeabi_cdcmpeq>
    89ac:	bf34      	ite	cc
    89ae:	2001      	movcc	r0, #1
    89b0:	2000      	movcs	r0, #0
    89b2:	f85d fb08 	ldr.w	pc, [sp], #8
    89b6:	bf00      	nop

000089b8 <__aeabi_dcmple>:
    89b8:	f84d ed08 	str.w	lr, [sp, #-8]!
    89bc:	f7ff ffe0 	bl	8980 <__aeabi_cdcmpeq>
    89c0:	bf94      	ite	ls
    89c2:	2001      	movls	r0, #1
    89c4:	2000      	movhi	r0, #0
    89c6:	f85d fb08 	ldr.w	pc, [sp], #8
    89ca:	bf00      	nop

000089cc <__aeabi_dcmpge>:
    89cc:	f84d ed08 	str.w	lr, [sp, #-8]!
    89d0:	f7ff ffce 	bl	8970 <__aeabi_cdrcmple>
    89d4:	bf94      	ite	ls
    89d6:	2001      	movls	r0, #1
    89d8:	2000      	movhi	r0, #0
    89da:	f85d fb08 	ldr.w	pc, [sp], #8
    89de:	bf00      	nop

000089e0 <__aeabi_dcmpgt>:
    89e0:	f84d ed08 	str.w	lr, [sp, #-8]!
    89e4:	f7ff ffc4 	bl	8970 <__aeabi_cdrcmple>
    89e8:	bf34      	ite	cc
    89ea:	2001      	movcc	r0, #1
    89ec:	2000      	movcs	r0, #0
    89ee:	f85d fb08 	ldr.w	pc, [sp], #8
    89f2:	bf00      	nop

000089f4 <__aeabi_dcmpun>:
    89f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    89f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    89fc:	d102      	bne.n	8a04 <__aeabi_dcmpun+0x10>
    89fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8a02:	d10a      	bne.n	8a1a <__aeabi_dcmpun+0x26>
    8a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a0c:	d102      	bne.n	8a14 <__aeabi_dcmpun+0x20>
    8a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8a12:	d102      	bne.n	8a1a <__aeabi_dcmpun+0x26>
    8a14:	f04f 0000 	mov.w	r0, #0
    8a18:	4770      	bx	lr
    8a1a:	f04f 0001 	mov.w	r0, #1
    8a1e:	4770      	bx	lr

00008a20 <__aeabi_d2iz>:
    8a20:	ea4f 0241 	mov.w	r2, r1, lsl #1
    8a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8a28:	d215      	bcs.n	8a56 <__aeabi_d2iz+0x36>
    8a2a:	d511      	bpl.n	8a50 <__aeabi_d2iz+0x30>
    8a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8a34:	d912      	bls.n	8a5c <__aeabi_d2iz+0x3c>
    8a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8a42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8a46:	fa23 f002 	lsr.w	r0, r3, r2
    8a4a:	bf18      	it	ne
    8a4c:	4240      	negne	r0, r0
    8a4e:	4770      	bx	lr
    8a50:	f04f 0000 	mov.w	r0, #0
    8a54:	4770      	bx	lr
    8a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8a5a:	d105      	bne.n	8a68 <__aeabi_d2iz+0x48>
    8a5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    8a60:	bf08      	it	eq
    8a62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    8a66:	4770      	bx	lr
    8a68:	f04f 0000 	mov.w	r0, #0
    8a6c:	4770      	bx	lr
    8a6e:	bf00      	nop

00008a70 <__aeabi_d2uiz>:
    8a70:	004a      	lsls	r2, r1, #1
    8a72:	d211      	bcs.n	8a98 <__aeabi_d2uiz+0x28>
    8a74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8a78:	d211      	bcs.n	8a9e <__aeabi_d2uiz+0x2e>
    8a7a:	d50d      	bpl.n	8a98 <__aeabi_d2uiz+0x28>
    8a7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8a80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8a84:	d40e      	bmi.n	8aa4 <__aeabi_d2uiz+0x34>
    8a86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8a8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8a8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8a92:	fa23 f002 	lsr.w	r0, r3, r2
    8a96:	4770      	bx	lr
    8a98:	f04f 0000 	mov.w	r0, #0
    8a9c:	4770      	bx	lr
    8a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8aa2:	d102      	bne.n	8aaa <__aeabi_d2uiz+0x3a>
    8aa4:	f04f 30ff 	mov.w	r0, #4294967295
    8aa8:	4770      	bx	lr
    8aaa:	f04f 0000 	mov.w	r0, #0
    8aae:	4770      	bx	lr

00008ab0 <__aeabi_d2f>:
    8ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
    8ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    8ab8:	bf24      	itt	cs
    8aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    8abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    8ac2:	d90d      	bls.n	8ae0 <__aeabi_d2f+0x30>
    8ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    8acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    8ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    8ad8:	bf08      	it	eq
    8ada:	f020 0001 	biceq.w	r0, r0, #1
    8ade:	4770      	bx	lr
    8ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    8ae4:	d121      	bne.n	8b2a <__aeabi_d2f+0x7a>
    8ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    8aea:	bfbc      	itt	lt
    8aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    8af0:	4770      	bxlt	lr
    8af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
    8afa:	f1c2 0218 	rsb	r2, r2, #24
    8afe:	f1c2 0c20 	rsb	ip, r2, #32
    8b02:	fa10 f30c 	lsls.w	r3, r0, ip
    8b06:	fa20 f002 	lsr.w	r0, r0, r2
    8b0a:	bf18      	it	ne
    8b0c:	f040 0001 	orrne.w	r0, r0, #1
    8b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    8b18:	fa03 fc0c 	lsl.w	ip, r3, ip
    8b1c:	ea40 000c 	orr.w	r0, r0, ip
    8b20:	fa23 f302 	lsr.w	r3, r3, r2
    8b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
    8b28:	e7cc      	b.n	8ac4 <__aeabi_d2f+0x14>
    8b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    8b2e:	d107      	bne.n	8b40 <__aeabi_d2f+0x90>
    8b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    8b34:	bf1e      	ittt	ne
    8b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    8b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    8b3e:	4770      	bxne	lr
    8b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    8b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8b4c:	4770      	bx	lr
    8b4e:	bf00      	nop

00008b50 <__aeabi_ldivmod>:
    8b50:	b97b      	cbnz	r3, 8b72 <__aeabi_ldivmod+0x22>
    8b52:	b972      	cbnz	r2, 8b72 <__aeabi_ldivmod+0x22>
    8b54:	2900      	cmp	r1, #0
    8b56:	bfbe      	ittt	lt
    8b58:	2000      	movlt	r0, #0
    8b5a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    8b5e:	e006      	blt.n	8b6e <__aeabi_ldivmod+0x1e>
    8b60:	bf08      	it	eq
    8b62:	2800      	cmpeq	r0, #0
    8b64:	bf1c      	itt	ne
    8b66:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    8b6a:	f04f 30ff 	movne.w	r0, #4294967295
    8b6e:	f000 b875 	b.w	8c5c <__aeabi_idiv0>
    8b72:	f1ad 0c08 	sub.w	ip, sp, #8
    8b76:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8b7a:	2900      	cmp	r1, #0
    8b7c:	db09      	blt.n	8b92 <__aeabi_ldivmod+0x42>
    8b7e:	2b00      	cmp	r3, #0
    8b80:	db1a      	blt.n	8bb8 <__aeabi_ldivmod+0x68>
    8b82:	f000 f884 	bl	8c8e <__udivmoddi4>
    8b86:	f8dd e004 	ldr.w	lr, [sp, #4]
    8b8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8b8e:	b004      	add	sp, #16
    8b90:	4770      	bx	lr
    8b92:	4240      	negs	r0, r0
    8b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8b98:	2b00      	cmp	r3, #0
    8b9a:	db1b      	blt.n	8bd4 <__aeabi_ldivmod+0x84>
    8b9c:	f000 f877 	bl	8c8e <__udivmoddi4>
    8ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ba8:	b004      	add	sp, #16
    8baa:	4240      	negs	r0, r0
    8bac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8bb0:	4252      	negs	r2, r2
    8bb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8bb6:	4770      	bx	lr
    8bb8:	4252      	negs	r2, r2
    8bba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8bbe:	f000 f866 	bl	8c8e <__udivmoddi4>
    8bc2:	f8dd e004 	ldr.w	lr, [sp, #4]
    8bc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8bca:	b004      	add	sp, #16
    8bcc:	4240      	negs	r0, r0
    8bce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8bd2:	4770      	bx	lr
    8bd4:	4252      	negs	r2, r2
    8bd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8bda:	f000 f858 	bl	8c8e <__udivmoddi4>
    8bde:	f8dd e004 	ldr.w	lr, [sp, #4]
    8be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8be6:	b004      	add	sp, #16
    8be8:	4252      	negs	r2, r2
    8bea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8bee:	4770      	bx	lr

00008bf0 <__aeabi_uldivmod>:
    8bf0:	b953      	cbnz	r3, 8c08 <__aeabi_uldivmod+0x18>
    8bf2:	b94a      	cbnz	r2, 8c08 <__aeabi_uldivmod+0x18>
    8bf4:	2900      	cmp	r1, #0
    8bf6:	bf08      	it	eq
    8bf8:	2800      	cmpeq	r0, #0
    8bfa:	bf1c      	itt	ne
    8bfc:	f04f 31ff 	movne.w	r1, #4294967295
    8c00:	f04f 30ff 	movne.w	r0, #4294967295
    8c04:	f000 b82a 	b.w	8c5c <__aeabi_idiv0>
    8c08:	f1ad 0c08 	sub.w	ip, sp, #8
    8c0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8c10:	f000 f83d 	bl	8c8e <__udivmoddi4>
    8c14:	f8dd e004 	ldr.w	lr, [sp, #4]
    8c18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8c1c:	b004      	add	sp, #16
    8c1e:	4770      	bx	lr

00008c20 <__aeabi_d2ulz>:
    8c20:	b5d0      	push	{r4, r6, r7, lr}
    8c22:	2200      	movs	r2, #0
    8c24:	4b0b      	ldr	r3, [pc, #44]	; (8c54 <__aeabi_d2ulz+0x34>)
    8c26:	4606      	mov	r6, r0
    8c28:	460f      	mov	r7, r1
    8c2a:	f7ff fc49 	bl	84c0 <__aeabi_dmul>
    8c2e:	f7ff ff1f 	bl	8a70 <__aeabi_d2uiz>
    8c32:	4604      	mov	r4, r0
    8c34:	f7ff fbca 	bl	83cc <__aeabi_ui2d>
    8c38:	2200      	movs	r2, #0
    8c3a:	4b07      	ldr	r3, [pc, #28]	; (8c58 <__aeabi_d2ulz+0x38>)
    8c3c:	f7ff fc40 	bl	84c0 <__aeabi_dmul>
    8c40:	4602      	mov	r2, r0
    8c42:	460b      	mov	r3, r1
    8c44:	4630      	mov	r0, r6
    8c46:	4639      	mov	r1, r7
    8c48:	f7ff fa82 	bl	8150 <__aeabi_dsub>
    8c4c:	f7ff ff10 	bl	8a70 <__aeabi_d2uiz>
    8c50:	4621      	mov	r1, r4
    8c52:	bdd0      	pop	{r4, r6, r7, pc}
    8c54:	3df00000 	.word	0x3df00000
    8c58:	41f00000 	.word	0x41f00000

00008c5c <__aeabi_idiv0>:
    8c5c:	4770      	bx	lr
    8c5e:	bf00      	nop

00008c60 <__aeabi_d2lz>:
    8c60:	b538      	push	{r3, r4, r5, lr}
    8c62:	2200      	movs	r2, #0
    8c64:	2300      	movs	r3, #0
    8c66:	4604      	mov	r4, r0
    8c68:	460d      	mov	r5, r1
    8c6a:	f7ff fe9b 	bl	89a4 <__aeabi_dcmplt>
    8c6e:	b928      	cbnz	r0, 8c7c <__aeabi_d2lz+0x1c>
    8c70:	4620      	mov	r0, r4
    8c72:	4629      	mov	r1, r5
    8c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8c78:	f7ff bfd2 	b.w	8c20 <__aeabi_d2ulz>
    8c7c:	4620      	mov	r0, r4
    8c7e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
    8c82:	f7ff ffcd 	bl	8c20 <__aeabi_d2ulz>
    8c86:	4240      	negs	r0, r0
    8c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8c8c:	bd38      	pop	{r3, r4, r5, pc}

00008c8e <__udivmoddi4>:
    8c8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8c92:	4686      	mov	lr, r0
    8c94:	468c      	mov	ip, r1
    8c96:	4608      	mov	r0, r1
    8c98:	9e08      	ldr	r6, [sp, #32]
    8c9a:	4615      	mov	r5, r2
    8c9c:	4674      	mov	r4, lr
    8c9e:	4619      	mov	r1, r3
    8ca0:	2b00      	cmp	r3, #0
    8ca2:	f040 80c1 	bne.w	8e28 <__udivmoddi4+0x19a>
    8ca6:	4285      	cmp	r5, r0
    8ca8:	fab2 f282 	clz	r2, r2
    8cac:	d945      	bls.n	8d3a <__udivmoddi4+0xac>
    8cae:	b14a      	cbz	r2, 8cc4 <__udivmoddi4+0x36>
    8cb0:	f1c2 0320 	rsb	r3, r2, #32
    8cb4:	fa00 fc02 	lsl.w	ip, r0, r2
    8cb8:	4095      	lsls	r5, r2
    8cba:	4094      	lsls	r4, r2
    8cbc:	fa2e f303 	lsr.w	r3, lr, r3
    8cc0:	ea43 0c0c 	orr.w	ip, r3, ip
    8cc4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8cc8:	b2a8      	uxth	r0, r5
    8cca:	0c23      	lsrs	r3, r4, #16
    8ccc:	fbbc f8fe 	udiv	r8, ip, lr
    8cd0:	fb0e cc18 	mls	ip, lr, r8, ip
    8cd4:	fb08 f900 	mul.w	r9, r8, r0
    8cd8:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    8cdc:	4599      	cmp	r9, r3
    8cde:	d928      	bls.n	8d32 <__udivmoddi4+0xa4>
    8ce0:	18eb      	adds	r3, r5, r3
    8ce2:	f108 37ff 	add.w	r7, r8, #4294967295
    8ce6:	d204      	bcs.n	8cf2 <__udivmoddi4+0x64>
    8ce8:	4599      	cmp	r9, r3
    8cea:	d902      	bls.n	8cf2 <__udivmoddi4+0x64>
    8cec:	f1a8 0702 	sub.w	r7, r8, #2
    8cf0:	442b      	add	r3, r5
    8cf2:	eba3 0309 	sub.w	r3, r3, r9
    8cf6:	b2a4      	uxth	r4, r4
    8cf8:	fbb3 fcfe 	udiv	ip, r3, lr
    8cfc:	fb0e 331c 	mls	r3, lr, ip, r3
    8d00:	fb0c f000 	mul.w	r0, ip, r0
    8d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8d08:	42a0      	cmp	r0, r4
    8d0a:	d914      	bls.n	8d36 <__udivmoddi4+0xa8>
    8d0c:	192c      	adds	r4, r5, r4
    8d0e:	f10c 33ff 	add.w	r3, ip, #4294967295
    8d12:	d204      	bcs.n	8d1e <__udivmoddi4+0x90>
    8d14:	42a0      	cmp	r0, r4
    8d16:	d902      	bls.n	8d1e <__udivmoddi4+0x90>
    8d18:	f1ac 0302 	sub.w	r3, ip, #2
    8d1c:	442c      	add	r4, r5
    8d1e:	1a24      	subs	r4, r4, r0
    8d20:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    8d24:	b11e      	cbz	r6, 8d2e <__udivmoddi4+0xa0>
    8d26:	40d4      	lsrs	r4, r2
    8d28:	2300      	movs	r3, #0
    8d2a:	6034      	str	r4, [r6, #0]
    8d2c:	6073      	str	r3, [r6, #4]
    8d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8d32:	4647      	mov	r7, r8
    8d34:	e7dd      	b.n	8cf2 <__udivmoddi4+0x64>
    8d36:	4663      	mov	r3, ip
    8d38:	e7f1      	b.n	8d1e <__udivmoddi4+0x90>
    8d3a:	bb92      	cbnz	r2, 8da2 <__udivmoddi4+0x114>
    8d3c:	1b43      	subs	r3, r0, r5
    8d3e:	2101      	movs	r1, #1
    8d40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8d44:	b2af      	uxth	r7, r5
    8d46:	0c20      	lsrs	r0, r4, #16
    8d48:	fbb3 fcfe 	udiv	ip, r3, lr
    8d4c:	fb0e 331c 	mls	r3, lr, ip, r3
    8d50:	fb0c f807 	mul.w	r8, ip, r7
    8d54:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8d58:	4598      	cmp	r8, r3
    8d5a:	d961      	bls.n	8e20 <__udivmoddi4+0x192>
    8d5c:	18eb      	adds	r3, r5, r3
    8d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
    8d62:	d204      	bcs.n	8d6e <__udivmoddi4+0xe0>
    8d64:	4598      	cmp	r8, r3
    8d66:	d902      	bls.n	8d6e <__udivmoddi4+0xe0>
    8d68:	f1ac 0002 	sub.w	r0, ip, #2
    8d6c:	442b      	add	r3, r5
    8d6e:	eba3 0308 	sub.w	r3, r3, r8
    8d72:	b2a4      	uxth	r4, r4
    8d74:	fbb3 fcfe 	udiv	ip, r3, lr
    8d78:	fb0e 331c 	mls	r3, lr, ip, r3
    8d7c:	fb0c f707 	mul.w	r7, ip, r7
    8d80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8d84:	42a7      	cmp	r7, r4
    8d86:	d94d      	bls.n	8e24 <__udivmoddi4+0x196>
    8d88:	192c      	adds	r4, r5, r4
    8d8a:	f10c 33ff 	add.w	r3, ip, #4294967295
    8d8e:	d204      	bcs.n	8d9a <__udivmoddi4+0x10c>
    8d90:	42a7      	cmp	r7, r4
    8d92:	d902      	bls.n	8d9a <__udivmoddi4+0x10c>
    8d94:	f1ac 0302 	sub.w	r3, ip, #2
    8d98:	442c      	add	r4, r5
    8d9a:	1be4      	subs	r4, r4, r7
    8d9c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8da0:	e7c0      	b.n	8d24 <__udivmoddi4+0x96>
    8da2:	f1c2 0320 	rsb	r3, r2, #32
    8da6:	4095      	lsls	r5, r2
    8da8:	4094      	lsls	r4, r2
    8daa:	fa20 f103 	lsr.w	r1, r0, r3
    8dae:	fa2e f303 	lsr.w	r3, lr, r3
    8db2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8db6:	4090      	lsls	r0, r2
    8db8:	b2af      	uxth	r7, r5
    8dba:	4303      	orrs	r3, r0
    8dbc:	fbb1 fcfe 	udiv	ip, r1, lr
    8dc0:	fb0e 101c 	mls	r0, lr, ip, r1
    8dc4:	0c19      	lsrs	r1, r3, #16
    8dc6:	fb0c f807 	mul.w	r8, ip, r7
    8dca:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8dce:	4588      	cmp	r8, r1
    8dd0:	d922      	bls.n	8e18 <__udivmoddi4+0x18a>
    8dd2:	1869      	adds	r1, r5, r1
    8dd4:	f10c 30ff 	add.w	r0, ip, #4294967295
    8dd8:	d204      	bcs.n	8de4 <__udivmoddi4+0x156>
    8dda:	4588      	cmp	r8, r1
    8ddc:	d902      	bls.n	8de4 <__udivmoddi4+0x156>
    8dde:	f1ac 0002 	sub.w	r0, ip, #2
    8de2:	4429      	add	r1, r5
    8de4:	eba1 0108 	sub.w	r1, r1, r8
    8de8:	b29b      	uxth	r3, r3
    8dea:	fbb1 fcfe 	udiv	ip, r1, lr
    8dee:	fb0e 111c 	mls	r1, lr, ip, r1
    8df2:	fb0c f707 	mul.w	r7, ip, r7
    8df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    8dfa:	429f      	cmp	r7, r3
    8dfc:	d90e      	bls.n	8e1c <__udivmoddi4+0x18e>
    8dfe:	18eb      	adds	r3, r5, r3
    8e00:	f10c 31ff 	add.w	r1, ip, #4294967295
    8e04:	d204      	bcs.n	8e10 <__udivmoddi4+0x182>
    8e06:	429f      	cmp	r7, r3
    8e08:	d902      	bls.n	8e10 <__udivmoddi4+0x182>
    8e0a:	f1ac 0102 	sub.w	r1, ip, #2
    8e0e:	442b      	add	r3, r5
    8e10:	1bdb      	subs	r3, r3, r7
    8e12:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8e16:	e793      	b.n	8d40 <__udivmoddi4+0xb2>
    8e18:	4660      	mov	r0, ip
    8e1a:	e7e3      	b.n	8de4 <__udivmoddi4+0x156>
    8e1c:	4661      	mov	r1, ip
    8e1e:	e7f7      	b.n	8e10 <__udivmoddi4+0x182>
    8e20:	4660      	mov	r0, ip
    8e22:	e7a4      	b.n	8d6e <__udivmoddi4+0xe0>
    8e24:	4663      	mov	r3, ip
    8e26:	e7b8      	b.n	8d9a <__udivmoddi4+0x10c>
    8e28:	4283      	cmp	r3, r0
    8e2a:	d906      	bls.n	8e3a <__udivmoddi4+0x1ac>
    8e2c:	b916      	cbnz	r6, 8e34 <__udivmoddi4+0x1a6>
    8e2e:	2100      	movs	r1, #0
    8e30:	4608      	mov	r0, r1
    8e32:	e77c      	b.n	8d2e <__udivmoddi4+0xa0>
    8e34:	e9c6 e000 	strd	lr, r0, [r6]
    8e38:	e7f9      	b.n	8e2e <__udivmoddi4+0x1a0>
    8e3a:	fab3 f783 	clz	r7, r3
    8e3e:	b98f      	cbnz	r7, 8e64 <__udivmoddi4+0x1d6>
    8e40:	4283      	cmp	r3, r0
    8e42:	d301      	bcc.n	8e48 <__udivmoddi4+0x1ba>
    8e44:	4572      	cmp	r2, lr
    8e46:	d808      	bhi.n	8e5a <__udivmoddi4+0x1cc>
    8e48:	ebbe 0402 	subs.w	r4, lr, r2
    8e4c:	eb60 0303 	sbc.w	r3, r0, r3
    8e50:	2001      	movs	r0, #1
    8e52:	469c      	mov	ip, r3
    8e54:	b91e      	cbnz	r6, 8e5e <__udivmoddi4+0x1d0>
    8e56:	2100      	movs	r1, #0
    8e58:	e769      	b.n	8d2e <__udivmoddi4+0xa0>
    8e5a:	4638      	mov	r0, r7
    8e5c:	e7fa      	b.n	8e54 <__udivmoddi4+0x1c6>
    8e5e:	e9c6 4c00 	strd	r4, ip, [r6]
    8e62:	e7f8      	b.n	8e56 <__udivmoddi4+0x1c8>
    8e64:	f1c7 0c20 	rsb	ip, r7, #32
    8e68:	40bb      	lsls	r3, r7
    8e6a:	fa0e f507 	lsl.w	r5, lr, r7
    8e6e:	fa22 f40c 	lsr.w	r4, r2, ip
    8e72:	fa2e f10c 	lsr.w	r1, lr, ip
    8e76:	40ba      	lsls	r2, r7
    8e78:	431c      	orrs	r4, r3
    8e7a:	fa20 f30c 	lsr.w	r3, r0, ip
    8e7e:	40b8      	lsls	r0, r7
    8e80:	ea4f 4914 	mov.w	r9, r4, lsr #16
    8e84:	4301      	orrs	r1, r0
    8e86:	fa1f fe84 	uxth.w	lr, r4
    8e8a:	fbb3 f8f9 	udiv	r8, r3, r9
    8e8e:	fb09 3018 	mls	r0, r9, r8, r3
    8e92:	0c0b      	lsrs	r3, r1, #16
    8e94:	fb08 fa0e 	mul.w	sl, r8, lr
    8e98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    8e9c:	459a      	cmp	sl, r3
    8e9e:	d940      	bls.n	8f22 <__udivmoddi4+0x294>
    8ea0:	18e3      	adds	r3, r4, r3
    8ea2:	f108 30ff 	add.w	r0, r8, #4294967295
    8ea6:	d204      	bcs.n	8eb2 <__udivmoddi4+0x224>
    8ea8:	459a      	cmp	sl, r3
    8eaa:	d902      	bls.n	8eb2 <__udivmoddi4+0x224>
    8eac:	f1a8 0002 	sub.w	r0, r8, #2
    8eb0:	4423      	add	r3, r4
    8eb2:	eba3 030a 	sub.w	r3, r3, sl
    8eb6:	b289      	uxth	r1, r1
    8eb8:	fbb3 f8f9 	udiv	r8, r3, r9
    8ebc:	fb09 3318 	mls	r3, r9, r8, r3
    8ec0:	fb08 fe0e 	mul.w	lr, r8, lr
    8ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    8ec8:	458e      	cmp	lr, r1
    8eca:	d92c      	bls.n	8f26 <__udivmoddi4+0x298>
    8ecc:	1861      	adds	r1, r4, r1
    8ece:	f108 33ff 	add.w	r3, r8, #4294967295
    8ed2:	d204      	bcs.n	8ede <__udivmoddi4+0x250>
    8ed4:	458e      	cmp	lr, r1
    8ed6:	d902      	bls.n	8ede <__udivmoddi4+0x250>
    8ed8:	f1a8 0302 	sub.w	r3, r8, #2
    8edc:	4421      	add	r1, r4
    8ede:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8ee2:	eba1 010e 	sub.w	r1, r1, lr
    8ee6:	fba0 9802 	umull	r9, r8, r0, r2
    8eea:	4541      	cmp	r1, r8
    8eec:	46ce      	mov	lr, r9
    8eee:	4643      	mov	r3, r8
    8ef0:	d302      	bcc.n	8ef8 <__udivmoddi4+0x26a>
    8ef2:	d106      	bne.n	8f02 <__udivmoddi4+0x274>
    8ef4:	454d      	cmp	r5, r9
    8ef6:	d204      	bcs.n	8f02 <__udivmoddi4+0x274>
    8ef8:	3801      	subs	r0, #1
    8efa:	ebb9 0e02 	subs.w	lr, r9, r2
    8efe:	eb68 0304 	sbc.w	r3, r8, r4
    8f02:	2e00      	cmp	r6, #0
    8f04:	d0a7      	beq.n	8e56 <__udivmoddi4+0x1c8>
    8f06:	ebb5 020e 	subs.w	r2, r5, lr
    8f0a:	eb61 0103 	sbc.w	r1, r1, r3
    8f0e:	fa01 fc0c 	lsl.w	ip, r1, ip
    8f12:	fa22 f307 	lsr.w	r3, r2, r7
    8f16:	40f9      	lsrs	r1, r7
    8f18:	ea4c 0303 	orr.w	r3, ip, r3
    8f1c:	e9c6 3100 	strd	r3, r1, [r6]
    8f20:	e799      	b.n	8e56 <__udivmoddi4+0x1c8>
    8f22:	4640      	mov	r0, r8
    8f24:	e7c5      	b.n	8eb2 <__udivmoddi4+0x224>
    8f26:	4643      	mov	r3, r8
    8f28:	e7d9      	b.n	8ede <__udivmoddi4+0x250>

00008f2a <strcmp>:
    8f2a:	f810 2b01 	ldrb.w	r2, [r0], #1
    8f2e:	f811 3b01 	ldrb.w	r3, [r1], #1
    8f32:	2a01      	cmp	r2, #1
    8f34:	bf28      	it	cs
    8f36:	429a      	cmpcs	r2, r3
    8f38:	d0f7      	beq.n	8f2a <strcmp>
    8f3a:	1ad0      	subs	r0, r2, r3
    8f3c:	4770      	bx	lr

00008f3e <strlen>:
    8f3e:	4603      	mov	r3, r0
    8f40:	f813 2b01 	ldrb.w	r2, [r3], #1
    8f44:	2a00      	cmp	r2, #0
    8f46:	d1fb      	bne.n	8f40 <strlen+0x2>
    8f48:	1a18      	subs	r0, r3, r0
    8f4a:	3801      	subs	r0, #1
    8f4c:	4770      	bx	lr
	...

00008f50 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    8f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f54:	4682      	mov	sl, r0
    8f56:	4616      	mov	r6, r2
    8f58:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    8f5a:	2500      	movs	r5, #0
{
    8f5c:	b09f      	sub	sp, #124	; 0x7c
    8f5e:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    8f60:	7830      	ldrb	r0, [r6, #0]
    8f62:	b910      	cbnz	r0, 8f6a <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    8f64:	4628      	mov	r0, r5
    8f66:	f000 bd85 	b.w	9a74 <z_cbvprintf_impl+0xb24>
			OUTC(*fp++);
    8f6a:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    8f6c:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    8f6e:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
    8f70:	d006      	beq.n	8f80 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    8f72:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
    8f74:	47d0      	blx	sl
    8f76:	2800      	cmp	r0, #0
    8f78:	f2c0 857c 	blt.w	9a74 <z_cbvprintf_impl+0xb24>
    8f7c:	3501      	adds	r5, #1
		if (bps == NULL) {
    8f7e:	e21b      	b.n	93b8 <z_cbvprintf_impl+0x468>
		} state = {
    8f80:	2218      	movs	r2, #24
    8f82:	2100      	movs	r1, #0
    8f84:	a810      	add	r0, sp, #64	; 0x40
    8f86:	f018 fe9e 	bl	21cc6 <memset>
	if (*sp == '%') {
    8f8a:	7873      	ldrb	r3, [r6, #1]
    8f8c:	2b25      	cmp	r3, #37	; 0x25
    8f8e:	f000 80ba 	beq.w	9106 <z_cbvprintf_impl+0x1b6>
    8f92:	2300      	movs	r3, #0
    8f94:	4698      	mov	r8, r3
    8f96:	469e      	mov	lr, r3
    8f98:	469c      	mov	ip, r3
    8f9a:	4618      	mov	r0, r3
    8f9c:	1c71      	adds	r1, r6, #1
    8f9e:	460f      	mov	r7, r1
		switch (*sp) {
    8fa0:	f811 2b01 	ldrb.w	r2, [r1], #1
    8fa4:	2a2b      	cmp	r2, #43	; 0x2b
    8fa6:	f000 80dd 	beq.w	9164 <z_cbvprintf_impl+0x214>
    8faa:	f200 80d4 	bhi.w	9156 <z_cbvprintf_impl+0x206>
    8fae:	2a20      	cmp	r2, #32
    8fb0:	f000 80db 	beq.w	916a <z_cbvprintf_impl+0x21a>
    8fb4:	2a23      	cmp	r2, #35	; 0x23
    8fb6:	f000 80db 	beq.w	9170 <z_cbvprintf_impl+0x220>
    8fba:	b12b      	cbz	r3, 8fc8 <z_cbvprintf_impl+0x78>
    8fbc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8fc4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    8fc8:	f1b8 0f00 	cmp.w	r8, #0
    8fcc:	d005      	beq.n	8fda <z_cbvprintf_impl+0x8a>
    8fce:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8fd2:	f043 0320 	orr.w	r3, r3, #32
    8fd6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    8fda:	f1be 0f00 	cmp.w	lr, #0
    8fde:	d005      	beq.n	8fec <z_cbvprintf_impl+0x9c>
    8fe0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8fe4:	f043 0310 	orr.w	r3, r3, #16
    8fe8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    8fec:	f1bc 0f00 	cmp.w	ip, #0
    8ff0:	d005      	beq.n	8ffe <z_cbvprintf_impl+0xae>
    8ff2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8ff6:	f043 0308 	orr.w	r3, r3, #8
    8ffa:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    8ffe:	b128      	cbz	r0, 900c <z_cbvprintf_impl+0xbc>
    9000:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    9004:	f043 0304 	orr.w	r3, r3, #4
    9008:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    900c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    9010:	f003 0144 	and.w	r1, r3, #68	; 0x44
    9014:	2944      	cmp	r1, #68	; 0x44
    9016:	d103      	bne.n	9020 <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
    9018:	f36f 1386 	bfc	r3, #6, #1
    901c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    9020:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    9024:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    9026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    902a:	970e      	str	r7, [sp, #56]	; 0x38
    902c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    9030:	f040 80a3 	bne.w	917a <z_cbvprintf_impl+0x22a>
		conv->width_star = true;
    9034:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    9038:	f043 0301 	orr.w	r3, r3, #1
    903c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    9040:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
    9042:	781a      	ldrb	r2, [r3, #0]
    9044:	2a2e      	cmp	r2, #46	; 0x2e
    9046:	bf0c      	ite	eq
    9048:	2101      	moveq	r1, #1
    904a:	2100      	movne	r1, #0
    904c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    9050:	f361 0241 	bfi	r2, r1, #1, #1
    9054:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    9058:	d10c      	bne.n	9074 <z_cbvprintf_impl+0x124>
	++sp;
    905a:	1c5a      	adds	r2, r3, #1
    905c:	920e      	str	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    905e:	785a      	ldrb	r2, [r3, #1]
    9060:	2a2a      	cmp	r2, #42	; 0x2a
    9062:	f040 809a 	bne.w	919a <z_cbvprintf_impl+0x24a>
		conv->prec_star = true;
    9066:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    906a:	3302      	adds	r3, #2
		conv->prec_star = true;
    906c:	f042 0204 	orr.w	r2, r2, #4
    9070:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    9074:	781a      	ldrb	r2, [r3, #0]
    9076:	2a6c      	cmp	r2, #108	; 0x6c
    9078:	f000 80bb 	beq.w	91f2 <z_cbvprintf_impl+0x2a2>
    907c:	f200 809d 	bhi.w	91ba <z_cbvprintf_impl+0x26a>
    9080:	2a68      	cmp	r2, #104	; 0x68
    9082:	f000 80a3 	beq.w	91cc <z_cbvprintf_impl+0x27c>
    9086:	2a6a      	cmp	r2, #106	; 0x6a
    9088:	f000 80bc 	beq.w	9204 <z_cbvprintf_impl+0x2b4>
    908c:	2a4c      	cmp	r2, #76	; 0x4c
    908e:	f000 80c1 	beq.w	9214 <z_cbvprintf_impl+0x2c4>
	conv->specifier = *sp++;
    9092:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
    9096:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    9098:	9306      	str	r3, [sp, #24]
    909a:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
    909e:	f200 8101 	bhi.w	92a4 <z_cbvprintf_impl+0x354>
    90a2:	2a6d      	cmp	r2, #109	; 0x6d
    90a4:	f200 80c3 	bhi.w	922e <z_cbvprintf_impl+0x2de>
    90a8:	2a69      	cmp	r2, #105	; 0x69
    90aa:	f200 80fb 	bhi.w	92a4 <z_cbvprintf_impl+0x354>
    90ae:	2a57      	cmp	r2, #87	; 0x57
    90b0:	f200 80da 	bhi.w	9268 <z_cbvprintf_impl+0x318>
    90b4:	2a41      	cmp	r2, #65	; 0x41
    90b6:	d004      	beq.n	90c2 <z_cbvprintf_impl+0x172>
    90b8:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    90bc:	2b02      	cmp	r3, #2
    90be:	f200 80f1 	bhi.w	92a4 <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_FP;
    90c2:	2104      	movs	r1, #4
    90c4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    90c8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    90cc:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    90d0:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    90d4:	427a      	negs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
    90d6:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
			|| (conv->specifier == 'A');
    90da:	417a      	adcs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
    90dc:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    90e0:	060a      	lsls	r2, r1, #24
		conv->specifier_cat = SPECIFIER_FP;
    90e2:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		conv->specifier_a = (conv->specifier == 'a')
    90e6:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
    90ea:	b2cb      	uxtb	r3, r1
    90ec:	f100 8119 	bmi.w	9322 <z_cbvprintf_impl+0x3d2>
		if (conv->length_mod == LENGTH_L) {
    90f0:	f003 0278 	and.w	r2, r3, #120	; 0x78
    90f4:	2a18      	cmp	r2, #24
    90f6:	f040 8103 	bne.w	9300 <z_cbvprintf_impl+0x3b0>
			conv->length_mod = LENGTH_NONE;
    90fa:	f36f 03c6 	bfc	r3, #3, #4
    90fe:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
    9102:	2300      	movs	r3, #0
    9104:	e0f2      	b.n	92ec <z_cbvprintf_impl+0x39c>
		conv->specifier = *sp++;
    9106:	1cb2      	adds	r2, r6, #2
    9108:	9206      	str	r2, [sp, #24]
    910a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    910e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    9112:	07d9      	lsls	r1, r3, #31
    9114:	f140 8107 	bpl.w	9326 <z_cbvprintf_impl+0x3d6>
			width = va_arg(ap, int);
    9118:	f854 2b04 	ldr.w	r2, [r4], #4
			if (width < 0) {
    911c:	2a00      	cmp	r2, #0
			width = va_arg(ap, int);
    911e:	9204      	str	r2, [sp, #16]
			if (width < 0) {
    9120:	da08      	bge.n	9134 <z_cbvprintf_impl+0x1e4>
				conv->flag_dash = true;
    9122:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    9126:	f042 0204 	orr.w	r2, r2, #4
    912a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
    912e:	9a04      	ldr	r2, [sp, #16]
    9130:	4252      	negs	r2, r2
		int width = -1;
    9132:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
    9134:	075a      	lsls	r2, r3, #29
    9136:	f140 80fe 	bpl.w	9336 <z_cbvprintf_impl+0x3e6>
			int arg = va_arg(ap, int);
    913a:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    913e:	2f00      	cmp	r7, #0
    9140:	f280 80fd 	bge.w	933e <z_cbvprintf_impl+0x3ee>
				conv->prec_present = false;
    9144:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    9148:	f36f 0341 	bfc	r3, #1, #1
    914c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    9150:	f04f 37ff 	mov.w	r7, #4294967295
    9154:	e0f3      	b.n	933e <z_cbvprintf_impl+0x3ee>
		switch (*sp) {
    9156:	2a2d      	cmp	r2, #45	; 0x2d
    9158:	d00d      	beq.n	9176 <z_cbvprintf_impl+0x226>
    915a:	2a30      	cmp	r2, #48	; 0x30
    915c:	f47f af2d 	bne.w	8fba <z_cbvprintf_impl+0x6a>
    9160:	2301      	movs	r3, #1
	} while (loop);
    9162:	e71c      	b.n	8f9e <z_cbvprintf_impl+0x4e>
		switch (*sp) {
    9164:	f04f 0c01 	mov.w	ip, #1
    9168:	e719      	b.n	8f9e <z_cbvprintf_impl+0x4e>
    916a:	f04f 0e01 	mov.w	lr, #1
    916e:	e716      	b.n	8f9e <z_cbvprintf_impl+0x4e>
    9170:	f04f 0801 	mov.w	r8, #1
    9174:	e713      	b.n	8f9e <z_cbvprintf_impl+0x4e>
    9176:	2001      	movs	r0, #1
    9178:	e711      	b.n	8f9e <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
    917a:	a80e      	add	r0, sp, #56	; 0x38
    917c:	f003 fdaa 	bl	ccd4 <extract_decimal>
	if (sp != wp) {
    9180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9182:	42bb      	cmp	r3, r7
    9184:	f43f af5d 	beq.w	9042 <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
    9188:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    918c:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    918e:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    9190:	f360 0241 	bfi	r2, r0, #1, #1
    9194:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    9198:	e753      	b.n	9042 <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
    919a:	a80e      	add	r0, sp, #56	; 0x38
    919c:	f003 fd9a 	bl	ccd4 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    91a0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    91a4:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    91a6:	f3c3 0240 	ubfx	r2, r3, #1, #1
    91aa:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    91ae:	f362 0341 	bfi	r3, r2, #1, #1
    91b2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    91b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    91b8:	e75c      	b.n	9074 <z_cbvprintf_impl+0x124>
	switch (*sp) {
    91ba:	2a74      	cmp	r2, #116	; 0x74
    91bc:	d026      	beq.n	920c <z_cbvprintf_impl+0x2bc>
    91be:	2a7a      	cmp	r2, #122	; 0x7a
    91c0:	f47f af67 	bne.w	9092 <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
    91c4:	2106      	movs	r1, #6
    91c6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    91ca:	e00c      	b.n	91e6 <z_cbvprintf_impl+0x296>
		if (*++sp == 'h') {
    91cc:	785a      	ldrb	r2, [r3, #1]
    91ce:	2a68      	cmp	r2, #104	; 0x68
    91d0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    91d4:	d106      	bne.n	91e4 <z_cbvprintf_impl+0x294>
			conv->length_mod = LENGTH_HH;
    91d6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    91d8:	f361 02c6 	bfi	r2, r1, #3, #4
    91dc:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    91e0:	3302      	adds	r3, #2
    91e2:	e756      	b.n	9092 <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
    91e4:	2102      	movs	r1, #2
    91e6:	f361 02c6 	bfi	r2, r1, #3, #4
    91ea:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    91ee:	3301      	adds	r3, #1
    91f0:	e74f      	b.n	9092 <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
    91f2:	785a      	ldrb	r2, [r3, #1]
    91f4:	2a6c      	cmp	r2, #108	; 0x6c
    91f6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    91fa:	d101      	bne.n	9200 <z_cbvprintf_impl+0x2b0>
			conv->length_mod = LENGTH_LL;
    91fc:	2104      	movs	r1, #4
    91fe:	e7eb      	b.n	91d8 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_L;
    9200:	2103      	movs	r1, #3
    9202:	e7f0      	b.n	91e6 <z_cbvprintf_impl+0x296>
		conv->length_mod = LENGTH_J;
    9204:	2105      	movs	r1, #5
    9206:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    920a:	e7ec      	b.n	91e6 <z_cbvprintf_impl+0x296>
		conv->length_mod = LENGTH_T;
    920c:	2107      	movs	r1, #7
    920e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    9212:	e7e8      	b.n	91e6 <z_cbvprintf_impl+0x296>
		conv->unsupported = true;
    9214:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    9218:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    921c:	f022 0202 	bic.w	r2, r2, #2
    9220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    9224:	f042 0202 	orr.w	r2, r2, #2
    9228:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    922c:	e7df      	b.n	91ee <z_cbvprintf_impl+0x29e>
	switch (conv->specifier) {
    922e:	3a6e      	subs	r2, #110	; 0x6e
    9230:	b2d3      	uxtb	r3, r2
    9232:	2201      	movs	r2, #1
    9234:	409a      	lsls	r2, r3
    9236:	f240 4382 	movw	r3, #1154	; 0x482
    923a:	421a      	tst	r2, r3
    923c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    9240:	d137      	bne.n	92b2 <z_cbvprintf_impl+0x362>
    9242:	f012 0f24 	tst.w	r2, #36	; 0x24
    9246:	d15f      	bne.n	9308 <z_cbvprintf_impl+0x3b8>
    9248:	07d1      	lsls	r1, r2, #31
    924a:	d52b      	bpl.n	92a4 <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_PTR;
    924c:	2103      	movs	r1, #3
    924e:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    9252:	f003 0378 	and.w	r3, r3, #120	; 0x78
    9256:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    925a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    925e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    9260:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    9264:	4143      	adcs	r3, r0
    9266:	e041      	b.n	92ec <z_cbvprintf_impl+0x39c>
    9268:	2001      	movs	r0, #1
	switch (conv->specifier) {
    926a:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    926e:	b2c9      	uxtb	r1, r1
    9270:	fa00 f101 	lsl.w	r1, r0, r1
    9274:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    9278:	f47f af23 	bne.w	90c2 <z_cbvprintf_impl+0x172>
    927c:	f640 0301 	movw	r3, #2049	; 0x801
    9280:	4219      	tst	r1, r3
    9282:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    9286:	d11a      	bne.n	92be <z_cbvprintf_impl+0x36e>
    9288:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    928c:	d00a      	beq.n	92a4 <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_SINT;
    928e:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    9292:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    9296:	f003 0378 	and.w	r3, r3, #120	; 0x78
    929a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    929c:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    92a0:	f47f af2f 	bne.w	9102 <z_cbvprintf_impl+0x1b2>
		conv->invalid = true;
    92a4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    92a8:	f043 0301 	orr.w	r3, r3, #1
    92ac:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    92b0:	e727      	b.n	9102 <z_cbvprintf_impl+0x1b2>
		conv->specifier_cat = SPECIFIER_UINT;
    92b2:	2102      	movs	r1, #2
    92b4:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    92b8:	f361 0202 	bfi	r2, r1, #0, #3
    92bc:	e7eb      	b.n	9296 <z_cbvprintf_impl+0x346>
    92be:	2002      	movs	r0, #2
    92c0:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    92c4:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    92c8:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    92cc:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    92ce:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    92d2:	bf02      	ittt	eq
    92d4:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    92d8:	f041 0101 	orreq.w	r1, r1, #1
    92dc:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    92e0:	2a63      	cmp	r2, #99	; 0x63
    92e2:	f47f af0e 	bne.w	9102 <z_cbvprintf_impl+0x1b2>
			unsupported = (conv->length_mod != LENGTH_NONE);
    92e6:	3b00      	subs	r3, #0
    92e8:	bf18      	it	ne
    92ea:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    92ec:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    92f0:	f3c2 0140 	ubfx	r1, r2, #1, #1
    92f4:	430b      	orrs	r3, r1
    92f6:	f363 0241 	bfi	r2, r3, #1, #1
    92fa:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    92fe:	e706      	b.n	910e <z_cbvprintf_impl+0x1be>
		} else if ((conv->length_mod != LENGTH_NONE)
    9300:	f013 0f38 	tst.w	r3, #56	; 0x38
    9304:	d1ce      	bne.n	92a4 <z_cbvprintf_impl+0x354>
    9306:	e6fc      	b.n	9102 <z_cbvprintf_impl+0x1b2>
		conv->specifier_cat = SPECIFIER_PTR;
    9308:	2103      	movs	r1, #3
    930a:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    930e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    9312:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    9316:	bf14      	ite	ne
    9318:	2301      	movne	r3, #1
    931a:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    931c:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    9320:	e7e4      	b.n	92ec <z_cbvprintf_impl+0x39c>
			unsupported = true;
    9322:	2301      	movs	r3, #1
    9324:	e7e2      	b.n	92ec <z_cbvprintf_impl+0x39c>
		} else if (conv->width_present) {
    9326:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    932a:	2a00      	cmp	r2, #0
		int width = -1;
    932c:	bfac      	ite	ge
    932e:	f04f 32ff 	movge.w	r2, #4294967295
			width = conv->width_value;
    9332:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
    9334:	e6fd      	b.n	9132 <z_cbvprintf_impl+0x1e2>
		} else if (conv->prec_present) {
    9336:	079f      	lsls	r7, r3, #30
    9338:	f57f af0a 	bpl.w	9150 <z_cbvprintf_impl+0x200>
			precision = conv->prec_value;
    933c:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    933e:	2300      	movs	r3, #0
		    && (conv->specifier_cat == SPECIFIER_FP)
    9340:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		conv->pad0_pre_exp = 0;
    9344:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    9348:	f002 0307 	and.w	r3, r2, #7
    934c:	2b04      	cmp	r3, #4
    934e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    9352:	d107      	bne.n	9364 <z_cbvprintf_impl+0x414>
		    && !conv->prec_present) {
    9354:	0798      	lsls	r0, r3, #30
    9356:	d405      	bmi.n	9364 <z_cbvprintf_impl+0x414>
			if (conv->specifier_a) {
    9358:	f99d 1049 	ldrsb.w	r1, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
    935c:	2900      	cmp	r1, #0
    935e:	bfac      	ite	ge
    9360:	2706      	movge	r7, #6
    9362:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
    9364:	f002 0207 	and.w	r2, r2, #7
		if (specifier_cat == SPECIFIER_SINT) {
    9368:	2a01      	cmp	r2, #1
			= (enum length_mod_enum)conv->length_mod;
    936a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    936e:	d133      	bne.n	93d8 <z_cbvprintf_impl+0x488>
			switch (length_mod) {
    9370:	1eda      	subs	r2, r3, #3
    9372:	2a04      	cmp	r2, #4
    9374:	d804      	bhi.n	9380 <z_cbvprintf_impl+0x430>
    9376:	e8df f002 	tbb	[pc, r2]
    937a:	4621      	.short	0x4621
    937c:	2146      	.short	0x2146
    937e:	21          	.byte	0x21
    937f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    9380:	6822      	ldr	r2, [r4, #0]
			if (length_mod == LENGTH_HH) {
    9382:	2b01      	cmp	r3, #1
				value->sint = va_arg(ap, int);
    9384:	ea4f 71e2 	mov.w	r1, r2, asr #31
    9388:	e9cd 2110 	strd	r2, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    938c:	d11c      	bne.n	93c8 <z_cbvprintf_impl+0x478>
				value->sint = (signed char)value->sint;
    938e:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    9392:	17d1      	asrs	r1, r2, #31
    9394:	e9cd 2110 	strd	r2, r1, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    9398:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    939a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    939e:	0791      	lsls	r1, r2, #30
    93a0:	9207      	str	r2, [sp, #28]
    93a2:	d050      	beq.n	9446 <z_cbvprintf_impl+0x4f6>
			OUTS(sp, fp);
    93a4:	4632      	mov	r2, r6
    93a6:	4650      	mov	r0, sl
    93a8:	9b06      	ldr	r3, [sp, #24]
    93aa:	9903      	ldr	r1, [sp, #12]
    93ac:	f015 f99c 	bl	1e6e8 <outs>
    93b0:	2800      	cmp	r0, #0
    93b2:	f2c0 835f 	blt.w	9a74 <z_cbvprintf_impl+0xb24>
    93b6:	4405      	add	r5, r0
			continue;
    93b8:	9e06      	ldr	r6, [sp, #24]
    93ba:	e5d1      	b.n	8f60 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    93bc:	f854 2b04 	ldr.w	r2, [r4], #4
    93c0:	17d1      	asrs	r1, r2, #31
				value->uint = (unsigned char)value->uint;
    93c2:	e9cd 2110 	strd	r2, r1, [sp, #64]	; 0x40
    93c6:	e7e8      	b.n	939a <z_cbvprintf_impl+0x44a>
			} else if (length_mod == LENGTH_H) {
    93c8:	2b02      	cmp	r3, #2
    93ca:	d1e5      	bne.n	9398 <z_cbvprintf_impl+0x448>
				value->sint = (short)value->sint;
    93cc:	b211      	sxth	r1, r2
    93ce:	f342 32c0 	sbfx	r2, r2, #15, #1
    93d2:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
    93d6:	e7df      	b.n	9398 <z_cbvprintf_impl+0x448>
		} else if (specifier_cat == SPECIFIER_UINT) {
    93d8:	2a02      	cmp	r2, #2
    93da:	d124      	bne.n	9426 <z_cbvprintf_impl+0x4d6>
			switch (length_mod) {
    93dc:	1eda      	subs	r2, r3, #3
    93de:	2a04      	cmp	r2, #4
    93e0:	d804      	bhi.n	93ec <z_cbvprintf_impl+0x49c>
    93e2:	e8df f002 	tbb	[pc, r2]
    93e6:	1018      	.short	0x1018
    93e8:	1810      	.short	0x1810
    93ea:	18          	.byte	0x18
    93eb:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    93ec:	2b01      	cmp	r3, #1
    93ee:	f04f 0100 	mov.w	r1, #0
				value->uint = va_arg(ap, unsigned int);
    93f2:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    93f6:	d014      	beq.n	9422 <z_cbvprintf_impl+0x4d2>
			} else if (length_mod == LENGTH_H) {
    93f8:	2b02      	cmp	r3, #2
				value->uint = va_arg(ap, unsigned int);
    93fa:	e9cd 2110 	strd	r2, r1, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    93fe:	d1cc      	bne.n	939a <z_cbvprintf_impl+0x44a>
				value->uint = (unsigned short)value->uint;
    9400:	b292      	uxth	r2, r2
			value->ptr = va_arg(ap, void *);
    9402:	9210      	str	r2, [sp, #64]	; 0x40
    9404:	e7c9      	b.n	939a <z_cbvprintf_impl+0x44a>
					(uint_value_type)va_arg(ap,
    9406:	3407      	adds	r4, #7
    9408:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    940c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
    9410:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    9414:	e7c1      	b.n	939a <z_cbvprintf_impl+0x44a>
					(uint_value_type)va_arg(ap, size_t);
    9416:	f854 2b04 	ldr.w	r2, [r4], #4
    941a:	9210      	str	r2, [sp, #64]	; 0x40
    941c:	2200      	movs	r2, #0
    941e:	9211      	str	r2, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    9420:	e7bb      	b.n	939a <z_cbvprintf_impl+0x44a>
				value->uint = (unsigned char)value->uint;
    9422:	b2d2      	uxtb	r2, r2
    9424:	e7cd      	b.n	93c2 <z_cbvprintf_impl+0x472>
		} else if (specifier_cat == SPECIFIER_FP) {
    9426:	2a04      	cmp	r2, #4
    9428:	d108      	bne.n	943c <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
    942a:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    942c:	f024 0407 	bic.w	r4, r4, #7
    9430:	e9d4 0100 	ldrd	r0, r1, [r4]
    9434:	3408      	adds	r4, #8
    9436:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    943a:	e7ae      	b.n	939a <z_cbvprintf_impl+0x44a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    943c:	2a03      	cmp	r2, #3
    943e:	d1ac      	bne.n	939a <z_cbvprintf_impl+0x44a>
			value->ptr = va_arg(ap, void *);
    9440:	f854 2b04 	ldr.w	r2, [r4], #4
    9444:	e7dd      	b.n	9402 <z_cbvprintf_impl+0x4b2>
		switch (conv->specifier) {
    9446:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
    944a:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
    944e:	d8b3      	bhi.n	93b8 <z_cbvprintf_impl+0x468>
    9450:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
    9454:	d849      	bhi.n	94ea <z_cbvprintf_impl+0x59a>
    9456:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    945a:	f000 8091 	beq.w	9580 <z_cbvprintf_impl+0x630>
    945e:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
    9462:	d9a9      	bls.n	93b8 <z_cbvprintf_impl+0x468>
    9464:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
    9468:	d003      	beq.n	9472 <z_cbvprintf_impl+0x522>
    946a:	f1ab 0345 	sub.w	r3, fp, #69	; 0x45
    946e:	2b02      	cmp	r3, #2
    9470:	d8a2      	bhi.n	93b8 <z_cbvprintf_impl+0x468>
	} u = {
    9472:	e9dd 1310 	ldrd	r1, r3, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
    9476:	2b00      	cmp	r3, #0
    9478:	f2c0 8137 	blt.w	96ea <z_cbvprintf_impl+0x79a>
	} else if (conv->flag_plus) {
    947c:	9a07      	ldr	r2, [sp, #28]
    947e:	0716      	lsls	r6, r2, #28
    9480:	f100 8136 	bmi.w	96f0 <z_cbvprintf_impl+0x7a0>
	} else if (conv->flag_space) {
    9484:	f3c2 1900 	ubfx	r9, r2, #4, #1
    9488:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    948c:	f3c3 500a 	ubfx	r0, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    9490:	f3c3 0313 	ubfx	r3, r3, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
    9494:	2800      	cmp	r0, #0
    9496:	f040 812e 	bne.w	96f6 <z_cbvprintf_impl+0x7a6>
    949a:	ea51 0603 	orrs.w	r6, r1, r3
    949e:	bf14      	ite	ne
    94a0:	2601      	movne	r6, #1
    94a2:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
    94a4:	02db      	lsls	r3, r3, #11
    94a6:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    94aa:	02c9      	lsls	r1, r1, #11
		c = 'f';
    94ac:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
    94b0:	ea40 0e01 	orr.w	lr, r0, r1
    94b4:	ea43 7ce0 	orr.w	ip, r3, r0, asr #31
		c = 'f';
    94b8:	bf08      	it	eq
    94ba:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
    94be:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    94c2:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
    94c6:	f000 819c 	beq.w	9802 <z_cbvprintf_impl+0x8b2>
		if (is_subnormal) {
    94ca:	2e00      	cmp	r6, #0
    94cc:	f040 814a 	bne.w	9764 <z_cbvprintf_impl+0x814>
		fract |= BIT_63;
    94d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    94d2:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
    94d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    94da:	930d      	str	r3, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    94dc:	2000      	movs	r0, #0
    94de:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    94e2:	4606      	mov	r6, r0
		fract *= 5U;
    94e4:	f04f 0c05 	mov.w	ip, #5
    94e8:	e156      	b.n	9798 <z_cbvprintf_impl+0x848>
		switch (conv->specifier) {
    94ea:	f1ab 0158 	sub.w	r1, fp, #88	; 0x58
    94ee:	2920      	cmp	r1, #32
    94f0:	f63f af62 	bhi.w	93b8 <z_cbvprintf_impl+0x468>
    94f4:	a001      	add	r0, pc, #4	; (adr r0, 94fc <z_cbvprintf_impl+0x5ac>)
    94f6:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    94fa:	bf00      	nop
    94fc:	00009689 	.word	0x00009689
    9500:	000093b9 	.word	0x000093b9
    9504:	000093b9 	.word	0x000093b9
    9508:	000093b9 	.word	0x000093b9
    950c:	000093b9 	.word	0x000093b9
    9510:	000093b9 	.word	0x000093b9
    9514:	000093b9 	.word	0x000093b9
    9518:	000093b9 	.word	0x000093b9
    951c:	000093b9 	.word	0x000093b9
    9520:	00009473 	.word	0x00009473
    9524:	000093b9 	.word	0x000093b9
    9528:	0000960d 	.word	0x0000960d
    952c:	00009621 	.word	0x00009621
    9530:	00009473 	.word	0x00009473
    9534:	00009473 	.word	0x00009473
    9538:	00009473 	.word	0x00009473
    953c:	000093b9 	.word	0x000093b9
    9540:	00009621 	.word	0x00009621
    9544:	000093b9 	.word	0x000093b9
    9548:	000093b9 	.word	0x000093b9
    954c:	000093b9 	.word	0x000093b9
    9550:	000093b9 	.word	0x000093b9
    9554:	000096c3 	.word	0x000096c3
    9558:	00009689 	.word	0x00009689
    955c:	0000968f 	.word	0x0000968f
    9560:	000093b9 	.word	0x000093b9
    9564:	000093b9 	.word	0x000093b9
    9568:	00009587 	.word	0x00009587
    956c:	000093b9 	.word	0x000093b9
    9570:	00009689 	.word	0x00009689
    9574:	000093b9 	.word	0x000093b9
    9578:	000093b9 	.word	0x000093b9
    957c:	00009689 	.word	0x00009689
			OUTC('%');
    9580:	4658      	mov	r0, fp
    9582:	9903      	ldr	r1, [sp, #12]
    9584:	e4f6      	b.n	8f74 <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
    9586:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    9588:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
    958a:	db3b      	blt.n	9604 <z_cbvprintf_impl+0x6b4>
				len = strnlen(bps, precision);
    958c:	4639      	mov	r1, r7
    958e:	4630      	mov	r0, r6
    9590:	f018 fd33 	bl	21ffa <strnlen>
		if (bps == NULL) {
    9594:	2e00      	cmp	r6, #0
    9596:	f43f af0f 	beq.w	93b8 <z_cbvprintf_impl+0x468>
		char sign = 0;
    959a:	f04f 0900 	mov.w	r9, #0
			bpe = bps + len;
    959e:	1837      	adds	r7, r6, r0
		size_t nj_len = (bpe - bps);
    95a0:	1bbb      	subs	r3, r7, r6
		if (conv->altform_0c) {
    95a2:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    95a6:	f012 0110 	ands.w	r1, r2, #16
    95aa:	9105      	str	r1, [sp, #20]
    95ac:	f000 8257 	beq.w	9a5e <z_cbvprintf_impl+0xb0e>
			nj_len += 2U;
    95b0:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    95b2:	f012 0240 	ands.w	r2, r2, #64	; 0x40
		nj_len += conv->pad0_value;
    95b6:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
    95ba:	9208      	str	r2, [sp, #32]
			nj_len += conv->pad0_pre_exp;
    95bc:	bf18      	it	ne
    95be:	9a14      	ldrne	r2, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    95c0:	4443      	add	r3, r8
			nj_len += conv->pad0_pre_exp;
    95c2:	bf18      	it	ne
    95c4:	189b      	addne	r3, r3, r2
		if (width > 0) {
    95c6:	9a04      	ldr	r2, [sp, #16]
		nj_len += conv->pad0_value;
    95c8:	f8cd 801c 	str.w	r8, [sp, #28]
		if (width > 0) {
    95cc:	2a00      	cmp	r2, #0
    95ce:	f340 8261 	ble.w	9a94 <z_cbvprintf_impl+0xb44>
			width -= (int)nj_len;
    95d2:	1ad3      	subs	r3, r2, r3
    95d4:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
    95d6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    95da:	0758      	lsls	r0, r3, #29
    95dc:	f3c3 0b80 	ubfx	fp, r3, #2, #1
    95e0:	f100 8258 	bmi.w	9a94 <z_cbvprintf_impl+0xb44>
				if (conv->flag_zero) {
    95e4:	0659      	lsls	r1, r3, #25
    95e6:	f140 8248 	bpl.w	9a7a <z_cbvprintf_impl+0xb2a>
					if (sign != 0) {
    95ea:	f1b9 0f00 	cmp.w	r9, #0
    95ee:	d007      	beq.n	9600 <z_cbvprintf_impl+0x6b0>
						OUTC(sign);
    95f0:	4648      	mov	r0, r9
    95f2:	9903      	ldr	r1, [sp, #12]
    95f4:	47d0      	blx	sl
    95f6:	2800      	cmp	r0, #0
    95f8:	f2c0 823c 	blt.w	9a74 <z_cbvprintf_impl+0xb24>
						sign = 0;
    95fc:	46d9      	mov	r9, fp
						OUTC(sign);
    95fe:	3501      	adds	r5, #1
					pad = '0';
    9600:	2330      	movs	r3, #48	; 0x30
    9602:	e23b      	b.n	9a7c <z_cbvprintf_impl+0xb2c>
				len = strlen(bps);
    9604:	4630      	mov	r0, r6
    9606:	f7ff fc9a 	bl	8f3e <strlen>
    960a:	e7c6      	b.n	959a <z_cbvprintf_impl+0x64a>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    960c:	9b10      	ldr	r3, [sp, #64]	; 0x40
		char sign = 0;
    960e:	f04f 0900 	mov.w	r9, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    9612:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
			bpe = buf + 1;
    9616:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
		size_t nj_len = (bpe - bps);
    961a:	2301      	movs	r3, #1
			bps = buf;
    961c:	ae17      	add	r6, sp, #92	; 0x5c
    961e:	e7c0      	b.n	95a2 <z_cbvprintf_impl+0x652>
			if (conv->flag_plus) {
    9620:	9b07      	ldr	r3, [sp, #28]
    9622:	071a      	lsls	r2, r3, #28
			} else if (conv->flag_space) {
    9624:	bf54      	ite	pl
    9626:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
				sign = '+';
    962a:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			sint = value->sint;
    962e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
    9632:	bf58      	it	pl
    9634:	ea4f 1949 	movpl.w	r9, r9, lsl #5
			if (sint < 0) {
    9638:	2b00      	cmp	r3, #0
    963a:	da06      	bge.n	964a <z_cbvprintf_impl+0x6fa>
				sign = '-';
    963c:	f04f 092d 	mov.w	r9, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    9640:	4252      	negs	r2, r2
    9642:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    9646:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			bps = encode_uint(value->uint, conv, buf, bpe);
    964a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    964e:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    9652:	9300      	str	r3, [sp, #0]
    9654:	aa12      	add	r2, sp, #72	; 0x48
    9656:	ab17      	add	r3, sp, #92	; 0x5c
    9658:	f003 fb52 	bl	cd00 <encode_uint>
    965c:	4606      	mov	r6, r0
			if (precision >= 0) {
    965e:	2f00      	cmp	r7, #0
    9660:	db0c      	blt.n	967c <z_cbvprintf_impl+0x72c>
				conv->flag_zero = false;
    9662:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    9666:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    966a:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
    966c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    9670:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    9672:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    9676:	d901      	bls.n	967c <z_cbvprintf_impl+0x72c>
					conv->pad0_value = precision - (int)len;
    9678:	1afb      	subs	r3, r7, r3
    967a:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
    967c:	2e00      	cmp	r6, #0
    967e:	f43f ae9b 	beq.w	93b8 <z_cbvprintf_impl+0x468>
    9682:	f10d 0775 	add.w	r7, sp, #117	; 0x75
    9686:	e05b      	b.n	9740 <z_cbvprintf_impl+0x7f0>
		switch (conv->specifier) {
    9688:	f04f 0900 	mov.w	r9, #0
    968c:	e7dd      	b.n	964a <z_cbvprintf_impl+0x6fa>
			if (value->ptr != NULL) {
    968e:	9810      	ldr	r0, [sp, #64]	; 0x40
    9690:	2800      	cmp	r0, #0
    9692:	f000 81df 	beq.w	9a54 <z_cbvprintf_impl+0xb04>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    9696:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    969a:	9300      	str	r3, [sp, #0]
    969c:	2100      	movs	r1, #0
    969e:	ab17      	add	r3, sp, #92	; 0x5c
    96a0:	aa12      	add	r2, sp, #72	; 0x48
    96a2:	f003 fb2d 	bl	cd00 <encode_uint>
				conv->altform_0c = true;
    96a6:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
				bps = encode_uint((uintptr_t)value->ptr, conv,
    96aa:	4606      	mov	r6, r0
				conv->altform_0c = true;
    96ac:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    96b0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    96b4:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    96b8:	f04f 0900 	mov.w	r9, #0
				conv->altform_0c = true;
    96bc:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
				goto prec_int_pad0;
    96c0:	e7cd      	b.n	965e <z_cbvprintf_impl+0x70e>
				store_count(conv, value->ptr, count);
    96c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    96c4:	2b07      	cmp	r3, #7
    96c6:	f63f ae77 	bhi.w	93b8 <z_cbvprintf_impl+0x468>
    96ca:	e8df f003 	tbb	[pc, r3]
    96ce:	040c      	.short	0x040c
    96d0:	08080c06 	.word	0x08080c06
    96d4:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    96d6:	7015      	strb	r5, [r2, #0]
		break;
    96d8:	e66e      	b.n	93b8 <z_cbvprintf_impl+0x468>
		*(short *)dp = (short)count;
    96da:	8015      	strh	r5, [r2, #0]
		break;
    96dc:	e66c      	b.n	93b8 <z_cbvprintf_impl+0x468>
		*(intmax_t *)dp = (intmax_t)count;
    96de:	17eb      	asrs	r3, r5, #31
    96e0:	e9c2 5300 	strd	r5, r3, [r2]
		break;
    96e4:	e668      	b.n	93b8 <z_cbvprintf_impl+0x468>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    96e6:	6015      	str	r5, [r2, #0]
		break;
    96e8:	e666      	b.n	93b8 <z_cbvprintf_impl+0x468>
		*sign = '-';
    96ea:	f04f 092d 	mov.w	r9, #45	; 0x2d
    96ee:	e6cd      	b.n	948c <z_cbvprintf_impl+0x53c>
		*sign = '+';
    96f0:	f04f 092b 	mov.w	r9, #43	; 0x2b
    96f4:	e6ca      	b.n	948c <z_cbvprintf_impl+0x53c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    96f6:	f240 76ff 	movw	r6, #2047	; 0x7ff
    96fa:	42b0      	cmp	r0, r6
    96fc:	d12f      	bne.n	975e <z_cbvprintf_impl+0x80e>
			if (isupper((unsigned char)c) != 0) {
    96fe:	48a0      	ldr	r0, [pc, #640]	; (9980 <z_cbvprintf_impl+0xa30>)
    9700:	f10b 0201 	add.w	r2, fp, #1
    9704:	b2d2      	uxtb	r2, r2
    9706:	5c82      	ldrb	r2, [r0, r2]
		if (fract == 0) {
    9708:	430b      	orrs	r3, r1
    970a:	f002 0203 	and.w	r2, r2, #3
    970e:	d11e      	bne.n	974e <z_cbvprintf_impl+0x7fe>
			if (isupper((unsigned char)c) != 0) {
    9710:	2a01      	cmp	r2, #1
    9712:	bf0b      	itete	eq
    9714:	2349      	moveq	r3, #73	; 0x49
    9716:	2369      	movne	r3, #105	; 0x69
    9718:	214e      	moveq	r1, #78	; 0x4e
    971a:	216e      	movne	r1, #110	; 0x6e
    971c:	bf0c      	ite	eq
    971e:	2246      	moveq	r2, #70	; 0x46
    9720:	2266      	movne	r2, #102	; 0x66
				*buf++ = 'I';
    9722:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
    9726:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
    972a:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
    972e:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
    9732:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
    9736:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
    973a:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
    973e:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    9740:	1bbb      	subs	r3, r7, r6
		if (sign != 0) {
    9742:	f1b9 0f00 	cmp.w	r9, #0
    9746:	f43f af2c 	beq.w	95a2 <z_cbvprintf_impl+0x652>
			nj_len += 1U;
    974a:	3301      	adds	r3, #1
    974c:	e729      	b.n	95a2 <z_cbvprintf_impl+0x652>
			if (isupper((unsigned char)c) != 0) {
    974e:	2a01      	cmp	r2, #1
    9750:	bf15      	itete	ne
    9752:	236e      	movne	r3, #110	; 0x6e
    9754:	234e      	moveq	r3, #78	; 0x4e
    9756:	2161      	movne	r1, #97	; 0x61
    9758:	2141      	moveq	r1, #65	; 0x41
    975a:	461a      	mov	r2, r3
    975c:	e7e1      	b.n	9722 <z_cbvprintf_impl+0x7d2>
	bool is_subnormal = (expo == 0) && (fract != 0);
    975e:	2600      	movs	r6, #0
    9760:	e6a0      	b.n	94a4 <z_cbvprintf_impl+0x554>
				expo--;
    9762:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    9764:	1849      	adds	r1, r1, r1
    9766:	415b      	adcs	r3, r3
    9768:	2b00      	cmp	r3, #0
    976a:	dafa      	bge.n	9762 <z_cbvprintf_impl+0x812>
    976c:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
    9770:	e6ae      	b.n	94d0 <z_cbvprintf_impl+0x580>
			fract >>= 1;
    9772:	0849      	lsrs	r1, r1, #1
    9774:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
    9778:	085b      	lsrs	r3, r3, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    977a:	f1b3 3f33 	cmp.w	r3, #858993459	; 0x33333333
    977e:	4640      	mov	r0, r8
			expo++;
    9780:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    9784:	d2f5      	bcs.n	9772 <z_cbvprintf_impl+0x822>
		expo++;
    9786:	f100 0802 	add.w	r8, r0, #2
		decexp--;
    978a:	2001      	movs	r0, #1
		fract *= 5U;
    978c:	fb0c fe03 	mul.w	lr, ip, r3
    9790:	fba1 130c 	umull	r1, r3, r1, ip
		decexp--;
    9794:	3e01      	subs	r6, #1
		fract *= 5U;
    9796:	4473      	add	r3, lr
	while (expo < -2) {
    9798:	f118 0f02 	cmn.w	r8, #2
    979c:	dbe9      	blt.n	9772 <z_cbvprintf_impl+0x822>
    979e:	b108      	cbz	r0, 97a4 <z_cbvprintf_impl+0x854>
    97a0:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
		fract += 2;
    97a4:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
	while (expo > 0) {
    97a8:	f1b8 0f00 	cmp.w	r8, #0
    97ac:	dc2c      	bgt.n	9808 <z_cbvprintf_impl+0x8b8>
	fract >>= (4 - expo);
    97ae:	f1c8 0004 	rsb	r0, r8, #4
    97b2:	f1a0 0c20 	sub.w	ip, r0, #32
    97b6:	f108 081c 	add.w	r8, r8, #28
    97ba:	40c3      	lsrs	r3, r0
    97bc:	fa01 f808 	lsl.w	r8, r1, r8
    97c0:	fa21 fc0c 	lsr.w	ip, r1, ip
    97c4:	40c1      	lsrs	r1, r0
	if ((c == 'g') || (c == 'G')) {
    97c6:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
    97ca:	ea43 0308 	orr.w	r3, r3, r8
	if ((c == 'g') || (c == 'G')) {
    97ce:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
    97d0:	ea43 030c 	orr.w	r3, r3, ip
	if ((c == 'g') || (c == 'G')) {
    97d4:	d138      	bne.n	9848 <z_cbvprintf_impl+0x8f8>
		if (decexp < (-4 + 1) || decexp > precision) {
    97d6:	1cf0      	adds	r0, r6, #3
    97d8:	db01      	blt.n	97de <z_cbvprintf_impl+0x88e>
    97da:	42b7      	cmp	r7, r6
    97dc:	da2a      	bge.n	9834 <z_cbvprintf_impl+0x8e4>
			c += 'e' - 'g';  /* e or E */
    97de:	f1ab 0202 	sub.w	r2, fp, #2
			if (precision > 0) {
    97e2:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    97e4:	fa5f fb82 	uxtb.w	fp, r2
			if (precision > 0) {
    97e8:	dd7b      	ble.n	98e2 <z_cbvprintf_impl+0x992>
		if (!conv->flag_hash && (precision > 0)) {
    97ea:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
				precision--;
    97ee:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
    97f0:	0682      	lsls	r2, r0, #26
    97f2:	d476      	bmi.n	98e2 <z_cbvprintf_impl+0x992>
    97f4:	1e3a      	subs	r2, r7, #0
    97f6:	bf18      	it	ne
    97f8:	2201      	movne	r2, #1
	bool prune_zero = false;
    97fa:	9205      	str	r2, [sp, #20]
		decimals = precision + 1;
    97fc:	f107 0801 	add.w	r8, r7, #1
    9800:	e02c      	b.n	985c <z_cbvprintf_impl+0x90c>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    9802:	f04f 0800 	mov.w	r8, #0
    9806:	e669      	b.n	94dc <z_cbvprintf_impl+0x58c>
		fract += 2;
    9808:	3302      	adds	r3, #2
    980a:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    980e:	a80c      	add	r0, sp, #48	; 0x30
		expo--;
    9810:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
    9814:	3601      	adds	r6, #1
		fract += 2;
    9816:	e9cd 310c 	strd	r3, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
    981a:	f014 ff36 	bl	1e68a <_ldiv5>
		decexp++;
    981e:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
			fract <<= 1;
    9822:	18db      	adds	r3, r3, r3
    9824:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    9826:	2900      	cmp	r1, #0
			expo--;
    9828:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
    982c:	daf9      	bge.n	9822 <z_cbvprintf_impl+0x8d2>
    982e:	e9cd 310c 	strd	r3, r1, [sp, #48]	; 0x30
    9832:	e7b7      	b.n	97a4 <z_cbvprintf_impl+0x854>
		if (!conv->flag_hash && (precision > 0)) {
    9834:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			precision -= decexp;
    9838:	1bbf      	subs	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
    983a:	0690      	lsls	r0, r2, #26
    983c:	d44f      	bmi.n	98de <z_cbvprintf_impl+0x98e>
    983e:	1e3a      	subs	r2, r7, #0
    9840:	bf18      	it	ne
    9842:	2201      	movne	r2, #1
	bool prune_zero = false;
    9844:	9205      	str	r2, [sp, #20]
    9846:	e004      	b.n	9852 <z_cbvprintf_impl+0x902>
    9848:	2200      	movs	r2, #0
	if (c == 'f') {
    984a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
    984e:	9205      	str	r2, [sp, #20]
	if (c == 'f') {
    9850:	d1d4      	bne.n	97fc <z_cbvprintf_impl+0x8ac>
		if (decimals < 0) {
    9852:	eb17 0806 	adds.w	r8, r7, r6
    9856:	f04f 0b66 	mov.w	fp, #102	; 0x66
    985a:	d444      	bmi.n	98e6 <z_cbvprintf_impl+0x996>
	if (decimals > 16) {
    985c:	f1b8 0f10 	cmp.w	r8, #16
    9860:	bfa8      	it	ge
    9862:	f04f 0810 	movge.w	r8, #16
	uint64_t round = BIT64(59); /* 0.5 */
    9866:	ed9f 7b44 	vldr	d7, [pc, #272]	; 9978 <z_cbvprintf_impl+0xa28>
    986a:	2010      	movs	r0, #16
    986c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    9870:	900b      	str	r0, [sp, #44]	; 0x2c
	*v >>= 1;
    9872:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
	while (decimals--) {
    9876:	f1b8 0f00 	cmp.w	r8, #0
    987a:	d137      	bne.n	98ec <z_cbvprintf_impl+0x99c>
	fract += round;
    987c:	18c0      	adds	r0, r0, r3
    987e:	eb42 0301 	adc.w	r3, r2, r1
	if (fract >= BIT64(60)) {
    9882:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    9886:	d241      	bcs.n	990c <z_cbvprintf_impl+0x9bc>
	fract += round;
    9888:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
    988c:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
    988e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
    9892:	f003 0320 	and.w	r3, r3, #32
	if (c == 'f') {
    9896:	f040 80bc 	bne.w	9a12 <z_cbvprintf_impl+0xac2>
		if (decexp > 0) {
    989a:	2e00      	cmp	r6, #0
    989c:	dc41      	bgt.n	9922 <z_cbvprintf_impl+0x9d2>
			*buf++ = '0';
    989e:	2130      	movs	r1, #48	; 0x30
    98a0:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
    98a4:	2b00      	cmp	r3, #0
    98a6:	d16d      	bne.n	9984 <z_cbvprintf_impl+0xa34>
    98a8:	2f00      	cmp	r7, #0
    98aa:	f340 81b4 	ble.w	9c16 <z_cbvprintf_impl+0xcc6>
			*buf++ = '.';
    98ae:	232e      	movs	r3, #46	; 0x2e
    98b0:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    98b4:	b186      	cbz	r6, 98d8 <z_cbvprintf_impl+0x988>
			conv->pad0_value = -decexp;
    98b6:	4273      	negs	r3, r6
    98b8:	42bb      	cmp	r3, r7
    98ba:	bfa8      	it	ge
    98bc:	463b      	movge	r3, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    98be:	2b00      	cmp	r3, #0
    98c0:	9313      	str	r3, [sp, #76]	; 0x4c
			precision -= conv->pad0_value;
    98c2:	eba7 0703 	sub.w	r7, r7, r3
			conv->pad_postdp = (conv->pad0_value > 0);
    98c6:	bfd4      	ite	le
    98c8:	2300      	movle	r3, #0
    98ca:	2301      	movgt	r3, #1
    98cc:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    98d0:	f363 1145 	bfi	r1, r3, #5, #1
    98d4:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
    98d8:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
    98dc:	e039      	b.n	9952 <z_cbvprintf_impl+0xa02>
	bool prune_zero = false;
    98de:	2200      	movs	r2, #0
    98e0:	e7b0      	b.n	9844 <z_cbvprintf_impl+0x8f4>
    98e2:	2200      	movs	r2, #0
    98e4:	e789      	b.n	97fa <z_cbvprintf_impl+0x8aa>
			decimals = 0;
    98e6:	f04f 0800 	mov.w	r8, #0
    98ea:	e7bc      	b.n	9866 <z_cbvprintf_impl+0x916>
	*v >>= 1;
    98ec:	0840      	lsrs	r0, r0, #1
    98ee:	ea40 70c2 	orr.w	r0, r0, r2, lsl #31
    98f2:	0852      	lsrs	r2, r2, #1
    98f4:	e9cd 020e 	strd	r0, r2, [sp, #56]	; 0x38
	_ldiv5(v);
    98f8:	a80e      	add	r0, sp, #56	; 0x38
    98fa:	e9cd 3108 	strd	r3, r1, [sp, #32]
    98fe:	f108 38ff 	add.w	r8, r8, #4294967295
    9902:	f014 fec2 	bl	1e68a <_ldiv5>
    9906:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
}
    990a:	e7b2      	b.n	9872 <z_cbvprintf_impl+0x922>
	*v >>= 1;
    990c:	0840      	lsrs	r0, r0, #1
    990e:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
    9912:	085b      	lsrs	r3, r3, #1
    9914:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
	_ldiv5(v);
    9918:	a80c      	add	r0, sp, #48	; 0x30
    991a:	f014 feb6 	bl	1e68a <_ldiv5>
		decexp++;
    991e:	3601      	adds	r6, #1
    9920:	e7b4      	b.n	988c <z_cbvprintf_impl+0x93c>
	char *buf = bps;
    9922:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
    9926:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9928:	2900      	cmp	r1, #0
    992a:	dd09      	ble.n	9940 <z_cbvprintf_impl+0x9f0>
				*buf++ = _get_digit(&fract, &digit_count);
    992c:	a90b      	add	r1, sp, #44	; 0x2c
    992e:	a80c      	add	r0, sp, #48	; 0x30
    9930:	9307      	str	r3, [sp, #28]
    9932:	f014 fec2 	bl	1e6ba <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    9936:	3e01      	subs	r6, #1
    9938:	9b07      	ldr	r3, [sp, #28]
				*buf++ = _get_digit(&fract, &digit_count);
    993a:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
    993e:	d1f2      	bne.n	9926 <z_cbvprintf_impl+0x9d6>
			conv->pad0_value = decexp;
    9940:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
    9942:	b99b      	cbnz	r3, 996c <z_cbvprintf_impl+0xa1c>
    9944:	2f00      	cmp	r7, #0
    9946:	f340 8164 	ble.w	9c12 <z_cbvprintf_impl+0xcc2>
			*buf++ = '.';
    994a:	212e      	movs	r1, #46	; 0x2e
    994c:	f808 1b01 	strb.w	r1, [r8], #1
    9950:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
    9952:	2f00      	cmp	r7, #0
    9954:	dd1f      	ble.n	9996 <z_cbvprintf_impl+0xa46>
    9956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9958:	2b00      	cmp	r3, #0
    995a:	dd1c      	ble.n	9996 <z_cbvprintf_impl+0xa46>
		*buf++ = _get_digit(&fract, &digit_count);
    995c:	a90b      	add	r1, sp, #44	; 0x2c
    995e:	a80c      	add	r0, sp, #48	; 0x30
    9960:	f014 feab 	bl	1e6ba <_get_digit>
		precision--;
    9964:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
    9966:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
    996a:	e7f2      	b.n	9952 <z_cbvprintf_impl+0xa02>
			*buf++ = '.';
    996c:	232e      	movs	r3, #46	; 0x2e
    996e:	f808 3b01 	strb.w	r3, [r8], #1
    9972:	e7ed      	b.n	9950 <z_cbvprintf_impl+0xa00>
    9974:	f3af 8000 	nop.w
    9978:	00000000 	.word	0x00000000
    997c:	08000000 	.word	0x08000000
    9980:	00027ac7 	.word	0x00027ac7
    9984:	232e      	movs	r3, #46	; 0x2e
    9986:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    998a:	2e00      	cmp	r6, #0
    998c:	d0a4      	beq.n	98d8 <z_cbvprintf_impl+0x988>
    998e:	2f00      	cmp	r7, #0
    9990:	dc91      	bgt.n	98b6 <z_cbvprintf_impl+0x966>
			*buf++ = '.';
    9992:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
    9996:	9b05      	ldr	r3, [sp, #20]
    9998:	2b00      	cmp	r3, #0
    999a:	d14e      	bne.n	9a3a <z_cbvprintf_impl+0xaea>
	conv->pad0_pre_exp = precision;
    999c:	9714      	str	r7, [sp, #80]	; 0x50
    999e:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
    99a0:	f00b 03df 	and.w	r3, fp, #223	; 0xdf
    99a4:	2b45      	cmp	r3, #69	; 0x45
    99a6:	d123      	bne.n	99f0 <z_cbvprintf_impl+0xaa0>
		if (decexp < 0) {
    99a8:	2e00      	cmp	r6, #0
			decexp = -decexp;
    99aa:	bfba      	itte	lt
    99ac:	4276      	neglt	r6, r6
			*buf++ = '-';
    99ae:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    99b0:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    99b2:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
    99b4:	bfc8      	it	gt
    99b6:	2164      	movgt	r1, #100	; 0x64
    99b8:	707b      	strb	r3, [r7, #1]
    99ba:	bfc4      	itt	gt
    99bc:	fbb6 f3f1 	udivgt	r3, r6, r1
			decexp %= 100;
    99c0:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    99c4:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
    99c8:	bfc8      	it	gt
    99ca:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    99ce:	fbb6 f3f1 	udiv	r3, r6, r1
			*buf++ = '-';
    99d2:	bfd2      	itee	le
    99d4:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
    99d6:	1cfa      	addgt	r2, r7, #3
    99d8:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
    99da:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
    99de:	4617      	mov	r7, r2
    99e0:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    99e4:	fb01 6313 	mls	r3, r1, r3, r6
    99e8:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    99ea:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
    99ee:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
    99f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    99f2:	2b00      	cmp	r3, #0
    99f4:	dc2c      	bgt.n	9a50 <z_cbvprintf_impl+0xb00>
    99f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    99f8:	2b00      	cmp	r3, #0
    99fa:	bfd4      	ite	le
    99fc:	2300      	movle	r3, #0
    99fe:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    9a00:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    9a04:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    9a08:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    9a0a:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
    9a0e:	703b      	strb	r3, [r7, #0]
	return bps;
    9a10:	e695      	b.n	973e <z_cbvprintf_impl+0x7ee>
		*buf = _get_digit(&fract, &digit_count);
    9a12:	a90b      	add	r1, sp, #44	; 0x2c
    9a14:	a80c      	add	r0, sp, #48	; 0x30
    9a16:	9307      	str	r3, [sp, #28]
    9a18:	f014 fe4f 	bl	1e6ba <_get_digit>
		if (*buf++ != '0') {
    9a1c:	9b07      	ldr	r3, [sp, #28]
    9a1e:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    9a20:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
			decexp--;
    9a24:	bf18      	it	ne
    9a26:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
    9a2a:	b913      	cbnz	r3, 9a32 <z_cbvprintf_impl+0xae2>
    9a2c:	2f00      	cmp	r7, #0
    9a2e:	f340 80f2 	ble.w	9c16 <z_cbvprintf_impl+0xcc6>
			*buf++ = '.';
    9a32:	232e      	movs	r3, #46	; 0x2e
    9a34:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
    9a38:	e74e      	b.n	98d8 <z_cbvprintf_impl+0x988>
		while (*--buf == '0') {
    9a3a:	4647      	mov	r7, r8
    9a3c:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    9a40:	f108 38ff 	add.w	r8, r8, #4294967295
    9a44:	2b30      	cmp	r3, #48	; 0x30
    9a46:	d0f8      	beq.n	9a3a <z_cbvprintf_impl+0xaea>
    9a48:	2b2e      	cmp	r3, #46	; 0x2e
    9a4a:	bf08      	it	eq
    9a4c:	4647      	moveq	r7, r8
    9a4e:	e7a7      	b.n	99a0 <z_cbvprintf_impl+0xa50>
		|| (conv->pad0_pre_exp > 0);
    9a50:	2301      	movs	r3, #1
    9a52:	e7d5      	b.n	9a00 <z_cbvprintf_impl+0xab0>
			bpe = bps + 5;
    9a54:	4f71      	ldr	r7, [pc, #452]	; (9c1c <z_cbvprintf_impl+0xccc>)
		char sign = 0;
    9a56:	4681      	mov	r9, r0
		size_t nj_len = (bpe - bps);
    9a58:	2305      	movs	r3, #5
			bps = "(nil)";
    9a5a:	1f7e      	subs	r6, r7, #5
    9a5c:	e5a1      	b.n	95a2 <z_cbvprintf_impl+0x652>
		} else if (conv->altform_0) {
    9a5e:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    9a60:	bf48      	it	mi
    9a62:	3301      	addmi	r3, #1
    9a64:	e5a5      	b.n	95b2 <z_cbvprintf_impl+0x662>
					OUTC(pad);
    9a66:	4618      	mov	r0, r3
    9a68:	9309      	str	r3, [sp, #36]	; 0x24
    9a6a:	9903      	ldr	r1, [sp, #12]
    9a6c:	47d0      	blx	sl
    9a6e:	2800      	cmp	r0, #0
    9a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9a72:	da05      	bge.n	9a80 <z_cbvprintf_impl+0xb30>
#undef OUTS
#undef OUTC
}
    9a74:	b01f      	add	sp, #124	; 0x7c
    9a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    9a7a:	2320      	movs	r3, #32
					pad = '0';
    9a7c:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
    9a80:	465a      	mov	r2, fp
    9a82:	2a00      	cmp	r2, #0
    9a84:	f10b 3bff 	add.w	fp, fp, #4294967295
    9a88:	dced      	bgt.n	9a66 <z_cbvprintf_impl+0xb16>
    9a8a:	9b04      	ldr	r3, [sp, #16]
    9a8c:	f8cd b010 	str.w	fp, [sp, #16]
    9a90:	442b      	add	r3, r5
    9a92:	1a9d      	subs	r5, r3, r2
		if (sign != 0) {
    9a94:	f1b9 0f00 	cmp.w	r9, #0
    9a98:	d005      	beq.n	9aa6 <z_cbvprintf_impl+0xb56>
			OUTC(sign);
    9a9a:	4648      	mov	r0, r9
    9a9c:	9903      	ldr	r1, [sp, #12]
    9a9e:	47d0      	blx	sl
    9aa0:	2800      	cmp	r0, #0
    9aa2:	dbe7      	blt.n	9a74 <z_cbvprintf_impl+0xb24>
    9aa4:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    9aa6:	9b08      	ldr	r3, [sp, #32]
    9aa8:	2b00      	cmp	r3, #0
    9aaa:	d077      	beq.n	9b9c <z_cbvprintf_impl+0xc4c>
			if (conv->specifier_a) {
    9aac:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
    9ab0:	2b00      	cmp	r3, #0
    9ab2:	db28      	blt.n	9b06 <z_cbvprintf_impl+0xbb6>
    9ab4:	4633      	mov	r3, r6
				while (isdigit((unsigned char)*cp) != 0) {
    9ab6:	f8df 9168 	ldr.w	r9, [pc, #360]	; 9c20 <z_cbvprintf_impl+0xcd0>
    9aba:	7818      	ldrb	r0, [r3, #0]
    9abc:	469b      	mov	fp, r3
    9abe:	f819 2000 	ldrb.w	r2, [r9, r0]
    9ac2:	3301      	adds	r3, #1
    9ac4:	0752      	lsls	r2, r2, #29
    9ac6:	d43f      	bmi.n	9b48 <z_cbvprintf_impl+0xbf8>
				if (!conv->pad_postdp) {
    9ac8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    9acc:	1bae      	subs	r6, r5, r6
    9ace:	0698      	lsls	r0, r3, #26
    9ad0:	445e      	add	r6, fp
    9ad2:	d407      	bmi.n	9ae4 <z_cbvprintf_impl+0xb94>
					while (pad_len-- > 0) {
    9ad4:	4642      	mov	r2, r8
    9ad6:	2a00      	cmp	r2, #0
    9ad8:	f108 38ff 	add.w	r8, r8, #4294967295
    9adc:	dc3b      	bgt.n	9b56 <z_cbvprintf_impl+0xc06>
    9ade:	9b07      	ldr	r3, [sp, #28]
    9ae0:	4433      	add	r3, r6
    9ae2:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
    9ae4:	f89b 0000 	ldrb.w	r0, [fp]
    9ae8:	282e      	cmp	r0, #46	; 0x2e
    9aea:	d10a      	bne.n	9b02 <z_cbvprintf_impl+0xbb2>
					OUTC(*cp++);
    9aec:	9903      	ldr	r1, [sp, #12]
    9aee:	47d0      	blx	sl
						OUTC('0');
    9af0:	2800      	cmp	r0, #0
    9af2:	dbbf      	blt.n	9a74 <z_cbvprintf_impl+0xb24>
					while (pad_len-- > 0) {
    9af4:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
    9af8:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    9afc:	dc31      	bgt.n	9b62 <z_cbvprintf_impl+0xc12>
					OUTC(*cp++);
    9afe:	f10b 0b01 	add.w	fp, fp, #1
			if (conv->specifier_a) {
    9b02:	465d      	mov	r5, fp
    9b04:	e038      	b.n	9b78 <z_cbvprintf_impl+0xc28>
    9b06:	46b1      	mov	r9, r6
				while (*cp != 'p') {
    9b08:	f899 0000 	ldrb.w	r0, [r9]
    9b0c:	46c8      	mov	r8, r9
    9b0e:	2870      	cmp	r0, #112	; 0x70
    9b10:	f109 0901 	add.w	r9, r9, #1
    9b14:	d113      	bne.n	9b3e <z_cbvprintf_impl+0xbee>
    9b16:	1bae      	subs	r6, r5, r6
    9b18:	9d14      	ldr	r5, [sp, #80]	; 0x50
    9b1a:	4446      	add	r6, r8
			while (pad_len-- > 0) {
    9b1c:	4435      	add	r5, r6
    9b1e:	1bab      	subs	r3, r5, r6
    9b20:	2b00      	cmp	r3, #0
    9b22:	dc33      	bgt.n	9b8c <z_cbvprintf_impl+0xc3c>
			OUTS(cp, bpe);
    9b24:	463b      	mov	r3, r7
    9b26:	4642      	mov	r2, r8
    9b28:	4650      	mov	r0, sl
    9b2a:	9903      	ldr	r1, [sp, #12]
    9b2c:	f014 fddc 	bl	1e6e8 <outs>
    9b30:	2800      	cmp	r0, #0
    9b32:	db9f      	blt.n	9a74 <z_cbvprintf_impl+0xb24>
    9b34:	4430      	add	r0, r6
    9b36:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
    9b38:	4605      	mov	r5, r0
    9b3a:	4406      	add	r6, r0
    9b3c:	e064      	b.n	9c08 <z_cbvprintf_impl+0xcb8>
					OUTC(*cp++);
    9b3e:	9903      	ldr	r1, [sp, #12]
    9b40:	47d0      	blx	sl
    9b42:	2800      	cmp	r0, #0
    9b44:	dae0      	bge.n	9b08 <z_cbvprintf_impl+0xbb8>
    9b46:	e795      	b.n	9a74 <z_cbvprintf_impl+0xb24>
    9b48:	9305      	str	r3, [sp, #20]
					OUTC(*cp++);
    9b4a:	9903      	ldr	r1, [sp, #12]
    9b4c:	47d0      	blx	sl
    9b4e:	2800      	cmp	r0, #0
    9b50:	9b05      	ldr	r3, [sp, #20]
    9b52:	dab2      	bge.n	9aba <z_cbvprintf_impl+0xb6a>
    9b54:	e78e      	b.n	9a74 <z_cbvprintf_impl+0xb24>
						OUTC('0');
    9b56:	2030      	movs	r0, #48	; 0x30
    9b58:	9903      	ldr	r1, [sp, #12]
    9b5a:	47d0      	blx	sl
    9b5c:	2800      	cmp	r0, #0
    9b5e:	dab9      	bge.n	9ad4 <z_cbvprintf_impl+0xb84>
    9b60:	e788      	b.n	9a74 <z_cbvprintf_impl+0xb24>
						OUTC('0');
    9b62:	2030      	movs	r0, #48	; 0x30
    9b64:	9903      	ldr	r1, [sp, #12]
    9b66:	47d0      	blx	sl
    9b68:	f108 38ff 	add.w	r8, r8, #4294967295
    9b6c:	e7c0      	b.n	9af0 <z_cbvprintf_impl+0xba0>
					OUTC(*cp++);
    9b6e:	9903      	ldr	r1, [sp, #12]
    9b70:	47d0      	blx	sl
    9b72:	2800      	cmp	r0, #0
    9b74:	f6ff af7e 	blt.w	9a74 <z_cbvprintf_impl+0xb24>
				while (isdigit((unsigned char)*cp) != 0) {
    9b78:	7828      	ldrb	r0, [r5, #0]
    9b7a:	46a8      	mov	r8, r5
    9b7c:	f819 3000 	ldrb.w	r3, [r9, r0]
    9b80:	3501      	adds	r5, #1
    9b82:	0759      	lsls	r1, r3, #29
    9b84:	d4f3      	bmi.n	9b6e <z_cbvprintf_impl+0xc1e>
    9b86:	eba6 060b 	sub.w	r6, r6, fp
    9b8a:	e7c5      	b.n	9b18 <z_cbvprintf_impl+0xbc8>
				OUTC('0');
    9b8c:	2030      	movs	r0, #48	; 0x30
    9b8e:	9903      	ldr	r1, [sp, #12]
    9b90:	47d0      	blx	sl
    9b92:	2800      	cmp	r0, #0
    9b94:	f6ff af6e 	blt.w	9a74 <z_cbvprintf_impl+0xb24>
    9b98:	3601      	adds	r6, #1
    9b9a:	e7c0      	b.n	9b1e <z_cbvprintf_impl+0xbce>
			if (conv->altform_0c | conv->altform_0) {
    9b9c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    9ba0:	06da      	lsls	r2, r3, #27
    9ba2:	d401      	bmi.n	9ba8 <z_cbvprintf_impl+0xc58>
    9ba4:	071b      	lsls	r3, r3, #28
    9ba6:	d506      	bpl.n	9bb6 <z_cbvprintf_impl+0xc66>
				OUTC('0');
    9ba8:	2030      	movs	r0, #48	; 0x30
    9baa:	9903      	ldr	r1, [sp, #12]
    9bac:	47d0      	blx	sl
    9bae:	2800      	cmp	r0, #0
    9bb0:	f6ff af60 	blt.w	9a74 <z_cbvprintf_impl+0xb24>
    9bb4:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    9bb6:	9b05      	ldr	r3, [sp, #20]
    9bb8:	b13b      	cbz	r3, 9bca <z_cbvprintf_impl+0xc7a>
				OUTC(conv->specifier);
    9bba:	9903      	ldr	r1, [sp, #12]
    9bbc:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    9bc0:	47d0      	blx	sl
    9bc2:	2800      	cmp	r0, #0
    9bc4:	f6ff af56 	blt.w	9a74 <z_cbvprintf_impl+0xb24>
    9bc8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    9bca:	44a8      	add	r8, r5
    9bcc:	e006      	b.n	9bdc <z_cbvprintf_impl+0xc8c>
				OUTC('0');
    9bce:	2030      	movs	r0, #48	; 0x30
    9bd0:	9903      	ldr	r1, [sp, #12]
    9bd2:	47d0      	blx	sl
    9bd4:	2800      	cmp	r0, #0
    9bd6:	f6ff af4d 	blt.w	9a74 <z_cbvprintf_impl+0xb24>
    9bda:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    9bdc:	eba8 0305 	sub.w	r3, r8, r5
    9be0:	2b00      	cmp	r3, #0
    9be2:	dcf4      	bgt.n	9bce <z_cbvprintf_impl+0xc7e>
			OUTS(bps, bpe);
    9be4:	463b      	mov	r3, r7
    9be6:	4632      	mov	r2, r6
    9be8:	4650      	mov	r0, sl
    9bea:	9903      	ldr	r1, [sp, #12]
    9bec:	f014 fd7c 	bl	1e6e8 <outs>
    9bf0:	2800      	cmp	r0, #0
    9bf2:	f6ff af3f 	blt.w	9a74 <z_cbvprintf_impl+0xb24>
    9bf6:	4428      	add	r0, r5
    9bf8:	e79d      	b.n	9b36 <z_cbvprintf_impl+0xbe6>
			OUTC(' ');
    9bfa:	2020      	movs	r0, #32
    9bfc:	9903      	ldr	r1, [sp, #12]
    9bfe:	47d0      	blx	sl
    9c00:	2800      	cmp	r0, #0
    9c02:	f6ff af37 	blt.w	9a74 <z_cbvprintf_impl+0xb24>
    9c06:	3501      	adds	r5, #1
		while (width > 0) {
    9c08:	1b73      	subs	r3, r6, r5
    9c0a:	2b00      	cmp	r3, #0
    9c0c:	dcf5      	bgt.n	9bfa <z_cbvprintf_impl+0xcaa>
    9c0e:	f7ff bbd3 	b.w	93b8 <z_cbvprintf_impl+0x468>
			decexp = 0;
    9c12:	461e      	mov	r6, r3
    9c14:	e6bf      	b.n	9996 <z_cbvprintf_impl+0xa46>
		if (*buf++ != '0') {
    9c16:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
    9c1a:	e6bc      	b.n	9996 <z_cbvprintf_impl+0xa46>
    9c1c:	00023f41 	.word	0x00023f41
    9c20:	00027ac8 	.word	0x00027ac8
    9c24:	00000000 	.word	0x00000000

00009c28 <zsock_poll_internal>:

	return timeout - elapsed;
}

int zsock_poll_internal(struct zsock_pollfd *fds, int nfds, k_timeout_t timeout)
{
    9c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c2c:	ed2d 8b02 	vpush	{d8}
    9c30:	460f      	mov	r7, r1
	const struct fd_op_vtable *vtable;
	struct k_mutex *lock;
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;
    9c32:	2600      	movs	r6, #0
{
    9c34:	b09b      	sub	sp, #108	; 0x6c
    9c36:	9003      	str	r0, [sp, #12]

	end = sys_clock_timeout_end_calc(timeout);
    9c38:	4619      	mov	r1, r3
    9c3a:	4610      	mov	r0, r2
{
    9c3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
	end = sys_clock_timeout_end_calc(timeout);
    9c40:	f017 fe4e 	bl	218e0 <sys_clock_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
    9c44:	46bb      	mov	fp, r7
	bool offload = false;
    9c46:	4634      	mov	r4, r6
			/* If POLL_PREPARE returned with EALREADY, it means
			 * it already detected that some socket is ready. In
			 * this case, we still perform a k_poll to pick up
			 * as many events as possible, but without any wait.
			 */
			timeout = K_NO_WAIT;
    9c48:	ed9f 8b73 	vldr	d8, [pc, #460]	; 9e18 <zsock_poll_internal+0x1f0>
	end = sys_clock_timeout_end_calc(timeout);
    9c4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
	pev = poll_events;
    9c50:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	for (pfd = fds, i = nfds; i--; pfd++) {
    9c54:	f8dd 900c 	ldr.w	r9, [sp, #12]
	pev = poll_events;
    9c58:	f8cd 8020 	str.w	r8, [sp, #32]
	const struct fd_op_vtable *offl_vtable = NULL;
    9c5c:	9602      	str	r6, [sp, #8]
	for (pfd = fds, i = nfds; i--; pfd++) {
    9c5e:	f1bb 0f00 	cmp.w	fp, #0
    9c62:	d123      	bne.n	9cac <zsock_poll_internal+0x84>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
    9c64:	2c00      	cmp	r4, #0
    9c66:	d066      	beq.n	9d36 <zsock_poll_internal+0x10e>
		int poll_timeout;

		if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9c68:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
    9c6c:	f1b2 3fff 	cmp.w	r2, #4294967295
    9c70:	bf08      	it	eq
    9c72:	f1b3 3fff 	cmpeq.w	r3, #4294967295
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    9c76:	bf17      	itett	ne
    9c78:	f44f 727a 	movne.w	r2, #1000	; 0x3e8
			poll_timeout = SYS_FOREVER_MS;
    9c7c:	f04f 33ff 	moveq.w	r3, #4294967295
    9c80:	fba3 3202 	umullne	r3, r2, r3, r2
    9c84:	0bdb      	lsrne	r3, r3, #15
    9c86:	bf18      	it	ne
    9c88:	ea43 4342 	orrne.w	r3, r3, r2, lsl #17
		} else {
			poll_timeout = k_ticks_to_ms_floor32(timeout.ticks);
		}

		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
    9c8c:	e9cd 7300 	strd	r7, r3, [sp]
    9c90:	f44f 7282 	mov.w	r2, #260	; 0x104
    9c94:	4631      	mov	r1, r6
    9c96:	9b03      	ldr	r3, [sp, #12]
    9c98:	9802      	ldr	r0, [sp, #8]
    9c9a:	f014 fe03 	bl	1e8a4 <z_fdtable_call_ioctl>
    9c9e:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
    9ca0:	4620      	mov	r0, r4
    9ca2:	b01b      	add	sp, #108	; 0x6c
    9ca4:	ecbd 8b02 	vpop	{d8}
    9ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (pfd->fd < 0) {
    9cac:	f8d9 0000 	ldr.w	r0, [r9]
    9cb0:	2800      	cmp	r0, #0
    9cb2:	db20      	blt.n	9cf6 <zsock_poll_internal+0xce>
	ctx = z_get_fd_obj_and_vtable(sock,
    9cb4:	aa0a      	add	r2, sp, #40	; 0x28
    9cb6:	a909      	add	r1, sp, #36	; 0x24
    9cb8:	f002 fde6 	bl	c888 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
    9cbc:	4605      	mov	r5, r0
    9cbe:	b1d0      	cbz	r0, 9cf6 <zsock_poll_internal+0xce>
		(void)k_mutex_lock(lock, K_FOREVER);
    9cc0:	f04f 32ff 	mov.w	r2, #4294967295
    9cc4:	f04f 33ff 	mov.w	r3, #4294967295
    9cc8:	980a      	ldr	r0, [sp, #40]	; 0x28
    9cca:	f014 fe17 	bl	1e8fc <k_mutex_lock.constprop.0.isra.0>
		result = z_fdtable_call_ioctl(vtable, ctx,
    9cce:	ab1a      	add	r3, sp, #104	; 0x68
    9cd0:	9301      	str	r3, [sp, #4]
    9cd2:	ab08      	add	r3, sp, #32
    9cd4:	9300      	str	r3, [sp, #0]
    9cd6:	f44f 7281 	mov.w	r2, #258	; 0x102
    9cda:	464b      	mov	r3, r9
    9cdc:	4629      	mov	r1, r5
    9cde:	9809      	ldr	r0, [sp, #36]	; 0x24
    9ce0:	f014 fde0 	bl	1e8a4 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
    9ce4:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
    9ce8:	4682      	mov	sl, r0
		if (result == -EALREADY) {
    9cea:	d109      	bne.n	9d00 <zsock_poll_internal+0xd8>
		k_mutex_unlock(lock);
    9cec:	980a      	ldr	r0, [sp, #40]	; 0x28
			timeout = K_NO_WAIT;
    9cee:	ed8d 8b06 	vstr	d8, [sp, #24]
		k_mutex_unlock(lock);
    9cf2:	f014 fe05 	bl	1e900 <k_mutex_unlock.isra.0>
	for (pfd = fds, i = nfds; i--; pfd++) {
    9cf6:	f109 0908 	add.w	r9, r9, #8
    9cfa:	f10b 3bff 	add.w	fp, fp, #4294967295
    9cfe:	e7ae      	b.n	9c5e <zsock_poll_internal+0x36>
		} else if (result == -EXDEV) {
    9d00:	f11a 0f12 	cmn.w	sl, #18
		k_mutex_unlock(lock);
    9d04:	980a      	ldr	r0, [sp, #40]	; 0x28
		} else if (result == -EXDEV) {
    9d06:	d10b      	bne.n	9d20 <zsock_poll_internal+0xf8>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
    9d08:	9b02      	ldr	r3, [sp, #8]
    9d0a:	b11b      	cbz	r3, 9d14 <zsock_poll_internal+0xec>
		k_mutex_unlock(lock);
    9d0c:	f014 fdf8 	bl	1e900 <k_mutex_unlock.isra.0>
			offload = true;
    9d10:	2401      	movs	r4, #1
    9d12:	e7f0      	b.n	9cf6 <zsock_poll_internal+0xce>
				offl_vtable = vtable;
    9d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
		k_mutex_unlock(lock);
    9d16:	462e      	mov	r6, r5
				offl_vtable = vtable;
    9d18:	9302      	str	r3, [sp, #8]
		k_mutex_unlock(lock);
    9d1a:	f014 fdf1 	bl	1e900 <k_mutex_unlock.isra.0>
		if (result < 0) {
    9d1e:	e7f7      	b.n	9d10 <zsock_poll_internal+0xe8>
		k_mutex_unlock(lock);
    9d20:	f014 fdee 	bl	1e900 <k_mutex_unlock.isra.0>
		if (result < 0) {
    9d24:	f1ba 0f00 	cmp.w	sl, #0
    9d28:	dae5      	bge.n	9cf6 <zsock_poll_internal+0xce>
			errno = -result;
    9d2a:	f014 ffb9 	bl	1eca0 <__errno>
    9d2e:	f1ca 0300 	rsb	r3, sl, #0
				errno = -result;
    9d32:	6003      	str	r3, [r0, #0]
				return -1;
    9d34:	e020      	b.n	9d78 <zsock_poll_internal+0x150>
	timeout_recalc(end, &timeout);
    9d36:	aa06      	add	r2, sp, #24
    9d38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
		ret = k_poll(poll_events, pev - poll_events, timeout);
    9d3c:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 9e24 <zsock_poll_internal+0x1fc>
	timeout_recalc(end, &timeout);
    9d40:	f014 fdbf 	bl	1e8c2 <timeout_recalc>
		retry = false;
    9d44:	9402      	str	r4, [sp, #8]
		ret = k_poll(poll_events, pev - poll_events, timeout);
    9d46:	9908      	ldr	r1, [sp, #32]
    9d48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    9d4c:	eba1 0108 	sub.w	r1, r1, r8
    9d50:	1089      	asrs	r1, r1, #2
    9d52:	fb0a f101 	mul.w	r1, sl, r1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    9d56:	4640      	mov	r0, r8
    9d58:	f011 fb44 	bl	1b3e4 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
    9d5c:	f100 030b 	add.w	r3, r0, #11
    9d60:	2b0b      	cmp	r3, #11
    9d62:	4605      	mov	r5, r0
    9d64:	d804      	bhi.n	9d70 <zsock_poll_internal+0x148>
    9d66:	4c2e      	ldr	r4, [pc, #184]	; (9e20 <zsock_poll_internal+0x1f8>)
    9d68:	411c      	asrs	r4, r3
    9d6a:	f014 0401 	ands.w	r4, r4, #1
    9d6e:	d006      	beq.n	9d7e <zsock_poll_internal+0x156>
			errno = -ret;
    9d70:	f014 ff96 	bl	1eca0 <__errno>
    9d74:	426d      	negs	r5, r5
    9d76:	6005      	str	r5, [r0, #0]
			return -1;
    9d78:	f04f 34ff 	mov.w	r4, #4294967295
    9d7c:	e790      	b.n	9ca0 <zsock_poll_internal+0x78>
		for (pfd = fds, i = nfds; i--; pfd++) {
    9d7e:	46b9      	mov	r9, r7
		retry = false;
    9d80:	46a3      	mov	fp, r4
		for (pfd = fds, i = nfds; i--; pfd++) {
    9d82:	9d03      	ldr	r5, [sp, #12]
		pev = poll_events;
    9d84:	f8cd 8020 	str.w	r8, [sp, #32]
		for (pfd = fds, i = nfds; i--; pfd++) {
    9d88:	f1b9 0f00 	cmp.w	r9, #0
    9d8c:	d10e      	bne.n	9dac <zsock_poll_internal+0x184>
		if (retry) {
    9d8e:	f1bb 0f00 	cmp.w	fp, #0
    9d92:	d085      	beq.n	9ca0 <zsock_poll_internal+0x78>
			if (ret > 0) {
    9d94:	2c00      	cmp	r4, #0
    9d96:	d183      	bne.n	9ca0 <zsock_poll_internal+0x78>
			timeout_recalc(end, &timeout);
    9d98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9d9c:	aa06      	add	r2, sp, #24
    9d9e:	f014 fd90 	bl	1e8c2 <timeout_recalc>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    9da2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
    9da6:	4313      	orrs	r3, r2
    9da8:	d1cd      	bne.n	9d46 <zsock_poll_internal+0x11e>
    9daa:	e779      	b.n	9ca0 <zsock_poll_internal+0x78>
			if (pfd->fd < 0) {
    9dac:	6828      	ldr	r0, [r5, #0]
			pfd->revents = 0;
    9dae:	9b02      	ldr	r3, [sp, #8]
			if (pfd->fd < 0) {
    9db0:	2800      	cmp	r0, #0
			pfd->revents = 0;
    9db2:	80eb      	strh	r3, [r5, #6]
			if (pfd->fd < 0) {
    9db4:	db29      	blt.n	9e0a <zsock_poll_internal+0x1e2>
	ctx = z_get_fd_obj_and_vtable(sock,
    9db6:	aa0a      	add	r2, sp, #40	; 0x28
    9db8:	a909      	add	r1, sp, #36	; 0x24
    9dba:	f002 fd65 	bl	c888 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
    9dbe:	4606      	mov	r6, r0
    9dc0:	b918      	cbnz	r0, 9dca <zsock_poll_internal+0x1a2>
				pfd->revents = ZSOCK_POLLNVAL;
    9dc2:	2320      	movs	r3, #32
    9dc4:	80eb      	strh	r3, [r5, #6]
				ret++;
    9dc6:	3401      	adds	r4, #1
    9dc8:	e01f      	b.n	9e0a <zsock_poll_internal+0x1e2>
			(void)k_mutex_lock(lock, K_FOREVER);
    9dca:	f04f 32ff 	mov.w	r2, #4294967295
    9dce:	f04f 33ff 	mov.w	r3, #4294967295
    9dd2:	980a      	ldr	r0, [sp, #40]	; 0x28
    9dd4:	f014 fd92 	bl	1e8fc <k_mutex_lock.constprop.0.isra.0>
			result = z_fdtable_call_ioctl(vtable, ctx,
    9dd8:	ab08      	add	r3, sp, #32
    9dda:	4631      	mov	r1, r6
    9ddc:	f240 1203 	movw	r2, #259	; 0x103
    9de0:	9300      	str	r3, [sp, #0]
    9de2:	9809      	ldr	r0, [sp, #36]	; 0x24
    9de4:	462b      	mov	r3, r5
    9de6:	f014 fd5d 	bl	1e8a4 <z_fdtable_call_ioctl>
    9dea:	4606      	mov	r6, r0
			k_mutex_unlock(lock);
    9dec:	980a      	ldr	r0, [sp, #40]	; 0x28
    9dee:	f014 fd87 	bl	1e900 <k_mutex_unlock.isra.0>
			if (result == -EAGAIN) {
    9df2:	f116 0f0b 	cmn.w	r6, #11
    9df6:	d00c      	beq.n	9e12 <zsock_poll_internal+0x1ea>
			} else if (result != 0) {
    9df8:	b11e      	cbz	r6, 9e02 <zsock_poll_internal+0x1da>
				errno = -result;
    9dfa:	f014 ff51 	bl	1eca0 <__errno>
    9dfe:	4273      	negs	r3, r6
    9e00:	e797      	b.n	9d32 <zsock_poll_internal+0x10a>
			if (pfd->revents != 0) {
    9e02:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
    9e06:	2b00      	cmp	r3, #0
    9e08:	d1dd      	bne.n	9dc6 <zsock_poll_internal+0x19e>
		for (pfd = fds, i = nfds; i--; pfd++) {
    9e0a:	3508      	adds	r5, #8
    9e0c:	f109 39ff 	add.w	r9, r9, #4294967295
    9e10:	e7ba      	b.n	9d88 <zsock_poll_internal+0x160>
				retry = true;
    9e12:	f04f 0b01 	mov.w	fp, #1
    9e16:	e7f8      	b.n	9e0a <zsock_poll_internal+0x1e2>
	...
    9e20:	fffff77e 	.word	0xfffff77e
    9e24:	cccccccd 	.word	0xcccccccd

00009e28 <clock_settime>:
int clock_settime(clockid_t clock_id, const struct timespec *tp)
{
	struct timespec base;
	k_spinlock_key_t key;

	if (clock_id != CLOCK_REALTIME) {
    9e28:	2801      	cmp	r0, #1
{
    9e2a:	b570      	push	{r4, r5, r6, lr}
    9e2c:	460d      	mov	r5, r1
	if (clock_id != CLOCK_REALTIME) {
    9e2e:	d006      	beq.n	9e3e <clock_settime+0x16>
		errno = EINVAL;
    9e30:	f014 ff36 	bl	1eca0 <__errno>
    9e34:	2316      	movs	r3, #22
    9e36:	6003      	str	r3, [r0, #0]
		return -1;
    9e38:	f04f 30ff 	mov.w	r0, #4294967295
	key = k_spin_lock(&rt_clock_base_lock);
	rt_clock_base = base;
	k_spin_unlock(&rt_clock_base_lock, key);

	return 0;
}
    9e3c:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_uptime_ticks();
    9e3e:	f017 fd49 	bl	218d4 <z_impl_k_uptime_ticks>
	int64_t delta = (int64_t)NSEC_PER_SEC * tp->tv_sec + tp->tv_nsec
    9e42:	4a1d      	ldr	r2, [pc, #116]	; (9eb8 <clock_settime+0x90>)
    9e44:	682b      	ldr	r3, [r5, #0]
    9e46:	686e      	ldr	r6, [r5, #4]
    9e48:	fba3 3402 	umull	r3, r4, r3, r2
    9e4c:	fb02 4406 	mla	r4, r2, r6, r4
    9e50:	68ad      	ldr	r5, [r5, #8]
    9e52:	195b      	adds	r3, r3, r5
    9e54:	eb44 74e5 	adc.w	r4, r4, r5, asr #31
			return ((t * to_hz + off) / from_hz);
		} else {
			/* Slower algorithm but input is first divided before being multiplied
			 * which prevents overflow of intermediate value.
			 */
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
    9e58:	0bc5      	lsrs	r5, r0, #15
    9e5a:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
    9e5e:	fba5 5602 	umull	r5, r6, r5, r2
    9e62:	0bc9      	lsrs	r1, r1, #15
    9e64:	fb02 6101 	mla	r1, r2, r1, r6
		- elapsed_nsecs;
    9e68:	1b5b      	subs	r3, r3, r5
    9e6a:	f3c0 000e 	ubfx	r0, r0, #0, #15
    9e6e:	eb64 0101 	sbc.w	r1, r4, r1
    9e72:	fba0 0402 	umull	r0, r4, r0, r2
    9e76:	0bc2      	lsrs	r2, r0, #15
    9e78:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
    9e7c:	1a98      	subs	r0, r3, r2
    9e7e:	f161 0100 	sbc.w	r1, r1, #0
    9e82:	a30b      	add	r3, pc, #44	; (adr r3, 9eb0 <clock_settime+0x88>)
    9e84:	e9d3 2300 	ldrd	r2, r3, [r3]
    9e88:	f7fe fe62 	bl	8b50 <__aeabi_ldivmod>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    9e8c:	f04f 0320 	mov.w	r3, #32
    9e90:	f3ef 8411 	mrs	r4, BASEPRI
    9e94:	f383 8812 	msr	BASEPRI_MAX, r3
    9e98:	f3bf 8f6f 	isb	sy
	rt_clock_base = base;
    9e9c:	4b07      	ldr	r3, [pc, #28]	; (9ebc <clock_settime+0x94>)
    9e9e:	e9c3 0100 	strd	r0, r1, [r3]
	base.tv_nsec = delta % NSEC_PER_SEC;
    9ea2:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    9ea4:	f384 8811 	msr	BASEPRI, r4
    9ea8:	f3bf 8f6f 	isb	sy
	return 0;
    9eac:	2000      	movs	r0, #0
    9eae:	e7c5      	b.n	9e3c <clock_settime+0x14>
    9eb0:	3b9aca00 	.word	0x3b9aca00
    9eb4:	00000000 	.word	0x00000000
    9eb8:	3b9aca00 	.word	0x3b9aca00
    9ebc:	2000cd40 	.word	0x2000cd40

00009ec0 <parse_edrx>:

	return 0;
}

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
    9ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ec2:	ed2d 8b02 	vpush	{d8}
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
    9ec6:	2500      	movs	r5, #0
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
    9ec8:	2304      	movs	r3, #4
{
    9eca:	b08b      	sub	sp, #44	; 0x2c
    9ecc:	460e      	mov	r6, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
    9ece:	4607      	mov	r7, r0
	struct at_param_list resp_list = {0};
    9ed0:	e9cd 5508 	strd	r5, r5, [sp, #32]
	size_t len = sizeof(tmp_buf) - 1;
    9ed4:	9305      	str	r3, [sp, #20]
	if ((at_response == NULL) || (cfg == NULL)) {
    9ed6:	2800      	cmp	r0, #0
    9ed8:	f000 80cc 	beq.w	a074 <parse_edrx+0x1b4>
    9edc:	2900      	cmp	r1, #0
    9ede:	f000 80c9 	beq.w	a074 <parse_edrx+0x1b4>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
    9ee2:	2106      	movs	r1, #6
    9ee4:	a808      	add	r0, sp, #32
    9ee6:	f015 fe2c 	bl	1fb42 <at_params_list_init>
	if (err) {
    9eea:	4604      	mov	r4, r0
    9eec:	b178      	cbz	r0, 9f0e <parse_edrx+0x4e>
		LOG_ERR("Could not init AT params list, error: %d", err);
    9eee:	4b66      	ldr	r3, [pc, #408]	; (a088 <parse_edrx+0x1c8>)
    9ef0:	9003      	str	r0, [sp, #12]
    9ef2:	e9cd 5301 	strd	r5, r3, [sp, #4]
    9ef6:	2201      	movs	r2, #1
    9ef8:	462b      	mov	r3, r5
    9efa:	4628      	mov	r0, r5
    9efc:	4963      	ldr	r1, [pc, #396]	; (a08c <parse_edrx+0x1cc>)
    9efe:	9500      	str	r5, [sp, #0]
    9f00:	f015 ff73 	bl	1fdea <z_log_msg_runtime_create.constprop.0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
    9f04:	4620      	mov	r0, r4
    9f06:	b00b      	add	sp, #44	; 0x2c
    9f08:	ecbd 8b02 	vpop	{d8}
    9f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
    9f0e:	4601      	mov	r1, r0
    9f10:	aa08      	add	r2, sp, #32
    9f12:	4638      	mov	r0, r7
    9f14:	f015 fdfc 	bl	1fb10 <at_parser_params_from_str>
	if (err) {
    9f18:	4604      	mov	r4, r0
    9f1a:	b170      	cbz	r0, 9f3a <parse_edrx+0x7a>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
    9f1c:	4b5c      	ldr	r3, [pc, #368]	; (a090 <parse_edrx+0x1d0>)
    9f1e:	9003      	str	r0, [sp, #12]
		LOG_ERR("Failed to get LTE mode, error: %d", err);
    9f20:	e9cd 5301 	strd	r5, r3, [sp, #4]
    9f24:	462b      	mov	r3, r5
    9f26:	9500      	str	r5, [sp, #0]
    9f28:	2201      	movs	r2, #1
    9f2a:	4618      	mov	r0, r3
    9f2c:	4957      	ldr	r1, [pc, #348]	; (a08c <parse_edrx+0x1cc>)
    9f2e:	f015 ff5c 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
    9f32:	a808      	add	r0, sp, #32
    9f34:	f015 fe2f 	bl	1fb96 <at_params_list_free>
	return err;
    9f38:	e7e4      	b.n	9f04 <parse_edrx+0x44>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
    9f3a:	2101      	movs	r1, #1
    9f3c:	aa04      	add	r2, sp, #16
    9f3e:	a808      	add	r0, sp, #32
    9f40:	f015 fedb 	bl	1fcfa <at_params_int_get>
	if (err) {
    9f44:	4604      	mov	r4, r0
    9f46:	b110      	cbz	r0, 9f4e <parse_edrx+0x8e>
		LOG_ERR("Failed to get LTE mode, error: %d", err);
    9f48:	4b52      	ldr	r3, [pc, #328]	; (a094 <parse_edrx+0x1d4>)
    9f4a:	9003      	str	r0, [sp, #12]
    9f4c:	e7e8      	b.n	9f20 <parse_edrx+0x60>
	cfg->mode = tmp_int == 0 ? LTE_LC_LTE_MODE_NONE :
    9f4e:	9c04      	ldr	r4, [sp, #16]
    9f50:	b1ac      	cbz	r4, 9f7e <parse_edrx+0xbe>
    9f52:	2c04      	cmp	r4, #4
    9f54:	d018      	beq.n	9f88 <parse_edrx+0xc8>
    9f56:	2c05      	cmp	r4, #5
    9f58:	bf0c      	ite	eq
    9f5a:	2309      	moveq	r3, #9
    9f5c:	23ff      	movne	r3, #255	; 0xff
    9f5e:	7033      	strb	r3, [r6, #0]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
    9f60:	2103      	movs	r1, #3
    9f62:	ab05      	add	r3, sp, #20
    9f64:	aa06      	add	r2, sp, #24
    9f66:	a808      	add	r0, sp, #32
    9f68:	f015 fef3 	bl	1fd52 <at_params_string_get>
	if (err) {
    9f6c:	4604      	mov	r4, r0
    9f6e:	b168      	cbz	r0, 9f8c <parse_edrx+0xcc>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    9f70:	4b49      	ldr	r3, [pc, #292]	; (a098 <parse_edrx+0x1d8>)
    9f72:	9003      	str	r0, [sp, #12]
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
    9f74:	9302      	str	r3, [sp, #8]
    9f76:	2300      	movs	r3, #0
    9f78:	e9cd 3300 	strd	r3, r3, [sp]
    9f7c:	e7d4      	b.n	9f28 <parse_edrx+0x68>
		cfg->edrx = 0;
    9f7e:	2300      	movs	r3, #0
	cfg->mode = tmp_int == 0 ? LTE_LC_LTE_MODE_NONE :
    9f80:	7034      	strb	r4, [r6, #0]
		cfg->edrx = 0;
    9f82:	6073      	str	r3, [r6, #4]
		cfg->ptw = 0;
    9f84:	60b3      	str	r3, [r6, #8]
		return 0;
    9f86:	e7bd      	b.n	9f04 <parse_edrx+0x44>
    9f88:	2307      	movs	r3, #7
    9f8a:	e7e8      	b.n	9f5e <parse_edrx+0x9e>
	tmp_buf[len] = '\0';
    9f8c:	9b05      	ldr	r3, [sp, #20]
	idx = strtoul(tmp_buf, NULL, 2);
    9f8e:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    9f90:	3328      	adds	r3, #40	; 0x28
    9f92:	446b      	add	r3, sp
    9f94:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
    9f98:	2202      	movs	r2, #2
    9f9a:	a806      	add	r0, sp, #24
    9f9c:	f012 f9d0 	bl	1c340 <strtoul>
	err = get_ptw_multiplier(cfg->mode, &ptw_multiplier);
    9fa0:	7833      	ldrb	r3, [r6, #0]
	idx = strtoul(tmp_buf, NULL, 2);
    9fa2:	b2c0      	uxtb	r0, r0
	switch (lte_mode) {
    9fa4:	2b07      	cmp	r3, #7
    9fa6:	d020      	beq.n	9fea <parse_edrx+0x12a>
    9fa8:	2b09      	cmp	r3, #9
    9faa:	d111      	bne.n	9fd0 <parse_edrx+0x110>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    9fac:	280f      	cmp	r0, #15
    9fae:	d93a      	bls.n	a026 <parse_edrx+0x166>
		LOG_ERR("Failed to get eDRX value, error; %d", err);
    9fb0:	f06f 0315 	mvn.w	r3, #21
    9fb4:	9303      	str	r3, [sp, #12]
    9fb6:	4b39      	ldr	r3, [pc, #228]	; (a09c <parse_edrx+0x1dc>)
    9fb8:	9302      	str	r3, [sp, #8]
    9fba:	2300      	movs	r3, #0
    9fbc:	e9cd 3300 	strd	r3, r3, [sp]
    9fc0:	2201      	movs	r2, #1
    9fc2:	4618      	mov	r0, r3
    9fc4:	4931      	ldr	r1, [pc, #196]	; (a08c <parse_edrx+0x1cc>)
    9fc6:	f015 ff10 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
		return -ENOTCONN;
    9fca:	f06f 0415 	mvn.w	r4, #21
    9fce:	e7b0      	b.n	9f32 <parse_edrx+0x72>
		LOG_WRN("Active LTE mode could not be determined");
    9fd0:	4b33      	ldr	r3, [pc, #204]	; (a0a0 <parse_edrx+0x1e0>)
    9fd2:	4620      	mov	r0, r4
    9fd4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    9fd8:	9400      	str	r4, [sp, #0]
    9fda:	4623      	mov	r3, r4
    9fdc:	2202      	movs	r2, #2
    9fde:	492b      	ldr	r1, [pc, #172]	; (a08c <parse_edrx+0x1cc>)
    9fe0:	f015 ff03 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
		return -ENOTCONN;
    9fe4:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		goto clean_exit;
    9fe8:	e7a3      	b.n	9f32 <parse_edrx+0x72>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    9fea:	280f      	cmp	r0, #15
    9fec:	d8e0      	bhi.n	9fb0 <parse_edrx+0xf0>
		*ptw_multiplier = 1.28;
    9fee:	ed9f 8a2d 	vldr	s16, [pc, #180]	; a0a4 <parse_edrx+0x1e4>
		multiplier = edrx_lookup_ltem[idx];
    9ff2:	4b2d      	ldr	r3, [pc, #180]	; (a0a8 <parse_edrx+0x1e8>)
    9ff4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    9ff8:	b1d8      	cbz	r0, a032 <parse_edrx+0x172>
    9ffa:	f7fe f9f7 	bl	83ec <__aeabi_i2d>
    9ffe:	a320      	add	r3, pc, #128	; (adr r3, a080 <parse_edrx+0x1c0>)
    a000:	e9d3 2300 	ldrd	r2, r3, [r3]
    a004:	f7fe fa5c 	bl	84c0 <__aeabi_dmul>
    a008:	f7fe fd52 	bl	8ab0 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
    a00c:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    a00e:	6070      	str	r0, [r6, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    a010:	ab05      	add	r3, sp, #20
    a012:	aa06      	add	r2, sp, #24
    a014:	a808      	add	r0, sp, #32
	len = sizeof(tmp_buf) - 1;
    a016:	9105      	str	r1, [sp, #20]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    a018:	f015 fe9b 	bl	1fd52 <at_params_string_get>
	if (err) {
    a01c:	4604      	mov	r4, r0
    a01e:	b150      	cbz	r0, a036 <parse_edrx+0x176>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
    a020:	4b22      	ldr	r3, [pc, #136]	; (a0ac <parse_edrx+0x1ec>)
    a022:	9003      	str	r0, [sp, #12]
    a024:	e7a6      	b.n	9f74 <parse_edrx+0xb4>
		multiplier = edrx_lookup_nbiot[idx];
    a026:	4b22      	ldr	r3, [pc, #136]	; (a0b0 <parse_edrx+0x1f0>)
		*ptw_multiplier = 2.56;
    a028:	ed9f 8a22 	vldr	s16, [pc, #136]	; a0b4 <parse_edrx+0x1f4>
		multiplier = edrx_lookup_nbiot[idx];
    a02c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
		break;
    a030:	e7e2      	b.n	9ff8 <parse_edrx+0x138>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    a032:	4821      	ldr	r0, [pc, #132]	; (a0b8 <parse_edrx+0x1f8>)
    a034:	e7ea      	b.n	a00c <parse_edrx+0x14c>
	tmp_buf[len] = '\0';
    a036:	9b05      	ldr	r3, [sp, #20]
	idx = strtoul(tmp_buf, NULL, 2);
    a038:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    a03a:	3328      	adds	r3, #40	; 0x28
    a03c:	446b      	add	r3, sp
    a03e:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
    a042:	2202      	movs	r2, #2
    a044:	a806      	add	r0, sp, #24
    a046:	f012 f97b 	bl	1c340 <strtoul>
    a04a:	b2c0      	uxtb	r0, r0
	if (idx > 15) {
    a04c:	280f      	cmp	r0, #15
    a04e:	d906      	bls.n	a05e <parse_edrx+0x19e>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
    a050:	4b1a      	ldr	r3, [pc, #104]	; (a0bc <parse_edrx+0x1fc>)
    a052:	9003      	str	r0, [sp, #12]
    a054:	e9cd 4301 	strd	r4, r3, [sp, #4]
    a058:	9400      	str	r4, [sp, #0]
    a05a:	4623      	mov	r3, r4
    a05c:	e7b0      	b.n	9fc0 <parse_edrx+0x100>
	idx += 1;
    a05e:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
    a060:	b2c0      	uxtb	r0, r0
    a062:	ee07 0a90 	vmov	s15, r0
    a066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    a06a:	ee67 7a88 	vmul.f32	s15, s15, s16
    a06e:	edc6 7a02 	vstr	s15, [r6, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
    a072:	e75e      	b.n	9f32 <parse_edrx+0x72>
		return -EINVAL;
    a074:	f06f 0415 	mvn.w	r4, #21
    a078:	e744      	b.n	9f04 <parse_edrx+0x44>
    a07a:	bf00      	nop
    a07c:	f3af 8000 	nop.w
    a080:	47ae147b 	.word	0x47ae147b
    a084:	40247ae1 	.word	0x40247ae1
    a088:	00025a67 	.word	0x00025a67
    a08c:	00022f7c 	.word	0x00022f7c
    a090:	00025a90 	.word	0x00025a90
    a094:	00025abc 	.word	0x00025abc
    a098:	00025ade 	.word	0x00025ade
    a09c:	00025b32 	.word	0x00025b32
    a0a0:	00025b0a 	.word	0x00025b0a
    a0a4:	3fa3d70a 	.word	0x3fa3d70a
    a0a8:	00023a2c 	.word	0x00023a2c
    a0ac:	00025b56 	.word	0x00025b56
    a0b0:	00023a0c 	.word	0x00023a0c
    a0b4:	4023d70a 	.word	0x4023d70a
    a0b8:	40a3d70a 	.word	0x40a3d70a
    a0bc:	00025b81 	.word	0x00025b81

0000a0c0 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
    a0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a0c4:	4606      	mov	r6, r0
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
    a0c6:	460c      	mov	r4, r1
{
    a0c8:	b092      	sub	sp, #72	; 0x48
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
    a0ca:	2900      	cmp	r1, #0
    a0cc:	f000 80bf 	beq.w	a24e <parse_value+0x18e>
    a0d0:	680f      	ldr	r7, [r1, #0]
    a0d2:	2f00      	cmp	r7, #0
    a0d4:	f000 80bb 	beq.w	a24e <parse_value+0x18e>
        return false; /* no input */
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
    a0d8:	688d      	ldr	r5, [r1, #8]
    a0da:	f8d1 8004 	ldr.w	r8, [r1, #4]
    a0de:	f105 0904 	add.w	r9, r5, #4
    a0e2:	45c1      	cmp	r9, r8
    a0e4:	d80a      	bhi.n	a0fc <parse_value+0x3c>
    a0e6:	2204      	movs	r2, #4
    a0e8:	49ad      	ldr	r1, [pc, #692]	; (a3a0 <parse_value+0x2e0>)
    a0ea:	1978      	adds	r0, r7, r5
    a0ec:	f017 ff60 	bl	21fb0 <strncmp>
    a0f0:	b9a8      	cbnz	r0, a11e <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
    a0f2:	2304      	movs	r3, #4
    a0f4:	60f3      	str	r3, [r6, #12]
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
    {
        item->type = cJSON_True;
        item->valueint = 1;
        input_buffer->offset += 4;
    a0f6:	68a3      	ldr	r3, [r4, #8]
    a0f8:	3304      	adds	r3, #4
        return true;
    a0fa:	e01d      	b.n	a138 <parse_value+0x78>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
    a0fc:	1d6b      	adds	r3, r5, #5
    a0fe:	4598      	cmp	r8, r3
    a100:	d210      	bcs.n	a124 <parse_value+0x64>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
    a102:	4545      	cmp	r5, r8
    a104:	f080 80a3 	bcs.w	a24e <parse_value+0x18e>
    a108:	5d7b      	ldrb	r3, [r7, r5]
    a10a:	1978      	adds	r0, r7, r5
    a10c:	2b22      	cmp	r3, #34	; 0x22
    a10e:	d124      	bne.n	a15a <parse_value+0x9a>
    {
        return parse_string(item, input_buffer);
    a110:	4621      	mov	r1, r4
    a112:	4630      	mov	r0, r6
    {
        return parse_object(item, input_buffer);
    }

    return false;
}
    a114:	b012      	add	sp, #72	; 0x48
    a116:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return parse_string(item, input_buffer);
    a11a:	f00c bdd5 	b.w	16cc8 <parse_string>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
    a11e:	1d6b      	adds	r3, r5, #5
    a120:	4598      	cmp	r8, r3
    a122:	d30e      	bcc.n	a142 <parse_value+0x82>
    a124:	2205      	movs	r2, #5
    a126:	499f      	ldr	r1, [pc, #636]	; (a3a4 <parse_value+0x2e4>)
    a128:	1978      	adds	r0, r7, r5
    a12a:	f017 ff41 	bl	21fb0 <strncmp>
    a12e:	b930      	cbnz	r0, a13e <parse_value+0x7e>
        item->type = cJSON_False;
    a130:	2301      	movs	r3, #1
    a132:	60f3      	str	r3, [r6, #12]
        input_buffer->offset += 5;
    a134:	68a3      	ldr	r3, [r4, #8]
    a136:	3305      	adds	r3, #5
        return true;
    a138:	2001      	movs	r0, #1
        input_buffer->offset += 4;
    a13a:	60a3      	str	r3, [r4, #8]
    a13c:	e088      	b.n	a250 <parse_value+0x190>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
    a13e:	45c1      	cmp	r9, r8
    a140:	d8df      	bhi.n	a102 <parse_value+0x42>
    a142:	2204      	movs	r2, #4
    a144:	4998      	ldr	r1, [pc, #608]	; (a3a8 <parse_value+0x2e8>)
    a146:	1978      	adds	r0, r7, r5
    a148:	f017 ff32 	bl	21fb0 <strncmp>
    a14c:	2800      	cmp	r0, #0
    a14e:	d1d8      	bne.n	a102 <parse_value+0x42>
        item->type = cJSON_True;
    a150:	2302      	movs	r3, #2
    a152:	60f3      	str	r3, [r6, #12]
        item->valueint = 1;
    a154:	2301      	movs	r3, #1
    a156:	6173      	str	r3, [r6, #20]
    a158:	e7cd      	b.n	a0f6 <parse_value+0x36>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
    a15a:	2b2d      	cmp	r3, #45	; 0x2d
    a15c:	d003      	beq.n	a166 <parse_value+0xa6>
    a15e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    a162:	2a09      	cmp	r2, #9
    a164:	d855      	bhi.n	a212 <parse_value+0x152>
    unsigned char *after_end = NULL;
    a166:	2300      	movs	r3, #0
    a168:	f10d 0c08 	add.w	ip, sp, #8
    a16c:	4667      	mov	r7, ip
        switch (buffer_at_offset(input_buffer)[i])
    a16e:	f04f 0e01 	mov.w	lr, #1
    a172:	eba8 0505 	sub.w	r5, r8, r5
    a176:	f8df 8238 	ldr.w	r8, [pc, #568]	; a3b0 <parse_value+0x2f0>
    unsigned char *after_end = NULL;
    a17a:	9301      	str	r3, [sp, #4]
        switch (buffer_at_offset(input_buffer)[i])
    a17c:	f810 2b01 	ldrb.w	r2, [r0], #1
    a180:	2a45      	cmp	r2, #69	; 0x45
    a182:	d83e      	bhi.n	a202 <parse_value+0x142>
    a184:	2a2a      	cmp	r2, #42	; 0x2a
    a186:	d910      	bls.n	a1aa <parse_value+0xea>
    a188:	f1a2 012b 	sub.w	r1, r2, #43	; 0x2b
    a18c:	b2c9      	uxtb	r1, r1
    a18e:	fa0e f101 	lsl.w	r1, lr, r1
    a192:	ea11 0f08 	tst.w	r1, r8
    a196:	d101      	bne.n	a19c <parse_value+0xdc>
    a198:	2a2e      	cmp	r2, #46	; 0x2e
    a19a:	d106      	bne.n	a1aa <parse_value+0xea>
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
    a19c:	3301      	adds	r3, #1
    a19e:	2b3f      	cmp	r3, #63	; 0x3f
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
    a1a0:	f80c 2b01 	strb.w	r2, [ip], #1
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
    a1a4:	d001      	beq.n	a1aa <parse_value+0xea>
    a1a6:	42ab      	cmp	r3, r5
    a1a8:	d1e8      	bne.n	a17c <parse_value+0xbc>
    number_c_string[i] = '\0';
    a1aa:	2500      	movs	r5, #0
    a1ac:	3348      	adds	r3, #72	; 0x48
    a1ae:	446b      	add	r3, sp
    number = strtod((const char*)number_c_string, (char**)&after_end);
    a1b0:	4638      	mov	r0, r7
    a1b2:	a901      	add	r1, sp, #4
    number_c_string[i] = '\0';
    a1b4:	f803 5c40 	strb.w	r5, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
    a1b8:	f011 ff1e 	bl	1bff8 <strtod>
    if (number_c_string == after_end)
    a1bc:	f8dd a004 	ldr.w	sl, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
    a1c0:	ec59 8b10 	vmov	r8, r9, d0
    if (number_c_string == after_end)
    a1c4:	45ba      	cmp	sl, r7
    a1c6:	d042      	beq.n	a24e <parse_value+0x18e>
    if (number >= INT_MAX)
    a1c8:	a373      	add	r3, pc, #460	; (adr r3, a398 <parse_value+0x2d8>)
    a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    a1ce:	4640      	mov	r0, r8
    a1d0:	4649      	mov	r1, r9
    a1d2:	f7fe fbfb 	bl	89cc <__aeabi_dcmpge>
    a1d6:	b9b0      	cbnz	r0, a206 <parse_value+0x146>
    else if (number <= (double)INT_MIN)
    a1d8:	2200      	movs	r2, #0
    a1da:	4640      	mov	r0, r8
    a1dc:	4649      	mov	r1, r9
    a1de:	4b73      	ldr	r3, [pc, #460]	; (a3ac <parse_value+0x2ec>)
    a1e0:	f7fe fbea 	bl	89b8 <__aeabi_dcmple>
    a1e4:	b990      	cbnz	r0, a20c <parse_value+0x14c>
        item->valueint = (int)number;
    a1e6:	4640      	mov	r0, r8
    a1e8:	4649      	mov	r1, r9
    a1ea:	f7fe fc19 	bl	8a20 <__aeabi_d2iz>
    item->type = cJSON_Number;
    a1ee:	2308      	movs	r3, #8
    item->valuedouble = number;
    a1f0:	e9c6 8906 	strd	r8, r9, [r6, #24]
        item->valueint = INT_MAX;
    a1f4:	6170      	str	r0, [r6, #20]
    item->type = cJSON_Number;
    a1f6:	60f3      	str	r3, [r6, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
    a1f8:	68a3      	ldr	r3, [r4, #8]
    a1fa:	ebaa 0a07 	sub.w	sl, sl, r7
    a1fe:	4453      	add	r3, sl
    a200:	e79a      	b.n	a138 <parse_value+0x78>
        switch (buffer_at_offset(input_buffer)[i])
    a202:	2a65      	cmp	r2, #101	; 0x65
    a204:	e7c9      	b.n	a19a <parse_value+0xda>
    a206:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    a20a:	e7f0      	b.n	a1ee <parse_value+0x12e>
    a20c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    a210:	e7ed      	b.n	a1ee <parse_value+0x12e>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
    a212:	2b5b      	cmp	r3, #91	; 0x5b
    a214:	d158      	bne.n	a2c8 <parse_value+0x208>
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
    cJSON *head = NULL; /* head of the linked list */
    cJSON *current_item = NULL;

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
    a216:	f8d4 900c 	ldr.w	r9, [r4, #12]
    a21a:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
    a21e:	d216      	bcs.n	a24e <parse_value+0x18e>
    {
        return false; /* to deeply nested */
    }
    input_buffer->depth++;
    a220:	f109 0301 	add.w	r3, r9, #1
    a224:	60e3      	str	r3, [r4, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
    a226:	5d7b      	ldrb	r3, [r7, r5]
    a228:	2b5b      	cmp	r3, #91	; 0x5b
    a22a:	d110      	bne.n	a24e <parse_value+0x18e>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
    a22c:	3501      	adds	r5, #1
    buffer_skip_whitespace(input_buffer);
    a22e:	4620      	mov	r0, r4
    input_buffer->offset++;
    a230:	60a5      	str	r5, [r4, #8]
    buffer_skip_whitespace(input_buffer);
    a232:	f015 ff6a 	bl	2010a <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
    a236:	68a3      	ldr	r3, [r4, #8]
    a238:	4598      	cmp	r8, r3
    a23a:	d906      	bls.n	a24a <parse_value+0x18a>
    a23c:	5cfa      	ldrb	r2, [r7, r3]
    a23e:	2a5d      	cmp	r2, #93	; 0x5d
    a240:	d109      	bne.n	a256 <parse_value+0x196>
    cJSON *head = NULL; /* head of the linked list */
    a242:	2700      	movs	r7, #0
    {
        goto fail; /* expected end of array */
    }

success:
    input_buffer->depth--;
    a244:	f8c4 900c 	str.w	r9, [r4, #12]

    if (head != NULL) {
    a248:	e036      	b.n	a2b8 <parse_value+0x1f8>
        input_buffer->offset--;
    a24a:	3b01      	subs	r3, #1
    a24c:	60a3      	str	r3, [r4, #8]
        return false; /* to deeply nested */
    a24e:	2000      	movs	r0, #0
}
    a250:	b012      	add	sp, #72	; 0x48
    a252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cJSON *current_item = NULL;
    a256:	2500      	movs	r5, #0
    cJSON *head = NULL; /* head of the linked list */
    a258:	462f      	mov	r7, r5
    input_buffer->offset--;
    a25a:	3b01      	subs	r3, #1
    a25c:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
    a25e:	6920      	ldr	r0, [r4, #16]
    a260:	f015 ff87 	bl	20172 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
    a264:	46a8      	mov	r8, r5
    a266:	4605      	mov	r5, r0
    a268:	2800      	cmp	r0, #0
    a26a:	f000 80a5 	beq.w	a3b8 <parse_value+0x2f8>
        if (head == NULL)
    a26e:	b34f      	cbz	r7, a2c4 <parse_value+0x204>
            current_item->next = new_item;
    a270:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
    a274:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
    a278:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
    a27a:	4620      	mov	r0, r4
        input_buffer->offset++;
    a27c:	3301      	adds	r3, #1
    a27e:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
    a280:	f015 ff43 	bl	2010a <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
    a284:	4621      	mov	r1, r4
    a286:	4628      	mov	r0, r5
    a288:	f7ff ff1a 	bl	a0c0 <parse_value>
    a28c:	2800      	cmp	r0, #0
    a28e:	f000 8093 	beq.w	a3b8 <parse_value+0x2f8>
        buffer_skip_whitespace(input_buffer);
    a292:	4620      	mov	r0, r4
    a294:	f015 ff39 	bl	2010a <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
    a298:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    a29c:	4293      	cmp	r3, r2
    a29e:	f080 808e 	bcs.w	a3be <parse_value+0x2fe>
    a2a2:	6822      	ldr	r2, [r4, #0]
    a2a4:	5cd3      	ldrb	r3, [r2, r3]
    a2a6:	2b2c      	cmp	r3, #44	; 0x2c
    a2a8:	d0d9      	beq.n	a25e <parse_value+0x19e>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
    a2aa:	2b5d      	cmp	r3, #93	; 0x5d
    a2ac:	f040 8087 	bne.w	a3be <parse_value+0x2fe>
    input_buffer->depth--;
    a2b0:	68e3      	ldr	r3, [r4, #12]
    a2b2:	3b01      	subs	r3, #1
    a2b4:	60e3      	str	r3, [r4, #12]
        head->prev = current_item;
    a2b6:	607d      	str	r5, [r7, #4]
    }

    item->type = cJSON_Array;
    a2b8:	2320      	movs	r3, #32
    if (head != NULL) {
        head->prev = current_item;
    }

    item->type = cJSON_Object;
    item->child = head;
    a2ba:	e9c6 7302 	strd	r7, r3, [r6, #8]

    input_buffer->offset++;
    a2be:	68a3      	ldr	r3, [r4, #8]
    a2c0:	3301      	adds	r3, #1
    return true;
    a2c2:	e739      	b.n	a138 <parse_value+0x78>
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
    a2c4:	4607      	mov	r7, r0
    a2c6:	e7d7      	b.n	a278 <parse_value+0x1b8>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
    a2c8:	2b7b      	cmp	r3, #123	; 0x7b
    a2ca:	d1c0      	bne.n	a24e <parse_value+0x18e>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
    a2cc:	f8d4 900c 	ldr.w	r9, [r4, #12]
    a2d0:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
    a2d4:	d2bb      	bcs.n	a24e <parse_value+0x18e>
    input_buffer->depth++;
    a2d6:	f109 0301 	add.w	r3, r9, #1
    a2da:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
    a2dc:	5d7b      	ldrb	r3, [r7, r5]
    a2de:	2b7b      	cmp	r3, #123	; 0x7b
    a2e0:	d1b5      	bne.n	a24e <parse_value+0x18e>
    input_buffer->offset++;
    a2e2:	3501      	adds	r5, #1
    buffer_skip_whitespace(input_buffer);
    a2e4:	4620      	mov	r0, r4
    input_buffer->offset++;
    a2e6:	60a5      	str	r5, [r4, #8]
    buffer_skip_whitespace(input_buffer);
    a2e8:	f015 ff0f 	bl	2010a <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
    a2ec:	68a3      	ldr	r3, [r4, #8]
    a2ee:	4598      	cmp	r8, r3
    a2f0:	d9ab      	bls.n	a24a <parse_value+0x18a>
    a2f2:	5cfa      	ldrb	r2, [r7, r3]
    a2f4:	2a7d      	cmp	r2, #125	; 0x7d
    a2f6:	d103      	bne.n	a300 <parse_value+0x240>
    cJSON *head = NULL; /* linked list head */
    a2f8:	2700      	movs	r7, #0
    input_buffer->depth--;
    a2fa:	f8c4 900c 	str.w	r9, [r4, #12]
    if (head != NULL) {
    a2fe:	e047      	b.n	a390 <parse_value+0x2d0>
    cJSON *current_item = NULL;
    a300:	2500      	movs	r5, #0
    cJSON *head = NULL; /* linked list head */
    a302:	462f      	mov	r7, r5
        current_item->valuestring = NULL;
    a304:	46a8      	mov	r8, r5
    input_buffer->offset--;
    a306:	3b01      	subs	r3, #1
    a308:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
    a30a:	6920      	ldr	r0, [r4, #16]
    a30c:	f015 ff31 	bl	20172 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
    a310:	46a9      	mov	r9, r5
    a312:	4605      	mov	r5, r0
    a314:	2800      	cmp	r0, #0
    a316:	d04f      	beq.n	a3b8 <parse_value+0x2f8>
        if (head == NULL)
    a318:	2f00      	cmp	r7, #0
    a31a:	d04b      	beq.n	a3b4 <parse_value+0x2f4>
            current_item->next = new_item;
    a31c:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
    a320:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
    a324:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
    a326:	4620      	mov	r0, r4
        input_buffer->offset++;
    a328:	3301      	adds	r3, #1
    a32a:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
    a32c:	f015 feed 	bl	2010a <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
    a330:	4621      	mov	r1, r4
    a332:	4628      	mov	r0, r5
    a334:	f00c fcc8 	bl	16cc8 <parse_string>
    a338:	2800      	cmp	r0, #0
    a33a:	d03d      	beq.n	a3b8 <parse_value+0x2f8>
        buffer_skip_whitespace(input_buffer);
    a33c:	4620      	mov	r0, r4
    a33e:	f015 fee4 	bl	2010a <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
    a342:	692b      	ldr	r3, [r5, #16]
        current_item->valuestring = NULL;
    a344:	f8c5 8010 	str.w	r8, [r5, #16]
        current_item->string = current_item->valuestring;
    a348:	622b      	str	r3, [r5, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
    a34a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    a34e:	4293      	cmp	r3, r2
    a350:	d232      	bcs.n	a3b8 <parse_value+0x2f8>
    a352:	6822      	ldr	r2, [r4, #0]
    a354:	5cd2      	ldrb	r2, [r2, r3]
    a356:	2a3a      	cmp	r2, #58	; 0x3a
    a358:	d12e      	bne.n	a3b8 <parse_value+0x2f8>
        input_buffer->offset++;
    a35a:	3301      	adds	r3, #1
        buffer_skip_whitespace(input_buffer);
    a35c:	4620      	mov	r0, r4
        input_buffer->offset++;
    a35e:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
    a360:	f015 fed3 	bl	2010a <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
    a364:	4621      	mov	r1, r4
    a366:	4628      	mov	r0, r5
    a368:	f7ff feaa 	bl	a0c0 <parse_value>
    a36c:	b320      	cbz	r0, a3b8 <parse_value+0x2f8>
        buffer_skip_whitespace(input_buffer);
    a36e:	4620      	mov	r0, r4
    a370:	f015 fecb 	bl	2010a <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
    a374:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    a378:	4293      	cmp	r3, r2
    a37a:	d220      	bcs.n	a3be <parse_value+0x2fe>
    a37c:	6822      	ldr	r2, [r4, #0]
    a37e:	5cd3      	ldrb	r3, [r2, r3]
    a380:	2b2c      	cmp	r3, #44	; 0x2c
    a382:	d0c2      	beq.n	a30a <parse_value+0x24a>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
    a384:	2b7d      	cmp	r3, #125	; 0x7d
    a386:	d11a      	bne.n	a3be <parse_value+0x2fe>
    input_buffer->depth--;
    a388:	68e3      	ldr	r3, [r4, #12]
    a38a:	3b01      	subs	r3, #1
    a38c:	60e3      	str	r3, [r4, #12]
        head->prev = current_item;
    a38e:	607d      	str	r5, [r7, #4]
    item->type = cJSON_Object;
    a390:	2340      	movs	r3, #64	; 0x40
    a392:	e792      	b.n	a2ba <parse_value+0x1fa>
    a394:	f3af 8000 	nop.w
    a398:	ffc00000 	.word	0xffc00000
    a39c:	41dfffff 	.word	0x41dfffff
    a3a0:	0002796b 	.word	0x0002796b
    a3a4:	00026d0e 	.word	0x00026d0e
    a3a8:	00026d09 	.word	0x00026d09
    a3ac:	c1e00000 	.word	0xc1e00000
    a3b0:	04007fe5 	.word	0x04007fe5
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
    a3b4:	4607      	mov	r7, r0
    a3b6:	e7b5      	b.n	a324 <parse_value+0x264>

fail:
    if (head != NULL)
    a3b8:	2f00      	cmp	r7, #0
    a3ba:	f43f af48 	beq.w	a24e <parse_value+0x18e>
    {
        cJSON_Delete(head);
    a3be:	4638      	mov	r0, r7
    a3c0:	f00c fe1a 	bl	16ff8 <cJSON_Delete>
    a3c4:	e743      	b.n	a24e <parse_value+0x18e>
    a3c6:	bf00      	nop

0000a3c8 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    a3c8:	b5d0      	push	{r4, r6, r7, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
    a3ca:	4b17      	ldr	r3, [pc, #92]	; (a428 <cJSON_CreateNumber+0x60>)
{
    a3cc:	ec57 6b10 	vmov	r6, r7, d0
    cJSON *item = cJSON_New_Item(&global_hooks);
    a3d0:	6818      	ldr	r0, [r3, #0]
    a3d2:	f015 fece 	bl	20172 <cJSON_New_Item.isra.0>
    if(item)
    a3d6:	4604      	mov	r4, r0
    a3d8:	b170      	cbz	r0, a3f8 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
    a3da:	2308      	movs	r3, #8
        item->valuedouble = num;
    a3dc:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
    a3e0:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
    a3e2:	4639      	mov	r1, r7
    a3e4:	a30e      	add	r3, pc, #56	; (adr r3, a420 <cJSON_CreateNumber+0x58>)
    a3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    a3ea:	4630      	mov	r0, r6
    a3ec:	f7fe faee 	bl	89cc <__aeabi_dcmpge>
    a3f0:	b120      	cbz	r0, a3fc <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
    a3f2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
    a3f6:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
    a3f8:	4620      	mov	r0, r4
    a3fa:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
    a3fc:	2200      	movs	r2, #0
    a3fe:	4630      	mov	r0, r6
    a400:	4639      	mov	r1, r7
    a402:	4b0a      	ldr	r3, [pc, #40]	; (a42c <cJSON_CreateNumber+0x64>)
    a404:	f7fe fad8 	bl	89b8 <__aeabi_dcmple>
    a408:	b110      	cbz	r0, a410 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
    a40a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    a40e:	e7f2      	b.n	a3f6 <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
    a410:	4630      	mov	r0, r6
    a412:	4639      	mov	r1, r7
    a414:	f7fe fb04 	bl	8a20 <__aeabi_d2iz>
    a418:	6160      	str	r0, [r4, #20]
    return item;
    a41a:	e7ed      	b.n	a3f8 <cJSON_CreateNumber+0x30>
    a41c:	f3af 8000 	nop.w
    a420:	ffc00000 	.word	0xffc00000
    a424:	41dfffff 	.word	0x41dfffff
    a428:	2000c648 	.word	0x2000c648
    a42c:	c1e00000 	.word	0xc1e00000

0000a430 <cJSON_GetNumberValue>:
{
    a430:	b508      	push	{r3, lr}
    a432:	4602      	mov	r2, r0
    if (!cJSON_IsNumber(item)) 
    a434:	f015 ff35 	bl	202a2 <cJSON_IsNumber>
    a438:	b110      	cbz	r0, a440 <cJSON_GetNumberValue+0x10>
    return item->valuedouble;
    a43a:	ed92 0b06 	vldr	d0, [r2, #24]
}
    a43e:	bd08      	pop	{r3, pc}
        return (double) NAN;
    a440:	ed9f 0b01 	vldr	d0, [pc, #4]	; a448 <cJSON_GetNumberValue+0x18>
    a444:	e7fb      	b.n	a43e <cJSON_GetNumberValue+0xe>
    a446:	bf00      	nop
    a448:	00000000 	.word	0x00000000
    a44c:	7ff80000 	.word	0x7ff80000

0000a450 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    a450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a454:	ed2d 8b02 	vpush	{d8}
    a458:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    a45a:	ed9f 8b49 	vldr	d8, [pc, #292]	; a580 <work_queue_main+0x130>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    a45e:	4e4a      	ldr	r6, [pc, #296]	; (a588 <work_queue_main+0x138>)
{
    a460:	b084      	sub	sp, #16
	__asm__ volatile(
    a462:	f04f 0320 	mov.w	r3, #32
    a466:	f3ef 8711 	mrs	r7, BASEPRI
    a46a:	f383 8812 	msr	BASEPRI_MAX, r3
    a46e:	f3bf 8f6f 	isb	sy
    a472:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    a476:	b98d      	cbnz	r5, a49c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    a478:	2102      	movs	r1, #2
    a47a:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
    a47e:	f017 f889 	bl	21594 <flag_test_and_clear>
    a482:	2800      	cmp	r0, #0
    a484:	d143      	bne.n	a50e <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    a486:	2300      	movs	r3, #0
    a488:	ed8d 8b00 	vstr	d8, [sp]
    a48c:	4639      	mov	r1, r7
    a48e:	9302      	str	r3, [sp, #8]
    a490:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    a494:	483d      	ldr	r0, [pc, #244]	; (a58c <work_queue_main+0x13c>)
    a496:	f010 fe39 	bl	1b10c <z_sched_wait>
			continue;
    a49a:	e7e2      	b.n	a462 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a49c:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
	return node->next;
    a4a0:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a4a2:	4295      	cmp	r5, r2
	list->head = node;
    a4a4:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	list->tail = node;
    a4a8:	bf08      	it	eq
    a4aa:	f8c4 30cc 	streq.w	r3, [r4, #204]	; 0xcc
	*flagp |= BIT(bit);
    a4ae:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    a4b2:	f043 0302 	orr.w	r3, r3, #2
    a4b6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	*flagp &= ~BIT(bit);
    a4ba:	68eb      	ldr	r3, [r5, #12]
    a4bc:	f023 0304 	bic.w	r3, r3, #4
    a4c0:	f043 0301 	orr.w	r3, r3, #1
    a4c4:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    a4c6:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    a4c8:	f387 8811 	msr	BASEPRI, r7
    a4cc:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    a4d0:	4628      	mov	r0, r5
    a4d2:	4798      	blx	r3
	__asm__ volatile(
    a4d4:	f04f 0320 	mov.w	r3, #32
    a4d8:	f3ef 8911 	mrs	r9, BASEPRI
    a4dc:	f383 8812 	msr	BASEPRI_MAX, r3
    a4e0:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    a4e4:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    a4e6:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    a4e8:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    a4ec:	d419      	bmi.n	a522 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    a4ee:	60ea      	str	r2, [r5, #12]
    a4f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    a4f4:	f023 0302 	bic.w	r3, r3, #2
    a4f8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	__asm__ volatile(
    a4fc:	f389 8811 	msr	BASEPRI, r9
    a500:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    a504:	05db      	lsls	r3, r3, #23
    a506:	d4ac      	bmi.n	a462 <work_queue_main+0x12>
	z_impl_k_yield();
    a508:	f010 fcfe 	bl	1af08 <z_impl_k_yield>
}
    a50c:	e7a9      	b.n	a462 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    a50e:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    a512:	2200      	movs	r2, #0
    a514:	2101      	movs	r1, #1
    a516:	4628      	mov	r0, r5
    a518:	f017 f98f 	bl	2183a <z_sched_wake>
    a51c:	2800      	cmp	r0, #0
    a51e:	d1f8      	bne.n	a512 <work_queue_main+0xc2>
    a520:	e7b1      	b.n	a486 <work_queue_main+0x36>
	return list->head;
    a522:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    a524:	f023 0303 	bic.w	r3, r3, #3
    a528:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    a52a:	2800      	cmp	r0, #0
    a52c:	d0e0      	beq.n	a4f0 <work_queue_main+0xa0>
	return node->next;
    a52e:	2700      	movs	r7, #0
	parent->next = child;
    a530:	46ba      	mov	sl, r7
	return node->next;
    a532:	f8d0 8000 	ldr.w	r8, [r0]
    a536:	2800      	cmp	r0, #0
    a538:	d0da      	beq.n	a4f0 <work_queue_main+0xa0>
		if (wc->work == work) {
    a53a:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    a53c:	4601      	mov	r1, r0
		if (wc->work == work) {
    a53e:	4295      	cmp	r5, r2
    a540:	d10b      	bne.n	a55a <work_queue_main+0x10a>
    a542:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    a544:	b997      	cbnz	r7, a56c <work_queue_main+0x11c>
    a546:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    a548:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    a54a:	4282      	cmp	r2, r0
    a54c:	d100      	bne.n	a550 <work_queue_main+0x100>
	list->tail = node;
    a54e:	6071      	str	r1, [r6, #4]
	parent->next = child;
    a550:	f840 ab08 	str.w	sl, [r0], #8
	z_impl_k_sem_give(sem);
    a554:	f010 f97e 	bl	1a854 <z_impl_k_sem_give>
}
    a558:	4639      	mov	r1, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    a55a:	f1b8 0f00 	cmp.w	r8, #0
    a55e:	d00b      	beq.n	a578 <work_queue_main+0x128>
	return node->next;
    a560:	f8d8 2000 	ldr.w	r2, [r8]
    a564:	4640      	mov	r0, r8
    a566:	460f      	mov	r7, r1
    a568:	4690      	mov	r8, r2
    a56a:	e7e4      	b.n	a536 <work_queue_main+0xe6>
	parent->next = child;
    a56c:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    a56e:	6872      	ldr	r2, [r6, #4]
    a570:	4282      	cmp	r2, r0
	list->tail = node;
    a572:	bf08      	it	eq
    a574:	6077      	streq	r7, [r6, #4]
}
    a576:	e7eb      	b.n	a550 <work_queue_main+0x100>
    a578:	4642      	mov	r2, r8
    a57a:	e7f3      	b.n	a564 <work_queue_main+0x114>
    a57c:	f3af 8000 	nop.w
    a580:	ffffffff 	.word	0xffffffff
    a584:	ffffffff 	.word	0xffffffff
    a588:	2000e328 	.word	0x2000e328
    a58c:	200110d0 	.word	0x200110d0

0000a590 <_strtod_l>:
    a590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a594:	461f      	mov	r7, r3
    a596:	b09d      	sub	sp, #116	; 0x74
    a598:	2300      	movs	r3, #0
    a59a:	460c      	mov	r4, r1
    a59c:	4682      	mov	sl, r0
    a59e:	920f      	str	r2, [sp, #60]	; 0x3c
    a5a0:	9318      	str	r3, [sp, #96]	; 0x60
    a5a2:	f04f 0800 	mov.w	r8, #0
    a5a6:	4b98      	ldr	r3, [pc, #608]	; (a808 <_strtod_l+0x278>)
    a5a8:	f04f 0900 	mov.w	r9, #0
    a5ac:	681d      	ldr	r5, [r3, #0]
    a5ae:	4628      	mov	r0, r5
    a5b0:	f7fe fcc5 	bl	8f3e <strlen>
    a5b4:	4622      	mov	r2, r4
    a5b6:	4683      	mov	fp, r0
    a5b8:	9217      	str	r2, [sp, #92]	; 0x5c
    a5ba:	7813      	ldrb	r3, [r2, #0]
    a5bc:	2b2b      	cmp	r3, #43	; 0x2b
    a5be:	d03b      	beq.n	a638 <_strtod_l+0xa8>
    a5c0:	d82c      	bhi.n	a61c <_strtod_l+0x8c>
    a5c2:	2b0d      	cmp	r3, #13
    a5c4:	d826      	bhi.n	a614 <_strtod_l+0x84>
    a5c6:	2b08      	cmp	r3, #8
    a5c8:	d826      	bhi.n	a618 <_strtod_l+0x88>
    a5ca:	2b00      	cmp	r3, #0
    a5cc:	d02f      	beq.n	a62e <_strtod_l+0x9e>
    a5ce:	2300      	movs	r3, #0
    a5d0:	930d      	str	r3, [sp, #52]	; 0x34
    a5d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    a5d4:	7833      	ldrb	r3, [r6, #0]
    a5d6:	2b30      	cmp	r3, #48	; 0x30
    a5d8:	d174      	bne.n	a6c4 <_strtod_l+0x134>
    a5da:	7873      	ldrb	r3, [r6, #1]
    a5dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    a5e0:	2b58      	cmp	r3, #88	; 0x58
    a5e2:	d165      	bne.n	a6b0 <_strtod_l+0x120>
    a5e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a5e6:	a917      	add	r1, sp, #92	; 0x5c
    a5e8:	4a88      	ldr	r2, [pc, #544]	; (a80c <_strtod_l+0x27c>)
    a5ea:	4650      	mov	r0, sl
    a5ec:	9301      	str	r3, [sp, #4]
    a5ee:	ab18      	add	r3, sp, #96	; 0x60
    a5f0:	9702      	str	r7, [sp, #8]
    a5f2:	9300      	str	r3, [sp, #0]
    a5f4:	ab19      	add	r3, sp, #100	; 0x64
    a5f6:	f012 f8c5 	bl	1c784 <__gethex>
    a5fa:	f010 0507 	ands.w	r5, r0, #7
    a5fe:	4604      	mov	r4, r0
    a600:	d035      	beq.n	a66e <_strtod_l+0xde>
    a602:	2d06      	cmp	r5, #6
    a604:	d11a      	bne.n	a63c <_strtod_l+0xac>
    a606:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a608:	b10b      	cbz	r3, a60e <_strtod_l+0x7e>
    a60a:	3601      	adds	r6, #1
    a60c:	601e      	str	r6, [r3, #0]
    a60e:	4642      	mov	r2, r8
    a610:	464b      	mov	r3, r9
    a612:	e037      	b.n	a684 <_strtod_l+0xf4>
    a614:	2b20      	cmp	r3, #32
    a616:	d1da      	bne.n	a5ce <_strtod_l+0x3e>
    a618:	3201      	adds	r2, #1
    a61a:	e7cd      	b.n	a5b8 <_strtod_l+0x28>
    a61c:	2b2d      	cmp	r3, #45	; 0x2d
    a61e:	d1d6      	bne.n	a5ce <_strtod_l+0x3e>
    a620:	2301      	movs	r3, #1
    a622:	930d      	str	r3, [sp, #52]	; 0x34
    a624:	1c53      	adds	r3, r2, #1
    a626:	9317      	str	r3, [sp, #92]	; 0x5c
    a628:	7853      	ldrb	r3, [r2, #1]
    a62a:	2b00      	cmp	r3, #0
    a62c:	d1d1      	bne.n	a5d2 <_strtod_l+0x42>
    a62e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a630:	2b00      	cmp	r3, #0
    a632:	d0ec      	beq.n	a60e <_strtod_l+0x7e>
    a634:	601c      	str	r4, [r3, #0]
    a636:	e7ea      	b.n	a60e <_strtod_l+0x7e>
    a638:	2300      	movs	r3, #0
    a63a:	e7f2      	b.n	a622 <_strtod_l+0x92>
    a63c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a63e:	b13a      	cbz	r2, a650 <_strtod_l+0xc0>
    a640:	2135      	movs	r1, #53	; 0x35
    a642:	a81a      	add	r0, sp, #104	; 0x68
    a644:	f018 f89b 	bl	2277e <__copybits>
    a648:	9918      	ldr	r1, [sp, #96]	; 0x60
    a64a:	4650      	mov	r0, sl
    a64c:	f012 fb6c 	bl	1cd28 <_Bfree>
    a650:	3d01      	subs	r5, #1
    a652:	9a19      	ldr	r2, [sp, #100]	; 0x64
    a654:	2d04      	cmp	r5, #4
    a656:	d806      	bhi.n	a666 <_strtod_l+0xd6>
    a658:	e8df f005 	tbb	[pc, r5]
    a65c:	25220319 	.word	0x25220319
    a660:	19          	.byte	0x19
    a661:	00          	.byte	0x00
    a662:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    a666:	0721      	lsls	r1, r4, #28
    a668:	d501      	bpl.n	a66e <_strtod_l+0xde>
    a66a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
    a66e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a670:	b113      	cbz	r3, a678 <_strtod_l+0xe8>
    a672:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a674:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a676:	6013      	str	r3, [r2, #0]
    a678:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a67a:	2b00      	cmp	r3, #0
    a67c:	d0c7      	beq.n	a60e <_strtod_l+0x7e>
    a67e:	4642      	mov	r2, r8
    a680:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
    a684:	ec43 2b10 	vmov	d0, r2, r3
    a688:	b01d      	add	sp, #116	; 0x74
    a68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a68e:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
    a692:	f202 4233 	addw	r2, r2, #1075	; 0x433
    a696:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    a69a:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
    a69e:	e7e2      	b.n	a666 <_strtod_l+0xd6>
    a6a0:	f8df 916c 	ldr.w	r9, [pc, #364]	; a810 <_strtod_l+0x280>
    a6a4:	e7df      	b.n	a666 <_strtod_l+0xd6>
    a6a6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    a6aa:	f04f 38ff 	mov.w	r8, #4294967295
    a6ae:	e7da      	b.n	a666 <_strtod_l+0xd6>
    a6b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a6b2:	1c5a      	adds	r2, r3, #1
    a6b4:	9217      	str	r2, [sp, #92]	; 0x5c
    a6b6:	785b      	ldrb	r3, [r3, #1]
    a6b8:	2b30      	cmp	r3, #48	; 0x30
    a6ba:	d0f9      	beq.n	a6b0 <_strtod_l+0x120>
    a6bc:	2b00      	cmp	r3, #0
    a6be:	d0d6      	beq.n	a66e <_strtod_l+0xde>
    a6c0:	2301      	movs	r3, #1
    a6c2:	e000      	b.n	a6c6 <_strtod_l+0x136>
    a6c4:	2300      	movs	r3, #0
    a6c6:	2700      	movs	r7, #0
    a6c8:	9304      	str	r3, [sp, #16]
    a6ca:	220a      	movs	r2, #10
    a6cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a6ce:	e9cd 7705 	strd	r7, r7, [sp, #20]
    a6d2:	930a      	str	r3, [sp, #40]	; 0x28
    a6d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a6d6:	7806      	ldrb	r6, [r0, #0]
    a6d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    a6dc:	b2d9      	uxtb	r1, r3
    a6de:	2909      	cmp	r1, #9
    a6e0:	d924      	bls.n	a72c <_strtod_l+0x19c>
    a6e2:	465a      	mov	r2, fp
    a6e4:	4629      	mov	r1, r5
    a6e6:	f017 fc63 	bl	21fb0 <strncmp>
    a6ea:	2800      	cmp	r0, #0
    a6ec:	d02d      	beq.n	a74a <_strtod_l+0x1ba>
    a6ee:	2000      	movs	r0, #0
    a6f0:	4632      	mov	r2, r6
    a6f2:	9d05      	ldr	r5, [sp, #20]
    a6f4:	4683      	mov	fp, r0
    a6f6:	4603      	mov	r3, r0
    a6f8:	2a65      	cmp	r2, #101	; 0x65
    a6fa:	d001      	beq.n	a700 <_strtod_l+0x170>
    a6fc:	2a45      	cmp	r2, #69	; 0x45
    a6fe:	d113      	bne.n	a728 <_strtod_l+0x198>
    a700:	b91d      	cbnz	r5, a70a <_strtod_l+0x17a>
    a702:	9a04      	ldr	r2, [sp, #16]
    a704:	4302      	orrs	r2, r0
    a706:	d092      	beq.n	a62e <_strtod_l+0x9e>
    a708:	2500      	movs	r5, #0
    a70a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    a70c:	1c62      	adds	r2, r4, #1
    a70e:	9217      	str	r2, [sp, #92]	; 0x5c
    a710:	7862      	ldrb	r2, [r4, #1]
    a712:	2a2b      	cmp	r2, #43	; 0x2b
    a714:	d06e      	beq.n	a7f4 <_strtod_l+0x264>
    a716:	2a2d      	cmp	r2, #45	; 0x2d
    a718:	d072      	beq.n	a800 <_strtod_l+0x270>
    a71a:	f04f 0c00 	mov.w	ip, #0
    a71e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    a722:	2909      	cmp	r1, #9
    a724:	d97a      	bls.n	a81c <_strtod_l+0x28c>
    a726:	9417      	str	r4, [sp, #92]	; 0x5c
    a728:	2600      	movs	r6, #0
    a72a:	e099      	b.n	a860 <_strtod_l+0x2d0>
    a72c:	9905      	ldr	r1, [sp, #20]
    a72e:	3001      	adds	r0, #1
    a730:	2908      	cmp	r1, #8
    a732:	9017      	str	r0, [sp, #92]	; 0x5c
    a734:	bfd7      	itett	le
    a736:	9906      	ldrle	r1, [sp, #24]
    a738:	fb02 3707 	mlagt	r7, r2, r7, r3
    a73c:	fb02 3301 	mlale	r3, r2, r1, r3
    a740:	9306      	strle	r3, [sp, #24]
    a742:	9b05      	ldr	r3, [sp, #20]
    a744:	3301      	adds	r3, #1
    a746:	9305      	str	r3, [sp, #20]
    a748:	e7c4      	b.n	a6d4 <_strtod_l+0x144>
    a74a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a74c:	eb03 020b 	add.w	r2, r3, fp
    a750:	9217      	str	r2, [sp, #92]	; 0x5c
    a752:	f813 200b 	ldrb.w	r2, [r3, fp]
    a756:	9b05      	ldr	r3, [sp, #20]
    a758:	b3a3      	cbz	r3, a7c4 <_strtod_l+0x234>
    a75a:	4683      	mov	fp, r0
    a75c:	461d      	mov	r5, r3
    a75e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    a762:	2b09      	cmp	r3, #9
    a764:	d912      	bls.n	a78c <_strtod_l+0x1fc>
    a766:	2301      	movs	r3, #1
    a768:	e7c6      	b.n	a6f8 <_strtod_l+0x168>
    a76a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a76c:	3001      	adds	r0, #1
    a76e:	1c5a      	adds	r2, r3, #1
    a770:	9217      	str	r2, [sp, #92]	; 0x5c
    a772:	785a      	ldrb	r2, [r3, #1]
    a774:	2a30      	cmp	r2, #48	; 0x30
    a776:	d0f8      	beq.n	a76a <_strtod_l+0x1da>
    a778:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
    a77c:	2b08      	cmp	r3, #8
    a77e:	f200 84ef 	bhi.w	b160 <_strtod_l+0xbd0>
    a782:	4683      	mov	fp, r0
    a784:	2000      	movs	r0, #0
    a786:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a788:	4605      	mov	r5, r0
    a78a:	930a      	str	r3, [sp, #40]	; 0x28
    a78c:	3a30      	subs	r2, #48	; 0x30
    a78e:	f100 0301 	add.w	r3, r0, #1
    a792:	d011      	beq.n	a7b8 <_strtod_l+0x228>
    a794:	449b      	add	fp, r3
    a796:	eb00 0c05 	add.w	ip, r0, r5
    a79a:	462b      	mov	r3, r5
    a79c:	210a      	movs	r1, #10
    a79e:	4563      	cmp	r3, ip
    a7a0:	d112      	bne.n	a7c8 <_strtod_l+0x238>
    a7a2:	182b      	adds	r3, r5, r0
    a7a4:	3501      	adds	r5, #1
    a7a6:	2b08      	cmp	r3, #8
    a7a8:	4405      	add	r5, r0
    a7aa:	dc19      	bgt.n	a7e0 <_strtod_l+0x250>
    a7ac:	9906      	ldr	r1, [sp, #24]
    a7ae:	230a      	movs	r3, #10
    a7b0:	fb03 2301 	mla	r3, r3, r1, r2
    a7b4:	9306      	str	r3, [sp, #24]
    a7b6:	2300      	movs	r3, #0
    a7b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a7ba:	4618      	mov	r0, r3
    a7bc:	1c51      	adds	r1, r2, #1
    a7be:	9117      	str	r1, [sp, #92]	; 0x5c
    a7c0:	7852      	ldrb	r2, [r2, #1]
    a7c2:	e7cc      	b.n	a75e <_strtod_l+0x1ce>
    a7c4:	9805      	ldr	r0, [sp, #20]
    a7c6:	e7d5      	b.n	a774 <_strtod_l+0x1e4>
    a7c8:	2b08      	cmp	r3, #8
    a7ca:	f103 0301 	add.w	r3, r3, #1
    a7ce:	dc03      	bgt.n	a7d8 <_strtod_l+0x248>
    a7d0:	9e06      	ldr	r6, [sp, #24]
    a7d2:	434e      	muls	r6, r1
    a7d4:	9606      	str	r6, [sp, #24]
    a7d6:	e7e2      	b.n	a79e <_strtod_l+0x20e>
    a7d8:	2b10      	cmp	r3, #16
    a7da:	bfd8      	it	le
    a7dc:	434f      	mulle	r7, r1
    a7de:	e7de      	b.n	a79e <_strtod_l+0x20e>
    a7e0:	2b0f      	cmp	r3, #15
    a7e2:	bfdc      	itt	le
    a7e4:	230a      	movle	r3, #10
    a7e6:	fb03 2707 	mlale	r7, r3, r7, r2
    a7ea:	e7e4      	b.n	a7b6 <_strtod_l+0x226>
    a7ec:	f04f 0b00 	mov.w	fp, #0
    a7f0:	2301      	movs	r3, #1
    a7f2:	e786      	b.n	a702 <_strtod_l+0x172>
    a7f4:	f04f 0c00 	mov.w	ip, #0
    a7f8:	1ca2      	adds	r2, r4, #2
    a7fa:	9217      	str	r2, [sp, #92]	; 0x5c
    a7fc:	78a2      	ldrb	r2, [r4, #2]
    a7fe:	e78e      	b.n	a71e <_strtod_l+0x18e>
    a800:	f04f 0c01 	mov.w	ip, #1
    a804:	e7f8      	b.n	a7f8 <_strtod_l+0x268>
    a806:	bf00      	nop
    a808:	000239f4 	.word	0x000239f4
    a80c:	00023980 	.word	0x00023980
    a810:	7ff00000 	.word	0x7ff00000
    a814:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a816:	1c51      	adds	r1, r2, #1
    a818:	9117      	str	r1, [sp, #92]	; 0x5c
    a81a:	7852      	ldrb	r2, [r2, #1]
    a81c:	2a30      	cmp	r2, #48	; 0x30
    a81e:	d0f9      	beq.n	a814 <_strtod_l+0x284>
    a820:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
    a824:	2908      	cmp	r1, #8
    a826:	f63f af7f 	bhi.w	a728 <_strtod_l+0x198>
    a82a:	3a30      	subs	r2, #48	; 0x30
    a82c:	9207      	str	r2, [sp, #28]
    a82e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a830:	920c      	str	r2, [sp, #48]	; 0x30
    a832:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a834:	1c56      	adds	r6, r2, #1
    a836:	9617      	str	r6, [sp, #92]	; 0x5c
    a838:	7852      	ldrb	r2, [r2, #1]
    a83a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
    a83e:	f1be 0f09 	cmp.w	lr, #9
    a842:	d938      	bls.n	a8b6 <_strtod_l+0x326>
    a844:	990c      	ldr	r1, [sp, #48]	; 0x30
    a846:	1a76      	subs	r6, r6, r1
    a848:	2e08      	cmp	r6, #8
    a84a:	f644 661f 	movw	r6, #19999	; 0x4e1f
    a84e:	dc03      	bgt.n	a858 <_strtod_l+0x2c8>
    a850:	9907      	ldr	r1, [sp, #28]
    a852:	428e      	cmp	r6, r1
    a854:	bfa8      	it	ge
    a856:	460e      	movge	r6, r1
    a858:	f1bc 0f00 	cmp.w	ip, #0
    a85c:	d000      	beq.n	a860 <_strtod_l+0x2d0>
    a85e:	4276      	negs	r6, r6
    a860:	2d00      	cmp	r5, #0
    a862:	d14f      	bne.n	a904 <_strtod_l+0x374>
    a864:	9904      	ldr	r1, [sp, #16]
    a866:	4308      	orrs	r0, r1
    a868:	f47f af01 	bne.w	a66e <_strtod_l+0xde>
    a86c:	2b00      	cmp	r3, #0
    a86e:	f47f aede 	bne.w	a62e <_strtod_l+0x9e>
    a872:	2a69      	cmp	r2, #105	; 0x69
    a874:	d029      	beq.n	a8ca <_strtod_l+0x33a>
    a876:	dc26      	bgt.n	a8c6 <_strtod_l+0x336>
    a878:	2a49      	cmp	r2, #73	; 0x49
    a87a:	d026      	beq.n	a8ca <_strtod_l+0x33a>
    a87c:	2a4e      	cmp	r2, #78	; 0x4e
    a87e:	f47f aed6 	bne.w	a62e <_strtod_l+0x9e>
    a882:	499b      	ldr	r1, [pc, #620]	; (aaf0 <_strtod_l+0x560>)
    a884:	a817      	add	r0, sp, #92	; 0x5c
    a886:	f017 fdf8 	bl	2247a <__match>
    a88a:	2800      	cmp	r0, #0
    a88c:	f43f aecf 	beq.w	a62e <_strtod_l+0x9e>
    a890:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a892:	781b      	ldrb	r3, [r3, #0]
    a894:	2b28      	cmp	r3, #40	; 0x28
    a896:	d12f      	bne.n	a8f8 <_strtod_l+0x368>
    a898:	aa1a      	add	r2, sp, #104	; 0x68
    a89a:	4996      	ldr	r1, [pc, #600]	; (aaf4 <_strtod_l+0x564>)
    a89c:	a817      	add	r0, sp, #92	; 0x5c
    a89e:	f017 fe00 	bl	224a2 <__hexnan>
    a8a2:	2805      	cmp	r0, #5
    a8a4:	d128      	bne.n	a8f8 <_strtod_l+0x368>
    a8a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a8a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    a8ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
    a8b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
    a8b4:	e6db      	b.n	a66e <_strtod_l+0xde>
    a8b6:	9e07      	ldr	r6, [sp, #28]
    a8b8:	210a      	movs	r1, #10
    a8ba:	fb01 2106 	mla	r1, r1, r6, r2
    a8be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    a8c2:	9207      	str	r2, [sp, #28]
    a8c4:	e7b5      	b.n	a832 <_strtod_l+0x2a2>
    a8c6:	2a6e      	cmp	r2, #110	; 0x6e
    a8c8:	e7d9      	b.n	a87e <_strtod_l+0x2ee>
    a8ca:	498b      	ldr	r1, [pc, #556]	; (aaf8 <_strtod_l+0x568>)
    a8cc:	a817      	add	r0, sp, #92	; 0x5c
    a8ce:	f017 fdd4 	bl	2247a <__match>
    a8d2:	2800      	cmp	r0, #0
    a8d4:	f43f aeab 	beq.w	a62e <_strtod_l+0x9e>
    a8d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a8da:	a817      	add	r0, sp, #92	; 0x5c
    a8dc:	4987      	ldr	r1, [pc, #540]	; (aafc <_strtod_l+0x56c>)
    a8de:	3b01      	subs	r3, #1
    a8e0:	9317      	str	r3, [sp, #92]	; 0x5c
    a8e2:	f017 fdca 	bl	2247a <__match>
    a8e6:	b910      	cbnz	r0, a8ee <_strtod_l+0x35e>
    a8e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a8ea:	3301      	adds	r3, #1
    a8ec:	9317      	str	r3, [sp, #92]	; 0x5c
    a8ee:	f8df 921c 	ldr.w	r9, [pc, #540]	; ab0c <_strtod_l+0x57c>
    a8f2:	f04f 0800 	mov.w	r8, #0
    a8f6:	e6ba      	b.n	a66e <_strtod_l+0xde>
    a8f8:	4881      	ldr	r0, [pc, #516]	; (ab00 <_strtod_l+0x570>)
    a8fa:	f001 fa79 	bl	bdf0 <nan>
    a8fe:	ec59 8b10 	vmov	r8, r9, d0
    a902:	e6b4      	b.n	a66e <_strtod_l+0xde>
    a904:	eba6 030b 	sub.w	r3, r6, fp
    a908:	9806      	ldr	r0, [sp, #24]
    a90a:	462c      	mov	r4, r5
    a90c:	930c      	str	r3, [sp, #48]	; 0x30
    a90e:	9b05      	ldr	r3, [sp, #20]
    a910:	2b00      	cmp	r3, #0
    a912:	bf08      	it	eq
    a914:	462b      	moveq	r3, r5
    a916:	2d10      	cmp	r5, #16
    a918:	9305      	str	r3, [sp, #20]
    a91a:	bfa8      	it	ge
    a91c:	2410      	movge	r4, #16
    a91e:	f7fd fd55 	bl	83cc <__aeabi_ui2d>
    a922:	2d09      	cmp	r5, #9
    a924:	4680      	mov	r8, r0
    a926:	4689      	mov	r9, r1
    a928:	dc13      	bgt.n	a952 <_strtod_l+0x3c2>
    a92a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a92c:	2b00      	cmp	r3, #0
    a92e:	f43f ae9e 	beq.w	a66e <_strtod_l+0xde>
    a932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a934:	dd78      	ble.n	aa28 <_strtod_l+0x498>
    a936:	2b16      	cmp	r3, #22
    a938:	dc45      	bgt.n	a9c6 <_strtod_l+0x436>
    a93a:	4972      	ldr	r1, [pc, #456]	; (ab04 <_strtod_l+0x574>)
    a93c:	4642      	mov	r2, r8
    a93e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a942:	464b      	mov	r3, r9
    a944:	e9d1 0100 	ldrd	r0, r1, [r1]
    a948:	f7fd fdba 	bl	84c0 <__aeabi_dmul>
    a94c:	4680      	mov	r8, r0
    a94e:	4689      	mov	r9, r1
    a950:	e68d      	b.n	a66e <_strtod_l+0xde>
    a952:	4b6c      	ldr	r3, [pc, #432]	; (ab04 <_strtod_l+0x574>)
    a954:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    a958:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    a95c:	f7fd fdb0 	bl	84c0 <__aeabi_dmul>
    a960:	4680      	mov	r8, r0
    a962:	4689      	mov	r9, r1
    a964:	4638      	mov	r0, r7
    a966:	f7fd fd31 	bl	83cc <__aeabi_ui2d>
    a96a:	4602      	mov	r2, r0
    a96c:	460b      	mov	r3, r1
    a96e:	4640      	mov	r0, r8
    a970:	4649      	mov	r1, r9
    a972:	f7fd fbef 	bl	8154 <__adddf3>
    a976:	2d0f      	cmp	r5, #15
    a978:	4680      	mov	r8, r0
    a97a:	4689      	mov	r9, r1
    a97c:	ddd5      	ble.n	a92a <_strtod_l+0x39a>
    a97e:	1b2c      	subs	r4, r5, r4
    a980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a982:	441c      	add	r4, r3
    a984:	2c00      	cmp	r4, #0
    a986:	dc25      	bgt.n	a9d4 <_strtod_l+0x444>
    a988:	f000 80a2 	beq.w	aad0 <_strtod_l+0x540>
    a98c:	4264      	negs	r4, r4
    a98e:	f014 020f 	ands.w	r2, r4, #15
    a992:	d00a      	beq.n	a9aa <_strtod_l+0x41a>
    a994:	4b5b      	ldr	r3, [pc, #364]	; (ab04 <_strtod_l+0x574>)
    a996:	4640      	mov	r0, r8
    a998:	4649      	mov	r1, r9
    a99a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a99e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a9a2:	f7fd feb7 	bl	8714 <__aeabi_ddiv>
    a9a6:	4680      	mov	r8, r0
    a9a8:	4689      	mov	r9, r1
    a9aa:	1124      	asrs	r4, r4, #4
    a9ac:	f000 8090 	beq.w	aad0 <_strtod_l+0x540>
    a9b0:	2c1f      	cmp	r4, #31
    a9b2:	f340 80b1 	ble.w	ab18 <_strtod_l+0x588>
    a9b6:	2322      	movs	r3, #34	; 0x22
    a9b8:	f04f 0800 	mov.w	r8, #0
    a9bc:	f04f 0900 	mov.w	r9, #0
    a9c0:	f8ca 3000 	str.w	r3, [sl]
    a9c4:	e653      	b.n	a66e <_strtod_l+0xde>
    a9c6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
    a9ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a9cc:	4293      	cmp	r3, r2
    a9ce:	da19      	bge.n	aa04 <_strtod_l+0x474>
    a9d0:	1b2c      	subs	r4, r5, r4
    a9d2:	4414      	add	r4, r2
    a9d4:	f014 030f 	ands.w	r3, r4, #15
    a9d8:	d00a      	beq.n	a9f0 <_strtod_l+0x460>
    a9da:	494a      	ldr	r1, [pc, #296]	; (ab04 <_strtod_l+0x574>)
    a9dc:	4642      	mov	r2, r8
    a9de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a9e2:	464b      	mov	r3, r9
    a9e4:	e9d1 0100 	ldrd	r0, r1, [r1]
    a9e8:	f7fd fd6a 	bl	84c0 <__aeabi_dmul>
    a9ec:	4680      	mov	r8, r0
    a9ee:	4689      	mov	r9, r1
    a9f0:	f034 040f 	bics.w	r4, r4, #15
    a9f4:	d06c      	beq.n	aad0 <_strtod_l+0x540>
    a9f6:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
    a9fa:	dd41      	ble.n	aa80 <_strtod_l+0x4f0>
    a9fc:	2322      	movs	r3, #34	; 0x22
    a9fe:	f8ca 3000 	str.w	r3, [sl]
    aa02:	e774      	b.n	a8ee <_strtod_l+0x35e>
    aa04:	f1c5 050f 	rsb	r5, r5, #15
    aa08:	4c3e      	ldr	r4, [pc, #248]	; (ab04 <_strtod_l+0x574>)
    aa0a:	4642      	mov	r2, r8
    aa0c:	464b      	mov	r3, r9
    aa0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    aa12:	e9d1 0100 	ldrd	r0, r1, [r1]
    aa16:	f7fd fd53 	bl	84c0 <__aeabi_dmul>
    aa1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    aa1c:	1b5d      	subs	r5, r3, r5
    aa1e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    aa22:	e9d4 2300 	ldrd	r2, r3, [r4]
    aa26:	e78f      	b.n	a948 <_strtod_l+0x3b8>
    aa28:	3316      	adds	r3, #22
    aa2a:	dba8      	blt.n	a97e <_strtod_l+0x3ee>
    aa2c:	ebab 0206 	sub.w	r2, fp, r6
    aa30:	4b34      	ldr	r3, [pc, #208]	; (ab04 <_strtod_l+0x574>)
    aa32:	4640      	mov	r0, r8
    aa34:	4649      	mov	r1, r9
    aa36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    aa3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    aa3e:	f7fd fe69 	bl	8714 <__aeabi_ddiv>
    aa42:	e783      	b.n	a94c <_strtod_l+0x3bc>
    aa44:	2300      	movs	r3, #0
    aa46:	9306      	str	r3, [sp, #24]
    aa48:	2322      	movs	r3, #34	; 0x22
    aa4a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; ab0c <_strtod_l+0x57c>
    aa4e:	f04f 0800 	mov.w	r8, #0
    aa52:	f8ca 3000 	str.w	r3, [sl]
    aa56:	9918      	ldr	r1, [sp, #96]	; 0x60
    aa58:	4650      	mov	r0, sl
    aa5a:	f012 f965 	bl	1cd28 <_Bfree>
    aa5e:	9906      	ldr	r1, [sp, #24]
    aa60:	4650      	mov	r0, sl
    aa62:	f012 f961 	bl	1cd28 <_Bfree>
    aa66:	9905      	ldr	r1, [sp, #20]
    aa68:	4650      	mov	r0, sl
    aa6a:	f012 f95d 	bl	1cd28 <_Bfree>
    aa6e:	9910      	ldr	r1, [sp, #64]	; 0x40
    aa70:	4650      	mov	r0, sl
    aa72:	f012 f959 	bl	1cd28 <_Bfree>
    aa76:	9907      	ldr	r1, [sp, #28]
    aa78:	4650      	mov	r0, sl
    aa7a:	f012 f955 	bl	1cd28 <_Bfree>
    aa7e:	e5f6      	b.n	a66e <_strtod_l+0xde>
    aa80:	2300      	movs	r3, #0
    aa82:	1124      	asrs	r4, r4, #4
    aa84:	4640      	mov	r0, r8
    aa86:	4649      	mov	r1, r9
    aa88:	4f1f      	ldr	r7, [pc, #124]	; (ab08 <_strtod_l+0x578>)
    aa8a:	9304      	str	r3, [sp, #16]
    aa8c:	2c01      	cmp	r4, #1
    aa8e:	dc22      	bgt.n	aad6 <_strtod_l+0x546>
    aa90:	b10b      	cbz	r3, aa96 <_strtod_l+0x506>
    aa92:	4680      	mov	r8, r0
    aa94:	4689      	mov	r9, r1
    aa96:	9b04      	ldr	r3, [sp, #16]
    aa98:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
    aa9c:	491a      	ldr	r1, [pc, #104]	; (ab08 <_strtod_l+0x578>)
    aa9e:	4642      	mov	r2, r8
    aaa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    aaa4:	464b      	mov	r3, r9
    aaa6:	e9d1 0100 	ldrd	r0, r1, [r1]
    aaaa:	f7fd fd09 	bl	84c0 <__aeabi_dmul>
    aaae:	4b17      	ldr	r3, [pc, #92]	; (ab0c <_strtod_l+0x57c>)
    aab0:	460a      	mov	r2, r1
    aab2:	4680      	mov	r8, r0
    aab4:	400b      	ands	r3, r1
    aab6:	4916      	ldr	r1, [pc, #88]	; (ab10 <_strtod_l+0x580>)
    aab8:	428b      	cmp	r3, r1
    aaba:	d89f      	bhi.n	a9fc <_strtod_l+0x46c>
    aabc:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    aac0:	428b      	cmp	r3, r1
    aac2:	bf86      	itte	hi
    aac4:	f8df 904c 	ldrhi.w	r9, [pc, #76]	; ab14 <_strtod_l+0x584>
    aac8:	f04f 38ff 	movhi.w	r8, #4294967295
    aacc:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
    aad0:	2300      	movs	r3, #0
    aad2:	9304      	str	r3, [sp, #16]
    aad4:	e04b      	b.n	ab6e <_strtod_l+0x5de>
    aad6:	07e2      	lsls	r2, r4, #31
    aad8:	d504      	bpl.n	aae4 <_strtod_l+0x554>
    aada:	e9d7 2300 	ldrd	r2, r3, [r7]
    aade:	f7fd fcef 	bl	84c0 <__aeabi_dmul>
    aae2:	2301      	movs	r3, #1
    aae4:	9a04      	ldr	r2, [sp, #16]
    aae6:	1064      	asrs	r4, r4, #1
    aae8:	3708      	adds	r7, #8
    aaea:	3201      	adds	r2, #1
    aaec:	9204      	str	r2, [sp, #16]
    aaee:	e7cd      	b.n	aa8c <_strtod_l+0x4fc>
    aaf0:	00027bd1 	.word	0x00027bd1
    aaf4:	0002396c 	.word	0x0002396c
    aaf8:	00023fb1 	.word	0x00023fb1
    aafc:	00027bf9 	.word	0x00027bf9
    ab00:	0002756e 	.word	0x0002756e
    ab04:	00023128 	.word	0x00023128
    ab08:	00023100 	.word	0x00023100
    ab0c:	7ff00000 	.word	0x7ff00000
    ab10:	7ca00000 	.word	0x7ca00000
    ab14:	7fefffff 	.word	0x7fefffff
    ab18:	f014 0310 	ands.w	r3, r4, #16
    ab1c:	4640      	mov	r0, r8
    ab1e:	4649      	mov	r1, r9
    ab20:	4faa      	ldr	r7, [pc, #680]	; (adcc <_strtod_l+0x83c>)
    ab22:	bf18      	it	ne
    ab24:	236a      	movne	r3, #106	; 0x6a
    ab26:	9304      	str	r3, [sp, #16]
    ab28:	2300      	movs	r3, #0
    ab2a:	07e2      	lsls	r2, r4, #31
    ab2c:	d504      	bpl.n	ab38 <_strtod_l+0x5a8>
    ab2e:	e9d7 2300 	ldrd	r2, r3, [r7]
    ab32:	f7fd fcc5 	bl	84c0 <__aeabi_dmul>
    ab36:	2301      	movs	r3, #1
    ab38:	1064      	asrs	r4, r4, #1
    ab3a:	f107 0708 	add.w	r7, r7, #8
    ab3e:	d1f4      	bne.n	ab2a <_strtod_l+0x59a>
    ab40:	b10b      	cbz	r3, ab46 <_strtod_l+0x5b6>
    ab42:	4680      	mov	r8, r0
    ab44:	4689      	mov	r9, r1
    ab46:	9b04      	ldr	r3, [sp, #16]
    ab48:	b143      	cbz	r3, ab5c <_strtod_l+0x5cc>
    ab4a:	f3c9 520a 	ubfx	r2, r9, #20, #11
    ab4e:	4649      	mov	r1, r9
    ab50:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    ab54:	2b00      	cmp	r3, #0
    ab56:	dc4e      	bgt.n	abf6 <_strtod_l+0x666>
    ab58:	236a      	movs	r3, #106	; 0x6a
    ab5a:	9304      	str	r3, [sp, #16]
    ab5c:	2200      	movs	r2, #0
    ab5e:	2300      	movs	r3, #0
    ab60:	4640      	mov	r0, r8
    ab62:	4649      	mov	r1, r9
    ab64:	f7fd ff14 	bl	8990 <__aeabi_dcmpeq>
    ab68:	2800      	cmp	r0, #0
    ab6a:	f47f af24 	bne.w	a9b6 <_strtod_l+0x426>
    ab6e:	9b06      	ldr	r3, [sp, #24]
    ab70:	4650      	mov	r0, sl
    ab72:	9a05      	ldr	r2, [sp, #20]
    ab74:	9300      	str	r3, [sp, #0]
    ab76:	462b      	mov	r3, r5
    ab78:	990a      	ldr	r1, [sp, #40]	; 0x28
    ab7a:	f012 f93f 	bl	1cdfc <__s2b>
    ab7e:	9010      	str	r0, [sp, #64]	; 0x40
    ab80:	2800      	cmp	r0, #0
    ab82:	f43f af3b 	beq.w	a9fc <_strtod_l+0x46c>
    ab86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ab88:	ebab 0b06 	sub.w	fp, fp, r6
    ab8c:	2b00      	cmp	r3, #0
    ab8e:	bfb4      	ite	lt
    ab90:	465b      	movlt	r3, fp
    ab92:	2300      	movge	r3, #0
    ab94:	9311      	str	r3, [sp, #68]	; 0x44
    ab96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ab98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ab9c:	9313      	str	r3, [sp, #76]	; 0x4c
    ab9e:	2300      	movs	r3, #0
    aba0:	9307      	str	r3, [sp, #28]
    aba2:	9305      	str	r3, [sp, #20]
    aba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    aba6:	4650      	mov	r0, sl
    aba8:	6859      	ldr	r1, [r3, #4]
    abaa:	f012 f87d 	bl	1cca8 <_Balloc>
    abae:	9006      	str	r0, [sp, #24]
    abb0:	2800      	cmp	r0, #0
    abb2:	f43f af49 	beq.w	aa48 <_strtod_l+0x4b8>
    abb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    abb8:	300c      	adds	r0, #12
    abba:	691a      	ldr	r2, [r3, #16]
    abbc:	f103 010c 	add.w	r1, r3, #12
    abc0:	3202      	adds	r2, #2
    abc2:	0092      	lsls	r2, r2, #2
    abc4:	f017 f858 	bl	21c78 <memcpy>
    abc8:	aa1a      	add	r2, sp, #104	; 0x68
    abca:	a919      	add	r1, sp, #100	; 0x64
    abcc:	4650      	mov	r0, sl
    abce:	ec49 8b10 	vmov	d0, r8, r9
    abd2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    abd6:	f012 fbed 	bl	1d3b4 <__d2b>
    abda:	9018      	str	r0, [sp, #96]	; 0x60
    abdc:	2800      	cmp	r0, #0
    abde:	f43f af33 	beq.w	aa48 <_strtod_l+0x4b8>
    abe2:	2101      	movs	r1, #1
    abe4:	4650      	mov	r0, sl
    abe6:	f012 f953 	bl	1ce90 <__i2b>
    abea:	4603      	mov	r3, r0
    abec:	9005      	str	r0, [sp, #20]
    abee:	b9d0      	cbnz	r0, ac26 <_strtod_l+0x696>
    abf0:	2300      	movs	r3, #0
    abf2:	9305      	str	r3, [sp, #20]
    abf4:	e728      	b.n	aa48 <_strtod_l+0x4b8>
    abf6:	2b1f      	cmp	r3, #31
    abf8:	dd0e      	ble.n	ac18 <_strtod_l+0x688>
    abfa:	2b34      	cmp	r3, #52	; 0x34
    abfc:	f04f 0800 	mov.w	r8, #0
    ac00:	bfdb      	ittet	le
    ac02:	f04f 33ff 	movle.w	r3, #4294967295
    ac06:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
    ac0a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
    ac0e:	4093      	lslle	r3, r2
    ac10:	bfd8      	it	le
    ac12:	ea03 0901 	andle.w	r9, r3, r1
    ac16:	e79f      	b.n	ab58 <_strtod_l+0x5c8>
    ac18:	f04f 32ff 	mov.w	r2, #4294967295
    ac1c:	fa02 f303 	lsl.w	r3, r2, r3
    ac20:	ea03 0808 	and.w	r8, r3, r8
    ac24:	e798      	b.n	ab58 <_strtod_l+0x5c8>
    ac26:	9c19      	ldr	r4, [sp, #100]	; 0x64
    ac28:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    ac2a:	2c00      	cmp	r4, #0
    ac2c:	bfa9      	itett	ge
    ac2e:	9b11      	ldrge	r3, [sp, #68]	; 0x44
    ac30:	9b13      	ldrlt	r3, [sp, #76]	; 0x4c
    ac32:	18e7      	addge	r7, r4, r3
    ac34:	9e13      	ldrge	r6, [sp, #76]	; 0x4c
    ac36:	bfb8      	it	lt
    ac38:	1b1e      	sublt	r6, r3, r4
    ac3a:	9b04      	ldr	r3, [sp, #16]
    ac3c:	bfb8      	it	lt
    ac3e:	9f11      	ldrlt	r7, [sp, #68]	; 0x44
    ac40:	1ae4      	subs	r4, r4, r3
    ac42:	4b63      	ldr	r3, [pc, #396]	; (add0 <_strtod_l+0x840>)
    ac44:	4414      	add	r4, r2
    ac46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    ac4a:	3c01      	subs	r4, #1
    ac4c:	429c      	cmp	r4, r3
    ac4e:	f280 80b0 	bge.w	adb2 <_strtod_l+0x822>
    ac52:	1b1b      	subs	r3, r3, r4
    ac54:	2501      	movs	r5, #1
    ac56:	2b1f      	cmp	r3, #31
    ac58:	eba2 0203 	sub.w	r2, r2, r3
    ac5c:	bfcd      	iteet	gt
    ac5e:	f1c4 447f 	rsbgt	r4, r4, #4278190080	; 0xff000000
    ac62:	409d      	lslle	r5, r3
    ac64:	2400      	movle	r4, #0
    ac66:	f504 047f 	addgt.w	r4, r4, #16711680	; 0xff0000
    ac6a:	bfc2      	ittt	gt
    ac6c:	f504 447b 	addgt.w	r4, r4, #64256	; 0xfb00
    ac70:	34e2      	addgt	r4, #226	; 0xe2
    ac72:	fa05 f404 	lslgt.w	r4, r5, r4
    ac76:	eb07 0b02 	add.w	fp, r7, r2
    ac7a:	9b04      	ldr	r3, [sp, #16]
    ac7c:	4416      	add	r6, r2
    ac7e:	455f      	cmp	r7, fp
    ac80:	441e      	add	r6, r3
    ac82:	463b      	mov	r3, r7
    ac84:	bfa8      	it	ge
    ac86:	465b      	movge	r3, fp
    ac88:	42b3      	cmp	r3, r6
    ac8a:	bfa8      	it	ge
    ac8c:	4633      	movge	r3, r6
    ac8e:	2b00      	cmp	r3, #0
    ac90:	bfc2      	ittt	gt
    ac92:	ebab 0b03 	subgt.w	fp, fp, r3
    ac96:	1af6      	subgt	r6, r6, r3
    ac98:	1aff      	subgt	r7, r7, r3
    ac9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ac9c:	2b00      	cmp	r3, #0
    ac9e:	dd16      	ble.n	acce <_strtod_l+0x73e>
    aca0:	461a      	mov	r2, r3
    aca2:	9905      	ldr	r1, [sp, #20]
    aca4:	4650      	mov	r0, sl
    aca6:	f012 f9b3 	bl	1d010 <__pow5mult>
    acaa:	9005      	str	r0, [sp, #20]
    acac:	2800      	cmp	r0, #0
    acae:	d09f      	beq.n	abf0 <_strtod_l+0x660>
    acb0:	4601      	mov	r1, r0
    acb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    acb4:	4650      	mov	r0, sl
    acb6:	f012 f901 	bl	1cebc <__multiply>
    acba:	900e      	str	r0, [sp, #56]	; 0x38
    acbc:	2800      	cmp	r0, #0
    acbe:	f43f aec3 	beq.w	aa48 <_strtod_l+0x4b8>
    acc2:	9918      	ldr	r1, [sp, #96]	; 0x60
    acc4:	4650      	mov	r0, sl
    acc6:	f012 f82f 	bl	1cd28 <_Bfree>
    acca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    accc:	9318      	str	r3, [sp, #96]	; 0x60
    acce:	f1bb 0f00 	cmp.w	fp, #0
    acd2:	dc71      	bgt.n	adb8 <_strtod_l+0x828>
    acd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    acd6:	2b00      	cmp	r3, #0
    acd8:	dd08      	ble.n	acec <_strtod_l+0x75c>
    acda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    acdc:	4650      	mov	r0, sl
    acde:	9906      	ldr	r1, [sp, #24]
    ace0:	f012 f996 	bl	1d010 <__pow5mult>
    ace4:	9006      	str	r0, [sp, #24]
    ace6:	2800      	cmp	r0, #0
    ace8:	f43f aeac 	beq.w	aa44 <_strtod_l+0x4b4>
    acec:	2e00      	cmp	r6, #0
    acee:	dd08      	ble.n	ad02 <_strtod_l+0x772>
    acf0:	4632      	mov	r2, r6
    acf2:	9906      	ldr	r1, [sp, #24]
    acf4:	4650      	mov	r0, sl
    acf6:	f012 f9e5 	bl	1d0c4 <__lshift>
    acfa:	9006      	str	r0, [sp, #24]
    acfc:	2800      	cmp	r0, #0
    acfe:	f43f aea1 	beq.w	aa44 <_strtod_l+0x4b4>
    ad02:	2f00      	cmp	r7, #0
    ad04:	dd08      	ble.n	ad18 <_strtod_l+0x788>
    ad06:	463a      	mov	r2, r7
    ad08:	9905      	ldr	r1, [sp, #20]
    ad0a:	4650      	mov	r0, sl
    ad0c:	f012 f9da 	bl	1d0c4 <__lshift>
    ad10:	9005      	str	r0, [sp, #20]
    ad12:	2800      	cmp	r0, #0
    ad14:	f43f ae98 	beq.w	aa48 <_strtod_l+0x4b8>
    ad18:	9a06      	ldr	r2, [sp, #24]
    ad1a:	4650      	mov	r0, sl
    ad1c:	9918      	ldr	r1, [sp, #96]	; 0x60
    ad1e:	f012 fa3d 	bl	1d19c <__mdiff>
    ad22:	9007      	str	r0, [sp, #28]
    ad24:	2800      	cmp	r0, #0
    ad26:	f43f ae8f 	beq.w	aa48 <_strtod_l+0x4b8>
    ad2a:	68c3      	ldr	r3, [r0, #12]
    ad2c:	9905      	ldr	r1, [sp, #20]
    ad2e:	930e      	str	r3, [sp, #56]	; 0x38
    ad30:	2300      	movs	r3, #0
    ad32:	60c3      	str	r3, [r0, #12]
    ad34:	f017 fcd6 	bl	226e4 <__mcmp>
    ad38:	2800      	cmp	r0, #0
    ad3a:	da4b      	bge.n	add4 <_strtod_l+0x844>
    ad3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ad3e:	ea53 0308 	orrs.w	r3, r3, r8
    ad42:	f040 80bc 	bne.w	aebe <_strtod_l+0x92e>
    ad46:	f3c9 0313 	ubfx	r3, r9, #0, #20
    ad4a:	2b00      	cmp	r3, #0
    ad4c:	f040 80b7 	bne.w	aebe <_strtod_l+0x92e>
    ad50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    ad54:	0d1b      	lsrs	r3, r3, #20
    ad56:	051b      	lsls	r3, r3, #20
    ad58:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    ad5c:	f240 80af 	bls.w	aebe <_strtod_l+0x92e>
    ad60:	9b07      	ldr	r3, [sp, #28]
    ad62:	695b      	ldr	r3, [r3, #20]
    ad64:	b923      	cbnz	r3, ad70 <_strtod_l+0x7e0>
    ad66:	9b07      	ldr	r3, [sp, #28]
    ad68:	691b      	ldr	r3, [r3, #16]
    ad6a:	2b01      	cmp	r3, #1
    ad6c:	f340 80a7 	ble.w	aebe <_strtod_l+0x92e>
    ad70:	2201      	movs	r2, #1
    ad72:	9907      	ldr	r1, [sp, #28]
    ad74:	4650      	mov	r0, sl
    ad76:	f012 f9a5 	bl	1d0c4 <__lshift>
    ad7a:	9905      	ldr	r1, [sp, #20]
    ad7c:	9007      	str	r0, [sp, #28]
    ad7e:	f017 fcb1 	bl	226e4 <__mcmp>
    ad82:	2800      	cmp	r0, #0
    ad84:	f340 809b 	ble.w	aebe <_strtod_l+0x92e>
    ad88:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    ad8c:	9a04      	ldr	r2, [sp, #16]
    ad8e:	0d1b      	lsrs	r3, r3, #20
    ad90:	051b      	lsls	r3, r3, #20
    ad92:	2a00      	cmp	r2, #0
    ad94:	d079      	beq.n	ae8a <_strtod_l+0x8fa>
    ad96:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    ad9a:	d86d      	bhi.n	ae78 <_strtod_l+0x8e8>
    ad9c:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    ada0:	d846      	bhi.n	ae30 <_strtod_l+0x8a0>
    ada2:	f04f 0800 	mov.w	r8, #0
    ada6:	f04f 0900 	mov.w	r9, #0
    adaa:	2322      	movs	r3, #34	; 0x22
    adac:	f8ca 3000 	str.w	r3, [sl]
    adb0:	e651      	b.n	aa56 <_strtod_l+0x4c6>
    adb2:	2400      	movs	r4, #0
    adb4:	2501      	movs	r5, #1
    adb6:	e75e      	b.n	ac76 <_strtod_l+0x6e6>
    adb8:	465a      	mov	r2, fp
    adba:	9918      	ldr	r1, [sp, #96]	; 0x60
    adbc:	4650      	mov	r0, sl
    adbe:	f012 f981 	bl	1d0c4 <__lshift>
    adc2:	9018      	str	r0, [sp, #96]	; 0x60
    adc4:	2800      	cmp	r0, #0
    adc6:	d185      	bne.n	acd4 <_strtod_l+0x744>
    adc8:	e63e      	b.n	aa48 <_strtod_l+0x4b8>
    adca:	bf00      	nop
    adcc:	000230d8 	.word	0x000230d8
    add0:	fffffc02 	.word	0xfffffc02
    add4:	46cb      	mov	fp, r9
    add6:	f040 80a3 	bne.w	af20 <_strtod_l+0x990>
    adda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    addc:	f3c9 0313 	ubfx	r3, r9, #0, #20
    ade0:	2a00      	cmp	r2, #0
    ade2:	d040      	beq.n	ae66 <_strtod_l+0x8d6>
    ade4:	4a9c      	ldr	r2, [pc, #624]	; (b058 <_strtod_l+0xac8>)
    ade6:	4293      	cmp	r3, r2
    ade8:	d158      	bne.n	ae9c <_strtod_l+0x90c>
    adea:	9b04      	ldr	r3, [sp, #16]
    adec:	4642      	mov	r2, r8
    adee:	b97b      	cbnz	r3, ae10 <_strtod_l+0x880>
    adf0:	f1b8 3fff 	cmp.w	r8, #4294967295
    adf4:	f040 8089 	bne.w	af0a <_strtod_l+0x97a>
    adf8:	4b98      	ldr	r3, [pc, #608]	; (b05c <_strtod_l+0xacc>)
    adfa:	4599      	cmp	r9, r3
    adfc:	f43f ae24 	beq.w	aa48 <_strtod_l+0x4b8>
    ae00:	4b97      	ldr	r3, [pc, #604]	; (b060 <_strtod_l+0xad0>)
    ae02:	f8dd 8010 	ldr.w	r8, [sp, #16]
    ae06:	ea09 0303 	and.w	r3, r9, r3
    ae0a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
    ae0e:	e622      	b.n	aa56 <_strtod_l+0x4c6>
    ae10:	4b93      	ldr	r3, [pc, #588]	; (b060 <_strtod_l+0xad0>)
    ae12:	ea09 0303 	and.w	r3, r9, r3
    ae16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    ae1a:	d916      	bls.n	ae4a <_strtod_l+0x8ba>
    ae1c:	f118 0101 	adds.w	r1, r8, #1
    ae20:	d11b      	bne.n	ae5a <_strtod_l+0x8ca>
    ae22:	4a8e      	ldr	r2, [pc, #568]	; (b05c <_strtod_l+0xacc>)
    ae24:	4591      	cmp	r9, r2
    ae26:	f43f ae0f 	beq.w	aa48 <_strtod_l+0x4b8>
    ae2a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
    ae2e:	4680      	mov	r8, r0
    ae30:	4b8c      	ldr	r3, [pc, #560]	; (b064 <_strtod_l+0xad4>)
    ae32:	4640      	mov	r0, r8
    ae34:	4649      	mov	r1, r9
    ae36:	2200      	movs	r2, #0
    ae38:	f7fd fb42 	bl	84c0 <__aeabi_dmul>
    ae3c:	460b      	mov	r3, r1
    ae3e:	4680      	mov	r8, r0
    ae40:	4689      	mov	r9, r1
    ae42:	4303      	orrs	r3, r0
    ae44:	f47f ae07 	bne.w	aa56 <_strtod_l+0x4c6>
    ae48:	e7af      	b.n	adaa <_strtod_l+0x81a>
    ae4a:	0d1e      	lsrs	r6, r3, #20
    ae4c:	f04f 31ff 	mov.w	r1, #4294967295
    ae50:	f1c6 066b 	rsb	r6, r6, #107	; 0x6b
    ae54:	40b1      	lsls	r1, r6
    ae56:	4588      	cmp	r8, r1
    ae58:	d0e7      	beq.n	ae2a <_strtod_l+0x89a>
    ae5a:	2c00      	cmp	r4, #0
    ae5c:	d05e      	beq.n	af1c <_strtod_l+0x98c>
    ae5e:	ea14 0f0b 	tst.w	r4, fp
    ae62:	d0e5      	beq.n	ae30 <_strtod_l+0x8a0>
    ae64:	e01e      	b.n	aea4 <_strtod_l+0x914>
    ae66:	2b00      	cmp	r3, #0
    ae68:	d14a      	bne.n	af00 <_strtod_l+0x970>
    ae6a:	f1b8 0f00 	cmp.w	r8, #0
    ae6e:	d08b      	beq.n	ad88 <_strtod_l+0x7f8>
    ae70:	b364      	cbz	r4, aecc <_strtod_l+0x93c>
    ae72:	ea14 0f0b 	tst.w	r4, fp
    ae76:	e02b      	b.n	aed0 <_strtod_l+0x940>
    ae78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    ae7c:	f04f 38ff 	mov.w	r8, #4294967295
    ae80:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    ae84:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    ae88:	e7d2      	b.n	ae30 <_strtod_l+0x8a0>
    ae8a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    ae8e:	f04f 38ff 	mov.w	r8, #4294967295
    ae92:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    ae96:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    ae9a:	e5dc      	b.n	aa56 <_strtod_l+0x4c6>
    ae9c:	b19c      	cbz	r4, aec6 <_strtod_l+0x936>
    ae9e:	ea14 0f09 	tst.w	r4, r9
    aea2:	d00c      	beq.n	aebe <_strtod_l+0x92e>
    aea4:	4640      	mov	r0, r8
    aea6:	4649      	mov	r1, r9
    aea8:	9a04      	ldr	r2, [sp, #16]
    aeaa:	f017 f8dc 	bl	22066 <sulp>
    aeae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    aeb2:	ec53 2b10 	vmov	r2, r3, d0
    aeb6:	f7fd f94d 	bl	8154 <__adddf3>
    aeba:	4680      	mov	r8, r0
    aebc:	4689      	mov	r9, r1
    aebe:	9b04      	ldr	r3, [sp, #16]
    aec0:	2b00      	cmp	r3, #0
    aec2:	d1b5      	bne.n	ae30 <_strtod_l+0x8a0>
    aec4:	e5c7      	b.n	aa56 <_strtod_l+0x4c6>
    aec6:	ea15 0f08 	tst.w	r5, r8
    aeca:	e7ea      	b.n	aea2 <_strtod_l+0x912>
    aecc:	ea18 0f05 	tst.w	r8, r5
    aed0:	d0f5      	beq.n	aebe <_strtod_l+0x92e>
    aed2:	9a04      	ldr	r2, [sp, #16]
    aed4:	4640      	mov	r0, r8
    aed6:	4649      	mov	r1, r9
    aed8:	f017 f8c5 	bl	22066 <sulp>
    aedc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    aee0:	ec53 2b10 	vmov	r2, r3, d0
    aee4:	f7fd f934 	bl	8150 <__aeabi_dsub>
    aee8:	2200      	movs	r2, #0
    aeea:	2300      	movs	r3, #0
    aeec:	4604      	mov	r4, r0
    aeee:	460d      	mov	r5, r1
    aef0:	f7fd fd4e 	bl	8990 <__aeabi_dcmpeq>
    aef4:	2800      	cmp	r0, #0
    aef6:	f47f af54 	bne.w	ada2 <_strtod_l+0x812>
    aefa:	46a0      	mov	r8, r4
    aefc:	46a9      	mov	r9, r5
    aefe:	e7de      	b.n	aebe <_strtod_l+0x92e>
    af00:	2c00      	cmp	r4, #0
    af02:	d1b6      	bne.n	ae72 <_strtod_l+0x8e2>
    af04:	ea15 0f08 	tst.w	r5, r8
    af08:	e7e2      	b.n	aed0 <_strtod_l+0x940>
    af0a:	b124      	cbz	r4, af16 <_strtod_l+0x986>
    af0c:	ea14 0f09 	tst.w	r4, r9
    af10:	f43f ada1 	beq.w	aa56 <_strtod_l+0x4c6>
    af14:	e7c6      	b.n	aea4 <_strtod_l+0x914>
    af16:	ea18 0f05 	tst.w	r8, r5
    af1a:	e7f9      	b.n	af10 <_strtod_l+0x980>
    af1c:	422a      	tst	r2, r5
    af1e:	e7a0      	b.n	ae62 <_strtod_l+0x8d2>
    af20:	9905      	ldr	r1, [sp, #20]
    af22:	9807      	ldr	r0, [sp, #28]
    af24:	f017 fbf9 	bl	2271a <__ratio>
    af28:	2200      	movs	r2, #0
    af2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    af2e:	ec55 4b10 	vmov	r4, r5, d0
    af32:	4620      	mov	r0, r4
    af34:	4629      	mov	r1, r5
    af36:	f7fd fd3f 	bl	89b8 <__aeabi_dcmple>
    af3a:	2800      	cmp	r0, #0
    af3c:	d06d      	beq.n	b01a <_strtod_l+0xa8a>
    af3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    af40:	2b00      	cmp	r3, #0
    af42:	d178      	bne.n	b036 <_strtod_l+0xaa6>
    af44:	f1b8 0f00 	cmp.w	r8, #0
    af48:	d156      	bne.n	aff8 <_strtod_l+0xa68>
    af4a:	f3c9 0313 	ubfx	r3, r9, #0, #20
    af4e:	2b00      	cmp	r3, #0
    af50:	d159      	bne.n	b006 <_strtod_l+0xa76>
    af52:	2200      	movs	r2, #0
    af54:	4b44      	ldr	r3, [pc, #272]	; (b068 <_strtod_l+0xad8>)
    af56:	4620      	mov	r0, r4
    af58:	4629      	mov	r1, r5
    af5a:	f7fd fd23 	bl	89a4 <__aeabi_dcmplt>
    af5e:	2800      	cmp	r0, #0
    af60:	d158      	bne.n	b014 <_strtod_l+0xa84>
    af62:	4620      	mov	r0, r4
    af64:	4629      	mov	r1, r5
    af66:	2200      	movs	r2, #0
    af68:	4b40      	ldr	r3, [pc, #256]	; (b06c <_strtod_l+0xadc>)
    af6a:	f7fd faa9 	bl	84c0 <__aeabi_dmul>
    af6e:	4604      	mov	r4, r0
    af70:	460d      	mov	r5, r1
    af72:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    af76:	9408      	str	r4, [sp, #32]
    af78:	9309      	str	r3, [sp, #36]	; 0x24
    af7a:	4b39      	ldr	r3, [pc, #228]	; (b060 <_strtod_l+0xad0>)
    af7c:	ea0b 0303 	and.w	r3, fp, r3
    af80:	9312      	str	r3, [sp, #72]	; 0x48
    af82:	9a12      	ldr	r2, [sp, #72]	; 0x48
    af84:	4b3a      	ldr	r3, [pc, #232]	; (b070 <_strtod_l+0xae0>)
    af86:	429a      	cmp	r2, r3
    af88:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    af8c:	f040 80a9 	bne.w	b0e2 <_strtod_l+0xb52>
    af90:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
    af94:	ec49 8b10 	vmov	d0, r8, r9
    af98:	f012 f998 	bl	1d2cc <__ulp>
    af9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    afa0:	ec51 0b10 	vmov	r0, r1, d0
    afa4:	f7fd fa8c 	bl	84c0 <__aeabi_dmul>
    afa8:	4642      	mov	r2, r8
    afaa:	464b      	mov	r3, r9
    afac:	f7fd f8d2 	bl	8154 <__adddf3>
    afb0:	460b      	mov	r3, r1
    afb2:	492b      	ldr	r1, [pc, #172]	; (b060 <_strtod_l+0xad0>)
    afb4:	4680      	mov	r8, r0
    afb6:	4a2f      	ldr	r2, [pc, #188]	; (b074 <_strtod_l+0xae4>)
    afb8:	4019      	ands	r1, r3
    afba:	4291      	cmp	r1, r2
    afbc:	d95c      	bls.n	b078 <_strtod_l+0xae8>
    afbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    afc0:	4b26      	ldr	r3, [pc, #152]	; (b05c <_strtod_l+0xacc>)
    afc2:	429a      	cmp	r2, r3
    afc4:	d103      	bne.n	afce <_strtod_l+0xa3e>
    afc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    afc8:	3301      	adds	r3, #1
    afca:	f43f ad3d 	beq.w	aa48 <_strtod_l+0x4b8>
    afce:	f8df 908c 	ldr.w	r9, [pc, #140]	; b05c <_strtod_l+0xacc>
    afd2:	f04f 38ff 	mov.w	r8, #4294967295
    afd6:	9918      	ldr	r1, [sp, #96]	; 0x60
    afd8:	4650      	mov	r0, sl
    afda:	f011 fea5 	bl	1cd28 <_Bfree>
    afde:	9906      	ldr	r1, [sp, #24]
    afe0:	4650      	mov	r0, sl
    afe2:	f011 fea1 	bl	1cd28 <_Bfree>
    afe6:	9905      	ldr	r1, [sp, #20]
    afe8:	4650      	mov	r0, sl
    afea:	f011 fe9d 	bl	1cd28 <_Bfree>
    afee:	9907      	ldr	r1, [sp, #28]
    aff0:	4650      	mov	r0, sl
    aff2:	f011 fe99 	bl	1cd28 <_Bfree>
    aff6:	e5d5      	b.n	aba4 <_strtod_l+0x614>
    aff8:	f1b8 0f01 	cmp.w	r8, #1
    affc:	d103      	bne.n	b006 <_strtod_l+0xa76>
    affe:	f1b9 0f00 	cmp.w	r9, #0
    b002:	f43f aece 	beq.w	ada2 <_strtod_l+0x812>
    b006:	2400      	movs	r4, #0
    b008:	4d17      	ldr	r5, [pc, #92]	; (b068 <_strtod_l+0xad8>)
    b00a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; b048 <_strtod_l+0xab8>
    b00e:	ed8d 7b08 	vstr	d7, [sp, #32]
    b012:	e7b2      	b.n	af7a <_strtod_l+0x9ea>
    b014:	2400      	movs	r4, #0
    b016:	4d15      	ldr	r5, [pc, #84]	; (b06c <_strtod_l+0xadc>)
    b018:	e7ab      	b.n	af72 <_strtod_l+0x9e2>
    b01a:	4b14      	ldr	r3, [pc, #80]	; (b06c <_strtod_l+0xadc>)
    b01c:	4620      	mov	r0, r4
    b01e:	4629      	mov	r1, r5
    b020:	2200      	movs	r2, #0
    b022:	f7fd fa4d 	bl	84c0 <__aeabi_dmul>
    b026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b028:	4604      	mov	r4, r0
    b02a:	460d      	mov	r5, r1
    b02c:	2b00      	cmp	r3, #0
    b02e:	d0a0      	beq.n	af72 <_strtod_l+0x9e2>
    b030:	e9cd 4508 	strd	r4, r5, [sp, #32]
    b034:	e7a1      	b.n	af7a <_strtod_l+0x9ea>
    b036:	ed9f 7b06 	vldr	d7, [pc, #24]	; b050 <_strtod_l+0xac0>
    b03a:	ec55 4b17 	vmov	r4, r5, d7
    b03e:	ed8d 7b08 	vstr	d7, [sp, #32]
    b042:	e79a      	b.n	af7a <_strtod_l+0x9ea>
    b044:	f3af 8000 	nop.w
    b048:	00000000 	.word	0x00000000
    b04c:	bff00000 	.word	0xbff00000
    b050:	00000000 	.word	0x00000000
    b054:	3ff00000 	.word	0x3ff00000
    b058:	000fffff 	.word	0x000fffff
    b05c:	7fefffff 	.word	0x7fefffff
    b060:	7ff00000 	.word	0x7ff00000
    b064:	39500000 	.word	0x39500000
    b068:	3ff00000 	.word	0x3ff00000
    b06c:	3fe00000 	.word	0x3fe00000
    b070:	7fe00000 	.word	0x7fe00000
    b074:	7c9fffff 	.word	0x7c9fffff
    b078:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
    b07c:	9b04      	ldr	r3, [sp, #16]
    b07e:	464e      	mov	r6, r9
    b080:	2b00      	cmp	r3, #0
    b082:	d1a8      	bne.n	afd6 <_strtod_l+0xa46>
    b084:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    b088:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b08a:	0d1b      	lsrs	r3, r3, #20
    b08c:	051b      	lsls	r3, r3, #20
    b08e:	429a      	cmp	r2, r3
    b090:	d1a1      	bne.n	afd6 <_strtod_l+0xa46>
    b092:	4620      	mov	r0, r4
    b094:	4629      	mov	r1, r5
    b096:	f7fd fde3 	bl	8c60 <__aeabi_d2lz>
    b09a:	f3c9 0613 	ubfx	r6, r9, #0, #20
    b09e:	f7fd f9e1 	bl	8464 <__aeabi_l2d>
    b0a2:	460b      	mov	r3, r1
    b0a4:	4602      	mov	r2, r0
    b0a6:	4629      	mov	r1, r5
    b0a8:	4620      	mov	r0, r4
    b0aa:	ea46 0608 	orr.w	r6, r6, r8
    b0ae:	f7fd f84f 	bl	8150 <__aeabi_dsub>
    b0b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b0b4:	4604      	mov	r4, r0
    b0b6:	460d      	mov	r5, r1
    b0b8:	431e      	orrs	r6, r3
    b0ba:	d04b      	beq.n	b154 <_strtod_l+0xbc4>
    b0bc:	a32e      	add	r3, pc, #184	; (adr r3, b178 <_strtod_l+0xbe8>)
    b0be:	e9d3 2300 	ldrd	r2, r3, [r3]
    b0c2:	f7fd fc6f 	bl	89a4 <__aeabi_dcmplt>
    b0c6:	2800      	cmp	r0, #0
    b0c8:	f47f acc5 	bne.w	aa56 <_strtod_l+0x4c6>
    b0cc:	4620      	mov	r0, r4
    b0ce:	4629      	mov	r1, r5
    b0d0:	a32b      	add	r3, pc, #172	; (adr r3, b180 <_strtod_l+0xbf0>)
    b0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    b0d6:	f7fd fc83 	bl	89e0 <__aeabi_dcmpgt>
    b0da:	2800      	cmp	r0, #0
    b0dc:	f43f af7b 	beq.w	afd6 <_strtod_l+0xa46>
    b0e0:	e4b9      	b.n	aa56 <_strtod_l+0x4c6>
    b0e2:	9b04      	ldr	r3, [sp, #16]
    b0e4:	b313      	cbz	r3, b12c <_strtod_l+0xb9c>
    b0e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b0e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    b0ec:	d81e      	bhi.n	b12c <_strtod_l+0xb9c>
    b0ee:	4620      	mov	r0, r4
    b0f0:	4629      	mov	r1, r5
    b0f2:	a325      	add	r3, pc, #148	; (adr r3, b188 <_strtod_l+0xbf8>)
    b0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    b0f8:	f7fd fc5e 	bl	89b8 <__aeabi_dcmple>
    b0fc:	b190      	cbz	r0, b124 <_strtod_l+0xb94>
    b0fe:	4629      	mov	r1, r5
    b100:	4620      	mov	r0, r4
    b102:	f7fd fcb5 	bl	8a70 <__aeabi_d2uiz>
    b106:	2801      	cmp	r0, #1
    b108:	bf38      	it	cc
    b10a:	2001      	movcc	r0, #1
    b10c:	f7fd f95e 	bl	83cc <__aeabi_ui2d>
    b110:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b112:	4604      	mov	r4, r0
    b114:	460d      	mov	r5, r1
    b116:	b9d3      	cbnz	r3, b14e <_strtod_l+0xbbe>
    b118:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    b11c:	9014      	str	r0, [sp, #80]	; 0x50
    b11e:	9315      	str	r3, [sp, #84]	; 0x54
    b120:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    b124:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
    b128:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b12a:	1a9f      	subs	r7, r3, r2
    b12c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
    b130:	f012 f8cc 	bl	1d2cc <__ulp>
    b134:	4630      	mov	r0, r6
    b136:	4639      	mov	r1, r7
    b138:	ec53 2b10 	vmov	r2, r3, d0
    b13c:	f7fd f9c0 	bl	84c0 <__aeabi_dmul>
    b140:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    b144:	f7fd f806 	bl	8154 <__adddf3>
    b148:	4680      	mov	r8, r0
    b14a:	4689      	mov	r9, r1
    b14c:	e796      	b.n	b07c <_strtod_l+0xaec>
    b14e:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
    b152:	e7e5      	b.n	b120 <_strtod_l+0xb90>
    b154:	a30e      	add	r3, pc, #56	; (adr r3, b190 <_strtod_l+0xc00>)
    b156:	e9d3 2300 	ldrd	r2, r3, [r3]
    b15a:	f7fd fc23 	bl	89a4 <__aeabi_dcmplt>
    b15e:	e7bc      	b.n	b0da <_strtod_l+0xb4a>
    b160:	2a65      	cmp	r2, #101	; 0x65
    b162:	f43f ab43 	beq.w	a7ec <_strtod_l+0x25c>
    b166:	2a45      	cmp	r2, #69	; 0x45
    b168:	f43f ab40 	beq.w	a7ec <_strtod_l+0x25c>
    b16c:	2301      	movs	r3, #1
    b16e:	f7ff bb79 	b.w	a864 <_strtod_l+0x2d4>
    b172:	bf00      	nop
    b174:	f3af 8000 	nop.w
    b178:	94a03595 	.word	0x94a03595
    b17c:	3fdfffff 	.word	0x3fdfffff
    b180:	35afe535 	.word	0x35afe535
    b184:	3fe00000 	.word	0x3fe00000
    b188:	ffc00000 	.word	0xffc00000
    b18c:	41dfffff 	.word	0x41dfffff
    b190:	94a03595 	.word	0x94a03595
    b194:	3fcfffff 	.word	0x3fcfffff

0000b198 <_dtoa_r>:
    b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b19c:	6a47      	ldr	r7, [r0, #36]	; 0x24
    b19e:	b097      	sub	sp, #92	; 0x5c
    b1a0:	4683      	mov	fp, r0
    b1a2:	9e20      	ldr	r6, [sp, #128]	; 0x80
    b1a4:	9108      	str	r1, [sp, #32]
    b1a6:	920c      	str	r2, [sp, #48]	; 0x30
    b1a8:	9312      	str	r3, [sp, #72]	; 0x48
    b1aa:	ec55 4b10 	vmov	r4, r5, d0
    b1ae:	ed8d 0b00 	vstr	d0, [sp]
    b1b2:	b97f      	cbnz	r7, b1d4 <_dtoa_r+0x3c>
    b1b4:	2010      	movs	r0, #16
    b1b6:	f010 fa83 	bl	1b6c0 <malloc>
    b1ba:	4602      	mov	r2, r0
    b1bc:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    b1c0:	b920      	cbnz	r0, b1cc <_dtoa_r+0x34>
    b1c2:	4ba7      	ldr	r3, [pc, #668]	; (b460 <_dtoa_r+0x2c8>)
    b1c4:	21ea      	movs	r1, #234	; 0xea
    b1c6:	48a7      	ldr	r0, [pc, #668]	; (b464 <_dtoa_r+0x2cc>)
    b1c8:	f012 fe56 	bl	1de78 <__assert_func>
    b1cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
    b1d0:	6007      	str	r7, [r0, #0]
    b1d2:	60c7      	str	r7, [r0, #12]
    b1d4:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    b1d8:	6819      	ldr	r1, [r3, #0]
    b1da:	b159      	cbz	r1, b1f4 <_dtoa_r+0x5c>
    b1dc:	685a      	ldr	r2, [r3, #4]
    b1de:	2301      	movs	r3, #1
    b1e0:	4658      	mov	r0, fp
    b1e2:	4093      	lsls	r3, r2
    b1e4:	604a      	str	r2, [r1, #4]
    b1e6:	608b      	str	r3, [r1, #8]
    b1e8:	f011 fd9e 	bl	1cd28 <_Bfree>
    b1ec:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    b1f0:	2200      	movs	r2, #0
    b1f2:	601a      	str	r2, [r3, #0]
    b1f4:	1e2b      	subs	r3, r5, #0
    b1f6:	bfb7      	itett	lt
    b1f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    b1fc:	2300      	movge	r3, #0
    b1fe:	2201      	movlt	r2, #1
    b200:	9301      	strlt	r3, [sp, #4]
    b202:	bfa8      	it	ge
    b204:	6033      	strge	r3, [r6, #0]
    b206:	9f01      	ldr	r7, [sp, #4]
    b208:	4b97      	ldr	r3, [pc, #604]	; (b468 <_dtoa_r+0x2d0>)
    b20a:	bfb8      	it	lt
    b20c:	6032      	strlt	r2, [r6, #0]
    b20e:	43bb      	bics	r3, r7
    b210:	d119      	bne.n	b246 <_dtoa_r+0xae>
    b212:	f242 730f 	movw	r3, #9999	; 0x270f
    b216:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b218:	6013      	str	r3, [r2, #0]
    b21a:	f3c7 0313 	ubfx	r3, r7, #0, #20
    b21e:	4323      	orrs	r3, r4
    b220:	f000 85db 	beq.w	bdda <_dtoa_r+0xc42>
    b224:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b226:	b953      	cbnz	r3, b23e <_dtoa_r+0xa6>
    b228:	4b90      	ldr	r3, [pc, #576]	; (b46c <_dtoa_r+0x2d4>)
    b22a:	e021      	b.n	b270 <_dtoa_r+0xd8>
    b22c:	4b90      	ldr	r3, [pc, #576]	; (b470 <_dtoa_r+0x2d8>)
    b22e:	9303      	str	r3, [sp, #12]
    b230:	3308      	adds	r3, #8
    b232:	9a21      	ldr	r2, [sp, #132]	; 0x84
    b234:	6013      	str	r3, [r2, #0]
    b236:	9803      	ldr	r0, [sp, #12]
    b238:	b017      	add	sp, #92	; 0x5c
    b23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b23e:	4b8b      	ldr	r3, [pc, #556]	; (b46c <_dtoa_r+0x2d4>)
    b240:	9303      	str	r3, [sp, #12]
    b242:	3303      	adds	r3, #3
    b244:	e7f5      	b.n	b232 <_dtoa_r+0x9a>
    b246:	ed9d 7b00 	vldr	d7, [sp]
    b24a:	2200      	movs	r2, #0
    b24c:	2300      	movs	r3, #0
    b24e:	ec51 0b17 	vmov	r0, r1, d7
    b252:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
    b256:	f7fd fb9b 	bl	8990 <__aeabi_dcmpeq>
    b25a:	4680      	mov	r8, r0
    b25c:	b150      	cbz	r0, b274 <_dtoa_r+0xdc>
    b25e:	2301      	movs	r3, #1
    b260:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b262:	6013      	str	r3, [r2, #0]
    b264:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b266:	b113      	cbz	r3, b26e <_dtoa_r+0xd6>
    b268:	4b82      	ldr	r3, [pc, #520]	; (b474 <_dtoa_r+0x2dc>)
    b26a:	9a21      	ldr	r2, [sp, #132]	; 0x84
    b26c:	6013      	str	r3, [r2, #0]
    b26e:	4b82      	ldr	r3, [pc, #520]	; (b478 <_dtoa_r+0x2e0>)
    b270:	9303      	str	r3, [sp, #12]
    b272:	e7e0      	b.n	b236 <_dtoa_r+0x9e>
    b274:	f3c7 560a 	ubfx	r6, r7, #20, #11
    b278:	aa14      	add	r2, sp, #80	; 0x50
    b27a:	a915      	add	r1, sp, #84	; 0x54
    b27c:	4658      	mov	r0, fp
    b27e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
    b282:	f012 f897 	bl	1d3b4 <__d2b>
    b286:	9002      	str	r0, [sp, #8]
    b288:	2e00      	cmp	r6, #0
    b28a:	d076      	beq.n	b37a <_dtoa_r+0x1e2>
    b28c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b28e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    b292:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    b296:	f3c3 0313 	ubfx	r3, r3, #0, #20
    b29a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    b29e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    b2a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    b2a6:	4619      	mov	r1, r3
    b2a8:	2200      	movs	r2, #0
    b2aa:	4b74      	ldr	r3, [pc, #464]	; (b47c <_dtoa_r+0x2e4>)
    b2ac:	f7fc ff50 	bl	8150 <__aeabi_dsub>
    b2b0:	a365      	add	r3, pc, #404	; (adr r3, b448 <_dtoa_r+0x2b0>)
    b2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    b2b6:	f7fd f903 	bl	84c0 <__aeabi_dmul>
    b2ba:	a365      	add	r3, pc, #404	; (adr r3, b450 <_dtoa_r+0x2b8>)
    b2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    b2c0:	f7fc ff48 	bl	8154 <__adddf3>
    b2c4:	4604      	mov	r4, r0
    b2c6:	460d      	mov	r5, r1
    b2c8:	4630      	mov	r0, r6
    b2ca:	f7fd f88f 	bl	83ec <__aeabi_i2d>
    b2ce:	a362      	add	r3, pc, #392	; (adr r3, b458 <_dtoa_r+0x2c0>)
    b2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    b2d4:	f7fd f8f4 	bl	84c0 <__aeabi_dmul>
    b2d8:	4602      	mov	r2, r0
    b2da:	460b      	mov	r3, r1
    b2dc:	4620      	mov	r0, r4
    b2de:	4629      	mov	r1, r5
    b2e0:	f7fc ff38 	bl	8154 <__adddf3>
    b2e4:	4604      	mov	r4, r0
    b2e6:	460d      	mov	r5, r1
    b2e8:	f7fd fb9a 	bl	8a20 <__aeabi_d2iz>
    b2ec:	2200      	movs	r2, #0
    b2ee:	4607      	mov	r7, r0
    b2f0:	2300      	movs	r3, #0
    b2f2:	4620      	mov	r0, r4
    b2f4:	4629      	mov	r1, r5
    b2f6:	f7fd fb55 	bl	89a4 <__aeabi_dcmplt>
    b2fa:	b140      	cbz	r0, b30e <_dtoa_r+0x176>
    b2fc:	4638      	mov	r0, r7
    b2fe:	f7fd f875 	bl	83ec <__aeabi_i2d>
    b302:	4622      	mov	r2, r4
    b304:	462b      	mov	r3, r5
    b306:	f7fd fb43 	bl	8990 <__aeabi_dcmpeq>
    b30a:	b900      	cbnz	r0, b30e <_dtoa_r+0x176>
    b30c:	3f01      	subs	r7, #1
    b30e:	2f16      	cmp	r7, #22
    b310:	d852      	bhi.n	b3b8 <_dtoa_r+0x220>
    b312:	4b5b      	ldr	r3, [pc, #364]	; (b480 <_dtoa_r+0x2e8>)
    b314:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    b318:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    b31c:	e9d3 2300 	ldrd	r2, r3, [r3]
    b320:	f7fd fb40 	bl	89a4 <__aeabi_dcmplt>
    b324:	2800      	cmp	r0, #0
    b326:	d049      	beq.n	b3bc <_dtoa_r+0x224>
    b328:	3f01      	subs	r7, #1
    b32a:	2300      	movs	r3, #0
    b32c:	9311      	str	r3, [sp, #68]	; 0x44
    b32e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b330:	1b9b      	subs	r3, r3, r6
    b332:	1e5a      	subs	r2, r3, #1
    b334:	bf4c      	ite	mi
    b336:	f1c3 0301 	rsbmi	r3, r3, #1
    b33a:	2300      	movpl	r3, #0
    b33c:	9207      	str	r2, [sp, #28]
    b33e:	bf45      	ittet	mi
    b340:	9306      	strmi	r3, [sp, #24]
    b342:	2300      	movmi	r3, #0
    b344:	9306      	strpl	r3, [sp, #24]
    b346:	9307      	strmi	r3, [sp, #28]
    b348:	2f00      	cmp	r7, #0
    b34a:	db39      	blt.n	b3c0 <_dtoa_r+0x228>
    b34c:	9b07      	ldr	r3, [sp, #28]
    b34e:	9710      	str	r7, [sp, #64]	; 0x40
    b350:	443b      	add	r3, r7
    b352:	9307      	str	r3, [sp, #28]
    b354:	2300      	movs	r3, #0
    b356:	9309      	str	r3, [sp, #36]	; 0x24
    b358:	9b08      	ldr	r3, [sp, #32]
    b35a:	2b09      	cmp	r3, #9
    b35c:	d866      	bhi.n	b42c <_dtoa_r+0x294>
    b35e:	2b05      	cmp	r3, #5
    b360:	bfc5      	ittet	gt
    b362:	3b04      	subgt	r3, #4
    b364:	2400      	movgt	r4, #0
    b366:	2401      	movle	r4, #1
    b368:	9308      	strgt	r3, [sp, #32]
    b36a:	9b08      	ldr	r3, [sp, #32]
    b36c:	3b02      	subs	r3, #2
    b36e:	2b03      	cmp	r3, #3
    b370:	d867      	bhi.n	b442 <_dtoa_r+0x2aa>
    b372:	e8df f003 	tbb	[pc, r3]
    b376:	3a2d      	.short	0x3a2d
    b378:	5938      	.short	0x5938
    b37a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    b37e:	441e      	add	r6, r3
    b380:	f206 4332 	addw	r3, r6, #1074	; 0x432
    b384:	2b20      	cmp	r3, #32
    b386:	bfc9      	itett	gt
    b388:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    b38c:	f1c3 0320 	rsble	r3, r3, #32
    b390:	409f      	lslgt	r7, r3
    b392:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    b396:	bfd8      	it	le
    b398:	fa04 f003 	lslle.w	r0, r4, r3
    b39c:	f106 36ff 	add.w	r6, r6, #4294967295
    b3a0:	bfc4      	itt	gt
    b3a2:	fa24 f303 	lsrgt.w	r3, r4, r3
    b3a6:	ea47 0003 	orrgt.w	r0, r7, r3
    b3aa:	f7fd f80f 	bl	83cc <__aeabi_ui2d>
    b3ae:	2201      	movs	r2, #1
    b3b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    b3b4:	9213      	str	r2, [sp, #76]	; 0x4c
    b3b6:	e776      	b.n	b2a6 <_dtoa_r+0x10e>
    b3b8:	2301      	movs	r3, #1
    b3ba:	e7b7      	b.n	b32c <_dtoa_r+0x194>
    b3bc:	9011      	str	r0, [sp, #68]	; 0x44
    b3be:	e7b6      	b.n	b32e <_dtoa_r+0x196>
    b3c0:	9b06      	ldr	r3, [sp, #24]
    b3c2:	1bdb      	subs	r3, r3, r7
    b3c4:	9306      	str	r3, [sp, #24]
    b3c6:	427b      	negs	r3, r7
    b3c8:	9309      	str	r3, [sp, #36]	; 0x24
    b3ca:	2300      	movs	r3, #0
    b3cc:	9310      	str	r3, [sp, #64]	; 0x40
    b3ce:	e7c3      	b.n	b358 <_dtoa_r+0x1c0>
    b3d0:	2300      	movs	r3, #0
    b3d2:	930d      	str	r3, [sp, #52]	; 0x34
    b3d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b3d6:	2b00      	cmp	r3, #0
    b3d8:	dc56      	bgt.n	b488 <_dtoa_r+0x2f0>
    b3da:	2301      	movs	r3, #1
    b3dc:	4699      	mov	r9, r3
    b3de:	461a      	mov	r2, r3
    b3e0:	9304      	str	r3, [sp, #16]
    b3e2:	920c      	str	r2, [sp, #48]	; 0x30
    b3e4:	e00c      	b.n	b400 <_dtoa_r+0x268>
    b3e6:	2301      	movs	r3, #1
    b3e8:	e7f3      	b.n	b3d2 <_dtoa_r+0x23a>
    b3ea:	2300      	movs	r3, #0
    b3ec:	930d      	str	r3, [sp, #52]	; 0x34
    b3ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b3f0:	18fb      	adds	r3, r7, r3
    b3f2:	f103 0901 	add.w	r9, r3, #1
    b3f6:	9304      	str	r3, [sp, #16]
    b3f8:	464b      	mov	r3, r9
    b3fa:	2b01      	cmp	r3, #1
    b3fc:	bfb8      	it	lt
    b3fe:	2301      	movlt	r3, #1
    b400:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    b404:	2100      	movs	r1, #0
    b406:	2204      	movs	r2, #4
    b408:	f102 0514 	add.w	r5, r2, #20
    b40c:	429d      	cmp	r5, r3
    b40e:	d93f      	bls.n	b490 <_dtoa_r+0x2f8>
    b410:	6041      	str	r1, [r0, #4]
    b412:	4658      	mov	r0, fp
    b414:	f011 fc48 	bl	1cca8 <_Balloc>
    b418:	9003      	str	r0, [sp, #12]
    b41a:	2800      	cmp	r0, #0
    b41c:	d13b      	bne.n	b496 <_dtoa_r+0x2fe>
    b41e:	4b19      	ldr	r3, [pc, #100]	; (b484 <_dtoa_r+0x2ec>)
    b420:	4602      	mov	r2, r0
    b422:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    b426:	e6ce      	b.n	b1c6 <_dtoa_r+0x2e>
    b428:	2301      	movs	r3, #1
    b42a:	e7df      	b.n	b3ec <_dtoa_r+0x254>
    b42c:	2401      	movs	r4, #1
    b42e:	2300      	movs	r3, #0
    b430:	940d      	str	r4, [sp, #52]	; 0x34
    b432:	9308      	str	r3, [sp, #32]
    b434:	f04f 33ff 	mov.w	r3, #4294967295
    b438:	2200      	movs	r2, #0
    b43a:	4699      	mov	r9, r3
    b43c:	9304      	str	r3, [sp, #16]
    b43e:	2312      	movs	r3, #18
    b440:	e7cf      	b.n	b3e2 <_dtoa_r+0x24a>
    b442:	2301      	movs	r3, #1
    b444:	930d      	str	r3, [sp, #52]	; 0x34
    b446:	e7f5      	b.n	b434 <_dtoa_r+0x29c>
    b448:	636f4361 	.word	0x636f4361
    b44c:	3fd287a7 	.word	0x3fd287a7
    b450:	8b60c8b3 	.word	0x8b60c8b3
    b454:	3fc68a28 	.word	0x3fc68a28
    b458:	509f79fb 	.word	0x509f79fb
    b45c:	3fd34413 	.word	0x3fd34413
    b460:	00027c03 	.word	0x00027c03
    b464:	00027c1a 	.word	0x00027c1a
    b468:	7ff00000 	.word	0x7ff00000
    b46c:	00027bff 	.word	0x00027bff
    b470:	00027bf6 	.word	0x00027bf6
    b474:	000259f6 	.word	0x000259f6
    b478:	000259f5 	.word	0x000259f5
    b47c:	3ff80000 	.word	0x3ff80000
    b480:	00023128 	.word	0x00023128
    b484:	00027c8e 	.word	0x00027c8e
    b488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b48a:	4699      	mov	r9, r3
    b48c:	9304      	str	r3, [sp, #16]
    b48e:	e7b7      	b.n	b400 <_dtoa_r+0x268>
    b490:	3101      	adds	r1, #1
    b492:	0052      	lsls	r2, r2, #1
    b494:	e7b8      	b.n	b408 <_dtoa_r+0x270>
    b496:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    b49a:	f1b9 0f0e 	cmp.w	r9, #14
    b49e:	9a03      	ldr	r2, [sp, #12]
    b4a0:	601a      	str	r2, [r3, #0]
    b4a2:	d86f      	bhi.n	b584 <_dtoa_r+0x3ec>
    b4a4:	2c00      	cmp	r4, #0
    b4a6:	d06d      	beq.n	b584 <_dtoa_r+0x3ec>
    b4a8:	2f00      	cmp	r7, #0
    b4aa:	dd36      	ble.n	b51a <_dtoa_r+0x382>
    b4ac:	f007 020f 	and.w	r2, r7, #15
    b4b0:	4ba0      	ldr	r3, [pc, #640]	; (b734 <_dtoa_r+0x59c>)
    b4b2:	05f8      	lsls	r0, r7, #23
    b4b4:	ea4f 1427 	mov.w	r4, r7, asr #4
    b4b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b4bc:	ed93 7b00 	vldr	d7, [r3]
    b4c0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    b4c4:	d517      	bpl.n	b4f6 <_dtoa_r+0x35e>
    b4c6:	4b9c      	ldr	r3, [pc, #624]	; (b738 <_dtoa_r+0x5a0>)
    b4c8:	f004 040f 	and.w	r4, r4, #15
    b4cc:	f04f 0803 	mov.w	r8, #3
    b4d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    b4d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    b4d8:	f7fd f91c 	bl	8714 <__aeabi_ddiv>
    b4dc:	e9cd 0100 	strd	r0, r1, [sp]
    b4e0:	4d95      	ldr	r5, [pc, #596]	; (b738 <_dtoa_r+0x5a0>)
    b4e2:	b95c      	cbnz	r4, b4fc <_dtoa_r+0x364>
    b4e4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    b4e8:	e9dd 0100 	ldrd	r0, r1, [sp]
    b4ec:	f7fd f912 	bl	8714 <__aeabi_ddiv>
    b4f0:	e9cd 0100 	strd	r0, r1, [sp]
    b4f4:	e02b      	b.n	b54e <_dtoa_r+0x3b6>
    b4f6:	f04f 0802 	mov.w	r8, #2
    b4fa:	e7f1      	b.n	b4e0 <_dtoa_r+0x348>
    b4fc:	07e1      	lsls	r1, r4, #31
    b4fe:	d509      	bpl.n	b514 <_dtoa_r+0x37c>
    b500:	f108 0801 	add.w	r8, r8, #1
    b504:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    b508:	e9d5 2300 	ldrd	r2, r3, [r5]
    b50c:	f7fc ffd8 	bl	84c0 <__aeabi_dmul>
    b510:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    b514:	1064      	asrs	r4, r4, #1
    b516:	3508      	adds	r5, #8
    b518:	e7e3      	b.n	b4e2 <_dtoa_r+0x34a>
    b51a:	f000 8107 	beq.w	b72c <_dtoa_r+0x594>
    b51e:	427c      	negs	r4, r7
    b520:	4b84      	ldr	r3, [pc, #528]	; (b734 <_dtoa_r+0x59c>)
    b522:	4d85      	ldr	r5, [pc, #532]	; (b738 <_dtoa_r+0x5a0>)
    b524:	f04f 0802 	mov.w	r8, #2
    b528:	f004 020f 	and.w	r2, r4, #15
    b52c:	1124      	asrs	r4, r4, #4
    b52e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b532:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    b536:	e9d3 2300 	ldrd	r2, r3, [r3]
    b53a:	f7fc ffc1 	bl	84c0 <__aeabi_dmul>
    b53e:	2300      	movs	r3, #0
    b540:	e9cd 0100 	strd	r0, r1, [sp]
    b544:	2c00      	cmp	r4, #0
    b546:	f040 80e5 	bne.w	b714 <_dtoa_r+0x57c>
    b54a:	2b00      	cmp	r3, #0
    b54c:	d1d0      	bne.n	b4f0 <_dtoa_r+0x358>
    b54e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b550:	e9dd 4500 	ldrd	r4, r5, [sp]
    b554:	2b00      	cmp	r3, #0
    b556:	f000 814c 	beq.w	b7f2 <_dtoa_r+0x65a>
    b55a:	2200      	movs	r2, #0
    b55c:	4b77      	ldr	r3, [pc, #476]	; (b73c <_dtoa_r+0x5a4>)
    b55e:	4620      	mov	r0, r4
    b560:	4629      	mov	r1, r5
    b562:	f7fd fa1f 	bl	89a4 <__aeabi_dcmplt>
    b566:	2800      	cmp	r0, #0
    b568:	f000 8143 	beq.w	b7f2 <_dtoa_r+0x65a>
    b56c:	f1b9 0f00 	cmp.w	r9, #0
    b570:	f000 813f 	beq.w	b7f2 <_dtoa_r+0x65a>
    b574:	9b04      	ldr	r3, [sp, #16]
    b576:	2b00      	cmp	r3, #0
    b578:	f300 80e4 	bgt.w	b744 <_dtoa_r+0x5ac>
    b57c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
    b580:	e9cd 3400 	strd	r3, r4, [sp]
    b584:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b586:	2b00      	cmp	r3, #0
    b588:	db02      	blt.n	b590 <_dtoa_r+0x3f8>
    b58a:	2f0e      	cmp	r7, #14
    b58c:	f340 8242 	ble.w	ba14 <_dtoa_r+0x87c>
    b590:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b592:	2a00      	cmp	r2, #0
    b594:	f040 8267 	bne.w	ba66 <_dtoa_r+0x8ce>
    b598:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b59a:	2500      	movs	r5, #0
    b59c:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b5a0:	f1b8 0f00 	cmp.w	r8, #0
    b5a4:	d00d      	beq.n	b5c2 <_dtoa_r+0x42a>
    b5a6:	9b07      	ldr	r3, [sp, #28]
    b5a8:	2b00      	cmp	r3, #0
    b5aa:	dd0a      	ble.n	b5c2 <_dtoa_r+0x42a>
    b5ac:	4543      	cmp	r3, r8
    b5ae:	9a06      	ldr	r2, [sp, #24]
    b5b0:	bfa8      	it	ge
    b5b2:	4643      	movge	r3, r8
    b5b4:	1ad2      	subs	r2, r2, r3
    b5b6:	eba8 0803 	sub.w	r8, r8, r3
    b5ba:	9206      	str	r2, [sp, #24]
    b5bc:	9a07      	ldr	r2, [sp, #28]
    b5be:	1ad3      	subs	r3, r2, r3
    b5c0:	9307      	str	r3, [sp, #28]
    b5c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b5c4:	b30b      	cbz	r3, b60a <_dtoa_r+0x472>
    b5c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b5c8:	2b00      	cmp	r3, #0
    b5ca:	f000 82a6 	beq.w	bb1a <_dtoa_r+0x982>
    b5ce:	2c00      	cmp	r4, #0
    b5d0:	f000 82a1 	beq.w	bb16 <_dtoa_r+0x97e>
    b5d4:	4629      	mov	r1, r5
    b5d6:	4622      	mov	r2, r4
    b5d8:	4658      	mov	r0, fp
    b5da:	f011 fd19 	bl	1d010 <__pow5mult>
    b5de:	9a02      	ldr	r2, [sp, #8]
    b5e0:	4601      	mov	r1, r0
    b5e2:	4605      	mov	r5, r0
    b5e4:	4658      	mov	r0, fp
    b5e6:	f011 fc69 	bl	1cebc <__multiply>
    b5ea:	9902      	ldr	r1, [sp, #8]
    b5ec:	4606      	mov	r6, r0
    b5ee:	4658      	mov	r0, fp
    b5f0:	f011 fb9a 	bl	1cd28 <_Bfree>
    b5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b5f6:	1b1b      	subs	r3, r3, r4
    b5f8:	9309      	str	r3, [sp, #36]	; 0x24
    b5fa:	f000 8291 	beq.w	bb20 <_dtoa_r+0x988>
    b5fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b600:	4631      	mov	r1, r6
    b602:	4658      	mov	r0, fp
    b604:	f011 fd04 	bl	1d010 <__pow5mult>
    b608:	9002      	str	r0, [sp, #8]
    b60a:	2101      	movs	r1, #1
    b60c:	4658      	mov	r0, fp
    b60e:	f011 fc3f 	bl	1ce90 <__i2b>
    b612:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b614:	4604      	mov	r4, r0
    b616:	2b00      	cmp	r3, #0
    b618:	f000 8284 	beq.w	bb24 <_dtoa_r+0x98c>
    b61c:	461a      	mov	r2, r3
    b61e:	4601      	mov	r1, r0
    b620:	4658      	mov	r0, fp
    b622:	f011 fcf5 	bl	1d010 <__pow5mult>
    b626:	9b08      	ldr	r3, [sp, #32]
    b628:	4604      	mov	r4, r0
    b62a:	2b01      	cmp	r3, #1
    b62c:	dc03      	bgt.n	b636 <_dtoa_r+0x49e>
    b62e:	9b00      	ldr	r3, [sp, #0]
    b630:	2b00      	cmp	r3, #0
    b632:	f000 827c 	beq.w	bb2e <_dtoa_r+0x996>
    b636:	2600      	movs	r6, #0
    b638:	6923      	ldr	r3, [r4, #16]
    b63a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    b63e:	6918      	ldr	r0, [r3, #16]
    b640:	f017 f801 	bl	22646 <__hi0bits>
    b644:	f1c0 0020 	rsb	r0, r0, #32
    b648:	9610      	str	r6, [sp, #64]	; 0x40
    b64a:	9b07      	ldr	r3, [sp, #28]
    b64c:	4418      	add	r0, r3
    b64e:	f010 001f 	ands.w	r0, r0, #31
    b652:	f000 8291 	beq.w	bb78 <_dtoa_r+0x9e0>
    b656:	f1c0 0320 	rsb	r3, r0, #32
    b65a:	2b04      	cmp	r3, #4
    b65c:	f340 8281 	ble.w	bb62 <_dtoa_r+0x9ca>
    b660:	f1c0 001c 	rsb	r0, r0, #28
    b664:	9b06      	ldr	r3, [sp, #24]
    b666:	4403      	add	r3, r0
    b668:	4480      	add	r8, r0
    b66a:	9306      	str	r3, [sp, #24]
    b66c:	9b07      	ldr	r3, [sp, #28]
    b66e:	4403      	add	r3, r0
    b670:	9307      	str	r3, [sp, #28]
    b672:	9b06      	ldr	r3, [sp, #24]
    b674:	2b00      	cmp	r3, #0
    b676:	dd05      	ble.n	b684 <_dtoa_r+0x4ec>
    b678:	461a      	mov	r2, r3
    b67a:	9902      	ldr	r1, [sp, #8]
    b67c:	4658      	mov	r0, fp
    b67e:	f011 fd21 	bl	1d0c4 <__lshift>
    b682:	9002      	str	r0, [sp, #8]
    b684:	9b07      	ldr	r3, [sp, #28]
    b686:	2b00      	cmp	r3, #0
    b688:	dd05      	ble.n	b696 <_dtoa_r+0x4fe>
    b68a:	4621      	mov	r1, r4
    b68c:	461a      	mov	r2, r3
    b68e:	4658      	mov	r0, fp
    b690:	f011 fd18 	bl	1d0c4 <__lshift>
    b694:	4604      	mov	r4, r0
    b696:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b698:	2b00      	cmp	r3, #0
    b69a:	f000 8276 	beq.w	bb8a <_dtoa_r+0x9f2>
    b69e:	4621      	mov	r1, r4
    b6a0:	9802      	ldr	r0, [sp, #8]
    b6a2:	f017 f81f 	bl	226e4 <__mcmp>
    b6a6:	2800      	cmp	r0, #0
    b6a8:	f280 826f 	bge.w	bb8a <_dtoa_r+0x9f2>
    b6ac:	2300      	movs	r3, #0
    b6ae:	220a      	movs	r2, #10
    b6b0:	9902      	ldr	r1, [sp, #8]
    b6b2:	4658      	mov	r0, fp
    b6b4:	f011 fb5a 	bl	1cd6c <__multadd>
    b6b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b6ba:	1e7e      	subs	r6, r7, #1
    b6bc:	9002      	str	r0, [sp, #8]
    b6be:	2b00      	cmp	r3, #0
    b6c0:	f000 825c 	beq.w	bb7c <_dtoa_r+0x9e4>
    b6c4:	2300      	movs	r3, #0
    b6c6:	4629      	mov	r1, r5
    b6c8:	220a      	movs	r2, #10
    b6ca:	4658      	mov	r0, fp
    b6cc:	f011 fb4e 	bl	1cd6c <__multadd>
    b6d0:	9b04      	ldr	r3, [sp, #16]
    b6d2:	4605      	mov	r5, r0
    b6d4:	2b00      	cmp	r3, #0
    b6d6:	dc03      	bgt.n	b6e0 <_dtoa_r+0x548>
    b6d8:	9b08      	ldr	r3, [sp, #32]
    b6da:	2b02      	cmp	r3, #2
    b6dc:	f300 825e 	bgt.w	bb9c <_dtoa_r+0xa04>
    b6e0:	f1b8 0f00 	cmp.w	r8, #0
    b6e4:	dd05      	ble.n	b6f2 <_dtoa_r+0x55a>
    b6e6:	4629      	mov	r1, r5
    b6e8:	4642      	mov	r2, r8
    b6ea:	4658      	mov	r0, fp
    b6ec:	f011 fcea 	bl	1d0c4 <__lshift>
    b6f0:	4605      	mov	r5, r0
    b6f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b6f4:	2b00      	cmp	r3, #0
    b6f6:	f000 82d0 	beq.w	bc9a <_dtoa_r+0xb02>
    b6fa:	6869      	ldr	r1, [r5, #4]
    b6fc:	4658      	mov	r0, fp
    b6fe:	f011 fad3 	bl	1cca8 <_Balloc>
    b702:	4607      	mov	r7, r0
    b704:	2800      	cmp	r0, #0
    b706:	f040 827f 	bne.w	bc08 <_dtoa_r+0xa70>
    b70a:	4b0d      	ldr	r3, [pc, #52]	; (b740 <_dtoa_r+0x5a8>)
    b70c:	4602      	mov	r2, r0
    b70e:	f240 21ea 	movw	r1, #746	; 0x2ea
    b712:	e558      	b.n	b1c6 <_dtoa_r+0x2e>
    b714:	07e2      	lsls	r2, r4, #31
    b716:	d506      	bpl.n	b726 <_dtoa_r+0x58e>
    b718:	f108 0801 	add.w	r8, r8, #1
    b71c:	e9d5 2300 	ldrd	r2, r3, [r5]
    b720:	f7fc fece 	bl	84c0 <__aeabi_dmul>
    b724:	2301      	movs	r3, #1
    b726:	1064      	asrs	r4, r4, #1
    b728:	3508      	adds	r5, #8
    b72a:	e70b      	b.n	b544 <_dtoa_r+0x3ac>
    b72c:	f04f 0802 	mov.w	r8, #2
    b730:	e70d      	b.n	b54e <_dtoa_r+0x3b6>
    b732:	bf00      	nop
    b734:	00023128 	.word	0x00023128
    b738:	00023100 	.word	0x00023100
    b73c:	3ff00000 	.word	0x3ff00000
    b740:	00027c8e 	.word	0x00027c8e
    b744:	4620      	mov	r0, r4
    b746:	2200      	movs	r2, #0
    b748:	4bac      	ldr	r3, [pc, #688]	; (b9fc <_dtoa_r+0x864>)
    b74a:	4629      	mov	r1, r5
    b74c:	f7fc feb8 	bl	84c0 <__aeabi_dmul>
    b750:	1e7e      	subs	r6, r7, #1
    b752:	f108 0801 	add.w	r8, r8, #1
    b756:	9c04      	ldr	r4, [sp, #16]
    b758:	e9cd 0100 	strd	r0, r1, [sp]
    b75c:	4640      	mov	r0, r8
    b75e:	f7fc fe45 	bl	83ec <__aeabi_i2d>
    b762:	e9dd 2300 	ldrd	r2, r3, [sp]
    b766:	f7fc feab 	bl	84c0 <__aeabi_dmul>
    b76a:	4ba5      	ldr	r3, [pc, #660]	; (ba00 <_dtoa_r+0x868>)
    b76c:	2200      	movs	r2, #0
    b76e:	f7fc fcf1 	bl	8154 <__adddf3>
    b772:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    b776:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    b77a:	930f      	str	r3, [sp, #60]	; 0x3c
    b77c:	2c00      	cmp	r4, #0
    b77e:	d13b      	bne.n	b7f8 <_dtoa_r+0x660>
    b780:	2200      	movs	r2, #0
    b782:	4ba0      	ldr	r3, [pc, #640]	; (ba04 <_dtoa_r+0x86c>)
    b784:	e9dd 0100 	ldrd	r0, r1, [sp]
    b788:	f7fc fce2 	bl	8150 <__aeabi_dsub>
    b78c:	4602      	mov	r2, r0
    b78e:	460b      	mov	r3, r1
    b790:	e9cd 2300 	strd	r2, r3, [sp]
    b794:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    b798:	f7fd f922 	bl	89e0 <__aeabi_dcmpgt>
    b79c:	2800      	cmp	r0, #0
    b79e:	f040 8157 	bne.w	ba50 <_dtoa_r+0x8b8>
    b7a2:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
    b7a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    b7aa:	e9dd 0100 	ldrd	r0, r1, [sp]
    b7ae:	f7fd f8f9 	bl	89a4 <__aeabi_dcmplt>
    b7b2:	2800      	cmp	r0, #0
    b7b4:	f43f aee2 	beq.w	b57c <_dtoa_r+0x3e4>
    b7b8:	2400      	movs	r4, #0
    b7ba:	4625      	mov	r5, r4
    b7bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b7be:	f8dd a00c 	ldr.w	sl, [sp, #12]
    b7c2:	43de      	mvns	r6, r3
    b7c4:	f04f 0800 	mov.w	r8, #0
    b7c8:	4621      	mov	r1, r4
    b7ca:	4658      	mov	r0, fp
    b7cc:	f011 faac 	bl	1cd28 <_Bfree>
    b7d0:	2d00      	cmp	r5, #0
    b7d2:	f000 80a9 	beq.w	b928 <_dtoa_r+0x790>
    b7d6:	f1b8 0f00 	cmp.w	r8, #0
    b7da:	d005      	beq.n	b7e8 <_dtoa_r+0x650>
    b7dc:	45a8      	cmp	r8, r5
    b7de:	d003      	beq.n	b7e8 <_dtoa_r+0x650>
    b7e0:	4641      	mov	r1, r8
    b7e2:	4658      	mov	r0, fp
    b7e4:	f011 faa0 	bl	1cd28 <_Bfree>
    b7e8:	4629      	mov	r1, r5
    b7ea:	4658      	mov	r0, fp
    b7ec:	f011 fa9c 	bl	1cd28 <_Bfree>
    b7f0:	e09a      	b.n	b928 <_dtoa_r+0x790>
    b7f2:	463e      	mov	r6, r7
    b7f4:	464c      	mov	r4, r9
    b7f6:	e7b1      	b.n	b75c <_dtoa_r+0x5c4>
    b7f8:	4b83      	ldr	r3, [pc, #524]	; (ba08 <_dtoa_r+0x870>)
    b7fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    b7fe:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    b802:	9b03      	ldr	r3, [sp, #12]
    b804:	441c      	add	r4, r3
    b806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b808:	2b00      	cmp	r3, #0
    b80a:	d04a      	beq.n	b8a2 <_dtoa_r+0x70a>
    b80c:	4602      	mov	r2, r0
    b80e:	460b      	mov	r3, r1
    b810:	2000      	movs	r0, #0
    b812:	497e      	ldr	r1, [pc, #504]	; (ba0c <_dtoa_r+0x874>)
    b814:	f7fc ff7e 	bl	8714 <__aeabi_ddiv>
    b818:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    b81c:	f7fc fc98 	bl	8150 <__aeabi_dsub>
    b820:	f8dd a00c 	ldr.w	sl, [sp, #12]
    b824:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    b828:	e9dd 0100 	ldrd	r0, r1, [sp]
    b82c:	f7fd f8f8 	bl	8a20 <__aeabi_d2iz>
    b830:	4605      	mov	r5, r0
    b832:	f7fc fddb 	bl	83ec <__aeabi_i2d>
    b836:	4602      	mov	r2, r0
    b838:	3530      	adds	r5, #48	; 0x30
    b83a:	460b      	mov	r3, r1
    b83c:	e9dd 0100 	ldrd	r0, r1, [sp]
    b840:	f7fc fc86 	bl	8150 <__aeabi_dsub>
    b844:	f80a 5b01 	strb.w	r5, [sl], #1
    b848:	4602      	mov	r2, r0
    b84a:	460b      	mov	r3, r1
    b84c:	e9cd 0100 	strd	r0, r1, [sp]
    b850:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    b854:	f7fd f8c4 	bl	89e0 <__aeabi_dcmpgt>
    b858:	2800      	cmp	r0, #0
    b85a:	d165      	bne.n	b928 <_dtoa_r+0x790>
    b85c:	2000      	movs	r0, #0
    b85e:	496c      	ldr	r1, [pc, #432]	; (ba10 <_dtoa_r+0x878>)
    b860:	e9dd 2300 	ldrd	r2, r3, [sp]
    b864:	f7fc fc74 	bl	8150 <__aeabi_dsub>
    b868:	4602      	mov	r2, r0
    b86a:	460b      	mov	r3, r1
    b86c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    b870:	f7fd f8b6 	bl	89e0 <__aeabi_dcmpgt>
    b874:	2800      	cmp	r0, #0
    b876:	f040 810d 	bne.w	ba94 <_dtoa_r+0x8fc>
    b87a:	45a2      	cmp	sl, r4
    b87c:	f000 80ea 	beq.w	ba54 <_dtoa_r+0x8bc>
    b880:	2200      	movs	r2, #0
    b882:	4b5e      	ldr	r3, [pc, #376]	; (b9fc <_dtoa_r+0x864>)
    b884:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    b888:	f7fc fe1a 	bl	84c0 <__aeabi_dmul>
    b88c:	2200      	movs	r2, #0
    b88e:	4b5b      	ldr	r3, [pc, #364]	; (b9fc <_dtoa_r+0x864>)
    b890:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    b894:	e9dd 0100 	ldrd	r0, r1, [sp]
    b898:	f7fc fe12 	bl	84c0 <__aeabi_dmul>
    b89c:	e9cd 0100 	strd	r0, r1, [sp]
    b8a0:	e7c2      	b.n	b828 <_dtoa_r+0x690>
    b8a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    b8a6:	f7fc fe0b 	bl	84c0 <__aeabi_dmul>
    b8aa:	46a0      	mov	r8, r4
    b8ac:	f8dd a00c 	ldr.w	sl, [sp, #12]
    b8b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    b8b4:	e9dd 0100 	ldrd	r0, r1, [sp]
    b8b8:	f7fd f8b2 	bl	8a20 <__aeabi_d2iz>
    b8bc:	4605      	mov	r5, r0
    b8be:	f7fc fd95 	bl	83ec <__aeabi_i2d>
    b8c2:	4602      	mov	r2, r0
    b8c4:	3530      	adds	r5, #48	; 0x30
    b8c6:	460b      	mov	r3, r1
    b8c8:	e9dd 0100 	ldrd	r0, r1, [sp]
    b8cc:	f7fc fc40 	bl	8150 <__aeabi_dsub>
    b8d0:	f80a 5b01 	strb.w	r5, [sl], #1
    b8d4:	4602      	mov	r2, r0
    b8d6:	460b      	mov	r3, r1
    b8d8:	45a2      	cmp	sl, r4
    b8da:	e9cd 2300 	strd	r2, r3, [sp]
    b8de:	f04f 0200 	mov.w	r2, #0
    b8e2:	d123      	bne.n	b92c <_dtoa_r+0x794>
    b8e4:	4b49      	ldr	r3, [pc, #292]	; (ba0c <_dtoa_r+0x874>)
    b8e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    b8ea:	f7fc fc33 	bl	8154 <__adddf3>
    b8ee:	4602      	mov	r2, r0
    b8f0:	460b      	mov	r3, r1
    b8f2:	e9dd 0100 	ldrd	r0, r1, [sp]
    b8f6:	f7fd f873 	bl	89e0 <__aeabi_dcmpgt>
    b8fa:	2800      	cmp	r0, #0
    b8fc:	f040 80ca 	bne.w	ba94 <_dtoa_r+0x8fc>
    b900:	2000      	movs	r0, #0
    b902:	4942      	ldr	r1, [pc, #264]	; (ba0c <_dtoa_r+0x874>)
    b904:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    b908:	f7fc fc22 	bl	8150 <__aeabi_dsub>
    b90c:	4602      	mov	r2, r0
    b90e:	460b      	mov	r3, r1
    b910:	e9dd 0100 	ldrd	r0, r1, [sp]
    b914:	f7fd f846 	bl	89a4 <__aeabi_dcmplt>
    b918:	b170      	cbz	r0, b938 <_dtoa_r+0x7a0>
    b91a:	46c2      	mov	sl, r8
    b91c:	f108 38ff 	add.w	r8, r8, #4294967295
    b920:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    b924:	2b30      	cmp	r3, #48	; 0x30
    b926:	d0f8      	beq.n	b91a <_dtoa_r+0x782>
    b928:	4637      	mov	r7, r6
    b92a:	e055      	b.n	b9d8 <_dtoa_r+0x840>
    b92c:	4b33      	ldr	r3, [pc, #204]	; (b9fc <_dtoa_r+0x864>)
    b92e:	f7fc fdc7 	bl	84c0 <__aeabi_dmul>
    b932:	e9cd 0100 	strd	r0, r1, [sp]
    b936:	e7bd      	b.n	b8b4 <_dtoa_r+0x71c>
    b938:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
    b93c:	e9cd 3400 	strd	r3, r4, [sp]
    b940:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b942:	2b00      	cmp	r3, #0
    b944:	f6ff ae28 	blt.w	b598 <_dtoa_r+0x400>
    b948:	2f0e      	cmp	r7, #14
    b94a:	f73f ae25 	bgt.w	b598 <_dtoa_r+0x400>
    b94e:	4b2e      	ldr	r3, [pc, #184]	; (ba08 <_dtoa_r+0x870>)
    b950:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    b954:	ed93 7b00 	vldr	d7, [r3]
    b958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b95a:	2b00      	cmp	r3, #0
    b95c:	ed8d 7b04 	vstr	d7, [sp, #16]
    b960:	da02      	bge.n	b968 <_dtoa_r+0x7d0>
    b962:	f1b9 0f00 	cmp.w	r9, #0
    b966:	d064      	beq.n	ba32 <_dtoa_r+0x89a>
    b968:	f8dd a00c 	ldr.w	sl, [sp, #12]
    b96c:	e9dd 4500 	ldrd	r4, r5, [sp]
    b970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b974:	4620      	mov	r0, r4
    b976:	4629      	mov	r1, r5
    b978:	f7fc fecc 	bl	8714 <__aeabi_ddiv>
    b97c:	f7fd f850 	bl	8a20 <__aeabi_d2iz>
    b980:	4606      	mov	r6, r0
    b982:	f7fc fd33 	bl	83ec <__aeabi_i2d>
    b986:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b98a:	f7fc fd99 	bl	84c0 <__aeabi_dmul>
    b98e:	4602      	mov	r2, r0
    b990:	4620      	mov	r0, r4
    b992:	f106 0430 	add.w	r4, r6, #48	; 0x30
    b996:	460b      	mov	r3, r1
    b998:	4629      	mov	r1, r5
    b99a:	f7fc fbd9 	bl	8150 <__aeabi_dsub>
    b99e:	f80a 4b01 	strb.w	r4, [sl], #1
    b9a2:	9c03      	ldr	r4, [sp, #12]
    b9a4:	4602      	mov	r2, r0
    b9a6:	460b      	mov	r3, r1
    b9a8:	ebaa 0404 	sub.w	r4, sl, r4
    b9ac:	45a1      	cmp	r9, r4
    b9ae:	f040 8082 	bne.w	bab6 <_dtoa_r+0x91e>
    b9b2:	f7fc fbcf 	bl	8154 <__adddf3>
    b9b6:	4604      	mov	r4, r0
    b9b8:	460d      	mov	r5, r1
    b9ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b9be:	f7fd f80f 	bl	89e0 <__aeabi_dcmpgt>
    b9c2:	2800      	cmp	r0, #0
    b9c4:	d165      	bne.n	ba92 <_dtoa_r+0x8fa>
    b9c6:	4620      	mov	r0, r4
    b9c8:	4629      	mov	r1, r5
    b9ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b9ce:	f7fc ffdf 	bl	8990 <__aeabi_dcmpeq>
    b9d2:	b108      	cbz	r0, b9d8 <_dtoa_r+0x840>
    b9d4:	07f3      	lsls	r3, r6, #31
    b9d6:	d45c      	bmi.n	ba92 <_dtoa_r+0x8fa>
    b9d8:	9902      	ldr	r1, [sp, #8]
    b9da:	4658      	mov	r0, fp
    b9dc:	f011 f9a4 	bl	1cd28 <_Bfree>
    b9e0:	2300      	movs	r3, #0
    b9e2:	3701      	adds	r7, #1
    b9e4:	f88a 3000 	strb.w	r3, [sl]
    b9e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b9ea:	601f      	str	r7, [r3, #0]
    b9ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b9ee:	2b00      	cmp	r3, #0
    b9f0:	f43f ac21 	beq.w	b236 <_dtoa_r+0x9e>
    b9f4:	f8c3 a000 	str.w	sl, [r3]
    b9f8:	e41d      	b.n	b236 <_dtoa_r+0x9e>
    b9fa:	bf00      	nop
    b9fc:	40240000 	.word	0x40240000
    ba00:	401c0000 	.word	0x401c0000
    ba04:	40140000 	.word	0x40140000
    ba08:	00023128 	.word	0x00023128
    ba0c:	3fe00000 	.word	0x3fe00000
    ba10:	3ff00000 	.word	0x3ff00000
    ba14:	4ba2      	ldr	r3, [pc, #648]	; (bca0 <_dtoa_r+0xb08>)
    ba16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    ba1a:	ed93 7b00 	vldr	d7, [r3]
    ba1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ba20:	2b00      	cmp	r3, #0
    ba22:	ed8d 7b04 	vstr	d7, [sp, #16]
    ba26:	da9f      	bge.n	b968 <_dtoa_r+0x7d0>
    ba28:	f1b9 0f00 	cmp.w	r9, #0
    ba2c:	dc9c      	bgt.n	b968 <_dtoa_r+0x7d0>
    ba2e:	f47f aec3 	bne.w	b7b8 <_dtoa_r+0x620>
    ba32:	2200      	movs	r2, #0
    ba34:	4b9b      	ldr	r3, [pc, #620]	; (bca4 <_dtoa_r+0xb0c>)
    ba36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ba3a:	f7fc fd41 	bl	84c0 <__aeabi_dmul>
    ba3e:	e9dd 2300 	ldrd	r2, r3, [sp]
    ba42:	f7fc ffc3 	bl	89cc <__aeabi_dcmpge>
    ba46:	4604      	mov	r4, r0
    ba48:	2800      	cmp	r0, #0
    ba4a:	f47f aeb5 	bne.w	b7b8 <_dtoa_r+0x620>
    ba4e:	463e      	mov	r6, r7
    ba50:	4625      	mov	r5, r4
    ba52:	e0b4      	b.n	bbbe <_dtoa_r+0xa26>
    ba54:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
    ba58:	e9cd 3400 	strd	r3, r4, [sp]
    ba5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ba5e:	2b00      	cmp	r3, #0
    ba60:	db01      	blt.n	ba66 <_dtoa_r+0x8ce>
    ba62:	2f0e      	cmp	r7, #14
    ba64:	ddd6      	ble.n	ba14 <_dtoa_r+0x87c>
    ba66:	9a08      	ldr	r2, [sp, #32]
    ba68:	2a01      	cmp	r2, #1
    ba6a:	dc36      	bgt.n	bada <_dtoa_r+0x942>
    ba6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ba6e:	b382      	cbz	r2, bad2 <_dtoa_r+0x93a>
    ba70:	f203 4333 	addw	r3, r3, #1075	; 0x433
    ba74:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ba76:	f8dd 8018 	ldr.w	r8, [sp, #24]
    ba7a:	9a06      	ldr	r2, [sp, #24]
    ba7c:	2101      	movs	r1, #1
    ba7e:	4658      	mov	r0, fp
    ba80:	441a      	add	r2, r3
    ba82:	9206      	str	r2, [sp, #24]
    ba84:	9a07      	ldr	r2, [sp, #28]
    ba86:	441a      	add	r2, r3
    ba88:	9207      	str	r2, [sp, #28]
    ba8a:	f011 fa01 	bl	1ce90 <__i2b>
    ba8e:	4605      	mov	r5, r0
    ba90:	e586      	b.n	b5a0 <_dtoa_r+0x408>
    ba92:	463e      	mov	r6, r7
    ba94:	4653      	mov	r3, sl
    ba96:	469a      	mov	sl, r3
    ba98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    ba9c:	2a39      	cmp	r2, #57	; 0x39
    ba9e:	d106      	bne.n	baae <_dtoa_r+0x916>
    baa0:	9a03      	ldr	r2, [sp, #12]
    baa2:	429a      	cmp	r2, r3
    baa4:	d1f7      	bne.n	ba96 <_dtoa_r+0x8fe>
    baa6:	2230      	movs	r2, #48	; 0x30
    baa8:	9903      	ldr	r1, [sp, #12]
    baaa:	3601      	adds	r6, #1
    baac:	700a      	strb	r2, [r1, #0]
    baae:	781a      	ldrb	r2, [r3, #0]
    bab0:	3201      	adds	r2, #1
    bab2:	701a      	strb	r2, [r3, #0]
    bab4:	e738      	b.n	b928 <_dtoa_r+0x790>
    bab6:	2200      	movs	r2, #0
    bab8:	4b7b      	ldr	r3, [pc, #492]	; (bca8 <_dtoa_r+0xb10>)
    baba:	f7fc fd01 	bl	84c0 <__aeabi_dmul>
    babe:	2200      	movs	r2, #0
    bac0:	2300      	movs	r3, #0
    bac2:	4604      	mov	r4, r0
    bac4:	460d      	mov	r5, r1
    bac6:	f7fc ff63 	bl	8990 <__aeabi_dcmpeq>
    baca:	2800      	cmp	r0, #0
    bacc:	f43f af50 	beq.w	b970 <_dtoa_r+0x7d8>
    bad0:	e782      	b.n	b9d8 <_dtoa_r+0x840>
    bad2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    bad4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    bad8:	e7cc      	b.n	ba74 <_dtoa_r+0x8dc>
    bada:	f109 34ff 	add.w	r4, r9, #4294967295
    bade:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bae0:	42a3      	cmp	r3, r4
    bae2:	db08      	blt.n	baf6 <_dtoa_r+0x95e>
    bae4:	f1b9 0f00 	cmp.w	r9, #0
    bae8:	eba3 0404 	sub.w	r4, r3, r4
    baec:	db0e      	blt.n	bb0c <_dtoa_r+0x974>
    baee:	f8dd 8018 	ldr.w	r8, [sp, #24]
    baf2:	464b      	mov	r3, r9
    baf4:	e7c1      	b.n	ba7a <_dtoa_r+0x8e2>
    baf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    baf8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    bafa:	1ae3      	subs	r3, r4, r3
    bafc:	9409      	str	r4, [sp, #36]	; 0x24
    bafe:	f8dd 8018 	ldr.w	r8, [sp, #24]
    bb02:	2400      	movs	r4, #0
    bb04:	441a      	add	r2, r3
    bb06:	464b      	mov	r3, r9
    bb08:	9210      	str	r2, [sp, #64]	; 0x40
    bb0a:	e7b6      	b.n	ba7a <_dtoa_r+0x8e2>
    bb0c:	9b06      	ldr	r3, [sp, #24]
    bb0e:	eba3 0809 	sub.w	r8, r3, r9
    bb12:	2300      	movs	r3, #0
    bb14:	e7b1      	b.n	ba7a <_dtoa_r+0x8e2>
    bb16:	9e02      	ldr	r6, [sp, #8]
    bb18:	e571      	b.n	b5fe <_dtoa_r+0x466>
    bb1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bb1c:	9902      	ldr	r1, [sp, #8]
    bb1e:	e570      	b.n	b602 <_dtoa_r+0x46a>
    bb20:	9602      	str	r6, [sp, #8]
    bb22:	e572      	b.n	b60a <_dtoa_r+0x472>
    bb24:	9b08      	ldr	r3, [sp, #32]
    bb26:	2b01      	cmp	r3, #1
    bb28:	dc17      	bgt.n	bb5a <_dtoa_r+0x9c2>
    bb2a:	9b00      	ldr	r3, [sp, #0]
    bb2c:	b9ab      	cbnz	r3, bb5a <_dtoa_r+0x9c2>
    bb2e:	9b01      	ldr	r3, [sp, #4]
    bb30:	f3c3 0313 	ubfx	r3, r3, #0, #20
    bb34:	b99b      	cbnz	r3, bb5e <_dtoa_r+0x9c6>
    bb36:	9b01      	ldr	r3, [sp, #4]
    bb38:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    bb3c:	0d36      	lsrs	r6, r6, #20
    bb3e:	0536      	lsls	r6, r6, #20
    bb40:	b136      	cbz	r6, bb50 <_dtoa_r+0x9b8>
    bb42:	9b06      	ldr	r3, [sp, #24]
    bb44:	2601      	movs	r6, #1
    bb46:	3301      	adds	r3, #1
    bb48:	9306      	str	r3, [sp, #24]
    bb4a:	9b07      	ldr	r3, [sp, #28]
    bb4c:	3301      	adds	r3, #1
    bb4e:	9307      	str	r3, [sp, #28]
    bb50:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bb52:	2b00      	cmp	r3, #0
    bb54:	f47f ad70 	bne.w	b638 <_dtoa_r+0x4a0>
    bb58:	9610      	str	r6, [sp, #64]	; 0x40
    bb5a:	2001      	movs	r0, #1
    bb5c:	e575      	b.n	b64a <_dtoa_r+0x4b2>
    bb5e:	2600      	movs	r6, #0
    bb60:	e7f6      	b.n	bb50 <_dtoa_r+0x9b8>
    bb62:	f43f ad86 	beq.w	b672 <_dtoa_r+0x4da>
    bb66:	331c      	adds	r3, #28
    bb68:	9a06      	ldr	r2, [sp, #24]
    bb6a:	441a      	add	r2, r3
    bb6c:	4498      	add	r8, r3
    bb6e:	9206      	str	r2, [sp, #24]
    bb70:	9a07      	ldr	r2, [sp, #28]
    bb72:	441a      	add	r2, r3
    bb74:	9207      	str	r2, [sp, #28]
    bb76:	e57c      	b.n	b672 <_dtoa_r+0x4da>
    bb78:	4603      	mov	r3, r0
    bb7a:	e7f4      	b.n	bb66 <_dtoa_r+0x9ce>
    bb7c:	9b04      	ldr	r3, [sp, #16]
    bb7e:	2b00      	cmp	r3, #0
    bb80:	dc2b      	bgt.n	bbda <_dtoa_r+0xa42>
    bb82:	9b08      	ldr	r3, [sp, #32]
    bb84:	2b02      	cmp	r3, #2
    bb86:	dc09      	bgt.n	bb9c <_dtoa_r+0xa04>
    bb88:	e027      	b.n	bbda <_dtoa_r+0xa42>
    bb8a:	f1b9 0f00 	cmp.w	r9, #0
    bb8e:	dc1d      	bgt.n	bbcc <_dtoa_r+0xa34>
    bb90:	9b08      	ldr	r3, [sp, #32]
    bb92:	2b02      	cmp	r3, #2
    bb94:	dd1a      	ble.n	bbcc <_dtoa_r+0xa34>
    bb96:	463e      	mov	r6, r7
    bb98:	f8cd 9010 	str.w	r9, [sp, #16]
    bb9c:	9b04      	ldr	r3, [sp, #16]
    bb9e:	2b00      	cmp	r3, #0
    bba0:	f47f ae0c 	bne.w	b7bc <_dtoa_r+0x624>
    bba4:	4621      	mov	r1, r4
    bba6:	2205      	movs	r2, #5
    bba8:	4658      	mov	r0, fp
    bbaa:	f011 f8df 	bl	1cd6c <__multadd>
    bbae:	4601      	mov	r1, r0
    bbb0:	4604      	mov	r4, r0
    bbb2:	9802      	ldr	r0, [sp, #8]
    bbb4:	f016 fd96 	bl	226e4 <__mcmp>
    bbb8:	2800      	cmp	r0, #0
    bbba:	f77f adff 	ble.w	b7bc <_dtoa_r+0x624>
    bbbe:	f8dd a00c 	ldr.w	sl, [sp, #12]
    bbc2:	2331      	movs	r3, #49	; 0x31
    bbc4:	3601      	adds	r6, #1
    bbc6:	f80a 3b01 	strb.w	r3, [sl], #1
    bbca:	e5fb      	b.n	b7c4 <_dtoa_r+0x62c>
    bbcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bbce:	463e      	mov	r6, r7
    bbd0:	f8cd 9010 	str.w	r9, [sp, #16]
    bbd4:	2b00      	cmp	r3, #0
    bbd6:	f47f ad83 	bne.w	b6e0 <_dtoa_r+0x548>
    bbda:	9f03      	ldr	r7, [sp, #12]
    bbdc:	4621      	mov	r1, r4
    bbde:	9802      	ldr	r0, [sp, #8]
    bbe0:	f016 fa8e 	bl	22100 <quorem>
    bbe4:	9b03      	ldr	r3, [sp, #12]
    bbe6:	f100 0930 	add.w	r9, r0, #48	; 0x30
    bbea:	9a04      	ldr	r2, [sp, #16]
    bbec:	f807 9b01 	strb.w	r9, [r7], #1
    bbf0:	1afb      	subs	r3, r7, r3
    bbf2:	429a      	cmp	r2, r3
    bbf4:	f340 80cb 	ble.w	bd8e <_dtoa_r+0xbf6>
    bbf8:	2300      	movs	r3, #0
    bbfa:	220a      	movs	r2, #10
    bbfc:	9902      	ldr	r1, [sp, #8]
    bbfe:	4658      	mov	r0, fp
    bc00:	f011 f8b4 	bl	1cd6c <__multadd>
    bc04:	9002      	str	r0, [sp, #8]
    bc06:	e7e9      	b.n	bbdc <_dtoa_r+0xa44>
    bc08:	692a      	ldr	r2, [r5, #16]
    bc0a:	f105 010c 	add.w	r1, r5, #12
    bc0e:	300c      	adds	r0, #12
    bc10:	3202      	adds	r2, #2
    bc12:	0092      	lsls	r2, r2, #2
    bc14:	f016 f830 	bl	21c78 <memcpy>
    bc18:	2201      	movs	r2, #1
    bc1a:	4639      	mov	r1, r7
    bc1c:	4658      	mov	r0, fp
    bc1e:	f011 fa51 	bl	1d0c4 <__lshift>
    bc22:	9b03      	ldr	r3, [sp, #12]
    bc24:	46a8      	mov	r8, r5
    bc26:	4605      	mov	r5, r0
    bc28:	f103 0a01 	add.w	sl, r3, #1
    bc2c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    bc30:	4413      	add	r3, r2
    bc32:	9307      	str	r3, [sp, #28]
    bc34:	9b00      	ldr	r3, [sp, #0]
    bc36:	f003 0301 	and.w	r3, r3, #1
    bc3a:	9309      	str	r3, [sp, #36]	; 0x24
    bc3c:	f10a 33ff 	add.w	r3, sl, #4294967295
    bc40:	4621      	mov	r1, r4
    bc42:	9802      	ldr	r0, [sp, #8]
    bc44:	9304      	str	r3, [sp, #16]
    bc46:	f016 fa5b 	bl	22100 <quorem>
    bc4a:	4641      	mov	r1, r8
    bc4c:	9006      	str	r0, [sp, #24]
    bc4e:	f100 0930 	add.w	r9, r0, #48	; 0x30
    bc52:	9802      	ldr	r0, [sp, #8]
    bc54:	f016 fd46 	bl	226e4 <__mcmp>
    bc58:	462a      	mov	r2, r5
    bc5a:	4621      	mov	r1, r4
    bc5c:	4607      	mov	r7, r0
    bc5e:	4658      	mov	r0, fp
    bc60:	f011 fa9c 	bl	1d19c <__mdiff>
    bc64:	68c2      	ldr	r2, [r0, #12]
    bc66:	4601      	mov	r1, r0
    bc68:	b302      	cbz	r2, bcac <_dtoa_r+0xb14>
    bc6a:	4658      	mov	r0, fp
    bc6c:	f011 f85c 	bl	1cd28 <_Bfree>
    bc70:	2f00      	cmp	r7, #0
    bc72:	da3a      	bge.n	bcea <_dtoa_r+0xb52>
    bc74:	2201      	movs	r2, #1
    bc76:	9902      	ldr	r1, [sp, #8]
    bc78:	4658      	mov	r0, fp
    bc7a:	f011 fa23 	bl	1d0c4 <__lshift>
    bc7e:	4621      	mov	r1, r4
    bc80:	9002      	str	r0, [sp, #8]
    bc82:	f016 fd2f 	bl	226e4 <__mcmp>
    bc86:	2800      	cmp	r0, #0
    bc88:	dc03      	bgt.n	bc92 <_dtoa_r+0xafa>
    bc8a:	d129      	bne.n	bce0 <_dtoa_r+0xb48>
    bc8c:	f019 0f01 	tst.w	r9, #1
    bc90:	d026      	beq.n	bce0 <_dtoa_r+0xb48>
    bc92:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    bc96:	d11d      	bne.n	bcd4 <_dtoa_r+0xb3c>
    bc98:	e032      	b.n	bd00 <_dtoa_r+0xb68>
    bc9a:	4628      	mov	r0, r5
    bc9c:	e7c1      	b.n	bc22 <_dtoa_r+0xa8a>
    bc9e:	bf00      	nop
    bca0:	00023128 	.word	0x00023128
    bca4:	40140000 	.word	0x40140000
    bca8:	40240000 	.word	0x40240000
    bcac:	900a      	str	r0, [sp, #40]	; 0x28
    bcae:	9802      	ldr	r0, [sp, #8]
    bcb0:	f016 fd18 	bl	226e4 <__mcmp>
    bcb4:	990a      	ldr	r1, [sp, #40]	; 0x28
    bcb6:	900c      	str	r0, [sp, #48]	; 0x30
    bcb8:	4658      	mov	r0, fp
    bcba:	f011 f835 	bl	1cd28 <_Bfree>
    bcbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bcc0:	bb5a      	cbnz	r2, bd1a <_dtoa_r+0xb82>
    bcc2:	9b08      	ldr	r3, [sp, #32]
    bcc4:	b953      	cbnz	r3, bcdc <_dtoa_r+0xb44>
    bcc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bcc8:	b943      	cbnz	r3, bcdc <_dtoa_r+0xb44>
    bcca:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    bcce:	d017      	beq.n	bd00 <_dtoa_r+0xb68>
    bcd0:	2f00      	cmp	r7, #0
    bcd2:	dd05      	ble.n	bce0 <_dtoa_r+0xb48>
    bcd4:	9b06      	ldr	r3, [sp, #24]
    bcd6:	f103 0931 	add.w	r9, r3, #49	; 0x31
    bcda:	e001      	b.n	bce0 <_dtoa_r+0xb48>
    bcdc:	2f00      	cmp	r7, #0
    bcde:	da2a      	bge.n	bd36 <_dtoa_r+0xb9e>
    bce0:	f8dd a010 	ldr.w	sl, [sp, #16]
    bce4:	f80a 9b01 	strb.w	r9, [sl], #1
    bce8:	e56e      	b.n	b7c8 <_dtoa_r+0x630>
    bcea:	9b08      	ldr	r3, [sp, #32]
    bcec:	433b      	orrs	r3, r7
    bcee:	d104      	bne.n	bcfa <_dtoa_r+0xb62>
    bcf0:	9b00      	ldr	r3, [sp, #0]
    bcf2:	f003 0301 	and.w	r3, r3, #1
    bcf6:	2b00      	cmp	r3, #0
    bcf8:	d0bc      	beq.n	bc74 <_dtoa_r+0xadc>
    bcfa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    bcfe:	d136      	bne.n	bd6e <_dtoa_r+0xbd6>
    bd00:	9f04      	ldr	r7, [sp, #16]
    bd02:	2339      	movs	r3, #57	; 0x39
    bd04:	f807 3b01 	strb.w	r3, [r7], #1
    bd08:	46ba      	mov	sl, r7
    bd0a:	3f01      	subs	r7, #1
    bd0c:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    bd10:	2b39      	cmp	r3, #57	; 0x39
    bd12:	d05a      	beq.n	bdca <_dtoa_r+0xc32>
    bd14:	3301      	adds	r3, #1
    bd16:	703b      	strb	r3, [r7, #0]
    bd18:	e556      	b.n	b7c8 <_dtoa_r+0x630>
    bd1a:	2f00      	cmp	r7, #0
    bd1c:	db06      	blt.n	bd2c <_dtoa_r+0xb94>
    bd1e:	9b08      	ldr	r3, [sp, #32]
    bd20:	433b      	orrs	r3, r7
    bd22:	d106      	bne.n	bd32 <_dtoa_r+0xb9a>
    bd24:	9b00      	ldr	r3, [sp, #0]
    bd26:	f003 0301 	and.w	r3, r3, #1
    bd2a:	b913      	cbnz	r3, bd32 <_dtoa_r+0xb9a>
    bd2c:	2a00      	cmp	r2, #0
    bd2e:	dca1      	bgt.n	bc74 <_dtoa_r+0xadc>
    bd30:	e7d6      	b.n	bce0 <_dtoa_r+0xb48>
    bd32:	2a00      	cmp	r2, #0
    bd34:	dce1      	bgt.n	bcfa <_dtoa_r+0xb62>
    bd36:	9b07      	ldr	r3, [sp, #28]
    bd38:	4657      	mov	r7, sl
    bd3a:	f80a 9c01 	strb.w	r9, [sl, #-1]
    bd3e:	4553      	cmp	r3, sl
    bd40:	d02e      	beq.n	bda0 <_dtoa_r+0xc08>
    bd42:	2300      	movs	r3, #0
    bd44:	220a      	movs	r2, #10
    bd46:	9902      	ldr	r1, [sp, #8]
    bd48:	4658      	mov	r0, fp
    bd4a:	f011 f80f 	bl	1cd6c <__multadd>
    bd4e:	45a8      	cmp	r8, r5
    bd50:	9002      	str	r0, [sp, #8]
    bd52:	f04f 0300 	mov.w	r3, #0
    bd56:	f04f 020a 	mov.w	r2, #10
    bd5a:	4641      	mov	r1, r8
    bd5c:	4658      	mov	r0, fp
    bd5e:	d10b      	bne.n	bd78 <_dtoa_r+0xbe0>
    bd60:	f011 f804 	bl	1cd6c <__multadd>
    bd64:	4680      	mov	r8, r0
    bd66:	4605      	mov	r5, r0
    bd68:	f10a 0a01 	add.w	sl, sl, #1
    bd6c:	e766      	b.n	bc3c <_dtoa_r+0xaa4>
    bd6e:	f8dd a010 	ldr.w	sl, [sp, #16]
    bd72:	f109 0901 	add.w	r9, r9, #1
    bd76:	e7b5      	b.n	bce4 <_dtoa_r+0xb4c>
    bd78:	f010 fff8 	bl	1cd6c <__multadd>
    bd7c:	4629      	mov	r1, r5
    bd7e:	4680      	mov	r8, r0
    bd80:	2300      	movs	r3, #0
    bd82:	220a      	movs	r2, #10
    bd84:	4658      	mov	r0, fp
    bd86:	f010 fff1 	bl	1cd6c <__multadd>
    bd8a:	4605      	mov	r5, r0
    bd8c:	e7ec      	b.n	bd68 <_dtoa_r+0xbd0>
    bd8e:	9b04      	ldr	r3, [sp, #16]
    bd90:	f04f 0800 	mov.w	r8, #0
    bd94:	2b00      	cmp	r3, #0
    bd96:	bfcc      	ite	gt
    bd98:	461f      	movgt	r7, r3
    bd9a:	2701      	movle	r7, #1
    bd9c:	9b03      	ldr	r3, [sp, #12]
    bd9e:	441f      	add	r7, r3
    bda0:	2201      	movs	r2, #1
    bda2:	9902      	ldr	r1, [sp, #8]
    bda4:	4658      	mov	r0, fp
    bda6:	f011 f98d 	bl	1d0c4 <__lshift>
    bdaa:	4621      	mov	r1, r4
    bdac:	9002      	str	r0, [sp, #8]
    bdae:	f016 fc99 	bl	226e4 <__mcmp>
    bdb2:	2800      	cmp	r0, #0
    bdb4:	dca8      	bgt.n	bd08 <_dtoa_r+0xb70>
    bdb6:	d102      	bne.n	bdbe <_dtoa_r+0xc26>
    bdb8:	f019 0f01 	tst.w	r9, #1
    bdbc:	d1a4      	bne.n	bd08 <_dtoa_r+0xb70>
    bdbe:	46ba      	mov	sl, r7
    bdc0:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    bdc4:	2b30      	cmp	r3, #48	; 0x30
    bdc6:	d0fa      	beq.n	bdbe <_dtoa_r+0xc26>
    bdc8:	e4fe      	b.n	b7c8 <_dtoa_r+0x630>
    bdca:	9b03      	ldr	r3, [sp, #12]
    bdcc:	42bb      	cmp	r3, r7
    bdce:	d19b      	bne.n	bd08 <_dtoa_r+0xb70>
    bdd0:	2331      	movs	r3, #49	; 0x31
    bdd2:	9a03      	ldr	r2, [sp, #12]
    bdd4:	3601      	adds	r6, #1
    bdd6:	7013      	strb	r3, [r2, #0]
    bdd8:	e4f6      	b.n	b7c8 <_dtoa_r+0x630>
    bdda:	9b21      	ldr	r3, [sp, #132]	; 0x84
    bddc:	2b00      	cmp	r3, #0
    bdde:	f47f aa25 	bne.w	b22c <_dtoa_r+0x94>
    bde2:	4b01      	ldr	r3, [pc, #4]	; (bde8 <_dtoa_r+0xc50>)
    bde4:	f7ff ba44 	b.w	b270 <_dtoa_r+0xd8>
    bde8:	00027bf6 	.word	0x00027bf6
    bdec:	00000000 	.word	0x00000000

0000bdf0 <nan>:
    bdf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; bdf8 <nan+0x8>
    bdf4:	4770      	bx	lr
    bdf6:	bf00      	nop
    bdf8:	00000000 	.word	0x00000000
    bdfc:	7ff80000 	.word	0x7ff80000

0000be00 <output_paused>:

	return 0;
}

static bool output_paused(void)
{
    be00:	b508      	push	{r3, lr}
#if defined(CONFIG_GNSS_SAMPLE_ASSISTANCE_NONE) || defined(CONFIG_GNSS_SAMPLE_LOG_LEVEL_OFF)
	return false;
#else
	return (requesting_assistance || assistance_is_active()) ? true : false;
    be02:	4b05      	ldr	r3, [pc, #20]	; (be18 <output_paused+0x18>)
    be04:	781b      	ldrb	r3, [r3, #0]
    be06:	b923      	cbnz	r3, be12 <output_paused+0x12>
    be08:	f000 fb4e 	bl	c4a8 <assistance_is_active>
#endif
}
    be0c:	f000 0001 	and.w	r0, r0, #1
    be10:	bd08      	pop	{r3, pc}
	return (requesting_assistance || assistance_is_active()) ? true : false;
    be12:	2001      	movs	r0, #1
    be14:	e7fa      	b.n	be0c <output_paused+0xc>
    be16:	bf00      	nop
    be18:	2000e355 	.word	0x2000e355

0000be1c <lte_lc_event_handler>:
{
    be1c:	b508      	push	{r3, lr}
	switch (evt->type) {
    be1e:	7803      	ldrb	r3, [r0, #0]
    be20:	b963      	cbnz	r3, be3c <lte_lc_event_handler+0x20>
		if ((evt->nw_reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    be22:	7a03      	ldrb	r3, [r0, #8]
    be24:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    be28:	2b01      	cmp	r3, #1
    be2a:	d107      	bne.n	be3c <lte_lc_event_handler+0x20>
			printk("Connected to LTE network");
    be2c:	4804      	ldr	r0, [pc, #16]	; (be40 <lte_lc_event_handler+0x24>)
    be2e:	f012 f955 	bl	1e0dc <printk>
}
    be32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_impl_k_sem_give(sem);
    be36:	4803      	ldr	r0, [pc, #12]	; (be44 <lte_lc_event_handler+0x28>)
    be38:	f00e bd0c 	b.w	1a854 <z_impl_k_sem_give>
    be3c:	bd08      	pop	{r3, pc}
    be3e:	bf00      	nop
    be40:	00023a4c 	.word	0x00023a4c
    be44:	2000cab4 	.word	0x2000cab4

0000be48 <gnss_event_handler>:
	switch (event) {
    be48:	2803      	cmp	r0, #3
{
    be4a:	b507      	push	{r0, r1, r2, lr}
    be4c:	4602      	mov	r2, r0
	switch (event) {
    be4e:	d00e      	beq.n	be6e <gnss_event_handler+0x26>
    be50:	2804      	cmp	r0, #4
    be52:	d029      	beq.n	bea8 <gnss_event_handler+0x60>
    be54:	2801      	cmp	r0, #1
    be56:	d112      	bne.n	be7e <gnss_event_handler+0x36>
		retval = nrf_modem_gnss_read(&last_pvt, sizeof(last_pvt), NRF_MODEM_GNSS_DATA_PVT);
    be58:	21e8      	movs	r1, #232	; 0xe8
    be5a:	481a      	ldr	r0, [pc, #104]	; (bec4 <gnss_event_handler+0x7c>)
    be5c:	f00d fbf8 	bl	19650 <nrf_modem_gnss_read>
		if (retval == 0) {
    be60:	b968      	cbnz	r0, be7e <gnss_event_handler+0x36>
    be62:	4819      	ldr	r0, [pc, #100]	; (bec8 <gnss_event_handler+0x80>)
}
    be64:	b003      	add	sp, #12
    be66:	f85d eb04 	ldr.w	lr, [sp], #4
    be6a:	f00e bcf3 	b.w	1a854 <z_impl_k_sem_give>
		nmea_data = k_malloc(sizeof(struct nrf_modem_gnss_nmea_data_frame));
    be6e:	2053      	movs	r0, #83	; 0x53
    be70:	f015 feca 	bl	21c08 <k_malloc>
    be74:	9001      	str	r0, [sp, #4]
		if (nmea_data == NULL) {
    be76:	b928      	cbnz	r0, be84 <gnss_event_handler+0x3c>
			printk("Failed to allocate memory for NMEA\n");
    be78:	4814      	ldr	r0, [pc, #80]	; (becc <gnss_event_handler+0x84>)
    be7a:	f012 f92f 	bl	1e0dc <printk>
}
    be7e:	b003      	add	sp, #12
    be80:	f85d fb04 	ldr.w	pc, [sp], #4
		retval = nrf_modem_gnss_read(nmea_data,
    be84:	2202      	movs	r2, #2
    be86:	2153      	movs	r1, #83	; 0x53
    be88:	f00d fbe2 	bl	19650 <nrf_modem_gnss_read>
		if (retval == 0) {
    be8c:	b118      	cbz	r0, be96 <gnss_event_handler+0x4e>
			k_free(nmea_data);
    be8e:	9801      	ldr	r0, [sp, #4]
    be90:	f015 feb3 	bl	21bfa <k_free>
    be94:	e7f3      	b.n	be7e <gnss_event_handler+0x36>
	return z_impl_k_msgq_put(msgq, data, timeout);
    be96:	2200      	movs	r2, #0
    be98:	2300      	movs	r3, #0
    be9a:	480d      	ldr	r0, [pc, #52]	; (bed0 <gnss_event_handler+0x88>)
    be9c:	a901      	add	r1, sp, #4
    be9e:	f00e fb3d 	bl	1a51c <z_impl_k_msgq_put>
		if (retval != 0) {
    bea2:	2800      	cmp	r0, #0
    bea4:	d1f3      	bne.n	be8e <gnss_event_handler+0x46>
    bea6:	e7ea      	b.n	be7e <gnss_event_handler+0x36>
		retval = nrf_modem_gnss_read(&last_agps,
    bea8:	2203      	movs	r2, #3
    beaa:	210c      	movs	r1, #12
    beac:	4809      	ldr	r0, [pc, #36]	; (bed4 <gnss_event_handler+0x8c>)
    beae:	f00d fbcf 	bl	19650 <nrf_modem_gnss_read>
		if (retval == 0) {
    beb2:	2800      	cmp	r0, #0
    beb4:	d1e3      	bne.n	be7e <gnss_event_handler+0x36>
			k_work_submit_to_queue(&gnss_work_q, &agps_data_get_work);
    beb6:	4908      	ldr	r1, [pc, #32]	; (bed8 <gnss_event_handler+0x90>)
    beb8:	4808      	ldr	r0, [pc, #32]	; (bedc <gnss_event_handler+0x94>)
}
    beba:	b003      	add	sp, #12
    bebc:	f85d eb04 	ldr.w	lr, [sp], #4
			k_work_submit_to_queue(&gnss_work_q, &agps_data_get_work);
    bec0:	f015 bbd5 	b.w	2166e <k_work_submit_to_queue>
    bec4:	2000cb70 	.word	0x2000cb70
    bec8:	2000cacc 	.word	0x2000cacc
    becc:	00023a65 	.word	0x00023a65
    bed0:	2000ca6c 	.word	0x2000ca6c
    bed4:	2000db58 	.word	0x2000db58
    bed8:	2000db48 	.word	0x2000db48
    bedc:	2000cc58 	.word	0x2000cc58

0000bee0 <date_time_evt_handler>:
	z_impl_k_sem_give(sem);
    bee0:	4801      	ldr	r0, [pc, #4]	; (bee8 <date_time_evt_handler+0x8>)
    bee2:	f00e bcb7 	b.w	1a854 <z_impl_k_sem_give>
    bee6:	bf00      	nop
    bee8:	2000cafc 	.word	0x2000cafc

0000beec <lte_connect>:
{
    beec:	b508      	push	{r3, lr}
	printk("Connecting to LTE network");
    beee:	480d      	ldr	r0, [pc, #52]	; (bf24 <lte_connect+0x38>)
    bef0:	f012 f8f4 	bl	1e0dc <printk>
	err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_ACTIVATE_LTE);
    bef4:	2015      	movs	r0, #21
    bef6:	f007 f8fd 	bl	130f4 <lte_lc_func_mode_set>
	if (err) {
    befa:	4601      	mov	r1, r0
    befc:	b120      	cbz	r0, bf08 <lte_connect+0x1c>
}
    befe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Failed to activate LTE, error: %d", err);
    bf02:	4809      	ldr	r0, [pc, #36]	; (bf28 <lte_connect+0x3c>)
    bf04:	f012 b8ea 	b.w	1e0dc <printk>
	return z_impl_k_sem_take(sem, timeout);
    bf08:	f04f 32ff 	mov.w	r2, #4294967295
    bf0c:	f04f 33ff 	mov.w	r3, #4294967295
    bf10:	4806      	ldr	r0, [pc, #24]	; (bf2c <lte_connect+0x40>)
    bf12:	f00e fcc5 	bl	1a8a0 <z_impl_k_sem_take>
}
    bf16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
    bf1a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    bf1e:	2100      	movs	r1, #0
    bf20:	f00f b874 	b.w	1b00c <z_impl_k_sleep>
    bf24:	00023a89 	.word	0x00023a89
    bf28:	00023aa3 	.word	0x00023aa3
    bf2c:	2000cab4 	.word	0x2000cab4

0000bf30 <lte_disconnect>:
	err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_DEACTIVATE_LTE);
    bf30:	2014      	movs	r0, #20
{
    bf32:	b508      	push	{r3, lr}
	err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_DEACTIVATE_LTE);
    bf34:	f007 f8de 	bl	130f4 <lte_lc_func_mode_set>
	if (err) {
    bf38:	4601      	mov	r1, r0
    bf3a:	b120      	cbz	r0, bf46 <lte_disconnect+0x16>
}
    bf3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Failed to deactivate LTE, error: %d", err);
    bf40:	4803      	ldr	r0, [pc, #12]	; (bf50 <lte_disconnect+0x20>)
    bf42:	f012 b8cb 	b.w	1e0dc <printk>
	printk("LTE disconnected");
    bf46:	4803      	ldr	r0, [pc, #12]	; (bf54 <lte_disconnect+0x24>)
}
    bf48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("LTE disconnected");
    bf4c:	f012 b8c6 	b.w	1e0dc <printk>
    bf50:	00023ac5 	.word	0x00023ac5
    bf54:	00023ae9 	.word	0x00023ae9

0000bf58 <agps_data_get_work_fn>:
{
    bf58:	b538      	push	{r3, r4, r5, lr}
	requesting_assistance = true;
    bf5a:	2301      	movs	r3, #1
	printk("Assistance data needed, ephe 0x%08x, alm 0x%08x, flags 0x%02x\n",
    bf5c:	4c0b      	ldr	r4, [pc, #44]	; (bf8c <agps_data_get_work_fn+0x34>)
	requesting_assistance = true;
    bf5e:	4d0c      	ldr	r5, [pc, #48]	; (bf90 <agps_data_get_work_fn+0x38>)
	printk("Assistance data needed, ephe 0x%08x, alm 0x%08x, flags 0x%02x\n",
    bf60:	480c      	ldr	r0, [pc, #48]	; (bf94 <agps_data_get_work_fn+0x3c>)
    bf62:	6821      	ldr	r1, [r4, #0]
	requesting_assistance = true;
    bf64:	702b      	strb	r3, [r5, #0]
	printk("Assistance data needed, ephe 0x%08x, alm 0x%08x, flags 0x%02x\n",
    bf66:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    bf6a:	f012 f8b7 	bl	1e0dc <printk>
	lte_connect();
    bf6e:	f7ff ffbd 	bl	beec <lte_connect>
	err = assistance_request(&last_agps);
    bf72:	4620      	mov	r0, r4
    bf74:	f000 f9ba 	bl	c2ec <assistance_request>
	if (err) {
    bf78:	b110      	cbz	r0, bf80 <agps_data_get_work_fn+0x28>
		printk("Failed to request assistance data\n");
    bf7a:	4807      	ldr	r0, [pc, #28]	; (bf98 <agps_data_get_work_fn+0x40>)
    bf7c:	f012 f8ae 	bl	1e0dc <printk>
	lte_disconnect();
    bf80:	f7ff ffd6 	bl	bf30 <lte_disconnect>
	requesting_assistance = false;
    bf84:	2300      	movs	r3, #0
    bf86:	702b      	strb	r3, [r5, #0]
}
    bf88:	bd38      	pop	{r3, r4, r5, pc}
    bf8a:	bf00      	nop
    bf8c:	2000db58 	.word	0x2000db58
    bf90:	2000e355 	.word	0x2000e355
    bf94:	00023afa 	.word	0x00023afa
    bf98:	00023b39 	.word	0x00023b39

0000bf9c <init_sequence>:

/**
 * @brief there are issues with having the console-out on while debugging, so I need time to plug it in.
 * 
 */
void init_sequence(void){
    bf9c:	b510      	push	{r4, lr}
	printf("3...");
    bf9e:	4c11      	ldr	r4, [pc, #68]	; (bfe4 <init_sequence+0x48>)
    bfa0:	4620      	mov	r0, r4
    bfa2:	f00f ffa3 	bl	1beec <iprintf>
	printk("3...");
    bfa6:	4620      	mov	r0, r4
	k_msleep(1000);

	printf("2...");
    bfa8:	4c0f      	ldr	r4, [pc, #60]	; (bfe8 <init_sequence+0x4c>)
	printk("3...");
    bfaa:	f012 f897 	bl	1e0dc <printk>
	k_msleep(1000);
    bfae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    bfb2:	f011 ffcd 	bl	1df50 <k_msleep.isra.0>
	printf("2...");
    bfb6:	4620      	mov	r0, r4
    bfb8:	f00f ff98 	bl	1beec <iprintf>
	printk("2...");
    bfbc:	4620      	mov	r0, r4
    bfbe:	f012 f88d 	bl	1e0dc <printk>
	k_msleep(1000);
    bfc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    bfc6:	f011 ffc3 	bl	1df50 <k_msleep.isra.0>

	printf("1...");
    bfca:	4808      	ldr	r0, [pc, #32]	; (bfec <init_sequence+0x50>)
    bfcc:	f00f ff8e 	bl	1beec <iprintf>
	printk("1...\n");
    bfd0:	4807      	ldr	r0, [pc, #28]	; (bff0 <init_sequence+0x54>)
    bfd2:	f012 f883 	bl	1e0dc <printk>
	k_msleep(1000);

	return;
}
    bfd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_msleep(1000);
    bfda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    bfde:	f011 bfb7 	b.w	1df50 <k_msleep.isra.0>
    bfe2:	bf00      	nop
    bfe4:	00023b5c 	.word	0x00023b5c
    bfe8:	00023b61 	.word	0x00023b61
    bfec:	00023b66 	.word	0x00023b66
    bff0:	00023b6b 	.word	0x00023b6b

0000bff4 <main>:

bool isTakingValidFixes = false;

/** ---------- Main ---------- **/
int main(void)
{
    bff4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	int err;
	uint8_t cnt = 0;
	struct nrf_modem_gnss_nmea_data_frame *nmea_data;

	init_sequence();
    bff8:	f7ff ffd0 	bl	bf9c <init_sequence>
	k_msleep(2000);
    bffc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    c000:	f011 ffa6 	bl	1df50 <k_msleep.isra.0>
	printk("Starting GNSS sample\n");
    c004:	4896      	ldr	r0, [pc, #600]	; (c260 <main+0x26c>)
    c006:	f012 f869 	bl	1e0dc <printk>

	err = nrf_modem_lib_init();
    c00a:	f005 f8c1 	bl	11190 <nrf_modem_lib_init>
	if (err) {
    c00e:	4604      	mov	r4, r0
    c010:	b138      	cbz	r0, c022 <main+0x2e>
		printk("Modem library initialization failed, error: %d\n", err);
    c012:	4601      	mov	r1, r0
    c014:	4893      	ldr	r0, [pc, #588]	; (c264 <main+0x270>)
    c016:	f012 f861 	bl	1e0dc <printk>
		events[0].state = K_POLL_STATE_NOT_READY;
		events[1].state = K_POLL_STATE_NOT_READY;
	}

	return 0;
}
    c01a:	4620      	mov	r0, r4
    c01c:	b004      	add	sp, #16
    c01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		date_time_register_handler(date_time_evt_handler);
    c022:	4891      	ldr	r0, [pc, #580]	; (c268 <main+0x274>)
    c024:	f013 ff68 	bl	1fef8 <date_time_register_handler>
	if (lte_lc_init() != 0) {
    c028:	f013 fed7 	bl	1fdda <lte_lc_init>
    c02c:	4604      	mov	r4, r0
    c02e:	b140      	cbz	r0, c042 <main+0x4e>
		printk("Failed to initialize LTE link controller");
    c030:	488e      	ldr	r0, [pc, #568]	; (c26c <main+0x278>)
    c032:	f012 f853 	bl	1e0dc <printk>
		printk("Failed to initialize modem\n");
    c036:	488e      	ldr	r0, [pc, #568]	; (c270 <main+0x27c>)
		printk("Failed to initialize sample\n");
    c038:	f012 f850 	bl	1e0dc <printk>
		return -1;
    c03c:	f04f 34ff 	mov.w	r4, #4294967295
    c040:	e7eb      	b.n	c01a <main+0x26>
	lte_lc_register_handler(lte_lc_event_handler);
    c042:	488c      	ldr	r0, [pc, #560]	; (c274 <main+0x280>)
    c044:	f006 fcb8 	bl	129b8 <lte_lc_register_handler>
	struct k_work_queue_config cfg = {
    c048:	4b8b      	ldr	r3, [pc, #556]	; (c278 <main+0x284>)
	k_work_queue_start(
    c04a:	af02      	add	r7, sp, #8
    c04c:	f44f 6210 	mov.w	r2, #2304	; 0x900
    c050:	498a      	ldr	r1, [pc, #552]	; (c27c <main+0x288>)
    c052:	488b      	ldr	r0, [pc, #556]	; (c280 <main+0x28c>)
	struct k_work_queue_config cfg = {
    c054:	9302      	str	r3, [sp, #8]
	k_work_queue_start(
    c056:	9700      	str	r7, [sp, #0]
    c058:	2305      	movs	r3, #5
	struct k_work_queue_config cfg = {
    c05a:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(
    c05e:	f00e fca7 	bl	1a9b0 <k_work_queue_start>
	k_work_init(&agps_data_get_work, agps_data_get_work_fn);
    c062:	4888      	ldr	r0, [pc, #544]	; (c284 <main+0x290>)
    c064:	4988      	ldr	r1, [pc, #544]	; (c288 <main+0x294>)
    c066:	f015 fad5 	bl	21614 <k_work_init>
	err = assistance_init(&gnss_work_q);
    c06a:	4885      	ldr	r0, [pc, #532]	; (c280 <main+0x28c>)
    c06c:	f011 ff8f 	bl	1df8e <assistance_init>
	if (sample_init() != 0) {
    c070:	b108      	cbz	r0, c076 <main+0x82>
		printk("Failed to initialize sample\n");
    c072:	4886      	ldr	r0, [pc, #536]	; (c28c <main+0x298>)
    c074:	e7e0      	b.n	c038 <main+0x44>
	if (lte_lc_func_mode_set(LTE_LC_FUNC_MODE_ACTIVATE_GNSS) != 0) {
    c076:	201f      	movs	r0, #31
    c078:	f007 f83c 	bl	130f4 <lte_lc_func_mode_set>
    c07c:	b120      	cbz	r0, c088 <main+0x94>
		printk("Failed to activate GNSS functional mode");
    c07e:	4884      	ldr	r0, [pc, #528]	; (c290 <main+0x29c>)
		printk("Failed to set GNSS event handler");
    c080:	f012 f82c 	bl	1e0dc <printk>
		printk("Failed to initialize and start GNSS\n");
    c084:	4883      	ldr	r0, [pc, #524]	; (c294 <main+0x2a0>)
    c086:	e7d7      	b.n	c038 <main+0x44>
	if (nrf_modem_gnss_event_handler_set(gnss_event_handler) != 0) {
    c088:	4883      	ldr	r0, [pc, #524]	; (c298 <main+0x2a4>)
    c08a:	f00d fe11 	bl	19cb0 <nrf_modem_gnss_event_handler_set>
    c08e:	b108      	cbz	r0, c094 <main+0xa0>
		printk("Failed to set GNSS event handler");
    c090:	4882      	ldr	r0, [pc, #520]	; (c29c <main+0x2a8>)
    c092:	e7f5      	b.n	c080 <main+0x8c>
	if (nrf_modem_gnss_nmea_mask_set(nmea_mask) != 0) {
    c094:	201f      	movs	r0, #31
    c096:	f00d fdb1 	bl	19bfc <nrf_modem_gnss_nmea_mask_set>
    c09a:	b108      	cbz	r0, c0a0 <main+0xac>
		printk("Failed to set GNSS NMEA mask");
    c09c:	4880      	ldr	r0, [pc, #512]	; (c2a0 <main+0x2ac>)
    c09e:	e7ef      	b.n	c080 <main+0x8c>
	if (nrf_modem_gnss_use_case_set(use_case) != 0) {
    c0a0:	2001      	movs	r0, #1
    c0a2:	f00d fd23 	bl	19aec <nrf_modem_gnss_use_case_set>
    c0a6:	b110      	cbz	r0, c0ae <main+0xba>
		printk("Failed to set GNSS use case");
    c0a8:	487e      	ldr	r0, [pc, #504]	; (c2a4 <main+0x2b0>)
    c0aa:	f012 f817 	bl	1e0dc <printk>
	if (nrf_modem_gnss_power_mode_set(power_mode) != 0) {
    c0ae:	2000      	movs	r0, #0
    c0b0:	f00d fdd2 	bl	19c58 <nrf_modem_gnss_power_mode_set>
    c0b4:	b108      	cbz	r0, c0ba <main+0xc6>
		printk("Failed to set GNSS power saving mode");
    c0b6:	487c      	ldr	r0, [pc, #496]	; (c2a8 <main+0x2b4>)
    c0b8:	e7e2      	b.n	c080 <main+0x8c>
	if (nrf_modem_gnss_fix_retry_set(fix_retry) != 0) {
    c0ba:	f00d fd71 	bl	19ba0 <nrf_modem_gnss_fix_retry_set>
    c0be:	b108      	cbz	r0, c0c4 <main+0xd0>
		printk("Failed to set GNSS fix retry");
    c0c0:	487a      	ldr	r0, [pc, #488]	; (c2ac <main+0x2b8>)
    c0c2:	e7dd      	b.n	c080 <main+0x8c>
	if (nrf_modem_gnss_fix_interval_set(fix_interval) != 0) {
    c0c4:	2001      	movs	r0, #1
    c0c6:	f00d fd3d 	bl	19b44 <nrf_modem_gnss_fix_interval_set>
    c0ca:	b108      	cbz	r0, c0d0 <main+0xdc>
		printk("Failed to set GNSS fix interval");
    c0cc:	4878      	ldr	r0, [pc, #480]	; (c2b0 <main+0x2bc>)
    c0ce:	e7d7      	b.n	c080 <main+0x8c>
	if (nrf_modem_gnss_start() != 0) {
    c0d0:	f00d fc98 	bl	19a04 <nrf_modem_gnss_start>
    c0d4:	4605      	mov	r5, r0
    c0d6:	b108      	cbz	r0, c0dc <main+0xe8>
		printk("Failed to start GNSS");
    c0d8:	4876      	ldr	r0, [pc, #472]	; (c2b4 <main+0x2c0>)
    c0da:	e7d1      	b.n	c080 <main+0x8c>
	printk("All init OK\n");
    c0dc:	4876      	ldr	r0, [pc, #472]	; (c2b8 <main+0x2c4>)
    c0de:	f011 fffd 	bl	1e0dc <printk>
	return z_impl_k_uptime_ticks();
    c0e2:	f015 fbf7 	bl	218d4 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
    c0e6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    c0ea:	fba0 3204 	umull	r3, r2, r0, r4
    c0ee:	fb04 2101 	mla	r1, r4, r1, r2
	fix_timestamp = k_uptime_get();
    c0f2:	4e72      	ldr	r6, [pc, #456]	; (c2bc <main+0x2c8>)
    c0f4:	0bdb      	lsrs	r3, r3, #15
    c0f6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    c0fa:	0bc9      	lsrs	r1, r1, #15
    c0fc:	e9c6 3100 	strd	r3, r1, [r6]
	return z_impl_k_poll(events, num_events, timeout);
    c100:	4c6f      	ldr	r4, [pc, #444]	; (c2c0 <main+0x2cc>)
    c102:	f04f 33ff 	mov.w	r3, #4294967295
    c106:	f04f 32ff 	mov.w	r2, #4294967295
    c10a:	2102      	movs	r1, #2
    c10c:	486c      	ldr	r0, [pc, #432]	; (c2c0 <main+0x2cc>)
    c10e:	f00f f969 	bl	1b3e4 <z_impl_k_poll>
		if (events[0].state == K_POLL_STATE_SEM_AVAILABLE &&
    c112:	68e3      	ldr	r3, [r4, #12]
    c114:	f403 13fe 	and.w	r3, r3, #2080768	; 0x1fc000
    c118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c11c:	d15f      	bne.n	c1de <main+0x1ea>
		    k_sem_take(events[0].sem, K_NO_WAIT) == 0) {
    c11e:	6920      	ldr	r0, [r4, #16]
	return z_impl_k_sem_take(sem, timeout);
    c120:	2200      	movs	r2, #0
    c122:	2300      	movs	r3, #0
    c124:	f00e fbbc 	bl	1a8a0 <z_impl_k_sem_take>
		if (events[0].state == K_POLL_STATE_SEM_AVAILABLE &&
    c128:	2800      	cmp	r0, #0
    c12a:	d158      	bne.n	c1de <main+0x1ea>
			if (output_paused()) {
    c12c:	f7ff fe68 	bl	be00 <output_paused>
    c130:	4603      	mov	r3, r0
    c132:	2800      	cmp	r0, #0
    c134:	d153      	bne.n	c1de <main+0x1ea>
    c136:	f8df c1b0 	ldr.w	ip, [pc, #432]	; c2e8 <main+0x2f4>
    c13a:	f04f 0e0c 	mov.w	lr, #12
	uint8_t in_fix    = 0;
    c13e:	4602      	mov	r2, r0
	uint8_t tracked   = 0;
    c140:	4601      	mov	r1, r0
    c142:	46e0      	mov	r8, ip
		if (pvt_data->sv[i].sv > 0) {
    c144:	f8bc 0052 	ldrh.w	r0, [ip, #82]	; 0x52
    c148:	b168      	cbz	r0, c166 <main+0x172>
			if (pvt_data->sv[i].flags & NRF_MODEM_GNSS_SV_FLAG_USED_IN_FIX) {
    c14a:	f89c 005c 	ldrb.w	r0, [ip, #92]	; 0x5c
			tracked++;
    c14e:	3101      	adds	r1, #1
			if (pvt_data->sv[i].flags & NRF_MODEM_GNSS_SV_FLAG_USED_IN_FIX) {
    c150:	f010 0f02 	tst.w	r0, #2
				in_fix++;
    c154:	bf1c      	itt	ne
    c156:	3201      	addne	r2, #1
    c158:	b2d2      	uxtbne	r2, r2
			if (pvt_data->sv[i].flags & NRF_MODEM_GNSS_SV_FLAG_UNHEALTHY) {
    c15a:	0700      	lsls	r0, r0, #28
				unhealthy++;
    c15c:	bf48      	it	mi
    c15e:	3301      	addmi	r3, #1
			tracked++;
    c160:	b2c9      	uxtb	r1, r1
				unhealthy++;
    c162:	bf48      	it	mi
    c164:	b2db      	uxtbmi	r3, r3
	for (int i = 0; i < NRF_MODEM_GNSS_MAX_SATELLITES; ++i) {
    c166:	f1be 0e01 	subs.w	lr, lr, #1
    c16a:	f10c 0c0c 	add.w	ip, ip, #12
    c16e:	d1e9      	bne.n	c144 <main+0x150>
	printk("Tracking: %2d Using: %2d Unhealthy: %d\n", tracked, in_fix, unhealthy);
    c170:	4854      	ldr	r0, [pc, #336]	; (c2c4 <main+0x2d0>)
    c172:	f011 ffb3 	bl	1e0dc <printk>
			if (last_pvt.flags & NRF_MODEM_GNSS_PVT_FLAG_DEADLINE_MISSED) {
    c176:	f898 3050 	ldrb.w	r3, [r8, #80]	; 0x50
    c17a:	0719      	lsls	r1, r3, #28
    c17c:	d502      	bpl.n	c184 <main+0x190>
				printk("GNSS operation blocked by LTE\n");
    c17e:	4852      	ldr	r0, [pc, #328]	; (c2c8 <main+0x2d4>)
    c180:	f011 ffac 	bl	1e0dc <printk>
			if (last_pvt.flags & NRF_MODEM_GNSS_PVT_FLAG_NOT_ENOUGH_WINDOW_TIME) {
    c184:	f898 3050 	ldrb.w	r3, [r8, #80]	; 0x50
    c188:	06da      	lsls	r2, r3, #27
    c18a:	d502      	bpl.n	c192 <main+0x19e>
				printk("Insufficient GNSS time windows\n");
    c18c:	484f      	ldr	r0, [pc, #316]	; (c2cc <main+0x2d8>)
    c18e:	f011 ffa5 	bl	1e0dc <printk>
			if (last_pvt.flags & NRF_MODEM_GNSS_PVT_FLAG_SLEEP_BETWEEN_PVT) {
    c192:	f898 3050 	ldrb.w	r3, [r8, #80]	; 0x50
    c196:	075b      	lsls	r3, r3, #29
    c198:	d502      	bpl.n	c1a0 <main+0x1ac>
				printk("Sleep period(s) between PVT notifications\n");
    c19a:	484d      	ldr	r0, [pc, #308]	; (c2d0 <main+0x2dc>)
    c19c:	f011 ff9e 	bl	1e0dc <printk>
			if (last_pvt.flags & NRF_MODEM_GNSS_PVT_FLAG_FIX_VALID) {
    c1a0:	f898 3050 	ldrb.w	r3, [r8, #80]	; 0x50
    c1a4:	4a4b      	ldr	r2, [pc, #300]	; (c2d4 <main+0x2e0>)
    c1a6:	f013 0301 	ands.w	r3, r3, #1
    c1aa:	d033      	beq.n	c214 <main+0x220>
				isTakingValidFixes = true;
    c1ac:	2301      	movs	r3, #1
    c1ae:	7013      	strb	r3, [r2, #0]
	return z_impl_k_uptime_ticks();
    c1b0:	f015 fb90 	bl	218d4 <z_impl_k_uptime_ticks>
    c1b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c1b8:	fba0 0302 	umull	r0, r3, r0, r2
    c1bc:	fb02 3101 	mla	r1, r2, r1, r3
	printk("  (%.06f, %.06f), \n", pvt_data->latitude, pvt_data->longitude);
    c1c0:	e9d8 2302 	ldrd	r2, r3, [r8, #8]
    c1c4:	0bc0      	lsrs	r0, r0, #15
    c1c6:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    c1ca:	0bc9      	lsrs	r1, r1, #15
				fix_timestamp = k_uptime_get();
    c1cc:	e9c6 0100 	strd	r0, r1, [r6]
	printk("  (%.06f, %.06f), \n", pvt_data->latitude, pvt_data->longitude);
    c1d0:	e9cd 2300 	strd	r2, r3, [sp]
    c1d4:	4840      	ldr	r0, [pc, #256]	; (c2d8 <main+0x2e4>)
    c1d6:	e9d8 2300 	ldrd	r2, r3, [r8]
    c1da:	f011 ff7f 	bl	1e0dc <printk>
		if (events[1].state == K_POLL_STATE_MSGQ_DATA_AVAILABLE &&
    c1de:	6a23      	ldr	r3, [r4, #32]
    c1e0:	f403 13fe 	and.w	r3, r3, #2080768	; 0x1fc000
    c1e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    c1e8:	d10b      	bne.n	c202 <main+0x20e>
		    k_msgq_get(events[1].msgq, &nmea_data, K_NO_WAIT) == 0) {
    c1ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return z_impl_k_msgq_get(msgq, data, timeout);
    c1ec:	2200      	movs	r2, #0
    c1ee:	2300      	movs	r3, #0
    c1f0:	4639      	mov	r1, r7
    c1f2:	f00e f9eb 	bl	1a5cc <z_impl_k_msgq_get>
		if (events[1].state == K_POLL_STATE_MSGQ_DATA_AVAILABLE &&
    c1f6:	b920      	cbnz	r0, c202 <main+0x20e>
			if (!output_paused()) {
    c1f8:	f7ff fe02 	bl	be00 <output_paused>
			k_free(nmea_data);
    c1fc:	9802      	ldr	r0, [sp, #8]
    c1fe:	f015 fcfc 	bl	21bfa <k_free>
		events[0].state = K_POLL_STATE_NOT_READY;
    c202:	68e3      	ldr	r3, [r4, #12]
    c204:	f36f 3394 	bfc	r3, #14, #7
    c208:	60e3      	str	r3, [r4, #12]
		events[1].state = K_POLL_STATE_NOT_READY;
    c20a:	6a23      	ldr	r3, [r4, #32]
    c20c:	f36f 3394 	bfc	r3, #14, #7
    c210:	6223      	str	r3, [r4, #32]
	for (;;) {
    c212:	e776      	b.n	c102 <main+0x10e>
				isTakingValidFixes = false;
    c214:	7013      	strb	r3, [r2, #0]
	return z_impl_k_uptime_ticks();
    c216:	f015 fb5d 	bl	218d4 <z_impl_k_uptime_ticks>
    c21a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c21e:	fba0 0302 	umull	r0, r3, r0, r2
    c222:	fb02 3101 	mla	r1, r2, r1, r3
    c226:	0bc3      	lsrs	r3, r0, #15
    c228:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
						(uint32_t)((k_uptime_get() - fix_timestamp) / 1000));
    c22c:	e9d6 0200 	ldrd	r0, r2, [r6]
    c230:	0bc9      	lsrs	r1, r1, #15
    c232:	1a18      	subs	r0, r3, r0
    c234:	eb61 0102 	sbc.w	r1, r1, r2
    c238:	2300      	movs	r3, #0
    c23a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c23e:	f7fc fcd7 	bl	8bf0 <__aeabi_uldivmod>
    c242:	4601      	mov	r1, r0
				printk("Seconds since last fix: %d\n",
    c244:	4825      	ldr	r0, [pc, #148]	; (c2dc <main+0x2e8>)
    c246:	f011 ff49 	bl	1e0dc <printk>
				printk("Searching [%c]\n", update_indicator[cnt%4]);
    c24a:	4a25      	ldr	r2, [pc, #148]	; (c2e0 <main+0x2ec>)
				cnt++;
    c24c:	1c6b      	adds	r3, r5, #1
    c24e:	b2dd      	uxtb	r5, r3
				printk("Searching [%c]\n", update_indicator[cnt%4]);
    c250:	f003 0303 	and.w	r3, r3, #3
    c254:	5cd1      	ldrb	r1, [r2, r3]
    c256:	4823      	ldr	r0, [pc, #140]	; (c2e4 <main+0x2f0>)
    c258:	f011 ff40 	bl	1e0dc <printk>
    c25c:	e7bf      	b.n	c1de <main+0x1ea>
    c25e:	bf00      	nop
    c260:	00023b71 	.word	0x00023b71
    c264:	00023b87 	.word	0x00023b87
    c268:	0000bee1 	.word	0x0000bee1
    c26c:	00023bb7 	.word	0x00023bb7
    c270:	00023be0 	.word	0x00023be0
    c274:	0000be1d 	.word	0x0000be1d
    c278:	00023bfc 	.word	0x00023bfc
    c27c:	200110d8 	.word	0x200110d8
    c280:	2000cc58 	.word	0x2000cc58
    c284:	2000db48 	.word	0x2000db48
    c288:	0000bf59 	.word	0x0000bf59
    c28c:	00023c08 	.word	0x00023c08
    c290:	00023c25 	.word	0x00023c25
    c294:	00023d2b 	.word	0x00023d2b
    c298:	0000be49 	.word	0x0000be49
    c29c:	00023c4d 	.word	0x00023c4d
    c2a0:	00023c6e 	.word	0x00023c6e
    c2a4:	00023c8b 	.word	0x00023c8b
    c2a8:	00023ca7 	.word	0x00023ca7
    c2ac:	00023ccc 	.word	0x00023ccc
    c2b0:	00023ce9 	.word	0x00023ce9
    c2b4:	00023d09 	.word	0x00023d09
    c2b8:	00023d1e 	.word	0x00023d1e
    c2bc:	2000cb68 	.word	0x2000cb68
    c2c0:	2000c5b0 	.word	0x2000c5b0
    c2c4:	00023d50 	.word	0x00023d50
    c2c8:	00023d78 	.word	0x00023d78
    c2cc:	00023d97 	.word	0x00023d97
    c2d0:	00023db7 	.word	0x00023db7
    c2d4:	2000e354 	.word	0x2000e354
    c2d8:	00023de2 	.word	0x00023de2
    c2dc:	00023df6 	.word	0x00023df6
    c2e0:	00023e22 	.word	0x00023e22
    c2e4:	00023e12 	.word	0x00023e12
    c2e8:	2000cb70 	.word	0x2000cb70

0000c2ec <assistance_request>:

	return 0;
}

int assistance_request(struct nrf_modem_gnss_agps_data_frame *agps_request)
{
    c2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Almanacs are not needed with P-GPS, so skip those. */
	agps_request->sv_mask_alm = 0;
#endif /* CONFIG_NRF_CLOUD_AGPS */
#endif /* CONFIG_NRF_CLOUD_PGPS */
#if defined(CONFIG_NRF_CLOUD_AGPS)
	assistance_active = true;
    c2f0:	f04f 0801 	mov.w	r8, #1

	err = nrf_cloud_jwt_generate(0, jwt_buf, sizeof(jwt_buf));
    c2f4:	4e60      	ldr	r6, [pc, #384]	; (c478 <assistance_request+0x18c>)
	assistance_active = true;
    c2f6:	4f61      	ldr	r7, [pc, #388]	; (c47c <assistance_request+0x190>)
{
    c2f8:	4605      	mov	r5, r0
	err = nrf_cloud_jwt_generate(0, jwt_buf, sizeof(jwt_buf));
    c2fa:	f44f 7216 	mov.w	r2, #600	; 0x258
    c2fe:	4631      	mov	r1, r6
    c300:	2000      	movs	r0, #0
{
    c302:	b0c4      	sub	sp, #272	; 0x110
	assistance_active = true;
    c304:	f887 8000 	strb.w	r8, [r7]
	err = nrf_cloud_jwt_generate(0, jwt_buf, sizeof(jwt_buf));
    c308:	f009 f9c6 	bl	15698 <nrf_cloud_jwt_generate>
	if (err) {
    c30c:	4604      	mov	r4, r0
    c30e:	b180      	cbz	r0, c332 <assistance_request+0x46>
		LOG_ERR("Failed to generate JWT, error: %d", err);
    c310:	4b5b      	ldr	r3, [pc, #364]	; (c480 <assistance_request+0x194>)
    c312:	9003      	str	r0, [sp, #12]
    c314:	9302      	str	r3, [sp, #8]
    c316:	2300      	movs	r3, #0
    c318:	e9cd 3300 	strd	r3, r3, [sp]
		agps_request->sv_mask_alm,
		agps_request->data_flags);

	err = nrf_cloud_rest_agps_data_get(&rest_ctx, &request, &result);
	if (err) {
		LOG_ERR("Failed to get A-GPS data, error: %d", err);
    c31c:	2201      	movs	r2, #1
    c31e:	4618      	mov	r0, r3
    c320:	4958      	ldr	r1, [pc, #352]	; (c484 <assistance_request+0x198>)
    c322:	f011 fe25 	bl	1df70 <z_log_msg_runtime_create.constprop.0>
	}

	LOG_INF("A-GPS data processed");

agps_exit:
	assistance_active = false;
    c326:	2300      	movs	r3, #0
#if defined(CONFIG_NRF_CLOUD_PGPS)
	nrf_cloud_pgps_notify_prediction();
#endif /* CONFIG_NRF_CLOUD_PGPS */

	return err;
}
    c328:	4620      	mov	r0, r4
	assistance_active = false;
    c32a:	703b      	strb	r3, [r7, #0]
}
    c32c:	b044      	add	sp, #272	; 0x110
    c32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct nrf_cloud_rest_context rest_ctx = {
    c332:	4601      	mov	r1, r0
    c334:	222c      	movs	r2, #44	; 0x2c
    c336:	a80f      	add	r0, sp, #60	; 0x3c
    c338:	f015 fcc5 	bl	21cc6 <memset>
    c33c:	f04f 33ff 	mov.w	r3, #4294967295
    c340:	e9cd 3610 	strd	r3, r6, [sp, #64]	; 0x40
    c344:	930e      	str	r3, [sp, #56]	; 0x38
    c346:	4b50      	ldr	r3, [pc, #320]	; (c488 <assistance_request+0x19c>)
	struct nrf_cloud_rest_agps_request request = {
    c348:	2210      	movs	r2, #16
	struct nrf_cloud_rest_context rest_ctx = {
    c34a:	9312      	str	r3, [sp, #72]	; 0x48
    c34c:	f44f 6300 	mov.w	r3, #2048	; 0x800
	struct nrf_cloud_rest_agps_request request = {
    c350:	4621      	mov	r1, r4
    c352:	a80a      	add	r0, sp, #40	; 0x28
	struct nrf_cloud_rest_context rest_ctx = {
    c354:	9313      	str	r3, [sp, #76]	; 0x4c
	struct nrf_cloud_rest_agps_request request = {
    c356:	f015 fcb6 	bl	21cc6 <memset>
    c35a:	2302      	movs	r3, #2
    c35c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	struct nrf_cloud_rest_agps_result result = {
    c360:	4b4a      	ldr	r3, [pc, #296]	; (c48c <assistance_request+0x1a0>)
    c362:	ae07      	add	r6, sp, #28
	struct lte_lc_cells_info net_info = { 0 };
    c364:	f10d 0868 	add.w	r8, sp, #104	; 0x68
	struct nrf_cloud_rest_agps_result result = {
    c368:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    c36c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	struct lte_lc_cells_info net_info = { 0 };
    c370:	2240      	movs	r2, #64	; 0x40
    c372:	4621      	mov	r1, r4
    c374:	4640      	mov	r0, r8
	struct nrf_cloud_rest_agps_request request = {
    c376:	950b      	str	r5, [sp, #44]	; 0x2c
	struct lte_lc_cells_info net_info = { 0 };
    c378:	f015 fca5 	bl	21cc6 <memset>
	err = modem_info_init();
    c37c:	f008 f8de 	bl	1453c <modem_info_init>
	if (err) {
    c380:	2800      	cmp	r0, #0
    c382:	d150      	bne.n	c426 <assistance_request+0x13a>
	err = modem_info_string_get(MODEM_INFO_CELLID,
    c384:	2264      	movs	r2, #100	; 0x64
    c386:	2008      	movs	r0, #8
    c388:	a92b      	add	r1, sp, #172	; 0xac
    c38a:	f007 ff71 	bl	14270 <modem_info_string_get>
	if (err < 0) {
    c38e:	2800      	cmp	r0, #0
    c390:	db49      	blt.n	c426 <assistance_request+0x13a>
	serving_cell->id = strtol(resp_buf, NULL, 16);
    c392:	2210      	movs	r2, #16
    c394:	4621      	mov	r1, r4
    c396:	a82b      	add	r0, sp, #172	; 0xac
    c398:	f00f feb8 	bl	1c10c <strtol>
	err = modem_info_string_get(MODEM_INFO_AREA_CODE,
    c39c:	2264      	movs	r2, #100	; 0x64
	serving_cell->id = strtol(resp_buf, NULL, 16);
    c39e:	901c      	str	r0, [sp, #112]	; 0x70
	err = modem_info_string_get(MODEM_INFO_AREA_CODE,
    c3a0:	a92b      	add	r1, sp, #172	; 0xac
    c3a2:	2003      	movs	r0, #3
    c3a4:	f007 ff64 	bl	14270 <modem_info_string_get>
	if (err < 0) {
    c3a8:	2800      	cmp	r0, #0
    c3aa:	db3c      	blt.n	c426 <assistance_request+0x13a>
	serving_cell->tac = strtol(resp_buf, NULL, 16);
    c3ac:	2210      	movs	r2, #16
    c3ae:	4621      	mov	r1, r4
    c3b0:	a82b      	add	r0, sp, #172	; 0xac
    c3b2:	f00f feab 	bl	1c10c <strtol>
	err = modem_info_string_get(MODEM_INFO_OPERATOR,
    c3b6:	2264      	movs	r2, #100	; 0x64
	serving_cell->tac = strtol(resp_buf, NULL, 16);
    c3b8:	901d      	str	r0, [sp, #116]	; 0x74
	err = modem_info_string_get(MODEM_INFO_OPERATOR,
    c3ba:	a92b      	add	r1, sp, #172	; 0xac
    c3bc:	2005      	movs	r0, #5
    c3be:	f007 ff57 	bl	14270 <modem_info_string_get>
	if (err < 0) {
    c3c2:	2800      	cmp	r0, #0
    c3c4:	db2f      	blt.n	c426 <assistance_request+0x13a>
	serving_cell->mnc = strtol(&resp_buf[3], NULL, 10);
    c3c6:	220a      	movs	r2, #10
    c3c8:	4621      	mov	r1, r4
    c3ca:	f10d 00af 	add.w	r0, sp, #175	; 0xaf
    c3ce:	f00f fe9d 	bl	1c10c <strtol>
	serving_cell->mcc = strtol(resp_buf, NULL, 10);
    c3d2:	220a      	movs	r2, #10
	serving_cell->mnc = strtol(&resp_buf[3], NULL, 10);
    c3d4:	901b      	str	r0, [sp, #108]	; 0x6c
	serving_cell->mcc = strtol(resp_buf, NULL, 10);
    c3d6:	4621      	mov	r1, r4
    c3d8:	a82b      	add	r0, sp, #172	; 0xac
	resp_buf[3] = '\0';
    c3da:	f88d 40af 	strb.w	r4, [sp, #175]	; 0xaf
	serving_cell->mcc = strtol(resp_buf, NULL, 10);
    c3de:	f00f fe95 	bl	1c10c <strtol>
		request.net_info = &net_info;
    c3e2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
	serving_cell->mcc = strtol(resp_buf, NULL, 10);
    c3e6:	901a      	str	r0, [sp, #104]	; 0x68
	LOG_INF("Requesting A-GPS data, ephe 0x%08x, alm 0x%08x, flags 0x%02x",
    c3e8:	68ab      	ldr	r3, [r5, #8]
    c3ea:	2203      	movs	r2, #3
    c3ec:	9305      	str	r3, [sp, #20]
    c3ee:	686b      	ldr	r3, [r5, #4]
    c3f0:	4924      	ldr	r1, [pc, #144]	; (c484 <assistance_request+0x198>)
    c3f2:	9304      	str	r3, [sp, #16]
    c3f4:	682b      	ldr	r3, [r5, #0]
    c3f6:	2500      	movs	r5, #0
    c3f8:	9303      	str	r3, [sp, #12]
    c3fa:	4b25      	ldr	r3, [pc, #148]	; (c490 <assistance_request+0x1a4>)
    c3fc:	4628      	mov	r0, r5
    c3fe:	9302      	str	r3, [sp, #8]
    c400:	e9cd 5500 	strd	r5, r5, [sp]
    c404:	462b      	mov	r3, r5
    c406:	f011 fdb3 	bl	1df70 <z_log_msg_runtime_create.constprop.0>
	err = nrf_cloud_rest_agps_data_get(&rest_ctx, &request, &result);
    c40a:	4632      	mov	r2, r6
    c40c:	a90a      	add	r1, sp, #40	; 0x28
    c40e:	a80e      	add	r0, sp, #56	; 0x38
    c410:	f009 ffbe 	bl	16390 <nrf_cloud_rest_agps_data_get>
	if (err) {
    c414:	4604      	mov	r4, r0
    c416:	b190      	cbz	r0, c43e <assistance_request+0x152>
		LOG_ERR("Failed to get A-GPS data, error: %d", err);
    c418:	4b1e      	ldr	r3, [pc, #120]	; (c494 <assistance_request+0x1a8>)
    c41a:	9003      	str	r0, [sp, #12]
    c41c:	e9cd 5301 	strd	r5, r3, [sp, #4]
    c420:	9500      	str	r5, [sp, #0]
    c422:	462b      	mov	r3, r5
    c424:	e77a      	b.n	c31c <assistance_request+0x30>
		LOG_ERR("Could not get cell info, error: %d", err);
    c426:	4b1c      	ldr	r3, [pc, #112]	; (c498 <assistance_request+0x1ac>)
    c428:	9003      	str	r0, [sp, #12]
    c42a:	9302      	str	r3, [sp, #8]
    c42c:	2300      	movs	r3, #0
    c42e:	2201      	movs	r2, #1
    c430:	4618      	mov	r0, r3
    c432:	e9cd 3300 	strd	r3, r3, [sp]
    c436:	4913      	ldr	r1, [pc, #76]	; (c484 <assistance_request+0x198>)
    c438:	f011 fd9a 	bl	1df70 <z_log_msg_runtime_create.constprop.0>
    c43c:	e7d4      	b.n	c3e8 <assistance_request+0xfc>
	LOG_INF("Processing A-GPS data");
    c43e:	4b17      	ldr	r3, [pc, #92]	; (c49c <assistance_request+0x1b0>)
    c440:	2203      	movs	r2, #3
    c442:	e9cd 0301 	strd	r0, r3, [sp, #4]
    c446:	490f      	ldr	r1, [pc, #60]	; (c484 <assistance_request+0x198>)
    c448:	4603      	mov	r3, r0
    c44a:	9000      	str	r0, [sp, #0]
    c44c:	f011 fd90 	bl	1df70 <z_log_msg_runtime_create.constprop.0>
	err = nrf_cloud_agps_process(result.buf, result.agps_sz);
    c450:	9909      	ldr	r1, [sp, #36]	; 0x24
    c452:	9807      	ldr	r0, [sp, #28]
    c454:	f009 f996 	bl	15784 <nrf_cloud_agps_process>
	if (err) {
    c458:	4604      	mov	r4, r0
    c45a:	b110      	cbz	r0, c462 <assistance_request+0x176>
		LOG_ERR("Failed to process A-GPS data, error: %d", err);
    c45c:	4b10      	ldr	r3, [pc, #64]	; (c4a0 <assistance_request+0x1b4>)
    c45e:	9003      	str	r0, [sp, #12]
    c460:	e7dc      	b.n	c41c <assistance_request+0x130>
	LOG_INF("A-GPS data processed");
    c462:	4b10      	ldr	r3, [pc, #64]	; (c4a4 <assistance_request+0x1b8>)
    c464:	2203      	movs	r2, #3
    c466:	e9cd 0301 	strd	r0, r3, [sp, #4]
    c46a:	4906      	ldr	r1, [pc, #24]	; (c484 <assistance_request+0x198>)
    c46c:	4603      	mov	r3, r0
    c46e:	9000      	str	r0, [sp, #0]
    c470:	f011 fd7e 	bl	1df70 <z_log_msg_runtime_create.constprop.0>
    c474:	e757      	b.n	c326 <assistance_request+0x3a>
    c476:	bf00      	nop
    c478:	2000f903 	.word	0x2000f903
    c47c:	2000e356 	.word	0x2000e356
    c480:	00023e32 	.word	0x00023e32
    c484:	00022f54 	.word	0x00022f54
    c488:	2000f103 	.word	0x2000f103
    c48c:	00023080 	.word	0x00023080
    c490:	00023e77 	.word	0x00023e77
    c494:	00023eb4 	.word	0x00023eb4
    c498:	00023e54 	.word	0x00023e54
    c49c:	00023ed8 	.word	0x00023ed8
    c4a0:	00023eee 	.word	0x00023eee
    c4a4:	00023f16 	.word	0x00023f16

0000c4a8 <assistance_is_active>:

bool assistance_is_active(void)
{
	return assistance_active;
    c4a8:	4b01      	ldr	r3, [pc, #4]	; (c4b0 <assistance_is_active+0x8>)
    c4aa:	7818      	ldrb	r0, [r3, #0]
}
    c4ac:	4770      	bx	lr
    c4ae:	bf00      	nop
    c4b0:	2000e356 	.word	0x2000e356

0000c4b4 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    c4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4b8:	b091      	sub	sp, #68	; 0x44
    c4ba:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    c4bc:	f002 0304 	and.w	r3, r2, #4
    c4c0:	9302      	str	r3, [sp, #8]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    c4c2:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    c4c6:	3301      	adds	r3, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    c4c8:	0784      	lsls	r4, r0, #30
{
    c4ca:	4605      	mov	r5, r0
    c4cc:	460e      	mov	r6, r1
    c4ce:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    c4d2:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    c4d4:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    c4d6:	f040 81bd 	bne.w	c854 <cbvprintf_package+0x3a0>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    c4da:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    c4dc:	b130      	cbz	r0, c4ec <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    c4de:	2907      	cmp	r1, #7
    c4e0:	d809      	bhi.n	c4f6 <cbvprintf_package+0x42>
		return -ENOSPC;
    c4e2:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    c4e6:	b011      	add	sp, #68	; 0x44
    c4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    c4ec:	f001 0607 	and.w	r6, r1, #7
    c4f0:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    c4f2:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    c4f6:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    c4f8:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
    c4fc:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
    c500:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    c502:	f04f 33ff 	mov.w	r3, #4294967295
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    c506:	464f      	mov	r7, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    c508:	9301      	str	r3, [sp, #4]
	bool parsing = false;
    c50a:	46cb      	mov	fp, r9
	size = sizeof(char *);
    c50c:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    c50e:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
    c512:	b10d      	cbz	r5, c518 <cbvprintf_package+0x64>
				*(const char **)buf = s;
    c514:	9800      	ldr	r0, [sp, #0]
    c516:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    c518:	9805      	ldr	r0, [sp, #20]
    c51a:	2800      	cmp	r0, #0
    c51c:	f300 80eb 	bgt.w	c6f6 <cbvprintf_package+0x242>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    c520:	4899      	ldr	r0, [pc, #612]	; (c788 <cbvprintf_package+0x2d4>)
    c522:	9a00      	ldr	r2, [sp, #0]
    c524:	4282      	cmp	r2, r0
    c526:	d303      	bcc.n	c530 <cbvprintf_package+0x7c>
    c528:	4898      	ldr	r0, [pc, #608]	; (c78c <cbvprintf_package+0x2d8>)
    c52a:	4282      	cmp	r2, r0
    c52c:	f0c0 80e3 	bcc.w	c6f6 <cbvprintf_package+0x242>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c530:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    c532:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c536:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    c538:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c53c:	f100 8106 	bmi.w	c74c <cbvprintf_package+0x298>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    c540:	2f0f      	cmp	r7, #15
    c542:	f200 80b4 	bhi.w	c6ae <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
    c546:	2d00      	cmp	r5, #0
    c548:	f000 8108 	beq.w	c75c <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    c54c:	f107 0240 	add.w	r2, r7, #64	; 0x40
    c550:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    c554:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    c556:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    c55a:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    c55e:	9804      	ldr	r0, [sp, #16]
    c560:	3001      	adds	r0, #1
    c562:	9004      	str	r0, [sp, #16]
    c564:	e0ea      	b.n	c73c <cbvprintf_package+0x288>
			switch (*fmt) {
    c566:	287a      	cmp	r0, #122	; 0x7a
    c568:	d860      	bhi.n	c62c <cbvprintf_package+0x178>
    c56a:	284b      	cmp	r0, #75	; 0x4b
    c56c:	d80e      	bhi.n	c58c <cbvprintf_package+0xd8>
    c56e:	2847      	cmp	r0, #71	; 0x47
    c570:	d85c      	bhi.n	c62c <cbvprintf_package+0x178>
    c572:	2829      	cmp	r0, #41	; 0x29
    c574:	d82f      	bhi.n	c5d6 <cbvprintf_package+0x122>
    c576:	2825      	cmp	r0, #37	; 0x25
    c578:	d055      	beq.n	c626 <cbvprintf_package+0x172>
    c57a:	d857      	bhi.n	c62c <cbvprintf_package+0x178>
    c57c:	2820      	cmp	r0, #32
    c57e:	d07d      	beq.n	c67c <cbvprintf_package+0x1c8>
    c580:	3823      	subs	r0, #35	; 0x23
    c582:	f1d0 0b00 	rsbs	fp, r0, #0
    c586:	eb4b 0b00 	adc.w	fp, fp, r0
    c58a:	e077      	b.n	c67c <cbvprintf_package+0x1c8>
    c58c:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    c590:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    c594:	d84a      	bhi.n	c62c <cbvprintf_package+0x178>
    c596:	e8df f00c 	tbb	[pc, ip]
    c59a:	4971      	.short	0x4971
    c59c:	49494949 	.word	0x49494949
    c5a0:	49494949 	.word	0x49494949
    c5a4:	494c4949 	.word	0x494c4949
    c5a8:	49494949 	.word	0x49494949
    c5ac:	5a494949 	.word	0x5a494949
    c5b0:	5a4c4c49 	.word	0x5a4c4c49
    c5b4:	4c715a5a 	.word	0x4c715a5a
    c5b8:	4971496e 	.word	0x4971496e
    c5bc:	49184c18 	.word	0x49184c18
    c5c0:	4c808349 	.word	0x4c808349
    c5c4:	494c4949 	.word	0x494c4949
    c5c8:	80          	.byte	0x80
    c5c9:	00          	.byte	0x00
    c5ca:	2000      	movs	r0, #0
    c5cc:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    c5d0:	f04f 0a04 	mov.w	sl, #4
    c5d4:	e039      	b.n	c64a <cbvprintf_package+0x196>
    c5d6:	2201      	movs	r2, #1
			switch (*fmt) {
    c5d8:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    c5dc:	fa5f fc8c 	uxtb.w	ip, ip
    c5e0:	fa02 fc0c 	lsl.w	ip, r2, ip
    c5e4:	ea1c 0f0e 	tst.w	ip, lr
    c5e8:	d148      	bne.n	c67c <cbvprintf_package+0x1c8>
    c5ea:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    c5ee:	d12e      	bne.n	c64e <cbvprintf_package+0x19a>
    c5f0:	ea1c 0b02 	ands.w	fp, ip, r2
    c5f4:	d042      	beq.n	c67c <cbvprintf_package+0x1c8>
		buf = (void *) ROUND_UP(buf, align);
    c5f6:	3c01      	subs	r4, #1
    c5f8:	4454      	add	r4, sl
    c5fa:	f1ca 0c00 	rsb	ip, sl, #0
    c5fe:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    c602:	2d00      	cmp	r5, #0
    c604:	d061      	beq.n	c6ca <cbvprintf_package+0x216>
    c606:	eba3 0c05 	sub.w	ip, r3, r5
    c60a:	44a4      	add	ip, r4
    c60c:	4566      	cmp	r6, ip
    c60e:	f4ff af68 	bcc.w	c4e2 <cbvprintf_package+0x2e>
		if (is_str_arg) {
    c612:	2800      	cmp	r0, #0
    c614:	d168      	bne.n	c6e8 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
    c616:	2b04      	cmp	r3, #4
    c618:	d147      	bne.n	c6aa <cbvprintf_package+0x1f6>
			int v = va_arg(ap, int);
    c61a:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    c61e:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    c620:	2304      	movs	r3, #4
    c622:	3404      	adds	r4, #4
    c624:	e02a      	b.n	c67c <cbvprintf_package+0x1c8>
				arg_idx--;
    c626:	9a01      	ldr	r2, [sp, #4]
    c628:	3a01      	subs	r2, #1
    c62a:	9201      	str	r2, [sp, #4]
				parsing = false;
    c62c:	f04f 0b00 	mov.w	fp, #0
				continue;
    c630:	e024      	b.n	c67c <cbvprintf_package+0x1c8>
				if (fmt[-1] == 'l') {
    c632:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    c636:	286c      	cmp	r0, #108	; 0x6c
    c638:	d134      	bne.n	c6a4 <cbvprintf_package+0x1f0>
					if (fmt[-2] == 'l') {
    c63a:	2000      	movs	r0, #0
    c63c:	f811 3c02 	ldrb.w	r3, [r1, #-2]
				parsing = false;
    c640:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    c642:	2b6c      	cmp	r3, #108	; 0x6c
    c644:	d1c4      	bne.n	c5d0 <cbvprintf_package+0x11c>
						align = VA_STACK_ALIGN(long long);
    c646:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    c64a:	4653      	mov	r3, sl
    c64c:	e7d3      	b.n	c5f6 <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
    c64e:	f108 0807 	add.w	r8, r8, #7
    c652:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    c656:	3407      	adds	r4, #7
    c658:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
    c65c:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
    c660:	b135      	cbz	r5, c670 <cbvprintf_package+0x1bc>
					if (BUF_OFFSET + size > len) {
    c662:	9806      	ldr	r0, [sp, #24]
    c664:	4420      	add	r0, r4
    c666:	42b0      	cmp	r0, r6
    c668:	f63f af3b 	bhi.w	c4e2 <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    c66c:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
    c670:	f04f 0b00 	mov.w	fp, #0
				buf += size;
    c674:	3408      	adds	r4, #8
			switch (*fmt) {
    c676:	f04f 0a08 	mov.w	sl, #8
    c67a:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    c67c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    c680:	2800      	cmp	r0, #0
    c682:	d078      	beq.n	c776 <cbvprintf_package+0x2c2>
			if (!parsing) {
    c684:	f1bb 0f00 	cmp.w	fp, #0
    c688:	f47f af6d 	bne.w	c566 <cbvprintf_package+0xb2>
				if (*fmt == '%') {
    c68c:	2825      	cmp	r0, #37	; 0x25
    c68e:	d1f5      	bne.n	c67c <cbvprintf_package+0x1c8>
					parsing = true;
    c690:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
    c694:	9b01      	ldr	r3, [sp, #4]
    c696:	3301      	adds	r3, #1
    c698:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
    c69a:	f04f 0a04 	mov.w	sl, #4
    c69e:	e7ec      	b.n	c67a <cbvprintf_package+0x1c6>
			switch (*fmt) {
    c6a0:	4658      	mov	r0, fp
    c6a2:	e793      	b.n	c5cc <cbvprintf_package+0x118>
    c6a4:	2000      	movs	r0, #0
				parsing = false;
    c6a6:	4683      	mov	fp, r0
    c6a8:	e7a5      	b.n	c5f6 <cbvprintf_package+0x142>
		} else if (size == sizeof(long long)) {
    c6aa:	2b08      	cmp	r3, #8
    c6ac:	d002      	beq.n	c6b4 <cbvprintf_package+0x200>
					return -EINVAL;
    c6ae:	f06f 0015 	mvn.w	r0, #21
    c6b2:	e718      	b.n	c4e6 <cbvprintf_package+0x32>
			long long v = va_arg(ap, long long);
    c6b4:	f108 0807 	add.w	r8, r8, #7
    c6b8:	f028 0807 	bic.w	r8, r8, #7
    c6bc:	ecb8 7b02 	vldmia	r8!, {d7}
					*(long long *)buf = v;
    c6c0:	ed84 7b00 	vstr	d7, [r4]
			buf += sizeof(long long);
    c6c4:	2308      	movs	r3, #8
    c6c6:	3408      	adds	r4, #8
    c6c8:	e7d8      	b.n	c67c <cbvprintf_package+0x1c8>
		if (is_str_arg) {
    c6ca:	b968      	cbnz	r0, c6e8 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
    c6cc:	2b04      	cmp	r3, #4
    c6ce:	d102      	bne.n	c6d6 <cbvprintf_package+0x222>
			int v = va_arg(ap, int);
    c6d0:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    c6d4:	e7a4      	b.n	c620 <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
    c6d6:	2b08      	cmp	r3, #8
    c6d8:	d1e9      	bne.n	c6ae <cbvprintf_package+0x1fa>
			long long v = va_arg(ap, long long);
    c6da:	f108 0807 	add.w	r8, r8, #7
    c6de:	f028 0807 	bic.w	r8, r8, #7
    c6e2:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    c6e6:	e7ed      	b.n	c6c4 <cbvprintf_package+0x210>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    c6e8:	9805      	ldr	r0, [sp, #20]
    c6ea:	3801      	subs	r0, #1
    c6ec:	9005      	str	r0, [sp, #20]
			s = va_arg(ap, char *);
    c6ee:	f858 0b04 	ldr.w	r0, [r8], #4
    c6f2:	9000      	str	r0, [sp, #0]
    c6f4:	e70d      	b.n	c512 <cbvprintf_package+0x5e>
			if (is_ro && !do_ro) {
    c6f6:	9a03      	ldr	r2, [sp, #12]
    c6f8:	0790      	lsls	r0, r2, #30
    c6fa:	d520      	bpl.n	c73e <cbvprintf_package+0x28a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    c6fc:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    c700:	eba4 0e05 	sub.w	lr, r4, r5
    c704:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c708:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    c70c:	d2cf      	bcs.n	c6ae <cbvprintf_package+0x1fa>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    c70e:	2f0f      	cmp	r7, #15
    c710:	d8cd      	bhi.n	c6ae <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
    c712:	b1f5      	cbz	r5, c752 <cbvprintf_package+0x29e>
					str_ptr_pos[s_idx] = s_ptr_idx;
    c714:	f107 0240 	add.w	r2, r7, #64	; 0x40
    c718:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    c71c:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    c71e:	b2c0      	uxtb	r0, r0
    c720:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    c724:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    c728:	f1bc 0f00 	cmp.w	ip, #0
    c72c:	f43f af17 	beq.w	c55e <cbvprintf_package+0xaa>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    c730:	f060 007f 	orn	r0, r0, #127	; 0x7f
    c734:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    c738:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    c73c:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    c73e:	f1c5 0208 	rsb	r2, r5, #8
			switch (*fmt) {
    c742:	f64f 7eda 	movw	lr, #65498	; 0xffda
			buf += sizeof(char *);
    c746:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    c748:	9206      	str	r2, [sp, #24]
    c74a:	e797      	b.n	c67c <cbvprintf_package+0x1c8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    c74c:	f04f 0c00 	mov.w	ip, #0
    c750:	e7da      	b.n	c708 <cbvprintf_package+0x254>
				} else if (is_ro) {
    c752:	f1bc 0f00 	cmp.w	ip, #0
    c756:	d001      	beq.n	c75c <cbvprintf_package+0x2a8>
					len += 1;
    c758:	3601      	adds	r6, #1
    c75a:	e7ef      	b.n	c73c <cbvprintf_package+0x288>
				} else if (rws_pos_en) {
    c75c:	9a02      	ldr	r2, [sp, #8]
					len += 2;
    c75e:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    c760:	2a00      	cmp	r2, #0
    c762:	d1eb      	bne.n	c73c <cbvprintf_package+0x288>
					len += strlen(s) + 1 + 1;
    c764:	9800      	ldr	r0, [sp, #0]
    c766:	e9cd 3106 	strd	r3, r1, [sp, #24]
    c76a:	f7fc fbe8 	bl	8f3e <strlen>
    c76e:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    c772:	4406      	add	r6, r0
    c774:	e7e2      	b.n	c73c <cbvprintf_package+0x288>
	if (BUF_OFFSET / sizeof(int) > 255) {
    c776:	1b63      	subs	r3, r4, r5
    c778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    c77c:	d297      	bcs.n	c6ae <cbvprintf_package+0x1fa>
	if (buf0 == NULL) {
    c77e:	b93d      	cbnz	r5, c790 <cbvprintf_package+0x2dc>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    c780:	f1a6 0408 	sub.w	r4, r6, #8
    c784:	18e0      	adds	r0, r4, r3
    c786:	e6ae      	b.n	c4e6 <cbvprintf_package+0x32>
    c788:	00022b98 	.word	0x00022b98
    c78c:	00027e1c 	.word	0x00027e1c
	if (rws_pos_en) {
    c790:	9a02      	ldr	r2, [sp, #8]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    c792:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
    c794:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    c796:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    c798:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    c79c:	b1c2      	cbz	r2, c7d0 <cbvprintf_package+0x31c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    c79e:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    c7a0:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    c7a4:	f1b9 0f00 	cmp.w	r9, #0
    c7a8:	d005      	beq.n	c7b6 <cbvprintf_package+0x302>
		for (i = 0; i < s_idx; i++) {
    c7aa:	2200      	movs	r2, #0
    c7ac:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
    c7ae:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    c7b2:	4297      	cmp	r7, r2
    c7b4:	d10e      	bne.n	c7d4 <cbvprintf_package+0x320>
			*buf++ = str_ptr_arg[i];
    c7b6:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    c7ba:	f1c5 0301 	rsb	r3, r5, #1
    c7be:	f10d 0820 	add.w	r8, sp, #32
    c7c2:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    c7c4:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    c7c8:	4557      	cmp	r7, sl
    c7ca:	d112      	bne.n	c7f2 <cbvprintf_package+0x33e>
	return BUF_OFFSET;
    c7cc:	1b60      	subs	r0, r4, r5
    c7ce:	e68a      	b.n	c4e6 <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    c7d0:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    c7d2:	e7e5      	b.n	c7a0 <cbvprintf_package+0x2ec>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    c7d4:	f810 3b01 	ldrb.w	r3, [r0], #1
    c7d8:	0619      	lsls	r1, r3, #24
    c7da:	d508      	bpl.n	c7ee <cbvprintf_package+0x33a>
			if (BUF_OFFSET + 1 > len) {
    c7dc:	eb04 0e0c 	add.w	lr, r4, ip
    c7e0:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    c7e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    c7e6:	f4ff ae7c 	bcc.w	c4e2 <cbvprintf_package+0x2e>
			*buf++ = pos;
    c7ea:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    c7ee:	3201      	adds	r2, #1
    c7f0:	e7df      	b.n	c7b2 <cbvprintf_package+0x2fe>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    c7f2:	f1b9 0f00 	cmp.w	r9, #0
    c7f6:	d003      	beq.n	c800 <cbvprintf_package+0x34c>
    c7f8:	f998 2000 	ldrsb.w	r2, [r8]
    c7fc:	2a00      	cmp	r2, #0
    c7fe:	db17      	blt.n	c830 <cbvprintf_package+0x37c>
		if (rws_pos_en) {
    c800:	9b02      	ldr	r3, [sp, #8]
    c802:	b1d3      	cbz	r3, c83a <cbvprintf_package+0x386>
			*buf++ = str_ptr_arg[i];
    c804:	f81a 200b 	ldrb.w	r2, [sl, fp]
    c808:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    c80c:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    c80e:	9b01      	ldr	r3, [sp, #4]
    c810:	1898      	adds	r0, r3, r2
    c812:	4420      	add	r0, r4
    c814:	4286      	cmp	r6, r0
    c816:	f4ff ae64 	bcc.w	c4e2 <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    c81a:	f898 0000 	ldrb.w	r0, [r8]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    c81e:	9900      	ldr	r1, [sp, #0]
    c820:	f804 0b01 	strb.w	r0, [r4], #1
    c824:	4620      	mov	r0, r4
    c826:	9203      	str	r2, [sp, #12]
    c828:	f015 fa26 	bl	21c78 <memcpy>
		buf += size;
    c82c:	9a03      	ldr	r2, [sp, #12]
    c82e:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    c830:	f10a 0a01 	add.w	sl, sl, #1
    c834:	f108 0801 	add.w	r8, r8, #1
    c838:	e7c6      	b.n	c7c8 <cbvprintf_package+0x314>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    c83a:	f898 2000 	ldrb.w	r2, [r8]
    c83e:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    c842:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    c844:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
    c846:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    c848:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    c84c:	f7fc fb77 	bl	8f3e <strlen>
    c850:	1c42      	adds	r2, r0, #1
    c852:	e7dc      	b.n	c80e <cbvprintf_package+0x35a>
		return -EFAULT;
    c854:	f06f 000d 	mvn.w	r0, #13
    c858:	e645      	b.n	c4e6 <cbvprintf_package+0x32>
    c85a:	bf00      	nop

0000c85c <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    c85c:	2803      	cmp	r0, #3
{
    c85e:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    c860:	d906      	bls.n	c870 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
    c862:	f012 fa1d 	bl	1eca0 <__errno>
    c866:	2309      	movs	r3, #9
    c868:	6003      	str	r3, [r0, #0]
		return -1;
    c86a:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
    c86e:	bd08      	pop	{r3, pc}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c870:	4b04      	ldr	r3, [pc, #16]	; (c884 <_check_fd+0x28>)
    c872:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    c876:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_get(&fdtable[fd].refcount)) {
    c87a:	2b00      	cmp	r3, #0
    c87c:	d0f1      	beq.n	c862 <_check_fd+0x6>
	return 0;
    c87e:	2000      	movs	r0, #0
    c880:	e7f5      	b.n	c86e <_check_fd+0x12>
    c882:	bf00      	nop
    c884:	2000db6c 	.word	0x2000db6c

0000c888 <z_get_fd_obj_and_vtable>:
	return entry->obj;
}

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
    c888:	b570      	push	{r4, r5, r6, lr}
    c88a:	4604      	mov	r4, r0
    c88c:	460e      	mov	r6, r1
    c88e:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
    c890:	f7ff ffe4 	bl	c85c <_check_fd>
    c894:	2800      	cmp	r0, #0
    c896:	db0c      	blt.n	c8b2 <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
    c898:	4b07      	ldr	r3, [pc, #28]	; (c8b8 <z_get_fd_obj_and_vtable+0x30>)
    c89a:	0161      	lsls	r1, r4, #5
    c89c:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    c8a0:	6862      	ldr	r2, [r4, #4]
    c8a2:	6032      	str	r2, [r6, #0]

	if (lock) {
    c8a4:	b11d      	cbz	r5, c8ae <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
    c8a6:	f101 020c 	add.w	r2, r1, #12
    c8aa:	441a      	add	r2, r3
    c8ac:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
    c8ae:	5858      	ldr	r0, [r3, r1]
}
    c8b0:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    c8b2:	2000      	movs	r0, #0
    c8b4:	e7fc      	b.n	c8b0 <z_get_fd_obj_and_vtable+0x28>
    c8b6:	bf00      	nop
    c8b8:	2000db64 	.word	0x2000db64

0000c8bc <z_reserve_fd>:

int z_reserve_fd(void)
{
    c8bc:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    c8be:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
    c8c0:	f04f 33ff 	mov.w	r3, #4294967295
    c8c4:	f04f 32ff 	mov.w	r2, #4294967295
    c8c8:	4814      	ldr	r0, [pc, #80]	; (c91c <z_reserve_fd+0x60>)
    c8ca:	f00d fed9 	bl	1a680 <z_impl_k_mutex_lock>
    c8ce:	4b14      	ldr	r3, [pc, #80]	; (c920 <z_reserve_fd+0x64>)
    c8d0:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
    c8d4:	b17a      	cbz	r2, c8f6 <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    c8d6:	3401      	adds	r4, #1
    c8d8:	2c04      	cmp	r4, #4
    c8da:	f103 0320 	add.w	r3, r3, #32
    c8de:	d1f7      	bne.n	c8d0 <z_reserve_fd+0x14>
	errno = ENFILE;
    c8e0:	f012 f9de 	bl	1eca0 <__errno>
    c8e4:	2317      	movs	r3, #23
	return -1;
    c8e6:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
    c8ea:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    c8ec:	480b      	ldr	r0, [pc, #44]	; (c91c <z_reserve_fd+0x60>)
    c8ee:	f00d ff41 	bl	1a774 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
    c8f2:	4620      	mov	r0, r4
    c8f4:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    c8f6:	e8d3 0fef 	ldaex	r0, [r3]
    c8fa:	3001      	adds	r0, #1
    c8fc:	e8c3 0fe1 	stlex	r1, r0, [r3]
    c900:	2900      	cmp	r1, #0
    c902:	d1f8      	bne.n	c8f6 <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
    c904:	4807      	ldr	r0, [pc, #28]	; (c924 <z_reserve_fd+0x68>)
    c906:	0163      	lsls	r3, r4, #5
    c908:	eb00 1144 	add.w	r1, r0, r4, lsl #5
    c90c:	50c2      	str	r2, [r0, r3]
		fdtable[fd].vtable = NULL;
    c90e:	604a      	str	r2, [r1, #4]
		k_mutex_init(&fdtable[fd].lock);
    c910:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
    c912:	4418      	add	r0, r3
    c914:	f014 fdaa 	bl	2146c <z_impl_k_mutex_init>
    c918:	e7e8      	b.n	c8ec <z_reserve_fd+0x30>
    c91a:	bf00      	nop
    c91c:	2000c9e0 	.word	0x2000c9e0
    c920:	2000db6c 	.word	0x2000db6c
    c924:	2000db64 	.word	0x2000db64

0000c928 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
    c928:	b410      	push	{r4}
    c92a:	4604      	mov	r4, r0
    c92c:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
    c92e:	4b0a      	ldr	r3, [pc, #40]	; (c958 <z_finalize_fd+0x30>)
    c930:	0162      	lsls	r2, r4, #5
    c932:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    c936:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
    c938:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
    c93a:	b148      	cbz	r0, c950 <z_finalize_fd+0x28>
    c93c:	68c4      	ldr	r4, [r0, #12]
    c93e:	b13c      	cbz	r4, c950 <z_finalize_fd+0x28>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
    c940:	320c      	adds	r2, #12
    c942:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
    c944:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
    c948:	f240 1205 	movw	r2, #261	; 0x105
    c94c:	f011 bb52 	b.w	1dff4 <z_fdtable_call_ioctl.constprop.0>
}
    c950:	f85d 4b04 	ldr.w	r4, [sp], #4
    c954:	4770      	bx	lr
    c956:	bf00      	nop
    c958:	2000db64 	.word	0x2000db64

0000c95c <z_free_fd>:

void z_free_fd(int fd)
{
    c95c:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
    c95e:	490d      	ldr	r1, [pc, #52]	; (c994 <z_free_fd+0x38>)
    c960:	0140      	lsls	r0, r0, #5
    c962:	f100 0308 	add.w	r3, r0, #8
    c966:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c968:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
    c96c:	b182      	cbz	r2, c990 <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
    c96e:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c970:	e8d3 5fef 	ldaex	r5, [r3]
    c974:	4295      	cmp	r5, r2
    c976:	d104      	bne.n	c982 <z_free_fd+0x26>
    c978:	e8c3 4fec 	stlex	ip, r4, [r3]
    c97c:	f1bc 0f00 	cmp.w	ip, #0
    c980:	d1f6      	bne.n	c970 <z_free_fd+0x14>
    c982:	d1f1      	bne.n	c968 <z_free_fd+0xc>
	if (old_rc != 1) {
    c984:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
    c986:	bf01      	itttt	eq
    c988:	2300      	moveq	r3, #0
    c98a:	180a      	addeq	r2, r1, r0
    c98c:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
    c98e:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
    c990:	bd30      	pop	{r4, r5, pc}
    c992:	bf00      	nop
    c994:	2000db64 	.word	0x2000db64

0000c998 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    c998:	4b01      	ldr	r3, [pc, #4]	; (c9a0 <__printk_hook_install+0x8>)
    c99a:	6018      	str	r0, [r3, #0]
}
    c99c:	4770      	bx	lr
    c99e:	bf00      	nop
    c9a0:	2000c5d8 	.word	0x2000c5d8

0000c9a4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    c9a4:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    c9a6:	2500      	movs	r5, #0
{
    c9a8:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    c9aa:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    c9ae:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    c9b0:	9500      	str	r5, [sp, #0]
    c9b2:	a903      	add	r1, sp, #12
    c9b4:	4805      	ldr	r0, [pc, #20]	; (c9cc <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    c9b6:	9505      	str	r5, [sp, #20]
    c9b8:	f7fc faca 	bl	8f50 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    c9bc:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    c9c0:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    c9c2:	bfb8      	it	lt
    c9c4:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    c9c6:	b007      	add	sp, #28
    c9c8:	bd30      	pop	{r4, r5, pc}
    c9ca:	bf00      	nop
    c9cc:	0001e0b7 	.word	0x0001e0b7

0000c9d0 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
    c9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
    c9d4:	f240 736c 	movw	r3, #1900	; 0x76c
    c9d8:	6944      	ldr	r4, [r0, #20]
	unsigned int m = tm->tm_mon + 1;
    c9da:	6905      	ldr	r5, [r0, #16]
	int64_t y = 1900 + (int64_t)tm->tm_year;
    c9dc:	17e1      	asrs	r1, r4, #31
	unsigned int m = tm->tm_mon + 1;
    c9de:	3501      	adds	r5, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
    c9e0:	18e4      	adds	r4, r4, r3
    c9e2:	f141 0100 	adc.w	r1, r1, #0
	y -= m <= 2;
    c9e6:	2d02      	cmp	r5, #2
    c9e8:	bf8c      	ite	hi
    c9ea:	2300      	movhi	r3, #0
    c9ec:	2301      	movls	r3, #1
    c9ee:	1ae4      	subs	r4, r4, r3
	unsigned int d = tm->tm_mday - 1;
    c9f0:	68c7      	ldr	r7, [r0, #12]
	y -= m <= 2;
    c9f2:	f161 0100 	sbc.w	r1, r1, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
    c9f6:	2900      	cmp	r1, #0
{
    c9f8:	4606      	mov	r6, r0
	unsigned int d = tm->tm_mday - 1;
    c9fa:	f107 37ff 	add.w	r7, r7, #4294967295
	int64_t era = (y >= 0 ? y : y - 399) / 400;
    c9fe:	da4e      	bge.n	ca9e <timeutil_timegm64+0xce>
    ca00:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
    ca04:	f44f 72c8 	mov.w	r2, #400	; 0x190
    ca08:	2300      	movs	r3, #0
    ca0a:	1820      	adds	r0, r4, r0
    ca0c:	f161 0100 	sbc.w	r1, r1, #0
    ca10:	f7fc f89e 	bl	8b50 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
    ca14:	4b24      	ldr	r3, [pc, #144]	; (caa8 <timeutil_timegm64+0xd8>)
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
    ca16:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
	unsigned int yoe = y - era * 400;
    ca1a:	fb03 4400 	mla	r4, r3, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
    ca1e:	e9d6 8300 	ldrd	r8, r3, [r6]
    ca22:	ea4f 7ce3 	mov.w	ip, r3, asr #31
    ca26:	4699      	mov	r9, r3
    ca28:	4663      	mov	r3, ip
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    ca2a:	2d02      	cmp	r5, #2
	int64_t era = (y >= 0 ? y : y - 399) / 400;
    ca2c:	4602      	mov	r2, r0
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    ca2e:	bf8c      	ite	hi
    ca30:	f06f 0002 	mvnhi.w	r0, #2
    ca34:	2009      	movls	r0, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
    ca36:	68b6      	ldr	r6, [r6, #8]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    ca38:	4405      	add	r5, r0
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
    ca3a:	fbc6 930e 	smlal	r9, r3, r6, lr
    ca3e:	fba9 c60e 	umull	ip, r6, r9, lr
    ca42:	fb0e 6603 	mla	r6, lr, r3, r6
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    ca46:	f240 1e6d 	movw	lr, #365	; 0x16d
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    ca4a:	2099      	movs	r0, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    ca4c:	08a3      	lsrs	r3, r4, #2
    ca4e:	fb0e 3304 	mla	r3, lr, r4, r3
    ca52:	443b      	add	r3, r7
    ca54:	2764      	movs	r7, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    ca56:	4345      	muls	r5, r0
    ca58:	2005      	movs	r0, #5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    ca5a:	fbb4 f4f7 	udiv	r4, r4, r7
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    ca5e:	3502      	adds	r5, #2
    ca60:	fbb5 f5f0 	udiv	r5, r5, r0
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    ca64:	1b1b      	subs	r3, r3, r4
	return era * 146097 + (time_t)doe - 719468;
    ca66:	4c11      	ldr	r4, [pc, #68]	; (caac <timeutil_timegm64+0xdc>)
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
    ca68:	eb1c 0c08 	adds.w	ip, ip, r8
	return era * 146097 + (time_t)doe - 719468;
    ca6c:	fba2 2004 	umull	r2, r0, r2, r4
    ca70:	fb04 0101 	mla	r1, r4, r1, r0
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    ca74:	442b      	add	r3, r5
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
    ca76:	eb46 76e8 	adc.w	r6, r6, r8, asr #31
	return era * 146097 + (time_t)doe - 719468;
    ca7a:	1898      	adds	r0, r3, r2
    ca7c:	4a0c      	ldr	r2, [pc, #48]	; (cab0 <timeutil_timegm64+0xe0>)
    ca7e:	f141 0300 	adc.w	r3, r1, #0
    ca82:	1880      	adds	r0, r0, r2
	time += 86400LL * ndays;
    ca84:	4a0b      	ldr	r2, [pc, #44]	; (cab4 <timeutil_timegm64+0xe4>)
	return era * 146097 + (time_t)doe - 719468;
    ca86:	f163 0300 	sbc.w	r3, r3, #0
	time += 86400LL * ndays;
    ca8a:	fba0 0102 	umull	r0, r1, r0, r2
    ca8e:	fb02 1103 	mla	r1, r2, r3, r1
    ca92:	eb10 000c 	adds.w	r0, r0, ip

	return time;
}
    ca96:	eb41 0106 	adc.w	r1, r1, r6
    ca9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
    ca9e:	f44f 72c8 	mov.w	r2, #400	; 0x190
    caa2:	2300      	movs	r3, #0
    caa4:	4620      	mov	r0, r4
    caa6:	e7b3      	b.n	ca10 <timeutil_timegm64+0x40>
    caa8:	fffffe70 	.word	0xfffffe70
    caac:	00023ab1 	.word	0x00023ab1
    cab0:	fff50594 	.word	0xfff50594
    cab4:	00015180 	.word	0x00015180

0000cab8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    cab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cabc:	8b05      	ldrh	r5, [r0, #24]
{
    cabe:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    cac0:	0728      	lsls	r0, r5, #28
{
    cac2:	4690      	mov	r8, r2
	if (processing) {
    cac4:	d411      	bmi.n	caea <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    cac6:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cac8:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    cacc:	f040 80cd 	bne.w	cc6a <process_event+0x1b2>
			evt = process_recheck(mgr);
    cad0:	4620      	mov	r0, r4
    cad2:	f011 fcf1 	bl	1e4b8 <process_recheck>
		}

		if (evt == EVT_NOP) {
    cad6:	b178      	cbz	r0, caf8 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    cad8:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cada:	8b21      	ldrh	r1, [r4, #24]
    cadc:	2804      	cmp	r0, #4
    cade:	d811      	bhi.n	cb04 <process_event+0x4c>
    cae0:	e8df f000 	tbb	[pc, r0]
    cae4:	856d10c3 	.word	0x856d10c3
    cae8:	95          	.byte	0x95
    cae9:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    caea:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    caec:	bf0c      	ite	eq
    caee:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    caf2:	f045 0520 	orrne.w	r5, r5, #32
    caf6:	8325      	strh	r5, [r4, #24]
    caf8:	f388 8811 	msr	BASEPRI, r8
    cafc:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    cb00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cb04:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    cb08:	45aa      	cmp	sl, r5
    cb0a:	f000 80a6 	beq.w	cc5a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    cb0e:	2700      	movs	r7, #0
    cb10:	46b9      	mov	r9, r7
    cb12:	463e      	mov	r6, r7
    cb14:	68a3      	ldr	r3, [r4, #8]
    cb16:	2b00      	cmp	r3, #0
    cb18:	f000 80bd 	beq.w	cc96 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    cb1c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    cb20:	8321      	strh	r1, [r4, #24]
    cb22:	f388 8811 	msr	BASEPRI, r8
    cb26:	f3bf 8f6f 	isb	sy
	return list->head;
    cb2a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    cb2c:	2900      	cmp	r1, #0
    cb2e:	f000 80bb 	beq.w	cca8 <process_event+0x1f0>
	return node->next;
    cb32:	680d      	ldr	r5, [r1, #0]
    cb34:	2900      	cmp	r1, #0
    cb36:	f000 80b7 	beq.w	cca8 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    cb3a:	4633      	mov	r3, r6
    cb3c:	4652      	mov	r2, sl
    cb3e:	4620      	mov	r0, r4
    cb40:	f8d1 8004 	ldr.w	r8, [r1, #4]
    cb44:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    cb46:	2d00      	cmp	r5, #0
    cb48:	d076      	beq.n	cc38 <process_event+0x180>
    cb4a:	682b      	ldr	r3, [r5, #0]
    cb4c:	4629      	mov	r1, r5
    cb4e:	461d      	mov	r5, r3
    cb50:	e7f0      	b.n	cb34 <process_event+0x7c>
    cb52:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    cb56:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    cb58:	2a01      	cmp	r2, #1
    cb5a:	d81b      	bhi.n	cb94 <process_event+0xdc>
	list->head = NULL;
    cb5c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cb5e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    cb62:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    cb64:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cb66:	b289      	uxth	r1, r1
	list->tail = NULL;
    cb68:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    cb6c:	d109      	bne.n	cb82 <process_event+0xca>
    cb6e:	463b      	mov	r3, r7
    cb70:	e003      	b.n	cb7a <process_event+0xc2>
				mgr->refs += 1U;
    cb72:	8b62      	ldrh	r2, [r4, #26]
    cb74:	3201      	adds	r2, #1
    cb76:	8362      	strh	r2, [r4, #26]
	return node->next;
    cb78:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    cb7a:	2b00      	cmp	r3, #0
    cb7c:	d1f9      	bne.n	cb72 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cb7e:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    cb82:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    cb84:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    cb86:	f011 fc97 	bl	1e4b8 <process_recheck>
    cb8a:	2800      	cmp	r0, #0
    cb8c:	d07b      	beq.n	cc86 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cb8e:	f041 0120 	orr.w	r1, r1, #32
    cb92:	e077      	b.n	cc84 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    cb94:	2b04      	cmp	r3, #4
    cb96:	d10a      	bne.n	cbae <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cb98:	f021 0107 	bic.w	r1, r1, #7
    cb9c:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    cb9e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    cba0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    cba2:	f011 fc89 	bl	1e4b8 <process_recheck>
    cba6:	b110      	cbz	r0, cbae <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cba8:	f041 0120 	orr.w	r1, r1, #32
    cbac:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cbae:	8b21      	ldrh	r1, [r4, #24]
    cbb0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    cbb4:	45aa      	cmp	sl, r5
    cbb6:	d050      	beq.n	cc5a <process_event+0x1a2>
    cbb8:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    cbba:	46b9      	mov	r9, r7
    cbbc:	e7aa      	b.n	cb14 <process_event+0x5c>
			transit = mgr->transitions->start;
    cbbe:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cbc0:	f021 0107 	bic.w	r1, r1, #7
    cbc4:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    cbc8:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    cbca:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    cbce:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    cbd0:	d12d      	bne.n	cc2e <process_event+0x176>
		    || (transit != NULL)) {
    cbd2:	f1b9 0f00 	cmp.w	r9, #0
    cbd6:	d040      	beq.n	cc5a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    cbd8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    cbdc:	8321      	strh	r1, [r4, #24]
    cbde:	f388 8811 	msr	BASEPRI, r8
    cbe2:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    cbe6:	4620      	mov	r0, r4
    cbe8:	4939      	ldr	r1, [pc, #228]	; (ccd0 <process_event+0x218>)
    cbea:	47c8      	blx	r9
    cbec:	e029      	b.n	cc42 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cbee:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    cbf2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cbf4:	f041 0104 	orr.w	r1, r1, #4
    cbf8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    cbfa:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    cbfc:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    cc00:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    cc02:	d0e6      	beq.n	cbd2 <process_event+0x11a>
    cc04:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cc06:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    cc0a:	463e      	mov	r6, r7
    cc0c:	e782      	b.n	cb14 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cc0e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    cc12:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cc14:	f041 0105 	orr.w	r1, r1, #5
    cc18:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    cc1a:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    cc1c:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    cc20:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    cc22:	d0d6      	beq.n	cbd2 <process_event+0x11a>
    cc24:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cc26:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    cc2a:	463e      	mov	r6, r7
    cc2c:	e772      	b.n	cb14 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    cc2e:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cc30:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    cc34:	463e      	mov	r6, r7
    cc36:	e76d      	b.n	cb14 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    cc38:	462b      	mov	r3, r5
    cc3a:	e787      	b.n	cb4c <process_event+0x94>
			if (transit != NULL) {
    cc3c:	f1b9 0f00 	cmp.w	r9, #0
    cc40:	d1d1      	bne.n	cbe6 <process_event+0x12e>
	__asm__ volatile(
    cc42:	f04f 0320 	mov.w	r3, #32
    cc46:	f3ef 8811 	mrs	r8, BASEPRI
    cc4a:	f383 8812 	msr	BASEPRI_MAX, r3
    cc4e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    cc52:	8b23      	ldrh	r3, [r4, #24]
    cc54:	f023 0308 	bic.w	r3, r3, #8
    cc58:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    cc5a:	8b25      	ldrh	r5, [r4, #24]
    cc5c:	06ea      	lsls	r2, r5, #27
    cc5e:	d52e      	bpl.n	ccbe <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    cc60:	f025 0310 	bic.w	r3, r5, #16
    cc64:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    cc66:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    cc6a:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cc6c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    cc6e:	2e00      	cmp	r6, #0
    cc70:	f6bf af6f 	bge.w	cb52 <process_event+0x9a>
	list->head = NULL;
    cc74:	2300      	movs	r3, #0
		*clients = mgr->clients;
    cc76:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    cc78:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cc7c:	f021 0107 	bic.w	r1, r1, #7
    cc80:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cc84:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cc86:	8b21      	ldrh	r1, [r4, #24]
    cc88:	f04f 0900 	mov.w	r9, #0
    cc8c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    cc90:	45aa      	cmp	sl, r5
    cc92:	f47f af3f 	bne.w	cb14 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    cc96:	2f00      	cmp	r7, #0
    cc98:	d09b      	beq.n	cbd2 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    cc9a:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    cc9e:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    cca0:	f388 8811 	msr	BASEPRI, r8
    cca4:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    cca8:	2f00      	cmp	r7, #0
    ccaa:	d0c7      	beq.n	cc3c <process_event+0x184>
	return node->next;
    ccac:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    ccae:	4639      	mov	r1, r7
    ccb0:	4633      	mov	r3, r6
    ccb2:	4652      	mov	r2, sl
    ccb4:	4620      	mov	r0, r4
    ccb6:	f011 fc2b 	bl	1e510 <notify_one>
	list->head = node;
    ccba:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    ccbc:	e7f4      	b.n	cca8 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    ccbe:	06ab      	lsls	r3, r5, #26
    ccc0:	f57f af1a 	bpl.w	caf8 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    ccc4:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    ccc8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    ccca:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    ccce:	e6ff      	b.n	cad0 <process_event+0x18>
    ccd0:	0001e53d 	.word	0x0001e53d

0000ccd4 <extract_decimal>:
{
    ccd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ccd6:	4602      	mov	r2, r0
    ccd8:	6801      	ldr	r1, [r0, #0]
		val = 10U * val + *sp++ - '0';
    ccda:	270a      	movs	r7, #10
	size_t val = 0;
    ccdc:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp) != 0) {
    ccde:	4e07      	ldr	r6, [pc, #28]	; (ccfc <extract_decimal+0x28>)
    cce0:	460b      	mov	r3, r1
    cce2:	781c      	ldrb	r4, [r3, #0]
    cce4:	3101      	adds	r1, #1
    cce6:	5d35      	ldrb	r5, [r6, r4]
    cce8:	076d      	lsls	r5, r5, #29
    ccea:	d401      	bmi.n	ccf0 <extract_decimal+0x1c>
	*str = sp;
    ccec:	6013      	str	r3, [r2, #0]
}
    ccee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    ccf0:	fb07 4300 	mla	r3, r7, r0, r4
    ccf4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    ccf8:	e7f2      	b.n	cce0 <extract_decimal+0xc>
    ccfa:	bf00      	nop
    ccfc:	00027ac8 	.word	0x00027ac8

0000cd00 <encode_uint>:
{
    cd00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd04:	4615      	mov	r5, r2
    cd06:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    cd08:	78d3      	ldrb	r3, [r2, #3]
    cd0a:	4a22      	ldr	r2, [pc, #136]	; (cd94 <encode_uint+0x94>)
	switch (specifier) {
    cd0c:	2b6f      	cmp	r3, #111	; 0x6f
    cd0e:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    cd12:	4680      	mov	r8, r0
    cd14:	460f      	mov	r7, r1
    cd16:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    cd1a:	d029      	beq.n	cd70 <encode_uint+0x70>
    cd1c:	d824      	bhi.n	cd68 <encode_uint+0x68>
		return 10;
    cd1e:	2b58      	cmp	r3, #88	; 0x58
    cd20:	bf0c      	ite	eq
    cd22:	2610      	moveq	r6, #16
    cd24:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    cd26:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    cd2a:	4632      	mov	r2, r6
    cd2c:	2300      	movs	r3, #0
    cd2e:	4640      	mov	r0, r8
    cd30:	4639      	mov	r1, r7
    cd32:	f7fb ff5d 	bl	8bf0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    cd36:	2a09      	cmp	r2, #9
    cd38:	b2d4      	uxtb	r4, r2
    cd3a:	d81e      	bhi.n	cd7a <encode_uint+0x7a>
    cd3c:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    cd3e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    cd40:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    cd42:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    cd46:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    cd4a:	d301      	bcc.n	cd50 <encode_uint+0x50>
    cd4c:	45d1      	cmp	r9, sl
    cd4e:	d811      	bhi.n	cd74 <encode_uint+0x74>
	if (conv->flag_hash) {
    cd50:	782b      	ldrb	r3, [r5, #0]
    cd52:	069b      	lsls	r3, r3, #26
    cd54:	d505      	bpl.n	cd62 <encode_uint+0x62>
		if (radix == 8) {
    cd56:	2e08      	cmp	r6, #8
    cd58:	d115      	bne.n	cd86 <encode_uint+0x86>
			conv->altform_0 = true;
    cd5a:	78ab      	ldrb	r3, [r5, #2]
    cd5c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    cd60:	70ab      	strb	r3, [r5, #2]
}
    cd62:	4648      	mov	r0, r9
    cd64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    cd68:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    cd6c:	2b70      	cmp	r3, #112	; 0x70
    cd6e:	e7d7      	b.n	cd20 <encode_uint+0x20>
	switch (specifier) {
    cd70:	2608      	movs	r6, #8
    cd72:	e7d8      	b.n	cd26 <encode_uint+0x26>
		value /= radix;
    cd74:	4680      	mov	r8, r0
    cd76:	460f      	mov	r7, r1
    cd78:	e7d7      	b.n	cd2a <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    cd7a:	f1bb 0f01 	cmp.w	fp, #1
    cd7e:	bf0c      	ite	eq
    cd80:	3437      	addeq	r4, #55	; 0x37
    cd82:	3457      	addne	r4, #87	; 0x57
    cd84:	e7db      	b.n	cd3e <encode_uint+0x3e>
		} else if (radix == 16) {
    cd86:	2e10      	cmp	r6, #16
    cd88:	d1eb      	bne.n	cd62 <encode_uint+0x62>
			conv->altform_0c = true;
    cd8a:	78ab      	ldrb	r3, [r5, #2]
    cd8c:	f043 0310 	orr.w	r3, r3, #16
    cd90:	e7e6      	b.n	cd60 <encode_uint+0x60>
    cd92:	bf00      	nop
    cd94:	00027ac8 	.word	0x00027ac8

0000cd98 <nordicsemi_nrf91_init>:
	__asm__ volatile(
    cd98:	f04f 0220 	mov.w	r2, #32
    cd9c:	f3ef 8311 	mrs	r3, BASEPRI
    cda0:	f382 8812 	msr	BASEPRI_MAX, r2
    cda4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    cda8:	2101      	movs	r1, #1
    cdaa:	4a04      	ldr	r2, [pc, #16]	; (cdbc <nordicsemi_nrf91_init+0x24>)
    cdac:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    cdb0:	f383 8811 	msr	BASEPRI, r3
    cdb4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    cdb8:	2000      	movs	r0, #0
    cdba:	4770      	bx	lr
    cdbc:	40039000 	.word	0x40039000

0000cdc0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    cdc0:	b120      	cbz	r0, cdcc <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    cdc2:	4b03      	ldr	r3, [pc, #12]	; (cdd0 <arch_busy_wait+0x10>)
    cdc4:	0180      	lsls	r0, r0, #6
    cdc6:	f043 0301 	orr.w	r3, r3, #1
    cdca:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    cdcc:	4770      	bx	lr
    cdce:	bf00      	nop
    cdd0:	000230d0 	.word	0x000230d0

0000cdd4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    cdd4:	f00a b9d6 	b.w	17184 <SystemInit>

0000cdd8 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
    cdd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cddc:	4681      	mov	r9, r0
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);

	if (atomic_inc(&initialized) != 0) {
    cdde:	482f      	ldr	r0, [pc, #188]	; (ce9c <z_log_init.isra.0+0xc4>)
static uint32_t z_log_init(bool blocking, bool can_sleep)
    cde0:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    cde2:	f011 fcaf 	bl	1e744 <atomic_inc>
    cde6:	4606      	mov	r6, r0
    cde8:	b970      	cbnz	r0, ce08 <z_log_init.isra.0+0x30>
		z_log_links_initiate();
	}


	/* Assign ids to backends. */
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    cdea:	4c2d      	ldr	r4, [pc, #180]	; (cea0 <z_log_init.isra.0+0xc8>)
	uint32_t mask = 0;
    cdec:	4605      	mov	r5, r0
    cdee:	46a0      	mov	r8, r4
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
    cdf0:	f04f 0b01 	mov.w	fp, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    cdf4:	f8df a0ac 	ldr.w	sl, [pc, #172]	; cea4 <z_log_init.isra.0+0xcc>
    cdf8:	4554      	cmp	r4, sl
    cdfa:	d307      	bcc.n	ce0c <z_log_init.isra.0+0x34>
			i++;
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
    cdfc:	f1b9 0f00 	cmp.w	r9, #0
    ce00:	d002      	beq.n	ce08 <z_log_init.isra.0+0x30>
		mask_cpy &= ~BIT(i);
    ce02:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
    ce06:	b9e5      	cbnz	r5, ce42 <z_log_init.isra.0+0x6a>
			}
		}
	}

	return mask;
}
    ce08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (backend->autostart) {
    ce0c:	7b23      	ldrb	r3, [r4, #12]
    ce0e:	b173      	cbz	r3, ce2e <z_log_init.isra.0+0x56>
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_init(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->init) {
    ce10:	6823      	ldr	r3, [r4, #0]
    ce12:	68db      	ldr	r3, [r3, #12]
    ce14:	b10b      	cbz	r3, ce1a <z_log_init.isra.0+0x42>
		backend->api->init(backend);
    ce16:	4620      	mov	r0, r4
    ce18:	4798      	blx	r3
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    ce1a:	6823      	ldr	r3, [r4, #0]
    ce1c:	691b      	ldr	r3, [r3, #16]
    ce1e:	b943      	cbnz	r3, ce32 <z_log_init.isra.0+0x5a>
				log_backend_enable(backend,
    ce20:	6863      	ldr	r3, [r4, #4]
    ce22:	2204      	movs	r2, #4
    ce24:	4620      	mov	r0, r4
    ce26:	6819      	ldr	r1, [r3, #0]
    ce28:	f000 f8c4 	bl	cfb4 <log_backend_enable>
			i++;
    ce2c:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    ce2e:	3410      	adds	r4, #16
    ce30:	e7e2      	b.n	cdf8 <z_log_init.isra.0+0x20>
		return backend->api->is_ready(backend);
    ce32:	4620      	mov	r0, r4
    ce34:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    ce36:	2800      	cmp	r0, #0
    ce38:	d0f2      	beq.n	ce20 <z_log_init.isra.0+0x48>
				mask |= BIT(i);
    ce3a:	fa0b f306 	lsl.w	r3, fp, r6
    ce3e:	431d      	orrs	r5, r3
    ce40:	e7f4      	b.n	ce2c <z_log_init.isra.0+0x54>
    ce42:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
    ce44:	fa95 f4a5 	rbit	r4, r5
    ce48:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
    ce4c:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    ce50:	0126      	lsls	r6, r4, #4
    ce52:	eb08 1404 	add.w	r4, r8, r4, lsl #4
		mask_cpy &= ~BIT(i);
    ce56:	ea6f 0b03 	mvn.w	fp, r3
    ce5a:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    ce5e:	7b23      	ldrb	r3, [r4, #12]
    ce60:	b163      	cbz	r3, ce7c <z_log_init.isra.0+0xa4>
	if (backend->api->is_ready != NULL) {
    ce62:	f858 3006 	ldr.w	r3, [r8, r6]
    ce66:	691b      	ldr	r3, [r3, #16]
    ce68:	b993      	cbnz	r3, ce90 <z_log_init.isra.0+0xb8>
					   backend->cb->ctx,
    ce6a:	4446      	add	r6, r8
			log_backend_enable(backend,
    ce6c:	6873      	ldr	r3, [r6, #4]
    ce6e:	2204      	movs	r2, #4
    ce70:	4620      	mov	r0, r4
    ce72:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    ce74:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
    ce78:	f000 f89c 	bl	cfb4 <log_backend_enable>
	while (mask_cpy) {
    ce7c:	2d00      	cmp	r5, #0
    ce7e:	d1e1      	bne.n	ce44 <z_log_init.isra.0+0x6c>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    ce80:	b127      	cbz	r7, ce8c <z_log_init.isra.0+0xb4>
	return z_impl_k_sleep(timeout);
    ce82:	f44f 70a4 	mov.w	r0, #328	; 0x148
    ce86:	2100      	movs	r1, #0
    ce88:	f00e f8c0 	bl	1b00c <z_impl_k_sleep>
    ce8c:	464d      	mov	r5, r9
    ce8e:	e7ba      	b.n	ce06 <z_log_init.isra.0+0x2e>
		return backend->api->is_ready(backend);
    ce90:	4620      	mov	r0, r4
    ce92:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    ce94:	2800      	cmp	r0, #0
    ce96:	d1f1      	bne.n	ce7c <z_log_init.isra.0+0xa4>
    ce98:	e7e7      	b.n	ce6a <z_log_init.isra.0+0x92>
    ce9a:	bf00      	nop
    ce9c:	2000dbec 	.word	0x2000dbec
    cea0:	00023064 	.word	0x00023064
    cea4:	00023074 	.word	0x00023074

0000cea8 <log_format_func_t_get>:
}
    cea8:	4b01      	ldr	r3, [pc, #4]	; (ceb0 <log_format_func_t_get+0x8>)
    ceaa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    ceae:	4770      	bx	lr
    ceb0:	000231f0 	.word	0x000231f0

0000ceb4 <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
    ceb4:	b508      	push	{r3, lr}
    ceb6:	4603      	mov	r3, r0
    ceb8:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    ceba:	b12b      	cbz	r3, cec8 <log_set_timestamp_func+0x14>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
    cebc:	4a04      	ldr	r2, [pc, #16]	; (ced0 <log_set_timestamp_func+0x1c>)
    cebe:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
    cec0:	f000 fa7c 	bl	d3bc <log_output_timestamp_freq_set>
	}

	return 0;
    cec4:	2000      	movs	r0, #0
}
    cec6:	bd08      	pop	{r3, pc}
		return -EINVAL;
    cec8:	f06f 0015 	mvn.w	r0, #21
    cecc:	e7fb      	b.n	cec6 <log_set_timestamp_func+0x12>
    cece:	bf00      	nop
    ced0:	2000c5dc 	.word	0x2000c5dc

0000ced4 <log_core_init>:
	panic_mode = false;
    ced4:	2300      	movs	r3, #0
    ced6:	4a05      	ldr	r2, [pc, #20]	; (ceec <log_core_init+0x18>)
		log_set_timestamp_func(default_get_timestamp,
    ced8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    cedc:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    cede:	4a04      	ldr	r2, [pc, #16]	; (cef0 <log_core_init+0x1c>)
		log_set_timestamp_func(default_get_timestamp,
    cee0:	4804      	ldr	r0, [pc, #16]	; (cef4 <log_core_init+0x20>)
	dropped_cnt = 0;
    cee2:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    cee4:	4a04      	ldr	r2, [pc, #16]	; (cef8 <log_core_init+0x24>)
    cee6:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    cee8:	f7ff bfe4 	b.w	ceb4 <log_set_timestamp_func>
    ceec:	2000fb5b 	.word	0x2000fb5b
    cef0:	2000dbe4 	.word	0x2000dbe4
    cef4:	0001e741 	.word	0x0001e741
    cef8:	2000dbe8 	.word	0x2000dbe8

0000cefc <z_impl_log_panic>:

void z_impl_log_panic(void)
{
    cefc:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    cefe:	4d0b      	ldr	r5, [pc, #44]	; (cf2c <z_impl_log_panic+0x30>)
    cf00:	7829      	ldrb	r1, [r5, #0]
    cf02:	b941      	cbnz	r1, cf16 <z_impl_log_panic+0x1a>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
    cf04:	2001      	movs	r0, #1
    cf06:	f7ff ff67 	bl	cdd8 <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
    cf0a:	4c09      	ldr	r4, [pc, #36]	; (cf30 <z_impl_log_panic+0x34>)
    cf0c:	4e09      	ldr	r6, [pc, #36]	; (cf34 <z_impl_log_panic+0x38>)
    cf0e:	42b4      	cmp	r4, r6
    cf10:	d302      	bcc.n	cf18 <z_impl_log_panic+0x1c>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
    cf12:	2301      	movs	r3, #1
    cf14:	702b      	strb	r3, [r5, #0]
}
    cf16:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    cf18:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    cf1a:	795b      	ldrb	r3, [r3, #5]
    cf1c:	b11b      	cbz	r3, cf26 <z_impl_log_panic+0x2a>
	backend->api->panic(backend);
    cf1e:	6823      	ldr	r3, [r4, #0]
    cf20:	4620      	mov	r0, r4
    cf22:	689b      	ldr	r3, [r3, #8]
    cf24:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    cf26:	3410      	adds	r4, #16
    cf28:	e7f1      	b.n	cf0e <z_impl_log_panic+0x12>
    cf2a:	bf00      	nop
    cf2c:	2000fb5b 	.word	0x2000fb5b
    cf30:	00023064 	.word	0x00023064
    cf34:	00023074 	.word	0x00023074

0000cf38 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
    cf38:	b510      	push	{r4, lr}
    cf3a:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    cf3c:	4806      	ldr	r0, [pc, #24]	; (cf58 <z_log_dropped+0x20>)
    cf3e:	f011 fc01 	bl	1e744 <atomic_inc>
	if (buffered) {
    cf42:	b13c      	cbz	r4, cf54 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    cf44:	4b05      	ldr	r3, [pc, #20]	; (cf5c <z_log_dropped+0x24>)
    cf46:	e8d3 1fef 	ldaex	r1, [r3]
    cf4a:	3901      	subs	r1, #1
    cf4c:	e8c3 1fe2 	stlex	r2, r1, [r3]
    cf50:	2a00      	cmp	r2, #0
    cf52:	d1f8      	bne.n	cf46 <z_log_dropped+0xe>
		atomic_dec(&buffered_cnt);
	}
}
    cf54:	bd10      	pop	{r4, pc}
    cf56:	bf00      	nop
    cf58:	2000dbe4 	.word	0x2000dbe4
    cf5c:	2000dbe8 	.word	0x2000dbe8

0000cf60 <z_log_msg_commit>:
#endif
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
    cf60:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    cf62:	4b0a      	ldr	r3, [pc, #40]	; (cf8c <z_log_msg_commit+0x2c>)
{
    cf64:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    cf66:	681b      	ldr	r3, [r3, #0]
    cf68:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    cf6a:	4c09      	ldr	r4, [pc, #36]	; (cf90 <z_log_msg_commit+0x30>)
    cf6c:	4e09      	ldr	r6, [pc, #36]	; (cf94 <z_log_msg_commit+0x34>)
	msg->hdr.timestamp = timestamp_func();
    cf6e:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    cf70:	42b4      	cmp	r4, r6
    cf72:	d300      	bcc.n	cf76 <z_log_msg_commit+0x16>
	msg_commit(&log_buffer, msg);
}
    cf74:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    cf76:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    cf78:	795b      	ldrb	r3, [r3, #5]
    cf7a:	b123      	cbz	r3, cf86 <z_log_msg_commit+0x26>
	backend->api->process(backend, msg);
    cf7c:	6823      	ldr	r3, [r4, #0]
    cf7e:	4629      	mov	r1, r5
    cf80:	4620      	mov	r0, r4
    cf82:	681b      	ldr	r3, [r3, #0]
    cf84:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    cf86:	3410      	adds	r4, #16
    cf88:	e7f2      	b.n	cf70 <z_log_msg_commit+0x10>
    cf8a:	bf00      	nop
    cf8c:	2000c5dc 	.word	0x2000c5dc
    cf90:	00023064 	.word	0x00023064
    cf94:	00023074 	.word	0x00023074

0000cf98 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    cf98:	4a04      	ldr	r2, [pc, #16]	; (cfac <log_source_name_get+0x14>)
    cf9a:	4b05      	ldr	r3, [pc, #20]	; (cfb0 <log_source_name_get+0x18>)
    cf9c:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    cf9e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    cfa2:	bf34      	ite	cc
    cfa4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    cfa8:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    cfaa:	4770      	bx	lr
    cfac:	00022f0c 	.word	0x00022f0c
    cfb0:	00023064 	.word	0x00023064

0000cfb4 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    cfb4:	4b08      	ldr	r3, [pc, #32]	; (cfd8 <log_backend_enable+0x24>)
{
    cfb6:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    cfb8:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
    cfba:	6844      	ldr	r4, [r0, #4]
    cfbc:	111b      	asrs	r3, r3, #4
    cfbe:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    cfc0:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    cfc2:	6843      	ldr	r3, [r0, #4]
    cfc4:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    cfc6:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    cfc8:	6843      	ldr	r3, [r0, #4]
    cfca:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    cfcc:	6843      	ldr	r3, [r0, #4]
    cfce:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    cfd0:	f85d 4b04 	ldr.w	r4, [sp], #4
	z_log_notify_backend_enabled();
    cfd4:	f011 bbd4 	b.w	1e780 <z_log_notify_backend_enabled>
    cfd8:	00023064 	.word	0x00023064

0000cfdc <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    cfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfe0:	b085      	sub	sp, #20
    cfe2:	af02      	add	r7, sp, #8
    cfe4:	4604      	mov	r4, r0
    cfe6:	e9d7 a90e 	ldrd	sl, r9, [r7, #56]	; 0x38
    cfea:	460e      	mov	r6, r1
    cfec:	4693      	mov	fp, r2
    cfee:	4698      	mov	r8, r3
    cff0:	6b3d      	ldr	r5, [r7, #48]	; 0x30
	int plen;

	if (fmt) {
    cff2:	f1ba 0f00 	cmp.w	sl, #0
    cff6:	d033      	beq.n	d060 <z_impl_z_log_msg_runtime_vcreate+0x84>
		va_list ap2;

		va_copy(ap2, ap);
    cff8:	f8c7 9004 	str.w	r9, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    cffc:	f8cd 9000 	str.w	r9, [sp]
    d000:	2110      	movs	r1, #16
    d002:	4653      	mov	r3, sl
    d004:	2000      	movs	r0, #0
    d006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d008:	f7ff fa54 	bl	c4b4 <cbvprintf_package>
    d00c:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    d00e:	4a15      	ldr	r2, [pc, #84]	; (d064 <z_impl_z_log_msg_runtime_vcreate+0x88>)
    d010:	f004 0407 	and.w	r4, r4, #7
    d014:	f00b 0b07 	and.w	fp, fp, #7
    d018:	00e4      	lsls	r4, r4, #3
    d01a:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    d01e:	ea02 2241 	and.w	r2, r2, r1, lsl #9
    d022:	4314      	orrs	r4, r2
    d024:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    d028:	3517      	adds	r5, #23
    d02a:	440d      	add	r5, r1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    d02c:	f025 0507 	bic.w	r5, r5, #7
    d030:	ebad 0d05 	sub.w	sp, sp, r5
    d034:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    d036:	f1ba 0f00 	cmp.w	sl, #0
    d03a:	d007      	beq.n	d04c <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    d03c:	f8cd 9000 	str.w	r9, [sp]
    d040:	4653      	mov	r3, sl
    d042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d044:	f105 0010 	add.w	r0, r5, #16
    d048:	f7ff fa34 	bl	c4b4 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    d04c:	4643      	mov	r3, r8
    d04e:	4622      	mov	r2, r4
    d050:	4631      	mov	r1, r6
    d052:	4628      	mov	r0, r5
    d054:	f011 fb97 	bl	1e786 <z_log_msg_finalize>
	}
}
    d058:	370c      	adds	r7, #12
    d05a:	46bd      	mov	sp, r7
    d05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    d060:	4651      	mov	r1, sl
    d062:	e7d4      	b.n	d00e <z_impl_z_log_msg_runtime_vcreate+0x32>
    d064:	000ffe00 	.word	0x000ffe00

0000d068 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    d068:	b40e      	push	{r1, r2, r3}
    d06a:	b503      	push	{r0, r1, lr}
    d06c:	ab03      	add	r3, sp, #12
    d06e:	f853 2b04 	ldr.w	r2, [r3], #4
    d072:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    d074:	4804      	ldr	r0, [pc, #16]	; (d088 <print_formatted+0x20>)
	va_start(args, fmt);
    d076:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    d078:	f011 fbc7 	bl	1e80a <cbvprintf>
	va_end(args);

	return length;
}
    d07c:	b002      	add	sp, #8
    d07e:	f85d eb04 	ldr.w	lr, [sp], #4
    d082:	b003      	add	sp, #12
    d084:	4770      	bx	lr
    d086:	bf00      	nop
    d088:	0001e7b9 	.word	0x0001e7b9

0000d08c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    d08c:	06ca      	lsls	r2, r1, #27
    d08e:	d405      	bmi.n	d09c <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    d090:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    d092:	bf4c      	ite	mi
    d094:	4902      	ldrmi	r1, [pc, #8]	; (d0a0 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    d096:	4903      	ldrpl	r1, [pc, #12]	; (d0a4 <newline_print+0x18>)
    d098:	f7ff bfe6 	b.w	d068 <print_formatted>
	}
}
    d09c:	4770      	bx	lr
    d09e:	bf00      	nop
    d0a0:	0002756d 	.word	0x0002756d
    d0a4:	0002756c 	.word	0x0002756c

0000d0a8 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    d0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d0ac:	b08b      	sub	sp, #44	; 0x2c
    d0ae:	469a      	mov	sl, r3
    d0b0:	e9dd 7315 	ldrd	r7, r3, [sp, #84]	; 0x54
    d0b4:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
    d0b8:	9306      	str	r3, [sp, #24]
    d0ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d0bc:	4604      	mov	r4, r0
    d0be:	460d      	mov	r5, r1
    d0c0:	9e18      	ldr	r6, [sp, #96]	; 0x60
    d0c2:	9208      	str	r2, [sp, #32]
    d0c4:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    d0c6:	f1bb 0f00 	cmp.w	fp, #0
    d0ca:	f000 8085 	beq.w	d1d8 <log_output_process+0x130>
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    d0ce:	f006 0301 	and.w	r3, r6, #1
    d0d2:	9309      	str	r3, [sp, #36]	; 0x24
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    d0d4:	f006 0308 	and.w	r3, r6, #8
    d0d8:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    d0da:	f011 fb52 	bl	1e782 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    d0de:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    d0e2:	4602      	mov	r2, r0
    d0e4:	2800      	cmp	r0, #0
    d0e6:	d047      	beq.n	d178 <log_output_process+0xd0>
		length += print_formatted(output, "%s ", tag);
    d0e8:	4620      	mov	r0, r4
    d0ea:	4984      	ldr	r1, [pc, #528]	; (d2fc <log_output_process+0x254>)
    d0ec:	f7ff ffbc 	bl	d068 <print_formatted>
    d0f0:	4680      	mov	r8, r0
	if (stamp) {
    d0f2:	f1b9 0f00 	cmp.w	r9, #0
    d0f6:	d008      	beq.n	d10a <log_output_process+0x62>
	if (!format) {
    d0f8:	f016 0f44 	tst.w	r6, #68	; 0x44
    d0fc:	d13e      	bne.n	d17c <log_output_process+0xd4>
		length = print_formatted(output, "[%08lu] ", timestamp);
    d0fe:	462a      	mov	r2, r5
    d100:	4620      	mov	r0, r4
    d102:	497f      	ldr	r1, [pc, #508]	; (d300 <log_output_process+0x258>)
    d104:	f7ff ffb0 	bl	d068 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    d108:	4480      	add	r8, r0
	if (color) {
    d10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d10c:	b153      	cbz	r3, d124 <log_output_process+0x7c>
		const char *log_color = start && (colors[level] != NULL) ?
    d10e:	4b7d      	ldr	r3, [pc, #500]	; (d304 <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
    d110:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    d112:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    d116:	4b7c      	ldr	r3, [pc, #496]	; (d308 <log_output_process+0x260>)
    d118:	497c      	ldr	r1, [pc, #496]	; (d30c <log_output_process+0x264>)
    d11a:	2a00      	cmp	r2, #0
    d11c:	bf08      	it	eq
    d11e:	461a      	moveq	r2, r3
    d120:	f7ff ffa2 	bl	d068 <print_formatted>
	if (level_on) {
    d124:	9b07      	ldr	r3, [sp, #28]
    d126:	2b00      	cmp	r3, #0
    d128:	d054      	beq.n	d1d4 <log_output_process+0x12c>
		total += print_formatted(output, "<%s> ", severity[level]);
    d12a:	4b79      	ldr	r3, [pc, #484]	; (d310 <log_output_process+0x268>)
    d12c:	4620      	mov	r0, r4
    d12e:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    d132:	4978      	ldr	r1, [pc, #480]	; (d314 <log_output_process+0x26c>)
    d134:	f7ff ff98 	bl	d068 <print_formatted>
    d138:	4605      	mov	r5, r0
	if (domain) {
    d13a:	9b08      	ldr	r3, [sp, #32]
    d13c:	b12b      	cbz	r3, d14a <log_output_process+0xa2>
		total += print_formatted(output, "%s/", domain);
    d13e:	461a      	mov	r2, r3
    d140:	4620      	mov	r0, r4
    d142:	4975      	ldr	r1, [pc, #468]	; (d318 <log_output_process+0x270>)
    d144:	f7ff ff90 	bl	d068 <print_formatted>
    d148:	4405      	add	r5, r0
	if (source) {
    d14a:	f1ba 0f00 	cmp.w	sl, #0
    d14e:	d005      	beq.n	d15c <log_output_process+0xb4>
		total += print_formatted(output,
    d150:	4652      	mov	r2, sl
    d152:	4620      	mov	r0, r4
    d154:	4971      	ldr	r1, [pc, #452]	; (d31c <log_output_process+0x274>)
    d156:	f7ff ff87 	bl	d068 <print_formatted>
    d15a:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    d15c:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    d15e:	2f00      	cmp	r7, #0
    d160:	d148      	bne.n	d1f4 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    d162:	9b05      	ldr	r3, [sp, #20]
    d164:	2b00      	cmp	r3, #0
    d166:	d14e      	bne.n	d206 <log_output_process+0x15e>
	if (color) {
    d168:	07f3      	lsls	r3, r6, #31
    d16a:	f100 80c0 	bmi.w	d2ee <log_output_process+0x246>
	newline_print(output, flags);
    d16e:	4631      	mov	r1, r6
    d170:	4620      	mov	r0, r4
    d172:	f7ff ff8b 	bl	d08c <newline_print>
}
    d176:	e0b4      	b.n	d2e2 <log_output_process+0x23a>
	uint32_t length = 0U;
    d178:	4680      	mov	r8, r0
    d17a:	e7ba      	b.n	d0f2 <log_output_process+0x4a>
	} else if (freq != 0U) {
    d17c:	4b68      	ldr	r3, [pc, #416]	; (d320 <log_output_process+0x278>)
    d17e:	6818      	ldr	r0, [r3, #0]
    d180:	2800      	cmp	r0, #0
    d182:	d0c1      	beq.n	d108 <log_output_process+0x60>
		timestamp /= timestamp_div;
    d184:	4b67      	ldr	r3, [pc, #412]	; (d324 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    d186:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    d18a:	681b      	ldr	r3, [r3, #0]
    d18c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    d190:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    d194:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    d198:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    d19c:	fb09 f505 	mul.w	r5, r9, r5
    d1a0:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    d1a4:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    d1a8:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    d1ac:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    d1b0:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
    d1b4:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    d1b8:	fb09 f505 	mul.w	r5, r9, r5
    d1bc:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    d1c0:	fb0c 1113 	mls	r1, ip, r3, r1
    d1c4:	4620      	mov	r0, r4
    d1c6:	9100      	str	r1, [sp, #0]
    d1c8:	e9cd e501 	strd	lr, r5, [sp, #4]
    d1cc:	4956      	ldr	r1, [pc, #344]	; (d328 <log_output_process+0x280>)
    d1ce:	f7ff ff4b 	bl	d068 <print_formatted>
    d1d2:	e799      	b.n	d108 <log_output_process+0x60>
	int total = 0;
    d1d4:	9d07      	ldr	r5, [sp, #28]
    d1d6:	e7b0      	b.n	d13a <log_output_process+0x92>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    d1d8:	f1ba 0f01 	cmp.w	sl, #1
    d1dc:	d106      	bne.n	d1ec <log_output_process+0x144>
	if (package) {
    d1de:	2f00      	cmp	r7, #0
    d1e0:	d165      	bne.n	d2ae <log_output_process+0x206>
	if (data_len) {
    d1e2:	9b05      	ldr	r3, [sp, #20]
    d1e4:	2b00      	cmp	r3, #0
    d1e6:	d07c      	beq.n	d2e2 <log_output_process+0x23a>
		prefix_offset = 0;
    d1e8:	2500      	movs	r5, #0
    d1ea:	e00c      	b.n	d206 <log_output_process+0x15e>
	if (package) {
    d1ec:	2f00      	cmp	r7, #0
    d1ee:	d0f8      	beq.n	d1e2 <log_output_process+0x13a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    d1f0:	484e      	ldr	r0, [pc, #312]	; (d32c <log_output_process+0x284>)
    d1f2:	e05d      	b.n	d2b0 <log_output_process+0x208>
		cb = out_func;
    d1f4:	484e      	ldr	r0, [pc, #312]	; (d330 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    d1f6:	463b      	mov	r3, r7
    d1f8:	4622      	mov	r2, r4
    d1fa:	494e      	ldr	r1, [pc, #312]	; (d334 <log_output_process+0x28c>)
    d1fc:	f010 fec9 	bl	1df92 <cbpprintf_external>
	if (data_len) {
    d200:	9b05      	ldr	r3, [sp, #20]
    d202:	2b00      	cmp	r3, #0
    d204:	d069      	beq.n	d2da <log_output_process+0x232>
		print_formatted(output, " ");
    d206:	f8df 8140 	ldr.w	r8, [pc, #320]	; d348 <log_output_process+0x2a0>
			print_formatted(output, "%02x ", data[i]);
    d20a:	f8df 9140 	ldr.w	r9, [pc, #320]	; d34c <log_output_process+0x2a4>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    d20e:	9f05      	ldr	r7, [sp, #20]
	newline_print(output, flags);
    d210:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    d212:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    d214:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    d216:	bf28      	it	cs
    d218:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
    d21a:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
    d21e:	f7ff ff35 	bl	d08c <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    d222:	4555      	cmp	r5, sl
    d224:	dc46      	bgt.n	d2b4 <log_output_process+0x20c>
			print_formatted(output, "%02x ", data[i]);
    d226:	9b06      	ldr	r3, [sp, #24]
    d228:	4649      	mov	r1, r9
    d22a:	4620      	mov	r0, r4
    d22c:	781a      	ldrb	r2, [r3, #0]
    d22e:	f7ff ff1b 	bl	d068 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d232:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    d236:	f01a 0f07 	tst.w	sl, #7
    d23a:	d103      	bne.n	d244 <log_output_process+0x19c>
			print_formatted(output, " ");
    d23c:	4641      	mov	r1, r8
    d23e:	4620      	mov	r0, r4
    d240:	f7ff ff12 	bl	d068 <print_formatted>
		if (i < length) {
    d244:	4557      	cmp	r7, sl
    d246:	d93c      	bls.n	d2c2 <log_output_process+0x21a>
			print_formatted(output, "%02x ", data[i]);
    d248:	9b06      	ldr	r3, [sp, #24]
    d24a:	4649      	mov	r1, r9
    d24c:	4620      	mov	r0, r4
    d24e:	f813 200a 	ldrb.w	r2, [r3, sl]
    d252:	f7ff ff09 	bl	d068 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d256:	f10a 0a01 	add.w	sl, sl, #1
    d25a:	f1ba 0f10 	cmp.w	sl, #16
    d25e:	d1ea      	bne.n	d236 <log_output_process+0x18e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d260:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    d264:	4620      	mov	r0, r4
    d266:	4934      	ldr	r1, [pc, #208]	; (d338 <log_output_process+0x290>)
    d268:	f7ff fefe 	bl	d068 <print_formatted>
		if (i < length) {
    d26c:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    d26e:	9b06      	ldr	r3, [sp, #24]
			print_formatted(output, "%c",
    d270:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    d272:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    d274:	4b31      	ldr	r3, [pc, #196]	; (d33c <log_output_process+0x294>)
    d276:	5c99      	ldrb	r1, [r3, r2]
    d278:	f011 0f97 	tst.w	r1, #151	; 0x97
    d27c:	bf08      	it	eq
    d27e:	222e      	moveq	r2, #46	; 0x2e
    d280:	492f      	ldr	r1, [pc, #188]	; (d340 <log_output_process+0x298>)
    d282:	f7ff fef1 	bl	d068 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d286:	f10a 0a01 	add.w	sl, sl, #1
    d28a:	f1ba 0f10 	cmp.w	sl, #16
    d28e:	d01d      	beq.n	d2cc <log_output_process+0x224>
		if (i > 0 && !(i % 8)) {
    d290:	f01a 0f07 	tst.w	sl, #7
    d294:	d103      	bne.n	d29e <log_output_process+0x1f6>
			print_formatted(output, " ");
    d296:	4641      	mov	r1, r8
    d298:	4620      	mov	r0, r4
    d29a:	f7ff fee5 	bl	d068 <print_formatted>
		if (i < length) {
    d29e:	4557      	cmp	r7, sl
    d2a0:	4652      	mov	r2, sl
    d2a2:	d8e4      	bhi.n	d26e <log_output_process+0x1c6>
			print_formatted(output, " ");
    d2a4:	4641      	mov	r1, r8
    d2a6:	4620      	mov	r0, r4
    d2a8:	f7ff fede 	bl	d068 <print_formatted>
    d2ac:	e7eb      	b.n	d286 <log_output_process+0x1de>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    d2ae:	4820      	ldr	r0, [pc, #128]	; (d330 <log_output_process+0x288>)
		prefix_offset = 0;
    d2b0:	465d      	mov	r5, fp
    d2b2:	e7a0      	b.n	d1f6 <log_output_process+0x14e>
		print_formatted(output, " ");
    d2b4:	4641      	mov	r1, r8
    d2b6:	4620      	mov	r0, r4
    d2b8:	f7ff fed6 	bl	d068 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    d2bc:	f10a 0a01 	add.w	sl, sl, #1
    d2c0:	e7af      	b.n	d222 <log_output_process+0x17a>
			print_formatted(output, "   ");
    d2c2:	4620      	mov	r0, r4
    d2c4:	491f      	ldr	r1, [pc, #124]	; (d344 <log_output_process+0x29c>)
    d2c6:	f7ff fecf 	bl	d068 <print_formatted>
    d2ca:	e7c4      	b.n	d256 <log_output_process+0x1ae>
		data += length;
    d2cc:	9b06      	ldr	r3, [sp, #24]
    d2ce:	443b      	add	r3, r7
    d2d0:	9306      	str	r3, [sp, #24]
	} while (len);
    d2d2:	9b05      	ldr	r3, [sp, #20]
    d2d4:	1bdb      	subs	r3, r3, r7
    d2d6:	9305      	str	r3, [sp, #20]
    d2d8:	d199      	bne.n	d20e <log_output_process+0x166>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    d2da:	f1bb 0f00 	cmp.w	fp, #0
    d2de:	f47f af43 	bne.w	d168 <log_output_process+0xc0>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    d2e2:	4620      	mov	r0, r4
}
    d2e4:	b00b      	add	sp, #44	; 0x2c
    d2e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    d2ea:	f011 ba95 	b.w	1e818 <log_output_flush>
		print_formatted(output, "%s", log_color);
    d2ee:	4620      	mov	r0, r4
    d2f0:	4a05      	ldr	r2, [pc, #20]	; (d308 <log_output_process+0x260>)
    d2f2:	4906      	ldr	r1, [pc, #24]	; (d30c <log_output_process+0x264>)
    d2f4:	f7ff feb8 	bl	d068 <print_formatted>
}
    d2f8:	e739      	b.n	d16e <log_output_process+0xc6>
    d2fa:	bf00      	nop
    d2fc:	00023f54 	.word	0x00023f54
    d300:	00023f58 	.word	0x00023f58
    d304:	00023200 	.word	0x00023200
    d308:	00023f4f 	.word	0x00023f4f
    d30c:	000268a7 	.word	0x000268a7
    d310:	00023214 	.word	0x00023214
    d314:	00023f7d 	.word	0x00023f7d
    d318:	00023f83 	.word	0x00023f83
    d31c:	00023f87 	.word	0x00023f87
    d320:	2000dbf4 	.word	0x2000dbf4
    d324:	2000dbf0 	.word	0x2000dbf0
    d328:	00023f61 	.word	0x00023f61
    d32c:	0001e7d5 	.word	0x0001e7d5
    d330:	0001e7b9 	.word	0x0001e7b9
    d334:	0001e80b 	.word	0x0001e80b
    d338:	00023f96 	.word	0x00023f96
    d33c:	00027ac8 	.word	0x00027ac8
    d340:	00025758 	.word	0x00025758
    d344:	00023f92 	.word	0x00023f92
    d348:	00023f94 	.word	0x00023f94
    d34c:	00023f8c 	.word	0x00023f8c

0000d350 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    d350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    d354:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    d356:	684b      	ldr	r3, [r1, #4]
    d358:	4605      	mov	r5, r0
    d35a:	460c      	mov	r4, r1
    d35c:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    d35e:	688e      	ldr	r6, [r1, #8]
    d360:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    d362:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    d366:	b15b      	cbz	r3, d380 <log_output_msg_process+0x30>
    d368:	4a13      	ldr	r2, [pc, #76]	; (d3b8 <log_output_msg_process+0x68>)
    d36a:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    d36c:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    d370:	2900      	cmp	r1, #0
    d372:	db1f      	blt.n	d3b4 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    d374:	7820      	ldrb	r0, [r4, #0]
    d376:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    d37a:	f7ff fe0d 	bl	cf98 <log_source_name_get>
    d37e:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    d380:	4621      	mov	r1, r4
    d382:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    d386:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    d388:	f3c2 224a 	ubfx	r2, r2, #9, #11
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    d38c:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    d38e:	eb01 0402 	add.w	r4, r1, r2
    d392:	bf08      	it	eq
    d394:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    d396:	f3c0 100b 	ubfx	r0, r0, #4, #12
    d39a:	e9cd 0803 	strd	r0, r8, [sp, #12]
    d39e:	e9cd 1401 	strd	r1, r4, [sp, #4]
    d3a2:	2200      	movs	r2, #0
    d3a4:	4631      	mov	r1, r6
    d3a6:	4628      	mov	r0, r5
    d3a8:	9700      	str	r7, [sp, #0]
    d3aa:	f7ff fe7d 	bl	d0a8 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    d3ae:	b006      	add	sp, #24
    d3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    d3b4:	2300      	movs	r3, #0
    d3b6:	e7e3      	b.n	d380 <log_output_msg_process+0x30>
    d3b8:	00022f0c 	.word	0x00022f0c

0000d3bc <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    d3bc:	2100      	movs	r1, #0
    d3be:	2301      	movs	r3, #1
    d3c0:	4a06      	ldr	r2, [pc, #24]	; (d3dc <log_output_timestamp_freq_set+0x20>)
    d3c2:	4290      	cmp	r0, r2
    d3c4:	d806      	bhi.n	d3d4 <log_output_timestamp_freq_set+0x18>
    d3c6:	4a06      	ldr	r2, [pc, #24]	; (d3e0 <log_output_timestamp_freq_set+0x24>)
    d3c8:	b901      	cbnz	r1, d3cc <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    d3ca:	2301      	movs	r3, #1
    d3cc:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    d3ce:	4b05      	ldr	r3, [pc, #20]	; (d3e4 <log_output_timestamp_freq_set+0x28>)
    d3d0:	6018      	str	r0, [r3, #0]
}
    d3d2:	4770      	bx	lr
		timestamp_div *= 2U;
    d3d4:	2101      	movs	r1, #1
		frequency /= 2U;
    d3d6:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    d3d8:	005b      	lsls	r3, r3, #1
    d3da:	e7f2      	b.n	d3c2 <log_output_timestamp_freq_set+0x6>
    d3dc:	000f4240 	.word	0x000f4240
    d3e0:	2000dbf0 	.word	0x2000dbf0
    d3e4:	2000dbf4 	.word	0x2000dbf4

0000d3e8 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    d3e8:	4b01      	ldr	r3, [pc, #4]	; (d3f0 <format_set+0x8>)
	return 0;
}
    d3ea:	2000      	movs	r0, #0
	log_format_current = log_type;
    d3ec:	6019      	str	r1, [r3, #0]
}
    d3ee:	4770      	bx	lr
    d3f0:	2000dc0c 	.word	0x2000dc0c

0000d3f4 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    d3f4:	2201      	movs	r2, #1
    d3f6:	4b02      	ldr	r3, [pc, #8]	; (d400 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    d3f8:	4802      	ldr	r0, [pc, #8]	; (d404 <panic+0x10>)
    d3fa:	701a      	strb	r2, [r3, #0]
    d3fc:	f011 ba0c 	b.w	1e818 <log_output_flush>
    d400:	2000fb5d 	.word	0x2000fb5d
    d404:	00023244 	.word	0x00023244

0000d408 <process>:
{
    d408:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    d40a:	4b06      	ldr	r3, [pc, #24]	; (d424 <process+0x1c>)
{
    d40c:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    d40e:	6818      	ldr	r0, [r3, #0]
    d410:	f7ff fd4a 	bl	cea8 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    d414:	4621      	mov	r1, r4
}
    d416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    d41a:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    d41c:	220f      	movs	r2, #15
    d41e:	4802      	ldr	r0, [pc, #8]	; (d428 <process+0x20>)
    d420:	4718      	bx	r3
    d422:	bf00      	nop
    d424:	2000dc0c 	.word	0x2000dc0c
    d428:	00023244 	.word	0x00023244

0000d42c <char_out>:
{
    d42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d42e:	460d      	mov	r5, r1
    d430:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    d432:	4f06      	ldr	r7, [pc, #24]	; (d44c <char_out+0x20>)
    d434:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    d436:	42b4      	cmp	r4, r6
    d438:	d101      	bne.n	d43e <char_out+0x12>
}
    d43a:	4628      	mov	r0, r5
    d43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    d43e:	f814 1b01 	ldrb.w	r1, [r4], #1
    d442:	68bb      	ldr	r3, [r7, #8]
    d444:	4801      	ldr	r0, [pc, #4]	; (d44c <char_out+0x20>)
    d446:	685b      	ldr	r3, [r3, #4]
    d448:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    d44a:	e7f4      	b.n	d436 <char_out+0xa>
    d44c:	00022c78 	.word	0x00022c78

0000d450 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    d450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d454:	4605      	mov	r5, r0
	__asm__ volatile(
    d456:	f04f 0320 	mov.w	r3, #32
    d45a:	f3ef 8611 	mrs	r6, BASEPRI
    d45e:	f383 8812 	msr	BASEPRI_MAX, r3
    d462:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    d466:	f04f 090c 	mov.w	r9, #12
	return list->head;
    d46a:	4b0d      	ldr	r3, [pc, #52]	; (d4a0 <pm_state_notify+0x50>)
    d46c:	4f0d      	ldr	r7, [pc, #52]	; (d4a4 <pm_state_notify+0x54>)
    d46e:	681c      	ldr	r4, [r3, #0]
    d470:	f8df 8034 	ldr.w	r8, [pc, #52]	; d4a8 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    d474:	b92c      	cbnz	r4, d482 <pm_state_notify+0x32>
	__asm__ volatile(
    d476:	f386 8811 	msr	BASEPRI, r6
    d47a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    d47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    d482:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    d486:	2d00      	cmp	r5, #0
    d488:	bf18      	it	ne
    d48a:	4613      	movne	r3, r2
		if (callback) {
    d48c:	b12b      	cbz	r3, d49a <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    d48e:	f898 2010 	ldrb.w	r2, [r8, #16]
    d492:	fb09 f202 	mul.w	r2, r9, r2
    d496:	5cb8      	ldrb	r0, [r7, r2]
    d498:	4798      	blx	r3
	return node->next;
    d49a:	6824      	ldr	r4, [r4, #0]
    d49c:	e7ea      	b.n	d474 <pm_state_notify+0x24>
    d49e:	bf00      	nop
    d4a0:	2000dc28 	.word	0x2000dc28
    d4a4:	2000dc1c 	.word	0x2000dc1c
    d4a8:	2000e2fc 	.word	0x2000e2fc

0000d4ac <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    d4ac:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    d4ae:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    d4b0:	4b16      	ldr	r3, [pc, #88]	; (d50c <pm_system_resume+0x60>)
    d4b2:	7c1c      	ldrb	r4, [r3, #16]
    d4b4:	f004 031f 	and.w	r3, r4, #31
    d4b8:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d4ba:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d4bc:	4b14      	ldr	r3, [pc, #80]	; (d510 <pm_system_resume+0x64>)
    d4be:	0961      	lsrs	r1, r4, #5
    d4c0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d4c4:	e8d3 1fef 	ldaex	r1, [r3]
    d4c8:	ea01 0500 	and.w	r5, r1, r0
    d4cc:	e8c3 5fe6 	stlex	r6, r5, [r3]
    d4d0:	2e00      	cmp	r6, #0
    d4d2:	d1f7      	bne.n	d4c4 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    d4d4:	420a      	tst	r2, r1
    d4d6:	d013      	beq.n	d500 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    d4d8:	4b0e      	ldr	r3, [pc, #56]	; (d514 <pm_system_resume+0x68>)
    d4da:	4d0f      	ldr	r5, [pc, #60]	; (d518 <pm_system_resume+0x6c>)
    d4dc:	b18b      	cbz	r3, d502 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    d4de:	230c      	movs	r3, #12
    d4e0:	4363      	muls	r3, r4
    d4e2:	18ea      	adds	r2, r5, r3
    d4e4:	7851      	ldrb	r1, [r2, #1]
    d4e6:	5ce8      	ldrb	r0, [r5, r3]
    d4e8:	f011 f922 	bl	1e730 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    d4ec:	2000      	movs	r0, #0
    d4ee:	f7ff ffaf 	bl	d450 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    d4f2:	230c      	movs	r3, #12
    d4f4:	435c      	muls	r4, r3
    d4f6:	2300      	movs	r3, #0
    d4f8:	192a      	adds	r2, r5, r4
    d4fa:	512b      	str	r3, [r5, r4]
    d4fc:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    d500:	bd70      	pop	{r4, r5, r6, pc}
    d502:	f383 8811 	msr	BASEPRI, r3
    d506:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    d50a:	e7ef      	b.n	d4ec <pm_system_resume+0x40>
    d50c:	2000e2fc 	.word	0x2000e2fc
    d510:	2000dc30 	.word	0x2000dc30
    d514:	0001e731 	.word	0x0001e731
    d518:	2000dc1c 	.word	0x2000dc1c

0000d51c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    d51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    d520:	4b32      	ldr	r3, [pc, #200]	; (d5ec <pm_system_suspend+0xd0>)
{
    d522:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    d524:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    d526:	f04f 0320 	mov.w	r3, #32
    d52a:	f3ef 8811 	mrs	r8, BASEPRI
    d52e:	f383 8812 	msr	BASEPRI_MAX, r3
    d532:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    d536:	240c      	movs	r4, #12
    d538:	436c      	muls	r4, r5
    d53a:	4b2d      	ldr	r3, [pc, #180]	; (d5f0 <pm_system_suspend+0xd4>)
    d53c:	4e2d      	ldr	r6, [pc, #180]	; (d5f4 <pm_system_suspend+0xd8>)
    d53e:	5d19      	ldrb	r1, [r3, r4]
    d540:	191a      	adds	r2, r3, r4
    d542:	2900      	cmp	r1, #0
    d544:	d047      	beq.n	d5d6 <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    d546:	ca07      	ldmia	r2, {r0, r1, r2}
    d548:	eb06 0c04 	add.w	ip, r6, r4
    d54c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    d550:	2200      	movs	r2, #0
    d552:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    d554:	f388 8811 	msr	BASEPRI, r8
    d558:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    d55c:	230c      	movs	r3, #12
    d55e:	436b      	muls	r3, r5
    d560:	5cf0      	ldrb	r0, [r6, r3]
    d562:	18f2      	adds	r2, r6, r3
    d564:	b3a8      	cbz	r0, d5d2 <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    d566:	1c7b      	adds	r3, r7, #1
    d568:	d010      	beq.n	d58c <pm_system_suspend+0x70>
			return (uint32_t)((t * to_hz + off) / from_hz);
    d56a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d56e:	2100      	movs	r1, #0
    d570:	f8d2 c008 	ldr.w	ip, [r2, #8]
    d574:	4c20      	ldr	r4, [pc, #128]	; (d5f8 <pm_system_suspend+0xdc>)
    d576:	2300      	movs	r3, #0
    d578:	fbec 4100 	umlal	r4, r1, ip, r0
    d57c:	4a1f      	ldr	r2, [pc, #124]	; (d5fc <pm_system_suspend+0xe0>)
    d57e:	4620      	mov	r0, r4
    d580:	f7fb fb36 	bl	8bf0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    d584:	2101      	movs	r1, #1
    d586:	1a38      	subs	r0, r7, r0
    d588:	f003 fdc6 	bl	11118 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    d58c:	f00d fc84 	bl	1ae98 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    d590:	2001      	movs	r0, #1
    d592:	f7ff ff5d 	bl	d450 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d596:	4b1a      	ldr	r3, [pc, #104]	; (d600 <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d598:	096a      	lsrs	r2, r5, #5
    d59a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    d59e:	2201      	movs	r2, #1
    d5a0:	f005 011f 	and.w	r1, r5, #31
    d5a4:	408a      	lsls	r2, r1
    d5a6:	e8d3 0fef 	ldaex	r0, [r3]
    d5aa:	4310      	orrs	r0, r2
    d5ac:	e8c3 0fe1 	stlex	r1, r0, [r3]
    d5b0:	2900      	cmp	r1, #0
    d5b2:	d1f8      	bne.n	d5a6 <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
    d5b4:	4b13      	ldr	r3, [pc, #76]	; (d604 <pm_system_suspend+0xe8>)
    d5b6:	b13b      	cbz	r3, d5c8 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
    d5b8:	230c      	movs	r3, #12
    d5ba:	fb03 f005 	mul.w	r0, r3, r5
    d5be:	1833      	adds	r3, r6, r0
    d5c0:	7859      	ldrb	r1, [r3, #1]
    d5c2:	5c30      	ldrb	r0, [r6, r0]
    d5c4:	f011 f8a8 	bl	1e718 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    d5c8:	f7ff ff70 	bl	d4ac <pm_system_resume>
	k_sched_unlock();
    d5cc:	f00d fc78 	bl	1aec0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    d5d0:	2001      	movs	r0, #1
}
    d5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    d5d6:	4601      	mov	r1, r0
    d5d8:	4628      	mov	r0, r5
    d5da:	f000 f815 	bl	d608 <pm_policy_next_state>
		if (info != NULL) {
    d5de:	2800      	cmp	r0, #0
    d5e0:	d0b8      	beq.n	d554 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    d5e2:	c807      	ldmia	r0, {r0, r1, r2}
    d5e4:	4434      	add	r4, r6
    d5e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    d5ea:	e7b3      	b.n	d554 <pm_system_suspend+0x38>
    d5ec:	2000e2fc 	.word	0x2000e2fc
    d5f0:	2000dc10 	.word	0x2000dc10
    d5f4:	2000dc1c 	.word	0x2000dc1c
    d5f8:	000f423f 	.word	0x000f423f
    d5fc:	000f4240 	.word	0x000f4240
    d600:	2000dc30 	.word	0x2000dc30
    d604:	0001e719 	.word	0x0001e719

0000d608 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    d608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d60c:	b085      	sub	sp, #20
    d60e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    d610:	a903      	add	r1, sp, #12
    d612:	f000 f843 	bl	d69c <pm_state_cpu_get_all>
    d616:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    d61a:	4604      	mov	r4, r0
    d61c:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    d620:	4b1b      	ldr	r3, [pc, #108]	; (d690 <pm_policy_next_state+0x88>)
    d622:	9d03      	ldr	r5, [sp, #12]
    d624:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    d628:	1e43      	subs	r3, r0, #1
    d62a:	b21b      	sxth	r3, r3
    d62c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d630:	f8df 8064 	ldr.w	r8, [pc, #100]	; d698 <pm_policy_next_state+0x90>
    d634:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    d638:	b924      	cbnz	r4, d644 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    d63a:	46a1      	mov	r9, r4
}
    d63c:	4648      	mov	r0, r9
    d63e:	b005      	add	sp, #20
    d640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d644:	46c4      	mov	ip, r8
    d646:	4659      	mov	r1, fp
    d648:	6868      	ldr	r0, [r5, #4]
    d64a:	2300      	movs	r3, #0
    d64c:	fbe0 c107 	umlal	ip, r1, r0, r7
    d650:	4a10      	ldr	r2, [pc, #64]	; (d694 <pm_policy_next_state+0x8c>)
    d652:	4660      	mov	r0, ip
    d654:	f7fb facc 	bl	8bf0 <__aeabi_uldivmod>
    d658:	46c4      	mov	ip, r8
    d65a:	4659      	mov	r1, fp
    d65c:	9001      	str	r0, [sp, #4]
    d65e:	68a8      	ldr	r0, [r5, #8]
    d660:	2300      	movs	r3, #0
    d662:	fbe0 c107 	umlal	ip, r1, r0, r7
    d666:	4a0b      	ldr	r2, [pc, #44]	; (d694 <pm_policy_next_state+0x8c>)
    d668:	4660      	mov	r0, ip
    d66a:	f7fb fac1 	bl	8bf0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    d66e:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    d672:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    d674:	d001      	beq.n	d67a <pm_policy_next_state+0x72>
    d676:	4582      	cmp	sl, r0
    d678:	d905      	bls.n	d686 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    d67a:	1c73      	adds	r3, r6, #1
    d67c:	d0de      	beq.n	d63c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    d67e:	9b01      	ldr	r3, [sp, #4]
    d680:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    d682:	42b0      	cmp	r0, r6
    d684:	d9da      	bls.n	d63c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    d686:	3c01      	subs	r4, #1
    d688:	b2a4      	uxth	r4, r4
    d68a:	3d0c      	subs	r5, #12
    d68c:	e7d4      	b.n	d638 <pm_policy_next_state+0x30>
    d68e:	bf00      	nop
    d690:	2000c5e0 	.word	0x2000c5e0
    d694:	000f4240 	.word	0x000f4240
    d698:	000f423f 	.word	0x000f423f

0000d69c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    d69c:	b908      	cbnz	r0, d6a2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    d69e:	4b02      	ldr	r3, [pc, #8]	; (d6a8 <pm_state_cpu_get_all+0xc>)
    d6a0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    d6a2:	2000      	movs	r0, #0
    d6a4:	4770      	bx	lr
    d6a6:	bf00      	nop
    d6a8:	00023254 	.word	0x00023254

0000d6ac <sntp_query>:

	return 0;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
    d6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6ae:	4604      	mov	r4, r0
    d6b0:	b09b      	sub	sp, #108	; 0x6c
    d6b2:	460f      	mov	r7, r1
    d6b4:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
    d6b6:	2100      	movs	r1, #0
    d6b8:	2230      	movs	r2, #48	; 0x30
    d6ba:	a802      	add	r0, sp, #8
    d6bc:	f014 fb03 	bl	21cc6 <memset>
	int ret = 0;

	if (!ctx || !time) {
    d6c0:	2c00      	cmp	r4, #0
    d6c2:	d07b      	beq.n	d7bc <sntp_query+0x110>
    d6c4:	2e00      	cmp	r6, #0
    d6c6:	d079      	beq.n	d7bc <sntp_query+0x110>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
    d6c8:	231b      	movs	r3, #27
    d6ca:	f88d 3008 	strb.w	r3, [sp, #8]
	return z_impl_k_uptime_ticks();
    d6ce:	f014 f901 	bl	218d4 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
    d6d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d6d6:	2500      	movs	r5, #0
    d6d8:	fba0 0302 	umull	r0, r3, r0, r2
    d6dc:	fb02 3101 	mla	r1, r2, r1, r3
    d6e0:	0bc0      	lsrs	r0, r0, #15
	return time / MSEC_PER_SEC;
    d6e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d6e6:	2300      	movs	r3, #0
    d6e8:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    d6ec:	4629      	mov	r1, r5
    d6ee:	f7fb fa7f 	bl	8bf0 <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
    d6f2:	4b34      	ldr	r3, [pc, #208]	; (d7c4 <sntp_query+0x118>)
    d6f4:	4403      	add	r3, r0
    d6f6:	6123      	str	r3, [r4, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
    d6f8:	ba1b      	rev	r3, r3
    d6fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    d6fe:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = zsock_send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
    d702:	68e0      	ldr	r0, [r4, #12]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
    d704:	930c      	str	r3, [sp, #48]	; 0x30
		union { uintptr_t x; socklen_t val; } parm5 = { .val = addrlen };
		return (ssize_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, parm5.x, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
    d706:	2230      	movs	r2, #48	; 0x30
    d708:	462b      	mov	r3, r5
    d70a:	e9cd 5500 	strd	r5, r5, [sp]
    d70e:	a902      	add	r1, sp, #8
    d710:	f011 f947 	bl	1e9a2 <z_impl_zsock_sendto>
	if (ret < 0) {
    d714:	2800      	cmp	r0, #0
    d716:	db0f      	blt.n	d738 <sntp_query+0x8c>
	struct sntp_pkt buf = { 0 };
    d718:	4629      	mov	r1, r5
    d71a:	2230      	movs	r2, #48	; 0x30
    d71c:	a80e      	add	r0, sp, #56	; 0x38
    d71e:	f014 fad2 	bl	21cc6 <memset>
	status = zsock_poll(sntp->sock.fds, sntp->sock.nfds, timeout);
    d722:	68a1      	ldr	r1, [r4, #8]
		union { uintptr_t x; int val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
    d724:	463a      	mov	r2, r7
    d726:	4620      	mov	r0, r4
    d728:	f011 f9a3 	bl	1ea72 <z_impl_zsock_poll>
	if (status < 0) {
    d72c:	42a8      	cmp	r0, r5
    d72e:	da05      	bge.n	d73c <sntp_query+0x90>
		return -errno;
    d730:	f011 fab6 	bl	1eca0 <__errno>
    d734:	6800      	ldr	r0, [r0, #0]
    d736:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
    d738:	b01b      	add	sp, #108	; 0x6c
    d73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status == 0) {
    d73c:	d035      	beq.n	d7aa <sntp_query+0xfe>
	rcvd = zsock_recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
    d73e:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
    d740:	2230      	movs	r2, #48	; 0x30
    d742:	462b      	mov	r3, r5
    d744:	e9cd 5500 	strd	r5, r5, [sp]
    d748:	a90e      	add	r1, sp, #56	; 0x38
    d74a:	f011 f95e 	bl	1ea0a <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
    d74e:	2800      	cmp	r0, #0
    d750:	dbee      	blt.n	d730 <sntp_query+0x84>
	if (rcvd != sizeof(struct sntp_pkt)) {
    d752:	2830      	cmp	r0, #48	; 0x30
    d754:	d12c      	bne.n	d7b0 <sntp_query+0x104>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
    d756:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d758:	6922      	ldr	r2, [r4, #16]
    d75a:	ba1b      	rev	r3, r3
    d75c:	429a      	cmp	r2, r3
    d75e:	d002      	beq.n	d766 <sntp_query+0xba>
		return -EINVAL;
    d760:	f06f 0015 	mvn.w	r0, #21
    d764:	e7e8      	b.n	d738 <sntp_query+0x8c>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
    d766:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    d76a:	f003 0307 	and.w	r3, r3, #7
    d76e:	2b04      	cmp	r3, #4
    d770:	d1f6      	bne.n	d760 <sntp_query+0xb4>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
    d772:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    d776:	b1f3      	cbz	r3, d7b6 <sntp_query+0x10a>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
    d778:	9b18      	ldr	r3, [sp, #96]	; 0x60
    d77a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d77c:	ba1b      	rev	r3, r3
    d77e:	ba12      	rev	r2, r2
    d780:	ea53 0102 	orrs.w	r1, r3, r2
    d784:	d0ec      	beq.n	d760 <sntp_query+0xb4>
	if (ts & 0x80000000) {
    d786:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
    d788:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
    d78a:	da0a      	bge.n	d7a2 <sntp_query+0xf6>
		if (ts >= OFFSET_1970_JAN_1) {
    d78c:	4a0e      	ldr	r2, [pc, #56]	; (d7c8 <sntp_query+0x11c>)
    d78e:	4293      	cmp	r3, r2
    d790:	d9e6      	bls.n	d760 <sntp_query+0xb4>
			time->seconds = ts - OFFSET_1970_JAN_1;
    d792:	4a0e      	ldr	r2, [pc, #56]	; (d7cc <sntp_query+0x120>)
    d794:	189a      	adds	r2, r3, r2
    d796:	eb63 0303 	sbc.w	r3, r3, r3
	return 0;
    d79a:	2000      	movs	r0, #0
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
    d79c:	e9c6 2300 	strd	r2, r3, [r6]
    d7a0:	e7ca      	b.n	d738 <sntp_query+0x8c>
    d7a2:	4a0a      	ldr	r2, [pc, #40]	; (d7cc <sntp_query+0x120>)
    d7a4:	441a      	add	r2, r3
    d7a6:	2300      	movs	r3, #0
    d7a8:	e7f7      	b.n	d79a <sntp_query+0xee>
		return -ETIMEDOUT;
    d7aa:	f06f 0073 	mvn.w	r0, #115	; 0x73
    d7ae:	e7c3      	b.n	d738 <sntp_query+0x8c>
		return -EMSGSIZE;
    d7b0:	f06f 0079 	mvn.w	r0, #121	; 0x79
    d7b4:	e7c0      	b.n	d738 <sntp_query+0x8c>
		return -EBUSY;
    d7b6:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
    d7ba:	e7bd      	b.n	d738 <sntp_query+0x8c>
		return -EFAULT;
    d7bc:	f06f 000d 	mvn.w	r0, #13
    d7c0:	e7ba      	b.n	d738 <sntp_query+0x8c>
    d7c2:	bf00      	nop
    d7c4:	83aa7e80 	.word	0x83aa7e80
    d7c8:	83aa7e7f 	.word	0x83aa7e7f
    d7cc:	7c558180 	.word	0x7c558180

0000d7d0 <z_impl_zsock_socket>:
{
    d7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7d4:	4605      	mov	r5, r0
    d7d6:	460e      	mov	r6, r1
    d7d8:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    d7da:	4c10      	ldr	r4, [pc, #64]	; (d81c <z_impl_zsock_socket+0x4c>)
    d7dc:	f8df 8040 	ldr.w	r8, [pc, #64]	; d820 <z_impl_zsock_socket+0x50>
    d7e0:	4544      	cmp	r4, r8
    d7e2:	d307      	bcc.n	d7f4 <z_impl_zsock_socket+0x24>
	errno = EAFNOSUPPORT;
    d7e4:	f011 fa5c 	bl	1eca0 <__errno>
    d7e8:	236a      	movs	r3, #106	; 0x6a
    d7ea:	6003      	str	r3, [r0, #0]
}
    d7ec:	f04f 30ff 	mov.w	r0, #4294967295
    d7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sock_family->family != family &&
    d7f4:	6823      	ldr	r3, [r4, #0]
    d7f6:	42ab      	cmp	r3, r5
    d7f8:	d000      	beq.n	d7fc <z_impl_zsock_socket+0x2c>
    d7fa:	b963      	cbnz	r3, d816 <z_impl_zsock_socket+0x46>
		if (!sock_family->is_supported(family, type, proto)) {
    d7fc:	463a      	mov	r2, r7
    d7fe:	4631      	mov	r1, r6
    d800:	4628      	mov	r0, r5
    d802:	68a3      	ldr	r3, [r4, #8]
    d804:	4798      	blx	r3
    d806:	b130      	cbz	r0, d816 <z_impl_zsock_socket+0x46>
		return sock_family->handler(family, type, proto);
    d808:	463a      	mov	r2, r7
    d80a:	4631      	mov	r1, r6
    d80c:	4628      	mov	r0, r5
    d80e:	68e3      	ldr	r3, [r4, #12]
}
    d810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sock_family->handler(family, type, proto);
    d814:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    d816:	3410      	adds	r4, #16
    d818:	e7e2      	b.n	d7e0 <z_impl_zsock_socket+0x10>
    d81a:	bf00      	nop
    d81c:	00022efc 	.word	0x00022efc
    d820:	00022f0c 	.word	0x00022f0c

0000d824 <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
    d824:	4b01      	ldr	r3, [pc, #4]	; (d82c <socket_offload_dns_register+0x8>)
    d826:	6018      	str	r0, [r3, #0]
}
    d828:	4770      	bx	lr
    d82a:	bf00      	nop
    d82c:	2000dc34 	.word	0x2000dc34

0000d830 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
    d830:	b410      	push	{r4}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);

	return dns_offload->getaddrinfo(node, service, hints, res);
    d832:	4c03      	ldr	r4, [pc, #12]	; (d840 <socket_offload_getaddrinfo+0x10>)
    d834:	6824      	ldr	r4, [r4, #0]
    d836:	6824      	ldr	r4, [r4, #0]
    d838:	46a4      	mov	ip, r4
}
    d83a:	f85d 4b04 	ldr.w	r4, [sp], #4
	return dns_offload->getaddrinfo(node, service, hints, res);
    d83e:	4760      	bx	ip
    d840:	2000dc34 	.word	0x2000dc34

0000d844 <socket_offload_freeaddrinfo>:
void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);

	return dns_offload->freeaddrinfo(res);
    d844:	4b01      	ldr	r3, [pc, #4]	; (d84c <socket_offload_freeaddrinfo+0x8>)
    d846:	681b      	ldr	r3, [r3, #0]
    d848:	685b      	ldr	r3, [r3, #4]
    d84a:	4718      	bx	r3
    d84c:	2000dc34 	.word	0x2000dc34

0000d850 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    d850:	4901      	ldr	r1, [pc, #4]	; (d858 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    d852:	2210      	movs	r2, #16
	str	r2, [r1]
    d854:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    d856:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    d858:	e000ed10 	.word	0xe000ed10

0000d85c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    d85c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    d85e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    d860:	f380 8811 	msr	BASEPRI, r0
	isb
    d864:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    d868:	f3bf 8f4f 	dsb	sy
    d86c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    d86e:	b662      	cpsie	i
	isb
    d870:	f3bf 8f6f 	isb	sy

	bx	lr
    d874:	4770      	bx	lr
    d876:	bf00      	nop

0000d878 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    d878:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    d87a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    d87c:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    d880:	f3bf 8f4f 	dsb	sy
    d884:	bf20      	wfe

	msr	BASEPRI, r0
    d886:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    d88a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    d88c:	4770      	bx	lr
    d88e:	bf00      	nop

0000d890 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    d890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d894:	4680      	mov	r8, r0

	if (esf != NULL) {
    d896:	460d      	mov	r5, r1
{
    d898:	b08c      	sub	sp, #48	; 0x30
	if (esf != NULL) {
    d89a:	2900      	cmp	r1, #0
    d89c:	d077      	beq.n	d98e <z_arm_fatal_error+0xfe>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    d89e:	2400      	movs	r4, #0
    d8a0:	688b      	ldr	r3, [r1, #8]
    d8a2:	2201      	movs	r2, #1
    d8a4:	9305      	str	r3, [sp, #20]
    d8a6:	684b      	ldr	r3, [r1, #4]
    d8a8:	4620      	mov	r0, r4
    d8aa:	9304      	str	r3, [sp, #16]
    d8ac:	680b      	ldr	r3, [r1, #0]
    d8ae:	493b      	ldr	r1, [pc, #236]	; (d99c <z_arm_fatal_error+0x10c>)
    d8b0:	9303      	str	r3, [sp, #12]
    d8b2:	4b3b      	ldr	r3, [pc, #236]	; (d9a0 <z_arm_fatal_error+0x110>)
    d8b4:	e9cd 4400 	strd	r4, r4, [sp]
    d8b8:	9302      	str	r3, [sp, #8]
    d8ba:	4623      	mov	r3, r4
    d8bc:	f011 f929 	bl	1eb12 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    d8c0:	696b      	ldr	r3, [r5, #20]
    d8c2:	2201      	movs	r2, #1
    d8c4:	9305      	str	r3, [sp, #20]
    d8c6:	692b      	ldr	r3, [r5, #16]
    d8c8:	4620      	mov	r0, r4
    d8ca:	9304      	str	r3, [sp, #16]
    d8cc:	68eb      	ldr	r3, [r5, #12]
    d8ce:	4933      	ldr	r1, [pc, #204]	; (d99c <z_arm_fatal_error+0x10c>)
    d8d0:	9303      	str	r3, [sp, #12]
    d8d2:	4b34      	ldr	r3, [pc, #208]	; (d9a4 <z_arm_fatal_error+0x114>)
    d8d4:	9400      	str	r4, [sp, #0]
    d8d6:	e9cd 4301 	strd	r4, r3, [sp, #4]
    d8da:	4623      	mov	r3, r4
    d8dc:	f011 f919 	bl	1eb12 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    d8e0:	69eb      	ldr	r3, [r5, #28]
    d8e2:	2201      	movs	r2, #1
    d8e4:	9303      	str	r3, [sp, #12]
    d8e6:	4b30      	ldr	r3, [pc, #192]	; (d9a8 <z_arm_fatal_error+0x118>)
    d8e8:	4620      	mov	r0, r4
    d8ea:	e9cd 4301 	strd	r4, r3, [sp, #4]
    d8ee:	492b      	ldr	r1, [pc, #172]	; (d99c <z_arm_fatal_error+0x10c>)
    d8f0:	4623      	mov	r3, r4
    d8f2:	9400      	str	r4, [sp, #0]
    d8f4:	f011 f90d 	bl	1eb12 <z_log_msg_runtime_create.constprop.0>
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
    d8f8:	462f      	mov	r7, r5
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    d8fa:	4626      	mov	r6, r4
    d8fc:	f8df 90b4 	ldr.w	r9, [pc, #180]	; d9b4 <z_arm_fatal_error+0x124>
    d900:	f8df a098 	ldr.w	sl, [pc, #152]	; d99c <z_arm_fatal_error+0x10c>
    d904:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    d908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    d90c:	1ce3      	adds	r3, r4, #3
    d90e:	9309      	str	r3, [sp, #36]	; 0x24
    d910:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
    d914:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    d918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    d91c:	1ca3      	adds	r3, r4, #2
    d91e:	9307      	str	r3, [sp, #28]
    d920:	edcd 7a08 	vstr	s15, [sp, #32]
    d924:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    d928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    d92c:	1c63      	adds	r3, r4, #1
    d92e:	9305      	str	r3, [sp, #20]
    d930:	edcd 7a06 	vstr	s15, [sp, #24]
    d934:	edd7 7a08 	vldr	s15, [r7, #32]
    d938:	2300      	movs	r3, #0
    d93a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    d93e:	e9cd 9402 	strd	r9, r4, [sp, #8]
    d942:	edcd 7a04 	vstr	s15, [sp, #16]
    d946:	2201      	movs	r2, #1
    d948:	4651      	mov	r1, sl
    d94a:	4618      	mov	r0, r3
    d94c:	e9cd 6600 	strd	r6, r6, [sp]
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
    d950:	3404      	adds	r4, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    d952:	f011 f8de 	bl	1eb12 <z_log_msg_runtime_create.constprop.0>
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
    d956:	2c10      	cmp	r4, #16
    d958:	f107 0710 	add.w	r7, r7, #16
    d95c:	d1d2      	bne.n	d904 <z_arm_fatal_error+0x74>
	LOG_ERR("fpscr:  0x%08x", esf->fpu.fpscr);
    d95e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    d960:	2201      	movs	r2, #1
    d962:	9303      	str	r3, [sp, #12]
    d964:	4b11      	ldr	r3, [pc, #68]	; (d9ac <z_arm_fatal_error+0x11c>)
    d966:	490d      	ldr	r1, [pc, #52]	; (d99c <z_arm_fatal_error+0x10c>)
    d968:	e9cd 6301 	strd	r6, r3, [sp, #4]
    d96c:	2300      	movs	r3, #0
    d96e:	9600      	str	r6, [sp, #0]
    d970:	4618      	mov	r0, r3
    d972:	f011 f8ce 	bl	1eb12 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    d976:	69ab      	ldr	r3, [r5, #24]
    d978:	2201      	movs	r2, #1
    d97a:	9303      	str	r3, [sp, #12]
    d97c:	4b0c      	ldr	r3, [pc, #48]	; (d9b0 <z_arm_fatal_error+0x120>)
    d97e:	4907      	ldr	r1, [pc, #28]	; (d99c <z_arm_fatal_error+0x10c>)
    d980:	e9cd 6301 	strd	r6, r3, [sp, #4]
    d984:	2300      	movs	r3, #0
    d986:	9600      	str	r6, [sp, #0]
    d988:	4618      	mov	r0, r3
    d98a:	f011 f8c2 	bl	1eb12 <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    d98e:	4629      	mov	r1, r5
    d990:	4640      	mov	r0, r8
}
    d992:	b00c      	add	sp, #48	; 0x30
    d994:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_fatal_error(reason, esf);
    d998:	f00c bb74 	b.w	1a084 <z_fatal_error>
    d99c:	0002303c 	.word	0x0002303c
    d9a0:	00024060 	.word	0x00024060
    d9a4:	0002408f 	.word	0x0002408f
    d9a8:	000240be 	.word	0x000240be
    d9ac:	00024110 	.word	0x00024110
    d9b0:	0002411f 	.word	0x0002411f
    d9b4:	000240cd 	.word	0x000240cd

0000d9b8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    d9b8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    d9ba:	2800      	cmp	r0, #0
    d9bc:	db07      	blt.n	d9ce <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d9be:	2301      	movs	r3, #1
    d9c0:	0941      	lsrs	r1, r0, #5
    d9c2:	4a03      	ldr	r2, [pc, #12]	; (d9d0 <arch_irq_enable+0x18>)
    d9c4:	f000 001f 	and.w	r0, r0, #31
    d9c8:	4083      	lsls	r3, r0
    d9ca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    d9ce:	4770      	bx	lr
    d9d0:	e000e100 	.word	0xe000e100

0000d9d4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    d9d4:	4b05      	ldr	r3, [pc, #20]	; (d9ec <arch_irq_is_enabled+0x18>)
    d9d6:	0942      	lsrs	r2, r0, #5
    d9d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    d9dc:	2301      	movs	r3, #1
    d9de:	f000 001f 	and.w	r0, r0, #31
    d9e2:	fa03 f000 	lsl.w	r0, r3, r0
}
    d9e6:	4010      	ands	r0, r2
    d9e8:	4770      	bx	lr
    d9ea:	bf00      	nop
    d9ec:	e000e100 	.word	0xe000e100

0000d9f0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    d9f0:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    d9f2:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    d9f4:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d9f8:	bfac      	ite	ge
    d9fa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d9fe:	4b06      	ldrlt	r3, [pc, #24]	; (da18 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    da00:	ea4f 1141 	mov.w	r1, r1, lsl #5
    da04:	b2c9      	uxtb	r1, r1
    da06:	bfab      	itete	ge
    da08:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    da0c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    da10:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    da14:	5419      	strblt	r1, [r3, r0]
}
    da16:	4770      	bx	lr
    da18:	e000ed14 	.word	0xe000ed14

0000da1c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    da1c:	bf30      	wfi
    b z_SysNmiOnReset
    da1e:	f7ff bffd 	b.w	da1c <z_SysNmiOnReset>
    da22:	bf00      	nop

0000da24 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    da24:	4a14      	ldr	r2, [pc, #80]	; (da78 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    da26:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    da28:	4b14      	ldr	r3, [pc, #80]	; (da7c <z_arm_prep_c+0x58>)
    da2a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    da2e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    da30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    da34:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    da38:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    da3c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    da40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    da44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    da48:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    da4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    da50:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    da54:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    da58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    da5c:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
    da60:	2300      	movs	r3, #0
    da62:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    da66:	f00c fbaf 	bl	1a1c8 <z_bss_zero>
	z_data_copy();
    da6a:	f00d fb61 	bl	1b130 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    da6e:	f000 fbd1 	bl	e214 <z_arm_interrupt_init>
	z_cstart();
    da72:	f00c fbe9 	bl	1a248 <z_cstart>
    da76:	bf00      	nop
    da78:	00008000 	.word	0x00008000
    da7c:	e000ed00 	.word	0xe000ed00

0000da80 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    da80:	4a09      	ldr	r2, [pc, #36]	; (daa8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    da82:	490a      	ldr	r1, [pc, #40]	; (daac <arch_swap+0x2c>)
	_current->arch.basepri = key;
    da84:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    da86:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    da88:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    da8a:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    da8c:	4908      	ldr	r1, [pc, #32]	; (dab0 <arch_swap+0x30>)
    da8e:	684b      	ldr	r3, [r1, #4]
    da90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    da94:	604b      	str	r3, [r1, #4]
    da96:	2300      	movs	r3, #0
    da98:	f383 8811 	msr	BASEPRI, r3
    da9c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    daa0:	6893      	ldr	r3, [r2, #8]
}
    daa2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    daa4:	4770      	bx	lr
    daa6:	bf00      	nop
    daa8:	2000e2fc 	.word	0x2000e2fc
    daac:	00023938 	.word	0x00023938
    dab0:	e000ed00 	.word	0xe000ed00

0000dab4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    dab4:	4922      	ldr	r1, [pc, #136]	; (db40 <in_fp_endif+0x2e>)
    ldr r2, [r1, #_kernel_offset_to_current]
    dab6:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    dab8:	f882 e0c1 	strb.w	lr, [r2, #193]	; 0xc1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    dabc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    dac0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    dac2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    dac6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    daca:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
    dace:	d103      	bne.n	dad8 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
    dad0:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
    dad4:	ec80 8a10 	vstmia	r0, {s16-s31}

0000dad8 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    dad8:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    dada:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    dade:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    dae2:	4f18      	ldr	r7, [pc, #96]	; (db44 <in_fp_endif+0x32>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    dae4:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    dae8:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    daea:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    daec:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    daee:	f992 e0c1 	ldrsb.w	lr, [r2, #193]	; 0xc1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    daf2:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    daf4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    daf6:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    daf8:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    dafc:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
    db00:	d003      	beq.n	db0a <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    db02:	2300      	movs	r3, #0
    vmsr fpscr, r3
    db04:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
    db08:	e003      	b.n	db12 <in_fp_endif>

0000db0a <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
    db0a:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
    db0e:	ec90 8a10 	vldmia	r0, {s16-s31}

0000db12 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    db12:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
    db16:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    db1a:	f383 8814 	msr	CONTROL, r3
    isb
    db1e:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    db22:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    db26:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    db2a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    db2e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    db32:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    db34:	f011 f80c 	bl	1eb50 <configure_builtin_stack_guard>
    pop {r2, lr}
    db38:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    db3c:	4770      	bx	lr
    db3e:	0000      	.short	0x0000
    ldr r1, =_kernel
    db40:	2000e2fc 	.word	0x2000e2fc
    ldr v4, =_SCS_ICSR
    db44:	e000ed04 	.word	0xe000ed04

0000db48 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    db48:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    db4c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    db4e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    db52:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    db56:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    db58:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    db5c:	2902      	cmp	r1, #2
    beq _oops
    db5e:	d0ff      	beq.n	db60 <_oops>

0000db60 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    db60:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    db62:	f010 ffe6 	bl	1eb32 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    db66:	bd01      	pop	{r0, pc}

0000db68 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    db68:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    db6c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    db6e:	490d      	ldr	r1, [pc, #52]	; (dba4 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
    db70:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    db74:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    db76:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    db7a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    db7e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    db80:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    db84:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    db88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    db8c:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    db90:	2300      	movs	r3, #0
    db92:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    db94:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    db98:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    db9a:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    db9c:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    dba0:	4770      	bx	lr
    dba2:	bf00      	nop
    dba4:	0001e111 	.word	0x0001e111

0000dba8 <arch_switch_to_main_thread>:
    dba8:	2300      	movs	r3, #0
    dbaa:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    dbae:	f3ef 8314 	mrs	r3, CONTROL
#else
	__set_FPSCR(0);
#endif
#if defined(CONFIG_CPU_CORTEX_M) && defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    dbb2:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    dbb6:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    dbba:	f3bf 8f6f 	isb	sy
    dbbe:	f3bf 8f6f 	isb	sy
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    dbc2:	4b09      	ldr	r3, [pc, #36]	; (dbe8 <arch_switch_to_main_thread+0x40>)
    dbc4:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    dbc6:	6e83      	ldr	r3, [r0, #104]	; 0x68
    dbc8:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    dbcc:	4610      	mov	r0, r2
    dbce:	f381 8809 	msr	PSP, r1
    dbd2:	2100      	movs	r1, #0
    dbd4:	b663      	cpsie	if
    dbd6:	f381 8811 	msr	BASEPRI, r1
    dbda:	f3bf 8f6f 	isb	sy
    dbde:	2200      	movs	r2, #0
    dbe0:	2300      	movs	r3, #0
    dbe2:	f010 fa95 	bl	1e110 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    dbe6:	bf00      	nop
    dbe8:	2000e2fc 	.word	0x2000e2fc

0000dbec <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    dbec:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    dbee:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    dbf0:	4a0b      	ldr	r2, [pc, #44]	; (dc20 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    dbf2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    dbf4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    dbf6:	bf1e      	ittt	ne
	movne	r1, #0
    dbf8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    dbfa:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    dbfc:	f013 fc27 	blne	2144e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    dc00:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    dc02:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    dc06:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    dc0a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    dc0e:	4905      	ldr	r1, [pc, #20]	; (dc24 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    dc10:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    dc12:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    dc14:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    dc16:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    dc1a:	4903      	ldr	r1, [pc, #12]	; (dc28 <_isr_wrapper+0x3c>)
	bx r1
    dc1c:	4708      	bx	r1
    dc1e:	0000      	.short	0x0000
	ldr r2, =_kernel
    dc20:	2000e2fc 	.word	0x2000e2fc
	ldr r1, =_sw_isr_table
    dc24:	00022ca8 	.word	0x00022ca8
	ldr r1, =z_arm_int_exit
    dc28:	0000dc2d 	.word	0x0000dc2d

0000dc2c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    dc2c:	4b04      	ldr	r3, [pc, #16]	; (dc40 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    dc2e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    dc30:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    dc32:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    dc34:	d003      	beq.n	dc3e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    dc36:	4903      	ldr	r1, [pc, #12]	; (dc44 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    dc38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    dc3c:	600a      	str	r2, [r1, #0]

0000dc3e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    dc3e:	4770      	bx	lr
	ldr r3, =_kernel
    dc40:	2000e2fc 	.word	0x2000e2fc
	ldr r1, =_SCS_ICSR
    dc44:	e000ed04 	.word	0xe000ed04

0000dc48 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dc48:	b5f0      	push	{r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    dc4a:	2400      	movs	r4, #0
    dc4c:	4b41      	ldr	r3, [pc, #260]	; (dd54 <mem_manage_fault.constprop.0+0x10c>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dc4e:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    dc50:	9302      	str	r3, [sp, #8]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dc52:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    dc54:	4623      	mov	r3, r4
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dc56:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    dc58:	2201      	movs	r2, #1
    dc5a:	4620      	mov	r0, r4
    dc5c:	e9cd 4400 	strd	r4, r4, [sp]
    dc60:	493d      	ldr	r1, [pc, #244]	; (dd58 <mem_manage_fault.constprop.0+0x110>)
    dc62:	f010 ff79 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dc66:	4b3d      	ldr	r3, [pc, #244]	; (dd5c <mem_manage_fault.constprop.0+0x114>)
    dc68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dc6a:	06dd      	lsls	r5, r3, #27
    dc6c:	d56f      	bpl.n	dd4e <mem_manage_fault.constprop.0+0x106>
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
    dc6e:	4b3c      	ldr	r3, [pc, #240]	; (dd60 <mem_manage_fault.constprop.0+0x118>)
    dc70:	4620      	mov	r0, r4
    dc72:	e9cd 4301 	strd	r4, r3, [sp, #4]
    dc76:	2201      	movs	r2, #1
    dc78:	4623      	mov	r3, r4
    dc7a:	4937      	ldr	r1, [pc, #220]	; (dd58 <mem_manage_fault.constprop.0+0x110>)
    dc7c:	9400      	str	r4, [sp, #0]
    dc7e:	f010 ff6b 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_MEM_STACKING;
    dc82:	2011      	movs	r0, #17
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    dc84:	4b35      	ldr	r3, [pc, #212]	; (dd5c <mem_manage_fault.constprop.0+0x114>)
    dc86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dc88:	071c      	lsls	r4, r3, #28
    dc8a:	d50a      	bpl.n	dca2 <mem_manage_fault.constprop.0+0x5a>
		reason = K_ERR_ARM_MEM_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    dc8c:	4b35      	ldr	r3, [pc, #212]	; (dd64 <mem_manage_fault.constprop.0+0x11c>)
    dc8e:	2201      	movs	r2, #1
    dc90:	9302      	str	r3, [sp, #8]
    dc92:	2300      	movs	r3, #0
    dc94:	4930      	ldr	r1, [pc, #192]	; (dd58 <mem_manage_fault.constprop.0+0x110>)
    dc96:	4618      	mov	r0, r3
    dc98:	e9cd 3300 	strd	r3, r3, [sp]
    dc9c:	f010 ff5c 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    dca0:	2012      	movs	r0, #18
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    dca2:	4d2e      	ldr	r5, [pc, #184]	; (dd5c <mem_manage_fault.constprop.0+0x114>)
    dca4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dca6:	0799      	lsls	r1, r3, #30
    dca8:	d51f      	bpl.n	dcea <mem_manage_fault.constprop.0+0xa2>
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
		PR_FAULT_INFO("  Data Access Violation");
    dcaa:	2400      	movs	r4, #0
    dcac:	4b2e      	ldr	r3, [pc, #184]	; (dd68 <mem_manage_fault.constprop.0+0x120>)
    dcae:	2201      	movs	r2, #1
    dcb0:	9302      	str	r3, [sp, #8]
    dcb2:	4620      	mov	r0, r4
    dcb4:	4623      	mov	r3, r4
    dcb6:	e9cd 4400 	strd	r4, r4, [sp]
    dcba:	4927      	ldr	r1, [pc, #156]	; (dd58 <mem_manage_fault.constprop.0+0x110>)
    dcbc:	f010 ff4c 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    dcc0:	6b6b      	ldr	r3, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    dcc2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    dcc4:	0612      	lsls	r2, r2, #24
    dcc6:	d50f      	bpl.n	dce8 <mem_manage_fault.constprop.0+0xa0>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    dcc8:	9303      	str	r3, [sp, #12]
    dcca:	4b28      	ldr	r3, [pc, #160]	; (dd6c <mem_manage_fault.constprop.0+0x124>)
    dccc:	2201      	movs	r2, #1
    dcce:	e9cd 4301 	strd	r4, r3, [sp, #4]
    dcd2:	4620      	mov	r0, r4
    dcd4:	4623      	mov	r3, r4
    dcd6:	4920      	ldr	r1, [pc, #128]	; (dd58 <mem_manage_fault.constprop.0+0x110>)
    dcd8:	9400      	str	r4, [sp, #0]
    dcda:	f010 ff3d 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    dcde:	b11f      	cbz	r7, dce8 <mem_manage_fault.constprop.0+0xa0>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    dce0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    dce6:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    dce8:	2013      	movs	r0, #19
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    dcea:	4b1c      	ldr	r3, [pc, #112]	; (dd5c <mem_manage_fault.constprop.0+0x114>)
    dcec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dcee:	07dd      	lsls	r5, r3, #31
    dcf0:	d50a      	bpl.n	dd08 <mem_manage_fault.constprop.0+0xc0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
		PR_FAULT_INFO("  Instruction Access Violation");
    dcf2:	4b1f      	ldr	r3, [pc, #124]	; (dd70 <mem_manage_fault.constprop.0+0x128>)
    dcf4:	2201      	movs	r2, #1
    dcf6:	9302      	str	r3, [sp, #8]
    dcf8:	2300      	movs	r3, #0
    dcfa:	4917      	ldr	r1, [pc, #92]	; (dd58 <mem_manage_fault.constprop.0+0x110>)
    dcfc:	4618      	mov	r0, r3
    dcfe:	e9cd 3300 	strd	r3, r3, [sp]
    dd02:	f010 ff29 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    dd06:	2014      	movs	r0, #20
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    dd08:	4b14      	ldr	r3, [pc, #80]	; (dd5c <mem_manage_fault.constprop.0+0x114>)
    dd0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd0c:	069c      	lsls	r4, r3, #26
    dd0e:	d50a      	bpl.n	dd26 <mem_manage_fault.constprop.0+0xde>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
		PR_FAULT_INFO(
    dd10:	4b18      	ldr	r3, [pc, #96]	; (dd74 <mem_manage_fault.constprop.0+0x12c>)
    dd12:	2201      	movs	r2, #1
    dd14:	9302      	str	r3, [sp, #8]
    dd16:	2300      	movs	r3, #0
    dd18:	490f      	ldr	r1, [pc, #60]	; (dd58 <mem_manage_fault.constprop.0+0x110>)
    dd1a:	4618      	mov	r0, r3
    dd1c:	e9cd 3300 	strd	r3, r3, [sp]
    dd20:	f010 ff1a 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    dd24:	2015      	movs	r0, #21
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    dd26:	4b0d      	ldr	r3, [pc, #52]	; (dd5c <mem_manage_fault.constprop.0+0x114>)
    dd28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dd2a:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    dd2c:	bf58      	it	pl
    dd2e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    dd30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dd32:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    dd34:	bf42      	ittt	mi
    dd36:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    dd38:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    dd3c:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    dd3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dd40:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    dd44:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    dd46:	2300      	movs	r3, #0
    dd48:	7033      	strb	r3, [r6, #0]

	return reason;
}
    dd4a:	b005      	add	sp, #20
    dd4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    dd4e:	2010      	movs	r0, #16
    dd50:	e798      	b.n	dc84 <mem_manage_fault.constprop.0+0x3c>
    dd52:	bf00      	nop
    dd54:	0002414d 	.word	0x0002414d
    dd58:	0002303c 	.word	0x0002303c
    dd5c:	e000ed00 	.word	0xe000ed00
    dd60:	00024163 	.word	0x00024163
    dd64:	00024196 	.word	0x00024196
    dd68:	000241a9 	.word	0x000241a9
    dd6c:	000241c1 	.word	0x000241c1
    dd70:	000241d7 	.word	0x000241d7
    dd74:	000241f6 	.word	0x000241f6

0000dd78 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dd78:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    dd7a:	2400      	movs	r4, #0
    dd7c:	4b43      	ldr	r3, [pc, #268]	; (de8c <bus_fault.constprop.0+0x114>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dd7e:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** BUS FAULT *****");
    dd80:	9302      	str	r3, [sp, #8]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dd82:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    dd84:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dd86:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    dd88:	2201      	movs	r2, #1
    dd8a:	4620      	mov	r0, r4
    dd8c:	e9cd 4400 	strd	r4, r4, [sp]
    dd90:	493f      	ldr	r1, [pc, #252]	; (de90 <bus_fault.constprop.0+0x118>)
    dd92:	f010 fee1 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    dd96:	4b3f      	ldr	r3, [pc, #252]	; (de94 <bus_fault.constprop.0+0x11c>)
    dd98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd9a:	04db      	lsls	r3, r3, #19
    dd9c:	d565      	bpl.n	de6a <bus_fault.constprop.0+0xf2>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    dd9e:	4b3e      	ldr	r3, [pc, #248]	; (de98 <bus_fault.constprop.0+0x120>)
    dda0:	4620      	mov	r0, r4
    dda2:	e9cd 4301 	strd	r4, r3, [sp, #4]
    dda6:	2201      	movs	r2, #1
    dda8:	4623      	mov	r3, r4
    ddaa:	4939      	ldr	r1, [pc, #228]	; (de90 <bus_fault.constprop.0+0x118>)
    ddac:	9400      	str	r4, [sp, #0]
    ddae:	f010 fed3 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    ddb2:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    ddb4:	4b37      	ldr	r3, [pc, #220]	; (de94 <bus_fault.constprop.0+0x11c>)
    ddb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ddb8:	051d      	lsls	r5, r3, #20
    ddba:	d50a      	bpl.n	ddd2 <bus_fault.constprop.0+0x5a>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    ddbc:	4b37      	ldr	r3, [pc, #220]	; (de9c <bus_fault.constprop.0+0x124>)
    ddbe:	2201      	movs	r2, #1
    ddc0:	9302      	str	r3, [sp, #8]
    ddc2:	2300      	movs	r3, #0
    ddc4:	4932      	ldr	r1, [pc, #200]	; (de90 <bus_fault.constprop.0+0x118>)
    ddc6:	4618      	mov	r0, r3
    ddc8:	e9cd 3300 	strd	r3, r3, [sp]
    ddcc:	f010 fec4 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    ddd0:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    ddd2:	4d30      	ldr	r5, [pc, #192]	; (de94 <bus_fault.constprop.0+0x11c>)
    ddd4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ddd6:	059c      	lsls	r4, r3, #22
    ddd8:	d51f      	bpl.n	de1a <bus_fault.constprop.0+0xa2>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    ddda:	2400      	movs	r4, #0
    dddc:	4b30      	ldr	r3, [pc, #192]	; (dea0 <bus_fault.constprop.0+0x128>)
    ddde:	2201      	movs	r2, #1
    dde0:	4620      	mov	r0, r4
    dde2:	9302      	str	r3, [sp, #8]
    dde4:	e9cd 4400 	strd	r4, r4, [sp]
    dde8:	4623      	mov	r3, r4
    ddea:	4929      	ldr	r1, [pc, #164]	; (de90 <bus_fault.constprop.0+0x118>)
    ddec:	f010 feb4 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    ddf0:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    ddf2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    ddf4:	0410      	lsls	r0, r2, #16
    ddf6:	d50f      	bpl.n	de18 <bus_fault.constprop.0+0xa0>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    ddf8:	9303      	str	r3, [sp, #12]
    ddfa:	4b2a      	ldr	r3, [pc, #168]	; (dea4 <bus_fault.constprop.0+0x12c>)
    ddfc:	2201      	movs	r2, #1
    ddfe:	e9cd 4301 	strd	r4, r3, [sp, #4]
    de02:	4620      	mov	r0, r4
    de04:	4623      	mov	r3, r4
    de06:	4922      	ldr	r1, [pc, #136]	; (de90 <bus_fault.constprop.0+0x118>)
    de08:	9400      	str	r4, [sp, #0]
    de0a:	f010 fea5 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    de0e:	b11f      	cbz	r7, de18 <bus_fault.constprop.0+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    de10:	6aab      	ldr	r3, [r5, #40]	; 0x28
    de12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    de16:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    de18:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    de1a:	4b1e      	ldr	r3, [pc, #120]	; (de94 <bus_fault.constprop.0+0x11c>)
    de1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    de1e:	0559      	lsls	r1, r3, #21
    de20:	d50a      	bpl.n	de38 <bus_fault.constprop.0+0xc0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    de22:	4b21      	ldr	r3, [pc, #132]	; (dea8 <bus_fault.constprop.0+0x130>)
    de24:	2201      	movs	r2, #1
    de26:	9302      	str	r3, [sp, #8]
    de28:	2300      	movs	r3, #0
    de2a:	4919      	ldr	r1, [pc, #100]	; (de90 <bus_fault.constprop.0+0x118>)
    de2c:	4618      	mov	r0, r3
    de2e:	e9cd 3300 	strd	r3, r3, [sp]
    de32:	f010 fe91 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    de36:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    de38:	4a16      	ldr	r2, [pc, #88]	; (de94 <bus_fault.constprop.0+0x11c>)
    de3a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    de3c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    de40:	d015      	beq.n	de6e <bus_fault.constprop.0+0xf6>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    de42:	4b1a      	ldr	r3, [pc, #104]	; (deac <bus_fault.constprop.0+0x134>)
    de44:	2201      	movs	r2, #1
    de46:	9302      	str	r3, [sp, #8]
    de48:	2300      	movs	r3, #0
    de4a:	4911      	ldr	r1, [pc, #68]	; (de90 <bus_fault.constprop.0+0x118>)
    de4c:	4618      	mov	r0, r3
    de4e:	e9cd 3300 	strd	r3, r3, [sp]
    de52:	f010 fe81 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    de56:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    de58:	4a0e      	ldr	r2, [pc, #56]	; (de94 <bus_fault.constprop.0+0x11c>)
    de5a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    de5c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    de60:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    de62:	2300      	movs	r3, #0
    de64:	7033      	strb	r3, [r6, #0]

	return reason;
}
    de66:	b005      	add	sp, #20
    de68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    de6a:	2016      	movs	r0, #22
    de6c:	e7a2      	b.n	ddb4 <bus_fault.constprop.0+0x3c>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    de6e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    de70:	0492      	lsls	r2, r2, #18
    de72:	d5f1      	bpl.n	de58 <bus_fault.constprop.0+0xe0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    de74:	4a0e      	ldr	r2, [pc, #56]	; (deb0 <bus_fault.constprop.0+0x138>)
    de76:	4618      	mov	r0, r3
    de78:	e9cd 3201 	strd	r3, r2, [sp, #4]
    de7c:	4904      	ldr	r1, [pc, #16]	; (de90 <bus_fault.constprop.0+0x118>)
    de7e:	2201      	movs	r2, #1
    de80:	9300      	str	r3, [sp, #0]
    de82:	f010 fe69 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    de86:	201c      	movs	r0, #28
    de88:	e7e6      	b.n	de58 <bus_fault.constprop.0+0xe0>
    de8a:	bf00      	nop
    de8c:	00024225 	.word	0x00024225
    de90:	0002303c 	.word	0x0002303c
    de94:	e000ed00 	.word	0xe000ed00
    de98:	0002423b 	.word	0x0002423b
    de9c:	00024196 	.word	0x00024196
    dea0:	0002424c 	.word	0x0002424c
    dea4:	00024265 	.word	0x00024265
    dea8:	0002427a 	.word	0x0002427a
    deac:	00024295 	.word	0x00024295
    deb0:	000241f6 	.word	0x000241f6

0000deb4 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    deb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    deb6:	2400      	movs	r4, #0
    deb8:	4b3e      	ldr	r3, [pc, #248]	; (dfb4 <usage_fault.constprop.0+0x100>)
    deba:	493f      	ldr	r1, [pc, #252]	; (dfb8 <usage_fault.constprop.0+0x104>)
    debc:	9302      	str	r3, [sp, #8]
    debe:	2201      	movs	r2, #1
    dec0:	4623      	mov	r3, r4
    dec2:	4620      	mov	r0, r4
    dec4:	e9cd 4400 	strd	r4, r4, [sp]
    dec8:	f010 fe46 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    decc:	4b3b      	ldr	r3, [pc, #236]	; (dfbc <usage_fault.constprop.0+0x108>)
    dece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ded0:	0199      	lsls	r1, r3, #6
    ded2:	d56d      	bpl.n	dfb0 <usage_fault.constprop.0+0xfc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    ded4:	4b3a      	ldr	r3, [pc, #232]	; (dfc0 <usage_fault.constprop.0+0x10c>)
    ded6:	4620      	mov	r0, r4
    ded8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    dedc:	2201      	movs	r2, #1
    dede:	4623      	mov	r3, r4
    dee0:	4935      	ldr	r1, [pc, #212]	; (dfb8 <usage_fault.constprop.0+0x104>)
    dee2:	9400      	str	r4, [sp, #0]
    dee4:	f010 fe38 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    dee8:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    deea:	4b34      	ldr	r3, [pc, #208]	; (dfbc <usage_fault.constprop.0+0x108>)
    deec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    deee:	01da      	lsls	r2, r3, #7
    def0:	d50a      	bpl.n	df08 <usage_fault.constprop.0+0x54>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    def2:	4b34      	ldr	r3, [pc, #208]	; (dfc4 <usage_fault.constprop.0+0x110>)
    def4:	2201      	movs	r2, #1
    def6:	9302      	str	r3, [sp, #8]
    def8:	2300      	movs	r3, #0
    defa:	492f      	ldr	r1, [pc, #188]	; (dfb8 <usage_fault.constprop.0+0x104>)
    defc:	4618      	mov	r0, r3
    defe:	e9cd 3300 	strd	r3, r3, [sp]
    df02:	f010 fe29 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    df06:	201f      	movs	r0, #31
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    df08:	4b2c      	ldr	r3, [pc, #176]	; (dfbc <usage_fault.constprop.0+0x108>)
    df0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df0c:	02db      	lsls	r3, r3, #11
    df0e:	d50a      	bpl.n	df26 <usage_fault.constprop.0+0x72>
		reason = K_ERR_ARM_USAGE_STACK_OVERFLOW;
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    df10:	4b2d      	ldr	r3, [pc, #180]	; (dfc8 <usage_fault.constprop.0+0x114>)
    df12:	2201      	movs	r2, #1
    df14:	9302      	str	r3, [sp, #8]
    df16:	2300      	movs	r3, #0
    df18:	4927      	ldr	r1, [pc, #156]	; (dfb8 <usage_fault.constprop.0+0x104>)
    df1a:	4618      	mov	r0, r3
    df1c:	e9cd 3300 	strd	r3, r3, [sp]
    df20:	f010 fe1a 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    df24:	2002      	movs	r0, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    df26:	4b25      	ldr	r3, [pc, #148]	; (dfbc <usage_fault.constprop.0+0x108>)
    df28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df2a:	031c      	lsls	r4, r3, #12
    df2c:	d50a      	bpl.n	df44 <usage_fault.constprop.0+0x90>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    df2e:	4b27      	ldr	r3, [pc, #156]	; (dfcc <usage_fault.constprop.0+0x118>)
    df30:	2201      	movs	r2, #1
    df32:	9302      	str	r3, [sp, #8]
    df34:	2300      	movs	r3, #0
    df36:	4920      	ldr	r1, [pc, #128]	; (dfb8 <usage_fault.constprop.0+0x104>)
    df38:	4618      	mov	r0, r3
    df3a:	e9cd 3300 	strd	r3, r3, [sp]
    df3e:	f010 fe0b 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    df42:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    df44:	4b1d      	ldr	r3, [pc, #116]	; (dfbc <usage_fault.constprop.0+0x108>)
    df46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df48:	0359      	lsls	r1, r3, #13
    df4a:	d50a      	bpl.n	df62 <usage_fault.constprop.0+0xae>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    df4c:	4b20      	ldr	r3, [pc, #128]	; (dfd0 <usage_fault.constprop.0+0x11c>)
    df4e:	2201      	movs	r2, #1
    df50:	9302      	str	r3, [sp, #8]
    df52:	2300      	movs	r3, #0
    df54:	4918      	ldr	r1, [pc, #96]	; (dfb8 <usage_fault.constprop.0+0x104>)
    df56:	4618      	mov	r0, r3
    df58:	e9cd 3300 	strd	r3, r3, [sp]
    df5c:	f010 fdfc 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    df60:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    df62:	4b16      	ldr	r3, [pc, #88]	; (dfbc <usage_fault.constprop.0+0x108>)
    df64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df66:	039a      	lsls	r2, r3, #14
    df68:	d50a      	bpl.n	df80 <usage_fault.constprop.0+0xcc>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    df6a:	4b1a      	ldr	r3, [pc, #104]	; (dfd4 <usage_fault.constprop.0+0x120>)
    df6c:	2201      	movs	r2, #1
    df6e:	9302      	str	r3, [sp, #8]
    df70:	2300      	movs	r3, #0
    df72:	4911      	ldr	r1, [pc, #68]	; (dfb8 <usage_fault.constprop.0+0x104>)
    df74:	4618      	mov	r0, r3
    df76:	e9cd 3300 	strd	r3, r3, [sp]
    df7a:	f010 fded 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    df7e:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    df80:	4b0e      	ldr	r3, [pc, #56]	; (dfbc <usage_fault.constprop.0+0x108>)
    df82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df84:	03db      	lsls	r3, r3, #15
    df86:	d50a      	bpl.n	df9e <usage_fault.constprop.0+0xea>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    df88:	4b13      	ldr	r3, [pc, #76]	; (dfd8 <usage_fault.constprop.0+0x124>)
    df8a:	2201      	movs	r2, #1
    df8c:	9302      	str	r3, [sp, #8]
    df8e:	2300      	movs	r3, #0
    df90:	4909      	ldr	r1, [pc, #36]	; (dfb8 <usage_fault.constprop.0+0x104>)
    df92:	4618      	mov	r0, r3
    df94:	e9cd 3300 	strd	r3, r3, [sp]
    df98:	f010 fdde 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    df9c:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    df9e:	4a07      	ldr	r2, [pc, #28]	; (dfbc <usage_fault.constprop.0+0x108>)
    dfa0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dfa2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    dfa6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    dfaa:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    dfac:	b004      	add	sp, #16
    dfae:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    dfb0:	201d      	movs	r0, #29
    dfb2:	e79a      	b.n	deea <usage_fault.constprop.0+0x36>
    dfb4:	000242ad 	.word	0x000242ad
    dfb8:	0002303c 	.word	0x0002303c
    dfbc:	e000ed00 	.word	0xe000ed00
    dfc0:	000242c5 	.word	0x000242c5
    dfc4:	000242d8 	.word	0x000242d8
    dfc8:	000242f2 	.word	0x000242f2
    dfcc:	0002431c 	.word	0x0002431c
    dfd0:	0002433a 	.word	0x0002433a
    dfd4:	0002435f 	.word	0x0002435f
    dfd8:	00024379 	.word	0x00024379

0000dfdc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    dfdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dfe0:	4b75      	ldr	r3, [pc, #468]	; (e1b8 <z_arm_fault+0x1dc>)
{
    dfe2:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dfe4:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    dfe8:	4689      	mov	r9, r1
    dfea:	4614      	mov	r4, r2
    dfec:	2600      	movs	r6, #0
    dfee:	b0a3      	sub	sp, #140	; 0x8c
    dff0:	f3c8 0708 	ubfx	r7, r8, #0, #9
    dff4:	f386 8811 	msr	BASEPRI, r6
    dff8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    dffc:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    e000:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    e004:	d125      	bne.n	e052 <z_arm_fault+0x76>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    e006:	f012 0301 	ands.w	r3, r2, #1
    e00a:	d122      	bne.n	e052 <z_arm_fault+0x76>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    e00c:	0651      	lsls	r1, r2, #25
    e00e:	d403      	bmi.n	e018 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    e010:	0722      	lsls	r2, r4, #28
    e012:	d40d      	bmi.n	e030 <z_arm_fault+0x54>
			*nested_exc = true;
    e014:	2601      	movs	r6, #1
    e016:	e00d      	b.n	e034 <z_arm_fault+0x58>
		PR_FAULT_INFO("Exception occurred in Secure State");
    e018:	4a68      	ldr	r2, [pc, #416]	; (e1bc <z_arm_fault+0x1e0>)
    e01a:	4618      	mov	r0, r3
    e01c:	e9cd 3201 	strd	r3, r2, [sp, #4]
    e020:	4967      	ldr	r1, [pc, #412]	; (e1c0 <z_arm_fault+0x1e4>)
    e022:	2201      	movs	r2, #1
    e024:	9300      	str	r3, [sp, #0]
    e026:	f010 fd97 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    e02a:	f014 0404 	ands.w	r4, r4, #4
    e02e:	d000      	beq.n	e032 <z_arm_fault+0x56>
			ptr_esf = (z_arch_esf_t *)psp;
    e030:	464d      	mov	r5, r9
	*nested_exc = false;
    e032:	2600      	movs	r6, #0
	*recoverable = false;
    e034:	f04f 0900 	mov.w	r9, #0
	switch (fault) {
    e038:	1efb      	subs	r3, r7, #3
	*recoverable = false;
    e03a:	f88d 901f 	strb.w	r9, [sp, #31]
	switch (fault) {
    e03e:	2b09      	cmp	r3, #9
    e040:	f200 80a0 	bhi.w	e184 <z_arm_fault+0x1a8>
    e044:	e8df f003 	tbb	[pc, r3]
    e048:	90989407 	.word	0x90989407
    e04c:	9e9e9e9e 	.word	0x9e9e9e9e
    e050:	9c9e      	.short	0x9c9e
		return NULL;
    e052:	4635      	mov	r5, r6
    e054:	e7ee      	b.n	e034 <z_arm_fault+0x58>
	PR_FAULT_INFO("***** HARD FAULT *****");
    e056:	4b5b      	ldr	r3, [pc, #364]	; (e1c4 <z_arm_fault+0x1e8>)
    e058:	2201      	movs	r2, #1
    e05a:	e9cd 9301 	strd	r9, r3, [sp, #4]
    e05e:	2300      	movs	r3, #0
    e060:	4957      	ldr	r1, [pc, #348]	; (e1c0 <z_arm_fault+0x1e4>)
    e062:	4618      	mov	r0, r3
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e064:	4f54      	ldr	r7, [pc, #336]	; (e1b8 <z_arm_fault+0x1dc>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    e066:	f8cd 9000 	str.w	r9, [sp]
    e06a:	f010 fd75 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
	*recoverable = false;
    e06e:	f88d 901f 	strb.w	r9, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e072:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    e074:	f014 0402 	ands.w	r4, r4, #2
    e078:	d005      	beq.n	e086 <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
    e07a:	4b53      	ldr	r3, [pc, #332]	; (e1c8 <z_arm_fault+0x1ec>)
	PR_FAULT_INFO(
    e07c:	e9cd 9301 	strd	r9, r3, [sp, #4]
    e080:	f8cd 9000 	str.w	r9, [sp]
    e084:	e006      	b.n	e094 <z_arm_fault+0xb8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    e086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e088:	2b00      	cmp	r3, #0
    e08a:	da0b      	bge.n	e0a4 <z_arm_fault+0xc8>
		PR_EXC("  Debug event");
    e08c:	4b4f      	ldr	r3, [pc, #316]	; (e1cc <z_arm_fault+0x1f0>)
    e08e:	9400      	str	r4, [sp, #0]
    e090:	e9cd 4301 	strd	r4, r3, [sp, #4]
	PR_FAULT_INFO(
    e094:	2300      	movs	r3, #0
    e096:	2201      	movs	r2, #1
    e098:	4618      	mov	r0, r3
    e09a:	4949      	ldr	r1, [pc, #292]	; (e1c0 <z_arm_fault+0x1e4>)
    e09c:	f010 fd5c 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    e0a0:	2400      	movs	r4, #0
    e0a2:	e030      	b.n	e106 <z_arm_fault+0x12a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    e0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e0a6:	005b      	lsls	r3, r3, #1
    e0a8:	d5fa      	bpl.n	e0a0 <z_arm_fault+0xc4>
		PR_EXC("  Fault escalation (see below)");
    e0aa:	4b49      	ldr	r3, [pc, #292]	; (e1d0 <z_arm_fault+0x1f4>)
    e0ac:	2201      	movs	r2, #1
    e0ae:	e9cd 4301 	strd	r4, r3, [sp, #4]
    e0b2:	4620      	mov	r0, r4
    e0b4:	4623      	mov	r3, r4
    e0b6:	4942      	ldr	r1, [pc, #264]	; (e1c0 <z_arm_fault+0x1e4>)
    e0b8:	9400      	str	r4, [sp, #0]
    e0ba:	f010 fd4d 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    e0be:	697b      	ldr	r3, [r7, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    e0c0:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    e0c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e0c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    e0c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e0cc:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    e0d0:	697b      	ldr	r3, [r7, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    e0d2:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    e0d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    e0da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    e0dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e0e0:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    e0e4:	f64d 7302 	movw	r3, #57090	; 0xdf02
    e0e8:	429a      	cmp	r2, r3
    e0ea:	d126      	bne.n	e13a <z_arm_fault+0x15e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    e0ec:	682b      	ldr	r3, [r5, #0]
    e0ee:	4620      	mov	r0, r4
    e0f0:	9303      	str	r3, [sp, #12]
    e0f2:	4b38      	ldr	r3, [pc, #224]	; (e1d4 <z_arm_fault+0x1f8>)
    e0f4:	9400      	str	r4, [sp, #0]
    e0f6:	e9cd 4301 	strd	r4, r3, [sp, #4]
    e0fa:	2201      	movs	r2, #1
    e0fc:	4623      	mov	r3, r4
    e0fe:	4930      	ldr	r1, [pc, #192]	; (e1c0 <z_arm_fault+0x1e4>)
    e100:	f010 fd2a 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
    e104:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    e106:	f89d 301f 	ldrb.w	r3, [sp, #31]
    e10a:	b99b      	cbnz	r3, e134 <z_arm_fault+0x158>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    e10c:	2268      	movs	r2, #104	; 0x68
    e10e:	4629      	mov	r1, r5
    e110:	a808      	add	r0, sp, #32
    e112:	f013 fdb1 	bl	21c78 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    e116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e118:	2e00      	cmp	r6, #0
    e11a:	d047      	beq.n	e1ac <z_arm_fault+0x1d0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    e11c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    e120:	b922      	cbnz	r2, e12c <z_arm_fault+0x150>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    e122:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    e126:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e12a:	930f      	str	r3, [sp, #60]	; 0x3c

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    e12c:	4620      	mov	r0, r4
    e12e:	a908      	add	r1, sp, #32
    e130:	f7ff fbae 	bl	d890 <z_arm_fatal_error>
}
    e134:	b023      	add	sp, #140	; 0x8c
    e136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    e13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e13c:	b2db      	uxtb	r3, r3
    e13e:	b12b      	cbz	r3, e14c <z_arm_fault+0x170>
			reason = mem_manage_fault(esf, 1, recoverable);
    e140:	2001      	movs	r0, #1
    e142:	f10d 011f 	add.w	r1, sp, #31
		reason = mem_manage_fault(esf, 0, recoverable);
    e146:	f7ff fd7f 	bl	dc48 <mem_manage_fault.constprop.0>
    e14a:	e00f      	b.n	e16c <z_arm_fault+0x190>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    e14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e14e:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    e152:	d005      	beq.n	e160 <z_arm_fault+0x184>
			reason = bus_fault(esf, 1, recoverable);
    e154:	2001      	movs	r0, #1
    e156:	f10d 011f 	add.w	r1, sp, #31
		reason = bus_fault(esf, 0, recoverable);
    e15a:	f7ff fe0d 	bl	dd78 <bus_fault.constprop.0>
    e15e:	e005      	b.n	e16c <z_arm_fault+0x190>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    e160:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    e166:	d39b      	bcc.n	e0a0 <z_arm_fault+0xc4>
			reason = usage_fault(esf);
    e168:	f7ff fea4 	bl	deb4 <usage_fault.constprop.0>
    e16c:	4604      	mov	r4, r0
    e16e:	e7ca      	b.n	e106 <z_arm_fault+0x12a>
		reason = mem_manage_fault(esf, 0, recoverable);
    e170:	2000      	movs	r0, #0
    e172:	f10d 011f 	add.w	r1, sp, #31
    e176:	e7e6      	b.n	e146 <z_arm_fault+0x16a>
		reason = bus_fault(esf, 0, recoverable);
    e178:	2000      	movs	r0, #0
    e17a:	f10d 011f 	add.w	r1, sp, #31
    e17e:	e7ec      	b.n	e15a <z_arm_fault+0x17e>
	PR_FAULT_INFO(
    e180:	4b15      	ldr	r3, [pc, #84]	; (e1d8 <z_arm_fault+0x1fc>)
    e182:	e77b      	b.n	e07c <z_arm_fault+0xa0>
	PR_FAULT_INFO("***** %s %d) *****",
    e184:	4a15      	ldr	r2, [pc, #84]	; (e1dc <z_arm_fault+0x200>)
    e186:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    e18a:	4b15      	ldr	r3, [pc, #84]	; (e1e0 <z_arm_fault+0x204>)
    e18c:	bf18      	it	ne
    e18e:	4613      	movne	r3, r2
    e190:	3f10      	subs	r7, #16
    e192:	e9cd 3703 	strd	r3, r7, [sp, #12]
    e196:	4b13      	ldr	r3, [pc, #76]	; (e1e4 <z_arm_fault+0x208>)
    e198:	2201      	movs	r2, #1
    e19a:	9302      	str	r3, [sp, #8]
    e19c:	2300      	movs	r3, #0
    e19e:	4908      	ldr	r1, [pc, #32]	; (e1c0 <z_arm_fault+0x1e4>)
    e1a0:	4618      	mov	r0, r3
    e1a2:	e9cd 3300 	strd	r3, r3, [sp]
    e1a6:	f010 fcd7 	bl	1eb58 <z_log_msg_runtime_create.constprop.0>
}
    e1aa:	e779      	b.n	e0a0 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e1ac:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    e1b0:	f023 0301 	bic.w	r3, r3, #1
    e1b4:	e7b9      	b.n	e12a <z_arm_fault+0x14e>
    e1b6:	bf00      	nop
    e1b8:	e000ed00 	.word	0xe000ed00
    e1bc:	000243d2 	.word	0x000243d2
    e1c0:	0002303c 	.word	0x0002303c
    e1c4:	000243f5 	.word	0x000243f5
    e1c8:	0002440c 	.word	0x0002440c
    e1cc:	0002442d 	.word	0x0002442d
    e1d0:	0002443b 	.word	0x0002443b
    e1d4:	0002445a 	.word	0x0002445a
    e1d8:	00024476 	.word	0x00024476
    e1dc:	000243b9 	.word	0x000243b9
    e1e0:	000243a4 	.word	0x000243a4
    e1e4:	0002449a 	.word	0x0002449a

0000e1e8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e1e8:	4b04      	ldr	r3, [pc, #16]	; (e1fc <z_arm_fault_init+0x14>)
    e1ea:	695a      	ldr	r2, [r3, #20]
    e1ec:	f042 0210 	orr.w	r2, r2, #16
    e1f0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    e1f2:	695a      	ldr	r2, [r3, #20]
    e1f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    e1f8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    e1fa:	4770      	bx	lr
    e1fc:	e000ed00 	.word	0xe000ed00

0000e200 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    e200:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    e204:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    e208:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    e20a:	4672      	mov	r2, lr
	bl z_arm_fault
    e20c:	f7ff fee6 	bl	dfdc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    e210:	bd01      	pop	{r0, pc}
    e212:	bf00      	nop

0000e214 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    e214:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e216:	2120      	movs	r1, #32
    e218:	4803      	ldr	r0, [pc, #12]	; (e228 <z_arm_interrupt_init+0x14>)
    e21a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e21c:	3301      	adds	r3, #1
    e21e:	2b41      	cmp	r3, #65	; 0x41
    e220:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e224:	d1f9      	bne.n	e21a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e226:	4770      	bx	lr
    e228:	e000e100 	.word	0xe000e100

0000e22c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    e22c:	2000      	movs	r0, #0
    msr CONTROL, r0
    e22e:	f380 8814 	msr	CONTROL, r0
    isb
    e232:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    e236:	2000      	movs	r0, #0
    msr MSPLIM, r0
    e238:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    e23c:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    e240:	f7fe fdc8 	bl	cdd4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    e244:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    e246:	490e      	ldr	r1, [pc, #56]	; (e280 <__start+0x54>)
    str r0, [r1]
    e248:	6008      	str	r0, [r1, #0]
    dsb
    e24a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    e24e:	480d      	ldr	r0, [pc, #52]	; (e284 <__start+0x58>)
    msr msp, r0
    e250:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    e254:	f000 f83e 	bl	e2d4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    e258:	2020      	movs	r0, #32
    msr BASEPRI, r0
    e25a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    e25e:	480a      	ldr	r0, [pc, #40]	; (e288 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    e260:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    e264:	1840      	adds	r0, r0, r1
    msr PSP, r0
    e266:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    e26a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    e26e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    e270:	4308      	orrs	r0, r1
    msr CONTROL, r0
    e272:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    e276:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    e27a:	f7ff fbd3 	bl	da24 <z_arm_prep_c>
    e27e:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    e280:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    e284:	20013d18 	.word	0x20013d18
    ldr r0, =z_interrupt_stacks
    e288:	200123d8 	.word	0x200123d8

0000e28c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    e28c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    e290:	4905      	ldr	r1, [pc, #20]	; (e2a8 <sys_arch_reboot+0x1c>)
    e292:	4b06      	ldr	r3, [pc, #24]	; (e2ac <sys_arch_reboot+0x20>)
    e294:	68ca      	ldr	r2, [r1, #12]
    e296:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e29a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    e29c:	60cb      	str	r3, [r1, #12]
    e29e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    e2a2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    e2a4:	e7fd      	b.n	e2a2 <sys_arch_reboot+0x16>
    e2a6:	bf00      	nop
    e2a8:	e000ed00 	.word	0xe000ed00
    e2ac:	05fa0004 	.word	0x05fa0004

0000e2b0 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    e2b0:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    e2b2:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    e2b4:	4906      	ldr	r1, [pc, #24]	; (e2d0 <z_arm_clear_arm_mpu_config+0x20>)
    e2b6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    e2ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    e2be:	4293      	cmp	r3, r2
    e2c0:	db00      	blt.n	e2c4 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    e2c2:	4770      	bx	lr
  mpu->RNR = rnr;
    e2c4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    e2c8:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    e2cc:	3301      	adds	r3, #1
    e2ce:	e7f6      	b.n	e2be <z_arm_clear_arm_mpu_config+0xe>
    e2d0:	e000ed00 	.word	0xe000ed00

0000e2d4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    e2d4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    e2d6:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    e2d8:	2400      	movs	r4, #0
    e2da:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    e2de:	f7ff ffe7 	bl	e2b0 <z_arm_clear_arm_mpu_config>
    e2e2:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    e2e4:	f04f 30ff 	mov.w	r0, #4294967295
    e2e8:	4a0c      	ldr	r2, [pc, #48]	; (e31c <z_arm_init_arch_hw_at_boot+0x48>)
    e2ea:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    e2ee:	3301      	adds	r3, #1
    e2f0:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    e2f2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    e2f6:	d1f8      	bne.n	e2ea <z_arm_init_arch_hw_at_boot+0x16>
    e2f8:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    e2fa:	f04f 30ff 	mov.w	r0, #4294967295
    e2fe:	4a07      	ldr	r2, [pc, #28]	; (e31c <z_arm_init_arch_hw_at_boot+0x48>)
    e300:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    e304:	3301      	adds	r3, #1
    e306:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    e308:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    e30c:	d1f8      	bne.n	e300 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    e30e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    e310:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e314:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    e318:	bd10      	pop	{r4, pc}
    e31a:	bf00      	nop
    e31c:	e000e100 	.word	0xe000e100

0000e320 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    e320:	4b08      	ldr	r3, [pc, #32]	; (e344 <z_impl_k_thread_abort+0x24>)
    e322:	689b      	ldr	r3, [r3, #8]
    e324:	4283      	cmp	r3, r0
    e326:	d10b      	bne.n	e340 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e328:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    e32c:	b143      	cbz	r3, e340 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e32e:	4b06      	ldr	r3, [pc, #24]	; (e348 <z_impl_k_thread_abort+0x28>)
    e330:	685a      	ldr	r2, [r3, #4]
    e332:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    e336:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    e338:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e33a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    e33e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    e340:	f00c be84 	b.w	1b04c <z_thread_abort>
    e344:	2000e2fc 	.word	0x2000e2fc
    e348:	e000ed00 	.word	0xe000ed00

0000e34c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e34c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e34e:	4c09      	ldr	r4, [pc, #36]	; (e374 <z_arm_configure_static_mpu_regions+0x28>)
    e350:	4a09      	ldr	r2, [pc, #36]	; (e378 <z_arm_configure_static_mpu_regions+0x2c>)
    e352:	4623      	mov	r3, r4
    e354:	2101      	movs	r1, #1
    e356:	4809      	ldr	r0, [pc, #36]	; (e37c <z_arm_configure_static_mpu_regions+0x30>)
    e358:	f000 f918 	bl	e58c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    e35c:	2300      	movs	r3, #0
    e35e:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e360:	4b07      	ldr	r3, [pc, #28]	; (e380 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e362:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e364:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e366:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    e368:	9301      	str	r3, [sp, #4]
    e36a:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e36c:	f000 f918 	bl	e5a0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e370:	b004      	add	sp, #16
    e372:	bd10      	pop	{r4, pc}
    e374:	20040000 	.word	0x20040000
    e378:	2000c580 	.word	0x2000c580
    e37c:	00023254 	.word	0x00023254
    e380:	2000cb68 	.word	0x2000cb68

0000e384 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    e384:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    e386:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e388:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e38a:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e38e:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    e392:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e394:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e396:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e398:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    e39c:	4905      	ldr	r1, [pc, #20]	; (e3b4 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e39e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e3a2:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    e3a6:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    e3aa:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    e3ae:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e3b2:	bd10      	pop	{r4, pc}
    e3b4:	e000ed00 	.word	0xe000ed00

0000e3b8 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    e3b8:	280f      	cmp	r0, #15
{
    e3ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    e3bc:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1U)) {
    e3be:	d90f      	bls.n	e3e0 <region_allocate_and_init+0x28>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e3c0:	4b09      	ldr	r3, [pc, #36]	; (e3e8 <region_allocate_and_init+0x30>)
    e3c2:	9003      	str	r0, [sp, #12]
    e3c4:	9302      	str	r3, [sp, #8]
    e3c6:	2300      	movs	r3, #0
    e3c8:	2201      	movs	r2, #1
    e3ca:	4618      	mov	r0, r3
    e3cc:	e9cd 3300 	strd	r3, r3, [sp]
    e3d0:	4906      	ldr	r1, [pc, #24]	; (e3ec <region_allocate_and_init+0x34>)
    e3d2:	f010 fc08 	bl	1ebe6 <z_log_msg_runtime_create.constprop.0>
    e3d6:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    e3da:	4620      	mov	r0, r4
    e3dc:	b004      	add	sp, #16
    e3de:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
    e3e0:	f7ff ffd0 	bl	e384 <region_init>
	return index;
    e3e4:	e7f9      	b.n	e3da <region_allocate_and_init+0x22>
    e3e6:	bf00      	nop
    e3e8:	000244b1 	.word	0x000244b1
    e3ec:	00022f9c 	.word	0x00022f9c

0000e3f0 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3f4:	4689      	mov	r9, r1
    e3f6:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e3f8:	4606      	mov	r6, r0
    e3fa:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    e3fe:	4d54      	ldr	r5, [pc, #336]	; (e550 <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e400:	b089      	sub	sp, #36	; 0x24
	for (i = 0; i < regions_num; i++) {
    e402:	45c8      	cmp	r8, r9
    e404:	da2d      	bge.n	e462 <mpu_configure_regions_and_partition.constprop.0+0x72>
		if (regions[i].size == 0U) {
    e406:	f8d6 a004 	ldr.w	sl, [r6, #4]
    e40a:	f1ba 0f00 	cmp.w	sl, #0
    e40e:	d04a      	beq.n	e4a6 <mpu_configure_regions_and_partition.constprop.0+0xb6>
		&&
    e410:	f1ba 0f1f 	cmp.w	sl, #31
    e414:	d917      	bls.n	e446 <mpu_configure_regions_and_partition.constprop.0+0x56>
		&&
    e416:	f01a 0f1f 	tst.w	sl, #31
    e41a:	d114      	bne.n	e446 <mpu_configure_regions_and_partition.constprop.0+0x56>
		((part->start &
    e41c:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    e420:	f01b 0f1f 	tst.w	fp, #31
    e424:	d10f      	bne.n	e446 <mpu_configure_regions_and_partition.constprop.0+0x56>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e426:	4658      	mov	r0, fp
    e428:	f010 fbd4 	bl	1ebd4 <arm_cmse_mpu_region_get>
    e42c:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e42e:	eb0a 000b 	add.w	r0, sl, fp
    e432:	3801      	subs	r0, #1
    e434:	f010 fbce 	bl	1ebd4 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e438:	4287      	cmp	r7, r0
    e43a:	d016      	beq.n	e46a <mpu_configure_regions_and_partition.constprop.0+0x7a>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    e43c:	f06f 0715 	mvn.w	r7, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    e440:	4b44      	ldr	r3, [pc, #272]	; (e554 <mpu_configure_regions_and_partition.constprop.0+0x164>)
    e442:	9703      	str	r7, [sp, #12]
    e444:	e002      	b.n	e44c <mpu_configure_regions_and_partition.constprop.0+0x5c>
			LOG_ERR("Partition %u: sanity check failed.", i);
    e446:	4b44      	ldr	r3, [pc, #272]	; (e558 <mpu_configure_regions_and_partition.constprop.0+0x168>)
    e448:	f8cd 800c 	str.w	r8, [sp, #12]
			LOG_ERR("Invalid underlying region index %u",
    e44c:	9302      	str	r3, [sp, #8]
    e44e:	2300      	movs	r3, #0
    e450:	2201      	movs	r2, #1
    e452:	4618      	mov	r0, r3
    e454:	e9cd 3300 	strd	r3, r3, [sp]
    e458:	4940      	ldr	r1, [pc, #256]	; (e55c <mpu_configure_regions_and_partition.constprop.0+0x16c>)
    e45a:	f010 fbc4 	bl	1ebe6 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
    e45e:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e462:	4620      	mov	r0, r4
    e464:	b009      	add	sp, #36	; 0x24
    e466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    e46a:	f117 0f16 	cmn.w	r7, #22
    e46e:	d0e7      	beq.n	e440 <mpu_configure_regions_and_partition.constprop.0+0x50>
    e470:	42bc      	cmp	r4, r7
    e472:	dde5      	ble.n	e440 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = rnr;
    e474:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
    e478:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    e47c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
    e480:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    e484:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e488:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e48c:	e9d6 3200 	ldrd	r3, r2, [r6]
    e490:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    e492:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e494:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    e498:	d11d      	bne.n	e4d6 <mpu_configure_regions_and_partition.constprop.0+0xe6>
    e49a:	45d3      	cmp	fp, sl
    e49c:	d107      	bne.n	e4ae <mpu_configure_regions_and_partition.constprop.0+0xbe>
			mpu_configure_region(u_reg_index, &regions[i]);
    e49e:	4631      	mov	r1, r6
    e4a0:	b2f8      	uxtb	r0, r7
    e4a2:	f010 fbb0 	bl	1ec06 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e4a6:	f108 0801 	add.w	r8, r8, #1
    e4aa:	360c      	adds	r6, #12
    e4ac:	e7a9      	b.n	e402 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    e4ae:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    e4b0:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
    e4b4:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    e4b8:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    e4bc:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    e4c0:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    e4c2:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    e4c6:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    e4c8:	f010 fb9d 	bl	1ec06 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e4cc:	f110 0f16 	cmn.w	r0, #22
    e4d0:	d0c5      	beq.n	e45e <mpu_configure_regions_and_partition.constprop.0+0x6e>
			reg_index++;
    e4d2:	1c44      	adds	r4, r0, #1
    e4d4:	e7e7      	b.n	e4a6 <mpu_configure_regions_and_partition.constprop.0+0xb6>
	MPU->RNR = rnr;
    e4d6:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
    e4da:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    e4de:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    e4e0:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    e4e4:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    e4e8:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    e4ea:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    e4ec:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    e4ee:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    e4f0:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    e4f4:	d0e8      	beq.n	e4c8 <mpu_configure_regions_and_partition.constprop.0+0xd8>
				mpu_configure_region(reg_index, &regions[i]);
    e4f6:	f010 fb86 	bl	1ec06 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e4fa:	f110 0f16 	cmn.w	r0, #22
    e4fe:	d0ae      	beq.n	e45e <mpu_configure_regions_and_partition.constprop.0+0x6e>
	MPU->RNR = rnr;
    e500:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
    e504:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    e508:	f89d 3018 	ldrb.w	r3, [sp, #24]
			REGION_LIMIT_ADDR((regions[i].start +
    e50c:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = mpu_get_rbar() &
    e510:	f362 0304 	bfi	r3, r2, #0, #5
    e514:	f88d 3018 	strb.w	r3, [sp, #24]
	return MPU->RLAR;
    e518:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    e51c:	f89d 2018 	ldrb.w	r2, [sp, #24]
    e520:	085b      	lsrs	r3, r3, #1
    e522:	f363 1247 	bfi	r2, r3, #5, #3
    e526:	f88d 2018 	strb.w	r2, [sp, #24]
			fill_region.base = regions[i].start +
    e52a:	e9d6 3200 	ldrd	r3, r2, [r6]
    e52e:	4413      	add	r3, r2
    e530:	9304      	str	r3, [sp, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    e532:	f023 031f 	bic.w	r3, r3, #31
    e536:	445b      	add	r3, fp
    e538:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
    e53c:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    e53e:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
    e542:	a904      	add	r1, sp, #16
    e544:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
    e546:	9307      	str	r3, [sp, #28]
				region_allocate_and_init(reg_index,
    e548:	f7ff ff36 	bl	e3b8 <region_allocate_and_init>
    e54c:	e7be      	b.n	e4cc <mpu_configure_regions_and_partition.constprop.0+0xdc>
    e54e:	bf00      	nop
    e550:	e000ed00 	.word	0xe000ed00
    e554:	000244fa 	.word	0x000244fa
    e558:	000244d7 	.word	0x000244d7
    e55c:	00022f9c 	.word	0x00022f9c

0000e560 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e560:	2205      	movs	r2, #5
    e562:	4b04      	ldr	r3, [pc, #16]	; (e574 <arm_core_mpu_enable+0x14>)
    e564:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    e568:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e56c:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e570:	4770      	bx	lr
    e572:	bf00      	nop
    e574:	e000ed00 	.word	0xe000ed00

0000e578 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    e578:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e57c:	2200      	movs	r2, #0
    e57e:	4b02      	ldr	r3, [pc, #8]	; (e588 <arm_core_mpu_disable+0x10>)
    e580:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e584:	4770      	bx	lr
    e586:	bf00      	nop
    e588:	e000ed00 	.word	0xe000ed00

0000e58c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    e58c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e58e:	4c03      	ldr	r4, [pc, #12]	; (e59c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e590:	7822      	ldrb	r2, [r4, #0]
    e592:	f7ff ff2d 	bl	e3f0 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e596:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    e598:	bd10      	pop	{r4, pc}
    e59a:	bf00      	nop
    e59c:	2000fb5e 	.word	0x2000fb5e

0000e5a0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    e5a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5a4:	4d29      	ldr	r5, [pc, #164]	; (e64c <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    e5a6:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    e5a8:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e5aa:	f04f 0800 	mov.w	r8, #0
    e5ae:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    e5b0:	4f27      	ldr	r7, [pc, #156]	; (e650 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e5b2:	45d0      	cmp	r8, sl
    e5b4:	da1b      	bge.n	e5ee <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    e5b6:	f8d6 9004 	ldr.w	r9, [r6, #4]
    e5ba:	f1b9 0f00 	cmp.w	r9, #0
    e5be:	d03f      	beq.n	e640 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e5c0:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e5c2:	4608      	mov	r0, r1
    e5c4:	9101      	str	r1, [sp, #4]
    e5c6:	f010 fb05 	bl	1ebd4 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e5ca:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e5cc:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e5ce:	eb09 0001 	add.w	r0, r9, r1
    e5d2:	3801      	subs	r0, #1
    e5d4:	f010 fafe 	bl	1ebd4 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e5d8:	4284      	cmp	r4, r0
    e5da:	f04f 0214 	mov.w	r2, #20
    e5de:	4b1d      	ldr	r3, [pc, #116]	; (e654 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    e5e0:	d008      	beq.n	e5f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    e5e2:	fb02 f308 	mul.w	r3, r2, r8
    e5e6:	f06f 0215 	mvn.w	r2, #21
    e5ea:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    e5ee:	b003      	add	sp, #12
    e5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e5f4:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    e5f8:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e5fa:	d0f8      	beq.n	e5ee <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e5fc:	7819      	ldrb	r1, [r3, #0]
    e5fe:	42a1      	cmp	r1, r4
    e600:	ddf5      	ble.n	e5ee <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    e602:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    e606:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    e60a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    e60e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    e612:	f100 0108 	add.w	r1, r0, #8
    e616:	7b00      	ldrb	r0, [r0, #12]
    e618:	f364 0004 	bfi	r0, r4, #0, #5
    e61c:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    e61e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    e622:	790c      	ldrb	r4, [r1, #4]
    e624:	0840      	lsrs	r0, r0, #1
    e626:	f360 1447 	bfi	r4, r0, #5, #3
    e62a:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    e62c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    e630:	f021 011f 	bic.w	r1, r1, #31
    e634:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    e636:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    e63a:	f021 011f 	bic.w	r1, r1, #31
    e63e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e640:	f108 0801 	add.w	r8, r8, #1
    e644:	3514      	adds	r5, #20
    e646:	360c      	adds	r6, #12
    e648:	e7b3      	b.n	e5b2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    e64a:	bf00      	nop
    e64c:	2000dc38 	.word	0x2000dc38
    e650:	e000ed00 	.word	0xe000ed00
    e654:	2000fb5e 	.word	0x2000fb5e

0000e658 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    e658:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e65a:	4d0e      	ldr	r5, [pc, #56]	; (e694 <z_arm_mpu_init+0x3c>)
    e65c:	682c      	ldr	r4, [r5, #0]
    e65e:	2c10      	cmp	r4, #16
    e660:	d815      	bhi.n	e68e <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e662:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    e664:	f7ff ff88 	bl	e578 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    e668:	4b0b      	ldr	r3, [pc, #44]	; (e698 <z_arm_mpu_init+0x40>)
    e66a:	4a0c      	ldr	r2, [pc, #48]	; (e69c <z_arm_mpu_init+0x44>)
    e66c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e670:	4284      	cmp	r4, r0
    e672:	d105      	bne.n	e680 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    e674:	4b0a      	ldr	r3, [pc, #40]	; (e6a0 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    e676:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    e678:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    e67a:	f7ff ff71 	bl	e560 <arm_core_mpu_enable>
}
    e67e:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e680:	6869      	ldr	r1, [r5, #4]
    e682:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    e686:	f7ff fe7d 	bl	e384 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e68a:	3001      	adds	r0, #1
    e68c:	e7f0      	b.n	e670 <z_arm_mpu_init+0x18>
		return -1;
    e68e:	f04f 30ff 	mov.w	r0, #4294967295
    e692:	e7f4      	b.n	e67e <z_arm_mpu_init+0x26>
    e694:	00023260 	.word	0x00023260
    e698:	e000ed00 	.word	0xe000ed00
    e69c:	0044ffaa 	.word	0x0044ffaa
    e6a0:	2000fb5e 	.word	0x2000fb5e

0000e6a4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    e6a4:	4b01      	ldr	r3, [pc, #4]	; (e6ac <__stdout_hook_install+0x8>)
    e6a6:	6018      	str	r0, [r3, #0]
}
    e6a8:	4770      	bx	lr
    e6aa:	bf00      	nop
    e6ac:	2000c5e8 	.word	0x2000c5e8

0000e6b0 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    e6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e6b2:	4606      	mov	r6, r0
    e6b4:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    e6b6:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
    e6b8:	4f06      	ldr	r7, [pc, #24]	; (e6d4 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
    e6ba:	42ac      	cmp	r4, r5
    e6bc:	da08      	bge.n	e6d0 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    e6be:	683b      	ldr	r3, [r7, #0]
    e6c0:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    e6c2:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    e6c4:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
    e6c6:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    e6ca:	d001      	beq.n	e6d0 <z_impl_zephyr_read_stdin+0x20>
    e6cc:	280d      	cmp	r0, #13
    e6ce:	d1f4      	bne.n	e6ba <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    e6d0:	4620      	mov	r0, r4
    e6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e6d4:	2000c5e4 	.word	0x2000c5e4

0000e6d8 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    e6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e6da:	460d      	mov	r5, r1
    e6dc:	4f09      	ldr	r7, [pc, #36]	; (e704 <z_impl_zephyr_write_stdout+0x2c>)
    e6de:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    e6e0:	f1c0 0401 	rsb	r4, r0, #1
    e6e4:	19a3      	adds	r3, r4, r6
    e6e6:	429d      	cmp	r5, r3
    e6e8:	dc01      	bgt.n	e6ee <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    e6ea:	4628      	mov	r0, r5
    e6ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    e6ee:	7873      	ldrb	r3, [r6, #1]
    e6f0:	2b0a      	cmp	r3, #10
    e6f2:	d102      	bne.n	e6fa <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    e6f4:	200d      	movs	r0, #13
    e6f6:	683b      	ldr	r3, [r7, #0]
    e6f8:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    e6fa:	683b      	ldr	r3, [r7, #0]
    e6fc:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    e700:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    e702:	e7ef      	b.n	e6e4 <z_impl_zephyr_write_stdout+0xc>
    e704:	2000c5e8 	.word	0x2000c5e8

0000e708 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    e708:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    e70a:	2105      	movs	r1, #5
    e70c:	4801      	ldr	r0, [pc, #4]	; (e714 <_exit+0xc>)
    e70e:	f7ff ffe3 	bl	e6d8 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    e712:	e7fe      	b.n	e712 <_exit+0xa>
    e714:	0002451d 	.word	0x0002451d

0000e718 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    e718:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    e71a:	4c07      	ldr	r4, [pc, #28]	; (e738 <_sbrk+0x20>)
    e71c:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    e71e:	18c2      	adds	r2, r0, r3
    e720:	4806      	ldr	r0, [pc, #24]	; (e73c <_sbrk+0x24>)
    e722:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    e726:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e72a:	428a      	cmp	r2, r1
		heap_sz += count;
    e72c:	bf36      	itet	cc
    e72e:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    e730:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
    e734:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
    e736:	bd10      	pop	{r4, pc}
    e738:	2000dc4c 	.word	0x2000dc4c
    e73c:	20014b40 	.word	0x20014b40

0000e740 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
    e740:	4602      	mov	r2, r0
    e742:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    e744:	4801      	ldr	r0, [pc, #4]	; (e74c <k_mutex_lock.constprop.0.isra.0+0xc>)
    e746:	f00b bf9b 	b.w	1a680 <z_impl_k_mutex_lock>
    e74a:	bf00      	nop
    e74c:	2000ca1c 	.word	0x2000ca1c

0000e750 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    e750:	4801      	ldr	r0, [pc, #4]	; (e758 <k_mutex_unlock.constprop.0.isra.0+0x8>)
    e752:	f00c b80f 	b.w	1a774 <z_impl_k_mutex_unlock>
    e756:	bf00      	nop
    e758:	2000ca1c 	.word	0x2000ca1c

0000e75c <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
    e75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
    e75e:	f04f 30ff 	mov.w	r0, #4294967295
    e762:	f04f 31ff 	mov.w	r1, #4294967295
    e766:	f7ff ffeb 	bl	e740 <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
    e76a:	4c0c      	ldr	r4, [pc, #48]	; (e79c <net_if_init+0x40>)
    e76c:	4e0c      	ldr	r6, [pc, #48]	; (e7a0 <net_if_init+0x44>)
    e76e:	42b4      	cmp	r4, r6
    e770:	4627      	mov	r7, r4
    e772:	d303      	bcc.n	e77c <net_if_init+0x20>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
    e774:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
    e778:	f7ff bfea 	b.w	e750 <k_mutex_unlock.constprop.0.isra.0>
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
    e77c:	f854 0b04 	ldr.w	r0, [r4], #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
    e780:	6803      	ldr	r3, [r0, #0]
    e782:	689d      	ldr	r5, [r3, #8]
	if (!api || !api->init) {
    e784:	2d00      	cmp	r5, #0
    e786:	d0f2      	beq.n	e76e <net_if_init+0x12>
    e788:	682b      	ldr	r3, [r5, #0]
    e78a:	2b00      	cmp	r3, #0
    e78c:	d0ef      	beq.n	e76e <net_if_init+0x12>
	net_if_flag_test_and_set(iface, NET_IF_LOWER_UP);
    e78e:	2109      	movs	r1, #9
    e790:	f010 fb10 	bl	1edb4 <net_if_flag_test_and_set.isra.0>
	api->init(iface);
    e794:	4638      	mov	r0, r7
    e796:	682b      	ldr	r3, [r5, #0]
    e798:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
    e79a:	e7e8      	b.n	e76e <net_if_init+0x12>
    e79c:	2000cb2c 	.word	0x2000cb2c
    e7a0:	2000cb30 	.word	0x2000cb30

0000e7a4 <net_if_post_init>:

void net_if_post_init(void)
{
    e7a4:	b538      	push	{r3, r4, r5, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
    e7a6:	4c07      	ldr	r4, [pc, #28]	; (e7c4 <net_if_post_init+0x20>)
    e7a8:	4d07      	ldr	r5, [pc, #28]	; (e7c8 <net_if_post_init+0x24>)
    e7aa:	42ac      	cmp	r4, r5
    e7ac:	d300      	bcc.n	e7b0 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
    e7ae:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
    e7b0:	2103      	movs	r1, #3
    e7b2:	4620      	mov	r0, r4
    e7b4:	f010 faaa 	bl	1ed0c <net_if_flag_is_set>
    e7b8:	b910      	cbnz	r0, e7c0 <net_if_post_init+0x1c>
			net_if_up(iface);
    e7ba:	4620      	mov	r0, r4
    e7bc:	f010 fb0c 	bl	1edd8 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    e7c0:	3404      	adds	r4, #4
    e7c2:	e7f2      	b.n	e7aa <net_if_post_init+0x6>
    e7c4:	2000cb2c 	.word	0x2000cb2c
    e7c8:	2000cb30 	.word	0x2000cb30

0000e7cc <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
    e7cc:	2300      	movs	r3, #0
{
    e7ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
    e7d2:	2802      	cmp	r0, #2
{
    e7d4:	b089      	sub	sp, #36	; 0x24
    e7d6:	4605      	mov	r5, r0
    e7d8:	4688      	mov	r8, r1
    e7da:	4693      	mov	fp, r2
	unsigned char zeros[8] = { 0 };
    e7dc:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (family == AF_INET6) {
    e7e0:	d14d      	bne.n	e87e <z_impl_net_addr_ntop+0xb2>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
    e7e2:	a806      	add	r0, sp, #24
    e7e4:	9105      	str	r1, [sp, #20]
    e7e6:	4601      	mov	r1, r0
{
    e7e8:	461a      	mov	r2, r3
    e7ea:	e006      	b.n	e7fa <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
    e7ec:	780c      	ldrb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
    e7ee:	3201      	adds	r2, #1
				zeros[i]++;
    e7f0:	3401      	adds	r4, #1
    e7f2:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
    e7f4:	b2d4      	uxtb	r4, r2
    e7f6:	2c08      	cmp	r4, #8
    e7f8:	d003      	beq.n	e802 <z_impl_net_addr_ntop+0x36>
				if (UNALIGNED_GET(&w[j]) != 0) {
    e7fa:	f838 4012 	ldrh.w	r4, [r8, r2, lsl #1]
    e7fe:	2c00      	cmp	r4, #0
    e800:	d0f4      	beq.n	e7ec <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
    e802:	3301      	adds	r3, #1
    e804:	2b08      	cmp	r3, #8
    e806:	f101 0101 	add.w	r1, r1, #1
    e80a:	d1ed      	bne.n	e7e8 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
    e80c:	f04f 37ff 	mov.w	r7, #4294967295
	uint8_t i, bl, bh, longest = 1U;
    e810:	2601      	movs	r6, #1
			}
		}

		for (i = 0U; i < 8; i++) {
    e812:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
    e814:	f810 2b01 	ldrb.w	r2, [r0], #1
    e818:	42b2      	cmp	r2, r6
				longest = zeros[i];
				pos = i;
    e81a:	bf88      	it	hi
    e81c:	b25f      	sxtbhi	r7, r3
		for (i = 0U; i < 8; i++) {
    e81e:	f103 0301 	add.w	r3, r3, #1
    e822:	b2db      	uxtb	r3, r3
				pos = i;
    e824:	bf88      	it	hi
    e826:	4616      	movhi	r6, r2
		for (i = 0U; i < 8; i++) {
    e828:	2b08      	cmp	r3, #8
    e82a:	d1f3      	bne.n	e814 <z_impl_net_addr_ntop+0x48>
		len = 8;
    e82c:	469a      	mov	sl, r3
    e82e:	2e01      	cmp	r6, #1
    e830:	f04f 033a 	mov.w	r3, #58	; 0x3a
    e834:	bf08      	it	eq
    e836:	f04f 37ff 	moveq.w	r7, #4294967295
    e83a:	9302      	str	r3, [sp, #8]
	bool needcolon = false;
    e83c:	2200      	movs	r2, #0
	char delim = ':';
    e83e:	4658      	mov	r0, fp
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
    e840:	4614      	mov	r4, r2
    e842:	4613      	mov	r3, r2
		/* IPv4 address a.b.c.d */
		if (len == 4) {
    e844:	f1ba 0f04 	cmp.w	sl, #4
    e848:	d153      	bne.n	e8f2 <z_impl_net_addr_ntop+0x126>
			uint8_t l;

			value = (uint32_t)addr->s4_addr[i];
    e84a:	f818 1003 	ldrb.w	r1, [r8, r3]

			/* net_byte_to_udec() eats 0 */
			if (value == 0U) {
    e84e:	bb21      	cbnz	r1, e89a <z_impl_net_addr_ntop+0xce>
				*ptr++ = '0';
    e850:	4603      	mov	r3, r0
    e852:	2130      	movs	r1, #48	; 0x30
    e854:	f803 1b02 	strb.w	r1, [r3], #2
				*ptr++ = delim;
    e858:	9902      	ldr	r1, [sp, #8]
    e85a:	7041      	strb	r1, [r0, #1]
    e85c:	4618      	mov	r0, r3
	for (i = 0U; i < len; i++) {
    e85e:	3401      	adds	r4, #1
    e860:	b2e4      	uxtb	r4, r4
    e862:	4554      	cmp	r4, sl
    e864:	4623      	mov	r3, r4
    e866:	dbed      	blt.n	e844 <z_impl_net_addr_ntop+0x78>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
    e868:	4558      	cmp	r0, fp
    e86a:	d00a      	beq.n	e882 <z_impl_net_addr_ntop+0xb6>
		return NULL;
	}

	if (family == AF_INET) {
    e86c:	2d01      	cmp	r5, #1
    e86e:	f04f 0300 	mov.w	r3, #0
    e872:	f040 8084 	bne.w	e97e <z_impl_net_addr_ntop+0x1b2>
		*(ptr - 1) = '\0';
    e876:	f800 3c01 	strb.w	r3, [r0, #-1]
		return NULL;
    e87a:	4658      	mov	r0, fp
    e87c:	e002      	b.n	e884 <z_impl_net_addr_ntop+0xb8>
	} else if (family == AF_INET) {
    e87e:	2801      	cmp	r0, #1
    e880:	d003      	beq.n	e88a <z_impl_net_addr_ntop+0xbe>
		return NULL;
    e882:	2000      	movs	r0, #0
	} else {
		*ptr = '\0';
	}

	return dst;
}
    e884:	b009      	add	sp, #36	; 0x24
    e886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
    e88a:	232e      	movs	r3, #46	; 0x2e
		len = 4;
    e88c:	f04f 0a04 	mov.w	sl, #4
	int8_t pos = -1;
    e890:	f04f 37ff 	mov.w	r7, #4294967295
	uint8_t i, bl, bh, longest = 1U;
    e894:	4606      	mov	r6, r0
		delim = '.';
    e896:	9302      	str	r3, [sp, #8]
    e898:	e7d0      	b.n	e83c <z_impl_net_addr_ntop+0x70>
			l = net_value_to_udec(ptr, value, 0);
    e89a:	9101      	str	r1, [sp, #4]
    e89c:	2100      	movs	r1, #0
    e89e:	4603      	mov	r3, r0
    e8a0:	f04f 0c09 	mov.w	ip, #9
    e8a4:	f8df e0dc 	ldr.w	lr, [pc, #220]	; e984 <z_impl_net_addr_ntop+0x1b8>
    e8a8:	9103      	str	r1, [sp, #12]
		temp = value / divisor;
    e8aa:	9901      	ldr	r1, [sp, #4]
    e8ac:	fbb1 f9fe 	udiv	r9, r1, lr
		value = value % divisor;
    e8b0:	9104      	str	r1, [sp, #16]
    e8b2:	fb0e 1119 	mls	r1, lr, r9, r1
    e8b6:	9101      	str	r1, [sp, #4]
		if ((precision > i) || (temp != 0)) {
    e8b8:	9903      	ldr	r1, [sp, #12]
    e8ba:	458c      	cmp	ip, r1
    e8bc:	db02      	blt.n	e8c4 <z_impl_net_addr_ntop+0xf8>
    e8be:	9904      	ldr	r1, [sp, #16]
    e8c0:	4571      	cmp	r1, lr
    e8c2:	d305      	bcc.n	e8d0 <z_impl_net_addr_ntop+0x104>
			*buf++ = (char) (temp + '0');
    e8c4:	f109 0930 	add.w	r9, r9, #48	; 0x30
    e8c8:	f803 9b01 	strb.w	r9, [r3], #1
    e8cc:	f8cd c00c 	str.w	ip, [sp, #12]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
    e8d0:	210a      	movs	r1, #10
    e8d2:	f10c 3cff 	add.w	ip, ip, #4294967295
    e8d6:	f1bc 3fff 	cmp.w	ip, #4294967295
    e8da:	fbbe fef1 	udiv	lr, lr, r1
    e8de:	d1e4      	bne.n	e8aa <z_impl_net_addr_ntop+0xde>
	*buf = 0;
    e8e0:	2100      	movs	r1, #0
    e8e2:	7019      	strb	r1, [r3, #0]
	return buf - start;
    e8e4:	1a1b      	subs	r3, r3, r0
			*ptr++ = delim;
    e8e6:	fa50 f083 	uxtab	r0, r0, r3
    e8ea:	9b02      	ldr	r3, [sp, #8]
    e8ec:	f800 3b01 	strb.w	r3, [r0], #1
			continue;
    e8f0:	e7b5      	b.n	e85e <z_impl_net_addr_ntop+0x92>
		if (i == pos) {
    e8f2:	429f      	cmp	r7, r3
    e8f4:	d10d      	bne.n	e912 <z_impl_net_addr_ntop+0x146>
			if (needcolon || i == 0U) {
    e8f6:	b902      	cbnz	r2, e8fa <z_impl_net_addr_ntop+0x12e>
    e8f8:	b914      	cbnz	r4, e900 <z_impl_net_addr_ntop+0x134>
				*ptr++ = ':';
    e8fa:	233a      	movs	r3, #58	; 0x3a
    e8fc:	f800 3b01 	strb.w	r3, [r0], #1
			*ptr++ = ':';
    e900:	f04f 033a 	mov.w	r3, #58	; 0x3a
    e904:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
    e908:	1e73      	subs	r3, r6, #1
    e90a:	4423      	add	r3, r4
			needcolon = false;
    e90c:	2200      	movs	r2, #0
			i += longest - 1U;
    e90e:	b2dc      	uxtb	r4, r3
			continue;
    e910:	e7a5      	b.n	e85e <z_impl_net_addr_ntop+0x92>
		if (needcolon) {
    e912:	b11a      	cbz	r2, e91c <z_impl_net_addr_ntop+0x150>
			*ptr++ = ':';
    e914:	f04f 033a 	mov.w	r3, #58	; 0x3a
    e918:	f800 3b01 	strb.w	r3, [r0], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
    e91c:	9b05      	ldr	r3, [sp, #20]
    e91e:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
    e922:	ba52      	rev16	r2, r2
		if (bh) {
    e924:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
		bh = value >> 8;
    e928:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
    e92c:	fa5f f982 	uxtb.w	r9, r2
		if (bh) {
    e930:	d016      	beq.n	e960 <z_impl_net_addr_ntop+0x194>
			if (bh > 0x0f) {
    e932:	2b0f      	cmp	r3, #15
		bh = value >> 8;
    e934:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
    e936:	d90a      	bls.n	e94e <z_impl_net_addr_ntop+0x182>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
    e938:	2300      	movs	r3, #0
    e93a:	2261      	movs	r2, #97	; 0x61
    e93c:	f010 fa74 	bl	1ee28 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
    e940:	2301      	movs	r3, #1
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
    e942:	2261      	movs	r2, #97	; 0x61
    e944:	4649      	mov	r1, r9
    e946:	f010 fa6f 	bl	1ee28 <net_byte_to_hex>
		needcolon = true;
    e94a:	2201      	movs	r2, #1
    e94c:	e787      	b.n	e85e <z_impl_net_addr_ntop+0x92>
				if (bh < 10) {
    e94e:	2b09      	cmp	r3, #9
    e950:	d804      	bhi.n	e95c <z_impl_net_addr_ntop+0x190>
					*ptr++ = (char)(bh + '0');
    e952:	3130      	adds	r1, #48	; 0x30
    e954:	b2c9      	uxtb	r1, r1
    e956:	f800 1b01 	strb.w	r1, [r0], #1
    e95a:	e7f1      	b.n	e940 <z_impl_net_addr_ntop+0x174>
					*ptr++ = (char) (bh - 10 + 'a');
    e95c:	3157      	adds	r1, #87	; 0x57
    e95e:	e7f9      	b.n	e954 <z_impl_net_addr_ntop+0x188>
		} else if (bl > 0x0f) {
    e960:	f1b9 0f0f 	cmp.w	r9, #15
    e964:	d8ed      	bhi.n	e942 <z_impl_net_addr_ntop+0x176>
			if (bl < 10) {
    e966:	f1b9 0f09 	cmp.w	r9, #9
				*ptr++ = (char)(bl + '0');
    e96a:	bf94      	ite	ls
    e96c:	f109 0930 	addls.w	r9, r9, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
    e970:	f109 0957 	addhi.w	r9, r9, #87	; 0x57
    e974:	fa5f f989 	uxtb.w	r9, r9
    e978:	f800 9b01 	strb.w	r9, [r0], #1
    e97c:	e7e5      	b.n	e94a <z_impl_net_addr_ntop+0x17e>
		*ptr = '\0';
    e97e:	7003      	strb	r3, [r0, #0]
    e980:	e77b      	b.n	e87a <z_impl_net_addr_ntop+0xae>
    e982:	bf00      	nop
    e984:	3b9aca00 	.word	0x3b9aca00

0000e988 <http_parser_execute>:
}

size_t http_parser_execute(struct http_parser *parser,
			   const struct http_parser_settings *settings,
			   const char *data, size_t len)
{
    e988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e98c:	b091      	sub	sp, #68	; 0x44
    e98e:	9305      	str	r3, [sp, #20]
	const unsigned int lenient = parser->lenient_http_headers;
    e990:	78c3      	ldrb	r3, [r0, #3]
{
    e992:	4617      	mov	r7, r2
	const unsigned int lenient = parser->lenient_http_headers;
    e994:	09db      	lsrs	r3, r3, #7
    e996:	9306      	str	r3, [sp, #24]
	enum state p_state = (enum state) parser->state;
    e998:	6803      	ldr	r3, [r0, #0]
{
    e99a:	4688      	mov	r8, r1
	enum state p_state = (enum state) parser->state;
    e99c:	f3c3 2286 	ubfx	r2, r3, #10, #7
    e9a0:	4613      	mov	r3, r2
    e9a2:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	const char *header_field_mark = 0;
    e9a6:	2200      	movs	r2, #0
	const char *header_value_mark = 0;
    e9a8:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
	const char *body_mark = 0;
    e9ac:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
	const char *status_mark = 0;
    e9b0:	920e      	str	r2, [sp, #56]	; 0x38
	*parsed = 0;
    e9b2:	9209      	str	r2, [sp, #36]	; 0x24
	if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {
    e9b4:	7dc2      	ldrb	r2, [r0, #23]
{
    e9b6:	4604      	mov	r4, r0
	if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {
    e9b8:	0651      	lsls	r1, r2, #25
    e9ba:	d109      	bne.n	e9d0 <http_parser_execute+0x48>
	if (len == 0) {
    e9bc:	9a05      	ldr	r2, [sp, #20]
    e9be:	b9fa      	cbnz	r2, ea00 <http_parser_execute+0x78>
		switch (CURRENT_STATE()) {
    e9c0:	2b12      	cmp	r3, #18
    e9c2:	d809      	bhi.n	e9d8 <http_parser_execute+0x50>
    e9c4:	b1b3      	cbz	r3, e9f4 <http_parser_execute+0x6c>
    e9c6:	4abc      	ldr	r2, [pc, #752]	; (ecb8 <http_parser_execute+0x330>)
    e9c8:	fa22 f303 	lsr.w	r3, r2, r3
    e9cc:	07da      	lsls	r2, r3, #31
    e9ce:	d511      	bpl.n	e9f4 <http_parser_execute+0x6c>
	size_t parsed;

	parser_execute(parser, settings, data, len, &parsed);
	return parsed;
    e9d0:	9809      	ldr	r0, [sp, #36]	; 0x24
}
    e9d2:	b011      	add	sp, #68	; 0x44
    e9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (CURRENT_STATE()) {
    e9d8:	2b3d      	cmp	r3, #61	; 0x3d
    e9da:	d10b      	bne.n	e9f4 <http_parser_execute+0x6c>
			cb_notify(parser, &p_state,
    e9dc:	9b05      	ldr	r3, [sp, #20]
    e9de:	f10d 0123 	add.w	r1, sp, #35	; 0x23
    e9e2:	9301      	str	r3, [sp, #4]
    e9e4:	ab09      	add	r3, sp, #36	; 0x24
    e9e6:	9300      	str	r3, [sp, #0]
    e9e8:	f8d8 201c 	ldr.w	r2, [r8, #28]
    e9ec:	2307      	movs	r3, #7
    e9ee:	f010 fa39 	bl	1ee64 <cb_notify>
			return 0;
    e9f2:	e7ed      	b.n	e9d0 <http_parser_execute+0x48>
			SET_ERRNO(HPE_INVALID_EOF_STATE);
    e9f4:	220b      	movs	r2, #11
    e9f6:	7de3      	ldrb	r3, [r4, #23]
    e9f8:	f362 0306 	bfi	r3, r2, #0, #7
    e9fc:	75e3      	strb	r3, [r4, #23]
			return 1;
    e9fe:	e7e7      	b.n	e9d0 <http_parser_execute+0x48>
	if (CURRENT_STATE() == s_header_field) {
    ea00:	2b2b      	cmp	r3, #43	; 0x2b
    ea02:	d105      	bne.n	ea10 <http_parser_execute+0x88>
		header_field_mark = data;
    ea04:	970a      	str	r7, [sp, #40]	; 0x28
	for (p = data; p != data + len; p++) {
    ea06:	9b05      	ldr	r3, [sp, #20]
    ea08:	463e      	mov	r6, r7
    ea0a:	eb07 0b03 	add.w	fp, r7, r3
    ea0e:	e18c      	b.n	ed2a <http_parser_execute+0x3a2>
	if (CURRENT_STATE() == s_header_value) {
    ea10:	2b30      	cmp	r3, #48	; 0x30
    ea12:	d101      	bne.n	ea18 <http_parser_execute+0x90>
		header_value_mark = data;
    ea14:	970b      	str	r7, [sp, #44]	; 0x2c
	switch (CURRENT_STATE()) {
    ea16:	e7f6      	b.n	ea06 <http_parser_execute+0x7e>
    ea18:	2b10      	cmp	r3, #16
    ea1a:	d006      	beq.n	ea2a <http_parser_execute+0xa2>
    ea1c:	336b      	adds	r3, #107	; 0x6b
    ea1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ea22:	2b0a      	cmp	r3, #10
    ea24:	d8ef      	bhi.n	ea06 <http_parser_execute+0x7e>
		url_mark = data;
    ea26:	970c      	str	r7, [sp, #48]	; 0x30
		break;
    ea28:	e7ed      	b.n	ea06 <http_parser_execute+0x7e>
		status_mark = data;
    ea2a:	970e      	str	r7, [sp, #56]	; 0x38
		break;
    ea2c:	e7eb      	b.n	ea06 <http_parser_execute+0x7e>
		if (PARSING_HEADER(CURRENT_STATE())) {
    ea2e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
		ch = *p;
    ea32:	7835      	ldrb	r5, [r6, #0]
		if (PARSING_HEADER(CURRENT_STATE())) {
    ea34:	2b38      	cmp	r3, #56	; 0x38
    ea36:	d84f      	bhi.n	ead8 <http_parser_execute+0x150>
	parser->nread += bytes;
    ea38:	6863      	ldr	r3, [r4, #4]
    ea3a:	3301      	adds	r3, #1
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
    ea3c:	f5b3 3fa0 	cmp.w	r3, #81920	; 0x14000
	parser->nread += bytes;
    ea40:	6063      	str	r3, [r4, #4]
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
    ea42:	d949      	bls.n	ead8 <http_parser_execute+0x150>
		parser->http_errno = HPE_HEADER_OVERFLOW;
    ea44:	220c      	movs	r2, #12
    ea46:	7de3      	ldrb	r3, [r4, #23]
			SET_ERRNO(HPE_INVALID_INTERNAL_STATE);
    ea48:	f362 0306 	bfi	r3, r2, #0, #7
    ea4c:	75e3      	strb	r3, [r4, #23]
			goto error;
    ea4e:	f000 be49 	b.w	f6e4 <http_parser_execute+0xd5c>
    ea52:	4631      	mov	r1, r6
				c = TOKEN(ch);
    ea54:	4899      	ldr	r0, [pc, #612]	; (ecbc <http_parser_execute+0x334>)
			for (; p != data + len; p++) {
    ea56:	458b      	cmp	fp, r1
    ea58:	4689      	mov	r9, r1
    ea5a:	d008      	beq.n	ea6e <http_parser_execute+0xe6>
				ch = *p;
    ea5c:	f811 5b01 	ldrb.w	r5, [r1], #1
				c = TOKEN(ch);
    ea60:	2d20      	cmp	r5, #32
    ea62:	f000 841d 	beq.w	f2a0 <http_parser_execute+0x918>
    ea66:	5d43      	ldrb	r3, [r0, r5]
				if (!c) {
    ea68:	2b00      	cmp	r3, #0
    ea6a:	f040 841a 	bne.w	f2a2 <http_parser_execute+0x91a>
	parser->nread += bytes;
    ea6e:	6863      	ldr	r3, [r4, #4]
			rc = count_header_size(parser, p - start);
    ea70:	eba9 0606 	sub.w	r6, r9, r6
	parser->nread += bytes;
    ea74:	441e      	add	r6, r3
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
    ea76:	f5b6 3fa0 	cmp.w	r6, #81920	; 0x14000
	parser->nread += bytes;
    ea7a:	6066      	str	r6, [r4, #4]
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
    ea7c:	f201 8135 	bhi.w	fcea <http_parser_execute+0x1362>
			if (p == data + len) {
    ea80:	45cb      	cmp	fp, r9
    ea82:	f040 84da 	bne.w	f43a <http_parser_execute+0xab2>
				--p;
    ea86:	f10b 36ff 	add.w	r6, fp, #4294967295
    ea8a:	e14d      	b.n	ed28 <http_parser_execute+0x3a0>
			if (LIKELY(ch == CR || ch == LF)) {
    ea8c:	2d0d      	cmp	r5, #13
    ea8e:	f000 814b 	beq.w	ed28 <http_parser_execute+0x3a0>
    ea92:	2d0a      	cmp	r5, #10
    ea94:	f000 8148 	beq.w	ed28 <http_parser_execute+0x3a0>
			SET_ERRNO(HPE_CLOSED_CONNECTION);
    ea98:	220d      	movs	r2, #13
    ea9a:	7de3      	ldrb	r3, [r4, #23]
    ea9c:	e7d4      	b.n	ea48 <http_parser_execute+0xc0>
			if (ch == CR || ch == LF) {
    ea9e:	2d0d      	cmp	r5, #13
    eaa0:	f000 8142 	beq.w	ed28 <http_parser_execute+0x3a0>
    eaa4:	2d0a      	cmp	r5, #10
    eaa6:	f000 813f 	beq.w	ed28 <http_parser_execute+0x3a0>
			parser->flags = 0U;
    eaaa:	8823      	ldrh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
    eaac:	f04f 32ff 	mov.w	r2, #4294967295
			parser->flags = 0U;
    eab0:	f36f 0389 	bfc	r3, #2, #8
    eab4:	8023      	strh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
    eab6:	f04f 33ff 	mov.w	r3, #4294967295
			if (ch == 'H') {
    eaba:	2d48      	cmp	r5, #72	; 0x48
			parser->content_length = ULLONG_MAX;
    eabc:	e9c4 2302 	strd	r2, r3, [r4, #8]
			if (ch == 'H') {
    eac0:	d103      	bne.n	eaca <http_parser_execute+0x142>
				UPDATE_STATE(s_res_or_resp_H);
    eac2:	2303      	movs	r3, #3
			UPDATE_STATE(s_req_method);
    eac4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    eac8:	e0b8      	b.n	ec3c <http_parser_execute+0x2b4>
				parser->type = HTTP_REQUEST;
    eaca:	7823      	ldrb	r3, [r4, #0]
    eacc:	f36f 0301 	bfc	r3, #0, #2
    ead0:	7023      	strb	r3, [r4, #0]
				UPDATE_STATE(s_start_req);
    ead2:	2312      	movs	r3, #18
				UPDATE_STATE(s_headers_almost_done);
    ead4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		switch (CURRENT_STATE()) {
    ead8:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    eadc:	1e43      	subs	r3, r0, #1
    eade:	2b3d      	cmp	r3, #61	; 0x3d
    eae0:	f201 80ff 	bhi.w	fce2 <http_parser_execute+0x135a>
    eae4:	a201      	add	r2, pc, #4	; (adr r2, eaec <http_parser_execute+0x164>)
    eae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    eaea:	bf00      	nop
    eaec:	0000ea8d 	.word	0x0000ea8d
    eaf0:	0000ea9f 	.word	0x0000ea9f
    eaf4:	0000ebe5 	.word	0x0000ebe5
    eaf8:	0000ec1d 	.word	0x0000ec1d
    eafc:	0000ebf3 	.word	0x0000ebf3
    eb00:	0000ec5d 	.word	0x0000ec5d
    eb04:	0000ec61 	.word	0x0000ec61
    eb08:	0000ec65 	.word	0x0000ec65
    eb0c:	0000ec69 	.word	0x0000ec69
    eb10:	0000ec7d 	.word	0x0000ec7d
    eb14:	0000ec87 	.word	0x0000ec87
    eb18:	0000ec95 	.word	0x0000ec95
    eb1c:	0000ec9f 	.word	0x0000ec9f
    eb20:	0000ecc1 	.word	0x0000ecc1
    eb24:	0000ee07 	.word	0x0000ee07
    eb28:	0000ee6b 	.word	0x0000ee6b
    eb2c:	0000ed0f 	.word	0x0000ed0f
    eb30:	0000eeab 	.word	0x0000eeab
    eb34:	0000ef81 	.word	0x0000ef81
    eb38:	0000f0b1 	.word	0x0000f0b1
    eb3c:	0000f0df 	.word	0x0000f0df
    eb40:	0000f0df 	.word	0x0000f0df
    eb44:	0000f0df 	.word	0x0000f0df
    eb48:	0000f0df 	.word	0x0000f0df
    eb4c:	0000f0f9 	.word	0x0000f0f9
    eb50:	0000f0f9 	.word	0x0000f0f9
    eb54:	0000f0f9 	.word	0x0000f0f9
    eb58:	0000f0f9 	.word	0x0000f0f9
    eb5c:	0000f0f9 	.word	0x0000f0f9
    eb60:	0000f0f9 	.word	0x0000f0f9
    eb64:	0000f0f9 	.word	0x0000f0f9
    eb68:	0000f13f 	.word	0x0000f13f
    eb6c:	0000f14f 	.word	0x0000f14f
    eb70:	0000f153 	.word	0x0000f153
    eb74:	0000f157 	.word	0x0000f157
    eb78:	0000f15b 	.word	0x0000f15b
    eb7c:	0000f15f 	.word	0x0000f15f
    eb80:	0000f171 	.word	0x0000f171
    eb84:	0000f19d 	.word	0x0000f19d
    eb88:	0000f1ad 	.word	0x0000f1ad
    eb8c:	0000f1d7 	.word	0x0000f1d7
    eb90:	0000f1e3 	.word	0x0000f1e3
    eb94:	0000ea53 	.word	0x0000ea53
    eb98:	0000f479 	.word	0x0000f479
    eb9c:	0000f493 	.word	0x0000f493
    eba0:	0000f8cb 	.word	0x0000f8cb
    eba4:	0000f499 	.word	0x0000f499
    eba8:	0000f54b 	.word	0x0000f54b
    ebac:	0000f885 	.word	0x0000f885
    ebb0:	0000f879 	.word	0x0000f879
    ebb4:	0000fbc7 	.word	0x0000fbc7
    ebb8:	0000fbe3 	.word	0x0000fbe3
    ebbc:	0000fc29 	.word	0x0000fc29
    ebc0:	0000fc31 	.word	0x0000fc31
    ebc4:	0000f93b 	.word	0x0000f93b
    ebc8:	0000f9ff 	.word	0x0000f9ff
    ebcc:	0000fc63 	.word	0x0000fc63
    ebd0:	0000fc9d 	.word	0x0000fc9d
    ebd4:	0000fcc5 	.word	0x0000fcc5
    ebd8:	0000fb13 	.word	0x0000fb13
    ebdc:	0000fb6b 	.word	0x0000fb6b
    ebe0:	0000fb7b 	.word	0x0000fb7b
			if (ch == 'T') {
    ebe4:	2d54      	cmp	r5, #84	; 0x54
    ebe6:	d106      	bne.n	ebf6 <http_parser_execute+0x26e>
				parser->type = HTTP_RESPONSE;
    ebe8:	2201      	movs	r2, #1
    ebea:	7823      	ldrb	r3, [r4, #0]
    ebec:	f362 0301 	bfi	r3, r2, #0, #2
    ebf0:	7023      	strb	r3, [r4, #0]
			UPDATE_STATE(s_res_HT);
    ebf2:	2306      	movs	r3, #6
    ebf4:	e00f      	b.n	ec16 <http_parser_execute+0x28e>
				if (UNLIKELY(ch != 'E')) {
    ebf6:	2d45      	cmp	r5, #69	; 0x45
    ebf8:	d002      	beq.n	ec00 <http_parser_execute+0x278>
				SET_ERRNO(HPE_INVALID_CONSTANT);
    ebfa:	221c      	movs	r2, #28
    ebfc:	7de3      	ldrb	r3, [r4, #23]
    ebfe:	e723      	b.n	ea48 <http_parser_execute+0xc0>
				parser->method = HTTP_HEAD;
    ec00:	2302      	movs	r3, #2
    ec02:	75a3      	strb	r3, [r4, #22]
				parser->type = HTTP_REQUEST;
    ec04:	6823      	ldr	r3, [r4, #0]
    ec06:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
    ec0a:	f023 0303 	bic.w	r3, r3, #3
    ec0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    ec12:	6023      	str	r3, [r4, #0]
    ec14:	2313      	movs	r3, #19
				UPDATE_STATE(s_chunk_size_almost_done);
    ec16:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				break;
    ec1a:	e085      	b.n	ed28 <http_parser_execute+0x3a0>
			parser->flags = 0U;
    ec1c:	8823      	ldrh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
    ec1e:	f04f 32ff 	mov.w	r2, #4294967295
			parser->flags = 0U;
    ec22:	f36f 0389 	bfc	r3, #2, #8
    ec26:	8023      	strh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
    ec28:	f04f 33ff 	mov.w	r3, #4294967295
    ec2c:	2d0d      	cmp	r5, #13
    ec2e:	e9c4 2302 	strd	r2, r3, [r4, #8]
			switch (ch) {
    ec32:	d003      	beq.n	ec3c <http_parser_execute+0x2b4>
    ec34:	2d48      	cmp	r5, #72	; 0x48
    ec36:	d00f      	beq.n	ec58 <http_parser_execute+0x2d0>
    ec38:	2d0a      	cmp	r5, #10
    ec3a:	d1de      	bne.n	ebfa <http_parser_execute+0x272>
				       p - data + 1);
    ec3c:	1bf3      	subs	r3, r6, r7
    ec3e:	3301      	adds	r3, #1
			rc = cb_notify(parser, &p_state,
    ec40:	9301      	str	r3, [sp, #4]
    ec42:	ab09      	add	r3, sp, #36	; 0x24
    ec44:	9300      	str	r3, [sp, #0]
    ec46:	2301      	movs	r3, #1
    ec48:	f8d8 2000 	ldr.w	r2, [r8]
			rc = cb_notify(parser, &p_state,
    ec4c:	4620      	mov	r0, r4
    ec4e:	f10d 0123 	add.w	r1, sp, #35	; 0x23
    ec52:	f010 f907 	bl	1ee64 <cb_notify>
    ec56:	e11f      	b.n	ee98 <http_parser_execute+0x510>
				UPDATE_STATE(s_res_H);
    ec58:	2305      	movs	r3, #5
    ec5a:	e733      	b.n	eac4 <http_parser_execute+0x13c>
			UPDATE_STATE(s_res_HTT);
    ec5c:	2307      	movs	r3, #7
    ec5e:	e7da      	b.n	ec16 <http_parser_execute+0x28e>
			UPDATE_STATE(s_res_HTTP);
    ec60:	2308      	movs	r3, #8
    ec62:	e7d8      	b.n	ec16 <http_parser_execute+0x28e>
			UPDATE_STATE(s_res_first_http_major);
    ec64:	2309      	movs	r3, #9
    ec66:	e7d6      	b.n	ec16 <http_parser_execute+0x28e>
			if (UNLIKELY(ch < '0' || ch > '9')) {
    ec68:	3d30      	subs	r5, #48	; 0x30
    ec6a:	b2eb      	uxtb	r3, r5
    ec6c:	2b09      	cmp	r3, #9
    ec6e:	d902      	bls.n	ec76 <http_parser_execute+0x2ee>
				SET_ERRNO(HPE_INVALID_VERSION);
    ec70:	220e      	movs	r2, #14
    ec72:	7de3      	ldrb	r3, [r4, #23]
    ec74:	e6e8      	b.n	ea48 <http_parser_execute+0xc0>
			UPDATE_STATE(s_res_http_major);
    ec76:	230a      	movs	r3, #10
			parser->http_major = ch - '0';
    ec78:	8225      	strh	r5, [r4, #16]
			UPDATE_STATE(s_res_http_major);
    ec7a:	e7cc      	b.n	ec16 <http_parser_execute+0x28e>
			if (ch == '.') {
    ec7c:	2d2e      	cmp	r5, #46	; 0x2e
    ec7e:	f040 827b 	bne.w	f178 <http_parser_execute+0x7f0>
				UPDATE_STATE(s_res_first_http_minor);
    ec82:	230b      	movs	r3, #11
    ec84:	e7c7      	b.n	ec16 <http_parser_execute+0x28e>
			if (UNLIKELY(!IS_NUM(ch))) {
    ec86:	3d30      	subs	r5, #48	; 0x30
    ec88:	b2eb      	uxtb	r3, r5
    ec8a:	2b09      	cmp	r3, #9
    ec8c:	d8f0      	bhi.n	ec70 <http_parser_execute+0x2e8>
			UPDATE_STATE(s_res_http_minor);
    ec8e:	230c      	movs	r3, #12
			parser->http_minor = ch - '0';
    ec90:	8265      	strh	r5, [r4, #18]
			UPDATE_STATE(s_res_http_minor);
    ec92:	e7c0      	b.n	ec16 <http_parser_execute+0x28e>
			if (ch == ' ') {
    ec94:	2d20      	cmp	r5, #32
    ec96:	f040 8290 	bne.w	f1ba <http_parser_execute+0x832>
				UPDATE_STATE(s_res_first_status_code);
    ec9a:	230d      	movs	r3, #13
    ec9c:	e7bb      	b.n	ec16 <http_parser_execute+0x28e>
			if (!IS_NUM(ch)) {
    ec9e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    eca2:	b2da      	uxtb	r2, r3
    eca4:	2a09      	cmp	r2, #9
    eca6:	d904      	bls.n	ecb2 <http_parser_execute+0x32a>
				if (ch == ' ') {
    eca8:	2d20      	cmp	r5, #32
    ecaa:	d03d      	beq.n	ed28 <http_parser_execute+0x3a0>
				SET_ERRNO(HPE_INVALID_STATUS);
    ecac:	220f      	movs	r2, #15
    ecae:	7de3      	ldrb	r3, [r4, #23]
    ecb0:	e6ca      	b.n	ea48 <http_parser_execute+0xc0>
			parser->status_code = ch - '0';
    ecb2:	82a3      	strh	r3, [r4, #20]
			UPDATE_STATE(s_res_status_code);
    ecb4:	230e      	movs	r3, #14
    ecb6:	e7ae      	b.n	ec16 <http_parser_execute+0x28e>
    ecb8:	00040016 	.word	0x00040016
    ecbc:	00024dd8 	.word	0x00024dd8
			if (!IS_NUM(ch)) {
    ecc0:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    ecc4:	2b09      	cmp	r3, #9
    ecc6:	d924      	bls.n	ed12 <http_parser_execute+0x38a>
				if ((ch == CR) || (ch == LF)) {
    ecc8:	2d0d      	cmp	r5, #13
    ecca:	d002      	beq.n	ecd2 <http_parser_execute+0x34a>
    eccc:	2d0a      	cmp	r5, #10
    ecce:	f041 8015 	bne.w	fcfc <http_parser_execute+0x1374>
					const char *no_status_txt = "";
    ecd2:	4bb8      	ldr	r3, [pc, #736]	; (efb4 <http_parser_execute+0x62c>)
					rc = cb_data(parser,
    ecd4:	2208      	movs	r2, #8
					const char *no_status_txt = "";
    ecd6:	930f      	str	r3, [sp, #60]	; 0x3c
					rc = cb_data(parser,
    ecd8:	2300      	movs	r3, #0
    ecda:	9303      	str	r3, [sp, #12]
    ecdc:	ab0f      	add	r3, sp, #60	; 0x3c
    ecde:	9302      	str	r3, [sp, #8]
					     p - data + 1, &no_status_txt, 0);
    ece0:	1bf3      	subs	r3, r6, r7
    ece2:	3301      	adds	r3, #1
					rc = cb_data(parser,
    ece4:	9301      	str	r3, [sp, #4]
    ece6:	ab09      	add	r3, sp, #36	; 0x24
    ece8:	9300      	str	r3, [sp, #0]
    ecea:	4620      	mov	r0, r4
    ecec:	f8d8 1008 	ldr.w	r1, [r8, #8]
    ecf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
    ecf4:	f010 f8d7 	bl	1eea6 <cb_data>
					if (rc != 0) {
    ecf8:	2800      	cmp	r0, #0
    ecfa:	f47f ae69 	bne.w	e9d0 <http_parser_execute+0x48>
				switch (ch) {
    ecfe:	2d0d      	cmp	r5, #13
    ed00:	f000 80b1 	beq.w	ee66 <http_parser_execute+0x4de>
    ed04:	2d20      	cmp	r5, #32
    ed06:	f000 87fc 	beq.w	fd02 <http_parser_execute+0x137a>
    ed0a:	2d0a      	cmp	r5, #10
    ed0c:	d1ce      	bne.n	ecac <http_parser_execute+0x324>
			UPDATE_STATE(s_header_field_start);
    ed0e:	232a      	movs	r3, #42	; 0x2a
    ed10:	e781      	b.n	ec16 <http_parser_execute+0x28e>
			parser->status_code *= 10U;
    ed12:	8aa3      	ldrh	r3, [r4, #20]
    ed14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
			parser->status_code += ch - '0';
    ed18:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    ed1c:	3b30      	subs	r3, #48	; 0x30
    ed1e:	b29b      	uxth	r3, r3
			if (UNLIKELY(parser->status_code > 999)) {
    ed20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
			parser->status_code += ch - '0';
    ed24:	82a3      	strh	r3, [r4, #20]
			if (UNLIKELY(parser->status_code > 999)) {
    ed26:	d2c1      	bcs.n	ecac <http_parser_execute+0x324>
	for (p = data; p != data + len; p++) {
    ed28:	3601      	adds	r6, #1
    ed2a:	45b3      	cmp	fp, r6
    ed2c:	f47f ae7f 	bne.w	ea2e <http_parser_execute+0xa6>
		     p - header_field_mark);
    ed30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		     &p_state, parsed, p - data, &header_field_mark,
    ed32:	ebab 0707 	sub.w	r7, fp, r7
		     p - header_field_mark);
    ed36:	ebab 0303 	sub.w	r3, fp, r3
	rc = cb_data(parser, settings->on_header_field, HPE_CB_header_field,
    ed3a:	9303      	str	r3, [sp, #12]
    ed3c:	ab0a      	add	r3, sp, #40	; 0x28
    ed3e:	e9cd 7301 	strd	r7, r3, [sp, #4]
    ed42:	ad09      	add	r5, sp, #36	; 0x24
    ed44:	9500      	str	r5, [sp, #0]
    ed46:	2203      	movs	r2, #3
    ed48:	4620      	mov	r0, r4
    ed4a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    ed4e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
    ed52:	f010 f8a8 	bl	1eea6 <cb_data>
	if (rc != 0) {
    ed56:	2800      	cmp	r0, #0
    ed58:	f47f ae3a 	bne.w	e9d0 <http_parser_execute+0x48>
		     p - header_value_mark);
    ed5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	rc = cb_data(parser, settings->on_header_value, HPE_CB_header_value,
    ed5e:	9500      	str	r5, [sp, #0]
		     p - header_value_mark);
    ed60:	ebab 0303 	sub.w	r3, fp, r3
	rc = cb_data(parser, settings->on_header_value, HPE_CB_header_value,
    ed64:	9303      	str	r3, [sp, #12]
    ed66:	ab0b      	add	r3, sp, #44	; 0x2c
    ed68:	e9cd 7301 	strd	r7, r3, [sp, #4]
    ed6c:	2204      	movs	r2, #4
    ed6e:	4620      	mov	r0, r4
    ed70:	f8d8 1010 	ldr.w	r1, [r8, #16]
    ed74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
    ed78:	f010 f895 	bl	1eea6 <cb_data>
	if (rc != 0) {
    ed7c:	2800      	cmp	r0, #0
    ed7e:	f47f ae27 	bne.w	e9d0 <http_parser_execute+0x48>
		     p - data, &url_mark, p - url_mark);
    ed82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	rc = cb_data(parser, settings->on_url, HPE_CB_url, &p_state, parsed,
    ed84:	9500      	str	r5, [sp, #0]
		     p - data, &url_mark, p - url_mark);
    ed86:	ebab 0303 	sub.w	r3, fp, r3
	rc = cb_data(parser, settings->on_url, HPE_CB_url, &p_state, parsed,
    ed8a:	9303      	str	r3, [sp, #12]
    ed8c:	ab0c      	add	r3, sp, #48	; 0x30
    ed8e:	e9cd 7301 	strd	r7, r3, [sp, #4]
    ed92:	2202      	movs	r2, #2
    ed94:	4620      	mov	r0, r4
    ed96:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ed9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
    ed9e:	f010 f882 	bl	1eea6 <cb_data>
	if (rc != 0) {
    eda2:	2800      	cmp	r0, #0
    eda4:	f47f ae14 	bne.w	e9d0 <http_parser_execute+0x48>
		     p - data, &body_mark, p - body_mark);
    eda8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	rc = cb_data(parser, settings->on_body, HPE_CB_body, &p_state, parsed,
    edaa:	9500      	str	r5, [sp, #0]
		     p - data, &body_mark, p - body_mark);
    edac:	ebab 0303 	sub.w	r3, fp, r3
	rc = cb_data(parser, settings->on_body, HPE_CB_body, &p_state, parsed,
    edb0:	9303      	str	r3, [sp, #12]
    edb2:	ab0d      	add	r3, sp, #52	; 0x34
    edb4:	e9cd 7301 	strd	r7, r3, [sp, #4]
    edb8:	2206      	movs	r2, #6
    edba:	4620      	mov	r0, r4
    edbc:	f8d8 1018 	ldr.w	r1, [r8, #24]
    edc0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
    edc4:	f010 f86f 	bl	1eea6 <cb_data>
	if (rc != 0) {
    edc8:	2800      	cmp	r0, #0
    edca:	f47f ae01 	bne.w	e9d0 <http_parser_execute+0x48>
		     parsed, p - data, &status_mark, p - status_mark);
    edce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	rc = cb_data(parser, settings->on_status, HPE_CB_status, &p_state,
    edd0:	9500      	str	r5, [sp, #0]
		     parsed, p - data, &status_mark, p - status_mark);
    edd2:	ebab 0303 	sub.w	r3, fp, r3
	rc = cb_data(parser, settings->on_status, HPE_CB_status, &p_state,
    edd6:	9303      	str	r3, [sp, #12]
    edd8:	ab0e      	add	r3, sp, #56	; 0x38
    edda:	e9cd 7301 	strd	r7, r3, [sp, #4]
    edde:	2208      	movs	r2, #8
    ede0:	4620      	mov	r0, r4
    ede2:	f8d8 1008 	ldr.w	r1, [r8, #8]
    ede6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
    edea:	f010 f85c 	bl	1eea6 <cb_data>
	if (rc != 0) {
    edee:	2800      	cmp	r0, #0
    edf0:	f47f adee 	bne.w	e9d0 <http_parser_execute+0x48>
	parser->state = CURRENT_STATE();
    edf4:	6823      	ldr	r3, [r4, #0]
    edf6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    edfa:	f362 2390 	bfi	r3, r2, #10, #7
    edfe:	6023      	str	r3, [r4, #0]
	*parsed = len;
    ee00:	9b05      	ldr	r3, [sp, #20]
    ee02:	9309      	str	r3, [sp, #36]	; 0x24
	return 0;
    ee04:	e5e4      	b.n	e9d0 <http_parser_execute+0x48>
			if (!status_mark && ((ch == CR) || (ch == LF))) {
    ee06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ee08:	bb03      	cbnz	r3, ee4c <http_parser_execute+0x4c4>
    ee0a:	2d0d      	cmp	r5, #13
    ee0c:	d001      	beq.n	ee12 <http_parser_execute+0x48a>
    ee0e:	2d0a      	cmp	r5, #10
    ee10:	d11a      	bne.n	ee48 <http_parser_execute+0x4c0>
				const char *no_status_txt = "";
    ee12:	4b68      	ldr	r3, [pc, #416]	; (efb4 <http_parser_execute+0x62c>)
				rc = cb_data(parser,
    ee14:	2208      	movs	r2, #8
				const char *no_status_txt = "";
    ee16:	930f      	str	r3, [sp, #60]	; 0x3c
				rc = cb_data(parser,
    ee18:	2300      	movs	r3, #0
    ee1a:	9303      	str	r3, [sp, #12]
    ee1c:	ab0f      	add	r3, sp, #60	; 0x3c
    ee1e:	9302      	str	r3, [sp, #8]
					p - data + 1, &no_status_txt, 0);
    ee20:	1bf3      	subs	r3, r6, r7
    ee22:	3301      	adds	r3, #1
				rc = cb_data(parser,
    ee24:	9301      	str	r3, [sp, #4]
    ee26:	ab09      	add	r3, sp, #36	; 0x24
    ee28:	9300      	str	r3, [sp, #0]
    ee2a:	4620      	mov	r0, r4
    ee2c:	f8d8 1008 	ldr.w	r1, [r8, #8]
    ee30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
    ee34:	f010 f837 	bl	1eea6 <cb_data>
				if (rc != 0) {
    ee38:	2800      	cmp	r0, #0
    ee3a:	f47f adc9 	bne.w	e9d0 <http_parser_execute+0x48>
			if (ch == CR) {
    ee3e:	2d0d      	cmp	r5, #13
    ee40:	d011      	beq.n	ee66 <http_parser_execute+0x4de>
			if (ch == LF) {
    ee42:	2d0a      	cmp	r5, #10
    ee44:	f43f af63 	beq.w	ed0e <http_parser_execute+0x386>
			MARK(status);
    ee48:	960e      	str	r6, [sp, #56]	; 0x38
    ee4a:	e004      	b.n	ee56 <http_parser_execute+0x4ce>
			if (ch == CR) {
    ee4c:	2d0d      	cmp	r5, #13
    ee4e:	d00a      	beq.n	ee66 <http_parser_execute+0x4de>
			if (ch == LF) {
    ee50:	2d0a      	cmp	r5, #10
    ee52:	f43f af5c 	beq.w	ed0e <http_parser_execute+0x386>
			UPDATE_STATE(s_res_status);
    ee56:	2310      	movs	r3, #16
    ee58:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			parser->index = 0U;
    ee5c:	78e3      	ldrb	r3, [r4, #3]
    ee5e:	f36f 0306 	bfc	r3, #0, #7
    ee62:	70e3      	strb	r3, [r4, #3]
			break;
    ee64:	e760      	b.n	ed28 <http_parser_execute+0x3a0>
				UPDATE_STATE(s_res_line_almost_done);
    ee66:	2311      	movs	r3, #17
    ee68:	e6d5      	b.n	ec16 <http_parser_execute+0x28e>
			if (ch == CR) {
    ee6a:	2d0d      	cmp	r5, #13
    ee6c:	d118      	bne.n	eea0 <http_parser_execute+0x518>
				UPDATE_STATE(s_res_line_almost_done);
    ee6e:	2311      	movs	r3, #17
				rc = cb_data(parser, settings->on_status,
    ee70:	2208      	movs	r2, #8
				UPDATE_STATE(s_header_field_start);
    ee72:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
					     p - status_mark);
    ee76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ee78:	1af3      	subs	r3, r6, r3
				rc = cb_data(parser, settings->on_status,
    ee7a:	9303      	str	r3, [sp, #12]
    ee7c:	ab0e      	add	r3, sp, #56	; 0x38
    ee7e:	9302      	str	r3, [sp, #8]
					     p - data + 1, &status_mark,
    ee80:	1bf3      	subs	r3, r6, r7
    ee82:	3301      	adds	r3, #1
				rc = cb_data(parser, settings->on_status,
    ee84:	9301      	str	r3, [sp, #4]
    ee86:	ab09      	add	r3, sp, #36	; 0x24
    ee88:	9300      	str	r3, [sp, #0]
    ee8a:	f8d8 1008 	ldr.w	r1, [r8, #8]
    ee8e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
    ee92:	4620      	mov	r0, r4
    ee94:	f010 f807 	bl	1eea6 <cb_data>
			if (rc != 0) {
    ee98:	2800      	cmp	r0, #0
    ee9a:	f43f af45 	beq.w	ed28 <http_parser_execute+0x3a0>
    ee9e:	e597      	b.n	e9d0 <http_parser_execute+0x48>
			if (ch == LF) {
    eea0:	2d0a      	cmp	r5, #10
    eea2:	f47f af41 	bne.w	ed28 <http_parser_execute+0x3a0>
				UPDATE_STATE(s_header_field_start);
    eea6:	232a      	movs	r3, #42	; 0x2a
    eea8:	e7e2      	b.n	ee70 <http_parser_execute+0x4e8>
			if (ch == CR || ch == LF) {
    eeaa:	2d0d      	cmp	r5, #13
    eeac:	f43f af3c 	beq.w	ed28 <http_parser_execute+0x3a0>
    eeb0:	2d0a      	cmp	r5, #10
    eeb2:	f43f af39 	beq.w	ed28 <http_parser_execute+0x3a0>
			parser->flags = 0U;
    eeb6:	8823      	ldrh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
    eeb8:	f04f 32ff 	mov.w	r2, #4294967295
			parser->flags = 0U;
    eebc:	f36f 0389 	bfc	r3, #2, #8
    eec0:	8023      	strh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
    eec2:	f04f 33ff 	mov.w	r3, #4294967295
    eec6:	e9c4 2302 	strd	r2, r3, [r4, #8]
			if (UNLIKELY(!IS_ALPHA(ch))) {
    eeca:	f045 0320 	orr.w	r3, r5, #32
    eece:	3b61      	subs	r3, #97	; 0x61
    eed0:	2b19      	cmp	r3, #25
    eed2:	d902      	bls.n	eeda <http_parser_execute+0x552>
				SET_ERRNO(HPE_INVALID_METHOD);
    eed4:	2210      	movs	r2, #16
    eed6:	7de3      	ldrb	r3, [r4, #23]
    eed8:	e5b6      	b.n	ea48 <http_parser_execute+0xc0>
			parser->method = (enum http_method) 0;
    eeda:	2300      	movs	r3, #0
    eedc:	75a3      	strb	r3, [r4, #22]
			parser->index = 1U;
    eede:	2301      	movs	r3, #1
    eee0:	78e2      	ldrb	r2, [r4, #3]
    eee2:	3d41      	subs	r5, #65	; 0x41
    eee4:	f363 0206 	bfi	r2, r3, #0, #7
    eee8:	70e2      	strb	r2, [r4, #3]
			switch (ch) {
    eeea:	2d14      	cmp	r5, #20
    eeec:	d8f2      	bhi.n	eed4 <http_parser_execute+0x54c>
    eeee:	a201      	add	r2, pc, #4	; (adr r2, eef4 <http_parser_execute+0x56c>)
    eef0:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
    eef4:	0000ef49 	.word	0x0000ef49
    eef8:	0000ef51 	.word	0x0000ef51
    eefc:	0000ef55 	.word	0x0000ef55
    ef00:	0000ef4d 	.word	0x0000ef4d
    ef04:	0000eed5 	.word	0x0000eed5
    ef08:	0000eed5 	.word	0x0000eed5
    ef0c:	0000ef4b 	.word	0x0000ef4b
    ef10:	0000ef59 	.word	0x0000ef59
    ef14:	0000eed5 	.word	0x0000eed5
    ef18:	0000eed5 	.word	0x0000eed5
    ef1c:	0000eed5 	.word	0x0000eed5
    ef20:	0000ef5d 	.word	0x0000ef5d
    ef24:	0000ef61 	.word	0x0000ef61
    ef28:	0000ef65 	.word	0x0000ef65
    ef2c:	0000ef69 	.word	0x0000ef69
    ef30:	0000ef6d 	.word	0x0000ef6d
    ef34:	0000eed5 	.word	0x0000eed5
    ef38:	0000ef71 	.word	0x0000ef71
    ef3c:	0000ef75 	.word	0x0000ef75
    ef40:	0000ef79 	.word	0x0000ef79
    ef44:	0000ef7d 	.word	0x0000ef7d
				parser->method = HTTP_ACL;
    ef48:	2313      	movs	r3, #19
				parser->method = HTTP_UNLOCK;
    ef4a:	75a3      	strb	r3, [r4, #22]
			UPDATE_STATE(s_req_method);
    ef4c:	2313      	movs	r3, #19
    ef4e:	e5b9      	b.n	eac4 <http_parser_execute+0x13c>
				parser->method = HTTP_BIND;
    ef50:	2310      	movs	r3, #16
    ef52:	e7fa      	b.n	ef4a <http_parser_execute+0x5c2>
				parser->method = HTTP_CONNECT;
    ef54:	2305      	movs	r3, #5
    ef56:	e7f8      	b.n	ef4a <http_parser_execute+0x5c2>
				parser->method = HTTP_HEAD;
    ef58:	2302      	movs	r3, #2
    ef5a:	e7f6      	b.n	ef4a <http_parser_execute+0x5c2>
				parser->method = HTTP_LOCK; /* or LINK */
    ef5c:	2309      	movs	r3, #9
    ef5e:	e7f4      	b.n	ef4a <http_parser_execute+0x5c2>
				parser->method =
    ef60:	230a      	movs	r3, #10
    ef62:	e7f2      	b.n	ef4a <http_parser_execute+0x5c2>
				parser->method = HTTP_NOTIFY;
    ef64:	2319      	movs	r3, #25
    ef66:	e7f0      	b.n	ef4a <http_parser_execute+0x5c2>
				parser->method = HTTP_OPTIONS;
    ef68:	2306      	movs	r3, #6
    ef6a:	e7ee      	b.n	ef4a <http_parser_execute+0x5c2>
				parser->method = HTTP_POST;
    ef6c:	2303      	movs	r3, #3
    ef6e:	e7ec      	b.n	ef4a <http_parser_execute+0x5c2>
				parser->method = HTTP_REPORT; /* or REBIND */
    ef70:	2314      	movs	r3, #20
    ef72:	e7ea      	b.n	ef4a <http_parser_execute+0x5c2>
				parser->method = HTTP_SUBSCRIBE; /* or SEARCH */
    ef74:	231a      	movs	r3, #26
    ef76:	e7e8      	b.n	ef4a <http_parser_execute+0x5c2>
				parser->method = HTTP_TRACE;
    ef78:	2307      	movs	r3, #7
    ef7a:	e7e6      	b.n	ef4a <http_parser_execute+0x5c2>
				parser->method = HTTP_UNLOCK;
    ef7c:	230f      	movs	r3, #15
    ef7e:	e7e4      	b.n	ef4a <http_parser_execute+0x5c2>
			if (UNLIKELY(ch == '\0')) {
    ef80:	2d00      	cmp	r5, #0
    ef82:	d0a7      	beq.n	eed4 <http_parser_execute+0x54c>
			matcher = method_strings[parser->method];
    ef84:	7da0      	ldrb	r0, [r4, #22]
    ef86:	4b0c      	ldr	r3, [pc, #48]	; (efb8 <http_parser_execute+0x630>)
			if (ch == ' ' && matcher[parser->index] == '\0') {
    ef88:	78e2      	ldrb	r2, [r4, #3]
    ef8a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    ef8e:	f002 017f 	and.w	r1, r2, #127	; 0x7f
    ef92:	2d20      	cmp	r5, #32
    ef94:	5c5b      	ldrb	r3, [r3, r1]
    ef96:	d111      	bne.n	efbc <http_parser_execute+0x634>
    ef98:	b943      	cbnz	r3, efac <http_parser_execute+0x624>
				UPDATE_STATE(s_req_spaces_before_url);
    ef9a:	2314      	movs	r3, #20
    ef9c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			++parser->index;
    efa0:	78e2      	ldrb	r2, [r4, #3]
    efa2:	1c4b      	adds	r3, r1, #1
    efa4:	f363 0206 	bfi	r2, r3, #0, #7
    efa8:	70e2      	strb	r2, [r4, #3]
			break;
    efaa:	e6bd      	b.n	ed28 <http_parser_execute+0x3a0>
			} else if (ch == matcher[parser->index]) {
    efac:	2b20      	cmp	r3, #32
    efae:	d191      	bne.n	eed4 <http_parser_execute+0x54c>
    efb0:	e7f6      	b.n	efa0 <http_parser_execute+0x618>
    efb2:	bf00      	nop
    efb4:	0002756e 	.word	0x0002756e
    efb8:	00023288 	.word	0x00023288
    efbc:	429d      	cmp	r5, r3
    efbe:	d0ef      	beq.n	efa0 <http_parser_execute+0x618>
			} else if (IS_ALPHA(ch)) {
    efc0:	f045 0320 	orr.w	r3, r5, #32
    efc4:	3b61      	subs	r3, #97	; 0x61
    efc6:	2b19      	cmp	r3, #25
    efc8:	d865      	bhi.n	f096 <http_parser_execute+0x70e>
						     parser->index << 8 | ch;
    efca:	020b      	lsls	r3, r1, #8
    efcc:	4a9e      	ldr	r2, [pc, #632]	; (f248 <http_parser_execute+0x8c0>)
				uint64_t sw_option = parser->method << 16 |
    efce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
						     parser->index << 8 | ch;
    efd2:	432b      	orrs	r3, r5
				switch (sw_option) {
    efd4:	4293      	cmp	r3, r2
    efd6:	d04e      	beq.n	f076 <http_parser_execute+0x6ee>
    efd8:	dc22      	bgt.n	f020 <http_parser_execute+0x698>
    efda:	4a9c      	ldr	r2, [pc, #624]	; (f24c <http_parser_execute+0x8c4>)
    efdc:	4293      	cmp	r3, r2
    efde:	d048      	beq.n	f072 <http_parser_execute+0x6ea>
    efe0:	dc12      	bgt.n	f008 <http_parser_execute+0x680>
    efe2:	4a9b      	ldr	r2, [pc, #620]	; (f250 <http_parser_execute+0x8c8>)
    efe4:	4293      	cmp	r3, r2
    efe6:	d03f      	beq.n	f068 <http_parser_execute+0x6e0>
    efe8:	dc08      	bgt.n	effc <http_parser_execute+0x674>
    efea:	3a14      	subs	r2, #20
    efec:	4293      	cmp	r3, r2
    efee:	d03e      	beq.n	f06e <http_parser_execute+0x6e6>
    eff0:	3211      	adds	r2, #17
    eff2:	4293      	cmp	r3, r2
    eff4:	f47f af6e 	bne.w	eed4 <http_parser_execute+0x54c>
					parser->method = HTTP_PROPFIND;
    eff8:	230c      	movs	r3, #12
    effa:	e036      	b.n	f06a <http_parser_execute+0x6e2>
    effc:	4a95      	ldr	r2, [pc, #596]	; (f254 <http_parser_execute+0x8cc>)
    effe:	4293      	cmp	r3, r2
    f000:	f47f af68 	bne.w	eed4 <http_parser_execute+0x54c>
					parser->method = HTTP_PURGE;
    f004:	231d      	movs	r3, #29
    f006:	e030      	b.n	f06a <http_parser_execute+0x6e2>
    f008:	4a93      	ldr	r2, [pc, #588]	; (f258 <http_parser_execute+0x8d0>)
    f00a:	4293      	cmp	r3, r2
    f00c:	d03f      	beq.n	f08e <http_parser_execute+0x706>
    f00e:	4a93      	ldr	r2, [pc, #588]	; (f25c <http_parser_execute+0x8d4>)
    f010:	4293      	cmp	r3, r2
    f012:	d032      	beq.n	f07a <http_parser_execute+0x6f2>
    f014:	4a92      	ldr	r2, [pc, #584]	; (f260 <http_parser_execute+0x8d8>)
    f016:	4293      	cmp	r3, r2
    f018:	f47f af5c 	bne.w	eed4 <http_parser_execute+0x54c>
					parser->method = HTTP_COPY;
    f01c:	2308      	movs	r3, #8
    f01e:	e024      	b.n	f06a <http_parser_execute+0x6e2>
    f020:	4a90      	ldr	r2, [pc, #576]	; (f264 <http_parser_execute+0x8dc>)
    f022:	4293      	cmp	r3, r2
    f024:	d035      	beq.n	f092 <http_parser_execute+0x70a>
    f026:	dc13      	bgt.n	f050 <http_parser_execute+0x6c8>
    f028:	4a8f      	ldr	r2, [pc, #572]	; (f268 <http_parser_execute+0x8e0>)
    f02a:	4293      	cmp	r3, r2
    f02c:	d02d      	beq.n	f08a <http_parser_execute+0x702>
    f02e:	dc09      	bgt.n	f044 <http_parser_execute+0x6bc>
    f030:	4a8e      	ldr	r2, [pc, #568]	; (f26c <http_parser_execute+0x8e4>)
    f032:	4293      	cmp	r3, r2
    f034:	d023      	beq.n	f07e <http_parser_execute+0x6f6>
    f036:	f502 7280 	add.w	r2, r2, #256	; 0x100
    f03a:	4293      	cmp	r3, r2
    f03c:	f47f af4a 	bne.w	eed4 <http_parser_execute+0x54c>
					parser->method = HTTP_MKCALENDAR;
    f040:	231e      	movs	r3, #30
    f042:	e012      	b.n	f06a <http_parser_execute+0x6e2>
    f044:	4a8a      	ldr	r2, [pc, #552]	; (f270 <http_parser_execute+0x8e8>)
    f046:	4293      	cmp	r3, r2
    f048:	f47f af44 	bne.w	eed4 <http_parser_execute+0x54c>
					parser->method = HTTP_UNBIND;
    f04c:	2312      	movs	r3, #18
    f04e:	e00c      	b.n	f06a <http_parser_execute+0x6e2>
    f050:	4a88      	ldr	r2, [pc, #544]	; (f274 <http_parser_execute+0x8ec>)
    f052:	4293      	cmp	r3, r2
    f054:	d017      	beq.n	f086 <http_parser_execute+0x6fe>
    f056:	4a88      	ldr	r2, [pc, #544]	; (f278 <http_parser_execute+0x8f0>)
    f058:	4293      	cmp	r3, r2
    f05a:	d012      	beq.n	f082 <http_parser_execute+0x6fa>
    f05c:	4a87      	ldr	r2, [pc, #540]	; (f27c <http_parser_execute+0x8f4>)
    f05e:	4293      	cmp	r3, r2
    f060:	f47f af38 	bne.w	eed4 <http_parser_execute+0x54c>
					parser->method = HTTP_UNLINK;
    f064:	2320      	movs	r3, #32
    f066:	e000      	b.n	f06a <http_parser_execute+0x6e2>
					parser->method = HTTP_PUT;
    f068:	2304      	movs	r3, #4
					parser->method = HTTP_PATCH;
    f06a:	75a3      	strb	r3, [r4, #22]
					break;
    f06c:	e798      	b.n	efa0 <http_parser_execute+0x618>
					parser->method = HTTP_PATCH;
    f06e:	231c      	movs	r3, #28
    f070:	e7fb      	b.n	f06a <http_parser_execute+0x6e2>
					parser->method = HTTP_CHECKOUT;
    f072:	2316      	movs	r3, #22
    f074:	e7f9      	b.n	f06a <http_parser_execute+0x6e2>
					parser->method = HTTP_MOVE;
    f076:	230b      	movs	r3, #11
    f078:	e7f7      	b.n	f06a <http_parser_execute+0x6e2>
					parser->method = HTTP_MERGE;
    f07a:	2317      	movs	r3, #23
    f07c:	e7f5      	b.n	f06a <http_parser_execute+0x6e2>
					parser->method = HTTP_MKACTIVITY;
    f07e:	2315      	movs	r3, #21
    f080:	e7f3      	b.n	f06a <http_parser_execute+0x6e2>
					parser->method = HTTP_SEARCH;
    f082:	230e      	movs	r3, #14
    f084:	e7f1      	b.n	f06a <http_parser_execute+0x6e2>
					parser->method = HTTP_REBIND;
    f086:	2311      	movs	r3, #17
    f088:	e7ef      	b.n	f06a <http_parser_execute+0x6e2>
					parser->method = HTTP_PROPPATCH;
    f08a:	230d      	movs	r3, #13
    f08c:	e7ed      	b.n	f06a <http_parser_execute+0x6e2>
					parser->method = HTTP_LINK;
    f08e:	231f      	movs	r3, #31
    f090:	e7eb      	b.n	f06a <http_parser_execute+0x6e2>
					parser->method = HTTP_UNSUBSCRIBE;
    f092:	231b      	movs	r3, #27
    f094:	e7e9      	b.n	f06a <http_parser_execute+0x6e2>
			} else if (ch == '-' &&
    f096:	2d2d      	cmp	r5, #45	; 0x2d
    f098:	f47f af1c 	bne.w	eed4 <http_parser_execute+0x54c>
    f09c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f0a0:	2a01      	cmp	r2, #1
    f0a2:	f47f af17 	bne.w	eed4 <http_parser_execute+0x54c>
					parser->index == 1U &&
    f0a6:	280a      	cmp	r0, #10
    f0a8:	f47f af14 	bne.w	eed4 <http_parser_execute+0x54c>
				parser->method = HTTP_MSEARCH;
    f0ac:	2318      	movs	r3, #24
    f0ae:	e7dc      	b.n	f06a <http_parser_execute+0x6e2>
			if (ch == ' ') {
    f0b0:	2d20      	cmp	r5, #32
    f0b2:	f43f ae39 	beq.w	ed28 <http_parser_execute+0x3a0>
			MARK(url);
    f0b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f0b8:	b903      	cbnz	r3, f0bc <http_parser_execute+0x734>
    f0ba:	960c      	str	r6, [sp, #48]	; 0x30
			if (parser->method == HTTP_CONNECT) {
    f0bc:	7da3      	ldrb	r3, [r4, #22]
			UPDATE_STATE(parse_url_char(CURRENT_STATE(), ch));
    f0be:	4629      	mov	r1, r5
			if (parser->method == HTTP_CONNECT) {
    f0c0:	2b05      	cmp	r3, #5
				UPDATE_STATE(s_req_server_start);
    f0c2:	bf04      	itt	eq
    f0c4:	2318      	moveq	r3, #24
    f0c6:	f88d 3023 	strbeq.w	r3, [sp, #35]	; 0x23
			UPDATE_STATE(parse_url_char(CURRENT_STATE(), ch));
    f0ca:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
				UPDATE_STATE
    f0ce:	f000 fe29 	bl	fd24 <parse_url_char>
				if (UNLIKELY(CURRENT_STATE() == s_dead)) {
    f0d2:	2801      	cmp	r0, #1
				UPDATE_STATE
    f0d4:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
				if (UNLIKELY(CURRENT_STATE() == s_dead)) {
    f0d8:	f47f ae26 	bne.w	ed28 <http_parser_execute+0x3a0>
    f0dc:	e009      	b.n	f0f2 <http_parser_execute+0x76a>
			switch (ch) {
    f0de:	f1a5 030a 	sub.w	r3, r5, #10
    f0e2:	b2db      	uxtb	r3, r3
    f0e4:	2b16      	cmp	r3, #22
    f0e6:	d828      	bhi.n	f13a <http_parser_execute+0x7b2>
    f0e8:	4a65      	ldr	r2, [pc, #404]	; (f280 <http_parser_execute+0x8f8>)
    f0ea:	fa22 f303 	lsr.w	r3, r2, r3
    f0ee:	07db      	lsls	r3, r3, #31
    f0f0:	d523      	bpl.n	f13a <http_parser_execute+0x7b2>
					SET_ERRNO(HPE_INVALID_URL);
    f0f2:	2211      	movs	r2, #17
    f0f4:	7de3      	ldrb	r3, [r4, #23]
    f0f6:	e4a7      	b.n	ea48 <http_parser_execute+0xc0>
			switch (ch) {
    f0f8:	2d0d      	cmp	r5, #13
    f0fa:	d017      	beq.n	f12c <http_parser_execute+0x7a4>
    f0fc:	2d20      	cmp	r5, #32
    f0fe:	d003      	beq.n	f108 <http_parser_execute+0x780>
    f100:	2d0a      	cmp	r5, #10
    f102:	d11a      	bne.n	f13a <http_parser_execute+0x7b2>
				UPDATE_STATE((ch == CR) ?
    f104:	232a      	movs	r3, #42	; 0x2a
    f106:	e012      	b.n	f12e <http_parser_execute+0x7a6>
				UPDATE_STATE(s_req_http_start);
    f108:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
					     p - url_mark);
    f10c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
				rc = cb_data(parser, settings->on_url,
    f10e:	2202      	movs	r2, #2
					     p - url_mark);
    f110:	1af3      	subs	r3, r6, r3
				rc = cb_data(parser, settings->on_url,
    f112:	9303      	str	r3, [sp, #12]
    f114:	ab0c      	add	r3, sp, #48	; 0x30
    f116:	9302      	str	r3, [sp, #8]
					     p - data + 1, &url_mark,
    f118:	1bf3      	subs	r3, r6, r7
    f11a:	3301      	adds	r3, #1
				rc = cb_data(parser, settings->on_url,
    f11c:	9301      	str	r3, [sp, #4]
    f11e:	ab09      	add	r3, sp, #36	; 0x24
    f120:	9300      	str	r3, [sp, #0]
    f122:	f8d8 1004 	ldr.w	r1, [r8, #4]
    f126:	f10d 0323 	add.w	r3, sp, #35	; 0x23
    f12a:	e6b2      	b.n	ee92 <http_parser_execute+0x50a>
				UPDATE_STATE((ch == CR) ?
    f12c:	2329      	movs	r3, #41	; 0x29
				parser->http_major = 0U;
    f12e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
				UPDATE_STATE((ch == CR) ?
    f132:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				parser->http_major = 0U;
    f136:	6122      	str	r2, [r4, #16]
    f138:	e7e8      	b.n	f10c <http_parser_execute+0x784>
				UPDATE_STATE
    f13a:	4629      	mov	r1, r5
    f13c:	e7c7      	b.n	f0ce <http_parser_execute+0x746>
			switch (ch) {
    f13e:	2d20      	cmp	r5, #32
    f140:	f43f adf2 	beq.w	ed28 <http_parser_execute+0x3a0>
    f144:	2d48      	cmp	r5, #72	; 0x48
    f146:	f47f ad58 	bne.w	ebfa <http_parser_execute+0x272>
				UPDATE_STATE(s_req_http_H);
    f14a:	2321      	movs	r3, #33	; 0x21
    f14c:	e563      	b.n	ec16 <http_parser_execute+0x28e>
			UPDATE_STATE(s_req_http_HT);
    f14e:	2322      	movs	r3, #34	; 0x22
    f150:	e561      	b.n	ec16 <http_parser_execute+0x28e>
			UPDATE_STATE(s_req_http_HTT);
    f152:	2323      	movs	r3, #35	; 0x23
    f154:	e55f      	b.n	ec16 <http_parser_execute+0x28e>
			UPDATE_STATE(s_req_http_HTTP);
    f156:	2324      	movs	r3, #36	; 0x24
    f158:	e55d      	b.n	ec16 <http_parser_execute+0x28e>
			UPDATE_STATE(s_req_first_http_major);
    f15a:	2325      	movs	r3, #37	; 0x25
    f15c:	e55b      	b.n	ec16 <http_parser_execute+0x28e>
			if (UNLIKELY(ch < '1' || ch > '9')) {
    f15e:	f1a5 0331 	sub.w	r3, r5, #49	; 0x31
    f162:	2b08      	cmp	r3, #8
    f164:	f63f ad84 	bhi.w	ec70 <http_parser_execute+0x2e8>
			parser->http_major = ch - '0';
    f168:	3d30      	subs	r5, #48	; 0x30
			UPDATE_STATE(s_req_http_major);
    f16a:	2326      	movs	r3, #38	; 0x26
			parser->http_major = ch - '0';
    f16c:	8225      	strh	r5, [r4, #16]
			UPDATE_STATE(s_req_http_major);
    f16e:	e552      	b.n	ec16 <http_parser_execute+0x28e>
			if (ch == '.') {
    f170:	2d2e      	cmp	r5, #46	; 0x2e
    f172:	d101      	bne.n	f178 <http_parser_execute+0x7f0>
				UPDATE_STATE(s_req_first_http_minor);
    f174:	2327      	movs	r3, #39	; 0x27
    f176:	e54e      	b.n	ec16 <http_parser_execute+0x28e>
			if (UNLIKELY(!IS_NUM(ch))) {
    f178:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    f17c:	2b09      	cmp	r3, #9
    f17e:	f63f ad77 	bhi.w	ec70 <http_parser_execute+0x2e8>
			parser->http_major *= 10U;
    f182:	8a23      	ldrh	r3, [r4, #16]
    f184:	eb03 0383 	add.w	r3, r3, r3, lsl #2
			parser->http_major += ch - '0';
    f188:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    f18c:	3b30      	subs	r3, #48	; 0x30
    f18e:	b29b      	uxth	r3, r3
    f190:	8223      	strh	r3, [r4, #16]
			if (UNLIKELY(parser->http_minor > 999)) {
    f192:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    f196:	f4ff adc7 	bcc.w	ed28 <http_parser_execute+0x3a0>
    f19a:	e569      	b.n	ec70 <http_parser_execute+0x2e8>
			if (UNLIKELY(!IS_NUM(ch))) {
    f19c:	3d30      	subs	r5, #48	; 0x30
    f19e:	b2eb      	uxtb	r3, r5
    f1a0:	2b09      	cmp	r3, #9
    f1a2:	f63f ad65 	bhi.w	ec70 <http_parser_execute+0x2e8>
			UPDATE_STATE(s_req_http_minor);
    f1a6:	2328      	movs	r3, #40	; 0x28
			parser->http_minor = ch - '0';
    f1a8:	8265      	strh	r5, [r4, #18]
			UPDATE_STATE(s_req_http_minor);
    f1aa:	e534      	b.n	ec16 <http_parser_execute+0x28e>
			if (ch == CR) {
    f1ac:	2d0d      	cmp	r5, #13
    f1ae:	d101      	bne.n	f1b4 <http_parser_execute+0x82c>
				UPDATE_STATE(s_req_line_almost_done);
    f1b0:	2329      	movs	r3, #41	; 0x29
    f1b2:	e530      	b.n	ec16 <http_parser_execute+0x28e>
			if (ch == LF) {
    f1b4:	2d0a      	cmp	r5, #10
    f1b6:	f43f adaa 	beq.w	ed0e <http_parser_execute+0x386>
			if (UNLIKELY(!IS_NUM(ch))) {
    f1ba:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    f1be:	2b09      	cmp	r3, #9
    f1c0:	f63f ad56 	bhi.w	ec70 <http_parser_execute+0x2e8>
			parser->http_minor *= 10U;
    f1c4:	8a63      	ldrh	r3, [r4, #18]
    f1c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
			parser->http_minor += ch - '0';
    f1ca:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    f1ce:	3b30      	subs	r3, #48	; 0x30
    f1d0:	b29b      	uxth	r3, r3
    f1d2:	8263      	strh	r3, [r4, #18]
    f1d4:	e7dd      	b.n	f192 <http_parser_execute+0x80a>
			if (UNLIKELY(ch != LF)) {
    f1d6:	2d0a      	cmp	r5, #10
    f1d8:	f43f ad99 	beq.w	ed0e <http_parser_execute+0x386>
				SET_ERRNO(HPE_LF_EXPECTED);
    f1dc:	2217      	movs	r2, #23
    f1de:	7de3      	ldrb	r3, [r4, #23]
    f1e0:	e432      	b.n	ea48 <http_parser_execute+0xc0>
			if (ch == CR) {
    f1e2:	2d0d      	cmp	r5, #13
    f1e4:	d101      	bne.n	f1ea <http_parser_execute+0x862>
				UPDATE_STATE(s_headers_almost_done);
    f1e6:	2337      	movs	r3, #55	; 0x37
    f1e8:	e515      	b.n	ec16 <http_parser_execute+0x28e>
			if (ch == LF) {
    f1ea:	2d0a      	cmp	r5, #10
    f1ec:	d101      	bne.n	f1f2 <http_parser_execute+0x86a>
				UPDATE_STATE(s_headers_almost_done);
    f1ee:	2337      	movs	r3, #55	; 0x37
    f1f0:	e470      	b.n	ead4 <http_parser_execute+0x14c>
			c = TOKEN(ch);
    f1f2:	2d20      	cmp	r5, #32
    f1f4:	d005      	beq.n	f202 <http_parser_execute+0x87a>
    f1f6:	4b23      	ldr	r3, [pc, #140]	; (f284 <http_parser_execute+0x8fc>)
    f1f8:	5d5b      	ldrb	r3, [r3, r5]
			if (UNLIKELY(!c)) {
    f1fa:	b98b      	cbnz	r3, f220 <http_parser_execute+0x898>
				SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
    f1fc:	2218      	movs	r2, #24
    f1fe:	7de3      	ldrb	r3, [r4, #23]
    f200:	e422      	b.n	ea48 <http_parser_execute+0xc0>
			MARK(header_field);
    f202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f204:	78e3      	ldrb	r3, [r4, #3]
    f206:	b13a      	cbz	r2, f218 <http_parser_execute+0x890>
			parser->index = 0U;
    f208:	f36f 0306 	bfc	r3, #0, #7
    f20c:	70e3      	strb	r3, [r4, #3]
			UPDATE_STATE(s_header_field);
    f20e:	232b      	movs	r3, #43	; 0x2b
    f210:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				break;
    f214:	2300      	movs	r3, #0
    f216:	e03a      	b.n	f28e <http_parser_execute+0x906>
			MARK(header_field);
    f218:	960a      	str	r6, [sp, #40]	; 0x28
			parser->index = 0U;
    f21a:	f362 0306 	bfi	r3, r2, #0, #7
    f21e:	e7f5      	b.n	f20c <http_parser_execute+0x884>
			MARK(header_field);
    f220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f222:	b902      	cbnz	r2, f226 <http_parser_execute+0x89e>
    f224:	960a      	str	r6, [sp, #40]	; 0x28
			parser->index = 0U;
    f226:	78e2      	ldrb	r2, [r4, #3]
    f228:	2b74      	cmp	r3, #116	; 0x74
    f22a:	f36f 0206 	bfc	r2, #0, #7
    f22e:	70e2      	strb	r2, [r4, #3]
			UPDATE_STATE(s_header_field);
    f230:	f04f 022b 	mov.w	r2, #43	; 0x2b
    f234:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
			switch (c) {
    f238:	d02e      	beq.n	f298 <http_parser_execute+0x910>
    f23a:	d825      	bhi.n	f288 <http_parser_execute+0x900>
    f23c:	2b63      	cmp	r3, #99	; 0x63
    f23e:	d02d      	beq.n	f29c <http_parser_execute+0x914>
    f240:	2b70      	cmp	r3, #112	; 0x70
    f242:	d1e7      	bne.n	f214 <http_parser_execute+0x88c>
    f244:	2305      	movs	r3, #5
    f246:	e022      	b.n	f28e <http_parser_execute+0x906>
    f248:	000a014f 	.word	0x000a014f
    f24c:	00050148 	.word	0x00050148
    f250:	00030155 	.word	0x00030155
    f254:	00040252 	.word	0x00040252
    f258:	00090149 	.word	0x00090149
    f25c:	000a0145 	.word	0x000a0145
    f260:	00050250 	.word	0x00050250
    f264:	000f0253 	.word	0x000f0253
    f268:	000c0450 	.word	0x000c0450
    f26c:	000a0241 	.word	0x000a0241
    f270:	000f0242 	.word	0x000f0242
    f274:	00140242 	.word	0x00140242
    f278:	001a0145 	.word	0x001a0145
    f27c:	000f0349 	.word	0x000f0349
    f280:	00400009 	.word	0x00400009
    f284:	00024dd8 	.word	0x00024dd8
    f288:	2b75      	cmp	r3, #117	; 0x75
    f28a:	d1c3      	bne.n	f214 <http_parser_execute+0x88c>
    f28c:	2308      	movs	r3, #8
				parser->header_state = h_C;
    f28e:	78a2      	ldrb	r2, [r4, #2]
    f290:	f363 0247 	bfi	r2, r3, #1, #7
    f294:	70a2      	strb	r2, [r4, #2]
    f296:	e547      	b.n	ed28 <http_parser_execute+0x3a0>
    f298:	2307      	movs	r3, #7
    f29a:	e7f8      	b.n	f28e <http_parser_execute+0x906>
    f29c:	2301      	movs	r3, #1
    f29e:	e7f6      	b.n	f28e <http_parser_execute+0x906>
				c = TOKEN(ch);
    f2a0:	462b      	mov	r3, r5
	switch (parser->header_state) {
    f2a2:	78a2      	ldrb	r2, [r4, #2]
    f2a4:	0852      	lsrs	r2, r2, #1
    f2a6:	3a01      	subs	r2, #1
    f2a8:	2a0b      	cmp	r2, #11
    f2aa:	f63f abd4 	bhi.w	ea56 <http_parser_execute+0xce>
    f2ae:	e8df f002 	tbb	[pc, r2]
    f2b2:	1d06      	.short	0x1d06
    f2b4:	7560412b 	.word	0x7560412b
    f2b8:	c0c0a78e 	.word	0xc0c0a78e
    f2bc:	c0c0      	.short	0xc0c0
		parser->index++;
    f2be:	78e2      	ldrb	r2, [r4, #3]
		parser->header_state = (c == 'o' ? h_CO : h_general);
    f2c0:	f1a3 0c6f 	sub.w	ip, r3, #111	; 0x6f
    f2c4:	f1dc 0300 	rsbs	r3, ip, #0
		parser->index++;
    f2c8:	f102 0201 	add.w	r2, r2, #1
		parser->header_state = (c == 'o' ? h_CO : h_general);
    f2cc:	eb43 030c 	adc.w	r3, r3, ip
    f2d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f2d4:	009b      	lsls	r3, r3, #2
    f2d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    f2da:	8862      	ldrh	r2, [r4, #2]
    f2dc:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    f2e0:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
    f2e4:	4313      	orrs	r3, r2
    f2e6:	8063      	strh	r3, [r4, #2]
		break;
    f2e8:	f7ff bbb5 	b.w	ea56 <http_parser_execute+0xce>
		parser->index++;
    f2ec:	78e2      	ldrb	r2, [r4, #3]
		parser->header_state = (c == 'n' ? h_CON : h_general);
    f2ee:	2b6e      	cmp	r3, #110	; 0x6e
		parser->index++;
    f2f0:	f102 0c01 	add.w	ip, r2, #1
    f2f4:	f36c 0206 	bfi	r2, ip, #0, #7
    f2f8:	70e2      	strb	r2, [r4, #3]
		parser->header_state = (c == 'n' ? h_CON : h_general);
    f2fa:	bf14      	ite	ne
    f2fc:	2200      	movne	r2, #0
    f2fe:	2203      	moveq	r2, #3
    f300:	78a3      	ldrb	r3, [r4, #2]
			parser->header_state = h_upgrade;
    f302:	f362 0347 	bfi	r3, r2, #1, #7
    f306:	e028      	b.n	f35a <http_parser_execute+0x9d2>
		parser->index++;
    f308:	78e2      	ldrb	r2, [r4, #3]
    f30a:	2b6e      	cmp	r3, #110	; 0x6e
    f30c:	f102 0c01 	add.w	ip, r2, #1
    f310:	f36c 0206 	bfi	r2, ip, #0, #7
    f314:	70e2      	strb	r2, [r4, #3]
		switch (c) {
    f316:	78a2      	ldrb	r2, [r4, #2]
    f318:	d004      	beq.n	f324 <http_parser_execute+0x99c>
    f31a:	2b74      	cmp	r3, #116	; 0x74
    f31c:	d008      	beq.n	f330 <http_parser_execute+0x9a8>
			parser->header_state = h_general;
    f31e:	f36f 0247 	bfc	r2, #1, #7
    f322:	e002      	b.n	f32a <http_parser_execute+0x9a2>
			parser->header_state = h_matching_connection;
    f324:	2304      	movs	r3, #4
			parser->header_state = h_matching_content_length;
    f326:	f363 0247 	bfi	r2, r3, #1, #7
    f32a:	70a2      	strb	r2, [r4, #2]
			break;
    f32c:	f7ff bb93 	b.w	ea56 <http_parser_execute+0xce>
			parser->header_state = h_matching_content_length;
    f330:	2306      	movs	r3, #6
    f332:	e7f8      	b.n	f326 <http_parser_execute+0x99e>
		parser->index++;
    f334:	78e2      	ldrb	r2, [r4, #3]
    f336:	f102 0c01 	add.w	ip, r2, #1
    f33a:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
    f33e:	f36c 0206 	bfi	r2, ip, #0, #7
		if (cond1 || c != CONNECTION[parser->index]) {
    f342:	f1bc 0f0a 	cmp.w	ip, #10
		parser->index++;
    f346:	70e2      	strb	r2, [r4, #3]
		if (cond1 || c != CONNECTION[parser->index]) {
    f348:	d804      	bhi.n	f354 <http_parser_execute+0x9cc>
    f34a:	4ab1      	ldr	r2, [pc, #708]	; (f610 <http_parser_execute+0xc88>)
    f34c:	f812 200c 	ldrb.w	r2, [r2, ip]
    f350:	429a      	cmp	r2, r3
    f352:	d005      	beq.n	f360 <http_parser_execute+0x9d8>
			parser->header_state = h_general;
    f354:	78a3      	ldrb	r3, [r4, #2]
    f356:	f36f 0347 	bfc	r3, #1, #7
			parser->header_state = h_upgrade;
    f35a:	70a3      	strb	r3, [r4, #2]
    f35c:	f7ff bb7b 	b.w	ea56 <http_parser_execute+0xce>
		} else if (parser->index == sizeof(CONNECTION) - 2) {
    f360:	78e3      	ldrb	r3, [r4, #3]
    f362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f366:	2b09      	cmp	r3, #9
    f368:	f47f ab75 	bne.w	ea56 <http_parser_execute+0xce>
			parser->header_state = h_connection;
    f36c:	2209      	movs	r2, #9
    f36e:	78a3      	ldrb	r3, [r4, #2]
    f370:	e7c7      	b.n	f302 <http_parser_execute+0x97a>
		parser->index++;
    f372:	78e2      	ldrb	r2, [r4, #3]
    f374:	f102 0c01 	add.w	ip, r2, #1
    f378:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
    f37c:	f36c 0206 	bfi	r2, ip, #0, #7
		if (cond1 || c != PROXY_CONNECTION[parser->index]) {
    f380:	f1bc 0f10 	cmp.w	ip, #16
		parser->index++;
    f384:	70e2      	strb	r2, [r4, #3]
		if (cond1 || c != PROXY_CONNECTION[parser->index]) {
    f386:	d8e5      	bhi.n	f354 <http_parser_execute+0x9cc>
    f388:	4aa2      	ldr	r2, [pc, #648]	; (f614 <http_parser_execute+0xc8c>)
    f38a:	f812 200c 	ldrb.w	r2, [r2, ip]
    f38e:	429a      	cmp	r2, r3
    f390:	d1e0      	bne.n	f354 <http_parser_execute+0x9cc>
		} else if (parser->index == sizeof(PROXY_CONNECTION) - 2) {
    f392:	78e3      	ldrb	r3, [r4, #3]
    f394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f398:	2b0f      	cmp	r3, #15
    f39a:	e7e5      	b.n	f368 <http_parser_execute+0x9e0>
		parser->index++;
    f39c:	78e2      	ldrb	r2, [r4, #3]
    f39e:	f102 0c01 	add.w	ip, r2, #1
    f3a2:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
    f3a6:	f36c 0206 	bfi	r2, ip, #0, #7
		if (cond1 || c != CONTENT_LENGTH[parser->index]) {
    f3aa:	f1bc 0f0e 	cmp.w	ip, #14
		parser->index++;
    f3ae:	70e2      	strb	r2, [r4, #3]
		if (cond1 || c != CONTENT_LENGTH[parser->index]) {
    f3b0:	d8d0      	bhi.n	f354 <http_parser_execute+0x9cc>
    f3b2:	4a99      	ldr	r2, [pc, #612]	; (f618 <http_parser_execute+0xc90>)
    f3b4:	f812 200c 	ldrb.w	r2, [r2, ip]
    f3b8:	429a      	cmp	r2, r3
    f3ba:	d1cb      	bne.n	f354 <http_parser_execute+0x9cc>
		} else if (parser->index == sizeof(CONTENT_LENGTH) - 2) {
    f3bc:	78e3      	ldrb	r3, [r4, #3]
    f3be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f3c2:	2b0d      	cmp	r3, #13
    f3c4:	f47f ab47 	bne.w	ea56 <http_parser_execute+0xce>
			parser->header_state = h_content_length;
    f3c8:	220a      	movs	r2, #10
    f3ca:	78a3      	ldrb	r3, [r4, #2]
    f3cc:	e799      	b.n	f302 <http_parser_execute+0x97a>
		parser->index++;
    f3ce:	78e2      	ldrb	r2, [r4, #3]
    f3d0:	f102 0c01 	add.w	ip, r2, #1
    f3d4:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
    f3d8:	f36c 0206 	bfi	r2, ip, #0, #7
		if (cond1 || c != TRANSFER_ENCODING[parser->index]) {
    f3dc:	f1bc 0f11 	cmp.w	ip, #17
		parser->index++;
    f3e0:	70e2      	strb	r2, [r4, #3]
		if (cond1 || c != TRANSFER_ENCODING[parser->index]) {
    f3e2:	d8b7      	bhi.n	f354 <http_parser_execute+0x9cc>
    f3e4:	4a8d      	ldr	r2, [pc, #564]	; (f61c <http_parser_execute+0xc94>)
    f3e6:	f812 200c 	ldrb.w	r2, [r2, ip]
    f3ea:	429a      	cmp	r2, r3
    f3ec:	d1b2      	bne.n	f354 <http_parser_execute+0x9cc>
		} else if (parser->index == sizeof(TRANSFER_ENCODING) - 2) {
    f3ee:	78e3      	ldrb	r3, [r4, #3]
    f3f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f3f4:	2b10      	cmp	r3, #16
    f3f6:	f47f ab2e 	bne.w	ea56 <http_parser_execute+0xce>
			parser->header_state = h_transfer_encoding;
    f3fa:	220b      	movs	r2, #11
    f3fc:	78a3      	ldrb	r3, [r4, #2]
    f3fe:	e780      	b.n	f302 <http_parser_execute+0x97a>
		parser->index++;
    f400:	78e2      	ldrb	r2, [r4, #3]
    f402:	f102 0c01 	add.w	ip, r2, #1
    f406:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
    f40a:	f36c 0206 	bfi	r2, ip, #0, #7
		if (cond1 || c != UPGRADE[parser->index]) {
    f40e:	f1bc 0f07 	cmp.w	ip, #7
		parser->index++;
    f412:	70e2      	strb	r2, [r4, #3]
		if (cond1 || c != UPGRADE[parser->index]) {
    f414:	d89e      	bhi.n	f354 <http_parser_execute+0x9cc>
    f416:	4a82      	ldr	r2, [pc, #520]	; (f620 <http_parser_execute+0xc98>)
    f418:	f812 200c 	ldrb.w	r2, [r2, ip]
    f41c:	429a      	cmp	r2, r3
    f41e:	d199      	bne.n	f354 <http_parser_execute+0x9cc>
		} else if (parser->index == sizeof(UPGRADE) - 2) {
    f420:	78e3      	ldrb	r3, [r4, #3]
    f422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f426:	2b06      	cmp	r3, #6
    f428:	f47f ab15 	bne.w	ea56 <http_parser_execute+0xce>
			parser->header_state = h_upgrade;
    f42c:	220c      	movs	r2, #12
    f42e:	78a3      	ldrb	r3, [r4, #2]
    f430:	e767      	b.n	f302 <http_parser_execute+0x97a>
		if (ch != ' ') {
    f432:	2d20      	cmp	r5, #32
    f434:	d18e      	bne.n	f354 <http_parser_execute+0x9cc>
    f436:	f7ff bb0e 	b.w	ea56 <http_parser_execute+0xce>
			if (ch == ':') {
    f43a:	2d3a      	cmp	r5, #58	; 0x3a
					     parsed, p - data + 1,
    f43c:	eba9 0307 	sub.w	r3, r9, r7
			if (ch == ':') {
    f440:	f040 845a 	bne.w	fcf8 <http_parser_execute+0x1370>
				UPDATE_STATE(s_header_value_discard_ws);
    f444:	222c      	movs	r2, #44	; 0x2c
    f446:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
					     p - header_field_mark);
    f44a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
					     parsed, p - data + 1,
    f44c:	3301      	adds	r3, #1
					     p - header_field_mark);
    f44e:	eba9 0202 	sub.w	r2, r9, r2
				rc = cb_data(parser, settings->on_header_field,
    f452:	9203      	str	r2, [sp, #12]
    f454:	9301      	str	r3, [sp, #4]
    f456:	aa0a      	add	r2, sp, #40	; 0x28
    f458:	ab09      	add	r3, sp, #36	; 0x24
    f45a:	9202      	str	r2, [sp, #8]
    f45c:	9300      	str	r3, [sp, #0]
    f45e:	2203      	movs	r2, #3
    f460:	4620      	mov	r0, r4
    f462:	f8d8 100c 	ldr.w	r1, [r8, #12]
    f466:	f10d 0323 	add.w	r3, sp, #35	; 0x23
    f46a:	f00f fd1c 	bl	1eea6 <cb_data>
				if (rc != 0) {
    f46e:	2800      	cmp	r0, #0
    f470:	f47f aaae 	bne.w	e9d0 <http_parser_execute+0x48>
    f474:	464e      	mov	r6, r9
    f476:	e457      	b.n	ed28 <http_parser_execute+0x3a0>
			if (ch == ' ' || ch == '\t') {
    f478:	2d20      	cmp	r5, #32
    f47a:	f43f ac55 	beq.w	ed28 <http_parser_execute+0x3a0>
    f47e:	2d09      	cmp	r5, #9
    f480:	f43f ac52 	beq.w	ed28 <http_parser_execute+0x3a0>
			if (ch == CR) {
    f484:	2d0d      	cmp	r5, #13
    f486:	d102      	bne.n	f48e <http_parser_execute+0xb06>
				UPDATE_STATE
    f488:	232d      	movs	r3, #45	; 0x2d
    f48a:	f7ff bbc4 	b.w	ec16 <http_parser_execute+0x28e>
			if (ch == LF) {
    f48e:	2d0a      	cmp	r5, #10
    f490:	d102      	bne.n	f498 <http_parser_execute+0xb10>
			UPDATE_STATE(s_header_value_discard_lws);
    f492:	232e      	movs	r3, #46	; 0x2e
    f494:	f7ff bbbf 	b.w	ec16 <http_parser_execute+0x28e>
			MARK(header_value);
    f498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f49a:	b903      	cbnz	r3, f49e <http_parser_execute+0xb16>
    f49c:	960b      	str	r6, [sp, #44]	; 0x2c
			UPDATE_STATE(s_header_value);
    f49e:	2330      	movs	r3, #48	; 0x30
    f4a0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			parser->index = 0U;
    f4a4:	78e3      	ldrb	r3, [r4, #3]
			c = LOWER(ch);
    f4a6:	f045 0220 	orr.w	r2, r5, #32
			parser->index = 0U;
    f4aa:	f36f 0306 	bfc	r3, #0, #7
    f4ae:	70e3      	strb	r3, [r4, #3]
			switch (parser->header_state) {
    f4b0:	78a3      	ldrb	r3, [r4, #2]
    f4b2:	085b      	lsrs	r3, r3, #1
    f4b4:	3b09      	subs	r3, #9
    f4b6:	2b05      	cmp	r3, #5
    f4b8:	d812      	bhi.n	f4e0 <http_parser_execute+0xb58>
    f4ba:	a101      	add	r1, pc, #4	; (adr r1, f4c0 <http_parser_execute+0xb38>)
    f4bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    f4c0:	0000f52f 	.word	0x0000f52f
    f4c4:	0000f4f9 	.word	0x0000f4f9
    f4c8:	0000f4e9 	.word	0x0000f4e9
    f4cc:	0000f4d9 	.word	0x0000f4d9
    f4d0:	0000f4e1 	.word	0x0000f4e1
    f4d4:	0000ed29 	.word	0x0000ed29
				parser->flags |= F_UPGRADE;
    f4d8:	8823      	ldrh	r3, [r4, #0]
    f4da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f4de:	8023      	strh	r3, [r4, #0]
				parser->header_state = h_general;
    f4e0:	78a3      	ldrb	r3, [r4, #2]
    f4e2:	f36f 0347 	bfc	r3, #1, #7
    f4e6:	e005      	b.n	f4f4 <http_parser_execute+0xb6c>
				if ('c' == c) {
    f4e8:	2a63      	cmp	r2, #99	; 0x63
    f4ea:	78a3      	ldrb	r3, [r4, #2]
    f4ec:	d1f9      	bne.n	f4e2 <http_parser_execute+0xb5a>
					parser->header_state =
    f4ee:	220d      	movs	r2, #13
					parser->header_state =
    f4f0:	f362 0347 	bfi	r3, r2, #1, #7
				parser->header_state = h_general;
    f4f4:	70a3      	strb	r3, [r4, #2]
				break;
    f4f6:	e417      	b.n	ed28 <http_parser_execute+0x3a0>
				if (UNLIKELY(!IS_NUM(ch))) {
    f4f8:	3d30      	subs	r5, #48	; 0x30
    f4fa:	b2eb      	uxtb	r3, r5
    f4fc:	2b09      	cmp	r3, #9
    f4fe:	d903      	bls.n	f508 <http_parser_execute+0xb80>
				SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
    f500:	2219      	movs	r2, #25
    f502:	7de3      	ldrb	r3, [r4, #23]
    f504:	f7ff baa0 	b.w	ea48 <http_parser_execute+0xc0>
				if (parser->flags & F_CONTENTLENGTH) {
    f508:	8823      	ldrh	r3, [r4, #0]
    f50a:	0599      	lsls	r1, r3, #22
    f50c:	f3c3 0287 	ubfx	r2, r3, #2, #8
    f510:	d503      	bpl.n	f51a <http_parser_execute+0xb92>
					SET_ERRNO
    f512:	7de3      	ldrb	r3, [r4, #23]
				SET_ERRNO(HPE_UNEXPECTED_CONTENT_LENGTH);
    f514:	221a      	movs	r2, #26
    f516:	f7ff ba97 	b.w	ea48 <http_parser_execute+0xc0>
				parser->flags |= F_CONTENTLENGTH;
    f51a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    f51e:	f362 0389 	bfi	r3, r2, #2, #8
    f522:	8023      	strh	r3, [r4, #0]
				parser->content_length = ch - '0';
    f524:	60a5      	str	r5, [r4, #8]
    f526:	17eb      	asrs	r3, r5, #31
			parser->content_length = t;
    f528:	60e3      	str	r3, [r4, #12]
			break;
    f52a:	f7ff bbfd 	b.w	ed28 <http_parser_execute+0x3a0>
				if (c == 'k') {
    f52e:	2a6b      	cmp	r2, #107	; 0x6b
    f530:	78a3      	ldrb	r3, [r4, #2]
    f532:	d101      	bne.n	f538 <http_parser_execute+0xbb0>
					parser->header_state =
    f534:	220f      	movs	r2, #15
    f536:	e7db      	b.n	f4f0 <http_parser_execute+0xb68>
				} else if (c == 'c') {
    f538:	2a63      	cmp	r2, #99	; 0x63
    f53a:	d101      	bne.n	f540 <http_parser_execute+0xbb8>
					parser->header_state =
    f53c:	2210      	movs	r2, #16
    f53e:	e7d7      	b.n	f4f0 <http_parser_execute+0xb68>
				} else if (c == 'u') {
    f540:	2a75      	cmp	r2, #117	; 0x75
					parser->header_state =
    f542:	bf0c      	ite	eq
    f544:	2211      	moveq	r2, #17
					parser->header_state =
    f546:	2212      	movne	r2, #18
    f548:	e7d2      	b.n	f4f0 <http_parser_execute+0xb68>
			for (; p != data + len; p++) {
    f54a:	46b2      	mov	sl, r6
				(enum header_states)parser->header_state;
    f54c:	f894 9002 	ldrb.w	r9, [r4, #2]
    f550:	ea4f 0959 	mov.w	r9, r9, lsr #1
			for (; p != data + len; p++) {
    f554:	45d3      	cmp	fp, sl
    f556:	d021      	beq.n	f59c <http_parser_execute+0xc14>
				ch = *p;
    f558:	f89a 5000 	ldrb.w	r5, [sl]
				if (ch == CR) {
    f55c:	2d0d      	cmp	r5, #13
    f55e:	d12d      	bne.n	f5bc <http_parser_execute+0xc34>
					UPDATE_STATE(s_header_almost_done);
    f560:	2332      	movs	r3, #50	; 0x32
    f562:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
					parser->header_state = h_state;
    f566:	78a3      	ldrb	r3, [r4, #2]
					rc = cb_data(parser,
    f568:	2204      	movs	r2, #4
					parser->header_state = h_state;
    f56a:	f369 0347 	bfi	r3, r9, #1, #7
    f56e:	70a3      	strb	r3, [r4, #2]
						     p - header_value_mark);
    f570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					rc = cb_data(parser,
    f572:	4620      	mov	r0, r4
						     p - header_value_mark);
    f574:	ebaa 0303 	sub.w	r3, sl, r3
					rc = cb_data(parser,
    f578:	9303      	str	r3, [sp, #12]
    f57a:	ab0b      	add	r3, sp, #44	; 0x2c
    f57c:	9302      	str	r3, [sp, #8]
						     p - data + 1,
    f57e:	ebaa 0307 	sub.w	r3, sl, r7
    f582:	3301      	adds	r3, #1
					rc = cb_data(parser,
    f584:	9301      	str	r3, [sp, #4]
    f586:	ab09      	add	r3, sp, #36	; 0x24
    f588:	9300      	str	r3, [sp, #0]
    f58a:	f8d8 1010 	ldr.w	r1, [r8, #16]
    f58e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
    f592:	f00f fc88 	bl	1eea6 <cb_data>
					if (rc != 0) {
    f596:	2800      	cmp	r0, #0
    f598:	f47f aa1a 	bne.w	e9d0 <http_parser_execute+0x48>
			parser->header_state = h_state;
    f59c:	78a3      	ldrb	r3, [r4, #2]
			rc = count_header_size(parser, p - start);
    f59e:	ebaa 0606 	sub.w	r6, sl, r6
			parser->header_state = h_state;
    f5a2:	f369 0347 	bfi	r3, r9, #1, #7
    f5a6:	70a3      	strb	r3, [r4, #2]
	parser->nread += bytes;
    f5a8:	6863      	ldr	r3, [r4, #4]
    f5aa:	441e      	add	r6, r3
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
    f5ac:	f5b6 3fa0 	cmp.w	r6, #81920	; 0x14000
	parser->nread += bytes;
    f5b0:	6066      	str	r6, [r4, #4]
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
    f5b2:	f240 815b 	bls.w	f86c <http_parser_execute+0xee4>
		parser->http_errno = HPE_HEADER_OVERFLOW;
    f5b6:	220c      	movs	r2, #12
    f5b8:	7de3      	ldrb	r3, [r4, #23]
    f5ba:	e03d      	b.n	f638 <http_parser_execute+0xcb0>
				if (ch == LF) {
    f5bc:	2d0a      	cmp	r5, #10
    f5be:	d131      	bne.n	f624 <http_parser_execute+0xc9c>
					UPDATE_STATE(s_header_almost_done);
    f5c0:	2332      	movs	r3, #50	; 0x32
    f5c2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	parser->nread += bytes;
    f5c6:	6863      	ldr	r3, [r4, #4]
					rc = count_header_size(parser,
    f5c8:	ebaa 0606 	sub.w	r6, sl, r6
	parser->nread += bytes;
    f5cc:	441e      	add	r6, r3
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
    f5ce:	f5b6 3fa0 	cmp.w	r6, #81920	; 0x14000
	parser->nread += bytes;
    f5d2:	6066      	str	r6, [r4, #4]
						     p - data + 1,
    f5d4:	ebaa 0207 	sub.w	r2, sl, r7
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
    f5d8:	d8ed      	bhi.n	f5b6 <http_parser_execute+0xc2e>
					parser->header_state = h_state;
    f5da:	78a3      	ldrb	r3, [r4, #2]
					rc = cb_data(parser,
    f5dc:	4620      	mov	r0, r4
					parser->header_state = h_state;
    f5de:	f369 0347 	bfi	r3, r9, #1, #7
    f5e2:	70a3      	strb	r3, [r4, #2]
						     p - header_value_mark);
    f5e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f5e6:	ebaa 0303 	sub.w	r3, sl, r3
					rc = cb_data(parser,
    f5ea:	9303      	str	r3, [sp, #12]
    f5ec:	ab0b      	add	r3, sp, #44	; 0x2c
    f5ee:	e9cd 2301 	strd	r2, r3, [sp, #4]
    f5f2:	ab09      	add	r3, sp, #36	; 0x24
    f5f4:	9300      	str	r3, [sp, #0]
    f5f6:	2204      	movs	r2, #4
    f5f8:	f8d8 1010 	ldr.w	r1, [r8, #16]
    f5fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
    f600:	f00f fc51 	bl	1eea6 <cb_data>
					if (rc != 0) {
    f604:	2800      	cmp	r0, #0
    f606:	f47f a9e3 	bne.w	e9d0 <http_parser_execute+0x48>
    f60a:	4656      	mov	r6, sl
    f60c:	f7ff ba64 	b.w	ead8 <http_parser_execute+0x150>
    f610:	00024595 	.word	0x00024595
    f614:	0002458f 	.word	0x0002458f
    f618:	000245a0 	.word	0x000245a0
    f61c:	000245af 	.word	0x000245af
    f620:	000245c1 	.word	0x000245c1
				if (!lenient && !IS_HEADER_CHAR(ch)) {
    f624:	9b06      	ldr	r3, [sp, #24]
    f626:	b95b      	cbnz	r3, f640 <http_parser_execute+0xcb8>
    f628:	2d09      	cmp	r5, #9
    f62a:	d009      	beq.n	f640 <http_parser_execute+0xcb8>
    f62c:	2d1f      	cmp	r5, #31
    f62e:	d901      	bls.n	f634 <http_parser_execute+0xcac>
    f630:	2d7f      	cmp	r5, #127	; 0x7f
    f632:	d105      	bne.n	f640 <http_parser_execute+0xcb8>
					SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
    f634:	2218      	movs	r2, #24
    f636:	7de3      	ldrb	r3, [r4, #23]
		parser->http_errno = HPE_HEADER_OVERFLOW;
    f638:	f362 0306 	bfi	r3, r2, #0, #7
    f63c:	75e3      	strb	r3, [r4, #23]
			if (rc != 0) {
    f63e:	e050      	b.n	f6e2 <http_parser_execute+0xd5a>
				c = LOWER(ch);
    f640:	f045 0320 	orr.w	r3, r5, #32
	switch (h_state) {
    f644:	f1b9 0f16 	cmp.w	r9, #22
    f648:	f200 8103 	bhi.w	f852 <http_parser_execute+0xeca>
    f64c:	e8df f019 	tbh	[pc, r9, lsl #1]
    f650:	01010017 	.word	0x01010017
    f654:	01010101 	.word	0x01010101
    f658:	01010101 	.word	0x01010101
    f65c:	01010101 	.word	0x01010101
    f660:	00300101 	.word	0x00300101
    f664:	00300038 	.word	0x00300038
    f668:	00710101 	.word	0x00710101
    f66c:	00950086 	.word	0x00950086
    f670:	00c200ad 	.word	0x00c200ad
    f674:	00e000d7 	.word	0x00e000d7
    f678:	00e300e3 	.word	0x00e300e3
    f67c:	00e3      	.short	0x00e3
		size_t limit = data + len - p;
    f67e:	ebab 020a 	sub.w	r2, fp, sl
		limit = MIN(limit, HTTP_MAX_HEADER_SIZE);
    f682:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    f686:	bf28      	it	cs
    f688:	f44f 32a0 	movcs.w	r2, #81920	; 0x14000
		p_cr = (const char *)memchr(p, CR, limit);
    f68c:	210d      	movs	r1, #13
    f68e:	4650      	mov	r0, sl
    f690:	9207      	str	r2, [sp, #28]
    f692:	f012 fad3 	bl	21c3c <memchr>
    f696:	4605      	mov	r5, r0
		p_lf = (const char *)memchr(p, LF, limit);
    f698:	210a      	movs	r1, #10
    f69a:	4650      	mov	r0, sl
    f69c:	9a07      	ldr	r2, [sp, #28]
    f69e:	f012 facd 	bl	21c3c <memchr>
		if (p_cr != NULL) {
    f6a2:	b145      	cbz	r5, f6b6 <http_parser_execute+0xd2e>
			if (p_lf != NULL && p_cr >= p_lf) {
    f6a4:	b110      	cbz	r0, f6ac <http_parser_execute+0xd24>
    f6a6:	4285      	cmp	r5, r0
    f6a8:	bf28      	it	cs
    f6aa:	4605      	movcs	r5, r0
		--p;
    f6ac:	f105 3aff 	add.w	sl, r5, #4294967295
			for (; p != data + len; p++) {
    f6b0:	f10a 0a01 	add.w	sl, sl, #1
    f6b4:	e74e      	b.n	f554 <http_parser_execute+0xbcc>
		} else if (UNLIKELY(p_lf != NULL)) {
    f6b6:	2800      	cmp	r0, #0
    f6b8:	bf14      	ite	ne
    f6ba:	4605      	movne	r5, r0
    f6bc:	465d      	moveq	r5, fp
    f6be:	e7f5      	b.n	f6ac <http_parser_execute+0xd24>
		if (ch == ' ') {
    f6c0:	2d20      	cmp	r5, #32
    f6c2:	d0f5      	beq.n	f6b0 <http_parser_execute+0xd28>
		if (UNLIKELY(!IS_NUM(ch))) {
    f6c4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    f6c8:	b2da      	uxtb	r2, r3
    f6ca:	2a09      	cmp	r2, #9
    f6cc:	d915      	bls.n	f6fa <http_parser_execute+0xd72>
			SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
    f6ce:	2219      	movs	r2, #25
    f6d0:	7de3      	ldrb	r3, [r4, #23]
    f6d2:	f362 0306 	bfi	r3, r2, #0, #7
			parser->header_state = h_state;
    f6d6:	220a      	movs	r2, #10
			SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
    f6d8:	75e3      	strb	r3, [r4, #23]
			parser->header_state = h_state;
    f6da:	78a3      	ldrb	r3, [r4, #2]
    f6dc:	f362 0347 	bfi	r3, r2, #1, #7
			parser->header_state = h_state;
    f6e0:	70a3      	strb	r3, [r4, #2]
    f6e2:	4656      	mov	r6, sl
	if (HTTP_PARSER_ERRNO(parser) == HPE_OK) {
    f6e4:	7de3      	ldrb	r3, [r4, #23]
    f6e6:	065a      	lsls	r2, r3, #25
		SET_ERRNO(HPE_UNKNOWN);
    f6e8:	bf02      	ittt	eq
    f6ea:	2220      	moveq	r2, #32
    f6ec:	f362 0306 	bfieq	r3, r2, #0, #7
    f6f0:	75e3      	strbeq	r3, [r4, #23]
	parser->state = CURRENT_STATE();
    f6f2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    f6f6:	6823      	ldr	r3, [r4, #0]
    f6f8:	e17c      	b.n	f9f4 <http_parser_execute+0x106c>
		t *= 10U;
    f6fa:	210a      	movs	r1, #10
		t = parser->content_length;
    f6fc:	e9d4 0c02 	ldrd	r0, ip, [r4, #8]
		t *= 10U;
    f700:	fba0 2501 	umull	r2, r5, r0, r1
    f704:	fb01 550c 	mla	r5, r1, ip, r5
		t += ch - '0';
    f708:	189a      	adds	r2, r3, r2
    f70a:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
		if (UNLIKELY(value < parser->content_length)) {
    f70e:	4b98      	ldr	r3, [pc, #608]	; (f970 <http_parser_execute+0xfe8>)
    f710:	f1b0 3f99 	cmp.w	r0, #2576980377	; 0x99999999
    f714:	eb7c 0303 	sbcs.w	r3, ip, r3
    f718:	d308      	bcc.n	f72c <http_parser_execute+0xda4>
			SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
    f71a:	2219      	movs	r2, #25
    f71c:	7de3      	ldrb	r3, [r4, #23]
    f71e:	f362 0306 	bfi	r3, r2, #0, #7
    f722:	75e3      	strb	r3, [r4, #23]
			parser->header_state = h_state;
    f724:	78a3      	ldrb	r3, [r4, #2]
    f726:	f361 0347 	bfi	r3, r1, #1, #7
    f72a:	e7d9      	b.n	f6e0 <http_parser_execute+0xd58>
		parser->content_length = t;
    f72c:	e9c4 2502 	strd	r2, r5, [r4, #8]
				if (rc != 0) {
    f730:	e7be      	b.n	f6b0 <http_parser_execute+0xd28>
		parser->index++;
    f732:	78e1      	ldrb	r1, [r4, #3]
    f734:	1c4a      	adds	r2, r1, #1
    f736:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f73a:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != CHUNKED[parser->index]) {
    f73e:	2a07      	cmp	r2, #7
		parser->index++;
    f740:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != CHUNKED[parser->index]) {
    f742:	d817      	bhi.n	f774 <http_parser_execute+0xdec>
    f744:	498b      	ldr	r1, [pc, #556]	; (f974 <http_parser_execute+0xfec>)
    f746:	5c8a      	ldrb	r2, [r1, r2]
    f748:	429a      	cmp	r2, r3
    f74a:	d113      	bne.n	f774 <http_parser_execute+0xdec>
		} else if (parser->index == sizeof(CHUNKED) - 2) {
    f74c:	78e3      	ldrb	r3, [r4, #3]
    f74e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			h_state = h_transfer_encoding_chunked;
    f752:	2b06      	cmp	r3, #6
    f754:	bf08      	it	eq
    f756:	f04f 0913 	moveq.w	r9, #19
    f75a:	e7a9      	b.n	f6b0 <http_parser_execute+0xd28>
		if (c == 'k') {
    f75c:	2b6b      	cmp	r3, #107	; 0x6b
    f75e:	d07c      	beq.n	f85a <http_parser_execute+0xed2>
		} else if (c == 'c') {
    f760:	2b63      	cmp	r3, #99	; 0x63
    f762:	d07d      	beq.n	f860 <http_parser_execute+0xed8>
		} else if (c == 'u') {
    f764:	2b75      	cmp	r3, #117	; 0x75
    f766:	d07e      	beq.n	f866 <http_parser_execute+0xede>
		} else if (STRICT_TOKEN(c)) {
    f768:	4a83      	ldr	r2, [pc, #524]	; (f978 <http_parser_execute+0xff0>)
    f76a:	5cd3      	ldrb	r3, [r2, r3]
    f76c:	b993      	cbnz	r3, f794 <http_parser_execute+0xe0c>
		} else if (c == ' ' || c == '\t') {
    f76e:	f015 0fdf 	tst.w	r5, #223	; 0xdf
    f772:	d04a      	beq.n	f80a <http_parser_execute+0xe82>
			h_state = h_general;
    f774:	f04f 0900 	mov.w	r9, #0
    f778:	e79a      	b.n	f6b0 <http_parser_execute+0xd28>
		parser->index++;
    f77a:	78e1      	ldrb	r1, [r4, #3]
    f77c:	1c4a      	adds	r2, r1, #1
    f77e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f782:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != KEEP_ALIVE[parser->index]) {
    f786:	2a0a      	cmp	r2, #10
		parser->index++;
    f788:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != KEEP_ALIVE[parser->index]) {
    f78a:	d803      	bhi.n	f794 <http_parser_execute+0xe0c>
    f78c:	497b      	ldr	r1, [pc, #492]	; (f97c <http_parser_execute+0xff4>)
    f78e:	5c8a      	ldrb	r2, [r1, r2]
    f790:	429a      	cmp	r2, r3
    f792:	d002      	beq.n	f79a <http_parser_execute+0xe12>
			h_state = h_matching_connection_token;
    f794:	f04f 0912 	mov.w	r9, #18
    f798:	e78a      	b.n	f6b0 <http_parser_execute+0xd28>
		} else if (parser->index == sizeof(KEEP_ALIVE) - 2) {
    f79a:	78e3      	ldrb	r3, [r4, #3]
    f79c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			h_state = h_connection_keep_alive;
    f7a0:	2b09      	cmp	r3, #9
    f7a2:	bf08      	it	eq
    f7a4:	f04f 0914 	moveq.w	r9, #20
    f7a8:	e782      	b.n	f6b0 <http_parser_execute+0xd28>
		parser->index++;
    f7aa:	78e1      	ldrb	r1, [r4, #3]
    f7ac:	1c4a      	adds	r2, r1, #1
    f7ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f7b2:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != CLOSE[parser->index]) {
    f7b6:	2a05      	cmp	r2, #5
		parser->index++;
    f7b8:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != CLOSE[parser->index]) {
    f7ba:	d8eb      	bhi.n	f794 <http_parser_execute+0xe0c>
    f7bc:	4970      	ldr	r1, [pc, #448]	; (f980 <http_parser_execute+0xff8>)
    f7be:	5c8a      	ldrb	r2, [r1, r2]
    f7c0:	429a      	cmp	r2, r3
    f7c2:	d1e7      	bne.n	f794 <http_parser_execute+0xe0c>
		} else if (parser->index == sizeof(CLOSE) - 2) {
    f7c4:	78e3      	ldrb	r3, [r4, #3]
    f7c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			h_state = h_connection_close;
    f7ca:	2b04      	cmp	r3, #4
    f7cc:	bf08      	it	eq
    f7ce:	f04f 0915 	moveq.w	r9, #21
    f7d2:	e76d      	b.n	f6b0 <http_parser_execute+0xd28>
		parser->index++;
    f7d4:	78e1      	ldrb	r1, [r4, #3]
    f7d6:	1c4a      	adds	r2, r1, #1
    f7d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f7dc:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != UPGRADE[parser->index]) {
    f7e0:	2a07      	cmp	r2, #7
		parser->index++;
    f7e2:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != UPGRADE[parser->index]) {
    f7e4:	d8d6      	bhi.n	f794 <http_parser_execute+0xe0c>
    f7e6:	4967      	ldr	r1, [pc, #412]	; (f984 <http_parser_execute+0xffc>)
    f7e8:	5c8a      	ldrb	r2, [r1, r2]
    f7ea:	429a      	cmp	r2, r3
    f7ec:	d1d2      	bne.n	f794 <http_parser_execute+0xe0c>
		} else if (parser->index == sizeof(UPGRADE) - 2) {
    f7ee:	78e3      	ldrb	r3, [r4, #3]
    f7f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			h_state = h_connection_upgrade;
    f7f4:	2b06      	cmp	r3, #6
    f7f6:	bf08      	it	eq
    f7f8:	f04f 0916 	moveq.w	r9, #22
    f7fc:	e758      	b.n	f6b0 <http_parser_execute+0xd28>
		if (ch == ',') {
    f7fe:	2d2c      	cmp	r5, #44	; 0x2c
    f800:	d1c8      	bne.n	f794 <http_parser_execute+0xe0c>
			parser->index = 0U;
    f802:	78e3      	ldrb	r3, [r4, #3]
    f804:	f36f 0306 	bfc	r3, #0, #7
    f808:	70e3      	strb	r3, [r4, #3]
			h_state = h_matching_connection_token_start;
    f80a:	f04f 090e 	mov.w	r9, #14
    f80e:	e74f      	b.n	f6b0 <http_parser_execute+0xd28>
		if (ch != ' ') {
    f810:	2d20      	cmp	r5, #32
    f812:	d1af      	bne.n	f774 <http_parser_execute+0xdec>
    f814:	e74c      	b.n	f6b0 <http_parser_execute+0xd28>
		if (ch == ',') {
    f816:	2d2c      	cmp	r5, #44	; 0x2c
    f818:	d118      	bne.n	f84c <http_parser_execute+0xec4>
				parser->flags |= F_CONNECTION_KEEP_ALIVE;
    f81a:	8823      	ldrh	r3, [r4, #0]
			if (h_state == h_connection_keep_alive) {
    f81c:	f1b9 0f14 	cmp.w	r9, #20
				parser->flags |= F_CONNECTION_KEEP_ALIVE;
    f820:	f3c3 0387 	ubfx	r3, r3, #2, #8
			if (h_state == h_connection_keep_alive) {
    f824:	d10a      	bne.n	f83c <http_parser_execute+0xeb4>
				parser->flags |= F_CONNECTION_KEEP_ALIVE;
    f826:	f043 0302 	orr.w	r3, r3, #2
    f82a:	6822      	ldr	r2, [r4, #0]
    f82c:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
    f830:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
    f834:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
    f838:	6022      	str	r2, [r4, #0]
    f83a:	e7e6      	b.n	f80a <http_parser_execute+0xe82>
			} else if (h_state == h_connection_close) {
    f83c:	f1b9 0f15 	cmp.w	r9, #21
				parser->flags |= F_CONNECTION_CLOSE;
    f840:	bf0c      	ite	eq
    f842:	f043 0304 	orreq.w	r3, r3, #4
				parser->flags |= F_CONNECTION_UPGRADE;
    f846:	f043 0308 	orrne.w	r3, r3, #8
    f84a:	e7ee      	b.n	f82a <http_parser_execute+0xea2>
		} else if (ch != ' ') {
    f84c:	2d20      	cmp	r5, #32
    f84e:	d1a1      	bne.n	f794 <http_parser_execute+0xe0c>
    f850:	e72e      	b.n	f6b0 <http_parser_execute+0xd28>
		*p_state = s_header_value;
    f852:	2330      	movs	r3, #48	; 0x30
    f854:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				if (rc != 0) {
    f858:	e78c      	b.n	f774 <http_parser_execute+0xdec>
	enum header_states h_state = *header_state;
    f85a:	f04f 090f 	mov.w	r9, #15
    f85e:	e727      	b.n	f6b0 <http_parser_execute+0xd28>
			h_state = h_matching_connection_close;
    f860:	f04f 0910 	mov.w	r9, #16
    f864:	e724      	b.n	f6b0 <http_parser_execute+0xd28>
	enum header_states h_state = *header_state;
    f866:	f04f 0911 	mov.w	r9, #17
    f86a:	e721      	b.n	f6b0 <http_parser_execute+0xd28>
			if (p == data + len) {
    f86c:	45d3      	cmp	fp, sl
    f86e:	f43f a90a 	beq.w	ea86 <http_parser_execute+0xfe>
    f872:	4656      	mov	r6, sl
    f874:	f7ff ba58 	b.w	ed28 <http_parser_execute+0x3a0>
			if (UNLIKELY(ch != LF)) {
    f878:	2d0a      	cmp	r5, #10
    f87a:	f47f acaf 	bne.w	f1dc <http_parser_execute+0x854>
			UPDATE_STATE(s_header_value_lws);
    f87e:	2331      	movs	r3, #49	; 0x31
    f880:	f7ff b9c9 	b.w	ec16 <http_parser_execute+0x28e>
			if (ch == ' ' || ch == '\t') {
    f884:	2d20      	cmp	r5, #32
    f886:	d001      	beq.n	f88c <http_parser_execute+0xf04>
    f888:	2d09      	cmp	r5, #9
    f88a:	d102      	bne.n	f892 <http_parser_execute+0xf0a>
				UPDATE_STATE(s_header_value_start);
    f88c:	232f      	movs	r3, #47	; 0x2f
    f88e:	f7ff b921 	b.w	ead4 <http_parser_execute+0x14c>
			switch (parser->header_state) {
    f892:	78a3      	ldrb	r3, [r4, #2]
    f894:	085b      	lsrs	r3, r3, #1
    f896:	3b13      	subs	r3, #19
    f898:	2b03      	cmp	r3, #3
    f89a:	d807      	bhi.n	f8ac <http_parser_execute+0xf24>
    f89c:	e8df f003 	tbb	[pc, r3]
    f8a0:	1109020d 	.word	0x1109020d
				parser->flags |= F_CONNECTION_KEEP_ALIVE;
    f8a4:	8823      	ldrh	r3, [r4, #0]
    f8a6:	f043 0308 	orr.w	r3, r3, #8
				parser->flags |= F_CONNECTION_UPGRADE;
    f8aa:	8023      	strh	r3, [r4, #0]
			UPDATE_STATE(s_header_field_start);
    f8ac:	232a      	movs	r3, #42	; 0x2a
    f8ae:	f7ff b911 	b.w	ead4 <http_parser_execute+0x14c>
				parser->flags |= F_CONNECTION_CLOSE;
    f8b2:	8823      	ldrh	r3, [r4, #0]
    f8b4:	f043 0310 	orr.w	r3, r3, #16
    f8b8:	e7f7      	b.n	f8aa <http_parser_execute+0xf22>
				parser->flags |= F_CHUNKED;
    f8ba:	8823      	ldrh	r3, [r4, #0]
    f8bc:	f043 0304 	orr.w	r3, r3, #4
    f8c0:	e7f3      	b.n	f8aa <http_parser_execute+0xf22>
				parser->flags |= F_CONNECTION_UPGRADE;
    f8c2:	8823      	ldrh	r3, [r4, #0]
    f8c4:	f043 0320 	orr.w	r3, r3, #32
    f8c8:	e7ef      	b.n	f8aa <http_parser_execute+0xf22>
			if (ch == ' ' || ch == '\t') {
    f8ca:	2d20      	cmp	r5, #32
    f8cc:	d001      	beq.n	f8d2 <http_parser_execute+0xf4a>
    f8ce:	2d09      	cmp	r5, #9
    f8d0:	d102      	bne.n	f8d8 <http_parser_execute+0xf50>
				UPDATE_STATE(s_header_value_discard_ws);
    f8d2:	232c      	movs	r3, #44	; 0x2c
    f8d4:	f7ff b99f 	b.w	ec16 <http_parser_execute+0x28e>
			switch (parser->header_state) {
    f8d8:	78a3      	ldrb	r3, [r4, #2]
    f8da:	085b      	lsrs	r3, r3, #1
    f8dc:	3b13      	subs	r3, #19
    f8de:	2b03      	cmp	r3, #3
    f8e0:	d807      	bhi.n	f8f2 <http_parser_execute+0xf6a>
    f8e2:	e8df f003 	tbb	[pc, r3]
    f8e6:	0226      	.short	0x0226
    f8e8:	221e      	.short	0x221e
				parser->flags |=
    f8ea:	8823      	ldrh	r3, [r4, #0]
    f8ec:	f043 0308 	orr.w	r3, r3, #8
				parser->flags |= F_CHUNKED;
    f8f0:	8023      	strh	r3, [r4, #0]
			MARK(header_value);
    f8f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8f4:	b903      	cbnz	r3, f8f8 <http_parser_execute+0xf70>
    f8f6:	960b      	str	r6, [sp, #44]	; 0x2c
			UPDATE_STATE(s_header_field_start);
    f8f8:	232a      	movs	r3, #42	; 0x2a
			rc = cb_data(parser, settings->on_header_value,
    f8fa:	2204      	movs	r2, #4
			UPDATE_STATE(s_header_field_start);
    f8fc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				     p - header_value_mark);
    f900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f902:	1af3      	subs	r3, r6, r3
			rc = cb_data(parser, settings->on_header_value,
    f904:	9303      	str	r3, [sp, #12]
    f906:	ab0b      	add	r3, sp, #44	; 0x2c
    f908:	9302      	str	r3, [sp, #8]
				     p - data, &header_value_mark,
    f90a:	1bf3      	subs	r3, r6, r7
			rc = cb_data(parser, settings->on_header_value,
    f90c:	9301      	str	r3, [sp, #4]
    f90e:	ab09      	add	r3, sp, #36	; 0x24
    f910:	9300      	str	r3, [sp, #0]
    f912:	f8d8 1010 	ldr.w	r1, [r8, #16]
    f916:	f10d 0323 	add.w	r3, sp, #35	; 0x23
				rc = cb_data(parser, settings->on_body,
    f91a:	4620      	mov	r0, r4
    f91c:	f00f fac3 	bl	1eea6 <cb_data>
    f920:	e020      	b.n	f964 <http_parser_execute+0xfdc>
				parser->flags |= F_CONNECTION_CLOSE;
    f922:	8823      	ldrh	r3, [r4, #0]
    f924:	f043 0310 	orr.w	r3, r3, #16
    f928:	e7e2      	b.n	f8f0 <http_parser_execute+0xf68>
				parser->flags |= F_CONNECTION_UPGRADE;
    f92a:	8823      	ldrh	r3, [r4, #0]
    f92c:	f043 0320 	orr.w	r3, r3, #32
    f930:	e7de      	b.n	f8f0 <http_parser_execute+0xf68>
				parser->flags |= F_CHUNKED;
    f932:	8823      	ldrh	r3, [r4, #0]
    f934:	f043 0304 	orr.w	r3, r3, #4
    f938:	e7da      	b.n	f8f0 <http_parser_execute+0xf68>
			if (parser->flags & F_TRAILING) {
    f93a:	8823      	ldrh	r3, [r4, #0]
    f93c:	f3c3 0187 	ubfx	r1, r3, #2, #8
    f940:	065b      	lsls	r3, r3, #25
    f942:	460a      	mov	r2, r1
    f944:	d520      	bpl.n	f988 <http_parser_execute+0x1000>
				UPDATE_STATE(s_message_done);
    f946:	233e      	movs	r3, #62	; 0x3e
    f948:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
					       p - data);
    f94c:	1bf3      	subs	r3, r6, r7
				rc = cb_notify(parser, &p_state,
    f94e:	9301      	str	r3, [sp, #4]
    f950:	ab09      	add	r3, sp, #36	; 0x24
    f952:	9300      	str	r3, [sp, #0]
    f954:	4620      	mov	r0, r4
    f956:	230a      	movs	r3, #10
    f958:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    f95c:	f10d 0123 	add.w	r1, sp, #35	; 0x23
    f960:	f00f fa80 	bl	1ee64 <cb_notify>
				if (rc != 0) {
    f964:	2800      	cmp	r0, #0
    f966:	f43f a8b7 	beq.w	ead8 <http_parser_execute+0x150>
    f96a:	f7ff b831 	b.w	e9d0 <http_parser_execute+0x48>
    f96e:	bf00      	nop
    f970:	19999999 	.word	0x19999999
    f974:	000245c9 	.word	0x000245c9
    f978:	00024dd8 	.word	0x00024dd8
    f97c:	000245d1 	.word	0x000245d1
    f980:	000245dc 	.word	0x000245dc
    f984:	000245c1 	.word	0x000245c1
			if ((parser->flags & F_CHUNKED) &&
    f988:	f011 0f01 	tst.w	r1, #1
    f98c:	7de3      	ldrb	r3, [r4, #23]
    f98e:	d002      	beq.n	f996 <http_parser_execute+0x100e>
    f990:	0608      	lsls	r0, r1, #24
    f992:	f53f adbf 	bmi.w	f514 <http_parser_execute+0xb8c>
			UPDATE_STATE(s_headers_done);
    f996:	2138      	movs	r1, #56	; 0x38
				((parser->flags & flags) == flags ||
    f998:	f002 0228 	and.w	r2, r2, #40	; 0x28
    f99c:	2a28      	cmp	r2, #40	; 0x28
			UPDATE_STATE(s_headers_done);
    f99e:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
				((parser->flags & flags) == flags ||
    f9a2:	d015      	beq.n	f9d0 <http_parser_execute+0x1048>
    f9a4:	7da2      	ldrb	r2, [r4, #22]
    f9a6:	1f51      	subs	r1, r2, #5
    f9a8:	424a      	negs	r2, r1
    f9aa:	414a      	adcs	r2, r1
			parser->upgrade =
    f9ac:	f362 13c7 	bfi	r3, r2, #7, #1
    f9b0:	75e3      	strb	r3, [r4, #23]
			if (settings->on_headers_complete) {
    f9b2:	f8d8 3014 	ldr.w	r3, [r8, #20]
    f9b6:	b133      	cbz	r3, f9c6 <http_parser_execute+0x103e>
				switch (settings->on_headers_complete(parser)) {
    f9b8:	4620      	mov	r0, r4
    f9ba:	4798      	blx	r3
    f9bc:	2801      	cmp	r0, #1
    f9be:	d00d      	beq.n	f9dc <http_parser_execute+0x1054>
    f9c0:	2802      	cmp	r0, #2
    f9c2:	d007      	beq.n	f9d4 <http_parser_execute+0x104c>
    f9c4:	b978      	cbnz	r0, f9e6 <http_parser_execute+0x105e>
			if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {
    f9c6:	7de3      	ldrb	r3, [r4, #23]
    f9c8:	065b      	lsls	r3, r3, #25
    f9ca:	f43f a885 	beq.w	ead8 <http_parser_execute+0x150>
    f9ce:	e00f      	b.n	f9f0 <http_parser_execute+0x1068>
				((parser->flags & flags) == flags ||
    f9d0:	2201      	movs	r2, #1
    f9d2:	e7eb      	b.n	f9ac <http_parser_execute+0x1024>
					parser->upgrade = 1U;
    f9d4:	7de3      	ldrb	r3, [r4, #23]
    f9d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f9da:	75e3      	strb	r3, [r4, #23]
					parser->flags |= F_SKIPBODY;
    f9dc:	8823      	ldrh	r3, [r4, #0]
    f9de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f9e2:	8023      	strh	r3, [r4, #0]
					break;
    f9e4:	e7ef      	b.n	f9c6 <http_parser_execute+0x103e>
					SET_ERRNO(HPE_CB_headers_complete);
    f9e6:	2205      	movs	r2, #5
    f9e8:	7de3      	ldrb	r3, [r4, #23]
    f9ea:	f362 0306 	bfi	r3, r2, #0, #7
    f9ee:	75e3      	strb	r3, [r4, #23]
				parser->state = CURRENT_STATE();
    f9f0:	2238      	movs	r2, #56	; 0x38
    f9f2:	6823      	ldr	r3, [r4, #0]
	parser->state = CURRENT_STATE();
    f9f4:	f362 2390 	bfi	r3, r2, #10, #7
    f9f8:	6023      	str	r3, [r4, #0]
	*parsed = p - data; /* Error */
    f9fa:	1bf6      	subs	r6, r6, r7
    f9fc:	e067      	b.n	face <http_parser_execute+0x1146>
			parser->nread = 0U;
    f9fe:	2300      	movs	r3, #0
    fa00:	6063      	str	r3, [r4, #4]
			hasBody = parser->flags & F_CHUNKED ||
    fa02:	8823      	ldrh	r3, [r4, #0]
    fa04:	f994 2017 	ldrsb.w	r2, [r4, #23]
    fa08:	f013 0f04 	tst.w	r3, #4
    fa0c:	f3c3 0587 	ubfx	r5, r3, #2, #8
    fa10:	d133      	bne.n	fa7a <http_parser_execute+0x10f2>
				  (parser->content_length > 0 &&
    fa12:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    fa16:	f113 3cff 	adds.w	ip, r3, #4294967295
    fa1a:	f141 30ff 	adc.w	r0, r1, #4294967295
			hasBody = parser->flags & F_CHUNKED ||
    fa1e:	f11c 0f02 	cmn.w	ip, #2
    fa22:	f170 30ff 	sbcs.w	r0, r0, #4294967295
    fa26:	d320      	bcc.n	fa6a <http_parser_execute+0x10e2>
			if (parser->upgrade &&
    fa28:	2a00      	cmp	r2, #0
    fa2a:	db32      	blt.n	fa92 <http_parser_execute+0x110a>
			if (parser->flags & F_SKIPBODY) {
    fa2c:	0668      	lsls	r0, r5, #25
    fa2e:	d457      	bmi.n	fae0 <http_parser_execute+0x1158>
	if (parser->content_length == 0U) {
    fa30:	430b      	orrs	r3, r1
    fa32:	d167      	bne.n	fb04 <http_parser_execute+0x117c>
			UPDATE_STATE(NEW_MESSAGE());
    fa34:	7823      	ldrb	r3, [r4, #0]
			rc = cb_notify(parser, &p_state,
    fa36:	4620      	mov	r0, r4
			UPDATE_STATE(NEW_MESSAGE());
    fa38:	f013 0f03 	tst.w	r3, #3
    fa3c:	bf14      	ite	ne
    fa3e:	2304      	movne	r3, #4
    fa40:	2312      	moveq	r3, #18
    fa42:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
				       p - data + 1);
    fa46:	1bf3      	subs	r3, r6, r7
    fa48:	3301      	adds	r3, #1
			rc = cb_notify(parser, &p_state,
    fa4a:	9301      	str	r3, [sp, #4]
    fa4c:	ab09      	add	r3, sp, #36	; 0x24
    fa4e:	9300      	str	r3, [sp, #0]
    fa50:	f8d8 201c 	ldr.w	r2, [r8, #28]
    fa54:	2307      	movs	r3, #7
    fa56:	a90f      	add	r1, sp, #60	; 0x3c
    fa58:	f00f fa04 	bl	1ee64 <cb_notify>
			if (rc != 0) {
    fa5c:	2800      	cmp	r0, #0
    fa5e:	f47e afb7 	bne.w	e9d0 <http_parser_execute+0x48>
	*current_state = p_state;
    fa62:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    fa66:	f7ff b8d6 	b.w	ec16 <http_parser_execute+0x28e>
			if (parser->upgrade &&
    fa6a:	2a00      	cmp	r2, #0
    fa6c:	db32      	blt.n	fad4 <http_parser_execute+0x114c>
			if (parser->flags & F_SKIPBODY) {
    fa6e:	0669      	lsls	r1, r5, #25
    fa70:	d436      	bmi.n	fae0 <http_parser_execute+0x1158>
		UPDATE_STATE(s_body_identity);
    fa72:	233c      	movs	r3, #60	; 0x3c
			UPDATE_STATE(s_body_identity_eof);
    fa74:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    fa78:	e7f3      	b.n	fa62 <http_parser_execute+0x10da>
			if (parser->upgrade &&
    fa7a:	2a00      	cmp	r2, #0
    fa7c:	db04      	blt.n	fa88 <http_parser_execute+0x1100>
			if (parser->flags & F_SKIPBODY) {
    fa7e:	066a      	lsls	r2, r5, #25
    fa80:	d42e      	bmi.n	fae0 <http_parser_execute+0x1158>
				UPDATE_STATE(s_chunk_size_start);
    fa82:	2333      	movs	r3, #51	; 0x33
    fa84:	f7ff b8c7 	b.w	ec16 <http_parser_execute+0x28e>
			if (parser->upgrade &&
    fa88:	7da3      	ldrb	r3, [r4, #22]
    fa8a:	2b05      	cmp	r3, #5
    fa8c:	d001      	beq.n	fa92 <http_parser_execute+0x110a>
				(parser->method == HTTP_CONNECT ||
    fa8e:	066b      	lsls	r3, r5, #25
    fa90:	d5f7      	bpl.n	fa82 <http_parser_execute+0x10fa>
				UPDATE_STATE(NEW_MESSAGE());
    fa92:	7823      	ldrb	r3, [r4, #0]
					       p - data + 1);
    fa94:	1bf6      	subs	r6, r6, r7
				UPDATE_STATE(NEW_MESSAGE());
    fa96:	f013 0f03 	tst.w	r3, #3
    fa9a:	bf14      	ite	ne
    fa9c:	2304      	movne	r3, #4
    fa9e:	2312      	moveq	r3, #18
					       p - data + 1);
    faa0:	3601      	adds	r6, #1
				UPDATE_STATE(NEW_MESSAGE());
    faa2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				rc = cb_notify(parser, &p_state,
    faa6:	ab09      	add	r3, sp, #36	; 0x24
    faa8:	9300      	str	r3, [sp, #0]
    faaa:	9601      	str	r6, [sp, #4]
    faac:	2307      	movs	r3, #7
    faae:	4620      	mov	r0, r4
    fab0:	f8d8 201c 	ldr.w	r2, [r8, #28]
    fab4:	f10d 0123 	add.w	r1, sp, #35	; 0x23
    fab8:	f00f f9d4 	bl	1ee64 <cb_notify>
				if (rc != 0) {
    fabc:	2800      	cmp	r0, #0
    fabe:	f47e af87 	bne.w	e9d0 <http_parser_execute+0x48>
				parser->state = CURRENT_STATE();
    fac2:	6823      	ldr	r3, [r4, #0]
    fac4:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    fac8:	f362 2390 	bfi	r3, r2, #10, #7
    facc:	6023      	str	r3, [r4, #0]
				*parsed = p - data + 1;
    face:	9609      	str	r6, [sp, #36]	; 0x24
				return 0;
    fad0:	f7fe bf7e 	b.w	e9d0 <http_parser_execute+0x48>
			if (parser->upgrade &&
    fad4:	7da3      	ldrb	r3, [r4, #22]
    fad6:	2b05      	cmp	r3, #5
    fad8:	d0db      	beq.n	fa92 <http_parser_execute+0x110a>
				(parser->method == HTTP_CONNECT ||
    fada:	066d      	lsls	r5, r5, #25
    fadc:	d5c9      	bpl.n	fa72 <http_parser_execute+0x10ea>
    fade:	e7d8      	b.n	fa92 <http_parser_execute+0x110a>
				UPDATE_STATE(NEW_MESSAGE());
    fae0:	7823      	ldrb	r3, [r4, #0]
    fae2:	f013 0f03 	tst.w	r3, #3
    fae6:	bf14      	ite	ne
    fae8:	2304      	movne	r3, #4
    faea:	2312      	moveq	r3, #18
    faec:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
					       p - data + 1);
    faf0:	1bf3      	subs	r3, r6, r7
    faf2:	3301      	adds	r3, #1
				rc = cb_notify(parser, &p_state,
    faf4:	9301      	str	r3, [sp, #4]
    faf6:	ab09      	add	r3, sp, #36	; 0x24
    faf8:	9300      	str	r3, [sp, #0]
    fafa:	f8d8 201c 	ldr.w	r2, [r8, #28]
    fafe:	2307      	movs	r3, #7
    fb00:	f7ff b8a4 	b.w	ec4c <http_parser_execute+0x2c4>
		if (!http_message_needs_eof(parser)) {
    fb04:	4620      	mov	r0, r4
    fb06:	f00f f9f9 	bl	1eefc <http_message_needs_eof>
    fb0a:	2800      	cmp	r0, #0
    fb0c:	d092      	beq.n	fa34 <http_parser_execute+0x10ac>
			UPDATE_STATE(s_body_identity_eof);
    fb0e:	233d      	movs	r3, #61	; 0x3d
    fb10:	e7b0      	b.n	fa74 <http_parser_execute+0x10ec>
			uint64_t to_read = MIN(parser->content_length,
    fb12:	ebab 0206 	sub.w	r2, fp, r6
    fb16:	e9d4 e102 	ldrd	lr, r1, [r4, #8]
    fb1a:	17d0      	asrs	r0, r2, #31
    fb1c:	4596      	cmp	lr, r2
			MARK(body);
    fb1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			uint64_t to_read = MIN(parser->content_length,
    fb20:	eb71 0c00 	sbcs.w	ip, r1, r0
    fb24:	bf3c      	itt	cc
    fb26:	4672      	movcc	r2, lr
    fb28:	4608      	movcc	r0, r1
			MARK(body);
    fb2a:	b903      	cbnz	r3, fb2e <http_parser_execute+0x11a6>
    fb2c:	960d      	str	r6, [sp, #52]	; 0x34
			parser->content_length -= to_read;
    fb2e:	ebbe 0302 	subs.w	r3, lr, r2
    fb32:	eb61 0100 	sbc.w	r1, r1, r0
    fb36:	e9c4 3102 	strd	r3, r1, [r4, #8]
			p += to_read - 1;
    fb3a:	3a01      	subs	r2, #1
			if (parser->content_length == 0U) {
    fb3c:	430b      	orrs	r3, r1
			p += to_read - 1;
    fb3e:	4416      	add	r6, r2
			if (parser->content_length == 0U) {
    fb40:	f47f a8f2 	bne.w	ed28 <http_parser_execute+0x3a0>
				UPDATE_STATE(s_message_done);
    fb44:	233e      	movs	r3, #62	; 0x3e
    fb46:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
					     p - body_mark + 1);
    fb4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				rc = cb_data(parser, settings->on_body,
    fb4c:	2206      	movs	r2, #6
					     p - body_mark + 1);
    fb4e:	1af3      	subs	r3, r6, r3
    fb50:	3301      	adds	r3, #1
				rc = cb_data(parser, settings->on_body,
    fb52:	9303      	str	r3, [sp, #12]
    fb54:	ab0d      	add	r3, sp, #52	; 0x34
    fb56:	9302      	str	r3, [sp, #8]
					     p - data, &body_mark,
    fb58:	1bf3      	subs	r3, r6, r7
				rc = cb_data(parser, settings->on_body,
    fb5a:	9301      	str	r3, [sp, #4]
    fb5c:	ab09      	add	r3, sp, #36	; 0x24
    fb5e:	9300      	str	r3, [sp, #0]
    fb60:	f8d8 1018 	ldr.w	r1, [r8, #24]
    fb64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
    fb68:	e6d7      	b.n	f91a <http_parser_execute+0xf92>
			MARK(body);
    fb6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    fb6c:	b903      	cbnz	r3, fb70 <http_parser_execute+0x11e8>
    fb6e:	960d      	str	r6, [sp, #52]	; 0x34
			p = data + len - 1;
    fb70:	9b05      	ldr	r3, [sp, #20]
    fb72:	1e5e      	subs	r6, r3, #1
    fb74:	443e      	add	r6, r7
			break;
    fb76:	f7ff b8d7 	b.w	ed28 <http_parser_execute+0x3a0>
			UPDATE_STATE(NEW_MESSAGE());
    fb7a:	7823      	ldrb	r3, [r4, #0]
				       p - data + 1);
    fb7c:	1bf5      	subs	r5, r6, r7
			UPDATE_STATE(NEW_MESSAGE());
    fb7e:	f013 0f03 	tst.w	r3, #3
    fb82:	bf14      	ite	ne
    fb84:	2304      	movne	r3, #4
    fb86:	2312      	moveq	r3, #18
				       p - data + 1);
    fb88:	3501      	adds	r5, #1
			UPDATE_STATE(NEW_MESSAGE());
    fb8a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			rc = cb_notify(parser, &p_state,
    fb8e:	ab09      	add	r3, sp, #36	; 0x24
    fb90:	9300      	str	r3, [sp, #0]
    fb92:	9501      	str	r5, [sp, #4]
    fb94:	2307      	movs	r3, #7
    fb96:	4620      	mov	r0, r4
    fb98:	f8d8 201c 	ldr.w	r2, [r8, #28]
    fb9c:	f10d 0123 	add.w	r1, sp, #35	; 0x23
    fba0:	f00f f960 	bl	1ee64 <cb_notify>
			if (rc != 0) {
    fba4:	2800      	cmp	r0, #0
    fba6:	f47e af13 	bne.w	e9d0 <http_parser_execute+0x48>
			if (parser->upgrade) {
    fbaa:	f994 3017 	ldrsb.w	r3, [r4, #23]
    fbae:	2b00      	cmp	r3, #0
    fbb0:	f6bf a8ba 	bge.w	ed28 <http_parser_execute+0x3a0>
				parser->state = CURRENT_STATE();
    fbb4:	6823      	ldr	r3, [r4, #0]
    fbb6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    fbba:	f362 2390 	bfi	r3, r2, #10, #7
    fbbe:	6023      	str	r3, [r4, #0]
				*parsed = p - data + 1;
    fbc0:	9509      	str	r5, [sp, #36]	; 0x24
				return 0;
    fbc2:	f7fe bf05 	b.w	e9d0 <http_parser_execute+0x48>
			unhex_val = unhex[(unsigned char)ch];
    fbc6:	4b50      	ldr	r3, [pc, #320]	; (fd08 <http_parser_execute+0x1380>)
    fbc8:	575b      	ldrsb	r3, [r3, r5]
			if (UNLIKELY(unhex_val == -1)) {
    fbca:	1c58      	adds	r0, r3, #1
    fbcc:	d103      	bne.n	fbd6 <http_parser_execute+0x124e>
				SET_ERRNO(HPE_INVALID_CHUNK_SIZE);
    fbce:	221b      	movs	r2, #27
    fbd0:	7de3      	ldrb	r3, [r4, #23]
    fbd2:	f7fe bf39 	b.w	ea48 <http_parser_execute+0xc0>
			parser->content_length = unhex_val;
    fbd6:	17da      	asrs	r2, r3, #31
    fbd8:	e9c4 3202 	strd	r3, r2, [r4, #8]
			UPDATE_STATE(s_chunk_size);
    fbdc:	2334      	movs	r3, #52	; 0x34
    fbde:	f7ff b81a 	b.w	ec16 <http_parser_execute+0x28e>
			if (ch == CR) {
    fbe2:	2d0d      	cmp	r5, #13
    fbe4:	d102      	bne.n	fbec <http_parser_execute+0x1264>
				UPDATE_STATE(s_chunk_size_almost_done);
    fbe6:	2336      	movs	r3, #54	; 0x36
    fbe8:	f7ff b815 	b.w	ec16 <http_parser_execute+0x28e>
			unhex_val = unhex[(unsigned char)ch];
    fbec:	4b46      	ldr	r3, [pc, #280]	; (fd08 <http_parser_execute+0x1380>)
    fbee:	575a      	ldrsb	r2, [r3, r5]
			if (unhex_val == -1) {
    fbf0:	1c51      	adds	r1, r2, #1
    fbf2:	d106      	bne.n	fc02 <http_parser_execute+0x127a>
				if (ch == ';' || ch == ' ') {
    fbf4:	2d3b      	cmp	r5, #59	; 0x3b
    fbf6:	d001      	beq.n	fbfc <http_parser_execute+0x1274>
    fbf8:	2d20      	cmp	r5, #32
    fbfa:	d1e8      	bne.n	fbce <http_parser_execute+0x1246>
					UPDATE_STATE(s_chunk_parameters);
    fbfc:	2335      	movs	r3, #53	; 0x35
    fbfe:	f7ff b80a 	b.w	ec16 <http_parser_execute+0x28e>
			t = parser->content_length;
    fc02:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
			t *= 16U;
    fc06:	0103      	lsls	r3, r0, #4
    fc08:	0129      	lsls	r1, r5, #4
			t += unhex_val;
    fc0a:	1851      	adds	r1, r2, r1
			t *= 16U;
    fc0c:	ea43 7315 	orr.w	r3, r3, r5, lsr #28
			t += unhex_val;
    fc10:	eb43 73e2 	adc.w	r3, r3, r2, asr #31
			if (UNLIKELY(ulong_value < parser->content_length)) {
    fc14:	f06f 0201 	mvn.w	r2, #1
    fc18:	42aa      	cmp	r2, r5
    fc1a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    fc1e:	4182      	sbcs	r2, r0
    fc20:	f4ff ac6e 	bcc.w	f500 <http_parser_execute+0xb78>
			parser->content_length = t;
    fc24:	60a1      	str	r1, [r4, #8]
    fc26:	e47f      	b.n	f528 <http_parser_execute+0xba0>
			if (ch == CR) {
    fc28:	2d0d      	cmp	r5, #13
    fc2a:	f47f a87d 	bne.w	ed28 <http_parser_execute+0x3a0>
    fc2e:	e7da      	b.n	fbe6 <http_parser_execute+0x125e>
			parser->nread = 0U;
    fc30:	2300      	movs	r3, #0
    fc32:	6063      	str	r3, [r4, #4]
			if (parser->content_length == 0U) {
    fc34:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    fc38:	4313      	orrs	r3, r2
				parser->flags |= F_TRAILING;
    fc3a:	bf09      	itett	eq
    fc3c:	8823      	ldrheq	r3, [r4, #0]
    fc3e:	2339      	movne	r3, #57	; 0x39
    fc40:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    fc44:	8023      	strheq	r3, [r4, #0]
				UPDATE_STATE(s_header_field_start);
    fc46:	bf08      	it	eq
    fc48:	232a      	moveq	r3, #42	; 0x2a
    fc4a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				       p - data + 1);
    fc4e:	1bf3      	subs	r3, r6, r7
    fc50:	3301      	adds	r3, #1
			rc = cb_notify(parser, &p_state,
    fc52:	9301      	str	r3, [sp, #4]
    fc54:	ab09      	add	r3, sp, #36	; 0x24
    fc56:	9300      	str	r3, [sp, #0]
    fc58:	f8d8 2020 	ldr.w	r2, [r8, #32]
    fc5c:	2309      	movs	r3, #9
    fc5e:	f7fe bff5 	b.w	ec4c <http_parser_execute+0x2c4>
			uint64_t to_read = MIN(parser->content_length,
    fc62:	ebab 0306 	sub.w	r3, fp, r6
    fc66:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
    fc6a:	17dd      	asrs	r5, r3, #31
    fc6c:	429a      	cmp	r2, r3
    fc6e:	eb71 0005 	sbcs.w	r0, r1, r5
			MARK(body);
    fc72:	980d      	ldr	r0, [sp, #52]	; 0x34
			uint64_t to_read = MIN(parser->content_length,
    fc74:	bf3c      	itt	cc
    fc76:	4613      	movcc	r3, r2
    fc78:	460d      	movcc	r5, r1
			MARK(body);
    fc7a:	b900      	cbnz	r0, fc7e <http_parser_execute+0x12f6>
    fc7c:	960d      	str	r6, [sp, #52]	; 0x34
			parser->content_length -= to_read;
    fc7e:	1ad2      	subs	r2, r2, r3
    fc80:	eb61 0105 	sbc.w	r1, r1, r5
    fc84:	e9c4 2102 	strd	r2, r1, [r4, #8]
			if (parser->content_length == 0U) {
    fc88:	430a      	orrs	r2, r1
    fc8a:	d003      	beq.n	fc94 <http_parser_execute+0x130c>
			p += to_read - 1;
    fc8c:	3b01      	subs	r3, #1
    fc8e:	441e      	add	r6, r3
    fc90:	f7ff b84a 	b.w	ed28 <http_parser_execute+0x3a0>
				UPDATE_STATE(s_chunk_data_almost_done);
    fc94:	223a      	movs	r2, #58	; 0x3a
    fc96:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    fc9a:	e7f7      	b.n	fc8c <http_parser_execute+0x1304>
			UPDATE_STATE(s_chunk_data_done);
    fc9c:	233b      	movs	r3, #59	; 0x3b
    fc9e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				     p - body_mark);
    fca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			rc = cb_data(parser, settings->on_body, HPE_CB_body,
    fca4:	2206      	movs	r2, #6
				     p - body_mark);
    fca6:	1af3      	subs	r3, r6, r3
			rc = cb_data(parser, settings->on_body, HPE_CB_body,
    fca8:	9303      	str	r3, [sp, #12]
    fcaa:	ab0d      	add	r3, sp, #52	; 0x34
    fcac:	9302      	str	r3, [sp, #8]
				     &p_state, parsed, p - data + 1, &body_mark,
    fcae:	1bf3      	subs	r3, r6, r7
    fcb0:	3301      	adds	r3, #1
			rc = cb_data(parser, settings->on_body, HPE_CB_body,
    fcb2:	9301      	str	r3, [sp, #4]
    fcb4:	ab09      	add	r3, sp, #36	; 0x24
    fcb6:	9300      	str	r3, [sp, #0]
    fcb8:	f8d8 1018 	ldr.w	r1, [r8, #24]
    fcbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
    fcc0:	f7ff b8e7 	b.w	ee92 <http_parser_execute+0x50a>
			parser->nread = 0U;
    fcc4:	2300      	movs	r3, #0
    fcc6:	6063      	str	r3, [r4, #4]
			UPDATE_STATE(s_chunk_size_start);
    fcc8:	2333      	movs	r3, #51	; 0x33
    fcca:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				       p - data + 1);
    fcce:	1bf3      	subs	r3, r6, r7
    fcd0:	3301      	adds	r3, #1
			rc = cb_notify(parser, &p_state,
    fcd2:	9301      	str	r3, [sp, #4]
    fcd4:	ab09      	add	r3, sp, #36	; 0x24
    fcd6:	9300      	str	r3, [sp, #0]
    fcd8:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    fcdc:	230a      	movs	r3, #10
    fcde:	f7fe bfb5 	b.w	ec4c <http_parser_execute+0x2c4>
			SET_ERRNO(HPE_INVALID_INTERNAL_STATE);
    fce2:	221d      	movs	r2, #29
    fce4:	7de3      	ldrb	r3, [r4, #23]
    fce6:	f7fe beaf 	b.w	ea48 <http_parser_execute+0xc0>
    fcea:	220c      	movs	r2, #12
		parser->http_errno = HPE_HEADER_OVERFLOW;
    fcec:	7de3      	ldrb	r3, [r4, #23]
    fcee:	464e      	mov	r6, r9
    fcf0:	f362 0306 	bfi	r3, r2, #0, #7
    fcf4:	75e3      	strb	r3, [r4, #23]
    fcf6:	e4f5      	b.n	f6e4 <http_parser_execute+0xd5c>
    fcf8:	2218      	movs	r2, #24
    fcfa:	e7f7      	b.n	fcec <http_parser_execute+0x1364>
				switch (ch) {
    fcfc:	2d20      	cmp	r5, #32
    fcfe:	f47e afd5 	bne.w	ecac <http_parser_execute+0x324>
					UPDATE_STATE(s_res_status_start);
    fd02:	230f      	movs	r3, #15
    fd04:	f7fe bf87 	b.w	ec16 <http_parser_execute+0x28e>
    fd08:	00024cd8 	.word	0x00024cd8

0000fd0c <http_method_str>:
}


const char *http_method_str(enum http_method m)
{
	return ELEM_AT(method_strings, m, "<unknown>");
    fd0c:	2820      	cmp	r0, #32
    fd0e:	bf9a      	itte	ls
    fd10:	4b02      	ldrls	r3, [pc, #8]	; (fd1c <http_method_str+0x10>)
    fd12:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    fd16:	4802      	ldrhi	r0, [pc, #8]	; (fd20 <http_method_str+0x14>)
}
    fd18:	4770      	bx	lr
    fd1a:	bf00      	nop
    fd1c:	00023288 	.word	0x00023288
    fd20:	000245e2 	.word	0x000245e2

0000fd24 <parse_url_char>:
 * assumed that the caller cares about (and can detect) the transition between
 * URL and non-URL states by looking for these.
 */
enum state parse_url_char(enum state s, const char ch)
{
	if (ch == ' ' || ch == '\r' || ch == '\n') {
    fd24:	f1a1 030a 	sub.w	r3, r1, #10
    fd28:	b2db      	uxtb	r3, r3
    fd2a:	2b16      	cmp	r3, #22
{
    fd2c:	b510      	push	{r4, lr}
    fd2e:	d807      	bhi.n	fd40 <parse_url_char+0x1c>
    fd30:	4a7a      	ldr	r2, [pc, #488]	; (ff1c <parse_url_char+0x1f8>)
    fd32:	fa22 f303 	lsr.w	r3, r2, r3
    fd36:	07db      	lsls	r3, r3, #31
    fd38:	f140 80d7 	bpl.w	feea <parse_url_char+0x1c6>
		return s_dead;
    fd3c:	2001      	movs	r0, #1
    fd3e:	e018      	b.n	fd72 <parse_url_char+0x4e>
	if (ch == '\t' || ch == '\f') {
		return s_dead;
	}
#endif

	switch (s) {
    fd40:	f1a0 0314 	sub.w	r3, r0, #20
    fd44:	2b0b      	cmp	r3, #11
    fd46:	d8f9      	bhi.n	fd3c <parse_url_char+0x18>
    fd48:	e8df f003 	tbb	[pc, r3]
    fd4c:	231e1406 	.word	0x231e1406
    fd50:	68283131 	.word	0x68283131
    fd54:	b89e8383 	.word	0xb89e8383
		/* Proxied requests are followed by scheme of an absolute URI
		 * (alpha).
		 * All methods except CONNECT are followed by '/' or '*'.
		 */

		if (ch == '/' || ch == '*') {
    fd58:	292f      	cmp	r1, #47	; 0x2f
    fd5a:	f000 80bc 	beq.w	fed6 <parse_url_char+0x1b2>
    fd5e:	292a      	cmp	r1, #42	; 0x2a
    fd60:	f000 80b9 	beq.w	fed6 <parse_url_char+0x1b2>
			return s_req_path;
		}

		if (IS_ALPHA(ch)) {
    fd64:	f041 0120 	orr.w	r1, r1, #32
    fd68:	3961      	subs	r1, #97	; 0x61
			return s_req_schema;
    fd6a:	2919      	cmp	r1, #25
    fd6c:	bf8c      	ite	hi
    fd6e:	2001      	movhi	r0, #1
    fd70:	2015      	movls	r0, #21

	/* We should never fall out of the switch above unless there's
	 * an error
	 */
	return s_dead;
}
    fd72:	bd10      	pop	{r4, pc}
		if (IS_ALPHA(ch)) {
    fd74:	f041 0320 	orr.w	r3, r1, #32
    fd78:	3b61      	subs	r3, #97	; 0x61
    fd7a:	2b19      	cmp	r3, #25
    fd7c:	d9f9      	bls.n	fd72 <parse_url_char+0x4e>
			return s_req_schema_slash;
    fd7e:	293a      	cmp	r1, #58	; 0x3a
    fd80:	bf14      	ite	ne
    fd82:	2001      	movne	r0, #1
    fd84:	2016      	moveq	r0, #22
    fd86:	e7f4      	b.n	fd72 <parse_url_char+0x4e>
			return s_req_schema_slash_slash;
    fd88:	292f      	cmp	r1, #47	; 0x2f
    fd8a:	bf14      	ite	ne
    fd8c:	2001      	movne	r0, #1
    fd8e:	2017      	moveq	r0, #23
    fd90:	e7ef      	b.n	fd72 <parse_url_char+0x4e>
			return s_req_server_start;
    fd92:	292f      	cmp	r1, #47	; 0x2f
    fd94:	bf14      	ite	ne
    fd96:	2001      	movne	r0, #1
    fd98:	2018      	moveq	r0, #24
    fd9a:	e7ea      	b.n	fd72 <parse_url_char+0x4e>
		if (ch == '@') {
    fd9c:	2940      	cmp	r1, #64	; 0x40
    fd9e:	d0cd      	beq.n	fd3c <parse_url_char+0x18>
		if (ch == '/') {
    fda0:	292f      	cmp	r1, #47	; 0x2f
    fda2:	f000 8098 	beq.w	fed6 <parse_url_char+0x1b2>
		if (ch == '?') {
    fda6:	293f      	cmp	r1, #63	; 0x3f
    fda8:	d109      	bne.n	fdbe <parse_url_char+0x9a>
    fdaa:	201c      	movs	r0, #28
    fdac:	e7e1      	b.n	fd72 <parse_url_char+0x4e>
		if (ch == '/') {
    fdae:	292f      	cmp	r1, #47	; 0x2f
    fdb0:	f000 8091 	beq.w	fed6 <parse_url_char+0x1b2>
		if (ch == '?') {
    fdb4:	293f      	cmp	r1, #63	; 0x3f
    fdb6:	d0f8      	beq.n	fdaa <parse_url_char+0x86>
		if (ch == '@') {
    fdb8:	2940      	cmp	r1, #64	; 0x40
    fdba:	f000 808e 	beq.w	feda <parse_url_char+0x1b6>
		if (IS_USERINFO_CHAR(ch) || ch == '[' || ch == ']') {
    fdbe:	f041 0320 	orr.w	r3, r1, #32
    fdc2:	3b61      	subs	r3, #97	; 0x61
    fdc4:	2b19      	cmp	r3, #25
    fdc6:	f240 808a 	bls.w	fede <parse_url_char+0x1ba>
    fdca:	295f      	cmp	r1, #95	; 0x5f
    fdcc:	d811      	bhi.n	fdf2 <parse_url_char+0xce>
    fdce:	295a      	cmp	r1, #90	; 0x5a
    fdd0:	d805      	bhi.n	fdde <parse_url_char+0xba>
    fdd2:	3921      	subs	r1, #33	; 0x21
    fdd4:	b2c9      	uxtb	r1, r1
    fdd6:	291c      	cmp	r1, #28
    fdd8:	d8b0      	bhi.n	fd3c <parse_url_char+0x18>
    fdda:	4b51      	ldr	r3, [pc, #324]	; (ff20 <parse_url_char+0x1fc>)
    fddc:	e002      	b.n	fde4 <parse_url_char+0xc0>
    fdde:	2315      	movs	r3, #21
    fde0:	395b      	subs	r1, #91	; 0x5b
    fde2:	b2c9      	uxtb	r1, r1
    fde4:	40cb      	lsrs	r3, r1
		return s_dead;
    fde6:	f013 0f01 	tst.w	r3, #1
    fdea:	bf14      	ite	ne
    fdec:	2019      	movne	r0, #25
    fdee:	2001      	moveq	r0, #1
    fdf0:	e7bf      	b.n	fd72 <parse_url_char+0x4e>
    fdf2:	297e      	cmp	r1, #126	; 0x7e
    fdf4:	bf08      	it	eq
    fdf6:	2019      	moveq	r0, #25
    fdf8:	bf18      	it	ne
    fdfa:	2001      	movne	r0, #1
    fdfc:	e7b9      	b.n	fd72 <parse_url_char+0x4e>
		if (IS_URL_CHAR(ch)) {
    fdfe:	4a49      	ldr	r2, [pc, #292]	; (ff24 <parse_url_char+0x200>)
    fe00:	08cb      	lsrs	r3, r1, #3
    fe02:	5cd2      	ldrb	r2, [r2, r3]
    fe04:	2301      	movs	r3, #1
    fe06:	f001 0407 	and.w	r4, r1, #7
    fe0a:	40a3      	lsls	r3, r4
    fe0c:	421a      	tst	r2, r3
    fe0e:	d1b0      	bne.n	fd72 <parse_url_char+0x4e>
		switch (ch) {
    fe10:	2923      	cmp	r1, #35	; 0x23
    fe12:	d068      	beq.n	fee6 <parse_url_char+0x1c2>
		return s_dead;
    fe14:	293f      	cmp	r1, #63	; 0x3f
    fe16:	bf08      	it	eq
    fe18:	201c      	moveq	r0, #28
    fe1a:	e7ed      	b.n	fdf8 <parse_url_char+0xd4>
		if (IS_URL_CHAR(ch)) {
    fe1c:	4a41      	ldr	r2, [pc, #260]	; (ff24 <parse_url_char+0x200>)
    fe1e:	08cb      	lsrs	r3, r1, #3
    fe20:	5cd2      	ldrb	r2, [r2, r3]
    fe22:	2301      	movs	r3, #1
    fe24:	f001 0407 	and.w	r4, r1, #7
    fe28:	40a3      	lsls	r3, r4
    fe2a:	421a      	tst	r2, r3
    fe2c:	d1a1      	bne.n	fd72 <parse_url_char+0x4e>
    fe2e:	f011 0f80 	tst.w	r1, #128	; 0x80
    fe32:	e7ec      	b.n	fe0e <parse_url_char+0xea>
		if (IS_URL_CHAR(ch)) {
    fe34:	4a3b      	ldr	r2, [pc, #236]	; (ff24 <parse_url_char+0x200>)
    fe36:	08cb      	lsrs	r3, r1, #3
    fe38:	5cd2      	ldrb	r2, [r2, r3]
    fe3a:	2301      	movs	r3, #1
    fe3c:	f001 0007 	and.w	r0, r1, #7
    fe40:	4083      	lsls	r3, r0
    fe42:	421a      	tst	r2, r3
    fe44:	d14d      	bne.n	fee2 <parse_url_char+0x1be>
		switch (ch) {
    fe46:	2923      	cmp	r1, #35	; 0x23
    fe48:	d04d      	beq.n	fee6 <parse_url_char+0x1c2>
		return s_dead;
    fe4a:	293f      	cmp	r1, #63	; 0x3f
    fe4c:	bf08      	it	eq
    fe4e:	201d      	moveq	r0, #29
    fe50:	e7d2      	b.n	fdf8 <parse_url_char+0xd4>
		if (IS_URL_CHAR(ch)) {
    fe52:	4a34      	ldr	r2, [pc, #208]	; (ff24 <parse_url_char+0x200>)
    fe54:	08cb      	lsrs	r3, r1, #3
    fe56:	5cd2      	ldrb	r2, [r2, r3]
    fe58:	2301      	movs	r3, #1
    fe5a:	f001 0007 	and.w	r0, r1, #7
    fe5e:	4083      	lsls	r3, r0
    fe60:	421a      	tst	r2, r3
    fe62:	d13e      	bne.n	fee2 <parse_url_char+0x1be>
    fe64:	f011 0f80 	tst.w	r1, #128	; 0x80
    fe68:	e7ec      	b.n	fe44 <parse_url_char+0x120>
		if (IS_URL_CHAR(ch)) {
    fe6a:	4a2e      	ldr	r2, [pc, #184]	; (ff24 <parse_url_char+0x200>)
    fe6c:	08cb      	lsrs	r3, r1, #3
    fe6e:	5cd2      	ldrb	r2, [r2, r3]
    fe70:	2301      	movs	r3, #1
    fe72:	f001 0007 	and.w	r0, r1, #7
    fe76:	4083      	lsls	r3, r0
    fe78:	421a      	tst	r2, r3
    fe7a:	d11d      	bne.n	feb8 <parse_url_char+0x194>
		switch (ch) {
    fe7c:	2923      	cmp	r1, #35	; 0x23
    fe7e:	d032      	beq.n	fee6 <parse_url_char+0x1c2>
		return s_dead;
    fe80:	293f      	cmp	r1, #63	; 0x3f
    fe82:	bf08      	it	eq
    fe84:	201f      	moveq	r0, #31
    fe86:	e7b7      	b.n	fdf8 <parse_url_char+0xd4>
		if (IS_URL_CHAR(ch)) {
    fe88:	4a26      	ldr	r2, [pc, #152]	; (ff24 <parse_url_char+0x200>)
    fe8a:	08cb      	lsrs	r3, r1, #3
    fe8c:	5cd2      	ldrb	r2, [r2, r3]
    fe8e:	2301      	movs	r3, #1
    fe90:	f001 0007 	and.w	r0, r1, #7
    fe94:	4083      	lsls	r3, r0
    fe96:	421a      	tst	r2, r3
    fe98:	d10e      	bne.n	feb8 <parse_url_char+0x194>
    fe9a:	f011 0f80 	tst.w	r1, #128	; 0x80
    fe9e:	e7ec      	b.n	fe7a <parse_url_char+0x156>
		if (IS_URL_CHAR(ch)) {
    fea0:	4a20      	ldr	r2, [pc, #128]	; (ff24 <parse_url_char+0x200>)
    fea2:	08cb      	lsrs	r3, r1, #3
    fea4:	5cd2      	ldrb	r2, [r2, r3]
    fea6:	2301      	movs	r3, #1
    fea8:	f001 0407 	and.w	r4, r1, #7
    feac:	40a3      	lsls	r3, r4
    feae:	421a      	tst	r2, r3
    feb0:	f47f af5f 	bne.w	fd72 <parse_url_char+0x4e>
		switch (ch) {
    feb4:	2923      	cmp	r1, #35	; 0x23
    feb6:	d1e3      	bne.n	fe80 <parse_url_char+0x15c>
			return s_req_fragment;
    feb8:	201f      	movs	r0, #31
    feba:	e75a      	b.n	fd72 <parse_url_char+0x4e>
		if (IS_URL_CHAR(ch)) {
    febc:	4a19      	ldr	r2, [pc, #100]	; (ff24 <parse_url_char+0x200>)
    febe:	08cb      	lsrs	r3, r1, #3
    fec0:	5cd2      	ldrb	r2, [r2, r3]
    fec2:	2301      	movs	r3, #1
    fec4:	f001 0407 	and.w	r4, r1, #7
    fec8:	40a3      	lsls	r3, r4
    feca:	421a      	tst	r2, r3
    fecc:	f47f af51 	bne.w	fd72 <parse_url_char+0x4e>
    fed0:	f011 0f80 	tst.w	r1, #128	; 0x80
    fed4:	e7ec      	b.n	feb0 <parse_url_char+0x18c>
			return s_req_path;
    fed6:	201b      	movs	r0, #27
    fed8:	e74b      	b.n	fd72 <parse_url_char+0x4e>
			return s_req_server_with_at;
    feda:	201a      	movs	r0, #26
    fedc:	e749      	b.n	fd72 <parse_url_char+0x4e>
    fede:	2019      	movs	r0, #25
    fee0:	e747      	b.n	fd72 <parse_url_char+0x4e>
    fee2:	201d      	movs	r0, #29
    fee4:	e745      	b.n	fd72 <parse_url_char+0x4e>
			return s_req_fragment_start;
    fee6:	201e      	movs	r0, #30
    fee8:	e743      	b.n	fd72 <parse_url_char+0x4e>
	switch (s) {
    feea:	f1a0 0318 	sub.w	r3, r0, #24
    feee:	2b07      	cmp	r3, #7
    fef0:	f63f af24 	bhi.w	fd3c <parse_url_char+0x18>
    fef4:	a201      	add	r2, pc, #4	; (adr r2, fefc <parse_url_char+0x1d8>)
    fef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fefa:	bf00      	nop
    fefc:	0000fdbf 	.word	0x0000fdbf
    ff00:	0000fdbf 	.word	0x0000fdbf
    ff04:	0000fdbf 	.word	0x0000fdbf
    ff08:	0000fdff 	.word	0x0000fdff
    ff0c:	0000fe35 	.word	0x0000fe35
    ff10:	0000fe35 	.word	0x0000fe35
    ff14:	0000fe6b 	.word	0x0000fe6b
    ff18:	0000fea1 	.word	0x0000fea1
    ff1c:	00400009 	.word	0x00400009
    ff20:	17ffbff9 	.word	0x17ffbff9
    ff24:	00024ed8 	.word	0x00024ed8

0000ff28 <on_header_field>:
						internal.parser);
	const char *content_len = "Content-Length";
	uint16_t len;

	len = strlen(content_len);
	if (length >= len && strncasecmp(at, content_len, len) == 0) {
    ff28:	2a0d      	cmp	r2, #13
{
    ff2a:	b570      	push	{r4, r5, r6, lr}
    ff2c:	4604      	mov	r4, r0
    ff2e:	460d      	mov	r5, r1
    ff30:	4616      	mov	r6, r2
	if (length >= len && strncasecmp(at, content_len, len) == 0) {
    ff32:	d90b      	bls.n	ff4c <on_header_field+0x24>
    ff34:	220e      	movs	r2, #14
    ff36:	4628      	mov	r0, r5
    ff38:	4909      	ldr	r1, [pc, #36]	; (ff60 <on_header_field+0x38>)
    ff3a:	f00c f83b 	bl	1bfb4 <strncasecmp>
    ff3e:	b928      	cbnz	r0, ff4c <on_header_field+0x24>
		req->internal.response.cl_present = true;
    ff40:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    ff44:	f043 0301 	orr.w	r3, r3, #1
    ff48:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	}

	print_header_field(length, at);

	if (req->internal.response.http_cb &&
    ff4c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    ff4e:	b12b      	cbz	r3, ff5c <on_header_field+0x34>
	    req->internal.response.http_cb->on_header_field) {
    ff50:	68db      	ldr	r3, [r3, #12]
	if (req->internal.response.http_cb &&
    ff52:	b11b      	cbz	r3, ff5c <on_header_field+0x34>
		req->internal.response.http_cb->on_header_field(parser, at,
    ff54:	4632      	mov	r2, r6
    ff56:	4629      	mov	r1, r5
    ff58:	4620      	mov	r0, r4
    ff5a:	4798      	blx	r3
								length);
	}

	return 0;
}
    ff5c:	2000      	movs	r0, #0
    ff5e:	bd70      	pop	{r4, r5, r6, pc}
    ff60:	00024ef8 	.word	0x00024ef8

0000ff64 <http_client_req>:
	return ret;
}

int http_client_req(int sock, struct http_request *req,
		    int32_t timeout, void *user_data)
{
    ff64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* Utilize the network usage by sending data in bigger blocks */
	char send_buf[MAX_SEND_BUF_LEN];
	const size_t send_buf_max_len = sizeof(send_buf);
	size_t send_buf_pos = 0;
    ff68:	f04f 0800 	mov.w	r8, #0
{
    ff6c:	b0c1      	sub	sp, #260	; 0x104
	int total_sent = 0;
	int ret, total_recv, i;
	const char *method;

	if (sock < 0 || req == NULL || req->response == NULL ||
    ff6e:	1e05      	subs	r5, r0, #0
{
    ff70:	460c      	mov	r4, r1
    ff72:	4699      	mov	r9, r3
    ff74:	9209      	str	r2, [sp, #36]	; 0x24
	size_t send_buf_pos = 0;
    ff76:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
	if (sock < 0 || req == NULL || req->response == NULL ||
    ff7a:	f2c0 8204 	blt.w	10386 <http_client_req+0x422>
    ff7e:	2900      	cmp	r1, #0
    ff80:	f000 8201 	beq.w	10386 <http_client_req+0x422>
    ff84:	f8d1 a09c 	ldr.w	sl, [r1, #156]	; 0x9c
    ff88:	f1ba 0f00 	cmp.w	sl, #0
    ff8c:	f000 81fb 	beq.w	10386 <http_client_req+0x422>
	    req->recv_buf == NULL || req->recv_buf_len == 0) {
    ff90:	f8d1 70a4 	ldr.w	r7, [r1, #164]	; 0xa4
	if (sock < 0 || req == NULL || req->response == NULL ||
    ff94:	2f00      	cmp	r7, #0
    ff96:	f000 81f6 	beq.w	10386 <http_client_req+0x422>
	    req->recv_buf == NULL || req->recv_buf_len == 0) {
    ff9a:	f8d1 60a8 	ldr.w	r6, [r1, #168]	; 0xa8
    ff9e:	2e00      	cmp	r6, #0
    ffa0:	f000 81f1 	beq.w	10386 <http_client_req+0x422>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    ffa4:	2240      	movs	r2, #64	; 0x40
    ffa6:	4641      	mov	r1, r8
    ffa8:	f104 0050 	add.w	r0, r4, #80	; 0x50
    ffac:	f011 fe8b 	bl	21cc6 <memset>
		return -EINVAL;
	}

	memset(&req->internal.response, 0, sizeof(req->internal.response));

	req->internal.response.http_cb = req->http_cb;
    ffb0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	req->internal.response.cb = req->response;
	req->internal.response.recv_buf = req->recv_buf;
	req->internal.response.recv_buf_len = req->recv_buf_len;
    ffb4:	e9c4 7616 	strd	r7, r6, [r4, #88]	; 0x58
	req->internal.response.cb = req->response;
    ffb8:	e9c4 3a12 	strd	r3, sl, [r4, #72]	; 0x48
	req->internal.user_data = user_data;
	req->internal.sock = sock;
    ffbc:	e9c4 9524 	strd	r9, r5, [r4, #144]	; 0x90

	method = http_method_str(req->method);
    ffc0:	f894 0098 	ldrb.w	r0, [r4, #152]	; 0x98
    ffc4:	f7ff fea2 	bl	fd0c <http_method_str>

	ret = http_send_data(sock, send_buf, send_buf_max_len, &send_buf_pos,
    ffc8:	4e5d      	ldr	r6, [pc, #372]	; (10140 <http_client_req+0x1dc>)
    ffca:	f8cd 8018 	str.w	r8, [sp, #24]
    ffce:	9605      	str	r6, [sp, #20]
    ffd0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    ffd4:	a910      	add	r1, sp, #64	; 0x40
    ffd6:	9304      	str	r3, [sp, #16]
    ffd8:	4b5a      	ldr	r3, [pc, #360]	; (10144 <http_client_req+0x1e0>)
    ffda:	9303      	str	r3, [sp, #12]
    ffdc:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
    ffe0:	9000      	str	r0, [sp, #0]
    ffe2:	e9cd 3201 	strd	r3, r2, [sp, #4]
    ffe6:	4628      	mov	r0, r5
    ffe8:	22c0      	movs	r2, #192	; 0xc0
    ffea:	ab0c      	add	r3, sp, #48	; 0x30
    ffec:	f00f f88f 	bl	1f10e <http_send_data.constprop.0>
			     method, " ", req->url, " ", req->protocol,
			     HTTP_CRLF, NULL);
	if (ret < 0) {
    fff0:	1e07      	subs	r7, r0, #0
    fff2:	f2c0 81cb 	blt.w	1038c <http_client_req+0x428>
	}

	total_sent += ret;

	if (req->port) {
		ret = http_send_data(sock, send_buf, send_buf_max_len,
    fff6:	e9d4 232f 	ldrd	r2, r3, [r4, #188]	; 0xbc
    fffa:	f8df a15c 	ldr.w	sl, [pc, #348]	; 10158 <http_client_req+0x1f4>
	if (req->port) {
    fffe:	2b00      	cmp	r3, #0
   10000:	d035      	beq.n	1006e <http_client_req+0x10a>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   10002:	9304      	str	r3, [sp, #16]
   10004:	4b50      	ldr	r3, [pc, #320]	; (10148 <http_client_req+0x1e4>)
   10006:	4628      	mov	r0, r5
   10008:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1000c:	4b4f      	ldr	r3, [pc, #316]	; (1014c <http_client_req+0x1e8>)
   1000e:	22c0      	movs	r2, #192	; 0xc0
   10010:	9300      	str	r3, [sp, #0]
   10012:	e9cd 6805 	strd	r6, r8, [sp, #20]
   10016:	f8cd a004 	str.w	sl, [sp, #4]
   1001a:	ab0c      	add	r3, sp, #48	; 0x30
   1001c:	a910      	add	r1, sp, #64	; 0x40
   1001e:	f00f f876 	bl	1f10e <http_send_data.constprop.0>
	} else {
		ret = http_send_data(sock, send_buf, send_buf_max_len,
				     &send_buf_pos, "Host", ": ", req->host,
				     HTTP_CRLF, NULL);

		if (ret < 0) {
   10022:	2800      	cmp	r0, #0
   10024:	f2c0 8089 	blt.w	1013a <http_client_req+0x1d6>
		}

		total_sent += ret;
	}

	if (req->optional_headers_cb) {
   10028:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
		total_sent += ret;
   1002c:	4407      	add	r7, r0
	if (req->optional_headers_cb) {
   1002e:	2b00      	cmp	r3, #0
   10030:	d040      	beq.n	100b4 <http_client_req+0x150>
		ret = http_flush_data(sock, send_buf, send_buf_pos);
   10032:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	ret = sendall(sock, send_buf, send_buf_len);
   10036:	4628      	mov	r0, r5
   10038:	4642      	mov	r2, r8
   1003a:	a910      	add	r1, sp, #64	; 0x40
   1003c:	f00f f84c 	bl	1f0d8 <sendall>
	if (ret < 0) {
   10040:	2800      	cmp	r0, #0
   10042:	db7a      	blt.n	1013a <http_client_req+0x1d6>
		if (ret < 0) {
   10044:	f1b8 0f00 	cmp.w	r8, #0
   10048:	f2c0 81a2 	blt.w	10390 <http_client_req+0x42c>
			goto out;
		}

		send_buf_pos = 0;
   1004c:	2300      	movs	r3, #0
		total_sent += ret;

		ret = req->optional_headers_cb(sock, req, user_data);
   1004e:	464a      	mov	r2, r9
		send_buf_pos = 0;
   10050:	930c      	str	r3, [sp, #48]	; 0x30
		ret = req->optional_headers_cb(sock, req, user_data);
   10052:	4621      	mov	r1, r4
   10054:	4628      	mov	r0, r5
   10056:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   1005a:	4798      	blx	r3
		if (ret < 0) {
   1005c:	2800      	cmp	r0, #0
   1005e:	db6c      	blt.n	1013a <http_client_req+0x1d6>
		total_sent += ret;
   10060:	44b8      	add	r8, r7
			goto out;
		}

		total_sent += ret;
   10062:	eb08 0700 	add.w	r7, r8, r0
   10066:	f04f 0800 	mov.w	r8, #0
			total_sent += ret;
		}
	}

	for (i = 0; req->header_fields && req->header_fields[i]; i++) {
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   1006a:	46c3      	mov	fp, r8
   1006c:	e032      	b.n	100d4 <http_client_req+0x170>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   1006e:	e9cd 6303 	strd	r6, r3, [sp, #12]
   10072:	4b36      	ldr	r3, [pc, #216]	; (1014c <http_client_req+0x1e8>)
   10074:	e9cd a201 	strd	sl, r2, [sp, #4]
   10078:	9300      	str	r3, [sp, #0]
   1007a:	22c0      	movs	r2, #192	; 0xc0
   1007c:	4628      	mov	r0, r5
   1007e:	ab0c      	add	r3, sp, #48	; 0x30
   10080:	a910      	add	r1, sp, #64	; 0x40
   10082:	f00f f844 	bl	1f10e <http_send_data.constprop.0>
   10086:	e7cc      	b.n	10022 <http_client_req+0xbe>
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   10088:	e9cd 3b00 	strd	r3, fp, [sp]
   1008c:	22c0      	movs	r2, #192	; 0xc0
   1008e:	4628      	mov	r0, r5
   10090:	ab0c      	add	r3, sp, #48	; 0x30
   10092:	a910      	add	r1, sp, #64	; 0x40
   10094:	f00f f83b 	bl	1f10e <http_send_data.constprop.0>
			if (ret < 0) {
   10098:	2800      	cmp	r0, #0
   1009a:	f108 0804 	add.w	r8, r8, #4
   1009e:	db4c      	blt.n	1013a <http_client_req+0x1d6>
			total_sent += ret;
   100a0:	4407      	add	r7, r0
		for (i = 0; req->optional_headers && req->optional_headers[i];
   100a2:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   100a6:	2b00      	cmp	r3, #0
   100a8:	d0dd      	beq.n	10066 <http_client_req+0x102>
   100aa:	f853 3008 	ldr.w	r3, [r3, r8]
   100ae:	2b00      	cmp	r3, #0
   100b0:	d1ea      	bne.n	10088 <http_client_req+0x124>
   100b2:	e7d8      	b.n	10066 <http_client_req+0x102>
   100b4:	4698      	mov	r8, r3
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   100b6:	469b      	mov	fp, r3
   100b8:	e7f3      	b.n	100a2 <http_client_req+0x13e>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   100ba:	e9cd 3b00 	strd	r3, fp, [sp]
   100be:	22c0      	movs	r2, #192	; 0xc0
   100c0:	4628      	mov	r0, r5
   100c2:	ab0c      	add	r3, sp, #48	; 0x30
   100c4:	a910      	add	r1, sp, #64	; 0x40
   100c6:	f00f f822 	bl	1f10e <http_send_data.constprop.0>
				     &send_buf_pos, req->header_fields[i],
				     NULL);
		if (ret < 0) {
   100ca:	2800      	cmp	r0, #0
   100cc:	f108 0804 	add.w	r8, r8, #4
   100d0:	db33      	blt.n	1013a <http_client_req+0x1d6>
			goto out;
		}

		total_sent += ret;
   100d2:	4407      	add	r7, r0
	for (i = 0; req->header_fields && req->header_fields[i]; i++) {
   100d4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   100d8:	b11b      	cbz	r3, 100e2 <http_client_req+0x17e>
   100da:	f853 3008 	ldr.w	r3, [r3, r8]
   100de:	2b00      	cmp	r3, #0
   100e0:	d1eb      	bne.n	100ba <http_client_req+0x156>
	}

	if (req->content_type_value) {
   100e2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   100e6:	b17b      	cbz	r3, 10108 <http_client_req+0x1a4>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   100e8:	2200      	movs	r2, #0
   100ea:	e9cd a301 	strd	sl, r3, [sp, #4]
   100ee:	4b18      	ldr	r3, [pc, #96]	; (10150 <http_client_req+0x1ec>)
   100f0:	e9cd 6203 	strd	r6, r2, [sp, #12]
   100f4:	9300      	str	r3, [sp, #0]
   100f6:	22c0      	movs	r2, #192	; 0xc0
   100f8:	4628      	mov	r0, r5
   100fa:	ab0c      	add	r3, sp, #48	; 0x30
   100fc:	a910      	add	r1, sp, #64	; 0x40
   100fe:	f00f f806 	bl	1f10e <http_send_data.constprop.0>
				     &send_buf_pos, "Content-Type", ": ",
				     req->content_type_value, HTTP_CRLF, NULL);
		if (ret < 0) {
   10102:	2800      	cmp	r0, #0
   10104:	db19      	blt.n	1013a <http_client_req+0x1d6>
			goto out;
		}

		total_sent += ret;
   10106:	4407      	add	r7, r0
	}

	if (req->payload || req->payload_cb) {
   10108:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   1010c:	b923      	cbnz	r3, 10118 <http_client_req+0x1b4>
   1010e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   10112:	2b00      	cmp	r3, #0
   10114:	f000 8100 	beq.w	10318 <http_client_req+0x3b4>
		if (req->payload_len) {
   10118:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1011c:	2b00      	cmp	r3, #0
   1011e:	f000 80e1 	beq.w	102e4 <http_client_req+0x380>
			char content_len_str[HTTP_CONTENT_LEN_SIZE];

			ret = snprintk(content_len_str, HTTP_CONTENT_LEN_SIZE,
   10122:	f10d 0834 	add.w	r8, sp, #52	; 0x34
   10126:	210b      	movs	r1, #11
   10128:	4640      	mov	r0, r8
   1012a:	4a0a      	ldr	r2, [pc, #40]	; (10154 <http_client_req+0x1f0>)
   1012c:	f00d ffe3 	bl	1e0f6 <snprintk>
				       "%zd", req->payload_len);
			if (ret <= 0 || ret >= HTTP_CONTENT_LEN_SIZE) {
   10130:	3801      	subs	r0, #1
   10132:	2809      	cmp	r0, #9
   10134:	d912      	bls.n	1015c <http_client_req+0x1f8>
				ret = -ENOMEM;
   10136:	f06f 000b 	mvn.w	r0, #11

	return total_sent;

out:
	return ret;
}
   1013a:	b041      	add	sp, #260	; 0x104
   1013c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10140:	0002756c 	.word	0x0002756c
   10144:	00023f94 	.word	0x00023f94
   10148:	000279b1 	.word	0x000279b1
   1014c:	00024f07 	.word	0x00024f07
   10150:	00024f0c 	.word	0x00024f0c
   10154:	00024f19 	.word	0x00024f19
   10158:	0002634d 	.word	0x0002634d
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   1015c:	2300      	movs	r3, #0
   1015e:	e9cd 6304 	strd	r6, r3, [sp, #16]
   10162:	4b8c      	ldr	r3, [pc, #560]	; (10394 <http_client_req+0x430>)
   10164:	22c0      	movs	r2, #192	; 0xc0
   10166:	9301      	str	r3, [sp, #4]
   10168:	4b8b      	ldr	r3, [pc, #556]	; (10398 <http_client_req+0x434>)
   1016a:	4628      	mov	r0, r5
   1016c:	9300      	str	r3, [sp, #0]
   1016e:	e9cd 8602 	strd	r8, r6, [sp, #8]
   10172:	ab0c      	add	r3, sp, #48	; 0x30
   10174:	a910      	add	r1, sp, #64	; 0x40
   10176:	f00e ffca 	bl	1f10e <http_send_data.constprop.0>
		if (ret < 0) {
   1017a:	2800      	cmp	r0, #0
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   1017c:	4606      	mov	r6, r0
		if (ret < 0) {
   1017e:	f2c0 80e4 	blt.w	1034a <http_client_req+0x3e6>
		ret = http_flush_data(sock, send_buf, send_buf_pos);
   10182:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	ret = sendall(sock, send_buf, send_buf_len);
   10186:	4628      	mov	r0, r5
   10188:	4642      	mov	r2, r8
   1018a:	a910      	add	r1, sp, #64	; 0x40
   1018c:	f00e ffa4 	bl	1f0d8 <sendall>
	if (ret < 0) {
   10190:	2800      	cmp	r0, #0
   10192:	dbd2      	blt.n	1013a <http_client_req+0x1d6>
		if (ret < 0) {
   10194:	f1b8 0f00 	cmp.w	r8, #0
	return (int)send_buf_len;
   10198:	4640      	mov	r0, r8
		if (ret < 0) {
   1019a:	dbce      	blt.n	1013a <http_client_req+0x1d6>
		send_buf_pos = 0;
   1019c:	2300      	movs	r3, #0
   1019e:	930c      	str	r3, [sp, #48]	; 0x30
		if (req->payload_cb) {
   101a0:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
		total_sent += ret;
   101a4:	443e      	add	r6, r7
		total_sent += ret;
   101a6:	4446      	add	r6, r8
		if (req->payload_cb) {
   101a8:	2b00      	cmp	r3, #0
   101aa:	f000 80a4 	beq.w	102f6 <http_client_req+0x392>
			ret = req->payload_cb(sock, req, user_data);
   101ae:	464a      	mov	r2, r9
   101b0:	4621      	mov	r1, r4
   101b2:	4628      	mov	r0, r5
   101b4:	4798      	blx	r3
			if (ret < 0) {
   101b6:	2800      	cmp	r0, #0
   101b8:	dbbf      	blt.n	1013a <http_client_req+0x1d6>
			total_sent += ret;
   101ba:	4406      	add	r6, r0
	if (send_buf_pos > 0) {
   101bc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   101be:	b157      	cbz	r7, 101d6 <http_client_req+0x272>
	ret = sendall(sock, send_buf, send_buf_len);
   101c0:	463a      	mov	r2, r7
   101c2:	4628      	mov	r0, r5
   101c4:	a910      	add	r1, sp, #64	; 0x40
   101c6:	f00e ff87 	bl	1f0d8 <sendall>
	if (ret < 0) {
   101ca:	2800      	cmp	r0, #0
   101cc:	dbb5      	blt.n	1013a <http_client_req+0x1d6>
		if (ret < 0) {
   101ce:	2f00      	cmp	r7, #0
	return (int)send_buf_len;
   101d0:	4638      	mov	r0, r7
		if (ret < 0) {
   101d2:	dbb2      	blt.n	1013a <http_client_req+0x1d6>
		total_sent += ret;
   101d4:	443e      	add	r6, r7
	memset(&req->internal.response, 0, sizeof(req->internal.response));
   101d6:	f104 0348 	add.w	r3, r4, #72	; 0x48
   101da:	9308      	str	r3, [sp, #32]
	http_parser_init(parser, HTTP_RESPONSE);
   101dc:	2101      	movs	r1, #1
	http_client_init_parser(&req->internal.parser,
   101de:	f104 0320 	add.w	r3, r4, #32
	http_parser_init(parser, HTTP_RESPONSE);
   101e2:	4620      	mov	r0, r4
	http_client_init_parser(&req->internal.parser,
   101e4:	930a      	str	r3, [sp, #40]	; 0x28
	http_parser_init(parser, HTTP_RESPONSE);
   101e6:	f00e fea7 	bl	1ef38 <http_parser_init>
	settings->on_body = on_body;
   101ea:	4b6c      	ldr	r3, [pc, #432]	; (1039c <http_client_req+0x438>)
   101ec:	63a3      	str	r3, [r4, #56]	; 0x38
	settings->on_chunk_complete = on_chunk_complete;
   101ee:	4b6c      	ldr	r3, [pc, #432]	; (103a0 <http_client_req+0x43c>)
   101f0:	6463      	str	r3, [r4, #68]	; 0x44
	settings->on_chunk_header = on_chunk_header;
   101f2:	4b6c      	ldr	r3, [pc, #432]	; (103a4 <http_client_req+0x440>)
   101f4:	6423      	str	r3, [r4, #64]	; 0x40
	settings->on_headers_complete = on_headers_complete;
   101f6:	4b6c      	ldr	r3, [pc, #432]	; (103a8 <http_client_req+0x444>)
   101f8:	6363      	str	r3, [r4, #52]	; 0x34
	settings->on_header_field = on_header_field;
   101fa:	4b6c      	ldr	r3, [pc, #432]	; (103ac <http_client_req+0x448>)
   101fc:	62e3      	str	r3, [r4, #44]	; 0x2c
	settings->on_header_value = on_header_value;
   101fe:	4b6c      	ldr	r3, [pc, #432]	; (103b0 <http_client_req+0x44c>)
   10200:	6323      	str	r3, [r4, #48]	; 0x30
	settings->on_message_begin = on_message_begin;
   10202:	4b6c      	ldr	r3, [pc, #432]	; (103b4 <http_client_req+0x450>)
   10204:	6223      	str	r3, [r4, #32]
	settings->on_message_complete = on_message_complete;
   10206:	4b6c      	ldr	r3, [pc, #432]	; (103b8 <http_client_req+0x454>)
   10208:	63e3      	str	r3, [r4, #60]	; 0x3c
	settings->on_status = on_status;
   1020a:	4b6c      	ldr	r3, [pc, #432]	; (103bc <http_client_req+0x458>)
   1020c:	62a3      	str	r3, [r4, #40]	; 0x28
	settings->on_url = on_url;
   1020e:	4b6c      	ldr	r3, [pc, #432]	; (103c0 <http_client_req+0x45c>)
   10210:	6263      	str	r3, [r4, #36]	; 0x24
	return z_impl_k_uptime_ticks();
   10212:	f011 fb5f 	bl	218d4 <z_impl_k_uptime_ticks>
   10216:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   1021a:	fba0 030a 	umull	r0, r3, r0, sl
   1021e:	fb0a 3301 	mla	r3, sl, r1, r3
   10222:	0bc7      	lsrs	r7, r0, #15
   10224:	ea47 4743 	orr.w	r7, r7, r3, lsl #17
	fds[0].events = ZSOCK_POLLIN;
   10228:	2301      	movs	r3, #1
	size_t offset = 0;
   1022a:	f04f 0800 	mov.w	r8, #0
	int32_t remaining_time = timeout;
   1022e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
	fds[0].fd = sock;
   10232:	950d      	str	r5, [sp, #52]	; 0x34
	fds[0].events = ZSOCK_POLLIN;
   10234:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		if (timeout > 0) {
   10238:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1023a:	2b00      	cmp	r3, #0
   1023c:	dd10      	ble.n	10260 <http_client_req+0x2fc>
   1023e:	f011 fb49 	bl	218d4 <z_impl_k_uptime_ticks>
   10242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   10246:	fba0 0303 	umull	r0, r3, r0, r3
   1024a:	fb0a 3101 	mla	r1, sl, r1, r3
   1024e:	0bc3      	lsrs	r3, r0, #15
   10250:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
static inline int64_t k_uptime_delta(int64_t *reftime)
{
	int64_t uptime, delta;

	uptime = k_uptime_get();
	delta = uptime - *reftime;
   10254:	1bdf      	subs	r7, r3, r7
			remaining_time -= (int32_t)k_uptime_delta(&timestamp);
   10256:	eba9 0907 	sub.w	r9, r9, r7
	*reftime = uptime;
   1025a:	461f      	mov	r7, r3
			if (remaining_time < 0) {
   1025c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
	return z_impl_zsock_poll(fds, nfds, timeout);
   10260:	2101      	movs	r1, #1
   10262:	464a      	mov	r2, r9
   10264:	a80d      	add	r0, sp, #52	; 0x34
   10266:	f00e fc04 	bl	1ea72 <z_impl_zsock_poll>
		if (ret == 0) {
   1026a:	2800      	cmp	r0, #0
   1026c:	d073      	beq.n	10356 <http_client_req+0x3f2>
		} else if (ret < 0) {
   1026e:	f2c0 8087 	blt.w	10380 <http_client_req+0x41c>
		if (fds[0].revents & (ZSOCK_POLLERR | ZSOCK_POLLNVAL)) {
   10272:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
   10276:	f013 0f28 	tst.w	r3, #40	; 0x28
   1027a:	f040 8081 	bne.w	10380 <http_client_req+0x41c>
		} else if (fds[0].revents & ZSOCK_POLLHUP) {
   1027e:	f013 0b10 	ands.w	fp, r3, #16
   10282:	d168      	bne.n	10356 <http_client_req+0x3f2>
		} else if (fds[0].revents & ZSOCK_POLLIN) {
   10284:	07da      	lsls	r2, r3, #31
   10286:	d5d7      	bpl.n	10238 <http_client_req+0x2d4>
			received = zsock_recv(sock, req->internal.response.recv_buf + offset,
   10288:	6da1      	ldr	r1, [r4, #88]	; 0x58
   1028a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1028c:	4441      	add	r1, r8
   1028e:	eba2 0208 	sub.w	r2, r2, r8
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   10292:	465b      	mov	r3, fp
   10294:	4628      	mov	r0, r5
   10296:	e9cd bb00 	strd	fp, fp, [sp]
   1029a:	f00e fbb6 	bl	1ea0a <z_impl_zsock_recvfrom>
			if (received == 0) {
   1029e:	1e03      	subs	r3, r0, #0
   102a0:	d059      	beq.n	10356 <http_client_req+0x3f2>
			} else if (received < 0) {
   102a2:	db6d      	blt.n	10380 <http_client_req+0x41c>
				req->internal.response.data_len += received;
   102a4:	6e22      	ldr	r2, [r4, #96]	; 0x60
				(void)http_parser_execute(
   102a6:	990a      	ldr	r1, [sp, #40]	; 0x28
				req->internal.response.data_len += received;
   102a8:	441a      	add	r2, r3
   102aa:	6622      	str	r2, [r4, #96]	; 0x60
					req->internal.response.recv_buf + offset, received);
   102ac:	6da2      	ldr	r2, [r4, #88]	; 0x58
				(void)http_parser_execute(
   102ae:	4620      	mov	r0, r4
   102b0:	4442      	add	r2, r8
   102b2:	930b      	str	r3, [sp, #44]	; 0x2c
   102b4:	f7fe fb68 	bl	e988 <http_parser_execute>
			offset += received;
   102b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   102ba:	f894 108e 	ldrb.w	r1, [r4, #142]	; 0x8e
   102be:	4498      	add	r8, r3
			if (offset >= req->internal.response.recv_buf_len) {
   102c0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   102c2:	4598      	cmp	r8, r3
   102c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   102c6:	d334      	bcc.n	10332 <http_client_req+0x3ce>
			if (req->internal.response.cb) {
   102c8:	2b00      	cmp	r3, #0
   102ca:	d042      	beq.n	10352 <http_client_req+0x3ee>
				offset = 0;
   102cc:	46d8      	mov	r8, fp
				if (req->internal.response.message_complete) {
   102ce:	f3c1 0180 	ubfx	r1, r1, #2, #1
					req->internal.response.cb(&req->internal.response, event,
   102d2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   102d6:	9808      	ldr	r0, [sp, #32]
   102d8:	4798      	blx	r3
					req->internal.response.data_len = 0;
   102da:	2300      	movs	r3, #0
					req->internal.response.body_frag_len = 0;
   102dc:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
					req->internal.response.data_len = 0;
   102e0:	6623      	str	r3, [r4, #96]	; 0x60
					req->internal.response.body_frag_start = NULL;
   102e2:	e02d      	b.n	10340 <http_client_req+0x3dc>
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   102e4:	e9cd 6300 	strd	r6, r3, [sp]
   102e8:	22c0      	movs	r2, #192	; 0xc0
   102ea:	4628      	mov	r0, r5
   102ec:	ab0c      	add	r3, sp, #48	; 0x30
   102ee:	a910      	add	r1, sp, #64	; 0x40
   102f0:	f00e ff0d 	bl	1f10e <http_send_data.constprop.0>
   102f4:	e741      	b.n	1017a <http_client_req+0x216>
				length = strlen(req->payload);
   102f6:	e9d4 8732 	ldrd	r8, r7, [r4, #200]	; 0xc8
			if (req->payload_len == 0) {
   102fa:	b91f      	cbnz	r7, 10304 <http_client_req+0x3a0>
				length = strlen(req->payload);
   102fc:	4640      	mov	r0, r8
   102fe:	f7f8 fe1e 	bl	8f3e <strlen>
   10302:	4607      	mov	r7, r0
			ret = sendall(sock, req->payload, length);
   10304:	463a      	mov	r2, r7
   10306:	4641      	mov	r1, r8
   10308:	4628      	mov	r0, r5
   1030a:	f00e fee5 	bl	1f0d8 <sendall>
			if (ret < 0) {
   1030e:	2800      	cmp	r0, #0
   10310:	f6ff af13 	blt.w	1013a <http_client_req+0x1d6>
			total_sent += length;
   10314:	443e      	add	r6, r7
   10316:	e751      	b.n	101bc <http_client_req+0x258>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   10318:	e9cd 6300 	strd	r6, r3, [sp]
   1031c:	22c0      	movs	r2, #192	; 0xc0
   1031e:	4628      	mov	r0, r5
   10320:	ab0c      	add	r3, sp, #48	; 0x30
   10322:	a910      	add	r1, sp, #64	; 0x40
   10324:	f00e fef3 	bl	1f10e <http_send_data.constprop.0>
		if (ret < 0) {
   10328:	2800      	cmp	r0, #0
   1032a:	f6ff af06 	blt.w	1013a <http_client_req+0x1d6>
		total_sent += ret;
   1032e:	183e      	adds	r6, r7, r0
   10330:	e744      	b.n	101bc <http_client_req+0x258>
			if (req->internal.response.cb) {
   10332:	b12b      	cbz	r3, 10340 <http_client_req+0x3dc>
				if (req->internal.response.message_complete) {
   10334:	f011 0104 	ands.w	r1, r1, #4
   10338:	d109      	bne.n	1034e <http_client_req+0x3ea>
				} else if (offset == 0) {
   1033a:	f1b8 0f00 	cmp.w	r8, #0
   1033e:	d0c8      	beq.n	102d2 <http_client_req+0x36e>
			if (req->internal.response.message_complete) {
   10340:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   10344:	075b      	lsls	r3, r3, #29
   10346:	f57f af77 	bpl.w	10238 <http_client_req+0x2d4>
   1034a:	4630      	mov	r0, r6
   1034c:	e6f5      	b.n	1013a <http_client_req+0x1d6>
					event = HTTP_DATA_FINAL;
   1034e:	2101      	movs	r1, #1
   10350:	e7bf      	b.n	102d2 <http_client_req+0x36e>
				offset = 0;
   10352:	4698      	mov	r8, r3
   10354:	e7f4      	b.n	10340 <http_client_req+0x3dc>
	if (req->internal.response.cb) {
   10356:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
   10358:	2d00      	cmp	r5, #0
   1035a:	d0f6      	beq.n	1034a <http_client_req+0x3e6>
		req->internal.response.http_status_code = 0;
   1035c:	2100      	movs	r1, #0
   1035e:	2220      	movs	r2, #32
		req->internal.response.content_length = 0;
   10360:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
		req->internal.response.http_status_code = 0;
   10364:	f8a4 108c 	strh.w	r1, [r4, #140]	; 0x8c
		req->internal.response.processed = 0;
   10368:	66a1      	str	r1, [r4, #104]	; 0x68
		req->internal.response.body_frag_start = NULL;
   1036a:	6521      	str	r1, [r4, #80]	; 0x50
   1036c:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   10370:	f011 fca9 	bl	21cc6 <memset>
		req->internal.response.cb(&req->internal.response, HTTP_DATA_FINAL,
   10374:	2101      	movs	r1, #1
   10376:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   1037a:	9808      	ldr	r0, [sp, #32]
   1037c:	47a8      	blx	r5
   1037e:	e7e4      	b.n	1034a <http_client_req+0x3e6>
	ret = -errno;
   10380:	f00e fc8e 	bl	1eca0 <__errno>
	return ret;
   10384:	e7e1      	b.n	1034a <http_client_req+0x3e6>
		return -EINVAL;
   10386:	f06f 0015 	mvn.w	r0, #21
   1038a:	e6d6      	b.n	1013a <http_client_req+0x1d6>
   1038c:	4638      	mov	r0, r7
   1038e:	e6d4      	b.n	1013a <http_client_req+0x1d6>
   10390:	4640      	mov	r0, r8
   10392:	e6d2      	b.n	1013a <http_client_req+0x1d6>
   10394:	0002634d 	.word	0x0002634d
   10398:	00024ef8 	.word	0x00024ef8
   1039c:	0001ef7d 	.word	0x0001ef7d
   103a0:	0001eff3 	.word	0x0001eff3
   103a4:	0001efe3 	.word	0x0001efe3
   103a8:	0001f003 	.word	0x0001f003
   103ac:	0000ff29 	.word	0x0000ff29
   103b0:	0001f075 	.word	0x0001f075
   103b4:	0001efb5 	.word	0x0001efb5
   103b8:	0001efc5 	.word	0x0001efc5
   103bc:	0001f03b 	.word	0x0001f03b
   103c0:	0001ef6d 	.word	0x0001ef6d

000103c4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   103c4:	4b08      	ldr	r3, [pc, #32]	; (103e8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   103c6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   103c8:	1ac3      	subs	r3, r0, r3
{
   103ca:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   103cc:	4907      	ldr	r1, [pc, #28]	; (103ec <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   103ce:	109b      	asrs	r3, r3, #2
{
   103d0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   103d2:	4359      	muls	r1, r3
   103d4:	2240      	movs	r2, #64	; 0x40
   103d6:	4806      	ldr	r0, [pc, #24]	; (103f0 <onoff_stop+0x2c>)
   103d8:	f00e fef8 	bl	1f1cc <stop>
	notify(mgr, res);
   103dc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   103de:	4601      	mov	r1, r0
	notify(mgr, res);
   103e0:	4620      	mov	r0, r4
}
   103e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   103e6:	4718      	bx	r3
   103e8:	2000dc64 	.word	0x2000dc64
   103ec:	b6db6db7 	.word	0xb6db6db7
   103f0:	00022c30 	.word	0x00022c30

000103f4 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   103f4:	2340      	movs	r3, #64	; 0x40
{
   103f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   103f8:	4c0b      	ldr	r4, [pc, #44]	; (10428 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   103fa:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   103fc:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   103fe:	460b      	mov	r3, r1
{
   10400:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   10402:	490a      	ldr	r1, [pc, #40]	; (1042c <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
   10404:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   10406:	4361      	muls	r1, r4
{
   10408:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1040a:	4a09      	ldr	r2, [pc, #36]	; (10430 <onoff_start+0x3c>)
   1040c:	4809      	ldr	r0, [pc, #36]	; (10434 <onoff_start+0x40>)
   1040e:	f00e ff09 	bl	1f224 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   10412:	1e01      	subs	r1, r0, #0
   10414:	da05      	bge.n	10422 <onoff_start+0x2e>
		notify(mgr, err);
   10416:	4630      	mov	r0, r6
   10418:	462b      	mov	r3, r5
	}
}
   1041a:	b002      	add	sp, #8
   1041c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   10420:	4718      	bx	r3
}
   10422:	b002      	add	sp, #8
   10424:	bd70      	pop	{r4, r5, r6, pc}
   10426:	bf00      	nop
   10428:	2000dc64 	.word	0x2000dc64
   1042c:	b6db6db7 	.word	0xb6db6db7
   10430:	0001f28f 	.word	0x0001f28f
   10434:	00022c30 	.word	0x00022c30

00010438 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   10438:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1043a:	2200      	movs	r2, #0
   1043c:	2101      	movs	r1, #1
{
   1043e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   10440:	2005      	movs	r0, #5
   10442:	f7fd fad5 	bl	d9f0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   10446:	480f      	ldr	r0, [pc, #60]	; (10484 <clk_init+0x4c>)
   10448:	f006 ff3c 	bl	172c4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1044c:	4b0e      	ldr	r3, [pc, #56]	; (10488 <clk_init+0x50>)
   1044e:	4298      	cmp	r0, r3
   10450:	d115      	bne.n	1047e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   10452:	f006 ff47 	bl	172e4 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   10456:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   10458:	490c      	ldr	r1, [pc, #48]	; (1048c <clk_init+0x54>)
   1045a:	4630      	mov	r0, r6
   1045c:	f00e f87d 	bl	1e55a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   10460:	2800      	cmp	r0, #0
   10462:	db0b      	blt.n	1047c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   10464:	2501      	movs	r5, #1
   10466:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   10468:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1046a:	4908      	ldr	r1, [pc, #32]	; (1048c <clk_init+0x54>)
   1046c:	f104 001c 	add.w	r0, r4, #28
   10470:	f00e f873 	bl	1e55a <onoff_manager_init>
		if (err < 0) {
   10474:	2800      	cmp	r0, #0
   10476:	db01      	blt.n	1047c <clk_init+0x44>
	}

	return 0;
   10478:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1047a:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   1047c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1047e:	f06f 0004 	mvn.w	r0, #4
   10482:	e7fb      	b.n	1047c <clk_init+0x44>
   10484:	000104c5 	.word	0x000104c5
   10488:	0bad0000 	.word	0x0bad0000
   1048c:	0002330c 	.word	0x0002330c

00010490 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   10490:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   10492:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   10494:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   10496:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   10498:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1049a:	4808      	ldr	r0, [pc, #32]	; (104bc <clkstarted_handle.constprop.0+0x2c>)
   1049c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1049e:	3340      	adds	r3, #64	; 0x40
   104a0:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
   104a2:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   104a6:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   104a8:	f00e fe7d 	bl	1f1a6 <set_on_state>
	if (callback) {
   104ac:	b12d      	cbz	r5, 104ba <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   104ae:	4632      	mov	r2, r6
   104b0:	462b      	mov	r3, r5
}
   104b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   104b6:	4802      	ldr	r0, [pc, #8]	; (104c0 <clkstarted_handle.constprop.0+0x30>)
   104b8:	4718      	bx	r3
}
   104ba:	bd70      	pop	{r4, r5, r6, pc}
   104bc:	2000dc64 	.word	0x2000dc64
   104c0:	00022c30 	.word	0x00022c30

000104c4 <clock_event_handler>:
	switch (event) {
   104c4:	b110      	cbz	r0, 104cc <clock_event_handler+0x8>
   104c6:	2801      	cmp	r0, #1
   104c8:	d004      	beq.n	104d4 <clock_event_handler+0x10>
   104ca:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   104cc:	4b03      	ldr	r3, [pc, #12]	; (104dc <clock_event_handler+0x18>)
   104ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   104d0:	075b      	lsls	r3, r3, #29
   104d2:	d101      	bne.n	104d8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   104d4:	f7ff bfdc 	b.w	10490 <clkstarted_handle.constprop.0>
}
   104d8:	4770      	bx	lr
   104da:	bf00      	nop
   104dc:	2000dc64 	.word	0x2000dc64

000104e0 <generic_hfclk_start>:
{
   104e0:	b508      	push	{r3, lr}
	__asm__ volatile(
   104e2:	f04f 0320 	mov.w	r3, #32
   104e6:	f3ef 8111 	mrs	r1, BASEPRI
   104ea:	f383 8812 	msr	BASEPRI_MAX, r3
   104ee:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   104f2:	4a11      	ldr	r2, [pc, #68]	; (10538 <generic_hfclk_start+0x58>)
   104f4:	6813      	ldr	r3, [r2, #0]
   104f6:	f043 0002 	orr.w	r0, r3, #2
   104fa:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   104fc:	07da      	lsls	r2, r3, #31
   104fe:	d408      	bmi.n	10512 <generic_hfclk_start+0x32>
	__asm__ volatile(
   10500:	f381 8811 	msr	BASEPRI, r1
   10504:	f3bf 8f6f 	isb	sy
}
   10508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1050c:	2001      	movs	r0, #1
   1050e:	f006 bef9 	b.w	17304 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   10512:	4b0a      	ldr	r3, [pc, #40]	; (1053c <generic_hfclk_start+0x5c>)
   10514:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   10518:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1051c:	07d3      	lsls	r3, r2, #31
   1051e:	d5ef      	bpl.n	10500 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   10520:	4807      	ldr	r0, [pc, #28]	; (10540 <generic_hfclk_start+0x60>)
   10522:	f00e fe40 	bl	1f1a6 <set_on_state>
   10526:	f381 8811 	msr	BASEPRI, r1
   1052a:	f3bf 8f6f 	isb	sy
}
   1052e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   10532:	2000      	movs	r0, #0
   10534:	f7ff bfac 	b.w	10490 <clkstarted_handle.constprop.0>
   10538:	2000dcb4 	.word	0x2000dcb4
   1053c:	40005000 	.word	0x40005000
   10540:	2000dca4 	.word	0x2000dca4

00010544 <api_blocking_start>:
{
   10544:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10546:	2200      	movs	r2, #0
   10548:	2301      	movs	r3, #1
   1054a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1054e:	ab04      	add	r3, sp, #16
   10550:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   10554:	4a09      	ldr	r2, [pc, #36]	; (1057c <api_blocking_start+0x38>)
   10556:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10558:	f8cd d000 	str.w	sp, [sp]
   1055c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   10560:	f00e fe8e 	bl	1f280 <api_start>
	if (err < 0) {
   10564:	2800      	cmp	r0, #0
   10566:	db05      	blt.n	10574 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   10568:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1056c:	2300      	movs	r3, #0
   1056e:	4668      	mov	r0, sp
   10570:	f00a f996 	bl	1a8a0 <z_impl_k_sem_take>
}
   10574:	b007      	add	sp, #28
   10576:	f85d fb04 	ldr.w	pc, [sp], #4
   1057a:	bf00      	nop
   1057c:	0001f2af 	.word	0x0001f2af

00010580 <generic_hfclk_stop>:
{
   10580:	b510      	push	{r4, lr}
	__asm__ volatile(
   10582:	f04f 0320 	mov.w	r3, #32
   10586:	f3ef 8411 	mrs	r4, BASEPRI
   1058a:	f383 8812 	msr	BASEPRI_MAX, r3
   1058e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   10592:	4a07      	ldr	r2, [pc, #28]	; (105b0 <generic_hfclk_stop+0x30>)
   10594:	6813      	ldr	r3, [r2, #0]
   10596:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1059a:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1059c:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1059e:	d402      	bmi.n	105a6 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   105a0:	2001      	movs	r0, #1
   105a2:	f00f fea1 	bl	202e8 <nrfx_clock_stop>
	__asm__ volatile(
   105a6:	f384 8811 	msr	BASEPRI, r4
   105aa:	f3bf 8f6f 	isb	sy
}
   105ae:	bd10      	pop	{r4, pc}
   105b0:	2000dcb4 	.word	0x2000dcb4

000105b4 <z_nrf_clock_control_lf_on>:
{
   105b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   105b8:	2201      	movs	r2, #1
   105ba:	4607      	mov	r7, r0
   105bc:	4935      	ldr	r1, [pc, #212]	; (10694 <z_nrf_clock_control_lf_on+0xe0>)
   105be:	e8d1 3fef 	ldaex	r3, [r1]
   105c2:	e8c1 2fe0 	stlex	r0, r2, [r1]
   105c6:	2800      	cmp	r0, #0
   105c8:	d1f9      	bne.n	105be <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   105ca:	b933      	cbnz	r3, 105da <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   105cc:	4932      	ldr	r1, [pc, #200]	; (10698 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
   105ce:	4833      	ldr	r0, [pc, #204]	; (1069c <z_nrf_clock_control_lf_on+0xe8>)
   105d0:	604b      	str	r3, [r1, #4]
   105d2:	60cb      	str	r3, [r1, #12]
   105d4:	608a      	str	r2, [r1, #8]
   105d6:	f00d ffd3 	bl	1e580 <onoff_request>
	switch (start_mode) {
   105da:	1e7b      	subs	r3, r7, #1
   105dc:	2b01      	cmp	r3, #1
   105de:	d828      	bhi.n	10632 <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   105e0:	2f01      	cmp	r7, #1
   105e2:	d106      	bne.n	105f2 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   105e4:	4b2e      	ldr	r3, [pc, #184]	; (106a0 <z_nrf_clock_control_lf_on+0xec>)
   105e6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   105ea:	f003 0303 	and.w	r3, r3, #3
   105ee:	2b02      	cmp	r3, #2
   105f0:	d01f      	beq.n	10632 <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   105f2:	f010 ff1f 	bl	21434 <k_is_in_isr>
   105f6:	4605      	mov	r5, r0
   105f8:	b9e8      	cbnz	r0, 10636 <z_nrf_clock_control_lf_on+0x82>
	return !z_sys_post_kernel;
   105fa:	4b2a      	ldr	r3, [pc, #168]	; (106a4 <z_nrf_clock_control_lf_on+0xf0>)
   105fc:	781b      	ldrb	r3, [r3, #0]
   105fe:	b1d3      	cbz	r3, 10636 <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
   10600:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   10602:	4606      	mov	r6, r0
   10604:	4b26      	ldr	r3, [pc, #152]	; (106a0 <z_nrf_clock_control_lf_on+0xec>)
   10606:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1060a:	4c25      	ldr	r4, [pc, #148]	; (106a0 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1060c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 106a8 <z_nrf_clock_control_lf_on+0xf4>
   10610:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   10614:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   10618:	03d2      	lsls	r2, r2, #15
   1061a:	d516      	bpl.n	1064a <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1061c:	f003 0303 	and.w	r3, r3, #3
   10620:	2b02      	cmp	r3, #2
   10622:	d001      	beq.n	10628 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   10624:	2f01      	cmp	r7, #1
   10626:	d110      	bne.n	1064a <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
   10628:	b375      	cbz	r5, 10688 <z_nrf_clock_control_lf_on+0xd4>
   1062a:	f386 8811 	msr	BASEPRI, r6
   1062e:	f3bf 8f6f 	isb	sy
}
   10632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   10636:	f04f 0320 	mov.w	r3, #32
   1063a:	f3ef 8611 	mrs	r6, BASEPRI
   1063e:	f383 8812 	msr	BASEPRI_MAX, r3
   10642:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   10646:	2501      	movs	r5, #1
   10648:	e7df      	b.n	1060a <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1064a:	b1c5      	cbz	r5, 1067e <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1064c:	4630      	mov	r0, r6
   1064e:	f7fd f913 	bl	d878 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   10652:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   10656:	b2db      	uxtb	r3, r3
   10658:	2b01      	cmp	r3, #1
   1065a:	d1d9      	bne.n	10610 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1065c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   10660:	2a00      	cmp	r2, #0
   10662:	d0d5      	beq.n	10610 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10664:	2200      	movs	r2, #0
   10666:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1066a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1066e:	2202      	movs	r2, #2
   10670:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   10674:	2220      	movs	r2, #32
   10676:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1067a:	60a3      	str	r3, [r4, #8]
}
   1067c:	e7c8      	b.n	10610 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
   1067e:	2100      	movs	r1, #0
   10680:	2021      	movs	r0, #33	; 0x21
   10682:	f00a fcc3 	bl	1b00c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   10686:	e7e4      	b.n	10652 <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
   10688:	2202      	movs	r2, #2
   1068a:	4b05      	ldr	r3, [pc, #20]	; (106a0 <z_nrf_clock_control_lf_on+0xec>)
   1068c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   10690:	e7cf      	b.n	10632 <z_nrf_clock_control_lf_on+0x7e>
   10692:	bf00      	nop
   10694:	2000dc60 	.word	0x2000dc60
   10698:	2000dc50 	.word	0x2000dc50
   1069c:	2000dc80 	.word	0x2000dc80
   106a0:	40005000 	.word	0x40005000
   106a4:	200110cf 	.word	0x200110cf
   106a8:	e000e100 	.word	0xe000e100

000106ac <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   106ac:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   106ae:	4807      	ldr	r0, [pc, #28]	; (106cc <uart_console_init+0x20>)
   106b0:	f010 fe0e 	bl	212d0 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   106b4:	b138      	cbz	r0, 106c6 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   106b6:	4806      	ldr	r0, [pc, #24]	; (106d0 <uart_console_init+0x24>)
   106b8:	f7fd fff4 	bl	e6a4 <__stdout_hook_install>
	__printk_hook_install(console_out);
   106bc:	4804      	ldr	r0, [pc, #16]	; (106d0 <uart_console_init+0x24>)
   106be:	f7fc f96b 	bl	c998 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   106c2:	2000      	movs	r0, #0
}
   106c4:	bd08      	pop	{r3, pc}
		return -ENODEV;
   106c6:	f06f 0012 	mvn.w	r0, #18
   106ca:	e7fb      	b.n	106c4 <uart_console_init+0x18>
   106cc:	00022c78 	.word	0x00022c78
   106d0:	000106d5 	.word	0x000106d5

000106d4 <console_out>:
	if ('\n' == c) {
   106d4:	280a      	cmp	r0, #10
{
   106d6:	b538      	push	{r3, r4, r5, lr}
   106d8:	4604      	mov	r4, r0
   106da:	4d07      	ldr	r5, [pc, #28]	; (106f8 <console_out+0x24>)
	if ('\n' == c) {
   106dc:	d104      	bne.n	106e8 <console_out+0x14>
   106de:	68ab      	ldr	r3, [r5, #8]
   106e0:	210d      	movs	r1, #13
   106e2:	4628      	mov	r0, r5
   106e4:	685b      	ldr	r3, [r3, #4]
   106e6:	4798      	blx	r3
   106e8:	68ab      	ldr	r3, [r5, #8]
   106ea:	4803      	ldr	r0, [pc, #12]	; (106f8 <console_out+0x24>)
   106ec:	685b      	ldr	r3, [r3, #4]
   106ee:	b2e1      	uxtb	r1, r4
   106f0:	4798      	blx	r3
}
   106f2:	4620      	mov	r0, r4
   106f4:	bd38      	pop	{r3, r4, r5, pc}
   106f6:	bf00      	nop
   106f8:	00022c78 	.word	0x00022c78

000106fc <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   106fc:	b530      	push	{r4, r5, lr}
	return port->config;
   106fe:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   10700:	f001 041f 	and.w	r4, r1, #31
   10704:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   10706:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1070a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1070c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   10710:	d105      	bne.n	1071e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   10712:	4620      	mov	r0, r4
   10714:	f007 f8bc 	bl	17890 <nrfx_gpiote_trigger_disable>

		return 0;
   10718:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   1071a:	b005      	add	sp, #20
   1071c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1071e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   10720:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   10724:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   10728:	d114      	bne.n	10754 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1072a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1072e:	bf0c      	ite	eq
   10730:	2304      	moveq	r3, #4
   10732:	2305      	movne	r3, #5
   10734:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   10738:	2300      	movs	r3, #0
   1073a:	4620      	mov	r0, r4
   1073c:	4619      	mov	r1, r3
   1073e:	aa02      	add	r2, sp, #8
   10740:	f006 fedc 	bl	174fc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   10744:	4b1c      	ldr	r3, [pc, #112]	; (107b8 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   10746:	4298      	cmp	r0, r3
   10748:	d133      	bne.n	107b2 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1074a:	2101      	movs	r1, #1
   1074c:	4620      	mov	r0, r4
   1074e:	f007 f85b 	bl	17808 <nrfx_gpiote_trigger_enable>
	return 0;
   10752:	e7e1      	b.n	10718 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   10754:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   10758:	d020      	beq.n	1079c <gpio_nrfx_pin_interrupt_configure+0xa0>
   1075a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1075e:	bf14      	ite	ne
   10760:	2301      	movne	r3, #1
   10762:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   10764:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   10768:	6883      	ldr	r3, [r0, #8]
   1076a:	40cb      	lsrs	r3, r1
   1076c:	07d9      	lsls	r1, r3, #31
   1076e:	d4e3      	bmi.n	10738 <gpio_nrfx_pin_interrupt_configure+0x3c>
   10770:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   10774:	d1e0      	bne.n	10738 <gpio_nrfx_pin_interrupt_configure+0x3c>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   10776:	4a11      	ldr	r2, [pc, #68]	; (107bc <gpio_nrfx_pin_interrupt_configure+0xc0>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   10778:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1077c:	3380      	adds	r3, #128	; 0x80
   1077e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   10782:	07db      	lsls	r3, r3, #31
   10784:	d4d8      	bmi.n	10738 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   10786:	f10d 0507 	add.w	r5, sp, #7
   1078a:	4629      	mov	r1, r5
   1078c:	4620      	mov	r0, r4
   1078e:	f006 ffe7 	bl	17760 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   10792:	4b0b      	ldr	r3, [pc, #44]	; (107c0 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   10794:	4298      	cmp	r0, r3
   10796:	d003      	beq.n	107a0 <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
   10798:	9503      	str	r5, [sp, #12]
   1079a:	e7cd      	b.n	10738 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1079c:	2303      	movs	r3, #3
   1079e:	e7e1      	b.n	10764 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   107a0:	4628      	mov	r0, r5
   107a2:	f007 f82b 	bl	177fc <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   107a6:	4b04      	ldr	r3, [pc, #16]	; (107b8 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   107a8:	4298      	cmp	r0, r3
   107aa:	d0f5      	beq.n	10798 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
   107ac:	f06f 000b 	mvn.w	r0, #11
   107b0:	e7b3      	b.n	1071a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   107b2:	f06f 0015 	mvn.w	r0, #21
   107b6:	e7b0      	b.n	1071a <gpio_nrfx_pin_interrupt_configure+0x1e>
   107b8:	0bad0000 	.word	0x0bad0000
   107bc:	40842500 	.word	0x40842500
   107c0:	0bad0004 	.word	0x0bad0004

000107c4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   107c4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   107c6:	f007 f809 	bl	177dc <nrfx_gpiote_is_init>
   107ca:	4604      	mov	r4, r0
   107cc:	b968      	cbnz	r0, 107ea <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   107ce:	f006 ffdd 	bl	1778c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   107d2:	4b08      	ldr	r3, [pc, #32]	; (107f4 <gpio_nrfx_init+0x30>)
   107d4:	4298      	cmp	r0, r3
   107d6:	d10a      	bne.n	107ee <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   107d8:	4621      	mov	r1, r4
   107da:	4807      	ldr	r0, [pc, #28]	; (107f8 <gpio_nrfx_init+0x34>)
   107dc:	f006 ffba 	bl	17754 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   107e0:	4622      	mov	r2, r4
   107e2:	2105      	movs	r1, #5
   107e4:	2031      	movs	r0, #49	; 0x31
   107e6:	f7fd f903 	bl	d9f0 <z_arm_irq_priority_set>
		return 0;
   107ea:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   107ec:	bd10      	pop	{r4, pc}
		return -EIO;
   107ee:	f06f 0004 	mvn.w	r0, #4
   107f2:	e7fb      	b.n	107ec <gpio_nrfx_init+0x28>
   107f4:	0bad0000 	.word	0x0bad0000
   107f8:	000107fd 	.word	0x000107fd

000107fc <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   107fc:	0943      	lsrs	r3, r0, #5
{
   107fe:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   10800:	d107      	bne.n	10812 <nrfx_gpio_handler+0x16>
	return list->head;
   10802:	4b0b      	ldr	r3, [pc, #44]	; (10830 <nrfx_gpio_handler+0x34>)
   10804:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   10806:	b121      	cbz	r1, 10812 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   10808:	2501      	movs	r5, #1
	return node->next;
   1080a:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1080c:	4e09      	ldr	r6, [pc, #36]	; (10834 <nrfx_gpio_handler+0x38>)
   1080e:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   10810:	b901      	cbnz	r1, 10814 <nrfx_gpio_handler+0x18>
}
   10812:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   10814:	688a      	ldr	r2, [r1, #8]
   10816:	402a      	ands	r2, r5
   10818:	d002      	beq.n	10820 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
   1081a:	4630      	mov	r0, r6
   1081c:	684b      	ldr	r3, [r1, #4]
   1081e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   10820:	b11c      	cbz	r4, 1082a <nrfx_gpio_handler+0x2e>
   10822:	6823      	ldr	r3, [r4, #0]
   10824:	4621      	mov	r1, r4
   10826:	461c      	mov	r4, r3
   10828:	e7f2      	b.n	10810 <nrfx_gpio_handler+0x14>
   1082a:	4623      	mov	r3, r4
   1082c:	e7fa      	b.n	10824 <nrfx_gpio_handler+0x28>
   1082e:	bf00      	nop
   10830:	2000dcb8 	.word	0x2000dcb8
   10834:	00022c48 	.word	0x00022c48

00010838 <gpio_nrfx_pin_configure>:
{
   10838:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1083c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1083e:	f001 051f 	and.w	r5, r1, #31
   10842:	7b3b      	ldrb	r3, [r7, #12]
{
   10844:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10846:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1084a:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1084c:	4628      	mov	r0, r5
   1084e:	f10d 0103 	add.w	r1, sp, #3
   10852:	f006 ff85 	bl	17760 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   10856:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1085a:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1085c:	d10b      	bne.n	10876 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1085e:	4628      	mov	r0, r5
   10860:	f007 f83e 	bl	178e0 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   10864:	4b3c      	ldr	r3, [pc, #240]	; (10958 <gpio_nrfx_pin_configure+0x120>)
   10866:	4598      	cmp	r8, r3
   10868:	d103      	bne.n	10872 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   1086a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1086e:	f006 ffbf 	bl	177f0 <nrfx_gpiote_channel_free>
		return 0;
   10872:	2000      	movs	r0, #0
   10874:	e00c      	b.n	10890 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   10876:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   10878:	4628      	mov	r0, r5
   1087a:	4619      	mov	r1, r3
   1087c:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1087e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   10882:	f006 fe3b 	bl	174fc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   10886:	4b34      	ldr	r3, [pc, #208]	; (10958 <gpio_nrfx_pin_configure+0x120>)
   10888:	4298      	cmp	r0, r3
   1088a:	d004      	beq.n	10896 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   1088c:	f06f 0015 	mvn.w	r0, #21
}
   10890:	b004      	add	sp, #16
   10892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   10896:	4580      	cmp	r8, r0
   10898:	d103      	bne.n	108a2 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   1089a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1089e:	f006 ffa7 	bl	177f0 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   108a2:	03a3      	lsls	r3, r4, #14
   108a4:	d549      	bpl.n	1093a <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   108a6:	f240 3306 	movw	r3, #774	; 0x306
   108aa:	4023      	ands	r3, r4
   108ac:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   108b0:	d019      	beq.n	108e6 <gpio_nrfx_pin_configure+0xae>
   108b2:	d80c      	bhi.n	108ce <gpio_nrfx_pin_configure+0x96>
   108b4:	2b06      	cmp	r3, #6
   108b6:	d017      	beq.n	108e8 <gpio_nrfx_pin_configure+0xb0>
   108b8:	d804      	bhi.n	108c4 <gpio_nrfx_pin_configure+0x8c>
   108ba:	b1ab      	cbz	r3, 108e8 <gpio_nrfx_pin_configure+0xb0>
   108bc:	2b02      	cmp	r3, #2
   108be:	d1e5      	bne.n	1088c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   108c0:	2304      	movs	r3, #4
   108c2:	e011      	b.n	108e8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   108c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   108c8:	d1e0      	bne.n	1088c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   108ca:	2301      	movs	r3, #1
   108cc:	e00c      	b.n	108e8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   108ce:	f240 2202 	movw	r2, #514	; 0x202
   108d2:	4293      	cmp	r3, r2
   108d4:	d026      	beq.n	10924 <gpio_nrfx_pin_configure+0xec>
   108d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   108da:	d025      	beq.n	10928 <gpio_nrfx_pin_configure+0xf0>
   108dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   108e0:	d1d4      	bne.n	1088c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   108e2:	2302      	movs	r3, #2
   108e4:	e000      	b.n	108e8 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   108e6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   108e8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   108ec:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   108f0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   108f4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   108f6:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   108fa:	bf4c      	ite	mi
   108fc:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   108fe:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   10902:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   10904:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   10908:	d510      	bpl.n	1092c <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1090a:	2301      	movs	r3, #1
   1090c:	687a      	ldr	r2, [r7, #4]
   1090e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   10910:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   10912:	2200      	movs	r2, #0
   10914:	4628      	mov	r0, r5
   10916:	a901      	add	r1, sp, #4
   10918:	f006 fe9c 	bl	17654 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1091c:	4b0e      	ldr	r3, [pc, #56]	; (10958 <gpio_nrfx_pin_configure+0x120>)
   1091e:	4298      	cmp	r0, r3
   10920:	d0a7      	beq.n	10872 <gpio_nrfx_pin_configure+0x3a>
   10922:	e7b3      	b.n	1088c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   10924:	2305      	movs	r3, #5
   10926:	e7df      	b.n	108e8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   10928:	2303      	movs	r3, #3
   1092a:	e7dd      	b.n	108e8 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1092c:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1092e:	bf41      	itttt	mi
   10930:	2301      	movmi	r3, #1
   10932:	687a      	ldrmi	r2, [r7, #4]
   10934:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   10936:	60d3      	strmi	r3, [r2, #12]
}
   10938:	e7eb      	b.n	10912 <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
   1093a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1093c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   10940:	bf4c      	ite	mi
   10942:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   10944:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   10948:	461a      	mov	r2, r3
   1094a:	4628      	mov	r0, r5
   1094c:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1094e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   10952:	f006 fdd3 	bl	174fc <nrfx_gpiote_input_configure>
   10956:	e7e1      	b.n	1091c <gpio_nrfx_pin_configure+0xe4>
   10958:	0bad0000 	.word	0x0bad0000

0001095c <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1095c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   10960:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
   10962:	4e3f      	ldr	r6, [pc, #252]	; (10a60 <pinctrl_configure_pins+0x104>)
   10964:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   10968:	4281      	cmp	r1, r0
   1096a:	d102      	bne.n	10972 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1096c:	2000      	movs	r0, #0
}
   1096e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   10972:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   10974:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   10978:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
   1097c:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   1097e:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
   10982:	bf08      	it	eq
   10984:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   10988:	2d19      	cmp	r5, #25
   1098a:	d866      	bhi.n	10a5a <pinctrl_configure_pins+0xfe>
   1098c:	e8df f005 	tbb	[pc, r5]
   10990:	1e1b160d 	.word	0x1e1b160d
   10994:	651e2d21 	.word	0x651e2d21
   10998:	31656565 	.word	0x31656565
   1099c:	65656551 	.word	0x65656551
   109a0:	65656565 	.word	0x65656565
   109a4:	5c546565 	.word	0x5c546565
   109a8:	625f      	.short	0x625f
			NRF_PSEL_UART(reg, TXD) = pin;
   109aa:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   109ae:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   109b2:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
   109b6:	60b5      	str	r5, [r6, #8]
}
   109b8:	2501      	movs	r5, #1
   109ba:	e002      	b.n	109c2 <pinctrl_configure_pins+0x66>
			NRF_PSEL_UART(reg, RXD) = pin;
   109bc:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   109c0:	2500      	movs	r5, #0
   109c2:	46ac      	mov	ip, r5
   109c4:	e01c      	b.n	10a00 <pinctrl_configure_pins+0xa4>
			NRF_PSEL_UART(reg, RTS) = pin;
   109c6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   109ca:	e7f0      	b.n	109ae <pinctrl_configure_pins+0x52>
			NRF_PSEL_UART(reg, CTS) = pin;
   109cc:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   109d0:	e7f6      	b.n	109c0 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   109d2:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   109d4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   109d8:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   109dc:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   109e0:	f8c6 c00c 	str.w	ip, [r6, #12]
}
   109e4:	f04f 0c01 	mov.w	ip, #1
   109e8:	e00a      	b.n	10a00 <pinctrl_configure_pins+0xa4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   109ea:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   109ee:	2501      	movs	r5, #1
   109f0:	e7f2      	b.n	109d8 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   109f2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   109f6:	2c00      	cmp	r4, #0
   109f8:	d1e2      	bne.n	109c0 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   109fa:	2500      	movs	r5, #0
				drive = NRF_DRIVE_S0D1;
   109fc:	2406      	movs	r4, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   109fe:	46ac      	mov	ip, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   10a00:	f850 eb04 	ldr.w	lr, [r0], #4
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   10a04:	0224      	lsls	r4, r4, #8
   10a06:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   10a0a:	f1b8 0f00 	cmp.w	r8, #0
   10a0e:	bf1c      	itt	ne
   10a10:	f04f 0c00 	movne.w	ip, #0
   10a14:	2501      	movne	r5, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   10a16:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
   10a1a:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    *p_pin = pin_number & 0x1F;
   10a1e:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   10a22:	ea44 040c 	orr.w	r4, r4, ip
   10a26:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   10a2a:	3380      	adds	r3, #128	; 0x80
   10a2c:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   10a30:	e79a      	b.n	10968 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   10a32:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   10a36:	e7de      	b.n	109f6 <pinctrl_configure_pins+0x9a>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   10a38:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   10a3c:	6805      	ldr	r5, [r0, #0]
   10a3e:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
   10a42:	2d00      	cmp	r5, #0
   10a44:	d0d3      	beq.n	109ee <pinctrl_configure_pins+0x92>
   10a46:	e7b2      	b.n	109ae <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   10a48:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   10a4c:	e7f6      	b.n	10a3c <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   10a4e:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   10a52:	e7f3      	b.n	10a3c <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   10a54:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   10a58:	e7f0      	b.n	10a3c <pinctrl_configure_pins+0xe0>
		switch (NRF_GET_FUN(pins[i])) {
   10a5a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   10a5e:	e786      	b.n	1096e <pinctrl_configure_pins+0x12>
   10a60:	40842500 	.word	0x40842500

00010a64 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   10a64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   10a66:	ab0b      	add	r3, sp, #44	; 0x2c
   10a68:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   10a6a:	9303      	str	r3, [sp, #12]
   10a6c:	4b05      	ldr	r3, [pc, #20]	; (10a84 <z_log_msg_runtime_create.constprop.0+0x20>)
   10a6e:	2201      	movs	r2, #1
   10a70:	9302      	str	r3, [sp, #8]
   10a72:	2300      	movs	r3, #0
   10a74:	4618      	mov	r0, r3
   10a76:	e9cd 3300 	strd	r3, r3, [sp]
   10a7a:	f7fc faaf 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   10a7e:	b007      	add	sp, #28
   10a80:	f85d fb04 	ldr.w	pc, [sp], #4
   10a84:	00024f5f 	.word	0x00024f5f

00010a88 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   10a88:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   10a8a:	794b      	ldrb	r3, [r1, #5]
   10a8c:	2b01      	cmp	r3, #1
   10a8e:	d026      	beq.n	10ade <uarte_nrfx_configure+0x56>
   10a90:	2b03      	cmp	r3, #3
   10a92:	d121      	bne.n	10ad8 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   10a94:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   10a96:	798b      	ldrb	r3, [r1, #6]
   10a98:	2b03      	cmp	r3, #3
   10a9a:	d11d      	bne.n	10ad8 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   10a9c:	79ce      	ldrb	r6, [r1, #7]
   10a9e:	b10e      	cbz	r6, 10aa4 <uarte_nrfx_configure+0x1c>
   10aa0:	2e01      	cmp	r6, #1
   10aa2:	d119      	bne.n	10ad8 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   10aa4:	790a      	ldrb	r2, [r1, #4]
   10aa6:	b112      	cbz	r2, 10aae <uarte_nrfx_configure+0x26>
   10aa8:	2a02      	cmp	r2, #2
   10aaa:	d115      	bne.n	10ad8 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   10aac:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   10aae:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   10ab0:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   10ab2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   10ab6:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   10ab8:	d067      	beq.n	10b8a <uarte_nrfx_configure+0x102>
   10aba:	d82d      	bhi.n	10b18 <uarte_nrfx_configure+0x90>
   10abc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   10ac0:	d066      	beq.n	10b90 <uarte_nrfx_configure+0x108>
   10ac2:	d816      	bhi.n	10af2 <uarte_nrfx_configure+0x6a>
   10ac4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   10ac8:	d064      	beq.n	10b94 <uarte_nrfx_configure+0x10c>
   10aca:	d80a      	bhi.n	10ae2 <uarte_nrfx_configure+0x5a>
   10acc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   10ad0:	d063      	beq.n	10b9a <uarte_nrfx_configure+0x112>
   10ad2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   10ad6:	d063      	beq.n	10ba0 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   10ad8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   10adc:	e054      	b.n	10b88 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   10ade:	2500      	movs	r5, #0
   10ae0:	e7d9      	b.n	10a96 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   10ae2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   10ae6:	d05e      	beq.n	10ba6 <uarte_nrfx_configure+0x11e>
   10ae8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   10aec:	d1f4      	bne.n	10ad8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   10aee:	4b38      	ldr	r3, [pc, #224]	; (10bd0 <uarte_nrfx_configure+0x148>)
   10af0:	e03c      	b.n	10b6c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   10af2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   10af6:	d059      	beq.n	10bac <uarte_nrfx_configure+0x124>
   10af8:	d807      	bhi.n	10b0a <uarte_nrfx_configure+0x82>
   10afa:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   10afe:	d057      	beq.n	10bb0 <uarte_nrfx_configure+0x128>
   10b00:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   10b04:	d1e8      	bne.n	10ad8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   10b06:	4b33      	ldr	r3, [pc, #204]	; (10bd4 <uarte_nrfx_configure+0x14c>)
   10b08:	e030      	b.n	10b6c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   10b0a:	f647 2412 	movw	r4, #31250	; 0x7a12
   10b0e:	42a3      	cmp	r3, r4
   10b10:	d1e2      	bne.n	10ad8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   10b12:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   10b16:	e029      	b.n	10b6c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   10b18:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   10b1c:	d04a      	beq.n	10bb4 <uarte_nrfx_configure+0x12c>
   10b1e:	d813      	bhi.n	10b48 <uarte_nrfx_configure+0xc0>
   10b20:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   10b24:	d049      	beq.n	10bba <uarte_nrfx_configure+0x132>
   10b26:	d809      	bhi.n	10b3c <uarte_nrfx_configure+0xb4>
   10b28:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   10b2c:	42a3      	cmp	r3, r4
   10b2e:	d046      	beq.n	10bbe <uarte_nrfx_configure+0x136>
   10b30:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   10b34:	d1d0      	bne.n	10ad8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   10b36:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   10b3a:	e017      	b.n	10b6c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   10b3c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   10b40:	d1ca      	bne.n	10ad8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   10b42:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   10b46:	e011      	b.n	10b6c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   10b48:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   10b4c:	d03a      	beq.n	10bc4 <uarte_nrfx_configure+0x13c>
   10b4e:	d808      	bhi.n	10b62 <uarte_nrfx_configure+0xda>
   10b50:	4c21      	ldr	r4, [pc, #132]	; (10bd8 <uarte_nrfx_configure+0x150>)
   10b52:	42a3      	cmp	r3, r4
   10b54:	d039      	beq.n	10bca <uarte_nrfx_configure+0x142>
   10b56:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   10b5a:	d1bd      	bne.n	10ad8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   10b5c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   10b60:	e004      	b.n	10b6c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   10b62:	4c1e      	ldr	r4, [pc, #120]	; (10bdc <uarte_nrfx_configure+0x154>)
   10b64:	42a3      	cmp	r3, r4
   10b66:	d1b7      	bne.n	10ad8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   10b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   10b6c:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   10b6e:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   10b72:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   10b74:	4335      	orrs	r5, r6
   10b76:	681b      	ldr	r3, [r3, #0]
   10b78:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   10b7a:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   10b7e:	1d23      	adds	r3, r4, #4
   10b80:	c903      	ldmia	r1, {r0, r1}
   10b82:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   10b86:	2000      	movs	r0, #0
}
   10b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   10b8a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   10b8e:	e7ed      	b.n	10b6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   10b90:	4b13      	ldr	r3, [pc, #76]	; (10be0 <uarte_nrfx_configure+0x158>)
   10b92:	e7eb      	b.n	10b6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   10b94:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   10b98:	e7e8      	b.n	10b6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   10b9a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   10b9e:	e7e5      	b.n	10b6c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   10ba0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   10ba4:	e7e2      	b.n	10b6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   10ba6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   10baa:	e7df      	b.n	10b6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   10bac:	4b0d      	ldr	r3, [pc, #52]	; (10be4 <uarte_nrfx_configure+0x15c>)
   10bae:	e7dd      	b.n	10b6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   10bb0:	4b0d      	ldr	r3, [pc, #52]	; (10be8 <uarte_nrfx_configure+0x160>)
   10bb2:	e7db      	b.n	10b6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   10bb4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   10bb8:	e7d8      	b.n	10b6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   10bba:	4b0c      	ldr	r3, [pc, #48]	; (10bec <uarte_nrfx_configure+0x164>)
   10bbc:	e7d6      	b.n	10b6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   10bbe:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   10bc2:	e7d3      	b.n	10b6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   10bc4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   10bc8:	e7d0      	b.n	10b6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   10bca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   10bce:	e7cd      	b.n	10b6c <uarte_nrfx_configure+0xe4>
   10bd0:	0013b000 	.word	0x0013b000
   10bd4:	004ea000 	.word	0x004ea000
   10bd8:	0003d090 	.word	0x0003d090
   10bdc:	000f4240 	.word	0x000f4240
   10be0:	00275000 	.word	0x00275000
   10be4:	0075c000 	.word	0x0075c000
   10be8:	003af000 	.word	0x003af000
   10bec:	013a9000 	.word	0x013a9000

00010bf0 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   10bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10bf4:	4680      	mov	r8, r0
   10bf6:	b087      	sub	sp, #28
   10bf8:	2200      	movs	r2, #0
   10bfa:	2101      	movs	r1, #1
   10bfc:	2008      	movs	r0, #8
   10bfe:	f7fc fef7 	bl	d9f0 <z_arm_irq_priority_set>
   10c02:	2008      	movs	r0, #8
   10c04:	f7fc fed8 	bl	d9b8 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   10c08:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   10c0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   10c0e:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   10c12:	683d      	ldr	r5, [r7, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   10c14:	aa05      	add	r2, sp, #20
   10c16:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	data->dev = dev;
   10c1a:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   10c1e:	f8d7 900c 	ldr.w	r9, [r7, #12]
   10c22:	4648      	mov	r0, r9
   10c24:	f00e fba5 	bl	1f372 <pinctrl_lookup_state>
	if (ret < 0) {
   10c28:	1e04      	subs	r4, r0, #0
   10c2a:	db24      	blt.n	10c76 <uarte_0_init+0x86>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   10c2c:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   10c2e:	f8d9 2000 	ldr.w	r2, [r9]
   10c32:	7919      	ldrb	r1, [r3, #4]
   10c34:	6818      	ldr	r0, [r3, #0]
   10c36:	f7ff fe91 	bl	1095c <pinctrl_configure_pins>
	if (err < 0) {
   10c3a:	1e04      	subs	r4, r0, #0
   10c3c:	db1b      	blt.n	10c76 <uarte_0_init+0x86>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   10c3e:	4640      	mov	r0, r8
   10c40:	1d31      	adds	r1, r6, #4
   10c42:	f7ff ff21 	bl	10a88 <uarte_nrfx_configure>
	if (err) {
   10c46:	4604      	mov	r4, r0
   10c48:	b9a8      	cbnz	r0, 10c76 <uarte_0_init+0x86>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   10c4a:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   10c4c:	0799      	lsls	r1, r3, #30
   10c4e:	d523      	bpl.n	10c98 <uarte_0_init+0xa8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   10c50:	f106 001c 	add.w	r0, r6, #28
   10c54:	f006 fbca 	bl	173ec <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   10c58:	4b23      	ldr	r3, [pc, #140]	; (10ce8 <uarte_0_init+0xf8>)
   10c5a:	4298      	cmp	r0, r3
   10c5c:	d00f      	beq.n	10c7e <uarte_0_init+0x8e>
		LOG_ERR("Failed to allocate PPI Channel");
   10c5e:	4b23      	ldr	r3, [pc, #140]	; (10cec <uarte_0_init+0xfc>)
   10c60:	4620      	mov	r0, r4
   10c62:	e9cd 4301 	strd	r4, r3, [sp, #4]
   10c66:	9400      	str	r4, [sp, #0]
   10c68:	4623      	mov	r3, r4
   10c6a:	2201      	movs	r2, #1
   10c6c:	4920      	ldr	r1, [pc, #128]	; (10cf0 <uarte_0_init+0x100>)
   10c6e:	f7ff fef9 	bl	10a64 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   10c72:	f06f 0404 	mvn.w	r4, #4
UART_NRF_UARTE_DEVICE(0);
   10c76:	4620      	mov	r0, r4
   10c78:	b007      	add	sp, #28
   10c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   10c7e:	7f33      	ldrb	r3, [r6, #28]
   10c80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10c84:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   10c88:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   10c8c:	2301      	movs	r3, #1
   10c8e:	7f32      	ldrb	r2, [r6, #28]
   10c90:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   10c92:	4a18      	ldr	r2, [pc, #96]	; (10cf4 <uarte_0_init+0x104>)
   10c94:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   10c98:	2308      	movs	r3, #8
   10c9a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
   10c9e:	7a3b      	ldrb	r3, [r7, #8]
   10ca0:	b953      	cbnz	r3, 10cb8 <uarte_0_init+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10ca2:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   10ca6:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   10caa:	69b3      	ldr	r3, [r6, #24]
   10cac:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   10cb0:	2301      	movs	r3, #1
   10cb2:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10cb6:	602b      	str	r3, [r5, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   10cb8:	687b      	ldr	r3, [r7, #4]
   10cba:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   10cbc:	bf5c      	itt	pl
   10cbe:	f44f 7380 	movpl.w	r3, #256	; 0x100
   10cc2:	f8c5 3304 	strpl.w	r3, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   10cc6:	687b      	ldr	r3, [r7, #4]
   10cc8:	06db      	lsls	r3, r3, #27
   10cca:	bf44      	itt	mi
   10ccc:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   10cd0:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   10cd4:	6973      	ldr	r3, [r6, #20]
   10cd6:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   10cda:	2300      	movs	r3, #0
   10cdc:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10ce0:	2301      	movs	r3, #1
   10ce2:	60ab      	str	r3, [r5, #8]
   10ce4:	60eb      	str	r3, [r5, #12]
UART_NRF_UARTE_DEVICE(0);
   10ce6:	e7c6      	b.n	10c76 <uarte_0_init+0x86>
   10ce8:	0bad0000 	.word	0x0bad0000
   10cec:	00024f5f 	.word	0x00024f5f
   10cf0:	0002305c 	.word	0x0002305c
   10cf4:	40017000 	.word	0x40017000

00010cf8 <uarte_nrfx_poll_out>:
{
   10cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10cfa:	4604      	mov	r4, r0
   10cfc:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
   10cfe:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   10d00:	f010 fb98 	bl	21434 <k_is_in_isr>
   10d04:	b9b0      	cbnz	r0, 10d34 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   10d06:	4b21      	ldr	r3, [pc, #132]	; (10d8c <uarte_nrfx_poll_out+0x94>)
   10d08:	781b      	ldrb	r3, [r3, #0]
   10d0a:	b19b      	cbz	r3, 10d34 <uarte_nrfx_poll_out+0x3c>
{
   10d0c:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   10d0e:	6860      	ldr	r0, [r4, #4]
   10d10:	f00e fc11 	bl	1f536 <is_tx_ready.isra.0>
   10d14:	bb00      	cbnz	r0, 10d58 <uarte_nrfx_poll_out+0x60>
   10d16:	2001      	movs	r0, #1
   10d18:	f00f fae4 	bl	202e4 <nrfx_busy_wait>
   10d1c:	3e01      	subs	r6, #1
   10d1e:	d1f6      	bne.n	10d0e <uarte_nrfx_poll_out+0x16>
   10d20:	2100      	movs	r1, #0
   10d22:	2021      	movs	r0, #33	; 0x21
   10d24:	f00a f972 	bl	1b00c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   10d28:	e7f0      	b.n	10d0c <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   10d2a:	f381 8811 	msr	BASEPRI, r1
   10d2e:	f3bf 8f6f 	isb	sy
}
   10d32:	e7f5      	b.n	10d20 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   10d34:	f04f 0320 	mov.w	r3, #32
   10d38:	f3ef 8111 	mrs	r1, BASEPRI
   10d3c:	f383 8812 	msr	BASEPRI_MAX, r3
   10d40:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   10d44:	6860      	ldr	r0, [r4, #4]
   10d46:	460e      	mov	r6, r1
   10d48:	f00e fbf5 	bl	1f536 <is_tx_ready.isra.0>
   10d4c:	b990      	cbnz	r0, 10d74 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   10d4e:	f381 8811 	msr	BASEPRI, r1
   10d52:	f3bf 8f6f 	isb	sy
}
   10d56:	e7ed      	b.n	10d34 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   10d58:	f04f 0320 	mov.w	r3, #32
   10d5c:	f3ef 8111 	mrs	r1, BASEPRI
   10d60:	f383 8812 	msr	BASEPRI_MAX, r3
   10d64:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   10d68:	6860      	ldr	r0, [r4, #4]
   10d6a:	460e      	mov	r6, r1
   10d6c:	f00e fbe3 	bl	1f536 <is_tx_ready.isra.0>
   10d70:	2800      	cmp	r0, #0
   10d72:	d0da      	beq.n	10d2a <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   10d74:	697b      	ldr	r3, [r7, #20]
	tx_start(dev, data->char_out, 1);
   10d76:	2201      	movs	r2, #1
	*data->char_out = c;
   10d78:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
   10d7a:	4620      	mov	r0, r4
   10d7c:	6979      	ldr	r1, [r7, #20]
   10d7e:	f00e fb1a 	bl	1f3b6 <tx_start>
	__asm__ volatile(
   10d82:	f386 8811 	msr	BASEPRI, r6
   10d86:	f3bf 8f6f 	isb	sy
}
   10d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d8c:	200110cf 	.word	0x200110cf

00010d90 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   10d90:	2301      	movs	r3, #1
   10d92:	4083      	lsls	r3, r0
{
   10d94:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   10d96:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10d98:	4a0b      	ldr	r2, [pc, #44]	; (10dc8 <compare_int_lock+0x38>)
   10d9a:	e8d2 1fef 	ldaex	r1, [r2]
   10d9e:	ea01 0504 	and.w	r5, r1, r4
   10da2:	e8c2 5fe6 	stlex	r6, r5, [r2]
   10da6:	2e00      	cmp	r6, #0
   10da8:	d1f7      	bne.n	10d9a <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   10daa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   10dae:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   10db0:	4806      	ldr	r0, [pc, #24]	; (10dcc <compare_int_lock+0x3c>)
   10db2:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   10db6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10dba:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   10dbe:	420b      	tst	r3, r1
}
   10dc0:	bf14      	ite	ne
   10dc2:	2001      	movne	r0, #1
   10dc4:	2000      	moveq	r0, #0
   10dc6:	bd70      	pop	{r4, r5, r6, pc}
   10dc8:	2000dcc8 	.word	0x2000dcc8
   10dcc:	40015000 	.word	0x40015000

00010dd0 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   10dd0:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   10dd2:	490e      	ldr	r1, [pc, #56]	; (10e0c <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
   10dd4:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   10dd8:	e9d1 3400 	ldrd	r3, r4, [r1]
   10ddc:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   10dde:	18c3      	adds	r3, r0, r3
   10de0:	f144 0400 	adc.w	r4, r4, #0
   10de4:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   10de8:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   10dec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   10df0:	d209      	bcs.n	10e06 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   10df2:	4b07      	ldr	r3, [pc, #28]	; (10e10 <sys_clock_timeout_handler+0x40>)
   10df4:	681b      	ldr	r3, [r3, #0]
   10df6:	0a1a      	lsrs	r2, r3, #8
   10df8:	061b      	lsls	r3, r3, #24
   10dfa:	199c      	adds	r4, r3, r6
   10dfc:	4b05      	ldr	r3, [pc, #20]	; (10e14 <sys_clock_timeout_handler+0x44>)
   10dfe:	f142 0500 	adc.w	r5, r2, #0
   10e02:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   10e06:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   10e08:	f00a ba68 	b.w	1b2dc <sys_clock_announce>
   10e0c:	2000cd60 	.word	0x2000cd60
   10e10:	2000dccc 	.word	0x2000dccc
   10e14:	2000cd68 	.word	0x2000cd68

00010e18 <compare_int_unlock>:
	if (key) {
   10e18:	b1d9      	cbz	r1, 10e52 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   10e1a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10e1c:	4a0d      	ldr	r2, [pc, #52]	; (10e54 <compare_int_unlock+0x3c>)
   10e1e:	4083      	lsls	r3, r0
   10e20:	e8d2 cfef 	ldaex	ip, [r2]
   10e24:	ea4c 0c03 	orr.w	ip, ip, r3
   10e28:	e8c2 cfe1 	stlex	r1, ip, [r2]
   10e2c:	2900      	cmp	r1, #0
   10e2e:	d1f7      	bne.n	10e20 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   10e30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   10e34:	4a08      	ldr	r2, [pc, #32]	; (10e58 <compare_int_unlock+0x40>)
   10e36:	4083      	lsls	r3, r0
   10e38:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10e3c:	4b07      	ldr	r3, [pc, #28]	; (10e5c <compare_int_unlock+0x44>)
   10e3e:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   10e42:	40c3      	lsrs	r3, r0
   10e44:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10e46:	bf42      	ittt	mi
   10e48:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   10e4c:	4b04      	ldrmi	r3, [pc, #16]	; (10e60 <compare_int_unlock+0x48>)
   10e4e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   10e52:	4770      	bx	lr
   10e54:	2000dcc8 	.word	0x2000dcc8
   10e58:	40015000 	.word	0x40015000
   10e5c:	2000dcc4 	.word	0x2000dcc4
   10e60:	e000e100 	.word	0xe000e100

00010e64 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   10e64:	4b0d      	ldr	r3, [pc, #52]	; (10e9c <z_nrf_rtc_timer_read+0x38>)
   10e66:	6818      	ldr	r0, [r3, #0]
   10e68:	0a01      	lsrs	r1, r0, #8
   10e6a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   10e6c:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   10e70:	4b0b      	ldr	r3, [pc, #44]	; (10ea0 <z_nrf_rtc_timer_read+0x3c>)
   10e72:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   10e76:	1818      	adds	r0, r3, r0
   10e78:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   10e7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   10e80:	d20a      	bcs.n	10e98 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   10e82:	4b08      	ldr	r3, [pc, #32]	; (10ea4 <z_nrf_rtc_timer_read+0x40>)
   10e84:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e88:	4290      	cmp	r0, r2
   10e8a:	eb71 0303 	sbcs.w	r3, r1, r3
   10e8e:	d203      	bcs.n	10e98 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   10e90:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   10e94:	f141 0100 	adc.w	r1, r1, #0
}
   10e98:	4770      	bx	lr
   10e9a:	bf00      	nop
   10e9c:	2000dccc 	.word	0x2000dccc
   10ea0:	40015000 	.word	0x40015000
   10ea4:	2000cd68 	.word	0x2000cd68

00010ea8 <compare_set>:
{
   10ea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10eac:	4616      	mov	r6, r2
   10eae:	461f      	mov	r7, r3
   10eb0:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   10eb2:	f7ff ff6d 	bl	10d90 <compare_int_lock>
   10eb6:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   10eb8:	f7ff ffd4 	bl	10e64 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   10ebc:	42b0      	cmp	r0, r6
   10ebe:	eb71 0307 	sbcs.w	r3, r1, r7
   10ec2:	d251      	bcs.n	10f68 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   10ec4:	4b38      	ldr	r3, [pc, #224]	; (10fa8 <compare_set+0x100>)
   10ec6:	1a30      	subs	r0, r6, r0
   10ec8:	eb67 0101 	sbc.w	r1, r7, r1
   10ecc:	4298      	cmp	r0, r3
   10ece:	f171 0100 	sbcs.w	r1, r1, #0
   10ed2:	d266      	bcs.n	10fa2 <compare_set+0xfa>
		if (target_time != cc_data[chan].target_time) {
   10ed4:	4b35      	ldr	r3, [pc, #212]	; (10fac <compare_set+0x104>)
   10ed6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   10eda:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   10ede:	429f      	cmp	r7, r3
   10ee0:	bf08      	it	eq
   10ee2:	4296      	cmpeq	r6, r2
   10ee4:	d04a      	beq.n	10f7c <compare_set+0xd4>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   10ee6:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   10eea:	4931      	ldr	r1, [pc, #196]	; (10fb0 <compare_set+0x108>)
   10eec:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
   10ef0:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
   10ef2:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   10ef6:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   10efa:	f00e fbc7 	bl	1f68c <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   10efe:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
   10f02:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   10f04:	f104 0550 	add.w	r5, r4, #80	; 0x50
   10f08:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10f0a:	b2ad      	uxth	r5, r5
   10f0c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   10f10:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   10f14:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 10fb8 <compare_set+0x110>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10f18:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
    p_reg->CC[ch] = cc_val;
   10f1c:	9301      	str	r3, [sp, #4]
   10f1e:	9a01      	ldr	r2, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   10f20:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   10f24:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    p_reg->EVTENSET = mask;
   10f28:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   10f2c:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   10f30:	eba0 0008 	sub.w	r0, r0, r8
   10f34:	3803      	subs	r0, #3
   10f36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   10f3a:	4560      	cmp	r0, ip
   10f3c:	d91e      	bls.n	10f7c <compare_set+0xd4>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10f3e:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   10f40:	b168      	cbz	r0, 10f5e <compare_set+0xb6>
     return p_reg->COUNTER;
   10f42:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   10f46:	eba8 000b 	sub.w	r0, r8, fp
   10f4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   10f4e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   10f52:	d913      	bls.n	10f7c <compare_set+0xd4>
					event_clear(chan);
   10f54:	4620      	mov	r0, r4
   10f56:	f00e fb99 	bl	1f68c <event_clear>
   10f5a:	f8df c05c 	ldr.w	ip, [pc, #92]	; 10fb8 <compare_set+0x110>
			cc_val = now + cc_inc;
   10f5e:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
   10f62:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   10f66:	e7da      	b.n	10f1e <compare_set+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
   10f68:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10f6a:	4a12      	ldr	r2, [pc, #72]	; (10fb4 <compare_set+0x10c>)
   10f6c:	40a3      	lsls	r3, r4
   10f6e:	e8d2 0fef 	ldaex	r0, [r2]
   10f72:	4318      	orrs	r0, r3
   10f74:	e8c2 0fe1 	stlex	r1, r0, [r2]
   10f78:	2900      	cmp	r1, #0
   10f7a:	d1f8      	bne.n	10f6e <compare_set+0xc6>
	return ret;
   10f7c:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
   10f7e:	490b      	ldr	r1, [pc, #44]	; (10fac <compare_set+0x104>)
	cc_data[chan].callback = handler;
   10f80:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   10f82:	0123      	lsls	r3, r4, #4
   10f84:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
   10f88:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
   10f8a:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
   10f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10f90:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   10f92:	4620      	mov	r0, r4
   10f94:	9900      	ldr	r1, [sp, #0]
   10f96:	f7ff ff3f 	bl	10e18 <compare_int_unlock>
}
   10f9a:	4628      	mov	r0, r5
   10f9c:	b003      	add	sp, #12
   10f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   10fa2:	f06f 0515 	mvn.w	r5, #21
   10fa6:	e7f4      	b.n	10f92 <compare_set+0xea>
   10fa8:	00800001 	.word	0x00800001
   10fac:	2000cd50 	.word	0x2000cd50
   10fb0:	40015000 	.word	0x40015000
   10fb4:	2000dcc4 	.word	0x2000dcc4
   10fb8:	007ffffd 	.word	0x007ffffd

00010fbc <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   10fbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
   10fbe:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   10fc0:	f04f 30ff 	mov.w	r0, #4294967295
   10fc4:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->INTENCLR = mask;
   10fc8:	4c18      	ldr	r4, [pc, #96]	; (1102c <sys_clock_driver_init+0x70>)
   10fca:	4b19      	ldr	r3, [pc, #100]	; (11030 <sys_clock_driver_init+0x74>)
    p_reg->INTENSET = mask;
   10fcc:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
   10fce:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   10fd2:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   10fd6:	4b17      	ldr	r3, [pc, #92]	; (11034 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
   10fd8:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   10fdc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   10fe0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10fe4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10fe8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   10fec:	4b12      	ldr	r3, [pc, #72]	; (11038 <sys_clock_driver_init+0x7c>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   10fee:	2101      	movs	r1, #1
   10ff0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   10ff4:	2015      	movs	r0, #21
   10ff6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   10ffa:	462a      	mov	r2, r5
   10ffc:	f7fc fcf8 	bl	d9f0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   11000:	2015      	movs	r0, #21
   11002:	f7fc fcd9 	bl	d9b8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   11006:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   11008:	4a0c      	ldr	r2, [pc, #48]	; (1103c <sys_clock_driver_init+0x80>)
   1100a:	60a3      	str	r3, [r4, #8]
   1100c:	6023      	str	r3, [r4, #0]
   1100e:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   11010:	4b0b      	ldr	r3, [pc, #44]	; (11040 <sys_clock_driver_init+0x84>)
   11012:	4a0c      	ldr	r2, [pc, #48]	; (11044 <sys_clock_driver_init+0x88>)
   11014:	9300      	str	r3, [sp, #0]
   11016:	4628      	mov	r0, r5
   11018:	2300      	movs	r3, #0
   1101a:	9501      	str	r5, [sp, #4]
   1101c:	f7ff ff44 	bl	10ea8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   11020:	4630      	mov	r0, r6
   11022:	f7ff fac7 	bl	105b4 <z_nrf_clock_control_lf_on>

	return 0;
}
   11026:	4628      	mov	r0, r5
   11028:	b002      	add	sp, #8
   1102a:	bd70      	pop	{r4, r5, r6, pc}
   1102c:	40015000 	.word	0x40015000
   11030:	000f0003 	.word	0x000f0003
   11034:	2000cd50 	.word	0x2000cd50
   11038:	e000e100 	.word	0xe000e100
   1103c:	2000dcc8 	.word	0x2000dcc8
   11040:	00010dd1 	.word	0x00010dd1
   11044:	007fffff 	.word	0x007fffff

00011048 <rtc_nrf_isr>:
{
   11048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1104c:	4b2e      	ldr	r3, [pc, #184]	; (11108 <rtc_nrf_isr+0xc0>)
   1104e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   11052:	0790      	lsls	r0, r2, #30
   11054:	d50b      	bpl.n	1106e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11056:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1105a:	b142      	cbz	r2, 1106e <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1105c:	2200      	movs	r2, #0
   1105e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   11062:	4a2a      	ldr	r2, [pc, #168]	; (1110c <rtc_nrf_isr+0xc4>)
   11064:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   11068:	6813      	ldr	r3, [r2, #0]
   1106a:	3301      	adds	r3, #1
   1106c:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1106e:	4a26      	ldr	r2, [pc, #152]	; (11108 <rtc_nrf_isr+0xc0>)
   11070:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   11074:	03d9      	lsls	r1, r3, #15
   11076:	d527      	bpl.n	110c8 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11078:	4b25      	ldr	r3, [pc, #148]	; (11110 <rtc_nrf_isr+0xc8>)
   1107a:	e8d3 1fef 	ldaex	r1, [r3]
   1107e:	f021 0001 	bic.w	r0, r1, #1
   11082:	e8c3 0fe4 	stlex	r4, r0, [r3]
   11086:	2c00      	cmp	r4, #0
   11088:	d1f7      	bne.n	1107a <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1108a:	07cb      	lsls	r3, r1, #31
   1108c:	d402      	bmi.n	11094 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1108e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   11092:	b1cb      	cbz	r3, 110c8 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11094:	2500      	movs	r5, #0
   11096:	4c1c      	ldr	r4, [pc, #112]	; (11108 <rtc_nrf_isr+0xc0>)
   11098:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1109c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   110a0:	f7ff fee0 	bl	10e64 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   110a4:	f04f 0320 	mov.w	r3, #32
   110a8:	f3ef 8211 	mrs	r2, BASEPRI
   110ac:	f383 8812 	msr	BASEPRI_MAX, r3
   110b0:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   110b4:	4b17      	ldr	r3, [pc, #92]	; (11114 <rtc_nrf_isr+0xcc>)
   110b6:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   110ba:	42b0      	cmp	r0, r6
   110bc:	41b9      	sbcs	r1, r7
   110be:	d206      	bcs.n	110ce <rtc_nrf_isr+0x86>
	__asm__ volatile(
   110c0:	f382 8811 	msr	BASEPRI, r2
   110c4:	f3bf 8f6f 	isb	sy
}
   110c8:	b003      	add	sp, #12
   110ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   110ce:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
   110d2:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   110d6:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
   110da:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   110dc:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
   110e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   110e4:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   110e8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   110ec:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   110f0:	f382 8811 	msr	BASEPRI, r2
   110f4:	f3bf 8f6f 	isb	sy
		if (handler) {
   110f8:	2900      	cmp	r1, #0
   110fa:	d0e5      	beq.n	110c8 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
   110fc:	9000      	str	r0, [sp, #0]
   110fe:	4632      	mov	r2, r6
   11100:	463b      	mov	r3, r7
   11102:	4628      	mov	r0, r5
   11104:	4788      	blx	r1
   11106:	e7df      	b.n	110c8 <rtc_nrf_isr+0x80>
   11108:	40015000 	.word	0x40015000
   1110c:	2000dccc 	.word	0x2000dccc
   11110:	2000dcc4 	.word	0x2000dcc4
   11114:	2000cd50 	.word	0x2000cd50

00011118 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   11118:	1c43      	adds	r3, r0, #1
{
   1111a:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   1111c:	d021      	beq.n	11162 <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1111e:	2801      	cmp	r0, #1
   11120:	dd21      	ble.n	11166 <sys_clock_set_timeout+0x4e>
   11122:	4a12      	ldr	r2, [pc, #72]	; (1116c <sys_clock_set_timeout+0x54>)
   11124:	4b12      	ldr	r3, [pc, #72]	; (11170 <sys_clock_set_timeout+0x58>)
   11126:	4290      	cmp	r0, r2
   11128:	bfd4      	ite	le
   1112a:	4604      	movle	r4, r0
   1112c:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1112e:	f7ff fe99 	bl	10e64 <z_nrf_rtc_timer_read>
   11132:	4b10      	ldr	r3, [pc, #64]	; (11174 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   11134:	490e      	ldr	r1, [pc, #56]	; (11170 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   11136:	e9d3 2300 	ldrd	r2, r3, [r3]
   1113a:	1a80      	subs	r0, r0, r2
		cyc = 0;
   1113c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   11140:	bf28      	it	cs
   11142:	2400      	movcs	r4, #0
	cyc += unannounced;
   11144:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   11146:	428c      	cmp	r4, r1
   11148:	bf28      	it	cs
   1114a:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   1114c:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1114e:	490a      	ldr	r1, [pc, #40]	; (11178 <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
   11150:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   11152:	9001      	str	r0, [sp, #4]
   11154:	9100      	str	r1, [sp, #0]
   11156:	f143 0300 	adc.w	r3, r3, #0
   1115a:	f7ff fea5 	bl	10ea8 <compare_set>
}
   1115e:	b002      	add	sp, #8
   11160:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   11162:	4c03      	ldr	r4, [pc, #12]	; (11170 <sys_clock_set_timeout+0x58>)
   11164:	e7e3      	b.n	1112e <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   11166:	2401      	movs	r4, #1
   11168:	e7e1      	b.n	1112e <sys_clock_set_timeout+0x16>
   1116a:	bf00      	nop
   1116c:	007ffffe 	.word	0x007ffffe
   11170:	007fffff 	.word	0x007fffff
   11174:	2000cd60 	.word	0x2000cd60
   11178:	00010dd1 	.word	0x00010dd1

0001117c <sys_clock_elapsed>:
{
   1117c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1117e:	f7ff fe71 	bl	10e64 <z_nrf_rtc_timer_read>
   11182:	4b02      	ldr	r3, [pc, #8]	; (1118c <sys_clock_elapsed+0x10>)
   11184:	681b      	ldr	r3, [r3, #0]
}
   11186:	1ac0      	subs	r0, r0, r3
   11188:	bd08      	pop	{r3, pc}
   1118a:	bf00      	nop
   1118c:	2000cd60 	.word	0x2000cd60

00011190 <nrf_modem_lib_init>:

	return rc;
}

int nrf_modem_lib_init(void)
{
   11190:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(NRF_MODEM_IPC_IRQ, CONFIG_NRF_MODEM_LIB_IPC_IRQ_PRIO,
   11192:	2200      	movs	r2, #0
   11194:	2101      	movs	r1, #1
   11196:	202a      	movs	r0, #42	; 0x2a
   11198:	f7fc fc2a 	bl	d9f0 <z_arm_irq_priority_set>
	rc = nrf_modem_init(&init_params);
   1119c:	4807      	ldr	r0, [pc, #28]	; (111bc <nrf_modem_lib_init+0x2c>)
   1119e:	f008 fe85 	bl	19eac <nrf_modem_init>
   111a2:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   111a4:	4c06      	ldr	r4, [pc, #24]	; (111c0 <nrf_modem_lib_init+0x30>)
   111a6:	4e07      	ldr	r6, [pc, #28]	; (111c4 <nrf_modem_lib_init+0x34>)
   111a8:	42b4      	cmp	r4, r6
   111aa:	d301      	bcc.n	111b0 <nrf_modem_lib_init+0x20>
	return _nrf_modem_lib_init();
}
   111ac:	4628      	mov	r0, r5
   111ae:	bd70      	pop	{r4, r5, r6, pc}
		e->callback(rc, e->context);
   111b0:	e9d4 3100 	ldrd	r3, r1, [r4]
   111b4:	4628      	mov	r0, r5
   111b6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   111b8:	3408      	adds	r4, #8
   111ba:	e7f5      	b.n	111a8 <nrf_modem_lib_init+0x18>
   111bc:	00023408 	.word	0x00023408
   111c0:	00027dfc 	.word	0x00027dfc
   111c4:	00027e14 	.word	0x00027e14

000111c8 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   111c8:	b5f0      	push	{r4, r5, r6, r7, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   111ca:	4b0f      	ldr	r3, [pc, #60]	; (11208 <thread_monitor_entry_get+0x40>)
{
   111cc:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
   111ce:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   111d0:	4b0e      	ldr	r3, [pc, #56]	; (1120c <thread_monitor_entry_get+0x44>)
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   111d2:	250b      	movs	r5, #11
	int entry_age, oldest_entry_age = 0;
   111d4:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   111d6:	4618      	mov	r0, r3
   111d8:	461f      	mov	r7, r3
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   111da:	42b8      	cmp	r0, r7
   111dc:	d301      	bcc.n	111e2 <thread_monitor_entry_get+0x1a>
   111de:	3d01      	subs	r5, #1
   111e0:	d104      	bne.n	111ec <thread_monitor_entry_get+0x24>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   111e2:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
   111e4:	3a01      	subs	r2, #1
	new_entry->id = id;
   111e6:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   111e8:	605a      	str	r2, [r3, #4]
}
   111ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (entry->id == id) {
   111ec:	6804      	ldr	r4, [r0, #0]
   111ee:	428c      	cmp	r4, r1
   111f0:	d0fb      	beq.n	111ea <thread_monitor_entry_get+0x22>
		} else if (entry->id == 0) {
   111f2:	b13c      	cbz	r4, 11204 <thread_monitor_entry_get+0x3c>
		entry_age = rpc_event_cnt - entry->cnt;
   111f4:	6844      	ldr	r4, [r0, #4]
   111f6:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
   111f8:	42a6      	cmp	r6, r4
   111fa:	bfbc      	itt	lt
   111fc:	4603      	movlt	r3, r0
   111fe:	4626      	movlt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   11200:	3008      	adds	r0, #8
   11202:	e7ea      	b.n	111da <thread_monitor_entry_get+0x12>
   11204:	4603      	mov	r3, r0
   11206:	e7ec      	b.n	111e2 <thread_monitor_entry_get+0x1a>
   11208:	2000dd78 	.word	0x2000dd78
   1120c:	2000dd84 	.word	0x2000dd84

00011210 <on_init>:
	list->head = NULL;
   11210:	2000      	movs	r0, #0
   11212:	4b05      	ldr	r3, [pc, #20]	; (11228 <on_init+0x18>)
	list->tail = NULL;
   11214:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11218:	4b04      	ldr	r3, [pc, #16]	; (1122c <on_init+0x1c>)
   1121a:	e8d3 2fef 	ldaex	r2, [r3]
   1121e:	e8c3 0fe1 	stlex	r1, r0, [r3]
   11222:	2900      	cmp	r1, #0
   11224:	d1f9      	bne.n	1121a <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
   11226:	4770      	bx	lr
   11228:	2000dd7c 	.word	0x2000dd7c
   1122c:	2000dd78 	.word	0x2000dd78

00011230 <nrf_modem_os_timedwait>:
{
   11230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11234:	b088      	sub	sp, #32
   11236:	4605      	mov	r5, r0
   11238:	460e      	mov	r6, r1
	if (!nrf_modem_is_initialized()) {
   1123a:	f010 f846 	bl	212ca <nrf_modem_is_initialized>
   1123e:	b920      	cbnz	r0, 1124a <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
   11240:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
   11244:	b008      	add	sp, #32
   11246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
   1124a:	f010 fb43 	bl	218d4 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   1124e:	6833      	ldr	r3, [r6, #0]
   11250:	4604      	mov	r4, r0
   11252:	2b00      	cmp	r3, #0
   11254:	460f      	mov	r7, r1
   11256:	d104      	bne.n	11262 <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
   11258:	f009 fe56 	bl	1af08 <z_impl_k_yield>
		return -NRF_EAGAIN;
   1125c:	f06f 000a 	mvn.w	r0, #10
   11260:	e7f0      	b.n	11244 <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
   11262:	bfbc      	itt	lt
   11264:	f04f 33ff 	movlt.w	r3, #4294967295
   11268:	6033      	strlt	r3, [r6, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1126a:	2201      	movs	r2, #1
   1126c:	2100      	movs	r1, #0
   1126e:	a801      	add	r0, sp, #4
   11270:	f010 f980 	bl	21574 <z_impl_k_sem_init>
   11274:	46e8      	mov	r8, sp
	thread->context = context;
   11276:	9507      	str	r5, [sp, #28]
	__asm__ volatile(
   11278:	f04f 0320 	mov.w	r3, #32
   1127c:	f3ef 8a11 	mrs	sl, BASEPRI
   11280:	f383 8812 	msr	BASEPRI_MAX, r3
   11284:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   11288:	f009 feda 	bl	1b040 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1128c:	f7ff ff9c 	bl	111c8 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   11290:	f8df 911c 	ldr.w	r9, [pc, #284]	; 113b0 <nrf_modem_os_timedwait+0x180>
   11294:	6842      	ldr	r2, [r0, #4]
   11296:	f8d9 3000 	ldr.w	r3, [r9]
   1129a:	429a      	cmp	r2, r3
   1129c:	d16d      	bne.n	1137a <nrf_modem_os_timedwait+0x14a>
	parent->next = child;
   1129e:	2300      	movs	r3, #0
	return list->tail;
   112a0:	4d42      	ldr	r5, [pc, #264]	; (113ac <nrf_modem_os_timedwait+0x17c>)
	parent->next = child;
   112a2:	9300      	str	r3, [sp, #0]
	return list->tail;
   112a4:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   112a6:	2b00      	cmp	r3, #0
   112a8:	d16e      	bne.n	11388 <nrf_modem_os_timedwait+0x158>
	list->head = node;
   112aa:	e9c5 8800 	strd	r8, r8, [r5]
	__asm__ volatile(
   112ae:	f38a 8811 	msr	BASEPRI, sl
   112b2:	f3bf 8f6f 	isb	sy
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   112b6:	6833      	ldr	r3, [r6, #0]
   112b8:	1c5a      	adds	r2, r3, #1
   112ba:	d06a      	beq.n	11392 <nrf_modem_os_timedwait+0x162>
   112bc:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   112c0:	f240 30e7 	movw	r0, #999	; 0x3e7
   112c4:	2100      	movs	r1, #0
   112c6:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   112ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   112ce:	2300      	movs	r3, #0
   112d0:	fbcc 010e 	smlal	r0, r1, ip, lr
   112d4:	f7f7 fc8c 	bl	8bf0 <__aeabi_uldivmod>
   112d8:	4602      	mov	r2, r0
   112da:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   112dc:	a801      	add	r0, sp, #4
   112de:	f009 fadf 	bl	1a8a0 <z_impl_k_sem_take>
	__asm__ volatile(
   112e2:	f04f 0320 	mov.w	r3, #32
   112e6:	f3ef 8a11 	mrs	sl, BASEPRI
   112ea:	f383 8812 	msr	BASEPRI_MAX, r3
   112ee:	f3bf 8f6f 	isb	sy
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   112f2:	2200      	movs	r2, #0
	return list->head;
   112f4:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   112f6:	b15b      	cbz	r3, 11310 <nrf_modem_os_timedwait+0xe0>
   112f8:	4543      	cmp	r3, r8
   112fa:	d154      	bne.n	113a6 <nrf_modem_os_timedwait+0x176>
	return node->next;
   112fc:	9900      	ldr	r1, [sp, #0]
Z_GENLIST_REMOVE(slist, snode)
   112fe:	2a00      	cmp	r2, #0
   11300:	d14b      	bne.n	1139a <nrf_modem_os_timedwait+0x16a>
   11302:	686a      	ldr	r2, [r5, #4]
	list->head = node;
   11304:	6029      	str	r1, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   11306:	429a      	cmp	r2, r3
   11308:	d100      	bne.n	1130c <nrf_modem_os_timedwait+0xdc>
	list->tail = node;
   1130a:	6069      	str	r1, [r5, #4]
	parent->next = child;
   1130c:	2300      	movs	r3, #0
   1130e:	9300      	str	r3, [sp, #0]
	return z_impl_z_current_get();
   11310:	f009 fe96 	bl	1b040 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   11314:	f7ff ff58 	bl	111c8 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   11318:	f8d9 3000 	ldr.w	r3, [r9]
   1131c:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1131e:	f38a 8811 	msr	BASEPRI, sl
   11322:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
   11326:	f00f ffd0 	bl	212ca <nrf_modem_is_initialized>
   1132a:	2800      	cmp	r0, #0
   1132c:	d088      	beq.n	11240 <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
   1132e:	6835      	ldr	r5, [r6, #0]
   11330:	1c6b      	adds	r3, r5, #1
   11332:	d027      	beq.n	11384 <nrf_modem_os_timedwait+0x154>
	return z_impl_k_uptime_ticks();
   11334:	f010 face 	bl	218d4 <z_impl_k_uptime_ticks>
   11338:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
   1133c:	fba0 320e 	umull	r3, r2, r0, lr
   11340:	fb0e 2101 	mla	r1, lr, r1, r2
   11344:	fba4 420e 	umull	r4, r2, r4, lr
   11348:	fb0e 2207 	mla	r2, lr, r7, r2
   1134c:	0bdb      	lsrs	r3, r3, #15
   1134e:	0be4      	lsrs	r4, r4, #15
   11350:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   11354:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
	delta = uptime - *reftime;
   11358:	1b1b      	subs	r3, r3, r4
   1135a:	ea4f 31d1 	mov.w	r1, r1, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
   1135e:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   11362:	eb61 31d2 	sbc.w	r1, r1, r2, lsr #15
   11366:	1aed      	subs	r5, r5, r3
   11368:	eb6c 0c01 	sbc.w	ip, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
   1136c:	f1bc 0f00 	cmp.w	ip, #0
   11370:	bfb8      	it	lt
   11372:	2500      	movlt	r5, #0
   11374:	6035      	str	r5, [r6, #0]
	if (*timeout == 0) {
   11376:	b92d      	cbnz	r5, 11384 <nrf_modem_os_timedwait+0x154>
   11378:	e770      	b.n	1125c <nrf_modem_os_timedwait+0x2c>
	entry->cnt = rpc_event_cnt;
   1137a:	6043      	str	r3, [r0, #4]
   1137c:	f38a 8811 	msr	BASEPRI, sl
   11380:	f3bf 8f6f 	isb	sy
		return 0;
   11384:	2000      	movs	r0, #0
   11386:	e75d      	b.n	11244 <nrf_modem_os_timedwait+0x14>
   11388:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
   1138c:	f8c5 8004 	str.w	r8, [r5, #4]
   11390:	e78d      	b.n	112ae <nrf_modem_os_timedwait+0x7e>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   11392:	f04f 32ff 	mov.w	r2, #4294967295
   11396:	4613      	mov	r3, r2
   11398:	e7a0      	b.n	112dc <nrf_modem_os_timedwait+0xac>
	parent->next = child;
   1139a:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1139c:	6869      	ldr	r1, [r5, #4]
   1139e:	4299      	cmp	r1, r3
	list->tail = node;
   113a0:	bf08      	it	eq
   113a2:	606a      	streq	r2, [r5, #4]
}
   113a4:	e7b2      	b.n	1130c <nrf_modem_os_timedwait+0xdc>
	return node->next;
   113a6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   113a8:	681b      	ldr	r3, [r3, #0]
   113aa:	e7a4      	b.n	112f6 <nrf_modem_os_timedwait+0xc6>
   113ac:	2000dd7c 	.word	0x2000dd7c
   113b0:	2000dd78 	.word	0x2000dd78

000113b4 <nrf_modem_os_sem_init>:
{
   113b4:	b470      	push	{r4, r5, r6}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   113b6:	6804      	ldr	r4, [r0, #0]
   113b8:	4b0a      	ldr	r3, [pc, #40]	; (113e4 <nrf_modem_os_sem_init+0x30>)
   113ba:	b12c      	cbz	r4, 113c8 <nrf_modem_os_sem_init+0x14>
   113bc:	429c      	cmp	r4, r3
   113be:	d303      	bcc.n	113c8 <nrf_modem_os_sem_init+0x14>
   113c0:	f103 05a8 	add.w	r5, r3, #168	; 0xa8
   113c4:	42ac      	cmp	r4, r5
   113c6:	d308      	bcc.n	113da <nrf_modem_os_sem_init+0x26>
	*sem = &nrf_modem_os_sems[used++];
   113c8:	4d07      	ldr	r5, [pc, #28]	; (113e8 <nrf_modem_os_sem_init+0x34>)
   113ca:	782c      	ldrb	r4, [r5, #0]
   113cc:	1c66      	adds	r6, r4, #1
   113ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   113d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   113d6:	702e      	strb	r6, [r5, #0]
   113d8:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   113da:	6800      	ldr	r0, [r0, #0]
}
   113dc:	bc70      	pop	{r4, r5, r6}
	return z_impl_k_sem_init(sem, initial_count, limit);
   113de:	f010 b8c9 	b.w	21574 <z_impl_k_sem_init>
   113e2:	bf00      	nop
   113e4:	2000dcd0 	.word	0x2000dcd0
   113e8:	2000fb81 	.word	0x2000fb81

000113ec <nrf_modem_os_event_notify>:
{
   113ec:	b538      	push	{r3, r4, r5, lr}
   113ee:	4605      	mov	r5, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   113f0:	4b0a      	ldr	r3, [pc, #40]	; (1141c <nrf_modem_os_event_notify+0x30>)
   113f2:	e8d3 1fef 	ldaex	r1, [r3]
   113f6:	3101      	adds	r1, #1
   113f8:	e8c3 1fe2 	stlex	r2, r1, [r3]
   113fc:	2a00      	cmp	r2, #0
   113fe:	d1f8      	bne.n	113f2 <nrf_modem_os_event_notify+0x6>
	return list->head;
   11400:	4b07      	ldr	r3, [pc, #28]	; (11420 <nrf_modem_os_event_notify+0x34>)
   11402:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   11404:	b904      	cbnz	r4, 11408 <nrf_modem_os_event_notify+0x1c>
}
   11406:	bd38      	pop	{r3, r4, r5, pc}
		if ((thread->context == context) || (context == 0)) {
   11408:	69e3      	ldr	r3, [r4, #28]
   1140a:	42ab      	cmp	r3, r5
   1140c:	d000      	beq.n	11410 <nrf_modem_os_event_notify+0x24>
   1140e:	b915      	cbnz	r5, 11416 <nrf_modem_os_event_notify+0x2a>
	z_impl_k_sem_give(sem);
   11410:	1d20      	adds	r0, r4, #4
   11412:	f009 fa1f 	bl	1a854 <z_impl_k_sem_give>
	return node->next;
   11416:	6824      	ldr	r4, [r4, #0]
   11418:	e7f4      	b.n	11404 <nrf_modem_os_event_notify+0x18>
   1141a:	bf00      	nop
   1141c:	2000dd78 	.word	0x2000dd78
   11420:	2000dd7c 	.word	0x2000dd7c

00011424 <nrf_modem_os_alloc>:
{
   11424:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
   11426:	2200      	movs	r2, #0
   11428:	2300      	movs	r3, #0
   1142a:	4801      	ldr	r0, [pc, #4]	; (11430 <nrf_modem_os_alloc+0xc>)
   1142c:	f00f bfc5 	b.w	213ba <k_heap_alloc>
   11430:	2000ddd4 	.word	0x2000ddd4

00011434 <nrf_modem_os_free>:
{
   11434:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_heap, mem);
   11436:	4801      	ldr	r0, [pc, #4]	; (1143c <nrf_modem_os_free+0x8>)
   11438:	f00f bfc9 	b.w	213ce <k_heap_free>
   1143c:	2000ddd4 	.word	0x2000ddd4

00011440 <nrf_modem_os_shm_tx_alloc>:
{
   11440:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
   11442:	2200      	movs	r2, #0
   11444:	2300      	movs	r3, #0
   11446:	4801      	ldr	r0, [pc, #4]	; (1144c <nrf_modem_os_shm_tx_alloc+0xc>)
   11448:	f00f bfb7 	b.w	213ba <k_heap_alloc>
   1144c:	2000dde8 	.word	0x2000dde8

00011450 <nrf_modem_os_shm_tx_free>:
{
   11450:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
   11452:	4801      	ldr	r0, [pc, #4]	; (11458 <nrf_modem_os_shm_tx_free+0x8>)
   11454:	f00f bfbb 	b.w	213ce <k_heap_free>
   11458:	2000dde8 	.word	0x2000dde8

0001145c <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
   1145c:	b508      	push	{r3, lr}
	/* Initialize heaps */
	k_heap_init(&nrf_modem_lib_heap, library_heap_buf, sizeof(library_heap_buf));
   1145e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11462:	4906      	ldr	r1, [pc, #24]	; (1147c <nrf_modem_os_init+0x20>)
   11464:	4806      	ldr	r0, [pc, #24]	; (11480 <nrf_modem_os_init+0x24>)
   11466:	f00f ff52 	bl	2130e <k_heap_init>
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
		    CONFIG_NRF_MODEM_LIB_SHMEM_TX_SIZE);
}
   1146a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
   1146e:	f44f 5202 	mov.w	r2, #8320	; 0x2080
   11472:	4904      	ldr	r1, [pc, #16]	; (11484 <nrf_modem_os_init+0x28>)
   11474:	4804      	ldr	r0, [pc, #16]	; (11488 <nrf_modem_os_init+0x2c>)
   11476:	f00f bf4a 	b.w	2130e <k_heap_init>
   1147a:	bf00      	nop
   1147c:	2000fb82 	.word	0x2000fb82
   11480:	2000ddd4 	.word	0x2000ddd4
   11484:	200084e8 	.word	0x200084e8
   11488:	2000dde8 	.word	0x2000dde8

0001148c <nrf_modem_os_shutdown>:

void nrf_modem_os_shutdown(void)
{
   1148c:	b510      	push	{r4, lr}
	return list->head;
   1148e:	4b04      	ldr	r3, [pc, #16]	; (114a0 <nrf_modem_os_shutdown+0x14>)
   11490:	681c      	ldr	r4, [r3, #0]
	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   11492:	b904      	cbnz	r4, 11496 <nrf_modem_os_shutdown+0xa>
		k_sem_give(&thread->sem);
	}
}
   11494:	bd10      	pop	{r4, pc}
   11496:	1d20      	adds	r0, r4, #4
   11498:	f009 f9dc 	bl	1a854 <z_impl_k_sem_give>
	return node->next;
   1149c:	6824      	ldr	r4, [r4, #0]
   1149e:	e7f8      	b.n	11492 <nrf_modem_os_shutdown+0x6>
   114a0:	2000dd7c 	.word	0x2000dd7c

000114a4 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   114a4:	2801      	cmp	r0, #1
   114a6:	d01e      	beq.n	114e6 <z_to_nrf_optname+0x42>
   114a8:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   114ac:	d123      	bne.n	114f6 <z_to_nrf_optname+0x52>
	case SOL_TLS:
		switch (z_in_optname) {
   114ae:	1e4b      	subs	r3, r1, #1
   114b0:	2b14      	cmp	r3, #20
   114b2:	d820      	bhi.n	114f6 <z_to_nrf_optname+0x52>
   114b4:	e8df f003 	tbb	[pc, r3]
   114b8:	0c0c0c0c 	.word	0x0c0c0c0c
   114bc:	1f1f0c0c 	.word	0x1f1f0c0c
   114c0:	0c1f1f1f 	.word	0x0c1f1f1f
   114c4:	1f1f0c0c 	.word	0x1f1f0c0c
   114c8:	13110f0b 	.word	0x13110f0b
   114cc:	15          	.byte	0x15
   114cd:	00          	.byte	0x00
		case TLS_CIPHERSUITE_USED:
			*nrf_out_optname = NRF_SO_SEC_CIPHERSUITE_USED;
			break;
		case TLS_DTLS_CID:
			*nrf_out_optname = NRF_SO_SEC_DTLS_CID;
			break;
   114ce:	210f      	movs	r1, #15
	int retval = 0;
   114d0:	2000      	movs	r0, #0
		switch (z_in_optname) {
		case SO_ERROR:
			*nrf_out_optname = NRF_SO_ERROR;
			break;
		case SO_RCVTIMEO:
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   114d2:	6011      	str	r1, [r2, #0]
   114d4:	4770      	bx	lr
			break;
   114d6:	2110      	movs	r1, #16
   114d8:	e7fa      	b.n	114d0 <z_to_nrf_optname+0x2c>
			break;
   114da:	2111      	movs	r1, #17
   114dc:	e7f8      	b.n	114d0 <z_to_nrf_optname+0x2c>
			break;
   114de:	2112      	movs	r1, #18
   114e0:	e7f6      	b.n	114d0 <z_to_nrf_optname+0x2c>
			break;
   114e2:	2113      	movs	r1, #19
   114e4:	e7f4      	b.n	114d0 <z_to_nrf_optname+0x2c>
		switch (z_in_optname) {
   114e6:	2937      	cmp	r1, #55	; 0x37
   114e8:	dc05      	bgt.n	114f6 <z_to_nrf_optname+0x52>
   114ea:	2913      	cmp	r1, #19
   114ec:	dc06      	bgt.n	114fc <z_to_nrf_optname+0x58>
   114ee:	2902      	cmp	r1, #2
   114f0:	d0ee      	beq.n	114d0 <z_to_nrf_optname+0x2c>
   114f2:	2904      	cmp	r1, #4
   114f4:	d0ec      	beq.n	114d0 <z_to_nrf_optname+0x2c>
   114f6:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   114fa:	4770      	bx	lr
   114fc:	f1a1 0314 	sub.w	r3, r1, #20
   11500:	2b23      	cmp	r3, #35	; 0x23
   11502:	d8f8      	bhi.n	114f6 <z_to_nrf_optname+0x52>
   11504:	a001      	add	r0, pc, #4	; (adr r0, 1150c <z_to_nrf_optname+0x68>)
   11506:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1150a:	bf00      	nop
   1150c:	000114d1 	.word	0x000114d1
   11510:	000114d1 	.word	0x000114d1
   11514:	000114f7 	.word	0x000114f7
   11518:	000114f7 	.word	0x000114f7
   1151c:	000114f7 	.word	0x000114f7
   11520:	000114d1 	.word	0x000114d1
   11524:	000114f7 	.word	0x000114f7
   11528:	000114f7 	.word	0x000114f7
   1152c:	000114f7 	.word	0x000114f7
   11530:	000114f7 	.word	0x000114f7
   11534:	000114d1 	.word	0x000114d1
   11538:	000114d1 	.word	0x000114d1
   1153c:	000114d1 	.word	0x000114d1
   11540:	000114f7 	.word	0x000114f7
   11544:	000114f7 	.word	0x000114f7
   11548:	000114f7 	.word	0x000114f7
   1154c:	000114f7 	.word	0x000114f7
   11550:	000114f7 	.word	0x000114f7
   11554:	000114f7 	.word	0x000114f7
   11558:	000114f7 	.word	0x000114f7
   1155c:	000114f7 	.word	0x000114f7
   11560:	000114f7 	.word	0x000114f7
   11564:	000114f7 	.word	0x000114f7
   11568:	000114f7 	.word	0x000114f7
   1156c:	000114f7 	.word	0x000114f7
   11570:	000114f7 	.word	0x000114f7
   11574:	000114f7 	.word	0x000114f7
   11578:	000114f7 	.word	0x000114f7
   1157c:	000114f7 	.word	0x000114f7
   11580:	000114f7 	.word	0x000114f7
   11584:	000114d1 	.word	0x000114d1
   11588:	000114d1 	.word	0x000114d1
   1158c:	000114d1 	.word	0x000114d1
   11590:	000114d1 	.word	0x000114d1
   11594:	000114d1 	.word	0x000114d1
   11598:	000114d1 	.word	0x000114d1

0001159c <nrf91_socket_offload_init>:
static int nrf91_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   1159c:	f04f 32ff 	mov.w	r2, #4294967295
   115a0:	4b06      	ldr	r3, [pc, #24]	; (115bc <nrf91_socket_offload_init+0x20>)
	}

	return 0;
}
   115a2:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   115a4:	601a      	str	r2, [r3, #0]
   115a6:	619a      	str	r2, [r3, #24]
   115a8:	631a      	str	r2, [r3, #48]	; 0x30
   115aa:	649a      	str	r2, [r3, #72]	; 0x48
   115ac:	661a      	str	r2, [r3, #96]	; 0x60
   115ae:	679a      	str	r2, [r3, #120]	; 0x78
   115b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   115b4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
   115b8:	4770      	bx	lr
   115ba:	bf00      	nop
   115bc:	2000de00 	.word	0x2000de00

000115c0 <nrf91_socket_is_supported>:
	if (offload_disabled) {
   115c0:	490b      	ldr	r1, [pc, #44]	; (115f0 <nrf91_socket_is_supported+0x30>)
{
   115c2:	4603      	mov	r3, r0
	if (offload_disabled) {
   115c4:	7808      	ldrb	r0, [r1, #0]
   115c6:	b980      	cbnz	r0, 115ea <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
   115c8:	490a      	ldr	r1, [pc, #40]	; (115f4 <nrf91_socket_is_supported+0x34>)
   115ca:	7809      	ldrb	r1, [r1, #0]
   115cc:	b139      	cbz	r1, 115de <nrf91_socket_is_supported+0x1e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   115ce:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
   115d2:	2902      	cmp	r1, #2
   115d4:	d90a      	bls.n	115ec <nrf91_socket_is_supported+0x2c>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   115d6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   115da:	2a01      	cmp	r2, #1
   115dc:	d906      	bls.n	115ec <nrf91_socket_is_supported+0x2c>
	return (family == AF_PACKET) || (family == AF_INET) || (family == AF_INET6);
   115de:	3b01      	subs	r3, #1
   115e0:	2b02      	cmp	r3, #2
   115e2:	bf8c      	ite	hi
   115e4:	2000      	movhi	r0, #0
   115e6:	2001      	movls	r0, #1
	return af_is_supported(family);
   115e8:	4770      	bx	lr
		return false;
   115ea:	2000      	movs	r0, #0
}
   115ec:	4770      	bx	lr
   115ee:	bf00      	nop
   115f0:	20010003 	.word	0x20010003
   115f4:	20010002 	.word	0x20010002

000115f8 <pollcb>:
{
   115f8:	b470      	push	{r4, r5, r6}
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   115fa:	2300      	movs	r3, #0
   115fc:	2518      	movs	r5, #24
	ctx = find_ctx(pollfd->fd);
   115fe:	6801      	ldr	r1, [r0, #0]
		if (offload_ctx[i].nrf_fd == fd) {
   11600:	4c08      	ldr	r4, [pc, #32]	; (11624 <pollcb+0x2c>)
   11602:	fb05 f203 	mul.w	r2, r5, r3
   11606:	58a6      	ldr	r6, [r4, r2]
   11608:	42b1      	cmp	r1, r6
   1160a:	d106      	bne.n	1161a <pollcb+0x22>
	k_poll_signal_raise(&ctx->poll, pollfd->revents);
   1160c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
   11610:	3208      	adds	r2, #8
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   11612:	18a0      	adds	r0, r4, r2
}
   11614:	bc70      	pop	{r4, r5, r6}
   11616:	f009 bf41 	b.w	1b49c <z_impl_k_poll_signal_raise>
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1161a:	3301      	adds	r3, #1
   1161c:	2b08      	cmp	r3, #8
   1161e:	d1f0      	bne.n	11602 <pollcb+0xa>
}
   11620:	bc70      	pop	{r4, r5, r6}
   11622:	4770      	bx	lr
   11624:	2000de00 	.word	0x2000de00

00011628 <nrf91_socket_offload_getaddrinfo>:
{
   11628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1162c:	4614      	mov	r4, r2
   1162e:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   11630:	2100      	movs	r1, #0
{
   11632:	b08b      	sub	sp, #44	; 0x2c
   11634:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   11636:	2220      	movs	r2, #32
   11638:	a802      	add	r0, sp, #8
{
   1163a:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1163c:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1163e:	f010 fb42 	bl	21cc6 <memset>
	if (hints != NULL) {
   11642:	b15c      	cbz	r4, 1165c <nrf91_socket_offload_getaddrinfo+0x34>
	nrf_out->ai_flags = z_in->ai_flags;
   11644:	6863      	ldr	r3, [r4, #4]
   11646:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_in->ai_socktype;
   11648:	68e3      	ldr	r3, [r4, #12]
   1164a:	9304      	str	r3, [sp, #16]
	nrf_out->ai_family = z_in->ai_family;
   1164c:	68a3      	ldr	r3, [r4, #8]
   1164e:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_in->ai_protocol;
   11650:	6923      	ldr	r3, [r4, #16]
   11652:	9305      	str	r3, [sp, #20]
	if (z_in->ai_canonname != NULL) {
   11654:	69e3      	ldr	r3, [r4, #28]
   11656:	b103      	cbz	r3, 1165a <nrf91_socket_offload_getaddrinfo+0x32>
		nrf_out->ai_canonname = z_in->ai_canonname;
   11658:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
   1165a:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   1165c:	f04f 32ff 	mov.w	r2, #4294967295
   11660:	f04f 33ff 	mov.w	r3, #4294967295
   11664:	4834      	ldr	r0, [pc, #208]	; (11738 <nrf91_socket_offload_getaddrinfo+0x110>)
   11666:	f00e f9a2 	bl	1f9ae <k_mutex_lock.constprop.0.isra.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1166a:	4631      	mov	r1, r6
   1166c:	4622      	mov	r2, r4
   1166e:	4628      	mov	r0, r5
   11670:	ab01      	add	r3, sp, #4
   11672:	f007 f8a5 	bl	187c0 <nrf_getaddrinfo>
	if (retval != 0) {
   11676:	4606      	mov	r6, r0
   11678:	b948      	cbnz	r0, 1168e <nrf91_socket_offload_getaddrinfo+0x66>
	struct zsock_addrinfo *latest_z_res = NULL;
   1167a:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   1167c:	4681      	mov	r9, r0
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1167e:	f04f 0a18 	mov.w	sl, #24
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   11682:	9d01      	ldr	r5, [sp, #4]
	*res = NULL;
   11684:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   11686:	b94d      	cbnz	r5, 1169c <nrf91_socket_offload_getaddrinfo+0x74>
	nrf_freeaddrinfo(nrf_res);
   11688:	9801      	ldr	r0, [sp, #4]
   1168a:	f00f f851 	bl	20730 <nrf_freeaddrinfo>
	k_mutex_unlock(&getaddrinfo_lock);
   1168e:	482a      	ldr	r0, [pc, #168]	; (11738 <nrf91_socket_offload_getaddrinfo+0x110>)
   11690:	f00e f98f 	bl	1f9b2 <k_mutex_unlock.isra.0>
}
   11694:	4630      	mov	r0, r6
   11696:	b00b      	add	sp, #44	; 0x2c
   11698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					k_malloc(sizeof(struct zsock_addrinfo));
   1169c:	2050      	movs	r0, #80	; 0x50
   1169e:	f010 fab3 	bl	21c08 <k_malloc>
		if (next_z_res == NULL) {
   116a2:	4604      	mov	r4, r0
   116a4:	2800      	cmp	r0, #0
   116a6:	d040      	beq.n	1172a <nrf91_socket_offload_getaddrinfo+0x102>
	z_out->ai_next = NULL;
   116a8:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   116ac:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_in->ai_flags;
   116b0:	682b      	ldr	r3, [r5, #0]
   116b2:	6043      	str	r3, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   116b4:	68ab      	ldr	r3, [r5, #8]
   116b6:	60c3      	str	r3, [r0, #12]
	z_out->ai_family = nrf_in->ai_family;
   116b8:	686b      	ldr	r3, [r5, #4]
   116ba:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_in->ai_protocol;
   116bc:	68eb      	ldr	r3, [r5, #12]
   116be:	6103      	str	r3, [r0, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   116c0:	f8d5 b004 	ldr.w	fp, [r5, #4]
   116c4:	f1bb 0f01 	cmp.w	fp, #1
   116c8:	d114      	bne.n	116f4 <nrf91_socket_offload_getaddrinfo+0xcc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   116ca:	2008      	movs	r0, #8
   116cc:	f010 fa9c 	bl	21c08 <k_malloc>
   116d0:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   116d2:	b338      	cbz	r0, 11724 <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   116d4:	2308      	movs	r3, #8
   116d6:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   116d8:	696b      	ldr	r3, [r5, #20]
	ptr->sin_port = nrf_in->sin_port;
   116da:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_family = AF_INET;
   116dc:	f8a0 b000 	strh.w	fp, [r0]
	ptr->sin_port = nrf_in->sin_port;
   116e0:	8042      	strh	r2, [r0, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   116e2:	68db      	ldr	r3, [r3, #12]
   116e4:	6043      	str	r3, [r0, #4]
		if (latest_z_res == NULL) {
   116e6:	f1b8 0f00 	cmp.w	r8, #0
   116ea:	d121      	bne.n	11730 <nrf91_socket_offload_getaddrinfo+0x108>
			*res = next_z_res;
   116ec:	603c      	str	r4, [r7, #0]
					k_malloc(sizeof(struct zsock_addrinfo));
   116ee:	46a0      	mov	r8, r4
		next_nrf_res = next_nrf_res->ai_next;
   116f0:	69ed      	ldr	r5, [r5, #28]
   116f2:	e7c8      	b.n	11686 <nrf91_socket_offload_getaddrinfo+0x5e>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   116f4:	f1bb 0f02 	cmp.w	fp, #2
   116f8:	d009      	beq.n	1170e <nrf91_socket_offload_getaddrinfo+0xe6>
			k_free(next_z_res);
   116fa:	f010 fa7e 	bl	21bfa <k_free>
			retval = DNS_EAI_FAMILY;
   116fe:	f06f 0605 	mvn.w	r6, #5
		nrf91_socket_offload_freeaddrinfo(*res);
   11702:	6838      	ldr	r0, [r7, #0]
   11704:	f00e f888 	bl	1f818 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   11708:	2300      	movs	r3, #0
   1170a:	603b      	str	r3, [r7, #0]
   1170c:	e7bc      	b.n	11688 <nrf91_socket_offload_getaddrinfo+0x60>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1170e:	2018      	movs	r0, #24
   11710:	f010 fa7a 	bl	21c08 <k_malloc>
   11714:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   11716:	b128      	cbz	r0, 11724 <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   11718:	f8c4 a014 	str.w	sl, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   1171c:	6969      	ldr	r1, [r5, #20]
   1171e:	f00e f888 	bl	1f832 <nrf_to_z_ipv6>
		if (err == -ENOMEM) {
   11722:	e7e0      	b.n	116e6 <nrf91_socket_offload_getaddrinfo+0xbe>
			k_free(next_z_res);
   11724:	4620      	mov	r0, r4
   11726:	f010 fa68 	bl	21bfa <k_free>
					k_malloc(sizeof(struct zsock_addrinfo));
   1172a:	f06f 0609 	mvn.w	r6, #9
   1172e:	e7e8      	b.n	11702 <nrf91_socket_offload_getaddrinfo+0xda>
			latest_z_res->ai_next = next_z_res;
   11730:	f8c8 4000 	str.w	r4, [r8]
   11734:	e7db      	b.n	116ee <nrf91_socket_offload_getaddrinfo+0xc6>
   11736:	bf00      	nop
   11738:	2000c9f4 	.word	0x2000c9f4

0001173c <nrf91_socket_offload_sendmsg>:
{
   1173c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   11740:	4607      	mov	r7, r0
   11742:	4690      	mov	r8, r2
	if (msg == NULL) {
   11744:	460c      	mov	r4, r1
   11746:	b379      	cbz	r1, 117a8 <nrf91_socket_offload_sendmsg+0x6c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   11748:	2300      	movs	r3, #0
	ssize_t len = 0;
   1174a:	461a      	mov	r2, r3
   1174c:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1174e:	4283      	cmp	r3, r0
   11750:	d134      	bne.n	117bc <nrf91_socket_offload_sendmsg+0x80>
	if (len <= sizeof(buf)) {
   11752:	2a80      	cmp	r2, #128	; 0x80
   11754:	d871      	bhi.n	1183a <nrf91_socket_offload_sendmsg+0xfe>
		for (i = 0; i < msg->msg_iovlen; i++) {
   11756:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   11758:	f04f 32ff 	mov.w	r2, #4294967295
   1175c:	f04f 33ff 	mov.w	r3, #4294967295
   11760:	4838      	ldr	r0, [pc, #224]	; (11844 <nrf91_socket_offload_sendmsg+0x108>)
   11762:	f00e f924 	bl	1f9ae <k_mutex_lock.constprop.0.isra.0>
		len = 0;
   11766:	46a9      	mov	r9, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   11768:	4e37      	ldr	r6, [pc, #220]	; (11848 <nrf91_socket_offload_sendmsg+0x10c>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   1176a:	68e3      	ldr	r3, [r4, #12]
   1176c:	429d      	cmp	r5, r3
   1176e:	d32c      	bcc.n	117ca <nrf91_socket_offload_sendmsg+0x8e>
		offset = 0;
   11770:	2600      	movs	r6, #0
		ret = 0;
   11772:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   11774:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 11848 <nrf91_socket_offload_sendmsg+0x10c>
		while ((offset < len) && (ret >= 0)) {
   11778:	45b1      	cmp	r9, r6
   1177a:	dd11      	ble.n	117a0 <nrf91_socket_offload_sendmsg+0x64>
   1177c:	b985      	cbnz	r5, 117a0 <nrf91_socket_offload_sendmsg+0x64>
			ret = nrf91_socket_offload_sendto(obj,
   1177e:	6863      	ldr	r3, [r4, #4]
   11780:	4638      	mov	r0, r7
   11782:	9301      	str	r3, [sp, #4]
   11784:	6823      	ldr	r3, [r4, #0]
   11786:	eba9 0206 	sub.w	r2, r9, r6
   1178a:	9300      	str	r3, [sp, #0]
   1178c:	eb0a 0106 	add.w	r1, sl, r6
   11790:	4643      	mov	r3, r8
   11792:	f00e f87b 	bl	1f88c <nrf91_socket_offload_sendto>
			if (ret > 0) {
   11796:	1e05      	subs	r5, r0, #0
   11798:	ddee      	ble.n	11778 <nrf91_socket_offload_sendmsg+0x3c>
				offset += ret;
   1179a:	442e      	add	r6, r5
		while ((offset < len) && (ret >= 0)) {
   1179c:	45b1      	cmp	r9, r6
   1179e:	dcee      	bgt.n	1177e <nrf91_socket_offload_sendmsg+0x42>
		k_mutex_unlock(&sendmsg_lock);
   117a0:	4828      	ldr	r0, [pc, #160]	; (11844 <nrf91_socket_offload_sendmsg+0x108>)
   117a2:	f00e f906 	bl	1f9b2 <k_mutex_unlock.isra.0>
		return ret;
   117a6:	e005      	b.n	117b4 <nrf91_socket_offload_sendmsg+0x78>
		errno = EINVAL;
   117a8:	f00d fa7a 	bl	1eca0 <__errno>
   117ac:	2316      	movs	r3, #22
		return -1;
   117ae:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   117b2:	6003      	str	r3, [r0, #0]
}
   117b4:	4628      	mov	r0, r5
   117b6:	b002      	add	sp, #8
   117b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   117bc:	68a1      	ldr	r1, [r4, #8]
   117be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   117c2:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   117c4:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   117c6:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   117c8:	e7c1      	b.n	1174e <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   117ca:	68a3      	ldr	r3, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   117cc:	eb06 0009 	add.w	r0, r6, r9
   117d0:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
   117d4:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   117d8:	6852      	ldr	r2, [r2, #4]
   117da:	f010 fa4d 	bl	21c78 <memcpy>
			len += msg->msg_iov[i].iov_len;
   117de:	68a3      	ldr	r3, [r4, #8]
   117e0:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   117e4:	4453      	add	r3, sl
   117e6:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   117e8:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   117ea:	4499      	add	r9, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   117ec:	e7bd      	b.n	1176a <nrf91_socket_offload_sendmsg+0x2e>
		if (msg->msg_iov[i].iov_len == 0) {
   117ee:	68a3      	ldr	r3, [r4, #8]
   117f0:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   117f4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   117f8:	685b      	ldr	r3, [r3, #4]
   117fa:	b13b      	cbz	r3, 1180c <nrf91_socket_offload_sendmsg+0xd0>
		offset = 0;
   117fc:	f04f 0900 	mov.w	r9, #0
		while (offset < msg->msg_iov[i].iov_len) {
   11800:	68a3      	ldr	r3, [r4, #8]
   11802:	eb03 020a 	add.w	r2, r3, sl
   11806:	6852      	ldr	r2, [r2, #4]
   11808:	4591      	cmp	r9, r2
   1180a:	d304      	bcc.n	11816 <nrf91_socket_offload_sendmsg+0xda>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1180c:	3601      	adds	r6, #1
   1180e:	68e3      	ldr	r3, [r4, #12]
   11810:	429e      	cmp	r6, r3
   11812:	d3ec      	bcc.n	117ee <nrf91_socket_offload_sendmsg+0xb2>
   11814:	e7ce      	b.n	117b4 <nrf91_socket_offload_sendmsg+0x78>
			ret = nrf91_socket_offload_sendto(obj,
   11816:	f853 100a 	ldr.w	r1, [r3, sl]
   1181a:	6863      	ldr	r3, [r4, #4]
   1181c:	4449      	add	r1, r9
   1181e:	9301      	str	r3, [sp, #4]
   11820:	6823      	ldr	r3, [r4, #0]
   11822:	4638      	mov	r0, r7
   11824:	9300      	str	r3, [sp, #0]
   11826:	eba2 0209 	sub.w	r2, r2, r9
   1182a:	4643      	mov	r3, r8
   1182c:	f00e f82e 	bl	1f88c <nrf91_socket_offload_sendto>
			if (ret < 0) {
   11830:	1e01      	subs	r1, r0, #0
   11832:	db05      	blt.n	11840 <nrf91_socket_offload_sendmsg+0x104>
			offset += ret;
   11834:	4489      	add	r9, r1
			len += ret;
   11836:	440d      	add	r5, r1
   11838:	e7e2      	b.n	11800 <nrf91_socket_offload_sendmsg+0xc4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1183a:	2600      	movs	r6, #0
	len = 0;
   1183c:	4635      	mov	r5, r6
   1183e:	e7e6      	b.n	1180e <nrf91_socket_offload_sendmsg+0xd2>
			ret = nrf91_socket_offload_sendto(obj,
   11840:	460d      	mov	r5, r1
   11842:	e7b7      	b.n	117b4 <nrf91_socket_offload_sendmsg+0x78>
   11844:	2000ca44 	.word	0x2000ca44
   11848:	2000ff82 	.word	0x2000ff82

0001184c <allocate_ctx>:
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1184c:	f04f 32ff 	mov.w	r2, #4294967295
   11850:	f04f 33ff 	mov.w	r3, #4294967295
{
   11854:	b570      	push	{r4, r5, r6, lr}
   11856:	4605      	mov	r5, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   11858:	480b      	ldr	r0, [pc, #44]	; (11888 <allocate_ctx+0x3c>)
   1185a:	f00e f8a8 	bl	1f9ae <k_mutex_lock.constprop.0.isra.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1185e:	2300      	movs	r3, #0
   11860:	2018      	movs	r0, #24
		if (offload_ctx[i].nrf_fd == -1) {
   11862:	4a0a      	ldr	r2, [pc, #40]	; (1188c <allocate_ctx+0x40>)
   11864:	fb00 f103 	mul.w	r1, r0, r3
   11868:	5856      	ldr	r6, [r2, r1]
   1186a:	188c      	adds	r4, r1, r2
   1186c:	3601      	adds	r6, #1
   1186e:	d105      	bne.n	1187c <allocate_ctx+0x30>
			ctx->nrf_fd = nrf_fd;
   11870:	5055      	str	r5, [r2, r1]
	k_mutex_unlock(&ctx_lock);
   11872:	4805      	ldr	r0, [pc, #20]	; (11888 <allocate_ctx+0x3c>)
   11874:	f00e f89d 	bl	1f9b2 <k_mutex_unlock.isra.0>
}
   11878:	4620      	mov	r0, r4
   1187a:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1187c:	3301      	adds	r3, #1
   1187e:	2b08      	cmp	r3, #8
   11880:	d1f0      	bne.n	11864 <allocate_ctx+0x18>
	struct nrf_sock_ctx *ctx = NULL;
   11882:	2400      	movs	r4, #0
   11884:	e7f5      	b.n	11872 <allocate_ctx+0x26>
   11886:	bf00      	nop
   11888:	2000c9cc 	.word	0x2000c9cc
   1188c:	2000de00 	.word	0x2000de00

00011890 <release_ctx>:
{
   11890:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   11892:	4d09      	ldr	r5, [pc, #36]	; (118b8 <release_ctx+0x28>)
{
   11894:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   11896:	f04f 32ff 	mov.w	r2, #4294967295
   1189a:	4628      	mov	r0, r5
   1189c:	f04f 33ff 	mov.w	r3, #4294967295
   118a0:	f00e f885 	bl	1f9ae <k_mutex_lock.constprop.0.isra.0>
	ctx->lock = NULL;
   118a4:	2300      	movs	r3, #0
   118a6:	f04f 32ff 	mov.w	r2, #4294967295
   118aa:	e9c4 2300 	strd	r2, r3, [r4]
	k_mutex_unlock(&ctx_lock);
   118ae:	4628      	mov	r0, r5
}
   118b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
   118b4:	f00e b87d 	b.w	1f9b2 <k_mutex_unlock.isra.0>
   118b8:	2000c9cc 	.word	0x2000c9cc

000118bc <nrf91_socket_offload_accept>:
{
   118bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   118c0:	b08b      	sub	sp, #44	; 0x2c
   118c2:	4607      	mov	r7, r0
   118c4:	460c      	mov	r4, r1
   118c6:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   118c8:	f7fa fff8 	bl	c8bc <z_reserve_fd>
   118cc:	4606      	mov	r6, r0
	if (fd < 0) {
   118ce:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   118d0:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   118d2:	db1e      	blt.n	11912 <nrf91_socket_offload_accept+0x56>
	if ((addr != NULL) && (addrlen != NULL)) {
   118d4:	b304      	cbz	r4, 11918 <nrf91_socket_offload_accept+0x5c>
   118d6:	b315      	cbz	r5, 1191e <nrf91_socket_offload_accept+0x62>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   118d8:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   118da:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   118dc:	2b08      	cmp	r3, #8
   118de:	bf14      	ite	ne
   118e0:	2324      	movne	r3, #36	; 0x24
   118e2:	2310      	moveq	r3, #16
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   118e4:	f10d 0904 	add.w	r9, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   118e8:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   118ea:	4649      	mov	r1, r9
   118ec:	f00f f8a0 	bl	20a30 <nrf_accept>
	if (new_sd < 0) {
   118f0:	f1b0 0800 	subs.w	r8, r0, #0
   118f4:	db0a      	blt.n	1190c <nrf91_socket_offload_accept+0x50>
	ctx = allocate_ctx(new_sd);
   118f6:	f7ff ffa9 	bl	1184c <allocate_ctx>
	if (ctx == NULL) {
   118fa:	4607      	mov	r7, r0
   118fc:	b990      	cbnz	r0, 11924 <nrf91_socket_offload_accept+0x68>
		errno = ENOMEM;
   118fe:	f00d f9cf 	bl	1eca0 <__errno>
   11902:	230c      	movs	r3, #12
   11904:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   11906:	4640      	mov	r0, r8
   11908:	f007 fa00 	bl	18d0c <nrf_close>
	z_free_fd(fd);
   1190c:	4630      	mov	r0, r6
   1190e:	f7fb f825 	bl	c95c <z_free_fd>
		return -1;
   11912:	f04f 36ff 	mov.w	r6, #4294967295
   11916:	e018      	b.n	1194a <nrf91_socket_offload_accept+0x8e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   11918:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1191a:	46a1      	mov	r9, r4
   1191c:	e7e5      	b.n	118ea <nrf91_socket_offload_accept+0x2e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1191e:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   11920:	46a9      	mov	r9, r5
   11922:	e7e2      	b.n	118ea <nrf91_socket_offload_accept+0x2e>
	if ((addr != NULL) && (addrlen != NULL)) {
   11924:	b164      	cbz	r4, 11940 <nrf91_socket_offload_accept+0x84>
   11926:	b15d      	cbz	r5, 11940 <nrf91_socket_offload_accept+0x84>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   11928:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1192c:	2b01      	cmp	r3, #1
   1192e:	d110      	bne.n	11952 <nrf91_socket_offload_accept+0x96>
			*addrlen = sizeof(struct sockaddr_in);
   11930:	2208      	movs	r2, #8
   11932:	602a      	str	r2, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   11934:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	ptr->sin_family = AF_INET;
   11938:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1193a:	9b04      	ldr	r3, [sp, #16]
	ptr->sin_port = nrf_in->sin_port;
   1193c:	8062      	strh	r2, [r4, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1193e:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   11940:	4639      	mov	r1, r7
   11942:	4630      	mov	r0, r6
   11944:	4a0d      	ldr	r2, [pc, #52]	; (1197c <nrf91_socket_offload_accept+0xc0>)
   11946:	f7fa ffef 	bl	c928 <z_finalize_fd>
}
   1194a:	4630      	mov	r0, r6
   1194c:	b00b      	add	sp, #44	; 0x2c
   1194e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   11952:	2b02      	cmp	r3, #2
   11954:	d106      	bne.n	11964 <nrf91_socket_offload_accept+0xa8>
			*addrlen = sizeof(struct sockaddr_in6);
   11956:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   11958:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   1195a:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   1195c:	a901      	add	r1, sp, #4
   1195e:	f00d ff68 	bl	1f832 <nrf_to_z_ipv6>
   11962:	e7ed      	b.n	11940 <nrf91_socket_offload_accept+0x84>
			errno = ENOTSUP;
   11964:	f00d f99c 	bl	1eca0 <__errno>
   11968:	2386      	movs	r3, #134	; 0x86
   1196a:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   1196c:	4640      	mov	r0, r8
   1196e:	f007 f9cd 	bl	18d0c <nrf_close>
		release_ctx(ctx);
   11972:	4638      	mov	r0, r7
   11974:	f7ff ff8c 	bl	11890 <release_ctx>
   11978:	e7c8      	b.n	1190c <nrf91_socket_offload_accept+0x50>
   1197a:	bf00      	nop
   1197c:	00023438 	.word	0x00023438

00011980 <nrf91_iface_api_init>:
static struct nrf91_iface_data {
	struct net_if *iface;
} nrf91_iface_data;

static void nrf91_iface_api_init(struct net_if *iface)
{
   11980:	b510      	push	{r4, lr}
   11982:	4604      	mov	r4, r0
	nrf91_iface_data.iface = iface;
   11984:	4b09      	ldr	r3, [pc, #36]	; (119ac <nrf91_iface_api_init+0x2c>)

	iface->if_dev->socket_offload = nrf91_socket_create;
   11986:	4a0a      	ldr	r2, [pc, #40]	; (119b0 <nrf91_iface_api_init+0x30>)
	nrf91_iface_data.iface = iface;
   11988:	6018      	str	r0, [r3, #0]
	iface->if_dev->socket_offload = nrf91_socket_create;
   1198a:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1198c:	4809      	ldr	r0, [pc, #36]	; (119b4 <nrf91_iface_api_init+0x34>)
	iface->if_dev->socket_offload = nrf91_socket_create;
   1198e:	61da      	str	r2, [r3, #28]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   11990:	f7fb ff48 	bl	d824 <socket_offload_dns_register>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11994:	6823      	ldr	r3, [r4, #0]
   11996:	330c      	adds	r3, #12
   11998:	e8d3 1fef 	ldaex	r1, [r3]
   1199c:	f041 0108 	orr.w	r1, r1, #8
   119a0:	e8c3 1fe2 	stlex	r2, r1, [r3]
   119a4:	2a00      	cmp	r2, #0
   119a6:	d1f7      	bne.n	11998 <nrf91_iface_api_init+0x18>

	if (!IS_ENABLED(CONFIG_NRF_MODEM_LIB_NET_IF_AUTO_START)) {
		net_if_flag_set(iface, NET_IF_NO_AUTO_START);
	}
}
   119a8:	bd10      	pop	{r4, pc}
   119aa:	bf00      	nop
   119ac:	2000ddfc 	.word	0x2000ddfc
   119b0:	00011ac5 	.word	0x00011ac5
   119b4:	00023430 	.word	0x00023430

000119b8 <nrf91_socket_offload_ioctl>:
{
   119b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (request) {
   119ba:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
	int sd = OBJ_TO_SD(obj);
   119be:	6804      	ldr	r4, [r0, #0]
{
   119c0:	b087      	sub	sp, #28
	switch (request) {
   119c2:	2b03      	cmp	r3, #3
   119c4:	d857      	bhi.n	11a76 <nrf91_socket_offload_ioctl+0xbe>
   119c6:	e8df f003 	tbb	[pc, r3]
   119ca:	4002      	.short	0x4002
   119cc:	5377      	.short	0x5377
	struct nrf_modem_pollcb pcb = {
   119ce:	2701      	movs	r7, #1
		pev_end = va_arg(args, struct k_poll_event *);
   119d0:	e9d2 6101 	ldrd	r6, r1, [r2, #4]
		return nrf91_poll_prepare(obj, pfd, pev, pev_end);
   119d4:	6813      	ldr	r3, [r2, #0]
	struct nrf_modem_pollcb pcb = {
   119d6:	4a3a      	ldr	r2, [pc, #232]	; (11ac0 <nrf91_socket_offload_ioctl+0x108>)
   119d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   119dc:	9204      	str	r2, [sp, #16]
   119de:	f8ad 3014 	strh.w	r3, [sp, #20]
   119e2:	f88d 7016 	strb.w	r7, [sp, #22]
	if (*pev == pev_end) {
   119e6:	6833      	ldr	r3, [r6, #0]
   119e8:	4299      	cmp	r1, r3
   119ea:	d104      	bne.n	119f6 <nrf91_socket_offload_ioctl+0x3e>
		errno = ENOMEM;
   119ec:	f00d f958 	bl	1eca0 <__errno>
   119f0:	230c      	movs	r3, #12
		errno = EINVAL;
   119f2:	6003      	str	r3, [r0, #0]
   119f4:	e014      	b.n	11a20 <nrf91_socket_offload_ioctl+0x68>
	k_poll_signal_init(&ctx->poll);
   119f6:	f100 0508 	add.w	r5, r0, #8
	z_impl_k_poll_signal_init(sig);
   119fa:	4628      	mov	r0, r5
   119fc:	f010 f8e0 	bl	21bc0 <z_impl_k_poll_signal_init>
	k_poll_event_init(*pev, K_POLL_TYPE_SIGNAL, K_POLL_MODE_NOTIFY_ONLY, &ctx->poll);
   11a00:	462b      	mov	r3, r5
   11a02:	2200      	movs	r2, #0
   11a04:	4639      	mov	r1, r7
   11a06:	6830      	ldr	r0, [r6, #0]
   11a08:	f010 f8bd 	bl	21b86 <k_poll_event_init>
	err = nrf_setsockopt(fd, NRF_SOL_SOCKET, NRF_SO_POLLCB, &pcb, sizeof(pcb));
   11a0c:	2308      	movs	r3, #8
   11a0e:	4620      	mov	r0, r4
   11a10:	9300      	str	r3, [sp, #0]
   11a12:	223c      	movs	r2, #60	; 0x3c
   11a14:	4639      	mov	r1, r7
   11a16:	ab04      	add	r3, sp, #16
   11a18:	f007 fab8 	bl	18f8c <nrf_setsockopt>
	if (err) {
   11a1c:	4604      	mov	r4, r0
   11a1e:	b110      	cbz	r0, 11a26 <nrf91_socket_offload_ioctl+0x6e>
		retval = -1;
   11a20:	f04f 34ff 	mov.w	r4, #4294967295
		return nrf91_socket_offload_fcntl(sd, request, args);
   11a24:	e00e      	b.n	11a44 <nrf91_socket_offload_ioctl+0x8c>
	(*pev)++;
   11a26:	6833      	ldr	r3, [r6, #0]
   11a28:	3314      	adds	r3, #20
   11a2a:	6033      	str	r3, [r6, #0]
	flags = 0;
   11a2c:	e9cd 0002 	strd	r0, r0, [sp, #8]
	z_impl_k_poll_signal_check(sig, signaled, result);
   11a30:	4628      	mov	r0, r5
   11a32:	aa02      	add	r2, sp, #8
   11a34:	a903      	add	r1, sp, #12
   11a36:	f010 f8c8 	bl	21bca <z_impl_k_poll_signal_check>
	if (!signaled) {
   11a3a:	9b03      	ldr	r3, [sp, #12]
	return -EALREADY;
   11a3c:	2b00      	cmp	r3, #0
   11a3e:	bf18      	it	ne
   11a40:	f06f 0477 	mvnne.w	r4, #119	; 0x77
}
   11a44:	4620      	mov	r0, r4
   11a46:	b007      	add	sp, #28
   11a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pev = va_arg(args, struct k_poll_event **);
   11a4a:	e9d2 4200 	ldrd	r4, r2, [r2]
	(*pev)++;
   11a4e:	6813      	ldr	r3, [r2, #0]
   11a50:	3314      	adds	r3, #20
   11a52:	6013      	str	r3, [r2, #0]
	signaled = 0;
   11a54:	2300      	movs	r3, #0
	flags = 0;
   11a56:	e9cd 3303 	strd	r3, r3, [sp, #12]
   11a5a:	aa03      	add	r2, sp, #12
   11a5c:	a904      	add	r1, sp, #16
   11a5e:	3008      	adds	r0, #8
   11a60:	f010 f8b3 	bl	21bca <z_impl_k_poll_signal_check>
	if (!signaled) {
   11a64:	9b04      	ldr	r3, [sp, #16]
   11a66:	b10b      	cbz	r3, 11a6c <nrf91_socket_offload_ioctl+0xb4>
	pfd->revents = flags;
   11a68:	9b03      	ldr	r3, [sp, #12]
   11a6a:	80e3      	strh	r3, [r4, #6]
		return nrf91_poll_update(obj, pfd, pev);
   11a6c:	2400      	movs	r4, #0
   11a6e:	e7e9      	b.n	11a44 <nrf91_socket_offload_ioctl+0x8c>
		ctx->lock = va_arg(args, struct k_mutex *);
   11a70:	6813      	ldr	r3, [r2, #0]
   11a72:	6043      	str	r3, [r0, #4]
		return 0;
   11a74:	e7fa      	b.n	11a6c <nrf91_socket_offload_ioctl+0xb4>
	switch (cmd) {
   11a76:	2903      	cmp	r1, #3
   11a78:	d012      	beq.n	11aa0 <nrf91_socket_offload_ioctl+0xe8>
   11a7a:	2904      	cmp	r1, #4
   11a7c:	d118      	bne.n	11ab0 <nrf91_socket_offload_ioctl+0xf8>
		flags = va_arg(args, int);
   11a7e:	6815      	ldr	r5, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK) {
   11a80:	f435 4380 	bics.w	r3, r5, #16384	; 0x4000
   11a84:	d003      	beq.n	11a8e <nrf91_socket_offload_ioctl+0xd6>
			errno = EINVAL;
   11a86:	f00d f90b 	bl	1eca0 <__errno>
   11a8a:	2316      	movs	r3, #22
   11a8c:	6003      	str	r3, [r0, #0]
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   11a8e:	2104      	movs	r1, #4
   11a90:	4620      	mov	r0, r4
   11a92:	f3c5 3280 	ubfx	r2, r5, #14, #1
}
   11a96:	b007      	add	sp, #28
   11a98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   11a9c:	f00f ba10 	b.w	20ec0 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   11aa0:	4620      	mov	r0, r4
   11aa2:	2200      	movs	r2, #0
   11aa4:	f00f fa0c 	bl	20ec0 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   11aa8:	0384      	lsls	r4, r0, #14
   11aaa:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
		break;
   11aae:	e7c9      	b.n	11a44 <nrf91_socket_offload_ioctl+0x8c>
		errno = EINVAL;
   11ab0:	f00d f8f6 	bl	1eca0 <__errno>
   11ab4:	2316      	movs	r3, #22
   11ab6:	e79c      	b.n	119f2 <nrf91_socket_offload_ioctl+0x3a>
	switch (request) {
   11ab8:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   11abc:	e7c2      	b.n	11a44 <nrf91_socket_offload_ioctl+0x8c>
   11abe:	bf00      	nop
   11ac0:	000115f9 	.word	0x000115f9

00011ac4 <nrf91_socket_create>:
{
   11ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (type & SOCK_NATIVE) {
   11ac8:	1e0d      	subs	r5, r1, #0
{
   11aca:	4607      	mov	r7, r0
   11acc:	4690      	mov	r8, r2
	if (type & SOCK_NATIVE) {
   11ace:	da12      	bge.n	11af6 <nrf91_socket_create+0x32>
	k_sched_lock();
   11ad0:	f009 f9e2 	bl	1ae98 <k_sched_lock>
	*offload_lock = true;
   11ad4:	4e1c      	ldr	r6, [pc, #112]	; (11b48 <nrf91_socket_create+0x84>)
   11ad6:	2301      	movs	r3, #1
   11ad8:	7033      	strb	r3, [r6, #0]
	return z_impl_zsock_socket(family, type, proto);
   11ada:	4642      	mov	r2, r8
   11adc:	4638      	mov	r0, r7
   11ade:	f025 4140 	bic.w	r1, r5, #3221225472	; 0xc0000000
   11ae2:	f7fb fe75 	bl	d7d0 <z_impl_zsock_socket>
	*offload_lock = false;
   11ae6:	2300      	movs	r3, #0
   11ae8:	7033      	strb	r3, [r6, #0]
   11aea:	4604      	mov	r4, r0
	k_sched_unlock();
   11aec:	f009 f9e8 	bl	1aec0 <k_sched_unlock>
}
   11af0:	4620      	mov	r0, r4
   11af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (type & SOCK_NATIVE_TLS) {
   11af6:	006b      	lsls	r3, r5, #1
   11af8:	d503      	bpl.n	11b02 <nrf91_socket_create+0x3e>
	k_sched_lock();
   11afa:	f009 f9cd 	bl	1ae98 <k_sched_lock>
	*offload_lock = true;
   11afe:	4e13      	ldr	r6, [pc, #76]	; (11b4c <nrf91_socket_create+0x88>)
   11b00:	e7e9      	b.n	11ad6 <nrf91_socket_create+0x12>
	fd = z_reserve_fd();
   11b02:	f7fa fedb 	bl	c8bc <z_reserve_fd>
	if (fd < 0) {
   11b06:	1e04      	subs	r4, r0, #0
   11b08:	db09      	blt.n	11b1e <nrf91_socket_create+0x5a>
	retval = nrf_socket(family, type, proto);
   11b0a:	4629      	mov	r1, r5
   11b0c:	4642      	mov	r2, r8
   11b0e:	4638      	mov	r0, r7
   11b10:	f00e fe21 	bl	20756 <nrf_socket>
	if (sd < 0) {
   11b14:	1e05      	subs	r5, r0, #0
   11b16:	da05      	bge.n	11b24 <nrf91_socket_create+0x60>
		z_free_fd(fd);
   11b18:	4620      	mov	r0, r4
   11b1a:	f7fa ff1f 	bl	c95c <z_free_fd>
		return -1;
   11b1e:	f04f 34ff 	mov.w	r4, #4294967295
   11b22:	e7e5      	b.n	11af0 <nrf91_socket_create+0x2c>
	ctx = allocate_ctx(sd);
   11b24:	f7ff fe92 	bl	1184c <allocate_ctx>
	if (ctx == NULL) {
   11b28:	4601      	mov	r1, r0
   11b2a:	b938      	cbnz	r0, 11b3c <nrf91_socket_create+0x78>
		errno = ENOMEM;
   11b2c:	f00d f8b8 	bl	1eca0 <__errno>
   11b30:	230c      	movs	r3, #12
   11b32:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   11b34:	4628      	mov	r0, r5
   11b36:	f007 f8e9 	bl	18d0c <nrf_close>
		z_free_fd(fd);
   11b3a:	e7ed      	b.n	11b18 <nrf91_socket_create+0x54>
	z_finalize_fd(fd, ctx,
   11b3c:	4620      	mov	r0, r4
   11b3e:	4a04      	ldr	r2, [pc, #16]	; (11b50 <nrf91_socket_create+0x8c>)
   11b40:	f7fa fef2 	bl	c928 <z_finalize_fd>
	return fd;
   11b44:	e7d4      	b.n	11af0 <nrf91_socket_create+0x2c>
   11b46:	bf00      	nop
   11b48:	20010003 	.word	0x20010003
   11b4c:	20010002 	.word	0x20010002
   11b50:	00023438 	.word	0x00023438

00011b54 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   11b54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   11b56:	ab0b      	add	r3, sp, #44	; 0x2c
   11b58:	9305      	str	r3, [sp, #20]
   11b5a:	9303      	str	r3, [sp, #12]
   11b5c:	4b05      	ldr	r3, [pc, #20]	; (11b74 <z_log_msg_runtime_create.constprop.0+0x20>)
   11b5e:	2201      	movs	r2, #1
   11b60:	9302      	str	r3, [sp, #8]
   11b62:	2300      	movs	r3, #0
   11b64:	4618      	mov	r0, r3
   11b66:	e9cd 3300 	strd	r3, r3, [sp]
   11b6a:	f7fb fa37 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   11b6e:	b007      	add	sp, #28
   11b70:	f85d fb04 	ldr.w	pc, [sp], #4
   11b74:	00024faf 	.word	0x00024faf

00011b78 <nrf_modem_fault_handler>:
}
#endif /* CONFIG_NRF_MODEM_LIB_FAULT_STRERROR */

#ifndef CONFIG_NRF_MODEM_LIB_ON_FAULT_APPLICATION_SPECIFIC
void nrf_modem_fault_handler(struct nrf_modem_fault_info *fault)
{
   11b78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Modem has crashed, reason 0x%x %s, PC: 0x%x",
		fault->reason,
		nrf_modem_lib_fault_strerror(fault->reason),
		fault->program_counter);
#else
	LOG_ERR("Modem has crashed, reason 0x%x, PC: 0x%x",
   11b7a:	6843      	ldr	r3, [r0, #4]
   11b7c:	2201      	movs	r2, #1
   11b7e:	9304      	str	r3, [sp, #16]
   11b80:	6803      	ldr	r3, [r0, #0]
   11b82:	4906      	ldr	r1, [pc, #24]	; (11b9c <nrf_modem_fault_handler+0x24>)
   11b84:	9303      	str	r3, [sp, #12]
   11b86:	4b06      	ldr	r3, [pc, #24]	; (11ba0 <nrf_modem_fault_handler+0x28>)
   11b88:	9302      	str	r3, [sp, #8]
   11b8a:	2300      	movs	r3, #0
   11b8c:	4618      	mov	r0, r3
   11b8e:	e9cd 3300 	strd	r3, r3, [sp]
   11b92:	f7ff ffdf 	bl	11b54 <z_log_msg_runtime_create.constprop.0>
		fault->reason, fault->program_counter);
#endif
#if CONFIG_NRF_MODEM_LIB_ON_FAULT_RESET_MODEM
	k_sem_give(&fault_sem);
#endif
}
   11b96:	b007      	add	sp, #28
   11b98:	f85d fb04 	ldr.w	pc, [sp], #4
   11b9c:	00023034 	.word	0x00023034
   11ba0:	00024faf 	.word	0x00024faf

00011ba4 <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(void)
{
   11ba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   11ba6:	4809      	ldr	r0, [pc, #36]	; (11bcc <at_monitor_sys_init+0x28>)
   11ba8:	f006 fba2 	bl	182f0 <nrf_modem_at_notif_handler_set>
	if (err) {
   11bac:	b150      	cbz	r0, 11bc4 <at_monitor_sys_init+0x20>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   11bae:	4b08      	ldr	r3, [pc, #32]	; (11bd0 <at_monitor_sys_init+0x2c>)
   11bb0:	9003      	str	r0, [sp, #12]
   11bb2:	9302      	str	r3, [sp, #8]
   11bb4:	2300      	movs	r3, #0
   11bb6:	2201      	movs	r2, #1
   11bb8:	4618      	mov	r0, r3
   11bba:	e9cd 3300 	strd	r3, r3, [sp]
   11bbe:	4905      	ldr	r1, [pc, #20]	; (11bd4 <at_monitor_sys_init+0x30>)
   11bc0:	f00d ff63 	bl	1fa8a <z_log_msg_runtime_create.constprop.0>
	}

	return 0;
}
   11bc4:	2000      	movs	r0, #0
   11bc6:	b005      	add	sp, #20
   11bc8:	f85d fb04 	ldr.w	pc, [sp], #4
   11bcc:	00011bd9 	.word	0x00011bd9
   11bd0:	00024fd8 	.word	0x00024fd8
   11bd4:	00022f2c 	.word	0x00022f2c

00011bd8 <at_monitor_dispatch>:
{
   11bd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   11bdc:	4605      	mov	r5, r0
	monitored = false;
   11bde:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   11be0:	4c1e      	ldr	r4, [pc, #120]	; (11c5c <at_monitor_dispatch+0x84>)
   11be2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 11c74 <at_monitor_dispatch+0x9c>
   11be6:	4544      	cmp	r4, r8
   11be8:	d318      	bcc.n	11c1c <at_monitor_dispatch+0x44>
	if (!monitored) {
   11bea:	b1a6      	cbz	r6, 11c16 <at_monitor_dispatch+0x3e>
	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   11bec:	4628      	mov	r0, r5
   11bee:	f7f7 f9a6 	bl	8f3e <strlen>
	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   11bf2:	2200      	movs	r2, #0
   11bf4:	1d41      	adds	r1, r0, #5
   11bf6:	2300      	movs	r3, #0
   11bf8:	4819      	ldr	r0, [pc, #100]	; (11c60 <at_monitor_dispatch+0x88>)
   11bfa:	f00f fbde 	bl	213ba <k_heap_alloc>
   11bfe:	4604      	mov	r4, r0
	if (!at_notif) {
   11c00:	b9f0      	cbnz	r0, 11c40 <at_monitor_dispatch+0x68>
		LOG_WRN("No heap space for incoming notification: %s",
   11c02:	4b18      	ldr	r3, [pc, #96]	; (11c64 <at_monitor_dispatch+0x8c>)
   11c04:	2202      	movs	r2, #2
   11c06:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11c0a:	4917      	ldr	r1, [pc, #92]	; (11c68 <at_monitor_dispatch+0x90>)
   11c0c:	4603      	mov	r3, r0
   11c0e:	9503      	str	r5, [sp, #12]
   11c10:	9000      	str	r0, [sp, #0]
   11c12:	f00d ff3a 	bl	1fa8a <z_log_msg_runtime_create.constprop.0>
}
   11c16:	b004      	add	sp, #16
   11c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return mon->flags.paused;
   11c1c:	7a27      	ldrb	r7, [r4, #8]
		if (!is_paused(e) && has_match(e, notif)) {
   11c1e:	07fa      	lsls	r2, r7, #31
   11c20:	d40a      	bmi.n	11c38 <at_monitor_dispatch+0x60>
   11c22:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   11c24:	b119      	cbz	r1, 11c2e <at_monitor_dispatch+0x56>
   11c26:	4628      	mov	r0, r5
   11c28:	f010 fa07 	bl	2203a <strstr>
   11c2c:	b120      	cbz	r0, 11c38 <at_monitor_dispatch+0x60>
			if (is_direct(e)) {
   11c2e:	07bb      	lsls	r3, r7, #30
   11c30:	d504      	bpl.n	11c3c <at_monitor_dispatch+0x64>
				e->handler(notif);
   11c32:	4628      	mov	r0, r5
   11c34:	6863      	ldr	r3, [r4, #4]
   11c36:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   11c38:	340c      	adds	r4, #12
   11c3a:	e7d4      	b.n	11be6 <at_monitor_dispatch+0xe>
				monitored = true;
   11c3c:	2601      	movs	r6, #1
   11c3e:	e7fb      	b.n	11c38 <at_monitor_dispatch+0x60>
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   11c40:	4629      	mov	r1, r5
   11c42:	3004      	adds	r0, #4
   11c44:	f010 f9ac 	bl	21fa0 <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   11c48:	4621      	mov	r1, r4
   11c4a:	4808      	ldr	r0, [pc, #32]	; (11c6c <at_monitor_dispatch+0x94>)
   11c4c:	f00f fc87 	bl	2155e <k_queue_append>
	k_work_submit(&at_monitor_work);
   11c50:	4807      	ldr	r0, [pc, #28]	; (11c70 <at_monitor_dispatch+0x98>)
}
   11c52:	b004      	add	sp, #16
   11c54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_submit(&at_monitor_work);
   11c58:	f008 bea4 	b.w	1a9a4 <k_work_submit>
   11c5c:	2000c8e0 	.word	0x2000c8e0
   11c60:	2000c97c 	.word	0x2000c97c
   11c64:	00025005 	.word	0x00025005
   11c68:	00022f2c 	.word	0x00022f2c
   11c6c:	2000cb14 	.word	0x2000cb14
   11c70:	2000c628 	.word	0x2000c628
   11c74:	2000c958 	.word	0x2000c958

00011c78 <at_monitor_task>:
{
   11c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
   11c7c:	4e13      	ldr	r6, [pc, #76]	; (11ccc <at_monitor_task+0x54>)
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   11c7e:	4f14      	ldr	r7, [pc, #80]	; (11cd0 <at_monitor_task+0x58>)
		k_heap_free(&at_monitor_heap, at_notif);
   11c80:	f8df 8054 	ldr.w	r8, [pc, #84]	; 11cd8 <at_monitor_task+0x60>
   11c84:	2200      	movs	r2, #0
   11c86:	2300      	movs	r3, #0
   11c88:	4630      	mov	r0, r6
   11c8a:	f008 fdaf 	bl	1a7ec <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   11c8e:	4605      	mov	r5, r0
   11c90:	b9b8      	cbnz	r0, 11cc2 <at_monitor_task+0x4a>
}
   11c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return mon->flags.paused;
   11c96:	7a23      	ldrb	r3, [r4, #8]
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   11c98:	07da      	lsls	r2, r3, #31
   11c9a:	d40a      	bmi.n	11cb2 <at_monitor_task+0x3a>
   11c9c:	079b      	lsls	r3, r3, #30
   11c9e:	d408      	bmi.n	11cb2 <at_monitor_task+0x3a>
   11ca0:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   11ca2:	b119      	cbz	r1, 11cac <at_monitor_task+0x34>
   11ca4:	4648      	mov	r0, r9
   11ca6:	f010 f9c8 	bl	2203a <strstr>
   11caa:	b110      	cbz	r0, 11cb2 <at_monitor_task+0x3a>
				e->handler(at_notif->data);
   11cac:	4648      	mov	r0, r9
   11cae:	6863      	ldr	r3, [r4, #4]
   11cb0:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   11cb2:	340c      	adds	r4, #12
   11cb4:	42bc      	cmp	r4, r7
   11cb6:	d3ee      	bcc.n	11c96 <at_monitor_task+0x1e>
		k_heap_free(&at_monitor_heap, at_notif);
   11cb8:	4629      	mov	r1, r5
   11cba:	4640      	mov	r0, r8
   11cbc:	f00f fb87 	bl	213ce <k_heap_free>
   11cc0:	e7e0      	b.n	11c84 <at_monitor_task+0xc>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   11cc2:	4c04      	ldr	r4, [pc, #16]	; (11cd4 <at_monitor_task+0x5c>)
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   11cc4:	f105 0904 	add.w	r9, r5, #4
   11cc8:	e7f4      	b.n	11cb4 <at_monitor_task+0x3c>
   11cca:	bf00      	nop
   11ccc:	2000cb14 	.word	0x2000cb14
   11cd0:	2000c958 	.word	0x2000c958
   11cd4:	2000c8e0 	.word	0x2000c8e0
   11cd8:	2000c97c 	.word	0x2000c97c

00011cdc <z_impl_uart_irq_rx_enable.constprop.0>:
__syscall void uart_irq_rx_enable(const struct device *dev);

static inline void z_impl_uart_irq_rx_enable(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   11cdc:	4802      	ldr	r0, [pc, #8]	; (11ce8 <z_impl_uart_irq_rx_enable.constprop.0+0xc>)
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_enable != NULL) {
   11cde:	6883      	ldr	r3, [r0, #8]
   11ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11ce2:	b103      	cbz	r3, 11ce6 <z_impl_uart_irq_rx_enable.constprop.0+0xa>
		api->irq_rx_enable(dev);
   11ce4:	4718      	bx	r3
	}
#else
	ARG_UNUSED(dev);
#endif
}
   11ce6:	4770      	bx	lr
   11ce8:	00022c78 	.word	0x00022c78

00011cec <write_uart_string>:
static char at_buf[AT_BUF_SIZE]; /* AT command and modem response buffer */
static struct k_work_q at_host_work_q;
static struct k_work cmd_send_work;

static inline void write_uart_string(const char *str)
{
   11cec:	b538      	push	{r3, r4, r5, lr}
	api->poll_out(dev, out_char);
   11cee:	4d05      	ldr	r5, [pc, #20]	; (11d04 <write_uart_string+0x18>)
   11cf0:	1e44      	subs	r4, r0, #1
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
   11cf2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   11cf6:	b901      	cbnz	r1, 11cfa <write_uart_string+0xe>
		uart_poll_out(uart_dev, str[i]);
	}
}
   11cf8:	bd38      	pop	{r3, r4, r5, pc}
   11cfa:	68ab      	ldr	r3, [r5, #8]
   11cfc:	4801      	ldr	r0, [pc, #4]	; (11d04 <write_uart_string+0x18>)
   11cfe:	685b      	ldr	r3, [r3, #4]
   11d00:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   11d02:	e7f6      	b.n	11cf2 <write_uart_string+0x6>
   11d04:	00022c78 	.word	0x00022c78

00011d08 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   11d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(work);

    /* Sending through string format rather than raw buffer in case
     * the buffer contains characters that need to be escaped
     */
	err = nrf_modem_at_cmd(at_buf, sizeof(at_buf), "%s", at_buf);
   11d0a:	4b0f      	ldr	r3, [pc, #60]	; (11d48 <cmd_send+0x40>)
   11d0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   11d10:	4618      	mov	r0, r3
   11d12:	4a0e      	ldr	r2, [pc, #56]	; (11d4c <cmd_send+0x44>)
   11d14:	f006 fb3e 	bl	18394 <nrf_modem_at_cmd>
	if (err < 0) {
   11d18:	2800      	cmp	r0, #0
   11d1a:	da0a      	bge.n	11d32 <cmd_send+0x2a>
		LOG_ERR("Error while processing AT command: %d", err);
   11d1c:	4b0c      	ldr	r3, [pc, #48]	; (11d50 <cmd_send+0x48>)
   11d1e:	9003      	str	r0, [sp, #12]
   11d20:	9302      	str	r3, [sp, #8]
   11d22:	2300      	movs	r3, #0
   11d24:	2201      	movs	r2, #1
   11d26:	4618      	mov	r0, r3
   11d28:	e9cd 3300 	strd	r3, r3, [sp]
   11d2c:	4909      	ldr	r1, [pc, #36]	; (11d54 <cmd_send+0x4c>)
   11d2e:	f00d febd 	bl	1faac <z_log_msg_runtime_create.constprop.0>
	}

	write_uart_string(at_buf);
   11d32:	4805      	ldr	r0, [pc, #20]	; (11d48 <cmd_send+0x40>)
   11d34:	f7ff ffda 	bl	11cec <write_uart_string>

	at_buf_busy = false;
   11d38:	2200      	movs	r2, #0
   11d3a:	4b07      	ldr	r3, [pc, #28]	; (11d58 <cmd_send+0x50>)
   11d3c:	701a      	strb	r2, [r3, #0]
	uart_irq_rx_enable(uart_dev);
}
   11d3e:	b005      	add	sp, #20
   11d40:	f85d eb04 	ldr.w	lr, [sp], #4
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   11d44:	f7ff bfca 	b.w	11cdc <z_impl_uart_irq_rx_enable.constprop.0>
   11d48:	20010005 	.word	0x20010005
   11d4c:	000268a7 	.word	0x000268a7
   11d50:	0002503c 	.word	0x0002503c
   11d54:	00022f24 	.word	0x00022f24
   11d58:	20011005 	.word	0x20011005

00011d5c <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   11d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d5e:	4604      	mov	r4, r0
   11d60:	b087      	sub	sp, #28
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
   11d62:	6883      	ldr	r3, [r0, #8]
   11d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11d66:	b103      	cbz	r3, 11d6a <isr+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
   11d68:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   11d6a:	68a3      	ldr	r3, [r4, #8]
   11d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   11d6e:	b9c3      	cbnz	r3, 11da2 <isr+0x46>

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!at_buf_busy) &&
   11d70:	4e50      	ldr	r6, [pc, #320]	; (11eb4 <isr+0x158>)
		if (at_cmd_len > 0) {
   11d72:	4d51      	ldr	r5, [pc, #324]	; (11eb8 <isr+0x15c>)
	while ((!at_buf_busy) &&
   11d74:	7833      	ldrb	r3, [r6, #0]
   11d76:	b9c3      	cbnz	r3, 11daa <isr+0x4e>
	if (api->fifo_read == NULL) {
   11d78:	68a3      	ldr	r3, [r4, #8]
   11d7a:	699b      	ldr	r3, [r3, #24]
   11d7c:	b12b      	cbz	r3, 11d8a <isr+0x2e>
	return api->fifo_read(dev, rx_data, size);
   11d7e:	2201      	movs	r2, #1
   11d80:	4620      	mov	r0, r4
   11d82:	f10d 0117 	add.w	r1, sp, #23
   11d86:	4798      	blx	r3
   11d88:	b178      	cbz	r0, 11daa <isr+0x4e>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
   11d8a:	f89d 3017 	ldrb.w	r3, [sp, #23]
	switch (character) {
   11d8e:	2b08      	cmp	r3, #8
   11d90:	d001      	beq.n	11d96 <isr+0x3a>
   11d92:	2b7f      	cmp	r3, #127	; 0x7f
   11d94:	d10b      	bne.n	11dae <isr+0x52>
		if (at_cmd_len > 0) {
   11d96:	682b      	ldr	r3, [r5, #0]
   11d98:	2b00      	cmp	r3, #0
   11d9a:	d0eb      	beq.n	11d74 <isr+0x18>
			at_cmd_len--;
   11d9c:	3b01      	subs	r3, #1
   11d9e:	602b      	str	r3, [r5, #0]
   11da0:	e7e8      	b.n	11d74 <isr+0x18>
	return api->irq_rx_ready(dev);
   11da2:	4620      	mov	r0, r4
   11da4:	4798      	blx	r3
	if (!uart_irq_rx_ready(dev)) {
   11da6:	2800      	cmp	r0, #0
   11da8:	d1e2      	bne.n	11d70 <isr+0x14>
	}
}
   11daa:	b007      	add	sp, #28
   11dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!inside_quotes) {
   11dae:	4843      	ldr	r0, [pc, #268]	; (11ebc <isr+0x160>)
   11db0:	7802      	ldrb	r2, [r0, #0]
   11db2:	2a00      	cmp	r2, #0
   11db4:	d151      	bne.n	11e5a <isr+0xfe>
		switch (character) {
   11db6:	2b0a      	cmp	r3, #10
   11db8:	d023      	beq.n	11e02 <isr+0xa6>
   11dba:	2b0d      	cmp	r3, #13
   11dbc:	d00e      	beq.n	11ddc <isr+0x80>
   11dbe:	2b00      	cmp	r3, #0
   11dc0:	d14b      	bne.n	11e5a <isr+0xfe>
			if (term_mode == MODE_NULL_TERM) {
   11dc2:	4a3f      	ldr	r2, [pc, #252]	; (11ec0 <isr+0x164>)
   11dc4:	7812      	ldrb	r2, [r2, #0]
   11dc6:	b16a      	cbz	r2, 11de4 <isr+0x88>
			LOG_WRN("Ignored null; would terminate string early.");
   11dc8:	4a3e      	ldr	r2, [pc, #248]	; (11ec4 <isr+0x168>)
   11dca:	4618      	mov	r0, r3
   11dcc:	e9cd 3201 	strd	r3, r2, [sp, #4]
   11dd0:	493d      	ldr	r1, [pc, #244]	; (11ec8 <isr+0x16c>)
   11dd2:	2202      	movs	r2, #2
   11dd4:	9300      	str	r3, [sp, #0]
   11dd6:	f00d fe69 	bl	1faac <z_log_msg_runtime_create.constprop.0>
			return;
   11dda:	e7cb      	b.n	11d74 <isr+0x18>
			if (term_mode == MODE_CR) {
   11ddc:	4a38      	ldr	r2, [pc, #224]	; (11ec0 <isr+0x164>)
   11dde:	7812      	ldrb	r2, [r2, #0]
   11de0:	2a01      	cmp	r2, #1
   11de2:	d130      	bne.n	11e46 <isr+0xea>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   11de4:	2200      	movs	r2, #0
   11de6:	4934      	ldr	r1, [pc, #208]	; (11eb8 <isr+0x15c>)
   11de8:	4b38      	ldr	r3, [pc, #224]	; (11ecc <isr+0x170>)
   11dea:	680f      	ldr	r7, [r1, #0]
	at_cmd_len = 0;
   11dec:	600a      	str	r2, [r1, #0]
   11dee:	4619      	mov	r1, r3
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   11df0:	55da      	strb	r2, [r3, r7]
	inside_quotes = false;
   11df2:	7002      	strb	r2, [r0, #0]
		if (*c > ' ') {
   11df4:	f813 2b01 	ldrb.w	r2, [r3], #1
   11df8:	2a20      	cmp	r2, #32
   11dfa:	d84b      	bhi.n	11e94 <isr+0x138>
		} else if (*c == '\0') {
   11dfc:	2a00      	cmp	r2, #0
   11dfe:	d1f9      	bne.n	11df4 <isr+0x98>
   11e00:	e7b8      	b.n	11d74 <isr+0x18>
			if (term_mode == MODE_LF) {
   11e02:	4a2f      	ldr	r2, [pc, #188]	; (11ec0 <isr+0x164>)
   11e04:	7817      	ldrb	r7, [r2, #0]
   11e06:	2f02      	cmp	r7, #2
   11e08:	d0ec      	beq.n	11de4 <isr+0x88>
		if (at_cmd_len > 0) {
   11e0a:	492b      	ldr	r1, [pc, #172]	; (11eb8 <isr+0x15c>)
			if (term_mode == MODE_CR_LF &&
   11e0c:	2f03      	cmp	r7, #3
		if (at_cmd_len > 0) {
   11e0e:	680a      	ldr	r2, [r1, #0]
			if (term_mode == MODE_CR_LF &&
   11e10:	d113      	bne.n	11e3a <isr+0xde>
   11e12:	4f2e      	ldr	r7, [pc, #184]	; (11ecc <isr+0x170>)
   11e14:	b16a      	cbz	r2, 11e32 <isr+0xd6>
			    at_buf[at_cmd_len - 1] == '\r') {
   11e16:	eb07 0c02 	add.w	ip, r7, r2
			    at_cmd_len > 0 &&
   11e1a:	f81c cc01 	ldrb.w	ip, [ip, #-1]
   11e1e:	f1bc 0f0d 	cmp.w	ip, #13
   11e22:	d0df      	beq.n	11de4 <isr+0x88>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   11e24:	1c50      	adds	r0, r2, #1
   11e26:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   11e2a:	d21b      	bcs.n	11e64 <isr+0x108>
	at_buf[at_cmd_len] = character;
   11e2c:	54bb      	strb	r3, [r7, r2]
	at_cmd_len++;
   11e2e:	6008      	str	r0, [r1, #0]
	if (character == '"') {
   11e30:	e7a0      	b.n	11d74 <isr+0x18>
	at_buf[at_cmd_len] = character;
   11e32:	703b      	strb	r3, [r7, #0]
	at_cmd_len++;
   11e34:	2301      	movs	r3, #1
   11e36:	600b      	str	r3, [r1, #0]
	if (character == '"') {
   11e38:	e79c      	b.n	11d74 <isr+0x18>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   11e3a:	1c50      	adds	r0, r2, #1
   11e3c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   11e40:	d210      	bcs.n	11e64 <isr+0x108>
	at_buf[at_cmd_len] = character;
   11e42:	4f22      	ldr	r7, [pc, #136]	; (11ecc <isr+0x170>)
   11e44:	e7f2      	b.n	11e2c <isr+0xd0>
		if (at_cmd_len > 0) {
   11e46:	4a1c      	ldr	r2, [pc, #112]	; (11eb8 <isr+0x15c>)
   11e48:	6810      	ldr	r0, [r2, #0]
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   11e4a:	1c41      	adds	r1, r0, #1
   11e4c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   11e50:	d208      	bcs.n	11e64 <isr+0x108>
	at_buf[at_cmd_len] = character;
   11e52:	4f1e      	ldr	r7, [pc, #120]	; (11ecc <isr+0x170>)
	at_cmd_len++;
   11e54:	6011      	str	r1, [r2, #0]
	at_buf[at_cmd_len] = character;
   11e56:	543b      	strb	r3, [r7, r0]
	if (character == '"') {
   11e58:	e78c      	b.n	11d74 <isr+0x18>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   11e5a:	682f      	ldr	r7, [r5, #0]
   11e5c:	1c79      	adds	r1, r7, #1
   11e5e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   11e62:	d30b      	bcc.n	11e7c <isr+0x120>
	switch (character) {
   11e64:	9303      	str	r3, [sp, #12]
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   11e66:	4b1a      	ldr	r3, [pc, #104]	; (11ed0 <isr+0x174>)
   11e68:	2201      	movs	r2, #1
   11e6a:	9302      	str	r3, [sp, #8]
   11e6c:	2300      	movs	r3, #0
   11e6e:	4916      	ldr	r1, [pc, #88]	; (11ec8 <isr+0x16c>)
   11e70:	4618      	mov	r0, r3
   11e72:	e9cd 3300 	strd	r3, r3, [sp]
   11e76:	f00d fe19 	bl	1faac <z_log_msg_runtime_create.constprop.0>
		return;
   11e7a:	e77b      	b.n	11d74 <isr+0x18>
	at_buf[at_cmd_len] = character;
   11e7c:	f8df c04c 	ldr.w	ip, [pc, #76]	; 11ecc <isr+0x170>
	if (character == '"') {
   11e80:	2b22      	cmp	r3, #34	; 0x22
	at_buf[at_cmd_len] = character;
   11e82:	f80c 3007 	strb.w	r3, [ip, r7]
	at_cmd_len++;
   11e86:	6029      	str	r1, [r5, #0]
	if (character == '"') {
   11e88:	f47f af74 	bne.w	11d74 <isr+0x18>
	if (!inside_quotes) {
   11e8c:	f082 0201 	eor.w	r2, r2, #1
		inside_quotes = !inside_quotes;
   11e90:	7002      	strb	r2, [r0, #0]
   11e92:	e76f      	b.n	11d74 <isr+0x18>
	if (at_buf[0]) {
   11e94:	780b      	ldrb	r3, [r1, #0]
   11e96:	2b00      	cmp	r3, #0
   11e98:	f43f af6c 	beq.w	11d74 <isr+0x18>
	const struct uart_driver_api *api =
   11e9c:	480d      	ldr	r0, [pc, #52]	; (11ed4 <isr+0x178>)
	if (api->irq_rx_disable != NULL) {
   11e9e:	6883      	ldr	r3, [r0, #8]
   11ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   11ea2:	b103      	cbz	r3, 11ea6 <isr+0x14a>
		api->irq_rx_disable(dev);
   11ea4:	4798      	blx	r3
		at_buf_busy = true;
   11ea6:	2301      	movs	r3, #1
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   11ea8:	490b      	ldr	r1, [pc, #44]	; (11ed8 <isr+0x17c>)
   11eaa:	480c      	ldr	r0, [pc, #48]	; (11edc <isr+0x180>)
		at_buf_busy = true;
   11eac:	7033      	strb	r3, [r6, #0]
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   11eae:	f00f fbde 	bl	2166e <k_work_submit_to_queue>
   11eb2:	e75f      	b.n	11d74 <isr+0x18>
   11eb4:	20011005 	.word	0x20011005
   11eb8:	2000dec0 	.word	0x2000dec0
   11ebc:	20010004 	.word	0x20010004
   11ec0:	20011006 	.word	0x20011006
   11ec4:	00025062 	.word	0x00025062
   11ec8:	00022f24 	.word	0x00022f24
   11ecc:	20010005 	.word	0x20010005
   11ed0:	0002508e 	.word	0x0002508e
   11ed4:	00022c78 	.word	0x00022c78
   11ed8:	2000dec4 	.word	0x2000dec4
   11edc:	2000cd70 	.word	0x2000cd70

00011ee0 <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(void)
{
   11ee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	enum term_modes mode = CONFIG_AT_HOST_TERMINATION;


	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   11ee4:	2401      	movs	r4, #1
   11ee6:	4b45      	ldr	r3, [pc, #276]	; (11ffc <at_host_init+0x11c>)
{
   11ee8:	b087      	sub	sp, #28
		term_mode = mode;
   11eea:	701c      	strb	r4, [r3, #0]
   11eec:	4844      	ldr	r0, [pc, #272]	; (12000 <at_host_init+0x120>)
   11eee:	f00f f9ef 	bl	212d0 <z_device_is_ready>
   11ef2:	4603      	mov	r3, r0
	if (!device_is_ready(uart_dev)) {
   11ef4:	b9d0      	cbnz	r0, 11f2c <at_host_init+0x4c>
		LOG_ERR("UART device not ready");
   11ef6:	4a43      	ldr	r2, [pc, #268]	; (12004 <at_host_init+0x124>)
   11ef8:	4943      	ldr	r1, [pc, #268]	; (12008 <at_host_init+0x128>)
   11efa:	e9cd 0201 	strd	r0, r2, [sp, #4]
   11efe:	9000      	str	r0, [sp, #0]
   11f00:	4622      	mov	r2, r4
   11f02:	f00d fdd3 	bl	1faac <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   11f06:	f06f 0312 	mvn.w	r3, #18
	}

	/* Initialize the UART module */
	err = at_uart_init(uart_dev);
	if (err) {
		LOG_ERR("UART could not be initialized: %d", err);
   11f0a:	9303      	str	r3, [sp, #12]
   11f0c:	4b3f      	ldr	r3, [pc, #252]	; (1200c <at_host_init+0x12c>)
   11f0e:	2201      	movs	r2, #1
   11f10:	9302      	str	r3, [sp, #8]
   11f12:	2300      	movs	r3, #0
   11f14:	493c      	ldr	r1, [pc, #240]	; (12008 <at_host_init+0x128>)
   11f16:	4618      	mov	r0, r3
   11f18:	e9cd 3300 	strd	r3, r3, [sp]
   11f1c:	f00d fdc6 	bl	1faac <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   11f20:	f06f 090d 	mvn.w	r9, #13
			   K_THREAD_STACK_SIZEOF(at_host_stack_area),
			   CONFIG_AT_HOST_THREAD_PRIO, NULL);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   11f24:	4648      	mov	r0, r9
   11f26:	b007      	add	sp, #28
   11f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_uptime_ticks();
   11f2c:	f00f fcd2 	bl	218d4 <z_impl_k_uptime_ticks>
   11f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11f34:	fba0 0302 	umull	r0, r3, r0, r2
   11f38:	fb02 3301 	mla	r3, r2, r1, r3
	const struct uart_driver_api *api =
   11f3c:	4e30      	ldr	r6, [pc, #192]	; (12000 <at_host_init+0x120>)
   11f3e:	0bc0      	lsrs	r0, r0, #15
   11f40:	68b7      	ldr	r7, [r6, #8]
			LOG_INF("UART check failed: %d. "
   11f42:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 12028 <at_host_init+0x148>
   11f46:	ea40 4543 	orr.w	r5, r0, r3, lsl #17
	if (api->err_check == NULL) {
   11f4a:	68bb      	ldr	r3, [r7, #8]
   11f4c:	b1b3      	cbz	r3, 11f7c <at_host_init+0x9c>
	return api->err_check(dev);
   11f4e:	4630      	mov	r0, r6
   11f50:	4798      	blx	r3
		if (err) {
   11f52:	4681      	mov	r9, r0
   11f54:	b9a0      	cbnz	r0, 11f80 <at_host_init+0xa0>
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   11f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11f58:	2b00      	cmp	r3, #0
   11f5a:	d149      	bne.n	11ff0 <at_host_init+0x110>
	k_work_init(&cmd_send_work, cmd_send);
   11f5c:	492c      	ldr	r1, [pc, #176]	; (12010 <at_host_init+0x130>)
   11f5e:	482d      	ldr	r0, [pc, #180]	; (12014 <at_host_init+0x134>)
   11f60:	f00f fb58 	bl	21614 <k_work_init>
	k_work_queue_start(&at_host_work_q, at_host_stack_area,
   11f64:	2300      	movs	r3, #0
   11f66:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11f6a:	9300      	str	r3, [sp, #0]
   11f6c:	492a      	ldr	r1, [pc, #168]	; (12018 <at_host_init+0x138>)
   11f6e:	230a      	movs	r3, #10
   11f70:	482a      	ldr	r0, [pc, #168]	; (1201c <at_host_init+0x13c>)
   11f72:	f008 fd1d 	bl	1a9b0 <k_work_queue_start>
   11f76:	f7ff feb1 	bl	11cdc <z_impl_uart_irq_rx_enable.constprop.0>
}
   11f7a:	e7d3      	b.n	11f24 <at_host_init+0x44>
		return -ENOSYS;
   11f7c:	f06f 0957 	mvn.w	r9, #87	; 0x57
   11f80:	f00f fca8 	bl	218d4 <z_impl_k_uptime_ticks>
   11f84:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   11f88:	fba0 0204 	umull	r0, r2, r0, r4
   11f8c:	fb04 2201 	mla	r2, r4, r1, r2
   11f90:	0bc4      	lsrs	r4, r0, #15
   11f92:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			if (k_uptime_get_32() - start_time >
   11f96:	1b64      	subs	r4, r4, r5
   11f98:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   11f9c:	f04f 0300 	mov.w	r3, #0
				LOG_ERR("UART check failed: %d. "
   11fa0:	f8cd 900c 	str.w	r9, [sp, #12]
			if (k_uptime_get_32() - start_time >
   11fa4:	d90b      	bls.n	11fbe <at_host_init+0xde>
				LOG_ERR("UART check failed: %d. "
   11fa6:	4a1e      	ldr	r2, [pc, #120]	; (12020 <at_host_init+0x140>)
   11fa8:	4618      	mov	r0, r3
   11faa:	e9cd 3201 	strd	r3, r2, [sp, #4]
   11fae:	9300      	str	r3, [sp, #0]
   11fb0:	2201      	movs	r2, #1
   11fb2:	4915      	ldr	r1, [pc, #84]	; (12008 <at_host_init+0x128>)
   11fb4:	f00d fd7a 	bl	1faac <z_log_msg_runtime_create.constprop.0>
				return -EIO;
   11fb8:	f06f 0304 	mvn.w	r3, #4
   11fbc:	e7a5      	b.n	11f0a <at_host_init+0x2a>
			LOG_INF("UART check failed: %d. "
   11fbe:	2203      	movs	r2, #3
   11fc0:	4618      	mov	r0, r3
   11fc2:	e9cd 3801 	strd	r3, r8, [sp, #4]
   11fc6:	4910      	ldr	r1, [pc, #64]	; (12008 <at_host_init+0x128>)
   11fc8:	9300      	str	r3, [sp, #0]
   11fca:	f00d fd6f 	bl	1faac <z_log_msg_runtime_create.constprop.0>
	if (api->fifo_read == NULL) {
   11fce:	68b4      	ldr	r4, [r6, #8]
   11fd0:	69a3      	ldr	r3, [r4, #24]
   11fd2:	2b00      	cmp	r3, #0
   11fd4:	d0fc      	beq.n	11fd0 <at_host_init+0xf0>
	return api->fifo_read(dev, rx_data, size);
   11fd6:	2201      	movs	r2, #1
   11fd8:	4630      	mov	r0, r6
   11fda:	f10d 0117 	add.w	r1, sp, #23
   11fde:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   11fe0:	2800      	cmp	r0, #0
   11fe2:	d1f5      	bne.n	11fd0 <at_host_init+0xf0>
	return z_impl_k_sleep(timeout);
   11fe4:	2100      	movs	r1, #0
   11fe6:	f44f 70a4 	mov.w	r0, #328	; 0x148
   11fea:	f009 f80f 	bl	1b00c <z_impl_k_sleep>
	} while (err);
   11fee:	e7ac      	b.n	11f4a <at_host_init+0x6a>
		api->irq_callback_set(dev, cb, user_data);
   11ff0:	4602      	mov	r2, r0
   11ff2:	490c      	ldr	r1, [pc, #48]	; (12024 <at_host_init+0x144>)
   11ff4:	4802      	ldr	r0, [pc, #8]	; (12000 <at_host_init+0x120>)
   11ff6:	4798      	blx	r3
	if (err) {
   11ff8:	e7b0      	b.n	11f5c <at_host_init+0x7c>
   11ffa:	bf00      	nop
   11ffc:	20011006 	.word	0x20011006
   12000:	00022c78 	.word	0x00022c78
   12004:	000250ae 	.word	0x000250ae
   12008:	00022f24 	.word	0x00022f24
   1200c:	0002512f 	.word	0x0002512f
   12010:	00011d09 	.word	0x00011d09
   12014:	2000dec4 	.word	0x2000dec4
   12018:	20011ad8 	.word	0x20011ad8
   1201c:	2000cd70 	.word	0x2000cd70
   12020:	000250c4 	.word	0x000250c4
   12024:	00011d5d 	.word	0x00011d5d
   12028:	000250fa 	.word	0x000250fa

0001202c <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   1202c:	4b09      	ldr	r3, [pc, #36]	; (12054 <is_valid_notification_char+0x28>)
   1202e:	5c1b      	ldrb	r3, [r3, r0]
   12030:	f003 0303 	and.w	r3, r3, #3
   12034:	2b02      	cmp	r3, #2
   12036:	bf08      	it	eq
   12038:	3820      	subeq	r0, #32
   1203a:	b2c0      	uxtb	r0, r0

	if (((chr >= 'A') && (chr <= 'Z')) || (chr == '_')) {
   1203c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   12040:	2b19      	cmp	r3, #25
   12042:	d904      	bls.n	1204e <is_valid_notification_char+0x22>
   12044:	f1a0 035f 	sub.w	r3, r0, #95	; 0x5f
   12048:	4258      	negs	r0, r3
   1204a:	4158      	adcs	r0, r3
   1204c:	4770      	bx	lr
		return true;
   1204e:	2001      	movs	r0, #1
	}

	return false;
}
   12050:	4770      	bx	lr
   12052:	bf00      	nop
   12054:	00027ac8 	.word	0x00027ac8

00012058 <is_separator>:
 * @retval true  If character is ':' or ','
 * @retval false In all other cases
 */
static inline bool is_separator(char chr)
{
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12058:	f1a0 032c 	sub.w	r3, r0, #44	; 0x2c
   1205c:	b2db      	uxtb	r3, r3
   1205e:	2b11      	cmp	r3, #17
   12060:	bf9d      	ittte	ls
   12062:	4803      	ldrls	r0, [pc, #12]	; (12070 <is_separator+0x18>)
   12064:	40d8      	lsrls	r0, r3
   12066:	f000 0001 	andls.w	r0, r0, #1
{
   1206a:	2000      	movhi	r0, #0
	    (chr == AT_CMD_SEPARATOR)) {
		return true;
	}

	return false;
}
   1206c:	4770      	bx	lr
   1206e:	bf00      	nop
   12070:	00024001 	.word	0x00024001

00012074 <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
   12074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12076:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   12078:	2400      	movs	r4, #0
   1207a:	4e09      	ldr	r6, [pc, #36]	; (120a0 <is_result+0x2c>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   1207c:	f856 7b04 	ldr.w	r7, [r6], #4
   12080:	4638      	mov	r0, r7
   12082:	f7f6 ff5c 	bl	8f3e <strlen>
   12086:	4639      	mov	r1, r7
   12088:	4602      	mov	r2, r0
   1208a:	4628      	mov	r0, r5
   1208c:	f00f ff90 	bl	21fb0 <strncmp>
		if (!diff) {
   12090:	b120      	cbz	r0, 1209c <is_result+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   12092:	3401      	adds	r4, #1
   12094:	2c04      	cmp	r4, #4
   12096:	d1f1      	bne.n	1207c <is_result+0x8>
			return true;
		}
	}

	return false;
   12098:	2000      	movs	r0, #0
}
   1209a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
   1209c:	2001      	movs	r0, #1
   1209e:	e7fc      	b.n	1209a <is_result+0x26>
   120a0:	00023478 	.word	0x00023478

000120a4 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   120a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   120a8:	6804      	ldr	r4, [r0, #0]
{
   120aa:	b0a3      	sub	sp, #140	; 0x8c
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   120ac:	7823      	ldrb	r3, [r4, #0]
   120ae:	4680      	mov	r8, r0
   120b0:	460e      	mov	r6, r1
   120b2:	4615      	mov	r5, r2
	const char *tmpstr = *str;
   120b4:	9400      	str	r4, [sp, #0]
   120b6:	2b00      	cmp	r3, #0
   120b8:	f000 80cf 	beq.w	1225a <at_parse_process_element+0x1b6>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   120bc:	4b68      	ldr	r3, [pc, #416]	; (12260 <at_parse_process_element+0x1bc>)
   120be:	781b      	ldrb	r3, [r3, #0]
   120c0:	2b06      	cmp	r3, #6
   120c2:	d113      	bne.n	120ec <at_parse_process_element+0x48>
		const char *start_ptr = tmpstr++;

		while (is_valid_notification_char(*tmpstr)) {
   120c4:	2000      	movs	r0, #0
		const char *start_ptr = tmpstr++;
   120c6:	1c62      	adds	r2, r4, #1
   120c8:	9200      	str	r2, [sp, #0]
		while (is_valid_notification_char(*tmpstr)) {
   120ca:	4611      	mov	r1, r2
   120cc:	4607      	mov	r7, r0
   120ce:	f812 0b01 	ldrb.w	r0, [r2], #1
   120d2:	f7ff ffab 	bl	1202c <is_valid_notification_char>
   120d6:	2800      	cmp	r0, #0
   120d8:	d1f7      	bne.n	120ca <at_parse_process_element+0x26>
   120da:	b107      	cbz	r7, 120de <at_parse_process_element+0x3a>
   120dc:	9100      	str	r1, [sp, #0]
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   120de:	1b0b      	subs	r3, r1, r4

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   120e0:	4622      	mov	r2, r4
   120e2:	4631      	mov	r1, r6
   120e4:	4628      	mov	r0, r5
   120e6:	f00d fd8e 	bl	1fc06 <at_params_string_put>
   120ea:	e046      	b.n	1217a <at_parse_process_element+0xd6>
	} else if (state == COMMAND) {
   120ec:	3b01      	subs	r3, #1
   120ee:	2b08      	cmp	r3, #8
   120f0:	d843      	bhi.n	1217a <at_parse_process_element+0xd6>
   120f2:	e8df f003 	tbb	[pc, r3]
   120f6:	4964      	.short	0x4964
   120f8:	420da25a 	.word	0x420da25a
   120fc:	3f1c      	.short	0x3f1c
   120fe:	05          	.byte	0x05
   120ff:	00          	.byte	0x00
   12100:	4622      	mov	r2, r4
	if (state == NOTIFICATION) {
   12102:	2100      	movs	r1, #0
   12104:	4613      	mov	r3, r2
   12106:	f812 0b01 	ldrb.w	r0, [r2], #1
   1210a:	b160      	cbz	r0, 12126 <at_parse_process_element+0x82>
   1210c:	2101      	movs	r1, #1
   1210e:	e7f9      	b.n	12104 <at_parse_process_element+0x60>
   12110:	4622      	mov	r2, r4
   12112:	2100      	movs	r1, #0
		while (isxdigit((int)*tmpstr)) {
   12114:	4f53      	ldr	r7, [pc, #332]	; (12264 <at_parse_process_element+0x1c0>)
   12116:	4613      	mov	r3, r2
   12118:	f812 0b01 	ldrb.w	r0, [r2], #1
   1211c:	5c38      	ldrb	r0, [r7, r0]
   1211e:	f010 0f44 	tst.w	r0, #68	; 0x44
   12122:	f040 8098 	bne.w	12256 <at_parse_process_element+0x1b2>
   12126:	b101      	cbz	r1, 1212a <at_parse_process_element+0x86>
   12128:	9300      	str	r3, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   1212a:	1b1b      	subs	r3, r3, r4
   1212c:	e7d8      	b.n	120e0 <at_parse_process_element+0x3c>
		skip_command_prefix(&tmpstr);
   1212e:	4668      	mov	r0, sp
   12130:	f00d fce0 	bl	1faf4 <skip_command_prefix>
		while (is_valid_command_char(*tmpstr)) {
   12134:	2200      	movs	r2, #0
   12136:	9b00      	ldr	r3, [sp, #0]
	if (isalpha((int)chr) || isdigit((int)chr)) {
   12138:	484a      	ldr	r0, [pc, #296]	; (12264 <at_parse_process_element+0x1c0>)
   1213a:	461f      	mov	r7, r3
   1213c:	f813 1b01 	ldrb.w	r1, [r3], #1
   12140:	5c41      	ldrb	r1, [r0, r1]
   12142:	0749      	lsls	r1, r1, #29
   12144:	d110      	bne.n	12168 <at_parse_process_element+0xc4>
   12146:	b102      	cbz	r2, 1214a <at_parse_process_element+0xa6>
   12148:	9700      	str	r7, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   1214a:	1b3b      	subs	r3, r7, r4
   1214c:	4622      	mov	r2, r4
   1214e:	4631      	mov	r1, r6
   12150:	4628      	mov	r0, r5
   12152:	f00d fd58 	bl	1fc06 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   12156:	783b      	ldrb	r3, [r7, #0]
   12158:	2b3d      	cmp	r3, #61	; 0x3d
   1215a:	d107      	bne.n	1216c <at_parse_process_element+0xc8>
   1215c:	787b      	ldrb	r3, [r7, #1]
   1215e:	2b3f      	cmp	r3, #63	; 0x3f
   12160:	d10b      	bne.n	1217a <at_parse_process_element+0xd6>
			tmpstr += 2;
   12162:	3702      	adds	r7, #2
		tmpstr++;
   12164:	9700      	str	r7, [sp, #0]
   12166:	e008      	b.n	1217a <at_parse_process_element+0xd6>
   12168:	2201      	movs	r2, #1
   1216a:	e7e6      	b.n	1213a <at_parse_process_element+0x96>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   1216c:	2b3f      	cmp	r3, #63	; 0x3f
   1216e:	d104      	bne.n	1217a <at_parse_process_element+0xd6>
			tmpstr++;
   12170:	3701      	adds	r7, #1
   12172:	e7f7      	b.n	12164 <at_parse_process_element+0xc0>
		at_params_empty_put(list, index);
   12174:	4628      	mov	r0, r5
   12176:	f00d fd1c 	bl	1fbb2 <at_params_empty_put>
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   1217a:	2000      	movs	r0, #0
	*str = tmpstr;
   1217c:	9b00      	ldr	r3, [sp, #0]
   1217e:	f8c8 3000 	str.w	r3, [r8]
}
   12182:	b023      	add	sp, #140	; 0x8c
   12184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state == NOTIFICATION) {
   12188:	4627      	mov	r7, r4
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   1218a:	783a      	ldrb	r2, [r7, #0]
   1218c:	4610      	mov	r0, r2
   1218e:	f00d fca8 	bl	1fae2 <is_lfcr>
   12192:	463b      	mov	r3, r7
			tmpstr++;
   12194:	3701      	adds	r7, #1
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   12196:	b908      	cbnz	r0, 1219c <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12198:	2a00      	cmp	r2, #0
   1219a:	d1f6      	bne.n	1218a <at_parse_process_element+0xe6>
		at_params_string_put(list, index, start_ptr,
   1219c:	4622      	mov	r2, r4
   1219e:	4631      	mov	r1, r6
   121a0:	4628      	mov	r0, r5
   121a2:	1b1b      	subs	r3, r3, r4
   121a4:	f00d fd2f 	bl	1fc06 <at_params_string_put>
   121a8:	e7dc      	b.n	12164 <at_parse_process_element+0xc0>
	if (state == NOTIFICATION) {
   121aa:	4627      	mov	r7, r4
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   121ac:	783a      	ldrb	r2, [r7, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   121ae:	463b      	mov	r3, r7
   121b0:	2a22      	cmp	r2, #34	; 0x22
			tmpstr++;
   121b2:	f107 0701 	add.w	r7, r7, #1
   121b6:	d0f1      	beq.n	1219c <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   121b8:	2a00      	cmp	r2, #0
   121ba:	d1f7      	bne.n	121ac <at_parse_process_element+0x108>
   121bc:	e7ee      	b.n	1219c <at_parse_process_element+0xf8>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   121be:	4620      	mov	r0, r4
   121c0:	220a      	movs	r2, #10
   121c2:	a901      	add	r1, sp, #4
   121c4:	f00a f8bc 	bl	1c340 <strtoul>
   121c8:	2401      	movs	r4, #1
		tmpstr = next;
   121ca:	9b01      	ldr	r3, [sp, #4]
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   121cc:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   121ce:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   121d0:	9b00      	ldr	r3, [sp, #0]
   121d2:	7818      	ldrb	r0, [r3, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   121d4:	2829      	cmp	r0, #41	; 0x29
   121d6:	d025      	beq.n	12224 <at_parse_process_element+0x180>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   121d8:	b320      	cbz	r0, 12224 <at_parse_process_element+0x180>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   121da:	f103 0901 	add.w	r9, r3, #1
			if (is_separator(*tmpstr)) {
   121de:	f7ff ff3b 	bl	12058 <is_separator>
				tmparray[i++] =
   121e2:	f8cd 9000 	str.w	r9, [sp]
			if (is_separator(*tmpstr)) {
   121e6:	b908      	cbnz	r0, 121ec <at_parse_process_element+0x148>
					tmpstr = next;
   121e8:	4627      	mov	r7, r4
   121ea:	e019      	b.n	12220 <at_parse_process_element+0x17c>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   121ec:	220a      	movs	r2, #10
   121ee:	a901      	add	r1, sp, #4
   121f0:	4648      	mov	r0, r9
   121f2:	f00a f8a5 	bl	1c340 <strtoul>
				tmparray[i++] =
   121f6:	ab22      	add	r3, sp, #136	; 0x88
   121f8:	1c67      	adds	r7, r4, #1
   121fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   121fe:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   12202:	4648      	mov	r0, r9
   12204:	f7f6 fe9b 	bl	8f3e <strlen>
   12208:	f8dd 9004 	ldr.w	r9, [sp, #4]
   1220c:	4604      	mov	r4, r0
   1220e:	4648      	mov	r0, r9
   12210:	f7f6 fe95 	bl	8f3e <strlen>
   12214:	4284      	cmp	r4, r0
   12216:	d006      	beq.n	12226 <at_parse_process_element+0x182>
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   12218:	2f20      	cmp	r7, #32
					tmpstr = next;
   1221a:	f8cd 9000 	str.w	r9, [sp]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1221e:	d002      	beq.n	12226 <at_parse_process_element+0x182>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   12220:	463c      	mov	r4, r7
   12222:	e7d5      	b.n	121d0 <at_parse_process_element+0x12c>
   12224:	4627      	mov	r7, r4
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   12226:	00bb      	lsls	r3, r7, #2
   12228:	4631      	mov	r1, r6
   1222a:	4628      	mov	r0, r5
   1222c:	aa02      	add	r2, sp, #8
   1222e:	f00d fd0d 	bl	1fc4c <at_params_array_put>
		tmpstr++;
   12232:	9b00      	ldr	r3, [sp, #0]
   12234:	3301      	adds	r3, #1
   12236:	9300      	str	r3, [sp, #0]
   12238:	e79f      	b.n	1217a <at_parse_process_element+0xd6>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1223a:	220a      	movs	r2, #10
   1223c:	4620      	mov	r0, r4
   1223e:	a902      	add	r1, sp, #8
   12240:	f00a f802 	bl	1c248 <strtoll>
   12244:	460b      	mov	r3, r1
		tmpstr = next;
   12246:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   12248:	4602      	mov	r2, r0
		tmpstr = next;
   1224a:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   1224c:	4628      	mov	r0, r5
   1224e:	4631      	mov	r1, r6
   12250:	f00d fcc4 	bl	1fbdc <at_params_int_put>
   12254:	e791      	b.n	1217a <at_parse_process_element+0xd6>
   12256:	2101      	movs	r1, #1
   12258:	e75d      	b.n	12116 <at_parse_process_element+0x72>
		return -1;
   1225a:	f04f 30ff 	mov.w	r0, #4294967295
   1225e:	e790      	b.n	12182 <at_parse_process_element+0xde>
   12260:	20011008 	.word	0x20011008
   12264:	00027ac8 	.word	0x00027ac8

00012268 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   12268:	b510      	push	{r4, lr}
   1226a:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1226c:	f7f6 fe67 	bl	8f3e <strlen>
   12270:	2801      	cmp	r0, #1
   12272:	d921      	bls.n	122b8 <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   12274:	7823      	ldrb	r3, [r4, #0]
   12276:	4912      	ldr	r1, [pc, #72]	; (122c0 <is_command+0x58>)
   12278:	5cca      	ldrb	r2, [r1, r3]
   1227a:	f002 0203 	and.w	r2, r2, #3
   1227e:	2a02      	cmp	r2, #2
   12280:	bf08      	it	eq
   12282:	3b20      	subeq	r3, #32
   12284:	2b41      	cmp	r3, #65	; 0x41
   12286:	d117      	bne.n	122b8 <is_command+0x50>
   12288:	7863      	ldrb	r3, [r4, #1]
   1228a:	5cca      	ldrb	r2, [r1, r3]
   1228c:	f002 0203 	and.w	r2, r2, #3
   12290:	2a02      	cmp	r2, #2
   12292:	bf08      	it	eq
   12294:	3b20      	subeq	r3, #32
   12296:	2b54      	cmp	r3, #84	; 0x54
   12298:	d10e      	bne.n	122b8 <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1229a:	78a2      	ldrb	r2, [r4, #2]
   1229c:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   122a0:	2b23      	cmp	r3, #35	; 0x23
   122a2:	d00b      	beq.n	122bc <is_command+0x54>
   122a4:	2a25      	cmp	r2, #37	; 0x25
   122a6:	d009      	beq.n	122bc <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   122a8:	4610      	mov	r0, r2
   122aa:	f00d fc1a 	bl	1fae2 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   122ae:	b910      	cbnz	r0, 122b6 <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   122b0:	fab2 f082 	clz	r0, r2
   122b4:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   122b6:	bd10      	pop	{r4, pc}
		return false;
   122b8:	2000      	movs	r0, #0
   122ba:	e7fc      	b.n	122b6 <is_command+0x4e>
		return true;
   122bc:	2001      	movs	r0, #1
   122be:	e7fa      	b.n	122b6 <is_command+0x4e>
   122c0:	00027ac8 	.word	0x00027ac8

000122c4 <at_parse_detect_type>:
{
   122c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   122c8:	4607      	mov	r7, r0
	const char *tmpstr = *str;
   122ca:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   122cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 12480 <at_parse_detect_type+0x1bc>
   122d0:	2900      	cmp	r1, #0
   122d2:	d13d      	bne.n	12350 <at_parse_detect_type+0x8c>
   122d4:	7820      	ldrb	r0, [r4, #0]
   122d6:	f00d fbf8 	bl	1faca <is_notification>
   122da:	4e61      	ldr	r6, [pc, #388]	; (12460 <at_parse_detect_type+0x19c>)
   122dc:	4605      	mov	r5, r0
   122de:	b360      	cbz	r0, 1233a <at_parse_detect_type+0x76>
	state = new_state;
   122e0:	2306      	movs	r3, #6
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   122e2:	2205      	movs	r2, #5
   122e4:	4620      	mov	r0, r4
   122e6:	495f      	ldr	r1, [pc, #380]	; (12464 <at_parse_detect_type+0x1a0>)
	state = new_state;
   122e8:	7033      	strb	r3, [r6, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   122ea:	f00f fe61 	bl	21fb0 <strncmp>
   122ee:	b1f8      	cbz	r0, 12330 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   122f0:	2205      	movs	r2, #5
   122f2:	4620      	mov	r0, r4
   122f4:	495c      	ldr	r1, [pc, #368]	; (12468 <at_parse_detect_type+0x1a4>)
   122f6:	f00f fe5b 	bl	21fb0 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   122fa:	b1c8      	cbz	r0, 12330 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   122fc:	220b      	movs	r2, #11
   122fe:	4620      	mov	r0, r4
   12300:	495a      	ldr	r1, [pc, #360]	; (1246c <at_parse_detect_type+0x1a8>)
   12302:	f00f fe55 	bl	21fb0 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   12306:	b198      	cbz	r0, 12330 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   12308:	220a      	movs	r2, #10
   1230a:	4620      	mov	r0, r4
   1230c:	4958      	ldr	r1, [pc, #352]	; (12470 <at_parse_detect_type+0x1ac>)
   1230e:	f00f fe4f 	bl	21fb0 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   12312:	b168      	cbz	r0, 12330 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   12314:	220b      	movs	r2, #11
   12316:	4620      	mov	r0, r4
   12318:	4956      	ldr	r1, [pc, #344]	; (12474 <at_parse_detect_type+0x1b0>)
   1231a:	f00f fe49 	bl	21fb0 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   1231e:	b138      	cbz	r0, 12330 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   12320:	2207      	movs	r2, #7
   12322:	4620      	mov	r0, r4
   12324:	4954      	ldr	r1, [pc, #336]	; (12478 <at_parse_detect_type+0x1b4>)
   12326:	f00f fe43 	bl	21fb0 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   1232a:	fab0 f580 	clz	r5, r0
   1232e:	096d      	lsrs	r5, r5, #5
		set_type_string = check_response_for_forced_string(tmpstr);
   12330:	f888 5000 	strb.w	r5, [r8]
	return 0;
   12334:	2000      	movs	r0, #0
	*str = tmpstr;
   12336:	603c      	str	r4, [r7, #0]
	return 0;
   12338:	e04e      	b.n	123d8 <at_parse_detect_type+0x114>
	} else if (set_type_string) {
   1233a:	f898 3000 	ldrb.w	r3, [r8]
   1233e:	b953      	cbnz	r3, 12356 <at_parse_detect_type+0x92>
	} else if ((index == 0) && is_command(tmpstr)) {
   12340:	4620      	mov	r0, r4
   12342:	f7ff ff91 	bl	12268 <is_command>
   12346:	2800      	cmp	r0, #0
   12348:	d048      	beq.n	123dc <at_parse_detect_type+0x118>
	state = new_state;
   1234a:	2307      	movs	r3, #7
   1234c:	7033      	strb	r3, [r6, #0]
}
   1234e:	e7f1      	b.n	12334 <at_parse_detect_type+0x70>
	} else if (set_type_string) {
   12350:	f898 3000 	ldrb.w	r3, [r8]
   12354:	b11b      	cbz	r3, 1235e <at_parse_detect_type+0x9a>
	state = new_state;
   12356:	2202      	movs	r2, #2
   12358:	4b41      	ldr	r3, [pc, #260]	; (12460 <at_parse_detect_type+0x19c>)
   1235a:	701a      	strb	r2, [r3, #0]
}
   1235c:	e7ea      	b.n	12334 <at_parse_detect_type+0x70>
	} else if ((index > 0) && is_clac(tmpstr)) {
   1235e:	2900      	cmp	r1, #0
   12360:	dd43      	ble.n	123ea <at_parse_detect_type+0x126>
   12362:	4622      	mov	r2, r4
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   12364:	7815      	ldrb	r5, [r2, #0]
   12366:	4616      	mov	r6, r2
   12368:	4628      	mov	r0, r5
   1236a:	3201      	adds	r2, #1
   1236c:	f00d fbb9 	bl	1fae2 <is_lfcr>
   12370:	2800      	cmp	r0, #0
   12372:	d1f7      	bne.n	12364 <at_parse_detect_type+0xa0>
		str++;
	}

	if (strlen(str) < 4) {
   12374:	4630      	mov	r0, r6
   12376:	f7f6 fde2 	bl	8f3e <strlen>
   1237a:	2803      	cmp	r0, #3
   1237c:	d930      	bls.n	123e0 <at_parse_detect_type+0x11c>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   1237e:	462b      	mov	r3, r5
   12380:	4a3e      	ldr	r2, [pc, #248]	; (1247c <at_parse_detect_type+0x1b8>)
   12382:	5d51      	ldrb	r1, [r2, r5]
   12384:	f001 0103 	and.w	r1, r1, #3
   12388:	2902      	cmp	r1, #2
   1238a:	bf08      	it	eq
   1238c:	f1a5 0320 	subeq.w	r3, r5, #32
   12390:	2b41      	cmp	r3, #65	; 0x41
   12392:	d125      	bne.n	123e0 <at_parse_detect_type+0x11c>
   12394:	7873      	ldrb	r3, [r6, #1]
   12396:	5cd1      	ldrb	r1, [r2, r3]
   12398:	f001 0103 	and.w	r1, r1, #3
   1239c:	2902      	cmp	r1, #2
   1239e:	bf08      	it	eq
   123a0:	3b20      	subeq	r3, #32
   123a2:	2b54      	cmp	r3, #84	; 0x54
   123a4:	d11c      	bne.n	123e0 <at_parse_detect_type+0x11c>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   123a6:	78b3      	ldrb	r3, [r6, #2]
   123a8:	5cd1      	ldrb	r1, [r2, r3]
   123aa:	f001 0103 	and.w	r1, r1, #3
   123ae:	2902      	cmp	r1, #2
   123b0:	bf08      	it	eq
   123b2:	3b20      	subeq	r3, #32
   123b4:	2b2b      	cmp	r3, #43	; 0x2b
   123b6:	d00a      	beq.n	123ce <at_parse_detect_type+0x10a>
   123b8:	2b25      	cmp	r3, #37	; 0x25
   123ba:	d111      	bne.n	123e0 <at_parse_detect_type+0x11c>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   123bc:	78f3      	ldrb	r3, [r6, #3]
   123be:	5cd2      	ldrb	r2, [r2, r3]
   123c0:	f002 0203 	and.w	r2, r2, #3
   123c4:	2a02      	cmp	r2, #2
   123c6:	bf08      	it	eq
   123c8:	3b20      	subeq	r3, #32
   123ca:	2b58      	cmp	r3, #88	; 0x58
   123cc:	d008      	beq.n	123e0 <at_parse_detect_type+0x11c>
	state = new_state;
   123ce:	2209      	movs	r2, #9
		return -2;
   123d0:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   123d4:	4b22      	ldr	r3, [pc, #136]	; (12460 <at_parse_detect_type+0x19c>)
   123d6:	701a      	strb	r2, [r3, #0]
}
   123d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	state = new_state;
   123dc:	2302      	movs	r3, #2
   123de:	e7b5      	b.n	1234c <at_parse_detect_type+0x88>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   123e0:	7820      	ldrb	r0, [r4, #0]
   123e2:	f00d fb72 	bl	1faca <is_notification>
   123e6:	2800      	cmp	r0, #0
   123e8:	d136      	bne.n	12458 <at_parse_detect_type+0x194>
	} else if (is_number(*tmpstr)) {
   123ea:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   123ec:	4b23      	ldr	r3, [pc, #140]	; (1247c <at_parse_detect_type+0x1b8>)
   123ee:	5c9b      	ldrb	r3, [r3, r2]
   123f0:	075b      	lsls	r3, r3, #29
   123f2:	d40a      	bmi.n	1240a <at_parse_detect_type+0x146>
   123f4:	2a2d      	cmp	r2, #45	; 0x2d
   123f6:	d008      	beq.n	1240a <at_parse_detect_type+0x146>
   123f8:	2a2b      	cmp	r2, #43	; 0x2b
   123fa:	d006      	beq.n	1240a <at_parse_detect_type+0x146>
	if (chr == '"') {
   123fc:	2a22      	cmp	r2, #34	; 0x22
   123fe:	d107      	bne.n	12410 <at_parse_detect_type+0x14c>
	state = new_state;
   12400:	2203      	movs	r2, #3
   12402:	4b17      	ldr	r3, [pc, #92]	; (12460 <at_parse_detect_type+0x19c>)
		tmpstr++;
   12404:	3401      	adds	r4, #1
	state = new_state;
   12406:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   12408:	e794      	b.n	12334 <at_parse_detect_type+0x70>
	state = new_state;
   1240a:	2204      	movs	r2, #4
   1240c:	4b14      	ldr	r3, [pc, #80]	; (12460 <at_parse_detect_type+0x19c>)
   1240e:	e7a4      	b.n	1235a <at_parse_detect_type+0x96>
	if (chr == '(') {
   12410:	2a28      	cmp	r2, #40	; 0x28
   12412:	d104      	bne.n	1241e <at_parse_detect_type+0x15a>
   12414:	2201      	movs	r2, #1
   12416:	4b12      	ldr	r3, [pc, #72]	; (12460 <at_parse_detect_type+0x19c>)
		tmpstr++;
   12418:	4414      	add	r4, r2
	state = new_state;
   1241a:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1241c:	e78a      	b.n	12334 <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   1241e:	4610      	mov	r0, r2
   12420:	f00d fb5f 	bl	1fae2 <is_lfcr>
   12424:	b188      	cbz	r0, 1244a <at_parse_detect_type+0x186>
   12426:	490e      	ldr	r1, [pc, #56]	; (12460 <at_parse_detect_type+0x19c>)
   12428:	780b      	ldrb	r3, [r1, #0]
   1242a:	2b04      	cmp	r3, #4
   1242c:	d10a      	bne.n	12444 <at_parse_detect_type+0x180>
   1242e:	4622      	mov	r2, r4
   12430:	4614      	mov	r4, r2
		while (is_lfcr(*tmpstr)) {
   12432:	f812 0b01 	ldrb.w	r0, [r2], #1
   12436:	f00d fb54 	bl	1fae2 <is_lfcr>
   1243a:	2800      	cmp	r0, #0
   1243c:	d1f8      	bne.n	12430 <at_parse_detect_type+0x16c>
	state = new_state;
   1243e:	2305      	movs	r3, #5
   12440:	700b      	strb	r3, [r1, #0]
}
   12442:	e777      	b.n	12334 <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   12444:	2b08      	cmp	r3, #8
   12446:	f43f af75 	beq.w	12334 <at_parse_detect_type+0x70>
	} else if (is_separator(*tmpstr)) {
   1244a:	4610      	mov	r0, r2
   1244c:	f7ff fe04 	bl	12058 <is_separator>
   12450:	b110      	cbz	r0, 12458 <at_parse_detect_type+0x194>
	state = new_state;
   12452:	2208      	movs	r2, #8
   12454:	4b02      	ldr	r3, [pc, #8]	; (12460 <at_parse_detect_type+0x19c>)
   12456:	e780      	b.n	1235a <at_parse_detect_type+0x96>
		return -1;
   12458:	f04f 30ff 	mov.w	r0, #4294967295
   1245c:	e7bc      	b.n	123d8 <at_parse_detect_type+0x114>
   1245e:	bf00      	nop
   12460:	20011008 	.word	0x20011008
   12464:	00025159 	.word	0x00025159
   12468:	0002515f 	.word	0x0002515f
   1246c:	00025165 	.word	0x00025165
   12470:	00025171 	.word	0x00025171
   12474:	0002517c 	.word	0x0002517c
   12478:	00025188 	.word	0x00025188
   1247c:	00027ac8 	.word	0x00027ac8
   12480:	20011007 	.word	0x20011007

00012484 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   12484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12488:	4689      	mov	r9, r1
   1248a:	4616      	mov	r6, r2
   1248c:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   1248e:	4680      	mov	r8, r0
   12490:	2800      	cmp	r0, #0
   12492:	f000 8099 	beq.w	125c8 <at_parser_max_params_from_str+0x144>
   12496:	2a00      	cmp	r2, #0
   12498:	f000 8096 	beq.w	125c8 <at_parser_max_params_from_str+0x144>
   1249c:	6853      	ldr	r3, [r2, #4]
   1249e:	2b00      	cmp	r3, #0
   124a0:	f000 8092 	beq.w	125c8 <at_parser_max_params_from_str+0x144>
	state = IDLE;
   124a4:	2400      	movs	r4, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   124a6:	4610      	mov	r0, r2
   124a8:	f00d fb5e 	bl	1fb68 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   124ac:	4642      	mov	r2, r8
   124ae:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
   124b0:	f8cd 8004 	str.w	r8, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   124b4:	429f      	cmp	r7, r3
   124b6:	bf28      	it	cs
   124b8:	461f      	movcs	r7, r3
	state = IDLE;
   124ba:	4b45      	ldr	r3, [pc, #276]	; (125d0 <at_parser_max_params_from_str+0x14c>)
   124bc:	701c      	strb	r4, [r3, #0]
	set_type_string = false;
   124be:	4b45      	ldr	r3, [pc, #276]	; (125d4 <at_parser_max_params_from_str+0x150>)
   124c0:	701c      	strb	r4, [r3, #0]
   124c2:	4611      	mov	r1, r2
	while (is_lfcr(*str)) {
   124c4:	7808      	ldrb	r0, [r1, #0]
   124c6:	f00d fb0c 	bl	1fae2 <is_lfcr>
   124ca:	4625      	mov	r5, r4
   124cc:	3201      	adds	r2, #1
   124ce:	4604      	mov	r4, r0
   124d0:	2800      	cmp	r0, #0
   124d2:	d1f6      	bne.n	124c2 <at_parser_max_params_from_str+0x3e>
   124d4:	b105      	cbz	r5, 124d8 <at_parser_max_params_from_str+0x54>
   124d6:	9101      	str	r1, [sp, #4]
	int index = 0;
   124d8:	2500      	movs	r5, #0
		if (isspace((int)*str)) {
   124da:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 125d8 <at_parser_max_params_from_str+0x154>
	while ((!is_terminated(*str)) && (index < max_params)) {
   124de:	9b01      	ldr	r3, [sp, #4]
   124e0:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   124e2:	2a00      	cmp	r2, #0
   124e4:	d050      	beq.n	12588 <at_parser_max_params_from_str+0x104>
   124e6:	42af      	cmp	r7, r5
   124e8:	d94e      	bls.n	12588 <at_parser_max_params_from_str+0x104>
		if (isspace((int)*str)) {
   124ea:	f81b 2002 	ldrb.w	r2, [fp, r2]
		ret = at_parse_detect_type(&str, index);
   124ee:	4629      	mov	r1, r5
		if (isspace((int)*str)) {
   124f0:	0712      	lsls	r2, r2, #28
			str++;
   124f2:	bf48      	it	mi
   124f4:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   124f6:	a801      	add	r0, sp, #4
			str++;
   124f8:	bf48      	it	mi
   124fa:	9301      	strmi	r3, [sp, #4]
		ret = at_parse_detect_type(&str, index);
   124fc:	f7ff fee2 	bl	122c4 <at_parse_detect_type>
		if (ret == -1) {
   12500:	1c43      	adds	r3, r0, #1
   12502:	d041      	beq.n	12588 <at_parser_max_params_from_str+0x104>
		if (ret == -2) {
   12504:	3002      	adds	r0, #2
			index = 0;
   12506:	bf08      	it	eq
   12508:	2500      	moveq	r5, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   1250a:	4632      	mov	r2, r6
   1250c:	4629      	mov	r1, r5
   1250e:	a801      	add	r0, sp, #4
			str = *at_params_str;
   12510:	bf08      	it	eq
   12512:	f8cd 8004 	streq.w	r8, [sp, #4]
		if (at_parse_process_element(&str, index, list) == -1) {
   12516:	f7ff fdc5 	bl	120a4 <at_parse_process_element>
   1251a:	3001      	adds	r0, #1
   1251c:	d034      	beq.n	12588 <at_parser_max_params_from_str+0x104>
		if (is_separator(*str)) {
   1251e:	9a01      	ldr	r2, [sp, #4]
   12520:	7810      	ldrb	r0, [r2, #0]
   12522:	f7ff fd99 	bl	12058 <is_separator>
   12526:	b1b0      	cbz	r0, 12556 <at_parser_max_params_from_str+0xd2>
			if (is_lfcr(*(str + 1))) {
   12528:	7850      	ldrb	r0, [r2, #1]
   1252a:	f00d fada 	bl	1fae2 <is_lfcr>
   1252e:	b178      	cbz	r0, 12550 <at_parser_max_params_from_str+0xcc>
				index++;
   12530:	3501      	adds	r5, #1
				if (index == max_params) {
   12532:	42bd      	cmp	r5, r7
   12534:	d041      	beq.n	125ba <at_parser_max_params_from_str+0x136>
				if (at_parse_detect_type(&str, index) == -1) {
   12536:	4629      	mov	r1, r5
   12538:	a801      	add	r0, sp, #4
   1253a:	f7ff fec3 	bl	122c4 <at_parse_detect_type>
   1253e:	3001      	adds	r0, #1
   12540:	d022      	beq.n	12588 <at_parser_max_params_from_str+0x104>
				if (at_parse_process_element(&str, index,
   12542:	4632      	mov	r2, r6
   12544:	4629      	mov	r1, r5
   12546:	a801      	add	r0, sp, #4
   12548:	f7ff fdac 	bl	120a4 <at_parse_process_element>
   1254c:	3001      	adds	r0, #1
   1254e:	d01b      	beq.n	12588 <at_parser_max_params_from_str+0x104>
			str++;
   12550:	9b01      	ldr	r3, [sp, #4]
   12552:	3301      	adds	r3, #1
   12554:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   12556:	9a01      	ldr	r2, [sp, #4]
   12558:	7810      	ldrb	r0, [r2, #0]
   1255a:	f00d fac2 	bl	1fae2 <is_lfcr>
   1255e:	b338      	cbz	r0, 125b0 <at_parser_max_params_from_str+0x12c>
   12560:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   12562:	7811      	ldrb	r1, [r2, #0]
   12564:	4692      	mov	sl, r2
   12566:	4608      	mov	r0, r1
   12568:	3201      	adds	r2, #1
   1256a:	f00d faba 	bl	1fae2 <is_lfcr>
   1256e:	2800      	cmp	r0, #0
   12570:	d1f7      	bne.n	12562 <at_parser_max_params_from_str+0xde>
   12572:	b139      	cbz	r1, 12584 <at_parser_max_params_from_str+0x100>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   12574:	4608      	mov	r0, r1
   12576:	f00d faa8 	bl	1faca <is_notification>
   1257a:	b918      	cbnz	r0, 12584 <at_parser_max_params_from_str+0x100>
			    is_result(str + i)) {
   1257c:	4650      	mov	r0, sl
   1257e:	f7ff fd79 	bl	12074 <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   12582:	b1a8      	cbz	r0, 125b0 <at_parser_max_params_from_str+0x12c>
				str += i;
   12584:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   12588:	9d01      	ldr	r5, [sp, #4]
	if (oversized) {
   1258a:	b9c4      	cbnz	r4, 125be <at_parser_max_params_from_str+0x13a>
   1258c:	782b      	ldrb	r3, [r5, #0]
   1258e:	b1cb      	cbz	r3, 125c4 <at_parser_max_params_from_str+0x140>
	if (!is_terminated(*str) && !is_result(str)) {
   12590:	4628      	mov	r0, r5
   12592:	f7ff fd6f 	bl	12074 <is_result>
		return -EAGAIN;
   12596:	2800      	cmp	r0, #0
   12598:	bf14      	ite	ne
   1259a:	2000      	movne	r0, #0
   1259c:	f06f 000a 	mvneq.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   125a0:	f1b9 0f00 	cmp.w	r9, #0
   125a4:	d001      	beq.n	125aa <at_parser_max_params_from_str+0x126>
		*next_param_str = (char *)at_params_str;
   125a6:	f8c9 5000 	str.w	r5, [r9]
	}

	return err;
}
   125aa:	b003      	add	sp, #12
   125ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   125b0:	3501      	adds	r5, #1
			oversized = true;
   125b2:	42bd      	cmp	r5, r7
   125b4:	bf08      	it	eq
   125b6:	2401      	moveq	r4, #1
   125b8:	e791      	b.n	124de <at_parser_max_params_from_str+0x5a>
					oversized = true;
   125ba:	4604      	mov	r4, r0
   125bc:	e7e4      	b.n	12588 <at_parser_max_params_from_str+0x104>
		return -E2BIG;
   125be:	f06f 0006 	mvn.w	r0, #6
   125c2:	e7ed      	b.n	125a0 <at_parser_max_params_from_str+0x11c>
	return 0;
   125c4:	4620      	mov	r0, r4
   125c6:	e7eb      	b.n	125a0 <at_parser_max_params_from_str+0x11c>
		return -EINVAL;
   125c8:	f06f 0015 	mvn.w	r0, #21
   125cc:	e7ed      	b.n	125aa <at_parser_max_params_from_str+0x126>
   125ce:	bf00      	nop
   125d0:	20011008 	.word	0x20011008
   125d4:	20011007 	.word	0x20011007
   125d8:	00027ac8 	.word	0x00027ac8

000125dc <enable_notifications>:

	event_handler_list_dispatch(&evt);
}

static int enable_notifications(void)
{
   125dc:	b530      	push	{r4, r5, lr}
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
   125de:	4825      	ldr	r0, [pc, #148]	; (12674 <enable_notifications+0x98>)
{
   125e0:	b093      	sub	sp, #76	; 0x4c
	err = nrf_modem_at_printf(AT_CEREG_5);
   125e2:	f005 fe8b 	bl	182fc <nrf_modem_at_printf>
	if (err) {
   125e6:	4604      	mov	r4, r0
   125e8:	b178      	cbz	r0, 1260a <enable_notifications+0x2e>
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   125ea:	4b23      	ldr	r3, [pc, #140]	; (12678 <enable_notifications+0x9c>)
   125ec:	9003      	str	r0, [sp, #12]
   125ee:	9302      	str	r3, [sp, #8]
   125f0:	2300      	movs	r3, #0
   125f2:	2201      	movs	r2, #1
   125f4:	4618      	mov	r0, r3
   125f6:	e9cd 3300 	strd	r3, r3, [sp]
   125fa:	4920      	ldr	r1, [pc, #128]	; (1267c <enable_notifications+0xa0>)
   125fc:	f00d fbde 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   12600:	f06f 040d 	mvn.w	r4, #13
			LOG_WRN("Current modem firmware version: %s", buf);
		}
	}

	return 0;
}
   12604:	4620      	mov	r0, r4
   12606:	b013      	add	sp, #76	; 0x4c
   12608:	bd30      	pop	{r4, r5, pc}
	err = nrf_modem_at_printf(cscon);
   1260a:	481d      	ldr	r0, [pc, #116]	; (12680 <enable_notifications+0xa4>)
   1260c:	f005 fe76 	bl	182fc <nrf_modem_at_printf>
	if (err) {
   12610:	2800      	cmp	r0, #0
   12612:	d0f7      	beq.n	12604 <enable_notifications+0x28>
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   12614:	4b1b      	ldr	r3, [pc, #108]	; (12684 <enable_notifications+0xa8>)
   12616:	2202      	movs	r2, #2
   12618:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1261c:	4917      	ldr	r1, [pc, #92]	; (1267c <enable_notifications+0xa0>)
   1261e:	4623      	mov	r3, r4
   12620:	9003      	str	r0, [sp, #12]
   12622:	9400      	str	r4, [sp, #0]
   12624:	4620      	mov	r0, r4
   12626:	f00d fbc9 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   1262a:	4b17      	ldr	r3, [pc, #92]	; (12688 <enable_notifications+0xac>)
   1262c:	2202      	movs	r2, #2
   1262e:	4620      	mov	r0, r4
   12630:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12634:	4911      	ldr	r1, [pc, #68]	; (1267c <enable_notifications+0xa0>)
   12636:	4623      	mov	r3, r4
   12638:	9400      	str	r4, [sp, #0]
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   1263a:	ad05      	add	r5, sp, #20
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   1263c:	f00d fbbe 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   12640:	2132      	movs	r1, #50	; 0x32
   12642:	4628      	mov	r0, r5
   12644:	4a11      	ldr	r2, [pc, #68]	; (1268c <enable_notifications+0xb0>)
   12646:	f005 fea5 	bl	18394 <nrf_modem_at_cmd>
		if (err == 0) {
   1264a:	2800      	cmp	r0, #0
   1264c:	d1da      	bne.n	12604 <enable_notifications+0x28>
			char *end = strstr(buf, "\r\nOK");
   1264e:	4628      	mov	r0, r5
   12650:	490f      	ldr	r1, [pc, #60]	; (12690 <enable_notifications+0xb4>)
   12652:	f00f fcf2 	bl	2203a <strstr>
			if (end) {
   12656:	b100      	cbz	r0, 1265a <enable_notifications+0x7e>
				*end = '\0';
   12658:	7004      	strb	r4, [r0, #0]
			LOG_WRN("Current modem firmware version: %s", buf);
   1265a:	4b0e      	ldr	r3, [pc, #56]	; (12694 <enable_notifications+0xb8>)
   1265c:	2202      	movs	r2, #2
   1265e:	9302      	str	r3, [sp, #8]
   12660:	2300      	movs	r3, #0
   12662:	4906      	ldr	r1, [pc, #24]	; (1267c <enable_notifications+0xa0>)
   12664:	4618      	mov	r0, r3
   12666:	e9cd 3300 	strd	r3, r3, [sp]
   1266a:	9503      	str	r5, [sp, #12]
   1266c:	f00d fba6 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
   12670:	e7c8      	b.n	12604 <enable_notifications+0x28>
   12672:	bf00      	nop
   12674:	000251b3 	.word	0x000251b3
   12678:	000251be 	.word	0x000251be
   1267c:	00022f74 	.word	0x00022f74
   12680:	00025a2d 	.word	0x00025a2d
   12684:	000251f4 	.word	0x000251f4
   12688:	0002522c 	.word	0x0002522c
   1268c:	0002525d 	.word	0x0002525d
   12690:	00025265 	.word	0x00025265
   12694:	0002526a 	.word	0x0002526a

00012698 <at_handler_mdmev>:
{
   12698:	b510      	push	{r4, lr}
   1269a:	4604      	mov	r4, r0
   1269c:	b096      	sub	sp, #88	; 0x58
	struct lte_lc_evt evt = {0};
   1269e:	2100      	movs	r1, #0
   126a0:	2248      	movs	r2, #72	; 0x48
   126a2:	a804      	add	r0, sp, #16
   126a4:	f00f fb0f 	bl	21cc6 <memset>
	err = parse_mdmev(response, &evt.modem_evt);
   126a8:	4620      	mov	r0, r4
   126aa:	a906      	add	r1, sp, #24
   126ac:	f001 fce8 	bl	14080 <parse_mdmev>
	if (err) {
   126b0:	b160      	cbz	r0, 126cc <at_handler_mdmev+0x34>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   126b2:	4b0a      	ldr	r3, [pc, #40]	; (126dc <at_handler_mdmev+0x44>)
   126b4:	9003      	str	r0, [sp, #12]
   126b6:	9302      	str	r3, [sp, #8]
   126b8:	2300      	movs	r3, #0
   126ba:	2201      	movs	r2, #1
   126bc:	4618      	mov	r0, r3
   126be:	e9cd 3300 	strd	r3, r3, [sp]
   126c2:	4907      	ldr	r1, [pc, #28]	; (126e0 <at_handler_mdmev+0x48>)
   126c4:	f00d fb7a 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
}
   126c8:	b016      	add	sp, #88	; 0x58
   126ca:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   126cc:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   126ce:	a804      	add	r0, sp, #16
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   126d0:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
   126d4:	f000 fdc8 	bl	13268 <event_handler_list_dispatch>
   126d8:	e7f6      	b.n	126c8 <at_handler_mdmev+0x30>
   126da:	bf00      	nop
   126dc:	0002528d 	.word	0x0002528d
   126e0:	00022f74 	.word	0x00022f74

000126e4 <at_handler_xmodemsleep>:
{
   126e4:	b510      	push	{r4, lr}
   126e6:	4604      	mov	r4, r0
   126e8:	b096      	sub	sp, #88	; 0x58
	struct lte_lc_evt evt = {0};
   126ea:	2100      	movs	r1, #0
   126ec:	2248      	movs	r2, #72	; 0x48
   126ee:	a804      	add	r0, sp, #16
   126f0:	f00f fae9 	bl	21cc6 <memset>
	err = parse_xmodemsleep(response, &evt.modem_sleep);
   126f4:	4620      	mov	r0, r4
   126f6:	a906      	add	r1, sp, #24
   126f8:	f001 fc50 	bl	13f9c <parse_xmodemsleep>
	if (err) {
   126fc:	b160      	cbz	r0, 12718 <at_handler_xmodemsleep+0x34>
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   126fe:	4b14      	ldr	r3, [pc, #80]	; (12750 <at_handler_xmodemsleep+0x6c>)
   12700:	9003      	str	r0, [sp, #12]
   12702:	9302      	str	r3, [sp, #8]
   12704:	2300      	movs	r3, #0
   12706:	2201      	movs	r2, #1
   12708:	4618      	mov	r0, r3
   1270a:	e9cd 3300 	strd	r3, r3, [sp]
   1270e:	4911      	ldr	r1, [pc, #68]	; (12754 <at_handler_xmodemsleep+0x70>)
   12710:	f00d fb54 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
}
   12714:	b016      	add	sp, #88	; 0x58
   12716:	bd10      	pop	{r4, pc}
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   12718:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1271c:	1e5a      	subs	r2, r3, #1
   1271e:	2a03      	cmp	r2, #3
   12720:	d901      	bls.n	12726 <at_handler_xmodemsleep+0x42>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_FLIGHT_MODE) &&
   12722:	2b07      	cmp	r3, #7
   12724:	d1f6      	bne.n	12714 <at_handler_xmodemsleep+0x30>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   12726:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   1272a:	f5a2 539c 	sub.w	r3, r2, #4992	; 0x1380
   1272e:	3b08      	subs	r3, #8
   12730:	430b      	orrs	r3, r1
   12732:	d008      	beq.n	12746 <at_handler_xmodemsleep+0x62>
	} else if (evt.modem_sleep.time == 0) {
   12734:	430a      	orrs	r2, r1
   12736:	d008      	beq.n	1274a <at_handler_xmodemsleep+0x66>
   12738:	230a      	movs	r3, #10
	event_handler_list_dispatch(&evt);
   1273a:	a804      	add	r0, sp, #16
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   1273c:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
   12740:	f000 fd92 	bl	13268 <event_handler_list_dispatch>
   12744:	e7e6      	b.n	12714 <at_handler_xmodemsleep+0x30>
   12746:	2308      	movs	r3, #8
   12748:	e7f7      	b.n	1273a <at_handler_xmodemsleep+0x56>
   1274a:	2309      	movs	r3, #9
   1274c:	e7f5      	b.n	1273a <at_handler_xmodemsleep+0x56>
   1274e:	bf00      	nop
   12750:	000252bd 	.word	0x000252bd
   12754:	00022f74 	.word	0x00022f74

00012758 <at_handler_ncellmeas>:
{
   12758:	b570      	push	{r4, r5, r6, lr}
   1275a:	b0a8      	sub	sp, #160	; 0xa0
	struct lte_lc_evt evt = {0};
   1275c:	2100      	movs	r1, #0
   1275e:	2248      	movs	r2, #72	; 0x48
{
   12760:	4605      	mov	r5, r0
	struct lte_lc_evt evt = {0};
   12762:	a804      	add	r0, sp, #16
   12764:	f00f faaf 	bl	21cc6 <memset>
	if (event_handler_list_is_empty() || !ncellmeas_ongoing) {
   12768:	f000 fd4a 	bl	13200 <event_handler_list_is_empty>
   1276c:	4e4e      	ldr	r6, [pc, #312]	; (128a8 <at_handler_ncellmeas+0x150>)
   1276e:	4601      	mov	r1, r0
   12770:	b9c8      	cbnz	r0, 127a6 <at_handler_ncellmeas+0x4e>
   12772:	7833      	ldrb	r3, [r6, #0]
   12774:	b1bb      	cbz	r3, 127a6 <at_handler_ncellmeas+0x4e>
	if (ncellmeas_params.search_type > LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
   12776:	4c4d      	ldr	r4, [pc, #308]	; (128ac <at_handler_ncellmeas+0x154>)
   12778:	7823      	ldrb	r3, [r4, #0]
   1277a:	2b03      	cmp	r3, #3
   1277c:	d952      	bls.n	12824 <at_handler_ncellmeas+0xcc>
	struct lte_lc_evt evt = {0};
   1277e:	2248      	movs	r2, #72	; 0x48
   12780:	a816      	add	r0, sp, #88	; 0x58
   12782:	f00f faa0 	bl	21cc6 <memset>
	int max_cell_count = ncellmeas_params.gci_count;
   12786:	7860      	ldrb	r0, [r4, #1]
	if (max_cell_count != 0) {
   12788:	b188      	cbz	r0, 127ae <at_handler_ncellmeas+0x56>
		cells = k_calloc(max_cell_count, sizeof(struct lte_lc_cell));
   1278a:	2130      	movs	r1, #48	; 0x30
   1278c:	f00f fa40 	bl	21c10 <k_calloc>
		if (cells == NULL) {
   12790:	4604      	mov	r4, r0
   12792:	b968      	cbnz	r0, 127b0 <at_handler_ncellmeas+0x58>
			LOG_ERR("Failed to allocate memory for the GCI cells");
   12794:	4b46      	ldr	r3, [pc, #280]	; (128b0 <at_handler_ncellmeas+0x158>)
			LOG_ERR("Failed to allocate memory for neighbor cells");
   12796:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1279a:	2201      	movs	r2, #1
   1279c:	4623      	mov	r3, r4
   1279e:	4945      	ldr	r1, [pc, #276]	; (128b4 <at_handler_ncellmeas+0x15c>)
   127a0:	9400      	str	r4, [sp, #0]
   127a2:	f00d fb0b 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
	ncellmeas_ongoing = false;
   127a6:	2300      	movs	r3, #0
   127a8:	7033      	strb	r3, [r6, #0]
}
   127aa:	b028      	add	sp, #160	; 0xa0
   127ac:	bd70      	pop	{r4, r5, r6, pc}
	struct lte_lc_cell *cells = NULL;
   127ae:	4604      	mov	r4, r0
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   127b0:	aa18      	add	r2, sp, #96	; 0x60
   127b2:	4629      	mov	r1, r5
   127b4:	483d      	ldr	r0, [pc, #244]	; (128ac <at_handler_ncellmeas+0x154>)
	evt.cells_info.gci_cells = cells;
   127b6:	9427      	str	r4, [sp, #156]	; 0x9c
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   127b8:	f001 f97a 	bl	13ab0 <parse_ncellmeas_gci>
	switch (err) {
   127bc:	1dc2      	adds	r2, r0, #7
   127be:	d00d      	beq.n	127dc <at_handler_ncellmeas+0x84>
   127c0:	2801      	cmp	r0, #1
   127c2:	d922      	bls.n	1280a <at_handler_ncellmeas+0xb2>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   127c4:	4b3c      	ldr	r3, [pc, #240]	; (128b8 <at_handler_ncellmeas+0x160>)
   127c6:	9003      	str	r0, [sp, #12]
   127c8:	9302      	str	r3, [sp, #8]
   127ca:	2300      	movs	r3, #0
   127cc:	2201      	movs	r2, #1
   127ce:	4618      	mov	r0, r3
   127d0:	e9cd 3300 	strd	r3, r3, [sp]
   127d4:	4937      	ldr	r1, [pc, #220]	; (128b4 <at_handler_ncellmeas+0x15c>)
   127d6:	f00d faf1 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
   127da:	e01c      	b.n	12816 <at_handler_ncellmeas+0xbe>
		LOG_WRN("Not all neighbor cells could be parsed");
   127dc:	2500      	movs	r5, #0
   127de:	4b37      	ldr	r3, [pc, #220]	; (128bc <at_handler_ncellmeas+0x164>)
   127e0:	2202      	movs	r2, #2
   127e2:	4628      	mov	r0, r5
   127e4:	4933      	ldr	r1, [pc, #204]	; (128b4 <at_handler_ncellmeas+0x15c>)
   127e6:	9302      	str	r3, [sp, #8]
   127e8:	e9cd 5500 	strd	r5, r5, [sp]
   127ec:	462b      	mov	r3, r5
   127ee:	f00d fae5 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
   127f2:	230a      	movs	r3, #10
   127f4:	9303      	str	r3, [sp, #12]
   127f6:	4b32      	ldr	r3, [pc, #200]	; (128c0 <at_handler_ncellmeas+0x168>)
   127f8:	2202      	movs	r2, #2
   127fa:	e9cd 5301 	strd	r5, r3, [sp, #4]
   127fe:	4628      	mov	r0, r5
   12800:	462b      	mov	r3, r5
   12802:	492c      	ldr	r1, [pc, #176]	; (128b4 <at_handler_ncellmeas+0x15c>)
   12804:	9500      	str	r5, [sp, #0]
   12806:	f00d fad9 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1280a:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   1280c:	a816      	add	r0, sp, #88	; 0x58
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1280e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   12812:	f000 fd29 	bl	13268 <event_handler_list_dispatch>
	k_free(cells);
   12816:	4620      	mov	r0, r4
   12818:	f00f f9ef 	bl	21bfa <k_free>
	k_free(evt.cells_info.neighbor_cells);
   1281c:	9825      	ldr	r0, [sp, #148]	; 0x94
		k_free(neighbor_cells);
   1281e:	f00f f9ec 	bl	21bfa <k_free>
   12822:	e7c0      	b.n	127a6 <at_handler_ncellmeas+0x4e>
	int ncell_count = neighborcell_count_get(response);
   12824:	4628      	mov	r0, r5
   12826:	f000 ffb5 	bl	13794 <neighborcell_count_get>
   1282a:	4604      	mov	r4, r0
	if (ncell_count != 0) {
   1282c:	b130      	cbz	r0, 1283c <at_handler_ncellmeas+0xe4>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   1282e:	2110      	movs	r1, #16
   12830:	f00f f9ee 	bl	21c10 <k_calloc>
		if (neighbor_cells == NULL) {
   12834:	4604      	mov	r4, r0
   12836:	b908      	cbnz	r0, 1283c <at_handler_ncellmeas+0xe4>
			LOG_ERR("Failed to allocate memory for neighbor cells");
   12838:	4b22      	ldr	r3, [pc, #136]	; (128c4 <at_handler_ncellmeas+0x16c>)
   1283a:	e7ac      	b.n	12796 <at_handler_ncellmeas+0x3e>
	err = parse_ncellmeas(response, &evt.cells_info);
   1283c:	4628      	mov	r0, r5
   1283e:	a906      	add	r1, sp, #24
	evt.cells_info.neighbor_cells = neighbor_cells;
   12840:	9413      	str	r4, [sp, #76]	; 0x4c
	err = parse_ncellmeas(response, &evt.cells_info);
   12842:	f000 ffcb 	bl	137dc <parse_ncellmeas>
	switch (err) {
   12846:	1dc3      	adds	r3, r0, #7
   12848:	d00d      	beq.n	12866 <at_handler_ncellmeas+0x10e>
   1284a:	2801      	cmp	r0, #1
   1284c:	d922      	bls.n	12894 <at_handler_ncellmeas+0x13c>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   1284e:	4b1a      	ldr	r3, [pc, #104]	; (128b8 <at_handler_ncellmeas+0x160>)
   12850:	9003      	str	r0, [sp, #12]
   12852:	9302      	str	r3, [sp, #8]
   12854:	2300      	movs	r3, #0
   12856:	2201      	movs	r2, #1
   12858:	4618      	mov	r0, r3
   1285a:	e9cd 3300 	strd	r3, r3, [sp]
   1285e:	4915      	ldr	r1, [pc, #84]	; (128b4 <at_handler_ncellmeas+0x15c>)
   12860:	f00d faac 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
   12864:	e01c      	b.n	128a0 <at_handler_ncellmeas+0x148>
		LOG_WRN("Not all neighbor cells could be parsed");
   12866:	2500      	movs	r5, #0
   12868:	4b14      	ldr	r3, [pc, #80]	; (128bc <at_handler_ncellmeas+0x164>)
   1286a:	2202      	movs	r2, #2
   1286c:	4628      	mov	r0, r5
   1286e:	4911      	ldr	r1, [pc, #68]	; (128b4 <at_handler_ncellmeas+0x15c>)
   12870:	9302      	str	r3, [sp, #8]
   12872:	e9cd 5500 	strd	r5, r5, [sp]
   12876:	462b      	mov	r3, r5
   12878:	f00d faa0 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
   1287c:	230a      	movs	r3, #10
   1287e:	9303      	str	r3, [sp, #12]
   12880:	4b0f      	ldr	r3, [pc, #60]	; (128c0 <at_handler_ncellmeas+0x168>)
   12882:	2202      	movs	r2, #2
   12884:	e9cd 5301 	strd	r5, r3, [sp, #4]
   12888:	4628      	mov	r0, r5
   1288a:	462b      	mov	r3, r5
   1288c:	4909      	ldr	r1, [pc, #36]	; (128b4 <at_handler_ncellmeas+0x15c>)
   1288e:	9500      	str	r5, [sp, #0]
   12890:	f00d fa94 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   12894:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   12896:	a804      	add	r0, sp, #16
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   12898:	f88d 3010 	strb.w	r3, [sp, #16]
		event_handler_list_dispatch(&evt);
   1289c:	f000 fce4 	bl	13268 <event_handler_list_dispatch>
	if (neighbor_cells) {
   128a0:	2c00      	cmp	r4, #0
   128a2:	d080      	beq.n	127a6 <at_handler_ncellmeas+0x4e>
		k_free(neighbor_cells);
   128a4:	4620      	mov	r0, r4
   128a6:	e7ba      	b.n	1281e <at_handler_ncellmeas+0xc6>
   128a8:	200110ae 	.word	0x200110ae
   128ac:	200110af 	.word	0x200110af
   128b0:	000252f9 	.word	0x000252f9
   128b4:	00022f74 	.word	0x00022f74
   128b8:	00025386 	.word	0x00025386
   128bc:	00025325 	.word	0x00025325
   128c0:	0002534c 	.word	0x0002534c
   128c4:	000253b0 	.word	0x000253b0

000128c8 <at_handler_xt3412>:
{
   128c8:	b510      	push	{r4, lr}
   128ca:	4604      	mov	r4, r0
   128cc:	b096      	sub	sp, #88	; 0x58
	struct lte_lc_evt evt = {0};
   128ce:	2100      	movs	r1, #0
   128d0:	2248      	movs	r2, #72	; 0x48
   128d2:	a804      	add	r0, sp, #16
   128d4:	f00f f9f7 	bl	21cc6 <memset>
	err = parse_xt3412(response, &evt.time);
   128d8:	4620      	mov	r0, r4
   128da:	a906      	add	r1, sp, #24
   128dc:	f000 fef8 	bl	136d0 <parse_xt3412>
	if (err) {
   128e0:	b160      	cbz	r0, 128fc <at_handler_xt3412+0x34>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   128e2:	4b0d      	ldr	r3, [pc, #52]	; (12918 <at_handler_xt3412+0x50>)
   128e4:	9003      	str	r0, [sp, #12]
   128e6:	9302      	str	r3, [sp, #8]
   128e8:	2300      	movs	r3, #0
   128ea:	2201      	movs	r2, #1
   128ec:	4618      	mov	r0, r3
   128ee:	e9cd 3300 	strd	r3, r3, [sp]
   128f2:	490a      	ldr	r1, [pc, #40]	; (1291c <at_handler_xt3412+0x54>)
   128f4:	f00d fa62 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
}
   128f8:	b016      	add	sp, #88	; 0x58
   128fa:	bd10      	pop	{r4, pc}
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   128fc:	9b06      	ldr	r3, [sp, #24]
   128fe:	9a07      	ldr	r2, [sp, #28]
   12900:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   12904:	3b08      	subs	r3, #8
   12906:	4313      	orrs	r3, r2
   12908:	d1f6      	bne.n	128f8 <at_handler_xt3412+0x30>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   1290a:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   1290c:	a804      	add	r0, sp, #16
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   1290e:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
   12912:	f000 fca9 	bl	13268 <event_handler_list_dispatch>
   12916:	e7ef      	b.n	128f8 <at_handler_xt3412+0x30>
   12918:	000253dd 	.word	0x000253dd
   1291c:	00022f74 	.word	0x00022f74

00012920 <at_handler_cedrxp>:
{
   12920:	b510      	push	{r4, lr}
   12922:	4604      	mov	r4, r0
   12924:	b096      	sub	sp, #88	; 0x58
	struct lte_lc_evt evt = {0};
   12926:	2100      	movs	r1, #0
   12928:	2248      	movs	r2, #72	; 0x48
   1292a:	a804      	add	r0, sp, #16
   1292c:	f00f f9cb 	bl	21cc6 <memset>
	err = parse_edrx(response, &evt.edrx_cfg);
   12930:	4620      	mov	r0, r4
   12932:	a906      	add	r1, sp, #24
   12934:	f7f7 fac4 	bl	9ec0 <parse_edrx>
	if (err) {
   12938:	b160      	cbz	r0, 12954 <at_handler_cedrxp+0x34>
		LOG_ERR("Can't parse eDRX, error: %d", err);
   1293a:	4b0a      	ldr	r3, [pc, #40]	; (12964 <at_handler_cedrxp+0x44>)
   1293c:	9003      	str	r0, [sp, #12]
   1293e:	9302      	str	r3, [sp, #8]
   12940:	2300      	movs	r3, #0
   12942:	2201      	movs	r2, #1
   12944:	4618      	mov	r0, r3
   12946:	e9cd 3300 	strd	r3, r3, [sp]
   1294a:	4907      	ldr	r1, [pc, #28]	; (12968 <at_handler_cedrxp+0x48>)
   1294c:	f00d fa36 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
}
   12950:	b016      	add	sp, #88	; 0x58
   12952:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   12954:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   12956:	a804      	add	r0, sp, #16
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   12958:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
   1295c:	f000 fc84 	bl	13268 <event_handler_list_dispatch>
   12960:	e7f6      	b.n	12950 <at_handler_cedrxp+0x30>
   12962:	bf00      	nop
   12964:	00025411 	.word	0x00025411
   12968:	00022f74 	.word	0x00022f74

0001296c <at_handler_cscon>:
{
   1296c:	b510      	push	{r4, lr}
   1296e:	4604      	mov	r4, r0
   12970:	b096      	sub	sp, #88	; 0x58
	struct lte_lc_evt evt = {0};
   12972:	2248      	movs	r2, #72	; 0x48
   12974:	2100      	movs	r1, #0
   12976:	a804      	add	r0, sp, #16
   12978:	f00f f9a5 	bl	21cc6 <memset>
	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   1297c:	2201      	movs	r2, #1
   1297e:	4620      	mov	r0, r4
   12980:	a906      	add	r1, sp, #24
   12982:	f000 fd55 	bl	13430 <parse_rrc_mode>
	if (err) {
   12986:	b160      	cbz	r0, 129a2 <at_handler_cscon+0x36>
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   12988:	4b09      	ldr	r3, [pc, #36]	; (129b0 <at_handler_cscon+0x44>)
   1298a:	9003      	str	r0, [sp, #12]
   1298c:	9302      	str	r3, [sp, #8]
   1298e:	2300      	movs	r3, #0
   12990:	2201      	movs	r2, #1
   12992:	4618      	mov	r0, r3
   12994:	e9cd 3300 	strd	r3, r3, [sp]
   12998:	4906      	ldr	r1, [pc, #24]	; (129b4 <at_handler_cscon+0x48>)
   1299a:	f00d fa0f 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
}
   1299e:	b016      	add	sp, #88	; 0x58
   129a0:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   129a2:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   129a4:	a804      	add	r0, sp, #16
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   129a6:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
   129aa:	f000 fc5d 	bl	13268 <event_handler_list_dispatch>
   129ae:	e7f6      	b.n	1299e <at_handler_cscon+0x32>
   129b0:	0002542d 	.word	0x0002542d
   129b4:	00022f74 	.word	0x00022f74

000129b8 <lte_lc_register_handler>:

	return err ? -EFAULT : 0;
}

void lte_lc_register_handler(lte_lc_evt_handler_t handler)
{
   129b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   129ba:	4603      	mov	r3, r0
	if (handler == NULL) {
   129bc:	b950      	cbnz	r0, 129d4 <lte_lc_register_handler+0x1c>
		LOG_INF("NULL as a handler received: Nothing to be done.\n"
   129be:	4a08      	ldr	r2, [pc, #32]	; (129e0 <lte_lc_register_handler+0x28>)
   129c0:	4908      	ldr	r1, [pc, #32]	; (129e4 <lte_lc_register_handler+0x2c>)
   129c2:	e9cd 0201 	strd	r0, r2, [sp, #4]
   129c6:	9000      	str	r0, [sp, #0]
   129c8:	2203      	movs	r2, #3
   129ca:	f00d f9f7 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
			"The handler can be deregistered using lte_lc_deregister_handler()");
		return;
	}

	event_handler_list_append_handler(handler);
}
   129ce:	b005      	add	sp, #20
   129d0:	f85d fb04 	ldr.w	pc, [sp], #4
   129d4:	b005      	add	sp, #20
   129d6:	f85d eb04 	ldr.w	lr, [sp], #4
	event_handler_list_append_handler(handler);
   129da:	f000 bc19 	b.w	13210 <event_handler_list_append_handler>
   129de:	bf00      	nop
   129e0:	00025454 	.word	0x00025454
   129e4:	00022f74 	.word	0x00022f74

000129e8 <lte_lc_psm_req>:

	return 0;
}

int lte_lc_psm_req(bool enable)
{
   129e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	if (enable) {
   129ea:	b368      	cbz	r0, 12a48 <lte_lc_psm_req+0x60>
		if (strlen(psm_param_rptau) == 8 &&
   129ec:	4817      	ldr	r0, [pc, #92]	; (12a4c <lte_lc_psm_req+0x64>)
   129ee:	f7f6 faa6 	bl	8f3e <strlen>
   129f2:	4604      	mov	r4, r0
		    strlen(psm_param_rat) == 8) {
   129f4:	4816      	ldr	r0, [pc, #88]	; (12a50 <lte_lc_psm_req+0x68>)
   129f6:	f7f6 faa2 	bl	8f3e <strlen>
		if (strlen(psm_param_rptau) == 8 &&
   129fa:	2c08      	cmp	r4, #8
   129fc:	d11b      	bne.n	12a36 <lte_lc_psm_req+0x4e>
   129fe:	2808      	cmp	r0, #8
   12a00:	d114      	bne.n	12a2c <lte_lc_psm_req+0x44>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\",\"%s\"",
   12a02:	4a13      	ldr	r2, [pc, #76]	; (12a50 <lte_lc_psm_req+0x68>)
   12a04:	4911      	ldr	r1, [pc, #68]	; (12a4c <lte_lc_psm_req+0x64>)
   12a06:	4813      	ldr	r0, [pc, #76]	; (12a54 <lte_lc_psm_req+0x6c>)
   12a08:	f005 fc78 	bl	182fc <nrf_modem_at_printf>
		}
	} else {
		err = nrf_modem_at_printf(psm_disable);
	}

	if (err) {
   12a0c:	b160      	cbz	r0, 12a28 <lte_lc_psm_req+0x40>
		LOG_ERR("nrf_modem_at_printf failed, reported error: %d", err);
   12a0e:	4b12      	ldr	r3, [pc, #72]	; (12a58 <lte_lc_psm_req+0x70>)
   12a10:	9003      	str	r0, [sp, #12]
   12a12:	9302      	str	r3, [sp, #8]
   12a14:	2300      	movs	r3, #0
   12a16:	2201      	movs	r2, #1
   12a18:	4618      	mov	r0, r3
   12a1a:	e9cd 3300 	strd	r3, r3, [sp]
   12a1e:	490f      	ldr	r1, [pc, #60]	; (12a5c <lte_lc_psm_req+0x74>)
   12a20:	f00d f9cc 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   12a24:	f06f 000d 	mvn.w	r0, #13
	}

	return 0;
}
   12a28:	b004      	add	sp, #16
   12a2a:	bd10      	pop	{r4, pc}
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\"", psm_param_rptau);
   12a2c:	4907      	ldr	r1, [pc, #28]	; (12a4c <lte_lc_psm_req+0x64>)
   12a2e:	480c      	ldr	r0, [pc, #48]	; (12a60 <lte_lc_psm_req+0x78>)
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   12a30:	f005 fc64 	bl	182fc <nrf_modem_at_printf>
   12a34:	e7ea      	b.n	12a0c <lte_lc_psm_req+0x24>
		} else if (strlen(psm_param_rat) == 8) {
   12a36:	2808      	cmp	r0, #8
   12a38:	d102      	bne.n	12a40 <lte_lc_psm_req+0x58>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   12a3a:	4905      	ldr	r1, [pc, #20]	; (12a50 <lte_lc_psm_req+0x68>)
   12a3c:	4809      	ldr	r0, [pc, #36]	; (12a64 <lte_lc_psm_req+0x7c>)
   12a3e:	e7f7      	b.n	12a30 <lte_lc_psm_req+0x48>
			err = nrf_modem_at_printf("AT+CPSMS=1");
   12a40:	4809      	ldr	r0, [pc, #36]	; (12a68 <lte_lc_psm_req+0x80>)
		err = nrf_modem_at_printf(psm_disable);
   12a42:	f005 fc5b 	bl	182fc <nrf_modem_at_printf>
   12a46:	e7e1      	b.n	12a0c <lte_lc_psm_req+0x24>
   12a48:	4808      	ldr	r0, [pc, #32]	; (12a6c <lte_lc_psm_req+0x84>)
   12a4a:	e7fa      	b.n	12a42 <lte_lc_psm_req+0x5a>
   12a4c:	2000c8c1 	.word	0x2000c8c1
   12a50:	2000c8ca 	.word	0x2000c8ca
   12a54:	000254c6 	.word	0x000254c6
   12a58:	0002550d 	.word	0x0002550d
   12a5c:	00022f74 	.word	0x00022f74
   12a60:	000254dd 	.word	0x000254dd
   12a64:	000254ef 	.word	0x000254ef
   12a68:	00025502 	.word	0x00025502
   12a6c:	00025a38 	.word	0x00025a38

00012a70 <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
   12a70:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   12a72:	2400      	movs	r4, #0
{
   12a74:	b091      	sub	sp, #68	; 0x44
   12a76:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   12a78:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
   12a7a:	e9cd 4407 	strd	r4, r4, [sp, #28]
	char tau_ext_str[9] = {0};
   12a7e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
	char tau_legacy_str[9] = {0};
   12a82:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	char active_time_str[9] = {0};
   12a86:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
	char tau_ext_str[9] = {0};
   12a8a:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
	char tau_legacy_str[9] = {0};
   12a8e:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
	if ((tau == NULL) || (active_time == NULL)) {
   12a92:	2800      	cmp	r0, #0
   12a94:	d06c      	beq.n	12b70 <lte_lc_psm_get+0x100>
   12a96:	2900      	cmp	r1, #0
   12a98:	d06a      	beq.n	12b70 <lte_lc_psm_get+0x100>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   12a9a:	4f37      	ldr	r7, [pc, #220]	; (12b78 <lte_lc_psm_get+0x108>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   12a9c:	21a0      	movs	r1, #160	; 0xa0
   12a9e:	4638      	mov	r0, r7
   12aa0:	4a36      	ldr	r2, [pc, #216]	; (12b7c <lte_lc_psm_get+0x10c>)
	response[0] = '\0';
   12aa2:	703c      	strb	r4, [r7, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   12aa4:	f005 fc76 	bl	18394 <nrf_modem_at_cmd>
	if (err) {
   12aa8:	b178      	cbz	r0, 12aca <lte_lc_psm_get+0x5a>
		LOG_ERR("AT command failed, error: %d", err);
   12aaa:	4b35      	ldr	r3, [pc, #212]	; (12b80 <lte_lc_psm_get+0x110>)
   12aac:	9003      	str	r0, [sp, #12]
   12aae:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12ab2:	4620      	mov	r0, r4
   12ab4:	4623      	mov	r3, r4
   12ab6:	9400      	str	r4, [sp, #0]
   12ab8:	2201      	movs	r2, #1
   12aba:	4932      	ldr	r1, [pc, #200]	; (12b84 <lte_lc_psm_get+0x114>)
   12abc:	f00d f97e 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   12ac0:	f06f 040d 	mvn.w	r4, #13
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec", *tau, *active_time);

	return 0;
}
   12ac4:	4620      	mov	r0, r4
   12ac6:	b011      	add	sp, #68	; 0x44
   12ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	comma_ptr = strchr(response, ch);
   12aca:	212c      	movs	r1, #44	; 0x2c
   12acc:	4638      	mov	r0, r7
   12ace:	f00f fa5a 	bl	21f86 <strchr>
	if (!comma_ptr) {
   12ad2:	4604      	mov	r4, r0
   12ad4:	b970      	cbnz	r0, 12af4 <lte_lc_psm_get+0x84>
		return -EBADMSG;
   12ad6:	f06f 044c 	mvn.w	r4, #76	; 0x4c
   12ada:	e7f3      	b.n	12ac4 <lte_lc_psm_get+0x54>
		if (comma_ptr) {
   12adc:	b95c      	cbnz	r4, 12af6 <lte_lc_psm_get+0x86>
			LOG_ERR("AT command parsing failed");
   12ade:	4b2a      	ldr	r3, [pc, #168]	; (12b88 <lte_lc_psm_get+0x118>)
   12ae0:	2201      	movs	r2, #1
   12ae2:	9302      	str	r3, [sp, #8]
   12ae4:	2300      	movs	r3, #0
   12ae6:	4927      	ldr	r1, [pc, #156]	; (12b84 <lte_lc_psm_get+0x114>)
   12ae8:	4618      	mov	r0, r3
   12aea:	e9cd 3300 	strd	r3, r3, [sp]
   12aee:	f00d f965 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
			return -EBADMSG;
   12af2:	e7f0      	b.n	12ad6 <lte_lc_psm_get+0x66>
   12af4:	270c      	movs	r7, #12
			comma_ptr = strchr(comma_ptr + 1, ch);
   12af6:	1c60      	adds	r0, r4, #1
   12af8:	212c      	movs	r1, #44	; 0x2c
   12afa:	f00f fa44 	bl	21f86 <strchr>
	for (int i = 0; i < 12; i++) {
   12afe:	3f01      	subs	r7, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
   12b00:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   12b02:	d1eb      	bne.n	12adc <lte_lc_psm_get+0x6c>
	if (comma_ptr) {
   12b04:	2800      	cmp	r0, #0
   12b06:	d0ea      	beq.n	12ade <lte_lc_psm_get+0x6e>
		strncpy(active_time_str, comma_ptr + 2, 8);
   12b08:	1c81      	adds	r1, r0, #2
   12b0a:	2208      	movs	r2, #8
   12b0c:	a807      	add	r0, sp, #28
   12b0e:	f00f fa61 	bl	21fd4 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   12b12:	1c60      	adds	r0, r4, #1
   12b14:	212c      	movs	r1, #44	; 0x2c
   12b16:	f00f fa36 	bl	21f86 <strchr>
	if (comma_ptr) {
   12b1a:	4604      	mov	r4, r0
   12b1c:	2800      	cmp	r0, #0
   12b1e:	d0de      	beq.n	12ade <lte_lc_psm_get+0x6e>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   12b20:	1c81      	adds	r1, r0, #2
   12b22:	2208      	movs	r2, #8
   12b24:	a80a      	add	r0, sp, #40	; 0x28
   12b26:	f00f fa55 	bl	21fd4 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   12b2a:	212c      	movs	r1, #44	; 0x2c
   12b2c:	1c60      	adds	r0, r4, #1
   12b2e:	f00f fa2a 	bl	21f86 <strchr>
	if (comma_ptr) {
   12b32:	b120      	cbz	r0, 12b3e <lte_lc_psm_get+0xce>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   12b34:	1c81      	adds	r1, r0, #2
   12b36:	2208      	movs	r2, #8
   12b38:	a80d      	add	r0, sp, #52	; 0x34
   12b3a:	f00f fa4b 	bl	21fd4 <strncpy>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   12b3e:	ab05      	add	r3, sp, #20
   12b40:	aa0d      	add	r2, sp, #52	; 0x34
   12b42:	a90a      	add	r1, sp, #40	; 0x28
   12b44:	a807      	add	r0, sp, #28
   12b46:	f000 fbd9 	bl	132fc <parse_psm>
	if (err) {
   12b4a:	4604      	mov	r4, r0
   12b4c:	b158      	cbz	r0, 12b66 <lte_lc_psm_get+0xf6>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   12b4e:	4b0f      	ldr	r3, [pc, #60]	; (12b8c <lte_lc_psm_get+0x11c>)
   12b50:	9003      	str	r0, [sp, #12]
   12b52:	9302      	str	r3, [sp, #8]
   12b54:	2300      	movs	r3, #0
   12b56:	2201      	movs	r2, #1
   12b58:	4618      	mov	r0, r3
   12b5a:	e9cd 3300 	strd	r3, r3, [sp]
   12b5e:	4909      	ldr	r1, [pc, #36]	; (12b84 <lte_lc_psm_get+0x114>)
   12b60:	f00d f92c 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
		return err;
   12b64:	e7ae      	b.n	12ac4 <lte_lc_psm_get+0x54>
	*tau = psm_cfg.tau;
   12b66:	9b05      	ldr	r3, [sp, #20]
   12b68:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
   12b6a:	9b06      	ldr	r3, [sp, #24]
   12b6c:	602b      	str	r3, [r5, #0]
	return 0;
   12b6e:	e7a9      	b.n	12ac4 <lte_lc_psm_get+0x54>
		return -EINVAL;
   12b70:	f06f 0415 	mvn.w	r4, #21
   12b74:	e7a6      	b.n	12ac4 <lte_lc_psm_get+0x54>
   12b76:	bf00      	nop
   12b78:	20011009 	.word	0x20011009
   12b7c:	0002553c 	.word	0x0002553c
   12b80:	00025549 	.word	0x00025549
   12b84:	00022f74 	.word	0x00022f74
   12b88:	00025566 	.word	0x00025566
   12b8c:	00025580 	.word	0x00025580

00012b90 <at_handler_cereg>:
{
   12b90:	b5f0      	push	{r4, r5, r6, r7, lr}
	enum lte_lc_nw_reg_status reg_status = 0;
   12b92:	2400      	movs	r4, #0
{
   12b94:	4605      	mov	r5, r0
   12b96:	b0a9      	sub	sp, #164	; 0xa4
	struct lte_lc_evt evt = {0};
   12b98:	2248      	movs	r2, #72	; 0x48
   12b9a:	2100      	movs	r1, #0
   12b9c:	a816      	add	r0, sp, #88	; 0x58
   12b9e:	f00f f892 	bl	21cc6 <memset>
	struct lte_lc_cell cell = {0};
   12ba2:	2230      	movs	r2, #48	; 0x30
   12ba4:	4621      	mov	r1, r4
   12ba6:	a80a      	add	r0, sp, #40	; 0x28
	enum lte_lc_nw_reg_status reg_status = 0;
   12ba8:	f88d 401e 	strb.w	r4, [sp, #30]
	struct lte_lc_psm_cfg psm_cfg = {0};
   12bac:	af08      	add	r7, sp, #32
	struct lte_lc_cell cell = {0};
   12bae:	f00f f88a 	bl	21cc6 <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   12bb2:	f10d 031f 	add.w	r3, sp, #31
	struct lte_lc_psm_cfg psm_cfg = {0};
   12bb6:	607c      	str	r4, [r7, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   12bb8:	2101      	movs	r1, #1
   12bba:	9300      	str	r3, [sp, #0]
   12bbc:	4628      	mov	r0, r5
   12bbe:	ab0a      	add	r3, sp, #40	; 0x28
   12bc0:	f10d 021e 	add.w	r2, sp, #30
	struct lte_lc_psm_cfg psm_cfg = {0};
   12bc4:	9408      	str	r4, [sp, #32]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   12bc6:	f000 fc91 	bl	134ec <parse_cereg>
	if (err) {
   12bca:	b168      	cbz	r0, 12be8 <at_handler_cereg+0x58>
		LOG_ERR("Failed to parse notification (error %d): %s",
   12bcc:	4b48      	ldr	r3, [pc, #288]	; (12cf0 <at_handler_cereg+0x160>)
   12bce:	e9cd 0503 	strd	r0, r5, [sp, #12]
   12bd2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12bd6:	2201      	movs	r2, #1
   12bd8:	4623      	mov	r3, r4
   12bda:	4620      	mov	r0, r4
   12bdc:	4945      	ldr	r1, [pc, #276]	; (12cf4 <at_handler_cereg+0x164>)
   12bde:	9400      	str	r4, [sp, #0]
   12be0:	f00d f8ec 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
}
   12be4:	b029      	add	sp, #164	; 0xa4
   12be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   12be8:	f89d 301e 	ldrb.w	r3, [sp, #30]
   12bec:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   12bf0:	2b01      	cmp	r3, #1
   12bf2:	d105      	bne.n	12c00 <at_handler_cereg+0x70>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   12bf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12bf6:	3301      	adds	r3, #1
   12bf8:	d05e      	beq.n	12cb8 <at_handler_cereg+0x128>
	z_impl_k_sem_give(sem);
   12bfa:	483f      	ldr	r0, [pc, #252]	; (12cf8 <at_handler_cereg+0x168>)
   12bfc:	f007 fe2a 	bl	1a854 <z_impl_k_sem_give>
	if (event_handler_list_is_empty()) {
   12c00:	f000 fafe 	bl	13200 <event_handler_list_is_empty>
   12c04:	2800      	cmp	r0, #0
   12c06:	d1ed      	bne.n	12be4 <at_handler_cereg+0x54>
	if (reg_status != prev_reg_status) {
   12c08:	4a3c      	ldr	r2, [pc, #240]	; (12cfc <at_handler_cereg+0x16c>)
   12c0a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   12c0e:	7811      	ldrb	r1, [r2, #0]
   12c10:	4299      	cmp	r1, r3
   12c12:	d007      	beq.n	12c24 <at_handler_cereg+0x94>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   12c14:	f88d 0058 	strb.w	r0, [sp, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   12c18:	a816      	add	r0, sp, #88	; 0x58
		prev_reg_status = reg_status;
   12c1a:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
   12c1c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   12c20:	f000 fb22 	bl	13268 <event_handler_list_dispatch>
	if ((cell.id != prev_cell.id) || (cell.tac != prev_cell.tac)) {
   12c24:	4b36      	ldr	r3, [pc, #216]	; (12d00 <at_handler_cereg+0x170>)
   12c26:	990c      	ldr	r1, [sp, #48]	; 0x30
   12c28:	689a      	ldr	r2, [r3, #8]
   12c2a:	4291      	cmp	r1, r2
   12c2c:	d103      	bne.n	12c36 <at_handler_cereg+0xa6>
   12c2e:	68db      	ldr	r3, [r3, #12]
   12c30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12c32:	429a      	cmp	r2, r3
   12c34:	d019      	beq.n	12c6a <at_handler_cereg+0xda>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   12c36:	2304      	movs	r3, #4
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   12c38:	4d31      	ldr	r5, [pc, #196]	; (12d00 <at_handler_cereg+0x170>)
   12c3a:	ac0a      	add	r4, sp, #40	; 0x28
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   12c3c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   12c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   12c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   12c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12c48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   12c4c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   12c50:	ae18      	add	r6, sp, #96	; 0x60
   12c52:	ad0a      	add	r5, sp, #40	; 0x28
   12c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12c56:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   12c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12c5a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   12c5c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   12c60:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   12c64:	a816      	add	r0, sp, #88	; 0x58
   12c66:	f000 faff 	bl	13268 <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
   12c6a:	4a26      	ldr	r2, [pc, #152]	; (12d04 <at_handler_cereg+0x174>)
   12c6c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12c70:	7811      	ldrb	r1, [r2, #0]
   12c72:	4299      	cmp	r1, r3
   12c74:	d008      	beq.n	12c88 <at_handler_cereg+0xf8>
		prev_lte_mode = lte_mode;
   12c76:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   12c78:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
   12c7a:	a816      	add	r0, sp, #88	; 0x58
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   12c7c:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
		evt.lte_mode = lte_mode;
   12c80:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   12c84:	f000 faf0 	bl	13268 <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   12c88:	f89d 401e 	ldrb.w	r4, [sp, #30]
   12c8c:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
   12c90:	2c01      	cmp	r4, #1
   12c92:	d1a7      	bne.n	12be4 <at_handler_cereg+0x54>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   12c94:	4638      	mov	r0, r7
   12c96:	a909      	add	r1, sp, #36	; 0x24
   12c98:	f7ff feea 	bl	12a70 <lte_lc_psm_get>
	if (err) {
   12c9c:	b180      	cbz	r0, 12cc0 <at_handler_cereg+0x130>
		if (err != -EBADMSG) {
   12c9e:	304d      	adds	r0, #77	; 0x4d
   12ca0:	d0a0      	beq.n	12be4 <at_handler_cereg+0x54>
			LOG_ERR("Failed to get PSM information");
   12ca2:	4b19      	ldr	r3, [pc, #100]	; (12d08 <at_handler_cereg+0x178>)
   12ca4:	4622      	mov	r2, r4
   12ca6:	9302      	str	r3, [sp, #8]
   12ca8:	2300      	movs	r3, #0
   12caa:	4912      	ldr	r1, [pc, #72]	; (12cf4 <at_handler_cereg+0x164>)
   12cac:	4618      	mov	r0, r3
   12cae:	e9cd 3300 	strd	r3, r3, [sp]
   12cb2:	f00d f883 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
   12cb6:	e795      	b.n	12be4 <at_handler_cereg+0x54>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   12cb8:	2304      	movs	r3, #4
   12cba:	f88d 301e 	strb.w	r3, [sp, #30]
   12cbe:	e79f      	b.n	12c00 <at_handler_cereg+0x70>
	if ((psm_cfg.tau != prev_psm_cfg.tau) ||
   12cc0:	4b12      	ldr	r3, [pc, #72]	; (12d0c <at_handler_cereg+0x17c>)
   12cc2:	9908      	ldr	r1, [sp, #32]
   12cc4:	681a      	ldr	r2, [r3, #0]
   12cc6:	4291      	cmp	r1, r2
   12cc8:	461a      	mov	r2, r3
   12cca:	d103      	bne.n	12cd4 <at_handler_cereg+0x144>
   12ccc:	685b      	ldr	r3, [r3, #4]
   12cce:	9909      	ldr	r1, [sp, #36]	; 0x24
   12cd0:	4299      	cmp	r1, r3
   12cd2:	d087      	beq.n	12be4 <at_handler_cereg+0x54>
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   12cd4:	e897 0003 	ldmia.w	r7, {r0, r1}
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   12cd8:	2301      	movs	r3, #1
   12cda:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   12cde:	ab18      	add	r3, sp, #96	; 0x60
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   12ce0:	e882 0003 	stmia.w	r2, {r0, r1}
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   12ce4:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
   12ce8:	a816      	add	r0, sp, #88	; 0x58
   12cea:	f000 fabd 	bl	13268 <event_handler_list_dispatch>
   12cee:	e779      	b.n	12be4 <at_handler_cereg+0x54>
   12cf0:	000255ad 	.word	0x000255ad
   12cf4:	00022f74 	.word	0x00022f74
   12cf8:	2000dedc 	.word	0x2000dedc
   12cfc:	200110aa 	.word	0x200110aa
   12d00:	2000ce58 	.word	0x2000ce58
   12d04:	200110a9 	.word	0x200110a9
   12d08:	000255d9 	.word	0x000255d9
   12d0c:	2000ded4 	.word	0x2000ded4

00012d10 <lte_lc_edrx_req>:
}

int lte_lc_edrx_req(bool enable)
{
	int err;
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   12d10:	2204      	movs	r2, #4
   12d12:	2305      	movs	r3, #5
{
   12d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d18:	b087      	sub	sp, #28

	if (!enable) {
   12d1a:	4604      	mov	r4, r0
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   12d1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	if (!enable) {
   12d20:	b958      	cbnz	r0, 12d3a <lte_lc_edrx_req+0x2a>
		err = nrf_modem_at_printf(edrx_disable);
   12d22:	4829      	ldr	r0, [pc, #164]	; (12dc8 <lte_lc_edrx_req+0xb8>)
   12d24:	f005 faea 	bl	182fc <nrf_modem_at_printf>
		if (err) {
   12d28:	2800      	cmp	r0, #0
   12d2a:	d04b      	beq.n	12dc4 <lte_lc_edrx_req+0xb4>
			LOG_ERR("Failed to disable eDRX, reported error: %d", err);
   12d2c:	4b27      	ldr	r3, [pc, #156]	; (12dcc <lte_lc_edrx_req+0xbc>)
   12d2e:	9003      	str	r0, [sp, #12]
			continue;
		}

		err = nrf_modem_at_printf("AT%%XPTW=%d,\"%s\"", actt[i], ptw_param);
		if (err) {
			LOG_ERR("Failed to request PTW, reported error: %d", err);
   12d30:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12d34:	9400      	str	r4, [sp, #0]
   12d36:	4623      	mov	r3, r4
   12d38:	e023      	b.n	12d82 <lte_lc_edrx_req+0x72>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   12d3a:	2500      	movs	r5, #0
					edrx_param_ltem : edrx_param_nbiot;
   12d3c:	4f24      	ldr	r7, [pc, #144]	; (12dd0 <lte_lc_edrx_req+0xc0>)
   12d3e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 12df0 <lte_lc_edrx_req+0xe0>
   12d42:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 12df4 <lte_lc_edrx_req+0xe4>
   12d46:	ae04      	add	r6, sp, #16
		char *edrx_param = (actt[i] == AT_CEDRXS_ACTT_WB) ?
   12d48:	f856 ab04 	ldr.w	sl, [r6], #4
					edrx_param_ltem : edrx_param_nbiot;
   12d4c:	4b21      	ldr	r3, [pc, #132]	; (12dd4 <lte_lc_edrx_req+0xc4>)
   12d4e:	f1ba 0f04 	cmp.w	sl, #4
   12d52:	bf14      	ite	ne
   12d54:	463c      	movne	r4, r7
   12d56:	4644      	moveq	r4, r8
		if (strlen(edrx_param) == 4) {
   12d58:	4620      	mov	r0, r4
					edrx_param_ltem : edrx_param_nbiot;
   12d5a:	bf14      	ite	ne
   12d5c:	46cb      	movne	fp, r9
   12d5e:	469b      	moveq	fp, r3
		if (strlen(edrx_param) == 4) {
   12d60:	f7f6 f8ed 	bl	8f3e <strlen>
   12d64:	2804      	cmp	r0, #4
   12d66:	d118      	bne.n	12d9a <lte_lc_edrx_req+0x8a>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d,\"%s\"", actt[i], edrx_param);
   12d68:	4622      	mov	r2, r4
   12d6a:	4651      	mov	r1, sl
   12d6c:	481a      	ldr	r0, [pc, #104]	; (12dd8 <lte_lc_edrx_req+0xc8>)
   12d6e:	f005 fac5 	bl	182fc <nrf_modem_at_printf>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d", actt[i]);
   12d72:	4604      	mov	r4, r0
		if (err) {
   12d74:	b1b0      	cbz	r0, 12da4 <lte_lc_edrx_req+0x94>
			LOG_ERR("Failed to enable eDRX, reported error: %d", err);
   12d76:	4b19      	ldr	r3, [pc, #100]	; (12ddc <lte_lc_edrx_req+0xcc>)
   12d78:	9003      	str	r0, [sp, #12]
   12d7a:	9302      	str	r3, [sp, #8]
   12d7c:	2300      	movs	r3, #0
   12d7e:	e9cd 3300 	strd	r3, r3, [sp]
   12d82:	4618      	mov	r0, r3
   12d84:	2201      	movs	r2, #1
   12d86:	4916      	ldr	r1, [pc, #88]	; (12de0 <lte_lc_edrx_req+0xd0>)
   12d88:	f00d f818 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
			return -EFAULT;
   12d8c:	f06f 000d 	mvn.w	r0, #13
			return -EFAULT;
		}
	}

	return 0;
}
   12d90:	b007      	add	sp, #28
   12d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   12d96:	2501      	movs	r5, #1
   12d98:	e7d6      	b.n	12d48 <lte_lc_edrx_req+0x38>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d", actt[i]);
   12d9a:	4651      	mov	r1, sl
   12d9c:	4811      	ldr	r0, [pc, #68]	; (12de4 <lte_lc_edrx_req+0xd4>)
   12d9e:	f005 faad 	bl	182fc <nrf_modem_at_printf>
   12da2:	e7e6      	b.n	12d72 <lte_lc_edrx_req+0x62>
		if (strlen(ptw_param) != 4) {
   12da4:	4658      	mov	r0, fp
   12da6:	f7f6 f8ca 	bl	8f3e <strlen>
   12daa:	2804      	cmp	r0, #4
   12dac:	d108      	bne.n	12dc0 <lte_lc_edrx_req+0xb0>
		err = nrf_modem_at_printf("AT%%XPTW=%d,\"%s\"", actt[i], ptw_param);
   12dae:	465a      	mov	r2, fp
   12db0:	4651      	mov	r1, sl
   12db2:	480d      	ldr	r0, [pc, #52]	; (12de8 <lte_lc_edrx_req+0xd8>)
   12db4:	f005 faa2 	bl	182fc <nrf_modem_at_printf>
		if (err) {
   12db8:	b110      	cbz	r0, 12dc0 <lte_lc_edrx_req+0xb0>
			LOG_ERR("Failed to request PTW, reported error: %d", err);
   12dba:	4b0c      	ldr	r3, [pc, #48]	; (12dec <lte_lc_edrx_req+0xdc>)
   12dbc:	9003      	str	r0, [sp, #12]
   12dbe:	e7b7      	b.n	12d30 <lte_lc_edrx_req+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   12dc0:	2d00      	cmp	r5, #0
   12dc2:	d0e8      	beq.n	12d96 <lte_lc_edrx_req+0x86>
		return 0;
   12dc4:	2000      	movs	r0, #0
   12dc6:	e7e3      	b.n	12d90 <lte_lc_edrx_req+0x80>
   12dc8:	00025a42 	.word	0x00025a42
   12dcc:	000255f7 	.word	0x000255f7
   12dd0:	2000c8d3 	.word	0x2000c8d3
   12dd4:	200110b6 	.word	0x200110b6
   12dd8:	00025622 	.word	0x00025622
   12ddc:	00025645 	.word	0x00025645
   12de0:	00022f74 	.word	0x00022f74
   12de4:	00025636 	.word	0x00025636
   12de8:	0002566f 	.word	0x0002566f
   12dec:	00025680 	.word	0x00025680
   12df0:	2000c8d8 	.word	0x2000c8d8
   12df4:	200110b1 	.word	0x200110b1

00012df8 <lte_lc_nw_reg_status_get>:

	return 0;
}

int lte_lc_nw_reg_status_get(enum lte_lc_nw_reg_status *status)
{
   12df8:	b530      	push	{r4, r5, lr}
	int err;
	uint16_t status_tmp;
	uint32_t cell_id = 0;
   12dfa:	2500      	movs	r5, #0
{
   12dfc:	b087      	sub	sp, #28

	if (status == NULL) {
   12dfe:	4604      	mov	r4, r0
	uint32_t cell_id = 0;
   12e00:	9505      	str	r5, [sp, #20]
	if (status == NULL) {
   12e02:	b300      	cbz	r0, 12e46 <lte_lc_nw_reg_status_get+0x4e>
		return -EINVAL;
	}

	/* Read network registration status */
	err = nrf_modem_at_scanf("AT+CEREG?",
   12e04:	4911      	ldr	r1, [pc, #68]	; (12e4c <lte_lc_nw_reg_status_get+0x54>)
   12e06:	4812      	ldr	r0, [pc, #72]	; (12e50 <lte_lc_nw_reg_status_get+0x58>)
   12e08:	ab05      	add	r3, sp, #20
   12e0a:	f10d 0212 	add.w	r2, sp, #18
   12e0e:	f005 fb55 	bl	184bc <nrf_modem_at_scanf>
		"%hu,"		/* <stat> */
		"%*[^,],"	/* <tac> */
		"\"%x\",",	/* <ci> */
		&status_tmp,
		&cell_id);
	if (err < 1) {
   12e12:	2800      	cmp	r0, #0
   12e14:	dc0e      	bgt.n	12e34 <lte_lc_nw_reg_status_get+0x3c>
		LOG_ERR("Could not get registration status, error: %d", err);
   12e16:	4b0f      	ldr	r3, [pc, #60]	; (12e54 <lte_lc_nw_reg_status_get+0x5c>)
   12e18:	9003      	str	r0, [sp, #12]
   12e1a:	e9cd 5301 	strd	r5, r3, [sp, #4]
   12e1e:	4628      	mov	r0, r5
   12e20:	462b      	mov	r3, r5
   12e22:	2201      	movs	r2, #1
   12e24:	490c      	ldr	r1, [pc, #48]	; (12e58 <lte_lc_nw_reg_status_get+0x60>)
   12e26:	9500      	str	r5, [sp, #0]
   12e28:	f00c ffc8 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   12e2c:	f06f 000d 	mvn.w	r0, #13
	} else {
		*status = status_tmp;
	}

	return 0;
}
   12e30:	b007      	add	sp, #28
   12e32:	bd30      	pop	{r4, r5, pc}
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   12e34:	9b05      	ldr	r3, [sp, #20]
	return 0;
   12e36:	2000      	movs	r0, #0
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   12e38:	3301      	adds	r3, #1
		*status = status_tmp;
   12e3a:	bf0c      	ite	eq
   12e3c:	2304      	moveq	r3, #4
   12e3e:	f89d 3012 	ldrbne.w	r3, [sp, #18]
		*status = LTE_LC_NW_REG_UNKNOWN;
   12e42:	7023      	strb	r3, [r4, #0]
   12e44:	e7f4      	b.n	12e30 <lte_lc_nw_reg_status_get+0x38>
		return -EINVAL;
   12e46:	f06f 0015 	mvn.w	r0, #21
   12e4a:	e7f1      	b.n	12e30 <lte_lc_nw_reg_status_get+0x38>
   12e4c:	000256aa 	.word	0x000256aa
   12e50:	000256c7 	.word	0x000256c7
   12e54:	000256d1 	.word	0x000256d1
   12e58:	00022f74 	.word	0x00022f74

00012e5c <lte_lc_system_mode_set>:

int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
   12e5c:	b530      	push	{r4, r5, lr}
	int err;

	switch (mode) {
   12e5e:	2807      	cmp	r0, #7
{
   12e60:	4605      	mov	r5, r0
   12e62:	460c      	mov	r4, r1
   12e64:	b085      	sub	sp, #20
	switch (mode) {
   12e66:	d90e      	bls.n	12e86 <lte_lc_system_mode_set+0x2a>
	case LTE_LC_SYSTEM_MODE_GPS:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
   12e68:	4b19      	ldr	r3, [pc, #100]	; (12ed0 <lte_lc_system_mode_set+0x74>)
   12e6a:	9003      	str	r0, [sp, #12]
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT:
	case LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO:
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO:
		break;
	default:
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   12e6c:	9302      	str	r3, [sp, #8]
   12e6e:	2300      	movs	r3, #0
   12e70:	2201      	movs	r2, #1
   12e72:	4618      	mov	r0, r3
   12e74:	e9cd 3300 	strd	r3, r3, [sp]
   12e78:	4916      	ldr	r1, [pc, #88]	; (12ed4 <lte_lc_system_mode_set+0x78>)
   12e7a:	f00c ff9f 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   12e7e:	f06f 0015 	mvn.w	r0, #21
	sys_mode_target = mode;
	mode_pref_current = preference;
	mode_pref_target = preference;

	return 0;
}
   12e82:	b005      	add	sp, #20
   12e84:	bd30      	pop	{r4, r5, pc}
	switch (preference) {
   12e86:	2904      	cmp	r1, #4
   12e88:	d902      	bls.n	12e90 <lte_lc_system_mode_set+0x34>
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   12e8a:	4b13      	ldr	r3, [pc, #76]	; (12ed8 <lte_lc_system_mode_set+0x7c>)
   12e8c:	9103      	str	r1, [sp, #12]
   12e8e:	e7ed      	b.n	12e6c <lte_lc_system_mode_set+0x10>
	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
   12e90:	4b12      	ldr	r3, [pc, #72]	; (12edc <lte_lc_system_mode_set+0x80>)
   12e92:	5c5a      	ldrb	r2, [r3, r1]
   12e94:	4b12      	ldr	r3, [pc, #72]	; (12ee0 <lte_lc_system_mode_set+0x84>)
   12e96:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   12e9a:	4812      	ldr	r0, [pc, #72]	; (12ee4 <lte_lc_system_mode_set+0x88>)
   12e9c:	f005 fa2e 	bl	182fc <nrf_modem_at_printf>
	if (err) {
   12ea0:	b168      	cbz	r0, 12ebe <lte_lc_system_mode_set+0x62>
		LOG_ERR("Could not send AT command, error: %d", err);
   12ea2:	4b11      	ldr	r3, [pc, #68]	; (12ee8 <lte_lc_system_mode_set+0x8c>)
   12ea4:	9003      	str	r0, [sp, #12]
   12ea6:	9302      	str	r3, [sp, #8]
   12ea8:	2300      	movs	r3, #0
   12eaa:	2201      	movs	r2, #1
   12eac:	4618      	mov	r0, r3
   12eae:	e9cd 3300 	strd	r3, r3, [sp]
   12eb2:	4908      	ldr	r1, [pc, #32]	; (12ed4 <lte_lc_system_mode_set+0x78>)
   12eb4:	f00c ff82 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   12eb8:	f06f 000d 	mvn.w	r0, #13
   12ebc:	e7e1      	b.n	12e82 <lte_lc_system_mode_set+0x26>
	sys_mode_current = mode;
   12ebe:	4b0b      	ldr	r3, [pc, #44]	; (12eec <lte_lc_system_mode_set+0x90>)
   12ec0:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   12ec2:	4b0b      	ldr	r3, [pc, #44]	; (12ef0 <lte_lc_system_mode_set+0x94>)
   12ec4:	701d      	strb	r5, [r3, #0]
	mode_pref_current = preference;
   12ec6:	4b0b      	ldr	r3, [pc, #44]	; (12ef4 <lte_lc_system_mode_set+0x98>)
   12ec8:	701c      	strb	r4, [r3, #0]
	mode_pref_target = preference;
   12eca:	4b0b      	ldr	r3, [pc, #44]	; (12ef8 <lte_lc_system_mode_set+0x9c>)
   12ecc:	701c      	strb	r4, [r3, #0]
	return 0;
   12ece:	e7d8      	b.n	12e82 <lte_lc_system_mode_set+0x26>
   12ed0:	000256fe 	.word	0x000256fe
   12ed4:	00022f74 	.word	0x00022f74
   12ed8:	00025720 	.word	0x00025720
   12edc:	00025a28 	.word	0x00025a28
   12ee0:	00023488 	.word	0x00023488
   12ee4:	00025745 	.word	0x00025745
   12ee8:	0002575b 	.word	0x0002575b
   12eec:	200110ab 	.word	0x200110ab
   12ef0:	2000c8c0 	.word	0x2000c8c0
   12ef4:	200110ac 	.word	0x200110ac
   12ef8:	200110ad 	.word	0x200110ad

00012efc <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode,
			   enum lte_lc_system_mode_preference *preference)
{
   12efc:	b570      	push	{r4, r5, r6, lr}
	int err;
	int mode_bitmask = 0;
	int ltem_mode = 0;
   12efe:	2600      	movs	r6, #0
{
   12f00:	b088      	sub	sp, #32
   12f02:	460c      	mov	r4, r1
	int nbiot_mode = 0;
	int gps_mode = 0;
	int mode_preference = 0;

	if (mode == NULL) {
   12f04:	4605      	mov	r5, r0
	int nbiot_mode = 0;
   12f06:	e9cd 6604 	strd	r6, r6, [sp, #16]
	int mode_preference = 0;
   12f0a:	e9cd 6606 	strd	r6, r6, [sp, #24]
	if (mode == NULL) {
   12f0e:	2800      	cmp	r0, #0
   12f10:	f000 8081 	beq.w	13016 <lte_lc_system_mode_get+0x11a>
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   12f14:	ab07      	add	r3, sp, #28
   12f16:	9301      	str	r3, [sp, #4]
   12f18:	ab06      	add	r3, sp, #24
   12f1a:	9300      	str	r3, [sp, #0]
   12f1c:	493f      	ldr	r1, [pc, #252]	; (1301c <lte_lc_system_mode_get+0x120>)
   12f1e:	4840      	ldr	r0, [pc, #256]	; (13020 <lte_lc_system_mode_get+0x124>)
   12f20:	ab05      	add	r3, sp, #20
   12f22:	aa04      	add	r2, sp, #16
   12f24:	f005 faca 	bl	184bc <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
   12f28:	2804      	cmp	r0, #4
   12f2a:	d00b      	beq.n	12f44 <lte_lc_system_mode_get+0x48>
		LOG_ERR("Failed to get system mode, error: %d", err);
   12f2c:	4b3d      	ldr	r3, [pc, #244]	; (13024 <lte_lc_system_mode_get+0x128>)
   12f2e:	9003      	str	r0, [sp, #12]
   12f30:	e9cd 6301 	strd	r6, r3, [sp, #4]
   12f34:	9600      	str	r6, [sp, #0]
			break;
		case 4:
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
			break;
		default:
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   12f36:	2300      	movs	r3, #0
   12f38:	2201      	movs	r2, #1
   12f3a:	4618      	mov	r0, r3
   12f3c:	493a      	ldr	r1, [pc, #232]	; (13028 <lte_lc_system_mode_get+0x12c>)
   12f3e:	f00c ff3d 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
			return -EFAULT;
   12f42:	e03d      	b.n	12fc0 <lte_lc_system_mode_get+0xc4>
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   12f44:	9b05      	ldr	r3, [sp, #20]
   12f46:	1e1a      	subs	r2, r3, #0
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   12f48:	9b04      	ldr	r3, [sp, #16]
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   12f4a:	bf18      	it	ne
   12f4c:	2201      	movne	r2, #1
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   12f4e:	3b00      	subs	r3, #0
   12f50:	bf18      	it	ne
   12f52:	2301      	movne	r3, #1
   12f54:	005b      	lsls	r3, r3, #1
   12f56:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   12f5a:	9a06      	ldr	r2, [sp, #24]
   12f5c:	3a00      	subs	r2, #0
   12f5e:	bf18      	it	ne
   12f60:	2201      	movne	r2, #1
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   12f62:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
	switch (mode_bitmask) {
   12f66:	2b0e      	cmp	r3, #14
   12f68:	d820      	bhi.n	12fac <lte_lc_system_mode_get+0xb0>
   12f6a:	e8df f003 	tbb	[pc, r3]
   12f6e:	1f2c      	.short	0x1f2c
   12f70:	1f2e1f08 	.word	0x1f2e1f08
   12f74:	1f151f1b 	.word	0x1f151f1b
   12f78:	1f191f17 	.word	0x1f191f17
   12f7c:	1d          	.byte	0x1d
   12f7d:	00          	.byte	0x00
   12f7e:	2301      	movs	r3, #1
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   12f80:	702b      	strb	r3, [r5, #0]
	if (preference != NULL) {
   12f82:	2c00      	cmp	r4, #0
   12f84:	d03d      	beq.n	13002 <lte_lc_system_mode_get+0x106>
		switch (mode_preference) {
   12f86:	9a07      	ldr	r2, [sp, #28]
   12f88:	2300      	movs	r3, #0
   12f8a:	2a04      	cmp	r2, #4
   12f8c:	d833      	bhi.n	12ff6 <lte_lc_system_mode_get+0xfa>
   12f8e:	e8df f002 	tbb	[pc, r2]
   12f92:	1e1f      	.short	0x1e1f
   12f94:	2e2c      	.short	0x2e2c
   12f96:	30          	.byte	0x30
   12f97:	00          	.byte	0x00
		break;
   12f98:	2303      	movs	r3, #3
   12f9a:	e7f1      	b.n	12f80 <lte_lc_system_mode_get+0x84>
		break;
   12f9c:	2304      	movs	r3, #4
   12f9e:	e7ef      	b.n	12f80 <lte_lc_system_mode_get+0x84>
		break;
   12fa0:	2305      	movs	r3, #5
   12fa2:	e7ed      	b.n	12f80 <lte_lc_system_mode_get+0x84>
		break;
   12fa4:	2306      	movs	r3, #6
   12fa6:	e7eb      	b.n	12f80 <lte_lc_system_mode_get+0x84>
		break;
   12fa8:	2307      	movs	r3, #7
   12faa:	e7e9      	b.n	12f80 <lte_lc_system_mode_get+0x84>
		LOG_ERR("Invalid system mode, assuming parsing error");
   12fac:	4b1f      	ldr	r3, [pc, #124]	; (1302c <lte_lc_system_mode_get+0x130>)
   12fae:	2201      	movs	r2, #1
   12fb0:	e9cd 6301 	strd	r6, r3, [sp, #4]
   12fb4:	2300      	movs	r3, #0
   12fb6:	491c      	ldr	r1, [pc, #112]	; (13028 <lte_lc_system_mode_get+0x12c>)
   12fb8:	4618      	mov	r0, r3
   12fba:	9600      	str	r6, [sp, #0]
   12fbc:	f00c fefe 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   12fc0:	f06f 000d 	mvn.w	r0, #13
   12fc4:	e023      	b.n	1300e <lte_lc_system_mode_get+0x112>
	switch (mode_bitmask) {
   12fc6:	2300      	movs	r3, #0
   12fc8:	e7da      	b.n	12f80 <lte_lc_system_mode_get+0x84>
   12fca:	2302      	movs	r3, #2
   12fcc:	e7d8      	b.n	12f80 <lte_lc_system_mode_get+0x84>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   12fce:	2301      	movs	r3, #1
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   12fd0:	7023      	strb	r3, [r4, #0]
		}
	}

	if (sys_mode_current != *mode) {
   12fd2:	4b17      	ldr	r3, [pc, #92]	; (13030 <lte_lc_system_mode_get+0x134>)
   12fd4:	782a      	ldrb	r2, [r5, #0]
   12fd6:	7819      	ldrb	r1, [r3, #0]
   12fd8:	4291      	cmp	r1, r2
   12fda:	d11a      	bne.n	13012 <lte_lc_system_mode_get+0x116>
		LOG_DBG("Current system mode updated from %d to %d",
			sys_mode_current, *mode);
		sys_mode_current = *mode;
	}

	if ((preference != NULL) && (mode_pref_current != *preference)) {
   12fdc:	4b15      	ldr	r3, [pc, #84]	; (13034 <lte_lc_system_mode_get+0x138>)
   12fde:	7822      	ldrb	r2, [r4, #0]
   12fe0:	7819      	ldrb	r1, [r3, #0]
   12fe2:	4291      	cmp	r1, r2
   12fe4:	d012      	beq.n	1300c <lte_lc_system_mode_get+0x110>
		LOG_DBG("Current system mode preference updated from %d to %d",
			mode_pref_current, *preference);
		mode_pref_current = *preference;
   12fe6:	701a      	strb	r2, [r3, #0]
   12fe8:	e010      	b.n	1300c <lte_lc_system_mode_get+0x110>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   12fea:	2302      	movs	r3, #2
   12fec:	e7f0      	b.n	12fd0 <lte_lc_system_mode_get+0xd4>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   12fee:	2303      	movs	r3, #3
   12ff0:	e7ee      	b.n	12fd0 <lte_lc_system_mode_get+0xd4>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   12ff2:	2304      	movs	r3, #4
   12ff4:	e7ec      	b.n	12fd0 <lte_lc_system_mode_get+0xd4>
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   12ff6:	9203      	str	r2, [sp, #12]
   12ff8:	4a0f      	ldr	r2, [pc, #60]	; (13038 <lte_lc_system_mode_get+0x13c>)
   12ffa:	9300      	str	r3, [sp, #0]
   12ffc:	e9cd 3201 	strd	r3, r2, [sp, #4]
   13000:	e799      	b.n	12f36 <lte_lc_system_mode_get+0x3a>
	if (sys_mode_current != *mode) {
   13002:	4a0b      	ldr	r2, [pc, #44]	; (13030 <lte_lc_system_mode_get+0x134>)
   13004:	7811      	ldrb	r1, [r2, #0]
   13006:	4299      	cmp	r1, r3
		sys_mode_current = *mode;
   13008:	bf18      	it	ne
   1300a:	7013      	strbne	r3, [r2, #0]
	}

	return 0;
   1300c:	2000      	movs	r0, #0
}
   1300e:	b008      	add	sp, #32
   13010:	bd70      	pop	{r4, r5, r6, pc}
		sys_mode_current = *mode;
   13012:	701a      	strb	r2, [r3, #0]
	if ((preference != NULL) && (mode_pref_current != *preference)) {
   13014:	e7e2      	b.n	12fdc <lte_lc_system_mode_get+0xe0>
		return -EINVAL;
   13016:	f06f 0015 	mvn.w	r0, #21
   1301a:	e7f8      	b.n	1300e <lte_lc_system_mode_get+0x112>
   1301c:	00025780 	.word	0x00025780
   13020:	0002579b 	.word	0x0002579b
   13024:	000257ab 	.word	0x000257ab
   13028:	00022f74 	.word	0x00022f74
   1302c:	000257d0 	.word	0x000257d0
   13030:	200110ab 	.word	0x200110ab
   13034:	200110ac 	.word	0x200110ac
   13038:	000257fc 	.word	0x000257fc

0001303c <init_and_config>:
{
   1303c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (is_initialized) {
   13040:	4d20      	ldr	r5, [pc, #128]	; (130c4 <init_and_config+0x88>)
   13042:	7829      	ldrb	r1, [r5, #0]
   13044:	b121      	cbz	r1, 13050 <init_and_config+0x14>
		printk("The library is already initialized and configured");
   13046:	4820      	ldr	r0, [pc, #128]	; (130c8 <init_and_config+0x8c>)
   13048:	f00b f848 	bl	1e0dc <printk>
		return 0;
   1304c:	2400      	movs	r4, #0
   1304e:	e010      	b.n	13072 <init_and_config+0x36>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   13050:	f8df 809c 	ldr.w	r8, [pc, #156]	; 130f0 <init_and_config+0xb4>
   13054:	4e1d      	ldr	r6, [pc, #116]	; (130cc <init_and_config+0x90>)
	return z_impl_k_sem_init(sem, initial_count, limit);
   13056:	2201      	movs	r2, #1
   13058:	481d      	ldr	r0, [pc, #116]	; (130d0 <init_and_config+0x94>)
   1305a:	f00e fa8b 	bl	21574 <z_impl_k_sem_init>
   1305e:	4641      	mov	r1, r8
   13060:	4630      	mov	r0, r6
   13062:	f7ff ff4b 	bl	12efc <lte_lc_system_mode_get>
	if (err) {
   13066:	4604      	mov	r4, r0
   13068:	b130      	cbz	r0, 13078 <init_and_config+0x3c>
		printk("Could not get current system mode, error: %d", err);
   1306a:	4601      	mov	r1, r0
   1306c:	4819      	ldr	r0, [pc, #100]	; (130d4 <init_and_config+0x98>)
			printk("Could not set system mode, error: %d", err);
   1306e:	f00b f835 	bl	1e0dc <printk>
}
   13072:	4620      	mov	r0, r4
   13074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((sys_mode_current != sys_mode_target) ||
   13078:	7833      	ldrb	r3, [r6, #0]
   1307a:	4e17      	ldr	r6, [pc, #92]	; (130d8 <init_and_config+0x9c>)
	    (mode_pref_current != mode_pref_target)) {
   1307c:	4f17      	ldr	r7, [pc, #92]	; (130dc <init_and_config+0xa0>)
	if ((sys_mode_current != sys_mode_target) ||
   1307e:	7830      	ldrb	r0, [r6, #0]
	    (mode_pref_current != mode_pref_target)) {
   13080:	7839      	ldrb	r1, [r7, #0]
	if ((sys_mode_current != sys_mode_target) ||
   13082:	4283      	cmp	r3, r0
   13084:	d103      	bne.n	1308e <init_and_config+0x52>
	    (mode_pref_current != mode_pref_target)) {
   13086:	f898 2000 	ldrb.w	r2, [r8]
	if ((sys_mode_current != sys_mode_target) ||
   1308a:	428a      	cmp	r2, r1
   1308c:	d013      	beq.n	130b6 <init_and_config+0x7a>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   1308e:	f7ff fee5 	bl	12e5c <lte_lc_system_mode_set>
		if (err) {
   13092:	4604      	mov	r4, r0
   13094:	b110      	cbz	r0, 1309c <init_and_config+0x60>
			printk("Could not set system mode, error: %d", err);
   13096:	4601      	mov	r1, r0
   13098:	4811      	ldr	r0, [pc, #68]	; (130e0 <init_and_config+0xa4>)
   1309a:	e7e8      	b.n	1306e <init_and_config+0x32>
		printk("System mode (%d) and preference (%d) configured",
   1309c:	783a      	ldrb	r2, [r7, #0]
   1309e:	7831      	ldrb	r1, [r6, #0]
   130a0:	4810      	ldr	r0, [pc, #64]	; (130e4 <init_and_config+0xa8>)
		printk("System mode (%d) and preference (%d) are already configured",
   130a2:	f00b f81b 	bl	1e0dc <printk>
	err = enable_notifications();
   130a6:	f7ff fa99 	bl	125dc <enable_notifications>
	if (err) {
   130aa:	4604      	mov	r4, r0
   130ac:	b130      	cbz	r0, 130bc <init_and_config+0x80>
		printk("Failed to enable notifications");
   130ae:	480e      	ldr	r0, [pc, #56]	; (130e8 <init_and_config+0xac>)
   130b0:	f00b f814 	bl	1e0dc <printk>
		return err;
   130b4:	e7dd      	b.n	13072 <init_and_config+0x36>
		printk("System mode (%d) and preference (%d) are already configured",
   130b6:	4619      	mov	r1, r3
   130b8:	480c      	ldr	r0, [pc, #48]	; (130ec <init_and_config+0xb0>)
   130ba:	e7f2      	b.n	130a2 <init_and_config+0x66>
	is_initialized = true;
   130bc:	2301      	movs	r3, #1
   130be:	702b      	strb	r3, [r5, #0]
	return 0;
   130c0:	e7c4      	b.n	1304c <init_and_config+0x10>
   130c2:	bf00      	nop
   130c4:	200110bb 	.word	0x200110bb
   130c8:	0002581b 	.word	0x0002581b
   130cc:	200110ab 	.word	0x200110ab
   130d0:	2000dedc 	.word	0x2000dedc
   130d4:	0002584d 	.word	0x0002584d
   130d8:	2000c8c0 	.word	0x2000c8c0
   130dc:	200110ad 	.word	0x200110ad
   130e0:	0002587a 	.word	0x0002587a
   130e4:	0002589f 	.word	0x0002589f
   130e8:	0002590b 	.word	0x0002590b
   130ec:	000258cf 	.word	0x000258cf
   130f0:	200110ac 	.word	0x200110ac

000130f4 <lte_lc_func_mode_set>:

	return 0;
}

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
   130f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	switch (mode) {
   130f6:	2804      	cmp	r0, #4
{
   130f8:	4604      	mov	r4, r0
   130fa:	b085      	sub	sp, #20
	switch (mode) {
   130fc:	d820      	bhi.n	13140 <lte_lc_func_mode_set+0x4c>
   130fe:	2804      	cmp	r0, #4
   13100:	d823      	bhi.n	1314a <lte_lc_func_mode_set+0x56>
   13102:	e8df f000 	tbb	[pc, r0]
   13106:	303a      	.short	0x303a
   13108:	223a      	.short	0x223a
   1310a:	3a          	.byte	0x3a
   1310b:	00          	.byte	0x00
   1310c:	2501      	movs	r5, #1
   1310e:	4b29      	ldr	r3, [pc, #164]	; (131b4 <lte_lc_func_mode_set+0xc0>)
   13110:	40b5      	lsls	r5, r6
   13112:	401d      	ands	r5, r3
   13114:	d131      	bne.n	1317a <lte_lc_func_mode_set+0x86>
   13116:	2e01      	cmp	r6, #1
   13118:	d117      	bne.n	1314a <lte_lc_func_mode_set+0x56>
	case LTE_LC_FUNC_MODE_ACTIVATE_LTE:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_ACTIVATE_LTE);

		err = enable_notifications();
   1311a:	f7ff fa5f 	bl	125dc <enable_notifications>
		if (err) {
   1311e:	b360      	cbz	r0, 1317a <lte_lc_func_mode_set+0x86>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   13120:	4b25      	ldr	r3, [pc, #148]	; (131b8 <lte_lc_func_mode_set+0xc4>)
   13122:	9003      	str	r0, [sp, #12]
   13124:	e9cd 5301 	strd	r5, r3, [sp, #4]
   13128:	462b      	mov	r3, r5
   1312a:	9500      	str	r5, [sp, #0]
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
		if (err) {
			LOG_ERR("Failed to enable notifications, error: %d", err);
   1312c:	2201      	movs	r2, #1
   1312e:	4618      	mov	r0, r3
   13130:	4922      	ldr	r1, [pc, #136]	; (131bc <lte_lc_func_mode_set+0xc8>)
   13132:	f00c fe43 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
			return -EFAULT;
   13136:	f06f 050d 	mvn.w	r5, #13
		LOG_DBG("CFUN monitor callback: %p", e->callback);
		e->callback(mode, e->context);
	}

	return 0;
}
   1313a:	4628      	mov	r0, r5
   1313c:	b005      	add	sp, #20
   1313e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (mode) {
   13140:	f1a0 0614 	sub.w	r6, r0, #20
   13144:	b2f6      	uxtb	r6, r6
   13146:	2e18      	cmp	r6, #24
   13148:	d9e0      	bls.n	1310c <lte_lc_func_mode_set+0x18>
		LOG_ERR("Invalid functional mode: %d", mode);
   1314a:	4b1d      	ldr	r3, [pc, #116]	; (131c0 <lte_lc_func_mode_set+0xcc>)
   1314c:	2201      	movs	r2, #1
   1314e:	9302      	str	r3, [sp, #8]
   13150:	2300      	movs	r3, #0
   13152:	491a      	ldr	r1, [pc, #104]	; (131bc <lte_lc_func_mode_set+0xc8>)
   13154:	4618      	mov	r0, r3
   13156:	e9cd 3300 	strd	r3, r3, [sp]
   1315a:	9403      	str	r4, [sp, #12]
   1315c:	f00c fe2e 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   13160:	f06f 0515 	mvn.w	r5, #21
   13164:	e7e9      	b.n	1313a <lte_lc_func_mode_set+0x46>
		err = enable_notifications();
   13166:	f7ff fa39 	bl	125dc <enable_notifications>
		if (err) {
   1316a:	b130      	cbz	r0, 1317a <lte_lc_func_mode_set+0x86>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   1316c:	4b12      	ldr	r3, [pc, #72]	; (131b8 <lte_lc_func_mode_set+0xc4>)
   1316e:	9003      	str	r0, [sp, #12]
   13170:	9302      	str	r3, [sp, #8]
   13172:	2300      	movs	r3, #0
   13174:	e9cd 3300 	strd	r3, r3, [sp]
   13178:	e7d8      	b.n	1312c <lte_lc_func_mode_set+0x38>
	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
   1317a:	4621      	mov	r1, r4
   1317c:	4811      	ldr	r0, [pc, #68]	; (131c4 <lte_lc_func_mode_set+0xd0>)
   1317e:	f005 f8bd 	bl	182fc <nrf_modem_at_printf>
	if (err) {
   13182:	4605      	mov	r5, r0
   13184:	b190      	cbz	r0, 131ac <lte_lc_func_mode_set+0xb8>
		LOG_ERR("Failed to set functional mode. Please check XSYSTEMMODE.");
   13186:	4b10      	ldr	r3, [pc, #64]	; (131c8 <lte_lc_func_mode_set+0xd4>)
   13188:	2201      	movs	r2, #1
   1318a:	9302      	str	r3, [sp, #8]
   1318c:	2300      	movs	r3, #0
   1318e:	490b      	ldr	r1, [pc, #44]	; (131bc <lte_lc_func_mode_set+0xc8>)
   13190:	4618      	mov	r0, r3
   13192:	e9cd 3300 	strd	r3, r3, [sp]
   13196:	f00c fe11 	bl	1fdbc <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   1319a:	e7cc      	b.n	13136 <lte_lc_func_mode_set+0x42>
		e->callback(mode, e->context);
   1319c:	e9d6 3100 	ldrd	r3, r1, [r6]
   131a0:	4620      	mov	r0, r4
   131a2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   131a4:	3608      	adds	r6, #8
   131a6:	42be      	cmp	r6, r7
   131a8:	d3f8      	bcc.n	1319c <lte_lc_func_mode_set+0xa8>
   131aa:	e7c6      	b.n	1313a <lte_lc_func_mode_set+0x46>
   131ac:	4e07      	ldr	r6, [pc, #28]	; (131cc <lte_lc_func_mode_set+0xd8>)
   131ae:	4f08      	ldr	r7, [pc, #32]	; (131d0 <lte_lc_func_mode_set+0xdc>)
   131b0:	e7f9      	b.n	131a6 <lte_lc_func_mode_set+0xb2>
   131b2:	bf00      	nop
   131b4:	01300c01 	.word	0x01300c01
   131b8:	0002592a 	.word	0x0002592a
   131bc:	00022f74 	.word	0x00022f74
   131c0:	00025954 	.word	0x00025954
   131c4:	00025970 	.word	0x00025970
   131c8:	0002597b 	.word	0x0002597b
   131cc:	00027dfc 	.word	0x00027dfc
   131d0:	00027dfc 	.word	0x00027dfc

000131d4 <lte_lc_deinit>:
{
   131d4:	b508      	push	{r3, lr}
	if (is_initialized) {
   131d6:	4b06      	ldr	r3, [pc, #24]	; (131f0 <lte_lc_deinit+0x1c>)
   131d8:	781a      	ldrb	r2, [r3, #0]
   131da:	b122      	cbz	r2, 131e6 <lte_lc_deinit+0x12>
		is_initialized = false;
   131dc:	2000      	movs	r0, #0
   131de:	7018      	strb	r0, [r3, #0]
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   131e0:	f7ff ff88 	bl	130f4 <lte_lc_func_mode_set>
   131e4:	b908      	cbnz	r0, 131ea <lte_lc_deinit+0x16>
   131e6:	2000      	movs	r0, #0
}
   131e8:	bd08      	pop	{r3, pc}
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   131ea:	f06f 000d 	mvn.w	r0, #13
   131ee:	e7fb      	b.n	131e8 <lte_lc_deinit+0x14>
   131f0:	200110bb 	.word	0x200110bb

000131f4 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   131f4:	4801      	ldr	r0, [pc, #4]	; (131fc <k_mutex_unlock.constprop.0.isra.0+0x8>)
   131f6:	f007 babd 	b.w	1a774 <z_impl_k_mutex_unlock>
   131fa:	bf00      	nop
   131fc:	2000ca08 	.word	0x2000ca08

00013200 <event_handler_list_is_empty>:
	return list->head;
   13200:	4b02      	ldr	r3, [pc, #8]	; (1320c <event_handler_list_is_empty+0xc>)
Z_GENLIST_IS_EMPTY(slist)
   13202:	6818      	ldr	r0, [r3, #0]
}
   13204:	fab0 f080 	clz	r0, r0
   13208:	0940      	lsrs	r0, r0, #5
   1320a:	4770      	bx	lr
   1320c:	2000def4 	.word	0x2000def4

00013210 <event_handler_list_append_handler>:
{
   13210:	b570      	push	{r4, r5, r6, lr}
   13212:	4606      	mov	r6, r0
	return list->head;
   13214:	4d12      	ldr	r5, [pc, #72]	; (13260 <event_handler_list_append_handler+0x50>)
	return z_impl_k_mutex_lock(mutex, timeout);
   13216:	f04f 32ff 	mov.w	r2, #4294967295
   1321a:	f04f 33ff 	mov.w	r3, #4294967295
   1321e:	4811      	ldr	r0, [pc, #68]	; (13264 <event_handler_list_append_handler+0x54>)
   13220:	f007 fa2e 	bl	1a680 <z_impl_k_mutex_lock>
   13224:	682c      	ldr	r4, [r5, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   13226:	b944      	cbnz	r4, 1323a <event_handler_list_append_handler+0x2a>
	to_ins = (struct event_handler *)k_malloc(sizeof(struct event_handler));
   13228:	2008      	movs	r0, #8
   1322a:	f00e fced 	bl	21c08 <k_malloc>
	if (to_ins == NULL) {
   1322e:	b948      	cbnz	r0, 13244 <event_handler_list_append_handler+0x34>
		k_mutex_unlock(&list_mtx);
   13230:	f7ff ffe0 	bl	131f4 <k_mutex_unlock.constprop.0.isra.0>
		return -ENOBUFS;
   13234:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13238:	e00d      	b.n	13256 <event_handler_list_append_handler+0x46>
		if (curr->handler == handler) {
   1323a:	6863      	ldr	r3, [r4, #4]
   1323c:	429e      	cmp	r6, r3
   1323e:	d007      	beq.n	13250 <event_handler_list_append_handler+0x40>
	return node->next;
   13240:	6824      	ldr	r4, [r4, #0]
   13242:	e7f0      	b.n	13226 <event_handler_list_append_handler+0x16>
__ssp_bos_icheck3(memset, void *, int)
   13244:	6004      	str	r4, [r0, #0]
	to_ins->handler = handler;
   13246:	6046      	str	r6, [r0, #4]
	return list->tail;
   13248:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1324a:	b92b      	cbnz	r3, 13258 <event_handler_list_append_handler+0x48>
	list->head = node;
   1324c:	e9c5 0000 	strd	r0, r0, [r5]
		k_mutex_unlock(&list_mtx);
   13250:	f7ff ffd0 	bl	131f4 <k_mutex_unlock.constprop.0.isra.0>
		return 0;
   13254:	2000      	movs	r0, #0
}
   13256:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   13258:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1325a:	6068      	str	r0, [r5, #4]
}
   1325c:	e7f8      	b.n	13250 <event_handler_list_append_handler+0x40>
   1325e:	bf00      	nop
   13260:	2000def4 	.word	0x2000def4
   13264:	2000ca08 	.word	0x2000ca08

00013268 <event_handler_list_dispatch>:
{
   13268:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1326a:	4c0f      	ldr	r4, [pc, #60]	; (132a8 <event_handler_list_dispatch+0x40>)
   1326c:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   1326e:	6823      	ldr	r3, [r4, #0]
   13270:	b1c3      	cbz	r3, 132a4 <event_handler_list_dispatch+0x3c>
   13272:	f04f 33ff 	mov.w	r3, #4294967295
   13276:	f04f 32ff 	mov.w	r2, #4294967295
   1327a:	480c      	ldr	r0, [pc, #48]	; (132ac <event_handler_list_dispatch+0x44>)
   1327c:	f007 fa00 	bl	1a680 <z_impl_k_mutex_lock>
   13280:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   13282:	b10b      	cbz	r3, 13288 <event_handler_list_dispatch+0x20>
	return node->next;
   13284:	681c      	ldr	r4, [r3, #0]
   13286:	b91b      	cbnz	r3, 13290 <event_handler_list_dispatch+0x28>
}
   13288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   1328c:	f7ff bfb2 	b.w	131f4 <k_mutex_unlock.constprop.0.isra.0>
		curr->handler(evt);
   13290:	4628      	mov	r0, r5
   13292:	685b      	ldr	r3, [r3, #4]
   13294:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   13296:	b11c      	cbz	r4, 132a0 <event_handler_list_dispatch+0x38>
   13298:	6822      	ldr	r2, [r4, #0]
   1329a:	4623      	mov	r3, r4
   1329c:	4614      	mov	r4, r2
   1329e:	e7f2      	b.n	13286 <event_handler_list_dispatch+0x1e>
   132a0:	4622      	mov	r2, r4
   132a2:	e7fa      	b.n	1329a <event_handler_list_dispatch+0x32>
}
   132a4:	bd38      	pop	{r3, r4, r5, pc}
   132a6:	bf00      	nop
   132a8:	2000def4 	.word	0x2000def4
   132ac:	2000ca08 	.word	0x2000ca08

000132b0 <response_is_valid>:
{
   132b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   132b2:	460e      	mov	r6, r1
   132b4:	4614      	mov	r4, r2
	if ((response == NULL) || (check == NULL)) {
   132b6:	4605      	mov	r5, r0
   132b8:	b100      	cbz	r0, 132bc <response_is_valid+0xc>
   132ba:	b962      	cbnz	r2, 132d6 <response_is_valid+0x26>
		LOG_ERR("Invalid pointer provided");
   132bc:	4b0d      	ldr	r3, [pc, #52]	; (132f4 <response_is_valid+0x44>)
   132be:	2201      	movs	r2, #1
   132c0:	9302      	str	r3, [sp, #8]
   132c2:	2300      	movs	r3, #0
   132c4:	490c      	ldr	r1, [pc, #48]	; (132f8 <response_is_valid+0x48>)
   132c6:	4618      	mov	r0, r3
   132c8:	e9cd 3300 	strd	r3, r3, [sp]
   132cc:	f00c fd8d 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
		return false;
   132d0:	2000      	movs	r0, #0
}
   132d2:	b004      	add	sp, #16
   132d4:	bd70      	pop	{r4, r5, r6, pc}
	if ((response_len < strlen(check)) ||
   132d6:	4610      	mov	r0, r2
   132d8:	f7f5 fe31 	bl	8f3e <strlen>
   132dc:	42b0      	cmp	r0, r6
   132de:	d8f7      	bhi.n	132d0 <response_is_valid+0x20>
	    (memcmp(response, check, response_len) != 0)) {
   132e0:	4632      	mov	r2, r6
   132e2:	4621      	mov	r1, r4
   132e4:	4628      	mov	r0, r5
   132e6:	f00e fcb7 	bl	21c58 <memcmp>
	if ((response_len < strlen(check)) ||
   132ea:	fab0 f080 	clz	r0, r0
   132ee:	0940      	lsrs	r0, r0, #5
   132f0:	e7ef      	b.n	132d2 <response_is_valid+0x22>
   132f2:	bf00      	nop
   132f4:	00025a4e 	.word	0x00025a4e
   132f8:	00022f7c 	.word	0x00022f7c

000132fc <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   132fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
   13300:	2700      	movs	r7, #0
{
   13302:	b087      	sub	sp, #28
   13304:	4680      	mov	r8, r0
   13306:	460e      	mov	r6, r1
   13308:	4614      	mov	r4, r2
   1330a:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   1330c:	9705      	str	r7, [sp, #20]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   1330e:	f7f5 fe16 	bl	8f3e <strlen>
   13312:	2808      	cmp	r0, #8
   13314:	d11b      	bne.n	1334e <parse_psm+0x52>
   13316:	4630      	mov	r0, r6
   13318:	f7f5 fe11 	bl	8f3e <strlen>
   1331c:	2808      	cmp	r0, #8
   1331e:	d116      	bne.n	1334e <parse_psm+0x52>
		return -EINVAL;
	}

	/* Parse T3412-extended (periodic TAU) timer */
	memcpy(unit_str, tau_ext_str, unit_str_len);
   13320:	8832      	ldrh	r2, [r6, #0]
   13322:	78b3      	ldrb	r3, [r6, #2]
   13324:	f8ad 2014 	strh.w	r2, [sp, #20]

	lut_idx = strtoul(unit_str, NULL, 2);
   13328:	4639      	mov	r1, r7
   1332a:	2202      	movs	r2, #2
   1332c:	a805      	add	r0, sp, #20
	memcpy(unit_str, tau_ext_str, unit_str_len);
   1332e:	f88d 3016 	strb.w	r3, [sp, #22]
	lut_idx = strtoul(unit_str, NULL, 2);
   13332:	f009 f805 	bl	1c340 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   13336:	2807      	cmp	r0, #7
   13338:	d90e      	bls.n	13358 <parse_psm+0x5c>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   1333a:	4b36      	ldr	r3, [pc, #216]	; (13414 <parse_psm+0x118>)
   1333c:	9700      	str	r7, [sp, #0]
   1333e:	e9cd 7301 	strd	r7, r3, [sp, #4]
   13342:	463b      	mov	r3, r7
   13344:	2201      	movs	r2, #1
   13346:	4618      	mov	r0, r3
   13348:	4933      	ldr	r1, [pc, #204]	; (13418 <parse_psm+0x11c>)
   1334a:	f00c fd4e 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1334e:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   13352:	b007      	add	sp, #28
   13354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	timer_unit = t3412_ext_lookup[lut_idx];
   13358:	4b30      	ldr	r3, [pc, #192]	; (1341c <parse_psm+0x120>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   1335a:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   1335c:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   13360:	4639      	mov	r1, r7
   13362:	1cf0      	adds	r0, r6, #3
   13364:	f008 ffec 	bl	1c340 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   13368:	f1b9 0f00 	cmp.w	r9, #0
   1336c:	d11b      	bne.n	133a6 <parse_psm+0xaa>
   1336e:	f04f 33ff 	mov.w	r3, #4294967295
   13372:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   13374:	b1e4      	cbz	r4, 133b0 <parse_psm+0xb4>
   13376:	4620      	mov	r0, r4
   13378:	f7f5 fde1 	bl	8f3e <strlen>
   1337c:	2808      	cmp	r0, #8
   1337e:	d117      	bne.n	133b0 <parse_psm+0xb4>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   13380:	8822      	ldrh	r2, [r4, #0]
   13382:	78a3      	ldrb	r3, [r4, #2]
   13384:	f8ad 2014 	strh.w	r2, [sp, #20]
		lut_idx = strtoul(unit_str, NULL, 2);
   13388:	2100      	movs	r1, #0
   1338a:	2202      	movs	r2, #2
   1338c:	a805      	add	r0, sp, #20
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   1338e:	f88d 3016 	strb.w	r3, [sp, #22]
		lut_idx = strtoul(unit_str, NULL, 2);
   13392:	f008 ffd5 	bl	1c340 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   13396:	2807      	cmp	r0, #7
   13398:	d91b      	bls.n	133d2 <parse_psm+0xd6>
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   1339a:	4b21      	ldr	r3, [pc, #132]	; (13420 <parse_psm+0x124>)
		LOG_ERR("Unable to parse active time string");
   1339c:	9302      	str	r3, [sp, #8]
   1339e:	2300      	movs	r3, #0
   133a0:	e9cd 3300 	strd	r3, r3, [sp]
   133a4:	e7ce      	b.n	13344 <parse_psm+0x48>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   133a6:	fb09 f000 	mul.w	r0, r9, r0
   133aa:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   133ac:	3001      	adds	r0, #1
   133ae:	d0e1      	beq.n	13374 <parse_psm+0x78>
	memcpy(unit_str, active_time_str, unit_str_len);
   133b0:	f8b8 2000 	ldrh.w	r2, [r8]
   133b4:	f898 3002 	ldrb.w	r3, [r8, #2]
   133b8:	f8ad 2014 	strh.w	r2, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   133bc:	2100      	movs	r1, #0
   133be:	2202      	movs	r2, #2
   133c0:	a805      	add	r0, sp, #20
	memcpy(unit_str, active_time_str, unit_str_len);
   133c2:	f88d 3016 	strb.w	r3, [sp, #22]
	lut_idx = strtoul(unit_str, NULL, 2);
   133c6:	f008 ffbb 	bl	1c340 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   133ca:	2807      	cmp	r0, #7
   133cc:	d910      	bls.n	133f0 <parse_psm+0xf4>
		LOG_ERR("Unable to parse active time string");
   133ce:	4b15      	ldr	r3, [pc, #84]	; (13424 <parse_psm+0x128>)
   133d0:	e7e4      	b.n	1339c <parse_psm+0xa0>
		timer_unit = t3412_lookup[lut_idx];
   133d2:	4b15      	ldr	r3, [pc, #84]	; (13428 <parse_psm+0x12c>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   133d4:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   133d6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   133da:	2100      	movs	r1, #0
   133dc:	1ce0      	adds	r0, r4, #3
   133de:	f008 ffaf 	bl	1c340 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   133e2:	b116      	cbz	r6, 133ea <parse_psm+0xee>
   133e4:	4346      	muls	r6, r0
   133e6:	602e      	str	r6, [r5, #0]
   133e8:	e7e2      	b.n	133b0 <parse_psm+0xb4>
   133ea:	f04f 36ff 	mov.w	r6, #4294967295
   133ee:	e7fa      	b.n	133e6 <parse_psm+0xea>
	timer_unit = t3324_lookup[lut_idx];
   133f0:	4b0e      	ldr	r3, [pc, #56]	; (1342c <parse_psm+0x130>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   133f2:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   133f4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   133f8:	2100      	movs	r1, #0
   133fa:	f108 0003 	add.w	r0, r8, #3
   133fe:	f008 ff9f 	bl	1c340 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   13402:	b11c      	cbz	r4, 1340c <parse_psm+0x110>
   13404:	4344      	muls	r4, r0
	return 0;
   13406:	2000      	movs	r0, #0
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   13408:	606c      	str	r4, [r5, #4]
	return 0;
   1340a:	e7a2      	b.n	13352 <parse_psm+0x56>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   1340c:	f04f 34ff 	mov.w	r4, #4294967295
   13410:	e7f9      	b.n	13406 <parse_psm+0x10a>
   13412:	bf00      	nop
   13414:	00025b9e 	.word	0x00025b9e
   13418:	00022f7c 	.word	0x00022f7c
   1341c:	000234f0 	.word	0x000234f0
   13420:	00025bd3 	.word	0x00025bd3
   13424:	00025bff 	.word	0x00025bff
   13428:	000234d0 	.word	0x000234d0
   1342c:	000234d0 	.word	0x000234d0

00013430 <parse_rrc_mode>:
 * @return Zero on success or (negative) error code otherwise.
 */
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
   13430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   13434:	2500      	movs	r5, #0
{
   13436:	b088      	sub	sp, #32
   13438:	4680      	mov	r8, r0
   1343a:	460e      	mov	r6, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   1343c:	a806      	add	r0, sp, #24
   1343e:	2104      	movs	r1, #4
{
   13440:	4617      	mov	r7, r2
	struct at_param_list resp_list = {0};
   13442:	e9cd 5506 	strd	r5, r5, [sp, #24]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   13446:	f00c fb7c 	bl	1fb42 <at_params_list_init>
	if (err) {
   1344a:	4604      	mov	r4, r0
   1344c:	b170      	cbz	r0, 1346c <parse_rrc_mode+0x3c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1344e:	4b22      	ldr	r3, [pc, #136]	; (134d8 <parse_rrc_mode+0xa8>)
   13450:	9003      	str	r0, [sp, #12]
   13452:	e9cd 5301 	strd	r5, r3, [sp, #4]
   13456:	2201      	movs	r2, #1
   13458:	462b      	mov	r3, r5
   1345a:	4628      	mov	r0, r5
   1345c:	491f      	ldr	r1, [pc, #124]	; (134dc <parse_rrc_mode+0xac>)
   1345e:	9500      	str	r5, [sp, #0]
   13460:	f00c fcc3 	bl	1fdea <z_log_msg_runtime_create.constprop.0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   13464:	4620      	mov	r0, r4
   13466:	b008      	add	sp, #32
   13468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_parser_params_from_str(at_response,
   1346c:	4601      	mov	r1, r0
   1346e:	aa06      	add	r2, sp, #24
   13470:	4640      	mov	r0, r8
   13472:	f00c fb4d 	bl	1fb10 <at_parser_params_from_str>
	if (err) {
   13476:	4604      	mov	r4, r0
   13478:	b170      	cbz	r0, 13498 <parse_rrc_mode+0x68>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   1347a:	4b19      	ldr	r3, [pc, #100]	; (134e0 <parse_rrc_mode+0xb0>)
   1347c:	9003      	str	r0, [sp, #12]
		LOG_ERR("Could not get signalling mode, error: %d", err);
   1347e:	e9cd 5301 	strd	r5, r3, [sp, #4]
   13482:	2201      	movs	r2, #1
   13484:	462b      	mov	r3, r5
   13486:	4628      	mov	r0, r5
   13488:	4914      	ldr	r1, [pc, #80]	; (134dc <parse_rrc_mode+0xac>)
   1348a:	9500      	str	r5, [sp, #0]
   1348c:	f00c fcad 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   13490:	a806      	add	r0, sp, #24
   13492:	f00c fb80 	bl	1fb96 <at_params_list_free>
	return err;
   13496:	e7e5      	b.n	13464 <parse_rrc_mode+0x34>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   13498:	4639      	mov	r1, r7
   1349a:	aa05      	add	r2, sp, #20
   1349c:	a806      	add	r0, sp, #24
   1349e:	f00c fc2c 	bl	1fcfa <at_params_int_get>
	if (err) {
   134a2:	4604      	mov	r4, r0
   134a4:	b110      	cbz	r0, 134ac <parse_rrc_mode+0x7c>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   134a6:	4b0f      	ldr	r3, [pc, #60]	; (134e4 <parse_rrc_mode+0xb4>)
   134a8:	9003      	str	r0, [sp, #12]
   134aa:	e7e8      	b.n	1347e <parse_rrc_mode+0x4e>
	if (temp_mode == 0) {
   134ac:	9b05      	ldr	r3, [sp, #20]
   134ae:	b11b      	cbz	r3, 134b8 <parse_rrc_mode+0x88>
	} else if (temp_mode == 1) {
   134b0:	2b01      	cmp	r3, #1
   134b2:	d103      	bne.n	134bc <parse_rrc_mode+0x8c>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   134b4:	7033      	strb	r3, [r6, #0]
   134b6:	e7eb      	b.n	13490 <parse_rrc_mode+0x60>
   134b8:	4603      	mov	r3, r0
   134ba:	e7fb      	b.n	134b4 <parse_rrc_mode+0x84>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   134bc:	9303      	str	r3, [sp, #12]
   134be:	4b0a      	ldr	r3, [pc, #40]	; (134e8 <parse_rrc_mode+0xb8>)
   134c0:	2201      	movs	r2, #1
   134c2:	e9cd 0301 	strd	r0, r3, [sp, #4]
   134c6:	4905      	ldr	r1, [pc, #20]	; (134dc <parse_rrc_mode+0xac>)
   134c8:	4603      	mov	r3, r0
   134ca:	9000      	str	r0, [sp, #0]
   134cc:	f00c fc8d 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
		err = -EINVAL;
   134d0:	f06f 0415 	mvn.w	r4, #21
   134d4:	e7dc      	b.n	13490 <parse_rrc_mode+0x60>
   134d6:	bf00      	nop
   134d8:	00025a67 	.word	0x00025a67
   134dc:	00022f7c 	.word	0x00022f7c
   134e0:	00025c22 	.word	0x00025c22
   134e4:	00025c4d 	.word	0x00025c4d
   134e8:	00025c76 	.word	0x00025c76

000134ec <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   134ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   134f0:	2600      	movs	r6, #0
{
   134f2:	4617      	mov	r7, r2
   134f4:	461d      	mov	r5, r3
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   134f6:	2207      	movs	r2, #7
   134f8:	2309      	movs	r3, #9
{
   134fa:	b08e      	sub	sp, #56	; 0x38
   134fc:	4682      	mov	sl, r0
   134fe:	4688      	mov	r8, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   13500:	a809      	add	r0, sp, #36	; 0x24
   13502:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   13504:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   13508:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   1350c:	9607      	str	r6, [sp, #28]
   1350e:	f8ad 6020 	strh.w	r6, [sp, #32]
   13512:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   13516:	f00c fb14 	bl	1fb42 <at_params_list_init>
	if (err) {
   1351a:	4604      	mov	r4, r0
   1351c:	b170      	cbz	r0, 1353c <parse_cereg+0x50>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1351e:	4b63      	ldr	r3, [pc, #396]	; (136ac <parse_cereg+0x1c0>)
   13520:	9003      	str	r0, [sp, #12]
   13522:	e9cd 6301 	strd	r6, r3, [sp, #4]
   13526:	2201      	movs	r2, #1
   13528:	4633      	mov	r3, r6
   1352a:	4630      	mov	r0, r6
   1352c:	4960      	ldr	r1, [pc, #384]	; (136b0 <parse_cereg+0x1c4>)
   1352e:	9600      	str	r6, [sp, #0]
   13530:	f00c fc5b 	bl	1fdea <z_log_msg_runtime_create.constprop.0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   13534:	4620      	mov	r0, r4
   13536:	b00e      	add	sp, #56	; 0x38
   13538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   1353c:	4601      	mov	r1, r0
   1353e:	aa09      	add	r2, sp, #36	; 0x24
   13540:	4650      	mov	r0, sl
   13542:	f00c fae5 	bl	1fb10 <at_parser_params_from_str>
	if (err) {
   13546:	4604      	mov	r4, r0
   13548:	b170      	cbz	r0, 13568 <parse_cereg+0x7c>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   1354a:	4b5a      	ldr	r3, [pc, #360]	; (136b4 <parse_cereg+0x1c8>)
   1354c:	9003      	str	r0, [sp, #12]
		LOG_ERR("Could not get response prefix, error: %d", err);
   1354e:	e9cd 6301 	strd	r6, r3, [sp, #4]
   13552:	2201      	movs	r2, #1
   13554:	4633      	mov	r3, r6
   13556:	4630      	mov	r0, r6
   13558:	4955      	ldr	r1, [pc, #340]	; (136b0 <parse_cereg+0x1c4>)
   1355a:	9600      	str	r6, [sp, #0]
   1355c:	f00c fc45 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   13560:	a809      	add	r0, sp, #36	; 0x24
   13562:	f00c fb18 	bl	1fb96 <at_params_list_free>
	return err;
   13566:	e7e5      	b.n	13534 <parse_cereg+0x48>
	err = at_params_string_get(&resp_list,
   13568:	4601      	mov	r1, r0
   1356a:	ab04      	add	r3, sp, #16
   1356c:	aa07      	add	r2, sp, #28
   1356e:	a809      	add	r0, sp, #36	; 0x24
   13570:	f00c fbef 	bl	1fd52 <at_params_string_get>
	if (err) {
   13574:	4604      	mov	r4, r0
   13576:	b110      	cbz	r0, 1357e <parse_cereg+0x92>
		LOG_ERR("Could not get response prefix, error: %d", err);
   13578:	4b4f      	ldr	r3, [pc, #316]	; (136b8 <parse_cereg+0x1cc>)
   1357a:	9003      	str	r0, [sp, #12]
   1357c:	e7e7      	b.n	1354e <parse_cereg+0x62>
	if (!response_is_valid(response_prefix, response_prefix_len,
   1357e:	4a4f      	ldr	r2, [pc, #316]	; (136bc <parse_cereg+0x1d0>)
   13580:	9904      	ldr	r1, [sp, #16]
   13582:	a807      	add	r0, sp, #28
   13584:	f7ff fe94 	bl	132b0 <response_is_valid>
   13588:	2800      	cmp	r0, #0
   1358a:	d0e9      	beq.n	13560 <parse_cereg+0x74>
	err = at_params_int_get(list, reg_status_index, &reg_status);
   1358c:	aa0b      	add	r2, sp, #44	; 0x2c
   1358e:	f1c8 0102 	rsb	r1, r8, #2
   13592:	a809      	add	r0, sp, #36	; 0x24
   13594:	f00c fbb1 	bl	1fcfa <at_params_int_get>
	if (err) {
   13598:	1e06      	subs	r6, r0, #0
   1359a:	d14a      	bne.n	13632 <parse_cereg+0x146>
	switch (reg_status) {
   1359c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1359e:	2b08      	cmp	r3, #8
   135a0:	d031      	beq.n	13606 <parse_cereg+0x11a>
   135a2:	dc1b      	bgt.n	135dc <parse_cereg+0xf0>
   135a4:	2b05      	cmp	r3, #5
   135a6:	d92e      	bls.n	13606 <parse_cereg+0x11a>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   135a8:	9303      	str	r3, [sp, #12]
   135aa:	4b45      	ldr	r3, [pc, #276]	; (136c0 <parse_cereg+0x1d4>)
   135ac:	2201      	movs	r2, #1
   135ae:	9302      	str	r3, [sp, #8]
   135b0:	2300      	movs	r3, #0
   135b2:	493f      	ldr	r1, [pc, #252]	; (136b0 <parse_cereg+0x1c4>)
   135b4:	4618      	mov	r0, r3
   135b6:	e9cd 3300 	strd	r3, r3, [sp]
   135ba:	f00c fc16 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   135be:	f06f 0615 	mvn.w	r6, #21
		LOG_ERR("Could not get registration status, error: %d", status);
   135c2:	4b40      	ldr	r3, [pc, #256]	; (136c4 <parse_cereg+0x1d8>)
   135c4:	9603      	str	r6, [sp, #12]
			LOG_ERR("Could not get tracking area code, error: %d", err);
   135c6:	9302      	str	r3, [sp, #8]
   135c8:	2300      	movs	r3, #0
   135ca:	2201      	movs	r2, #1
   135cc:	4618      	mov	r0, r3
   135ce:	e9cd 3300 	strd	r3, r3, [sp]
   135d2:	4937      	ldr	r1, [pc, #220]	; (136b0 <parse_cereg+0x1c4>)
   135d4:	f00c fc09 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
			goto clean_exit;
   135d8:	4634      	mov	r4, r6
   135da:	e7c1      	b.n	13560 <parse_cereg+0x74>
	switch (reg_status) {
   135dc:	2b5a      	cmp	r3, #90	; 0x5a
   135de:	d1e3      	bne.n	135a8 <parse_cereg+0xbc>
	if (reg_status) {
   135e0:	b107      	cbz	r7, 135e4 <parse_cereg+0xf8>
		*reg_status = status;
   135e2:	703b      	strb	r3, [r7, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   135e4:	bb65      	cbnz	r5, 13640 <parse_cereg+0x154>
	if (lte_mode) {
   135e6:	f1b9 0f00 	cmp.w	r9, #0
   135ea:	d0b9      	beq.n	13560 <parse_cereg+0x74>
		err = at_params_int_get(&resp_list,
   135ec:	aa06      	add	r2, sp, #24
   135ee:	f1c8 0105 	rsb	r1, r8, #5
   135f2:	a809      	add	r0, sp, #36	; 0x24
   135f4:	f00c fb81 	bl	1fcfa <at_params_int_get>
		if (err) {
   135f8:	2800      	cmp	r0, #0
   135fa:	d155      	bne.n	136a8 <parse_cereg+0x1bc>
			*lte_mode = mode;
   135fc:	f89d 3018 	ldrb.w	r3, [sp, #24]
			LOG_DBG("LTE mode: %d", *lte_mode);
   13600:	f889 3000 	strb.w	r3, [r9]
   13604:	e7ac      	b.n	13560 <parse_cereg+0x74>
	if (reg_status) {
   13606:	b997      	cbnz	r7, 1362e <parse_cereg+0x142>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   13608:	2d00      	cmp	r5, #0
   1360a:	d0ec      	beq.n	135e6 <parse_cereg+0xfa>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   1360c:	a809      	add	r0, sp, #36	; 0x24
   1360e:	f00c fbc0 	bl	1fd92 <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   13612:	2803      	cmp	r0, #3
   13614:	d914      	bls.n	13640 <parse_cereg+0x154>
		err = at_params_string_get(
   13616:	ab05      	add	r3, sp, #20
   13618:	aa0b      	add	r2, sp, #44	; 0x2c
   1361a:	f1c8 0103 	rsb	r1, r8, #3
   1361e:	a809      	add	r0, sp, #36	; 0x24
   13620:	f00c fb97 	bl	1fd52 <at_params_string_get>
		if (err) {
   13624:	4606      	mov	r6, r0
   13626:	b180      	cbz	r0, 1364a <parse_cereg+0x15e>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   13628:	4b27      	ldr	r3, [pc, #156]	; (136c8 <parse_cereg+0x1dc>)
   1362a:	9003      	str	r0, [sp, #12]
   1362c:	e7cb      	b.n	135c6 <parse_cereg+0xda>
		*reg_status = status;
   1362e:	703b      	strb	r3, [r7, #0]
   13630:	e7ea      	b.n	13608 <parse_cereg+0x11c>
	if (status < 0) {
   13632:	dbc6      	blt.n	135c2 <parse_cereg+0xd6>
	if (reg_status) {
   13634:	b107      	cbz	r7, 13638 <parse_cereg+0x14c>
		*reg_status = status;
   13636:	703e      	strb	r6, [r7, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   13638:	2d00      	cmp	r5, #0
   1363a:	d0d4      	beq.n	135e6 <parse_cereg+0xfa>
   1363c:	2e5a      	cmp	r6, #90	; 0x5a
   1363e:	d1e5      	bne.n	1360c <parse_cereg+0x120>
		cell->tac = UINT32_MAX;
   13640:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   13644:	e9c5 3302 	strd	r3, r3, [r5, #8]
   13648:	e7cd      	b.n	135e6 <parse_cereg+0xfa>
		str_buf[len] = '\0';
   1364a:	9b05      	ldr	r3, [sp, #20]
		cell->tac = strtoul(str_buf, NULL, 16);
   1364c:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   1364e:	3338      	adds	r3, #56	; 0x38
   13650:	446b      	add	r3, sp
   13652:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   13656:	2210      	movs	r2, #16
   13658:	a80b      	add	r0, sp, #44	; 0x2c
   1365a:	f008 fe71 	bl	1c340 <strtoul>
		len = sizeof(str_buf) - 1;
   1365e:	2309      	movs	r3, #9
		cell->tac = strtoul(str_buf, NULL, 16);
   13660:	60e8      	str	r0, [r5, #12]
		len = sizeof(str_buf) - 1;
   13662:	9305      	str	r3, [sp, #20]
		err = at_params_string_get(&resp_list,
   13664:	aa0b      	add	r2, sp, #44	; 0x2c
   13666:	ab05      	add	r3, sp, #20
   13668:	f1c8 0104 	rsb	r1, r8, #4
   1366c:	a809      	add	r0, sp, #36	; 0x24
   1366e:	f00c fb70 	bl	1fd52 <at_params_string_get>
		if (err) {
   13672:	4607      	mov	r7, r0
   13674:	b160      	cbz	r0, 13690 <parse_cereg+0x1a4>
			LOG_ERR("Could not get cell ID, error: %d", err);
   13676:	4b15      	ldr	r3, [pc, #84]	; (136cc <parse_cereg+0x1e0>)
   13678:	9003      	str	r0, [sp, #12]
   1367a:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1367e:	2201      	movs	r2, #1
   13680:	4633      	mov	r3, r6
   13682:	4630      	mov	r0, r6
   13684:	490a      	ldr	r1, [pc, #40]	; (136b0 <parse_cereg+0x1c4>)
   13686:	9600      	str	r6, [sp, #0]
   13688:	f00c fbaf 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
			goto clean_exit;
   1368c:	463c      	mov	r4, r7
   1368e:	e767      	b.n	13560 <parse_cereg+0x74>
		str_buf[len] = '\0';
   13690:	9b05      	ldr	r3, [sp, #20]
		cell->id = strtoul(str_buf, NULL, 16);
   13692:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   13694:	3338      	adds	r3, #56	; 0x38
   13696:	446b      	add	r3, sp
   13698:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   1369c:	2210      	movs	r2, #16
   1369e:	a80b      	add	r0, sp, #44	; 0x2c
   136a0:	f008 fe4e 	bl	1c340 <strtoul>
   136a4:	60a8      	str	r0, [r5, #8]
   136a6:	e79e      	b.n	135e6 <parse_cereg+0xfa>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   136a8:	2300      	movs	r3, #0
   136aa:	e7a9      	b.n	13600 <parse_cereg+0x114>
   136ac:	00025a67 	.word	0x00025a67
   136b0:	00022f7c 	.word	0x00022f7c
   136b4:	00025c92 	.word	0x00025c92
   136b8:	00025cbf 	.word	0x00025cbf
   136bc:	000259ea 	.word	0x000259ea
   136c0:	00025ce8 	.word	0x00025ce8
   136c4:	000256d1 	.word	0x000256d1
   136c8:	00025d10 	.word	0x00025d10
   136cc:	00025d3c 	.word	0x00025d3c

000136d0 <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
   136d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	struct at_param_list resp_list = {0};
   136d2:	2500      	movs	r5, #0
{
   136d4:	b087      	sub	sp, #28
   136d6:	4607      	mov	r7, r0

	if (time == NULL || at_response == NULL) {
   136d8:	460e      	mov	r6, r1
	struct at_param_list resp_list = {0};
   136da:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (time == NULL || at_response == NULL) {
   136de:	2900      	cmp	r1, #0
   136e0:	d049      	beq.n	13776 <parse_xt3412+0xa6>
   136e2:	2800      	cmp	r0, #0
   136e4:	d047      	beq.n	13776 <parse_xt3412+0xa6>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   136e6:	2104      	movs	r1, #4
   136e8:	a804      	add	r0, sp, #16
   136ea:	f00c fa2a 	bl	1fb42 <at_params_list_init>
	if (err) {
   136ee:	4604      	mov	r4, r0
   136f0:	b168      	cbz	r0, 1370e <parse_xt3412+0x3e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   136f2:	4b22      	ldr	r3, [pc, #136]	; (1377c <parse_xt3412+0xac>)
   136f4:	9003      	str	r0, [sp, #12]
   136f6:	e9cd 5301 	strd	r5, r3, [sp, #4]
   136fa:	2201      	movs	r2, #1
   136fc:	462b      	mov	r3, r5
   136fe:	4628      	mov	r0, r5
   13700:	491f      	ldr	r1, [pc, #124]	; (13780 <parse_xt3412+0xb0>)
   13702:	9500      	str	r5, [sp, #0]
   13704:	f00c fb71 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   13708:	4620      	mov	r0, r4
   1370a:	b007      	add	sp, #28
   1370c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   1370e:	4601      	mov	r1, r0
   13710:	aa04      	add	r2, sp, #16
   13712:	4638      	mov	r0, r7
   13714:	f00c f9fc 	bl	1fb10 <at_parser_params_from_str>
	if (err) {
   13718:	4604      	mov	r4, r0
   1371a:	b170      	cbz	r0, 1373a <parse_xt3412+0x6a>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   1371c:	4b19      	ldr	r3, [pc, #100]	; (13784 <parse_xt3412+0xb4>)
   1371e:	9003      	str	r0, [sp, #12]
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   13720:	e9cd 5301 	strd	r5, r3, [sp, #4]
   13724:	2201      	movs	r2, #1
   13726:	462b      	mov	r3, r5
   13728:	4628      	mov	r0, r5
   1372a:	4915      	ldr	r1, [pc, #84]	; (13780 <parse_xt3412+0xb0>)
   1372c:	9500      	str	r5, [sp, #0]
   1372e:	f00c fb5c 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   13732:	a804      	add	r0, sp, #16
   13734:	f00c fa2f 	bl	1fb96 <at_params_list_free>
	return err;
   13738:	e7e6      	b.n	13708 <parse_xt3412+0x38>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   1373a:	4632      	mov	r2, r6
   1373c:	2102      	movs	r1, #2
   1373e:	a804      	add	r0, sp, #16
   13740:	f00c faf3 	bl	1fd2a <at_params_int64_get>
	if (err) {
   13744:	4604      	mov	r4, r0
   13746:	b110      	cbz	r0, 1374e <parse_xt3412+0x7e>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   13748:	4b0f      	ldr	r3, [pc, #60]	; (13788 <parse_xt3412+0xb8>)
   1374a:	9003      	str	r0, [sp, #12]
   1374c:	e7e8      	b.n	13720 <parse_xt3412+0x50>
	if ((*time > T3412_MAX) || *time < 0) {
   1374e:	490f      	ldr	r1, [pc, #60]	; (1378c <parse_xt3412+0xbc>)
   13750:	e9d6 3200 	ldrd	r3, r2, [r6]
   13754:	4299      	cmp	r1, r3
   13756:	f04f 0308 	mov.w	r3, #8
   1375a:	4193      	sbcs	r3, r2
   1375c:	d2e9      	bcs.n	13732 <parse_xt3412+0x62>
		LOG_WRN("Parsed time parameter not within valid range");
   1375e:	4b0c      	ldr	r3, [pc, #48]	; (13790 <parse_xt3412+0xc0>)
   13760:	2202      	movs	r2, #2
   13762:	e9cd 0301 	strd	r0, r3, [sp, #4]
   13766:	4906      	ldr	r1, [pc, #24]	; (13780 <parse_xt3412+0xb0>)
   13768:	4603      	mov	r3, r0
   1376a:	9000      	str	r0, [sp, #0]
   1376c:	f00c fb3d 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
		err = -EINVAL;
   13770:	f06f 0415 	mvn.w	r4, #21
   13774:	e7dd      	b.n	13732 <parse_xt3412+0x62>
		return -EINVAL;
   13776:	f06f 0415 	mvn.w	r4, #21
   1377a:	e7c5      	b.n	13708 <parse_xt3412+0x38>
   1377c:	00025a67 	.word	0x00025a67
   13780:	00022f7c 	.word	0x00022f7c
   13784:	00025d5d 	.word	0x00025d5d
   13788:	00025d8a 	.word	0x00025d8a
   1378c:	5099e000 	.word	0x5099e000
   13790:	00025db7 	.word	0x00025db7

00013794 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   13794:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   13796:	4603      	mov	r3, r0
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   13798:	b958      	cbnz	r0, 137b2 <neighborcell_count_get+0x1e>
		LOG_ERR("at_response is NULL, can't get cell count");
   1379a:	4a0e      	ldr	r2, [pc, #56]	; (137d4 <neighborcell_count_get+0x40>)
   1379c:	490e      	ldr	r1, [pc, #56]	; (137d8 <neighborcell_count_get+0x44>)
   1379e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   137a2:	9000      	str	r0, [sp, #0]
   137a4:	2201      	movs	r2, #1
   137a6:	f00c fb20 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
		return 0;
   137aa:	2000      	movs	r0, #0
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   137ac:	b005      	add	sp, #20
   137ae:	f85d fb04 	ldr.w	pc, [sp], #4
   137b2:	1e43      	subs	r3, r0, #1
	uint32_t count = 0;
   137b4:	2000      	movs	r0, #0
		if (*str == c) {
   137b6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   137ba:	2a2c      	cmp	r2, #44	; 0x2c
   137bc:	d101      	bne.n	137c2 <neighborcell_count_get+0x2e>
			count++;
   137be:	3001      	adds	r0, #1
	} while (*(str++) != '\0');
   137c0:	e7f9      	b.n	137b6 <neighborcell_count_get+0x22>
   137c2:	2a00      	cmp	r2, #0
   137c4:	d1f7      	bne.n	137b6 <neighborcell_count_get+0x22>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   137c6:	280a      	cmp	r0, #10
   137c8:	d9ef      	bls.n	137aa <neighborcell_count_get+0x16>
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   137ca:	2305      	movs	r3, #5
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   137cc:	3809      	subs	r0, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   137ce:	fbb0 f0f3 	udiv	r0, r0, r3
	return ncell_count;
   137d2:	e7eb      	b.n	137ac <neighborcell_count_get+0x18>
   137d4:	00025de4 	.word	0x00025de4
   137d8:	00022f7c 	.word	0x00022f7c

000137dc <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   137dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   137e0:	230b      	movs	r3, #11
{
   137e2:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   137e4:	2100      	movs	r1, #0
{
   137e6:	4607      	mov	r7, r0
   137e8:	b091      	sub	sp, #68	; 0x44
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   137ea:	e9cd 110d 	strd	r1, r1, [sp, #52]	; 0x34
	size_t response_prefix_len = sizeof(response_prefix);
   137ee:	9308      	str	r3, [sp, #32]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   137f0:	f8cd 103b 	str.w	r1, [sp, #59]	; 0x3b
static uint32_t get_char_frequency(const char *str, char c)
   137f4:	1e43      	subs	r3, r0, #1
		if (*str == c) {
   137f6:	f813 6f01 	ldrb.w	r6, [r3, #1]!
   137fa:	2e2c      	cmp	r6, #44	; 0x2c
   137fc:	d101      	bne.n	13802 <parse_ncellmeas+0x26>
			count++;
   137fe:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   13800:	e7f9      	b.n	137f6 <parse_ncellmeas+0x1a>
   13802:	2e00      	cmp	r6, #0
   13804:	d1f7      	bne.n	137f6 <parse_ncellmeas+0x1a>
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   13806:	f04f 33ff 	mov.w	r3, #4294967295
	cells->ncells_count = 0;
   1380a:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1380e:	60ab      	str	r3, [r5, #8]

	err = at_params_list_init(&resp_list, param_count);
   13810:	3103      	adds	r1, #3
   13812:	a80b      	add	r0, sp, #44	; 0x2c
   13814:	f00c f995 	bl	1fb42 <at_params_list_init>
	if (err) {
   13818:	4604      	mov	r4, r0
   1381a:	b170      	cbz	r0, 1383a <parse_ncellmeas+0x5e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1381c:	4b9f      	ldr	r3, [pc, #636]	; (13a9c <parse_ncellmeas+0x2c0>)
   1381e:	9003      	str	r0, [sp, #12]
   13820:	e9cd 6301 	strd	r6, r3, [sp, #4]
   13824:	2201      	movs	r2, #1
   13826:	4633      	mov	r3, r6
   13828:	4630      	mov	r0, r6
   1382a:	499d      	ldr	r1, [pc, #628]	; (13aa0 <parse_ncellmeas+0x2c4>)
   1382c:	9600      	str	r6, [sp, #0]
   1382e:	f00c fadc 	bl	1fdea <z_log_msg_runtime_create.constprop.0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   13832:	4620      	mov	r0, r4
   13834:	b011      	add	sp, #68	; 0x44
   13836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   1383a:	4601      	mov	r1, r0
   1383c:	aa0b      	add	r2, sp, #44	; 0x2c
   1383e:	4638      	mov	r0, r7
   13840:	f00c f966 	bl	1fb10 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   13844:	4604      	mov	r4, r0
   13846:	b180      	cbz	r0, 1386a <parse_ncellmeas+0x8e>
   13848:	1dc3      	adds	r3, r0, #7
   1384a:	d01e      	beq.n	1388a <parse_ncellmeas+0xae>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   1384c:	4b95      	ldr	r3, [pc, #596]	; (13aa4 <parse_ncellmeas+0x2c8>)
   1384e:	9003      	str	r0, [sp, #12]
   13850:	e9cd 6301 	strd	r6, r3, [sp, #4]
   13854:	4633      	mov	r3, r6
   13856:	9600      	str	r6, [sp, #0]
		LOG_ERR("Could not get response prefix, error: %d", err);
   13858:	2201      	movs	r2, #1
   1385a:	4618      	mov	r0, r3
   1385c:	4990      	ldr	r1, [pc, #576]	; (13aa0 <parse_ncellmeas+0x2c4>)
   1385e:	f00c fac4 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   13862:	a80b      	add	r0, sp, #44	; 0x2c
   13864:	f00c f997 	bl	1fb96 <at_params_list_free>
	return err;
   13868:	e7e3      	b.n	13832 <parse_ncellmeas+0x56>
	bool incomplete = false;
   1386a:	4606      	mov	r6, r0
	err = at_params_string_get(&resp_list,
   1386c:	2100      	movs	r1, #0
   1386e:	ab08      	add	r3, sp, #32
   13870:	aa0d      	add	r2, sp, #52	; 0x34
   13872:	a80b      	add	r0, sp, #44	; 0x2c
   13874:	f00c fa6d 	bl	1fd52 <at_params_string_get>
	if (err) {
   13878:	4604      	mov	r4, r0
   1387a:	b140      	cbz	r0, 1388e <parse_ncellmeas+0xb2>
		LOG_ERR("Could not get response prefix, error: %d", err);
   1387c:	4b8a      	ldr	r3, [pc, #552]	; (13aa8 <parse_ncellmeas+0x2cc>)
   1387e:	9003      	str	r0, [sp, #12]
   13880:	9302      	str	r3, [sp, #8]
   13882:	2300      	movs	r3, #0
   13884:	e9cd 3300 	strd	r3, r3, [sp]
   13888:	e7e6      	b.n	13858 <parse_ncellmeas+0x7c>
		incomplete = true;
   1388a:	2601      	movs	r6, #1
   1388c:	e7ee      	b.n	1386c <parse_ncellmeas+0x90>
	if (!response_is_valid(response_prefix, response_prefix_len,
   1388e:	4a87      	ldr	r2, [pc, #540]	; (13aac <parse_ncellmeas+0x2d0>)
   13890:	9908      	ldr	r1, [sp, #32]
   13892:	a80d      	add	r0, sp, #52	; 0x34
   13894:	f7ff fd0c 	bl	132b0 <response_is_valid>
   13898:	2800      	cmp	r0, #0
   1389a:	f000 80a5 	beq.w	139e8 <parse_ncellmeas+0x20c>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   1389e:	2101      	movs	r1, #1
   138a0:	aa05      	add	r2, sp, #20
   138a2:	a80b      	add	r0, sp, #44	; 0x2c
   138a4:	f00c fa29 	bl	1fcfa <at_params_int_get>
	if (err) {
   138a8:	4604      	mov	r4, r0
   138aa:	2800      	cmp	r0, #0
   138ac:	d1d9      	bne.n	13862 <parse_ncellmeas+0x86>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   138ae:	9b05      	ldr	r3, [sp, #20]
   138b0:	2b00      	cmp	r3, #0
   138b2:	f040 80f0 	bne.w	13a96 <parse_ncellmeas+0x2ba>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   138b6:	2102      	movs	r1, #2
   138b8:	aa06      	add	r2, sp, #24
   138ba:	a80b      	add	r0, sp, #44	; 0x2c
   138bc:	f00c faca 	bl	1fe54 <string_param_to_int.constprop.0>
	if (err) {
   138c0:	4604      	mov	r4, r0
   138c2:	2800      	cmp	r0, #0
   138c4:	d1cd      	bne.n	13862 <parse_ncellmeas+0x86>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   138c6:	9b06      	ldr	r3, [sp, #24]
	len = sizeof(tmp_str);
   138c8:	f04f 0807 	mov.w	r8, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   138cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   138d0:	bfa4      	itt	ge
   138d2:	f04f 33ff 	movge.w	r3, #4294967295
   138d6:	9306      	strge	r3, [sp, #24]
	cells->current_cell.id = tmp;
   138d8:	9b06      	ldr	r3, [sp, #24]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   138da:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   138dc:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   138de:	aa09      	add	r2, sp, #36	; 0x24
   138e0:	ab07      	add	r3, sp, #28
   138e2:	a80b      	add	r0, sp, #44	; 0x2c
	len = sizeof(tmp_str);
   138e4:	f8cd 801c 	str.w	r8, [sp, #28]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   138e8:	f00c fa33 	bl	1fd52 <at_params_string_get>
	if (err) {
   138ec:	4604      	mov	r4, r0
   138ee:	2800      	cmp	r0, #0
   138f0:	d1b7      	bne.n	13862 <parse_ncellmeas+0x86>
	tmp_str[len] = '\0';
   138f2:	9b07      	ldr	r3, [sp, #28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   138f4:	210a      	movs	r1, #10
	tmp_str[len] = '\0';
   138f6:	3340      	adds	r3, #64	; 0x40
   138f8:	446b      	add	r3, sp
   138fa:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   138fe:	1d2a      	adds	r2, r5, #4
   13900:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   13904:	f00c fa80 	bl	1fe08 <string_to_int>
	if (err) {
   13908:	4604      	mov	r4, r0
   1390a:	2800      	cmp	r0, #0
   1390c:	d1a9      	bne.n	13862 <parse_ncellmeas+0x86>
	tmp_str[3] = '\0';
   1390e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   13912:	462a      	mov	r2, r5
   13914:	210a      	movs	r1, #10
   13916:	a809      	add	r0, sp, #36	; 0x24
   13918:	f00c fa76 	bl	1fe08 <string_to_int>
	if (err) {
   1391c:	4604      	mov	r4, r0
   1391e:	2800      	cmp	r0, #0
   13920:	d19f      	bne.n	13862 <parse_ncellmeas+0x86>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   13922:	2104      	movs	r1, #4
   13924:	aa06      	add	r2, sp, #24
   13926:	a80b      	add	r0, sp, #44	; 0x2c
   13928:	f00c fa94 	bl	1fe54 <string_param_to_int.constprop.0>
	if (err) {
   1392c:	4604      	mov	r4, r0
   1392e:	2800      	cmp	r0, #0
   13930:	d197      	bne.n	13862 <parse_ncellmeas+0x86>
	cells->current_cell.tac = tmp;
   13932:	9b06      	ldr	r3, [sp, #24]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   13934:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   13936:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   13938:	aa06      	add	r2, sp, #24
   1393a:	a80b      	add	r0, sp, #44	; 0x2c
   1393c:	f00c f9dd 	bl	1fcfa <at_params_int_get>
	if (err) {
   13940:	4604      	mov	r4, r0
   13942:	2800      	cmp	r0, #0
   13944:	d18d      	bne.n	13862 <parse_ncellmeas+0x86>
	cells->current_cell.timing_advance = tmp;
   13946:	9b06      	ldr	r3, [sp, #24]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   13948:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   1394a:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   1394c:	f105 0210 	add.w	r2, r5, #16
   13950:	a80b      	add	r0, sp, #44	; 0x2c
   13952:	f00c f9d2 	bl	1fcfa <at_params_int_get>
	if (err) {
   13956:	4604      	mov	r4, r0
   13958:	2800      	cmp	r0, #0
   1395a:	d182      	bne.n	13862 <parse_ncellmeas+0x86>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   1395c:	4641      	mov	r1, r8
   1395e:	f105 0228 	add.w	r2, r5, #40	; 0x28
   13962:	a80b      	add	r0, sp, #44	; 0x2c
   13964:	f00c f995 	bl	1fc92 <at_params_short_get>
	if (err) {
   13968:	4604      	mov	r4, r0
   1396a:	2800      	cmp	r0, #0
   1396c:	f47f af79 	bne.w	13862 <parse_ncellmeas+0x86>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   13970:	2108      	movs	r1, #8
   13972:	aa06      	add	r2, sp, #24
   13974:	a80b      	add	r0, sp, #44	; 0x2c
   13976:	f00c f9c0 	bl	1fcfa <at_params_int_get>
	if (err) {
   1397a:	4604      	mov	r4, r0
   1397c:	2800      	cmp	r0, #0
   1397e:	f47f af70 	bne.w	13862 <parse_ncellmeas+0x86>
	cells->current_cell.rsrp = tmp;
   13982:	9b06      	ldr	r3, [sp, #24]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   13984:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   13986:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   13988:	aa06      	add	r2, sp, #24
   1398a:	a80b      	add	r0, sp, #44	; 0x2c
   1398c:	f00c f9b5 	bl	1fcfa <at_params_int_get>
	if (err) {
   13990:	4604      	mov	r4, r0
   13992:	2800      	cmp	r0, #0
   13994:	f47f af65 	bne.w	13862 <parse_ncellmeas+0x86>
	cells->current_cell.rsrq = tmp;
   13998:	9b06      	ldr	r3, [sp, #24]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   1399a:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   1399c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   1399e:	f105 0220 	add.w	r2, r5, #32
   139a2:	a80b      	add	r0, sp, #44	; 0x2c
   139a4:	f00c f9c1 	bl	1fd2a <at_params_int64_get>
	if (err) {
   139a8:	4604      	mov	r4, r0
   139aa:	2800      	cmp	r0, #0
   139ac:	f47f af59 	bne.w	13862 <parse_ncellmeas+0x86>
	cells->ncells_count = neighborcell_count_get(at_response);
   139b0:	4638      	mov	r0, r7
   139b2:	f7ff feef 	bl	13794 <neighborcell_count_get>
   139b6:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   139ba:	b2c0      	uxtb	r0, r0
   139bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   139c0:	f100 040b 	add.w	r4, r0, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   139c4:	a80b      	add	r0, sp, #44	; 0x2c
   139c6:	f00c f9e4 	bl	1fd92 <at_params_valid_count_get>
   139ca:	42a0      	cmp	r0, r4
   139cc:	d90e      	bls.n	139ec <parse_ncellmeas+0x210>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   139ce:	4621      	mov	r1, r4
   139d0:	f105 0218 	add.w	r2, r5, #24
   139d4:	a80b      	add	r0, sp, #44	; 0x2c
   139d6:	f00c f9a8 	bl	1fd2a <at_params_int64_get>
		if (err) {
   139da:	4604      	mov	r4, r0
   139dc:	2800      	cmp	r0, #0
   139de:	f47f af40 	bne.w	13862 <parse_ncellmeas+0x86>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   139e2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   139e6:	b933      	cbnz	r3, 139f6 <parse_ncellmeas+0x21a>
	err = at_params_string_get(&resp_list,
   139e8:	2400      	movs	r4, #0
   139ea:	e73a      	b.n	13862 <parse_ncellmeas+0x86>
		cells->current_cell.timing_advance_meas_time = 0;
   139ec:	2200      	movs	r2, #0
   139ee:	2300      	movs	r3, #0
   139f0:	e9c5 2306 	strd	r2, r3, [r5, #24]
   139f4:	e7f5      	b.n	139e2 <parse_ncellmeas+0x206>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   139f6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   139f8:	2b00      	cmp	r3, #0
   139fa:	d0f5      	beq.n	139e8 <parse_ncellmeas+0x20c>
   139fc:	270f      	movs	r7, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   139fe:	f04f 0800 	mov.w	r8, #0
   13a02:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   13a06:	4598      	cmp	r8, r3
   13a08:	d304      	bcc.n	13a14 <parse_ncellmeas+0x238>
	if (incomplete) {
   13a0a:	2e00      	cmp	r6, #0
   13a0c:	d0ec      	beq.n	139e8 <parse_ncellmeas+0x20c>
		err = -E2BIG;
   13a0e:	f06f 0406 	mvn.w	r4, #6
   13a12:	e726      	b.n	13862 <parse_ncellmeas+0x86>
					&cells->neighbor_cells[i].earfcn);
   13a14:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   13a16:	1f39      	subs	r1, r7, #4
   13a18:	eb02 1208 	add.w	r2, r2, r8, lsl #4
   13a1c:	a80b      	add	r0, sp, #44	; 0x2c
   13a1e:	f00c f96c 	bl	1fcfa <at_params_int_get>
		if (err) {
   13a22:	ea4f 1908 	mov.w	r9, r8, lsl #4
   13a26:	4604      	mov	r4, r0
   13a28:	2800      	cmp	r0, #0
   13a2a:	f47f af1a 	bne.w	13862 <parse_ncellmeas+0x86>
					  &cells->neighbor_cells[i].phys_cell_id);
   13a2e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   13a30:	1ef9      	subs	r1, r7, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   13a32:	444a      	add	r2, r9
		err = at_params_short_get(&resp_list,
   13a34:	3208      	adds	r2, #8
   13a36:	a80b      	add	r0, sp, #44	; 0x2c
   13a38:	f00c f92b 	bl	1fc92 <at_params_short_get>
		if (err) {
   13a3c:	4604      	mov	r4, r0
   13a3e:	2800      	cmp	r0, #0
   13a40:	f47f af0f 	bne.w	13862 <parse_ncellmeas+0x86>
		err = at_params_int_get(&resp_list,
   13a44:	aa06      	add	r2, sp, #24
   13a46:	1eb9      	subs	r1, r7, #2
   13a48:	a80b      	add	r0, sp, #44	; 0x2c
   13a4a:	f00c f956 	bl	1fcfa <at_params_int_get>
		if (err) {
   13a4e:	4604      	mov	r4, r0
   13a50:	2800      	cmp	r0, #0
   13a52:	f47f af06 	bne.w	13862 <parse_ncellmeas+0x86>
		cells->neighbor_cells[i].rsrp = tmp;
   13a56:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   13a58:	9a06      	ldr	r2, [sp, #24]
   13a5a:	444b      	add	r3, r9
   13a5c:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   13a5e:	1e79      	subs	r1, r7, #1
   13a60:	aa06      	add	r2, sp, #24
   13a62:	a80b      	add	r0, sp, #44	; 0x2c
   13a64:	f00c f949 	bl	1fcfa <at_params_int_get>
		if (err) {
   13a68:	4604      	mov	r4, r0
   13a6a:	2800      	cmp	r0, #0
   13a6c:	f47f aef9 	bne.w	13862 <parse_ncellmeas+0x86>
		cells->neighbor_cells[i].rsrq = tmp;
   13a70:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   13a72:	9a06      	ldr	r2, [sp, #24]
   13a74:	444b      	add	r3, r9
   13a76:	819a      	strh	r2, [r3, #12]
					&cells->neighbor_cells[i].time_diff);
   13a78:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   13a7a:	4639      	mov	r1, r7
					&cells->neighbor_cells[i].time_diff);
   13a7c:	444a      	add	r2, r9
		err = at_params_int_get(&resp_list,
   13a7e:	3204      	adds	r2, #4
   13a80:	a80b      	add	r0, sp, #44	; 0x2c
   13a82:	f00c f93a 	bl	1fcfa <at_params_int_get>
		if (err) {
   13a86:	3705      	adds	r7, #5
   13a88:	4604      	mov	r4, r0
   13a8a:	2800      	cmp	r0, #0
   13a8c:	f47f aee9 	bne.w	13862 <parse_ncellmeas+0x86>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   13a90:	f108 0801 	add.w	r8, r8, #1
   13a94:	e7b5      	b.n	13a02 <parse_ncellmeas+0x226>
		err = 1;
   13a96:	2401      	movs	r4, #1
   13a98:	e6e3      	b.n	13862 <parse_ncellmeas+0x86>
   13a9a:	bf00      	nop
   13a9c:	00025a67 	.word	0x00025a67
   13aa0:	00022f7c 	.word	0x00022f7c
   13aa4:	00025e0e 	.word	0x00025e0e
   13aa8:	00025cbf 	.word	0x00025cbf
   13aac:	000259c8 	.word	0x000259c8

00013ab0 <parse_ncellmeas_gci>:
{
	struct at_param_list resp_list;
	struct lte_lc_ncell *ncells = NULL;
	int err, status, tmp_int, len;
	int16_t tmp_short;
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   13ab0:	2300      	movs	r3, #0
{
   13ab2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ab6:	4616      	mov	r6, r2
	size_t response_prefix_len = sizeof(response_prefix);
   13ab8:	220b      	movs	r2, #11
{
   13aba:	460d      	mov	r5, r1
	uint32_t count = 0;
   13abc:	4699      	mov	r9, r3
{
   13abe:	b0a3      	sub	sp, #140	; 0x8c
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   13ac0:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
	size_t response_prefix_len = sizeof(response_prefix);
   13ac4:	920e      	str	r2, [sp, #56]	; 0x38
{
   13ac6:	9007      	str	r0, [sp, #28]
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   13ac8:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
static uint32_t get_char_frequency(const char *str, char c)
   13acc:	1e4a      	subs	r2, r1, #1
		if (*str == c) {
   13ace:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   13ad2:	2b2c      	cmp	r3, #44	; 0x2c
   13ad4:	d102      	bne.n	13adc <parse_ncellmeas_gci+0x2c>
			count++;
   13ad6:	f109 0901 	add.w	r9, r9, #1
	} while (*(str++) != '\0');
   13ada:	e7f8      	b.n	13ace <parse_ncellmeas_gci+0x1e>
   13adc:	2b00      	cmp	r3, #0
   13ade:	d1f6      	bne.n	13ace <parse_ncellmeas_gci+0x1e>
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	/* Fill the defaults */
	cells->gci_cells_count = 0;
	cells->ncells_count = 0;
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   13ae0:	f04f 32ff 	mov.w	r2, #4294967295
   13ae4:	2430      	movs	r4, #48	; 0x30
	size_t param_count = get_char_frequency(at_response, ',') + 3;
   13ae6:	f109 0703 	add.w	r7, r9, #3
	cells->gci_cells_count = 0;
   13aea:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	cells->ncells_count = 0;
   13aee:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   13af2:	60b2      	str	r2, [r6, #8]

	for (i = 0; i < params->gci_count; i++) {
   13af4:	9907      	ldr	r1, [sp, #28]
   13af6:	7849      	ldrb	r1, [r1, #1]
   13af8:	4299      	cmp	r1, r3
   13afa:	d80c      	bhi.n	13b16 <parse_ncellmeas_gci+0x66>
	 *		<meas_time>,<serving>,<neighbor_count>
	 *	[,<n_earfcn1>,<n_phys_cell_id1>,<n_rsrp1>,<n_rsrq1>,<time_diff1>]
	 *	[,<n_earfcn2>,<n_phys_cell_id2>,<n_rsrp2>,<n_rsrq2>,<time_diff2>]...]...
	 */

	err = at_params_list_init(&resp_list, param_count);
   13afc:	4639      	mov	r1, r7
   13afe:	a811      	add	r0, sp, #68	; 0x44
   13b00:	f00c f81f 	bl	1fb42 <at_params_list_init>
	if (err) {
   13b04:	4604      	mov	r4, r0
   13b06:	b180      	cbz	r0, 13b2a <parse_ncellmeas_gci+0x7a>
		LOG_ERR("Could not init AT params list for cell_list, error: %d", err);
   13b08:	4ba1      	ldr	r3, [pc, #644]	; (13d90 <parse_ncellmeas_gci+0x2e0>)
   13b0a:	9003      	str	r0, [sp, #12]
		}
	}

	if (incomplete) {
		err = -E2BIG;
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   13b0c:	9302      	str	r3, [sp, #8]
   13b0e:	2300      	movs	r3, #0
   13b10:	e9cd 3300 	strd	r3, r3, [sp]
   13b14:	e10a      	b.n	13d2c <parse_ncellmeas_gci+0x27c>
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   13b16:	fb04 f003 	mul.w	r0, r4, r3
   13b1a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
	for (i = 0; i < params->gci_count; i++) {
   13b1c:	3301      	adds	r3, #1
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   13b1e:	4401      	add	r1, r0
   13b20:	608a      	str	r2, [r1, #8]
		cells->gci_cells[i].timing_advance = LTE_LC_CELL_TIMING_ADVANCE_INVALID;
   13b22:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   13b24:	4401      	add	r1, r0
   13b26:	828a      	strh	r2, [r1, #20]
	for (i = 0; i < params->gci_count; i++) {
   13b28:	e7e4      	b.n	13af4 <parse_ncellmeas_gci+0x44>
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   13b2a:	4601      	mov	r1, r0
   13b2c:	aa11      	add	r2, sp, #68	; 0x44
   13b2e:	4628      	mov	r0, r5
   13b30:	f00b ffee 	bl	1fb10 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   13b34:	4604      	mov	r4, r0
   13b36:	b370      	cbz	r0, 13b96 <parse_ncellmeas_gci+0xe6>
   13b38:	1dc3      	adds	r3, r0, #7
   13b3a:	d002      	beq.n	13b42 <parse_ncellmeas_gci+0x92>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   13b3c:	4b95      	ldr	r3, [pc, #596]	; (13d94 <parse_ncellmeas_gci+0x2e4>)
   13b3e:	9003      	str	r0, [sp, #12]
   13b40:	e7e4      	b.n	13b0c <parse_ncellmeas_gci+0x5c>
		LOG_WRN("E2BIG was returned, continue. param_count %d, err %d, str %s",
   13b42:	4b95      	ldr	r3, [pc, #596]	; (13d98 <parse_ncellmeas_gci+0x2e8>)
   13b44:	e9cd 0504 	strd	r0, r5, [sp, #16]
   13b48:	9302      	str	r3, [sp, #8]
   13b4a:	2300      	movs	r3, #0
   13b4c:	2202      	movs	r2, #2
   13b4e:	4618      	mov	r0, r3
   13b50:	e9cd 3300 	strd	r3, r3, [sp]
   13b54:	4991      	ldr	r1, [pc, #580]	; (13d9c <parse_ncellmeas_gci+0x2ec>)
   13b56:	9703      	str	r7, [sp, #12]
   13b58:	f00c f947 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
		incomplete = true;
   13b5c:	2301      	movs	r3, #1
   13b5e:	9306      	str	r3, [sp, #24]
	err = at_params_string_get(&resp_list,
   13b60:	2100      	movs	r1, #0
   13b62:	ab0e      	add	r3, sp, #56	; 0x38
   13b64:	aa13      	add	r2, sp, #76	; 0x4c
   13b66:	a811      	add	r0, sp, #68	; 0x44
   13b68:	f00c f8f3 	bl	1fd52 <at_params_string_get>
	if (err) {
   13b6c:	4605      	mov	r5, r0
   13b6e:	b1a0      	cbz	r0, 13b9a <parse_ncellmeas_gci+0xea>
		LOG_ERR("Could not get response prefix, error: %d", err);
   13b70:	4b8b      	ldr	r3, [pc, #556]	; (13da0 <parse_ncellmeas_gci+0x2f0>)
   13b72:	9003      	str	r0, [sp, #12]
   13b74:	9302      	str	r3, [sp, #8]
   13b76:	2300      	movs	r3, #0
   13b78:	2201      	movs	r2, #1
   13b7a:	4618      	mov	r0, r3
   13b7c:	e9cd 3300 	strd	r3, r3, [sp]
   13b80:	4986      	ldr	r1, [pc, #536]	; (13d9c <parse_ncellmeas_gci+0x2ec>)
   13b82:	f00c f932 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
		goto clean_exit;
   13b86:	462c      	mov	r4, r5
	}

clean_exit:
	at_params_list_free(&resp_list);
   13b88:	a811      	add	r0, sp, #68	; 0x44
   13b8a:	f00c f804 	bl	1fb96 <at_params_list_free>

	return err;
}
   13b8e:	4620      	mov	r0, r4
   13b90:	b023      	add	sp, #140	; 0x8c
   13b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool incomplete = false;
   13b96:	9006      	str	r0, [sp, #24]
   13b98:	e7e2      	b.n	13b60 <parse_ncellmeas_gci+0xb0>
	if (!response_is_valid(response_prefix, response_prefix_len,
   13b9a:	4a82      	ldr	r2, [pc, #520]	; (13da4 <parse_ncellmeas_gci+0x2f4>)
   13b9c:	990e      	ldr	r1, [sp, #56]	; 0x38
   13b9e:	a813      	add	r0, sp, #76	; 0x4c
   13ba0:	f7ff fb86 	bl	132b0 <response_is_valid>
   13ba4:	4607      	mov	r7, r0
   13ba6:	b950      	cbnz	r0, 13bbe <parse_ncellmeas_gci+0x10e>
		LOG_ERR("Not a valid NCELLMEAS response");
   13ba8:	4b7f      	ldr	r3, [pc, #508]	; (13da8 <parse_ncellmeas_gci+0x2f8>)
   13baa:	2201      	movs	r2, #1
   13bac:	e9cd 0301 	strd	r0, r3, [sp, #4]
   13bb0:	497a      	ldr	r1, [pc, #488]	; (13d9c <parse_ncellmeas_gci+0x2ec>)
   13bb2:	4603      	mov	r3, r0
   13bb4:	9000      	str	r0, [sp, #0]
   13bb6:	f00c f918 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
	err = at_params_string_get(&resp_list,
   13bba:	2400      	movs	r4, #0
   13bbc:	e7e4      	b.n	13b88 <parse_ncellmeas_gci+0xd8>
	err = at_params_int_get(&resp_list, curr_index, &status);
   13bbe:	2101      	movs	r1, #1
   13bc0:	aa0b      	add	r2, sp, #44	; 0x2c
   13bc2:	a811      	add	r0, sp, #68	; 0x44
   13bc4:	f00c f899 	bl	1fcfa <at_params_int_get>
	if (err) {
   13bc8:	4604      	mov	r4, r0
   13bca:	2800      	cmp	r0, #0
   13bcc:	d1dc      	bne.n	13b88 <parse_ncellmeas_gci+0xd8>
	if (status == AT_NCELLMEAS_STATUS_VALUE_FAIL) {
   13bce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   13bd0:	2c01      	cmp	r4, #1
   13bd2:	d0d9      	beq.n	13b88 <parse_ncellmeas_gci+0xd8>
	} else if (status == AT_NCELLMEAS_STATUS_VALUE_INCOMPLETE) {
   13bd4:	2c02      	cmp	r4, #2
   13bd6:	d108      	bne.n	13bea <parse_ncellmeas_gci+0x13a>
		LOG_WRN("NCELLMEAS measurements interrupted; results incomplete");
   13bd8:	4b74      	ldr	r3, [pc, #464]	; (13dac <parse_ncellmeas_gci+0x2fc>)
   13bda:	4622      	mov	r2, r4
   13bdc:	e9cd 5301 	strd	r5, r3, [sp, #4]
   13be0:	496e      	ldr	r1, [pc, #440]	; (13d9c <parse_ncellmeas_gci+0x2ec>)
   13be2:	462b      	mov	r3, r5
   13be4:	9500      	str	r5, [sp, #0]
   13be6:	f00c f900 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   13bea:	f04f 0b00 	mov.w	fp, #0
   13bee:	2501      	movs	r5, #1
   13bf0:	46d8      	mov	r8, fp
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   13bf2:	f1a9 030a 	sub.w	r3, r9, #10
   13bf6:	9309      	str	r3, [sp, #36]	; 0x24
   13bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13bfa:	42ab      	cmp	r3, r5
   13bfc:	d903      	bls.n	13c06 <parse_ncellmeas_gci+0x156>
			i < params->gci_count; i++) {
   13bfe:	9b07      	ldr	r3, [sp, #28]
   13c00:	785b      	ldrb	r3, [r3, #1]
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   13c02:	4598      	cmp	r8, r3
   13c04:	d307      	bcc.n	13c16 <parse_ncellmeas_gci+0x166>
	if (incomplete) {
   13c06:	9b06      	ldr	r3, [sp, #24]
   13c08:	2b00      	cmp	r3, #0
   13c0a:	d0d6      	beq.n	13bba <parse_ncellmeas_gci+0x10a>
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   13c0c:	f06f 0406 	mvn.w	r4, #6
   13c10:	4b67      	ldr	r3, [pc, #412]	; (13db0 <parse_ncellmeas_gci+0x300>)
   13c12:	9403      	str	r4, [sp, #12]
   13c14:	e77a      	b.n	13b0c <parse_ncellmeas_gci+0x5c>
		curr_index++;
   13c16:	f105 0901 	add.w	r9, r5, #1
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   13c1a:	4649      	mov	r1, r9
   13c1c:	aa0c      	add	r2, sp, #48	; 0x30
   13c1e:	a811      	add	r0, sp, #68	; 0x44
   13c20:	f00c f918 	bl	1fe54 <string_param_to_int.constprop.0>
		if (err) {
   13c24:	4604      	mov	r4, r0
   13c26:	b170      	cbz	r0, 13c46 <parse_ncellmeas_gci+0x196>
			LOG_ERR("Could not parse cell_id, index %d, i %d error: %d",
   13c28:	4b62      	ldr	r3, [pc, #392]	; (13db4 <parse_ncellmeas_gci+0x304>)
   13c2a:	e9cd 8004 	strd	r8, r0, [sp, #16]
   13c2e:	9302      	str	r3, [sp, #8]
   13c30:	2300      	movs	r3, #0
   13c32:	2201      	movs	r2, #1
   13c34:	4618      	mov	r0, r3
   13c36:	e9cd 3300 	strd	r3, r3, [sp]
   13c3a:	4958      	ldr	r1, [pc, #352]	; (13d9c <parse_ncellmeas_gci+0x2ec>)
   13c3c:	f8cd 900c 	str.w	r9, [sp, #12]
   13c40:	f00c f8d3 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
			goto clean_exit;
   13c44:	e7a0      	b.n	13b88 <parse_ncellmeas_gci+0xd8>
		if (tmp_int > LTE_LC_CELL_EUTRAN_ID_MAX) {
   13c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13c48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   13c4c:	db0c      	blt.n	13c68 <parse_ncellmeas_gci+0x1b8>
			LOG_WRN("cell_id = %d which is > LTE_LC_CELL_EUTRAN_ID_MAX; "
   13c4e:	9303      	str	r3, [sp, #12]
   13c50:	4b59      	ldr	r3, [pc, #356]	; (13db8 <parse_ncellmeas_gci+0x308>)
   13c52:	2202      	movs	r2, #2
   13c54:	e9cd 0301 	strd	r0, r3, [sp, #4]
   13c58:	4950      	ldr	r1, [pc, #320]	; (13d9c <parse_ncellmeas_gci+0x2ec>)
   13c5a:	4603      	mov	r3, r0
   13c5c:	9000      	str	r0, [sp, #0]
   13c5e:	f00c f8c4 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
			tmp_int = LTE_LC_CELL_EUTRAN_ID_INVALID;
   13c62:	f04f 33ff 	mov.w	r3, #4294967295
   13c66:	930c      	str	r3, [sp, #48]	; 0x30
		parsed_cell.id = tmp_int;
   13c68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   13c6a:	aa0f      	add	r2, sp, #60	; 0x3c
		parsed_cell.id = tmp_int;
   13c6c:	9318      	str	r3, [sp, #96]	; 0x60
		len = sizeof(tmp_str);
   13c6e:	2307      	movs	r3, #7
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   13c70:	1ca9      	adds	r1, r5, #2
		len = sizeof(tmp_str);
   13c72:	930d      	str	r3, [sp, #52]	; 0x34
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   13c74:	a811      	add	r0, sp, #68	; 0x44
   13c76:	ab0d      	add	r3, sp, #52	; 0x34
   13c78:	f00c f86b 	bl	1fd52 <at_params_string_get>
		if (err) {
   13c7c:	4604      	mov	r4, r0
   13c7e:	b110      	cbz	r0, 13c86 <parse_ncellmeas_gci+0x1d6>
			LOG_ERR("Could not parse plmn, error: %d", err);
   13c80:	4b4e      	ldr	r3, [pc, #312]	; (13dbc <parse_ncellmeas_gci+0x30c>)
   13c82:	9003      	str	r0, [sp, #12]
   13c84:	e742      	b.n	13b0c <parse_ncellmeas_gci+0x5c>
		tmp_str[len] = '\0';
   13c86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13c88:	4682      	mov	sl, r0
   13c8a:	3388      	adds	r3, #136	; 0x88
   13c8c:	446b      	add	r3, sp
   13c8e:	f803 0c4c 	strb.w	r0, [r3, #-76]
		err = string_to_int(&tmp_str[3], 10, &parsed_cell.mnc);
   13c92:	210a      	movs	r1, #10
   13c94:	aa17      	add	r2, sp, #92	; 0x5c
   13c96:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
   13c9a:	f00c f8b5 	bl	1fe08 <string_to_int>
		if (err) {
   13c9e:	4604      	mov	r4, r0
   13ca0:	b138      	cbz	r0, 13cb2 <parse_ncellmeas_gci+0x202>
			LOG_ERR("string_to_int, error: %d", err);
   13ca2:	4b47      	ldr	r3, [pc, #284]	; (13dc0 <parse_ncellmeas_gci+0x310>)
   13ca4:	9403      	str	r4, [sp, #12]
			LOG_ERR("Could not parse rsrp, error: %d", err);
   13ca6:	e9cd a301 	strd	sl, r3, [sp, #4]
   13caa:	f8cd a000 	str.w	sl, [sp]
   13cae:	4653      	mov	r3, sl
   13cb0:	e03c      	b.n	13d2c <parse_ncellmeas_gci+0x27c>
		tmp_str[3] = '\0';
   13cb2:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   13cb6:	4681      	mov	r9, r0
		err = string_to_int(tmp_str, 10, &parsed_cell.mcc);
   13cb8:	210a      	movs	r1, #10
   13cba:	aa16      	add	r2, sp, #88	; 0x58
   13cbc:	a80f      	add	r0, sp, #60	; 0x3c
   13cbe:	f00c f8a3 	bl	1fe08 <string_to_int>
		if (err) {
   13cc2:	4604      	mov	r4, r0
   13cc4:	2800      	cmp	r0, #0
   13cc6:	d1ec      	bne.n	13ca2 <parse_ncellmeas_gci+0x1f2>
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   13cc8:	aa0c      	add	r2, sp, #48	; 0x30
   13cca:	1ce9      	adds	r1, r5, #3
   13ccc:	a811      	add	r0, sp, #68	; 0x44
   13cce:	f00c f8c1 	bl	1fe54 <string_param_to_int.constprop.0>
		if (err) {
   13cd2:	4604      	mov	r4, r0
   13cd4:	b168      	cbz	r0, 13cf2 <parse_ncellmeas_gci+0x242>
			LOG_ERR("Could not parse tracking_area_code in i %d, error: %d", i, err);
   13cd6:	4b3b      	ldr	r3, [pc, #236]	; (13dc4 <parse_ncellmeas_gci+0x314>)
   13cd8:	e9cd 8003 	strd	r8, r0, [sp, #12]
   13cdc:	e9cd 9301 	strd	r9, r3, [sp, #4]
   13ce0:	2201      	movs	r2, #1
   13ce2:	464b      	mov	r3, r9
   13ce4:	4648      	mov	r0, r9
   13ce6:	492d      	ldr	r1, [pc, #180]	; (13d9c <parse_ncellmeas_gci+0x2ec>)
   13ce8:	f8cd 9000 	str.w	r9, [sp]
   13cec:	f00c f87d 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
			goto clean_exit;
   13cf0:	e74a      	b.n	13b88 <parse_ncellmeas_gci+0xd8>
		parsed_cell.tac = tmp_int;
   13cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   13cf4:	aa0c      	add	r2, sp, #48	; 0x30
   13cf6:	1d29      	adds	r1, r5, #4
   13cf8:	a811      	add	r0, sp, #68	; 0x44
		parsed_cell.tac = tmp_int;
   13cfa:	9319      	str	r3, [sp, #100]	; 0x64
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   13cfc:	f00b fffd 	bl	1fcfa <at_params_int_get>
		if (err) {
   13d00:	4604      	mov	r4, r0
   13d02:	b110      	cbz	r0, 13d0a <parse_ncellmeas_gci+0x25a>
			LOG_ERR("Could not parse timing_advance, error: %d", err);
   13d04:	4b30      	ldr	r3, [pc, #192]	; (13dc8 <parse_ncellmeas_gci+0x318>)
   13d06:	9003      	str	r0, [sp, #12]
   13d08:	e7cd      	b.n	13ca6 <parse_ncellmeas_gci+0x1f6>
		parsed_cell.timing_advance = tmp_int;
   13d0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		err = at_params_int64_get(&resp_list, curr_index,
   13d0c:	aa1c      	add	r2, sp, #112	; 0x70
   13d0e:	1d69      	adds	r1, r5, #5
   13d10:	a811      	add	r0, sp, #68	; 0x44
		parsed_cell.timing_advance = tmp_int;
   13d12:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
		err = at_params_int64_get(&resp_list, curr_index,
   13d16:	f00c f808 	bl	1fd2a <at_params_int64_get>
		if (err) {
   13d1a:	4604      	mov	r4, r0
   13d1c:	b160      	cbz	r0, 13d38 <parse_ncellmeas_gci+0x288>
			LOG_ERR("Could not parse timing_advance_meas_time, error: %d", err);
   13d1e:	4b2b      	ldr	r3, [pc, #172]	; (13dcc <parse_ncellmeas_gci+0x31c>)
   13d20:	9003      	str	r0, [sp, #12]
			LOG_ERR("Could not parse phys_cell_id, error: %d", err);
   13d22:	e9cd 9301 	strd	r9, r3, [sp, #4]
   13d26:	464b      	mov	r3, r9
   13d28:	f8cd 9000 	str.w	r9, [sp]
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   13d2c:	2201      	movs	r2, #1
   13d2e:	4618      	mov	r0, r3
   13d30:	491a      	ldr	r1, [pc, #104]	; (13d9c <parse_ncellmeas_gci+0x2ec>)
   13d32:	f00c f85a 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
   13d36:	e727      	b.n	13b88 <parse_ncellmeas_gci+0xd8>
		err = at_params_int_get(&resp_list, curr_index, &parsed_cell.earfcn);
   13d38:	aa1a      	add	r2, sp, #104	; 0x68
   13d3a:	1da9      	adds	r1, r5, #6
   13d3c:	a811      	add	r0, sp, #68	; 0x44
   13d3e:	f00b ffdc 	bl	1fcfa <at_params_int_get>
		if (err) {
   13d42:	4604      	mov	r4, r0
   13d44:	b110      	cbz	r0, 13d4c <parse_ncellmeas_gci+0x29c>
			LOG_ERR("Could not parse earfcn, error: %d", err);
   13d46:	4b22      	ldr	r3, [pc, #136]	; (13dd0 <parse_ncellmeas_gci+0x320>)
   13d48:	9003      	str	r0, [sp, #12]
   13d4a:	e7ac      	b.n	13ca6 <parse_ncellmeas_gci+0x1f6>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.phys_cell_id);
   13d4c:	aa20      	add	r2, sp, #128	; 0x80
   13d4e:	1de9      	adds	r1, r5, #7
   13d50:	a811      	add	r0, sp, #68	; 0x44
   13d52:	f00b ff9e 	bl	1fc92 <at_params_short_get>
		if (err) {
   13d56:	4604      	mov	r4, r0
   13d58:	b110      	cbz	r0, 13d60 <parse_ncellmeas_gci+0x2b0>
			LOG_ERR("Could not parse phys_cell_id, error: %d", err);
   13d5a:	4b1e      	ldr	r3, [pc, #120]	; (13dd4 <parse_ncellmeas_gci+0x324>)
   13d5c:	9003      	str	r0, [sp, #12]
   13d5e:	e7e0      	b.n	13d22 <parse_ncellmeas_gci+0x272>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrp);
   13d60:	f10d 0282 	add.w	r2, sp, #130	; 0x82
   13d64:	f105 0108 	add.w	r1, r5, #8
   13d68:	a811      	add	r0, sp, #68	; 0x44
   13d6a:	f00b ff92 	bl	1fc92 <at_params_short_get>
		if (err) {
   13d6e:	4604      	mov	r4, r0
   13d70:	b110      	cbz	r0, 13d78 <parse_ncellmeas_gci+0x2c8>
			LOG_ERR("Could not parse rsrp, error: %d", err);
   13d72:	4b19      	ldr	r3, [pc, #100]	; (13dd8 <parse_ncellmeas_gci+0x328>)
   13d74:	9003      	str	r0, [sp, #12]
   13d76:	e796      	b.n	13ca6 <parse_ncellmeas_gci+0x1f6>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrq);
   13d78:	aa21      	add	r2, sp, #132	; 0x84
   13d7a:	f105 0109 	add.w	r1, r5, #9
   13d7e:	a811      	add	r0, sp, #68	; 0x44
   13d80:	f00b ff87 	bl	1fc92 <at_params_short_get>
		if (err) {
   13d84:	4604      	mov	r4, r0
   13d86:	b358      	cbz	r0, 13de0 <parse_ncellmeas_gci+0x330>
			LOG_ERR("Could not parse rsrq, error: %d", err);
   13d88:	4b14      	ldr	r3, [pc, #80]	; (13ddc <parse_ncellmeas_gci+0x32c>)
   13d8a:	9003      	str	r0, [sp, #12]
   13d8c:	e6be      	b.n	13b0c <parse_ncellmeas_gci+0x5c>
   13d8e:	bf00      	nop
   13d90:	00025e40 	.word	0x00025e40
   13d94:	00025e0e 	.word	0x00025e0e
   13d98:	00025e77 	.word	0x00025e77
   13d9c:	00022f7c 	.word	0x00022f7c
   13da0:	00025cbf 	.word	0x00025cbf
   13da4:	000259c8 	.word	0x000259c8
   13da8:	00025eb4 	.word	0x00025eb4
   13dac:	00025ed3 	.word	0x00025ed3
   13db0:	0002628b 	.word	0x0002628b
   13db4:	00025f0a 	.word	0x00025f0a
   13db8:	00025f3c 	.word	0x00025f3c
   13dbc:	00025f7f 	.word	0x00025f7f
   13dc0:	00025f9f 	.word	0x00025f9f
   13dc4:	00025fb8 	.word	0x00025fb8
   13dc8:	00025fee 	.word	0x00025fee
   13dcc:	00026018 	.word	0x00026018
   13dd0:	0002604c 	.word	0x0002604c
   13dd4:	0002606e 	.word	0x0002606e
   13dd8:	00026096 	.word	0x00026096
   13ddc:	000260b6 	.word	0x000260b6
		err = at_params_int64_get(&resp_list, curr_index, &parsed_cell.measurement_time);
   13de0:	aa1e      	add	r2, sp, #120	; 0x78
   13de2:	f105 010a 	add.w	r1, r5, #10
   13de6:	a811      	add	r0, sp, #68	; 0x44
   13de8:	f00b ff9f 	bl	1fd2a <at_params_int64_get>
		if (err) {
   13dec:	4604      	mov	r4, r0
   13dee:	b110      	cbz	r0, 13df6 <parse_ncellmeas_gci+0x346>
			LOG_ERR("Could not parse meas_time, error: %d", err);
   13df0:	4b5f      	ldr	r3, [pc, #380]	; (13f70 <parse_ncellmeas_gci+0x4c0>)
   13df2:	9003      	str	r0, [sp, #12]
   13df4:	e68a      	b.n	13b0c <parse_ncellmeas_gci+0x5c>
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   13df6:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
   13dfa:	f105 010b 	add.w	r1, r5, #11
   13dfe:	a811      	add	r0, sp, #68	; 0x44
   13e00:	f00b ff47 	bl	1fc92 <at_params_short_get>
		if (err) {
   13e04:	4604      	mov	r4, r0
   13e06:	b110      	cbz	r0, 13e0e <parse_ncellmeas_gci+0x35e>
			LOG_ERR("Could not parse serving, error: %d", err);
   13e08:	4b5a      	ldr	r3, [pc, #360]	; (13f74 <parse_ncellmeas_gci+0x4c4>)
   13e0a:	9003      	str	r0, [sp, #12]
   13e0c:	e67e      	b.n	13b0c <parse_ncellmeas_gci+0x5c>
		curr_index++;
   13e0e:	350c      	adds	r5, #12
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   13e10:	4629      	mov	r1, r5
   13e12:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
   13e16:	a811      	add	r0, sp, #68	; 0x44
		is_serving_cell = tmp_short;
   13e18:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   13e1c:	f00b ff39 	bl	1fc92 <at_params_short_get>
		if (err) {
   13e20:	4604      	mov	r4, r0
   13e22:	b110      	cbz	r0, 13e2a <parse_ncellmeas_gci+0x37a>
			LOG_ERR("Could not parse neighbor_count, error: %d", err);
   13e24:	4b54      	ldr	r3, [pc, #336]	; (13f78 <parse_ncellmeas_gci+0x4c8>)
   13e26:	9003      	str	r0, [sp, #12]
   13e28:	e670      	b.n	13b0c <parse_ncellmeas_gci+0x5c>
		if (is_serving_cell) {
   13e2a:	f1b9 0f00 	cmp.w	r9, #0
   13e2e:	f000 8087 	beq.w	13f40 <parse_ncellmeas_gci+0x490>
			cells->current_cell = parsed_cell;
   13e32:	46b6      	mov	lr, r6
   13e34:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
   13e38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   13e3c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   13e40:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   13e44:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   13e48:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
		parsed_ncells_count = tmp_short;
   13e4c:	f89d 902a 	ldrb.w	r9, [sp, #42]	; 0x2a
			cells->current_cell = parsed_cell;
   13e50:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
			if (parsed_ncells_count != 0) {
   13e54:	f1b9 0f00 	cmp.w	r9, #0
   13e58:	d026      	beq.n	13ea8 <parse_ncellmeas_gci+0x3f8>
				if (parsed_ncells_count > CONFIG_LTE_NEIGHBOR_CELLS_MAX) {
   13e5a:	f1b9 0f0a 	cmp.w	r9, #10
   13e5e:	d90e      	bls.n	13e7e <parse_ncellmeas_gci+0x3ce>
					LOG_WRN("Cutting response, because received neigbor cell"
   13e60:	f04f 090a 	mov.w	r9, #10
   13e64:	4b45      	ldr	r3, [pc, #276]	; (13f7c <parse_ncellmeas_gci+0x4cc>)
   13e66:	2202      	movs	r2, #2
   13e68:	e9cd 4301 	strd	r4, r3, [sp, #4]
   13e6c:	4620      	mov	r0, r4
   13e6e:	4623      	mov	r3, r4
   13e70:	4943      	ldr	r1, [pc, #268]	; (13f80 <parse_ncellmeas_gci+0x4d0>)
   13e72:	f8cd 900c 	str.w	r9, [sp, #12]
   13e76:	9400      	str	r4, [sp, #0]
   13e78:	f00b ffb7 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
					incomplete = true;
   13e7c:	9706      	str	r7, [sp, #24]
				ncells = k_calloc(
   13e7e:	2110      	movs	r1, #16
   13e80:	4648      	mov	r0, r9
   13e82:	f00d fec5 	bl	21c10 <k_calloc>
					to_be_parsed_ncell_count = parsed_ncells_count;
   13e86:	464c      	mov	r4, r9
				ncells = k_calloc(
   13e88:	4603      	mov	r3, r0
				if (ncells == NULL) {
   13e8a:	b950      	cbnz	r0, 13ea2 <parse_ncellmeas_gci+0x3f2>
					LOG_WRN("Failed to allocate memory for the ncells"
   13e8c:	4a3d      	ldr	r2, [pc, #244]	; (13f84 <parse_ncellmeas_gci+0x4d4>)
   13e8e:	493c      	ldr	r1, [pc, #240]	; (13f80 <parse_ncellmeas_gci+0x4d0>)
   13e90:	e9cd 0201 	strd	r0, r2, [sp, #4]
   13e94:	9000      	str	r0, [sp, #0]
   13e96:	2202      	movs	r2, #2
   13e98:	f00b ffa7 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
			i < params->gci_count; i++) {
   13e9c:	f108 0801 	add.w	r8, r8, #1
   13ea0:	e6aa      	b.n	13bf8 <parse_ncellmeas_gci+0x148>
				cells->neighbor_cells = ncells;
   13ea2:	6370      	str	r0, [r6, #52]	; 0x34
				cells->ncells_count = to_be_parsed_ncell_count;
   13ea4:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   13ea8:	f04f 0900 	mov.w	r9, #0
   13eac:	9408      	str	r4, [sp, #32]
   13eae:	9b08      	ldr	r3, [sp, #32]
   13eb0:	4599      	cmp	r9, r3
   13eb2:	d0f3      	beq.n	13e9c <parse_ncellmeas_gci+0x3ec>
							&cells->neighbor_cells[j].earfcn);
   13eb4:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_int_get(&resp_list,
   13eb6:	1c69      	adds	r1, r5, #1
   13eb8:	eb02 1209 	add.w	r2, r2, r9, lsl #4
   13ebc:	a811      	add	r0, sp, #68	; 0x44
   13ebe:	f00b ff1c 	bl	1fcfa <at_params_int_get>
				if (err) {
   13ec2:	ea4f 1a09 	mov.w	sl, r9, lsl #4
   13ec6:	4604      	mov	r4, r0
   13ec8:	b110      	cbz	r0, 13ed0 <parse_ncellmeas_gci+0x420>
					LOG_ERR("Could not parse n_earfcn, error: %d", err);
   13eca:	4b2f      	ldr	r3, [pc, #188]	; (13f88 <parse_ncellmeas_gci+0x4d8>)
   13ecc:	9003      	str	r0, [sp, #12]
   13ece:	e61d      	b.n	13b0c <parse_ncellmeas_gci+0x5c>
							  &cells->neighbor_cells[j].phys_cell_id);
   13ed0:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_short_get(&resp_list,
   13ed2:	1ca9      	adds	r1, r5, #2
							  &cells->neighbor_cells[j].phys_cell_id);
   13ed4:	4452      	add	r2, sl
				err = at_params_short_get(&resp_list,
   13ed6:	3208      	adds	r2, #8
   13ed8:	a811      	add	r0, sp, #68	; 0x44
   13eda:	f00b feda 	bl	1fc92 <at_params_short_get>
				if (err) {
   13ede:	4604      	mov	r4, r0
   13ee0:	b110      	cbz	r0, 13ee8 <parse_ncellmeas_gci+0x438>
					LOG_ERR("Could not parse n_phys_cell_id, error: %d", err);
   13ee2:	4b2a      	ldr	r3, [pc, #168]	; (13f8c <parse_ncellmeas_gci+0x4dc>)
   13ee4:	9003      	str	r0, [sp, #12]
   13ee6:	e611      	b.n	13b0c <parse_ncellmeas_gci+0x5c>
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   13ee8:	aa0c      	add	r2, sp, #48	; 0x30
   13eea:	1ce9      	adds	r1, r5, #3
   13eec:	a811      	add	r0, sp, #68	; 0x44
   13eee:	f00b ff04 	bl	1fcfa <at_params_int_get>
				if (err) {
   13ef2:	4604      	mov	r4, r0
   13ef4:	b110      	cbz	r0, 13efc <parse_ncellmeas_gci+0x44c>
					LOG_ERR("Could not parse n_rsrp, error: %d", err);
   13ef6:	4b26      	ldr	r3, [pc, #152]	; (13f90 <parse_ncellmeas_gci+0x4e0>)
   13ef8:	9003      	str	r0, [sp, #12]
   13efa:	e607      	b.n	13b0c <parse_ncellmeas_gci+0x5c>
				cells->neighbor_cells[j].rsrp = tmp_int;
   13efc:	6b73      	ldr	r3, [r6, #52]	; 0x34
   13efe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13f00:	4453      	add	r3, sl
   13f02:	815a      	strh	r2, [r3, #10]
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   13f04:	1d29      	adds	r1, r5, #4
   13f06:	aa0c      	add	r2, sp, #48	; 0x30
   13f08:	a811      	add	r0, sp, #68	; 0x44
   13f0a:	f00b fef6 	bl	1fcfa <at_params_int_get>
				if (err) {
   13f0e:	4604      	mov	r4, r0
   13f10:	b110      	cbz	r0, 13f18 <parse_ncellmeas_gci+0x468>
					LOG_ERR("Could not parse n_rsrq, error: %d", err);
   13f12:	4b20      	ldr	r3, [pc, #128]	; (13f94 <parse_ncellmeas_gci+0x4e4>)
   13f14:	9003      	str	r0, [sp, #12]
   13f16:	e5f9      	b.n	13b0c <parse_ncellmeas_gci+0x5c>
				cells->neighbor_cells[j].rsrq = tmp_int;
   13f18:	6b73      	ldr	r3, [r6, #52]	; 0x34
   13f1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13f1c:	4453      	add	r3, sl
   13f1e:	819a      	strh	r2, [r3, #12]
							&cells->neighbor_cells[j].time_diff);
   13f20:	6b72      	ldr	r2, [r6, #52]	; 0x34
				curr_index++;
   13f22:	3505      	adds	r5, #5
							&cells->neighbor_cells[j].time_diff);
   13f24:	4452      	add	r2, sl
				err = at_params_int_get(&resp_list,
   13f26:	4629      	mov	r1, r5
   13f28:	3204      	adds	r2, #4
   13f2a:	a811      	add	r0, sp, #68	; 0x44
   13f2c:	f00b fee5 	bl	1fcfa <at_params_int_get>
				if (err) {
   13f30:	4604      	mov	r4, r0
   13f32:	b110      	cbz	r0, 13f3a <parse_ncellmeas_gci+0x48a>
					LOG_ERR("Could not parse time_diff, error: %d", err);
   13f34:	4b18      	ldr	r3, [pc, #96]	; (13f98 <parse_ncellmeas_gci+0x4e8>)
   13f36:	9003      	str	r0, [sp, #12]
   13f38:	e5e8      	b.n	13b0c <parse_ncellmeas_gci+0x5c>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   13f3a:	f109 0901 	add.w	r9, r9, #1
   13f3e:	e7b6      	b.n	13eae <parse_ncellmeas_gci+0x3fe>
			cells->gci_cells[k] = parsed_cell;
   13f40:	2230      	movs	r2, #48	; 0x30
   13f42:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   13f44:	ac16      	add	r4, sp, #88	; 0x58
   13f46:	fb02 3c0b 	mla	ip, r2, fp, r3
   13f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   13f4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   13f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   13f52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   13f56:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   13f5a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   13f5e:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
			k++;
   13f62:	f10b 0b01 	add.w	fp, fp, #1
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   13f66:	3301      	adds	r3, #1
   13f68:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
			k++;
   13f6c:	e796      	b.n	13e9c <parse_ncellmeas_gci+0x3ec>
   13f6e:	bf00      	nop
   13f70:	000260d6 	.word	0x000260d6
   13f74:	000260fb 	.word	0x000260fb
   13f78:	0002611e 	.word	0x0002611e
   13f7c:	00026148 	.word	0x00026148
   13f80:	00022f7c 	.word	0x00022f7c
   13f84:	000261a0 	.word	0x000261a0
   13f88:	000261d4 	.word	0x000261d4
   13f8c:	000261f8 	.word	0x000261f8
   13f90:	00026222 	.word	0x00026222
   13f94:	00026244 	.word	0x00026244
   13f98:	00026266 	.word	0x00026266

00013f9c <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
   13f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	struct at_param_list resp_list = {0};
   13f9e:	2500      	movs	r5, #0
{
   13fa0:	b089      	sub	sp, #36	; 0x24
   13fa2:	4607      	mov	r7, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   13fa4:	460e      	mov	r6, r1
	struct at_param_list resp_list = {0};
   13fa6:	e9cd 5506 	strd	r5, r5, [sp, #24]
	if (modem_sleep == NULL || at_response == NULL) {
   13faa:	2900      	cmp	r1, #0
   13fac:	d05b      	beq.n	14066 <parse_xmodemsleep+0xca>
   13fae:	2800      	cmp	r0, #0
   13fb0:	d059      	beq.n	14066 <parse_xmodemsleep+0xca>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   13fb2:	2104      	movs	r1, #4
   13fb4:	a806      	add	r0, sp, #24
   13fb6:	f00b fdc4 	bl	1fb42 <at_params_list_init>
	if (err) {
   13fba:	4604      	mov	r4, r0
   13fbc:	b168      	cbz	r0, 13fda <parse_xmodemsleep+0x3e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   13fbe:	4b2b      	ldr	r3, [pc, #172]	; (1406c <parse_xmodemsleep+0xd0>)
   13fc0:	9003      	str	r0, [sp, #12]
   13fc2:	e9cd 5301 	strd	r5, r3, [sp, #4]
   13fc6:	2201      	movs	r2, #1
   13fc8:	462b      	mov	r3, r5
   13fca:	4628      	mov	r0, r5
   13fcc:	4928      	ldr	r1, [pc, #160]	; (14070 <parse_xmodemsleep+0xd4>)
   13fce:	9500      	str	r5, [sp, #0]
   13fd0:	f00b ff0b 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   13fd4:	4620      	mov	r0, r4
   13fd6:	b009      	add	sp, #36	; 0x24
   13fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   13fda:	4601      	mov	r1, r0
   13fdc:	aa06      	add	r2, sp, #24
   13fde:	4638      	mov	r0, r7
   13fe0:	f00b fd96 	bl	1fb10 <at_parser_params_from_str>
	if (err) {
   13fe4:	4604      	mov	r4, r0
   13fe6:	b170      	cbz	r0, 14006 <parse_xmodemsleep+0x6a>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   13fe8:	4b22      	ldr	r3, [pc, #136]	; (14074 <parse_xmodemsleep+0xd8>)
   13fea:	9003      	str	r0, [sp, #12]
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   13fec:	e9cd 5301 	strd	r5, r3, [sp, #4]
   13ff0:	2201      	movs	r2, #1
   13ff2:	462b      	mov	r3, r5
   13ff4:	4628      	mov	r0, r5
   13ff6:	491e      	ldr	r1, [pc, #120]	; (14070 <parse_xmodemsleep+0xd4>)
   13ff8:	9500      	str	r5, [sp, #0]
   13ffa:	f00b fef6 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   13ffe:	a806      	add	r0, sp, #24
   14000:	f00b fdc9 	bl	1fb96 <at_params_list_free>
	return err;
   14004:	e7e6      	b.n	13fd4 <parse_xmodemsleep+0x38>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   14006:	2101      	movs	r1, #1
   14008:	f10d 0216 	add.w	r2, sp, #22
   1400c:	a806      	add	r0, sp, #24
   1400e:	f00b fe5c 	bl	1fcca <at_params_unsigned_short_get>
	if (err) {
   14012:	4604      	mov	r4, r0
   14014:	b110      	cbz	r0, 1401c <parse_xmodemsleep+0x80>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   14016:	4b18      	ldr	r3, [pc, #96]	; (14078 <parse_xmodemsleep+0xdc>)
   14018:	9003      	str	r0, [sp, #12]
   1401a:	e7e7      	b.n	13fec <parse_xmodemsleep+0x50>
	modem_sleep->type = type;
   1401c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   14020:	a806      	add	r0, sp, #24
	modem_sleep->type = type;
   14022:	7033      	strb	r3, [r6, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   14024:	f00b feb5 	bl	1fd92 <at_params_valid_count_get>
   14028:	2802      	cmp	r0, #2
   1402a:	d806      	bhi.n	1403a <parse_xmodemsleep+0x9e>
		modem_sleep->time = -1;
   1402c:	f04f 32ff 	mov.w	r2, #4294967295
   14030:	f04f 33ff 	mov.w	r3, #4294967295
   14034:	e9c6 2302 	strd	r2, r3, [r6, #8]
		goto clean_exit;
   14038:	e7e1      	b.n	13ffe <parse_xmodemsleep+0x62>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   1403a:	2102      	movs	r1, #2
   1403c:	f106 0208 	add.w	r2, r6, #8
   14040:	a806      	add	r0, sp, #24
   14042:	f00b fe72 	bl	1fd2a <at_params_int64_get>
	if (err) {
   14046:	4605      	mov	r5, r0
   14048:	2800      	cmp	r0, #0
   1404a:	d0d8      	beq.n	13ffe <parse_xmodemsleep+0x62>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   1404c:	4b0b      	ldr	r3, [pc, #44]	; (1407c <parse_xmodemsleep+0xe0>)
   1404e:	9003      	str	r0, [sp, #12]
   14050:	e9cd 4301 	strd	r4, r3, [sp, #4]
   14054:	4620      	mov	r0, r4
   14056:	4623      	mov	r3, r4
   14058:	9400      	str	r4, [sp, #0]
   1405a:	2201      	movs	r2, #1
   1405c:	4904      	ldr	r1, [pc, #16]	; (14070 <parse_xmodemsleep+0xd4>)
   1405e:	f00b fec4 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
		goto clean_exit;
   14062:	462c      	mov	r4, r5
   14064:	e7cb      	b.n	13ffe <parse_xmodemsleep+0x62>
		return -EINVAL;
   14066:	f06f 0415 	mvn.w	r4, #21
   1406a:	e7b3      	b.n	13fd4 <parse_xmodemsleep+0x38>
   1406c:	00025a67 	.word	0x00025a67
   14070:	00022f7c 	.word	0x00022f7c
   14074:	000262b7 	.word	0x000262b7
   14078:	000262e9 	.word	0x000262e9
   1407c:	00026312 	.word	0x00026312

00014080 <parse_mdmev>:

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   14080:	b5f0      	push	{r4, r5, r6, r7, lr}
   14082:	460d      	mov	r5, r1
		[LTE_LC_MODEM_EVT_CE_LEVEL_1] = AT_MDMEV_CE_LEVEL_1,
		[LTE_LC_MODEM_EVT_CE_LEVEL_2] = AT_MDMEV_CE_LEVEL_2,
		[LTE_LC_MODEM_EVT_CE_LEVEL_3] = AT_MDMEV_CE_LEVEL_3,
	};

	if (at_response == NULL || modem_evt == NULL) {
   14084:	4604      	mov	r4, r0
{
   14086:	b085      	sub	sp, #20
	if (at_response == NULL || modem_evt == NULL) {
   14088:	b318      	cbz	r0, 140d2 <parse_mdmev+0x52>
   1408a:	b311      	cbz	r1, 140d2 <parse_mdmev+0x52>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   1408c:	2108      	movs	r1, #8
   1408e:	4a12      	ldr	r2, [pc, #72]	; (140d8 <parse_mdmev+0x58>)
   14090:	f7ff f90e 	bl	132b0 <response_is_valid>
   14094:	4603      	mov	r3, r0
   14096:	b958      	cbnz	r0, 140b0 <parse_mdmev+0x30>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
   14098:	4a10      	ldr	r2, [pc, #64]	; (140dc <parse_mdmev+0x5c>)
   1409a:	9000      	str	r0, [sp, #0]
   1409c:	e9cd 0201 	strd	r0, r2, [sp, #4]
   140a0:	490f      	ldr	r1, [pc, #60]	; (140e0 <parse_mdmev+0x60>)
   140a2:	2201      	movs	r2, #1
   140a4:	f00b fea1 	bl	1fdea <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   140a8:	f06f 0004 	mvn.w	r0, #4
	}

	LOG_DBG("No modem event type found: %s", at_response);

	return -ENODATA;
}
   140ac:	b005      	add	sp, #20
   140ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   140b0:	2600      	movs	r6, #0
   140b2:	4f0c      	ldr	r7, [pc, #48]	; (140e4 <parse_mdmev+0x64>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   140b4:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   140b6:	4621      	mov	r1, r4
   140b8:	f857 0b04 	ldr.w	r0, [r7], #4
   140bc:	f7f4 ff35 	bl	8f2a <strcmp>
   140c0:	b908      	cbnz	r0, 140c6 <parse_mdmev+0x46>
			*modem_evt = i;
   140c2:	702e      	strb	r6, [r5, #0]
			return 0;
   140c4:	e7f2      	b.n	140ac <parse_mdmev+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   140c6:	3601      	adds	r6, #1
   140c8:	2e0a      	cmp	r6, #10
   140ca:	d1f4      	bne.n	140b6 <parse_mdmev+0x36>
	return -ENODATA;
   140cc:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   140d0:	e7ec      	b.n	140ac <parse_mdmev+0x2c>
		return -EINVAL;
   140d2:	f06f 0015 	mvn.w	r0, #21
   140d6:	e7e9      	b.n	140ac <parse_mdmev+0x2c>
   140d8:	00026347 	.word	0x00026347
   140dc:	00026350 	.word	0x00026350
   140e0:	00022f7c 	.word	0x00022f7c
   140e4:	000234a8 	.word	0x000234a8

000140e8 <on_modem_init>:

NRF_MODEM_LIB_ON_INIT(lte_lc_init_hook, on_modem_init, NULL);
NRF_MODEM_LIB_ON_SHUTDOWN(lte_lc_shutdown_hook, on_modem_shutdown, NULL);

static void on_modem_init(int err, void *ctx)
{
   140e8:	b530      	push	{r4, r5, lr}
	if (err) {
   140ea:	4604      	mov	r4, r0
{
   140ec:	b085      	sub	sp, #20
	if (err) {
   140ee:	b178      	cbz	r0, 14110 <on_modem_init+0x28>
		if (err == NRF_MODEM_DFU_RESULT_OK) {
   140f0:	4b13      	ldr	r3, [pc, #76]	; (14140 <on_modem_init+0x58>)
   140f2:	4298      	cmp	r0, r3
   140f4:	d00a      	beq.n	1410c <on_modem_init+0x24>
			LOG_DBG("Modem DFU, lte_lc not initialized");
			return;
		}
		LOG_ERR("Modem library init error: %d, lte_lc not initialized", err);
   140f6:	4b13      	ldr	r3, [pc, #76]	; (14144 <on_modem_init+0x5c>)
   140f8:	9003      	str	r0, [sp, #12]
   140fa:	9302      	str	r3, [sp, #8]
   140fc:	2300      	movs	r3, #0
   140fe:	e9cd 3300 	strd	r3, r3, [sp]
		return;
	}

	err = lte_lc_edrx_req(IS_ENABLED(CONFIG_LTE_EDRX_REQ));
	if (err) {
		LOG_ERR("Failed to configure eDRX, err %d", err);
   14102:	2201      	movs	r2, #1
   14104:	4618      	mov	r0, r3
   14106:	4910      	ldr	r1, [pc, #64]	; (14148 <on_modem_init+0x60>)
   14108:	f00b fec0 	bl	1fe8c <z_log_msg_runtime_create.constprop.0>
	if (err) {
		LOG_ERR("Lte_lc failed to initialize and connect, err %d", err);
		return;
	}
#endif
}
   1410c:	b005      	add	sp, #20
   1410e:	bd30      	pop	{r4, r5, pc}
	err = lte_lc_psm_req(IS_ENABLED(CONFIG_LTE_PSM_REQ));
   14110:	f7fe fc6a 	bl	129e8 <lte_lc_psm_req>
	if (err) {
   14114:	4605      	mov	r5, r0
   14116:	b130      	cbz	r0, 14126 <on_modem_init+0x3e>
		LOG_ERR("Failed to configure PSM, err %d", err);
   14118:	4b0c      	ldr	r3, [pc, #48]	; (1414c <on_modem_init+0x64>)
   1411a:	9003      	str	r0, [sp, #12]
   1411c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   14120:	9400      	str	r4, [sp, #0]
   14122:	4623      	mov	r3, r4
   14124:	e7ed      	b.n	14102 <on_modem_init+0x1a>
	err = lte_lc_edrx_req(IS_ENABLED(CONFIG_LTE_EDRX_REQ));
   14126:	2001      	movs	r0, #1
   14128:	f7fe fdf2 	bl	12d10 <lte_lc_edrx_req>
	if (err) {
   1412c:	2800      	cmp	r0, #0
   1412e:	d0ed      	beq.n	1410c <on_modem_init+0x24>
		LOG_ERR("Failed to configure eDRX, err %d", err);
   14130:	4b07      	ldr	r3, [pc, #28]	; (14150 <on_modem_init+0x68>)
   14132:	9003      	str	r0, [sp, #12]
   14134:	e9cd 5301 	strd	r5, r3, [sp, #4]
   14138:	9500      	str	r5, [sp, #0]
   1413a:	462b      	mov	r3, r5
   1413c:	e7e1      	b.n	14102 <on_modem_init+0x1a>
   1413e:	bf00      	nop
   14140:	05500001 	.word	0x05500001
   14144:	0002641e 	.word	0x0002641e
   14148:	00022f74 	.word	0x00022f74
   1414c:	00026453 	.word	0x00026453
   14150:	00026473 	.word	0x00026473

00014154 <modem_info_parse>:
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
			    const char *buf)
{
   14154:	b510      	push	{r4, lr}
   14156:	4604      	mov	r4, r0
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   14158:	4a09      	ldr	r2, [pc, #36]	; (14180 <modem_info_parse+0x2c>)
{
   1415a:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   1415c:	7a63      	ldrb	r3, [r4, #9]
   1415e:	2100      	movs	r1, #0
   14160:	f7fe f990 	bl	12484 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   14164:	f110 0f0b 	cmn.w	r0, #11
   14168:	d000      	beq.n	1416c <modem_info_parse+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   1416a:	b940      	cbnz	r0, 1417e <modem_info_parse+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   1416c:	4804      	ldr	r0, [pc, #16]	; (14180 <modem_info_parse+0x2c>)
   1416e:	f00b fe10 	bl	1fd92 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   14172:	7a63      	ldrb	r3, [r4, #9]
		return -EAGAIN;
	}

	return err;
   14174:	4283      	cmp	r3, r0
   14176:	bf34      	ite	cc
   14178:	f06f 000a 	mvncc.w	r0, #10
   1417c:	2000      	movcs	r0, #0
}
   1417e:	bd10      	pop	{r4, pc}
   14180:	2000defc 	.word	0x2000defc

00014184 <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(const char *notif)
{
   14184:	b510      	push	{r4, lr}
   14186:	4604      	mov	r4, r0
   14188:	b088      	sub	sp, #32
	int err;
	uint16_t param_value;

	const struct modem_info_data rsrp_notify_data = {
   1418a:	4a16      	ldr	r2, [pc, #88]	; (141e4 <modem_info_rsrp_subscribe_handler+0x60>)
   1418c:	ab05      	add	r3, sp, #20
   1418e:	ca07      	ldmia	r2, {r0, r1, r2}
   14190:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.param_index	= RSRP_NOTIFY_PARAM_INDEX,
		.param_count	= RSRP_NOTIFY_PARAM_COUNT,
		.data_type	= AT_PARAM_TYPE_NUM_INT,
	};

	err = modem_info_parse(&rsrp_notify_data, notif);
   14194:	4621      	mov	r1, r4
   14196:	4618      	mov	r0, r3
   14198:	f7ff ffdc 	bl	14154 <modem_info_parse>
	if (err != 0) {
   1419c:	4604      	mov	r4, r0
   1419e:	b160      	cbz	r0, 141ba <modem_info_rsrp_subscribe_handler+0x36>
		LOG_ERR("modem_info_parse failed to parse "
   141a0:	4b11      	ldr	r3, [pc, #68]	; (141e8 <modem_info_rsrp_subscribe_handler+0x64>)
   141a2:	9003      	str	r0, [sp, #12]
   141a4:	9302      	str	r3, [sp, #8]
   141a6:	2300      	movs	r3, #0
   141a8:	e9cd 3300 	strd	r3, r3, [sp]

	err = at_params_unsigned_short_get(&m_param_list,
					   rsrp_notify_data.param_index,
					   &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   141ac:	2201      	movs	r2, #1
   141ae:	4618      	mov	r0, r3
   141b0:	490e      	ldr	r1, [pc, #56]	; (141ec <modem_info_rsrp_subscribe_handler+0x68>)
   141b2:	f00b fe7b 	bl	1feac <z_log_msg_runtime_create.constprop.0>
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   141b6:	b008      	add	sp, #32
   141b8:	bd10      	pop	{r4, pc}
	err = at_params_unsigned_short_get(&m_param_list,
   141ba:	2101      	movs	r1, #1
   141bc:	480c      	ldr	r0, [pc, #48]	; (141f0 <modem_info_rsrp_subscribe_handler+0x6c>)
   141be:	f10d 0212 	add.w	r2, sp, #18
   141c2:	f00b fd82 	bl	1fcca <at_params_unsigned_short_get>
	if (err != 0) {
   141c6:	b130      	cbz	r0, 141d6 <modem_info_rsrp_subscribe_handler+0x52>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   141c8:	4b0a      	ldr	r3, [pc, #40]	; (141f4 <modem_info_rsrp_subscribe_handler+0x70>)
   141ca:	9003      	str	r0, [sp, #12]
   141cc:	e9cd 4301 	strd	r4, r3, [sp, #4]
   141d0:	9400      	str	r4, [sp, #0]
   141d2:	4623      	mov	r3, r4
   141d4:	e7ea      	b.n	141ac <modem_info_rsrp_subscribe_handler+0x28>
	modem_info_rsrp_cb(param_value);
   141d6:	4b08      	ldr	r3, [pc, #32]	; (141f8 <modem_info_rsrp_subscribe_handler+0x74>)
   141d8:	f89d 0012 	ldrb.w	r0, [sp, #18]
   141dc:	681b      	ldr	r3, [r3, #0]
   141de:	4798      	blx	r3
   141e0:	e7e9      	b.n	141b6 <modem_info_rsrp_subscribe_handler+0x32>
   141e2:	bf00      	nop
   141e4:	0002308c 	.word	0x0002308c
   141e8:	00026494 	.word	0x00026494
   141ec:	00022f8c 	.word	0x00022f8c
   141f0:	2000defc 	.word	0x2000defc
   141f4:	000264cb 	.word	0x000264cb
   141f8:	2000df04 	.word	0x2000df04

000141fc <modem_info_type_get>:
	if (info_type >= MODEM_INFO_COUNT) {
   141fc:	2815      	cmp	r0, #21
	return modem_data[info_type]->data_type;
   141fe:	bf9d      	ittte	ls
   14200:	4b02      	ldrls	r3, [pc, #8]	; (1420c <modem_info_type_get+0x10>)
   14202:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   14206:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   14208:	20ea      	movhi	r0, #234	; 0xea
}
   1420a:	4770      	bx	lr
   1420c:	00023510 	.word	0x00023510

00014210 <modem_info_short_get>:
{
   14210:	b530      	push	{r4, r5, lr}
   14212:	460d      	mov	r5, r1
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   14214:	2100      	movs	r1, #0
{
   14216:	b0a1      	sub	sp, #132	; 0x84
   14218:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   1421a:	227c      	movs	r2, #124	; 0x7c
   1421c:	a801      	add	r0, sp, #4
   1421e:	9100      	str	r1, [sp, #0]
   14220:	f00d fd51 	bl	21cc6 <memset>
	if (buf == NULL) {
   14224:	b1d5      	cbz	r5, 1425c <modem_info_short_get+0x4c>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   14226:	4b10      	ldr	r3, [pc, #64]	; (14268 <modem_info_short_get+0x58>)
   14228:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   1422c:	7aa3      	ldrb	r3, [r4, #10]
   1422e:	2b02      	cmp	r3, #2
   14230:	d014      	beq.n	1425c <modem_info_short_get+0x4c>
	err = nrf_modem_at_cmd(recv_buf, CONFIG_MODEM_INFO_BUFFER_SIZE, modem_data[info]->cmd);
   14232:	2180      	movs	r1, #128	; 0x80
   14234:	4668      	mov	r0, sp
   14236:	6822      	ldr	r2, [r4, #0]
   14238:	f004 f8ac 	bl	18394 <nrf_modem_at_cmd>
	if (err != 0) {
   1423c:	b988      	cbnz	r0, 14262 <modem_info_short_get+0x52>
	err = modem_info_parse(modem_data[info], recv_buf);
   1423e:	4669      	mov	r1, sp
   14240:	4620      	mov	r0, r4
   14242:	f7ff ff87 	bl	14154 <modem_info_parse>
	if (err) {
   14246:	b938      	cbnz	r0, 14258 <modem_info_short_get+0x48>
	err = at_params_unsigned_short_get(&m_param_list,
   14248:	462a      	mov	r2, r5
   1424a:	7a21      	ldrb	r1, [r4, #8]
   1424c:	4807      	ldr	r0, [pc, #28]	; (1426c <modem_info_short_get+0x5c>)
   1424e:	f00b fd3c 	bl	1fcca <at_params_unsigned_short_get>
	return sizeof(uint16_t);
   14252:	2800      	cmp	r0, #0
   14254:	bf08      	it	eq
   14256:	2002      	moveq	r0, #2
}
   14258:	b021      	add	sp, #132	; 0x84
   1425a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1425c:	f06f 0015 	mvn.w	r0, #21
   14260:	e7fa      	b.n	14258 <modem_info_short_get+0x48>
		return -EIO;
   14262:	f06f 0004 	mvn.w	r0, #4
   14266:	e7f7      	b.n	14258 <modem_info_short_get+0x48>
   14268:	00023510 	.word	0x00023510
   1426c:	2000defc 	.word	0x2000defc

00014270 <modem_info_string_get>:
{
   14270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   14274:	2400      	movs	r4, #0
{
   14276:	460e      	mov	r6, r1
   14278:	b0b7      	sub	sp, #220	; 0xdc
   1427a:	4681      	mov	r9, r0
   1427c:	4617      	mov	r7, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   1427e:	4621      	mov	r1, r4
   14280:	227c      	movs	r2, #124	; 0x7c
   14282:	a817      	add	r0, sp, #92	; 0x5c
   14284:	9416      	str	r4, [sp, #88]	; 0x58
   14286:	f00d fd1e 	bl	21cc6 <memset>
	size_t len = 0;
   1428a:	9404      	str	r4, [sp, #16]
	if ((buf == NULL) || (buf_size == 0)) {
   1428c:	2e00      	cmp	r6, #0
   1428e:	d05d      	beq.n	1434c <modem_info_string_get+0xdc>
   14290:	2f00      	cmp	r7, #0
   14292:	d05b      	beq.n	1434c <modem_info_string_get+0xdc>
	err = nrf_modem_at_cmd(recv_buf, CONFIG_MODEM_INFO_BUFFER_SIZE, modem_data[info]->cmd);
   14294:	4b9c      	ldr	r3, [pc, #624]	; (14508 <modem_info_string_get+0x298>)
	buf[0] = '\0';
   14296:	7034      	strb	r4, [r6, #0]
	err = nrf_modem_at_cmd(recv_buf, CONFIG_MODEM_INFO_BUFFER_SIZE, modem_data[info]->cmd);
   14298:	f853 a029 	ldr.w	sl, [r3, r9, lsl #2]
   1429c:	f10d 0858 	add.w	r8, sp, #88	; 0x58
   142a0:	2180      	movs	r1, #128	; 0x80
   142a2:	4640      	mov	r0, r8
   142a4:	f8da 2000 	ldr.w	r2, [sl]
   142a8:	f004 f874 	bl	18394 <nrf_modem_at_cmd>
	if (err != 0) {
   142ac:	4605      	mov	r5, r0
   142ae:	2800      	cmp	r0, #0
   142b0:	f040 8124 	bne.w	144fc <modem_info_string_get+0x28c>
	if (info == MODEM_INFO_SUP_BAND) {
   142b4:	f1b9 0f02 	cmp.w	r9, #2
   142b8:	d121      	bne.n	142fe <modem_info_string_get+0x8e>
		char *str_begin = strchr(recv_buf, '(');
   142ba:	2128      	movs	r1, #40	; 0x28
   142bc:	4640      	mov	r0, r8
   142be:	f00d fe62 	bl	21f86 <strchr>
   142c2:	4681      	mov	r9, r0
		str_end = strchr(recv_buf, ')');
   142c4:	2129      	movs	r1, #41	; 0x29
   142c6:	4640      	mov	r0, r8
   142c8:	f00d fe5d 	bl	21f86 <strchr>
		if (!str_begin || !str_end) {
   142cc:	f1b9 0f00 	cmp.w	r9, #0
   142d0:	f000 8117 	beq.w	14502 <modem_info_string_get+0x292>
   142d4:	2800      	cmp	r0, #0
   142d6:	f000 8114 	beq.w	14502 <modem_info_string_get+0x292>
		*(str_end + 1) = 0;
   142da:	7045      	strb	r5, [r0, #1]
		len = strlen(str_begin);
   142dc:	4648      	mov	r0, r9
   142de:	f7f4 fe2e 	bl	8f3e <strlen>
		if (len >= buf_size) {
   142e2:	42b8      	cmp	r0, r7
		len = strlen(str_begin);
   142e4:	4604      	mov	r4, r0
		if (len >= buf_size) {
   142e6:	d302      	bcc.n	142ee <modem_info_string_get+0x7e>
		return -EMSGSIZE;
   142e8:	f06f 0479 	mvn.w	r4, #121	; 0x79
   142ec:	e003      	b.n	142f6 <modem_info_string_get+0x86>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   142ee:	4649      	mov	r1, r9
   142f0:	4630      	mov	r0, r6
   142f2:	f00d fe55 	bl	21fa0 <strcpy>
}
   142f6:	4620      	mov	r0, r4
   142f8:	b037      	add	sp, #220	; 0xdc
   142fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = modem_info_parse(modem_data[info], recv_buf);
   142fe:	4641      	mov	r1, r8
   14300:	4650      	mov	r0, sl
   14302:	f7ff ff27 	bl	14154 <modem_info_parse>
	if (err) {
   14306:	4604      	mov	r4, r0
   14308:	b158      	cbz	r0, 14322 <modem_info_string_get+0xb2>
		LOG_ERR("Unable to parse data: %d", err);
   1430a:	4b80      	ldr	r3, [pc, #512]	; (1450c <modem_info_string_get+0x29c>)
   1430c:	9003      	str	r0, [sp, #12]
   1430e:	e9cd 5301 	strd	r5, r3, [sp, #4]
   14312:	462b      	mov	r3, r5
   14314:	9500      	str	r5, [sp, #0]
   14316:	2201      	movs	r2, #1
   14318:	4618      	mov	r0, r3
   1431a:	497d      	ldr	r1, [pc, #500]	; (14510 <modem_info_string_get+0x2a0>)
   1431c:	f00b fdc6 	bl	1feac <z_log_msg_runtime_create.constprop.0>
		return err;
   14320:	e7e9      	b.n	142f6 <modem_info_string_get+0x86>
	if (info == MODEM_INFO_IP_ADDRESS) {
   14322:	f1b9 0f09 	cmp.w	r9, #9
   14326:	f040 8090 	bne.w	1444a <modem_info_string_get+0x1da>
	size_t len = 0;
   1432a:	9005      	str	r0, [sp, #20]
	p = strstr(in_buf, "OK\r\n");
   1432c:	4979      	ldr	r1, [pc, #484]	; (14514 <modem_info_string_get+0x2a4>)
   1432e:	4640      	mov	r0, r8
   14330:	f00d fe83 	bl	2203a <strstr>
	if (!p) {
   14334:	b968      	cbnz	r0, 14352 <modem_info_string_get+0xe2>
		LOG_WRN("No response status: %s", in_buf);
   14336:	4b78      	ldr	r3, [pc, #480]	; (14518 <modem_info_string_get+0x2a8>)
   14338:	2202      	movs	r2, #2
   1433a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1433e:	4974      	ldr	r1, [pc, #464]	; (14510 <modem_info_string_get+0x2a0>)
   14340:	4623      	mov	r3, r4
   14342:	f8cd 800c 	str.w	r8, [sp, #12]
   14346:	9400      	str	r4, [sp, #0]
   14348:	f00b fdb0 	bl	1feac <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1434c:	f06f 0415 	mvn.w	r4, #21
   14350:	e7d1      	b.n	142f6 <modem_info_string_get+0x86>
	*p = '\0';
   14352:	7004      	strb	r4, [r0, #0]
	char *str_end = in_buf;
   14354:	4640      	mov	r0, r8
	while ((str_end = strstr(str_end, AT_CMD_RSP_DELIM)) != NULL) {
   14356:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 1451c <modem_info_string_get+0x2ac>
   1435a:	4649      	mov	r1, r9
   1435c:	f00d fe6d 	bl	2203a <strstr>
   14360:	4605      	mov	r5, r0
   14362:	bb30      	cbnz	r0, 143b2 <modem_info_string_get+0x142>
	if (total_ip_count == 0) {
   14364:	2c00      	cmp	r4, #0
   14366:	d0c6      	beq.n	142f6 <modem_info_string_get+0x86>
	first_address = true;
   14368:	f04f 0b01 	mov.w	fp, #1
   1436c:	f104 39ff 	add.w	r9, r4, #4294967295
	str_end = strstr(&in_buf[line_start_idx], AT_CMD_RSP_DELIM);
   14370:	eb08 0405 	add.w	r4, r8, r5
   14374:	4620      	mov	r0, r4
   14376:	4969      	ldr	r1, [pc, #420]	; (1451c <modem_info_string_get+0x2ac>)
   14378:	f00d fe5f 	bl	2203a <strstr>
	if (str_end == NULL) {
   1437c:	2800      	cmp	r0, #0
   1437e:	f000 80c0 	beq.w	14502 <modem_info_string_get+0x292>
	in_buf[++line_len + line_start_idx] = '\0';
   14382:	f04f 0a00 	mov.w	sl, #0
	line_len = str_end - &in_buf[line_start_idx];
   14386:	1b00      	subs	r0, r0, r4
	in_buf[++line_len + line_start_idx] = '\0';
   14388:	3501      	adds	r5, #1
   1438a:	4405      	add	r5, r0
   1438c:	f105 03d8 	add.w	r3, r5, #216	; 0xd8
   14390:	446b      	add	r3, sp
	err = modem_info_parse(modem_data[MODEM_INFO_IP_ADDRESS], &in_buf[line_start_idx]);
   14392:	4621      	mov	r1, r4
   14394:	4862      	ldr	r0, [pc, #392]	; (14520 <modem_info_string_get+0x2b0>)
	in_buf[++line_len + line_start_idx] = '\0';
   14396:	f803 ac80 	strb.w	sl, [r3, #-128]
	err = modem_info_parse(modem_data[MODEM_INFO_IP_ADDRESS], &in_buf[line_start_idx]);
   1439a:	f7ff fedb 	bl	14154 <modem_info_parse>
	if (err) {
   1439e:	4604      	mov	r4, r0
   143a0:	b150      	cbz	r0, 143b8 <modem_info_string_get+0x148>
		LOG_ERR("Unable to parse data: %d", err);
   143a2:	4b5a      	ldr	r3, [pc, #360]	; (1450c <modem_info_string_get+0x29c>)
   143a4:	9003      	str	r0, [sp, #12]
   143a6:	e9cd a301 	strd	sl, r3, [sp, #4]
   143aa:	f8cd a000 	str.w	sl, [sp]
   143ae:	4653      	mov	r3, sl
   143b0:	e7b1      	b.n	14316 <modem_info_string_get+0xa6>
		str_end++;
   143b2:	1c68      	adds	r0, r5, #1
		total_ip_count++;
   143b4:	3401      	adds	r4, #1
   143b6:	e7d0      	b.n	1435a <modem_info_string_get+0xea>
	len = sizeof(ip_buf);
   143b8:	2340      	movs	r3, #64	; 0x40
	err = at_params_string_get(&m_param_list,
   143ba:	f10d 0a18 	add.w	sl, sp, #24
	len = sizeof(ip_buf);
   143be:	9305      	str	r3, [sp, #20]
	err = at_params_string_get(&m_param_list,
   143c0:	4652      	mov	r2, sl
   143c2:	2104      	movs	r1, #4
   143c4:	4857      	ldr	r0, [pc, #348]	; (14524 <modem_info_string_get+0x2b4>)
   143c6:	ab05      	add	r3, sp, #20
   143c8:	f00b fcc3 	bl	1fd52 <at_params_string_get>
	if (err != 0) {
   143cc:	4604      	mov	r4, r0
   143ce:	2800      	cmp	r0, #0
   143d0:	d191      	bne.n	142f6 <modem_info_string_get+0x86>
	} else if (len >= sizeof(ip_buf)) {
   143d2:	9b05      	ldr	r3, [sp, #20]
   143d4:	2b3f      	cmp	r3, #63	; 0x3f
   143d6:	d887      	bhi.n	142e8 <modem_info_string_get+0x78>
	if (len == 0) {
   143d8:	b94b      	cbnz	r3, 143ee <modem_info_string_get+0x17e>
		line_start_idx += line_len + 1;
   143da:	3501      	adds	r5, #1
		if (--current_ip_idx) {
   143dc:	f1b9 0f00 	cmp.w	r9, #0
   143e0:	d130      	bne.n	14444 <modem_info_string_get+0x1d4>
	return strlen(out_buf);
   143e2:	4630      	mov	r0, r6
}
   143e4:	b037      	add	sp, #220	; 0xdc
   143e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return strlen(out_buf);
   143ea:	f7f4 bda8 	b.w	8f3e <strlen>
	ip_buf[len] = '\0';
   143ee:	33d8      	adds	r3, #216	; 0xd8
   143f0:	446b      	add	r3, sp
   143f2:	f803 0cc0 	strb.w	r0, [r3, #-192]
	ip_v6_str = strstr(ip_buf, " ");
   143f6:	2120      	movs	r1, #32
   143f8:	4650      	mov	r0, sl
   143fa:	f00d fdc4 	bl	21f86 <strchr>
	if (ip_v6_str) {
   143fe:	b120      	cbz	r0, 1440a <modem_info_string_get+0x19a>
		*ip_v6_str = '\0';
   14400:	7004      	strb	r4, [r0, #0]
		len = strlen(ip_buf);
   14402:	4650      	mov	r0, sl
   14404:	f7f4 fd9b 	bl	8f3e <strlen>
   14408:	9005      	str	r0, [sp, #20]
	out_buf_len = strlen(out_buf);
   1440a:	4630      	mov	r0, r6
   1440c:	f7f4 fd97 	bl	8f3e <strlen>
	err = snprintk(out_buf + out_buf_len,
   14410:	4a45      	ldr	r2, [pc, #276]	; (14528 <modem_info_string_get+0x2b8>)
   14412:	4b46      	ldr	r3, [pc, #280]	; (1452c <modem_info_string_get+0x2bc>)
   14414:	1a3c      	subs	r4, r7, r0
   14416:	f1bb 0f00 	cmp.w	fp, #0
   1441a:	bf18      	it	ne
   1441c:	4613      	movne	r3, r2
   1441e:	4621      	mov	r1, r4
   14420:	4a43      	ldr	r2, [pc, #268]	; (14530 <modem_info_string_get+0x2c0>)
   14422:	f8cd a000 	str.w	sl, [sp]
   14426:	4430      	add	r0, r6
   14428:	f009 fe65 	bl	1e0f6 <snprintk>
	if ((err <= 0) || (err > (out_buf_size - out_buf_len))) {
   1442c:	2800      	cmp	r0, #0
   1442e:	f77f af5b 	ble.w	142e8 <modem_info_string_get+0x78>
   14432:	4284      	cmp	r4, r0
   14434:	f4ff af58 	bcc.w	142e8 <modem_info_string_get+0x78>
	if (--current_ip_idx) {
   14438:	f1b9 0f00 	cmp.w	r9, #0
   1443c:	d0d1      	beq.n	143e2 <modem_info_string_get+0x172>
	first_address = false;
   1443e:	f04f 0b00 	mov.w	fp, #0
		line_start_idx  += line_len + 1;
   14442:	3501      	adds	r5, #1
		goto parse_line;
   14444:	f109 39ff 	add.w	r9, r9, #4294967295
   14448:	e792      	b.n	14370 <modem_info_string_get+0x100>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_INT) {
   1444a:	f89a 800a 	ldrb.w	r8, [sl, #10]
   1444e:	f1b8 0f01 	cmp.w	r8, #1
   14452:	d133      	bne.n	144bc <modem_info_string_get+0x24c>
		err = at_params_unsigned_short_get(&m_param_list,
   14454:	f89a 1008 	ldrb.w	r1, [sl, #8]
   14458:	4832      	ldr	r0, [pc, #200]	; (14524 <modem_info_string_get+0x2b4>)
   1445a:	aa06      	add	r2, sp, #24
   1445c:	f00b fc35 	bl	1fcca <at_params_unsigned_short_get>
		if (err) {
   14460:	4604      	mov	r4, r0
   14462:	b110      	cbz	r0, 1446a <modem_info_string_get+0x1fa>
			LOG_ERR("Unable to obtain short: %d", err);
   14464:	4b33      	ldr	r3, [pc, #204]	; (14534 <modem_info_string_get+0x2c4>)
   14466:	9003      	str	r0, [sp, #12]
   14468:	e751      	b.n	1430e <modem_info_string_get+0x9e>
		len = snprintf(buf, buf_size, "%d", param_value);
   1446a:	4639      	mov	r1, r7
   1446c:	4630      	mov	r0, r6
   1446e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   14472:	4a31      	ldr	r2, [pc, #196]	; (14538 <modem_info_string_get+0x2c8>)
   14474:	f007 fd6a 	bl	1bf4c <sniprintf>
   14478:	9004      	str	r0, [sp, #16]
		if ((len <= 0) || (len > buf_size)) {
   1447a:	2800      	cmp	r0, #0
   1447c:	f43f af34 	beq.w	142e8 <modem_info_string_get+0x78>
   14480:	42b8      	cmp	r0, r7
   14482:	f63f af31 	bhi.w	142e8 <modem_info_string_get+0x78>
	if (info == MODEM_INFO_ICCID) {
   14486:	f1b9 0f0e 	cmp.w	r9, #14
   1448a:	d111      	bne.n	144b0 <modem_info_string_get+0x240>
   1448c:	4634      	mov	r4, r6
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   1448e:	4630      	mov	r0, r6
   14490:	f7f4 fd55 	bl	8f3e <strlen>
   14494:	1ca3      	adds	r3, r4, #2
   14496:	1ba4      	subs	r4, r4, r6
   14498:	42a0      	cmp	r0, r4
   1449a:	d825      	bhi.n	144e8 <modem_info_string_get+0x278>
		if ((len == ICCID_LEN) &&
   1449c:	9b04      	ldr	r3, [sp, #16]
   1449e:	2b14      	cmp	r3, #20
   144a0:	d106      	bne.n	144b0 <modem_info_string_get+0x240>
   144a2:	7cf3      	ldrb	r3, [r6, #19]
   144a4:	2b46      	cmp	r3, #70	; 0x46
			buf[len - 1] = '\0';
   144a6:	bf01      	itttt	eq
   144a8:	2300      	moveq	r3, #0
   144aa:	74f3      	strbeq	r3, [r6, #19]
			--len;
   144ac:	2313      	moveq	r3, #19
   144ae:	9304      	streq	r3, [sp, #16]
	return len <= 0 ? -ENOTSUP : len;
   144b0:	9c04      	ldr	r4, [sp, #16]
   144b2:	2c00      	cmp	r4, #0
   144b4:	bf08      	it	eq
   144b6:	f06f 0485 	mvneq.w	r4, #133	; 0x85
   144ba:	e71c      	b.n	142f6 <modem_info_string_get+0x86>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   144bc:	f1b8 0f02 	cmp.w	r8, #2
   144c0:	d1e1      	bne.n	14486 <modem_info_string_get+0x216>
		err = at_params_string_get(&m_param_list,
   144c2:	4632      	mov	r2, r6
   144c4:	f89a 1008 	ldrb.w	r1, [sl, #8]
   144c8:	4816      	ldr	r0, [pc, #88]	; (14524 <modem_info_string_get+0x2b4>)
   144ca:	ab04      	add	r3, sp, #16
		len = buf_size - out_buf_len;
   144cc:	9704      	str	r7, [sp, #16]
		err = at_params_string_get(&m_param_list,
   144ce:	f00b fc40 	bl	1fd52 <at_params_string_get>
		if (err != 0) {
   144d2:	4604      	mov	r4, r0
   144d4:	2800      	cmp	r0, #0
   144d6:	f47f af0e 	bne.w	142f6 <modem_info_string_get+0x86>
		} else if (len >= buf_size) {
   144da:	9b04      	ldr	r3, [sp, #16]
   144dc:	42bb      	cmp	r3, r7
   144de:	f4bf af03 	bcs.w	142e8 <modem_info_string_get+0x78>
		buf[accumulated_len] = '\0';
   144e2:	2200      	movs	r2, #0
   144e4:	54f2      	strb	r2, [r6, r3]
   144e6:	e7ce      	b.n	14486 <modem_info_string_get+0x216>
		current_char = buf[i];
   144e8:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   144ec:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   144f0:	461c      	mov	r4, r3
		buf[i] = next_char;
   144f2:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   144f6:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   144fa:	e7c8      	b.n	1448e <modem_info_string_get+0x21e>
		return -EIO;
   144fc:	f06f 0404 	mvn.w	r4, #4
   14500:	e6f9      	b.n	142f6 <modem_info_string_get+0x86>
			return -EFAULT;
   14502:	f06f 040d 	mvn.w	r4, #13
   14506:	e6f6      	b.n	142f6 <modem_info_string_get+0x86>
   14508:	00023510 	.word	0x00023510
   1450c:	000264ee 	.word	0x000264ee
   14510:	00022f8c 	.word	0x00022f8c
   14514:	00025190 	.word	0x00025190
   14518:	00026507 	.word	0x00026507
   1451c:	0002756c 	.word	0x0002756c
   14520:	000235f8 	.word	0x000235f8
   14524:	2000defc 	.word	0x2000defc
   14528:	0002756e 	.word	0x0002756e
   1452c:	000264eb 	.word	0x000264eb
   14530:	0002651e 	.word	0x0002651e
   14534:	00026523 	.word	0x00026523
   14538:	00026a28 	.word	0x00026a28

0001453c <modem_info_init>:

int modem_info_init(void)
{
	int err = 0;

	if (m_param_list.params == NULL) {
   1453c:	4803      	ldr	r0, [pc, #12]	; (1454c <modem_info_init+0x10>)
   1453e:	6843      	ldr	r3, [r0, #4]
   14540:	b913      	cbnz	r3, 14548 <modem_info_init+0xc>
		/* Init at_cmd_parser storage module */
		err = at_params_list_init(&m_param_list,
   14542:	210a      	movs	r1, #10
   14544:	f00b bafd 	b.w	1fb42 <at_params_list_init>
					  CONFIG_MODEM_INFO_MAX_AT_PARAMS_RSP);
	}

	return err;
}
   14548:	2000      	movs	r0, #0
   1454a:	4770      	bx	lr
   1454c:	2000defc 	.word	0x2000defc

00014550 <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   14550:	b570      	push	{r4, r5, r6, lr}
   14552:	4605      	mov	r5, r0
   14554:	b086      	sub	sp, #24
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   14556:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   1455a:	f7ff fe4f 	bl	141fc <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   1455e:	2802      	cmp	r0, #2
	data_type = modem_info_type_get(param->type);
   14560:	4606      	mov	r6, r0
	if (data_type == AT_PARAM_TYPE_STRING) {
   14562:	d11a      	bne.n	1459a <modem_data_get+0x4a>
		ret = modem_info_string_get(param->type,
   14564:	2264      	movs	r2, #100	; 0x64
   14566:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   1456a:	1ca9      	adds	r1, r5, #2
   1456c:	f7ff fe80 	bl	14270 <modem_info_string_get>
				param->value_string,
				sizeof(param->value_string));
		if (ret < 0) {
   14570:	1e04      	subs	r4, r0, #0
   14572:	db03      	blt.n	1457c <modem_data_get+0x2c>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   14574:	2400      	movs	r4, #0
}
   14576:	4620      	mov	r0, r4
   14578:	b006      	add	sp, #24
   1457a:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   1457c:	9404      	str	r4, [sp, #16]
   1457e:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
   14582:	2201      	movs	r2, #1
   14584:	9303      	str	r3, [sp, #12]
   14586:	4b0f      	ldr	r3, [pc, #60]	; (145c4 <modem_data_get+0x74>)
   14588:	490f      	ldr	r1, [pc, #60]	; (145c8 <modem_data_get+0x78>)
   1458a:	9302      	str	r3, [sp, #8]
   1458c:	2300      	movs	r3, #0
   1458e:	4618      	mov	r0, r3
   14590:	e9cd 3300 	strd	r3, r3, [sp]
   14594:	f00b fc99 	bl	1feca <z_log_msg_runtime_create.constprop.0>
			return ret;
   14598:	e7ed      	b.n	14576 <modem_data_get+0x26>
	} else if (data_type == AT_PARAM_TYPE_NUM_INT) {
   1459a:	2801      	cmp	r0, #1
   1459c:	d1ea      	bne.n	14574 <modem_data_get+0x24>
		ret = modem_info_short_get(param->type, &param->value);
   1459e:	4629      	mov	r1, r5
   145a0:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   145a4:	f7ff fe34 	bl	14210 <modem_info_short_get>
		if (ret < 0) {
   145a8:	1e04      	subs	r4, r0, #0
   145aa:	dae3      	bge.n	14574 <modem_data_get+0x24>
			LOG_ERR("Link data not obtained: %d", ret);
   145ac:	4b07      	ldr	r3, [pc, #28]	; (145cc <modem_data_get+0x7c>)
   145ae:	4632      	mov	r2, r6
   145b0:	9302      	str	r3, [sp, #8]
   145b2:	2300      	movs	r3, #0
   145b4:	4904      	ldr	r1, [pc, #16]	; (145c8 <modem_data_get+0x78>)
   145b6:	4618      	mov	r0, r3
   145b8:	e9cd 3300 	strd	r3, r3, [sp]
   145bc:	9403      	str	r4, [sp, #12]
   145be:	f00b fc84 	bl	1feca <z_log_msg_runtime_create.constprop.0>
			return ret;
   145c2:	e7d8      	b.n	14576 <modem_data_get+0x26>
   145c4:	000266e6 	.word	0x000266e6
   145c8:	00022f94 	.word	0x00022f94
   145cc:	00026704 	.word	0x00026704

000145d0 <modem_info_params_init>:
	if (modem == NULL) {
   145d0:	4603      	mov	r3, r0
   145d2:	2800      	cmp	r0, #0
   145d4:	d048      	beq.n	14668 <modem_info_params_init+0x98>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   145d6:	2201      	movs	r2, #1
   145d8:	f880 206c 	strb.w	r2, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   145dc:	2202      	movs	r2, #2
   145de:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   145e2:	2203      	movs	r2, #3
   145e4:	f880 214c 	strb.w	r2, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   145e8:	2205      	movs	r2, #5
   145ea:	f880 21bc 	strb.w	r2, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   145ee:	2206      	movs	r2, #6
   145f0:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   145f4:	2207      	movs	r2, #7
   145f6:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   145fa:	2208      	movs	r2, #8
   145fc:	f880 230c 	strb.w	r2, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   14600:	2209      	movs	r2, #9
   14602:	f880 237c 	strb.w	r2, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   14606:	2204      	movs	r2, #4
   14608:	f880 23ec 	strb.w	r2, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   1460c:	220f      	movs	r2, #15
   1460e:	f880 245c 	strb.w	r2, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   14612:	2210      	movs	r2, #16
   14614:	f880 24cc 	strb.w	r2, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   14618:	2211      	movs	r2, #17
   1461a:	f880 253c 	strb.w	r2, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   1461e:	2214      	movs	r2, #20
   14620:	f880 25ac 	strb.w	r2, [r0, #1452]	; 0x5ac
	modem->network.apn.type			= MODEM_INFO_APN;
   14624:	2215      	movs	r2, #21
   14626:	f880 261c 	strb.w	r2, [r0, #1564]	; 0x61c
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   1462a:	220a      	movs	r2, #10
   1462c:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   14630:	220e      	movs	r2, #14
   14632:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   14636:	2212      	movs	r2, #18
   14638:	f883 27e4 	strb.w	r2, [r3, #2020]	; 0x7e4
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   1463c:	220d      	movs	r2, #13
   1463e:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   14642:	220b      	movs	r2, #11
   14644:	f883 28c4 	strb.w	r2, [r3, #2244]	; 0x8c4
	modem->device.imei.type			= MODEM_INFO_IMEI;
   14648:	2213      	movs	r2, #19
	modem->network.rsrp.type		= MODEM_INFO_RSRP;
   1464a:	2000      	movs	r0, #0
	modem->device.imei.type			= MODEM_INFO_IMEI;
   1464c:	f883 2934 	strb.w	r2, [r3, #2356]	; 0x934
	modem->device.board			= CONFIG_BOARD;
   14650:	4a07      	ldr	r2, [pc, #28]	; (14670 <modem_info_params_init+0xa0>)
	modem->network.rsrp.type		= MODEM_INFO_RSRP;
   14652:	f883 068c 	strb.w	r0, [r3, #1676]	; 0x68c
	modem->device.board			= CONFIG_BOARD;
   14656:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   1465a:	4a06      	ldr	r2, [pc, #24]	; (14674 <modem_info_params_init+0xa4>)
   1465c:	f8c3 293c 	str.w	r2, [r3, #2364]	; 0x93c
	modem->device.app_name			= "N/A";
   14660:	4a05      	ldr	r2, [pc, #20]	; (14678 <modem_info_params_init+0xa8>)
   14662:	f8c3 2940 	str.w	r2, [r3, #2368]	; 0x940
	return 0;
   14666:	4770      	bx	lr
		return -EINVAL;
   14668:	f06f 0015 	mvn.w	r0, #21
}
   1466c:	4770      	bx	lr
   1466e:	bf00      	nop
   14670:	0002671f 	.word	0x0002671f
   14674:	00026731 	.word	0x00026731
   14678:	00026738 	.word	0x00026738

0001467c <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   1467c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int ret;

	if (modem == NULL) {
   1467e:	4604      	mov	r4, r0
{
   14680:	b097      	sub	sp, #92	; 0x5c
	if (modem == NULL) {
   14682:	2800      	cmp	r0, #0
   14684:	f000 8086 	beq.w	14794 <modem_info_params_get+0x118>
			&modem->device.battery,
			&modem->device.imei,
#endif
		};

		for (size_t i = 0; i < ARRAY_SIZE(params); ++i) {
   14688:	2600      	movs	r6, #0
			&modem->network.sup_band,
   1468a:	f100 0370 	add.w	r3, r0, #112	; 0x70
		struct lte_param *params[] = {
   1468e:	9306      	str	r3, [sp, #24]
			&modem->network.ip_address,
   14690:	f500 7344 	add.w	r3, r0, #784	; 0x310
		struct lte_param *params[] = {
   14694:	9307      	str	r3, [sp, #28]
			&modem->network.ue_mode,
   14696:	f500 7360 	add.w	r3, r0, #896	; 0x380
		struct lte_param *params[] = {
   1469a:	9308      	str	r3, [sp, #32]
			&modem->network.current_operator,
   1469c:	f500 73a8 	add.w	r3, r0, #336	; 0x150
		struct lte_param *params[] = {
   146a0:	9309      	str	r3, [sp, #36]	; 0x24
			&modem->network.cellid_hex,
   146a2:	f500 7328 	add.w	r3, r0, #672	; 0x2a0
		struct lte_param *params[] = {
   146a6:	930a      	str	r3, [sp, #40]	; 0x28
			&modem->network.area_code,
   146a8:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
		struct lte_param *params[] = {
   146ac:	930b      	str	r3, [sp, #44]	; 0x2c
			&modem->network.lte_mode,
   146ae:	f500 737c 	add.w	r3, r0, #1008	; 0x3f0
		struct lte_param *params[] = {
   146b2:	930c      	str	r3, [sp, #48]	; 0x30
			&modem->network.nbiot_mode,
   146b4:	f500 638c 	add.w	r3, r0, #1120	; 0x460
		struct lte_param *params[] = {
   146b8:	930d      	str	r3, [sp, #52]	; 0x34
			&modem->network.gps_mode,
   146ba:	f500 639a 	add.w	r3, r0, #1232	; 0x4d0
		struct lte_param *params[] = {
   146be:	930e      	str	r3, [sp, #56]	; 0x38
			&modem->network.apn,
   146c0:	f500 63b6 	add.w	r3, r0, #1456	; 0x5b0
		struct lte_param *params[] = {
   146c4:	930f      	str	r3, [sp, #60]	; 0x3c
			&modem->network.rsrp,
   146c6:	f500 63c4 	add.w	r3, r0, #1568	; 0x620
		struct lte_param *params[] = {
   146ca:	9310      	str	r3, [sp, #64]	; 0x40
			&modem->sim.iccid,
   146cc:	f500 63e1 	add.w	r3, r0, #1800	; 0x708
		struct lte_param *params[] = {
   146d0:	9311      	str	r3, [sp, #68]	; 0x44
			&modem->sim.imsi,
   146d2:	f500 63ef 	add.w	r3, r0, #1912	; 0x778
		struct lte_param *params[] = {
   146d6:	9312      	str	r3, [sp, #72]	; 0x48
			&modem->device.modem_fw,
   146d8:	f500 63fd 	add.w	r3, r0, #2024	; 0x7e8
		struct lte_param *params[] = {
   146dc:	9313      	str	r3, [sp, #76]	; 0x4c
			&modem->device.battery,
   146de:	f600 0358 	addw	r3, r0, #2136	; 0x858
		struct lte_param *params[] = {
   146e2:	9314      	str	r3, [sp, #80]	; 0x50
			&modem->device.imei,
   146e4:	f600 03c8 	addw	r3, r0, #2248	; 0x8c8
		struct lte_param *params[] = {
   146e8:	9005      	str	r0, [sp, #20]
   146ea:	9315      	str	r3, [sp, #84]	; 0x54
		for (size_t i = 0; i < ARRAY_SIZE(params); ++i) {
   146ec:	af05      	add	r7, sp, #20
			ret = modem_data_get(params[i]);
   146ee:	f857 0b04 	ldr.w	r0, [r7], #4
   146f2:	f7ff ff2d 	bl	14550 <modem_data_get>
			if (ret) {
   146f6:	4605      	mov	r5, r0
   146f8:	2800      	cmp	r0, #0
   146fa:	d148      	bne.n	1478e <modem_info_params_get+0x112>
		for (size_t i = 0; i < ARRAY_SIZE(params); ++i) {
   146fc:	3601      	adds	r6, #1
   146fe:	2e11      	cmp	r6, #17
   14700:	d1f5      	bne.n	146ee <modem_info_params_get+0x72>
		}
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DATE_TIME)) {
			ret = modem_data_get(&modem->network.date_time);
   14702:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   14706:	f7ff ff23 	bl	14550 <modem_data_get>
			if (ret) {
   1470a:	b150      	cbz	r0, 14722 <modem_info_params_get+0xa6>
				LOG_ERR("Could not get time, error: %d", ret);
   1470c:	4b23      	ldr	r3, [pc, #140]	; (1479c <modem_info_params_get+0x120>)
   1470e:	9003      	str	r0, [sp, #12]
   14710:	e9cd 5301 	strd	r5, r3, [sp, #4]
   14714:	2201      	movs	r2, #1
   14716:	462b      	mov	r3, r5
   14718:	4628      	mov	r0, r5
   1471a:	4921      	ldr	r1, [pc, #132]	; (147a0 <modem_info_params_get+0x124>)
   1471c:	9500      	str	r5, [sp, #0]
   1471e:	f00b fbd4 	bl	1feca <z_log_msg_runtime_create.constprop.0>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14722:	f8b4 3152 	ldrh.w	r3, [r4, #338]	; 0x152
	memcpy(mcc->value_string, current_operator->value_string, 3);
   14726:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   1472a:	f8a4 31c2 	strh.w	r3, [r4, #450]	; 0x1c2
   1472e:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   14732:	220a      	movs	r2, #10
   14734:	7083      	strb	r3, [r0, #2]
   14736:	f8b4 3155 	ldrh.w	r3, [r4, #341]	; 0x155
   1473a:	2100      	movs	r1, #0
   1473c:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
   14740:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   14744:	f204 2632 	addw	r6, r4, #562	; 0x232
   14748:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   1474c:	f007 fcde 	bl	1c10c <strtol>
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   14750:	220a      	movs	r2, #10
   14752:	2100      	movs	r1, #0
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   14754:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   14758:	4630      	mov	r0, r6
   1475a:	f007 fcd7 	bl	1c10c <strtol>
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   1475e:	2210      	movs	r2, #16
   14760:	2100      	movs	r1, #0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   14762:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   14766:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   1476a:	f007 fccf 	bl	1c10c <strtol>
   1476e:	f7f3 fe3d 	bl	83ec <__aeabi_i2d>
   14772:	f504 66d2 	add.w	r6, r4, #1680	; 0x690
   14776:	e9c6 0100 	strd	r0, r1, [r6]
	area_code->value_string[4] = '\0';
   1477a:	2100      	movs	r1, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   1477c:	2210      	movs	r2, #16
	area_code->value_string[4] = '\0';
   1477e:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   14782:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   14786:	f007 fcc1 	bl	1c10c <strtol>
   1478a:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
		if (ret) {
			return ret;
		}
	}
	return 0;
}
   1478e:	4628      	mov	r0, r5
   14790:	b017      	add	sp, #92	; 0x5c
   14792:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   14794:	f06f 0515 	mvn.w	r5, #21
   14798:	e7f9      	b.n	1478e <modem_info_params_get+0x112>
   1479a:	bf00      	nop
   1479c:	0002673c 	.word	0x0002673c
   147a0:	00022f94 	.word	0x00022f94

000147a4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   147a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   147a6:	ab0b      	add	r3, sp, #44	; 0x2c
   147a8:	9305      	str	r3, [sp, #20]
   147aa:	9303      	str	r3, [sp, #12]
   147ac:	4b05      	ldr	r3, [pc, #20]	; (147c4 <z_log_msg_runtime_create.constprop.0+0x20>)
   147ae:	2201      	movs	r2, #1
   147b0:	9302      	str	r3, [sp, #8]
   147b2:	2300      	movs	r3, #0
   147b4:	4618      	mov	r0, r3
   147b6:	e9cd 3300 	strd	r3, r3, [sp]
   147ba:	f7f8 fc0f 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   147be:	b007      	add	sp, #28
   147c0:	f85d fb04 	ldr.w	pc, [sp], #4
   147c4:	0002676c 	.word	0x0002676c

000147c8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   147c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   147ca:	2400      	movs	r4, #0
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   147cc:	f7f8 fb96 	bl	cefc <z_impl_log_panic>
   147d0:	4b06      	ldr	r3, [pc, #24]	; (147ec <k_sys_fatal_error_handler+0x24>)
   147d2:	4620      	mov	r0, r4
   147d4:	9302      	str	r3, [sp, #8]
   147d6:	2201      	movs	r2, #1
   147d8:	4623      	mov	r3, r4
   147da:	e9cd 4400 	strd	r4, r4, [sp]
   147de:	4904      	ldr	r1, [pc, #16]	; (147f0 <k_sys_fatal_error_handler+0x28>)
   147e0:	f7ff ffe0 	bl	147a4 <z_log_msg_runtime_create.constprop.0>
		sys_arch_reboot(0);
   147e4:	4620      	mov	r0, r4
   147e6:	f7f9 fd51 	bl	e28c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   147ea:	bf00      	nop
   147ec:	0002676c 	.word	0x0002676c
   147f0:	00022f4c 	.word	0x00022f4c

000147f4 <date_time_core_notify_event>:
static void date_time_core_notify_event(enum date_time_evt_type time_source)
{
	static struct date_time_evt evt;

	/* Update time source to the event if not requesting previous time source */
	if (time_source != DATE_TIME_EVT_TYPE_PREVIOUS) {
   147f4:	28ff      	cmp	r0, #255	; 0xff
		evt.type = time_source;
   147f6:	bf1c      	itt	ne
   147f8:	4b03      	ldrne	r3, [pc, #12]	; (14808 <date_time_core_notify_event+0x14>)
   147fa:	7018      	strbne	r0, [r3, #0]
	}

	if (app_evt_handler != NULL) {
   147fc:	4b03      	ldr	r3, [pc, #12]	; (1480c <date_time_core_notify_event+0x18>)
   147fe:	681b      	ldr	r3, [r3, #0]
   14800:	b10b      	cbz	r3, 14806 <date_time_core_notify_event+0x12>
		app_evt_handler(&evt);
   14802:	4801      	ldr	r0, [pc, #4]	; (14808 <date_time_core_notify_event+0x14>)
   14804:	4718      	bx	r3
	}
}
   14806:	4770      	bx	lr
   14808:	200110bc 	.word	0x200110bc
   1480c:	2000df08 	.word	0x2000df08

00014810 <date_time_lte_ind_handler>:
{
	k_sem_give(&time_fetch_sem);
}

void date_time_lte_ind_handler(const struct lte_lc_evt *const evt)
{
   14810:	b510      	push	{r4, lr}
#if defined(CONFIG_DATE_TIME_AUTO_UPDATE) && defined(CONFIG_LTE_LINK_CONTROL)
	switch (evt->type) {
   14812:	7803      	ldrb	r3, [r0, #0]
   14814:	b9c3      	cbnz	r3, 14848 <date_time_lte_ind_handler+0x38>
	case LTE_LC_EVT_NW_REG_STATUS:

		switch (evt->nw_reg_status) {
   14816:	7a03      	ldrb	r3, [r0, #8]
   14818:	3b01      	subs	r3, #1
   1481a:	2b07      	cmp	r3, #7
   1481c:	d814      	bhi.n	14848 <date_time_lte_ind_handler+0x38>
   1481e:	e8df f003 	tbb	[pc, r3]
   14822:	0f04      	.short	0x0f04
   14824:	13041313 	.word	0x13041313
   14828:	0413      	.short	0x0413
		case LTE_LC_NW_REG_REGISTERED_EMERGENCY:
		case LTE_LC_NW_REG_REGISTERED_HOME:
		case LTE_LC_NW_REG_REGISTERED_ROAMING:
			if (!date_time_is_valid()) {
   1482a:	f00b fb63 	bl	1fef4 <date_time_is_valid>
   1482e:	b958      	cbnz	r0, 14848 <date_time_lte_ind_handler+0x38>
		break;
	default:
		break;
	}
#endif /* defined(CONFIG_DATE_TIME_AUTO_UPDATE) && defined(CONFIG_LTE_LINK_CONTROL) */
}
   14830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				k_work_reschedule(&time_work, K_SECONDS(1));
   14834:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   14838:	2300      	movs	r3, #0
   1483a:	4804      	ldr	r0, [pc, #16]	; (1484c <date_time_lte_ind_handler+0x3c>)
   1483c:	f006 b91e 	b.w	1aa7c <k_work_reschedule>
}
   14840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			date_time_modem_xtime_subscribe();
   14844:	f000 ba9a 	b.w	14d7c <date_time_modem_xtime_subscribe>
}
   14848:	bd10      	pop	{r4, pc}
   1484a:	bf00      	nop
   1484c:	2000c580 	.word	0x2000c580

00014850 <date_time_core_schedule_update>:
{
   14850:	b510      	push	{r4, lr}
		if (check_pending && k_work_delayable_is_pending(&time_work)) {
   14852:	b118      	cbz	r0, 1485c <date_time_core_schedule_update+0xc>
	return k_work_delayable_busy_get(dwork) != 0;
   14854:	4806      	ldr	r0, [pc, #24]	; (14870 <date_time_core_schedule_update+0x20>)
   14856:	f00c ff1b 	bl	21690 <k_work_delayable_busy_get>
   1485a:	b938      	cbnz	r0, 1486c <date_time_core_schedule_update+0x1c>
}
   1485c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_reschedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
   14860:	f04f 52e1 	mov.w	r2, #471859200	; 0x1c200000
   14864:	2300      	movs	r3, #0
   14866:	4802      	ldr	r0, [pc, #8]	; (14870 <date_time_core_schedule_update+0x20>)
   14868:	f006 b908 	b.w	1aa7c <k_work_reschedule>
}
   1486c:	bd10      	pop	{r4, pc}
   1486e:	bf00      	nop
   14870:	2000c580 	.word	0x2000c580

00014874 <date_time_handler>:
	z_impl_k_sem_give(sem);
   14874:	4801      	ldr	r0, [pc, #4]	; (1487c <date_time_handler+0x8>)
   14876:	f005 bfed 	b.w	1a854 <z_impl_k_sem_give>
   1487a:	bf00      	nop
   1487c:	2000cae4 	.word	0x2000cae4

00014880 <date_time_core_init>:

void date_time_core_init(void)
{
	if (IS_ENABLED(CONFIG_DATE_TIME_AUTO_UPDATE) && IS_ENABLED(CONFIG_LTE_LINK_CONTROL)) {
		lte_lc_register_handler(date_time_lte_ind_handler);
   14880:	4801      	ldr	r0, [pc, #4]	; (14888 <date_time_core_init+0x8>)
   14882:	f7fe b899 	b.w	129b8 <lte_lc_register_handler>
   14886:	bf00      	nop
   14888:	00014811 	.word	0x00014811

0001488c <date_time_core_register_handler>:
	return 0;
}

void date_time_core_register_handler(date_time_evt_handler_t evt_handler)
{
	if (evt_handler == NULL) {
   1488c:	4b01      	ldr	r3, [pc, #4]	; (14894 <date_time_core_register_handler+0x8>)
   1488e:	6018      	str	r0, [r3, #0]
	}

	LOG_DBG("Registering handler %p", evt_handler);

	app_evt_handler = evt_handler;
}
   14890:	4770      	bx	lr
   14892:	bf00      	nop
   14894:	2000df08 	.word	0x2000df08

00014898 <date_time_core_is_valid>:

bool date_time_core_is_valid(void)
{
	return (date_time_last_update_uptime != 0);
   14898:	4a03      	ldr	r2, [pc, #12]	; (148a8 <date_time_core_is_valid+0x10>)
   1489a:	e9d2 3200 	ldrd	r3, r2, [r2]
   1489e:	4313      	orrs	r3, r2
}
   148a0:	bf14      	ite	ne
   148a2:	2001      	movne	r0, #1
   148a4:	2000      	moveq	r0, #0
   148a6:	4770      	bx	lr
   148a8:	2000cf50 	.word	0x2000cf50

000148ac <date_time_core_current_check>:
{
	date_time_last_update_uptime = 0;
}

int date_time_core_current_check(void)
{
   148ac:	b510      	push	{r4, lr}
	if (date_time_last_update_uptime == 0) {
   148ae:	4c10      	ldr	r4, [pc, #64]	; (148f0 <date_time_core_current_check+0x44>)
   148b0:	e9d4 3200 	ldrd	r3, r2, [r4]
   148b4:	4313      	orrs	r3, r2
   148b6:	d102      	bne.n	148be <date_time_core_current_check+0x12>
		LOG_DBG("Date time never set");
		return -ENODATA;
   148b8:	f06f 003c 	mvn.w	r0, #60	; 0x3c
		LOG_DBG("Current date time too old");
		return -ENODATA;
	}

	return 0;
}
   148bc:	bd10      	pop	{r4, pc}
	return z_impl_k_uptime_ticks();
   148be:	f00d f809 	bl	218d4 <z_impl_k_uptime_ticks>
   148c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   148c6:	fba0 0302 	umull	r0, r3, r0, r2
   148ca:	fb02 3101 	mla	r1, r2, r1, r3
   148ce:	0bc3      	lsrs	r3, r0, #15
   148d0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	if ((k_uptime_get() - date_time_last_update_uptime) >=
   148d4:	e9d4 2000 	ldrd	r2, r0, [r4]
   148d8:	1a9b      	subs	r3, r3, r2
   148da:	4a06      	ldr	r2, [pc, #24]	; (148f4 <date_time_core_current_check+0x48>)
   148dc:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   148e0:	eb61 0100 	sbc.w	r1, r1, r0
   148e4:	4293      	cmp	r3, r2
   148e6:	f171 0100 	sbcs.w	r1, r1, #0
   148ea:	dae5      	bge.n	148b8 <date_time_core_current_check+0xc>
	return 0;
   148ec:	2000      	movs	r0, #0
   148ee:	e7e5      	b.n	148bc <date_time_core_current_check+0x10>
   148f0:	2000cf50 	.word	0x2000cf50
   148f4:	0036ee80 	.word	0x0036ee80

000148f8 <date_time_core_store>:

void date_time_core_store(int64_t curr_time_ms, enum date_time_evt_type time_source)
{
   148f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   148fc:	4615      	mov	r5, r2
	struct timespec tp = { 0 };
   148fe:	2210      	movs	r2, #16
{
   14900:	b092      	sub	sp, #72	; 0x48
   14902:	4607      	mov	r7, r0
   14904:	460e      	mov	r6, r1
	struct timespec tp = { 0 };
   14906:	eb0d 0002 	add.w	r0, sp, r2
   1490a:	2100      	movs	r1, #0
   1490c:	f00d f9db 	bl	21cc6 <memset>
	struct tm ltm = { 0 };
   14910:	2224      	movs	r2, #36	; 0x24
   14912:	2100      	movs	r1, #0
   14914:	eb0d 0002 	add.w	r0, sp, r2
   14918:	f00d f9d5 	bl	21cc6 <memset>
   1491c:	f00c ffda 	bl	218d4 <z_impl_k_uptime_ticks>
   14920:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14924:	f04f 0800 	mov.w	r8, #0
   14928:	fba0 3402 	umull	r3, r4, r0, r2
   1492c:	fb02 4401 	mla	r4, r2, r1, r4
	int ret;

	date_time_last_update_uptime = k_uptime_get();
   14930:	f8df c078 	ldr.w	ip, [pc, #120]	; 149ac <date_time_core_store+0xb4>
   14934:	0bdb      	lsrs	r3, r3, #15
   14936:	ea43 4344 	orr.w	r3, r3, r4, lsl #17

	date_time_core_schedule_update(false);
   1493a:	4640      	mov	r0, r8
   1493c:	0be4      	lsrs	r4, r4, #15
	date_time_last_update_uptime = k_uptime_get();
   1493e:	e9cc 3400 	strd	r3, r4, [ip]
	date_time_core_schedule_update(false);
   14942:	f7ff ff85 	bl	14850 <date_time_core_schedule_update>

	tp.tv_sec = curr_time_ms / 1000;
   14946:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1494a:	2300      	movs	r3, #0
   1494c:	4638      	mov	r0, r7
   1494e:	4631      	mov	r1, r6
   14950:	f7f4 f8fe 	bl	8b50 <__aeabi_ldivmod>
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   14954:	4b12      	ldr	r3, [pc, #72]	; (149a0 <date_time_core_store+0xa8>)
	tp.tv_sec = curr_time_ms / 1000;
   14956:	e9cd 0104 	strd	r0, r1, [sp, #16]
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   1495a:	435a      	muls	r2, r3

	ret = clock_settime(CLOCK_REALTIME, &tp);
   1495c:	2001      	movs	r0, #1
   1495e:	a904      	add	r1, sp, #16
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   14960:	9206      	str	r2, [sp, #24]
	ret = clock_settime(CLOCK_REALTIME, &tp);
   14962:	f7f5 fa61 	bl	9e28 <clock_settime>
	if (ret != 0) {
   14966:	b188      	cbz	r0, 1498c <date_time_core_store+0x94>
		LOG_ERR("Could not set system time, %d", ret);
   14968:	4b0e      	ldr	r3, [pc, #56]	; (149a4 <date_time_core_store+0xac>)
   1496a:	9003      	str	r0, [sp, #12]
   1496c:	e9cd 8301 	strd	r8, r3, [sp, #4]
   14970:	4640      	mov	r0, r8
   14972:	4643      	mov	r3, r8
   14974:	2201      	movs	r2, #1
   14976:	490c      	ldr	r1, [pc, #48]	; (149a8 <date_time_core_store+0xb0>)
   14978:	f8cd 8000 	str.w	r8, [sp]
   1497c:	f00b fabe 	bl	1fefc <z_log_msg_runtime_create.constprop.0>
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   14980:	2003      	movs	r0, #3

#if defined(CONFIG_DATE_TIME_MODEM)
	date_time_modem_store(&ltm);
#endif

	date_time_core_notify_event(time_source);
   14982:	f7ff ff37 	bl	147f4 <date_time_core_notify_event>
}
   14986:	b012      	add	sp, #72	; 0x48
   14988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	gmtime_r(&tp.tv_sec, &ltm);
   1498c:	a909      	add	r1, sp, #36	; 0x24
   1498e:	a804      	add	r0, sp, #16
   14990:	f006 fdf2 	bl	1b578 <gmtime_r>
	date_time_modem_store(&ltm);
   14994:	a809      	add	r0, sp, #36	; 0x24
   14996:	f000 f9c3 	bl	14d20 <date_time_modem_store>
	date_time_core_notify_event(time_source);
   1499a:	4628      	mov	r0, r5
   1499c:	e7f1      	b.n	14982 <date_time_core_store+0x8a>
   1499e:	bf00      	nop
   149a0:	000f4240 	.word	0x000f4240
   149a4:	00026793 	.word	0x00026793
   149a8:	00022f44 	.word	0x00022f44
   149ac:	2000cf50 	.word	0x2000cf50

000149b0 <date_time_update_thread>:
{
   149b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		int64_t date_time_ms_modem = 0;
   149b2:	2400      	movs	r4, #0
   149b4:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   149b6:	4e16      	ldr	r6, [pc, #88]	; (14a10 <date_time_update_thread+0x60>)
   149b8:	f04f 32ff 	mov.w	r2, #4294967295
   149bc:	f04f 33ff 	mov.w	r3, #4294967295
   149c0:	4630      	mov	r0, r6
   149c2:	f005 ff6d 	bl	1a8a0 <z_impl_k_sem_take>
		err = date_time_core_current_check();
   149c6:	f7ff ff71 	bl	148ac <date_time_core_current_check>
		if (err == 0) {
   149ca:	b930      	cbnz	r0, 149da <date_time_update_thread+0x2a>
			date_time_core_schedule_update(true);
   149cc:	2001      	movs	r0, #1
   149ce:	f7ff ff3f 	bl	14850 <date_time_core_schedule_update>
			date_time_core_notify_event(DATE_TIME_EVT_TYPE_PREVIOUS);
   149d2:	20ff      	movs	r0, #255	; 0xff
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   149d4:	f7ff ff0e 	bl	147f4 <date_time_core_notify_event>
   149d8:	e7ee      	b.n	149b8 <date_time_update_thread+0x8>
		err = date_time_modem_get(&date_time_ms_modem);
   149da:	4668      	mov	r0, sp
		int64_t date_time_ms_modem = 0;
   149dc:	e9cd 4500 	strd	r4, r5, [sp]
		err = date_time_modem_get(&date_time_ms_modem);
   149e0:	f000 f95c 	bl	14c9c <date_time_modem_get>
		if (err == 0) {
   149e4:	4602      	mov	r2, r0
   149e6:	b920      	cbnz	r0, 149f2 <date_time_update_thread+0x42>
			date_time_core_store(date_time_ms_modem, DATE_TIME_OBTAINED_MODEM);
   149e8:	e9dd 0100 	ldrd	r0, r1, [sp]
			date_time_core_store(date_time_ms_ntp, DATE_TIME_OBTAINED_NTP);
   149ec:	f7ff ff84 	bl	148f8 <date_time_core_store>
			continue;
   149f0:	e7e2      	b.n	149b8 <date_time_update_thread+0x8>
		err = date_time_ntp_get(&date_time_ms_ntp);
   149f2:	a802      	add	r0, sp, #8
		int64_t date_time_ms_ntp = 0;
   149f4:	e9cd 4502 	strd	r4, r5, [sp, #8]
		err = date_time_ntp_get(&date_time_ms_ntp);
   149f8:	f000 f80c 	bl	14a14 <date_time_ntp_get>
		if (err == 0) {
   149fc:	b918      	cbnz	r0, 14a06 <date_time_update_thread+0x56>
			date_time_core_store(date_time_ms_ntp, DATE_TIME_OBTAINED_NTP);
   149fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   14a02:	2201      	movs	r2, #1
   14a04:	e7f2      	b.n	149ec <date_time_update_thread+0x3c>
		date_time_core_schedule_update(true);
   14a06:	2001      	movs	r0, #1
   14a08:	f7ff ff22 	bl	14850 <date_time_core_schedule_update>
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   14a0c:	2003      	movs	r0, #3
   14a0e:	e7e1      	b.n	149d4 <date_time_update_thread+0x24>
   14a10:	2000cae4 	.word	0x2000cae4

00014a14 <date_time_ntp_get>:
	return false;
}
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */

int date_time_ntp_get(int64_t *date_time_ms)
{
   14a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14a18:	b09e      	sub	sp, #120	; 0x78
   14a1a:	4607      	mov	r7, r0
	err = lte_lc_nw_reg_status_get(&reg_status);
   14a1c:	a80a      	add	r0, sp, #40	; 0x28
   14a1e:	f7fe f9eb 	bl	12df8 <lte_lc_nw_reg_status_get>
	if (err) {
   14a22:	4606      	mov	r6, r0
   14a24:	b168      	cbz	r0, 14a42 <date_time_ntp_get+0x2e>
		LOG_WRN("Failed getting LTE network registration status, error: %d", err);
   14a26:	4b43      	ldr	r3, [pc, #268]	; (14b34 <date_time_ntp_get+0x120>)
   14a28:	9003      	str	r0, [sp, #12]
   14a2a:	9302      	str	r3, [sp, #8]
   14a2c:	2300      	movs	r3, #0
   14a2e:	2202      	movs	r2, #2
   14a30:	4618      	mov	r0, r3
   14a32:	e9cd 3300 	strd	r3, r3, [sp]
   14a36:	4940      	ldr	r1, [pc, #256]	; (14b38 <date_time_ntp_get+0x124>)
   14a38:	f00b fa6f 	bl	1ff1a <z_log_msg_runtime_create.constprop.0>
	int err;

#if defined(CONFIG_LTE_LINK_CONTROL)
	if (!is_connected_to_lte()) {
		LOG_DBG("Not connected to LTE, skipping NTP UTC time update");
		return -ENODATA;
   14a3c:	f06f 053c 	mvn.w	r5, #60	; 0x3c
   14a40:	e073      	b.n	14b2a <date_time_ntp_get+0x116>
	if (reg_status == LTE_LC_NW_REG_REGISTERED_EMERGENCY ||
   14a42:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   14a46:	2b08      	cmp	r3, #8
   14a48:	d003      	beq.n	14a52 <date_time_ntp_get+0x3e>
   14a4a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   14a4e:	2b01      	cmp	r3, #1
   14a50:	d1f4      	bne.n	14a3c <date_time_ntp_get+0x28>
	}

	LOG_DBG("Connected to LTE, performing NTP UTC time update");
#endif

	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   14a52:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 14b4c <date_time_ntp_get+0x138>
/** POSIX wrapper for @ref zsock_getaddrinfo */
static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   14a56:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 14b50 <date_time_ntp_get+0x13c>
	struct addrinfo hints = {
   14a5a:	2250      	movs	r2, #80	; 0x50
   14a5c:	2100      	movs	r1, #0
   14a5e:	a80a      	add	r0, sp, #40	; 0x28
		err =  sntp_time_request(servers[i],
   14a60:	f858 4b04 	ldr.w	r4, [r8], #4
	struct addrinfo hints = {
   14a64:	f00d f92f 	bl	21cc6 <memset>
   14a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
   14a6c:	4649      	mov	r1, r9
   14a6e:	930b      	str	r3, [sp, #44]	; 0x2c
   14a70:	4620      	mov	r0, r4
   14a72:	ab04      	add	r3, sp, #16
   14a74:	aa0a      	add	r2, sp, #40	; 0x28
   14a76:	f009 ff11 	bl	1e89c <zsock_getaddrinfo>
	if (err) {
   14a7a:	4605      	mov	r5, r0
   14a7c:	b1c0      	cbz	r0, 14ab0 <date_time_ntp_get+0x9c>
		LOG_WRN("getaddrinfo, error: %d", err);
   14a7e:	4b2f      	ldr	r3, [pc, #188]	; (14b3c <date_time_ntp_get+0x128>)
   14a80:	9003      	str	r0, [sp, #12]
   14a82:	9302      	str	r3, [sp, #8]
   14a84:	2300      	movs	r3, #0
   14a86:	2202      	movs	r2, #2
   14a88:	4618      	mov	r0, r3
   14a8a:	e9cd 3300 	strd	r3, r3, [sp]
   14a8e:	492a      	ldr	r1, [pc, #168]	; (14b38 <date_time_ntp_get+0x124>)
   14a90:	f00b fa43 	bl	1ff1a <z_log_msg_runtime_create.constprop.0>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   14a94:	b156      	cbz	r6, 14aac <date_time_ntp_get+0x98>
		LOG_DBG("Time obtained from NTP server %s", servers[i]);
		*date_time_ms = (int64_t)sntp_time.seconds * 1000;
		return 0;
	}

	LOG_WRN("Did not get time from any NTP server");
   14a96:	4b2a      	ldr	r3, [pc, #168]	; (14b40 <date_time_ntp_get+0x12c>)
   14a98:	2202      	movs	r2, #2
   14a9a:	9302      	str	r3, [sp, #8]
   14a9c:	2300      	movs	r3, #0
   14a9e:	4926      	ldr	r1, [pc, #152]	; (14b38 <date_time_ntp_get+0x124>)
   14aa0:	4618      	mov	r0, r3
   14aa2:	e9cd 3300 	strd	r3, r3, [sp]
   14aa6:	f00b fa38 	bl	1ff1a <z_log_msg_runtime_create.constprop.0>

	return -ENODATA;
   14aaa:	e7c7      	b.n	14a3c <date_time_ntp_get+0x28>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   14aac:	2601      	movs	r6, #1
   14aae:	e7d4      	b.n	14a5a <date_time_ntp_get+0x46>
	err = sntp_init(&sntp_ctx, addrinfo->ai_addr, addrinfo->ai_addrlen);
   14ab0:	9b04      	ldr	r3, [sp, #16]
   14ab2:	a805      	add	r0, sp, #20
   14ab4:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   14ab8:	f009 febc 	bl	1e834 <sntp_init>
	if (err) {
   14abc:	4604      	mov	r4, r0
   14abe:	b188      	cbz	r0, 14ae4 <date_time_ntp_get+0xd0>
		LOG_WRN("sntp_init, error: %d", err);
   14ac0:	4b20      	ldr	r3, [pc, #128]	; (14b44 <date_time_ntp_get+0x130>)
   14ac2:	9003      	str	r0, [sp, #12]
   14ac4:	e9cd 5301 	strd	r5, r3, [sp, #4]
   14ac8:	462b      	mov	r3, r5
   14aca:	9500      	str	r5, [sp, #0]
		LOG_WRN("sntp_query, error: %d", err);
   14acc:	4618      	mov	r0, r3
   14ace:	2202      	movs	r2, #2
   14ad0:	4919      	ldr	r1, [pc, #100]	; (14b38 <date_time_ntp_get+0x124>)
   14ad2:	f00b fa22 	bl	1ff1a <z_log_msg_runtime_create.constprop.0>
}

/** POSIX wrapper for @ref zsock_freeaddrinfo */
static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   14ad6:	9804      	ldr	r0, [sp, #16]
   14ad8:	f009 fee2 	bl	1e8a0 <zsock_freeaddrinfo>
	sntp_close(&sntp_ctx);
   14adc:	a805      	add	r0, sp, #20
   14ade:	f009 fed8 	bl	1e892 <sntp_close>
		if (err) {
   14ae2:	e7d7      	b.n	14a94 <date_time_ntp_get+0x80>
	err = sntp_query(&sntp_ctx, timeout, time);
   14ae4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 14b54 <date_time_ntp_get+0x140>
   14ae8:	f241 3188 	movw	r1, #5000	; 0x1388
   14aec:	4652      	mov	r2, sl
   14aee:	a805      	add	r0, sp, #20
   14af0:	f7f8 fddc 	bl	d6ac <sntp_query>
	if (err) {
   14af4:	4605      	mov	r5, r0
   14af6:	b130      	cbz	r0, 14b06 <date_time_ntp_get+0xf2>
		LOG_WRN("sntp_query, error: %d", err);
   14af8:	4b13      	ldr	r3, [pc, #76]	; (14b48 <date_time_ntp_get+0x134>)
   14afa:	9003      	str	r0, [sp, #12]
   14afc:	e9cd 4301 	strd	r4, r3, [sp, #4]
   14b00:	9400      	str	r4, [sp, #0]
   14b02:	4623      	mov	r3, r4
   14b04:	e7e2      	b.n	14acc <date_time_ntp_get+0xb8>
   14b06:	9804      	ldr	r0, [sp, #16]
   14b08:	f009 feca 	bl	1e8a0 <zsock_freeaddrinfo>
	sntp_close(&sntp_ctx);
   14b0c:	a805      	add	r0, sp, #20
   14b0e:	f009 fec0 	bl	1e892 <sntp_close>
		*date_time_ms = (int64_t)sntp_time.seconds * 1000;
   14b12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   14b16:	f8da 3000 	ldr.w	r3, [sl]
   14b1a:	f8da 0004 	ldr.w	r0, [sl, #4]
   14b1e:	fba3 3201 	umull	r3, r2, r3, r1
   14b22:	fb01 2200 	mla	r2, r1, r0, r2
   14b26:	e9c7 3200 	strd	r3, r2, [r7]
}
   14b2a:	4628      	mov	r0, r5
   14b2c:	b01e      	add	sp, #120	; 0x78
   14b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14b32:	bf00      	nop
   14b34:	000267bd 	.word	0x000267bd
   14b38:	00022f44 	.word	0x00022f44
   14b3c:	000267fb 	.word	0x000267fb
   14b40:	0002683d 	.word	0x0002683d
   14b44:	00026812 	.word	0x00026812
   14b48:	00026827 	.word	0x00026827
   14b4c:	00023670 	.word	0x00023670
   14b50:	000267f7 	.word	0x000267f7
   14b54:	2000cf58 	.word	0x2000cf58

00014b58 <date_time_at_xtime_handler>:
	/* 4 MSBs represent decimal that should be added as is. */
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
}

static void date_time_at_xtime_handler(const char *notif)
{
   14b58:	b570      	push	{r4, r5, r6, lr}
	uint8_t time_buf[6];
	size_t time_buf_len;
	char *time_str_start;
	int err;

	if (notif == NULL) {
   14b5a:	4604      	mov	r4, r0
{
   14b5c:	b092      	sub	sp, #72	; 0x48
	if (notif == NULL) {
   14b5e:	b1a8      	cbz	r0, 14b8c <date_time_at_xtime_handler+0x34>
		return;
	}
	modem_valid_network_time = true;
   14b60:	2601      	movs	r6, #1
   14b62:	4b48      	ldr	r3, [pc, #288]	; (14c84 <date_time_at_xtime_handler+0x12c>)
   14b64:	701e      	strb	r6, [r3, #0]

	/* Check if current time is valid */
	err = date_time_core_current_check();
   14b66:	f7ff fea1 	bl	148ac <date_time_core_current_check>
	if (err == 0) {
   14b6a:	b178      	cbz	r0, 14b8c <date_time_at_xtime_handler+0x34>
	 *                 and received from network.
	 * Examples of modem time response:
	 * %XTIME: "08","81109251714208","01"
	 * %XTIME: ,"81109251714208",
	 */
	time_str_start = strchr(notif, ',');
   14b6c:	212c      	movs	r1, #44	; 0x2c
   14b6e:	4620      	mov	r0, r4
   14b70:	f00d fa09 	bl	21f86 <strchr>
	if (time_str_start == NULL) {
   14b74:	4605      	mov	r5, r0
   14b76:	b958      	cbnz	r0, 14b90 <date_time_at_xtime_handler+0x38>
		LOG_ERR("%%XTIME notification doesn't contain ',': %s", notif);
   14b78:	4b43      	ldr	r3, [pc, #268]	; (14c88 <date_time_at_xtime_handler+0x130>)
   14b7a:	4632      	mov	r2, r6
   14b7c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   14b80:	4603      	mov	r3, r0
   14b82:	4942      	ldr	r1, [pc, #264]	; (14c8c <date_time_at_xtime_handler+0x134>)
   14b84:	9403      	str	r4, [sp, #12]
   14b86:	9000      	str	r0, [sp, #0]
	if (strlen(time_str_start) < 17) {
		LOG_ERR("%%XTIME notification too short: %s", notif);
		return;
	}
	if (*(time_str_start + 1) != '"') {
		LOG_ERR("%%XTIME notification doesn't contain '\"' after ',': %s", notif);
   14b88:	f00b f9d7 	bl	1ff3a <z_log_msg_runtime_create.constprop.0>
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;

	LOG_DBG("Time obtained from cellular network (XTIME notification)");

	date_time_core_store(date_time_ms, DATE_TIME_OBTAINED_MODEM);
}
   14b8c:	b012      	add	sp, #72	; 0x48
   14b8e:	bd70      	pop	{r4, r5, r6, pc}
	if (strlen(time_str_start) < 17) {
   14b90:	f7f4 f9d5 	bl	8f3e <strlen>
   14b94:	2810      	cmp	r0, #16
   14b96:	d809      	bhi.n	14bac <date_time_at_xtime_handler+0x54>
		LOG_ERR("%%XTIME notification too short: %s", notif);
   14b98:	4b3d      	ldr	r3, [pc, #244]	; (14c90 <date_time_at_xtime_handler+0x138>)
   14b9a:	9403      	str	r4, [sp, #12]
		LOG_ERR("%%XTIME notification doesn't contain '\"' after ',': %s", notif);
   14b9c:	9302      	str	r3, [sp, #8]
   14b9e:	2300      	movs	r3, #0
   14ba0:	4632      	mov	r2, r6
   14ba2:	4618      	mov	r0, r3
   14ba4:	e9cd 3300 	strd	r3, r3, [sp]
   14ba8:	4938      	ldr	r1, [pc, #224]	; (14c8c <date_time_at_xtime_handler+0x134>)
   14baa:	e7ed      	b.n	14b88 <date_time_at_xtime_handler+0x30>
	if (*(time_str_start + 1) != '"') {
   14bac:	786b      	ldrb	r3, [r5, #1]
   14bae:	2b22      	cmp	r3, #34	; 0x22
   14bb0:	d002      	beq.n	14bb8 <date_time_at_xtime_handler+0x60>
		LOG_ERR("%%XTIME notification doesn't contain '\"' after ',': %s", notif);
   14bb2:	4b38      	ldr	r3, [pc, #224]	; (14c94 <date_time_at_xtime_handler+0x13c>)
   14bb4:	9403      	str	r4, [sp, #12]
   14bb6:	e7f1      	b.n	14b9c <date_time_at_xtime_handler+0x44>
	time_buf_len = hex2bin(time_str_start, 12, time_buf, sizeof(time_buf));
   14bb8:	2306      	movs	r3, #6
   14bba:	210c      	movs	r1, #12
   14bbc:	aa07      	add	r2, sp, #28
   14bbe:	1ca8      	adds	r0, r5, #2
   14bc0:	f009 fa3f 	bl	1e042 <hex2bin>
	if (time_buf_len < sizeof(time_buf)) {
   14bc4:	2805      	cmp	r0, #5
   14bc6:	d80c      	bhi.n	14be2 <date_time_at_xtime_handler+0x8a>
		LOG_ERR("%%XTIME notification decoding failed (ret=%d): %s", time_buf_len, notif);
   14bc8:	4b33      	ldr	r3, [pc, #204]	; (14c98 <date_time_at_xtime_handler+0x140>)
   14bca:	e9cd 0403 	strd	r0, r4, [sp, #12]
   14bce:	9302      	str	r3, [sp, #8]
   14bd0:	2300      	movs	r3, #0
   14bd2:	4632      	mov	r2, r6
   14bd4:	4618      	mov	r0, r3
   14bd6:	e9cd 3300 	strd	r3, r3, [sp]
   14bda:	492c      	ldr	r1, [pc, #176]	; (14c8c <date_time_at_xtime_handler+0x134>)
   14bdc:	f00b f9ad 	bl	1ff3a <z_log_msg_runtime_create.constprop.0>
		return;
   14be0:	e7d4      	b.n	14b8c <date_time_at_xtime_handler+0x34>
	date_time.tm_mday = semioctet_to_dec(time_buf[2]);
   14be2:	f89d 101e 	ldrb.w	r1, [sp, #30]
	date_time.tm_year = semioctet_to_dec(time_buf[0]);
   14be6:	f89d 201c 	ldrb.w	r2, [sp, #28]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   14bea:	f001 000f 	and.w	r0, r1, #15
   14bee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14bf2:	0909      	lsrs	r1, r1, #4
   14bf4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_mday = semioctet_to_dec(time_buf[2]);
   14bf8:	b2c9      	uxtb	r1, r1
   14bfa:	910c      	str	r1, [sp, #48]	; 0x30
	date_time.tm_hour = semioctet_to_dec(time_buf[3]);
   14bfc:	f89d 101f 	ldrb.w	r1, [sp, #31]
	date_time.tm_mon  = semioctet_to_dec(time_buf[1]);
   14c00:	f89d 301d 	ldrb.w	r3, [sp, #29]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   14c04:	f001 000f 	and.w	r0, r1, #15
   14c08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14c0c:	0909      	lsrs	r1, r1, #4
   14c0e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_hour = semioctet_to_dec(time_buf[3]);
   14c12:	b2c9      	uxtb	r1, r1
   14c14:	910b      	str	r1, [sp, #44]	; 0x2c
	date_time.tm_min  = semioctet_to_dec(time_buf[4]);
   14c16:	f89d 1020 	ldrb.w	r1, [sp, #32]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   14c1a:	f001 000f 	and.w	r0, r1, #15
   14c1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14c22:	0909      	lsrs	r1, r1, #4
   14c24:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_min  = semioctet_to_dec(time_buf[4]);
   14c28:	b2c9      	uxtb	r1, r1
   14c2a:	910a      	str	r1, [sp, #40]	; 0x28
	date_time.tm_sec  = semioctet_to_dec(time_buf[5]);
   14c2c:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   14c30:	f001 000f 	and.w	r0, r1, #15
   14c34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14c38:	0909      	lsrs	r1, r1, #4
   14c3a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_sec  = semioctet_to_dec(time_buf[5]);
   14c3e:	b2c9      	uxtb	r1, r1
   14c40:	9109      	str	r1, [sp, #36]	; 0x24
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   14c42:	f002 010f 	and.w	r1, r2, #15
   14c46:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   14c4a:	0912      	lsrs	r2, r2, #4
   14c4c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
	date_time.tm_year = semioctet_to_dec(time_buf[0]);
   14c50:	b2d2      	uxtb	r2, r2
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   14c52:	3264      	adds	r2, #100	; 0x64
   14c54:	920e      	str	r2, [sp, #56]	; 0x38
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   14c56:	f003 020f 	and.w	r2, r3, #15
   14c5a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   14c5e:	091b      	lsrs	r3, r3, #4
   14c60:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	date_time.tm_mon  = semioctet_to_dec(time_buf[1]);
   14c64:	b2db      	uxtb	r3, r3
	date_time.tm_mon = date_time.tm_mon - 1;
   14c66:	3b01      	subs	r3, #1
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   14c68:	a809      	add	r0, sp, #36	; 0x24
	date_time.tm_mon = date_time.tm_mon - 1;
   14c6a:	930d      	str	r3, [sp, #52]	; 0x34
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   14c6c:	f7f7 feb0 	bl	c9d0 <timeutil_timegm64>
   14c70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   14c74:	fba0 0403 	umull	r0, r4, r0, r3
	date_time_core_store(date_time_ms, DATE_TIME_OBTAINED_MODEM);
   14c78:	2200      	movs	r2, #0
   14c7a:	fb03 4101 	mla	r1, r3, r1, r4
   14c7e:	f7ff fe3b 	bl	148f8 <date_time_core_store>
   14c82:	e783      	b.n	14b8c <date_time_at_xtime_handler+0x34>
   14c84:	200110bd 	.word	0x200110bd
   14c88:	0002687d 	.word	0x0002687d
   14c8c:	00022f44 	.word	0x00022f44
   14c90:	000268aa 	.word	0x000268aa
   14c94:	000268cd 	.word	0x000268cd
   14c98:	00026904 	.word	0x00026904

00014c9c <date_time_modem_get>:
{
   14c9c:	b530      	push	{r4, r5, lr}
	if (!modem_valid_network_time) {
   14c9e:	4b1b      	ldr	r3, [pc, #108]	; (14d0c <date_time_modem_get+0x70>)
{
   14ca0:	4604      	mov	r4, r0
	if (!modem_valid_network_time) {
   14ca2:	781b      	ldrb	r3, [r3, #0]
{
   14ca4:	b08f      	sub	sp, #60	; 0x3c
	if (!modem_valid_network_time) {
   14ca6:	b1d3      	cbz	r3, 14cde <date_time_modem_get+0x42>
	rc = nrf_modem_at_scanf("AT+CCLK?",
   14ca8:	ab06      	add	r3, sp, #24
   14caa:	9302      	str	r3, [sp, #8]
   14cac:	ab07      	add	r3, sp, #28
   14cae:	9301      	str	r3, [sp, #4]
   14cb0:	ad05      	add	r5, sp, #20
   14cb2:	ab08      	add	r3, sp, #32
   14cb4:	9300      	str	r3, [sp, #0]
   14cb6:	4916      	ldr	r1, [pc, #88]	; (14d10 <date_time_modem_get+0x74>)
   14cb8:	4816      	ldr	r0, [pc, #88]	; (14d14 <date_time_modem_get+0x78>)
   14cba:	9503      	str	r5, [sp, #12]
   14cbc:	ab09      	add	r3, sp, #36	; 0x24
   14cbe:	aa0a      	add	r2, sp, #40	; 0x28
   14cc0:	f003 fbfc 	bl	184bc <nrf_modem_at_scanf>
	if (rc != 6) {
   14cc4:	2806      	cmp	r0, #6
   14cc6:	d00e      	beq.n	14ce6 <date_time_modem_get+0x4a>
		LOG_WRN("Did not get time from cellular network (error: %d). "
   14cc8:	4b13      	ldr	r3, [pc, #76]	; (14d18 <date_time_modem_get+0x7c>)
   14cca:	9003      	str	r0, [sp, #12]
   14ccc:	9302      	str	r3, [sp, #8]
   14cce:	2300      	movs	r3, #0
   14cd0:	2202      	movs	r2, #2
   14cd2:	4618      	mov	r0, r3
   14cd4:	e9cd 3300 	strd	r3, r3, [sp]
   14cd8:	4910      	ldr	r1, [pc, #64]	; (14d1c <date_time_modem_get+0x80>)
   14cda:	f00b f92e 	bl	1ff3a <z_log_msg_runtime_create.constprop.0>
		return -ENODATA;
   14cde:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   14ce2:	b00f      	add	sp, #60	; 0x3c
   14ce4:	bd30      	pop	{r4, r5, pc}
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   14ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   14ce8:	4628      	mov	r0, r5
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   14cea:	3364      	adds	r3, #100	; 0x64
   14cec:	930a      	str	r3, [sp, #40]	; 0x28
	date_time.tm_mon = date_time.tm_mon - 1;
   14cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   14cf0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	date_time.tm_mon = date_time.tm_mon - 1;
   14cf4:	3b01      	subs	r3, #1
   14cf6:	9309      	str	r3, [sp, #36]	; 0x24
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   14cf8:	f7f7 fe6a 	bl	c9d0 <timeutil_timegm64>
   14cfc:	fba0 0205 	umull	r0, r2, r0, r5
   14d00:	fb05 2201 	mla	r2, r5, r1, r2
   14d04:	e9c4 0200 	strd	r0, r2, [r4]
	return 0;
   14d08:	2000      	movs	r0, #0
   14d0a:	e7ea      	b.n	14ce2 <date_time_modem_get+0x46>
   14d0c:	200110bd 	.word	0x200110bd
   14d10:	00026936 	.word	0x00026936
   14d14:	000265a1 	.word	0x000265a1
   14d18:	00026950 	.word	0x00026950
   14d1c:	00022f44 	.word	0x00022f44

00014d20 <date_time_modem_store>:
#endif /* defined(CONFIG_DATE_TIME_AUTO_UPDATE) */

void date_time_modem_store(struct tm *ltm)
{
   14d20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int ret;

	/* Set modem time if modem has not got it from the LTE network */
	if (!modem_valid_network_time) {
   14d22:	4b12      	ldr	r3, [pc, #72]	; (14d6c <date_time_modem_store+0x4c>)
   14d24:	781c      	ldrb	r4, [r3, #0]
   14d26:	b9f4      	cbnz	r4, 14d66 <date_time_modem_store+0x46>
		/* Time zone is not known and it's mandatory so setting to zero.
		 * POSIX year is relative to 1900 which doesn't affect as last two digits are taken
		 * with modulo 100.
		 * POSIX month is in range 0-11 so adding 1.
		 */
		ret = nrf_modem_at_printf("AT+CCLK=\"%02u/%02u/%02u,%02u:%02u:%02u+%02u\"",
   14d28:	e9d0 2104 	ldrd	r2, r1, [r0, #16]
   14d2c:	2564      	movs	r5, #100	; 0x64
   14d2e:	fb91 f6f5 	sdiv	r6, r1, r5
   14d32:	9403      	str	r4, [sp, #12]
   14d34:	6803      	ldr	r3, [r0, #0]
   14d36:	fb05 1116 	mls	r1, r5, r6, r1
   14d3a:	9302      	str	r3, [sp, #8]
   14d3c:	6843      	ldr	r3, [r0, #4]
   14d3e:	3201      	adds	r2, #1
   14d40:	9301      	str	r3, [sp, #4]
   14d42:	6883      	ldr	r3, [r0, #8]
   14d44:	9300      	str	r3, [sp, #0]
   14d46:	68c3      	ldr	r3, [r0, #12]
   14d48:	4809      	ldr	r0, [pc, #36]	; (14d70 <date_time_modem_store+0x50>)
   14d4a:	f003 fad7 	bl	182fc <nrf_modem_at_printf>
			ltm->tm_year % 100, ltm->tm_mon + 1, ltm->tm_mday,
			ltm->tm_hour, ltm->tm_min, ltm->tm_sec, 0);
		if (ret) {
   14d4e:	b150      	cbz	r0, 14d66 <date_time_modem_store+0x46>
			LOG_ERR("Setting modem time failed, %d", ret);
   14d50:	4b08      	ldr	r3, [pc, #32]	; (14d74 <date_time_modem_store+0x54>)
   14d52:	9003      	str	r0, [sp, #12]
   14d54:	e9cd 4301 	strd	r4, r3, [sp, #4]
   14d58:	2201      	movs	r2, #1
   14d5a:	4623      	mov	r3, r4
   14d5c:	4620      	mov	r0, r4
   14d5e:	4906      	ldr	r1, [pc, #24]	; (14d78 <date_time_modem_store+0x58>)
   14d60:	9400      	str	r4, [sp, #0]
   14d62:	f00b f8ea 	bl	1ff3a <z_log_msg_runtime_create.constprop.0>
			return;
		}

		LOG_DBG("Modem time updated");
	}
}
   14d66:	b004      	add	sp, #16
   14d68:	bd70      	pop	{r4, r5, r6, pc}
   14d6a:	bf00      	nop
   14d6c:	200110bd 	.word	0x200110bd
   14d70:	000269e0 	.word	0x000269e0
   14d74:	00026a0d 	.word	0x00026a0d
   14d78:	00022f44 	.word	0x00022f44

00014d7c <date_time_modem_xtime_subscribe>:

void date_time_modem_xtime_subscribe(void)
{
   14d7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Subscribe to modem time notifications */
	int err = nrf_modem_at_printf("AT%%XTIME=1");
   14d7e:	4809      	ldr	r0, [pc, #36]	; (14da4 <date_time_modem_xtime_subscribe+0x28>)
   14d80:	f003 fabc 	bl	182fc <nrf_modem_at_printf>

	if (err) {
   14d84:	b150      	cbz	r0, 14d9c <date_time_modem_xtime_subscribe+0x20>
		LOG_ERR("Subscribing to modem AT%%XTIME notifications failed, err=%d", err);
   14d86:	4b08      	ldr	r3, [pc, #32]	; (14da8 <date_time_modem_xtime_subscribe+0x2c>)
   14d88:	9003      	str	r0, [sp, #12]
   14d8a:	9302      	str	r3, [sp, #8]
   14d8c:	2300      	movs	r3, #0
   14d8e:	2201      	movs	r2, #1
   14d90:	4618      	mov	r0, r3
   14d92:	e9cd 3300 	strd	r3, r3, [sp]
   14d96:	4905      	ldr	r1, [pc, #20]	; (14dac <date_time_modem_xtime_subscribe+0x30>)
   14d98:	f00b f8cf 	bl	1ff3a <z_log_msg_runtime_create.constprop.0>
	}
}
   14d9c:	b005      	add	sp, #20
   14d9e:	f85d fb04 	ldr.w	pc, [sp], #4
   14da2:	bf00      	nop
   14da4:	00026a2b 	.word	0x00026a2b
   14da8:	00026a37 	.word	0x00026a37
   14dac:	00022f44 	.word	0x00022f44

00014db0 <modem_jwt_generate>:
		*found = '\0';
	}
}

int modem_jwt_generate(struct jwt_data *const jwt)
{
   14db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!jwt) {
   14db4:	4605      	mov	r5, r0
{
   14db6:	b087      	sub	sp, #28
	if (!jwt) {
   14db8:	2800      	cmp	r0, #0
   14dba:	f000 8091 	beq.w	14ee0 <modem_jwt_generate+0x130>
		return -EINVAL;
	} else if ((jwt->jwt_buf) && (jwt->jwt_sz == 0)) {
   14dbe:	6943      	ldr	r3, [r0, #20]
   14dc0:	b11b      	cbz	r3, 14dca <modem_jwt_generate+0x1a>
   14dc2:	6983      	ldr	r3, [r0, #24]
   14dc4:	2b00      	cmp	r3, #0
   14dc6:	f000 808e 	beq.w	14ee6 <modem_jwt_generate+0x136>
	int ret;
	char *cmd_resp;


	/* Allocate response buffer */
	cmd_resp = k_calloc(CONFIG_MODEM_JWT_MAX_LEN, 1);
   14dca:	2101      	movs	r1, #1
   14dcc:	f240 3052 	movw	r0, #850	; 0x352
   14dd0:	f00c ff1e 	bl	21c10 <k_calloc>
	if (!cmd_resp) {
   14dd4:	4606      	mov	r6, r0
   14dd6:	2800      	cmp	r0, #0
   14dd8:	f000 8088 	beq.w	14eec <modem_jwt_generate+0x13c>
	if (jwt->sec_tag) {
		ret = nrf_modem_at_cmd(cmd_resp, CONFIG_MODEM_JWT_MAX_LEN,
			JWT_CMD_TEMPLATE_SEC_TAG,
			jwt->alg,
			jwt->exp_delta_s,
			jwt->subject ? jwt->subject : "",
   14ddc:	e9d5 7202 	ldrd	r7, r2, [r5, #8]
		ret = nrf_modem_at_cmd(cmd_resp, CONFIG_MODEM_JWT_MAX_LEN,
   14de0:	4944      	ldr	r1, [pc, #272]	; (14ef4 <modem_jwt_generate+0x144>)
   14de2:	692c      	ldr	r4, [r5, #16]
	if (jwt->sec_tag) {
   14de4:	f8d5 c000 	ldr.w	ip, [r5]
		ret = nrf_modem_at_cmd(cmd_resp, CONFIG_MODEM_JWT_MAX_LEN,
   14de8:	2a00      	cmp	r2, #0
   14dea:	bf08      	it	eq
   14dec:	460a      	moveq	r2, r1
   14dee:	796b      	ldrb	r3, [r5, #5]
   14df0:	2c00      	cmp	r4, #0
   14df2:	bf18      	it	ne
   14df4:	4621      	movne	r1, r4
	if (jwt->sec_tag) {
   14df6:	f1bc 0f00 	cmp.w	ip, #0
   14dfa:	d017      	beq.n	14e2c <modem_jwt_generate+0x7c>
		ret = nrf_modem_at_cmd(cmd_resp, CONFIG_MODEM_JWT_MAX_LEN,
   14dfc:	792c      	ldrb	r4, [r5, #4]
   14dfe:	e9cd 2101 	strd	r2, r1, [sp, #4]
   14e02:	e9cd c403 	strd	ip, r4, [sp, #12]
   14e06:	f240 3152 	movw	r1, #850	; 0x352
   14e0a:	4a3b      	ldr	r2, [pc, #236]	; (14ef8 <modem_jwt_generate+0x148>)
   14e0c:	9700      	str	r7, [sp, #0]
   14e0e:	f003 fac1 	bl	18394 <nrf_modem_at_cmd>
			jwt->exp_delta_s,
			jwt->subject ? jwt->subject : "",
			jwt->audience ? jwt->audience : "");
	}

	if (ret) {
   14e12:	2800      	cmp	r0, #0
		ret = nrf_modem_at_cmd(cmd_resp, CONFIG_MODEM_JWT_MAX_LEN,
   14e14:	4604      	mov	r4, r0
	if (ret) {
   14e16:	d012      	beq.n	14e3e <modem_jwt_generate+0x8e>
		/* when positive, the response was different from "OK" */
		if (ret > 0) {
   14e18:	dd01      	ble.n	14e1e <modem_jwt_generate+0x6e>
			ret = -ENOEXEC;
   14e1a:	f06f 0407 	mvn.w	r4, #7
			memcpy(jwt->jwt_buf, cmd_resp, jwt_sz);
		}
	}

	if (cmd_resp) {
		k_free(cmd_resp);
   14e1e:	4630      	mov	r0, r6
   14e20:	f00c feeb 	bl	21bfa <k_free>
	}

	return ret;
}
   14e24:	4620      	mov	r0, r4
   14e26:	b007      	add	sp, #28
   14e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = nrf_modem_at_cmd(cmd_resp, CONFIG_MODEM_JWT_MAX_LEN,
   14e2c:	e9cd 2101 	strd	r2, r1, [sp, #4]
   14e30:	9700      	str	r7, [sp, #0]
   14e32:	f240 3152 	movw	r1, #850	; 0x352
   14e36:	4a31      	ldr	r2, [pc, #196]	; (14efc <modem_jwt_generate+0x14c>)
   14e38:	f003 faac 	bl	18394 <nrf_modem_at_cmd>
   14e3c:	e7e9      	b.n	14e12 <modem_jwt_generate+0x62>
	jwt_start = strchr(jwt_resp, '"');
   14e3e:	2122      	movs	r1, #34	; 0x22
   14e40:	4630      	mov	r0, r6
   14e42:	f00d f8a0 	bl	21f86 <strchr>
	if (!jwt_start) {
   14e46:	2800      	cmp	r0, #0
   14e48:	d044      	beq.n	14ed4 <modem_jwt_generate+0x124>
	jwt_end = strchr(++jwt_start, '"');
   14e4a:	1c47      	adds	r7, r0, #1
   14e4c:	2122      	movs	r1, #34	; 0x22
   14e4e:	4638      	mov	r0, r7
   14e50:	f00d f899 	bl	21f86 <strchr>
	if (!jwt_end) {
   14e54:	2800      	cmp	r0, #0
   14e56:	d03d      	beq.n	14ed4 <modem_jwt_generate+0x124>
	*jwt_end = 0;
   14e58:	7004      	strb	r4, [r0, #0]
	jwt_len = strlen(jwt_start) + 1;
   14e5a:	4638      	mov	r0, r7
   14e5c:	f7f4 f86f 	bl	8f3e <strlen>
__ssp_bos_icheck3(memmove, void *, const void *)
   14e60:	4639      	mov	r1, r7
   14e62:	1c42      	adds	r2, r0, #1
   14e64:	4630      	mov	r0, r6
   14e66:	f00c ff14 	bl	21c92 <memmove>
		size_t jwt_sz = strlen(cmd_resp) + 1;
   14e6a:	4630      	mov	r0, r6
   14e6c:	f7f4 f867 	bl	8f3e <strlen>
		if (!jwt->jwt_buf) {
   14e70:	696b      	ldr	r3, [r5, #20]
		size_t jwt_sz = strlen(cmd_resp) + 1;
   14e72:	f100 0801 	add.w	r8, r0, #1
		if (!jwt->jwt_buf) {
   14e76:	bb13      	cbnz	r3, 14ebe <modem_jwt_generate+0x10e>
			jwt->jwt_buf = k_calloc(jwt_sz, 1);
   14e78:	2101      	movs	r1, #1
   14e7a:	4640      	mov	r0, r8
   14e7c:	f00c fec8 	bl	21c10 <k_calloc>
   14e80:	6168      	str	r0, [r5, #20]
			if (!jwt->jwt_buf) {
   14e82:	b350      	cbz	r0, 14eda <modem_jwt_generate+0x12a>
				jwt->jwt_sz = jwt_sz;
   14e84:	f8c5 8018 	str.w	r8, [r5, #24]
		ret = nrf_modem_at_cmd(cmd_resp, CONFIG_MODEM_JWT_MAX_LEN,
   14e88:	4630      	mov	r0, r6
		*found = '-';
   14e8a:	272d      	movs	r7, #45	; 0x2d
	for (found = base64_string; (found = strchr(found, '+'));) {
   14e8c:	212b      	movs	r1, #43	; 0x2b
   14e8e:	f00d f87a 	bl	21f86 <strchr>
   14e92:	b9d0      	cbnz	r0, 14eca <modem_jwt_generate+0x11a>
   14e94:	4637      	mov	r7, r6
		*found = '_';
   14e96:	f04f 095f 	mov.w	r9, #95	; 0x5f
	for (found = base64_string; (found = strchr(found, '/'));) {
   14e9a:	4638      	mov	r0, r7
   14e9c:	212f      	movs	r1, #47	; 0x2f
   14e9e:	f00d f872 	bl	21f86 <strchr>
   14ea2:	4607      	mov	r7, r0
   14ea4:	b998      	cbnz	r0, 14ece <modem_jwt_generate+0x11e>
	found = strchr(base64_string, '=');
   14ea6:	213d      	movs	r1, #61	; 0x3d
   14ea8:	4630      	mov	r0, r6
   14eaa:	f00d f86c 	bl	21f86 <strchr>
	if (found) {
   14eae:	b100      	cbz	r0, 14eb2 <modem_jwt_generate+0x102>
		*found = '\0';
   14eb0:	7007      	strb	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14eb2:	4642      	mov	r2, r8
   14eb4:	4631      	mov	r1, r6
   14eb6:	6968      	ldr	r0, [r5, #20]
   14eb8:	f00c fede 	bl	21c78 <memcpy>
	if (cmd_resp) {
   14ebc:	e7af      	b.n	14e1e <modem_jwt_generate+0x6e>
		} else if (jwt_sz > jwt->jwt_sz) {
   14ebe:	69ab      	ldr	r3, [r5, #24]
   14ec0:	4543      	cmp	r3, r8
   14ec2:	d2e1      	bcs.n	14e88 <modem_jwt_generate+0xd8>
			ret = -E2BIG;
   14ec4:	f06f 0406 	mvn.w	r4, #6
   14ec8:	e7a9      	b.n	14e1e <modem_jwt_generate+0x6e>
		*found = '-';
   14eca:	7007      	strb	r7, [r0, #0]
   14ecc:	e7de      	b.n	14e8c <modem_jwt_generate+0xdc>
		*found = '_';
   14ece:	f887 9000 	strb.w	r9, [r7]
   14ed2:	e7e2      	b.n	14e9a <modem_jwt_generate+0xea>
		return -EBADMSG;
   14ed4:	f06f 044c 	mvn.w	r4, #76	; 0x4c
   14ed8:	e7a1      	b.n	14e1e <modem_jwt_generate+0x6e>
				ret = -ENOMEM;
   14eda:	f06f 040b 	mvn.w	r4, #11
   14ede:	e79e      	b.n	14e1e <modem_jwt_generate+0x6e>
		return -EINVAL;
   14ee0:	f06f 0415 	mvn.w	r4, #21
   14ee4:	e79e      	b.n	14e24 <modem_jwt_generate+0x74>
		return -EMSGSIZE;
   14ee6:	f06f 0479 	mvn.w	r4, #121	; 0x79
   14eea:	e79b      	b.n	14e24 <modem_jwt_generate+0x74>
		return -ENOMEM;
   14eec:	f06f 040b 	mvn.w	r4, #11
   14ef0:	e798      	b.n	14e24 <modem_jwt_generate+0x74>
   14ef2:	bf00      	nop
   14ef4:	0002756e 	.word	0x0002756e
   14ef8:	00026a7a 	.word	0x00026a7a
   14efc:	00026a98 	.word	0x00026a98

00014f00 <on_modem_lib_init>:
LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
{
   14f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	if (ret != 0) {
   14f02:	4604      	mov	r4, r0
   14f04:	b9f8      	cbnz	r0, 14f46 <on_modem_lib_init+0x46>
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
   14f06:	4911      	ldr	r1, [pc, #68]	; (14f4c <on_modem_lib_init+0x4c>)
   14f08:	4811      	ldr	r0, [pc, #68]	; (14f50 <on_modem_lib_init+0x50>)
   14f0a:	f003 f9f7 	bl	182fc <nrf_modem_at_printf>
		if (err) {
   14f0e:	b150      	cbz	r0, 14f26 <on_modem_lib_init+0x26>
			LOG_ERR("Failed to set MAGPIO configuration (err: %d)", err);
   14f10:	4b10      	ldr	r3, [pc, #64]	; (14f54 <on_modem_lib_init+0x54>)
   14f12:	9003      	str	r0, [sp, #12]
   14f14:	e9cd 4301 	strd	r4, r3, [sp, #4]
   14f18:	2201      	movs	r2, #1
   14f1a:	4623      	mov	r3, r4
   14f1c:	4620      	mov	r0, r4
   14f1e:	490e      	ldr	r1, [pc, #56]	; (14f58 <on_modem_lib_init+0x58>)
   14f20:	9400      	str	r4, [sp, #0]
   14f22:	f00b f819 	bl	1ff58 <z_log_msg_runtime_create.constprop.0>
		}
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_COEX0) > 0) {
		LOG_DBG("Setting COEX0 configuration: %s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
   14f26:	490d      	ldr	r1, [pc, #52]	; (14f5c <on_modem_lib_init+0x5c>)
   14f28:	4809      	ldr	r0, [pc, #36]	; (14f50 <on_modem_lib_init+0x50>)
   14f2a:	f003 f9e7 	bl	182fc <nrf_modem_at_printf>
		if (err) {
   14f2e:	b150      	cbz	r0, 14f46 <on_modem_lib_init+0x46>
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
   14f30:	4b0b      	ldr	r3, [pc, #44]	; (14f60 <on_modem_lib_init+0x60>)
   14f32:	9003      	str	r0, [sp, #12]
   14f34:	9302      	str	r3, [sp, #8]
   14f36:	2300      	movs	r3, #0
   14f38:	2201      	movs	r2, #1
   14f3a:	4618      	mov	r0, r3
   14f3c:	e9cd 3300 	strd	r3, r3, [sp]
   14f40:	4905      	ldr	r1, [pc, #20]	; (14f58 <on_modem_lib_init+0x58>)
   14f42:	f00b f809 	bl	1ff58 <z_log_msg_runtime_create.constprop.0>
		}
	}
}
   14f46:	b004      	add	sp, #16
   14f48:	bd10      	pop	{r4, pc}
   14f4a:	bf00      	nop
   14f4c:	00026ab0 	.word	0x00026ab0
   14f50:	000268a7 	.word	0x000268a7
   14f54:	00026acf 	.word	0x00026acf
   14f58:	00022f84 	.word	0x00022f84
   14f5c:	00026afc 	.word	0x00026afc
   14f60:	00026b06 	.word	0x00026b06

00014f64 <get_error_code_value>:

	return cJSON_AddNullToObjectCS(parent, str) ? 0 : -ENOMEM;
}

static int get_error_code_value(cJSON *const obj, enum nrf_cloud_error * const err)
{
   14f64:	b530      	push	{r4, r5, lr}
   14f66:	460d      	mov	r5, r1
   14f68:	b085      	sub	sp, #20
	cJSON *err_obj;

	err_obj = cJSON_GetObjectItem(obj, NRF_CLOUD_JSON_ERR_KEY);
   14f6a:	4911      	ldr	r1, [pc, #68]	; (14fb0 <get_error_code_value+0x4c>)
   14f6c:	f00b f927 	bl	201be <cJSON_GetObjectItem>
	if (!err_obj) {
   14f70:	4604      	mov	r4, r0
   14f72:	b1c8      	cbz	r0, 14fa8 <get_error_code_value+0x44>
		return -ENOMSG;
	}

	if (!cJSON_IsNumber(err_obj)) {
   14f74:	f00b f995 	bl	202a2 <cJSON_IsNumber>
   14f78:	4603      	mov	r3, r0
   14f7a:	b958      	cbnz	r0, 14f94 <get_error_code_value+0x30>
		LOG_WRN("Invalid JSON data type for error value");
   14f7c:	4a0d      	ldr	r2, [pc, #52]	; (14fb4 <get_error_code_value+0x50>)
   14f7e:	9000      	str	r0, [sp, #0]
   14f80:	e9cd 0201 	strd	r0, r2, [sp, #4]
   14f84:	490c      	ldr	r1, [pc, #48]	; (14fb8 <get_error_code_value+0x54>)
   14f86:	2202      	movs	r2, #2
   14f88:	f00b f81c 	bl	1ffc4 <z_log_msg_runtime_create.constprop.0>
   14f8c:	f06f 004c 	mvn.w	r0, #76	; 0x4c
	}

	*err = (enum nrf_cloud_error)cJSON_GetNumberValue(err_obj);

	return 0;
}
   14f90:	b005      	add	sp, #20
   14f92:	bd30      	pop	{r4, r5, pc}
	*err = (enum nrf_cloud_error)cJSON_GetNumberValue(err_obj);
   14f94:	4620      	mov	r0, r4
   14f96:	f7f5 fa4b 	bl	a430 <cJSON_GetNumberValue>
   14f9a:	ec51 0b10 	vmov	r0, r1, d0
   14f9e:	f7f3 fd3f 	bl	8a20 <__aeabi_d2iz>
   14fa2:	6028      	str	r0, [r5, #0]
	return 0;
   14fa4:	2000      	movs	r0, #0
   14fa6:	e7f3      	b.n	14f90 <get_error_code_value+0x2c>
		return -ENOMSG;
   14fa8:	f06f 0022 	mvn.w	r0, #34	; 0x22
   14fac:	e7f0      	b.n	14f90 <get_error_code_value+0x2c>
   14fae:	bf00      	nop
   14fb0:	00023fa8 	.word	0x00023fa8
   14fb4:	00026b58 	.word	0x00026b58
   14fb8:	00023004 	.word	0x00023004

00014fbc <init_modem_info>:
	return 0;
}

#ifdef CONFIG_MODEM_INFO
static int init_modem_info(void)
{
   14fbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (!modem_inf_initd) {
   14fbe:	4e11      	ldr	r6, [pc, #68]	; (15004 <init_modem_info+0x48>)
   14fc0:	7835      	ldrb	r5, [r6, #0]
   14fc2:	b11d      	cbz	r5, 14fcc <init_modem_info+0x10>
			return err;
		}

		modem_inf_initd = true;
	}
	return 0;
   14fc4:	2400      	movs	r4, #0
}
   14fc6:	4620      	mov	r0, r4
   14fc8:	b004      	add	sp, #16
   14fca:	bd70      	pop	{r4, r5, r6, pc}
		err = modem_info_init();
   14fcc:	f7ff fab6 	bl	1453c <modem_info_init>
		if (err) {
   14fd0:	4604      	mov	r4, r0
   14fd2:	b158      	cbz	r0, 14fec <init_modem_info+0x30>
			LOG_ERR("modem_info_init() failed: %d", err);
   14fd4:	4b0c      	ldr	r3, [pc, #48]	; (15008 <init_modem_info+0x4c>)
   14fd6:	9003      	str	r0, [sp, #12]
			LOG_ERR("modem_info_params_init() failed: %d", err);
   14fd8:	e9cd 5301 	strd	r5, r3, [sp, #4]
   14fdc:	2201      	movs	r2, #1
   14fde:	462b      	mov	r3, r5
   14fe0:	4628      	mov	r0, r5
   14fe2:	490a      	ldr	r1, [pc, #40]	; (1500c <init_modem_info+0x50>)
   14fe4:	9500      	str	r5, [sp, #0]
   14fe6:	f00a ffed 	bl	1ffc4 <z_log_msg_runtime_create.constprop.0>
			return err;
   14fea:	e7ec      	b.n	14fc6 <init_modem_info+0xa>
		err = modem_info_params_init(&modem_inf);
   14fec:	4808      	ldr	r0, [pc, #32]	; (15010 <init_modem_info+0x54>)
   14fee:	f7ff faef 	bl	145d0 <modem_info_params_init>
		if (err) {
   14ff2:	4604      	mov	r4, r0
   14ff4:	b110      	cbz	r0, 14ffc <init_modem_info+0x40>
			LOG_ERR("modem_info_params_init() failed: %d", err);
   14ff6:	4b07      	ldr	r3, [pc, #28]	; (15014 <init_modem_info+0x58>)
   14ff8:	9003      	str	r0, [sp, #12]
   14ffa:	e7ed      	b.n	14fd8 <init_modem_info+0x1c>
		modem_inf_initd = true;
   14ffc:	2301      	movs	r3, #1
   14ffe:	7033      	strb	r3, [r6, #0]
   15000:	e7e0      	b.n	14fc4 <init_modem_info+0x8>
   15002:	bf00      	nop
   15004:	200110be 	.word	0x200110be
   15008:	00026b7f 	.word	0x00026b7f
   1500c:	00023004 	.word	0x00023004
   15010:	2000cf68 	.word	0x2000cf68
   15014:	00026b9c 	.word	0x00026b9c

00015018 <get_modem_info>:

static int get_modem_info(void)
{
   15018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err = init_modem_info();
   1501a:	f7ff ffcf 	bl	14fbc <init_modem_info>

	if (err) {
   1501e:	4604      	mov	r4, r0
   15020:	b168      	cbz	r0, 1503e <get_modem_info+0x26>
		LOG_ERR("Could not initialize modem info module, error: %d", err);
   15022:	4b0b      	ldr	r3, [pc, #44]	; (15050 <get_modem_info+0x38>)
   15024:	9003      	str	r0, [sp, #12]
		return err;
	}

	err = modem_info_params_get(&modem_inf);
	if (err) {
		LOG_ERR("Could not obtain information from modem, error: %d", err);
   15026:	9302      	str	r3, [sp, #8]
   15028:	2300      	movs	r3, #0
   1502a:	2201      	movs	r2, #1
   1502c:	4618      	mov	r0, r3
   1502e:	e9cd 3300 	strd	r3, r3, [sp]
   15032:	4908      	ldr	r1, [pc, #32]	; (15054 <get_modem_info+0x3c>)
   15034:	f00a ffc6 	bl	1ffc4 <z_log_msg_runtime_create.constprop.0>
		return err;
	}

	return 0;
}
   15038:	4620      	mov	r0, r4
   1503a:	b004      	add	sp, #16
   1503c:	bd10      	pop	{r4, pc}
	err = modem_info_params_get(&modem_inf);
   1503e:	4806      	ldr	r0, [pc, #24]	; (15058 <get_modem_info+0x40>)
   15040:	f7ff fb1c 	bl	1467c <modem_info_params_get>
	if (err) {
   15044:	4604      	mov	r4, r0
   15046:	2800      	cmp	r0, #0
   15048:	d0f6      	beq.n	15038 <get_modem_info+0x20>
		LOG_ERR("Could not obtain information from modem, error: %d", err);
   1504a:	4b04      	ldr	r3, [pc, #16]	; (1505c <get_modem_info+0x44>)
   1504c:	9003      	str	r0, [sp, #12]
   1504e:	e7ea      	b.n	15026 <get_modem_info+0xe>
   15050:	00026bc0 	.word	0x00026bc0
   15054:	00023004 	.word	0x00023004
   15058:	2000cf68 	.word	0x2000cf68
   1505c:	00026bf2 	.word	0x00026bf2

00015060 <nrf_cloud_codec_init>:
{
   15060:	b513      	push	{r0, r1, r4, lr}
	if (!initialized) {
   15062:	4c0a      	ldr	r4, [pc, #40]	; (1508c <nrf_cloud_codec_init+0x2c>)
   15064:	7823      	ldrb	r3, [r4, #0]
   15066:	b933      	cbnz	r3, 15076 <nrf_cloud_codec_init+0x16>
		if (hooks == NULL) {
   15068:	b940      	cbnz	r0, 1507c <nrf_cloud_codec_init+0x1c>
			cJSON_Init();
   1506a:	f002 f87d 	bl	17168 <cJSON_Init>
		init_modem_info();
   1506e:	f7ff ffa5 	bl	14fbc <init_modem_info>
		initialized = true;
   15072:	2301      	movs	r3, #1
   15074:	7023      	strb	r3, [r4, #0]
}
   15076:	2000      	movs	r0, #0
   15078:	b002      	add	sp, #8
   1507a:	bd10      	pop	{r4, pc}
			cJSON_Hooks cjson_hooks = {
   1507c:	6803      	ldr	r3, [r0, #0]
   1507e:	9300      	str	r3, [sp, #0]
   15080:	6883      	ldr	r3, [r0, #8]
			cJSON_InitHooks(&cjson_hooks);
   15082:	4668      	mov	r0, sp
			cJSON_Hooks cjson_hooks = {
   15084:	9301      	str	r3, [sp, #4]
			cJSON_InitHooks(&cjson_hooks);
   15086:	f001 ff93 	bl	16fb0 <cJSON_InitHooks>
   1508a:	e7f0      	b.n	1506e <nrf_cloud_codec_init+0xe>
   1508c:	200110bf 	.word	0x200110bf

00015090 <nrf_cloud_get_single_cell_modem_info>:

	return cell_info_json_encode(data_obj, (cell_inf ? cell_inf : &cell));
}

int nrf_cloud_get_single_cell_modem_info(struct lte_lc_cell *const cell_inf)
{
   15090:	b570      	push	{r4, r5, r6, lr}
   15092:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(cell_inf != NULL);
	int err;

	err = get_modem_info();
   15094:	f7ff ffc0 	bl	15018 <get_modem_info>
	if (err) {
   15098:	4606      	mov	r6, r0
   1509a:	b998      	cbnz	r0, 150c4 <nrf_cloud_get_single_cell_modem_info+0x34>
		return err;
	}

	cell_inf->mcc	= modem_inf.network.mcc.value;
   1509c:	4d0a      	ldr	r5, [pc, #40]	; (150c8 <nrf_cloud_get_single_cell_modem_info+0x38>)
   1509e:	f8b5 31c0 	ldrh.w	r3, [r5, #448]	; 0x1c0
   150a2:	6023      	str	r3, [r4, #0]
	cell_inf->mnc	= modem_inf.network.mnc.value;
   150a4:	f8b5 3230 	ldrh.w	r3, [r5, #560]	; 0x230
   150a8:	6063      	str	r3, [r4, #4]
	cell_inf->tac	= modem_inf.network.area_code.value;
   150aa:	f8b5 30e0 	ldrh.w	r3, [r5, #224]	; 0xe0
   150ae:	60e3      	str	r3, [r4, #12]
	cell_inf->id	= modem_inf.network.cellid_dec;
   150b0:	f505 63d2 	add.w	r3, r5, #1680	; 0x690
   150b4:	e9d3 0100 	ldrd	r0, r1, [r3]
   150b8:	f7f3 fcda 	bl	8a70 <__aeabi_d2uiz>
   150bc:	60a0      	str	r0, [r4, #8]
	cell_inf->rsrp	= modem_inf.network.rsrp.value;
   150be:	f8b5 3620 	ldrh.w	r3, [r5, #1568]	; 0x620
   150c2:	8563      	strh	r3, [r4, #42]	; 0x2a

	return 0;
}
   150c4:	4630      	mov	r0, r6
   150c6:	bd70      	pop	{r4, r5, r6, pc}
   150c8:	2000cf68 	.word	0x2000cf68

000150cc <nrf_cloud_cell_info_json_encode>:
{
   150cc:	b530      	push	{r4, r5, lr}
   150ce:	4605      	mov	r5, r0
	if (!cell_inf) {
   150d0:	460c      	mov	r4, r1
{
   150d2:	b08d      	sub	sp, #52	; 0x34
	if (!cell_inf) {
   150d4:	b921      	cbnz	r1, 150e0 <nrf_cloud_cell_info_json_encode+0x14>
		err = nrf_cloud_get_single_cell_modem_info(&cell);
   150d6:	4668      	mov	r0, sp
   150d8:	f7ff ffda 	bl	15090 <nrf_cloud_get_single_cell_modem_info>
		if (err) {
   150dc:	bbb0      	cbnz	r0, 1514c <nrf_cloud_cell_info_json_encode+0x80>
	return cell_info_json_encode(data_obj, (cell_inf ? cell_inf : &cell));
   150de:	466c      	mov	r4, sp
	if (json_add_num_cs(obj, NRF_CLOUD_JSON_MCC_KEY, cell_inf->mcc) ||
   150e0:	6820      	ldr	r0, [r4, #0]
   150e2:	f7f3 f983 	bl	83ec <__aeabi_i2d>
   150e6:	ec41 0b10 	vmov	d0, r0, r1
   150ea:	4628      	mov	r0, r5
   150ec:	4918      	ldr	r1, [pc, #96]	; (15150 <nrf_cloud_cell_info_json_encode+0x84>)
   150ee:	f00a ff43 	bl	1ff78 <json_add_num_cs>
   150f2:	bb48      	cbnz	r0, 15148 <nrf_cloud_cell_info_json_encode+0x7c>
	    json_add_num_cs(obj, NRF_CLOUD_JSON_MNC_KEY, cell_inf->mnc) ||
   150f4:	6860      	ldr	r0, [r4, #4]
   150f6:	f7f3 f979 	bl	83ec <__aeabi_i2d>
   150fa:	ec41 0b10 	vmov	d0, r0, r1
   150fe:	4628      	mov	r0, r5
   15100:	4914      	ldr	r1, [pc, #80]	; (15154 <nrf_cloud_cell_info_json_encode+0x88>)
   15102:	f00a ff39 	bl	1ff78 <json_add_num_cs>
	if (json_add_num_cs(obj, NRF_CLOUD_JSON_MCC_KEY, cell_inf->mcc) ||
   15106:	b9f8      	cbnz	r0, 15148 <nrf_cloud_cell_info_json_encode+0x7c>
	    json_add_num_cs(obj, NRF_CLOUD_JSON_AREA_CODE_KEY, cell_inf->tac) ||
   15108:	68e0      	ldr	r0, [r4, #12]
   1510a:	f7f3 f95f 	bl	83cc <__aeabi_ui2d>
   1510e:	ec41 0b10 	vmov	d0, r0, r1
   15112:	4628      	mov	r0, r5
   15114:	4910      	ldr	r1, [pc, #64]	; (15158 <nrf_cloud_cell_info_json_encode+0x8c>)
   15116:	f00a ff2f 	bl	1ff78 <json_add_num_cs>
	    json_add_num_cs(obj, NRF_CLOUD_JSON_MNC_KEY, cell_inf->mnc) ||
   1511a:	b9a8      	cbnz	r0, 15148 <nrf_cloud_cell_info_json_encode+0x7c>
	    json_add_num_cs(obj, NRF_CLOUD_JSON_CELL_ID_KEY, cell_inf->id) ||
   1511c:	68a0      	ldr	r0, [r4, #8]
   1511e:	f7f3 f955 	bl	83cc <__aeabi_ui2d>
   15122:	ec41 0b10 	vmov	d0, r0, r1
   15126:	4628      	mov	r0, r5
   15128:	490c      	ldr	r1, [pc, #48]	; (1515c <nrf_cloud_cell_info_json_encode+0x90>)
   1512a:	f00a ff25 	bl	1ff78 <json_add_num_cs>
	    json_add_num_cs(obj, NRF_CLOUD_JSON_AREA_CODE_KEY, cell_inf->tac) ||
   1512e:	b958      	cbnz	r0, 15148 <nrf_cloud_cell_info_json_encode+0x7c>
	    json_add_num_cs(obj, NRF_CLOUD_JSON_RSRP_KEY, RSRP_IDX_TO_DBM(cell_inf->rsrp))) {
   15130:	f9b4 002a 	ldrsh.w	r0, [r4, #42]	; 0x2a
   15134:	388c      	subs	r0, #140	; 0x8c
   15136:	f7f3 f959 	bl	83ec <__aeabi_i2d>
   1513a:	ec41 0b10 	vmov	d0, r0, r1
   1513e:	4628      	mov	r0, r5
   15140:	4907      	ldr	r1, [pc, #28]	; (15160 <nrf_cloud_cell_info_json_encode+0x94>)
   15142:	f00a ff19 	bl	1ff78 <json_add_num_cs>
	    json_add_num_cs(obj, NRF_CLOUD_JSON_CELL_ID_KEY, cell_inf->id) ||
   15146:	b108      	cbz	r0, 1514c <nrf_cloud_cell_info_json_encode+0x80>
		return -ENOMEM;
   15148:	f06f 000b 	mvn.w	r0, #11
}
   1514c:	b00d      	add	sp, #52	; 0x34
   1514e:	bd30      	pop	{r4, r5, pc}
   15150:	0002668b 	.word	0x0002668b
   15154:	00026692 	.word	0x00026692
   15158:	00026b44 	.word	0x00026b44
   1515c:	00026b40 	.word	0x00026b40
   15160:	00026586 	.word	0x00026586

00015164 <nrf_cloud_error_msg_decode>:

int nrf_cloud_error_msg_decode(const char *const buf,
			       const char *const app_id,
			       const char *const msg_type,
			       enum nrf_cloud_error * const err)
{
   15164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15166:	460e      	mov	r6, r1
   15168:	4617      	mov	r7, r2
   1516a:	461c      	mov	r4, r3
	if (!buf || !err) {
   1516c:	b318      	cbz	r0, 151b6 <nrf_cloud_error_msg_decode+0x52>
   1516e:	b313      	cbz	r3, 151b6 <nrf_cloud_error_msg_decode+0x52>
	}

	int ret;
	cJSON *root_obj;

	*err = NRF_CLOUD_ERROR_NONE;
   15170:	2300      	movs	r3, #0
   15172:	6023      	str	r3, [r4, #0]

	root_obj = cJSON_Parse(buf);
   15174:	f00b f819 	bl	201aa <cJSON_Parse>
	if (!root_obj) {
   15178:	4605      	mov	r5, r0
   1517a:	b1f8      	cbz	r0, 151bc <nrf_cloud_error_msg_decode+0x58>
		/* No JSON found, not an error message */
		return -ENODATA;
	}

	ret = get_error_code_value(root_obj, err);
   1517c:	4621      	mov	r1, r4
   1517e:	f7ff fef1 	bl	14f64 <get_error_code_value>
	if (ret) {
   15182:	4604      	mov	r4, r0
   15184:	b940      	cbnz	r0, 15198 <nrf_cloud_error_msg_decode+0x34>
		goto clean_up;
	}

	/* If provided, check for matching app id and msg type */
	if (msg_type &&
   15186:	b167      	cbz	r7, 151a2 <nrf_cloud_error_msg_decode+0x3e>
	    !json_item_string_exists(root_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY, msg_type)) {
   15188:	463a      	mov	r2, r7
   1518a:	4628      	mov	r0, r5
   1518c:	490d      	ldr	r1, [pc, #52]	; (151c4 <nrf_cloud_error_msg_decode+0x60>)
   1518e:	f00a ff00 	bl	1ff92 <json_item_string_exists>
	if (msg_type &&
   15192:	b930      	cbnz	r0, 151a2 <nrf_cloud_error_msg_decode+0x3e>
		ret = -ENOENT;
   15194:	f06f 0401 	mvn.w	r4, #1
		ret = -ENOENT;
		goto clean_up;
	}

clean_up:
	cJSON_Delete(root_obj);
   15198:	4628      	mov	r0, r5
   1519a:	f001 ff2d 	bl	16ff8 <cJSON_Delete>
	return ret;
}
   1519e:	4620      	mov	r0, r4
   151a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (app_id &&
   151a2:	2e00      	cmp	r6, #0
   151a4:	d0f8      	beq.n	15198 <nrf_cloud_error_msg_decode+0x34>
	    !json_item_string_exists(root_obj, NRF_CLOUD_JSON_APPID_KEY, app_id)) {
   151a6:	4632      	mov	r2, r6
   151a8:	4628      	mov	r0, r5
   151aa:	4907      	ldr	r1, [pc, #28]	; (151c8 <nrf_cloud_error_msg_decode+0x64>)
   151ac:	f00a fef1 	bl	1ff92 <json_item_string_exists>
	if (app_id &&
   151b0:	2800      	cmp	r0, #0
   151b2:	d1f1      	bne.n	15198 <nrf_cloud_error_msg_decode+0x34>
   151b4:	e7ee      	b.n	15194 <nrf_cloud_error_msg_decode+0x30>
		return -EINVAL;
   151b6:	f06f 0415 	mvn.w	r4, #21
   151ba:	e7f0      	b.n	1519e <nrf_cloud_error_msg_decode+0x3a>
		return -ENODATA;
   151bc:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   151c0:	e7ed      	b.n	1519e <nrf_cloud_error_msg_decode+0x3a>
   151c2:	bf00      	nop
   151c4:	00026c2b 	.word	0x00026c2b
   151c8:	00026c25 	.word	0x00026c25

000151cc <nrf_cloud_rest_error_decode>:

	return ret;
}

int nrf_cloud_rest_error_decode(const char *const buf, enum nrf_cloud_error *const err)
{
   151cc:	b570      	push	{r4, r5, r6, lr}
	int ret = -ENOMSG;
	cJSON *root_obj;
	cJSON *err_obj;
	char *msg = NULL;
   151ce:	2600      	movs	r6, #0
{
   151d0:	b086      	sub	sp, #24
   151d2:	460d      	mov	r5, r1
	char *msg = NULL;
   151d4:	9605      	str	r6, [sp, #20]

	if ((buf == NULL) || (err == NULL)) {
   151d6:	2800      	cmp	r0, #0
   151d8:	d03d      	beq.n	15256 <nrf_cloud_rest_error_decode+0x8a>
   151da:	2900      	cmp	r1, #0
   151dc:	d03b      	beq.n	15256 <nrf_cloud_rest_error_decode+0x8a>
		return -EINVAL;
	}

	*err = NRF_CLOUD_ERROR_NONE;
   151de:	600e      	str	r6, [r1, #0]

	root_obj = cJSON_Parse(buf);
   151e0:	f00a ffe3 	bl	201aa <cJSON_Parse>
	if (!root_obj) {
   151e4:	4604      	mov	r4, r0
   151e6:	2800      	cmp	r0, #0
   151e8:	d038      	beq.n	1525c <nrf_cloud_rest_error_decode+0x90>
		LOG_DBG("No JSON found in REST response");
		return ret;
	}

	/* Some responses are only an array of strings */
	if (cJSON_IsArray(root_obj) && (get_string_from_array(root_obj, 0, &msg) == 0)) {
   151ea:	f00b f86f 	bl	202cc <cJSON_IsArray>
   151ee:	b9b0      	cbnz	r0, 1521e <nrf_cloud_rest_error_decode+0x52>
		goto cleanup;
	}

	/* Check for a message string. Ignore return, just for debug printing */
	(void)get_string_from_obj(root_obj, NRF_CLOUD_REST_ERROR_MSG_KEY, &msg);
   151f0:	491c      	ldr	r1, [pc, #112]	; (15264 <nrf_cloud_rest_error_decode+0x98>)
   151f2:	aa05      	add	r2, sp, #20
   151f4:	4620      	mov	r0, r4
   151f6:	f00a ff11 	bl	2001c <get_string_from_obj>

	/* Get the error code */
	err_obj = cJSON_GetObjectItem(root_obj, NRF_CLOUD_REST_ERROR_CODE_KEY);
   151fa:	4620      	mov	r0, r4
   151fc:	491a      	ldr	r1, [pc, #104]	; (15268 <nrf_cloud_rest_error_decode+0x9c>)
   151fe:	f00a ffde 	bl	201be <cJSON_GetObjectItem>
   15202:	4606      	mov	r6, r0
	if (cJSON_IsNumber(err_obj)) {
   15204:	f00b f84d 	bl	202a2 <cJSON_IsNumber>
   15208:	b180      	cbz	r0, 1522c <nrf_cloud_rest_error_decode+0x60>
		ret = 0;
		*err = (enum nrf_cloud_error)cJSON_GetNumberValue(err_obj);
   1520a:	4630      	mov	r0, r6
   1520c:	f7f5 f910 	bl	a430 <cJSON_GetNumberValue>
   15210:	ec51 0b10 	vmov	r0, r1, d0
   15214:	f7f3 fc04 	bl	8a20 <__aeabi_d2iz>
   15218:	6028      	str	r0, [r5, #0]
		ret = 0;
   1521a:	2500      	movs	r5, #0
   1521c:	e008      	b.n	15230 <nrf_cloud_rest_error_decode+0x64>
	if (cJSON_IsArray(root_obj) && (get_string_from_array(root_obj, 0, &msg) == 0)) {
   1521e:	4631      	mov	r1, r6
   15220:	4620      	mov	r0, r4
   15222:	aa05      	add	r2, sp, #20
   15224:	f00a feeb 	bl	1fffe <get_string_from_array>
   15228:	2800      	cmp	r0, #0
   1522a:	d1e1      	bne.n	151f0 <nrf_cloud_rest_error_decode+0x24>
	int ret = -ENOMSG;
   1522c:	f06f 0522 	mvn.w	r5, #34	; 0x22
	}

cleanup:
	if (msg) {
   15230:	9b05      	ldr	r3, [sp, #20]
   15232:	b153      	cbz	r3, 1524a <nrf_cloud_rest_error_decode+0x7e>
		LOG_ERR("REST error msg: %s", msg);
   15234:	9303      	str	r3, [sp, #12]
   15236:	4b0d      	ldr	r3, [pc, #52]	; (1526c <nrf_cloud_rest_error_decode+0xa0>)
   15238:	2201      	movs	r2, #1
   1523a:	9302      	str	r3, [sp, #8]
   1523c:	2300      	movs	r3, #0
   1523e:	490c      	ldr	r1, [pc, #48]	; (15270 <nrf_cloud_rest_error_decode+0xa4>)
   15240:	4618      	mov	r0, r3
   15242:	e9cd 3300 	strd	r3, r3, [sp]
   15246:	f00a febd 	bl	1ffc4 <z_log_msg_runtime_create.constprop.0>
	}

	cJSON_Delete(root_obj);
   1524a:	4620      	mov	r0, r4
   1524c:	f001 fed4 	bl	16ff8 <cJSON_Delete>

	return ret;
}
   15250:	4628      	mov	r0, r5
   15252:	b006      	add	sp, #24
   15254:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   15256:	f06f 0515 	mvn.w	r5, #21
   1525a:	e7f9      	b.n	15250 <nrf_cloud_rest_error_decode+0x84>
		return ret;
   1525c:	f06f 0522 	mvn.w	r5, #34	; 0x22
   15260:	e7f6      	b.n	15250 <nrf_cloud_rest_error_decode+0x84>
   15262:	bf00      	nop
   15264:	000248d4 	.word	0x000248d4
   15268:	0002492c 	.word	0x0002492c
   1526c:	00026c37 	.word	0x00026c37
   15270:	00023004 	.word	0x00023004

00015274 <nrf_cloud_agps_req_data_json_encode>:
					const size_t type_count,
					const struct lte_lc_cell * const cell_inf,
					const bool fetch_cell_inf,
					const bool filtered_ephem, const uint8_t mask_angle,
					cJSON * const data_obj_out)
{
   15274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15278:	b085      	sub	sp, #20
   1527a:	461c      	mov	r4, r3
   1527c:	460f      	mov	r7, r1
   1527e:	4616      	mov	r6, r2
	if (!types || !type_count || !data_obj_out) {
   15280:	4680      	mov	r8, r0
{
   15282:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   15286:	9d10      	ldr	r5, [sp, #64]	; 0x40
	if (!types || !type_count || !data_obj_out) {
   15288:	2800      	cmp	r0, #0
   1528a:	d079      	beq.n	15380 <nrf_cloud_agps_req_data_json_encode+0x10c>
   1528c:	2900      	cmp	r1, #0
   1528e:	d077      	beq.n	15380 <nrf_cloud_agps_req_data_json_encode+0x10c>
   15290:	2d00      	cmp	r5, #0
   15292:	d075      	beq.n	15380 <nrf_cloud_agps_req_data_json_encode+0x10c>
		return -EINVAL;
	}

	int err;

	if (filtered_ephem) {
   15294:	b99b      	cbnz	r3, 152be <nrf_cloud_agps_req_data_json_encode+0x4a>
		LOG_DBG("Requesting filtered ephemerides with elevation mask angle = %u degrees",
			mask_angle);
	}

	/* Add the cell info if provided or fetch flag set */
	if (cell_inf || fetch_cell_inf) {
   15296:	b906      	cbnz	r6, 1529a <nrf_cloud_agps_req_data_json_encode+0x26>
   15298:	b394      	cbz	r4, 15300 <nrf_cloud_agps_req_data_json_encode+0x8c>
		err = nrf_cloud_cell_info_json_encode(data_obj_out, cell_inf);
   1529a:	4631      	mov	r1, r6
   1529c:	4628      	mov	r0, r5
   1529e:	f7ff ff15 	bl	150cc <nrf_cloud_cell_info_json_encode>
		if (err) {
   152a2:	4604      	mov	r4, r0
   152a4:	b360      	cbz	r0, 15300 <nrf_cloud_agps_req_data_json_encode+0x8c>
			LOG_ERR("Failed to add cellular network info to A-GPS request: %d", err);
   152a6:	4b38      	ldr	r3, [pc, #224]	; (15388 <nrf_cloud_agps_req_data_json_encode+0x114>)
   152a8:	9003      	str	r0, [sp, #12]
	}

	/* Add the requested types */
	err = agps_types_array_json_encode(data_obj_out, types, type_count);
	if (err) {
		LOG_ERR("Failed to add types array to A-GPS request %d", err);
   152aa:	9302      	str	r3, [sp, #8]
   152ac:	2300      	movs	r3, #0
   152ae:	2201      	movs	r2, #1
   152b0:	4618      	mov	r0, r3
   152b2:	e9cd 3300 	strd	r3, r3, [sp]
   152b6:	4935      	ldr	r1, [pc, #212]	; (1538c <nrf_cloud_agps_req_data_json_encode+0x118>)
   152b8:	f00a fe84 	bl	1ffc4 <z_log_msg_runtime_create.constprop.0>
		goto cleanup;
   152bc:	e007      	b.n	152ce <nrf_cloud_agps_req_data_json_encode+0x5a>
		if ((json_add_bool_cs(data_obj_out, NRF_CLOUD_JSON_FILTERED_KEY, true)) ||
   152be:	2201      	movs	r2, #1
   152c0:	4628      	mov	r0, r5
   152c2:	4933      	ldr	r1, [pc, #204]	; (15390 <nrf_cloud_agps_req_data_json_encode+0x11c>)
   152c4:	f00a fe8d 	bl	1ffe2 <json_add_bool_cs>
   152c8:	b168      	cbz	r0, 152e6 <nrf_cloud_agps_req_data_json_encode+0x72>
			err = -ENOMEM;
   152ca:	f06f 040b 	mvn.w	r4, #11

	return 0;

cleanup:
	/* On failure, remove any items added to the provided object */
	cJSON_DeleteItemFromObject(data_obj_out, NRF_CLOUD_JSON_FILTERED_KEY);
   152ce:	4628      	mov	r0, r5
   152d0:	492f      	ldr	r1, [pc, #188]	; (15390 <nrf_cloud_agps_req_data_json_encode+0x11c>)
   152d2:	f00a ffa3 	bl	2021c <cJSON_DeleteItemFromObject>
	cJSON_DeleteItemFromObject(data_obj_out, NRF_CLOUD_JSON_KEY_ELEVATION_MASK);
   152d6:	4628      	mov	r0, r5
   152d8:	492e      	ldr	r1, [pc, #184]	; (15394 <nrf_cloud_agps_req_data_json_encode+0x120>)
   152da:	f00a ff9f 	bl	2021c <cJSON_DeleteItemFromObject>
	return err;
}
   152de:	4620      	mov	r0, r4
   152e0:	b005      	add	sp, #20
   152e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (json_add_num_cs(data_obj_out, NRF_CLOUD_JSON_KEY_ELEVATION_MASK,
   152e6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   152ea:	f7f3 f86f 	bl	83cc <__aeabi_ui2d>
   152ee:	ec41 0b10 	vmov	d0, r0, r1
   152f2:	4628      	mov	r0, r5
   152f4:	4927      	ldr	r1, [pc, #156]	; (15394 <nrf_cloud_agps_req_data_json_encode+0x120>)
   152f6:	f00a fe3f 	bl	1ff78 <json_add_num_cs>
		if ((json_add_bool_cs(data_obj_out, NRF_CLOUD_JSON_FILTERED_KEY, true)) ||
   152fa:	2800      	cmp	r0, #0
   152fc:	d0cb      	beq.n	15296 <nrf_cloud_agps_req_data_json_encode+0x22>
   152fe:	e7e4      	b.n	152ca <nrf_cloud_agps_req_data_json_encode+0x56>
	cJSON *array = cJSON_CreateArray();
   15300:	f001 ff1a 	bl	17138 <cJSON_CreateArray>
	if (!array) {
   15304:	4606      	mov	r6, r0
   15306:	b3c0      	cbz	r0, 1537a <nrf_cloud_agps_req_data_json_encode+0x106>
   15308:	4644      	mov	r4, r8
			LOG_INF("Ignoring unknown A-GPS type: %d", types[i]);
   1530a:	f04f 0900 	mov.w	r9, #0
   1530e:	f8df a090 	ldr.w	sl, [pc, #144]	; 153a0 <nrf_cloud_agps_req_data_json_encode+0x12c>
   15312:	f8df b078 	ldr.w	fp, [pc, #120]	; 1538c <nrf_cloud_agps_req_data_json_encode+0x118>
   15316:	4447      	add	r7, r8
		if ((types[i] <= NRF_CLOUD_AGPS__TYPE_INVALID) ||
   15318:	f814 0b01 	ldrb.w	r0, [r4], #1
   1531c:	1e43      	subs	r3, r0, #1
   1531e:	2b08      	cmp	r3, #8
   15320:	d913      	bls.n	1534a <nrf_cloud_agps_req_data_json_encode+0xd6>
			LOG_INF("Ignoring unknown A-GPS type: %d", types[i]);
   15322:	2300      	movs	r3, #0
   15324:	e9cd a002 	strd	sl, r0, [sp, #8]
   15328:	2203      	movs	r2, #3
   1532a:	4659      	mov	r1, fp
   1532c:	4618      	mov	r0, r3
   1532e:	e9cd 9900 	strd	r9, r9, [sp]
   15332:	f00a fe47 	bl	1ffc4 <z_log_msg_runtime_create.constprop.0>
	for (size_t i = 0; i < type_count; ++i) {
   15336:	42a7      	cmp	r7, r4
   15338:	d1ee      	bne.n	15318 <nrf_cloud_agps_req_data_json_encode+0xa4>
		err = cJSON_AddItemToObjectCS(obj, NRF_CLOUD_JSON_KEY_AGPS_TYPES, array) ? 0 : -EIO;
   1533a:	4632      	mov	r2, r6
   1533c:	4628      	mov	r0, r5
   1533e:	4916      	ldr	r1, [pc, #88]	; (15398 <nrf_cloud_agps_req_data_json_encode+0x124>)
   15340:	f00a ff42 	bl	201c8 <cJSON_AddItemToObjectCS>
   15344:	b188      	cbz	r0, 1536a <nrf_cloud_agps_req_data_json_encode+0xf6>
	return 0;
   15346:	2400      	movs	r4, #0
   15348:	e7c9      	b.n	152de <nrf_cloud_agps_req_data_json_encode+0x6a>
		cJSON *num = cJSON_CreateNumber(types[i]);
   1534a:	f7f3 f83f 	bl	83cc <__aeabi_ui2d>
   1534e:	ec41 0b10 	vmov	d0, r0, r1
   15352:	f7f5 f839 	bl	a3c8 <cJSON_CreateNumber>
   15356:	4680      	mov	r8, r0
		if (!cJSON_AddItemToArray(array, num)) {
   15358:	4601      	mov	r1, r0
   1535a:	4630      	mov	r0, r6
   1535c:	f00a ff32 	bl	201c4 <cJSON_AddItemToArray>
   15360:	2800      	cmp	r0, #0
   15362:	d1e8      	bne.n	15336 <nrf_cloud_agps_req_data_json_encode+0xc2>
			cJSON_Delete(num);
   15364:	4640      	mov	r0, r8
   15366:	f001 fe47 	bl	16ff8 <cJSON_Delete>
		cJSON_Delete(array);
   1536a:	4630      	mov	r0, r6
   1536c:	f001 fe44 	bl	16ff8 <cJSON_Delete>
   15370:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("Failed to add types array to A-GPS request %d", err);
   15374:	4b09      	ldr	r3, [pc, #36]	; (1539c <nrf_cloud_agps_req_data_json_encode+0x128>)
   15376:	9403      	str	r4, [sp, #12]
   15378:	e797      	b.n	152aa <nrf_cloud_agps_req_data_json_encode+0x36>
		return -ENOMEM;
   1537a:	f06f 040b 	mvn.w	r4, #11
   1537e:	e7f9      	b.n	15374 <nrf_cloud_agps_req_data_json_encode+0x100>
		return -EINVAL;
   15380:	f06f 0415 	mvn.w	r4, #21
   15384:	e7ab      	b.n	152de <nrf_cloud_agps_req_data_json_encode+0x6a>
   15386:	bf00      	nop
   15388:	00026c53 	.word	0x00026c53
   1538c:	00023004 	.word	0x00023004
   15390:	00026c4a 	.word	0x00026c4a
   15394:	00023c86 	.word	0x00023c86
   15398:	00026cac 	.word	0x00026cac
   1539c:	00026cb2 	.word	0x00026cb2
   153a0:	00026c8c 	.word	0x00026c8c

000153a4 <nrf_cloud_agps_type_array_get>:
	return err;
}

int nrf_cloud_agps_type_array_get(const struct nrf_modem_gnss_agps_data_frame * const request,
				  enum nrf_cloud_agps_type *array, const size_t array_size)
{
   153a4:	b530      	push	{r4, r5, lr}
   153a6:	4613      	mov	r3, r2
   153a8:	460c      	mov	r4, r1
	if (!request || !array || !array_size) {
   153aa:	4605      	mov	r5, r0
{
   153ac:	b087      	sub	sp, #28
	if (!request || !array || !array_size) {
   153ae:	2800      	cmp	r0, #0
   153b0:	d05c      	beq.n	1546c <nrf_cloud_agps_type_array_get+0xc8>
   153b2:	2900      	cmp	r1, #0
   153b4:	d05a      	beq.n	1546c <nrf_cloud_agps_type_array_get+0xc8>
   153b6:	2a00      	cmp	r2, #0
   153b8:	d058      	beq.n	1546c <nrf_cloud_agps_type_array_get+0xc8>
		return -EINVAL;
	}
	if (array_size < NRF_CLOUD_AGPS__LAST) {
   153ba:	2a08      	cmp	r2, #8
   153bc:	d810      	bhi.n	153e0 <nrf_cloud_agps_type_array_get+0x3c>
		LOG_ERR("Array size (%d) too small, must be >= %d",
   153be:	2209      	movs	r2, #9
   153c0:	e9cd 3203 	strd	r3, r2, [sp, #12]
   153c4:	4b2b      	ldr	r3, [pc, #172]	; (15474 <nrf_cloud_agps_type_array_get+0xd0>)
   153c6:	2201      	movs	r2, #1
   153c8:	9302      	str	r3, [sp, #8]
   153ca:	2300      	movs	r3, #0
   153cc:	492a      	ldr	r1, [pc, #168]	; (15478 <nrf_cloud_agps_type_array_get+0xd4>)
   153ce:	4618      	mov	r0, r3
   153d0:	e9cd 3300 	strd	r3, r3, [sp]
   153d4:	f00a fdf6 	bl	1ffc4 <z_log_msg_runtime_create.constprop.0>
			array_size, NRF_CLOUD_AGPS__LAST);
		return -ERANGE;
   153d8:	f06f 0021 	mvn.w	r0, #33	; 0x21
	if (cnt == 0) {
		return -ENODATA;
	}

	return cnt;
}
   153dc:	b007      	add	sp, #28
   153de:	bd30      	pop	{r4, r5, pc}
__ssp_bos_icheck3(memset, void *, int)
   153e0:	2100      	movs	r1, #0
   153e2:	4620      	mov	r0, r4
   153e4:	f00c fc6f 	bl	21cc6 <memset>
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_GPS_UTC_REQUEST) {
   153e8:	68ab      	ldr	r3, [r5, #8]
   153ea:	f013 0001 	ands.w	r0, r3, #1
		array[cnt++] = NRF_CLOUD_AGPS_UTC_PARAMETERS;
   153ee:	bf1c      	itt	ne
   153f0:	2001      	movne	r0, #1
   153f2:	7020      	strbne	r0, [r4, #0]
	if (request->sv_mask_ephe) {
   153f4:	682b      	ldr	r3, [r5, #0]
   153f6:	b113      	cbz	r3, 153fe <nrf_cloud_agps_type_array_get+0x5a>
		array[cnt++] = NRF_CLOUD_AGPS_EPHEMERIDES;
   153f8:	2302      	movs	r3, #2
   153fa:	5423      	strb	r3, [r4, r0]
   153fc:	3001      	adds	r0, #1
	if (request->sv_mask_alm) {
   153fe:	686b      	ldr	r3, [r5, #4]
   15400:	b113      	cbz	r3, 15408 <nrf_cloud_agps_type_array_get+0x64>
		array[cnt++] = NRF_CLOUD_AGPS_ALMANAC;
   15402:	2303      	movs	r3, #3
   15404:	5423      	strb	r3, [r4, r0]
   15406:	3001      	adds	r0, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_KLOBUCHAR_REQUEST) {
   15408:	68ab      	ldr	r3, [r5, #8]
   1540a:	079b      	lsls	r3, r3, #30
		array[cnt++] = NRF_CLOUD_AGPS_KLOBUCHAR_CORRECTION;
   1540c:	bf44      	itt	mi
   1540e:	2304      	movmi	r3, #4
   15410:	5423      	strbmi	r3, [r4, r0]
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_NEQUICK_REQUEST) {
   15412:	68ab      	ldr	r3, [r5, #8]
		array[cnt++] = NRF_CLOUD_AGPS_KLOBUCHAR_CORRECTION;
   15414:	bf48      	it	mi
   15416:	3001      	addmi	r0, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_NEQUICK_REQUEST) {
   15418:	0759      	lsls	r1, r3, #29
		array[cnt++] = NRF_CLOUD_AGPS_NEQUICK_CORRECTION;
   1541a:	bf44      	itt	mi
   1541c:	2305      	movmi	r3, #5
   1541e:	5423      	strbmi	r3, [r4, r0]
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   15420:	68ab      	ldr	r3, [r5, #8]
		array[cnt++] = NRF_CLOUD_AGPS_NEQUICK_CORRECTION;
   15422:	bf48      	it	mi
   15424:	3001      	addmi	r0, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   15426:	071a      	lsls	r2, r3, #28
   15428:	d50f      	bpl.n	1544a <nrf_cloud_agps_type_array_get+0xa6>
		array[cnt++] = NRF_CLOUD_AGPS_GPS_TOWS;
   1542a:	2206      	movs	r2, #6
   1542c:	5422      	strb	r2, [r4, r0]
		array[cnt++] = NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK;
   1542e:	2207      	movs	r2, #7
		array[cnt++] = NRF_CLOUD_AGPS_GPS_TOWS;
   15430:	1c43      	adds	r3, r0, #1
		array[cnt++] = NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK;
   15432:	54e2      	strb	r2, [r4, r3]
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST) {
   15434:	68ab      	ldr	r3, [r5, #8]
		array[cnt++] = NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK;
   15436:	3002      	adds	r0, #2
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST) {
   15438:	06d9      	lsls	r1, r3, #27
   1543a:	d408      	bmi.n	1544e <nrf_cloud_agps_type_array_get+0xaa>
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST) {
   1543c:	f013 0f20 	tst.w	r3, #32
   15440:	d0cc      	beq.n	153dc <nrf_cloud_agps_type_array_get+0x38>
		array[cnt++] = NRF_CLOUD_AGPS_INTEGRITY;
   15442:	2309      	movs	r3, #9
   15444:	5423      	strb	r3, [r4, r0]
   15446:	3001      	adds	r0, #1
   15448:	e7c8      	b.n	153dc <nrf_cloud_agps_type_array_get+0x38>
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST) {
   1544a:	06da      	lsls	r2, r3, #27
   1544c:	d507      	bpl.n	1545e <nrf_cloud_agps_type_array_get+0xba>
		array[cnt++] = NRF_CLOUD_AGPS_LOCATION;
   1544e:	2208      	movs	r2, #8
   15450:	5422      	strb	r2, [r4, r0]
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST) {
   15452:	68aa      	ldr	r2, [r5, #8]
		array[cnt++] = NRF_CLOUD_AGPS_LOCATION;
   15454:	1c43      	adds	r3, r0, #1
   15456:	4618      	mov	r0, r3
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST) {
   15458:	f012 0f20 	tst.w	r2, #32
   1545c:	e7f0      	b.n	15440 <nrf_cloud_agps_type_array_get+0x9c>
   1545e:	069b      	lsls	r3, r3, #26
   15460:	d4ef      	bmi.n	15442 <nrf_cloud_agps_type_array_get+0x9e>
		return -ENODATA;
   15462:	2800      	cmp	r0, #0
   15464:	bf08      	it	eq
   15466:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
   1546a:	e7b7      	b.n	153dc <nrf_cloud_agps_type_array_get+0x38>
		return -EINVAL;
   1546c:	f06f 0015 	mvn.w	r0, #21
   15470:	e7b4      	b.n	153dc <nrf_cloud_agps_type_array_get+0x38>
   15472:	bf00      	nop
   15474:	00026ce0 	.word	0x00026ce0
   15478:	00023004 	.word	0x00023004

0001547c <nrf_cloud_json_to_url_params_convert>:
}
#endif

int nrf_cloud_json_to_url_params_convert(char *const buf, const size_t buf_size,
					 const cJSON *const obj)
{
   1547c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15480:	4607      	mov	r7, r0
   15482:	4689      	mov	r9, r1
	if (!obj || !buf || !buf_size) {
   15484:	2a00      	cmp	r2, #0
   15486:	f000 8093 	beq.w	155b0 <nrf_cloud_json_to_url_params_convert+0x134>
   1548a:	2800      	cmp	r0, #0
   1548c:	f000 8090 	beq.w	155b0 <nrf_cloud_json_to_url_params_convert+0x134>
   15490:	2900      	cmp	r1, #0
   15492:	f000 808d 	beq.w	155b0 <nrf_cloud_json_to_url_params_convert+0x134>
	int ret = 0;
	size_t pos = 0;
	size_t remain = buf_size;
	cJSON *child = NULL;

	cJSON_ArrayForEach(child, obj) {
   15496:	460c      	mov	r4, r1
	size_t pos = 0;
   15498:	2500      	movs	r5, #0
	cJSON_ArrayForEach(child, obj) {
   1549a:	6896      	ldr	r6, [r2, #8]
   1549c:	b92e      	cbnz	r6, 154aa <nrf_cloud_json_to_url_params_convert+0x2e>
	/* Return an error if no data was added */
	if (remain == buf_size) {
		return -ENOMSG;
	}

	return 0;
   1549e:	454c      	cmp	r4, r9
   154a0:	bf0c      	ite	eq
   154a2:	f06f 0022 	mvneq.w	r0, #34	; 0x22
   154a6:	2000      	movne	r0, #0
   154a8:	e043      	b.n	15532 <nrf_cloud_json_to_url_params_convert+0xb6>
		char prefix = ((pos == 0) ? '?' : '&');
   154aa:	2d00      	cmp	r5, #0
		if (cJSON_IsBool(child)) {
   154ac:	4630      	mov	r0, r6
		char prefix = ((pos == 0) ? '?' : '&');
   154ae:	bf0c      	ite	eq
   154b0:	f04f 0b3f 	moveq.w	fp, #63	; 0x3f
   154b4:	f04f 0b26 	movne.w	fp, #38	; 0x26
		if (cJSON_IsBool(child)) {
   154b8:	f00a fee6 	bl	20288 <cJSON_IsBool>
   154bc:	b1d0      	cbz	r0, 154f4 <nrf_cloud_json_to_url_params_convert+0x78>
				       cJSON_IsTrue(child) ? "true" : "false");
   154be:	4630      	mov	r0, r6
			ret = snprintk(&buf[pos], remain, "%c%s=%s", prefix, child->string,
   154c0:	f8d6 a020 	ldr.w	sl, [r6, #32]
				       cJSON_IsTrue(child) ? "true" : "false");
   154c4:	f00a feda 	bl	2027c <cJSON_IsTrue>
			ret = snprintk(&buf[pos], remain, "%c%s=%s", prefix, child->string,
   154c8:	4a3b      	ldr	r2, [pc, #236]	; (155b8 <nrf_cloud_json_to_url_params_convert+0x13c>)
   154ca:	4b3c      	ldr	r3, [pc, #240]	; (155bc <nrf_cloud_json_to_url_params_convert+0x140>)
   154cc:	eb07 0805 	add.w	r8, r7, r5
   154d0:	2800      	cmp	r0, #0
   154d2:	bf08      	it	eq
   154d4:	4613      	moveq	r3, r2
   154d6:	4621      	mov	r1, r4
   154d8:	e9cd a300 	strd	sl, r3, [sp]
   154dc:	4640      	mov	r0, r8
   154de:	465b      	mov	r3, fp
   154e0:	4a37      	ldr	r2, [pc, #220]	; (155c0 <nrf_cloud_json_to_url_params_convert+0x144>)
			ret = snprintk(&buf[pos], remain, "%c%s=%s", prefix, child->string,
   154e2:	f008 fe08 	bl	1e0f6 <snprintk>
		if ((ret > 0) && (ret < remain)) {
   154e6:	2800      	cmp	r0, #0
   154e8:	dd5e      	ble.n	155a8 <nrf_cloud_json_to_url_params_convert+0x12c>
   154ea:	42a0      	cmp	r0, r4
   154ec:	d23d      	bcs.n	1556a <nrf_cloud_json_to_url_params_convert+0xee>
			remain -= ret;
   154ee:	1a24      	subs	r4, r4, r0
			pos += ret;
   154f0:	4405      	add	r5, r0
   154f2:	e026      	b.n	15542 <nrf_cloud_json_to_url_params_convert+0xc6>
		} else if (cJSON_IsNumber(child)) {
   154f4:	4630      	mov	r0, r6
   154f6:	f00a fed4 	bl	202a2 <cJSON_IsNumber>
   154fa:	b140      	cbz	r0, 1550e <nrf_cloud_json_to_url_params_convert+0x92>
			ret = snprintk(&buf[pos], remain, "%c%s=%d", prefix, child->string,
   154fc:	6973      	ldr	r3, [r6, #20]
   154fe:	4a31      	ldr	r2, [pc, #196]	; (155c4 <nrf_cloud_json_to_url_params_convert+0x148>)
   15500:	9301      	str	r3, [sp, #4]
   15502:	6a33      	ldr	r3, [r6, #32]
   15504:	9300      	str	r3, [sp, #0]
   15506:	465b      	mov	r3, fp
			ret = snprintk(&buf[pos], remain, "%c%s=%s", prefix, child->string,
   15508:	4621      	mov	r1, r4
   1550a:	1978      	adds	r0, r7, r5
   1550c:	e7e9      	b.n	154e2 <nrf_cloud_json_to_url_params_convert+0x66>
		} else if (cJSON_IsString(child)) {
   1550e:	4630      	mov	r0, r6
   15510:	f00a fece 	bl	202b0 <cJSON_IsString>
   15514:	4680      	mov	r8, r0
   15516:	b130      	cbz	r0, 15526 <nrf_cloud_json_to_url_params_convert+0xaa>
			ret = snprintk(&buf[pos], remain, "%c%s=%s", prefix, child->string,
   15518:	6933      	ldr	r3, [r6, #16]
   1551a:	4a29      	ldr	r2, [pc, #164]	; (155c0 <nrf_cloud_json_to_url_params_convert+0x144>)
   1551c:	9301      	str	r3, [sp, #4]
   1551e:	6a33      	ldr	r3, [r6, #32]
   15520:	9300      	str	r3, [sp, #0]
   15522:	465b      	mov	r3, fp
   15524:	e7f0      	b.n	15508 <nrf_cloud_json_to_url_params_convert+0x8c>
		} else if (cJSON_IsArray(child)) {
   15526:	4630      	mov	r0, r6
   15528:	f00a fed0 	bl	202cc <cJSON_IsArray>
   1552c:	b920      	cbnz	r0, 15538 <nrf_cloud_json_to_url_params_convert+0xbc>
					return -ENOTSUP;
   1552e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   15532:	b003      	add	sp, #12
   15534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cJSON_ArrayForEach(array_item, child) {
   15538:	f8d6 a008 	ldr.w	sl, [r6, #8]
   1553c:	f1ba 0f00 	cmp.w	sl, #0
   15540:	d101      	bne.n	15546 <nrf_cloud_json_to_url_params_convert+0xca>
	cJSON_ArrayForEach(child, obj) {
   15542:	6836      	ldr	r6, [r6, #0]
   15544:	e7aa      	b.n	1549c <nrf_cloud_json_to_url_params_convert+0x20>
				if (!cJSON_IsNumber(array_item)) {
   15546:	4650      	mov	r0, sl
   15548:	f00a feab 	bl	202a2 <cJSON_IsNumber>
   1554c:	2800      	cmp	r0, #0
   1554e:	d0ee      	beq.n	1552e <nrf_cloud_json_to_url_params_convert+0xb2>
					ret = snprintk(&buf[pos], remain, "%c%s=",
   15550:	1978      	adds	r0, r7, r5
				if (cnt == 0) {
   15552:	f1b8 0f00 	cmp.w	r8, #0
   15556:	d10b      	bne.n	15570 <nrf_cloud_json_to_url_params_convert+0xf4>
					ret = snprintk(&buf[pos], remain, "%c%s=",
   15558:	6a33      	ldr	r3, [r6, #32]
   1555a:	4621      	mov	r1, r4
   1555c:	9300      	str	r3, [sp, #0]
   1555e:	4a1a      	ldr	r2, [pc, #104]	; (155c8 <nrf_cloud_json_to_url_params_convert+0x14c>)
   15560:	465b      	mov	r3, fp
   15562:	f008 fdc8 	bl	1e0f6 <snprintk>
				if ((ret > 0) && (ret < remain)) {
   15566:	2800      	cmp	r0, #0
   15568:	dc08      	bgt.n	1557c <nrf_cloud_json_to_url_params_convert+0x100>
					return -E2BIG;
   1556a:	f06f 0006 	mvn.w	r0, #6
   1556e:	e7e0      	b.n	15532 <nrf_cloud_json_to_url_params_convert+0xb6>
					ret = snprintk(&buf[pos], remain, "%c", ',');
   15570:	232c      	movs	r3, #44	; 0x2c
   15572:	4621      	mov	r1, r4
   15574:	4a15      	ldr	r2, [pc, #84]	; (155cc <nrf_cloud_json_to_url_params_convert+0x150>)
   15576:	f008 fdbe 	bl	1e0f6 <snprintk>
   1557a:	e7f4      	b.n	15566 <nrf_cloud_json_to_url_params_convert+0xea>
				if ((ret > 0) && (ret < remain)) {
   1557c:	42a0      	cmp	r0, r4
   1557e:	d2f4      	bcs.n	1556a <nrf_cloud_json_to_url_params_convert+0xee>
					remain -= ret;
   15580:	1a24      	subs	r4, r4, r0
					pos += ret;
   15582:	4405      	add	r5, r0
				ret = snprintk(&buf[pos], remain, "%d", array_item->valueint);
   15584:	4621      	mov	r1, r4
   15586:	f8da 3014 	ldr.w	r3, [sl, #20]
   1558a:	4a11      	ldr	r2, [pc, #68]	; (155d0 <nrf_cloud_json_to_url_params_convert+0x154>)
   1558c:	1978      	adds	r0, r7, r5
   1558e:	f008 fdb2 	bl	1e0f6 <snprintk>
				if ((ret > 0) && (ret < remain)) {
   15592:	2800      	cmp	r0, #0
   15594:	dde9      	ble.n	1556a <nrf_cloud_json_to_url_params_convert+0xee>
   15596:	42a0      	cmp	r0, r4
   15598:	d2e7      	bcs.n	1556a <nrf_cloud_json_to_url_params_convert+0xee>
			cJSON_ArrayForEach(array_item, child) {
   1559a:	f8da a000 	ldr.w	sl, [sl]
					remain -= ret;
   1559e:	1a24      	subs	r4, r4, r0
					pos += ret;
   155a0:	4405      	add	r5, r0
					++cnt;
   155a2:	f108 0801 	add.w	r8, r8, #1
			cJSON_ArrayForEach(array_item, child) {
   155a6:	e7c9      	b.n	1553c <nrf_cloud_json_to_url_params_convert+0xc0>
		} else if (ret == 0) {
   155a8:	d1df      	bne.n	1556a <nrf_cloud_json_to_url_params_convert+0xee>
			return -EIO;
   155aa:	f06f 0004 	mvn.w	r0, #4
   155ae:	e7c0      	b.n	15532 <nrf_cloud_json_to_url_params_convert+0xb6>
		return -EINVAL;
   155b0:	f06f 0015 	mvn.w	r0, #21
   155b4:	e7bd      	b.n	15532 <nrf_cloud_json_to_url_params_convert+0xb6>
   155b6:	bf00      	nop
   155b8:	00026d0e 	.word	0x00026d0e
   155bc:	00026d09 	.word	0x00026d09
   155c0:	00026d14 	.word	0x00026d14
   155c4:	00026d1c 	.word	0x00026d1c
   155c8:	00026d24 	.word	0x00026d24
   155cc:	00025758 	.word	0x00025758
   155d0:	00026a28 	.word	0x00026a28

000155d4 <nrf_cloud_malloc>:
	return used_hooks.calloc_fn(count, size);
}

void *nrf_cloud_malloc(size_t size)
{
	return used_hooks.malloc_fn(size);
   155d4:	4b01      	ldr	r3, [pc, #4]	; (155dc <nrf_cloud_malloc+0x8>)
   155d6:	681b      	ldr	r3, [r3, #0]
   155d8:	4718      	bx	r3
   155da:	bf00      	nop
   155dc:	2000c638 	.word	0x2000c638

000155e0 <nrf_cloud_free>:
}

void nrf_cloud_free(void *ptr)
{
	used_hooks.free_fn(ptr);
   155e0:	4b01      	ldr	r3, [pc, #4]	; (155e8 <nrf_cloud_free+0x8>)
   155e2:	689b      	ldr	r3, [r3, #8]
   155e4:	4718      	bx	r3
   155e6:	bf00      	nop
   155e8:	2000c638 	.word	0x2000c638

000155ec <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   155ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   155ee:	ab0b      	add	r3, sp, #44	; 0x2c
   155f0:	9305      	str	r3, [sp, #20]
   155f2:	9303      	str	r3, [sp, #12]
   155f4:	4b05      	ldr	r3, [pc, #20]	; (1560c <z_log_msg_runtime_create.constprop.0+0x20>)
   155f6:	2201      	movs	r2, #1
   155f8:	9302      	str	r3, [sp, #8]
   155fa:	2300      	movs	r3, #0
   155fc:	4618      	mov	r0, r3
   155fe:	e9cd 3300 	strd	r3, r3, [sp]
   15602:	f7f7 fceb 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   15606:	b007      	add	sp, #28
   15608:	f85d fb04 	ldr.w	pc, [sp], #4
   1560c:	00026dbd 	.word	0x00026dbd

00015610 <nrf_cloud_configured_client_id_get>:
	return 0;
#endif
}

int nrf_cloud_configured_client_id_get(char * const buf, const size_t buf_sz)
{
   15610:	b5f0      	push	{r4, r5, r6, r7, lr}
   15612:	460d      	mov	r5, r1
	if (!buf || !buf_sz) {
   15614:	4606      	mov	r6, r0
{
   15616:	b08b      	sub	sp, #44	; 0x2c
	if (!buf || !buf_sz) {
   15618:	b340      	cbz	r0, 1566c <nrf_cloud_configured_client_id_get+0x5c>
   1561a:	b339      	cbz	r1, 1566c <nrf_cloud_configured_client_id_get+0x5c>
	int print_ret;

#if defined(CONFIG_NRF_CLOUD_CLIENT_ID_SRC_IMEI)
	char imei_buf[CGSN_RESPONSE_LENGTH];

	err = nrf_modem_at_cmd(imei_buf, sizeof(imei_buf), "AT+CGSN");
   1561c:	af04      	add	r7, sp, #16
   1561e:	2116      	movs	r1, #22
   15620:	4638      	mov	r0, r7
   15622:	4a15      	ldr	r2, [pc, #84]	; (15678 <nrf_cloud_configured_client_id_get+0x68>)
   15624:	f002 feb6 	bl	18394 <nrf_modem_at_cmd>
	if (err) {
   15628:	4604      	mov	r4, r0
   1562a:	b168      	cbz	r0, 15648 <nrf_cloud_configured_client_id_get+0x38>
		LOG_ERR("Failed to obtain IMEI, error: %d", err);
   1562c:	4b13      	ldr	r3, [pc, #76]	; (1567c <nrf_cloud_configured_client_id_get+0x6c>)
   1562e:	9003      	str	r0, [sp, #12]
   15630:	9302      	str	r3, [sp, #8]
   15632:	2300      	movs	r3, #0
   15634:	2201      	movs	r2, #1
   15636:	4618      	mov	r0, r3
   15638:	e9cd 3300 	strd	r3, r3, [sp]
   1563c:	4910      	ldr	r1, [pc, #64]	; (15680 <nrf_cloud_configured_client_id_get+0x70>)
   1563e:	f7ff ffd5 	bl	155ec <z_log_msg_runtime_create.constprop.0>
	} else if (print_ret >= buf_sz) {
		return -EMSGSIZE;
	}

	return 0;
}
   15642:	4620      	mov	r0, r4
   15644:	b00b      	add	sp, #44	; 0x2c
   15646:	bdf0      	pop	{r4, r5, r6, r7, pc}
	print_ret = snprintk(buf, buf_sz, "%s%.*s",
   15648:	230f      	movs	r3, #15
	imei_buf[NRF_IMEI_LEN] = 0;
   1564a:	f88d 001f 	strb.w	r0, [sp, #31]
	print_ret = snprintk(buf, buf_sz, "%s%.*s",
   1564e:	9300      	str	r3, [sp, #0]
   15650:	4629      	mov	r1, r5
   15652:	4630      	mov	r0, r6
   15654:	4b0b      	ldr	r3, [pc, #44]	; (15684 <nrf_cloud_configured_client_id_get+0x74>)
   15656:	4a0c      	ldr	r2, [pc, #48]	; (15688 <nrf_cloud_configured_client_id_get+0x78>)
   15658:	9701      	str	r7, [sp, #4]
   1565a:	f008 fd4c 	bl	1e0f6 <snprintk>
	if (print_ret <= 0) {
   1565e:	2800      	cmp	r0, #0
   15660:	dd07      	ble.n	15672 <nrf_cloud_configured_client_id_get+0x62>
		return -EMSGSIZE;
   15662:	4285      	cmp	r5, r0
   15664:	bf98      	it	ls
   15666:	f06f 0479 	mvnls.w	r4, #121	; 0x79
   1566a:	e7ea      	b.n	15642 <nrf_cloud_configured_client_id_get+0x32>
		return -EINVAL;
   1566c:	f06f 0415 	mvn.w	r4, #21
   15670:	e7e7      	b.n	15642 <nrf_cloud_configured_client_id_get+0x32>
		return -EIO;
   15672:	f06f 0404 	mvn.w	r4, #4
   15676:	e7e4      	b.n	15642 <nrf_cloud_configured_client_id_get+0x32>
   15678:	000265b3 	.word	0x000265b3
   1567c:	00026dbd 	.word	0x00026dbd
   15680:	00022ffc 	.word	0x00022ffc
   15684:	00026dde 	.word	0x00026dde
   15688:	00026de3 	.word	0x00026de3

0001568c <on_modem_lib_init>:
/* Initialized to value different than success (0) */
static int modem_lib_init_result = -1;

static void on_modem_lib_init(int ret, void *ctx)
{
	modem_lib_init_result = ret;
   1568c:	4b01      	ldr	r3, [pc, #4]	; (15694 <on_modem_lib_init+0x8>)
   1568e:	6018      	str	r0, [r3, #0]
}
   15690:	4770      	bx	lr
   15692:	bf00      	nop
   15694:	2000c644 	.word	0x2000c644

00015698 <nrf_cloud_jwt_generate>:
#define GET_TIME_CMD "AT%%CCLK?"

LOG_MODULE_REGISTER(nrf_cloud_jwt, CONFIG_NRF_CLOUD_LOG_LEVEL);

int nrf_cloud_jwt_generate(uint32_t time_valid_s, char *const jwt_buf, size_t jwt_buf_sz)
{
   15698:	b570      	push	{r4, r5, r6, lr}
   1569a:	4604      	mov	r4, r0
   1569c:	4615      	mov	r5, r2
	if (!jwt_buf || !jwt_buf_sz) {
   1569e:	460e      	mov	r6, r1
{
   156a0:	b09c      	sub	sp, #112	; 0x70
	if (!jwt_buf || !jwt_buf_sz) {
   156a2:	2900      	cmp	r1, #0
   156a4:	d049      	beq.n	1573a <nrf_cloud_jwt_generate+0xa2>
   156a6:	2a00      	cmp	r2, #0
   156a8:	d047      	beq.n	1573a <nrf_cloud_jwt_generate+0xa2>
		return -EINVAL;
	}

	int err;
	char buf[NRF_CLOUD_CLIENT_ID_MAX_LEN + 1];
	struct jwt_data jwt = {
   156aa:	2210      	movs	r2, #16
   156ac:	2100      	movs	r1, #0
   156ae:	a805      	add	r0, sp, #20
   156b0:	f00c fb09 	bl	21cc6 <memset>
   156b4:	4b22      	ldr	r3, [pc, #136]	; (15740 <nrf_cloud_jwt_generate+0xa8>)
   156b6:	e9cd 6509 	strd	r6, r5, [sp, #36]	; 0x24
   156ba:	9304      	str	r3, [sp, #16]
   156bc:	2302      	movs	r3, #2
		.jwt_buf = jwt_buf,
		.jwt_sz = jwt_buf_sz
	};

	/* Check if modem time is valid */
	err = nrf_modem_at_cmd(buf, sizeof(buf), GET_TIME_CMD);
   156be:	ad0b      	add	r5, sp, #44	; 0x2c
   156c0:	2141      	movs	r1, #65	; 0x41
   156c2:	4628      	mov	r0, r5
   156c4:	4a1f      	ldr	r2, [pc, #124]	; (15744 <nrf_cloud_jwt_generate+0xac>)
	struct jwt_data jwt = {
   156c6:	f88d 3014 	strb.w	r3, [sp, #20]
	err = nrf_modem_at_cmd(buf, sizeof(buf), GET_TIME_CMD);
   156ca:	f002 fe63 	bl	18394 <nrf_modem_at_cmd>
	if (err != 0) {
   156ce:	b170      	cbz	r0, 156ee <nrf_cloud_jwt_generate+0x56>
		LOG_ERR("Modem does not have valid date/time, JWT not generated");
   156d0:	4b1d      	ldr	r3, [pc, #116]	; (15748 <nrf_cloud_jwt_generate+0xb0>)
   156d2:	2201      	movs	r2, #1
   156d4:	9302      	str	r3, [sp, #8]
   156d6:	2300      	movs	r3, #0
   156d8:	491c      	ldr	r1, [pc, #112]	; (1574c <nrf_cloud_jwt_generate+0xb4>)
   156da:	4618      	mov	r0, r3
   156dc:	e9cd 3300 	strd	r3, r3, [sp]
   156e0:	f00a fcad 	bl	2003e <z_log_msg_runtime_create.constprop.0>
		return -ETIME;
   156e4:	f06f 043d 	mvn.w	r4, #61	; 0x3d
	if (err) {
		LOG_ERR("Failed to generate JWT, error: %d", err);
	}

	return err;
}
   156e8:	4620      	mov	r0, r4
   156ea:	b01c      	add	sp, #112	; 0x70
   156ec:	bd70      	pop	{r4, r5, r6, pc}
	if (time_valid_s > NRF_CLOUD_JWT_VALID_TIME_S_MAX) {
   156ee:	4b18      	ldr	r3, [pc, #96]	; (15750 <nrf_cloud_jwt_generate+0xb8>)
   156f0:	429c      	cmp	r4, r3
   156f2:	d816      	bhi.n	15722 <nrf_cloud_jwt_generate+0x8a>
	} else if (time_valid_s == 0) {
   156f4:	2c00      	cmp	r4, #0
   156f6:	bf08      	it	eq
   156f8:	f44f 7416 	moveq.w	r4, #600	; 0x258
		err = nrf_cloud_client_id_get(buf, sizeof(buf));
   156fc:	2141      	movs	r1, #65	; 0x41
   156fe:	4628      	mov	r0, r5
		jwt.exp_delta_s = NRF_CLOUD_JWT_VALID_TIME_S_DEF;
   15700:	9406      	str	r4, [sp, #24]
		err = nrf_cloud_client_id_get(buf, sizeof(buf));
   15702:	f00a fc9a 	bl	2003a <nrf_cloud_client_id_get>
		if (err) {
   15706:	4604      	mov	r4, r0
   15708:	b168      	cbz	r0, 15726 <nrf_cloud_jwt_generate+0x8e>
			LOG_ERR("Failed to obtain client id, error: %d", err);
   1570a:	4b12      	ldr	r3, [pc, #72]	; (15754 <nrf_cloud_jwt_generate+0xbc>)
   1570c:	9003      	str	r0, [sp, #12]
		LOG_ERR("Failed to generate JWT, error: %d", err);
   1570e:	9302      	str	r3, [sp, #8]
   15710:	2300      	movs	r3, #0
   15712:	2201      	movs	r2, #1
   15714:	4618      	mov	r0, r3
   15716:	e9cd 3300 	strd	r3, r3, [sp]
   1571a:	490c      	ldr	r1, [pc, #48]	; (1574c <nrf_cloud_jwt_generate+0xb4>)
   1571c:	f00a fc8f 	bl	2003e <z_log_msg_runtime_create.constprop.0>
   15720:	e7e2      	b.n	156e8 <nrf_cloud_jwt_generate+0x50>
   15722:	461c      	mov	r4, r3
   15724:	e7ea      	b.n	156fc <nrf_cloud_jwt_generate+0x64>
	err = modem_jwt_generate(&jwt);
   15726:	a804      	add	r0, sp, #16
		jwt.subject = buf;
   15728:	9507      	str	r5, [sp, #28]
	err = modem_jwt_generate(&jwt);
   1572a:	f7ff fb41 	bl	14db0 <modem_jwt_generate>
	if (err) {
   1572e:	4604      	mov	r4, r0
   15730:	2800      	cmp	r0, #0
   15732:	d0d9      	beq.n	156e8 <nrf_cloud_jwt_generate+0x50>
		LOG_ERR("Failed to generate JWT, error: %d", err);
   15734:	4b08      	ldr	r3, [pc, #32]	; (15758 <nrf_cloud_jwt_generate+0xc0>)
   15736:	9003      	str	r0, [sp, #12]
   15738:	e7e9      	b.n	1570e <nrf_cloud_jwt_generate+0x76>
		return -EINVAL;
   1573a:	f06f 0415 	mvn.w	r4, #21
   1573e:	e7d3      	b.n	156e8 <nrf_cloud_jwt_generate+0x50>
   15740:	01010001 	.word	0x01010001
   15744:	00026e14 	.word	0x00026e14
   15748:	00026e1e 	.word	0x00026e1e
   1574c:	00023014 	.word	0x00023014
   15750:	00093a80 	.word	0x00093a80
   15754:	00026e55 	.word	0x00026e55
   15758:	00023e32 	.word	0x00023e32

0001575c <send_to_modem>:

	return nrf_cloud_agps_request(&request);
}

static int send_to_modem(void *data, size_t data_len, uint16_t type)
{
   1575c:	b570      	push	{r4, r5, r6, lr}
	if (agps_print_enabled) {
   1575e:	4b08      	ldr	r3, [pc, #32]	; (15780 <send_to_modem+0x24>)
{
   15760:	4604      	mov	r4, r0
	if (agps_print_enabled) {
   15762:	781b      	ldrb	r3, [r3, #0]
{
   15764:	460e      	mov	r6, r1
   15766:	4615      	mov	r5, r2
	if (agps_print_enabled) {
   15768:	b11b      	cbz	r3, 15772 <send_to_modem+0x16>
		agps_print(type, data);
   1576a:	4601      	mov	r1, r0
   1576c:	b2d0      	uxtb	r0, r2
   1576e:	f000 faeb 	bl	15d48 <agps_print>
	}

	return nrf_modem_gnss_agps_write(data, data_len, type);
   15772:	462a      	mov	r2, r5
   15774:	4631      	mov	r1, r6
   15776:	4620      	mov	r0, r4
}
   15778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_modem_gnss_agps_write(data, data_len, type);
   1577c:	f004 b8da 	b.w	19934 <nrf_modem_gnss_agps_write>
   15780:	200110c1 	.word	0x200110c1

00015784 <nrf_cloud_agps_process>:

	return len;
}

int nrf_cloud_agps_process(const char *buf, size_t buf_len)
{
   15784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15788:	4607      	mov	r7, r0
   1578a:	b0cf      	sub	sp, #316	; 0x13c
   1578c:	4688      	mov	r8, r1
	int err;
	struct nrf_cloud_apgs_element element = {0};
	struct nrf_cloud_agps_system_time sys_time = {0};
   1578e:	228c      	movs	r2, #140	; 0x8c
   15790:	2100      	movs	r1, #0
   15792:	a807      	add	r0, sp, #28
   15794:	f00c fa97 	bl	21cc6 <memset>
	uint8_t version;
#if defined(CONFIG_NRF_CLOUD_AGPS_FILTERED)
	bool ephemerides_processed = false;
#endif

	if (!buf || (buf_len == 0)) {
   15798:	2f00      	cmp	r7, #0
   1579a:	f000 82c7 	beq.w	15d2c <nrf_cloud_agps_process+0x5a8>
   1579e:	f1b8 0f00 	cmp.w	r8, #0
   157a2:	f000 82c3 	beq.w	15d2c <nrf_cloud_agps_process+0x5a8>
	}

	/* Check for a potential A-GPS JSON error message from nRF Cloud */
	enum nrf_cloud_error nrf_err;

	err = nrf_cloud_error_msg_decode(buf, NRF_CLOUD_JSON_APPID_VAL_AGPS,
   157a6:	ab06      	add	r3, sp, #24
   157a8:	4638      	mov	r0, r7
   157aa:	4a84      	ldr	r2, [pc, #528]	; (159bc <nrf_cloud_agps_process+0x238>)
   157ac:	4984      	ldr	r1, [pc, #528]	; (159c0 <nrf_cloud_agps_process+0x23c>)
   157ae:	f7ff fcd9 	bl	15164 <nrf_cloud_error_msg_decode>
   157b2:	4603      	mov	r3, r0
		NRF_CLOUD_JSON_MSG_TYPE_VAL_DATA, &nrf_err);
	if (!err) {
   157b4:	b978      	cbnz	r0, 157d6 <nrf_cloud_agps_process+0x52>
		LOG_ERR("nRF Cloud returned A-GPS error: %d", nrf_err);
   157b6:	9a06      	ldr	r2, [sp, #24]
   157b8:	4982      	ldr	r1, [pc, #520]	; (159c4 <nrf_cloud_agps_process+0x240>)
   157ba:	9203      	str	r2, [sp, #12]
   157bc:	4a82      	ldr	r2, [pc, #520]	; (159c8 <nrf_cloud_agps_process+0x244>)
   157be:	9000      	str	r0, [sp, #0]
   157c0:	e9cd 0201 	strd	r0, r2, [sp, #4]
   157c4:	2201      	movs	r2, #1
   157c6:	f00a fc4a 	bl	2005e <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   157ca:	f06f 060d 	mvn.w	r6, #13

	LOG_DBG("A-GPS_inject_active UNLOCKED");
	k_sem_give(&agps_injection_active);

	return err;
}
   157ce:	4630      	mov	r0, r6
   157d0:	b04f      	add	sp, #316	; 0x13c
   157d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (err == -ENODATA) { /* Not a JSON message, try to parse it as A-GPS data */
   157d6:	333d      	adds	r3, #61	; 0x3d
   157d8:	f040 82ab 	bne.w	15d32 <nrf_cloud_agps_process+0x5ae>
	version = buf[NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION_INDEX];
   157dc:	783d      	ldrb	r5, [r7, #0]
	if (version != NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION) {
   157de:	2d01      	cmp	r5, #1
   157e0:	d00d      	beq.n	157fe <nrf_cloud_agps_process+0x7a>
		LOG_ERR("Cannot parse schema version: %d", version);
   157e2:	4b7a      	ldr	r3, [pc, #488]	; (159cc <nrf_cloud_agps_process+0x248>)
   157e4:	2201      	movs	r2, #1
   157e6:	9302      	str	r3, [sp, #8]
   157e8:	2300      	movs	r3, #0
   157ea:	4976      	ldr	r1, [pc, #472]	; (159c4 <nrf_cloud_agps_process+0x240>)
   157ec:	4618      	mov	r0, r3
   157ee:	e9cd 3300 	strd	r3, r3, [sp]
   157f2:	9503      	str	r5, [sp, #12]
   157f4:	f00a fc33 	bl	2005e <z_log_msg_runtime_create.constprop.0>
		return -EBADMSG;
   157f8:	f06f 064c 	mvn.w	r6, #76	; 0x4c
   157fc:	e7e7      	b.n	157ce <nrf_cloud_agps_process+0x4a>
   157fe:	f04f 33ff 	mov.w	r3, #4294967295
   15802:	f04f 32ff 	mov.w	r2, #4294967295
   15806:	4872      	ldr	r0, [pc, #456]	; (159d0 <nrf_cloud_agps_process+0x24c>)
   15808:	f005 f84a 	bl	1a8a0 <z_impl_k_sem_take>
	if (err) {
   1580c:	2300      	movs	r3, #0
   1580e:	4606      	mov	r6, r0
   15810:	2800      	cmp	r0, #0
   15812:	f000 8287 	beq.w	15d24 <nrf_cloud_agps_process+0x5a0>
		LOG_ERR("A-GPS injection already active.");
   15816:	4a6f      	ldr	r2, [pc, #444]	; (159d4 <nrf_cloud_agps_process+0x250>)
   15818:	4618      	mov	r0, r3
   1581a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1581e:	4969      	ldr	r1, [pc, #420]	; (159c4 <nrf_cloud_agps_process+0x240>)
   15820:	462a      	mov	r2, r5
   15822:	9300      	str	r3, [sp, #0]
   15824:	f00a fc1b 	bl	2005e <z_log_msg_runtime_create.constprop.0>
		return err;
   15828:	e7d1      	b.n	157ce <nrf_cloud_agps_process+0x4a>
		len += NRF_CLOUD_AGPS_BIN_TYPE_SIZE +
   1582a:	2203      	movs	r2, #3
		element_type = element->type;
   1582c:	4b6a      	ldr	r3, [pc, #424]	; (159d8 <nrf_cloud_agps_process+0x254>)
			(enum nrf_cloud_agps_type)buf[NRF_CLOUD_AGPS_BIN_TYPE_OFFSET];
   1582e:	f894 a000 	ldrb.w	sl, [r4]
		element_type = element->type;
   15832:	f883 a000 	strb.w	sl, [r3]
			*(uint16_t *)&buf[NRF_CLOUD_AGPS_BIN_COUNT_OFFSET] - 1;
   15836:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   1583a:	3b01      	subs	r3, #1
   1583c:	b29b      	uxth	r3, r3
		elements_left_to_process =
   1583e:	f8a9 3000 	strh.w	r3, [r9]
	switch (element->type) {
   15842:	f10a 33ff 	add.w	r3, sl, #4294967295
   15846:	4618      	mov	r0, r3
   15848:	9305      	str	r3, [sp, #20]
   1584a:	2808      	cmp	r0, #8
   1584c:	f200 8093 	bhi.w	15976 <nrf_cloud_agps_process+0x1f2>
   15850:	e8df f000 	tbb	[pc, r0]
   15854:	2724120c 	.word	0x2724120c
   15858:	8b2a5a27 	.word	0x8b2a5a27
   1585c:	8e          	.byte	0x8e
   1585d:	00          	.byte	0x00
		element->type = element_type;
   1585e:	4a5e      	ldr	r2, [pc, #376]	; (159d8 <nrf_cloud_agps_process+0x254>)
		elements_left_to_process -= 1;
   15860:	3b01      	subs	r3, #1
		element->type = element_type;
   15862:	f892 a000 	ldrb.w	sl, [r2]
		elements_left_to_process -= 1;
   15866:	b29b      	uxth	r3, r3
	size_t len = 0;
   15868:	2200      	movs	r2, #0
   1586a:	e7e8      	b.n	1583e <nrf_cloud_agps_process+0xba>
		element->utc = (struct nrf_cloud_agps_utc *)(buf + len);
   1586c:	4414      	add	r4, r2
		len += sizeof(struct nrf_cloud_agps_utc);
   1586e:	320e      	adds	r2, #14
	if (buf_len < len) {
   15870:	428a      	cmp	r2, r1
   15872:	d805      	bhi.n	15880 <nrf_cloud_agps_process+0xfc>
		parsed_len += element_size;
   15874:	4415      	add	r5, r2
		if (element.type == NRF_CLOUD_AGPS_GPS_TOWS) {
   15876:	e029      	b.n	158cc <nrf_cloud_agps_process+0x148>
		element->ephemeris = (struct nrf_cloud_agps_ephemeris *)(buf + len);
   15878:	4414      	add	r4, r2
		len += sizeof(struct nrf_cloud_agps_ephemeris);
   1587a:	323e      	adds	r2, #62	; 0x3e
	if (buf_len < len) {
   1587c:	4291      	cmp	r1, r2
   1587e:	d2f9      	bcs.n	15874 <nrf_cloud_agps_process+0xf0>
		LOG_ERR("Unexpected end of data");
   15880:	2400      	movs	r4, #0
   15882:	4b56      	ldr	r3, [pc, #344]	; (159dc <nrf_cloud_agps_process+0x258>)
   15884:	2201      	movs	r2, #1
   15886:	9302      	str	r3, [sp, #8]
   15888:	4620      	mov	r0, r4
   1588a:	4623      	mov	r3, r4
   1588c:	e9cd 4400 	strd	r4, r4, [sp]
   15890:	494c      	ldr	r1, [pc, #304]	; (159c4 <nrf_cloud_agps_process+0x240>)
   15892:	f00a fbe4 	bl	2005e <z_log_msg_runtime_create.constprop.0>
		elements_left_to_process = 0;
   15896:	f8a9 4000 	strh.w	r4, [r9]
		if (element_size == 0) {
   1589a:	e064      	b.n	15966 <nrf_cloud_agps_process+0x1e2>
		element->almanac = (struct nrf_cloud_agps_almanac *)(buf + len);
   1589c:	4414      	add	r4, r2
		len += sizeof(struct nrf_cloud_agps_almanac);
   1589e:	321f      	adds	r2, #31
	if (buf_len < len) {
   158a0:	e7ec      	b.n	1587c <nrf_cloud_agps_process+0xf8>
			(struct nrf_cloud_agps_nequick *)(buf + len);
   158a2:	4414      	add	r4, r2
		len += sizeof(struct nrf_cloud_agps_nequick);
   158a4:	3208      	adds	r2, #8
	if (buf_len < len) {
   158a6:	e7e9      	b.n	1587c <nrf_cloud_agps_process+0xf8>
		len += sizeof(struct nrf_cloud_agps_system_time) -
   158a8:	f102 0010 	add.w	r0, r2, #16
	if (buf_len < len) {
   158ac:	4281      	cmp	r1, r0
			(struct nrf_cloud_agps_system_time *)(buf + len);
   158ae:	eb04 0302 	add.w	r3, r4, r2
	if (buf_len < len) {
   158b2:	d3e5      	bcc.n	15880 <nrf_cloud_agps_process+0xfc>
			memcpy(&sys_time, element.time_and_tow,
   158b4:	6859      	ldr	r1, [r3, #4]
		parsed_len += element_size;
   158b6:	4405      	add	r5, r0
			memcpy(&sys_time, element.time_and_tow,
   158b8:	58a0      	ldr	r0, [r4, r2]
   158ba:	f10d 0c1c 	add.w	ip, sp, #28
   158be:	e8ac 0003 	stmia.w	ip!, {r0, r1}
			sys_time.sv_mask = sv_mask | element.time_and_tow->sv_mask;
   158c2:	689b      	ldr	r3, [r3, #8]
			element.time_and_tow = &sys_time;
   158c4:	ac07      	add	r4, sp, #28
			sys_time.sv_mask = sv_mask | element.time_and_tow->sv_mask;
   158c6:	ea43 030b 	orr.w	r3, r3, fp
   158ca:	9309      	str	r3, [sp, #36]	; 0x24
	return z_impl_k_mutex_lock(mutex, timeout);
   158cc:	f04f 32ff 	mov.w	r2, #4294967295
   158d0:	f04f 33ff 	mov.w	r3, #4294967295
   158d4:	4842      	ldr	r0, [pc, #264]	; (159e0 <nrf_cloud_agps_process+0x25c>)
   158d6:	f004 fed3 	bl	1a680 <z_impl_k_mutex_lock>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   158da:	2300      	movs	r3, #0
   158dc:	4a41      	ldr	r2, [pc, #260]	; (159e4 <nrf_cloud_agps_process+0x260>)
   158de:	e8d2 1fef 	ldaex	r1, [r2]
   158e2:	e8c2 3fe0 	stlex	r0, r3, [r2]
   158e6:	2800      	cmp	r0, #0
   158e8:	d1f9      	bne.n	158de <nrf_cloud_agps_process+0x15a>
	switch (agps_data->type) {
   158ea:	9905      	ldr	r1, [sp, #20]
   158ec:	2908      	cmp	r1, #8
   158ee:	f200 8209 	bhi.w	15d04 <nrf_cloud_agps_process+0x580>
   158f2:	e8df f011 	tbh	[pc, r1, lsl #1]
   158f6:	0044      	.short	0x0044
   158f8:	011c007b 	.word	0x011c007b
   158fc:	01800160 	.word	0x01800160
   15900:	019f0207 	.word	0x019f0207
   15904:	01f401d2 	.word	0x01f401d2
		len += sizeof(struct nrf_cloud_agps_tow_element);
   15908:	1d13      	adds	r3, r2, #4
	if (buf_len < len) {
   1590a:	4299      	cmp	r1, r3
			(struct nrf_cloud_agps_tow_element *)(buf + len);
   1590c:	eb04 0002 	add.w	r0, r4, r2
	if (buf_len < len) {
   15910:	d3b6      	bcc.n	15880 <nrf_cloud_agps_process+0xfc>
		parsed_len += element_size;
   15912:	441d      	add	r5, r3
			memcpy(&sys_time.sv_tow[element.tow->sv_id - 1],
   15914:	5ca3      	ldrb	r3, [r4, r2]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15916:	f50d 7c9c 	add.w	ip, sp, #312	; 0x138
   1591a:	58a2      	ldr	r2, [r4, r2]
   1591c:	1e59      	subs	r1, r3, #1
   1591e:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
   15922:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
   15926:	601a      	str	r2, [r3, #0]
			if (element.tow->flags || element.tow->tlm) {
   15928:	78c3      	ldrb	r3, [r0, #3]
   1592a:	b913      	cbnz	r3, 15932 <nrf_cloud_agps_process+0x1ae>
   1592c:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   15930:	b11b      	cbz	r3, 1593a <nrf_cloud_agps_process+0x1b6>
				sv_mask |= 1 << (element.tow->sv_id - 1);
   15932:	2301      	movs	r3, #1
   15934:	408b      	lsls	r3, r1
   15936:	ea4b 0b03 	orr.w	fp, fp, r3
	while (parsed_len < buf_len) {
   1593a:	45a8      	cmp	r8, r5
   1593c:	f240 80f3 	bls.w	15b26 <nrf_cloud_agps_process+0x3a2>
	if (elements_left_to_process == 0) {
   15940:	f8b9 3000 	ldrh.w	r3, [r9]
			get_next_agps_element(&element, &buf[parsed_len], buf_len - parsed_len);
   15944:	197c      	adds	r4, r7, r5
   15946:	eba8 0105 	sub.w	r1, r8, r5
	if (elements_left_to_process == 0) {
   1594a:	2b00      	cmp	r3, #0
   1594c:	d187      	bne.n	1585e <nrf_cloud_agps_process+0xda>
		if (buf_len < NRF_CLOUD_AGPS_BIN_TYPE_SIZE + NRF_CLOUD_AGPS_BIN_COUNT_SIZE) {
   1594e:	2902      	cmp	r1, #2
   15950:	f63f af6b 	bhi.w	1582a <nrf_cloud_agps_process+0xa6>
			LOG_ERR("Unexpected end of data");
   15954:	4a21      	ldr	r2, [pc, #132]	; (159dc <nrf_cloud_agps_process+0x258>)
   15956:	4618      	mov	r0, r3
   15958:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1595c:	4919      	ldr	r1, [pc, #100]	; (159c4 <nrf_cloud_agps_process+0x240>)
   1595e:	2201      	movs	r2, #1
   15960:	9300      	str	r3, [sp, #0]
   15962:	f00a fb7c 	bl	2005e <z_log_msg_runtime_create.constprop.0>
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   15966:	2400      	movs	r4, #0
   15968:	e0dc      	b.n	15b24 <nrf_cloud_agps_process+0x3a0>
		element->location = (struct nrf_cloud_agps_location *)(buf + len);
   1596a:	4414      	add	r4, r2
		len += sizeof(struct nrf_cloud_agps_location);
   1596c:	320f      	adds	r2, #15
	if (buf_len < len) {
   1596e:	e785      	b.n	1587c <nrf_cloud_agps_process+0xf8>
			(struct nrf_cloud_agps_integrity *)(buf + len);
   15970:	4414      	add	r4, r2
		len += sizeof(struct nrf_cloud_agps_integrity);
   15972:	3204      	adds	r2, #4
   15974:	e782      	b.n	1587c <nrf_cloud_agps_process+0xf8>
		elements_left_to_process = 0;
   15976:	2300      	movs	r3, #0
   15978:	f8a9 3000 	strh.w	r3, [r9]
		if (element_size == 0) {
   1597c:	e7f3      	b.n	15966 <nrf_cloud_agps_process+0x1e2>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_GPS_UTC_REQUEST;
   1597e:	4a1a      	ldr	r2, [pc, #104]	; (159e8 <nrf_cloud_agps_process+0x264>)
   15980:	6893      	ldr	r3, [r2, #8]
   15982:	f043 0301 	orr.w	r3, r3, #1
   15986:	6093      	str	r3, [r2, #8]
		return send_to_modem(&utc, sizeof(utc),
   15988:	2201      	movs	r2, #1
	dst->a1		= src->utc->a1;
   1598a:	6823      	ldr	r3, [r4, #0]
   1598c:	932a      	str	r3, [sp, #168]	; 0xa8
	dst->a0		= src->utc->a0;
   1598e:	6863      	ldr	r3, [r4, #4]
   15990:	932b      	str	r3, [sp, #172]	; 0xac
	dst->tot	= src->utc->tot;
   15992:	7a23      	ldrb	r3, [r4, #8]
   15994:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
	dst->wn_t	= src->utc->wn_t;
   15998:	7a63      	ldrb	r3, [r4, #9]
   1599a:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
	dst->delta_tls	= src->utc->delta_tls;
   1599e:	7aa3      	ldrb	r3, [r4, #10]
   159a0:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
	dst->wn_lsf	= src->utc->wn_lsf;
   159a4:	7ae3      	ldrb	r3, [r4, #11]
   159a6:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
	dst->dn		= src->utc->dn;
   159aa:	7b23      	ldrb	r3, [r4, #12]
   159ac:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
	dst->delta_tlsf	= src->utc->delta_tlsf;
   159b0:	7b63      	ldrb	r3, [r4, #13]
   159b2:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
		return send_to_modem(&location, sizeof(location),
   159b6:	2110      	movs	r1, #16
   159b8:	e09f      	b.n	15afa <nrf_cloud_agps_process+0x376>
   159ba:	bf00      	nop
   159bc:	00024006 	.word	0x00024006
   159c0:	00026e89 	.word	0x00026e89
   159c4:	00022ff4 	.word	0x00022ff4
   159c8:	00026e8e 	.word	0x00026e8e
   159cc:	00026eb1 	.word	0x00026eb1
   159d0:	2000ca9c 	.word	0x2000ca9c
   159d4:	00026ed1 	.word	0x00026ed1
   159d8:	200110c0 	.word	0x200110c0
   159dc:	00026ef1 	.word	0x00026ef1
   159e0:	2000ca30 	.word	0x2000ca30
   159e4:	2000df0c 	.word	0x2000df0c
   159e8:	2000df10 	.word	0x2000df10
		processed.sv_mask_ephe |= (1 << (agps_data->ephemeris->sv_id - 1));
   159ec:	2301      	movs	r3, #1
   159ee:	7822      	ldrb	r2, [r4, #0]
   159f0:	49bf      	ldr	r1, [pc, #764]	; (15cf0 <nrf_cloud_agps_process+0x56c>)
   159f2:	3a01      	subs	r2, #1
   159f4:	4093      	lsls	r3, r2
   159f6:	680a      	ldr	r2, [r1, #0]
   159f8:	4313      	orrs	r3, r2
   159fa:	600b      	str	r3, [r1, #0]
	dst->sv_id	= src->ephemeris->sv_id;
   159fc:	7823      	ldrb	r3, [r4, #0]
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   159fe:	2148      	movs	r1, #72	; 0x48
	dst->sv_id	= src->ephemeris->sv_id;
   15a00:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
	dst->health	= src->ephemeris->health;
   15a04:	7863      	ldrb	r3, [r4, #1]
   15a06:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
	dst->iodc	= src->ephemeris->iodc;
   15a0a:	78e2      	ldrb	r2, [r4, #3]
   15a0c:	78a3      	ldrb	r3, [r4, #2]
   15a0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15a12:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
	dst->toc	= src->ephemeris->toc;
   15a16:	7962      	ldrb	r2, [r4, #5]
   15a18:	7923      	ldrb	r3, [r4, #4]
   15a1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15a1e:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
	dst->af2	= src->ephemeris->af2;
   15a22:	79a3      	ldrb	r3, [r4, #6]
   15a24:	f88d 30ae 	strb.w	r3, [sp, #174]	; 0xae
	dst->af1	= src->ephemeris->af1;
   15a28:	7a22      	ldrb	r2, [r4, #8]
   15a2a:	79e3      	ldrb	r3, [r4, #7]
   15a2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15a30:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
	dst->af0	= src->ephemeris->af0;
   15a34:	f8d4 3009 	ldr.w	r3, [r4, #9]
   15a38:	932d      	str	r3, [sp, #180]	; 0xb4
	dst->tgd	= src->ephemeris->tgd;
   15a3a:	7b63      	ldrb	r3, [r4, #13]
   15a3c:	f88d 30b8 	strb.w	r3, [sp, #184]	; 0xb8
	dst->ura	= src->ephemeris->ura;
   15a40:	7ba3      	ldrb	r3, [r4, #14]
   15a42:	f88d 30b9 	strb.w	r3, [sp, #185]	; 0xb9
	dst->fit_int	= src->ephemeris->fit_int;
   15a46:	7be3      	ldrb	r3, [r4, #15]
   15a48:	f88d 30ba 	strb.w	r3, [sp, #186]	; 0xba
	dst->toe	= src->ephemeris->toe;
   15a4c:	7c23      	ldrb	r3, [r4, #16]
   15a4e:	7c62      	ldrb	r2, [r4, #17]
   15a50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15a54:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
	dst->w		= src->ephemeris->w;
   15a58:	f8d4 3012 	ldr.w	r3, [r4, #18]
   15a5c:	9330      	str	r3, [sp, #192]	; 0xc0
	dst->delta_n	= src->ephemeris->delta_n;
   15a5e:	7da3      	ldrb	r3, [r4, #22]
   15a60:	7de2      	ldrb	r2, [r4, #23]
   15a62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15a66:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
	dst->m0		= src->ephemeris->m0;
   15a6a:	69a3      	ldr	r3, [r4, #24]
   15a6c:	9332      	str	r3, [sp, #200]	; 0xc8
	dst->omega_dot	= src->ephemeris->omega_dot;
   15a6e:	69e3      	ldr	r3, [r4, #28]
   15a70:	9333      	str	r3, [sp, #204]	; 0xcc
	dst->e		= src->ephemeris->e;
   15a72:	6a23      	ldr	r3, [r4, #32]
   15a74:	9334      	str	r3, [sp, #208]	; 0xd0
	dst->idot	= src->ephemeris->idot;
   15a76:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   15a7a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   15a7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15a82:	f8ad 30d4 	strh.w	r3, [sp, #212]	; 0xd4
	dst->sqrt_a	= src->ephemeris->sqrt_a;
   15a86:	f8d4 3026 	ldr.w	r3, [r4, #38]	; 0x26
   15a8a:	9336      	str	r3, [sp, #216]	; 0xd8
	dst->i0		= src->ephemeris->i0;
   15a8c:	f8d4 302a 	ldr.w	r3, [r4, #42]	; 0x2a
   15a90:	9337      	str	r3, [sp, #220]	; 0xdc
	dst->omega0	= src->ephemeris->omega0;
   15a92:	f8d4 302e 	ldr.w	r3, [r4, #46]	; 0x2e
   15a96:	9338      	str	r3, [sp, #224]	; 0xe0
	dst->crs	= src->ephemeris->crs;
   15a98:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
   15a9c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   15aa0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15aa4:	f8ad 30e4 	strh.w	r3, [sp, #228]	; 0xe4
	dst->cis	= src->ephemeris->cis;
   15aa8:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   15aac:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   15ab0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15ab4:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
	dst->cus	= src->ephemeris->cus;
   15ab8:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
   15abc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   15ac0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15ac4:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
	dst->crc	= src->ephemeris->crc;
   15ac8:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   15acc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   15ad0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15ad4:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
	dst->cic	= src->ephemeris->cic;
   15ad8:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
   15adc:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   15ae0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15ae4:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
	dst->cuc	= src->ephemeris->cuc;
   15ae8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   15aec:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
   15af0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   15af4:	2202      	movs	r2, #2
	dst->cuc	= src->ephemeris->cuc;
   15af6:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
		return send_to_modem(&location, sizeof(location),
   15afa:	a82a      	add	r0, sp, #168	; 0xa8
		return send_to_modem(agps_data->integrity,
   15afc:	f7ff fe2e 	bl	1575c <send_to_modem>
   15b00:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   15b02:	487c      	ldr	r0, [pc, #496]	; (15cf4 <nrf_cloud_agps_process+0x570>)
   15b04:	f004 fe36 	bl	1a774 <z_impl_k_mutex_unlock>
		if (err) {
   15b08:	2c00      	cmp	r4, #0
   15b0a:	f43f af16 	beq.w	1593a <nrf_cloud_agps_process+0x1b6>
			LOG_ERR("Failed to send data to modem, error: %d", err);
   15b0e:	4b7a      	ldr	r3, [pc, #488]	; (15cf8 <nrf_cloud_agps_process+0x574>)
   15b10:	2201      	movs	r2, #1
   15b12:	9302      	str	r3, [sp, #8]
   15b14:	2300      	movs	r3, #0
   15b16:	4979      	ldr	r1, [pc, #484]	; (15cfc <nrf_cloud_agps_process+0x578>)
   15b18:	4618      	mov	r0, r3
   15b1a:	e9cd 3300 	strd	r3, r3, [sp]
   15b1e:	9403      	str	r4, [sp, #12]
   15b20:	f00a fa9d 	bl	2005e <z_log_msg_runtime_create.constprop.0>
	uint32_t sv_mask = 0;
   15b24:	4626      	mov	r6, r4
	z_impl_k_sem_give(sem);
   15b26:	4876      	ldr	r0, [pc, #472]	; (15d00 <nrf_cloud_agps_process+0x57c>)
   15b28:	f004 fe94 	bl	1a854 <z_impl_k_sem_give>
}
   15b2c:	e64f      	b.n	157ce <nrf_cloud_agps_process+0x4a>
		processed.sv_mask_alm |= (1 << (agps_data->almanac->sv_id - 1));
   15b2e:	2301      	movs	r3, #1
   15b30:	7822      	ldrb	r2, [r4, #0]
   15b32:	496f      	ldr	r1, [pc, #444]	; (15cf0 <nrf_cloud_agps_process+0x56c>)
   15b34:	3a01      	subs	r2, #1
   15b36:	4093      	lsls	r3, r2
   15b38:	684a      	ldr	r2, [r1, #4]
   15b3a:	4313      	orrs	r3, r2
   15b3c:	604b      	str	r3, [r1, #4]
	dst->sv_id	= src->almanac->sv_id;
   15b3e:	7823      	ldrb	r3, [r4, #0]
		return send_to_modem(&almanac, sizeof(almanac),
   15b40:	2120      	movs	r1, #32
	dst->sv_id	= src->almanac->sv_id;
   15b42:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
	dst->wn		= src->almanac->wn;
   15b46:	7863      	ldrb	r3, [r4, #1]
   15b48:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
	dst->toa	= src->almanac->toa;
   15b4c:	78a3      	ldrb	r3, [r4, #2]
   15b4e:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
	dst->ioda	= src->almanac->ioda;
   15b52:	78e3      	ldrb	r3, [r4, #3]
   15b54:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
	dst->e		= src->almanac->e;
   15b58:	7962      	ldrb	r2, [r4, #5]
   15b5a:	7923      	ldrb	r3, [r4, #4]
   15b5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15b60:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
	dst->delta_i	= src->almanac->delta_i;
   15b64:	79e2      	ldrb	r2, [r4, #7]
   15b66:	79a3      	ldrb	r3, [r4, #6]
   15b68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15b6c:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
	dst->omega_dot	= src->almanac->omega_dot;
   15b70:	7a62      	ldrb	r2, [r4, #9]
   15b72:	7a23      	ldrb	r3, [r4, #8]
   15b74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15b78:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
	dst->sv_health	= src->almanac->sv_health;
   15b7c:	7aa3      	ldrb	r3, [r4, #10]
   15b7e:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
	dst->sqrt_a	= src->almanac->sqrt_a;
   15b82:	f8d4 300b 	ldr.w	r3, [r4, #11]
   15b86:	932d      	str	r3, [sp, #180]	; 0xb4
	dst->omega0	= src->almanac->omega0;
   15b88:	f8d4 300f 	ldr.w	r3, [r4, #15]
   15b8c:	932e      	str	r3, [sp, #184]	; 0xb8
	dst->w		= src->almanac->w;
   15b8e:	f8d4 3013 	ldr.w	r3, [r4, #19]
   15b92:	932f      	str	r3, [sp, #188]	; 0xbc
	dst->m0		= src->almanac->m0;
   15b94:	f8d4 3017 	ldr.w	r3, [r4, #23]
   15b98:	9330      	str	r3, [sp, #192]	; 0xc0
	dst->af0	= src->almanac->af0;
   15b9a:	7f22      	ldrb	r2, [r4, #28]
   15b9c:	7ee3      	ldrb	r3, [r4, #27]
   15b9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15ba2:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
	dst->af1	= src->almanac->af1;
   15ba6:	7fa2      	ldrb	r2, [r4, #30]
   15ba8:	7f63      	ldrb	r3, [r4, #29]
   15baa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15bae:	f8ad 30c6 	strh.w	r3, [sp, #198]	; 0xc6
		return send_to_modem(&almanac, sizeof(almanac),
   15bb2:	2203      	movs	r2, #3
   15bb4:	e7a1      	b.n	15afa <nrf_cloud_agps_process+0x376>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_KLOBUCHAR_REQUEST;
   15bb6:	4a4e      	ldr	r2, [pc, #312]	; (15cf0 <nrf_cloud_agps_process+0x56c>)
   15bb8:	6893      	ldr	r3, [r2, #8]
   15bba:	f043 0302 	orr.w	r3, r3, #2
   15bbe:	6093      	str	r3, [r2, #8]
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   15bc0:	2204      	movs	r2, #4
	dst->alpha0	= src->ion_correction.klobuchar->alpha0;
   15bc2:	7823      	ldrb	r3, [r4, #0]
   15bc4:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
	dst->alpha1	= src->ion_correction.klobuchar->alpha1;
   15bc8:	7863      	ldrb	r3, [r4, #1]
   15bca:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
	dst->alpha2	= src->ion_correction.klobuchar->alpha2;
   15bce:	78a3      	ldrb	r3, [r4, #2]
   15bd0:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
	dst->alpha3	= src->ion_correction.klobuchar->alpha3;
   15bd4:	78e3      	ldrb	r3, [r4, #3]
   15bd6:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
	dst->beta0	= src->ion_correction.klobuchar->beta0;
   15bda:	7923      	ldrb	r3, [r4, #4]
   15bdc:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
	dst->beta1	= src->ion_correction.klobuchar->beta1;
   15be0:	7963      	ldrb	r3, [r4, #5]
   15be2:	f88d 30ad 	strb.w	r3, [sp, #173]	; 0xad
	dst->beta2	= src->ion_correction.klobuchar->beta2;
   15be6:	79a3      	ldrb	r3, [r4, #6]
   15be8:	f88d 30ae 	strb.w	r3, [sp, #174]	; 0xae
	dst->beta3	= src->ion_correction.klobuchar->beta3;
   15bec:	79e3      	ldrb	r3, [r4, #7]
   15bee:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
		return send_to_modem(&nequick, sizeof(nequick),
   15bf2:	2108      	movs	r1, #8
   15bf4:	e781      	b.n	15afa <nrf_cloud_agps_process+0x376>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_NEQUICK_REQUEST;
   15bf6:	4a3e      	ldr	r2, [pc, #248]	; (15cf0 <nrf_cloud_agps_process+0x56c>)
   15bf8:	6893      	ldr	r3, [r2, #8]
   15bfa:	f043 0304 	orr.w	r3, r3, #4
   15bfe:	6093      	str	r3, [r2, #8]
	dst->ai0 = src->ion_correction.nequick->ai0;
   15c00:	7862      	ldrb	r2, [r4, #1]
   15c02:	7823      	ldrb	r3, [r4, #0]
   15c04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15c08:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
	dst->ai1 = src->ion_correction.nequick->ai1;
   15c0c:	78e2      	ldrb	r2, [r4, #3]
   15c0e:	78a3      	ldrb	r3, [r4, #2]
   15c10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15c14:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
	dst->ai2 = src->ion_correction.nequick->ai2;
   15c18:	7962      	ldrb	r2, [r4, #5]
   15c1a:	7923      	ldrb	r3, [r4, #4]
   15c1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15c20:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
	dst->storm_cond = src->ion_correction.nequick->storm_cond;
   15c24:	79a3      	ldrb	r3, [r4, #6]
		return send_to_modem(&nequick, sizeof(nequick),
   15c26:	2205      	movs	r2, #5
	dst->storm_cond = src->ion_correction.nequick->storm_cond;
   15c28:	f88d 30ae 	strb.w	r3, [sp, #174]	; 0xae
	dst->storm_valid = src->ion_correction.nequick->storm_valid;
   15c2c:	79e3      	ldrb	r3, [r4, #7]
   15c2e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
		return send_to_modem(&nequick, sizeof(nequick),
   15c32:	e7de      	b.n	15bf2 <nrf_cloud_agps_process+0x46e>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST;
   15c34:	4a2e      	ldr	r2, [pc, #184]	; (15cf0 <nrf_cloud_agps_process+0x56c>)
   15c36:	6893      	ldr	r3, [r2, #8]
   15c38:	f043 0308 	orr.w	r3, r3, #8
   15c3c:	6093      	str	r3, [r2, #8]
	dst->date_day		= src->time_and_tow->date_day;
   15c3e:	7862      	ldrb	r2, [r4, #1]
   15c40:	7823      	ldrb	r3, [r4, #0]
   15c42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15c46:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
	dst->time_full_s	= src->time_and_tow->time_full_s;
   15c4a:	f8d4 3002 	ldr.w	r3, [r4, #2]
   15c4e:	932b      	str	r3, [sp, #172]	; 0xac
	dst->time_frac_ms	= src->time_and_tow->time_frac_ms;
   15c50:	79a3      	ldrb	r3, [r4, #6]
   15c52:	79e2      	ldrb	r2, [r4, #7]
   15c54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15c58:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
	dst->sv_mask		= src->time_and_tow->sv_mask;
   15c5c:	68a1      	ldr	r1, [r4, #8]
   15c5e:	912d      	str	r1, [sp, #180]	; 0xb4
	if (src->time_and_tow->sv_mask == 0U) {
   15c60:	b931      	cbnz	r1, 15c70 <nrf_cloud_agps_process+0x4ec>
		memset(dst->sv_tow, 0, sizeof(dst->sv_tow));
   15c62:	2280      	movs	r2, #128	; 0x80
   15c64:	a82e      	add	r0, sp, #184	; 0xb8
   15c66:	f00c f82e 	bl	21cc6 <memset>
		return send_to_modem(&time_and_tow, sizeof(time_and_tow),
   15c6a:	2206      	movs	r2, #6
   15c6c:	2190      	movs	r1, #144	; 0x90
   15c6e:	e744      	b.n	15afa <nrf_cloud_agps_process+0x376>
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   15c70:	2300      	movs	r3, #0
   15c72:	aa2a      	add	r2, sp, #168	; 0xa8
		dst->sv_tow[i].flags = src->time_and_tow->sv_tow[i].flags;
   15c74:	f104 000f 	add.w	r0, r4, #15
   15c78:	f810 1023 	ldrb.w	r1, [r0, r3, lsl #2]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   15c7c:	3204      	adds	r2, #4
		dst->sv_tow[i].flags = src->time_and_tow->sv_tow[i].flags;
   15c7e:	7391      	strb	r1, [r2, #14]
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   15c80:	1c99      	adds	r1, r3, #2
   15c82:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   15c86:	f891 c005 	ldrb.w	ip, [r1, #5]
   15c8a:	7989      	ldrb	r1, [r1, #6]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   15c8c:	3301      	adds	r3, #1
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   15c8e:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   15c92:	2b20      	cmp	r3, #32
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   15c94:	8191      	strh	r1, [r2, #12]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   15c96:	d1ef      	bne.n	15c78 <nrf_cloud_agps_process+0x4f4>
   15c98:	e7e7      	b.n	15c6a <nrf_cloud_agps_process+0x4e6>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_POSITION_REQUEST;
   15c9a:	4a15      	ldr	r2, [pc, #84]	; (15cf0 <nrf_cloud_agps_process+0x56c>)
		struct nrf_modem_gnss_agps_data_location location = {0};
   15c9c:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_POSITION_REQUEST;
   15ca0:	6893      	ldr	r3, [r2, #8]
   15ca2:	f043 0310 	orr.w	r3, r3, #16
   15ca6:	6093      	str	r3, [r2, #8]
	dst->latitude		= src->location->latitude;
   15ca8:	6823      	ldr	r3, [r4, #0]
   15caa:	932a      	str	r3, [sp, #168]	; 0xa8
	dst->longitude		= src->location->longitude;
   15cac:	6863      	ldr	r3, [r4, #4]
   15cae:	932b      	str	r3, [sp, #172]	; 0xac
	dst->altitude		= src->location->altitude;
   15cb0:	7a62      	ldrb	r2, [r4, #9]
   15cb2:	7a23      	ldrb	r3, [r4, #8]
   15cb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15cb8:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
	dst->unc_semimajor	= src->location->unc_semimajor;
   15cbc:	7aa3      	ldrb	r3, [r4, #10]
		return send_to_modem(&location, sizeof(location),
   15cbe:	2207      	movs	r2, #7
	dst->unc_semimajor	= src->location->unc_semimajor;
   15cc0:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
	dst->unc_semiminor	= src->location->unc_semiminor;
   15cc4:	7ae3      	ldrb	r3, [r4, #11]
   15cc6:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
	dst->orientation_major	= src->location->orientation_major;
   15cca:	7b23      	ldrb	r3, [r4, #12]
   15ccc:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
	dst->unc_altitude	= src->location->unc_altitude;
   15cd0:	7b63      	ldrb	r3, [r4, #13]
   15cd2:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
	dst->confidence		= src->location->confidence;
   15cd6:	7ba3      	ldrb	r3, [r4, #14]
   15cd8:	f88d 30b6 	strb.w	r3, [sp, #182]	; 0xb6
		return send_to_modem(&location, sizeof(location),
   15cdc:	e66b      	b.n	159b6 <nrf_cloud_agps_process+0x232>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST;
   15cde:	4a04      	ldr	r2, [pc, #16]	; (15cf0 <nrf_cloud_agps_process+0x56c>)
		return send_to_modem(agps_data->integrity,
   15ce0:	2104      	movs	r1, #4
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST;
   15ce2:	6893      	ldr	r3, [r2, #8]
		return send_to_modem(agps_data->integrity,
   15ce4:	4620      	mov	r0, r4
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST;
   15ce6:	f043 0320 	orr.w	r3, r3, #32
   15cea:	6093      	str	r3, [r2, #8]
		return send_to_modem(agps_data->integrity,
   15cec:	2208      	movs	r2, #8
   15cee:	e705      	b.n	15afc <nrf_cloud_agps_process+0x378>
   15cf0:	2000df10 	.word	0x2000df10
   15cf4:	2000ca30 	.word	0x2000ca30
   15cf8:	00026f23 	.word	0x00026f23
   15cfc:	00022ff4 	.word	0x00022ff4
   15d00:	2000ca9c 	.word	0x2000ca9c
		LOG_WRN("Unknown AGPS data type: %d", agps_data->type);
   15d04:	4a0c      	ldr	r2, [pc, #48]	; (15d38 <nrf_cloud_agps_process+0x5b4>)
   15d06:	9300      	str	r3, [sp, #0]
   15d08:	e9cd 3201 	strd	r3, r2, [sp, #4]
   15d0c:	2300      	movs	r3, #0
   15d0e:	2202      	movs	r2, #2
   15d10:	4618      	mov	r0, r3
   15d12:	490a      	ldr	r1, [pc, #40]	; (15d3c <nrf_cloud_agps_process+0x5b8>)
	switch (agps_data->type) {
   15d14:	f8cd a00c 	str.w	sl, [sp, #12]
		LOG_WRN("Unknown AGPS data type: %d", agps_data->type);
   15d18:	f00a f9a1 	bl	2005e <z_log_msg_runtime_create.constprop.0>
	return z_impl_k_mutex_unlock(mutex);
   15d1c:	4808      	ldr	r0, [pc, #32]	; (15d40 <nrf_cloud_agps_process+0x5bc>)
   15d1e:	f004 fd29 	bl	1a774 <z_impl_k_mutex_unlock>
		if (err) {
   15d22:	e60a      	b.n	1593a <nrf_cloud_agps_process+0x1b6>
	uint32_t sv_mask = 0;
   15d24:	4683      	mov	fp, r0
	if (elements_left_to_process == 0) {
   15d26:	f8df 901c 	ldr.w	r9, [pc, #28]	; 15d44 <nrf_cloud_agps_process+0x5c0>
   15d2a:	e606      	b.n	1593a <nrf_cloud_agps_process+0x1b6>
		return -EINVAL;
   15d2c:	f06f 0615 	mvn.w	r6, #21
   15d30:	e54d      	b.n	157ce <nrf_cloud_agps_process+0x4a>
		return -ENOMSG;
   15d32:	f06f 0622 	mvn.w	r6, #34	; 0x22
   15d36:	e54a      	b.n	157ce <nrf_cloud_agps_process+0x4a>
   15d38:	00026f08 	.word	0x00026f08
   15d3c:	00022ff4 	.word	0x00022ff4
   15d40:	2000ca30 	.word	0x2000ca30
   15d44:	2000e34c 	.word	0x2000e34c

00015d48 <agps_print>:
}

void agps_print(uint16_t type, void *data)
{

	switch (type) {
   15d48:	3801      	subs	r0, #1
{
   15d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15d4e:	460c      	mov	r4, r1
	switch (type) {
   15d50:	2807      	cmp	r0, #7
   15d52:	f200 8215 	bhi.w	16180 <agps_print+0x438>
   15d56:	e8df f010 	tbh	[pc, r0, lsl #1]
   15d5a:	0008      	.short	0x0008
   15d5c:	00a50030 	.word	0x00a50030
   15d60:	010d00e3 	.word	0x010d00e3
   15d64:	01540126 	.word	0x01540126
   15d68:	020d      	.short	0x020d
	printk("utc:\n");
   15d6a:	48b7      	ldr	r0, [pc, #732]	; (16048 <agps_print+0x300>)
   15d6c:	f008 f9b6 	bl	1e0dc <printk>
	printk("\ta1: %d\n", data->a1);
   15d70:	6821      	ldr	r1, [r4, #0]
   15d72:	48b6      	ldr	r0, [pc, #728]	; (1604c <agps_print+0x304>)
   15d74:	f008 f9b2 	bl	1e0dc <printk>
	printk("\ta0: %d\n", data->a0);
   15d78:	6861      	ldr	r1, [r4, #4]
   15d7a:	48b5      	ldr	r0, [pc, #724]	; (16050 <agps_print+0x308>)
   15d7c:	f008 f9ae 	bl	1e0dc <printk>
	printk("\ttot: %d\n", data->tot);
   15d80:	7a21      	ldrb	r1, [r4, #8]
   15d82:	48b4      	ldr	r0, [pc, #720]	; (16054 <agps_print+0x30c>)
   15d84:	f008 f9aa 	bl	1e0dc <printk>
	printk("\twn_t: %d\n", data->wn_t);
   15d88:	7a61      	ldrb	r1, [r4, #9]
   15d8a:	48b3      	ldr	r0, [pc, #716]	; (16058 <agps_print+0x310>)
   15d8c:	f008 f9a6 	bl	1e0dc <printk>
	printk("\tdelta_tls: %d\n", data->delta_tls);
   15d90:	f994 100a 	ldrsb.w	r1, [r4, #10]
   15d94:	48b1      	ldr	r0, [pc, #708]	; (1605c <agps_print+0x314>)
   15d96:	f008 f9a1 	bl	1e0dc <printk>
	printk("\twn_lsf: %d\n", data->wn_lsf);
   15d9a:	7ae1      	ldrb	r1, [r4, #11]
   15d9c:	48b0      	ldr	r0, [pc, #704]	; (16060 <agps_print+0x318>)
   15d9e:	f008 f99d 	bl	1e0dc <printk>
	printk("\tdn: %d\n", data->dn);
   15da2:	f994 100c 	ldrsb.w	r1, [r4, #12]
   15da6:	48af      	ldr	r0, [pc, #700]	; (16064 <agps_print+0x31c>)
   15da8:	f008 f998 	bl	1e0dc <printk>
	printk("\tdelta_tlsf: %d\n", data->delta_tlsf);
   15dac:	f994 100d 	ldrsb.w	r1, [r4, #13]
   15db0:	48ad      	ldr	r0, [pc, #692]	; (16068 <agps_print+0x320>)
	}
	default:
		printk("Unknown AGPS data type\n");
		break;
	}
}
   15db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printk("\tcuc: %d\n", data->cuc);
   15db6:	f008 b991 	b.w	1e0dc <printk>
	printk("ephemeris:\n");
   15dba:	48ac      	ldr	r0, [pc, #688]	; (1606c <agps_print+0x324>)
   15dbc:	f008 f98e 	bl	1e0dc <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   15dc0:	7821      	ldrb	r1, [r4, #0]
   15dc2:	48ab      	ldr	r0, [pc, #684]	; (16070 <agps_print+0x328>)
   15dc4:	f008 f98a 	bl	1e0dc <printk>
	printk("\thealth: %d\n", data->health);
   15dc8:	7861      	ldrb	r1, [r4, #1]
   15dca:	48aa      	ldr	r0, [pc, #680]	; (16074 <agps_print+0x32c>)
   15dcc:	f008 f986 	bl	1e0dc <printk>
	printk("\tiodc: %d\n", data->iodc);
   15dd0:	8861      	ldrh	r1, [r4, #2]
   15dd2:	48a9      	ldr	r0, [pc, #676]	; (16078 <agps_print+0x330>)
   15dd4:	f008 f982 	bl	1e0dc <printk>
	printk("\ttoc: %d\n", data->toc);
   15dd8:	88a1      	ldrh	r1, [r4, #4]
   15dda:	48a8      	ldr	r0, [pc, #672]	; (1607c <agps_print+0x334>)
   15ddc:	f008 f97e 	bl	1e0dc <printk>
	printk("\taf2: %d\n", data->af2);
   15de0:	f994 1006 	ldrsb.w	r1, [r4, #6]
   15de4:	48a6      	ldr	r0, [pc, #664]	; (16080 <agps_print+0x338>)
   15de6:	f008 f979 	bl	1e0dc <printk>
	printk("\taf1: %d\n", data->af1);
   15dea:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   15dee:	48a5      	ldr	r0, [pc, #660]	; (16084 <agps_print+0x33c>)
   15df0:	f008 f974 	bl	1e0dc <printk>
	printk("\taf0: %d\n", data->af0);
   15df4:	68e1      	ldr	r1, [r4, #12]
   15df6:	48a4      	ldr	r0, [pc, #656]	; (16088 <agps_print+0x340>)
   15df8:	f008 f970 	bl	1e0dc <printk>
	printk("\ttgd: %d\n", data->tgd);
   15dfc:	f994 1010 	ldrsb.w	r1, [r4, #16]
   15e00:	48a2      	ldr	r0, [pc, #648]	; (1608c <agps_print+0x344>)
   15e02:	f008 f96b 	bl	1e0dc <printk>
	printk("\tura: %d\n", data->ura);
   15e06:	7c61      	ldrb	r1, [r4, #17]
   15e08:	48a1      	ldr	r0, [pc, #644]	; (16090 <agps_print+0x348>)
   15e0a:	f008 f967 	bl	1e0dc <printk>
	printk("\tfit_int: %d\n", data->fit_int);
   15e0e:	7ca1      	ldrb	r1, [r4, #18]
   15e10:	48a0      	ldr	r0, [pc, #640]	; (16094 <agps_print+0x34c>)
   15e12:	f008 f963 	bl	1e0dc <printk>
	printk("\ttoe: %d\n", data->toe);
   15e16:	8aa1      	ldrh	r1, [r4, #20]
   15e18:	489f      	ldr	r0, [pc, #636]	; (16098 <agps_print+0x350>)
   15e1a:	f008 f95f 	bl	1e0dc <printk>
	printk("\tw: %d\n", data->w);
   15e1e:	69a1      	ldr	r1, [r4, #24]
   15e20:	489e      	ldr	r0, [pc, #632]	; (1609c <agps_print+0x354>)
   15e22:	f008 f95b 	bl	1e0dc <printk>
	printk("\tdelta_n: %d\n", data->delta_n);
   15e26:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   15e2a:	489d      	ldr	r0, [pc, #628]	; (160a0 <agps_print+0x358>)
   15e2c:	f008 f956 	bl	1e0dc <printk>
	printk("\tm0: %d\n", data->m0);
   15e30:	6a21      	ldr	r1, [r4, #32]
   15e32:	489c      	ldr	r0, [pc, #624]	; (160a4 <agps_print+0x35c>)
   15e34:	f008 f952 	bl	1e0dc <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   15e38:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15e3a:	489b      	ldr	r0, [pc, #620]	; (160a8 <agps_print+0x360>)
   15e3c:	f008 f94e 	bl	1e0dc <printk>
	printk("\te: %d\n", data->e);
   15e40:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   15e42:	489a      	ldr	r0, [pc, #616]	; (160ac <agps_print+0x364>)
   15e44:	f008 f94a 	bl	1e0dc <printk>
	printk("\tidot: %d\n", data->idot);
   15e48:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
   15e4c:	4898      	ldr	r0, [pc, #608]	; (160b0 <agps_print+0x368>)
   15e4e:	f008 f945 	bl	1e0dc <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   15e52:	6b21      	ldr	r1, [r4, #48]	; 0x30
   15e54:	4897      	ldr	r0, [pc, #604]	; (160b4 <agps_print+0x36c>)
   15e56:	f008 f941 	bl	1e0dc <printk>
	printk("\ti0: %d\n", data->i0);
   15e5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   15e5c:	4896      	ldr	r0, [pc, #600]	; (160b8 <agps_print+0x370>)
   15e5e:	f008 f93d 	bl	1e0dc <printk>
	printk("\tomega0: %d\n", data->omega0);
   15e62:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   15e64:	4895      	ldr	r0, [pc, #596]	; (160bc <agps_print+0x374>)
   15e66:	f008 f939 	bl	1e0dc <printk>
	printk("\tcrs: %d\n", data->crs);
   15e6a:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
   15e6e:	4894      	ldr	r0, [pc, #592]	; (160c0 <agps_print+0x378>)
   15e70:	f008 f934 	bl	1e0dc <printk>
	printk("\tcis: %d\n", data->cis);
   15e74:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
   15e78:	4892      	ldr	r0, [pc, #584]	; (160c4 <agps_print+0x37c>)
   15e7a:	f008 f92f 	bl	1e0dc <printk>
	printk("\tcus: %d\n", data->cus);
   15e7e:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
   15e82:	4891      	ldr	r0, [pc, #580]	; (160c8 <agps_print+0x380>)
   15e84:	f008 f92a 	bl	1e0dc <printk>
	printk("\tcrc: %d\n", data->crc);
   15e88:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
   15e8c:	488f      	ldr	r0, [pc, #572]	; (160cc <agps_print+0x384>)
   15e8e:	f008 f925 	bl	1e0dc <printk>
	printk("\tcic: %d\n", data->cic);
   15e92:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
   15e96:	488e      	ldr	r0, [pc, #568]	; (160d0 <agps_print+0x388>)
   15e98:	f008 f920 	bl	1e0dc <printk>
	printk("\tcuc: %d\n", data->cuc);
   15e9c:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
   15ea0:	488c      	ldr	r0, [pc, #560]	; (160d4 <agps_print+0x38c>)
   15ea2:	e786      	b.n	15db2 <agps_print+0x6a>
	printk("almanac\n");
   15ea4:	488c      	ldr	r0, [pc, #560]	; (160d8 <agps_print+0x390>)
   15ea6:	f008 f919 	bl	1e0dc <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   15eaa:	7821      	ldrb	r1, [r4, #0]
   15eac:	4870      	ldr	r0, [pc, #448]	; (16070 <agps_print+0x328>)
   15eae:	f008 f915 	bl	1e0dc <printk>
	printk("\twn: %d\n", data->wn);
   15eb2:	7861      	ldrb	r1, [r4, #1]
   15eb4:	4889      	ldr	r0, [pc, #548]	; (160dc <agps_print+0x394>)
   15eb6:	f008 f911 	bl	1e0dc <printk>
	printk("\ttoa: %d\n", data->toa);
   15eba:	78a1      	ldrb	r1, [r4, #2]
   15ebc:	4888      	ldr	r0, [pc, #544]	; (160e0 <agps_print+0x398>)
   15ebe:	f008 f90d 	bl	1e0dc <printk>
	printk("\tioda: %d\n", data->ioda);
   15ec2:	78e1      	ldrb	r1, [r4, #3]
   15ec4:	4887      	ldr	r0, [pc, #540]	; (160e4 <agps_print+0x39c>)
   15ec6:	f008 f909 	bl	1e0dc <printk>
	printk("\te: %d\n", data->e);
   15eca:	88a1      	ldrh	r1, [r4, #4]
   15ecc:	4877      	ldr	r0, [pc, #476]	; (160ac <agps_print+0x364>)
   15ece:	f008 f905 	bl	1e0dc <printk>
	printk("\tdelta_i: %d\n", data->delta_i);
   15ed2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   15ed6:	4884      	ldr	r0, [pc, #528]	; (160e8 <agps_print+0x3a0>)
   15ed8:	f008 f900 	bl	1e0dc <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   15edc:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   15ee0:	4871      	ldr	r0, [pc, #452]	; (160a8 <agps_print+0x360>)
   15ee2:	f008 f8fb 	bl	1e0dc <printk>
	printk("\tsv_health: %d\n", data->sv_health);
   15ee6:	7aa1      	ldrb	r1, [r4, #10]
   15ee8:	4880      	ldr	r0, [pc, #512]	; (160ec <agps_print+0x3a4>)
   15eea:	f008 f8f7 	bl	1e0dc <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   15eee:	68e1      	ldr	r1, [r4, #12]
   15ef0:	4870      	ldr	r0, [pc, #448]	; (160b4 <agps_print+0x36c>)
   15ef2:	f008 f8f3 	bl	1e0dc <printk>
	printk("\tomega0: %d\n", data->omega0);
   15ef6:	6921      	ldr	r1, [r4, #16]
   15ef8:	4870      	ldr	r0, [pc, #448]	; (160bc <agps_print+0x374>)
   15efa:	f008 f8ef 	bl	1e0dc <printk>
	printk("\tw: %d\n", data->w);
   15efe:	6961      	ldr	r1, [r4, #20]
   15f00:	4866      	ldr	r0, [pc, #408]	; (1609c <agps_print+0x354>)
   15f02:	f008 f8eb 	bl	1e0dc <printk>
	printk("\tm0: %d\n", data->m0);
   15f06:	69a1      	ldr	r1, [r4, #24]
   15f08:	4866      	ldr	r0, [pc, #408]	; (160a4 <agps_print+0x35c>)
   15f0a:	f008 f8e7 	bl	1e0dc <printk>
	printk("\taf0: %d\n", data->af0);
   15f0e:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   15f12:	485d      	ldr	r0, [pc, #372]	; (16088 <agps_print+0x340>)
   15f14:	f008 f8e2 	bl	1e0dc <printk>
	printk("\taf1: %d\n", data->af1);
   15f18:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
   15f1c:	4859      	ldr	r0, [pc, #356]	; (16084 <agps_print+0x33c>)
   15f1e:	e748      	b.n	15db2 <agps_print+0x6a>
	printk("klobuchar\n");
   15f20:	4873      	ldr	r0, [pc, #460]	; (160f0 <agps_print+0x3a8>)
   15f22:	f008 f8db 	bl	1e0dc <printk>
	printk("\talpha0: %d\n", data->alpha0);
   15f26:	f994 1000 	ldrsb.w	r1, [r4]
   15f2a:	4872      	ldr	r0, [pc, #456]	; (160f4 <agps_print+0x3ac>)
   15f2c:	f008 f8d6 	bl	1e0dc <printk>
	printk("\talpha1: %d\n", data->alpha1);
   15f30:	f994 1001 	ldrsb.w	r1, [r4, #1]
   15f34:	4870      	ldr	r0, [pc, #448]	; (160f8 <agps_print+0x3b0>)
   15f36:	f008 f8d1 	bl	1e0dc <printk>
	printk("\talpha2: %d\n", data->alpha2);
   15f3a:	f994 1002 	ldrsb.w	r1, [r4, #2]
   15f3e:	486f      	ldr	r0, [pc, #444]	; (160fc <agps_print+0x3b4>)
   15f40:	f008 f8cc 	bl	1e0dc <printk>
	printk("\talpha3: %d\n", data->alpha3);
   15f44:	f994 1003 	ldrsb.w	r1, [r4, #3]
   15f48:	486d      	ldr	r0, [pc, #436]	; (16100 <agps_print+0x3b8>)
   15f4a:	f008 f8c7 	bl	1e0dc <printk>
	printk("\tbeta0: %d\n", data->beta0);
   15f4e:	f994 1004 	ldrsb.w	r1, [r4, #4]
   15f52:	486c      	ldr	r0, [pc, #432]	; (16104 <agps_print+0x3bc>)
   15f54:	f008 f8c2 	bl	1e0dc <printk>
	printk("\tbeta1: %d\n", data->beta1);
   15f58:	f994 1005 	ldrsb.w	r1, [r4, #5]
   15f5c:	486a      	ldr	r0, [pc, #424]	; (16108 <agps_print+0x3c0>)
   15f5e:	f008 f8bd 	bl	1e0dc <printk>
	printk("\tbeta2: %d\n", data->beta2);
   15f62:	f994 1006 	ldrsb.w	r1, [r4, #6]
   15f66:	4869      	ldr	r0, [pc, #420]	; (1610c <agps_print+0x3c4>)
   15f68:	f008 f8b8 	bl	1e0dc <printk>
	printk("\tbeta3: %d\n", data->beta3);
   15f6c:	f994 1007 	ldrsb.w	r1, [r4, #7]
   15f70:	4867      	ldr	r0, [pc, #412]	; (16110 <agps_print+0x3c8>)
   15f72:	e71e      	b.n	15db2 <agps_print+0x6a>
	printk("nequick\n");
   15f74:	4867      	ldr	r0, [pc, #412]	; (16114 <agps_print+0x3cc>)
   15f76:	f008 f8b1 	bl	1e0dc <printk>
	printk("\tai0: %d\n", data->ai0);
   15f7a:	f9b4 1000 	ldrsh.w	r1, [r4]
   15f7e:	4866      	ldr	r0, [pc, #408]	; (16118 <agps_print+0x3d0>)
   15f80:	f008 f8ac 	bl	1e0dc <printk>
	printk("\tai1: %d\n", data->ai1);
   15f84:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
   15f88:	4864      	ldr	r0, [pc, #400]	; (1611c <agps_print+0x3d4>)
   15f8a:	f008 f8a7 	bl	1e0dc <printk>
	printk("\tai2: %d\n", data->ai2);
   15f8e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
   15f92:	4863      	ldr	r0, [pc, #396]	; (16120 <agps_print+0x3d8>)
   15f94:	f008 f8a2 	bl	1e0dc <printk>
	printk("\tstorm_cond: %d\n", data->storm_cond);
   15f98:	79a1      	ldrb	r1, [r4, #6]
   15f9a:	4862      	ldr	r0, [pc, #392]	; (16124 <agps_print+0x3dc>)
   15f9c:	f008 f89e 	bl	1e0dc <printk>
	printk("\tstorm_valid: %d\n", data->storm_valid);
   15fa0:	79e1      	ldrb	r1, [r4, #7]
   15fa2:	4861      	ldr	r0, [pc, #388]	; (16128 <agps_print+0x3e0>)
   15fa4:	e705      	b.n	15db2 <agps_print+0x6a>
	printk("clock_and_tows\n");
   15fa6:	4861      	ldr	r0, [pc, #388]	; (1612c <agps_print+0x3e4>)
   15fa8:	f008 f898 	bl	1e0dc <printk>
	printk("\tdate_day: %d\n", data->date_day);
   15fac:	8821      	ldrh	r1, [r4, #0]
   15fae:	4860      	ldr	r0, [pc, #384]	; (16130 <agps_print+0x3e8>)
   15fb0:	f008 f894 	bl	1e0dc <printk>
	printk("\ttime_full_s: %d\n", data->time_full_s);
   15fb4:	6861      	ldr	r1, [r4, #4]
   15fb6:	485f      	ldr	r0, [pc, #380]	; (16134 <agps_print+0x3ec>)
   15fb8:	f008 f890 	bl	1e0dc <printk>
	printk("\ttime_frac_ms: %d\n", data->time_frac_ms);
   15fbc:	8921      	ldrh	r1, [r4, #8]
   15fbe:	485e      	ldr	r0, [pc, #376]	; (16138 <agps_print+0x3f0>)
   15fc0:	f008 f88c 	bl	1e0dc <printk>
	printk("\tsv_mask: 0x%08x\n", data->sv_mask);
   15fc4:	68e1      	ldr	r1, [r4, #12]
   15fc6:	485d      	ldr	r0, [pc, #372]	; (1613c <agps_print+0x3f4>)
   15fc8:	f008 f888 	bl	1e0dc <printk>
	printk("\tsv_tow\n");
   15fcc:	485c      	ldr	r0, [pc, #368]	; (16140 <agps_print+0x3f8>)
   15fce:	f008 f885 	bl	1e0dc <printk>
	for (size_t i = 0; i < NRF_MODEM_GNSS_AGPS_MAX_SV_TOW; i++) {
   15fd2:	2500      	movs	r5, #0
		printk("\t\tsv_tow[%d]\n", i);
   15fd4:	f8df 8198 	ldr.w	r8, [pc, #408]	; 16170 <agps_print+0x428>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   15fd8:	4f5a      	ldr	r7, [pc, #360]	; (16144 <agps_print+0x3fc>)
		printk("\t\t\tflags: 0x%02x\n", data->sv_tow[i].flags);
   15fda:	4e5b      	ldr	r6, [pc, #364]	; (16148 <agps_print+0x400>)
		printk("\t\tsv_tow[%d]\n", i);
   15fdc:	4629      	mov	r1, r5
   15fde:	4640      	mov	r0, r8
   15fe0:	f008 f87c 	bl	1e0dc <printk>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   15fe4:	8a21      	ldrh	r1, [r4, #16]
   15fe6:	4638      	mov	r0, r7
   15fe8:	f008 f878 	bl	1e0dc <printk>
	for (size_t i = 0; i < NRF_MODEM_GNSS_AGPS_MAX_SV_TOW; i++) {
   15fec:	3501      	adds	r5, #1
		printk("\t\t\tflags: 0x%02x\n", data->sv_tow[i].flags);
   15fee:	7ca1      	ldrb	r1, [r4, #18]
   15ff0:	4630      	mov	r0, r6
   15ff2:	f008 f873 	bl	1e0dc <printk>
	for (size_t i = 0; i < NRF_MODEM_GNSS_AGPS_MAX_SV_TOW; i++) {
   15ff6:	2d20      	cmp	r5, #32
   15ff8:	f104 0404 	add.w	r4, r4, #4
   15ffc:	d1ee      	bne.n	15fdc <agps_print+0x294>
}
   15ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printk("location\n");
   16002:	4852      	ldr	r0, [pc, #328]	; (1614c <agps_print+0x404>)
   16004:	f008 f86a 	bl	1e0dc <printk>
	printk("\tlatitude: %d\n", data->latitude);
   16008:	6821      	ldr	r1, [r4, #0]
   1600a:	4851      	ldr	r0, [pc, #324]	; (16150 <agps_print+0x408>)
   1600c:	f008 f866 	bl	1e0dc <printk>
	printk("\tlongitude: %d\n", data->longitude);
   16010:	6861      	ldr	r1, [r4, #4]
   16012:	4850      	ldr	r0, [pc, #320]	; (16154 <agps_print+0x40c>)
   16014:	f008 f862 	bl	1e0dc <printk>
	printk("\taltitude: %d\n", data->altitude);
   16018:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   1601c:	484e      	ldr	r0, [pc, #312]	; (16158 <agps_print+0x410>)
   1601e:	f008 f85d 	bl	1e0dc <printk>
	printk("\tunc_semimajor: %d\n", data->unc_semimajor);
   16022:	7aa1      	ldrb	r1, [r4, #10]
   16024:	484d      	ldr	r0, [pc, #308]	; (1615c <agps_print+0x414>)
   16026:	f008 f859 	bl	1e0dc <printk>
	printk("\tunc_semiminor: %d\n", data->unc_semiminor);
   1602a:	7ae1      	ldrb	r1, [r4, #11]
   1602c:	484c      	ldr	r0, [pc, #304]	; (16160 <agps_print+0x418>)
   1602e:	f008 f855 	bl	1e0dc <printk>
	printk("\torientation_major: %d\n", data->orientation_major);
   16032:	7b21      	ldrb	r1, [r4, #12]
   16034:	484b      	ldr	r0, [pc, #300]	; (16164 <agps_print+0x41c>)
   16036:	f008 f851 	bl	1e0dc <printk>
	printk("\tunc_altitude: %d\n", data->unc_altitude);
   1603a:	7b61      	ldrb	r1, [r4, #13]
   1603c:	484a      	ldr	r0, [pc, #296]	; (16168 <agps_print+0x420>)
   1603e:	f008 f84d 	bl	1e0dc <printk>
	printk("\tconfidence: %d\n", data->confidence);
   16042:	7ba1      	ldrb	r1, [r4, #14]
   16044:	4849      	ldr	r0, [pc, #292]	; (1616c <agps_print+0x424>)
   16046:	e6b4      	b.n	15db2 <agps_print+0x6a>
   16048:	00026f5a 	.word	0x00026f5a
   1604c:	00026f60 	.word	0x00026f60
   16050:	00026f69 	.word	0x00026f69
   16054:	00026f72 	.word	0x00026f72
   16058:	00026f7c 	.word	0x00026f7c
   1605c:	00026f87 	.word	0x00026f87
   16060:	00026f97 	.word	0x00026f97
   16064:	00026fa4 	.word	0x00026fa4
   16068:	00026fad 	.word	0x00026fad
   1606c:	00026fbe 	.word	0x00026fbe
   16070:	00026fca 	.word	0x00026fca
   16074:	00026fd6 	.word	0x00026fd6
   16078:	00026fe3 	.word	0x00026fe3
   1607c:	00026fee 	.word	0x00026fee
   16080:	00026ff8 	.word	0x00026ff8
   16084:	00027002 	.word	0x00027002
   16088:	0002700c 	.word	0x0002700c
   1608c:	00027016 	.word	0x00027016
   16090:	00027020 	.word	0x00027020
   16094:	0002702a 	.word	0x0002702a
   16098:	00027038 	.word	0x00027038
   1609c:	00027042 	.word	0x00027042
   160a0:	0002704a 	.word	0x0002704a
   160a4:	00027058 	.word	0x00027058
   160a8:	00027061 	.word	0x00027061
   160ac:	00027071 	.word	0x00027071
   160b0:	00027079 	.word	0x00027079
   160b4:	00027084 	.word	0x00027084
   160b8:	00027091 	.word	0x00027091
   160bc:	0002709a 	.word	0x0002709a
   160c0:	000270a7 	.word	0x000270a7
   160c4:	000270b1 	.word	0x000270b1
   160c8:	000270bb 	.word	0x000270bb
   160cc:	000270c5 	.word	0x000270c5
   160d0:	000270cf 	.word	0x000270cf
   160d4:	000270d9 	.word	0x000270d9
   160d8:	000270e3 	.word	0x000270e3
   160dc:	000270ec 	.word	0x000270ec
   160e0:	000270f5 	.word	0x000270f5
   160e4:	000270ff 	.word	0x000270ff
   160e8:	0002710a 	.word	0x0002710a
   160ec:	00027118 	.word	0x00027118
   160f0:	00027128 	.word	0x00027128
   160f4:	00027133 	.word	0x00027133
   160f8:	00027140 	.word	0x00027140
   160fc:	0002714d 	.word	0x0002714d
   16100:	0002715a 	.word	0x0002715a
   16104:	00027167 	.word	0x00027167
   16108:	00027173 	.word	0x00027173
   1610c:	0002717f 	.word	0x0002717f
   16110:	0002718b 	.word	0x0002718b
   16114:	00027197 	.word	0x00027197
   16118:	000271a0 	.word	0x000271a0
   1611c:	000271aa 	.word	0x000271aa
   16120:	000271b4 	.word	0x000271b4
   16124:	000271be 	.word	0x000271be
   16128:	000271cf 	.word	0x000271cf
   1612c:	000271e1 	.word	0x000271e1
   16130:	000271f1 	.word	0x000271f1
   16134:	00027200 	.word	0x00027200
   16138:	00027212 	.word	0x00027212
   1613c:	00027225 	.word	0x00027225
   16140:	00027237 	.word	0x00027237
   16144:	0002724e 	.word	0x0002724e
   16148:	0002725a 	.word	0x0002725a
   1614c:	0002726c 	.word	0x0002726c
   16150:	00027276 	.word	0x00027276
   16154:	00027285 	.word	0x00027285
   16158:	00027295 	.word	0x00027295
   1615c:	000272a4 	.word	0x000272a4
   16160:	000272b8 	.word	0x000272b8
   16164:	000272cc 	.word	0x000272cc
   16168:	000272e4 	.word	0x000272e4
   1616c:	000272f7 	.word	0x000272f7
   16170:	00027240 	.word	0x00027240
	printk("integrity\n");
   16174:	4805      	ldr	r0, [pc, #20]	; (1618c <agps_print+0x444>)
   16176:	f007 ffb1 	bl	1e0dc <printk>
	printk("\tintegrity_mask: %d\n", data->integrity_mask);
   1617a:	6821      	ldr	r1, [r4, #0]
   1617c:	4804      	ldr	r0, [pc, #16]	; (16190 <agps_print+0x448>)
   1617e:	e618      	b.n	15db2 <agps_print+0x6a>
		printk("Unknown AGPS data type\n");
   16180:	4804      	ldr	r0, [pc, #16]	; (16194 <agps_print+0x44c>)
}
   16182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printk("Unknown AGPS data type\n");
   16186:	f007 bfa9 	b.w	1e0dc <printk>
   1618a:	bf00      	nop
   1618c:	00027308 	.word	0x00027308
   16190:	00027313 	.word	0x00027313
   16194:	00027328 	.word	0x00027328

00016198 <init_rest_client_request>:
	}
}

static void init_rest_client_request(struct nrf_cloud_rest_context const *const rest_ctx,
	struct rest_client_req_context *const req, const enum http_method meth)
{
   16198:	b538      	push	{r3, r4, r5, lr}
   1619a:	460b      	mov	r3, r1
   1619c:	4604      	mov	r4, r0
   1619e:	4615      	mov	r5, r2
__ssp_bos_icheck3(memset, void *, int)
   161a0:	2100      	movs	r1, #0
   161a2:	2238      	movs	r2, #56	; 0x38
   161a4:	4618      	mov	r0, r3
   161a6:	f00b fd8e 	bl	21cc6 <memset>
	memset(req, 0, sizeof(*req));

	req->connect_socket	= rest_ctx->connect_socket;
   161aa:	6822      	ldr	r2, [r4, #0]
   161ac:	6002      	str	r2, [r0, #0]
	req->keep_alive		= rest_ctx->keep_alive;
   161ae:	7922      	ldrb	r2, [r4, #4]
   161b0:	7102      	strb	r2, [r0, #4]

	req->resp_buff		= rest_ctx->rx_buf;
   161b2:	6922      	ldr	r2, [r4, #16]
   161b4:	6302      	str	r2, [r0, #48]	; 0x30
	req->resp_buff_len	= rest_ctx->rx_buf_len;
   161b6:	6962      	ldr	r2, [r4, #20]
   161b8:	6342      	str	r2, [r0, #52]	; 0x34

	req->sec_tag		= CONFIG_NRF_CLOUD_SEC_TAG;
   161ba:	4a0a      	ldr	r2, [pc, #40]	; (161e4 <init_rest_client_request+0x4c>)
   161bc:	6082      	str	r2, [r0, #8]
	req->port		= HTTPS_PORT;
   161be:	f240 12bb 	movw	r2, #443	; 0x1bb
   161c2:	8302      	strh	r2, [r0, #24]
	req->host		= CONFIG_NRF_CLOUD_REST_HOST_NAME;
   161c4:	4a08      	ldr	r2, [pc, #32]	; (161e8 <init_rest_client_request+0x50>)
   161c6:	6142      	str	r2, [r0, #20]
	req->tls_peer_verify	= TLS_PEER_VERIFY_REQUIRED;
   161c8:	2202      	movs	r2, #2
   161ca:	60c2      	str	r2, [r0, #12]

	if (rest_ctx->timeout_ms <= 0) {
   161cc:	68a1      	ldr	r1, [r4, #8]
		req->timeout_ms = SYS_FOREVER_MS;
	} else {
		req->timeout_ms = rest_ctx->timeout_ms;
	}

	req->http_method	= meth;
   161ce:	7405      	strb	r5, [r0, #16]
		req->timeout_ms = SYS_FOREVER_MS;
   161d0:	2900      	cmp	r1, #0
   161d2:	bfd8      	it	le
   161d4:	f04f 31ff 	movle.w	r1, #4294967295
   161d8:	62c1      	str	r1, [r0, #44]	; 0x2c

	(void)nrf_cloud_codec_init(NULL);
}
   161da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)nrf_cloud_codec_init(NULL);
   161de:	2000      	movs	r0, #0
   161e0:	f7fe bf3e 	b.w	15060 <nrf_cloud_codec_init>
   161e4:	01010001 	.word	0x01010001
   161e8:	00027340 	.word	0x00027340

000161ec <do_rest_client_request>:

static int do_rest_client_request(struct nrf_cloud_rest_context *const rest_ctx,
	struct rest_client_req_context *const req,
	struct rest_client_resp_context *const resp,
	bool check_status_good, bool expect_body)
{
   161ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   161f0:	460f      	mov	r7, r1
   161f2:	4616      	mov	r6, r2
   161f4:	4605      	mov	r5, r0
	int ret;

	ret = rest_client_request(req, resp);
   161f6:	4611      	mov	r1, r2
{
   161f8:	b085      	sub	sp, #20
	ret = rest_client_request(req, resp);
   161fa:	4638      	mov	r0, r7
{
   161fc:	4698      	mov	r8, r3
   161fe:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	ret = rest_client_request(req, resp);
   16202:	f000 fa73 	bl	166ec <rest_client_request>
	rest_ctx->status		= resp->http_status_code;
   16206:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
   1620a:	83a9      	strh	r1, [r5, #28]
	rest_ctx->response		= resp->response;
   1620c:	68b3      	ldr	r3, [r6, #8]
   1620e:	622b      	str	r3, [r5, #32]
	rest_ctx->response_len		= resp->response_len;
   16210:	6872      	ldr	r2, [r6, #4]
   16212:	626a      	str	r2, [r5, #36]	; 0x24
	rest_ctx->total_response_len	= resp->total_response_len;
   16214:	6836      	ldr	r6, [r6, #0]
   16216:	62ae      	str	r6, [r5, #40]	; 0x28
	rest_ctx->connect_socket	= req->connect_socket;
   16218:	683c      	ldr	r4, [r7, #0]
   1621a:	602c      	str	r4, [r5, #0]

	sync_rest_client_data(rest_ctx, req, resp);

	/* Check for an nRF Cloud specific error code */
	rest_ctx->nrf_err = NRF_CLOUD_ERROR_NONE;
   1621c:	2400      	movs	r4, #0
   1621e:	62ec      	str	r4, [r5, #44]	; 0x2c
	if ((ret == 0) && (rest_ctx->status >= NRF_CLOUD_HTTP_STATUS__ERROR_BEGIN) &&
   16220:	4604      	mov	r4, r0
   16222:	bb70      	cbnz	r0, 16282 <do_rest_client_request+0x96>
   16224:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   16228:	db17      	blt.n	1625a <do_rest_client_request+0x6e>
   1622a:	b1b3      	cbz	r3, 1625a <do_rest_client_request+0x6e>
	    rest_ctx->response && rest_ctx->response_len) {
   1622c:	b1aa      	cbz	r2, 1625a <do_rest_client_request+0x6e>
		(void)nrf_cloud_rest_error_decode(rest_ctx->response, &rest_ctx->nrf_err);
   1622e:	4618      	mov	r0, r3
   16230:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   16234:	f7fe ffca 	bl	151cc <nrf_cloud_rest_error_decode>

		if ((rest_ctx->nrf_err != NRF_CLOUD_ERROR_NONE) &&
   16238:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1623a:	b173      	cbz	r3, 1625a <do_rest_client_request+0x6e>
   1623c:	f649 6233 	movw	r2, #40499	; 0x9e33
   16240:	4293      	cmp	r3, r2
   16242:	d00a      	beq.n	1625a <do_rest_client_request+0x6e>
		    (rest_ctx->nrf_err != NRF_CLOUD_ERROR_NOT_FOUND_NO_ERROR)) {
			LOG_ERR("nRF Cloud REST error code: %d", rest_ctx->nrf_err);
   16244:	9303      	str	r3, [sp, #12]
   16246:	4b15      	ldr	r3, [pc, #84]	; (1629c <do_rest_client_request+0xb0>)
   16248:	2201      	movs	r2, #1
   1624a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1624e:	4620      	mov	r0, r4
   16250:	4623      	mov	r3, r4
   16252:	4913      	ldr	r1, [pc, #76]	; (162a0 <do_rest_client_request+0xb4>)
   16254:	9400      	str	r4, [sp, #0]
   16256:	f009 ff11 	bl	2007c <z_log_msg_runtime_create.constprop.0>
	}

	if (ret) {
		LOG_DBG("REST client request failed with error code %d", ret);
		return ret;
	} else if (rest_ctx->status == NRF_CLOUD_HTTP_STATUS_NONE) {
   1625a:	f9b5 201c 	ldrsh.w	r2, [r5, #28]
   1625e:	b1a2      	cbz	r2, 1628a <do_rest_client_request+0x9e>
		LOG_DBG("REST request endpoint closed connection without reply.");
		return -ESHUTDOWN;
	} else if (check_status_good && (rest_ctx->status != NRF_CLOUD_HTTP_STATUS_OK) &&
   16260:	f1b8 0f00 	cmp.w	r8, #0
   16264:	d003      	beq.n	1626e <do_rest_client_request+0x82>
   16266:	f022 0202 	bic.w	r2, r2, #2
   1626a:	2ac8      	cmp	r2, #200	; 0xc8
   1626c:	d110      	bne.n	16290 <do_rest_client_request+0xa4>
					(rest_ctx->status != NRF_CLOUD_HTTP_STATUS_ACCEPTED)) {
		LOG_DBG("REST request was rejected. Response status: %d", rest_ctx->status);
		return -EBADMSG;
	} else if (expect_body && (!rest_ctx->response || !rest_ctx->response_len)) {
   1626e:	f1b9 0f00 	cmp.w	r9, #0
   16272:	d006      	beq.n	16282 <do_rest_client_request+0x96>
   16274:	6a2b      	ldr	r3, [r5, #32]
   16276:	b173      	cbz	r3, 16296 <do_rest_client_request+0xaa>
   16278:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		return -ENODATA;
   1627a:	2b00      	cmp	r3, #0
   1627c:	bf08      	it	eq
   1627e:	f06f 043c 	mvneq.w	r4, #60	; 0x3c
	}

	return 0;
}
   16282:	4620      	mov	r0, r4
   16284:	b005      	add	sp, #20
   16286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -ESHUTDOWN;
   1628a:	f06f 046d 	mvn.w	r4, #109	; 0x6d
   1628e:	e7f8      	b.n	16282 <do_rest_client_request+0x96>
		return -EBADMSG;
   16290:	f06f 044c 	mvn.w	r4, #76	; 0x4c
   16294:	e7f5      	b.n	16282 <do_rest_client_request+0x96>
		return -ENODATA;
   16296:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1629a:	e7f2      	b.n	16282 <do_rest_client_request+0x96>
   1629c:	00027351 	.word	0x00027351
   162a0:	0002302c 	.word	0x0002302c

000162a4 <generate_auth_header>:
{
   162a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   162a6:	460e      	mov	r6, r1
	if ((!tok && !IS_ENABLED(CONFIG_NRF_CLOUD_REST_AUTOGEN_JWT))) {
   162a8:	4605      	mov	r5, r0
   162aa:	b960      	cbnz	r0, 162c6 <generate_auth_header+0x22>
		LOG_ERR("Cannot generate auth header, no token was given, "
   162ac:	4b1e      	ldr	r3, [pc, #120]	; (16328 <generate_auth_header+0x84>)
   162ae:	2201      	movs	r2, #1
   162b0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   162b4:	491d      	ldr	r1, [pc, #116]	; (1632c <generate_auth_header+0x88>)
   162b6:	4603      	mov	r3, r0
   162b8:	9000      	str	r0, [sp, #0]
   162ba:	f009 fedf 	bl	2007c <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   162be:	f06f 0015 	mvn.w	r0, #21
}
   162c2:	b004      	add	sp, #16
   162c4:	bd70      	pop	{r4, r5, r6, pc}
	int tok_len = tok ? strlen(tok) : -1;
   162c6:	f7f2 fe3a 	bl	8f3e <strlen>
	if (tok_len <= 0) {
   162ca:	4604      	mov	r4, r0
   162cc:	b950      	cbnz	r0, 162e4 <generate_auth_header+0x40>
		LOG_ERR("Cannot generate auth header, non-positive token length of %d", tok_len);
   162ce:	4b18      	ldr	r3, [pc, #96]	; (16330 <generate_auth_header+0x8c>)
   162d0:	2201      	movs	r2, #1
   162d2:	e9cd 0301 	strd	r0, r3, [sp, #4]
   162d6:	4915      	ldr	r1, [pc, #84]	; (1632c <generate_auth_header+0x88>)
   162d8:	4603      	mov	r3, r0
   162da:	9003      	str	r0, [sp, #12]
   162dc:	9000      	str	r0, [sp, #0]
   162de:	f009 fecd 	bl	2007c <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   162e2:	e7ec      	b.n	162be <generate_auth_header+0x1a>
	*auth_hdr_out = nrf_cloud_malloc(prefix_len + tok_len + postfix_len + 1);
   162e4:	3019      	adds	r0, #25
   162e6:	f7ff f975 	bl	155d4 <nrf_cloud_malloc>
   162ea:	6030      	str	r0, [r6, #0]
	if (!*auth_hdr_out) {
   162ec:	b1c8      	cbz	r0, 16322 <generate_auth_header+0x7e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   162ee:	4b11      	ldr	r3, [pc, #68]	; (16334 <generate_auth_header+0x90>)
	char *tok_ptr = prefix_ptr + prefix_len;
   162f0:	f100 0616 	add.w	r6, r0, #22
   162f4:	f103 0214 	add.w	r2, r3, #20
   162f8:	f853 1b04 	ldr.w	r1, [r3], #4
   162fc:	4293      	cmp	r3, r2
   162fe:	f840 1b04 	str.w	r1, [r0], #4
   16302:	d1f9      	bne.n	162f8 <generate_auth_header+0x54>
   16304:	881b      	ldrh	r3, [r3, #0]
   16306:	4622      	mov	r2, r4
   16308:	8003      	strh	r3, [r0, #0]
   1630a:	4629      	mov	r1, r5
   1630c:	4630      	mov	r0, r6
   1630e:	f00b fcb3 	bl	21c78 <memcpy>
   16312:	4b09      	ldr	r3, [pc, #36]	; (16338 <generate_auth_header+0x94>)
	postfix_ptr = tok_ptr + tok_len;
   16314:	1932      	adds	r2, r6, r4
   16316:	8819      	ldrh	r1, [r3, #0]
   16318:	789b      	ldrb	r3, [r3, #2]
   1631a:	5331      	strh	r1, [r6, r4]
	return 0;
   1631c:	2000      	movs	r0, #0
   1631e:	7093      	strb	r3, [r2, #2]
   16320:	e7cf      	b.n	162c2 <generate_auth_header+0x1e>
		return -ENOMEM;
   16322:	f06f 000b 	mvn.w	r0, #11
   16326:	e7cc      	b.n	162c2 <generate_auth_header+0x1e>
   16328:	0002736f 	.word	0x0002736f
   1632c:	0002302c 	.word	0x0002302c
   16330:	000273bf 	.word	0x000273bf
   16334:	000273fc 	.word	0x000273fc
   16338:	0002756c 	.word	0x0002756c

0001633c <nrf_cloud_rest_disconnect>:
	return ret;
}
#endif /* CONFIG_NRF_CLOUD_PGPS */

int nrf_cloud_rest_disconnect(struct nrf_cloud_rest_context *const rest_ctx)
{
   1633c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!rest_ctx) {
   1633e:	4604      	mov	r4, r0
   16340:	b1d8      	cbz	r0, 1637a <nrf_cloud_rest_disconnect+0x3e>
		return -EINVAL;
	} else if (rest_ctx->connect_socket < 0) {
   16342:	6800      	ldr	r0, [r0, #0]
   16344:	2800      	cmp	r0, #0
   16346:	db1b      	blt.n	16380 <nrf_cloud_rest_disconnect+0x44>
	return z_impl_zsock_close(sock);
   16348:	f008 fadc 	bl	1e904 <z_impl_zsock_close>
		return -ENOTCONN;
	}

	int err = close(rest_ctx->connect_socket);

	if (err) {
   1634c:	b188      	cbz	r0, 16372 <nrf_cloud_rest_disconnect+0x36>
		LOG_ERR("Failed to close socket, error: %d", errno);
   1634e:	f008 fca7 	bl	1eca0 <__errno>
   16352:	6803      	ldr	r3, [r0, #0]
   16354:	2201      	movs	r2, #1
   16356:	9303      	str	r3, [sp, #12]
   16358:	4b0b      	ldr	r3, [pc, #44]	; (16388 <nrf_cloud_rest_disconnect+0x4c>)
   1635a:	490c      	ldr	r1, [pc, #48]	; (1638c <nrf_cloud_rest_disconnect+0x50>)
   1635c:	9302      	str	r3, [sp, #8]
   1635e:	2300      	movs	r3, #0
   16360:	4618      	mov	r0, r3
   16362:	e9cd 3300 	strd	r3, r3, [sp]
   16366:	f009 fe89 	bl	2007c <z_log_msg_runtime_create.constprop.0>
   1636a:	f06f 0004 	mvn.w	r0, #4
	} else {
		rest_ctx->connect_socket = -1;
	}

	return err;
}
   1636e:	b004      	add	sp, #16
   16370:	bd10      	pop	{r4, pc}
		rest_ctx->connect_socket = -1;
   16372:	f04f 33ff 	mov.w	r3, #4294967295
   16376:	6023      	str	r3, [r4, #0]
   16378:	e7f9      	b.n	1636e <nrf_cloud_rest_disconnect+0x32>
		return -EINVAL;
   1637a:	f06f 0015 	mvn.w	r0, #21
   1637e:	e7f6      	b.n	1636e <nrf_cloud_rest_disconnect+0x32>
		return -ENOTCONN;
   16380:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16384:	e7f3      	b.n	1636e <nrf_cloud_rest_disconnect+0x32>
   16386:	bf00      	nop
   16388:	00027413 	.word	0x00027413
   1638c:	0002302c 	.word	0x0002302c

00016390 <nrf_cloud_rest_agps_data_get>:
{
   16390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t frag_size = (rest_ctx->fragment_size ? rest_ctx->fragment_size : RANGE_MAX_BYTES);
   16394:	f240 63a4 	movw	r3, #1700	; 0x6a4
{
   16398:	4605      	mov	r5, r0
   1639a:	460f      	mov	r7, r1
	char *auth_hdr = NULL;
   1639c:	2100      	movs	r1, #0
{
   1639e:	b0b7      	sub	sp, #220	; 0xdc
	size_t frag_size = (rest_ctx->fragment_size ? rest_ctx->fragment_size : RANGE_MAX_BYTES);
   163a0:	f8d0 b018 	ldr.w	fp, [r0, #24]
{
   163a4:	4616      	mov	r6, r2
	memset(&resp, 0, sizeof(resp));
   163a6:	a828      	add	r0, sp, #160	; 0xa0
   163a8:	2238      	movs	r2, #56	; 0x38
	size_t frag_size = (rest_ctx->fragment_size ? rest_ctx->fragment_size : RANGE_MAX_BYTES);
   163aa:	f1bb 0f00 	cmp.w	fp, #0
   163ae:	bf08      	it	eq
   163b0:	469b      	moveq	fp, r3
	char *auth_hdr = NULL;
   163b2:	9106      	str	r1, [sp, #24]
	memset(&resp, 0, sizeof(resp));
   163b4:	f00b fc87 	bl	21cc6 <memset>
	init_rest_client_request(rest_ctx, &req, HTTP_GET);
   163b8:	2201      	movs	r2, #1
   163ba:	4628      	mov	r0, r5
   163bc:	a91a      	add	r1, sp, #104	; 0x68
   163be:	f7ff feeb 	bl	16198 <init_rest_client_request>
	if ((request->type == NRF_CLOUD_REST_AGPS_REQ_CUSTOM) &&
   163c2:	783c      	ldrb	r4, [r7, #0]
   163c4:	2c02      	cmp	r4, #2
   163c6:	d11e      	bne.n	16406 <nrf_cloud_rest_agps_data_get+0x76>
	    (request->agps_req == NULL)) {
   163c8:	687b      	ldr	r3, [r7, #4]
	if ((request->type == NRF_CLOUD_REST_AGPS_REQ_CUSTOM) &&
   163ca:	b9ab      	cbnz	r3, 163f8 <nrf_cloud_rest_agps_data_get+0x68>
		LOG_ERR("Custom request type requires A-GPS request data");
   163cc:	4a9e      	ldr	r2, [pc, #632]	; (16648 <nrf_cloud_rest_agps_data_get+0x2b8>)
   163ce:	9202      	str	r2, [sp, #8]
		LOG_ERR("Invalid result buffer");
   163d0:	2201      	movs	r2, #1
   163d2:	4618      	mov	r0, r3
   163d4:	e9cd 3300 	strd	r3, r3, [sp]
   163d8:	499c      	ldr	r1, [pc, #624]	; (1664c <nrf_cloud_rest_agps_data_get+0x2bc>)
   163da:	f009 fe4f 	bl	2007c <z_log_msg_runtime_create.constprop.0>
		ret = -EINVAL;
   163de:	f06f 0415 	mvn.w	r4, #21
	if (auth_hdr) {
   163e2:	9806      	ldr	r0, [sp, #24]
   163e4:	b108      	cbz	r0, 163ea <nrf_cloud_rest_agps_data_get+0x5a>
		nrf_cloud_free(auth_hdr);
   163e6:	f7ff f8fb 	bl	155e0 <nrf_cloud_free>
	close_connection(rest_ctx);
   163ea:	4628      	mov	r0, r5
   163ec:	f009 fe56 	bl	2009c <close_connection>
}
   163f0:	4620      	mov	r0, r4
   163f2:	b037      	add	sp, #220	; 0xdc
   163f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (result && !result->buf) {
   163f8:	b1e6      	cbz	r6, 16434 <nrf_cloud_rest_agps_data_get+0xa4>
   163fa:	6832      	ldr	r2, [r6, #0]
   163fc:	b9d2      	cbnz	r2, 16434 <nrf_cloud_rest_agps_data_get+0xa4>
		LOG_ERR("Invalid result buffer");
   163fe:	4b94      	ldr	r3, [pc, #592]	; (16650 <nrf_cloud_rest_agps_data_get+0x2c0>)
   16400:	9302      	str	r3, [sp, #8]
   16402:	2300      	movs	r3, #0
   16404:	e7e4      	b.n	163d0 <nrf_cloud_rest_agps_data_get+0x40>
	} else if (result && !result->buf) {
   16406:	b116      	cbz	r6, 1640e <nrf_cloud_rest_agps_data_get+0x7e>
   16408:	6833      	ldr	r3, [r6, #0]
   1640a:	2b00      	cmp	r3, #0
   1640c:	d0f7      	beq.n	163fe <nrf_cloud_rest_agps_data_get+0x6e>
	switch (request->type) {
   1640e:	2c00      	cmp	r4, #0
   16410:	d041      	beq.n	16496 <nrf_cloud_rest_agps_data_get+0x106>
   16412:	2c01      	cmp	r4, #1
   16414:	d017      	beq.n	16446 <nrf_cloud_rest_agps_data_get+0xb6>
		LOG_ERR("No A-GPS request data found for type: %u", request->type);
   16416:	783b      	ldrb	r3, [r7, #0]
   16418:	2201      	movs	r2, #1
   1641a:	9303      	str	r3, [sp, #12]
   1641c:	4b8d      	ldr	r3, [pc, #564]	; (16654 <nrf_cloud_rest_agps_data_get+0x2c4>)
   1641e:	498b      	ldr	r1, [pc, #556]	; (1664c <nrf_cloud_rest_agps_data_get+0x2bc>)
   16420:	9302      	str	r3, [sp, #8]
   16422:	2300      	movs	r3, #0
   16424:	4618      	mov	r0, r3
   16426:	e9cd 3300 	strd	r3, r3, [sp]
   1642a:	f009 fe27 	bl	2007c <z_log_msg_runtime_create.constprop.0>
		ret = -ENOENT;
   1642e:	f06f 0401 	mvn.w	r4, #1
   16432:	e7d6      	b.n	163e2 <nrf_cloud_rest_agps_data_get+0x52>
		type_count = nrf_cloud_agps_type_array_get(request->agps_req,
   16434:	2209      	movs	r2, #9
   16436:	4618      	mov	r0, r3
   16438:	a907      	add	r1, sp, #28
		type_count = nrf_cloud_agps_type_array_get(&assist, types, ARRAY_SIZE(types));
   1643a:	f7fe ffb3 	bl	153a4 <nrf_cloud_agps_type_array_get>
	if (type_count <= 0) {
   1643e:	2800      	cmp	r0, #0
		type_count = nrf_cloud_agps_type_array_get(&assist, types, ARRAY_SIZE(types));
   16440:	4604      	mov	r4, r0
	if (type_count <= 0) {
   16442:	dc03      	bgt.n	1644c <nrf_cloud_rest_agps_data_get+0xbc>
   16444:	e7e7      	b.n	16416 <nrf_cloud_rest_agps_data_get+0x86>
		types[0] = NRF_CLOUD_AGPS_LOCATION;
   16446:	2308      	movs	r3, #8
   16448:	f88d 301c 	strb.w	r3, [sp, #28]
	agps_obj = cJSON_CreateObject();
   1644c:	f000 fe80 	bl	17150 <cJSON_CreateObject>
	ret = nrf_cloud_agps_req_data_json_encode(types, type_count,
   16450:	f04f 0800 	mov.w	r8, #0
   16454:	23ff      	movs	r3, #255	; 0xff
	agps_obj = cJSON_CreateObject();
   16456:	4681      	mov	r9, r0
	ret = nrf_cloud_agps_req_data_json_encode(types, type_count,
   16458:	e9cd 8300 	strd	r8, r3, [sp]
   1645c:	9002      	str	r0, [sp, #8]
   1645e:	4621      	mov	r1, r4
   16460:	4643      	mov	r3, r8
   16462:	68ba      	ldr	r2, [r7, #8]
   16464:	a807      	add	r0, sp, #28
   16466:	f7fe ff05 	bl	15274 <nrf_cloud_agps_req_data_json_encode>
	ret = nrf_cloud_json_to_url_params_convert(rest_ctx->rx_buf, rest_ctx->rx_buf_len,
   1646a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   1646e:	464a      	mov	r2, r9
   16470:	f7ff f804 	bl	1547c <nrf_cloud_json_to_url_params_convert>
   16474:	4604      	mov	r4, r0
	cJSON_Delete(agps_obj);
   16476:	4648      	mov	r0, r9
   16478:	f000 fdbe 	bl	16ff8 <cJSON_Delete>
	if (ret) {
   1647c:	b1a4      	cbz	r4, 164a8 <nrf_cloud_rest_agps_data_get+0x118>
		LOG_ERR("Could not create A-GPS request URL");
   1647e:	4b76      	ldr	r3, [pc, #472]	; (16658 <nrf_cloud_rest_agps_data_get+0x2c8>)
   16480:	2201      	movs	r2, #1
   16482:	e9cd 8301 	strd	r8, r3, [sp, #4]
   16486:	4640      	mov	r0, r8
   16488:	4643      	mov	r3, r8
   1648a:	4970      	ldr	r1, [pc, #448]	; (1664c <nrf_cloud_rest_agps_data_get+0x2bc>)
   1648c:	f8cd 8000 	str.w	r8, [sp]
   16490:	f009 fdf4 	bl	2007c <z_log_msg_runtime_create.constprop.0>
	if (url) {
   16494:	e7a5      	b.n	163e2 <nrf_cloud_rest_agps_data_get+0x52>
		memset(&assist, 0xFF, sizeof(assist));
   16496:	f04f 33ff 	mov.w	r3, #4294967295
		type_count = nrf_cloud_agps_type_array_get(&assist, types, ARRAY_SIZE(types));
   1649a:	2209      	movs	r2, #9
		memset(&assist, 0xFF, sizeof(assist));
   1649c:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   164a0:	9311      	str	r3, [sp, #68]	; 0x44
		type_count = nrf_cloud_agps_type_array_get(&assist, types, ARRAY_SIZE(types));
   164a2:	a907      	add	r1, sp, #28
   164a4:	a80f      	add	r0, sp, #60	; 0x3c
   164a6:	e7c8      	b.n	1643a <nrf_cloud_rest_agps_data_get+0xaa>
	url_sz = sizeof(API_GET_AGPS_BASE) + strlen(rest_ctx->rx_buf);
   164a8:	6928      	ldr	r0, [r5, #16]
   164aa:	f7f2 fd48 	bl	8f3e <strlen>
   164ae:	f100 0412 	add.w	r4, r0, #18
	url = nrf_cloud_malloc(url_sz);
   164b2:	4620      	mov	r0, r4
   164b4:	f7ff f88e 	bl	155d4 <nrf_cloud_malloc>
	if (!url) {
   164b8:	4681      	mov	r9, r0
   164ba:	2800      	cmp	r0, #0
   164bc:	f000 80c1 	beq.w	16642 <nrf_cloud_rest_agps_data_get+0x2b2>
	ret = snprintk(url, url_sz, "%s%s", API_GET_AGPS_BASE, rest_ctx->rx_buf);
   164c0:	692b      	ldr	r3, [r5, #16]
   164c2:	4621      	mov	r1, r4
   164c4:	9300      	str	r3, [sp, #0]
   164c6:	4a65      	ldr	r2, [pc, #404]	; (1665c <nrf_cloud_rest_agps_data_get+0x2cc>)
   164c8:	4b65      	ldr	r3, [pc, #404]	; (16660 <nrf_cloud_rest_agps_data_get+0x2d0>)
   164ca:	f007 fe14 	bl	1e0f6 <snprintk>
	if (ret < 0 || ret >= url_sz) {
   164ce:	2800      	cmp	r0, #0
   164d0:	db01      	blt.n	164d6 <nrf_cloud_rest_agps_data_get+0x146>
   164d2:	42a0      	cmp	r0, r4
   164d4:	d30f      	bcc.n	164f6 <nrf_cloud_rest_agps_data_get+0x166>
		LOG_ERR("Could not format URL");
   164d6:	4b63      	ldr	r3, [pc, #396]	; (16664 <nrf_cloud_rest_agps_data_get+0x2d4>)
   164d8:	2201      	movs	r2, #1
   164da:	9302      	str	r3, [sp, #8]
   164dc:	2300      	movs	r3, #0
   164de:	495b      	ldr	r1, [pc, #364]	; (1664c <nrf_cloud_rest_agps_data_get+0x2bc>)
   164e0:	4618      	mov	r0, r3
   164e2:	e9cd 3300 	strd	r3, r3, [sp]
   164e6:	f009 fdc9 	bl	2007c <z_log_msg_runtime_create.constprop.0>
		ret = -ETXTBSY;
   164ea:	f06f 0419 	mvn.w	r4, #25
		nrf_cloud_free(url);
   164ee:	4648      	mov	r0, r9
   164f0:	f7ff f876 	bl	155e0 <nrf_cloud_free>
   164f4:	e775      	b.n	163e2 <nrf_cloud_rest_agps_data_get+0x52>
	ret = generate_auth_header(rest_ctx->auth, &auth_hdr);
   164f6:	68e8      	ldr	r0, [r5, #12]
   164f8:	a906      	add	r1, sp, #24
	req.url = url;
   164fa:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
	ret = generate_auth_header(rest_ctx->auth, &auth_hdr);
   164fe:	f7ff fed1 	bl	162a4 <generate_auth_header>
	if (ret) {
   16502:	4604      	mov	r4, r0
   16504:	b158      	cbz	r0, 1651e <nrf_cloud_rest_agps_data_get+0x18e>
		LOG_ERR("Could not format HTTP auth header");
   16506:	4b58      	ldr	r3, [pc, #352]	; (16668 <nrf_cloud_rest_agps_data_get+0x2d8>)
   16508:	2201      	movs	r2, #1
   1650a:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1650e:	4640      	mov	r0, r8
   16510:	4643      	mov	r3, r8
   16512:	494e      	ldr	r1, [pc, #312]	; (1664c <nrf_cloud_rest_agps_data_get+0x2bc>)
   16514:	f8cd 8000 	str.w	r8, [sp]
   16518:	f009 fdb0 	bl	2007c <z_log_msg_runtime_create.constprop.0>
		goto clean_up;
   1651c:	e7e7      	b.n	164ee <nrf_cloud_rest_agps_data_get+0x15e>
	size_t pos = 0;
   1651e:	4682      	mov	sl, r0
	size_t rcvd_bytes = 0;
   16520:	4680      	mov	r8, r0
	size_t total_bytes = 0;
   16522:	4607      	mov	r7, r0
	char *const headers[] = {
   16524:	4b51      	ldr	r3, [pc, #324]	; (1666c <nrf_cloud_rest_agps_data_get+0x2dc>)
   16526:	930a      	str	r3, [sp, #40]	; 0x28
   16528:	9b06      	ldr	r3, [sp, #24]
   1652a:	930b      	str	r3, [sp, #44]	; 0x2c
   1652c:	ab0f      	add	r3, sp, #60	; 0x3c
   1652e:	930c      	str	r3, [sp, #48]	; 0x30
   16530:	4b4f      	ldr	r3, [pc, #316]	; (16670 <nrf_cloud_rest_agps_data_get+0x2e0>)
   16532:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
	req.header_fields = (const char **)headers;
   16536:	ab0a      	add	r3, sp, #40	; 0x28
   16538:	9322      	str	r3, [sp, #136]	; 0x88
		ret = format_range_header(range_hdr, sizeof(range_hdr),
   1653a:	f10b 33ff 	add.w	r3, fp, #4294967295
   1653e:	9304      	str	r3, [sp, #16]
   16540:	9b04      	ldr	r3, [sp, #16]
	int ret = snprintk(buf, buf_sz, HDR_RANGE_BYTES_TEMPLATE, start_byte, end_byte);
   16542:	2129      	movs	r1, #41	; 0x29
		ret = format_range_header(range_hdr, sizeof(range_hdr),
   16544:	4443      	add	r3, r8
	int ret = snprintk(buf, buf_sz, HDR_RANGE_BYTES_TEMPLATE, start_byte, end_byte);
   16546:	9300      	str	r3, [sp, #0]
   16548:	4a4a      	ldr	r2, [pc, #296]	; (16674 <nrf_cloud_rest_agps_data_get+0x2e4>)
   1654a:	4643      	mov	r3, r8
   1654c:	a80f      	add	r0, sp, #60	; 0x3c
   1654e:	f007 fdd2 	bl	1e0f6 <snprintk>
	if (ret < 0 || ret >= buf_sz) {
   16552:	2828      	cmp	r0, #40	; 0x28
   16554:	f04f 0300 	mov.w	r3, #0
   16558:	d90b      	bls.n	16572 <nrf_cloud_rest_agps_data_get+0x1e2>
			LOG_ERR("Could not format range header");
   1655a:	4a47      	ldr	r2, [pc, #284]	; (16678 <nrf_cloud_rest_agps_data_get+0x2e8>)
   1655c:	4618      	mov	r0, r3
   1655e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   16562:	493a      	ldr	r1, [pc, #232]	; (1664c <nrf_cloud_rest_agps_data_get+0x2bc>)
   16564:	2201      	movs	r2, #1
   16566:	9300      	str	r3, [sp, #0]
   16568:	f009 fd88 	bl	2007c <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1656c:	f06f 0404 	mvn.w	r4, #4
			goto clean_up;
   16570:	e7bd      	b.n	164ee <nrf_cloud_rest_agps_data_get+0x15e>
		ret = do_rest_client_request(rest_ctx, &req, &resp, false, false);
   16572:	4628      	mov	r0, r5
   16574:	9300      	str	r3, [sp, #0]
   16576:	aa28      	add	r2, sp, #160	; 0xa0
   16578:	a91a      	add	r1, sp, #104	; 0x68
   1657a:	f7ff fe37 	bl	161ec <do_rest_client_request>
		if (ret) {
   1657e:	4604      	mov	r4, r0
   16580:	2800      	cmp	r0, #0
   16582:	d1b4      	bne.n	164ee <nrf_cloud_rest_agps_data_get+0x15e>
		if (rest_ctx->status != NRF_CLOUD_HTTP_STATUS_PARTIAL) {
   16584:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
   16588:	2bce      	cmp	r3, #206	; 0xce
   1658a:	d002      	beq.n	16592 <nrf_cloud_rest_agps_data_get+0x202>
			ret = -EBADMSG;
   1658c:	f06f 044c 	mvn.w	r4, #76	; 0x4c
   16590:	e7ad      	b.n	164ee <nrf_cloud_rest_agps_data_get+0x15e>
		if (total_bytes == 0) {
   16592:	2f00      	cmp	r7, #0
   16594:	d141      	bne.n	1661a <nrf_cloud_rest_agps_data_get+0x28a>
			total_bytes = get_content_range_total_bytes(rest_ctx->rx_buf);
   16596:	692b      	ldr	r3, [r5, #16]
	char *start = strstr(buf, CONTENT_RANGE_RSP);
   16598:	4938      	ldr	r1, [pc, #224]	; (1667c <nrf_cloud_rest_agps_data_get+0x2ec>)
   1659a:	4618      	mov	r0, r3
   1659c:	9305      	str	r3, [sp, #20]
   1659e:	f00b fd4c 	bl	2203a <strstr>
	if (!start) {
   165a2:	9b05      	ldr	r3, [sp, #20]
   165a4:	4607      	mov	r7, r0
   165a6:	b968      	cbnz	r0, 165c4 <nrf_cloud_rest_agps_data_get+0x234>
		start = strstr(buf, CONTENT_RANGE_RSP_MIXED_CASE);
   165a8:	4618      	mov	r0, r3
   165aa:	4935      	ldr	r1, [pc, #212]	; (16680 <nrf_cloud_rest_agps_data_get+0x2f0>)
   165ac:	f00b fd45 	bl	2203a <strstr>
	if (!start) {
   165b0:	4607      	mov	r7, r0
   165b2:	b938      	cbnz	r0, 165c4 <nrf_cloud_rest_agps_data_get+0x234>
		return -EBADMSG;
   165b4:	f06f 004c 	mvn.w	r0, #76	; 0x4c
			total_bytes = get_content_range_total_bytes(rest_ctx->rx_buf);
   165b8:	4607      	mov	r7, r0
			if (!result) {
   165ba:	b9ee      	cbnz	r6, 165f8 <nrf_cloud_rest_agps_data_get+0x268>
				if (total_bytes > frag_size) {
   165bc:	455f      	cmp	r7, fp
   165be:	bf88      	it	hi
   165c0:	4604      	movhi	r4, r0
   165c2:	e794      	b.n	164ee <nrf_cloud_rest_agps_data_get+0x15e>
	end = strchr(start, (int)CR_TOK);
   165c4:	210d      	movs	r1, #13
   165c6:	4638      	mov	r0, r7
   165c8:	f00b fcdd 	bl	21f86 <strchr>
	if (!end) {
   165cc:	b928      	cbnz	r0, 165da <nrf_cloud_rest_agps_data_get+0x24a>
		end = strchr(start, (int)LF_TOK);
   165ce:	210a      	movs	r1, #10
   165d0:	4638      	mov	r0, r7
   165d2:	f00b fcd8 	bl	21f86 <strchr>
		if (!end) {
   165d6:	2800      	cmp	r0, #0
   165d8:	d0ec      	beq.n	165b4 <nrf_cloud_rest_agps_data_get+0x224>
	*end = 0;
   165da:	2300      	movs	r3, #0
	start = strrchr(start, (int)CONTENT_RANGE_TOTAL_TOK);
   165dc:	212f      	movs	r1, #47	; 0x2f
	*end = 0;
   165de:	7003      	strb	r3, [r0, #0]
	start = strrchr(start, (int)CONTENT_RANGE_TOTAL_TOK);
   165e0:	4638      	mov	r0, r7
   165e2:	f00b fd16 	bl	22012 <strrchr>
	if (!start) {
   165e6:	2800      	cmp	r0, #0
   165e8:	d0e4      	beq.n	165b4 <nrf_cloud_rest_agps_data_get+0x224>
	return atoi(start + 1);
   165ea:	3001      	adds	r0, #1
   165ec:	f00b fb22 	bl	21c34 <atoi>
			total_bytes = get_content_range_total_bytes(rest_ctx->rx_buf);
   165f0:	4607      	mov	r7, r0
			if (total_bytes <= 0) {
   165f2:	2800      	cmp	r0, #0
   165f4:	d1e1      	bne.n	165ba <nrf_cloud_rest_agps_data_get+0x22a>
   165f6:	e7c9      	b.n	1658c <nrf_cloud_rest_agps_data_get+0x1fc>
			} else if (result->buf_sz < total_bytes) {
   165f8:	6873      	ldr	r3, [r6, #4]
   165fa:	429f      	cmp	r7, r3
   165fc:	d90d      	bls.n	1661a <nrf_cloud_rest_agps_data_get+0x28a>
				LOG_ERR("Result buffer too small for %d bytes of A-GPS data",
   165fe:	4b21      	ldr	r3, [pc, #132]	; (16684 <nrf_cloud_rest_agps_data_get+0x2f4>)
   16600:	2201      	movs	r2, #1
   16602:	9302      	str	r3, [sp, #8]
   16604:	2300      	movs	r3, #0
   16606:	4911      	ldr	r1, [pc, #68]	; (1664c <nrf_cloud_rest_agps_data_get+0x2bc>)
   16608:	4618      	mov	r0, r3
   1660a:	e9cd 3300 	strd	r3, r3, [sp]
   1660e:	9703      	str	r7, [sp, #12]
   16610:	f009 fd34 	bl	2007c <z_log_msg_runtime_create.constprop.0>
				ret = -ENOBUFS;
   16614:	f06f 0468 	mvn.w	r4, #104	; 0x68
				goto clean_up;
   16618:	e769      	b.n	164ee <nrf_cloud_rest_agps_data_get+0x15e>
		rcvd_bytes += rest_ctx->response_len;
   1661a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1661c:	4490      	add	r8, r2
		if (rcvd_bytes > total_bytes) {
   1661e:	4547      	cmp	r7, r8
   16620:	d30c      	bcc.n	1663c <nrf_cloud_rest_agps_data_get+0x2ac>
		memcpy(&result->buf[pos],
   16622:	6830      	ldr	r0, [r6, #0]
   16624:	6a29      	ldr	r1, [r5, #32]
   16626:	4450      	add	r0, sl
   16628:	f00b fb26 	bl	21c78 <memcpy>
		pos += rest_ctx->response_len;
   1662c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	} while (remain);
   1662e:	4547      	cmp	r7, r8
		pos += rest_ctx->response_len;
   16630:	449a      	add	sl, r3
	} while (remain);
   16632:	d185      	bne.n	16540 <nrf_cloud_rest_agps_data_get+0x1b0>
	result->agps_sz = total_bytes;
   16634:	60b7      	str	r7, [r6, #8]
	return z_impl_k_uptime_ticks();
   16636:	f00b f94d 	bl	218d4 <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   1663a:	e758      	b.n	164ee <nrf_cloud_rest_agps_data_get+0x15e>
			ret = -EFBIG;
   1663c:	f06f 041a 	mvn.w	r4, #26
   16640:	e755      	b.n	164ee <nrf_cloud_rest_agps_data_get+0x15e>
		ret = -ENOMEM;
   16642:	f06f 040b 	mvn.w	r4, #11
   16646:	e6cc      	b.n	163e2 <nrf_cloud_rest_agps_data_get+0x52>
   16648:	000274bd 	.word	0x000274bd
   1664c:	0002302c 	.word	0x0002302c
   16650:	000274ed 	.word	0x000274ed
   16654:	00027503 	.word	0x00027503
   16658:	0002752c 	.word	0x0002752c
   1665c:	0002651e 	.word	0x0002651e
   16660:	0002754f 	.word	0x0002754f
   16664:	0002744a 	.word	0x0002744a
   16668:	0002745f 	.word	0x0002745f
   1666c:	00027561 	.word	0x00027561
   16670:	0002756f 	.word	0x0002756f
   16674:	00027598 	.word	0x00027598
   16678:	000275ad 	.word	0x000275ad
   1667c:	000275cb 	.word	0x000275cb
   16680:	000275e0 	.word	0x000275e0
   16684:	000275f5 	.word	0x000275f5

00016688 <rest_client_http_response_cb>:
#define HTTP_PROTOCOL "HTTP/1.1"

static void rest_client_http_response_cb(struct http_response *rsp,
					  enum http_final_call final_data,
					  void *user_data)
{
   16688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct rest_client_resp_context *resp_ctx = NULL;

	if (user_data) {
   1668a:	4613      	mov	r3, r2
   1668c:	b962      	cbnz	r2, 166a8 <rest_client_http_response_cb+0x20>
		resp_ctx->total_response_len += rsp->data_len;
	}

	if (final_data == HTTP_DATA_MORE) {
		LOG_DBG("Partial data received(%zd bytes)", rsp->data_len);
	} else if (final_data == HTTP_DATA_FINAL) {
   1668e:	2901      	cmp	r1, #1
   16690:	d108      	bne.n	166a4 <rest_client_http_response_cb+0x1c>
		if (!resp_ctx) {
			LOG_WRN("REST response context not provided");
   16692:	4a14      	ldr	r2, [pc, #80]	; (166e4 <rest_client_http_response_cb+0x5c>)
   16694:	4618      	mov	r0, r3
   16696:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1669a:	4913      	ldr	r1, [pc, #76]	; (166e8 <rest_client_http_response_cb+0x60>)
   1669c:	2202      	movs	r2, #2
   1669e:	9300      	str	r3, [sp, #0]
   166a0:	f009 fd01 	bl	200a6 <z_log_msg_runtime_create.constprop.0>
			resp_ctx->response_len,
			resp_ctx->total_response_len,
			rsp->http_status_code,
			rsp->http_status);
	}
}
   166a4:	b004      	add	sp, #16
   166a6:	bd10      	pop	{r4, pc}
		if (!resp_ctx->response && rsp->body_found && rsp->body_frag_start) {
   166a8:	6892      	ldr	r2, [r2, #8]
   166aa:	b932      	cbnz	r2, 166ba <rest_client_http_response_cb+0x32>
   166ac:	f890 2046 	ldrb.w	r2, [r0, #70]	; 0x46
   166b0:	0792      	lsls	r2, r2, #30
   166b2:	d502      	bpl.n	166ba <rest_client_http_response_cb+0x32>
   166b4:	6882      	ldr	r2, [r0, #8]
   166b6:	b102      	cbz	r2, 166ba <rest_client_http_response_cb+0x32>
			resp_ctx->response = rsp->body_frag_start;
   166b8:	609a      	str	r2, [r3, #8]
		resp_ctx->total_response_len += rsp->data_len;
   166ba:	681a      	ldr	r2, [r3, #0]
   166bc:	6984      	ldr	r4, [r0, #24]
	} else if (final_data == HTTP_DATA_FINAL) {
   166be:	2901      	cmp	r1, #1
		resp_ctx->total_response_len += rsp->data_len;
   166c0:	4422      	add	r2, r4
   166c2:	601a      	str	r2, [r3, #0]
	} else if (final_data == HTTP_DATA_FINAL) {
   166c4:	d1ee      	bne.n	166a4 <rest_client_http_response_cb+0x1c>
		resp_ctx->http_status_code = rsp->http_status_code;
   166c6:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   166ca:	f100 0124 	add.w	r1, r0, #36	; 0x24
   166ce:	819a      	strh	r2, [r3, #12]
		resp_ctx->response_len = rsp->processed;
   166d0:	6a02      	ldr	r2, [r0, #32]
   166d2:	f103 000e 	add.w	r0, r3, #14
   166d6:	605a      	str	r2, [r3, #4]
}
   166d8:	b004      	add	sp, #16
   166da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   166de:	f00b bc5f 	b.w	21fa0 <strcpy>
   166e2:	bf00      	nop
   166e4:	000276b7 	.word	0x000276b7
   166e8:	0002304c 	.word	0x0002304c

000166ec <rest_client_request>:
	}
}

int rest_client_request(struct rest_client_req_context *req_ctx,
			struct rest_client_resp_context *resp_ctx)
{
   166ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166f0:	4604      	mov	r4, r0
   166f2:	b0e7      	sub	sp, #412	; 0x19c
   166f4:	460e      	mov	r6, r1
	memset(req, 0, sizeof(struct http_request));
   166f6:	22d8      	movs	r2, #216	; 0xd8
   166f8:	2100      	movs	r1, #0
   166fa:	a830      	add	r0, sp, #192	; 0xc0
   166fc:	f00b fae3 	bl	21cc6 <memset>
	req->host = req_ctx->host;
   16700:	6963      	ldr	r3, [r4, #20]
	LOG_DBG("Requesting destination HOST: %s at port %d, URL: %s",
		req_ctx->host, req_ctx->port, http_req.url);

	http_req.header_fields = req_ctx->header_fields;

	if (req_ctx->body != NULL) {
   16702:	6a60      	ldr	r0, [r4, #36]	; 0x24
	req->host = req_ctx->host;
   16704:	9304      	str	r3, [sp, #16]
   16706:	935f      	str	r3, [sp, #380]	; 0x17c
	req->protocol = HTTP_PROTOCOL;
   16708:	4ba4      	ldr	r3, [pc, #656]	; (1699c <rest_client_request+0x2b0>)
   1670a:	935c      	str	r3, [sp, #368]	; 0x170
	req->response = rest_client_http_response_cb;
   1670c:	4ba4      	ldr	r3, [pc, #656]	; (169a0 <rest_client_request+0x2b4>)
   1670e:	9357      	str	r3, [sp, #348]	; 0x15c
	req->method = req_ctx->http_method;
   16710:	7c23      	ldrb	r3, [r4, #16]
   16712:	f88d 3158 	strb.w	r3, [sp, #344]	; 0x158
	http_req.url = req_ctx->url;
   16716:	69e3      	ldr	r3, [r4, #28]
   16718:	935b      	str	r3, [sp, #364]	; 0x16c
	http_req.header_fields = req_ctx->header_fields;
   1671a:	6a23      	ldr	r3, [r4, #32]
   1671c:	935d      	str	r3, [sp, #372]	; 0x174
	if (req_ctx->body != NULL) {
   1671e:	b130      	cbz	r0, 1672e <rest_client_request+0x42>
		http_req.payload = req_ctx->body;
		http_req.payload_len =
			req_ctx->body_len ? req_ctx->body_len : strlen(http_req.payload);
   16720:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		http_req.payload = req_ctx->body;
   16722:	9062      	str	r0, [sp, #392]	; 0x188
			req_ctx->body_len ? req_ctx->body_len : strlen(http_req.payload);
   16724:	b913      	cbnz	r3, 1672c <rest_client_request+0x40>
   16726:	f7f2 fc0a 	bl	8f3e <strlen>
   1672a:	4603      	mov	r3, r0
		http_req.payload_len =
   1672c:	9363      	str	r3, [sp, #396]	; 0x18c
	if (req_ctx->connect_socket < 0) {
   1672e:	6823      	ldr	r3, [r4, #0]
   16730:	2b00      	cmp	r3, #0
   16732:	f280 81ce 	bge.w	16ad2 <rest_client_request+0x3e6>
		err = rest_client_sckt_connect(&req_ctx->connect_socket,
   16736:	e9d4 8b02 	ldrd	r8, fp, [r4, #8]
	char portstr[6] = { 0 };
   1673a:	2500      	movs	r5, #0
	struct addrinfo hints = {
   1673c:	2250      	movs	r2, #80	; 0x50
   1673e:	4629      	mov	r1, r5
   16740:	a81c      	add	r0, sp, #112	; 0x70
		err = rest_client_sckt_connect(&req_ctx->connect_socket,
   16742:	8b27      	ldrh	r7, [r4, #24]
	char portstr[6] = { 0 };
   16744:	950a      	str	r5, [sp, #40]	; 0x28
   16746:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	struct addrinfo hints = {
   1674a:	f00b fabc 	bl	21cc6 <memset>
   1674e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   16752:	931d      	str	r3, [sp, #116]	; 0x74
   16754:	2301      	movs	r3, #1
   16756:	931f      	str	r3, [sp, #124]	; 0x7c
   16758:	f00b f8bc 	bl	218d4 <z_impl_k_uptime_ticks>
   1675c:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
   16760:	fba0 0309 	umull	r0, r3, r0, r9
   16764:	fb09 3101 	mla	r1, r9, r1, r3
   16768:	0bcb      	lsrs	r3, r1, #15
   1676a:	9305      	str	r3, [sp, #20]
	*fd = -1;
   1676c:	f04f 33ff 	mov.w	r3, #4294967295
   16770:	ea4f 3ad0 	mov.w	sl, r0, lsr #15
	snprintf(portstr, 6, "%d", port_num);
   16774:	4a8b      	ldr	r2, [pc, #556]	; (169a4 <rest_client_request+0x2b8>)
	*fd = -1;
   16776:	6023      	str	r3, [r4, #0]
   16778:	ea4a 4a41 	orr.w	sl, sl, r1, lsl #17
	snprintf(portstr, 6, "%d", port_num);
   1677c:	463b      	mov	r3, r7
   1677e:	2106      	movs	r1, #6
   16780:	a80a      	add	r0, sp, #40	; 0x28
   16782:	f005 fbe3 	bl	1bf4c <sniprintf>
	return zsock_getaddrinfo(host, service, hints, res);
   16786:	9804      	ldr	r0, [sp, #16]
   16788:	ab08      	add	r3, sp, #32
   1678a:	aa1c      	add	r2, sp, #112	; 0x70
   1678c:	a90a      	add	r1, sp, #40	; 0x28
   1678e:	f008 f885 	bl	1e89c <zsock_getaddrinfo>
	if (ret) {
   16792:	4607      	mov	r7, r0
   16794:	2800      	cmp	r0, #0
   16796:	d036      	beq.n	16806 <rest_client_request+0x11a>
		LOG_ERR("getaddrinfo() failed, error: %d", ret);
   16798:	4b83      	ldr	r3, [pc, #524]	; (169a8 <rest_client_request+0x2bc>)
   1679a:	9003      	str	r0, [sp, #12]
   1679c:	e9cd 5301 	strd	r5, r3, [sp, #4]
   167a0:	4628      	mov	r0, r5
   167a2:	462b      	mov	r3, r5
   167a4:	9500      	str	r5, [sp, #0]
   167a6:	2201      	movs	r2, #1
   167a8:	4980      	ldr	r1, [pc, #512]	; (169ac <rest_client_request+0x2c0>)
   167aa:	f009 fc7c 	bl	200a6 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   167ae:	f06f 050d 	mvn.w	r5, #13
		}
	}

	ret = rest_client_do_api_call(&http_req, req_ctx, resp_ctx);
	if (ret) {
		LOG_ERR("rest_client_do_api_call() failed, err %d", ret);
   167b2:	4b7f      	ldr	r3, [pc, #508]	; (169b0 <rest_client_request+0x2c4>)
   167b4:	2201      	movs	r2, #1
   167b6:	9302      	str	r3, [sp, #8]
   167b8:	2300      	movs	r3, #0
   167ba:	497c      	ldr	r1, [pc, #496]	; (169ac <rest_client_request+0x2c0>)
   167bc:	4618      	mov	r0, r3
   167be:	e9cd 3300 	strd	r3, r3, [sp]
   167c2:	9503      	str	r5, [sp, #12]
   167c4:	f009 fc6f 	bl	200a6 <z_log_msg_runtime_create.constprop.0>
	}
	LOG_DBG("API call response len: http status: %d, %u bytes", resp_ctx->http_status_code,
		resp_ctx->response_len);

clean_up:
	if (req_ctx->connect_socket != REST_CLIENT_SCKT_CONNECT) {
   167c8:	6820      	ldr	r0, [r4, #0]
   167ca:	1c43      	adds	r3, r0, #1
   167cc:	d017      	beq.n	167fe <rest_client_request+0x112>
	if (!req_ctx->keep_alive) {
   167ce:	7927      	ldrb	r7, [r4, #4]
   167d0:	2f00      	cmp	r7, #0
   167d2:	f040 81e9 	bne.w	16ba8 <rest_client_request+0x4bc>
   167d6:	f008 f895 	bl	1e904 <z_impl_zsock_close>
		if (ret) {
   167da:	b168      	cbz	r0, 167f8 <rest_client_request+0x10c>
			LOG_WRN("Failed to close socket, error: %d", errno);
   167dc:	f008 fa60 	bl	1eca0 <__errno>
   167e0:	6803      	ldr	r3, [r0, #0]
   167e2:	2202      	movs	r2, #2
   167e4:	9303      	str	r3, [sp, #12]
   167e6:	4b73      	ldr	r3, [pc, #460]	; (169b4 <rest_client_request+0x2c8>)
   167e8:	4638      	mov	r0, r7
   167ea:	e9cd 7301 	strd	r7, r3, [sp, #4]
   167ee:	496f      	ldr	r1, [pc, #444]	; (169ac <rest_client_request+0x2c0>)
   167f0:	463b      	mov	r3, r7
   167f2:	9700      	str	r7, [sp, #0]
   167f4:	f009 fc57 	bl	200a6 <z_log_msg_runtime_create.constprop.0>
		req_ctx->connect_socket = REST_CLIENT_SCKT_CONNECT;
   167f8:	f04f 33ff 	mov.w	r3, #4294967295
   167fc:	6023      	str	r3, [r4, #0]
		/* Socket was not closed yet: */
		rest_client_close_connection(req_ctx, resp_ctx);
	}
	return ret;
}
   167fe:	4628      	mov	r0, r5
   16800:	b067      	add	sp, #412	; 0x19c
   16802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sa = addr_info->ai_addr;
   16806:	9b08      	ldr	r3, [sp, #32]
	inet_ntop(sa->sa_family,
   16808:	6999      	ldr	r1, [r3, #24]
   1680a:	f831 0b04 	ldrh.w	r0, [r1], #4
		union { uintptr_t x; size_t val; } parm3 = { .val = size };
		return (char *) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   1680e:	232e      	movs	r3, #46	; 0x2e
   16810:	aa10      	add	r2, sp, #64	; 0x40
   16812:	f7f7 ffdb 	bl	e7cc <z_impl_net_addr_ntop>
	if (*timeout_ms != SYS_FOREVER_MS) {
   16816:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   16818:	3301      	adds	r3, #1
   1681a:	d021      	beq.n	16860 <rest_client_request+0x174>
   1681c:	f00b f85a 	bl	218d4 <z_impl_k_uptime_ticks>
   16820:	fba0 5309 	umull	r5, r3, r0, r9
   16824:	fb09 3101 	mla	r1, r9, r1, r3
   16828:	0bed      	lsrs	r5, r5, #15
		time_used = k_uptime_get() - sckt_connect_start_time;
   1682a:	9b05      	ldr	r3, [sp, #20]
   1682c:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   16830:	ebb5 050a 	subs.w	r5, r5, sl
   16834:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   16838:	eb61 0103 	sbc.w	r1, r1, r3
		if (time_used >= *timeout_ms) {
   1683c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1683e:	17da      	asrs	r2, r3, #31
   16840:	429d      	cmp	r5, r3
   16842:	4191      	sbcs	r1, r2
   16844:	db0d      	blt.n	16862 <rest_client_request+0x176>
			LOG_WRN("Timeout occurred during DNS query");
   16846:	4b5c      	ldr	r3, [pc, #368]	; (169b8 <rest_client_request+0x2cc>)
   16848:	9700      	str	r7, [sp, #0]
   1684a:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1684e:	463b      	mov	r3, r7
			LOG_WRN("Timeout occurred during socket connect");
   16850:	2202      	movs	r2, #2
   16852:	4618      	mov	r0, r3
   16854:	4955      	ldr	r1, [pc, #340]	; (169ac <rest_client_request+0x2c0>)
   16856:	f009 fc26 	bl	200a6 <z_log_msg_runtime_create.constprop.0>
			return -ETIMEDOUT;
   1685a:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1685e:	e7a8      	b.n	167b2 <rest_client_request+0xc6>
	int64_t time_used = 0;
   16860:	463d      	mov	r5, r7
	*fd = socket(addr_info->ai_family, SOCK_STREAM, proto);
   16862:	9b08      	ldr	r3, [sp, #32]
	proto = (sec_tag == REST_CLIENT_SEC_TAG_NO_SEC) ? IPPROTO_TCP : IPPROTO_TLS_1_2;
   16864:	f1b8 3fff 	cmp.w	r8, #4294967295
   16868:	bf0c      	ite	eq
   1686a:	2206      	moveq	r2, #6
   1686c:	f44f 7281 	movne.w	r2, #258	; 0x102
	*fd = socket(addr_info->ai_family, SOCK_STREAM, proto);
   16870:	6898      	ldr	r0, [r3, #8]
	return z_impl_zsock_socket(family, type, proto);
   16872:	2101      	movs	r1, #1
   16874:	f7f6 ffac 	bl	d7d0 <z_impl_zsock_socket>
	if (*fd == -1) {
   16878:	1c42      	adds	r2, r0, #1
   1687a:	4607      	mov	r7, r0
	*fd = socket(addr_info->ai_family, SOCK_STREAM, proto);
   1687c:	6020      	str	r0, [r4, #0]
	if (*fd == -1) {
   1687e:	d11b      	bne.n	168b8 <rest_client_request+0x1cc>
		LOG_ERR("Failed to open socket, error: %d", errno);
   16880:	f008 fa0e 	bl	1eca0 <__errno>
   16884:	6803      	ldr	r3, [r0, #0]
   16886:	2201      	movs	r2, #1
   16888:	9303      	str	r3, [sp, #12]
   1688a:	4b4c      	ldr	r3, [pc, #304]	; (169bc <rest_client_request+0x2d0>)
   1688c:	4947      	ldr	r1, [pc, #284]	; (169ac <rest_client_request+0x2c0>)
   1688e:	9302      	str	r3, [sp, #8]
   16890:	2300      	movs	r3, #0
   16892:	4618      	mov	r0, r3
   16894:	e9cd 3300 	strd	r3, r3, [sp]
   16898:	f009 fc05 	bl	200a6 <z_log_msg_runtime_create.constprop.0>
	zsock_freeaddrinfo(ai);
   1689c:	9808      	ldr	r0, [sp, #32]
   1689e:	f007 ffff 	bl	1e8a0 <zsock_freeaddrinfo>
		ret = -ENOTCONN;
   168a2:	f06f 057f 	mvn.w	r5, #127	; 0x7f
		if (*fd > -1) {
   168a6:	6820      	ldr	r0, [r4, #0]
   168a8:	2800      	cmp	r0, #0
   168aa:	db82      	blt.n	167b2 <rest_client_request+0xc6>
	return z_impl_zsock_close(sock);
   168ac:	f008 f82a 	bl	1e904 <z_impl_zsock_close>
			*fd = -1;
   168b0:	f04f 33ff 	mov.w	r3, #4294967295
   168b4:	6023      	str	r3, [r4, #0]
		if (err) {
   168b6:	e77c      	b.n	167b2 <rest_client_request+0xc6>
	if (sec_tag >= 0) {
   168b8:	f1b8 0f00 	cmp.w	r8, #0
   168bc:	f2c0 8088 	blt.w	169d0 <rest_client_request+0x2e4>
		verify = tls_peer_verify;
   168c0:	f1bb 0f02 	cmp.w	fp, #2
   168c4:	bf94      	ite	ls
   168c6:	465b      	movls	r3, fp
   168c8:	2302      	movhi	r3, #2
	const sec_tag_t tls_sec_tag[] = {
   168ca:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
		verify = tls_peer_verify;
   168ce:	9309      	str	r3, [sp, #36]	; 0x24
		union { uintptr_t x; socklen_t val; } parm4 = { .val = optlen };
		return (int) arch_syscall_invoke5(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   168d0:	f04f 0904 	mov.w	r9, #4
   168d4:	2205      	movs	r2, #5
   168d6:	f44f 718d 	mov.w	r1, #282	; 0x11a
   168da:	f8cd 9000 	str.w	r9, [sp]
   168de:	ab09      	add	r3, sp, #36	; 0x24
   168e0:	f008 f8e5 	bl	1eaae <z_impl_zsock_setsockopt>
	if (err) {
   168e4:	4680      	mov	r8, r0
   168e6:	b198      	cbz	r0, 16910 <rest_client_request+0x224>
		LOG_ERR("Failed to setup peer verification, error: %d", errno);
   168e8:	f008 f9da 	bl	1eca0 <__errno>
   168ec:	6803      	ldr	r3, [r0, #0]
   168ee:	9303      	str	r3, [sp, #12]
   168f0:	4b33      	ldr	r3, [pc, #204]	; (169c0 <rest_client_request+0x2d4>)
   168f2:	9302      	str	r3, [sp, #8]
   168f4:	2300      	movs	r3, #0
   168f6:	e9cd 3300 	strd	r3, r3, [sp]
   168fa:	4618      	mov	r0, r3
   168fc:	2201      	movs	r2, #1
   168fe:	492b      	ldr	r1, [pc, #172]	; (169ac <rest_client_request+0x2c0>)
   16900:	f009 fbd1 	bl	200a6 <z_log_msg_runtime_create.constprop.0>
   16904:	9808      	ldr	r0, [sp, #32]
   16906:	f007 ffcb 	bl	1e8a0 <zsock_freeaddrinfo>
			ret = -EACCES;
   1690a:	f06f 050c 	mvn.w	r5, #12
   1690e:	e7ca      	b.n	168a6 <rest_client_request+0x1ba>
   16910:	2201      	movs	r2, #1
   16912:	f8cd 9000 	str.w	r9, [sp]
   16916:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1691a:	4638      	mov	r0, r7
   1691c:	ab0c      	add	r3, sp, #48	; 0x30
   1691e:	f008 f8c6 	bl	1eaae <z_impl_zsock_setsockopt>
	if (err) {
   16922:	4681      	mov	r9, r0
   16924:	b150      	cbz	r0, 1693c <rest_client_request+0x250>
		LOG_ERR("Failed to setup TLS sec tag, error: %d", errno);
   16926:	f008 f9bb 	bl	1eca0 <__errno>
   1692a:	6803      	ldr	r3, [r0, #0]
   1692c:	9303      	str	r3, [sp, #12]
   1692e:	4b25      	ldr	r3, [pc, #148]	; (169c4 <rest_client_request+0x2d8>)
			LOG_ERR("Failed to setup TLS hostname, error: %d", errno);
   16930:	e9cd 8301 	strd	r8, r3, [sp, #4]
   16934:	f8cd 8000 	str.w	r8, [sp]
   16938:	4643      	mov	r3, r8
   1693a:	e7de      	b.n	168fa <rest_client_request+0x20e>
		cache = TLS_SESSION_CACHE_ENABLED;
   1693c:	f04f 0b01 	mov.w	fp, #1
   16940:	f88d b01f 	strb.w	fp, [sp, #31]
   16944:	220c      	movs	r2, #12
   16946:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1694a:	4638      	mov	r0, r7
   1694c:	f8cd b000 	str.w	fp, [sp]
   16950:	f10d 031f 	add.w	r3, sp, #31
   16954:	f008 f8ab 	bl	1eaae <z_impl_zsock_setsockopt>
	if (err) {
   16958:	4680      	mov	r8, r0
   1695a:	b150      	cbz	r0, 16972 <rest_client_request+0x286>
		LOG_ERR("Unable to set session cache, errno %d", errno);
   1695c:	f008 f9a0 	bl	1eca0 <__errno>
   16960:	6803      	ldr	r3, [r0, #0]
   16962:	f8cd 9000 	str.w	r9, [sp]
   16966:	9303      	str	r3, [sp, #12]
   16968:	4b17      	ldr	r3, [pc, #92]	; (169c8 <rest_client_request+0x2dc>)
   1696a:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1696e:	464b      	mov	r3, r9
   16970:	e7c3      	b.n	168fa <rest_client_request+0x20e>
	if (tls_hostname) {
   16972:	9b04      	ldr	r3, [sp, #16]
   16974:	b363      	cbz	r3, 169d0 <rest_client_request+0x2e4>
		err = setsockopt(fd, SOL_TLS, TLS_HOSTNAME, tls_hostname, strlen(tls_hostname));
   16976:	4618      	mov	r0, r3
   16978:	f7f2 fae1 	bl	8f3e <strlen>
   1697c:	2202      	movs	r2, #2
   1697e:	9000      	str	r0, [sp, #0]
   16980:	f44f 718d 	mov.w	r1, #282	; 0x11a
   16984:	4638      	mov	r0, r7
   16986:	9b04      	ldr	r3, [sp, #16]
   16988:	f008 f891 	bl	1eaae <z_impl_zsock_setsockopt>
		if (err) {
   1698c:	b300      	cbz	r0, 169d0 <rest_client_request+0x2e4>
			LOG_ERR("Failed to setup TLS hostname, error: %d", errno);
   1698e:	f008 f987 	bl	1eca0 <__errno>
   16992:	6803      	ldr	r3, [r0, #0]
   16994:	9303      	str	r3, [sp, #12]
   16996:	4b0d      	ldr	r3, [pc, #52]	; (169cc <rest_client_request+0x2e0>)
   16998:	e7ca      	b.n	16930 <rest_client_request+0x244>
   1699a:	bf00      	nop
   1699c:	000276da 	.word	0x000276da
   169a0:	00016689 	.word	0x00016689
   169a4:	00026a28 	.word	0x00026a28
   169a8:	000276e3 	.word	0x000276e3
   169ac:	0002304c 	.word	0x0002304c
   169b0:	00027902 	.word	0x00027902
   169b4:	00027413 	.word	0x00027413
   169b8:	00027703 	.word	0x00027703
   169bc:	00027725 	.word	0x00027725
   169c0:	00027746 	.word	0x00027746
   169c4:	00027773 	.word	0x00027773
   169c8:	0002779a 	.word	0x0002779a
   169cc:	000277c0 	.word	0x000277c0
	struct timeval timeout = { 0 };
   169d0:	f04f 0910 	mov.w	r9, #16
	ret = rest_client_sckt_timeouts_set(*fd, *timeout_ms - time_used);
   169d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	struct timeval timeout = { 0 };
   169d6:	464a      	mov	r2, r9
	ret = rest_client_sckt_timeouts_set(*fd, *timeout_ms - time_used);
   169d8:	1b5d      	subs	r5, r3, r5
	struct timeval timeout = { 0 };
   169da:	2100      	movs	r1, #0
   169dc:	a80c      	add	r0, sp, #48	; 0x30
	ret = rest_client_sckt_timeouts_set(*fd, *timeout_ms - time_used);
   169de:	f8d4 8000 	ldr.w	r8, [r4]
	struct timeval timeout = { 0 };
   169e2:	f00b f970 	bl	21cc6 <memset>
	if (timeout_ms != SYS_FOREVER_MS && timeout_ms > 0) {
   169e6:	2d00      	cmp	r5, #0
   169e8:	dc22      	bgt.n	16a30 <rest_client_request+0x344>
	ret = connect(*fd, addr_info->ai_addr, addr_info->ai_addrlen);
   169ea:	9b08      	ldr	r3, [sp, #32]
   169ec:	6820      	ldr	r0, [r4, #0]
   169ee:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	return z_impl_zsock_connect(sock, addr, addrlen);
   169f2:	f007 ffab 	bl	1e94c <z_impl_zsock_connect>
	if (ret) {
   169f6:	4605      	mov	r5, r0
   169f8:	2800      	cmp	r0, #0
   169fa:	d064      	beq.n	16ac6 <rest_client_request+0x3da>
		LOG_ERR("Failed to connect socket, error: %d", errno);
   169fc:	f008 f950 	bl	1eca0 <__errno>
   16a00:	6803      	ldr	r3, [r0, #0]
   16a02:	2201      	movs	r2, #1
   16a04:	9303      	str	r3, [sp, #12]
   16a06:	4b70      	ldr	r3, [pc, #448]	; (16bc8 <rest_client_request+0x4dc>)
   16a08:	4970      	ldr	r1, [pc, #448]	; (16bcc <rest_client_request+0x4e0>)
   16a0a:	9302      	str	r3, [sp, #8]
   16a0c:	2300      	movs	r3, #0
   16a0e:	4618      	mov	r0, r3
   16a10:	e9cd 3300 	strd	r3, r3, [sp]
   16a14:	f009 fb47 	bl	200a6 <z_log_msg_runtime_create.constprop.0>
		if (errno == ETIMEDOUT) {
   16a18:	f008 f942 	bl	1eca0 <__errno>
   16a1c:	6803      	ldr	r3, [r0, #0]
   16a1e:	9808      	ldr	r0, [sp, #32]
   16a20:	2b74      	cmp	r3, #116	; 0x74
   16a22:	f040 809b 	bne.w	16b5c <rest_client_request+0x470>
   16a26:	f007 ff3b 	bl	1e8a0 <zsock_freeaddrinfo>
			ret = -ETIMEDOUT;
   16a2a:	f06f 0573 	mvn.w	r5, #115	; 0x73
   16a2e:	e73a      	b.n	168a6 <rest_client_request+0x1ba>
		timeout.tv_sec = timeout_ms / MSEC_PER_SEC;
   16a30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16a34:	fbb5 f2f3 	udiv	r2, r5, r3
   16a38:	2700      	movs	r7, #0
		timeout.tv_usec = (timeout_ms % MSEC_PER_SEC) * USEC_PER_MSEC;
   16a3a:	fb03 5512 	mls	r5, r3, r2, r5
   16a3e:	435d      	muls	r5, r3
		timeout.tv_sec = timeout_ms / MSEC_PER_SEC;
   16a40:	e9cd 270c 	strd	r2, r7, [sp, #48]	; 0x30
		timeout.tv_usec = (timeout_ms % MSEC_PER_SEC) * USEC_PER_MSEC;
   16a44:	950e      	str	r5, [sp, #56]	; 0x38
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   16a46:	2215      	movs	r2, #21
   16a48:	2101      	movs	r1, #1
   16a4a:	4640      	mov	r0, r8
   16a4c:	f8cd 9000 	str.w	r9, [sp]
   16a50:	ab0c      	add	r3, sp, #48	; 0x30
   16a52:	f008 f82c 	bl	1eaae <z_impl_zsock_setsockopt>
		if (err) {
   16a56:	4605      	mov	r5, r0
   16a58:	b308      	cbz	r0, 16a9e <rest_client_request+0x3b2>
			LOG_ERR("Failed to set socket send timeout, error: %d", errno);
   16a5a:	f008 f921 	bl	1eca0 <__errno>
   16a5e:	6803      	ldr	r3, [r0, #0]
   16a60:	9700      	str	r7, [sp, #0]
   16a62:	9303      	str	r3, [sp, #12]
   16a64:	4b5a      	ldr	r3, [pc, #360]	; (16bd0 <rest_client_request+0x4e4>)
   16a66:	e9cd 7301 	strd	r7, r3, [sp, #4]
   16a6a:	463b      	mov	r3, r7
			LOG_ERR("Failed to set socket recv timeout, error: %d", errno);
   16a6c:	2201      	movs	r2, #1
   16a6e:	4618      	mov	r0, r3
   16a70:	4956      	ldr	r1, [pc, #344]	; (16bcc <rest_client_request+0x4e0>)
   16a72:	f009 fb18 	bl	200a6 <z_log_msg_runtime_create.constprop.0>
		LOG_ERR("Failed to set socket timeouts, error: %d", errno);
   16a76:	f008 f913 	bl	1eca0 <__errno>
   16a7a:	6803      	ldr	r3, [r0, #0]
   16a7c:	2201      	movs	r2, #1
   16a7e:	9303      	str	r3, [sp, #12]
   16a80:	4b54      	ldr	r3, [pc, #336]	; (16bd4 <rest_client_request+0x4e8>)
   16a82:	4952      	ldr	r1, [pc, #328]	; (16bcc <rest_client_request+0x4e0>)
   16a84:	9302      	str	r3, [sp, #8]
   16a86:	2300      	movs	r3, #0
   16a88:	4618      	mov	r0, r3
   16a8a:	e9cd 3300 	strd	r3, r3, [sp]
   16a8e:	f009 fb0a 	bl	200a6 <z_log_msg_runtime_create.constprop.0>
   16a92:	9808      	ldr	r0, [sp, #32]
   16a94:	f007 ff04 	bl	1e8a0 <zsock_freeaddrinfo>
		ret = -EINVAL;
   16a98:	f06f 0515 	mvn.w	r5, #21
   16a9c:	e703      	b.n	168a6 <rest_client_request+0x1ba>
   16a9e:	2214      	movs	r2, #20
   16aa0:	2101      	movs	r1, #1
   16aa2:	4640      	mov	r0, r8
   16aa4:	f8cd 9000 	str.w	r9, [sp]
   16aa8:	ab0c      	add	r3, sp, #48	; 0x30
   16aaa:	f008 f800 	bl	1eaae <z_impl_zsock_setsockopt>
		if (err) {
   16aae:	2800      	cmp	r0, #0
   16ab0:	d09b      	beq.n	169ea <rest_client_request+0x2fe>
			LOG_ERR("Failed to set socket recv timeout, error: %d", errno);
   16ab2:	f008 f8f5 	bl	1eca0 <__errno>
   16ab6:	6803      	ldr	r3, [r0, #0]
   16ab8:	9500      	str	r5, [sp, #0]
   16aba:	9303      	str	r3, [sp, #12]
   16abc:	4b46      	ldr	r3, [pc, #280]	; (16bd8 <rest_client_request+0x4ec>)
   16abe:	e9cd 5301 	strd	r5, r3, [sp, #4]
   16ac2:	462b      	mov	r3, r5
   16ac4:	e7d2      	b.n	16a6c <rest_client_request+0x380>
	if (*timeout_ms != SYS_FOREVER_MS) {
   16ac6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   16ac8:	3301      	adds	r3, #1
   16aca:	d127      	bne.n	16b1c <rest_client_request+0x430>
   16acc:	9808      	ldr	r0, [sp, #32]
   16ace:	f007 fee7 	bl	1e8a0 <zsock_freeaddrinfo>
	resp_ctx->response = NULL;
   16ad2:	2700      	movs	r7, #0
	http_req->recv_buf_len = req_ctx->resp_buff_len;
   16ad4:	6b62      	ldr	r2, [r4, #52]	; 0x34
	http_req->recv_buf = req_ctx->resp_buff;
   16ad6:	6b20      	ldr	r0, [r4, #48]	; 0x30
__ssp_bos_icheck3(memset, void *, int)
   16ad8:	2100      	movs	r1, #0
	http_req->recv_buf_len = req_ctx->resp_buff_len;
   16ada:	925a      	str	r2, [sp, #360]	; 0x168
	http_req->recv_buf = req_ctx->resp_buff;
   16adc:	9059      	str	r0, [sp, #356]	; 0x164
   16ade:	f00b f8f2 	bl	21cc6 <memset>
	resp_ctx->response_len = 0;
   16ae2:	e9c6 7701 	strd	r7, r7, [r6, #4]
	--http_req->recv_buf_len;
   16ae6:	9b5a      	ldr	r3, [sp, #360]	; 0x168
	resp_ctx->total_response_len = 0;
   16ae8:	6037      	str	r7, [r6, #0]
	--http_req->recv_buf_len;
   16aea:	3b01      	subs	r3, #1
   16aec:	935a      	str	r3, [sp, #360]	; 0x168
	resp_ctx->used_socket_id = req_ctx->connect_socket;
   16aee:	6823      	ldr	r3, [r4, #0]
	resp_ctx->http_status_code_str[0] = '\0';
   16af0:	73b7      	strb	r7, [r6, #14]
	resp_ctx->used_socket_id = req_ctx->connect_socket;
   16af2:	6333      	str	r3, [r6, #48]	; 0x30
	err = http_client_req(req_ctx->connect_socket, http_req, req_ctx->timeout_ms, resp_ctx);
   16af4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   16af6:	4633      	mov	r3, r6
   16af8:	6820      	ldr	r0, [r4, #0]
   16afa:	a930      	add	r1, sp, #192	; 0xc0
   16afc:	f7f9 fa32 	bl	ff64 <http_client_req>
	if (err < 0) {
   16b00:	1e05      	subs	r5, r0, #0
   16b02:	da30      	bge.n	16b66 <rest_client_request+0x47a>
		LOG_ERR("http_client_req() error: %d", err);
   16b04:	4b35      	ldr	r3, [pc, #212]	; (16bdc <rest_client_request+0x4f0>)
   16b06:	2201      	movs	r2, #1
   16b08:	e9cd 7301 	strd	r7, r3, [sp, #4]
   16b0c:	4638      	mov	r0, r7
   16b0e:	463b      	mov	r3, r7
   16b10:	492e      	ldr	r1, [pc, #184]	; (16bcc <rest_client_request+0x4e0>)
   16b12:	9503      	str	r5, [sp, #12]
   16b14:	9700      	str	r7, [sp, #0]
   16b16:	f009 fac6 	bl	200a6 <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   16b1a:	e64a      	b.n	167b2 <rest_client_request+0xc6>
   16b1c:	f00a feda 	bl	218d4 <z_impl_k_uptime_ticks>
   16b20:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   16b24:	fba0 2307 	umull	r2, r3, r0, r7
   16b28:	fb07 3101 	mla	r1, r7, r1, r3
   16b2c:	0bd2      	lsrs	r2, r2, #15
		time_used = k_uptime_get() - sckt_connect_start_time;
   16b2e:	9b05      	ldr	r3, [sp, #20]
   16b30:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   16b34:	ebb2 020a 	subs.w	r2, r2, sl
   16b38:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   16b3c:	eb61 0103 	sbc.w	r1, r1, r3
		if (time_used >= *timeout_ms) {
   16b40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   16b42:	17d8      	asrs	r0, r3, #31
   16b44:	429a      	cmp	r2, r3
   16b46:	4181      	sbcs	r1, r0
   16b48:	db05      	blt.n	16b56 <rest_client_request+0x46a>
			LOG_WRN("Timeout occurred during socket connect");
   16b4a:	4b25      	ldr	r3, [pc, #148]	; (16be0 <rest_client_request+0x4f4>)
   16b4c:	9500      	str	r5, [sp, #0]
   16b4e:	e9cd 5301 	strd	r5, r3, [sp, #4]
   16b52:	462b      	mov	r3, r5
   16b54:	e67c      	b.n	16850 <rest_client_request+0x164>
		*timeout_ms -= time_used;
   16b56:	1a9b      	subs	r3, r3, r2
   16b58:	62e3      	str	r3, [r4, #44]	; 0x2c
   16b5a:	e7b7      	b.n	16acc <rest_client_request+0x3e0>
   16b5c:	f007 fea0 	bl	1e8a0 <zsock_freeaddrinfo>
			ret = -ECONNREFUSED;
   16b60:	f06f 056e 	mvn.w	r5, #110	; 0x6e
   16b64:	e69f      	b.n	168a6 <rest_client_request+0x1ba>
	} else if (resp_ctx->total_response_len >= req_ctx->resp_buff_len) {
   16b66:	6833      	ldr	r3, [r6, #0]
   16b68:	6b62      	ldr	r2, [r4, #52]	; 0x34
   16b6a:	4293      	cmp	r3, r2
   16b6c:	d30e      	bcc.n	16b8c <rest_client_request+0x4a0>
		LOG_ERR("Receive buffer too small, %d bytes are required",
   16b6e:	3301      	adds	r3, #1
   16b70:	9303      	str	r3, [sp, #12]
   16b72:	4b1c      	ldr	r3, [pc, #112]	; (16be4 <rest_client_request+0x4f8>)
   16b74:	2201      	movs	r2, #1
   16b76:	e9cd 7301 	strd	r7, r3, [sp, #4]
   16b7a:	4638      	mov	r0, r7
   16b7c:	463b      	mov	r3, r7
   16b7e:	4913      	ldr	r1, [pc, #76]	; (16bcc <rest_client_request+0x4e0>)
   16b80:	9700      	str	r7, [sp, #0]
   16b82:	f009 fa90 	bl	200a6 <z_log_msg_runtime_create.constprop.0>
		err = -ENOBUFS;
   16b86:	f06f 0568 	mvn.w	r5, #104	; 0x68
   16b8a:	e612      	b.n	167b2 <rest_client_request+0xc6>
	if (!resp_ctx->response || !resp_ctx->response_len) {
   16b8c:	68b2      	ldr	r2, [r6, #8]
   16b8e:	b932      	cbnz	r2, 16b9e <rest_client_request+0x4b2>
		*end_ptr = '\0';
   16b90:	2200      	movs	r2, #0
		char *end_ptr = &req_ctx->resp_buff[resp_ctx->total_response_len];
   16b92:	6b21      	ldr	r1, [r4, #48]	; 0x30
   16b94:	18c8      	adds	r0, r1, r3
		*end_ptr = '\0';
   16b96:	54ca      	strb	r2, [r1, r3]
		resp_ctx->response_len = 0;
   16b98:	e9c6 2001 	strd	r2, r0, [r6, #4]
   16b9c:	e002      	b.n	16ba4 <rest_client_request+0x4b8>
	if (!resp_ctx->response || !resp_ctx->response_len) {
   16b9e:	6872      	ldr	r2, [r6, #4]
   16ba0:	2a00      	cmp	r2, #0
   16ba2:	d0f5      	beq.n	16b90 <rest_client_request+0x4a4>
		err = 0;
   16ba4:	2500      	movs	r5, #0
   16ba6:	e60f      	b.n	167c8 <rest_client_request+0xdc>
		resp_ctx->used_socket_is_alive = true;
   16ba8:	2301      	movs	r3, #1
   16baa:	6373      	str	r3, [r6, #52]	; 0x34
		LOG_INF("Socket with id: %d was kept alive and wasn't closed",
   16bac:	6823      	ldr	r3, [r4, #0]
   16bae:	2203      	movs	r2, #3
   16bb0:	9303      	str	r3, [sp, #12]
   16bb2:	4b0d      	ldr	r3, [pc, #52]	; (16be8 <rest_client_request+0x4fc>)
   16bb4:	4905      	ldr	r1, [pc, #20]	; (16bcc <rest_client_request+0x4e0>)
   16bb6:	9302      	str	r3, [sp, #8]
   16bb8:	2300      	movs	r3, #0
   16bba:	4618      	mov	r0, r3
   16bbc:	e9cd 3300 	strd	r3, r3, [sp]
   16bc0:	f009 fa71 	bl	200a6 <z_log_msg_runtime_create.constprop.0>
	return ret;
   16bc4:	e61b      	b.n	167fe <rest_client_request+0x112>
   16bc6:	bf00      	nop
   16bc8:	0002786b 	.word	0x0002786b
   16bcc:	0002304c 	.word	0x0002304c
   16bd0:	000277e8 	.word	0x000277e8
   16bd4:	00027842 	.word	0x00027842
   16bd8:	00027815 	.word	0x00027815
   16bdc:	000278b6 	.word	0x000278b6
   16be0:	0002788f 	.word	0x0002788f
   16be4:	000278d2 	.word	0x000278d2
   16be8:	0002792b 	.word	0x0002792b

00016bec <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   16bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16bf0:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   16bf2:	4b15      	ldr	r3, [pc, #84]	; (16c48 <tfm_ns_interface_dispatch+0x5c>)
   16bf4:	4604      	mov	r4, r0
   16bf6:	f893 8000 	ldrb.w	r8, [r3]
   16bfa:	460d      	mov	r5, r1
   16bfc:	4616      	mov	r6, r2
   16bfe:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();
	int tfm_ns_saved_prio;

	if (!is_pre_kernel) {
   16c00:	f1b8 0f00 	cmp.w	r8, #0
   16c04:	d115      	bne.n	16c32 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   16c06:	4668      	mov	r0, sp
   16c08:	f007 ffb6 	bl	1eb78 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   16c0c:	463a      	mov	r2, r7
   16c0e:	4631      	mov	r1, r6
   16c10:	4628      	mov	r0, r5
   16c12:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   16c14:	47a0      	blx	r4
   16c16:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   16c18:	4668      	mov	r0, sp
   16c1a:	f007 ffc5 	bl	1eba8 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   16c1e:	f1b8 0f00 	cmp.w	r8, #0
   16c22:	d002      	beq.n	16c2a <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   16c24:	4809      	ldr	r0, [pc, #36]	; (16c4c <tfm_ns_interface_dispatch+0x60>)
   16c26:	f003 fda5 	bl	1a774 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   16c2a:	4620      	mov	r0, r4
   16c2c:	b022      	add	sp, #136	; 0x88
   16c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   16c32:	f04f 32ff 	mov.w	r2, #4294967295
   16c36:	f04f 33ff 	mov.w	r3, #4294967295
   16c3a:	4804      	ldr	r0, [pc, #16]	; (16c4c <tfm_ns_interface_dispatch+0x60>)
   16c3c:	f003 fd20 	bl	1a680 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   16c40:	2800      	cmp	r0, #0
   16c42:	d0e0      	beq.n	16c06 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   16c44:	241f      	movs	r4, #31
   16c46:	e7f0      	b.n	16c2a <tfm_ns_interface_dispatch+0x3e>
   16c48:	200110cf 	.word	0x200110cf
   16c4c:	2000ca58 	.word	0x2000ca58

00016c50 <psa_generate_random>:
    return API_DISPATCH_NO_OUTVEC(in_vec);
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   16c50:	b570      	push	{r4, r5, r6, lr}
    struct tfm_crypto_pack_iovec iov = {
   16c52:	2630      	movs	r6, #48	; 0x30
{
   16c54:	b092      	sub	sp, #72	; 0x48
    struct tfm_crypto_pack_iovec iov = {
   16c56:	ab06      	add	r3, sp, #24
{
   16c58:	4605      	mov	r5, r0
   16c5a:	460c      	mov	r4, r1
    struct tfm_crypto_pack_iovec iov = {
   16c5c:	4632      	mov	r2, r6
   16c5e:	2100      	movs	r1, #0
   16c60:	4618      	mov	r0, r3
   16c62:	f00b f830 	bl	21cc6 <memset>

    psa_invec in_vec[] = {
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   16c66:	e9cd 5404 	strd	r5, r4, [sp, #16]
    psa_invec in_vec[] = {
   16c6a:	e9cd 0602 	strd	r0, r6, [sp, #8]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   16c6e:	b154      	cbz	r4, 16c86 <psa_generate_random+0x36>
        return PSA_SUCCESS;
    }

    return API_DISPATCH(in_vec, out_vec);
   16c70:	2301      	movs	r3, #1
   16c72:	aa04      	add	r2, sp, #16
   16c74:	9200      	str	r2, [sp, #0]
   16c76:	2100      	movs	r1, #0
   16c78:	4804      	ldr	r0, [pc, #16]	; (16c8c <psa_generate_random+0x3c>)
   16c7a:	9301      	str	r3, [sp, #4]
   16c7c:	aa02      	add	r2, sp, #8
   16c7e:	f000 f807 	bl	16c90 <psa_call>
}
   16c82:	b012      	add	sp, #72	; 0x48
   16c84:	bd70      	pop	{r4, r5, r6, pc}
        return PSA_SUCCESS;
   16c86:	4620      	mov	r0, r4
   16c88:	e7fb      	b.n	16c82 <psa_generate_random+0x32>
   16c8a:	bf00      	nop
   16c8c:	40000100 	.word	0x40000100

00016c90 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   16c90:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   16c92:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   16c96:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   16c9a:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   16c9c:	d20d      	bcs.n	16cba <psa_call+0x2a>
        (type < INT16_MIN) ||
   16c9e:	ea43 0504 	orr.w	r5, r3, r4
   16ca2:	2dff      	cmp	r5, #255	; 0xff
   16ca4:	d809      	bhi.n	16cba <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   16ca6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   16caa:	4613      	mov	r3, r2
   16cac:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   16cb0:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   16cb2:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   16cb4:	4803      	ldr	r0, [pc, #12]	; (16cc4 <psa_call+0x34>)
   16cb6:	f7ff bf99 	b.w	16bec <tfm_ns_interface_dispatch>
}
   16cba:	f06f 0080 	mvn.w	r0, #128	; 0x80
   16cbe:	bc30      	pop	{r4, r5}
   16cc0:	4770      	bx	lr
   16cc2:	bf00      	nop
   16cc4:	00007c11 	.word	0x00007c11

00016cc8 <parse_string>:
{
   16cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   16ccc:	680a      	ldr	r2, [r1, #0]
   16cce:	688b      	ldr	r3, [r1, #8]
{
   16cd0:	4606      	mov	r6, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   16cd2:	1c5c      	adds	r4, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   16cd4:	18d0      	adds	r0, r2, r3
   16cd6:	5cd3      	ldrb	r3, [r2, r3]
{
   16cd8:	460f      	mov	r7, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   16cda:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   16cdc:	4414      	add	r4, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   16cde:	f040 80e1 	bne.w	16ea4 <parse_string+0x1dc>
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
   16ce2:	4625      	mov	r5, r4
        size_t skipped_bytes = 0;
   16ce4:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   16ce6:	f8d1 c004 	ldr.w	ip, [r1, #4]
   16cea:	1aa9      	subs	r1, r5, r2
   16cec:	4561      	cmp	r1, ip
   16cee:	f080 80d9 	bcs.w	16ea4 <parse_string+0x1dc>
   16cf2:	7829      	ldrb	r1, [r5, #0]
   16cf4:	2922      	cmp	r1, #34	; 0x22
   16cf6:	d119      	bne.n	16d2c <parse_string+0x64>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   16cf8:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   16cfc:	1a28      	subs	r0, r5, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   16cfe:	693a      	ldr	r2, [r7, #16]
   16d00:	4418      	add	r0, r3
   16d02:	4790      	blx	r2
        if (output == NULL)
   16d04:	4681      	mov	r9, r0
   16d06:	2800      	cmp	r0, #0
   16d08:	f000 80cc 	beq.w	16ea4 <parse_string+0x1dc>
   16d0c:	4680      	mov	r8, r0
    while (input_pointer < input_end)
   16d0e:	42ac      	cmp	r4, r5
   16d10:	d316      	bcc.n	16d40 <parse_string+0x78>
    *output_pointer = '\0';
   16d12:	2300      	movs	r3, #0
   16d14:	f888 3000 	strb.w	r3, [r8]
    item->type = cJSON_String;
   16d18:	2310      	movs	r3, #16
    return true;
   16d1a:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
   16d1c:	e9c6 3903 	strd	r3, r9, [r6, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   16d20:	683b      	ldr	r3, [r7, #0]
   16d22:	1aed      	subs	r5, r5, r3
    input_buffer->offset++;
   16d24:	3501      	adds	r5, #1
   16d26:	60bd      	str	r5, [r7, #8]
}
   16d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (input_end[0] == '\\')
   16d2c:	295c      	cmp	r1, #92	; 0x5c
   16d2e:	d105      	bne.n	16d3c <parse_string+0x74>
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   16d30:	3501      	adds	r5, #1
   16d32:	1aa9      	subs	r1, r5, r2
   16d34:	4561      	cmp	r1, ip
   16d36:	f080 80b5 	bcs.w	16ea4 <parse_string+0x1dc>
                skipped_bytes++;
   16d3a:	3301      	adds	r3, #1
            input_end++;
   16d3c:	3501      	adds	r5, #1
   16d3e:	e7d4      	b.n	16cea <parse_string+0x22>
        if (*input_pointer != '\\')
   16d40:	7823      	ldrb	r3, [r4, #0]
   16d42:	2b5c      	cmp	r3, #92	; 0x5c
   16d44:	d006      	beq.n	16d54 <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
   16d46:	3401      	adds	r4, #1
   16d48:	f108 0201 	add.w	r2, r8, #1
   16d4c:	f888 3000 	strb.w	r3, [r8]
   16d50:	4690      	mov	r8, r2
   16d52:	e7dc      	b.n	16d0e <parse_string+0x46>
            switch (input_pointer[1])
   16d54:	7863      	ldrb	r3, [r4, #1]
   16d56:	2b75      	cmp	r3, #117	; 0x75
   16d58:	d80a      	bhi.n	16d70 <parse_string+0xa8>
   16d5a:	2b6d      	cmp	r3, #109	; 0x6d
   16d5c:	d80f      	bhi.n	16d7e <parse_string+0xb6>
   16d5e:	2b62      	cmp	r3, #98	; 0x62
   16d60:	d02a      	beq.n	16db8 <parse_string+0xf0>
   16d62:	d823      	bhi.n	16dac <parse_string+0xe4>
   16d64:	2b2f      	cmp	r3, #47	; 0x2f
   16d66:	d039      	beq.n	16ddc <parse_string+0x114>
   16d68:	2b5c      	cmp	r3, #92	; 0x5c
   16d6a:	d037      	beq.n	16ddc <parse_string+0x114>
   16d6c:	2b22      	cmp	r3, #34	; 0x22
   16d6e:	d035      	beq.n	16ddc <parse_string+0x114>
        input_buffer->hooks.deallocate(output);
   16d70:	4648      	mov	r0, r9
   16d72:	697b      	ldr	r3, [r7, #20]
   16d74:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   16d76:	683b      	ldr	r3, [r7, #0]
   16d78:	1ae4      	subs	r4, r4, r3
   16d7a:	60bc      	str	r4, [r7, #8]
   16d7c:	e095      	b.n	16eaa <parse_string+0x1e2>
            switch (input_pointer[1])
   16d7e:	3b6e      	subs	r3, #110	; 0x6e
   16d80:	2b07      	cmp	r3, #7
   16d82:	d8f5      	bhi.n	16d70 <parse_string+0xa8>
   16d84:	a201      	add	r2, pc, #4	; (adr r2, 16d8c <parse_string+0xc4>)
   16d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16d8a:	bf00      	nop
   16d8c:	00016dc5 	.word	0x00016dc5
   16d90:	00016d71 	.word	0x00016d71
   16d94:	00016d71 	.word	0x00016d71
   16d98:	00016d71 	.word	0x00016d71
   16d9c:	00016dcd 	.word	0x00016dcd
   16da0:	00016d71 	.word	0x00016d71
   16da4:	00016dd5 	.word	0x00016dd5
   16da8:	00016de3 	.word	0x00016de3
   16dac:	2b66      	cmp	r3, #102	; 0x66
   16dae:	d1df      	bne.n	16d70 <parse_string+0xa8>
                    break;
   16db0:	230c      	movs	r3, #12
                    *output_pointer++ = '\f';
   16db2:	f108 0201 	add.w	r2, r8, #1
                    break;
   16db6:	e002      	b.n	16dbe <parse_string+0xf6>
                    break;
   16db8:	2308      	movs	r3, #8
                    *output_pointer++ = '\b';
   16dba:	f108 0201 	add.w	r2, r8, #1
            unsigned char sequence_length = 2;
   16dbe:	2102      	movs	r1, #2
            input_pointer += sequence_length;
   16dc0:	440c      	add	r4, r1
   16dc2:	e7c3      	b.n	16d4c <parse_string+0x84>
                    break;
   16dc4:	230a      	movs	r3, #10
                    *output_pointer++ = '\n';
   16dc6:	f108 0201 	add.w	r2, r8, #1
                    break;
   16dca:	e7f8      	b.n	16dbe <parse_string+0xf6>
                    break;
   16dcc:	230d      	movs	r3, #13
                    *output_pointer++ = '\r';
   16dce:	f108 0201 	add.w	r2, r8, #1
                    break;
   16dd2:	e7f4      	b.n	16dbe <parse_string+0xf6>
                    break;
   16dd4:	2309      	movs	r3, #9
                    *output_pointer++ = '\t';
   16dd6:	f108 0201 	add.w	r2, r8, #1
                    break;
   16dda:	e7f0      	b.n	16dbe <parse_string+0xf6>
                    *output_pointer++ = input_pointer[1];
   16ddc:	f108 0201 	add.w	r2, r8, #1
                    break;
   16de0:	e7ed      	b.n	16dbe <parse_string+0xf6>
    if ((input_end - first_sequence) < 6)
   16de2:	1b2b      	subs	r3, r5, r4
   16de4:	2b05      	cmp	r3, #5
   16de6:	ddc3      	ble.n	16d70 <parse_string+0xa8>
    first_code = parse_hex4(first_sequence + 2);
   16de8:	1ca0      	adds	r0, r4, #2
   16dea:	f009 f96f 	bl	200cc <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   16dee:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   16df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   16df6:	4682      	mov	sl, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   16df8:	d3ba      	bcc.n	16d70 <parse_string+0xa8>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   16dfa:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   16dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   16e02:	d22c      	bcs.n	16e5e <parse_string+0x196>
        const unsigned char *second_sequence = first_sequence + 6;
   16e04:	1da3      	adds	r3, r4, #6
        if ((input_end - second_sequence) < 6)
   16e06:	1aeb      	subs	r3, r5, r3
   16e08:	2b05      	cmp	r3, #5
   16e0a:	ddb1      	ble.n	16d70 <parse_string+0xa8>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   16e0c:	79a3      	ldrb	r3, [r4, #6]
   16e0e:	2b5c      	cmp	r3, #92	; 0x5c
   16e10:	d1ae      	bne.n	16d70 <parse_string+0xa8>
   16e12:	79e3      	ldrb	r3, [r4, #7]
   16e14:	2b75      	cmp	r3, #117	; 0x75
   16e16:	d1ab      	bne.n	16d70 <parse_string+0xa8>
        second_code = parse_hex4(second_sequence + 2);
   16e18:	f104 0008 	add.w	r0, r4, #8
   16e1c:	f009 f956 	bl	200cc <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   16e20:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   16e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   16e28:	d2a2      	bcs.n	16d70 <parse_string+0xa8>
        sequence_length = 12; /* \uXXXX\uXXXX */
   16e2a:	210c      	movs	r1, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   16e2c:	4b20      	ldr	r3, [pc, #128]	; (16eb0 <parse_string+0x1e8>)
   16e2e:	f3c0 0009 	ubfx	r0, r0, #0, #10
   16e32:	ea03 238a 	and.w	r3, r3, sl, lsl #10
   16e36:	4303      	orrs	r3, r0
   16e38:	f503 3a80 	add.w	sl, r3, #65536	; 0x10000
        first_byte_mark = 0xF0; /* 11110000 */
   16e3c:	20f0      	movs	r0, #240	; 0xf0
        utf8_length = 4;
   16e3e:	2204      	movs	r2, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   16e40:	f102 3cff 	add.w	ip, r2, #4294967295
   16e44:	fa58 fc8c 	uxtab	ip, r8, ip
   16e48:	45e0      	cmp	r8, ip
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   16e4a:	fa5f f38a 	uxtb.w	r3, sl
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   16e4e:	d120      	bne.n	16e92 <parse_string+0x1ca>
    if (utf8_length > 1)
   16e50:	2a01      	cmp	r2, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   16e52:	bf14      	ite	ne
   16e54:	4303      	orrne	r3, r0
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   16e56:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    *output_pointer += utf8_length;
   16e5a:	4442      	add	r2, r8
                    if (sequence_length == 0)
   16e5c:	e7b0      	b.n	16dc0 <parse_string+0xf8>
    if (codepoint < 0x80)
   16e5e:	287f      	cmp	r0, #127	; 0x7f
   16e60:	d90b      	bls.n	16e7a <parse_string+0x1b2>
    else if (codepoint < 0x800)
   16e62:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   16e66:	d30c      	bcc.n	16e82 <parse_string+0x1ba>
    else if (codepoint < 0x10000)
   16e68:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   16e6c:	d30d      	bcc.n	16e8a <parse_string+0x1c2>
    else if (codepoint <= 0x10FFFF)
   16e6e:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   16e72:	f4bf af7d 	bcs.w	16d70 <parse_string+0xa8>
        sequence_length = 6; /* \uXXXX */
   16e76:	2106      	movs	r1, #6
   16e78:	e7e0      	b.n	16e3c <parse_string+0x174>
   16e7a:	2106      	movs	r1, #6
    unsigned char first_byte_mark = 0;
   16e7c:	2000      	movs	r0, #0
        utf8_length = 1;
   16e7e:	2201      	movs	r2, #1
   16e80:	e7de      	b.n	16e40 <parse_string+0x178>
        sequence_length = 6; /* \uXXXX */
   16e82:	2106      	movs	r1, #6
        first_byte_mark = 0xC0; /* 11000000 */
   16e84:	20c0      	movs	r0, #192	; 0xc0
        utf8_length = 2;
   16e86:	2202      	movs	r2, #2
   16e88:	e7da      	b.n	16e40 <parse_string+0x178>
        sequence_length = 6; /* \uXXXX */
   16e8a:	2106      	movs	r1, #6
        first_byte_mark = 0xE0; /* 11100000 */
   16e8c:	20e0      	movs	r0, #224	; 0xe0
        utf8_length = 3;
   16e8e:	2203      	movs	r2, #3
   16e90:	e7d6      	b.n	16e40 <parse_string+0x178>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   16e92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16e96:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16e9a:	f80c 3901 	strb.w	r3, [ip], #-1
        codepoint >>= 6;
   16e9e:	ea4f 1a9a 	mov.w	sl, sl, lsr #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   16ea2:	e7d1      	b.n	16e48 <parse_string+0x180>
    if (input_pointer != NULL)
   16ea4:	2c00      	cmp	r4, #0
   16ea6:	f47f af66 	bne.w	16d76 <parse_string+0xae>
    return false;
   16eaa:	2000      	movs	r0, #0
   16eac:	e73c      	b.n	16d28 <parse_string+0x60>
   16eae:	bf00      	nop
   16eb0:	000ffc00 	.word	0x000ffc00

00016eb4 <get_object_item>:
{
   16eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16eb6:	460d      	mov	r5, r1
    if ((object == NULL) || (name == NULL))
   16eb8:	4604      	mov	r4, r0
   16eba:	2800      	cmp	r0, #0
   16ebc:	d034      	beq.n	16f28 <get_object_item+0x74>
   16ebe:	2900      	cmp	r1, #0
   16ec0:	d031      	beq.n	16f26 <get_object_item+0x72>
    current_element = object->child;
   16ec2:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   16ec4:	b9fa      	cbnz	r2, 16f06 <get_object_item+0x52>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   16ec6:	4e19      	ldr	r6, [pc, #100]	; (16f2c <get_object_item+0x78>)
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   16ec8:	b374      	cbz	r4, 16f28 <get_object_item+0x74>
   16eca:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   16ecc:	b1c3      	cbz	r3, 16f00 <get_object_item+0x4c>
    if (string1 == string2)
   16ece:	42ab      	cmp	r3, r5
   16ed0:	d021      	beq.n	16f16 <get_object_item+0x62>
   16ed2:	f105 3cff 	add.w	ip, r5, #4294967295
   16ed6:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   16ed8:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   16edc:	460f      	mov	r7, r1
   16ede:	5c72      	ldrb	r2, [r6, r1]
   16ee0:	f002 0203 	and.w	r2, r2, #3
   16ee4:	2a01      	cmp	r2, #1
   16ee6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   16eea:	bf08      	it	eq
   16eec:	f101 0720 	addeq.w	r7, r1, #32
   16ef0:	5cb0      	ldrb	r0, [r6, r2]
   16ef2:	f000 0003 	and.w	r0, r0, #3
   16ef6:	2801      	cmp	r0, #1
   16ef8:	bf08      	it	eq
   16efa:	3220      	addeq	r2, #32
   16efc:	4297      	cmp	r7, r2
   16efe:	d00f      	beq.n	16f20 <get_object_item+0x6c>
            current_element = current_element->next;
   16f00:	6824      	ldr	r4, [r4, #0]
   16f02:	e7e1      	b.n	16ec8 <get_object_item+0x14>
            current_element = current_element->next;
   16f04:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   16f06:	b17c      	cbz	r4, 16f28 <get_object_item+0x74>
   16f08:	6a21      	ldr	r1, [r4, #32]
   16f0a:	b121      	cbz	r1, 16f16 <get_object_item+0x62>
   16f0c:	4628      	mov	r0, r5
   16f0e:	f7f2 f80c 	bl	8f2a <strcmp>
   16f12:	2800      	cmp	r0, #0
   16f14:	d1f6      	bne.n	16f04 <get_object_item+0x50>
    if ((current_element == NULL) || (current_element->string == NULL)) {
   16f16:	6a23      	ldr	r3, [r4, #32]
        return NULL;
   16f18:	2b00      	cmp	r3, #0
   16f1a:	bf08      	it	eq
   16f1c:	2400      	moveq	r4, #0
   16f1e:	e003      	b.n	16f28 <get_object_item+0x74>
        if (*string1 == '\0')
   16f20:	2900      	cmp	r1, #0
   16f22:	d1d9      	bne.n	16ed8 <get_object_item+0x24>
   16f24:	e7f7      	b.n	16f16 <get_object_item+0x62>
        return NULL;
   16f26:	460c      	mov	r4, r1
}
   16f28:	4620      	mov	r0, r4
   16f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16f2c:	00027ac8 	.word	0x00027ac8

00016f30 <cJSON_strdup.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   16f30:	b570      	push	{r4, r5, r6, lr}
    if (string == NULL)
   16f32:	4605      	mov	r5, r0
   16f34:	b140      	cbz	r0, 16f48 <cJSON_strdup.constprop.0+0x18>
    length = strlen((const char*)string) + sizeof("");
   16f36:	f7f2 f802 	bl	8f3e <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   16f3a:	4b07      	ldr	r3, [pc, #28]	; (16f58 <cJSON_strdup.constprop.0+0x28>)
    length = strlen((const char*)string) + sizeof("");
   16f3c:	1c46      	adds	r6, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   16f3e:	4630      	mov	r0, r6
   16f40:	681b      	ldr	r3, [r3, #0]
   16f42:	4798      	blx	r3
    if (copy == NULL)
   16f44:	4604      	mov	r4, r0
   16f46:	b910      	cbnz	r0, 16f4e <cJSON_strdup.constprop.0+0x1e>
        return NULL;
   16f48:	2400      	movs	r4, #0
}
   16f4a:	4620      	mov	r0, r4
   16f4c:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16f4e:	4632      	mov	r2, r6
   16f50:	4629      	mov	r1, r5
   16f52:	f00a fe91 	bl	21c78 <memcpy>
   16f56:	e7f8      	b.n	16f4a <cJSON_strdup.constprop.0+0x1a>
   16f58:	2000c648 	.word	0x2000c648

00016f5c <add_item_to_object.constprop.0>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   16f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16f5e:	460d      	mov	r5, r1
   16f60:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
   16f62:	4607      	mov	r7, r0
   16f64:	b300      	cbz	r0, 16fa8 <add_item_to_object.constprop.0+0x4c>
   16f66:	b1f9      	cbz	r1, 16fa8 <add_item_to_object.constprop.0+0x4c>
   16f68:	b1f2      	cbz	r2, 16fa8 <add_item_to_object.constprop.0+0x4c>
   16f6a:	4290      	cmp	r0, r2
   16f6c:	d01c      	beq.n	16fa8 <add_item_to_object.constprop.0+0x4c>
    if (constant_key)
   16f6e:	b193      	cbz	r3, 16f96 <add_item_to_object.constprop.0+0x3a>
        new_type = item->type | cJSON_StringIsConst;
   16f70:	68d6      	ldr	r6, [r2, #12]
   16f72:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   16f76:	68e3      	ldr	r3, [r4, #12]
   16f78:	059b      	lsls	r3, r3, #22
   16f7a:	d404      	bmi.n	16f86 <add_item_to_object.constprop.0+0x2a>
   16f7c:	6a20      	ldr	r0, [r4, #32]
   16f7e:	b110      	cbz	r0, 16f86 <add_item_to_object.constprop.0+0x2a>
        hooks->deallocate(item->string);
   16f80:	4b0a      	ldr	r3, [pc, #40]	; (16fac <add_item_to_object.constprop.0+0x50>)
   16f82:	685b      	ldr	r3, [r3, #4]
   16f84:	4798      	blx	r3
    item->string = new_key;
   16f86:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   16f88:	60e6      	str	r6, [r4, #12]
    return add_item_to_array(object, item);
   16f8a:	4621      	mov	r1, r4
   16f8c:	4638      	mov	r0, r7
}
   16f8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   16f92:	f009 b8d9 	b.w	20148 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   16f96:	4608      	mov	r0, r1
   16f98:	f7ff ffca 	bl	16f30 <cJSON_strdup.constprop.0>
        if (new_key == NULL)
   16f9c:	4605      	mov	r5, r0
   16f9e:	b118      	cbz	r0, 16fa8 <add_item_to_object.constprop.0+0x4c>
        new_type = item->type & ~cJSON_StringIsConst;
   16fa0:	68e6      	ldr	r6, [r4, #12]
   16fa2:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   16fa6:	e7e6      	b.n	16f76 <add_item_to_object.constprop.0+0x1a>
}
   16fa8:	2000      	movs	r0, #0
   16faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16fac:	2000c648 	.word	0x2000c648

00016fb0 <cJSON_InitHooks>:
{
   16fb0:	b530      	push	{r4, r5, lr}
   16fb2:	4b0d      	ldr	r3, [pc, #52]	; (16fe8 <cJSON_InitHooks+0x38>)
   16fb4:	4d0d      	ldr	r5, [pc, #52]	; (16fec <cJSON_InitHooks+0x3c>)
   16fb6:	4c0e      	ldr	r4, [pc, #56]	; (16ff0 <cJSON_InitHooks+0x40>)
        global_hooks.allocate = malloc;
   16fb8:	601d      	str	r5, [r3, #0]
    if (hooks == NULL)
   16fba:	b918      	cbnz	r0, 16fc4 <cJSON_InitHooks+0x14>
        global_hooks.deallocate = free;
   16fbc:	605c      	str	r4, [r3, #4]
        global_hooks.reallocate = realloc;
   16fbe:	4a0d      	ldr	r2, [pc, #52]	; (16ff4 <cJSON_InitHooks+0x44>)
   16fc0:	609a      	str	r2, [r3, #8]
   16fc2:	e010      	b.n	16fe6 <cJSON_InitHooks+0x36>
    if (hooks->malloc_fn != NULL)
   16fc4:	6801      	ldr	r1, [r0, #0]
        global_hooks.allocate = hooks->malloc_fn;
   16fc6:	2900      	cmp	r1, #0
   16fc8:	bf08      	it	eq
   16fca:	4629      	moveq	r1, r5
    global_hooks.deallocate = free;
   16fcc:	e9c3 1400 	strd	r1, r4, [r3]
    if (hooks->free_fn != NULL)
   16fd0:	6842      	ldr	r2, [r0, #4]
    global_hooks.reallocate = NULL;
   16fd2:	2000      	movs	r0, #0
        global_hooks.deallocate = hooks->free_fn;
   16fd4:	2a00      	cmp	r2, #0
   16fd6:	bf08      	it	eq
   16fd8:	4622      	moveq	r2, r4
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   16fda:	42a9      	cmp	r1, r5
   16fdc:	605a      	str	r2, [r3, #4]
    global_hooks.reallocate = NULL;
   16fde:	6098      	str	r0, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   16fe0:	d101      	bne.n	16fe6 <cJSON_InitHooks+0x36>
   16fe2:	42a2      	cmp	r2, r4
   16fe4:	d0eb      	beq.n	16fbe <cJSON_InitHooks+0xe>
}
   16fe6:	bd30      	pop	{r4, r5, pc}
   16fe8:	2000c648 	.word	0x2000c648
   16fec:	0001b6c1 	.word	0x0001b6c1
   16ff0:	0001b6d1 	.word	0x0001b6d1
   16ff4:	0001bf1d 	.word	0x0001bf1d

00016ff8 <cJSON_Delete>:
{
   16ff8:	b570      	push	{r4, r5, r6, lr}
   16ffa:	4604      	mov	r4, r0
   16ffc:	4d0f      	ldr	r5, [pc, #60]	; (1703c <cJSON_Delete+0x44>)
    while (item != NULL)
   16ffe:	b904      	cbnz	r4, 17002 <cJSON_Delete+0xa>
}
   17000:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   17002:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   17004:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   17006:	05d9      	lsls	r1, r3, #23
   17008:	d404      	bmi.n	17014 <cJSON_Delete+0x1c>
   1700a:	68a0      	ldr	r0, [r4, #8]
   1700c:	b970      	cbnz	r0, 1702c <cJSON_Delete+0x34>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   1700e:	6920      	ldr	r0, [r4, #16]
            global_hooks.deallocate(item->valuestring);
   17010:	686b      	ldr	r3, [r5, #4]
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   17012:	b988      	cbnz	r0, 17038 <cJSON_Delete+0x40>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   17014:	68e3      	ldr	r3, [r4, #12]
   17016:	059b      	lsls	r3, r3, #22
   17018:	d403      	bmi.n	17022 <cJSON_Delete+0x2a>
   1701a:	6a20      	ldr	r0, [r4, #32]
   1701c:	b108      	cbz	r0, 17022 <cJSON_Delete+0x2a>
            global_hooks.deallocate(item->string);
   1701e:	686b      	ldr	r3, [r5, #4]
   17020:	4798      	blx	r3
        global_hooks.deallocate(item);
   17022:	4620      	mov	r0, r4
   17024:	686b      	ldr	r3, [r5, #4]
   17026:	4798      	blx	r3
        item = next;
   17028:	4634      	mov	r4, r6
   1702a:	e7e8      	b.n	16ffe <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   1702c:	f7ff ffe4 	bl	16ff8 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   17030:	68e3      	ldr	r3, [r4, #12]
   17032:	05da      	lsls	r2, r3, #23
   17034:	d5eb      	bpl.n	1700e <cJSON_Delete+0x16>
   17036:	e7ed      	b.n	17014 <cJSON_Delete+0x1c>
            global_hooks.deallocate(item->valuestring);
   17038:	4798      	blx	r3
   1703a:	e7eb      	b.n	17014 <cJSON_Delete+0x1c>
   1703c:	2000c648 	.word	0x2000c648

00017040 <cJSON_ParseWithLengthOpts>:
{
   17040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17044:	4605      	mov	r5, r0
    global_error.json = NULL;
   17046:	f04f 0900 	mov.w	r9, #0
{
   1704a:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
   1704c:	4f2f      	ldr	r7, [pc, #188]	; (1710c <cJSON_ParseWithLengthOpts+0xcc>)
{
   1704e:	460c      	mov	r4, r1
   17050:	4616      	mov	r6, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   17052:	2100      	movs	r1, #0
   17054:	221c      	movs	r2, #28
   17056:	a801      	add	r0, sp, #4
{
   17058:	4698      	mov	r8, r3
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   1705a:	f00a fe34 	bl	21cc6 <memset>
    global_error.position = 0;
   1705e:	e9c7 9900 	strd	r9, r9, [r7]
    if (value == NULL || 0 == buffer_length)
   17062:	b925      	cbnz	r5, 1706e <cJSON_ParseWithLengthOpts+0x2e>
    return NULL;
   17064:	2400      	movs	r4, #0
}
   17066:	4620      	mov	r0, r4
   17068:	b009      	add	sp, #36	; 0x24
   1706a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (value == NULL || 0 == buffer_length)
   1706e:	2c00      	cmp	r4, #0
   17070:	d03d      	beq.n	170ee <cJSON_ParseWithLengthOpts+0xae>
    buffer.hooks = global_hooks;
   17072:	4b27      	ldr	r3, [pc, #156]	; (17110 <cJSON_ParseWithLengthOpts+0xd0>)
    buffer.length = buffer_length; 
   17074:	e9cd 5401 	strd	r5, r4, [sp, #4]
    buffer.hooks = global_hooks;
   17078:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1707c:	ab08      	add	r3, sp, #32
   1707e:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   17082:	f009 f876 	bl	20172 <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
   17086:	4604      	mov	r4, r0
   17088:	2800      	cmp	r0, #0
   1708a:	d030      	beq.n	170ee <cJSON_ParseWithLengthOpts+0xae>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   1708c:	9801      	ldr	r0, [sp, #4]
   1708e:	b150      	cbz	r0, 170a6 <cJSON_ParseWithLengthOpts+0x66>
   17090:	9b03      	ldr	r3, [sp, #12]
   17092:	b9e3      	cbnz	r3, 170ce <cJSON_ParseWithLengthOpts+0x8e>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   17094:	9b02      	ldr	r3, [sp, #8]
   17096:	2b04      	cmp	r3, #4
   17098:	d904      	bls.n	170a4 <cJSON_ParseWithLengthOpts+0x64>
   1709a:	2203      	movs	r2, #3
   1709c:	491d      	ldr	r1, [pc, #116]	; (17114 <cJSON_ParseWithLengthOpts+0xd4>)
   1709e:	f00a ff87 	bl	21fb0 <strncmp>
   170a2:	b188      	cbz	r0, 170c8 <cJSON_ParseWithLengthOpts+0x88>
    return buffer;
   170a4:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   170a6:	f009 f830 	bl	2010a <buffer_skip_whitespace>
   170aa:	4601      	mov	r1, r0
   170ac:	4620      	mov	r0, r4
   170ae:	f7f3 f807 	bl	a0c0 <parse_value>
   170b2:	b1c8      	cbz	r0, 170e8 <cJSON_ParseWithLengthOpts+0xa8>
    if (require_null_terminated)
   170b4:	f1b8 0f00 	cmp.w	r8, #0
   170b8:	d10b      	bne.n	170d2 <cJSON_ParseWithLengthOpts+0x92>
    if (return_parse_end)
   170ba:	2e00      	cmp	r6, #0
   170bc:	d0d3      	beq.n	17066 <cJSON_ParseWithLengthOpts+0x26>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   170be:	9b01      	ldr	r3, [sp, #4]
   170c0:	9a03      	ldr	r2, [sp, #12]
   170c2:	4413      	add	r3, r2
   170c4:	6033      	str	r3, [r6, #0]
   170c6:	e7ce      	b.n	17066 <cJSON_ParseWithLengthOpts+0x26>
        buffer->offset += 3;
   170c8:	2303      	movs	r3, #3
   170ca:	9303      	str	r3, [sp, #12]
   170cc:	e7ea      	b.n	170a4 <cJSON_ParseWithLengthOpts+0x64>
        return NULL;
   170ce:	4648      	mov	r0, r9
   170d0:	e7e9      	b.n	170a6 <cJSON_ParseWithLengthOpts+0x66>
        buffer_skip_whitespace(&buffer);
   170d2:	a801      	add	r0, sp, #4
   170d4:	f009 f819 	bl	2010a <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   170d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   170dc:	4293      	cmp	r3, r2
   170de:	d203      	bcs.n	170e8 <cJSON_ParseWithLengthOpts+0xa8>
   170e0:	9a01      	ldr	r2, [sp, #4]
   170e2:	5cd3      	ldrb	r3, [r2, r3]
   170e4:	2b00      	cmp	r3, #0
   170e6:	d0e8      	beq.n	170ba <cJSON_ParseWithLengthOpts+0x7a>
        cJSON_Delete(item);
   170e8:	4620      	mov	r0, r4
   170ea:	f7ff ff85 	bl	16ff8 <cJSON_Delete>
        if (buffer.offset < buffer.length)
   170ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   170f2:	4293      	cmp	r3, r2
   170f4:	d301      	bcc.n	170fa <cJSON_ParseWithLengthOpts+0xba>
        else if (buffer.length > 0)
   170f6:	b132      	cbz	r2, 17106 <cJSON_ParseWithLengthOpts+0xc6>
            local_error.position = buffer.length - 1;
   170f8:	1e53      	subs	r3, r2, #1
        if (return_parse_end != NULL)
   170fa:	b10e      	cbz	r6, 17100 <cJSON_ParseWithLengthOpts+0xc0>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   170fc:	18ea      	adds	r2, r5, r3
   170fe:	6032      	str	r2, [r6, #0]
        global_error = local_error;
   17100:	e9c7 5300 	strd	r5, r3, [r7]
   17104:	e7ae      	b.n	17064 <cJSON_ParseWithLengthOpts+0x24>
        local_error.position = 0;
   17106:	4613      	mov	r3, r2
   17108:	e7f7      	b.n	170fa <cJSON_ParseWithLengthOpts+0xba>
   1710a:	bf00      	nop
   1710c:	2000df1c 	.word	0x2000df1c
   17110:	2000c648 	.word	0x2000c648
   17114:	00027982 	.word	0x00027982

00017118 <cJSON_CreateBool>:
{
   17118:	b510      	push	{r4, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1711a:	4b06      	ldr	r3, [pc, #24]	; (17134 <cJSON_CreateBool+0x1c>)
{
   1711c:	4604      	mov	r4, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   1711e:	6818      	ldr	r0, [r3, #0]
   17120:	f009 f827 	bl	20172 <cJSON_New_Item.isra.0>
    if(item)
   17124:	b120      	cbz	r0, 17130 <cJSON_CreateBool+0x18>
        item->type = boolean ? cJSON_True : cJSON_False;
   17126:	2c00      	cmp	r4, #0
   17128:	bf0c      	ite	eq
   1712a:	2301      	moveq	r3, #1
   1712c:	2302      	movne	r3, #2
   1712e:	60c3      	str	r3, [r0, #12]
}
   17130:	bd10      	pop	{r4, pc}
   17132:	bf00      	nop
   17134:	2000c648 	.word	0x2000c648

00017138 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   17138:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1713a:	4b04      	ldr	r3, [pc, #16]	; (1714c <cJSON_CreateArray+0x14>)
   1713c:	6818      	ldr	r0, [r3, #0]
   1713e:	f009 f818 	bl	20172 <cJSON_New_Item.isra.0>
    if(item)
   17142:	b108      	cbz	r0, 17148 <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   17144:	2320      	movs	r3, #32
   17146:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   17148:	bd08      	pop	{r3, pc}
   1714a:	bf00      	nop
   1714c:	2000c648 	.word	0x2000c648

00017150 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   17150:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   17152:	4b04      	ldr	r3, [pc, #16]	; (17164 <cJSON_CreateObject+0x14>)
   17154:	6818      	ldr	r0, [r3, #0]
   17156:	f009 f80c 	bl	20172 <cJSON_New_Item.isra.0>
    if (item)
   1715a:	b108      	cbz	r0, 17160 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   1715c:	2340      	movs	r3, #64	; 0x40
   1715e:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   17160:	bd08      	pop	{r3, pc}
   17162:	bf00      	nop
   17164:	2000c648 	.word	0x2000c648

00017168 <cJSON_Init>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }

/**@brief Initialize cJSON by assigning function hooks. */
void cJSON_Init(void)
{
	_cjson_hooks.malloc_fn = malloc_fn_hook;
   17168:	4803      	ldr	r0, [pc, #12]	; (17178 <cJSON_Init+0x10>)
   1716a:	4b04      	ldr	r3, [pc, #16]	; (1717c <cJSON_Init+0x14>)
   1716c:	6003      	str	r3, [r0, #0]
	_cjson_hooks.free_fn = free_fn_hook;
   1716e:	4b04      	ldr	r3, [pc, #16]	; (17180 <cJSON_Init+0x18>)
   17170:	6043      	str	r3, [r0, #4]

	cJSON_InitHooks(&_cjson_hooks);
   17172:	f7ff bf1d 	b.w	16fb0 <cJSON_InitHooks>
   17176:	bf00      	nop
   17178:	2000df24 	.word	0x2000df24
   1717c:	000202db 	.word	0x000202db
   17180:	000202df 	.word	0x000202df

00017184 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
   17184:	4a05      	ldr	r2, [pc, #20]	; (1719c <SystemInit+0x18>)
   17186:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1718a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1718e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   17192:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   17196:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
    #endif
}
   1719a:	4770      	bx	lr
   1719c:	e000ed00 	.word	0xe000ed00

000171a0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   171a0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   171a2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   171a4:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   171a6:	fab2 f382 	clz	r3, r2
   171aa:	f1c3 031f 	rsb	r3, r3, #31
   171ae:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   171b0:	fa05 f403 	lsl.w	r4, r5, r3
   171b4:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   171b8:	e8d0 6fef 	ldaex	r6, [r0]
   171bc:	4296      	cmp	r6, r2
   171be:	d104      	bne.n	171ca <nrfx_flag32_alloc+0x2a>
   171c0:	e8c0 4fec 	stlex	ip, r4, [r0]
   171c4:	f1bc 0f00 	cmp.w	ip, #0
   171c8:	d1f6      	bne.n	171b8 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   171ca:	d1eb      	bne.n	171a4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   171cc:	4801      	ldr	r0, [pc, #4]	; (171d4 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   171ce:	700b      	strb	r3, [r1, #0]
}
   171d0:	bd70      	pop	{r4, r5, r6, pc}
   171d2:	bf00      	nop
   171d4:	0bad0000 	.word	0x0bad0000

000171d8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   171d8:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   171da:	6803      	ldr	r3, [r0, #0]
   171dc:	40cb      	lsrs	r3, r1
   171de:	07db      	lsls	r3, r3, #31
   171e0:	d410      	bmi.n	17204 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   171e2:	2301      	movs	r3, #1
   171e4:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   171e6:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   171e8:	ea43 0102 	orr.w	r1, r3, r2
   171ec:	e8d0 4fef 	ldaex	r4, [r0]
   171f0:	4294      	cmp	r4, r2
   171f2:	d104      	bne.n	171fe <nrfx_flag32_free+0x26>
   171f4:	e8c0 1fec 	stlex	ip, r1, [r0]
   171f8:	f1bc 0f00 	cmp.w	ip, #0
   171fc:	d1f6      	bne.n	171ec <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   171fe:	d1f2      	bne.n	171e6 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   17200:	4801      	ldr	r0, [pc, #4]	; (17208 <nrfx_flag32_free+0x30>)
}
   17202:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   17204:	4801      	ldr	r0, [pc, #4]	; (1720c <nrfx_flag32_free+0x34>)
   17206:	e7fc      	b.n	17202 <nrfx_flag32_free+0x2a>
   17208:	0bad0000 	.word	0x0bad0000
   1720c:	0bad0004 	.word	0x0bad0004

00017210 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   17210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   17212:	4604      	mov	r4, r0
   17214:	b118      	cbz	r0, 1721e <clock_stop+0xe>
   17216:	2801      	cmp	r0, #1
   17218:	d01e      	beq.n	17258 <clock_stop+0x48>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1721a:	b003      	add	sp, #12
   1721c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   1721e:	2202      	movs	r2, #2
   17220:	4b27      	ldr	r3, [pc, #156]	; (172c0 <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   17222:	4607      	mov	r7, r0
   17224:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17228:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   1722c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17230:	2201      	movs	r2, #1
   17232:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   17234:	2301      	movs	r3, #1
   17236:	f242 7510 	movw	r5, #10000	; 0x2710
   1723a:	4e21      	ldr	r6, [pc, #132]	; (172c0 <clock_stop+0xb0>)
   1723c:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   17240:	b1b4      	cbz	r4, 17270 <clock_stop+0x60>
   17242:	2c01      	cmp	r4, #1
   17244:	d1e9      	bne.n	1721a <clock_stop+0xa>
            if (p_clk_src != NULL)
   17246:	b387      	cbz	r7, 172aa <clock_stop+0x9a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   17248:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1724c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   17250:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   17252:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   17256:	e013      	b.n	17280 <clock_stop+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17258:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   1725a:	4b19      	ldr	r3, [pc, #100]	; (172c0 <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1725c:	f10d 0707 	add.w	r7, sp, #7
   17260:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17264:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   17268:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1726c:	6058      	str	r0, [r3, #4]
   1726e:	e7e1      	b.n	17234 <clock_stop+0x24>
            if (p_clk_src != NULL)
   17270:	b18f      	cbz	r7, 17296 <clock_stop+0x86>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   17272:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   17276:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1727a:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1727c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   17280:	03da      	lsls	r2, r3, #15
   17282:	d5ca      	bpl.n	1721a <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   17284:	f89d 0007 	ldrb.w	r0, [sp, #7]
   17288:	2801      	cmp	r0, #1
   1728a:	d1c6      	bne.n	1721a <clock_stop+0xa>
   1728c:	f009 f82a 	bl	202e4 <nrfx_busy_wait>
   17290:	3d01      	subs	r5, #1
   17292:	d1d5      	bne.n	17240 <clock_stop+0x30>
   17294:	e7c1      	b.n	1721a <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   17296:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1729a:	03d9      	lsls	r1, r3, #15
   1729c:	d5bd      	bpl.n	1721a <clock_stop+0xa>
   1729e:	2001      	movs	r0, #1
   172a0:	f009 f820 	bl	202e4 <nrfx_busy_wait>
   172a4:	3d01      	subs	r5, #1
   172a6:	d1f6      	bne.n	17296 <clock_stop+0x86>
   172a8:	e7b7      	b.n	1721a <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   172aa:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   172ae:	03db      	lsls	r3, r3, #15
   172b0:	d5b3      	bpl.n	1721a <clock_stop+0xa>
   172b2:	2001      	movs	r0, #1
   172b4:	f009 f816 	bl	202e4 <nrfx_busy_wait>
   172b8:	3d01      	subs	r5, #1
   172ba:	d1f6      	bne.n	172aa <clock_stop+0x9a>
   172bc:	e7ad      	b.n	1721a <clock_stop+0xa>
   172be:	bf00      	nop
   172c0:	40005000 	.word	0x40005000

000172c4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   172c4:	4b04      	ldr	r3, [pc, #16]	; (172d8 <nrfx_clock_init+0x14>)
   172c6:	791a      	ldrb	r2, [r3, #4]
   172c8:	b922      	cbnz	r2, 172d4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   172ca:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   172cc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   172ce:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   172d0:	4802      	ldr	r0, [pc, #8]	; (172dc <nrfx_clock_init+0x18>)
   172d2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   172d4:	4802      	ldr	r0, [pc, #8]	; (172e0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   172d6:	4770      	bx	lr
   172d8:	2000df2c 	.word	0x2000df2c
   172dc:	0bad0000 	.word	0x0bad0000
   172e0:	0bad000c 	.word	0x0bad000c

000172e4 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   172e4:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   172e6:	2005      	movs	r0, #5
   172e8:	f7f6 fb74 	bl	d9d4 <arch_irq_is_enabled>
   172ec:	b910      	cbnz	r0, 172f4 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   172ee:	2005      	movs	r0, #5
   172f0:	f7f6 fb62 	bl	d9b8 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   172f4:	2201      	movs	r2, #1
   172f6:	4b02      	ldr	r3, [pc, #8]	; (17300 <nrfx_clock_enable+0x1c>)
   172f8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   172fc:	bd08      	pop	{r3, pc}
   172fe:	bf00      	nop
   17300:	40005000 	.word	0x40005000

00017304 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   17304:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   17306:	b110      	cbz	r0, 1730e <nrfx_clock_start+0xa>
   17308:	2801      	cmp	r0, #1
   1730a:	d02e      	beq.n	1736a <nrfx_clock_start+0x66>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1730c:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1730e:	4a1c      	ldr	r2, [pc, #112]	; (17380 <nrfx_clock_start+0x7c>)
   17310:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   17314:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   17318:	03c9      	lsls	r1, r1, #15
   1731a:	d40e      	bmi.n	1733a <nrfx_clock_start+0x36>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   1731c:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   17320:	07db      	lsls	r3, r3, #31
   17322:	d513      	bpl.n	1734c <nrfx_clock_start+0x48>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   17324:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   17328:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1732c:	3b01      	subs	r3, #1
   1732e:	2b01      	cmp	r3, #1
   17330:	d809      	bhi.n	17346 <nrfx_clock_start+0x42>
    p_reg->INTENSET = mask;
   17332:	2302      	movs	r3, #2
   17334:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   17338:	e7e8      	b.n	1730c <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1733a:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1733e:	2b02      	cmp	r3, #2
   17340:	d005      	beq.n	1734e <nrfx_clock_start+0x4a>
   17342:	2b01      	cmp	r3, #1
   17344:	d002      	beq.n	1734c <nrfx_clock_start+0x48>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   17346:	2000      	movs	r0, #0
   17348:	f7ff ff62 	bl	17210 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1734c:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   1734e:	4a0c      	ldr	r2, [pc, #48]	; (17380 <nrfx_clock_start+0x7c>)
   17350:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17354:	2300      	movs	r3, #0
   17356:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   1735a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   1735e:	2302      	movs	r3, #2
   17360:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17364:	2301      	movs	r3, #1
   17366:	6093      	str	r3, [r2, #8]
}
   17368:	e7d0      	b.n	1730c <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1736a:	2200      	movs	r2, #0
   1736c:	4b04      	ldr	r3, [pc, #16]	; (17380 <nrfx_clock_start+0x7c>)
   1736e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   17372:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   17376:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1737a:	6018      	str	r0, [r3, #0]
}
   1737c:	e7c6      	b.n	1730c <nrfx_clock_start+0x8>
   1737e:	bf00      	nop
   17380:	40005000 	.word	0x40005000

00017384 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   17384:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   17386:	4b17      	ldr	r3, [pc, #92]	; (173e4 <nrfx_power_clock_irq_handler+0x60>)
   17388:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1738c:	b152      	cbz	r2, 173a4 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1738e:	2000      	movs	r0, #0
   17390:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   17394:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   17398:	2201      	movs	r2, #1
   1739a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1739e:	4b12      	ldr	r3, [pc, #72]	; (173e8 <nrfx_power_clock_irq_handler+0x64>)
   173a0:	681b      	ldr	r3, [r3, #0]
   173a2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   173a4:	4b0f      	ldr	r3, [pc, #60]	; (173e4 <nrfx_power_clock_irq_handler+0x60>)
   173a6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   173aa:	b18a      	cbz	r2, 173d0 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   173ac:	2200      	movs	r2, #0
   173ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   173b2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   173b6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   173ba:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   173be:	f002 0203 	and.w	r2, r2, #3
   173c2:	2a01      	cmp	r2, #1
   173c4:	f04f 0102 	mov.w	r1, #2
   173c8:	d103      	bne.n	173d2 <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   173ca:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   173ce:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   173d0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   173d2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   173d6:	4b04      	ldr	r3, [pc, #16]	; (173e8 <nrfx_power_clock_irq_handler+0x64>)
   173d8:	2001      	movs	r0, #1
}
   173da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   173de:	681b      	ldr	r3, [r3, #0]
   173e0:	4718      	bx	r3
   173e2:	bf00      	nop
   173e4:	40005000 	.word	0x40005000
   173e8:	2000df2c 	.word	0x2000df2c

000173ec <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   173ec:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   173ee:	4801      	ldr	r0, [pc, #4]	; (173f4 <nrfx_dppi_channel_alloc+0x8>)
   173f0:	f7ff bed6 	b.w	171a0 <nrfx_flag32_alloc>
   173f4:	2000c654 	.word	0x2000c654

000173f8 <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
   173f8:	4a06      	ldr	r2, [pc, #24]	; (17414 <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
   173fa:	f000 001f 	and.w	r0, r0, #31
   173fe:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   17402:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    cnf &= ~to_update;
   17406:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1740a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1740e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
   17412:	4770      	bx	lr
   17414:	40842500 	.word	0x40842500

00017418 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   17418:	4b03      	ldr	r3, [pc, #12]	; (17428 <pin_in_use_by_te+0x10>)
   1741a:	3008      	adds	r0, #8
   1741c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   17420:	f3c0 1040 	ubfx	r0, r0, #5, #1
   17424:	4770      	bx	lr
   17426:	bf00      	nop
   17428:	2000c658 	.word	0x2000c658

0001742c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1742c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1742e:	4c0d      	ldr	r4, [pc, #52]	; (17464 <call_handler+0x38>)
   17430:	f100 0308 	add.w	r3, r0, #8
   17434:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   17438:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1743a:	05da      	lsls	r2, r3, #23
{
   1743c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1743e:	d507      	bpl.n	17450 <call_handler+0x24>
   17440:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   17444:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   17448:	6852      	ldr	r2, [r2, #4]
   1744a:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1744e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   17450:	68a3      	ldr	r3, [r4, #8]
   17452:	b12b      	cbz	r3, 17460 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   17454:	4631      	mov	r1, r6
   17456:	4628      	mov	r0, r5
   17458:	68e2      	ldr	r2, [r4, #12]
    }
}
   1745a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1745e:	4718      	bx	r3
}
   17460:	bd70      	pop	{r4, r5, r6, pc}
   17462:	bf00      	nop
   17464:	2000c658 	.word	0x2000c658

00017468 <release_handler>:
{
   17468:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1746a:	4a13      	ldr	r2, [pc, #76]	; (174b8 <release_handler+0x50>)
   1746c:	3008      	adds	r0, #8
   1746e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   17472:	05d9      	lsls	r1, r3, #23
   17474:	d51c      	bpl.n	174b0 <release_handler+0x48>
   17476:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1747a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1747e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   17482:	2000      	movs	r0, #0
   17484:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   17488:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1748c:	f413 7f80 	tst.w	r3, #256	; 0x100
   17490:	d003      	beq.n	1749a <release_handler+0x32>
   17492:	f3c3 2343 	ubfx	r3, r3, #9, #4
   17496:	4299      	cmp	r1, r3
   17498:	d00a      	beq.n	174b0 <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1749a:	3001      	adds	r0, #1
   1749c:	2820      	cmp	r0, #32
   1749e:	d1f3      	bne.n	17488 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   174a0:	2300      	movs	r3, #0
   174a2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   174a6:	4805      	ldr	r0, [pc, #20]	; (174bc <release_handler+0x54>)
}
   174a8:	f85d 4b04 	ldr.w	r4, [sp], #4
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   174ac:	f7ff be94 	b.w	171d8 <nrfx_flag32_free>
}
   174b0:	f85d 4b04 	ldr.w	r4, [sp], #4
   174b4:	4770      	bx	lr
   174b6:	bf00      	nop
   174b8:	2000c658 	.word	0x2000c658
   174bc:	2000c6ac 	.word	0x2000c6ac

000174c0 <pin_handler_trigger_uninit>:
{
   174c0:	b538      	push	{r3, r4, r5, lr}
   174c2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   174c4:	f7ff ffa8 	bl	17418 <pin_in_use_by_te>
   174c8:	4c0b      	ldr	r4, [pc, #44]	; (174f8 <pin_handler_trigger_uninit+0x38>)
   174ca:	f102 0508 	add.w	r5, r2, #8
   174ce:	b160      	cbz	r0, 174ea <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   174d0:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   174d2:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   174d6:	0b5b      	lsrs	r3, r3, #13
   174d8:	009b      	lsls	r3, r3, #2
   174da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   174de:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   174e2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
   174e6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   174ea:	4610      	mov	r0, r2
   174ec:	f7ff ffbc 	bl	17468 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   174f0:	2300      	movs	r3, #0
   174f2:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   174f6:	bd38      	pop	{r3, r4, r5, pc}
   174f8:	2000c658 	.word	0x2000c658

000174fc <nrfx_gpiote_input_configure>:
{
   174fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17500:	4604      	mov	r4, r0
   17502:	461d      	mov	r5, r3
    if (p_input_config)
   17504:	b309      	cbz	r1, 1754a <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   17506:	4f4e      	ldr	r7, [pc, #312]	; (17640 <nrfx_gpiote_input_configure+0x144>)
   17508:	f100 0808 	add.w	r8, r0, #8
   1750c:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   17510:	07b3      	lsls	r3, r6, #30
   17512:	d506      	bpl.n	17522 <nrfx_gpiote_input_configure+0x26>
   17514:	f7ff ff80 	bl	17418 <pin_in_use_by_te>
   17518:	b118      	cbz	r0, 17522 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
   1751a:	484a      	ldr	r0, [pc, #296]	; (17644 <nrfx_gpiote_input_configure+0x148>)
}
   1751c:	b002      	add	sp, #8
   1751e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
   17522:	4849      	ldr	r0, [pc, #292]	; (17648 <nrfx_gpiote_input_configure+0x14c>)
    *p_pin = pin_number & 0x1F;
   17524:	f004 031f 	and.w	r3, r4, #31
   17528:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1752c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   17530:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
   17532:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   17536:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1753a:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1753e:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
   17542:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
   17546:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
   1754a:	b19a      	cbz	r2, 17574 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1754c:	4e3c      	ldr	r6, [pc, #240]	; (17640 <nrfx_gpiote_input_configure+0x144>)
   1754e:	f104 0708 	add.w	r7, r4, #8
   17552:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   17556:	7813      	ldrb	r3, [r2, #0]
        if (pin_is_output(pin))
   17558:	f011 0f02 	tst.w	r1, #2
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1755c:	6850      	ldr	r0, [r2, #4]
        if (pin_is_output(pin))
   1755e:	d00c      	beq.n	1757a <nrfx_gpiote_input_configure+0x7e>
            if (use_evt)
   17560:	2800      	cmp	r0, #0
   17562:	d1da      	bne.n	1751a <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   17564:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
   17568:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1756c:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
   17570:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
   17574:	bbd5      	cbnz	r5, 175ec <nrfx_gpiote_input_configure+0xf0>
        err = NRFX_SUCCESS;
   17576:	4835      	ldr	r0, [pc, #212]	; (1764c <nrfx_gpiote_input_configure+0x150>)
   17578:	e7d0      	b.n	1751c <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1757a:	f021 0120 	bic.w	r1, r1, #32
   1757e:	04c9      	lsls	r1, r1, #19
   17580:	0cc9      	lsrs	r1, r1, #19
   17582:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
   17586:	2800      	cmp	r0, #0
   17588:	d0ec      	beq.n	17564 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   1758a:	2b03      	cmp	r3, #3
   1758c:	d8c5      	bhi.n	1751a <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1758e:	6852      	ldr	r2, [r2, #4]
   17590:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   17594:	4662      	mov	r2, ip
   17596:	0092      	lsls	r2, r2, #2
   17598:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1759c:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   175a0:	b923      	cbnz	r3, 175ac <nrfx_gpiote_input_configure+0xb0>
    p_reg->CONFIG[idx] = 0;
   175a2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   175a6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
   175aa:	e7db      	b.n	17564 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   175ac:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   175b0:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   175b4:	f020 0003 	bic.w	r0, r0, #3
   175b8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   175bc:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   175c0:	f041 0120 	orr.w	r1, r1, #32
   175c4:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   175c8:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   175cc:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   175d0:	0220      	lsls	r0, r4, #8
   175d2:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   175d6:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   175da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   175de:	ea40 000e 	orr.w	r0, r0, lr
   175e2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   175e6:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
   175ea:	e7bb      	b.n	17564 <nrfx_gpiote_input_configure+0x68>
    release_handler(pin);
   175ec:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   175ee:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   175f2:	f7ff ff39 	bl	17468 <release_handler>
    if (!handler)
   175f6:	2e00      	cmp	r6, #0
   175f8:	d0bd      	beq.n	17576 <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   175fa:	4d11      	ldr	r5, [pc, #68]	; (17640 <nrfx_gpiote_input_configure+0x144>)
   175fc:	e9d5 2300 	ldrd	r2, r3, [r5]
   17600:	4296      	cmp	r6, r2
   17602:	d101      	bne.n	17608 <nrfx_gpiote_input_configure+0x10c>
   17604:	429f      	cmp	r7, r3
   17606:	d018      	beq.n	1763a <nrfx_gpiote_input_configure+0x13e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   17608:	4811      	ldr	r0, [pc, #68]	; (17650 <nrfx_gpiote_input_configure+0x154>)
   1760a:	f10d 0107 	add.w	r1, sp, #7
   1760e:	f7ff fdc7 	bl	171a0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   17612:	4b0e      	ldr	r3, [pc, #56]	; (1764c <nrfx_gpiote_input_configure+0x150>)
   17614:	4298      	cmp	r0, r3
   17616:	d181      	bne.n	1751c <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
   17618:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
   1761c:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   17620:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   17622:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   17624:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   17628:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1762c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   17630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   17634:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   17638:	e79d      	b.n	17576 <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1763a:	2200      	movs	r2, #0
   1763c:	e7ee      	b.n	1761c <nrfx_gpiote_input_configure+0x120>
   1763e:	bf00      	nop
   17640:	2000c658 	.word	0x2000c658
   17644:	0bad0004 	.word	0x0bad0004
   17648:	40842500 	.word	0x40842500
   1764c:	0bad0000 	.word	0x0bad0000
   17650:	2000c6ac 	.word	0x2000c6ac

00017654 <nrfx_gpiote_output_configure>:
{
   17654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17656:	4604      	mov	r4, r0
    if (p_config)
   17658:	b379      	cbz	r1, 176ba <nrfx_gpiote_output_configure+0x66>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1765a:	4e3a      	ldr	r6, [pc, #232]	; (17744 <nrfx_gpiote_output_configure+0xf0>)
   1765c:	f100 0708 	add.w	r7, r0, #8
   17660:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   17664:	07ab      	lsls	r3, r5, #30
   17666:	d404      	bmi.n	17672 <nrfx_gpiote_output_configure+0x1e>
   17668:	f7ff fed6 	bl	17418 <pin_in_use_by_te>
   1766c:	b108      	cbz	r0, 17672 <nrfx_gpiote_output_configure+0x1e>
{
   1766e:	4836      	ldr	r0, [pc, #216]	; (17748 <nrfx_gpiote_output_configure+0xf4>)
}
   17670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   17672:	f015 0f1c 	tst.w	r5, #28
   17676:	784b      	ldrb	r3, [r1, #1]
   17678:	d122      	bne.n	176c0 <nrfx_gpiote_output_configure+0x6c>
    *p_pin = pin_number & 0x1F;
   1767a:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1767e:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1774c <nrfx_gpiote_output_configure+0xf8>
   17682:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   17686:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1768a:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1768e:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
   17690:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   17694:	7809      	ldrb	r1, [r1, #0]
   17696:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    cnf &= ~to_update;
   1769a:	f02c 0c07 	bic.w	ip, ip, #7
   1769e:	ea43 030c 	orr.w	r3, r3, ip
   176a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   176a6:	4929      	ldr	r1, [pc, #164]	; (1774c <nrfx_gpiote_output_configure+0xf8>)
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   176a8:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   176ac:	3080      	adds	r0, #128	; 0x80
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   176ae:	f045 0503 	orr.w	r5, r5, #3
   176b2:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   176b6:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
   176ba:	b922      	cbnz	r2, 176c6 <nrfx_gpiote_output_configure+0x72>
    return NRFX_SUCCESS;
   176bc:	4824      	ldr	r0, [pc, #144]	; (17750 <nrfx_gpiote_output_configure+0xfc>)
   176be:	e7d7      	b.n	17670 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   176c0:	2b01      	cmp	r3, #1
   176c2:	d1da      	bne.n	1767a <nrfx_gpiote_output_configure+0x26>
   176c4:	e7d3      	b.n	1766e <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   176c6:	4e1f      	ldr	r6, [pc, #124]	; (17744 <nrfx_gpiote_output_configure+0xf0>)
   176c8:	f104 0708 	add.w	r7, r4, #8
   176cc:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   176d0:	0783      	lsls	r3, r0, #30
   176d2:	d5cc      	bpl.n	1766e <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   176d4:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
   176d8:	2300      	movs	r3, #0
   176da:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   176dc:	f020 0020 	bic.w	r0, r0, #32
   176e0:	0089      	lsls	r1, r1, #2
   176e2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   176e6:	04c0      	lsls	r0, r0, #19
   176e8:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   176ec:	0cc0      	lsrs	r0, r0, #19
   176ee:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   176f2:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   176f6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   176fa:	7855      	ldrb	r5, [r2, #1]
   176fc:	2d00      	cmp	r5, #0
   176fe:	d0dd      	beq.n	176bc <nrfx_gpiote_output_configure+0x68>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   17700:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   17704:	7892      	ldrb	r2, [r2, #2]
   17706:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   1770a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1770e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17712:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   17716:	0223      	lsls	r3, r4, #8
   17718:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1771c:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1771e:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   17722:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   17726:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17728:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1772a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1772e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17732:	4313      	orrs	r3, r2
   17734:	f040 0020 	orr.w	r0, r0, #32
   17738:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1773c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   17740:	e7bc      	b.n	176bc <nrfx_gpiote_output_configure+0x68>
   17742:	bf00      	nop
   17744:	2000c658 	.word	0x2000c658
   17748:	0bad0004 	.word	0x0bad0004
   1774c:	40842500 	.word	0x40842500
   17750:	0bad0000 	.word	0x0bad0000

00017754 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   17754:	4b01      	ldr	r3, [pc, #4]	; (1775c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   17756:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1775a:	4770      	bx	lr
   1775c:	2000c658 	.word	0x2000c658

00017760 <nrfx_gpiote_channel_get>:
{
   17760:	b508      	push	{r3, lr}
   17762:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   17764:	f7ff fe58 	bl	17418 <pin_in_use_by_te>
   17768:	b138      	cbz	r0, 1777a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1776a:	4b05      	ldr	r3, [pc, #20]	; (17780 <nrfx_gpiote_channel_get+0x20>)
   1776c:	3208      	adds	r2, #8
   1776e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   17772:	4804      	ldr	r0, [pc, #16]	; (17784 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   17774:	0b5b      	lsrs	r3, r3, #13
   17776:	700b      	strb	r3, [r1, #0]
}
   17778:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1777a:	4803      	ldr	r0, [pc, #12]	; (17788 <nrfx_gpiote_channel_get+0x28>)
   1777c:	e7fc      	b.n	17778 <nrfx_gpiote_channel_get+0x18>
   1777e:	bf00      	nop
   17780:	2000c658 	.word	0x2000c658
   17784:	0bad0000 	.word	0x0bad0000
   17788:	0bad0004 	.word	0x0bad0004

0001778c <nrfx_gpiote_init>:
{
   1778c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1778e:	4c0f      	ldr	r4, [pc, #60]	; (177cc <nrfx_gpiote_init+0x40>)
   17790:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   17794:	b9bd      	cbnz	r5, 177c6 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   17796:	2240      	movs	r2, #64	; 0x40
   17798:	4629      	mov	r1, r5
   1779a:	f104 0010 	add.w	r0, r4, #16
   1779e:	f00a fa92 	bl	21cc6 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   177a2:	2031      	movs	r0, #49	; 0x31
   177a4:	f7f6 f908 	bl	d9b8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   177a8:	4b09      	ldr	r3, [pc, #36]	; (177d0 <nrfx_gpiote_init+0x44>)
    return err_code;
   177aa:	480a      	ldr	r0, [pc, #40]	; (177d4 <nrfx_gpiote_init+0x48>)
   177ac:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   177b0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   177b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   177b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   177bc:	2301      	movs	r3, #1
   177be:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   177c2:	6563      	str	r3, [r4, #84]	; 0x54
}
   177c4:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   177c6:	4804      	ldr	r0, [pc, #16]	; (177d8 <nrfx_gpiote_init+0x4c>)
   177c8:	e7fc      	b.n	177c4 <nrfx_gpiote_init+0x38>
   177ca:	bf00      	nop
   177cc:	2000c658 	.word	0x2000c658
   177d0:	40031000 	.word	0x40031000
   177d4:	0bad0000 	.word	0x0bad0000
   177d8:	0bad0005 	.word	0x0bad0005

000177dc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   177dc:	4b03      	ldr	r3, [pc, #12]	; (177ec <nrfx_gpiote_is_init+0x10>)
   177de:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   177e2:	3800      	subs	r0, #0
   177e4:	bf18      	it	ne
   177e6:	2001      	movne	r0, #1
   177e8:	4770      	bx	lr
   177ea:	bf00      	nop
   177ec:	2000c658 	.word	0x2000c658

000177f0 <nrfx_gpiote_channel_free>:
{
   177f0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   177f2:	4801      	ldr	r0, [pc, #4]	; (177f8 <nrfx_gpiote_channel_free+0x8>)
   177f4:	f7ff bcf0 	b.w	171d8 <nrfx_flag32_free>
   177f8:	2000c6a8 	.word	0x2000c6a8

000177fc <nrfx_gpiote_channel_alloc>:
{
   177fc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   177fe:	4801      	ldr	r0, [pc, #4]	; (17804 <nrfx_gpiote_channel_alloc+0x8>)
   17800:	f7ff bcce 	b.w	171a0 <nrfx_flag32_alloc>
   17804:	2000c6a8 	.word	0x2000c6a8

00017808 <nrfx_gpiote_trigger_enable>:
{
   17808:	4602      	mov	r2, r0
   1780a:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1780c:	f7ff fe04 	bl	17418 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   17810:	4b1b      	ldr	r3, [pc, #108]	; (17880 <nrfx_gpiote_trigger_enable+0x78>)
   17812:	f102 0408 	add.w	r4, r2, #8
   17816:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1781a:	b1c8      	cbz	r0, 17850 <nrfx_gpiote_trigger_enable+0x48>
   1781c:	f013 0402 	ands.w	r4, r3, #2
   17820:	d116      	bne.n	17850 <nrfx_gpiote_trigger_enable+0x48>
    return ((uint32_t)p_reg + event);
   17822:	4818      	ldr	r0, [pc, #96]	; (17884 <nrfx_gpiote_trigger_enable+0x7c>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   17824:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   17826:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17828:	5084      	str	r4, [r0, r2]
   1782a:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1782c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   17830:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   17834:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   17838:	f040 0001 	orr.w	r0, r0, #1
   1783c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   17840:	b129      	cbz	r1, 1784e <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   17842:	2201      	movs	r2, #1
   17844:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   17848:	4a0f      	ldr	r2, [pc, #60]	; (17888 <nrfx_gpiote_trigger_enable+0x80>)
   1784a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1784e:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   17850:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   17854:	2b04      	cmp	r3, #4
   17856:	d00e      	beq.n	17876 <nrfx_gpiote_trigger_enable+0x6e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   17858:	2b05      	cmp	r3, #5
   1785a:	d00e      	beq.n	1787a <nrfx_gpiote_trigger_enable+0x72>
    return p_reg->IN;
   1785c:	4b0b      	ldr	r3, [pc, #44]	; (1788c <nrfx_gpiote_trigger_enable+0x84>)
   1785e:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
   17860:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   17864:	40d9      	lsrs	r1, r3
   17866:	f001 0101 	and.w	r1, r1, #1
   1786a:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1786c:	4610      	mov	r0, r2
}
   1786e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   17872:	f7ff bdc1 	b.w	173f8 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   17876:	2103      	movs	r1, #3
   17878:	e7f8      	b.n	1786c <nrfx_gpiote_trigger_enable+0x64>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1787a:	2102      	movs	r1, #2
   1787c:	e7f6      	b.n	1786c <nrfx_gpiote_trigger_enable+0x64>
   1787e:	bf00      	nop
   17880:	2000c658 	.word	0x2000c658
   17884:	40031100 	.word	0x40031100
   17888:	40031000 	.word	0x40031000
   1788c:	40842500 	.word	0x40842500

00017890 <nrfx_gpiote_trigger_disable>:
{
   17890:	b508      	push	{r3, lr}
   17892:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   17894:	f7ff fdc0 	bl	17418 <pin_in_use_by_te>
   17898:	b1c0      	cbz	r0, 178cc <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1789a:	4b0f      	ldr	r3, [pc, #60]	; (178d8 <nrfx_gpiote_trigger_disable+0x48>)
   1789c:	f102 0108 	add.w	r1, r2, #8
   178a0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   178a4:	0799      	lsls	r1, r3, #30
   178a6:	d411      	bmi.n	178cc <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   178a8:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   178aa:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   178ac:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   178ae:	490b      	ldr	r1, [pc, #44]	; (178dc <nrfx_gpiote_trigger_disable+0x4c>)
   178b0:	009b      	lsls	r3, r3, #2
   178b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   178b6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   178ba:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   178be:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   178c2:	f022 0203 	bic.w	r2, r2, #3
   178c6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   178ca:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   178cc:	2100      	movs	r1, #0
}
   178ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   178d2:	4610      	mov	r0, r2
   178d4:	f7ff bd90 	b.w	173f8 <nrf_gpio_cfg_sense_set>
   178d8:	2000c658 	.word	0x2000c658
   178dc:	40031000 	.word	0x40031000

000178e0 <nrfx_gpiote_pin_uninit>:
{
   178e0:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   178e2:	4b0c      	ldr	r3, [pc, #48]	; (17914 <nrfx_gpiote_pin_uninit+0x34>)
   178e4:	f100 0208 	add.w	r2, r0, #8
   178e8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   178ec:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   178ee:	07db      	lsls	r3, r3, #31
   178f0:	d50d      	bpl.n	1790e <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
   178f2:	f7ff ffcd 	bl	17890 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   178f6:	4620      	mov	r0, r4
   178f8:	f7ff fde2 	bl	174c0 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   178fc:	2202      	movs	r2, #2
   178fe:	4b06      	ldr	r3, [pc, #24]	; (17918 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
   17900:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
   17904:	3480      	adds	r4, #128	; 0x80
   17906:	4805      	ldr	r0, [pc, #20]	; (1791c <nrfx_gpiote_pin_uninit+0x3c>)
   17908:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   1790c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1790e:	4804      	ldr	r0, [pc, #16]	; (17920 <nrfx_gpiote_pin_uninit+0x40>)
   17910:	e7fc      	b.n	1790c <nrfx_gpiote_pin_uninit+0x2c>
   17912:	bf00      	nop
   17914:	2000c658 	.word	0x2000c658
   17918:	40842500 	.word	0x40842500
   1791c:	0bad0000 	.word	0x0bad0000
   17920:	0bad0004 	.word	0x0bad0004

00017924 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   17924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   17928:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1792a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1792c:	462c      	mov	r4, r5
{
   1792e:	4b4d      	ldr	r3, [pc, #308]	; (17a64 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
   17930:	484d      	ldr	r0, [pc, #308]	; (17a68 <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   17932:	494e      	ldr	r1, [pc, #312]	; (17a6c <nrfx_gpiote_irq_handler+0x148>)
{
   17934:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17936:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   17938:	b136      	cbz	r6, 17948 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1793a:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   1793e:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17940:	bf1e      	ittt	ne
   17942:	601c      	strne	r4, [r3, #0]
   17944:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   17946:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   17948:	3304      	adds	r3, #4
   1794a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1794c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   17950:	d1f1      	bne.n	17936 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17952:	4f45      	ldr	r7, [pc, #276]	; (17a68 <nrfx_gpiote_irq_handler+0x144>)
   17954:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   17958:	b193      	cbz	r3, 17980 <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
   1795a:	4e45      	ldr	r6, [pc, #276]	; (17a70 <nrfx_gpiote_irq_handler+0x14c>)
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1795c:	f10d 090c 	add.w	r9, sp, #12
   17960:	6a33      	ldr	r3, [r6, #32]
   17962:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   17964:	6233      	str	r3, [r6, #32]
   17966:	f04f 0a01 	mov.w	sl, #1
            while (latch[i])
   1796a:	9803      	ldr	r0, [sp, #12]
   1796c:	b970      	cbnz	r0, 1798c <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1796e:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
   17972:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   17976:	6a33      	ldr	r3, [r6, #32]
   17978:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   1797a:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
   1797c:	2b00      	cmp	r3, #0
   1797e:	d1f2      	bne.n	17966 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   17980:	2401      	movs	r4, #1
    while (mask)
   17982:	2d00      	cmp	r5, #0
   17984:	d156      	bne.n	17a34 <nrfx_gpiote_irq_handler+0x110>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   17986:	b005      	add	sp, #20
   17988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   1798c:	fa90 fba0 	rbit	fp, r0
   17990:	fabb fb8b 	clz	fp, fp
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   17994:	4a37      	ldr	r2, [pc, #220]	; (17a74 <nrfx_gpiote_irq_handler+0x150>)
   17996:	f10b 0308 	add.w	r3, fp, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1799a:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
   1799e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
   179a2:	f00b 0407 	and.w	r4, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   179a6:	f819 300c 	ldrb.w	r3, [r9, ip]
   179aa:	fa0a f404 	lsl.w	r4, sl, r4
   179ae:	ea23 0304 	bic.w	r3, r3, r4
   179b2:	f809 300c 	strb.w	r3, [r9, ip]
   179b6:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   179ba:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
   179be:	f3c1 0282 	ubfx	r2, r1, #2, #3
    if (is_level(trigger))
   179c2:	06c9      	lsls	r1, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   179c4:	4690      	mov	r8, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   179c6:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
   179ca:	d518      	bpl.n	179fe <nrfx_gpiote_irq_handler+0xda>
        call_handler(pin, trigger);
   179cc:	4611      	mov	r1, r2
   179ce:	4658      	mov	r0, fp
   179d0:	9301      	str	r3, [sp, #4]
   179d2:	f7ff fd2b 	bl	1742c <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   179d6:	9b01      	ldr	r3, [sp, #4]
   179d8:	b2e4      	uxtb	r4, r4
   179da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
   179de:	f3c3 4301 	ubfx	r3, r3, #16, #2
   179e2:	429c      	cmp	r4, r3
   179e4:	d107      	bne.n	179f6 <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   179e6:	2100      	movs	r1, #0
   179e8:	4658      	mov	r0, fp
   179ea:	f7ff fd05 	bl	173f8 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   179ee:	4621      	mov	r1, r4
   179f0:	4658      	mov	r0, fp
   179f2:	f7ff fd01 	bl	173f8 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   179f6:	fa0a f00b 	lsl.w	r0, sl, fp
   179fa:	6230      	str	r0, [r6, #32]
}
   179fc:	e7b5      	b.n	1796a <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   179fe:	2c02      	cmp	r4, #2
   17a00:	d10c      	bne.n	17a1c <nrfx_gpiote_irq_handler+0xf8>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   17a02:	2103      	movs	r1, #3
   17a04:	4658      	mov	r0, fp
   17a06:	f7ff fcf7 	bl	173f8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   17a0a:	f008 0305 	and.w	r3, r8, #5
   17a0e:	2b01      	cmp	r3, #1
   17a10:	d1f1      	bne.n	179f6 <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
   17a12:	4641      	mov	r1, r8
   17a14:	4658      	mov	r0, fp
   17a16:	f7ff fd09 	bl	1742c <call_handler>
   17a1a:	e7ec      	b.n	179f6 <nrfx_gpiote_irq_handler+0xd2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   17a1c:	2102      	movs	r1, #2
   17a1e:	4658      	mov	r0, fp
   17a20:	9201      	str	r2, [sp, #4]
   17a22:	f7ff fce9 	bl	173f8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   17a26:	9a01      	ldr	r2, [sp, #4]
   17a28:	2a03      	cmp	r2, #3
   17a2a:	d0f2      	beq.n	17a12 <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   17a2c:	2c03      	cmp	r4, #3
   17a2e:	d1e2      	bne.n	179f6 <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   17a30:	428a      	cmp	r2, r1
   17a32:	e7ed      	b.n	17a10 <nrfx_gpiote_irq_handler+0xec>
        uint32_t ch = NRF_CTZ(mask);
   17a34:	fa95 f3a5 	rbit	r3, r5
   17a38:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   17a3c:	fa04 f203 	lsl.w	r2, r4, r3
   17a40:	009b      	lsls	r3, r3, #2
   17a42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17a46:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   17a4a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   17a4e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   17a52:	f3c0 2004 	ubfx	r0, r0, #8, #5
   17a56:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   17a5a:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   17a5e:	f7ff fce5 	bl	1742c <call_handler>
   17a62:	e78e      	b.n	17982 <nrfx_gpiote_irq_handler+0x5e>
   17a64:	40031100 	.word	0x40031100
   17a68:	40031000 	.word	0x40031000
   17a6c:	40031120 	.word	0x40031120
   17a70:	40842500 	.word	0x40842500
   17a74:	2000c658 	.word	0x2000c658

00017a78 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   17a78:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   17a7a:	4c08      	ldr	r4, [pc, #32]	; (17a9c <nrfx_ipc_init+0x24>)
{
   17a7c:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   17a7e:	7923      	ldrb	r3, [r4, #4]
{
   17a80:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   17a82:	b943      	cbnz	r3, 17a96 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   17a84:	202a      	movs	r0, #42	; 0x2a
   17a86:	f7f5 ff97 	bl	d9b8 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   17a8a:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   17a8c:	4804      	ldr	r0, [pc, #16]	; (17aa0 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   17a8e:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   17a90:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   17a92:	60a5      	str	r5, [r4, #8]
}
   17a94:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   17a96:	4803      	ldr	r0, [pc, #12]	; (17aa4 <nrfx_ipc_init+0x2c>)
   17a98:	e7fc      	b.n	17a94 <nrfx_ipc_init+0x1c>
   17a9a:	bf00      	nop
   17a9c:	2000df34 	.word	0x2000df34
   17aa0:	0bad0000 	.word	0x0bad0000
   17aa4:	0bad000c 	.word	0x0bad000c

00017aa8 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   17aa8:	2300      	movs	r3, #0
{
   17aaa:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   17aac:	4a0d      	ldr	r2, [pc, #52]	; (17ae4 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   17aae:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   17ab2:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   17ab6:	3301      	adds	r3, #1
   17ab8:	2b08      	cmp	r3, #8
   17aba:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   17abe:	d1f6      	bne.n	17aae <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   17ac0:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   17ac2:	4a08      	ldr	r2, [pc, #32]	; (17ae4 <nrfx_ipc_config_load+0x3c>)
   17ac4:	f100 011c 	add.w	r1, r0, #28
   17ac8:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   17acc:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   17ad0:	3301      	adds	r3, #1
   17ad2:	2b08      	cmp	r3, #8
   17ad4:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   17ad8:	d1f6      	bne.n	17ac8 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   17ada:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   17adc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   17ae0:	bd30      	pop	{r4, r5, pc}
   17ae2:	bf00      	nop
   17ae4:	4002a000 	.word	0x4002a000

00017ae8 <nrfx_ipc_uninit>:
    p_reg->SEND_CNF[index] = channels_mask;
   17ae8:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   17aea:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->SEND_CNF[index] = channels_mask;
   17aee:	4a13      	ldr	r2, [pc, #76]	; (17b3c <nrfx_ipc_uninit+0x54>)
   17af0:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   17af4:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   17af8:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   17afc:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   17b00:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   17b04:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   17b08:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   17b0c:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
   17b10:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   17b14:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   17b18:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   17b1c:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   17b20:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   17b24:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   17b28:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
   17b2c:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
   17b30:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   17b34:	4a02      	ldr	r2, [pc, #8]	; (17b40 <nrfx_ipc_uninit+0x58>)
   17b36:	7113      	strb	r3, [r2, #4]
}
   17b38:	4770      	bx	lr
   17b3a:	bf00      	nop
   17b3c:	4002a000 	.word	0x4002a000
   17b40:	2000df34 	.word	0x2000df34

00017b44 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   17b44:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   17b46:	4a02      	ldr	r2, [pc, #8]	; (17b50 <nrfx_ipc_receive_event_enable+0xc>)
   17b48:	4083      	lsls	r3, r0
   17b4a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   17b4e:	4770      	bx	lr
   17b50:	4002a000 	.word	0x4002a000

00017b54 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   17b54:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
   17b56:	4a02      	ldr	r2, [pc, #8]	; (17b60 <nrfx_ipc_receive_event_disable+0xc>)
   17b58:	4083      	lsls	r3, r0
   17b5a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   17b5e:	4770      	bx	lr
   17b60:	4002a000 	.word	0x4002a000

00017b64 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   17b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   17b66:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17b68:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   17b6a:	4b0b      	ldr	r3, [pc, #44]	; (17b98 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   17b6c:	4d0b      	ldr	r5, [pc, #44]	; (17b9c <nrfx_ipc_irq_handler+0x38>)
   17b6e:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   17b72:	b904      	cbnz	r4, 17b76 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   17b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   17b76:	fa94 f0a4 	rbit	r0, r4
   17b7a:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   17b7e:	fa06 f300 	lsl.w	r3, r6, r0
   17b82:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17b86:	4b06      	ldr	r3, [pc, #24]	; (17ba0 <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   17b88:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17b8a:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   17b8c:	682b      	ldr	r3, [r5, #0]
   17b8e:	2b00      	cmp	r3, #0
   17b90:	d0ef      	beq.n	17b72 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   17b92:	68a9      	ldr	r1, [r5, #8]
   17b94:	4798      	blx	r3
   17b96:	e7ec      	b.n	17b72 <nrfx_ipc_irq_handler+0xe>
   17b98:	4002a000 	.word	0x4002a000
   17b9c:	2000df34 	.word	0x2000df34
   17ba0:	4002a100 	.word	0x4002a100

00017ba4 <rpc_handle_data_message>:
   17ba4:	b570      	push	{r4, r5, r6, lr}
   17ba6:	6803      	ldr	r3, [r0, #0]
   17ba8:	4604      	mov	r4, r0
   17baa:	3b03      	subs	r3, #3
   17bac:	b2db      	uxtb	r3, r3
   17bae:	2b04      	cmp	r3, #4
   17bb0:	d803      	bhi.n	17bba <rpc_handle_data_message+0x16>
   17bb2:	4a09      	ldr	r2, [pc, #36]	; (17bd8 <rpc_handle_data_message+0x34>)
   17bb4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   17bb8:	b92d      	cbnz	r5, 17bc6 <rpc_handle_data_message+0x22>
   17bba:	68a0      	ldr	r0, [r4, #8]
   17bbc:	b108      	cbz	r0, 17bc2 <rpc_handle_data_message+0x1e>
   17bbe:	f000 f82b 	bl	17c18 <rpc_transport_msg_data_rx_free>
   17bc2:	2000      	movs	r0, #0
   17bc4:	bd70      	pop	{r4, r5, r6, pc}
   17bc6:	f008 fbe8 	bl	2039a <rpc_client_msg_from_rpc_msg_get>
   17bca:	6821      	ldr	r1, [r4, #0]
   17bcc:	462b      	mov	r3, r5
   17bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17bd2:	0c09      	lsrs	r1, r1, #16
   17bd4:	4718      	bx	r3
   17bd6:	bf00      	nop
   17bd8:	00023678 	.word	0x00023678

00017bdc <rpc_transport_init>:
   17bdc:	4b01      	ldr	r3, [pc, #4]	; (17be4 <rpc_transport_init+0x8>)
   17bde:	699b      	ldr	r3, [r3, #24]
   17be0:	4718      	bx	r3
   17be2:	bf00      	nop
   17be4:	2000c6b4 	.word	0x2000c6b4

00017be8 <rpc_transport_msg_alloc>:
   17be8:	4b01      	ldr	r3, [pc, #4]	; (17bf0 <rpc_transport_msg_alloc+0x8>)
   17bea:	681b      	ldr	r3, [r3, #0]
   17bec:	4718      	bx	r3
   17bee:	bf00      	nop
   17bf0:	2000c6b4 	.word	0x2000c6b4

00017bf4 <rpc_transport_msg_data_tx_size>:
   17bf4:	4b01      	ldr	r3, [pc, #4]	; (17bfc <rpc_transport_msg_data_tx_size+0x8>)
   17bf6:	685b      	ldr	r3, [r3, #4]
   17bf8:	4718      	bx	r3
   17bfa:	bf00      	nop
   17bfc:	2000c6b4 	.word	0x2000c6b4

00017c00 <rpc_transport_msg_rx_free>:
   17c00:	4b01      	ldr	r3, [pc, #4]	; (17c08 <rpc_transport_msg_rx_free+0x8>)
   17c02:	68db      	ldr	r3, [r3, #12]
   17c04:	4718      	bx	r3
   17c06:	bf00      	nop
   17c08:	2000c6b4 	.word	0x2000c6b4

00017c0c <rpc_transport_msg_tx_free>:
   17c0c:	4b01      	ldr	r3, [pc, #4]	; (17c14 <rpc_transport_msg_tx_free+0x8>)
   17c0e:	691b      	ldr	r3, [r3, #16]
   17c10:	4718      	bx	r3
   17c12:	bf00      	nop
   17c14:	2000c6b4 	.word	0x2000c6b4

00017c18 <rpc_transport_msg_data_rx_free>:
   17c18:	4b01      	ldr	r3, [pc, #4]	; (17c20 <rpc_transport_msg_data_rx_free+0x8>)
   17c1a:	695b      	ldr	r3, [r3, #20]
   17c1c:	4718      	bx	r3
   17c1e:	bf00      	nop
   17c20:	2000c6b4 	.word	0x2000c6b4

00017c24 <rpc_transport_msg_send>:
   17c24:	4b01      	ldr	r3, [pc, #4]	; (17c2c <rpc_transport_msg_send+0x8>)
   17c26:	689b      	ldr	r3, [r3, #8]
   17c28:	4718      	bx	r3
   17c2a:	bf00      	nop
   17c2c:	2000c6b4 	.word	0x2000c6b4

00017c30 <rpc_transport_data_rx_suspend>:
   17c30:	4b01      	ldr	r3, [pc, #4]	; (17c38 <rpc_transport_data_rx_suspend+0x8>)
   17c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17c34:	4718      	bx	r3
   17c36:	bf00      	nop
   17c38:	2000c6b4 	.word	0x2000c6b4

00017c3c <rpc_transport_data_rx_resume>:
   17c3c:	4b01      	ldr	r3, [pc, #4]	; (17c44 <rpc_transport_data_rx_resume+0x8>)
   17c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17c40:	4718      	bx	r3
   17c42:	bf00      	nop
   17c44:	2000c6b4 	.word	0x2000c6b4

00017c48 <rpc_transport_ipc_msg_data_tx_size>:
   17c48:	4b01      	ldr	r3, [pc, #4]	; (17c50 <rpc_transport_ipc_msg_data_tx_size+0x8>)
   17c4a:	681b      	ldr	r3, [r3, #0]
   17c4c:	68d8      	ldr	r0, [r3, #12]
   17c4e:	4770      	bx	lr
   17c50:	2000df40 	.word	0x2000df40

00017c54 <rpc_transport_ipc_msg_rx_free>:
   17c54:	2300      	movs	r3, #0
   17c56:	b530      	push	{r4, r5, lr}
   17c58:	4910      	ldr	r1, [pc, #64]	; (17c9c <rpc_transport_ipc_msg_rx_free+0x48>)
   17c5a:	680a      	ldr	r2, [r1, #0]
   17c5c:	6814      	ldr	r4, [r2, #0]
   17c5e:	42a3      	cmp	r3, r4
   17c60:	d10b      	bne.n	17c7a <rpc_transport_ipc_msg_rx_free+0x26>
   17c62:	2300      	movs	r3, #0
   17c64:	684a      	ldr	r2, [r1, #4]
   17c66:	6811      	ldr	r1, [r2, #0]
   17c68:	428b      	cmp	r3, r1
   17c6a:	d015      	beq.n	17c98 <rpc_transport_ipc_msg_rx_free+0x44>
   17c6c:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   17c70:	68a4      	ldr	r4, [r4, #8]
   17c72:	42a0      	cmp	r0, r4
   17c74:	d008      	beq.n	17c88 <rpc_transport_ipc_msg_rx_free+0x34>
   17c76:	3301      	adds	r3, #1
   17c78:	e7f6      	b.n	17c68 <rpc_transport_ipc_msg_rx_free+0x14>
   17c7a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   17c7e:	68ad      	ldr	r5, [r5, #8]
   17c80:	42a8      	cmp	r0, r5
   17c82:	d001      	beq.n	17c88 <rpc_transport_ipc_msg_rx_free+0x34>
   17c84:	3301      	adds	r3, #1
   17c86:	e7ea      	b.n	17c5e <rpc_transport_ipc_msg_rx_free+0xa>
   17c88:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   17c8c:	6853      	ldr	r3, [r2, #4]
   17c8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   17c92:	f043 0303 	orr.w	r3, r3, #3
   17c96:	6053      	str	r3, [r2, #4]
   17c98:	bd30      	pop	{r4, r5, pc}
   17c9a:	bf00      	nop
   17c9c:	2000df60 	.word	0x2000df60

00017ca0 <rpc_transport_ipc_msg_tx_free>:
   17ca0:	2200      	movs	r2, #0
   17ca2:	b530      	push	{r4, r5, lr}
   17ca4:	4b0b      	ldr	r3, [pc, #44]	; (17cd4 <rpc_transport_ipc_msg_tx_free+0x34>)
   17ca6:	6819      	ldr	r1, [r3, #0]
   17ca8:	680c      	ldr	r4, [r1, #0]
   17caa:	4294      	cmp	r4, r2
   17cac:	d00f      	beq.n	17cce <rpc_transport_ipc_msg_tx_free+0x2e>
   17cae:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   17cb2:	689d      	ldr	r5, [r3, #8]
   17cb4:	42a8      	cmp	r0, r5
   17cb6:	d10b      	bne.n	17cd0 <rpc_transport_ipc_msg_tx_free+0x30>
   17cb8:	f04f 0203 	mov.w	r2, #3
   17cbc:	3304      	adds	r3, #4
   17cbe:	e8d3 1fcf 	ldaexb	r1, [r3]
   17cc2:	2900      	cmp	r1, #0
   17cc4:	d103      	bne.n	17cce <rpc_transport_ipc_msg_tx_free+0x2e>
   17cc6:	e8c3 2fc0 	stlexb	r0, r2, [r3]
   17cca:	2800      	cmp	r0, #0
   17ccc:	d1f7      	bne.n	17cbe <rpc_transport_ipc_msg_tx_free+0x1e>
   17cce:	bd30      	pop	{r4, r5, pc}
   17cd0:	3201      	adds	r2, #1
   17cd2:	e7ea      	b.n	17caa <rpc_transport_ipc_msg_tx_free+0xa>
   17cd4:	2000df58 	.word	0x2000df58

00017cd8 <handle_modem_rpc_msg>:
   17cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17cdc:	2500      	movs	r5, #0
   17cde:	4606      	mov	r6, r0
   17ce0:	460f      	mov	r7, r1
   17ce2:	4628      	mov	r0, r5
   17ce4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 17d4c <handle_modem_rpc_msg+0x74>
   17ce8:	6833      	ldr	r3, [r6, #0]
   17cea:	42ab      	cmp	r3, r5
   17cec:	d801      	bhi.n	17cf2 <handle_modem_rpc_msg+0x1a>
   17cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17cf2:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   17cf6:	6863      	ldr	r3, [r4, #4]
   17cf8:	b2db      	uxtb	r3, r3
   17cfa:	2b01      	cmp	r3, #1
   17cfc:	d117      	bne.n	17d2e <handle_modem_rpc_msg+0x56>
   17cfe:	6862      	ldr	r2, [r4, #4]
   17d00:	f8b8 3000 	ldrh.w	r3, [r8]
   17d04:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   17d08:	d111      	bne.n	17d2e <handle_modem_rpc_msg+0x56>
   17d0a:	2f02      	cmp	r7, #2
   17d0c:	68a0      	ldr	r0, [r4, #8]
   17d0e:	d110      	bne.n	17d32 <handle_modem_rpc_msg+0x5a>
   17d10:	f7ff ff48 	bl	17ba4 <rpc_handle_data_message>
   17d14:	b990      	cbnz	r0, 17d3c <handle_modem_rpc_msg+0x64>
   17d16:	6863      	ldr	r3, [r4, #4]
   17d18:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   17d1c:	f043 0303 	orr.w	r3, r3, #3
   17d20:	6063      	str	r3, [r4, #4]
   17d22:	2001      	movs	r0, #1
   17d24:	f8b8 3000 	ldrh.w	r3, [r8]
   17d28:	3301      	adds	r3, #1
   17d2a:	f8a8 3000 	strh.w	r3, [r8]
   17d2e:	3501      	adds	r5, #1
   17d30:	e7da      	b.n	17ce8 <handle_modem_rpc_msg+0x10>
   17d32:	6801      	ldr	r1, [r0, #0]
   17d34:	0c09      	lsrs	r1, r1, #16
   17d36:	f008 fad9 	bl	202ec <rpc_handle_ctrl_message>
   17d3a:	e7eb      	b.n	17d14 <handle_modem_rpc_msg+0x3c>
   17d3c:	2801      	cmp	r0, #1
   17d3e:	d1f0      	bne.n	17d22 <handle_modem_rpc_msg+0x4a>
   17d40:	6863      	ldr	r3, [r4, #4]
   17d42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   17d46:	f043 0302 	orr.w	r3, r3, #2
   17d4a:	e7e9      	b.n	17d20 <handle_modem_rpc_msg+0x48>
   17d4c:	2000e34e 	.word	0x2000e34e

00017d50 <rpc_message_handler>:
   17d50:	b538      	push	{r3, r4, r5, lr}
   17d52:	4d07      	ldr	r5, [pc, #28]	; (17d70 <rpc_message_handler+0x20>)
   17d54:	2101      	movs	r1, #1
   17d56:	6828      	ldr	r0, [r5, #0]
   17d58:	f7ff ffbe 	bl	17cd8 <handle_modem_rpc_msg>
   17d5c:	2102      	movs	r1, #2
   17d5e:	4604      	mov	r4, r0
   17d60:	6868      	ldr	r0, [r5, #4]
   17d62:	f7ff ffb9 	bl	17cd8 <handle_modem_rpc_msg>
   17d66:	2800      	cmp	r0, #0
   17d68:	d1f4      	bne.n	17d54 <rpc_message_handler+0x4>
   17d6a:	2c00      	cmp	r4, #0
   17d6c:	d1f2      	bne.n	17d54 <rpc_message_handler+0x4>
   17d6e:	bd38      	pop	{r3, r4, r5, pc}
   17d70:	2000df60 	.word	0x2000df60

00017d74 <ipc_irq_handler>:
   17d74:	b570      	push	{r4, r5, r6, lr}
   17d76:	2807      	cmp	r0, #7
   17d78:	d868      	bhi.n	17e4c <ipc_irq_handler+0xd8>
   17d7a:	e8df f000 	tbb	[pc, r0]
   17d7e:	670b      	.short	0x670b
   17d80:	674b674f 	.word	0x674b674f
   17d84:	0440      	.short	0x0440
   17d86:	f002 f913 	bl	19fb0 <ipc_trace_handler>
   17d8a:	2003      	movs	r0, #3
   17d8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17d90:	f7f9 bb2c 	b.w	113ec <nrf_modem_os_event_notify>
   17d94:	2003      	movs	r0, #3
   17d96:	4b2e      	ldr	r3, [pc, #184]	; (17e50 <ipc_irq_handler+0xdc>)
   17d98:	f8d3 4614 	ldr.w	r4, [r3, #1556]	; 0x614
   17d9c:	f8d3 6618 	ldr.w	r6, [r3, #1560]	; 0x618
   17da0:	4b2c      	ldr	r3, [pc, #176]	; (17e54 <ipc_irq_handler+0xe0>)
   17da2:	781d      	ldrb	r5, [r3, #0]
   17da4:	7018      	strb	r0, [r3, #0]
   17da6:	f002 f8d9 	bl	19f5c <nrf_modem_state_set>
   17daa:	4b2b      	ldr	r3, [pc, #172]	; (17e58 <ipc_irq_handler+0xe4>)
   17dac:	b2ed      	uxtb	r5, r5
   17dae:	6818      	ldr	r0, [r3, #0]
   17db0:	f007 fc86 	bl	1f6c0 <nrf_modem_os_sem_give>
   17db4:	2d01      	cmp	r5, #1
   17db6:	d11c      	bne.n	17df2 <ipc_irq_handler+0x7e>
   17db8:	4b28      	ldr	r3, [pc, #160]	; (17e5c <ipc_irq_handler+0xe8>)
   17dba:	429c      	cmp	r4, r3
   17dbc:	d010      	beq.n	17de0 <ipc_irq_handler+0x6c>
   17dbe:	d809      	bhi.n	17dd4 <ipc_irq_handler+0x60>
   17dc0:	3b02      	subs	r3, #2
   17dc2:	429c      	cmp	r4, r3
   17dc4:	d00f      	beq.n	17de6 <ipc_irq_handler+0x72>
   17dc6:	3301      	adds	r3, #1
   17dc8:	429c      	cmp	r4, r3
   17dca:	d00f      	beq.n	17dec <ipc_irq_handler+0x78>
   17dcc:	4b24      	ldr	r3, [pc, #144]	; (17e60 <ipc_irq_handler+0xec>)
   17dce:	601c      	str	r4, [r3, #0]
   17dd0:	2000      	movs	r0, #0
   17dd2:	e7db      	b.n	17d8c <ipc_irq_handler+0x18>
   17dd4:	4b23      	ldr	r3, [pc, #140]	; (17e64 <ipc_irq_handler+0xf0>)
   17dd6:	429c      	cmp	r4, r3
   17dd8:	d1f8      	bne.n	17dcc <ipc_irq_handler+0x58>
   17dda:	f06f 040c 	mvn.w	r4, #12
   17dde:	e7f5      	b.n	17dcc <ipc_irq_handler+0x58>
   17de0:	f06f 040b 	mvn.w	r4, #11
   17de4:	e7f2      	b.n	17dcc <ipc_irq_handler+0x58>
   17de6:	f06f 0415 	mvn.w	r4, #21
   17dea:	e7ef      	b.n	17dcc <ipc_irq_handler+0x58>
   17dec:	f06f 0485 	mvn.w	r4, #133	; 0x85
   17df0:	e7ec      	b.n	17dcc <ipc_irq_handler+0x58>
   17df2:	4631      	mov	r1, r6
   17df4:	f3c4 000b 	ubfx	r0, r4, #0, #12
   17df8:	f002 f8a4 	bl	19f44 <nrf_modem_fault_handler_internal>
   17dfc:	e7e8      	b.n	17dd0 <ipc_irq_handler+0x5c>
   17dfe:	2202      	movs	r2, #2
   17e00:	4b14      	ldr	r3, [pc, #80]	; (17e54 <ipc_irq_handler+0xe0>)
   17e02:	2000      	movs	r0, #0
   17e04:	701a      	strb	r2, [r3, #0]
   17e06:	f002 f8a9 	bl	19f5c <nrf_modem_state_set>
   17e0a:	4b13      	ldr	r3, [pc, #76]	; (17e58 <ipc_irq_handler+0xe4>)
   17e0c:	6818      	ldr	r0, [r3, #0]
   17e0e:	f007 fc57 	bl	1f6c0 <nrf_modem_os_sem_give>
   17e12:	e7dd      	b.n	17dd0 <ipc_irq_handler+0x5c>
   17e14:	f7ff ff9c 	bl	17d50 <rpc_message_handler>
   17e18:	2002      	movs	r0, #2
   17e1a:	e7b7      	b.n	17d8c <ipc_irq_handler+0x18>
   17e1c:	4b0d      	ldr	r3, [pc, #52]	; (17e54 <ipc_irq_handler+0xe0>)
   17e1e:	781a      	ldrb	r2, [r3, #0]
   17e20:	2a01      	cmp	r2, #1
   17e22:	b2d0      	uxtb	r0, r2
   17e24:	d10e      	bne.n	17e44 <ipc_irq_handler+0xd0>
   17e26:	4a10      	ldr	r2, [pc, #64]	; (17e68 <ipc_irq_handler+0xf4>)
   17e28:	6811      	ldr	r1, [r2, #0]
   17e2a:	4a10      	ldr	r2, [pc, #64]	; (17e6c <ipc_irq_handler+0xf8>)
   17e2c:	688c      	ldr	r4, [r1, #8]
   17e2e:	6054      	str	r4, [r2, #4]
   17e30:	6849      	ldr	r1, [r1, #4]
   17e32:	6011      	str	r1, [r2, #0]
   17e34:	2200      	movs	r2, #0
   17e36:	701a      	strb	r2, [r3, #0]
   17e38:	f002 f890 	bl	19f5c <nrf_modem_state_set>
   17e3c:	4b06      	ldr	r3, [pc, #24]	; (17e58 <ipc_irq_handler+0xe4>)
   17e3e:	6818      	ldr	r0, [r3, #0]
   17e40:	f007 fc3e 	bl	1f6c0 <nrf_modem_os_sem_give>
   17e44:	f7ff ff84 	bl	17d50 <rpc_message_handler>
   17e48:	2001      	movs	r0, #1
   17e4a:	e79f      	b.n	17d8c <ipc_irq_handler+0x18>
   17e4c:	bd70      	pop	{r4, r5, r6, pc}
   17e4e:	bf00      	nop
   17e50:	4002a000 	.word	0x4002a000
   17e54:	200110c3 	.word	0x200110c3
   17e58:	2000df48 	.word	0x2000df48
   17e5c:	00010022 	.word	0x00010022
   17e60:	2000df5c 	.word	0x2000df5c
   17e64:	00013032 	.word	0x00013032
   17e68:	2000df44 	.word	0x2000df44
   17e6c:	2000df60 	.word	0x2000df60

00017e70 <rpc_transport_ipc_data_msg_send>:
   17e70:	b570      	push	{r4, r5, r6, lr}
   17e72:	4b16      	ldr	r3, [pc, #88]	; (17ecc <rpc_transport_ipc_data_msg_send+0x5c>)
   17e74:	6842      	ldr	r2, [r0, #4]
   17e76:	681b      	ldr	r3, [r3, #0]
   17e78:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   17e7c:	f042 0202 	orr.w	r2, r2, #2
   17e80:	1ac3      	subs	r3, r0, r3
   17e82:	6042      	str	r2, [r0, #4]
   17e84:	4812      	ldr	r0, [pc, #72]	; (17ed0 <rpc_transport_ipc_data_msg_send+0x60>)
   17e86:	4a13      	ldr	r2, [pc, #76]	; (17ed4 <rpc_transport_ipc_data_msg_send+0x64>)
   17e88:	6801      	ldr	r1, [r0, #0]
   17e8a:	f3c3 1389 	ubfx	r3, r3, #6, #10
   17e8e:	e8d2 4fdf 	ldaexh	r4, [r2]
   17e92:	1c65      	adds	r5, r4, #1
   17e94:	e8c2 5fd6 	stlexh	r6, r5, [r2]
   17e98:	2e00      	cmp	r6, #0
   17e9a:	d1f8      	bne.n	17e8e <rpc_transport_ipc_data_msg_send+0x1e>
   17e9c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   17ea0:	684a      	ldr	r2, [r1, #4]
   17ea2:	b292      	uxth	r2, r2
   17ea4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   17ea8:	604a      	str	r2, [r1, #4]
   17eaa:	6802      	ldr	r2, [r0, #0]
   17eac:	2003      	movs	r0, #3
   17eae:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   17eb2:	6853      	ldr	r3, [r2, #4]
   17eb4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   17eb8:	f043 0301 	orr.w	r3, r3, #1
   17ebc:	6053      	str	r3, [r2, #4]
   17ebe:	f007 fbf5 	bl	1f6ac <nrf_modem_os_busywait>
   17ec2:	2201      	movs	r2, #1
   17ec4:	4b04      	ldr	r3, [pc, #16]	; (17ed8 <rpc_transport_ipc_data_msg_send+0x68>)
   17ec6:	60da      	str	r2, [r3, #12]
   17ec8:	bd70      	pop	{r4, r5, r6, pc}
   17eca:	bf00      	nop
   17ecc:	2000df50 	.word	0x2000df50
   17ed0:	2000df58 	.word	0x2000df58
   17ed4:	2000e350 	.word	0x2000e350
   17ed8:	4002a000 	.word	0x4002a000

00017edc <rpc_transport_ipc_ctrl_msg_alloc>:
   17edc:	230a      	movs	r3, #10
   17ede:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17ee0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   17ee4:	4e0c      	ldr	r6, [pc, #48]	; (17f18 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   17ee6:	4f0d      	ldr	r7, [pc, #52]	; (17f1c <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
   17ee8:	9301      	str	r3, [sp, #4]
   17eea:	6831      	ldr	r1, [r6, #0]
   17eec:	6838      	ldr	r0, [r7, #0]
   17eee:	f008 fa2f 	bl	20350 <rpc_transport_ipc_msg_alloc>
   17ef2:	4604      	mov	r4, r0
   17ef4:	b940      	cbnz	r0, 17f08 <rpc_transport_ipc_ctrl_msg_alloc+0x2c>
   17ef6:	f007 fbe1 	bl	1f6bc <nrf_modem_os_is_in_isr>
   17efa:	b940      	cbnz	r0, 17f0e <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   17efc:	2001      	movs	r0, #1
   17efe:	a901      	add	r1, sp, #4
   17f00:	f7f9 f996 	bl	11230 <nrf_modem_os_timedwait>
   17f04:	306e      	adds	r0, #110	; 0x6e
   17f06:	d1f0      	bne.n	17eea <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   17f08:	4620      	mov	r0, r4
   17f0a:	b003      	add	sp, #12
   17f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17f0e:	9801      	ldr	r0, [sp, #4]
   17f10:	4368      	muls	r0, r5
   17f12:	f007 fbcb 	bl	1f6ac <nrf_modem_os_busywait>
   17f16:	e7e8      	b.n	17eea <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   17f18:	2000df4c 	.word	0x2000df4c
   17f1c:	2000df54 	.word	0x2000df54

00017f20 <rpc_transport_ipc_data_msg_alloc>:
   17f20:	4b05      	ldr	r3, [pc, #20]	; (17f38 <rpc_transport_ipc_data_msg_alloc+0x18>)
   17f22:	781b      	ldrb	r3, [r3, #0]
   17f24:	b92b      	cbnz	r3, 17f32 <rpc_transport_ipc_data_msg_alloc+0x12>
   17f26:	4b05      	ldr	r3, [pc, #20]	; (17f3c <rpc_transport_ipc_data_msg_alloc+0x1c>)
   17f28:	6819      	ldr	r1, [r3, #0]
   17f2a:	4b05      	ldr	r3, [pc, #20]	; (17f40 <rpc_transport_ipc_data_msg_alloc+0x20>)
   17f2c:	6818      	ldr	r0, [r3, #0]
   17f2e:	f008 ba0f 	b.w	20350 <rpc_transport_ipc_msg_alloc>
   17f32:	2000      	movs	r0, #0
   17f34:	4770      	bx	lr
   17f36:	bf00      	nop
   17f38:	200110c2 	.word	0x200110c2
   17f3c:	2000df50 	.word	0x2000df50
   17f40:	2000df58 	.word	0x2000df58

00017f44 <rpc_transport_ipc_init>:
   17f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f48:	b095      	sub	sp, #84	; 0x54
   17f4a:	2238      	movs	r2, #56	; 0x38
   17f4c:	2100      	movs	r1, #0
   17f4e:	4606      	mov	r6, r0
   17f50:	a803      	add	r0, sp, #12
   17f52:	f009 feb8 	bl	21cc6 <memset>
   17f56:	2302      	movs	r3, #2
   17f58:	9304      	str	r3, [sp, #16]
   17f5a:	2308      	movs	r3, #8
   17f5c:	9306      	str	r3, [sp, #24]
   17f5e:	2320      	movs	r3, #32
   17f60:	9308      	str	r3, [sp, #32]
   17f62:	2304      	movs	r3, #4
   17f64:	930d      	str	r3, [sp, #52]	; 0x34
   17f66:	2310      	movs	r3, #16
   17f68:	2540      	movs	r5, #64	; 0x40
   17f6a:	930f      	str	r3, [sp, #60]	; 0x3c
   17f6c:	2380      	movs	r3, #128	; 0x80
   17f6e:	2201      	movs	r2, #1
   17f70:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
   17f74:	23d5      	movs	r3, #213	; 0xd5
   17f76:	2100      	movs	r1, #0
   17f78:	4855      	ldr	r0, [pc, #340]	; (180d0 <rpc_transport_ipc_init+0x18c>)
   17f7a:	920b      	str	r2, [sp, #44]	; 0x2c
   17f7c:	9313      	str	r3, [sp, #76]	; 0x4c
   17f7e:	f7f9 fa19 	bl	113b4 <nrf_modem_os_sem_init>
   17f82:	4605      	mov	r5, r0
   17f84:	2800      	cmp	r0, #0
   17f86:	f040 80a0 	bne.w	180ca <rpc_transport_ipc_init+0x186>
   17f8a:	4602      	mov	r2, r0
   17f8c:	4951      	ldr	r1, [pc, #324]	; (180d4 <rpc_transport_ipc_init+0x190>)
   17f8e:	7930      	ldrb	r0, [r6, #4]
   17f90:	f7ff fd72 	bl	17a78 <nrfx_ipc_init>
   17f94:	a803      	add	r0, sp, #12
   17f96:	f7ff fd87 	bl	17aa8 <nrfx_ipc_config_load>
   17f9a:	6834      	ldr	r4, [r6, #0]
   17f9c:	6862      	ldr	r2, [r4, #4]
   17f9e:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
   17fa2:	f040 808a 	bne.w	180ba <rpc_transport_ipc_init+0x176>
   17fa6:	6961      	ldr	r1, [r4, #20]
   17fa8:	68e3      	ldr	r3, [r4, #12]
   17faa:	440b      	add	r3, r1
   17fac:	69e1      	ldr	r1, [r4, #28]
   17fae:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
   17fb2:	440b      	add	r3, r1
   17fb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   17fb8:	d87f      	bhi.n	180ba <rpc_transport_ipc_init+0x176>
   17fba:	6820      	ldr	r0, [r4, #0]
   17fbc:	4629      	mov	r1, r5
   17fbe:	f009 fe82 	bl	21cc6 <memset>
   17fc2:	6833      	ldr	r3, [r6, #0]
   17fc4:	681c      	ldr	r4, [r3, #0]
   17fc6:	f8d3 901c 	ldr.w	r9, [r3, #28]
   17fca:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
   17fce:	9200      	str	r2, [sp, #0]
   17fd0:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   17fd4:	9201      	str	r2, [sp, #4]
   17fd6:	f104 0760 	add.w	r7, r4, #96	; 0x60
   17fda:	4a3f      	ldr	r2, [pc, #252]	; (180d8 <rpc_transport_ipc_init+0x194>)
   17fdc:	f104 08a4 	add.w	r8, r4, #164	; 0xa4
   17fe0:	f104 0b20 	add.w	fp, r4, #32
   17fe4:	f1b9 0f00 	cmp.w	r9, #0
   17fe8:	d15a      	bne.n	180a0 <rpc_transport_ipc_init+0x15c>
   17fea:	f8c2 b000 	str.w	fp, [r2]
   17fee:	2500      	movs	r5, #0
   17ff0:	f04f 0a01 	mov.w	sl, #1
   17ff4:	7025      	strb	r5, [r4, #0]
   17ff6:	7065      	strb	r5, [r4, #1]
   17ff8:	f884 a002 	strb.w	sl, [r4, #2]
   17ffc:	70e5      	strb	r5, [r4, #3]
   17ffe:	6833      	ldr	r3, [r6, #0]
   18000:	4640      	mov	r0, r8
   18002:	691b      	ldr	r3, [r3, #16]
   18004:	6063      	str	r3, [r4, #4]
   18006:	6833      	ldr	r3, [r6, #0]
   18008:	695b      	ldr	r3, [r3, #20]
   1800a:	f8c4 b014 	str.w	fp, [r4, #20]
   1800e:	60a3      	str	r3, [r4, #8]
   18010:	4b32      	ldr	r3, [pc, #200]	; (180dc <rpc_transport_ipc_init+0x198>)
   18012:	f8c4 9018 	str.w	r9, [r4, #24]
   18016:	f8c3 8000 	str.w	r8, [r3]
   1801a:	4b31      	ldr	r3, [pc, #196]	; (180e0 <rpc_transport_ipc_init+0x19c>)
   1801c:	60e7      	str	r7, [r4, #12]
   1801e:	601f      	str	r7, [r3, #0]
   18020:	2308      	movs	r3, #8
   18022:	f8c4 8010 	str.w	r8, [r4, #16]
   18026:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
   1802a:	f888 5001 	strb.w	r5, [r8, #1]
   1802e:	f888 5002 	strb.w	r5, [r8, #2]
   18032:	f888 5003 	strb.w	r5, [r8, #3]
   18036:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
   1803a:	707d      	strb	r5, [r7, #1]
   1803c:	70bd      	strb	r5, [r7, #2]
   1803e:	70fd      	strb	r5, [r7, #3]
   18040:	f008 f96e 	bl	20320 <rpc_list_preambles_init>
   18044:	4638      	mov	r0, r7
   18046:	f008 f96b 	bl	20320 <rpc_list_preambles_init>
   1804a:	9a01      	ldr	r2, [sp, #4]
   1804c:	4b25      	ldr	r3, [pc, #148]	; (180e4 <rpc_transport_ipc_init+0x1a0>)
   1804e:	6831      	ldr	r1, [r6, #0]
   18050:	601a      	str	r2, [r3, #0]
   18052:	9a00      	ldr	r2, [sp, #0]
   18054:	4b24      	ldr	r3, [pc, #144]	; (180e8 <rpc_transport_ipc_init+0x1a4>)
   18056:	601a      	str	r2, [r3, #0]
   18058:	4b24      	ldr	r3, [pc, #144]	; (180ec <rpc_transport_ipc_init+0x1a8>)
   1805a:	6019      	str	r1, [r3, #0]
   1805c:	4b24      	ldr	r3, [pc, #144]	; (180f0 <rpc_transport_ipc_init+0x1ac>)
   1805e:	4925      	ldr	r1, [pc, #148]	; (180f4 <rpc_transport_ipc_init+0x1b0>)
   18060:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
   18064:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
   18068:	4b23      	ldr	r3, [pc, #140]	; (180f8 <rpc_transport_ipc_init+0x1b4>)
   1806a:	4c24      	ldr	r4, [pc, #144]	; (180fc <rpc_transport_ipc_init+0x1b8>)
   1806c:	801d      	strh	r5, [r3, #0]
   1806e:	4b24      	ldr	r3, [pc, #144]	; (18100 <rpc_transport_ipc_init+0x1bc>)
   18070:	6025      	str	r5, [r4, #0]
   18072:	801d      	strh	r5, [r3, #0]
   18074:	4b23      	ldr	r3, [pc, #140]	; (18104 <rpc_transport_ipc_init+0x1c0>)
   18076:	f883 a000 	strb.w	sl, [r3]
   1807a:	4b23      	ldr	r3, [pc, #140]	; (18108 <rpc_transport_ipc_init+0x1c4>)
   1807c:	9502      	str	r5, [sp, #8]
   1807e:	611d      	str	r5, [r3, #16]
   18080:	691b      	ldr	r3, [r3, #16]
   18082:	9302      	str	r3, [sp, #8]
   18084:	9b02      	ldr	r3, [sp, #8]
   18086:	4b12      	ldr	r3, [pc, #72]	; (180d0 <rpc_transport_ipc_init+0x18c>)
   18088:	6818      	ldr	r0, [r3, #0]
   1808a:	f007 fb1b 	bl	1f6c4 <nrf_modem_os_sem_take>
   1808e:	b9c8      	cbnz	r0, 180c4 <rpc_transport_ipc_init+0x180>
   18090:	6824      	ldr	r4, [r4, #0]
   18092:	b9a4      	cbnz	r4, 180be <rpc_transport_ipc_init+0x17a>
   18094:	4b1d      	ldr	r3, [pc, #116]	; (1810c <rpc_transport_ipc_init+0x1c8>)
   18096:	701c      	strb	r4, [r3, #0]
   18098:	4620      	mov	r0, r4
   1809a:	b015      	add	sp, #84	; 0x54
   1809c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180a0:	699b      	ldr	r3, [r3, #24]
   180a2:	f104 0940 	add.w	r9, r4, #64	; 0x40
   180a6:	6463      	str	r3, [r4, #68]	; 0x44
   180a8:	6833      	ldr	r3, [r6, #0]
   180aa:	4648      	mov	r0, r9
   180ac:	69db      	ldr	r3, [r3, #28]
   180ae:	f8c2 b000 	str.w	fp, [r2]
   180b2:	6423      	str	r3, [r4, #64]	; 0x40
   180b4:	f001 ff60 	bl	19f78 <ipc_trace_init>
   180b8:	e799      	b.n	17fee <rpc_transport_ipc_init+0xaa>
   180ba:	f06f 0415 	mvn.w	r4, #21
   180be:	f7ff fd13 	bl	17ae8 <nrfx_ipc_uninit>
   180c2:	e7e9      	b.n	18098 <rpc_transport_ipc_init+0x154>
   180c4:	f06f 0473 	mvn.w	r4, #115	; 0x73
   180c8:	e7f9      	b.n	180be <rpc_transport_ipc_init+0x17a>
   180ca:	f06f 042d 	mvn.w	r4, #45	; 0x2d
   180ce:	e7e3      	b.n	18098 <rpc_transport_ipc_init+0x154>
   180d0:	2000df48 	.word	0x2000df48
   180d4:	00017d75 	.word	0x00017d75
   180d8:	2000df44 	.word	0x2000df44
   180dc:	2000df58 	.word	0x2000df58
   180e0:	2000df54 	.word	0x2000df54
   180e4:	2000df50 	.word	0x2000df50
   180e8:	2000df4c 	.word	0x2000df4c
   180ec:	2000df40 	.word	0x2000df40
   180f0:	4002a000 	.word	0x4002a000
   180f4:	000249f0 	.word	0x000249f0
   180f8:	2000e350 	.word	0x2000e350
   180fc:	2000df5c 	.word	0x2000df5c
   18100:	2000e34e 	.word	0x2000e34e
   18104:	200110c3 	.word	0x200110c3
   18108:	40005600 	.word	0x40005600
   1810c:	200110c2 	.word	0x200110c2

00018110 <rpc_transport_ipc_ctrl_msg_send>:
   18110:	b570      	push	{r4, r5, r6, lr}
   18112:	4b16      	ldr	r3, [pc, #88]	; (1816c <rpc_transport_ipc_ctrl_msg_send+0x5c>)
   18114:	6842      	ldr	r2, [r0, #4]
   18116:	681b      	ldr	r3, [r3, #0]
   18118:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1811c:	f042 0201 	orr.w	r2, r2, #1
   18120:	1ac3      	subs	r3, r0, r3
   18122:	6042      	str	r2, [r0, #4]
   18124:	4812      	ldr	r0, [pc, #72]	; (18170 <rpc_transport_ipc_ctrl_msg_send+0x60>)
   18126:	4a13      	ldr	r2, [pc, #76]	; (18174 <rpc_transport_ipc_ctrl_msg_send+0x64>)
   18128:	6801      	ldr	r1, [r0, #0]
   1812a:	f3c3 1389 	ubfx	r3, r3, #6, #10
   1812e:	e8d2 4fdf 	ldaexh	r4, [r2]
   18132:	1c65      	adds	r5, r4, #1
   18134:	e8c2 5fd6 	stlexh	r6, r5, [r2]
   18138:	2e00      	cmp	r6, #0
   1813a:	d1f8      	bne.n	1812e <rpc_transport_ipc_ctrl_msg_send+0x1e>
   1813c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   18140:	684a      	ldr	r2, [r1, #4]
   18142:	b292      	uxth	r2, r2
   18144:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   18148:	604a      	str	r2, [r1, #4]
   1814a:	6802      	ldr	r2, [r0, #0]
   1814c:	2003      	movs	r0, #3
   1814e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   18152:	6853      	ldr	r3, [r2, #4]
   18154:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   18158:	f043 0301 	orr.w	r3, r3, #1
   1815c:	6053      	str	r3, [r2, #4]
   1815e:	f007 faa5 	bl	1f6ac <nrf_modem_os_busywait>
   18162:	2201      	movs	r2, #1
   18164:	4b04      	ldr	r3, [pc, #16]	; (18178 <rpc_transport_ipc_ctrl_msg_send+0x68>)
   18166:	605a      	str	r2, [r3, #4]
   18168:	bd70      	pop	{r4, r5, r6, pc}
   1816a:	bf00      	nop
   1816c:	2000df4c 	.word	0x2000df4c
   18170:	2000df54 	.word	0x2000df54
   18174:	2000e350 	.word	0x2000e350
   18178:	4002a000 	.word	0x4002a000

0001817c <rpc_transport_ipc_request_shutdown>:
   1817c:	b510      	push	{r4, lr}
   1817e:	f7ff fead 	bl	17edc <rpc_transport_ipc_ctrl_msg_alloc>
   18182:	2401      	movs	r4, #1
   18184:	2200      	movs	r2, #0
   18186:	2103      	movs	r1, #3
   18188:	7004      	strb	r4, [r0, #0]
   1818a:	7081      	strb	r1, [r0, #2]
   1818c:	7042      	strb	r2, [r0, #1]
   1818e:	70c2      	strb	r2, [r0, #3]
   18190:	f7ff ffbe 	bl	18110 <rpc_transport_ipc_ctrl_msg_send>
   18194:	4b05      	ldr	r3, [pc, #20]	; (181ac <rpc_transport_ipc_request_shutdown+0x30>)
   18196:	701c      	strb	r4, [r3, #0]
   18198:	f008 f8d5 	bl	20346 <rpc_transport_ipc_data_rx_suspend>
   1819c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   181a0:	4b03      	ldr	r3, [pc, #12]	; (181b0 <rpc_transport_ipc_request_shutdown+0x34>)
   181a2:	f247 5130 	movw	r1, #30000	; 0x7530
   181a6:	6818      	ldr	r0, [r3, #0]
   181a8:	f007 ba8c 	b.w	1f6c4 <nrf_modem_os_sem_take>
   181ac:	200110c2 	.word	0x200110c2
   181b0:	2000df48 	.word	0x2000df48

000181b4 <rpc_transport_ipc_msg_data_rx_free>:
   181b4:	b510      	push	{r4, lr}
   181b6:	4b0a      	ldr	r3, [pc, #40]	; (181e0 <rpc_transport_ipc_msg_data_rx_free+0x2c>)
   181b8:	4604      	mov	r4, r0
   181ba:	781b      	ldrb	r3, [r3, #0]
   181bc:	2b03      	cmp	r3, #3
   181be:	d00e      	beq.n	181de <rpc_transport_ipc_msg_data_rx_free+0x2a>
   181c0:	f7ff fe8c 	bl	17edc <rpc_transport_ipc_ctrl_msg_alloc>
   181c4:	b158      	cbz	r0, 181de <rpc_transport_ipc_msg_data_rx_free+0x2a>
   181c6:	2101      	movs	r1, #1
   181c8:	2200      	movs	r2, #0
   181ca:	7001      	strb	r1, [r0, #0]
   181cc:	2102      	movs	r1, #2
   181ce:	6084      	str	r4, [r0, #8]
   181d0:	7042      	strb	r2, [r0, #1]
   181d2:	7081      	strb	r1, [r0, #2]
   181d4:	70c2      	strb	r2, [r0, #3]
   181d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   181da:	f7ff bf99 	b.w	18110 <rpc_transport_ipc_ctrl_msg_send>
   181de:	bd10      	pop	{r4, pc}
   181e0:	200110c3 	.word	0x200110c3

000181e4 <at_cmd_send>:
   181e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   181e8:	4605      	mov	r5, r0
   181ea:	2000      	movs	r0, #0
   181ec:	4617      	mov	r7, r2
   181ee:	4688      	mov	r8, r1
   181f0:	461e      	mov	r6, r3
   181f2:	f008 f8d4 	bl	2039e <rpc_client_msg_alloc>
   181f6:	4602      	mov	r2, r0
   181f8:	b940      	cbnz	r0, 1820c <at_cmd_send+0x28>
   181fa:	b115      	cbz	r5, 18202 <at_cmd_send+0x1e>
   181fc:	4628      	mov	r0, r5
   181fe:	f008 f8fd 	bl	203fc <rpc_client_msg_data_tx_free>
   18202:	f06f 000b 	mvn.w	r0, #11
   18206:	b002      	add	sp, #8
   18208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1820c:	f06f 0358 	mvn.w	r3, #88	; 0x58
   18210:	2400      	movs	r4, #0
   18212:	7303      	strb	r3, [r0, #12]
   18214:	2304      	movs	r3, #4
   18216:	6005      	str	r5, [r0, #0]
   18218:	4d0e      	ldr	r5, [pc, #56]	; (18254 <at_cmd_send+0x70>)
   1821a:	7203      	strb	r3, [r0, #8]
   1821c:	7344      	strb	r4, [r0, #13]
   1821e:	7384      	strb	r4, [r0, #14]
   18220:	73c4      	strb	r4, [r0, #15]
   18222:	7244      	strb	r4, [r0, #9]
   18224:	7284      	strb	r4, [r0, #10]
   18226:	72c4      	strb	r4, [r0, #11]
   18228:	f8c0 8004 	str.w	r8, [r0, #4]
   1822c:	4639      	mov	r1, r7
   1822e:	2003      	movs	r0, #3
   18230:	702c      	strb	r4, [r5, #0]
   18232:	f008 f8d0 	bl	203d6 <rpc_client_msg_send>
   18236:	f04f 33ff 	mov.w	r3, #4294967295
   1823a:	9301      	str	r3, [sp, #4]
   1823c:	782b      	ldrb	r3, [r5, #0]
   1823e:	42b3      	cmp	r3, r6
   18240:	d101      	bne.n	18246 <at_cmd_send+0x62>
   18242:	2000      	movs	r0, #0
   18244:	e7df      	b.n	18206 <at_cmd_send+0x22>
   18246:	2002      	movs	r0, #2
   18248:	a901      	add	r1, sp, #4
   1824a:	f7f8 fff1 	bl	11230 <nrf_modem_os_timedwait>
   1824e:	2800      	cmp	r0, #0
   18250:	d0f4      	beq.n	1823c <at_cmd_send+0x58>
   18252:	e7d8      	b.n	18206 <at_cmd_send+0x22>
   18254:	200110c4 	.word	0x200110c4

00018258 <at_response_match>:
   18258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1825a:	4605      	mov	r5, r0
   1825c:	2400      	movs	r4, #0
   1825e:	4f0f      	ldr	r7, [pc, #60]	; (1829c <at_response_match+0x44>)
   18260:	f857 6b04 	ldr.w	r6, [r7], #4
   18264:	4628      	mov	r0, r5
   18266:	4631      	mov	r1, r6
   18268:	f009 fee7 	bl	2203a <strstr>
   1826c:	b928      	cbnz	r0, 1827a <at_response_match+0x22>
   1826e:	3401      	adds	r4, #1
   18270:	2c04      	cmp	r4, #4
   18272:	d1f5      	bne.n	18260 <at_response_match+0x8>
   18274:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   18278:	e00d      	b.n	18296 <at_response_match+0x3e>
   1827a:	b16c      	cbz	r4, 18298 <at_response_match+0x40>
   1827c:	1ea3      	subs	r3, r4, #2
   1827e:	2b01      	cmp	r3, #1
   18280:	d8f8      	bhi.n	18274 <at_response_match+0x1c>
   18282:	4630      	mov	r0, r6
   18284:	f7f0 fe5b 	bl	8f3e <strlen>
   18288:	220a      	movs	r2, #10
   1828a:	2100      	movs	r1, #0
   1828c:	4428      	add	r0, r5
   1828e:	f003 ff3d 	bl	1c10c <strtol>
   18292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   18296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18298:	4620      	mov	r0, r4
   1829a:	e7fc      	b.n	18296 <at_response_match+0x3e>
   1829c:	0002368c 	.word	0x0002368c

000182a0 <at_vsprintf>:
   182a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   182a4:	2500      	movs	r5, #0
   182a6:	4681      	mov	r9, r0
   182a8:	460f      	mov	r7, r1
   182aa:	4810      	ldr	r0, [pc, #64]	; (182ec <at_vsprintf+0x4c>)
   182ac:	4629      	mov	r1, r5
   182ae:	4690      	mov	r8, r2
   182b0:	461e      	mov	r6, r3
   182b2:	9301      	str	r3, [sp, #4]
   182b4:	f004 f84e 	bl	1c354 <vsniprintf>
   182b8:	1e04      	subs	r4, r0, #0
   182ba:	db11      	blt.n	182e0 <at_vsprintf+0x40>
   182bc:	3401      	adds	r4, #1
   182be:	4620      	mov	r0, r4
   182c0:	f008 f89a 	bl	203f8 <rpc_client_msg_data_tx_alloc>
   182c4:	f8c9 0000 	str.w	r0, [r9]
   182c8:	b168      	cbz	r0, 182e6 <at_vsprintf+0x46>
   182ca:	4633      	mov	r3, r6
   182cc:	4642      	mov	r2, r8
   182ce:	4621      	mov	r1, r4
   182d0:	9601      	str	r6, [sp, #4]
   182d2:	f004 f83f 	bl	1c354 <vsniprintf>
   182d6:	4628      	mov	r0, r5
   182d8:	603c      	str	r4, [r7, #0]
   182da:	b003      	add	sp, #12
   182dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   182e0:	f06f 0015 	mvn.w	r0, #21
   182e4:	e7f9      	b.n	182da <at_vsprintf+0x3a>
   182e6:	f06f 000b 	mvn.w	r0, #11
   182ea:	e7f6      	b.n	182da <at_vsprintf+0x3a>
   182ec:	000230c4 	.word	0x000230c4

000182f0 <nrf_modem_at_notif_handler_set>:
   182f0:	4b01      	ldr	r3, [pc, #4]	; (182f8 <nrf_modem_at_notif_handler_set+0x8>)
   182f2:	6018      	str	r0, [r3, #0]
   182f4:	2000      	movs	r0, #0
   182f6:	4770      	bx	lr
   182f8:	2000df74 	.word	0x2000df74

000182fc <nrf_modem_at_printf>:
   182fc:	b40f      	push	{r0, r1, r2, r3}
   182fe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   18300:	9c08      	ldr	r4, [sp, #32]
   18302:	f001 fe31 	bl	19f68 <nrf_modem_state_is_initialized>
   18306:	2800      	cmp	r0, #0
   18308:	d039      	beq.n	1837e <nrf_modem_at_printf+0x82>
   1830a:	2c00      	cmp	r4, #0
   1830c:	d03a      	beq.n	18384 <nrf_modem_at_printf+0x88>
   1830e:	4622      	mov	r2, r4
   18310:	ab09      	add	r3, sp, #36	; 0x24
   18312:	a903      	add	r1, sp, #12
   18314:	a802      	add	r0, sp, #8
   18316:	9301      	str	r3, [sp, #4]
   18318:	f7ff ffc2 	bl	182a0 <at_vsprintf>
   1831c:	4604      	mov	r4, r0
   1831e:	b960      	cbnz	r0, 1833a <nrf_modem_at_printf+0x3e>
   18320:	4e1a      	ldr	r6, [pc, #104]	; (1838c <nrf_modem_at_printf+0x90>)
   18322:	f04f 31ff 	mov.w	r1, #4294967295
   18326:	6830      	ldr	r0, [r6, #0]
   18328:	f007 f9cc 	bl	1f6c4 <nrf_modem_os_sem_take>
   1832c:	4603      	mov	r3, r0
   1832e:	9802      	ldr	r0, [sp, #8]
   18330:	b14b      	cbz	r3, 18346 <nrf_modem_at_printf+0x4a>
   18332:	f008 f863 	bl	203fc <rpc_client_msg_data_tx_free>
   18336:	f06f 040a 	mvn.w	r4, #10
   1833a:	4620      	mov	r0, r4
   1833c:	b004      	add	sp, #16
   1833e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18342:	b004      	add	sp, #16
   18344:	4770      	bx	lr
   18346:	2302      	movs	r3, #2
   18348:	2201      	movs	r2, #1
   1834a:	9903      	ldr	r1, [sp, #12]
   1834c:	f7ff ff4a 	bl	181e4 <at_cmd_send>
   18350:	4604      	mov	r4, r0
   18352:	b118      	cbz	r0, 1835c <nrf_modem_at_printf+0x60>
   18354:	6830      	ldr	r0, [r6, #0]
   18356:	f007 f9b3 	bl	1f6c0 <nrf_modem_os_sem_give>
   1835a:	e7ee      	b.n	1833a <nrf_modem_at_printf+0x3e>
   1835c:	4d0c      	ldr	r5, [pc, #48]	; (18390 <nrf_modem_at_printf+0x94>)
   1835e:	682b      	ldr	r3, [r5, #0]
   18360:	6818      	ldr	r0, [r3, #0]
   18362:	f7ff ff79 	bl	18258 <at_response_match>
   18366:	4604      	mov	r4, r0
   18368:	6830      	ldr	r0, [r6, #0]
   1836a:	f007 f9a9 	bl	1f6c0 <nrf_modem_os_sem_give>
   1836e:	682b      	ldr	r3, [r5, #0]
   18370:	6818      	ldr	r0, [r3, #0]
   18372:	f008 f83d 	bl	203f0 <rpc_client_msg_data_rx_free>
   18376:	6828      	ldr	r0, [r5, #0]
   18378:	f008 f834 	bl	203e4 <rpc_client_msg_rx_free>
   1837c:	e7dd      	b.n	1833a <nrf_modem_at_printf+0x3e>
   1837e:	f04f 34ff 	mov.w	r4, #4294967295
   18382:	e7da      	b.n	1833a <nrf_modem_at_printf+0x3e>
   18384:	f06f 040d 	mvn.w	r4, #13
   18388:	e7d7      	b.n	1833a <nrf_modem_at_printf+0x3e>
   1838a:	bf00      	nop
   1838c:	2000df7c 	.word	0x2000df7c
   18390:	2000df78 	.word	0x2000df78

00018394 <nrf_modem_at_cmd>:
   18394:	b40c      	push	{r2, r3}
   18396:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1839a:	b085      	sub	sp, #20
   1839c:	4606      	mov	r6, r0
   1839e:	460d      	mov	r5, r1
   183a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   183a2:	f001 fde1 	bl	19f68 <nrf_modem_state_is_initialized>
   183a6:	2800      	cmp	r0, #0
   183a8:	d076      	beq.n	18498 <nrf_modem_at_cmd+0x104>
   183aa:	2e00      	cmp	r6, #0
   183ac:	d077      	beq.n	1849e <nrf_modem_at_cmd+0x10a>
   183ae:	2c00      	cmp	r4, #0
   183b0:	d075      	beq.n	1849e <nrf_modem_at_cmd+0x10a>
   183b2:	2d00      	cmp	r5, #0
   183b4:	d076      	beq.n	184a4 <nrf_modem_at_cmd+0x110>
   183b6:	4622      	mov	r2, r4
   183b8:	ab0d      	add	r3, sp, #52	; 0x34
   183ba:	a903      	add	r1, sp, #12
   183bc:	a802      	add	r0, sp, #8
   183be:	9301      	str	r3, [sp, #4]
   183c0:	f7ff ff6e 	bl	182a0 <at_vsprintf>
   183c4:	4604      	mov	r4, r0
   183c6:	bba0      	cbnz	r0, 18432 <nrf_modem_at_cmd+0x9e>
   183c8:	4b38      	ldr	r3, [pc, #224]	; (184ac <nrf_modem_at_cmd+0x118>)
   183ca:	9f02      	ldr	r7, [sp, #8]
   183cc:	f8d3 8000 	ldr.w	r8, [r3]
   183d0:	f1b8 0f00 	cmp.w	r8, #0
   183d4:	d00f      	beq.n	183f6 <nrf_modem_at_cmd+0x62>
   183d6:	4b36      	ldr	r3, [pc, #216]	; (184b0 <nrf_modem_at_cmd+0x11c>)
   183d8:	f8d3 9000 	ldr.w	r9, [r3]
   183dc:	454c      	cmp	r4, r9
   183de:	d00a      	beq.n	183f6 <nrf_modem_at_cmd+0x62>
   183e0:	4638      	mov	r0, r7
   183e2:	f858 1034 	ldr.w	r1, [r8, r4, lsl #3]
   183e6:	f009 fe28 	bl	2203a <strstr>
   183ea:	b198      	cbz	r0, 18414 <nrf_modem_at_cmd+0x80>
   183ec:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
   183f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   183f4:	b983      	cbnz	r3, 18418 <nrf_modem_at_cmd+0x84>
   183f6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 184b8 <nrf_modem_at_cmd+0x124>
   183fa:	f04f 31ff 	mov.w	r1, #4294967295
   183fe:	f8d8 0000 	ldr.w	r0, [r8]
   18402:	f007 f95f 	bl	1f6c4 <nrf_modem_os_sem_take>
   18406:	b1d0      	cbz	r0, 1843e <nrf_modem_at_cmd+0xaa>
   18408:	4638      	mov	r0, r7
   1840a:	f007 fff7 	bl	203fc <rpc_client_msg_data_tx_free>
   1840e:	f06f 040a 	mvn.w	r4, #10
   18412:	e00e      	b.n	18432 <nrf_modem_at_cmd+0x9e>
   18414:	3401      	adds	r4, #1
   18416:	e7e1      	b.n	183dc <nrf_modem_at_cmd+0x48>
   18418:	463a      	mov	r2, r7
   1841a:	4629      	mov	r1, r5
   1841c:	4630      	mov	r0, r6
   1841e:	4798      	blx	r3
   18420:	4604      	mov	r4, r0
   18422:	b918      	cbnz	r0, 1842c <nrf_modem_at_cmd+0x98>
   18424:	4630      	mov	r0, r6
   18426:	f7ff ff17 	bl	18258 <at_response_match>
   1842a:	4604      	mov	r4, r0
   1842c:	4638      	mov	r0, r7
   1842e:	f007 ffe5 	bl	203fc <rpc_client_msg_data_tx_free>
   18432:	4620      	mov	r0, r4
   18434:	b005      	add	sp, #20
   18436:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1843a:	b002      	add	sp, #8
   1843c:	4770      	bx	lr
   1843e:	2302      	movs	r3, #2
   18440:	2201      	movs	r2, #1
   18442:	4638      	mov	r0, r7
   18444:	9903      	ldr	r1, [sp, #12]
   18446:	f7ff fecd 	bl	181e4 <at_cmd_send>
   1844a:	4604      	mov	r4, r0
   1844c:	b120      	cbz	r0, 18458 <nrf_modem_at_cmd+0xc4>
   1844e:	f8d8 0000 	ldr.w	r0, [r8]
   18452:	f007 f935 	bl	1f6c0 <nrf_modem_os_sem_give>
   18456:	e7ec      	b.n	18432 <nrf_modem_at_cmd+0x9e>
   18458:	4f16      	ldr	r7, [pc, #88]	; (184b4 <nrf_modem_at_cmd+0x120>)
   1845a:	4630      	mov	r0, r6
   1845c:	683c      	ldr	r4, [r7, #0]
   1845e:	6862      	ldr	r2, [r4, #4]
   18460:	6821      	ldr	r1, [r4, #0]
   18462:	42aa      	cmp	r2, r5
   18464:	bf28      	it	cs
   18466:	462a      	movcs	r2, r5
   18468:	f009 fc06 	bl	21c78 <memcpy>
   1846c:	6863      	ldr	r3, [r4, #4]
   1846e:	42ab      	cmp	r3, r5
   18470:	d80f      	bhi.n	18492 <nrf_modem_at_cmd+0xfe>
   18472:	6820      	ldr	r0, [r4, #0]
   18474:	f7ff fef0 	bl	18258 <at_response_match>
   18478:	4604      	mov	r4, r0
   1847a:	f8d8 0000 	ldr.w	r0, [r8]
   1847e:	f007 f91f 	bl	1f6c0 <nrf_modem_os_sem_give>
   18482:	683b      	ldr	r3, [r7, #0]
   18484:	6818      	ldr	r0, [r3, #0]
   18486:	f007 ffb3 	bl	203f0 <rpc_client_msg_data_rx_free>
   1848a:	6838      	ldr	r0, [r7, #0]
   1848c:	f007 ffaa 	bl	203e4 <rpc_client_msg_rx_free>
   18490:	e7cf      	b.n	18432 <nrf_modem_at_cmd+0x9e>
   18492:	f06f 0406 	mvn.w	r4, #6
   18496:	e7f0      	b.n	1847a <nrf_modem_at_cmd+0xe6>
   18498:	f04f 34ff 	mov.w	r4, #4294967295
   1849c:	e7c9      	b.n	18432 <nrf_modem_at_cmd+0x9e>
   1849e:	f06f 040d 	mvn.w	r4, #13
   184a2:	e7c6      	b.n	18432 <nrf_modem_at_cmd+0x9e>
   184a4:	f06f 0415 	mvn.w	r4, #21
   184a8:	e7c3      	b.n	18432 <nrf_modem_at_cmd+0x9e>
   184aa:	bf00      	nop
   184ac:	2000df6c 	.word	0x2000df6c
   184b0:	2000df68 	.word	0x2000df68
   184b4:	2000df78 	.word	0x2000df78
   184b8:	2000df7c 	.word	0x2000df7c

000184bc <nrf_modem_at_scanf>:
   184bc:	b40e      	push	{r1, r2, r3}
   184be:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
   184c0:	9f07      	ldr	r7, [sp, #28]
   184c2:	4606      	mov	r6, r0
   184c4:	f001 fd50 	bl	19f68 <nrf_modem_state_is_initialized>
   184c8:	2800      	cmp	r0, #0
   184ca:	d042      	beq.n	18552 <nrf_modem_at_scanf+0x96>
   184cc:	2e00      	cmp	r6, #0
   184ce:	d043      	beq.n	18558 <nrf_modem_at_scanf+0x9c>
   184d0:	2f00      	cmp	r7, #0
   184d2:	d041      	beq.n	18558 <nrf_modem_at_scanf+0x9c>
   184d4:	4630      	mov	r0, r6
   184d6:	f7f0 fd32 	bl	8f3e <strlen>
   184da:	1c45      	adds	r5, r0, #1
   184dc:	4628      	mov	r0, r5
   184de:	f007 ff8b 	bl	203f8 <rpc_client_msg_data_tx_alloc>
   184e2:	4604      	mov	r4, r0
   184e4:	2800      	cmp	r0, #0
   184e6:	d03a      	beq.n	1855e <nrf_modem_at_scanf+0xa2>
   184e8:	4631      	mov	r1, r6
   184ea:	4e1e      	ldr	r6, [pc, #120]	; (18564 <nrf_modem_at_scanf+0xa8>)
   184ec:	462a      	mov	r2, r5
   184ee:	f009 fd71 	bl	21fd4 <strncpy>
   184f2:	f04f 31ff 	mov.w	r1, #4294967295
   184f6:	6830      	ldr	r0, [r6, #0]
   184f8:	f007 f8e4 	bl	1f6c4 <nrf_modem_os_sem_take>
   184fc:	b150      	cbz	r0, 18514 <nrf_modem_at_scanf+0x58>
   184fe:	4620      	mov	r0, r4
   18500:	f007 ff7c 	bl	203fc <rpc_client_msg_data_tx_free>
   18504:	f06f 040a 	mvn.w	r4, #10
   18508:	4620      	mov	r0, r4
   1850a:	b002      	add	sp, #8
   1850c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   18510:	b003      	add	sp, #12
   18512:	4770      	bx	lr
   18514:	4620      	mov	r0, r4
   18516:	2302      	movs	r3, #2
   18518:	2201      	movs	r2, #1
   1851a:	4629      	mov	r1, r5
   1851c:	f7ff fe62 	bl	181e4 <at_cmd_send>
   18520:	4604      	mov	r4, r0
   18522:	b990      	cbnz	r0, 1854a <nrf_modem_at_scanf+0x8e>
   18524:	4d10      	ldr	r5, [pc, #64]	; (18568 <nrf_modem_at_scanf+0xac>)
   18526:	aa08      	add	r2, sp, #32
   18528:	682b      	ldr	r3, [r5, #0]
   1852a:	4639      	mov	r1, r7
   1852c:	6818      	ldr	r0, [r3, #0]
   1852e:	9201      	str	r2, [sp, #4]
   18530:	f003 ff42 	bl	1c3b8 <vsiscanf>
   18534:	682b      	ldr	r3, [r5, #0]
   18536:	1e04      	subs	r4, r0, #0
   18538:	6818      	ldr	r0, [r3, #0]
   1853a:	bf08      	it	eq
   1853c:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   18540:	f007 ff56 	bl	203f0 <rpc_client_msg_data_rx_free>
   18544:	6828      	ldr	r0, [r5, #0]
   18546:	f007 ff4d 	bl	203e4 <rpc_client_msg_rx_free>
   1854a:	6830      	ldr	r0, [r6, #0]
   1854c:	f007 f8b8 	bl	1f6c0 <nrf_modem_os_sem_give>
   18550:	e7da      	b.n	18508 <nrf_modem_at_scanf+0x4c>
   18552:	f04f 34ff 	mov.w	r4, #4294967295
   18556:	e7d7      	b.n	18508 <nrf_modem_at_scanf+0x4c>
   18558:	f06f 040d 	mvn.w	r4, #13
   1855c:	e7d4      	b.n	18508 <nrf_modem_at_scanf+0x4c>
   1855e:	f06f 040b 	mvn.w	r4, #11
   18562:	e7d1      	b.n	18508 <nrf_modem_at_scanf+0x4c>
   18564:	2000df7c 	.word	0x2000df7c
   18568:	2000df78 	.word	0x2000df78

0001856c <rpc_at_event_handler>:
   1856c:	b538      	push	{r3, r4, r5, lr}
   1856e:	68c3      	ldr	r3, [r0, #12]
   18570:	4604      	mov	r4, r0
   18572:	2ba7      	cmp	r3, #167	; 0xa7
   18574:	d003      	beq.n	1857e <rpc_at_event_handler+0x12>
   18576:	6820      	ldr	r0, [r4, #0]
   18578:	f007 ff3a 	bl	203f0 <rpc_client_msg_data_rx_free>
   1857c:	e008      	b.n	18590 <rpc_at_event_handler+0x24>
   1857e:	2903      	cmp	r1, #3
   18580:	d008      	beq.n	18594 <rpc_at_event_handler+0x28>
   18582:	2904      	cmp	r1, #4
   18584:	d021      	beq.n	185ca <rpc_at_event_handler+0x5e>
   18586:	2902      	cmp	r1, #2
   18588:	bf02      	ittt	eq
   1858a:	2201      	moveq	r2, #1
   1858c:	4b12      	ldreq	r3, [pc, #72]	; (185d8 <rpc_at_event_handler+0x6c>)
   1858e:	701a      	strbeq	r2, [r3, #0]
   18590:	2000      	movs	r0, #0
   18592:	bd38      	pop	{r3, r4, r5, pc}
   18594:	4d11      	ldr	r5, [pc, #68]	; (185dc <rpc_at_event_handler+0x70>)
   18596:	682b      	ldr	r3, [r5, #0]
   18598:	b13b      	cbz	r3, 185aa <rpc_at_event_handler+0x3e>
   1859a:	6800      	ldr	r0, [r0, #0]
   1859c:	4798      	blx	r3
   1859e:	2300      	movs	r3, #0
   185a0:	6820      	ldr	r0, [r4, #0]
   185a2:	602b      	str	r3, [r5, #0]
   185a4:	f007 ff24 	bl	203f0 <rpc_client_msg_data_rx_free>
   185a8:	e006      	b.n	185b8 <rpc_at_event_handler+0x4c>
   185aa:	4b0b      	ldr	r3, [pc, #44]	; (185d8 <rpc_at_event_handler+0x6c>)
   185ac:	781a      	ldrb	r2, [r3, #0]
   185ae:	2a02      	cmp	r2, #2
   185b0:	d105      	bne.n	185be <rpc_at_event_handler+0x52>
   185b2:	6800      	ldr	r0, [r0, #0]
   185b4:	2800      	cmp	r0, #0
   185b6:	d1f5      	bne.n	185a4 <rpc_at_event_handler+0x38>
   185b8:	2000      	movs	r0, #0
   185ba:	b2c0      	uxtb	r0, r0
   185bc:	e7e9      	b.n	18592 <rpc_at_event_handler+0x26>
   185be:	4a08      	ldr	r2, [pc, #32]	; (185e0 <rpc_at_event_handler+0x74>)
   185c0:	6010      	str	r0, [r2, #0]
   185c2:	2202      	movs	r2, #2
   185c4:	2001      	movs	r0, #1
   185c6:	701a      	strb	r2, [r3, #0]
   185c8:	e7f7      	b.n	185ba <rpc_at_event_handler+0x4e>
   185ca:	4b06      	ldr	r3, [pc, #24]	; (185e4 <rpc_at_event_handler+0x78>)
   185cc:	681b      	ldr	r3, [r3, #0]
   185ce:	2b00      	cmp	r3, #0
   185d0:	d0d1      	beq.n	18576 <rpc_at_event_handler+0xa>
   185d2:	6800      	ldr	r0, [r0, #0]
   185d4:	4798      	blx	r3
   185d6:	e7ce      	b.n	18576 <rpc_at_event_handler+0xa>
   185d8:	200110c4 	.word	0x200110c4
   185dc:	2000df70 	.word	0x2000df70
   185e0:	2000df78 	.word	0x2000df78
   185e4:	2000df74 	.word	0x2000df74

000185e8 <rpc_at_init>:
   185e8:	2201      	movs	r2, #1
   185ea:	b510      	push	{r4, lr}
   185ec:	4611      	mov	r1, r2
   185ee:	4807      	ldr	r0, [pc, #28]	; (1860c <rpc_at_init+0x24>)
   185f0:	f7f8 fee0 	bl	113b4 <nrf_modem_os_sem_init>
   185f4:	4601      	mov	r1, r0
   185f6:	b928      	cbnz	r0, 18604 <rpc_at_init+0x1c>
   185f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   185fc:	2301      	movs	r3, #1
   185fe:	2205      	movs	r2, #5
   18600:	f7ff bdf0 	b.w	181e4 <at_cmd_send>
   18604:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   18608:	bd10      	pop	{r4, pc}
   1860a:	bf00      	nop
   1860c:	2000df7c 	.word	0x2000df7c

00018610 <sock_init>:
   18610:	f44f 7248 	mov.w	r2, #800	; 0x320
   18614:	2100      	movs	r1, #0
   18616:	b508      	push	{r3, lr}
   18618:	4808      	ldr	r0, [pc, #32]	; (1863c <sock_init+0x2c>)
   1861a:	f009 fb54 	bl	21cc6 <memset>
   1861e:	2300      	movs	r3, #0
   18620:	4619      	mov	r1, r3
   18622:	4a07      	ldr	r2, [pc, #28]	; (18640 <sock_init+0x30>)
   18624:	4807      	ldr	r0, [pc, #28]	; (18644 <sock_init+0x34>)
   18626:	7013      	strb	r3, [r2, #0]
   18628:	4a04      	ldr	r2, [pc, #16]	; (1863c <sock_init+0x2c>)
   1862a:	3301      	adds	r3, #1
   1862c:	2b08      	cmp	r3, #8
   1862e:	e9c2 0100 	strd	r0, r1, [r2]
   18632:	6091      	str	r1, [r2, #8]
   18634:	f102 0264 	add.w	r2, r2, #100	; 0x64
   18638:	d1f7      	bne.n	1862a <sock_init+0x1a>
   1863a:	bd08      	pop	{r3, pc}
   1863c:	2000df80 	.word	0x2000df80
   18640:	200110c5 	.word	0x200110c5
   18644:	1badf11e 	.word	0x1badf11e

00018648 <sock_open>:
   18648:	b570      	push	{r4, r5, r6, lr}
   1864a:	2300      	movs	r3, #0
   1864c:	2464      	movs	r4, #100	; 0x64
   1864e:	4a0e      	ldr	r2, [pc, #56]	; (18688 <sock_open+0x40>)
   18650:	4d0e      	ldr	r5, [pc, #56]	; (1868c <sock_open+0x44>)
   18652:	fb04 f103 	mul.w	r1, r4, r3
   18656:	5856      	ldr	r6, [r2, r1]
   18658:	1888      	adds	r0, r1, r2
   1865a:	42ae      	cmp	r6, r5
   1865c:	d10e      	bne.n	1867c <sock_open+0x34>
   1865e:	f04f 33ff 	mov.w	r3, #4294967295
   18662:	5053      	str	r3, [r2, r1]
   18664:	4a0a      	ldr	r2, [pc, #40]	; (18690 <sock_open+0x48>)
   18666:	7f03      	ldrb	r3, [r0, #28]
   18668:	7812      	ldrb	r2, [r2, #0]
   1866a:	f362 1386 	bfi	r3, r2, #6, #1
   1866e:	7703      	strb	r3, [r0, #28]
   18670:	2302      	movs	r3, #2
   18672:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
   18676:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   1867a:	bd70      	pop	{r4, r5, r6, pc}
   1867c:	3301      	adds	r3, #1
   1867e:	2b08      	cmp	r3, #8
   18680:	d1e7      	bne.n	18652 <sock_open+0xa>
   18682:	2000      	movs	r0, #0
   18684:	e7f9      	b.n	1867a <sock_open+0x32>
   18686:	bf00      	nop
   18688:	2000df80 	.word	0x2000df80
   1868c:	1badf11e 	.word	0x1badf11e
   18690:	200110c5 	.word	0x200110c5

00018694 <sock_find>:
   18694:	b530      	push	{r4, r5, lr}
   18696:	4602      	mov	r2, r0
   18698:	2300      	movs	r3, #0
   1869a:	2564      	movs	r5, #100	; 0x64
   1869c:	4905      	ldr	r1, [pc, #20]	; (186b4 <sock_find+0x20>)
   1869e:	fb05 f403 	mul.w	r4, r5, r3
   186a2:	1860      	adds	r0, r4, r1
   186a4:	590c      	ldr	r4, [r1, r4]
   186a6:	4294      	cmp	r4, r2
   186a8:	d003      	beq.n	186b2 <sock_find+0x1e>
   186aa:	3301      	adds	r3, #1
   186ac:	2b08      	cmp	r3, #8
   186ae:	d1f6      	bne.n	1869e <sock_find+0xa>
   186b0:	2000      	movs	r0, #0
   186b2:	bd30      	pop	{r4, r5, pc}
   186b4:	2000df80 	.word	0x2000df80

000186b8 <_sock_close>:
   186b8:	b538      	push	{r3, r4, r5, lr}
   186ba:	f7ff ffeb 	bl	18694 <sock_find>
   186be:	4604      	mov	r4, r0
   186c0:	1d05      	adds	r5, r0, #4
   186c2:	4628      	mov	r0, r5
   186c4:	f008 f824 	bl	20710 <pkt_flush>
   186c8:	6c20      	ldr	r0, [r4, #64]	; 0x40
   186ca:	b108      	cbz	r0, 186d0 <_sock_close+0x18>
   186cc:	f7f8 feb2 	bl	11434 <nrf_modem_os_free>
   186d0:	2260      	movs	r2, #96	; 0x60
   186d2:	2100      	movs	r1, #0
   186d4:	4628      	mov	r0, r5
   186d6:	f009 faf6 	bl	21cc6 <memset>
   186da:	4b01      	ldr	r3, [pc, #4]	; (186e0 <_sock_close+0x28>)
   186dc:	6023      	str	r3, [r4, #0]
   186de:	bd38      	pop	{r3, r4, r5, pc}
   186e0:	1badf11e 	.word	0x1badf11e

000186e4 <sock_shutdown>:
   186e4:	b570      	push	{r4, r5, r6, lr}
   186e6:	2400      	movs	r4, #0
   186e8:	4d05      	ldr	r5, [pc, #20]	; (18700 <sock_shutdown+0x1c>)
   186ea:	4e06      	ldr	r6, [pc, #24]	; (18704 <sock_shutdown+0x20>)
   186ec:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   186f0:	42b0      	cmp	r0, r6
   186f2:	d001      	beq.n	186f8 <sock_shutdown+0x14>
   186f4:	f7ff ffe0 	bl	186b8 <_sock_close>
   186f8:	3419      	adds	r4, #25
   186fa:	2cc8      	cmp	r4, #200	; 0xc8
   186fc:	d1f6      	bne.n	186ec <sock_shutdown+0x8>
   186fe:	bd70      	pop	{r4, r5, r6, pc}
   18700:	2000df80 	.word	0x2000df80
   18704:	1badf11e 	.word	0x1badf11e

00018708 <sock_flow_control_set>:
   18708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1870c:	1e02      	subs	r2, r0, #0
   1870e:	4c10      	ldr	r4, [pc, #64]	; (18750 <sock_flow_control_set+0x48>)
   18710:	bf18      	it	ne
   18712:	2201      	movne	r2, #1
   18714:	4606      	mov	r6, r0
   18716:	2500      	movs	r5, #0
   18718:	46a0      	mov	r8, r4
   1871a:	f04f 0964 	mov.w	r9, #100	; 0x64
   1871e:	4b0d      	ldr	r3, [pc, #52]	; (18754 <sock_flow_control_set+0x4c>)
   18720:	4f0d      	ldr	r7, [pc, #52]	; (18758 <sock_flow_control_set+0x50>)
   18722:	701a      	strb	r2, [r3, #0]
   18724:	6823      	ldr	r3, [r4, #0]
   18726:	42bb      	cmp	r3, r7
   18728:	d00a      	beq.n	18740 <sock_flow_control_set+0x38>
   1872a:	fb09 8305 	mla	r3, r9, r5, r8
   1872e:	7f1a      	ldrb	r2, [r3, #28]
   18730:	f366 1286 	bfi	r2, r6, #6, #1
   18734:	771a      	strb	r2, [r3, #28]
   18736:	6b63      	ldr	r3, [r4, #52]	; 0x34
   18738:	b113      	cbz	r3, 18740 <sock_flow_control_set+0x38>
   1873a:	4620      	mov	r0, r4
   1873c:	f007 fe9f 	bl	2047e <sock_pollcb>
   18740:	3501      	adds	r5, #1
   18742:	2d08      	cmp	r5, #8
   18744:	f104 0464 	add.w	r4, r4, #100	; 0x64
   18748:	d1ec      	bne.n	18724 <sock_flow_control_set+0x1c>
   1874a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1874e:	bf00      	nop
   18750:	2000df80 	.word	0x2000df80
   18754:	200110c5 	.word	0x200110c5
   18758:	1badf11e 	.word	0x1badf11e

0001875c <sock_proto_is_valid>:
   1875c:	2811      	cmp	r0, #17
   1875e:	dc06      	bgt.n	1876e <sock_proto_is_valid+0x12>
   18760:	2800      	cmp	r0, #0
   18762:	db0d      	blt.n	18780 <sock_proto_is_valid+0x24>
   18764:	4b08      	ldr	r3, [pc, #32]	; (18788 <sock_proto_is_valid+0x2c>)
   18766:	40c3      	lsrs	r3, r0
   18768:	f003 0001 	and.w	r0, r3, #1
   1876c:	4770      	bx	lr
   1876e:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   18772:	d007      	beq.n	18784 <sock_proto_is_valid+0x28>
   18774:	f240 1311 	movw	r3, #273	; 0x111
   18778:	1ac3      	subs	r3, r0, r3
   1877a:	4258      	negs	r0, r3
   1877c:	4158      	adcs	r0, r3
   1877e:	4770      	bx	lr
   18780:	2000      	movs	r0, #0
   18782:	4770      	bx	lr
   18784:	2001      	movs	r0, #1
   18786:	4770      	bx	lr
   18788:	00020041 	.word	0x00020041

0001878c <on_getaddrinfo_res>:
   1878c:	2301      	movs	r3, #1
   1878e:	4a03      	ldr	r2, [pc, #12]	; (1879c <on_getaddrinfo_res+0x10>)
   18790:	7013      	strb	r3, [r2, #0]
   18792:	4a03      	ldr	r2, [pc, #12]	; (187a0 <on_getaddrinfo_res+0x14>)
   18794:	6010      	str	r0, [r2, #0]
   18796:	4618      	mov	r0, r3
   18798:	4770      	bx	lr
   1879a:	bf00      	nop
   1879c:	200110c6 	.word	0x200110c6
   187a0:	2000e2a0 	.word	0x2000e2a0

000187a4 <addrinfo_init>:
   187a4:	2201      	movs	r2, #1
   187a6:	b508      	push	{r3, lr}
   187a8:	4611      	mov	r1, r2
   187aa:	4804      	ldr	r0, [pc, #16]	; (187bc <addrinfo_init+0x18>)
   187ac:	f7f8 fe02 	bl	113b4 <nrf_modem_os_sem_init>
   187b0:	2800      	cmp	r0, #0
   187b2:	bf18      	it	ne
   187b4:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   187b8:	bd08      	pop	{r3, pc}
   187ba:	bf00      	nop
   187bc:	2000e2a4 	.word	0x2000e2a4

000187c0 <nrf_getaddrinfo>:
   187c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187c4:	b085      	sub	sp, #20
   187c6:	4682      	mov	sl, r0
   187c8:	460f      	mov	r7, r1
   187ca:	4616      	mov	r6, r2
   187cc:	461d      	mov	r5, r3
   187ce:	f001 fbcb 	bl	19f68 <nrf_modem_state_is_initialized>
   187d2:	b928      	cbnz	r0, 187e0 <nrf_getaddrinfo+0x20>
   187d4:	2001      	movs	r0, #1
   187d6:	f006 ff6b 	bl	1f6b0 <nrf_modem_os_errno_set>
   187da:	f06f 040a 	mvn.w	r4, #10
   187de:	e01c      	b.n	1881a <nrf_getaddrinfo+0x5a>
   187e0:	ea5a 0307 	orrs.w	r3, sl, r7
   187e4:	f000 8157 	beq.w	18a96 <nrf_getaddrinfo+0x2d6>
   187e8:	b31e      	cbz	r6, 18832 <nrf_getaddrinfo+0x72>
   187ea:	6833      	ldr	r3, [r6, #0]
   187ec:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
   187f0:	f023 0302 	bic.w	r3, r3, #2
   187f4:	2b00      	cmp	r3, #0
   187f6:	f040 8151 	bne.w	18a9c <nrf_getaddrinfo+0x2dc>
   187fa:	6870      	ldr	r0, [r6, #4]
   187fc:	b938      	cbnz	r0, 1880e <nrf_getaddrinfo+0x4e>
   187fe:	68b0      	ldr	r0, [r6, #8]
   18800:	b178      	cbz	r0, 18822 <nrf_getaddrinfo+0x62>
   18802:	f007 ff22 	bl	2064a <sock_type_is_valid>
   18806:	b960      	cbnz	r0, 18822 <nrf_getaddrinfo+0x62>
   18808:	f06f 0406 	mvn.w	r4, #6
   1880c:	e005      	b.n	1881a <nrf_getaddrinfo+0x5a>
   1880e:	f007 ff16 	bl	2063e <sock_family_is_valid>
   18812:	2800      	cmp	r0, #0
   18814:	d1f3      	bne.n	187fe <nrf_getaddrinfo+0x3e>
   18816:	f06f 0405 	mvn.w	r4, #5
   1881a:	4620      	mov	r0, r4
   1881c:	b005      	add	sp, #20
   1881e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18822:	68f0      	ldr	r0, [r6, #12]
   18824:	b128      	cbz	r0, 18832 <nrf_getaddrinfo+0x72>
   18826:	68b1      	ldr	r1, [r6, #8]
   18828:	f007 ff15 	bl	20656 <sock_proto_supports_type>
   1882c:	b908      	cbnz	r0, 18832 <nrf_getaddrinfo+0x72>
   1882e:	206b      	movs	r0, #107	; 0x6b
   18830:	e7d1      	b.n	187d6 <nrf_getaddrinfo+0x16>
   18832:	4b9d      	ldr	r3, [pc, #628]	; (18aa8 <nrf_getaddrinfo+0x2e8>)
   18834:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   18838:	6818      	ldr	r0, [r3, #0]
   1883a:	f006 ff43 	bl	1f6c4 <nrf_modem_os_sem_take>
   1883e:	4604      	mov	r4, r0
   18840:	2800      	cmp	r0, #0
   18842:	f040 812e 	bne.w	18aa2 <nrf_getaddrinfo+0x2e2>
   18846:	2f00      	cmp	r7, #0
   18848:	d062      	beq.n	18910 <nrf_getaddrinfo+0x150>
   1884a:	b1f6      	cbz	r6, 1888a <nrf_getaddrinfo+0xca>
   1884c:	6833      	ldr	r3, [r6, #0]
   1884e:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
   18852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   18856:	d118      	bne.n	1888a <nrf_getaddrinfo+0xca>
   18858:	6833      	ldr	r3, [r6, #0]
   1885a:	04db      	lsls	r3, r3, #19
   1885c:	d443      	bmi.n	188e6 <nrf_getaddrinfo+0x126>
   1885e:	f04f 38ff 	mov.w	r8, #4294967295
   18862:	6870      	ldr	r0, [r6, #4]
   18864:	b108      	cbz	r0, 1886a <nrf_getaddrinfo+0xaa>
   18866:	f000 fe69 	bl	1953c <nrf_af_to_rpc_af>
   1886a:	4b90      	ldr	r3, [pc, #576]	; (18aac <nrf_getaddrinfo+0x2ec>)
   1886c:	4a90      	ldr	r2, [pc, #576]	; (18ab0 <nrf_getaddrinfo+0x2f0>)
   1886e:	6018      	str	r0, [r3, #0]
   18870:	68b3      	ldr	r3, [r6, #8]
   18872:	2b00      	cmp	r3, #0
   18874:	bf08      	it	eq
   18876:	2301      	moveq	r3, #1
   18878:	6013      	str	r3, [r2, #0]
   1887a:	68f3      	ldr	r3, [r6, #12]
   1887c:	4a8d      	ldr	r2, [pc, #564]	; (18ab4 <nrf_getaddrinfo+0x2f4>)
   1887e:	2b00      	cmp	r3, #0
   18880:	bf08      	it	eq
   18882:	2306      	moveq	r3, #6
   18884:	6013      	str	r3, [r2, #0]
   18886:	6833      	ldr	r3, [r6, #0]
   18888:	e01c      	b.n	188c4 <nrf_getaddrinfo+0x104>
   1888a:	220a      	movs	r2, #10
   1888c:	2100      	movs	r1, #0
   1888e:	4638      	mov	r0, r7
   18890:	f003 fd56 	bl	1c340 <strtoul>
   18894:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   18898:	1e42      	subs	r2, r0, #1
   1889a:	429a      	cmp	r2, r3
   1889c:	f200 80f8 	bhi.w	18a90 <nrf_getaddrinfo+0x2d0>
   188a0:	4a85      	ldr	r2, [pc, #532]	; (18ab8 <nrf_getaddrinfo+0x2f8>)
   188a2:	0203      	lsls	r3, r0, #8
   188a4:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
   188a8:	8013      	strh	r3, [r2, #0]
   188aa:	2e00      	cmp	r6, #0
   188ac:	d1d4      	bne.n	18858 <nrf_getaddrinfo+0x98>
   188ae:	2300      	movs	r3, #0
   188b0:	2101      	movs	r1, #1
   188b2:	4a7e      	ldr	r2, [pc, #504]	; (18aac <nrf_getaddrinfo+0x2ec>)
   188b4:	f04f 38ff 	mov.w	r8, #4294967295
   188b8:	6013      	str	r3, [r2, #0]
   188ba:	4a7d      	ldr	r2, [pc, #500]	; (18ab0 <nrf_getaddrinfo+0x2f0>)
   188bc:	6011      	str	r1, [r2, #0]
   188be:	2106      	movs	r1, #6
   188c0:	4a7c      	ldr	r2, [pc, #496]	; (18ab4 <nrf_getaddrinfo+0x2f4>)
   188c2:	6011      	str	r1, [r2, #0]
   188c4:	4f7d      	ldr	r7, [pc, #500]	; (18abc <nrf_getaddrinfo+0x2fc>)
   188c6:	4650      	mov	r0, sl
   188c8:	603b      	str	r3, [r7, #0]
   188ca:	f1ba 0f00 	cmp.w	sl, #0
   188ce:	d16f      	bne.n	189b0 <nrf_getaddrinfo+0x1f0>
   188d0:	f007 fd65 	bl	2039e <rpc_client_msg_alloc>
   188d4:	4606      	mov	r6, r0
   188d6:	bb00      	cbnz	r0, 1891a <nrf_getaddrinfo+0x15a>
   188d8:	f06f 0409 	mvn.w	r4, #9
   188dc:	4b72      	ldr	r3, [pc, #456]	; (18aa8 <nrf_getaddrinfo+0x2e8>)
   188de:	6818      	ldr	r0, [r3, #0]
   188e0:	f006 feee 	bl	1f6c0 <nrf_modem_os_sem_give>
   188e4:	e799      	b.n	1881a <nrf_getaddrinfo+0x5a>
   188e6:	213a      	movs	r1, #58	; 0x3a
   188e8:	4638      	mov	r0, r7
   188ea:	f009 fb4c 	bl	21f86 <strchr>
   188ee:	b100      	cbz	r0, 188f2 <nrf_getaddrinfo+0x132>
   188f0:	1c47      	adds	r7, r0, #1
   188f2:	4638      	mov	r0, r7
   188f4:	4972      	ldr	r1, [pc, #456]	; (18ac0 <nrf_getaddrinfo+0x300>)
   188f6:	f009 fba0 	bl	2203a <strstr>
   188fa:	220a      	movs	r2, #10
   188fc:	b128      	cbz	r0, 1890a <nrf_getaddrinfo+0x14a>
   188fe:	2100      	movs	r1, #0
   18900:	3003      	adds	r0, #3
   18902:	f003 fc03 	bl	1c10c <strtol>
   18906:	4680      	mov	r8, r0
   18908:	e7ab      	b.n	18862 <nrf_getaddrinfo+0xa2>
   1890a:	4601      	mov	r1, r0
   1890c:	4638      	mov	r0, r7
   1890e:	e7f8      	b.n	18902 <nrf_getaddrinfo+0x142>
   18910:	4b69      	ldr	r3, [pc, #420]	; (18ab8 <nrf_getaddrinfo+0x2f8>)
   18912:	8018      	strh	r0, [r3, #0]
   18914:	2e00      	cmp	r6, #0
   18916:	d0ca      	beq.n	188ae <nrf_getaddrinfo+0xee>
   18918:	e7a1      	b.n	1885e <nrf_getaddrinfo+0x9e>
   1891a:	f8c0 8010 	str.w	r8, [r0, #16]
   1891e:	4b63      	ldr	r3, [pc, #396]	; (18aac <nrf_getaddrinfo+0x2ec>)
   18920:	f8df b18c 	ldr.w	fp, [pc, #396]	; 18ab0 <nrf_getaddrinfo+0x2f0>
   18924:	681b      	ldr	r3, [r3, #0]
   18926:	f8df a18c 	ldr.w	sl, [pc, #396]	; 18ab4 <nrf_getaddrinfo+0x2f4>
   1892a:	61b3      	str	r3, [r6, #24]
   1892c:	f8db 3000 	ldr.w	r3, [fp]
   18930:	4632      	mov	r2, r6
   18932:	61f3      	str	r3, [r6, #28]
   18934:	f8da 3000 	ldr.w	r3, [sl]
   18938:	f247 010d 	movw	r1, #28685	; 0x700d
   1893c:	6233      	str	r3, [r6, #32]
   1893e:	683b      	ldr	r3, [r7, #0]
   18940:	2004      	movs	r0, #4
   18942:	6173      	str	r3, [r6, #20]
   18944:	f007 fd47 	bl	203d6 <rpc_client_msg_send>
   18948:	2300      	movs	r3, #0
   1894a:	4e5e      	ldr	r6, [pc, #376]	; (18ac4 <nrf_getaddrinfo+0x304>)
   1894c:	7033      	strb	r3, [r6, #0]
   1894e:	f04f 33ff 	mov.w	r3, #4294967295
   18952:	9303      	str	r3, [sp, #12]
   18954:	7833      	ldrb	r3, [r6, #0]
   18956:	2b01      	cmp	r3, #1
   18958:	d13c      	bne.n	189d4 <nrf_getaddrinfo+0x214>
   1895a:	f8df 816c 	ldr.w	r8, [pc, #364]	; 18ac8 <nrf_getaddrinfo+0x308>
   1895e:	f8d8 3000 	ldr.w	r3, [r8]
   18962:	6958      	ldr	r0, [r3, #20]
   18964:	2800      	cmp	r0, #0
   18966:	f040 808f 	bne.w	18a88 <nrf_getaddrinfo+0x2c8>
   1896a:	2020      	movs	r0, #32
   1896c:	f8d3 9000 	ldr.w	r9, [r3]
   18970:	f7f8 fd58 	bl	11424 <nrf_modem_os_alloc>
   18974:	6028      	str	r0, [r5, #0]
   18976:	b170      	cbz	r0, 18996 <nrf_getaddrinfo+0x1d6>
   18978:	f109 0318 	add.w	r3, r9, #24
   1897c:	4a4e      	ldr	r2, [pc, #312]	; (18ab8 <nrf_getaddrinfo+0x2f8>)
   1897e:	9300      	str	r3, [sp, #0]
   18980:	4618      	mov	r0, r3
   18982:	8812      	ldrh	r2, [r2, #0]
   18984:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   18988:	f007 fd40 	bl	2040c <sockaddr_init>
   1898c:	4606      	mov	r6, r0
   1898e:	bb68      	cbnz	r0, 189ec <nrf_getaddrinfo+0x22c>
   18990:	6828      	ldr	r0, [r5, #0]
   18992:	f7f8 fd4f 	bl	11434 <nrf_modem_os_free>
   18996:	f06f 0409 	mvn.w	r4, #9
   1899a:	f8d8 3000 	ldr.w	r3, [r8]
   1899e:	6818      	ldr	r0, [r3, #0]
   189a0:	b108      	cbz	r0, 189a6 <nrf_getaddrinfo+0x1e6>
   189a2:	f007 fd25 	bl	203f0 <rpc_client_msg_data_rx_free>
   189a6:	f8d8 0000 	ldr.w	r0, [r8]
   189aa:	f007 fd1b 	bl	203e4 <rpc_client_msg_rx_free>
   189ae:	e795      	b.n	188dc <nrf_getaddrinfo+0x11c>
   189b0:	f7f0 fac5 	bl	8f3e <strlen>
   189b4:	f007 fcf3 	bl	2039e <rpc_client_msg_alloc>
   189b8:	4606      	mov	r6, r0
   189ba:	2800      	cmp	r0, #0
   189bc:	d08c      	beq.n	188d8 <nrf_getaddrinfo+0x118>
   189be:	f8c0 8010 	str.w	r8, [r0, #16]
   189c2:	4650      	mov	r0, sl
   189c4:	f7f0 fabb 	bl	8f3e <strlen>
   189c8:	4651      	mov	r1, sl
   189ca:	4602      	mov	r2, r0
   189cc:	6830      	ldr	r0, [r6, #0]
   189ce:	f009 f953 	bl	21c78 <memcpy>
   189d2:	e7a4      	b.n	1891e <nrf_getaddrinfo+0x15e>
   189d4:	2002      	movs	r0, #2
   189d6:	a903      	add	r1, sp, #12
   189d8:	f7f8 fc2a 	bl	11230 <nrf_modem_os_timedwait>
   189dc:	2800      	cmp	r0, #0
   189de:	d0b9      	beq.n	18954 <nrf_getaddrinfo+0x194>
   189e0:	206e      	movs	r0, #110	; 0x6e
   189e2:	f006 fe65 	bl	1f6b0 <nrf_modem_os_errno_set>
   189e6:	f06f 040a 	mvn.w	r4, #10
   189ea:	e777      	b.n	188dc <nrf_getaddrinfo+0x11c>
   189ec:	f8d9 2008 	ldr.w	r2, [r9, #8]
   189f0:	2a01      	cmp	r2, #1
   189f2:	d004      	beq.n	189fe <nrf_getaddrinfo+0x23e>
   189f4:	2a02      	cmp	r2, #2
   189f6:	d01a      	beq.n	18a2e <nrf_getaddrinfo+0x26e>
   189f8:	f06f 0405 	mvn.w	r4, #5
   189fc:	e7cd      	b.n	1899a <nrf_getaddrinfo+0x1da>
   189fe:	2110      	movs	r1, #16
   18a00:	682a      	ldr	r2, [r5, #0]
   18a02:	6111      	str	r1, [r2, #16]
   18a04:	683a      	ldr	r2, [r7, #0]
   18a06:	6829      	ldr	r1, [r5, #0]
   18a08:	f012 0202 	ands.w	r2, r2, #2
   18a0c:	d03a      	beq.n	18a84 <nrf_getaddrinfo+0x2c4>
   18a0e:	9101      	str	r1, [sp, #4]
   18a10:	f8b9 0016 	ldrh.w	r0, [r9, #22]
   18a14:	3001      	adds	r0, #1
   18a16:	f7f8 fd05 	bl	11424 <nrf_modem_os_alloc>
   18a1a:	9901      	ldr	r1, [sp, #4]
   18a1c:	6188      	str	r0, [r1, #24]
   18a1e:	682a      	ldr	r2, [r5, #0]
   18a20:	6990      	ldr	r0, [r2, #24]
   18a22:	b938      	cbnz	r0, 18a34 <nrf_getaddrinfo+0x274>
   18a24:	4628      	mov	r0, r5
   18a26:	f7f8 fd05 	bl	11434 <nrf_modem_os_free>
   18a2a:	4630      	mov	r0, r6
   18a2c:	e7b1      	b.n	18992 <nrf_getaddrinfo+0x1d2>
   18a2e:	2124      	movs	r1, #36	; 0x24
   18a30:	682a      	ldr	r2, [r5, #0]
   18a32:	e7e6      	b.n	18a02 <nrf_getaddrinfo+0x242>
   18a34:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   18a38:	9b00      	ldr	r3, [sp, #0]
   18a3a:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   18a3e:	440b      	add	r3, r1
   18a40:	4619      	mov	r1, r3
   18a42:	f009 f919 	bl	21c78 <memcpy>
   18a46:	2000      	movs	r0, #0
   18a48:	6829      	ldr	r1, [r5, #0]
   18a4a:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   18a4e:	6989      	ldr	r1, [r1, #24]
   18a50:	5488      	strb	r0, [r1, r2]
   18a52:	682a      	ldr	r2, [r5, #0]
   18a54:	9200      	str	r2, [sp, #0]
   18a56:	f8d9 0008 	ldr.w	r0, [r9, #8]
   18a5a:	f008 fa4a 	bl	20ef2 <rpc_af_to_nrf_af>
   18a5e:	9a00      	ldr	r2, [sp, #0]
   18a60:	6050      	str	r0, [r2, #4]
   18a62:	682b      	ldr	r3, [r5, #0]
   18a64:	f8db 2000 	ldr.w	r2, [fp]
   18a68:	609a      	str	r2, [r3, #8]
   18a6a:	682b      	ldr	r3, [r5, #0]
   18a6c:	f8da 2000 	ldr.w	r2, [sl]
   18a70:	60da      	str	r2, [r3, #12]
   18a72:	682b      	ldr	r3, [r5, #0]
   18a74:	683a      	ldr	r2, [r7, #0]
   18a76:	601a      	str	r2, [r3, #0]
   18a78:	2200      	movs	r2, #0
   18a7a:	682b      	ldr	r3, [r5, #0]
   18a7c:	615e      	str	r6, [r3, #20]
   18a7e:	682b      	ldr	r3, [r5, #0]
   18a80:	61da      	str	r2, [r3, #28]
   18a82:	e78a      	b.n	1899a <nrf_getaddrinfo+0x1da>
   18a84:	618a      	str	r2, [r1, #24]
   18a86:	e7e4      	b.n	18a52 <nrf_getaddrinfo+0x292>
   18a88:	f008 fa79 	bl	20f7e <rpc_error_to_nrf_gai_errno>
   18a8c:	4604      	mov	r4, r0
   18a8e:	e784      	b.n	1899a <nrf_getaddrinfo+0x1da>
   18a90:	f06f 0407 	mvn.w	r4, #7
   18a94:	e722      	b.n	188dc <nrf_getaddrinfo+0x11c>
   18a96:	f06f 0401 	mvn.w	r4, #1
   18a9a:	e6be      	b.n	1881a <nrf_getaddrinfo+0x5a>
   18a9c:	f04f 34ff 	mov.w	r4, #4294967295
   18aa0:	e6bb      	b.n	1881a <nrf_getaddrinfo+0x5a>
   18aa2:	f06f 0402 	mvn.w	r4, #2
   18aa6:	e6b8      	b.n	1881a <nrf_getaddrinfo+0x5a>
   18aa8:	2000e2a4 	.word	0x2000e2a4
   18aac:	2000e2b0 	.word	0x2000e2b0
   18ab0:	2000e2ac 	.word	0x2000e2ac
   18ab4:	2000e2a8 	.word	0x2000e2a8
   18ab8:	2000e352 	.word	0x2000e352
   18abc:	2000e2b4 	.word	0x2000e2b4
   18ac0:	000279bf 	.word	0x000279bf
   18ac4:	200110c6 	.word	0x200110c6
   18ac8:	2000e2a0 	.word	0x2000e2a0

00018acc <rpc_ip_event_handler>:
   18acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18ace:	f248 030f 	movw	r3, #32783	; 0x800f
   18ad2:	4299      	cmp	r1, r3
   18ad4:	4606      	mov	r6, r0
   18ad6:	460d      	mov	r5, r1
   18ad8:	d03b      	beq.n	18b52 <rpc_ip_event_handler+0x86>
   18ada:	d822      	bhi.n	18b22 <rpc_ip_event_handler+0x56>
   18adc:	f248 030d 	movw	r3, #32781	; 0x800d
   18ae0:	4299      	cmp	r1, r3
   18ae2:	d02f      	beq.n	18b44 <rpc_ip_event_handler+0x78>
   18ae4:	f248 030e 	movw	r3, #32782	; 0x800e
   18ae8:	4299      	cmp	r1, r3
   18aea:	d02f      	beq.n	18b4c <rpc_ip_event_handler+0x80>
   18aec:	6900      	ldr	r0, [r0, #16]
   18aee:	f7ff fdd1 	bl	18694 <sock_find>
   18af2:	4604      	mov	r4, r0
   18af4:	b308      	cbz	r0, 18b3a <rpc_ip_event_handler+0x6e>
   18af6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   18afa:	d91e      	bls.n	18b3a <rpc_ip_event_handler+0x6e>
   18afc:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
   18b00:	3d01      	subs	r5, #1
   18b02:	2d0b      	cmp	r5, #11
   18b04:	d819      	bhi.n	18b3a <rpc_ip_event_handler+0x6e>
   18b06:	e8df f015 	tbh	[pc, r5, lsl #1]
   18b0a:	0090      	.short	0x0090
   18b0c:	009400b3 	.word	0x009400b3
   18b10:	00940094 	.word	0x00940094
   18b14:	00ee00ee 	.word	0x00ee00ee
   18b18:	00990094 	.word	0x00990094
   18b1c:	00180018 	.word	0x00180018
   18b20:	00d2      	.short	0x00d2
   18b22:	f249 0304 	movw	r3, #36868	; 0x9004
   18b26:	4299      	cmp	r1, r3
   18b28:	d016      	beq.n	18b58 <rpc_ip_event_handler+0x8c>
   18b2a:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   18b2e:	d924      	bls.n	18b7a <rpc_ip_event_handler+0xae>
   18b30:	68c0      	ldr	r0, [r0, #12]
   18b32:	f7ff fdaf 	bl	18694 <sock_find>
   18b36:	4604      	mov	r4, r0
   18b38:	bb70      	cbnz	r0, 18b98 <rpc_ip_event_handler+0xcc>
   18b3a:	6830      	ldr	r0, [r6, #0]
   18b3c:	b1b0      	cbz	r0, 18b6c <rpc_ip_event_handler+0xa0>
   18b3e:	f007 fc57 	bl	203f0 <rpc_client_msg_data_rx_free>
   18b42:	e013      	b.n	18b6c <rpc_ip_event_handler+0xa0>
   18b44:	f7ff fe22 	bl	1878c <on_getaddrinfo_res>
   18b48:	b2c0      	uxtb	r0, r0
   18b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18b4c:	f007 fe01 	bl	20752 <on_getifaddrs_res>
   18b50:	e7fa      	b.n	18b48 <rpc_ip_event_handler+0x7c>
   18b52:	f007 fdeb 	bl	2072c <on_conf_dnssrv_res>
   18b56:	e7f7      	b.n	18b48 <rpc_ip_event_handler+0x7c>
   18b58:	6903      	ldr	r3, [r0, #16]
   18b5a:	2b03      	cmp	r3, #3
   18b5c:	d806      	bhi.n	18b6c <rpc_ip_event_handler+0xa0>
   18b5e:	e8df f003 	tbb	[pc, r3]
   18b62:	0a02      	.short	0x0a02
   18b64:	0702      	.short	0x0702
   18b66:	2000      	movs	r0, #0
   18b68:	f7ff fdce 	bl	18708 <sock_flow_control_set>
   18b6c:	2000      	movs	r0, #0
   18b6e:	e7ec      	b.n	18b4a <rpc_ip_event_handler+0x7e>
   18b70:	2201      	movs	r2, #1
   18b72:	4b65      	ldr	r3, [pc, #404]	; (18d08 <rpc_ip_event_handler+0x23c>)
   18b74:	701a      	strb	r2, [r3, #0]
   18b76:	2001      	movs	r0, #1
   18b78:	e7f6      	b.n	18b68 <rpc_ip_event_handler+0x9c>
   18b7a:	6900      	ldr	r0, [r0, #16]
   18b7c:	f7ff fd8a 	bl	18694 <sock_find>
   18b80:	4604      	mov	r4, r0
   18b82:	2800      	cmp	r0, #0
   18b84:	d0d9      	beq.n	18b3a <rpc_ip_event_handler+0x6e>
   18b86:	f248 0381 	movw	r3, #32897	; 0x8081
   18b8a:	429d      	cmp	r5, r3
   18b8c:	d1d5      	bne.n	18b3a <rpc_ip_event_handler+0x6e>
   18b8e:	4601      	mov	r1, r0
   18b90:	4630      	mov	r0, r6
   18b92:	f000 fc2d 	bl	193f0 <on_tls_attach_res>
   18b96:	e04f      	b.n	18c38 <rpc_ip_event_handler+0x16c>
   18b98:	f249 0302 	movw	r3, #36866	; 0x9002
   18b9c:	429d      	cmp	r5, r3
   18b9e:	f000 809e 	beq.w	18cde <rpc_ip_event_handler+0x212>
   18ba2:	d835      	bhi.n	18c10 <rpc_ip_event_handler+0x144>
   18ba4:	f007 fce6 	bl	20574 <sock_has_stream_error>
   18ba8:	4607      	mov	r7, r0
   18baa:	b9e0      	cbnz	r0, 18be6 <rpc_ip_event_handler+0x11a>
   18bac:	2010      	movs	r0, #16
   18bae:	f7f8 fc39 	bl	11424 <nrf_modem_os_alloc>
   18bb2:	4605      	mov	r5, r0
   18bb4:	b1b8      	cbz	r0, 18be6 <rpc_ip_event_handler+0x11a>
   18bb6:	4639      	mov	r1, r7
   18bb8:	2210      	movs	r2, #16
   18bba:	f009 f884 	bl	21cc6 <memset>
   18bbe:	6833      	ldr	r3, [r6, #0]
   18bc0:	606b      	str	r3, [r5, #4]
   18bc2:	6873      	ldr	r3, [r6, #4]
   18bc4:	812b      	strh	r3, [r5, #8]
   18bc6:	8a71      	ldrh	r1, [r6, #18]
   18bc8:	2900      	cmp	r1, #0
   18bca:	f000 8097 	beq.w	18cfc <rpc_ip_event_handler+0x230>
   18bce:	8a32      	ldrh	r2, [r6, #16]
   18bd0:	f106 0014 	add.w	r0, r6, #20
   18bd4:	f007 fc1a 	bl	2040c <sockaddr_init>
   18bd8:	60e8      	str	r0, [r5, #12]
   18bda:	2800      	cmp	r0, #0
   18bdc:	f040 808e 	bne.w	18cfc <rpc_ip_event_handler+0x230>
   18be0:	4628      	mov	r0, r5
   18be2:	f7f8 fc27 	bl	11434 <nrf_modem_os_free>
   18be6:	6830      	ldr	r0, [r6, #0]
   18be8:	f007 fc02 	bl	203f0 <rpc_client_msg_data_rx_free>
   18bec:	4620      	mov	r0, r4
   18bee:	f007 fc83 	bl	204f8 <sock_is_stream>
   18bf2:	b148      	cbz	r0, 18c08 <rpc_ip_event_handler+0x13c>
   18bf4:	4620      	mov	r0, r4
   18bf6:	f007 fcbd 	bl	20574 <sock_has_stream_error>
   18bfa:	b928      	cbnz	r0, 18c08 <rpc_ip_event_handler+0x13c>
   18bfc:	230c      	movs	r3, #12
   18bfe:	61a3      	str	r3, [r4, #24]
   18c00:	7f23      	ldrb	r3, [r4, #28]
   18c02:	f063 037e 	orn	r3, r3, #126	; 0x7e
   18c06:	7723      	strb	r3, [r4, #28]
   18c08:	4620      	mov	r0, r4
   18c0a:	f007 fc7a 	bl	20502 <sock_is_datagram>
   18c0e:	e025      	b.n	18c5c <rpc_ip_event_handler+0x190>
   18c10:	f249 0303 	movw	r3, #36867	; 0x9003
   18c14:	429d      	cmp	r5, r3
   18c16:	d018      	beq.n	18c4a <rpc_ip_event_handler+0x17e>
   18c18:	f249 0382 	movw	r3, #36994	; 0x9082
   18c1c:	429d      	cmp	r5, r3
   18c1e:	d18c      	bne.n	18b3a <rpc_ip_event_handler+0x6e>
   18c20:	4601      	mov	r1, r0
   18c22:	4630      	mov	r0, r6
   18c24:	f000 fbf8 	bl	19418 <on_tls_handshake_ntf>
   18c28:	e006      	b.n	18c38 <rpc_ip_event_handler+0x16c>
   18c2a:	6973      	ldr	r3, [r6, #20]
   18c2c:	b90b      	cbnz	r3, 18c32 <rpc_ip_event_handler+0x166>
   18c2e:	69b3      	ldr	r3, [r6, #24]
   18c30:	6003      	str	r3, [r0, #0]
   18c32:	4630      	mov	r0, r6
   18c34:	f008 f9ed 	bl	21012 <res_forward>
   18c38:	4605      	mov	r5, r0
   18c3a:	e010      	b.n	18c5e <rpc_ip_event_handler+0x192>
   18c3c:	7f03      	ldrb	r3, [r0, #28]
   18c3e:	f023 0303 	bic.w	r3, r3, #3
   18c42:	f043 0303 	orr.w	r3, r3, #3
   18c46:	7703      	strb	r3, [r0, #28]
   18c48:	e7f3      	b.n	18c32 <rpc_ip_event_handler+0x166>
   18c4a:	7f03      	ldrb	r3, [r0, #28]
   18c4c:	f043 0301 	orr.w	r3, r3, #1
   18c50:	7703      	strb	r3, [r0, #28]
   18c52:	6930      	ldr	r0, [r6, #16]
   18c54:	2869      	cmp	r0, #105	; 0x69
   18c56:	d112      	bne.n	18c7e <rpc_ip_event_handler+0x1b2>
   18c58:	2368      	movs	r3, #104	; 0x68
   18c5a:	61a3      	str	r3, [r4, #24]
   18c5c:	2500      	movs	r5, #0
   18c5e:	4620      	mov	r0, r4
   18c60:	f007 fc96 	bl	20590 <sock_has_pollcb>
   18c64:	b110      	cbz	r0, 18c6c <rpc_ip_event_handler+0x1a0>
   18c66:	4620      	mov	r0, r4
   18c68:	f007 fc09 	bl	2047e <sock_pollcb>
   18c6c:	b2e8      	uxtb	r0, r5
   18c6e:	e76c      	b.n	18b4a <rpc_ip_event_handler+0x7e>
   18c70:	7f03      	ldrb	r3, [r0, #28]
   18c72:	68f5      	ldr	r5, [r6, #12]
   18c74:	f36f 0382 	bfc	r3, #2, #1
   18c78:	7703      	strb	r3, [r0, #28]
   18c7a:	6970      	ldr	r0, [r6, #20]
   18c7c:	b118      	cbz	r0, 18c86 <rpc_ip_event_handler+0x1ba>
   18c7e:	f000 fc71 	bl	19564 <rpc_error_to_nrf_errno>
   18c82:	61a0      	str	r0, [r4, #24]
   18c84:	e7ea      	b.n	18c5c <rpc_ip_event_handler+0x190>
   18c86:	4620      	mov	r0, r4
   18c88:	f007 fc45 	bl	20516 <sock_proto_is_secure>
   18c8c:	b918      	cbnz	r0, 18c96 <rpc_ip_event_handler+0x1ca>
   18c8e:	7f23      	ldrb	r3, [r4, #28]
   18c90:	f043 0308 	orr.w	r3, r3, #8
   18c94:	7723      	strb	r3, [r4, #28]
   18c96:	4620      	mov	r0, r4
   18c98:	f007 fc3d 	bl	20516 <sock_proto_is_secure>
   18c9c:	2800      	cmp	r0, #0
   18c9e:	d0cb      	beq.n	18c38 <rpc_ip_event_handler+0x16c>
   18ca0:	2d00      	cmp	r5, #0
   18ca2:	d0dc      	beq.n	18c5e <rpc_ip_event_handler+0x192>
   18ca4:	2100      	movs	r1, #0
   18ca6:	4620      	mov	r0, r4
   18ca8:	f000 fbd0 	bl	1944c <tls_attach>
   18cac:	e7d6      	b.n	18c5c <rpc_ip_event_handler+0x190>
   18cae:	7f43      	ldrb	r3, [r0, #29]
   18cb0:	3b01      	subs	r3, #1
   18cb2:	7743      	strb	r3, [r0, #29]
   18cb4:	6973      	ldr	r3, [r6, #20]
   18cb6:	2b00      	cmp	r3, #0
   18cb8:	d1bb      	bne.n	18c32 <rpc_ip_event_handler+0x166>
   18cba:	4630      	mov	r0, r6
   18cbc:	f008 f9a7 	bl	2100e <res_cookie_get>
   18cc0:	69b2      	ldr	r2, [r6, #24]
   18cc2:	6843      	ldr	r3, [r0, #4]
   18cc4:	601a      	str	r2, [r3, #0]
   18cc6:	6842      	ldr	r2, [r0, #4]
   18cc8:	7f13      	ldrb	r3, [r2, #28]
   18cca:	f043 0308 	orr.w	r3, r3, #8
   18cce:	7713      	strb	r3, [r2, #28]
   18cd0:	6843      	ldr	r3, [r0, #4]
   18cd2:	6922      	ldr	r2, [r4, #16]
   18cd4:	611a      	str	r2, [r3, #16]
   18cd6:	6843      	ldr	r3, [r0, #4]
   18cd8:	6962      	ldr	r2, [r4, #20]
   18cda:	615a      	str	r2, [r3, #20]
   18cdc:	e7a9      	b.n	18c32 <rpc_ip_event_handler+0x166>
   18cde:	7f43      	ldrb	r3, [r0, #29]
   18ce0:	3301      	adds	r3, #1
   18ce2:	7743      	strb	r3, [r0, #29]
   18ce4:	e7ba      	b.n	18c5c <rpc_ip_event_handler+0x190>
   18ce6:	4630      	mov	r0, r6
   18ce8:	f008 f991 	bl	2100e <res_cookie_get>
   18cec:	6973      	ldr	r3, [r6, #20]
   18cee:	b913      	cbnz	r3, 18cf6 <rpc_ip_event_handler+0x22a>
   18cf0:	69b3      	ldr	r3, [r6, #24]
   18cf2:	6043      	str	r3, [r0, #4]
   18cf4:	e79d      	b.n	18c32 <rpc_ip_event_handler+0x166>
   18cf6:	f04f 33ff 	mov.w	r3, #4294967295
   18cfa:	e7fa      	b.n	18cf2 <rpc_ip_event_handler+0x226>
   18cfc:	4629      	mov	r1, r5
   18cfe:	4620      	mov	r0, r4
   18d00:	f007 fbda 	bl	204b8 <sock_pkt_append>
   18d04:	e7aa      	b.n	18c5c <rpc_ip_event_handler+0x190>
   18d06:	bf00      	nop
   18d08:	200110c7 	.word	0x200110c7

00018d0c <nrf_close>:
   18d0c:	b570      	push	{r4, r5, r6, lr}
   18d0e:	4604      	mov	r4, r0
   18d10:	f7ff fcc0 	bl	18694 <sock_find>
   18d14:	4605      	mov	r5, r0
   18d16:	b930      	cbnz	r0, 18d26 <nrf_close+0x1a>
   18d18:	2009      	movs	r0, #9
   18d1a:	f006 fcc9 	bl	1f6b0 <nrf_modem_os_errno_set>
   18d1e:	f04f 36ff 	mov.w	r6, #4294967295
   18d22:	4630      	mov	r0, r6
   18d24:	bd70      	pop	{r4, r5, r6, pc}
   18d26:	f001 f91f 	bl	19f68 <nrf_modem_state_is_initialized>
   18d2a:	b960      	cbnz	r0, 18d46 <nrf_close+0x3a>
   18d2c:	2600      	movs	r6, #0
   18d2e:	4628      	mov	r0, r5
   18d30:	f007 fc05 	bl	2053e <sock_is_attaching>
   18d34:	b118      	cbz	r0, 18d3e <nrf_close+0x32>
   18d36:	4b0e      	ldr	r3, [pc, #56]	; (18d70 <nrf_close+0x64>)
   18d38:	6818      	ldr	r0, [r3, #0]
   18d3a:	f006 fcc1 	bl	1f6c0 <nrf_modem_os_sem_give>
   18d3e:	4620      	mov	r0, r4
   18d40:	f7ff fcba 	bl	186b8 <_sock_close>
   18d44:	e7ed      	b.n	18d22 <nrf_close+0x16>
   18d46:	2000      	movs	r0, #0
   18d48:	f007 fb29 	bl	2039e <rpc_client_msg_alloc>
   18d4c:	4601      	mov	r1, r0
   18d4e:	b908      	cbnz	r0, 18d54 <nrf_close+0x48>
   18d50:	2069      	movs	r0, #105	; 0x69
   18d52:	e7e2      	b.n	18d1a <nrf_close+0xe>
   18d54:	6104      	str	r4, [r0, #16]
   18d56:	f247 0009 	movw	r0, #28681	; 0x7009
   18d5a:	f008 f92a 	bl	20fb2 <req_forward>
   18d5e:	2800      	cmp	r0, #0
   18d60:	d0e4      	beq.n	18d2c <nrf_close+0x20>
   18d62:	2816      	cmp	r0, #22
   18d64:	d0e2      	beq.n	18d2c <nrf_close+0x20>
   18d66:	f006 fca3 	bl	1f6b0 <nrf_modem_os_errno_set>
   18d6a:	f04f 36ff 	mov.w	r6, #4294967295
   18d6e:	e7de      	b.n	18d2e <nrf_close+0x22>
   18d70:	2000e2b8 	.word	0x2000e2b8

00018d74 <nrf_sendto>:
   18d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d78:	4698      	mov	r8, r3
   18d7a:	2300      	movs	r3, #0
   18d7c:	b085      	sub	sp, #20
   18d7e:	4682      	mov	sl, r0
   18d80:	4689      	mov	r9, r1
   18d82:	4616      	mov	r6, r2
   18d84:	e9cd 3302 	strd	r3, r3, [sp, #8]
   18d88:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   18d8a:	f7ff fc83 	bl	18694 <sock_find>
   18d8e:	4605      	mov	r5, r0
   18d90:	b940      	cbnz	r0, 18da4 <nrf_sendto+0x30>
   18d92:	2009      	movs	r0, #9
   18d94:	f006 fc8c 	bl	1f6b0 <nrf_modem_os_errno_set>
   18d98:	f04f 34ff 	mov.w	r4, #4294967295
   18d9c:	4620      	mov	r0, r4
   18d9e:	b005      	add	sp, #20
   18da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18da4:	f038 0340 	bics.w	r3, r8, #64	; 0x40
   18da8:	d001      	beq.n	18dae <nrf_sendto+0x3a>
   18daa:	205f      	movs	r0, #95	; 0x5f
   18dac:	e7f2      	b.n	18d94 <nrf_sendto+0x20>
   18dae:	f007 fbf4 	bl	2059a <sock_has_rai_no_data>
   18db2:	b128      	cbz	r0, 18dc0 <nrf_sendto+0x4c>
   18db4:	4628      	mov	r0, r5
   18db6:	f007 fbe0 	bl	2057a <sock_has_error>
   18dba:	b128      	cbz	r0, 18dc8 <nrf_sendto+0x54>
   18dbc:	69a8      	ldr	r0, [r5, #24]
   18dbe:	e7e9      	b.n	18d94 <nrf_sendto+0x20>
   18dc0:	4628      	mov	r0, r5
   18dc2:	f007 fbc4 	bl	2054e <sock_is_closed>
   18dc6:	e7f8      	b.n	18dba <nrf_sendto+0x46>
   18dc8:	4628      	mov	r0, r5
   18dca:	b1d7      	cbz	r7, 18e02 <nrf_sendto+0x8e>
   18dcc:	f007 fb94 	bl	204f8 <sock_is_stream>
   18dd0:	bb00      	cbnz	r0, 18e14 <nrf_sendto+0xa0>
   18dd2:	4639      	mov	r1, r7
   18dd4:	4628      	mov	r0, r5
   18dd6:	f007 fc6c 	bl	206b2 <sock_sockaddr_fam_is_valid>
   18dda:	b908      	cbnz	r0, 18de0 <nrf_sendto+0x6c>
   18ddc:	206a      	movs	r0, #106	; 0x6a
   18dde:	e7d9      	b.n	18d94 <nrf_sendto+0x20>
   18de0:	4638      	mov	r0, r7
   18de2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   18de4:	f007 fc51 	bl	2068a <sock_sockaddr_len_is_valid>
   18de8:	b908      	cbnz	r0, 18dee <nrf_sendto+0x7a>
   18dea:	2016      	movs	r0, #22
   18dec:	e7d2      	b.n	18d94 <nrf_sendto+0x20>
   18dee:	4628      	mov	r0, r5
   18df0:	f007 fb87 	bl	20502 <sock_is_datagram>
   18df4:	b170      	cbz	r0, 18e14 <nrf_sendto+0xa0>
   18df6:	4628      	mov	r0, r5
   18df8:	f007 fb8d 	bl	20516 <sock_proto_is_secure>
   18dfc:	b150      	cbz	r0, 18e14 <nrf_sendto+0xa0>
   18dfe:	207f      	movs	r0, #127	; 0x7f
   18e00:	e7c8      	b.n	18d94 <nrf_sendto+0x20>
   18e02:	f007 fb7e 	bl	20502 <sock_is_datagram>
   18e06:	b128      	cbz	r0, 18e14 <nrf_sendto+0xa0>
   18e08:	4628      	mov	r0, r5
   18e0a:	f007 fb94 	bl	20536 <sock_is_connected>
   18e0e:	b908      	cbnz	r0, 18e14 <nrf_sendto+0xa0>
   18e10:	2079      	movs	r0, #121	; 0x79
   18e12:	e7bf      	b.n	18d94 <nrf_sendto+0x20>
   18e14:	4628      	mov	r0, r5
   18e16:	f007 fc00 	bl	2061a <sock_sndtimeo_ms_get>
   18e1a:	9001      	str	r0, [sp, #4]
   18e1c:	4628      	mov	r0, r5
   18e1e:	f007 fb92 	bl	20546 <sock_is_nonblock>
   18e22:	bb78      	cbnz	r0, 18e84 <nrf_sendto+0x110>
   18e24:	f3c8 1880 	ubfx	r8, r8, #6, #1
   18e28:	4628      	mov	r0, r5
   18e2a:	f007 fb65 	bl	204f8 <sock_is_stream>
   18e2e:	b140      	cbz	r0, 18e42 <nrf_sendto+0xce>
   18e30:	4628      	mov	r0, r5
   18e32:	f007 fb70 	bl	20516 <sock_proto_is_secure>
   18e36:	b120      	cbz	r0, 18e42 <nrf_sendto+0xce>
   18e38:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
   18e3c:	bf28      	it	cs
   18e3e:	f44f 6600 	movcs.w	r6, #2048	; 0x800
   18e42:	f007 fad7 	bl	203f4 <rpc_client_msg_data_tx_size>
   18e46:	42b0      	cmp	r0, r6
   18e48:	d206      	bcs.n	18e58 <nrf_sendto+0xe4>
   18e4a:	4628      	mov	r0, r5
   18e4c:	f007 fb54 	bl	204f8 <sock_is_stream>
   18e50:	b1d8      	cbz	r0, 18e8a <nrf_sendto+0x116>
   18e52:	f007 facf 	bl	203f4 <rpc_client_msg_data_tx_size>
   18e56:	4606      	mov	r6, r0
   18e58:	4628      	mov	r0, r5
   18e5a:	f007 fb95 	bl	20588 <sock_has_flow_control>
   18e5e:	b118      	cbz	r0, 18e68 <nrf_sendto+0xf4>
   18e60:	4628      	mov	r0, r5
   18e62:	f007 fb74 	bl	2054e <sock_is_closed>
   18e66:	b190      	cbz	r0, 18e8e <nrf_sendto+0x11a>
   18e68:	4630      	mov	r0, r6
   18e6a:	f007 fa98 	bl	2039e <rpc_client_msg_alloc>
   18e6e:	4604      	mov	r4, r0
   18e70:	b9e0      	cbnz	r0, 18eac <nrf_sendto+0x138>
   18e72:	2001      	movs	r0, #1
   18e74:	a901      	add	r1, sp, #4
   18e76:	f7f8 f9db 	bl	11230 <nrf_modem_os_timedwait>
   18e7a:	b998      	cbnz	r0, 18ea4 <nrf_sendto+0x130>
   18e7c:	f1b8 0f00 	cmp.w	r8, #0
   18e80:	d0f2      	beq.n	18e68 <nrf_sendto+0xf4>
   18e82:	e007      	b.n	18e94 <nrf_sendto+0x120>
   18e84:	f04f 0801 	mov.w	r8, #1
   18e88:	e7ce      	b.n	18e28 <nrf_sendto+0xb4>
   18e8a:	207a      	movs	r0, #122	; 0x7a
   18e8c:	e782      	b.n	18d94 <nrf_sendto+0x20>
   18e8e:	f1b8 0f00 	cmp.w	r8, #0
   18e92:	d001      	beq.n	18e98 <nrf_sendto+0x124>
   18e94:	200b      	movs	r0, #11
   18e96:	e77d      	b.n	18d94 <nrf_sendto+0x20>
   18e98:	2002      	movs	r0, #2
   18e9a:	a901      	add	r1, sp, #4
   18e9c:	f7f8 f9c8 	bl	11230 <nrf_modem_os_timedwait>
   18ea0:	2800      	cmp	r0, #0
   18ea2:	d0d9      	beq.n	18e58 <nrf_sendto+0xe4>
   18ea4:	2800      	cmp	r0, #0
   18ea6:	bfb8      	it	lt
   18ea8:	4240      	neglt	r0, r0
   18eaa:	e773      	b.n	18d94 <nrf_sendto+0x20>
   18eac:	f8c0 a010 	str.w	sl, [r0, #16]
   18eb0:	f1b9 0f00 	cmp.w	r9, #0
   18eb4:	d004      	beq.n	18ec0 <nrf_sendto+0x14c>
   18eb6:	4632      	mov	r2, r6
   18eb8:	4649      	mov	r1, r9
   18eba:	6800      	ldr	r0, [r0, #0]
   18ebc:	f008 fedc 	bl	21c78 <memcpy>
   18ec0:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
   18ec4:	f1bb 0f00 	cmp.w	fp, #0
   18ec8:	d001      	beq.n	18ece <nrf_sendto+0x15a>
   18eca:	2300      	movs	r3, #0
   18ecc:	632b      	str	r3, [r5, #48]	; 0x30
   18ece:	b3cf      	cbz	r7, 18f44 <nrf_sendto+0x1d0>
   18ed0:	4628      	mov	r0, r5
   18ed2:	f007 fb11 	bl	204f8 <sock_is_stream>
   18ed6:	bba8      	cbnz	r0, 18f44 <nrf_sendto+0x1d0>
   18ed8:	2318      	movs	r3, #24
   18eda:	7260      	strb	r0, [r4, #9]
   18edc:	7223      	strb	r3, [r4, #8]
   18ede:	72a0      	strb	r0, [r4, #10]
   18ee0:	72e0      	strb	r0, [r4, #11]
   18ee2:	f8c4 b014 	str.w	fp, [r4, #20]
   18ee6:	687b      	ldr	r3, [r7, #4]
   18ee8:	2b01      	cmp	r3, #1
   18eea:	d012      	beq.n	18f12 <nrf_sendto+0x19e>
   18eec:	2b02      	cmp	r3, #2
   18eee:	d018      	beq.n	18f22 <nrf_sendto+0x1ae>
   18ef0:	f247 0b07 	movw	fp, #28679	; 0x7007
   18ef4:	4620      	mov	r0, r4
   18ef6:	a902      	add	r1, sp, #8
   18ef8:	f008 f887 	bl	2100a <req_cookie_set>
   18efc:	4621      	mov	r1, r4
   18efe:	4658      	mov	r0, fp
   18f00:	f008 f857 	bl	20fb2 <req_forward>
   18f04:	4603      	mov	r3, r0
   18f06:	bb40      	cbnz	r0, 18f5a <nrf_sendto+0x1e6>
   18f08:	e9dd 0402 	ldrd	r0, r4, [sp, #8]
   18f0c:	f007 fa6a 	bl	203e4 <rpc_client_msg_rx_free>
   18f10:	e744      	b.n	18d9c <nrf_sendto+0x28>
   18f12:	893b      	ldrh	r3, [r7, #8]
   18f14:	76e0      	strb	r0, [r4, #27]
   18f16:	8323      	strh	r3, [r4, #24]
   18f18:	2304      	movs	r3, #4
   18f1a:	76a3      	strb	r3, [r4, #26]
   18f1c:	68fb      	ldr	r3, [r7, #12]
   18f1e:	61e3      	str	r3, [r4, #28]
   18f20:	e7e6      	b.n	18ef0 <nrf_sendto+0x17c>
   18f22:	893b      	ldrh	r3, [r7, #8]
   18f24:	f104 021c 	add.w	r2, r4, #28
   18f28:	8323      	strh	r3, [r4, #24]
   18f2a:	2310      	movs	r3, #16
   18f2c:	76e0      	strb	r0, [r4, #27]
   18f2e:	76a3      	strb	r3, [r4, #26]
   18f30:	f107 0120 	add.w	r1, r7, #32
   18f34:	18fb      	adds	r3, r7, r3
   18f36:	f853 0b04 	ldr.w	r0, [r3], #4
   18f3a:	428b      	cmp	r3, r1
   18f3c:	f842 0b04 	str.w	r0, [r2], #4
   18f40:	d1f9      	bne.n	18f36 <nrf_sendto+0x1c2>
   18f42:	e7d5      	b.n	18ef0 <nrf_sendto+0x17c>
   18f44:	2300      	movs	r3, #0
   18f46:	2204      	movs	r2, #4
   18f48:	f8c4 b014 	str.w	fp, [r4, #20]
   18f4c:	7222      	strb	r2, [r4, #8]
   18f4e:	f247 0b06 	movw	fp, #28678	; 0x7006
   18f52:	7263      	strb	r3, [r4, #9]
   18f54:	72a3      	strb	r3, [r4, #10]
   18f56:	72e3      	strb	r3, [r4, #11]
   18f58:	e7cc      	b.n	18ef4 <nrf_sendto+0x180>
   18f5a:	280c      	cmp	r0, #12
   18f5c:	dc0f      	bgt.n	18f7e <nrf_sendto+0x20a>
   18f5e:	280a      	cmp	r0, #10
   18f60:	dd10      	ble.n	18f84 <nrf_sendto+0x210>
   18f62:	4b09      	ldr	r3, [pc, #36]	; (18f88 <nrf_sendto+0x214>)
   18f64:	781b      	ldrb	r3, [r3, #0]
   18f66:	b92b      	cbnz	r3, 18f74 <nrf_sendto+0x200>
   18f68:	2001      	movs	r0, #1
   18f6a:	a901      	add	r1, sp, #4
   18f6c:	f7f8 f960 	bl	11230 <nrf_modem_os_timedwait>
   18f70:	2800      	cmp	r0, #0
   18f72:	d197      	bne.n	18ea4 <nrf_sendto+0x130>
   18f74:	f1b8 0f00 	cmp.w	r8, #0
   18f78:	f43f af6e 	beq.w	18e58 <nrf_sendto+0xe4>
   18f7c:	e78a      	b.n	18e94 <nrf_sendto+0x120>
   18f7e:	288c      	cmp	r0, #140	; 0x8c
   18f80:	f43f af08 	beq.w	18d94 <nrf_sendto+0x20>
   18f84:	4618      	mov	r0, r3
   18f86:	e705      	b.n	18d94 <nrf_sendto+0x20>
   18f88:	200110c7 	.word	0x200110c7

00018f8c <nrf_setsockopt>:
   18f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18f90:	b085      	sub	sp, #20
   18f92:	4681      	mov	r9, r0
   18f94:	4688      	mov	r8, r1
   18f96:	4617      	mov	r7, r2
   18f98:	461e      	mov	r6, r3
   18f9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   18f9c:	f7ff fb7a 	bl	18694 <sock_find>
   18fa0:	4604      	mov	r4, r0
   18fa2:	b938      	cbnz	r0, 18fb4 <nrf_setsockopt+0x28>
   18fa4:	2009      	movs	r0, #9
   18fa6:	f006 fb83 	bl	1f6b0 <nrf_modem_os_errno_set>
   18faa:	f04f 30ff 	mov.w	r0, #4294967295
   18fae:	b005      	add	sp, #20
   18fb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18fb4:	b916      	cbnz	r6, 18fbc <nrf_setsockopt+0x30>
   18fb6:	b10d      	cbz	r5, 18fbc <nrf_setsockopt+0x30>
   18fb8:	2016      	movs	r0, #22
   18fba:	e7f4      	b.n	18fa6 <nrf_setsockopt+0x1a>
   18fbc:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
   18fc0:	f000 80fe 	beq.w	191c0 <nrf_setsockopt+0x234>
   18fc4:	dc0c      	bgt.n	18fe0 <nrf_setsockopt+0x54>
   18fc6:	f1b8 0f01 	cmp.w	r8, #1
   18fca:	d012      	beq.n	18ff2 <nrf_setsockopt+0x66>
   18fcc:	f1b8 0f06 	cmp.w	r8, #6
   18fd0:	f000 80f0 	beq.w	191b4 <nrf_setsockopt+0x228>
   18fd4:	f1b8 0f00 	cmp.w	r8, #0
   18fd8:	f000 80f0 	beq.w	191bc <nrf_setsockopt+0x230>
   18fdc:	206d      	movs	r0, #109	; 0x6d
   18fde:	e7e2      	b.n	18fa6 <nrf_setsockopt+0x1a>
   18fe0:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   18fe4:	f000 8092 	beq.w	1910c <nrf_setsockopt+0x180>
   18fe8:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   18fec:	d1f6      	bne.n	18fdc <nrf_setsockopt+0x50>
   18fee:	2f1e      	cmp	r7, #30
   18ff0:	e0e1      	b.n	191b6 <nrf_setsockopt+0x22a>
   18ff2:	2f3c      	cmp	r7, #60	; 0x3c
   18ff4:	dcf2      	bgt.n	18fdc <nrf_setsockopt+0x50>
   18ff6:	2f31      	cmp	r7, #49	; 0x31
   18ff8:	dc0f      	bgt.n	1901a <nrf_setsockopt+0x8e>
   18ffa:	2f15      	cmp	r7, #21
   18ffc:	d046      	beq.n	1908c <nrf_setsockopt+0x100>
   18ffe:	dc29      	bgt.n	19054 <nrf_setsockopt+0xc8>
   19000:	2f02      	cmp	r7, #2
   19002:	d03a      	beq.n	1907a <nrf_setsockopt+0xee>
   19004:	2f14      	cmp	r7, #20
   19006:	d1e9      	bne.n	18fdc <nrf_setsockopt+0x50>
   19008:	f104 0020 	add.w	r0, r4, #32
   1900c:	2d00      	cmp	r5, #0
   1900e:	d143      	bne.n	19098 <nrf_setsockopt+0x10c>
   19010:	2300      	movs	r3, #0
   19012:	6223      	str	r3, [r4, #32]
   19014:	6043      	str	r3, [r0, #4]
   19016:	2000      	movs	r0, #0
   19018:	e7c9      	b.n	18fae <nrf_setsockopt+0x22>
   1901a:	3f32      	subs	r7, #50	; 0x32
   1901c:	2f0a      	cmp	r7, #10
   1901e:	d8dd      	bhi.n	18fdc <nrf_setsockopt+0x50>
   19020:	a301      	add	r3, pc, #4	; (adr r3, 19028 <nrf_setsockopt+0x9c>)
   19022:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
   19026:	bf00      	nop
   19028:	000190f1 	.word	0x000190f1
   1902c:	000190d7 	.word	0x000190d7
   19030:	000190df 	.word	0x000190df
   19034:	000190e5 	.word	0x000190e5
   19038:	000190eb 	.word	0x000190eb
   1903c:	00018fdd 	.word	0x00018fdd
   19040:	00018fdd 	.word	0x00018fdd
   19044:	00018fdd 	.word	0x00018fdd
   19048:	00018fdd 	.word	0x00018fdd
   1904c:	00018fdd 	.word	0x00018fdd
   19050:	000190a9 	.word	0x000190a9
   19054:	2f19      	cmp	r7, #25
   19056:	d1c1      	bne.n	18fdc <nrf_setsockopt+0x50>
   19058:	2e00      	cmp	r6, #0
   1905a:	d0ad      	beq.n	18fb8 <nrf_setsockopt+0x2c>
   1905c:	2203      	movs	r2, #3
   1905e:	4969      	ldr	r1, [pc, #420]	; (19204 <nrf_setsockopt+0x278>)
   19060:	4630      	mov	r0, r6
   19062:	f008 fdf9 	bl	21c58 <memcmp>
   19066:	220a      	movs	r2, #10
   19068:	2100      	movs	r1, #0
   1906a:	2800      	cmp	r0, #0
   1906c:	d14c      	bne.n	19108 <nrf_setsockopt+0x17c>
   1906e:	1cf0      	adds	r0, r6, #3
   19070:	f003 f966 	bl	1c340 <strtoul>
   19074:	2504      	movs	r5, #4
   19076:	9003      	str	r0, [sp, #12]
   19078:	ae03      	add	r6, sp, #12
   1907a:	4628      	mov	r0, r5
   1907c:	f007 f98f 	bl	2039e <rpc_client_msg_alloc>
   19080:	4604      	mov	r4, r0
   19082:	2800      	cmp	r0, #0
   19084:	f040 809e 	bne.w	191c4 <nrf_setsockopt+0x238>
   19088:	2069      	movs	r0, #105	; 0x69
   1908a:	e78c      	b.n	18fa6 <nrf_setsockopt+0x1a>
   1908c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   19090:	b915      	cbnz	r5, 19098 <nrf_setsockopt+0x10c>
   19092:	62a5      	str	r5, [r4, #40]	; 0x28
   19094:	6045      	str	r5, [r0, #4]
   19096:	e7be      	b.n	19016 <nrf_setsockopt+0x8a>
   19098:	2d08      	cmp	r5, #8
   1909a:	462a      	mov	r2, r5
   1909c:	4631      	mov	r1, r6
   1909e:	bf28      	it	cs
   190a0:	2208      	movcs	r2, #8
   190a2:	f008 fde9 	bl	21c78 <memcpy>
   190a6:	e7b6      	b.n	19016 <nrf_setsockopt+0x8a>
   190a8:	b17e      	cbz	r6, 190ca <nrf_setsockopt+0x13e>
   190aa:	2d08      	cmp	r5, #8
   190ac:	d184      	bne.n	18fb8 <nrf_setsockopt+0x2c>
   190ae:	f7fe fdbf 	bl	17c30 <rpc_transport_data_rx_suspend>
   190b2:	e896 0003 	ldmia.w	r6, {r0, r1}
   190b6:	f104 0334 	add.w	r3, r4, #52	; 0x34
   190ba:	e883 0003 	stmia.w	r3, {r0, r1}
   190be:	4620      	mov	r0, r4
   190c0:	f007 f9dd 	bl	2047e <sock_pollcb>
   190c4:	f7fe fdba 	bl	17c3c <rpc_transport_data_rx_resume>
   190c8:	e7a5      	b.n	19016 <nrf_setsockopt+0x8a>
   190ca:	2d00      	cmp	r5, #0
   190cc:	f47f af74 	bne.w	18fb8 <nrf_setsockopt+0x2c>
   190d0:	6365      	str	r5, [r4, #52]	; 0x34
   190d2:	63a5      	str	r5, [r4, #56]	; 0x38
   190d4:	e79f      	b.n	19016 <nrf_setsockopt+0x8a>
   190d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   190da:	6323      	str	r3, [r4, #48]	; 0x30
   190dc:	e79b      	b.n	19016 <nrf_setsockopt+0x8a>
   190de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   190e2:	e7fa      	b.n	190da <nrf_setsockopt+0x14e>
   190e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   190e8:	e7f7      	b.n	190da <nrf_setsockopt+0x14e>
   190ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   190ee:	e7f4      	b.n	190da <nrf_setsockopt+0x14e>
   190f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   190f4:	6323      	str	r3, [r4, #48]	; 0x30
   190f6:	2300      	movs	r3, #0
   190f8:	4648      	mov	r0, r9
   190fa:	461a      	mov	r2, r3
   190fc:	4619      	mov	r1, r3
   190fe:	e9cd 3300 	strd	r3, r3, [sp]
   19102:	f7ff fe37 	bl	18d74 <nrf_sendto>
   19106:	e752      	b.n	18fae <nrf_setsockopt+0x22>
   19108:	4630      	mov	r0, r6
   1910a:	e7b1      	b.n	19070 <nrf_setsockopt+0xe4>
   1910c:	1e7b      	subs	r3, r7, #1
   1910e:	2b11      	cmp	r3, #17
   19110:	f63f af64 	bhi.w	18fdc <nrf_setsockopt+0x50>
   19114:	a201      	add	r2, pc, #4	; (adr r2, 1911c <nrf_setsockopt+0x190>)
   19116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1911a:	bf00      	nop
   1911c:	00019175 	.word	0x00019175
   19120:	000191a5 	.word	0x000191a5
   19124:	0001907b 	.word	0x0001907b
   19128:	00018fdd 	.word	0x00018fdd
   1912c:	00019195 	.word	0x00019195
   19130:	00019165 	.word	0x00019165
   19134:	00018fdd 	.word	0x00018fdd
   19138:	00018fdd 	.word	0x00018fdd
   1913c:	00018fdd 	.word	0x00018fdd
   19140:	00018fdd 	.word	0x00018fdd
   19144:	00018fdd 	.word	0x00018fdd
   19148:	00019185 	.word	0x00019185
   1914c:	0001907b 	.word	0x0001907b
   19150:	0001907b 	.word	0x0001907b
   19154:	0001907b 	.word	0x0001907b
   19158:	00018fdd 	.word	0x00018fdd
   1915c:	0001907b 	.word	0x0001907b
   19160:	0001907b 	.word	0x0001907b
   19164:	462a      	mov	r2, r5
   19166:	4631      	mov	r1, r6
   19168:	4620      	mov	r0, r4
   1916a:	b005      	add	sp, #20
   1916c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19170:	f007 bdec 	b.w	20d4c <tls_setopt_role>
   19174:	462a      	mov	r2, r5
   19176:	4631      	mov	r1, r6
   19178:	4620      	mov	r0, r4
   1917a:	b005      	add	sp, #20
   1917c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19180:	f007 bdf8 	b.w	20d74 <tls_setopt_taglist>
   19184:	462a      	mov	r2, r5
   19186:	4631      	mov	r1, r6
   19188:	4620      	mov	r0, r4
   1918a:	b005      	add	sp, #20
   1918c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19190:	f007 be05 	b.w	20d9e <tls_setopt_sess_cache>
   19194:	462a      	mov	r2, r5
   19196:	4631      	mov	r1, r6
   19198:	4620      	mov	r0, r4
   1919a:	b005      	add	sp, #20
   1919c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   191a0:	f007 be0f 	b.w	20dc2 <tls_setopt_peer_verify>
   191a4:	462a      	mov	r2, r5
   191a6:	4631      	mov	r1, r6
   191a8:	4620      	mov	r0, r4
   191aa:	b005      	add	sp, #20
   191ac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   191b0:	f007 be16 	b.w	20de0 <tls_setopt_hostname>
   191b4:	2f37      	cmp	r7, #55	; 0x37
   191b6:	f43f af60 	beq.w	1907a <nrf_setsockopt+0xee>
   191ba:	e70f      	b.n	18fdc <nrf_setsockopt+0x50>
   191bc:	2f1f      	cmp	r7, #31
   191be:	e7fa      	b.n	191b6 <nrf_setsockopt+0x22a>
   191c0:	2f20      	cmp	r7, #32
   191c2:	e7f8      	b.n	191b6 <nrf_setsockopt+0x22a>
   191c4:	2300      	movs	r3, #0
   191c6:	2208      	movs	r2, #8
   191c8:	7243      	strb	r3, [r0, #9]
   191ca:	7202      	strb	r2, [r0, #8]
   191cc:	7283      	strb	r3, [r0, #10]
   191ce:	72c3      	strb	r3, [r0, #11]
   191d0:	f8c0 9010 	str.w	r9, [r0, #16]
   191d4:	4640      	mov	r0, r8
   191d6:	f007 feb5 	bl	20f44 <nrf_sol_to_rpc_sol>
   191da:	6160      	str	r0, [r4, #20]
   191dc:	4638      	mov	r0, r7
   191de:	f000 f9b5 	bl	1954c <nrf_so_to_rpc_so>
   191e2:	4631      	mov	r1, r6
   191e4:	61a0      	str	r0, [r4, #24]
   191e6:	462a      	mov	r2, r5
   191e8:	6820      	ldr	r0, [r4, #0]
   191ea:	f008 fd45 	bl	21c78 <memcpy>
   191ee:	4621      	mov	r1, r4
   191f0:	f247 0003 	movw	r0, #28675	; 0x7003
   191f4:	6065      	str	r5, [r4, #4]
   191f6:	f007 fedc 	bl	20fb2 <req_forward>
   191fa:	2800      	cmp	r0, #0
   191fc:	f43f af0b 	beq.w	19016 <nrf_setsockopt+0x8a>
   19200:	e6d1      	b.n	18fa6 <nrf_setsockopt+0x1a>
   19202:	bf00      	nop
   19204:	000279bf 	.word	0x000279bf

00019208 <nrf_getsockopt>:
   19208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1920c:	9c08      	ldr	r4, [sp, #32]
   1920e:	4681      	mov	r9, r0
   19210:	4688      	mov	r8, r1
   19212:	4617      	mov	r7, r2
   19214:	461e      	mov	r6, r3
   19216:	f7ff fa3d 	bl	18694 <sock_find>
   1921a:	b930      	cbnz	r0, 1922a <nrf_getsockopt+0x22>
   1921c:	2009      	movs	r0, #9
   1921e:	f006 fa47 	bl	1f6b0 <nrf_modem_os_errno_set>
   19222:	f04f 30ff 	mov.w	r0, #4294967295
   19226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1922a:	b106      	cbz	r6, 1922e <nrf_getsockopt+0x26>
   1922c:	b90c      	cbnz	r4, 19232 <nrf_getsockopt+0x2a>
   1922e:	200e      	movs	r0, #14
   19230:	e7f5      	b.n	1921e <nrf_getsockopt+0x16>
   19232:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
   19236:	f000 8096 	beq.w	19366 <nrf_getsockopt+0x15e>
   1923a:	dc0c      	bgt.n	19256 <nrf_getsockopt+0x4e>
   1923c:	f1b8 0f01 	cmp.w	r8, #1
   19240:	d011      	beq.n	19266 <nrf_getsockopt+0x5e>
   19242:	f1b8 0f06 	cmp.w	r8, #6
   19246:	f000 8082 	beq.w	1934e <nrf_getsockopt+0x146>
   1924a:	f1b8 0f00 	cmp.w	r8, #0
   1924e:	f000 8088 	beq.w	19362 <nrf_getsockopt+0x15a>
   19252:	206d      	movs	r0, #109	; 0x6d
   19254:	e7e3      	b.n	1921e <nrf_getsockopt+0x16>
   19256:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   1925a:	d024      	beq.n	192a6 <nrf_getsockopt+0x9e>
   1925c:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   19260:	d1f7      	bne.n	19252 <nrf_getsockopt+0x4a>
   19262:	2f1e      	cmp	r7, #30
   19264:	e074      	b.n	19350 <nrf_getsockopt+0x148>
   19266:	2f14      	cmp	r7, #20
   19268:	d00a      	beq.n	19280 <nrf_getsockopt+0x78>
   1926a:	2f15      	cmp	r7, #21
   1926c:	d013      	beq.n	19296 <nrf_getsockopt+0x8e>
   1926e:	2f04      	cmp	r7, #4
   19270:	d1ef      	bne.n	19252 <nrf_getsockopt+0x4a>
   19272:	6983      	ldr	r3, [r0, #24]
   19274:	6027      	str	r7, [r4, #0]
   19276:	6033      	str	r3, [r6, #0]
   19278:	2300      	movs	r3, #0
   1927a:	6183      	str	r3, [r0, #24]
   1927c:	2000      	movs	r0, #0
   1927e:	e7d2      	b.n	19226 <nrf_getsockopt+0x1e>
   19280:	6822      	ldr	r2, [r4, #0]
   19282:	f100 0120 	add.w	r1, r0, #32
   19286:	2a08      	cmp	r2, #8
   19288:	bf28      	it	cs
   1928a:	2208      	movcs	r2, #8
   1928c:	6022      	str	r2, [r4, #0]
   1928e:	4630      	mov	r0, r6
   19290:	f008 fcf2 	bl	21c78 <memcpy>
   19294:	e7f2      	b.n	1927c <nrf_getsockopt+0x74>
   19296:	6822      	ldr	r2, [r4, #0]
   19298:	f100 0128 	add.w	r1, r0, #40	; 0x28
   1929c:	2a08      	cmp	r2, #8
   1929e:	bf28      	it	cs
   192a0:	2208      	movcs	r2, #8
   192a2:	6022      	str	r2, [r4, #0]
   192a4:	e7f3      	b.n	1928e <nrf_getsockopt+0x86>
   192a6:	1e7b      	subs	r3, r7, #1
   192a8:	2b12      	cmp	r3, #18
   192aa:	d8d2      	bhi.n	19252 <nrf_getsockopt+0x4a>
   192ac:	a201      	add	r2, pc, #4	; (adr r2, 192b4 <nrf_getsockopt+0xac>)
   192ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   192b2:	bf00      	nop
   192b4:	00019321 	.word	0x00019321
   192b8:	00019337 	.word	0x00019337
   192bc:	00019355 	.word	0x00019355
   192c0:	00019355 	.word	0x00019355
   192c4:	00019317 	.word	0x00019317
   192c8:	00019301 	.word	0x00019301
   192cc:	00019253 	.word	0x00019253
   192d0:	00019253 	.word	0x00019253
   192d4:	00019253 	.word	0x00019253
   192d8:	00019253 	.word	0x00019253
   192dc:	00019253 	.word	0x00019253
   192e0:	0001930d 	.word	0x0001930d
   192e4:	00019253 	.word	0x00019253
   192e8:	00019355 	.word	0x00019355
   192ec:	00019355 	.word	0x00019355
   192f0:	00019355 	.word	0x00019355
   192f4:	00019253 	.word	0x00019253
   192f8:	00019253 	.word	0x00019253
   192fc:	00019355 	.word	0x00019355
   19300:	2304      	movs	r3, #4
   19302:	6023      	str	r3, [r4, #0]
   19304:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
   19308:	6033      	str	r3, [r6, #0]
   1930a:	e7b7      	b.n	1927c <nrf_getsockopt+0x74>
   1930c:	2304      	movs	r3, #4
   1930e:	6023      	str	r3, [r4, #0]
   19310:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
   19314:	e7f8      	b.n	19308 <nrf_getsockopt+0x100>
   19316:	2304      	movs	r3, #4
   19318:	6023      	str	r3, [r4, #0]
   1931a:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
   1931e:	e7f3      	b.n	19308 <nrf_getsockopt+0x100>
   19320:	f890 2047 	ldrb.w	r2, [r0, #71]	; 0x47
   19324:	6823      	ldr	r3, [r4, #0]
   19326:	0092      	lsls	r2, r2, #2
   19328:	429a      	cmp	r2, r3
   1932a:	bf28      	it	cs
   1932c:	461a      	movcs	r2, r3
   1932e:	f100 0148 	add.w	r1, r0, #72	; 0x48
   19332:	6022      	str	r2, [r4, #0]
   19334:	e7ab      	b.n	1928e <nrf_getsockopt+0x86>
   19336:	6c05      	ldr	r5, [r0, #64]	; 0x40
   19338:	4628      	mov	r0, r5
   1933a:	f7ef fe00 	bl	8f3e <strlen>
   1933e:	6823      	ldr	r3, [r4, #0]
   19340:	1c42      	adds	r2, r0, #1
   19342:	429a      	cmp	r2, r3
   19344:	bf28      	it	cs
   19346:	461a      	movcs	r2, r3
   19348:	4629      	mov	r1, r5
   1934a:	6022      	str	r2, [r4, #0]
   1934c:	e79f      	b.n	1928e <nrf_getsockopt+0x86>
   1934e:	2f37      	cmp	r7, #55	; 0x37
   19350:	f47f af7f 	bne.w	19252 <nrf_getsockopt+0x4a>
   19354:	6820      	ldr	r0, [r4, #0]
   19356:	f007 f822 	bl	2039e <rpc_client_msg_alloc>
   1935a:	4605      	mov	r5, r0
   1935c:	b928      	cbnz	r0, 1936a <nrf_getsockopt+0x162>
   1935e:	2069      	movs	r0, #105	; 0x69
   19360:	e75d      	b.n	1921e <nrf_getsockopt+0x16>
   19362:	2f1f      	cmp	r7, #31
   19364:	e7f4      	b.n	19350 <nrf_getsockopt+0x148>
   19366:	2f20      	cmp	r7, #32
   19368:	e7f2      	b.n	19350 <nrf_getsockopt+0x148>
   1936a:	2300      	movs	r3, #0
   1936c:	2208      	movs	r2, #8
   1936e:	7243      	strb	r3, [r0, #9]
   19370:	7202      	strb	r2, [r0, #8]
   19372:	7283      	strb	r3, [r0, #10]
   19374:	72c3      	strb	r3, [r0, #11]
   19376:	f8c0 9010 	str.w	r9, [r0, #16]
   1937a:	4640      	mov	r0, r8
   1937c:	f007 fde2 	bl	20f44 <nrf_sol_to_rpc_sol>
   19380:	6168      	str	r0, [r5, #20]
   19382:	4638      	mov	r0, r7
   19384:	f000 f8e2 	bl	1954c <nrf_so_to_rpc_so>
   19388:	4629      	mov	r1, r5
   1938a:	61a8      	str	r0, [r5, #24]
   1938c:	f247 0004 	movw	r0, #28676	; 0x7004
   19390:	f8d5 8000 	ldr.w	r8, [r5]
   19394:	f007 fe0d 	bl	20fb2 <req_forward>
   19398:	4607      	mov	r7, r0
   1939a:	b120      	cbz	r0, 193a6 <nrf_getsockopt+0x19e>
   1939c:	4640      	mov	r0, r8
   1939e:	f007 f82d 	bl	203fc <rpc_client_msg_data_tx_free>
   193a2:	4638      	mov	r0, r7
   193a4:	e73b      	b.n	1921e <nrf_getsockopt+0x16>
   193a6:	686a      	ldr	r2, [r5, #4]
   193a8:	6823      	ldr	r3, [r4, #0]
   193aa:	4641      	mov	r1, r8
   193ac:	429a      	cmp	r2, r3
   193ae:	bf28      	it	cs
   193b0:	461a      	movcs	r2, r3
   193b2:	4630      	mov	r0, r6
   193b4:	6022      	str	r2, [r4, #0]
   193b6:	f008 fc5f 	bl	21c78 <memcpy>
   193ba:	4640      	mov	r0, r8
   193bc:	f007 f81e 	bl	203fc <rpc_client_msg_data_tx_free>
   193c0:	e75c      	b.n	1927c <nrf_getsockopt+0x74>
   193c2:	bf00      	nop

000193c4 <rpc_ip_init>:
   193c4:	b508      	push	{r3, lr}
   193c6:	f7ff f923 	bl	18610 <sock_init>
   193ca:	f7ff f9eb 	bl	187a4 <addrinfo_init>
   193ce:	2200      	movs	r2, #0
   193d0:	4b05      	ldr	r3, [pc, #20]	; (193e8 <rpc_ip_init+0x24>)
   193d2:	4806      	ldr	r0, [pc, #24]	; (193ec <rpc_ip_init+0x28>)
   193d4:	701a      	strb	r2, [r3, #0]
   193d6:	2201      	movs	r2, #1
   193d8:	4611      	mov	r1, r2
   193da:	f7f7 ffeb 	bl	113b4 <nrf_modem_os_sem_init>
   193de:	2800      	cmp	r0, #0
   193e0:	bf18      	it	ne
   193e2:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   193e6:	bd08      	pop	{r3, pc}
   193e8:	200110c7 	.word	0x200110c7
   193ec:	2000e2b8 	.word	0x2000e2b8

000193f0 <on_tls_attach_res>:
   193f0:	b510      	push	{r4, lr}
   193f2:	6943      	ldr	r3, [r0, #20]
   193f4:	460c      	mov	r4, r1
   193f6:	b15b      	cbz	r3, 19410 <on_tls_attach_res+0x20>
   193f8:	7f0b      	ldrb	r3, [r1, #28]
   193fa:	f36f 1304 	bfc	r3, #4, #1
   193fe:	770b      	strb	r3, [r1, #28]
   19400:	6940      	ldr	r0, [r0, #20]
   19402:	f000 f8af 	bl	19564 <rpc_error_to_nrf_errno>
   19406:	4b03      	ldr	r3, [pc, #12]	; (19414 <on_tls_attach_res+0x24>)
   19408:	61a0      	str	r0, [r4, #24]
   1940a:	6818      	ldr	r0, [r3, #0]
   1940c:	f006 f958 	bl	1f6c0 <nrf_modem_os_sem_give>
   19410:	2000      	movs	r0, #0
   19412:	bd10      	pop	{r4, pc}
   19414:	2000e2b8 	.word	0x2000e2b8

00019418 <on_tls_handshake_ntf>:
   19418:	b510      	push	{r4, lr}
   1941a:	7f0b      	ldrb	r3, [r1, #28]
   1941c:	460c      	mov	r4, r1
   1941e:	f36f 1304 	bfc	r3, #4, #1
   19422:	770b      	strb	r3, [r1, #28]
   19424:	6900      	ldr	r0, [r0, #16]
   19426:	b958      	cbnz	r0, 19440 <on_tls_handshake_ntf+0x28>
   19428:	b2db      	uxtb	r3, r3
   1942a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1942e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   19432:	770b      	strb	r3, [r1, #28]
   19434:	4b04      	ldr	r3, [pc, #16]	; (19448 <on_tls_handshake_ntf+0x30>)
   19436:	6818      	ldr	r0, [r3, #0]
   19438:	f006 f942 	bl	1f6c0 <nrf_modem_os_sem_give>
   1943c:	2000      	movs	r0, #0
   1943e:	bd10      	pop	{r4, pc}
   19440:	f000 f890 	bl	19564 <rpc_error_to_nrf_errno>
   19444:	61a0      	str	r0, [r4, #24]
   19446:	e7f5      	b.n	19434 <on_tls_handshake_ntf+0x1c>
   19448:	2000e2b8 	.word	0x2000e2b8

0001944c <tls_attach>:
   1944c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19450:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 19538 <tls_attach+0xec>
   19454:	4605      	mov	r5, r0
   19456:	f8d8 0000 	ldr.w	r0, [r8]
   1945a:	9101      	str	r1, [sp, #4]
   1945c:	f006 f932 	bl	1f6c4 <nrf_modem_os_sem_take>
   19460:	4607      	mov	r7, r0
   19462:	b150      	cbz	r0, 1947a <tls_attach+0x2e>
   19464:	9b01      	ldr	r3, [sp, #4]
   19466:	2b00      	cmp	r3, #0
   19468:	d163      	bne.n	19532 <tls_attach+0xe6>
   1946a:	2310      	movs	r3, #16
   1946c:	61ab      	str	r3, [r5, #24]
   1946e:	f04f 37ff 	mov.w	r7, #4294967295
   19472:	4638      	mov	r0, r7
   19474:	b002      	add	sp, #8
   19476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1947a:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1947c:	b1a8      	cbz	r0, 194aa <tls_attach+0x5e>
   1947e:	f7ef fd5e 	bl	8f3e <strlen>
   19482:	1c46      	adds	r6, r0, #1
   19484:	4630      	mov	r0, r6
   19486:	f006 ff8a 	bl	2039e <rpc_client_msg_alloc>
   1948a:	4604      	mov	r4, r0
   1948c:	b978      	cbnz	r0, 194ae <tls_attach+0x62>
   1948e:	4628      	mov	r0, r5
   19490:	f007 f859 	bl	20546 <sock_is_nonblock>
   19494:	b108      	cbz	r0, 1949a <tls_attach+0x4e>
   19496:	2369      	movs	r3, #105	; 0x69
   19498:	61ab      	str	r3, [r5, #24]
   1949a:	f8d8 0000 	ldr.w	r0, [r8]
   1949e:	f006 f90f 	bl	1f6c0 <nrf_modem_os_sem_give>
   194a2:	2069      	movs	r0, #105	; 0x69
   194a4:	f006 f904 	bl	1f6b0 <nrf_modem_os_errno_set>
   194a8:	e7e1      	b.n	1946e <tls_attach+0x22>
   194aa:	463e      	mov	r6, r7
   194ac:	e7ea      	b.n	19484 <tls_attach+0x38>
   194ae:	682b      	ldr	r3, [r5, #0]
   194b0:	2204      	movs	r2, #4
   194b2:	6103      	str	r3, [r0, #16]
   194b4:	2300      	movs	r3, #0
   194b6:	7202      	strb	r2, [r0, #8]
   194b8:	7243      	strb	r3, [r0, #9]
   194ba:	7283      	strb	r3, [r0, #10]
   194bc:	72c3      	strb	r3, [r0, #11]
   194be:	f895 2047 	ldrb.w	r2, [r5, #71]	; 0x47
   194c2:	f105 0144 	add.w	r1, r5, #68	; 0x44
   194c6:	3201      	adds	r2, #1
   194c8:	0092      	lsls	r2, r2, #2
   194ca:	6082      	str	r2, [r0, #8]
   194cc:	3014      	adds	r0, #20
   194ce:	f008 fbd3 	bl	21c78 <memcpy>
   194d2:	b1e6      	cbz	r6, 1950e <tls_attach+0xc2>
   194d4:	4632      	mov	r2, r6
   194d6:	6c29      	ldr	r1, [r5, #64]	; 0x40
   194d8:	6820      	ldr	r0, [r4, #0]
   194da:	f008 fd7b 	bl	21fd4 <strncpy>
   194de:	6066      	str	r6, [r4, #4]
   194e0:	7f2b      	ldrb	r3, [r5, #28]
   194e2:	2004      	movs	r0, #4
   194e4:	f043 0310 	orr.w	r3, r3, #16
   194e8:	4622      	mov	r2, r4
   194ea:	f247 0181 	movw	r1, #28801	; 0x7081
   194ee:	772b      	strb	r3, [r5, #28]
   194f0:	f006 ff71 	bl	203d6 <rpc_client_msg_send>
   194f4:	4628      	mov	r0, r5
   194f6:	f007 f826 	bl	20546 <sock_is_nonblock>
   194fa:	2800      	cmp	r0, #0
   194fc:	d1b9      	bne.n	19472 <tls_attach+0x26>
   194fe:	4628      	mov	r0, r5
   19500:	f007 f81d 	bl	2053e <sock_is_attaching>
   19504:	b940      	cbnz	r0, 19518 <tls_attach+0xcc>
   19506:	69a8      	ldr	r0, [r5, #24]
   19508:	2800      	cmp	r0, #0
   1950a:	d0b2      	beq.n	19472 <tls_attach+0x26>
   1950c:	e7ca      	b.n	194a4 <tls_attach+0x58>
   1950e:	7026      	strb	r6, [r4, #0]
   19510:	7066      	strb	r6, [r4, #1]
   19512:	70a6      	strb	r6, [r4, #2]
   19514:	70e6      	strb	r6, [r4, #3]
   19516:	e7e2      	b.n	194de <tls_attach+0x92>
   19518:	2002      	movs	r0, #2
   1951a:	a901      	add	r1, sp, #4
   1951c:	f7f7 fe88 	bl	11230 <nrf_modem_os_timedwait>
   19520:	f110 0f0b 	cmn.w	r0, #11
   19524:	d005      	beq.n	19532 <tls_attach+0xe6>
   19526:	2800      	cmp	r0, #0
   19528:	d0e9      	beq.n	194fe <tls_attach+0xb2>
   1952a:	2800      	cmp	r0, #0
   1952c:	bfb8      	it	lt
   1952e:	4240      	neglt	r0, r0
   19530:	e7b8      	b.n	194a4 <tls_attach+0x58>
   19532:	2074      	movs	r0, #116	; 0x74
   19534:	e7b6      	b.n	194a4 <tls_attach+0x58>
   19536:	bf00      	nop
   19538:	2000e2b8 	.word	0x2000e2b8

0001953c <nrf_af_to_rpc_af>:
   1953c:	2803      	cmp	r0, #3
   1953e:	bf9c      	itt	ls
   19540:	4b01      	ldrls	r3, [pc, #4]	; (19548 <nrf_af_to_rpc_af+0xc>)
   19542:	5618      	ldrsbls	r0, [r3, r0]
   19544:	4770      	bx	lr
   19546:	bf00      	nop
   19548:	000279c3 	.word	0x000279c3

0001954c <nrf_so_to_rpc_so>:
   1954c:	3802      	subs	r0, #2
   1954e:	2835      	cmp	r0, #53	; 0x35
   19550:	bf9a      	itte	ls
   19552:	4b03      	ldrls	r3, [pc, #12]	; (19560 <nrf_so_to_rpc_so+0x14>)
   19554:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   19558:	f04f 30ff 	movhi.w	r0, #4294967295
   1955c:	4770      	bx	lr
   1955e:	bf00      	nop
   19560:	00023860 	.word	0x00023860

00019564 <rpc_error_to_nrf_errno>:
   19564:	2870      	cmp	r0, #112	; 0x70
   19566:	bf9a      	itte	ls
   19568:	4b02      	ldrls	r3, [pc, #8]	; (19574 <rpc_error_to_nrf_errno+0x10>)
   1956a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   1956e:	4802      	ldrhi	r0, [pc, #8]	; (19578 <rpc_error_to_nrf_errno+0x14>)
   19570:	4770      	bx	lr
   19572:	bf00      	nop
   19574:	0002369c 	.word	0x0002369c
   19578:	baadbaad 	.word	0xbaadbaad

0001957c <send_message>:
   1957c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1957e:	4605      	mov	r5, r0
   19580:	460e      	mov	r6, r1
   19582:	4614      	mov	r4, r2
   19584:	f000 fcf0 	bl	19f68 <nrf_modem_state_is_initialized>
   19588:	2800      	cmp	r0, #0
   1958a:	d05b      	beq.n	19644 <send_message+0xc8>
   1958c:	2300      	movs	r3, #0
   1958e:	4f2f      	ldr	r7, [pc, #188]	; (1964c <send_message+0xd0>)
   19590:	4632      	mov	r2, r6
   19592:	4629      	mov	r1, r5
   19594:	2007      	movs	r0, #7
   19596:	607b      	str	r3, [r7, #4]
   19598:	f006 ff1d 	bl	203d6 <rpc_client_msg_send>
   1959c:	f04f 33ff 	mov.w	r3, #4294967295
   195a0:	9301      	str	r3, [sp, #4]
   195a2:	2002      	movs	r0, #2
   195a4:	a901      	add	r1, sp, #4
   195a6:	f7f7 fe43 	bl	11230 <nrf_modem_os_timedwait>
   195aa:	687d      	ldr	r5, [r7, #4]
   195ac:	4606      	mov	r6, r0
   195ae:	b92d      	cbnz	r5, 195bc <send_message+0x40>
   195b0:	f110 0f6e 	cmn.w	r0, #110	; 0x6e
   195b4:	d1f5      	bne.n	195a2 <send_message+0x26>
   195b6:	4630      	mov	r0, r6
   195b8:	b003      	add	sp, #12
   195ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   195bc:	f110 0f6e 	cmn.w	r0, #110	; 0x6e
   195c0:	d0f9      	beq.n	195b6 <send_message+0x3a>
   195c2:	686b      	ldr	r3, [r5, #4]
   195c4:	2b02      	cmp	r3, #2
   195c6:	d034      	beq.n	19632 <send_message+0xb6>
   195c8:	f647 72ff 	movw	r2, #32767	; 0x7fff
   195cc:	4293      	cmp	r3, r2
   195ce:	d033      	beq.n	19638 <send_message+0xbc>
   195d0:	bbab      	cbnz	r3, 1963e <send_message+0xc2>
   195d2:	b344      	cbz	r4, 19626 <send_message+0xaa>
   195d4:	f242 0309 	movw	r3, #8201	; 0x2009
   195d8:	883a      	ldrh	r2, [r7, #0]
   195da:	429a      	cmp	r2, r3
   195dc:	d123      	bne.n	19626 <send_message+0xaa>
   195de:	4620      	mov	r0, r4
   195e0:	892b      	ldrh	r3, [r5, #8]
   195e2:	2280      	movs	r2, #128	; 0x80
   195e4:	f840 3b04 	str.w	r3, [r0], #4
   195e8:	f105 010a 	add.w	r1, r5, #10
   195ec:	f008 fb44 	bl	21c78 <memcpy>
   195f0:	2280      	movs	r2, #128	; 0x80
   195f2:	f105 018a 	add.w	r1, r5, #138	; 0x8a
   195f6:	f104 0084 	add.w	r0, r4, #132	; 0x84
   195fa:	f008 fb3d 	bl	21c78 <memcpy>
   195fe:	f8d5 310a 	ldr.w	r3, [r5, #266]	; 0x10a
   19602:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   19606:	f8d5 310e 	ldr.w	r3, [r5, #270]	; 0x10e
   1960a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   1960e:	f8d5 3112 	ldr.w	r3, [r5, #274]	; 0x112
   19612:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   19616:	f8d5 3116 	ldr.w	r3, [r5, #278]	; 0x116
   1961a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1961e:	f8d5 311a 	ldr.w	r3, [r5, #282]	; 0x11a
   19622:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   19626:	6878      	ldr	r0, [r7, #4]
   19628:	2800      	cmp	r0, #0
   1962a:	d0c4      	beq.n	195b6 <send_message+0x3a>
   1962c:	f006 fee0 	bl	203f0 <rpc_client_msg_data_rx_free>
   19630:	e7c1      	b.n	195b6 <send_message+0x3a>
   19632:	f06f 060c 	mvn.w	r6, #12
   19636:	e7f6      	b.n	19626 <send_message+0xaa>
   19638:	f06f 065e 	mvn.w	r6, #94	; 0x5e
   1963c:	e7f3      	b.n	19626 <send_message+0xaa>
   1963e:	f06f 0615 	mvn.w	r6, #21
   19642:	e7f0      	b.n	19626 <send_message+0xaa>
   19644:	f04f 36ff 	mov.w	r6, #4294967295
   19648:	e7b5      	b.n	195b6 <send_message+0x3a>
   1964a:	bf00      	nop
   1964c:	2000e2cc 	.word	0x2000e2cc

00019650 <nrf_modem_gnss_read>:
   19650:	b570      	push	{r4, r5, r6, lr}
   19652:	4604      	mov	r4, r0
   19654:	2800      	cmp	r0, #0
   19656:	f000 815c 	beq.w	19912 <nrf_modem_gnss_read+0x2c2>
   1965a:	2a02      	cmp	r2, #2
   1965c:	f000 813d 	beq.w	198da <nrf_modem_gnss_read+0x28a>
   19660:	2a03      	cmp	r2, #3
   19662:	f000 8147 	beq.w	198f4 <nrf_modem_gnss_read+0x2a4>
   19666:	2a01      	cmp	r2, #1
   19668:	f040 8153 	bne.w	19912 <nrf_modem_gnss_read+0x2c2>
   1966c:	29e7      	cmp	r1, #231	; 0xe7
   1966e:	f240 8153 	bls.w	19918 <nrf_modem_gnss_read+0x2c8>
   19672:	4dac      	ldr	r5, [pc, #688]	; (19924 <nrf_modem_gnss_read+0x2d4>)
   19674:	682b      	ldr	r3, [r5, #0]
   19676:	2b00      	cmp	r3, #0
   19678:	f000 8151 	beq.w	1991e <nrf_modem_gnss_read+0x2ce>
   1967c:	f7fe fad8 	bl	17c30 <rpc_transport_data_rx_suspend>
   19680:	22e8      	movs	r2, #232	; 0xe8
   19682:	2100      	movs	r1, #0
   19684:	4620      	mov	r0, r4
   19686:	f008 fb1e 	bl	21cc6 <memset>
   1968a:	4ba7      	ldr	r3, [pc, #668]	; (19928 <nrf_modem_gnss_read+0x2d8>)
   1968c:	781b      	ldrb	r3, [r3, #0]
   1968e:	2b01      	cmp	r3, #1
   19690:	d072      	beq.n	19778 <nrf_modem_gnss_read+0x128>
   19692:	2b02      	cmp	r3, #2
   19694:	682b      	ldr	r3, [r5, #0]
   19696:	6858      	ldr	r0, [r3, #4]
   19698:	6899      	ldr	r1, [r3, #8]
   1969a:	e9c4 0100 	strd	r0, r1, [r4]
   1969e:	68d8      	ldr	r0, [r3, #12]
   196a0:	6919      	ldr	r1, [r3, #16]
   196a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
   196a6:	695a      	ldr	r2, [r3, #20]
   196a8:	6122      	str	r2, [r4, #16]
   196aa:	699a      	ldr	r2, [r3, #24]
   196ac:	6162      	str	r2, [r4, #20]
   196ae:	69da      	ldr	r2, [r3, #28]
   196b0:	f040 80c3 	bne.w	1983a <nrf_modem_gnss_read+0x1ea>
   196b4:	61a2      	str	r2, [r4, #24]
   196b6:	6a1a      	ldr	r2, [r3, #32]
   196b8:	4619      	mov	r1, r3
   196ba:	61e2      	str	r2, [r4, #28]
   196bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   196be:	260a      	movs	r6, #10
   196c0:	6222      	str	r2, [r4, #32]
   196c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   196c4:	6262      	str	r2, [r4, #36]	; 0x24
   196c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   196c8:	62a2      	str	r2, [r4, #40]	; 0x28
   196ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   196cc:	62e2      	str	r2, [r4, #44]	; 0x2c
   196ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   196d0:	6322      	str	r2, [r4, #48]	; 0x30
   196d2:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
   196d6:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
   196da:	f8d3 2041 	ldr.w	r2, [r3, #65]	; 0x41
   196de:	6422      	str	r2, [r4, #64]	; 0x40
   196e0:	f8d3 2045 	ldr.w	r2, [r3, #69]	; 0x45
   196e4:	6462      	str	r2, [r4, #68]	; 0x44
   196e6:	f8d3 2049 	ldr.w	r2, [r3, #73]	; 0x49
   196ea:	64a2      	str	r2, [r4, #72]	; 0x48
   196ec:	f8d3 204d 	ldr.w	r2, [r3, #77]	; 0x4d
   196f0:	64e2      	str	r2, [r4, #76]	; 0x4c
   196f2:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   196f4:	86a2      	strh	r2, [r4, #52]	; 0x34
   196f6:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   196fa:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
   196fe:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
   19702:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
   19706:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
   1970a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
   1970e:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
   19712:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
   19716:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
   1971a:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
   1971e:	f8b3 203f 	ldrh.w	r2, [r3, #63]	; 0x3f
   19722:	87a2      	strh	r2, [r4, #60]	; 0x3c
   19724:	f8d3 20ca 	ldr.w	r2, [r3, #202]	; 0xca
   19728:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
   1972c:	2200      	movs	r2, #0
   1972e:	fb06 3002 	mla	r0, r6, r2, r3
   19732:	f8b0 5052 	ldrh.w	r5, [r0, #82]	; 0x52
   19736:	3201      	adds	r2, #1
   19738:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
   1973c:	f891 5054 	ldrb.w	r5, [r1, #84]	; 0x54
   19740:	2a0c      	cmp	r2, #12
   19742:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
   19746:	f8b0 5055 	ldrh.w	r5, [r0, #85]	; 0x55
   1974a:	f104 040c 	add.w	r4, r4, #12
   1974e:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
   19752:	f9b0 5057 	ldrsh.w	r5, [r0, #87]	; 0x57
   19756:	f101 010a 	add.w	r1, r1, #10
   1975a:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
   1975e:	f9b0 0059 	ldrsh.w	r0, [r0, #89]	; 0x59
   19762:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
   19766:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
   1976a:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
   1976e:	d1de      	bne.n	1972e <nrf_modem_gnss_read+0xde>
   19770:	f7fe fa64 	bl	17c3c <rpc_transport_data_rx_resume>
   19774:	2000      	movs	r0, #0
   19776:	bd70      	pop	{r4, r5, r6, pc}
   19778:	682b      	ldr	r3, [r5, #0]
   1977a:	260a      	movs	r6, #10
   1977c:	6858      	ldr	r0, [r3, #4]
   1977e:	6899      	ldr	r1, [r3, #8]
   19780:	e9c4 0100 	strd	r0, r1, [r4]
   19784:	6919      	ldr	r1, [r3, #16]
   19786:	68d8      	ldr	r0, [r3, #12]
   19788:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1978c:	695a      	ldr	r2, [r3, #20]
   1978e:	4619      	mov	r1, r3
   19790:	6122      	str	r2, [r4, #16]
   19792:	699a      	ldr	r2, [r3, #24]
   19794:	6162      	str	r2, [r4, #20]
   19796:	69da      	ldr	r2, [r3, #28]
   19798:	61e2      	str	r2, [r4, #28]
   1979a:	6a1a      	ldr	r2, [r3, #32]
   1979c:	6222      	str	r2, [r4, #32]
   1979e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   197a0:	62e2      	str	r2, [r4, #44]	; 0x2c
   197a2:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
   197a6:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
   197aa:	f8d3 2031 	ldr.w	r2, [r3, #49]	; 0x31
   197ae:	6422      	str	r2, [r4, #64]	; 0x40
   197b0:	f8d3 2035 	ldr.w	r2, [r3, #53]	; 0x35
   197b4:	6462      	str	r2, [r4, #68]	; 0x44
   197b6:	f8d3 2039 	ldr.w	r2, [r3, #57]	; 0x39
   197ba:	64a2      	str	r2, [r4, #72]	; 0x48
   197bc:	f8d3 203d 	ldr.w	r2, [r3, #61]	; 0x3d
   197c0:	64e2      	str	r2, [r4, #76]	; 0x4c
   197c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   197c4:	86a2      	strh	r2, [r4, #52]	; 0x34
   197c6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   197ca:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
   197ce:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
   197d2:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
   197d6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   197da:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
   197de:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
   197e2:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
   197e6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   197ea:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
   197ee:	f8b3 202f 	ldrh.w	r2, [r3, #47]	; 0x2f
   197f2:	87a2      	strh	r2, [r4, #60]	; 0x3c
   197f4:	2200      	movs	r2, #0
   197f6:	fb06 3002 	mla	r0, r6, r2, r3
   197fa:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
   197fe:	3201      	adds	r2, #1
   19800:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
   19804:	f891 5044 	ldrb.w	r5, [r1, #68]	; 0x44
   19808:	2a0c      	cmp	r2, #12
   1980a:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
   1980e:	f8b0 5045 	ldrh.w	r5, [r0, #69]	; 0x45
   19812:	f104 040c 	add.w	r4, r4, #12
   19816:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
   1981a:	f9b0 5047 	ldrsh.w	r5, [r0, #71]	; 0x47
   1981e:	f101 010a 	add.w	r1, r1, #10
   19822:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
   19826:	f9b0 0049 	ldrsh.w	r0, [r0, #73]	; 0x49
   1982a:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
   1982e:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
   19832:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
   19836:	d1de      	bne.n	197f6 <nrf_modem_gnss_read+0x1a6>
   19838:	e79a      	b.n	19770 <nrf_modem_gnss_read+0x120>
   1983a:	61e2      	str	r2, [r4, #28]
   1983c:	6a1a      	ldr	r2, [r3, #32]
   1983e:	4619      	mov	r1, r3
   19840:	62e2      	str	r2, [r4, #44]	; 0x2c
   19842:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
   19846:	260a      	movs	r6, #10
   19848:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
   1984c:	f8d3 202d 	ldr.w	r2, [r3, #45]	; 0x2d
   19850:	6422      	str	r2, [r4, #64]	; 0x40
   19852:	f8d3 2031 	ldr.w	r2, [r3, #49]	; 0x31
   19856:	6462      	str	r2, [r4, #68]	; 0x44
   19858:	f8d3 2035 	ldr.w	r2, [r3, #53]	; 0x35
   1985c:	64a2      	str	r2, [r4, #72]	; 0x48
   1985e:	f8d3 2039 	ldr.w	r2, [r3, #57]	; 0x39
   19862:	64e2      	str	r2, [r4, #76]	; 0x4c
   19864:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   19866:	86a2      	strh	r2, [r4, #52]	; 0x34
   19868:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   1986c:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
   19870:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   19874:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
   19878:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   1987c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
   19880:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   19884:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
   19888:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   1988c:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
   19890:	f8b3 202b 	ldrh.w	r2, [r3, #43]	; 0x2b
   19894:	87a2      	strh	r2, [r4, #60]	; 0x3c
   19896:	2200      	movs	r2, #0
   19898:	fb06 3002 	mla	r0, r6, r2, r3
   1989c:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
   1989e:	3201      	adds	r2, #1
   198a0:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
   198a4:	f891 5040 	ldrb.w	r5, [r1, #64]	; 0x40
   198a8:	2a0c      	cmp	r2, #12
   198aa:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
   198ae:	f8b0 5041 	ldrh.w	r5, [r0, #65]	; 0x41
   198b2:	f104 040c 	add.w	r4, r4, #12
   198b6:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
   198ba:	f9b0 5043 	ldrsh.w	r5, [r0, #67]	; 0x43
   198be:	f101 010a 	add.w	r1, r1, #10
   198c2:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
   198c6:	f9b0 0045 	ldrsh.w	r0, [r0, #69]	; 0x45
   198ca:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
   198ce:	f891 003d 	ldrb.w	r0, [r1, #61]	; 0x3d
   198d2:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
   198d6:	d1df      	bne.n	19898 <nrf_modem_gnss_read+0x248>
   198d8:	e74a      	b.n	19770 <nrf_modem_gnss_read+0x120>
   198da:	2952      	cmp	r1, #82	; 0x52
   198dc:	d91c      	bls.n	19918 <nrf_modem_gnss_read+0x2c8>
   198de:	4d13      	ldr	r5, [pc, #76]	; (1992c <nrf_modem_gnss_read+0x2dc>)
   198e0:	682b      	ldr	r3, [r5, #0]
   198e2:	b1e3      	cbz	r3, 1991e <nrf_modem_gnss_read+0x2ce>
   198e4:	f7fe f9a4 	bl	17c30 <rpc_transport_data_rx_suspend>
   198e8:	2253      	movs	r2, #83	; 0x53
   198ea:	4620      	mov	r0, r4
   198ec:	6829      	ldr	r1, [r5, #0]
   198ee:	f008 f9c3 	bl	21c78 <memcpy>
   198f2:	e73d      	b.n	19770 <nrf_modem_gnss_read+0x120>
   198f4:	290b      	cmp	r1, #11
   198f6:	d90f      	bls.n	19918 <nrf_modem_gnss_read+0x2c8>
   198f8:	4d0d      	ldr	r5, [pc, #52]	; (19930 <nrf_modem_gnss_read+0x2e0>)
   198fa:	682b      	ldr	r3, [r5, #0]
   198fc:	b17b      	cbz	r3, 1991e <nrf_modem_gnss_read+0x2ce>
   198fe:	f7fe f997 	bl	17c30 <rpc_transport_data_rx_suspend>
   19902:	682b      	ldr	r3, [r5, #0]
   19904:	681a      	ldr	r2, [r3, #0]
   19906:	6022      	str	r2, [r4, #0]
   19908:	685a      	ldr	r2, [r3, #4]
   1990a:	6062      	str	r2, [r4, #4]
   1990c:	891b      	ldrh	r3, [r3, #8]
   1990e:	60a3      	str	r3, [r4, #8]
   19910:	e72e      	b.n	19770 <nrf_modem_gnss_read+0x120>
   19912:	f06f 0015 	mvn.w	r0, #21
   19916:	e72e      	b.n	19776 <nrf_modem_gnss_read+0x126>
   19918:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1991c:	e72b      	b.n	19776 <nrf_modem_gnss_read+0x126>
   1991e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   19922:	e728      	b.n	19776 <nrf_modem_gnss_read+0x126>
   19924:	2000e2c8 	.word	0x2000e2c8
   19928:	200110c8 	.word	0x200110c8
   1992c:	2000e2c4 	.word	0x2000e2c4
   19930:	2000e2c0 	.word	0x2000e2c0

00019934 <nrf_modem_gnss_agps_write>:
   19934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19936:	4617      	mov	r7, r2
   19938:	4605      	mov	r5, r0
   1993a:	2800      	cmp	r0, #0
   1993c:	d059      	beq.n	199f2 <nrf_modem_gnss_agps_write+0xbe>
   1993e:	2900      	cmp	r1, #0
   19940:	d057      	beq.n	199f2 <nrf_modem_gnss_agps_write+0xbe>
   19942:	f000 fb11 	bl	19f68 <nrf_modem_state_is_initialized>
   19946:	2800      	cmp	r0, #0
   19948:	d056      	beq.n	199f8 <nrf_modem_gnss_agps_write+0xc4>
   1994a:	4e2d      	ldr	r6, [pc, #180]	; (19a00 <nrf_modem_gnss_agps_write+0xcc>)
   1994c:	f04f 31ff 	mov.w	r1, #4294967295
   19950:	6830      	ldr	r0, [r6, #0]
   19952:	f005 feb7 	bl	1f6c4 <nrf_modem_os_sem_take>
   19956:	4604      	mov	r4, r0
   19958:	2800      	cmp	r0, #0
   1995a:	d145      	bne.n	199e8 <nrf_modem_gnss_agps_write+0xb4>
   1995c:	2072      	movs	r0, #114	; 0x72
   1995e:	f007 fb5c 	bl	2101a <gnss_msg_alloc_and_set_common>
   19962:	4604      	mov	r4, r0
   19964:	2800      	cmp	r0, #0
   19966:	d041      	beq.n	199ec <nrf_modem_gnss_agps_write+0xb8>
   19968:	1e7a      	subs	r2, r7, #1
   1996a:	6801      	ldr	r1, [r0, #0]
   1996c:	2a07      	cmp	r2, #7
   1996e:	d834      	bhi.n	199da <nrf_modem_gnss_agps_write+0xa6>
   19970:	e8df f002 	tbb	[pc, r2]
   19974:	1a151004 	.word	0x1a151004
   19978:	2e29241f 	.word	0x2e29241f
   1997c:	4628      	mov	r0, r5
   1997e:	3104      	adds	r1, #4
   19980:	f007 fb66 	bl	21050 <rpc_gnss_serialize_utc>
   19984:	4621      	mov	r1, r4
   19986:	2200      	movs	r2, #0
   19988:	f241 0005 	movw	r0, #4101	; 0x1005
   1998c:	f7ff fdf6 	bl	1957c <send_message>
   19990:	4604      	mov	r4, r0
   19992:	e026      	b.n	199e2 <nrf_modem_gnss_agps_write+0xae>
   19994:	4628      	mov	r0, r5
   19996:	3104      	adds	r1, #4
   19998:	f007 fb7a 	bl	21090 <rpc_gnss_serialize_ephe>
   1999c:	e7f2      	b.n	19984 <nrf_modem_gnss_agps_write+0x50>
   1999e:	4628      	mov	r0, r5
   199a0:	3104      	adds	r1, #4
   199a2:	f007 fbc6 	bl	21132 <rpc_gnss_serialize_alm>
   199a6:	e7ed      	b.n	19984 <nrf_modem_gnss_agps_write+0x50>
   199a8:	4628      	mov	r0, r5
   199aa:	3104      	adds	r1, #4
   199ac:	f007 fbf2 	bl	21194 <rpc_gnss_serialize_klob>
   199b0:	e7e8      	b.n	19984 <nrf_modem_gnss_agps_write+0x50>
   199b2:	4628      	mov	r0, r5
   199b4:	3104      	adds	r1, #4
   199b6:	f007 fc10 	bl	211da <rpc_gnss_serialize_nequick>
   199ba:	e7e3      	b.n	19984 <nrf_modem_gnss_agps_write+0x50>
   199bc:	4628      	mov	r0, r5
   199be:	3104      	adds	r1, #4
   199c0:	f007 fc23 	bl	2120a <rpc_gnss_serialize_time_and_sv_tow>
   199c4:	e7de      	b.n	19984 <nrf_modem_gnss_agps_write+0x50>
   199c6:	4628      	mov	r0, r5
   199c8:	3104      	adds	r1, #4
   199ca:	f007 fc41 	bl	21250 <rpc_gnss_serialize_location>
   199ce:	e7d9      	b.n	19984 <nrf_modem_gnss_agps_write+0x50>
   199d0:	4628      	mov	r0, r5
   199d2:	3104      	adds	r1, #4
   199d4:	f007 fc5a 	bl	2128c <rpc_gnss_serialize_integrity>
   199d8:	e7d4      	b.n	19984 <nrf_modem_gnss_agps_write+0x50>
   199da:	f006 fd06 	bl	203ea <rpc_client_msg_tx_free>
   199de:	f06f 0415 	mvn.w	r4, #21
   199e2:	6830      	ldr	r0, [r6, #0]
   199e4:	f005 fe6c 	bl	1f6c0 <nrf_modem_os_sem_give>
   199e8:	4620      	mov	r0, r4
   199ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   199ec:	f06f 040b 	mvn.w	r4, #11
   199f0:	e7f7      	b.n	199e2 <nrf_modem_gnss_agps_write+0xae>
   199f2:	f06f 0415 	mvn.w	r4, #21
   199f6:	e7f7      	b.n	199e8 <nrf_modem_gnss_agps_write+0xb4>
   199f8:	f04f 34ff 	mov.w	r4, #4294967295
   199fc:	e7f4      	b.n	199e8 <nrf_modem_gnss_agps_write+0xb4>
   199fe:	bf00      	nop
   19a00:	2000e2d4 	.word	0x2000e2d4

00019a04 <nrf_modem_gnss_start>:
   19a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19a08:	f000 faae 	bl	19f68 <nrf_modem_state_is_initialized>
   19a0c:	2800      	cmp	r0, #0
   19a0e:	d063      	beq.n	19ad8 <nrf_modem_gnss_start+0xd4>
   19a10:	4d33      	ldr	r5, [pc, #204]	; (19ae0 <nrf_modem_gnss_start+0xdc>)
   19a12:	f04f 31ff 	mov.w	r1, #4294967295
   19a16:	6828      	ldr	r0, [r5, #0]
   19a18:	f005 fe54 	bl	1f6c4 <nrf_modem_os_sem_take>
   19a1c:	4604      	mov	r4, r0
   19a1e:	2800      	cmp	r0, #0
   19a20:	d149      	bne.n	19ab6 <nrf_modem_gnss_start+0xb2>
   19a22:	4e30      	ldr	r6, [pc, #192]	; (19ae4 <nrf_modem_gnss_start+0xe0>)
   19a24:	7833      	ldrb	r3, [r6, #0]
   19a26:	bb93      	cbnz	r3, 19a8e <nrf_modem_gnss_start+0x8a>
   19a28:	2702      	movs	r7, #2
   19a2a:	f04f 0905 	mov.w	r9, #5
   19a2e:	46b8      	mov	r8, r7
   19a30:	f000 fa9a 	bl	19f68 <nrf_modem_state_is_initialized>
   19a34:	2800      	cmp	r0, #0
   19a36:	d041      	beq.n	19abc <nrf_modem_gnss_start+0xb8>
   19a38:	2014      	movs	r0, #20
   19a3a:	f007 faee 	bl	2101a <gnss_msg_alloc_and_set_common>
   19a3e:	4601      	mov	r1, r0
   19a40:	2800      	cmp	r0, #0
   19a42:	d043      	beq.n	19acc <nrf_modem_gnss_start+0xc8>
   19a44:	6803      	ldr	r3, [r0, #0]
   19a46:	2200      	movs	r2, #0
   19a48:	f241 0004 	movw	r0, #4100	; 0x1004
   19a4c:	f883 9004 	strb.w	r9, [r3, #4]
   19a50:	f8c3 8005 	str.w	r8, [r3, #5]
   19a54:	f7ff fd92 	bl	1957c <send_message>
   19a58:	4604      	mov	r4, r0
   19a5a:	bb88      	cbnz	r0, 19ac0 <nrf_modem_gnss_start+0xbc>
   19a5c:	f000 fa84 	bl	19f68 <nrf_modem_state_is_initialized>
   19a60:	b1a8      	cbz	r0, 19a8e <nrf_modem_gnss_start+0x8a>
   19a62:	2014      	movs	r0, #20
   19a64:	f007 fad9 	bl	2101a <gnss_msg_alloc_and_set_common>
   19a68:	4601      	mov	r1, r0
   19a6a:	b180      	cbz	r0, 19a8e <nrf_modem_gnss_start+0x8a>
   19a6c:	6803      	ldr	r3, [r0, #0]
   19a6e:	2200      	movs	r2, #0
   19a70:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19a74:	2701      	movs	r7, #1
   19a76:	7118      	strb	r0, [r3, #4]
   19a78:	715a      	strb	r2, [r3, #5]
   19a7a:	f241 2003 	movw	r0, #4611	; 0x1203
   19a7e:	719a      	strb	r2, [r3, #6]
   19a80:	71da      	strb	r2, [r3, #7]
   19a82:	749f      	strb	r7, [r3, #18]
   19a84:	f7ff fd7a 	bl	1957c <send_message>
   19a88:	4320      	orrs	r0, r4
   19a8a:	bf08      	it	eq
   19a8c:	7037      	strbeq	r7, [r6, #0]
   19a8e:	2014      	movs	r0, #20
   19a90:	f007 fac3 	bl	2101a <gnss_msg_alloc_and_set_common>
   19a94:	4601      	mov	r1, r0
   19a96:	b1e0      	cbz	r0, 19ad2 <nrf_modem_gnss_start+0xce>
   19a98:	2601      	movs	r6, #1
   19a9a:	6803      	ldr	r3, [r0, #0]
   19a9c:	2200      	movs	r2, #0
   19a9e:	f241 0004 	movw	r0, #4100	; 0x1004
   19aa2:	711e      	strb	r6, [r3, #4]
   19aa4:	f7ff fd6a 	bl	1957c <send_message>
   19aa8:	4604      	mov	r4, r0
   19aaa:	b908      	cbnz	r0, 19ab0 <nrf_modem_gnss_start+0xac>
   19aac:	4b0e      	ldr	r3, [pc, #56]	; (19ae8 <nrf_modem_gnss_start+0xe4>)
   19aae:	701e      	strb	r6, [r3, #0]
   19ab0:	6828      	ldr	r0, [r5, #0]
   19ab2:	f005 fe05 	bl	1f6c0 <nrf_modem_os_sem_give>
   19ab6:	4620      	mov	r0, r4
   19ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19abc:	f04f 34ff 	mov.w	r4, #4294967295
   19ac0:	f04f 0801 	mov.w	r8, #1
   19ac4:	4547      	cmp	r7, r8
   19ac6:	d0c9      	beq.n	19a5c <nrf_modem_gnss_start+0x58>
   19ac8:	4647      	mov	r7, r8
   19aca:	e7b1      	b.n	19a30 <nrf_modem_gnss_start+0x2c>
   19acc:	f06f 040b 	mvn.w	r4, #11
   19ad0:	e7f6      	b.n	19ac0 <nrf_modem_gnss_start+0xbc>
   19ad2:	f06f 040b 	mvn.w	r4, #11
   19ad6:	e7eb      	b.n	19ab0 <nrf_modem_gnss_start+0xac>
   19ad8:	f04f 34ff 	mov.w	r4, #4294967295
   19adc:	e7eb      	b.n	19ab6 <nrf_modem_gnss_start+0xb2>
   19ade:	bf00      	nop
   19ae0:	2000e2d4 	.word	0x2000e2d4
   19ae4:	200110ca 	.word	0x200110ca
   19ae8:	200110cb 	.word	0x200110cb

00019aec <nrf_modem_gnss_use_case_set>:
   19aec:	b570      	push	{r4, r5, r6, lr}
   19aee:	4605      	mov	r5, r0
   19af0:	f000 fa3a 	bl	19f68 <nrf_modem_state_is_initialized>
   19af4:	b308      	cbz	r0, 19b3a <nrf_modem_gnss_use_case_set+0x4e>
   19af6:	4e12      	ldr	r6, [pc, #72]	; (19b40 <nrf_modem_gnss_use_case_set+0x54>)
   19af8:	f04f 31ff 	mov.w	r1, #4294967295
   19afc:	6830      	ldr	r0, [r6, #0]
   19afe:	f005 fde1 	bl	1f6c4 <nrf_modem_os_sem_take>
   19b02:	4604      	mov	r4, r0
   19b04:	b9a0      	cbnz	r0, 19b30 <nrf_modem_gnss_use_case_set+0x44>
   19b06:	2014      	movs	r0, #20
   19b08:	f007 fa87 	bl	2101a <gnss_msg_alloc_and_set_common>
   19b0c:	4601      	mov	r1, r0
   19b0e:	b188      	cbz	r0, 19b34 <nrf_modem_gnss_use_case_set+0x48>
   19b10:	2202      	movs	r2, #2
   19b12:	6803      	ldr	r3, [r0, #0]
   19b14:	f241 1003 	movw	r0, #4355	; 0x1103
   19b18:	711a      	strb	r2, [r3, #4]
   19b1a:	715c      	strb	r4, [r3, #5]
   19b1c:	4622      	mov	r2, r4
   19b1e:	719c      	strb	r4, [r3, #6]
   19b20:	71dc      	strb	r4, [r3, #7]
   19b22:	725d      	strb	r5, [r3, #9]
   19b24:	f7ff fd2a 	bl	1957c <send_message>
   19b28:	4604      	mov	r4, r0
   19b2a:	6830      	ldr	r0, [r6, #0]
   19b2c:	f005 fdc8 	bl	1f6c0 <nrf_modem_os_sem_give>
   19b30:	4620      	mov	r0, r4
   19b32:	bd70      	pop	{r4, r5, r6, pc}
   19b34:	f06f 040b 	mvn.w	r4, #11
   19b38:	e7f7      	b.n	19b2a <nrf_modem_gnss_use_case_set+0x3e>
   19b3a:	f04f 34ff 	mov.w	r4, #4294967295
   19b3e:	e7f7      	b.n	19b30 <nrf_modem_gnss_use_case_set+0x44>
   19b40:	2000e2d4 	.word	0x2000e2d4

00019b44 <nrf_modem_gnss_fix_interval_set>:
   19b44:	b570      	push	{r4, r5, r6, lr}
   19b46:	4605      	mov	r5, r0
   19b48:	f000 fa0e 	bl	19f68 <nrf_modem_state_is_initialized>
   19b4c:	b310      	cbz	r0, 19b94 <nrf_modem_gnss_fix_interval_set+0x50>
   19b4e:	4e13      	ldr	r6, [pc, #76]	; (19b9c <nrf_modem_gnss_fix_interval_set+0x58>)
   19b50:	f04f 31ff 	mov.w	r1, #4294967295
   19b54:	6830      	ldr	r0, [r6, #0]
   19b56:	f005 fdb5 	bl	1f6c4 <nrf_modem_os_sem_take>
   19b5a:	4604      	mov	r4, r0
   19b5c:	b9a8      	cbnz	r0, 19b8a <nrf_modem_gnss_fix_interval_set+0x46>
   19b5e:	2014      	movs	r0, #20
   19b60:	f007 fa5b 	bl	2101a <gnss_msg_alloc_and_set_common>
   19b64:	4601      	mov	r1, r0
   19b66:	b190      	cbz	r0, 19b8e <nrf_modem_gnss_fix_interval_set+0x4a>
   19b68:	2208      	movs	r2, #8
   19b6a:	6803      	ldr	r3, [r0, #0]
   19b6c:	f241 1003 	movw	r0, #4355	; 0x1103
   19b70:	711a      	strb	r2, [r3, #4]
   19b72:	715c      	strb	r4, [r3, #5]
   19b74:	4622      	mov	r2, r4
   19b76:	719c      	strb	r4, [r3, #6]
   19b78:	71dc      	strb	r4, [r3, #7]
   19b7a:	f8a3 500b 	strh.w	r5, [r3, #11]
   19b7e:	f7ff fcfd 	bl	1957c <send_message>
   19b82:	4604      	mov	r4, r0
   19b84:	6830      	ldr	r0, [r6, #0]
   19b86:	f005 fd9b 	bl	1f6c0 <nrf_modem_os_sem_give>
   19b8a:	4620      	mov	r0, r4
   19b8c:	bd70      	pop	{r4, r5, r6, pc}
   19b8e:	f06f 040b 	mvn.w	r4, #11
   19b92:	e7f7      	b.n	19b84 <nrf_modem_gnss_fix_interval_set+0x40>
   19b94:	f04f 34ff 	mov.w	r4, #4294967295
   19b98:	e7f7      	b.n	19b8a <nrf_modem_gnss_fix_interval_set+0x46>
   19b9a:	bf00      	nop
   19b9c:	2000e2d4 	.word	0x2000e2d4

00019ba0 <nrf_modem_gnss_fix_retry_set>:
   19ba0:	b570      	push	{r4, r5, r6, lr}
   19ba2:	4605      	mov	r5, r0
   19ba4:	f000 f9e0 	bl	19f68 <nrf_modem_state_is_initialized>
   19ba8:	b310      	cbz	r0, 19bf0 <nrf_modem_gnss_fix_retry_set+0x50>
   19baa:	4e13      	ldr	r6, [pc, #76]	; (19bf8 <nrf_modem_gnss_fix_retry_set+0x58>)
   19bac:	f04f 31ff 	mov.w	r1, #4294967295
   19bb0:	6830      	ldr	r0, [r6, #0]
   19bb2:	f005 fd87 	bl	1f6c4 <nrf_modem_os_sem_take>
   19bb6:	4604      	mov	r4, r0
   19bb8:	b9a8      	cbnz	r0, 19be6 <nrf_modem_gnss_fix_retry_set+0x46>
   19bba:	2014      	movs	r0, #20
   19bbc:	f007 fa2d 	bl	2101a <gnss_msg_alloc_and_set_common>
   19bc0:	4601      	mov	r1, r0
   19bc2:	b190      	cbz	r0, 19bea <nrf_modem_gnss_fix_retry_set+0x4a>
   19bc4:	2210      	movs	r2, #16
   19bc6:	6803      	ldr	r3, [r0, #0]
   19bc8:	f241 1003 	movw	r0, #4355	; 0x1103
   19bcc:	711a      	strb	r2, [r3, #4]
   19bce:	715c      	strb	r4, [r3, #5]
   19bd0:	4622      	mov	r2, r4
   19bd2:	719c      	strb	r4, [r3, #6]
   19bd4:	71dc      	strb	r4, [r3, #7]
   19bd6:	f8a3 500d 	strh.w	r5, [r3, #13]
   19bda:	f7ff fccf 	bl	1957c <send_message>
   19bde:	4604      	mov	r4, r0
   19be0:	6830      	ldr	r0, [r6, #0]
   19be2:	f005 fd6d 	bl	1f6c0 <nrf_modem_os_sem_give>
   19be6:	4620      	mov	r0, r4
   19be8:	bd70      	pop	{r4, r5, r6, pc}
   19bea:	f06f 040b 	mvn.w	r4, #11
   19bee:	e7f7      	b.n	19be0 <nrf_modem_gnss_fix_retry_set+0x40>
   19bf0:	f04f 34ff 	mov.w	r4, #4294967295
   19bf4:	e7f7      	b.n	19be6 <nrf_modem_gnss_fix_retry_set+0x46>
   19bf6:	bf00      	nop
   19bf8:	2000e2d4 	.word	0x2000e2d4

00019bfc <nrf_modem_gnss_nmea_mask_set>:
   19bfc:	b570      	push	{r4, r5, r6, lr}
   19bfe:	4605      	mov	r5, r0
   19c00:	f000 f9b2 	bl	19f68 <nrf_modem_state_is_initialized>
   19c04:	b310      	cbz	r0, 19c4c <nrf_modem_gnss_nmea_mask_set+0x50>
   19c06:	4e13      	ldr	r6, [pc, #76]	; (19c54 <nrf_modem_gnss_nmea_mask_set+0x58>)
   19c08:	f04f 31ff 	mov.w	r1, #4294967295
   19c0c:	6830      	ldr	r0, [r6, #0]
   19c0e:	f005 fd59 	bl	1f6c4 <nrf_modem_os_sem_take>
   19c12:	4604      	mov	r4, r0
   19c14:	b9a8      	cbnz	r0, 19c42 <nrf_modem_gnss_nmea_mask_set+0x46>
   19c16:	2014      	movs	r0, #20
   19c18:	f007 f9ff 	bl	2101a <gnss_msg_alloc_and_set_common>
   19c1c:	4601      	mov	r1, r0
   19c1e:	b190      	cbz	r0, 19c46 <nrf_modem_gnss_nmea_mask_set+0x4a>
   19c20:	2220      	movs	r2, #32
   19c22:	6803      	ldr	r3, [r0, #0]
   19c24:	f241 1003 	movw	r0, #4355	; 0x1103
   19c28:	711a      	strb	r2, [r3, #4]
   19c2a:	715c      	strb	r4, [r3, #5]
   19c2c:	4622      	mov	r2, r4
   19c2e:	719c      	strb	r4, [r3, #6]
   19c30:	71dc      	strb	r4, [r3, #7]
   19c32:	f8a3 500f 	strh.w	r5, [r3, #15]
   19c36:	f7ff fca1 	bl	1957c <send_message>
   19c3a:	4604      	mov	r4, r0
   19c3c:	6830      	ldr	r0, [r6, #0]
   19c3e:	f005 fd3f 	bl	1f6c0 <nrf_modem_os_sem_give>
   19c42:	4620      	mov	r0, r4
   19c44:	bd70      	pop	{r4, r5, r6, pc}
   19c46:	f06f 040b 	mvn.w	r4, #11
   19c4a:	e7f7      	b.n	19c3c <nrf_modem_gnss_nmea_mask_set+0x40>
   19c4c:	f04f 34ff 	mov.w	r4, #4294967295
   19c50:	e7f7      	b.n	19c42 <nrf_modem_gnss_nmea_mask_set+0x46>
   19c52:	bf00      	nop
   19c54:	2000e2d4 	.word	0x2000e2d4

00019c58 <nrf_modem_gnss_power_mode_set>:
   19c58:	b570      	push	{r4, r5, r6, lr}
   19c5a:	4605      	mov	r5, r0
   19c5c:	f000 f984 	bl	19f68 <nrf_modem_state_is_initialized>
   19c60:	b308      	cbz	r0, 19ca6 <nrf_modem_gnss_power_mode_set+0x4e>
   19c62:	4e12      	ldr	r6, [pc, #72]	; (19cac <nrf_modem_gnss_power_mode_set+0x54>)
   19c64:	f04f 31ff 	mov.w	r1, #4294967295
   19c68:	6830      	ldr	r0, [r6, #0]
   19c6a:	f005 fd2b 	bl	1f6c4 <nrf_modem_os_sem_take>
   19c6e:	4604      	mov	r4, r0
   19c70:	b9a0      	cbnz	r0, 19c9c <nrf_modem_gnss_power_mode_set+0x44>
   19c72:	2014      	movs	r0, #20
   19c74:	f007 f9d1 	bl	2101a <gnss_msg_alloc_and_set_common>
   19c78:	4601      	mov	r1, r0
   19c7a:	b188      	cbz	r0, 19ca0 <nrf_modem_gnss_power_mode_set+0x48>
   19c7c:	2240      	movs	r2, #64	; 0x40
   19c7e:	6803      	ldr	r3, [r0, #0]
   19c80:	f241 1003 	movw	r0, #4355	; 0x1103
   19c84:	711a      	strb	r2, [r3, #4]
   19c86:	715c      	strb	r4, [r3, #5]
   19c88:	4622      	mov	r2, r4
   19c8a:	719c      	strb	r4, [r3, #6]
   19c8c:	71dc      	strb	r4, [r3, #7]
   19c8e:	745d      	strb	r5, [r3, #17]
   19c90:	f7ff fc74 	bl	1957c <send_message>
   19c94:	4604      	mov	r4, r0
   19c96:	6830      	ldr	r0, [r6, #0]
   19c98:	f005 fd12 	bl	1f6c0 <nrf_modem_os_sem_give>
   19c9c:	4620      	mov	r0, r4
   19c9e:	bd70      	pop	{r4, r5, r6, pc}
   19ca0:	f06f 040b 	mvn.w	r4, #11
   19ca4:	e7f7      	b.n	19c96 <nrf_modem_gnss_power_mode_set+0x3e>
   19ca6:	f04f 34ff 	mov.w	r4, #4294967295
   19caa:	e7f7      	b.n	19c9c <nrf_modem_gnss_power_mode_set+0x44>
   19cac:	2000e2d4 	.word	0x2000e2d4

00019cb0 <nrf_modem_gnss_event_handler_set>:
   19cb0:	4b01      	ldr	r3, [pc, #4]	; (19cb8 <nrf_modem_gnss_event_handler_set+0x8>)
   19cb2:	6018      	str	r0, [r3, #0]
   19cb4:	2000      	movs	r0, #0
   19cb6:	4770      	bx	lr
   19cb8:	2000e2bc 	.word	0x2000e2bc

00019cbc <rpc_gnss_event_handler>:
   19cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19cbe:	6804      	ldr	r4, [r0, #0]
   19cc0:	4606      	mov	r6, r0
   19cc2:	b13c      	cbz	r4, 19cd4 <rpc_gnss_event_handler+0x18>
   19cc4:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   19cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   19ccc:	d104      	bne.n	19cd8 <rpc_gnss_event_handler+0x1c>
   19cce:	4b41      	ldr	r3, [pc, #260]	; (19dd4 <rpc_gnss_event_handler+0x118>)
   19cd0:	e9c3 1400 	strd	r1, r4, [r3]
   19cd4:	2000      	movs	r0, #0
   19cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19cd8:	4d3f      	ldr	r5, [pc, #252]	; (19dd8 <rpc_gnss_event_handler+0x11c>)
   19cda:	682b      	ldr	r3, [r5, #0]
   19cdc:	2b00      	cmp	r3, #0
   19cde:	d06f      	beq.n	19dc0 <rpc_gnss_event_handler+0x104>
   19ce0:	f244 0204 	movw	r2, #16388	; 0x4004
   19ce4:	4291      	cmp	r1, r2
   19ce6:	d80b      	bhi.n	19d00 <rpc_gnss_event_handler+0x44>
   19ce8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   19cec:	d968      	bls.n	19dc0 <rpc_gnss_event_handler+0x104>
   19cee:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
   19cf2:	3902      	subs	r1, #2
   19cf4:	2902      	cmp	r1, #2
   19cf6:	d82a      	bhi.n	19d4e <rpc_gnss_event_handler+0x92>
   19cf8:	e8df f001 	tbb	[pc, r1]
   19cfc:	5047      	.short	0x5047
   19cfe:	59          	.byte	0x59
   19cff:	00          	.byte	0x00
   19d00:	f244 1301 	movw	r3, #16641	; 0x4101
   19d04:	4299      	cmp	r1, r3
   19d06:	d02e      	beq.n	19d66 <rpc_gnss_event_handler+0xaa>
   19d08:	f244 2301 	movw	r3, #16897	; 0x4201
   19d0c:	4299      	cmp	r1, r3
   19d0e:	d157      	bne.n	19dc0 <rpc_gnss_event_handler+0x104>
   19d10:	4e32      	ldr	r6, [pc, #200]	; (19ddc <rpc_gnss_event_handler+0x120>)
   19d12:	6830      	ldr	r0, [r6, #0]
   19d14:	b108      	cbz	r0, 19d1a <rpc_gnss_event_handler+0x5e>
   19d16:	f006 fb6b 	bl	203f0 <rpc_client_msg_data_rx_free>
   19d1a:	2202      	movs	r2, #2
   19d1c:	4b30      	ldr	r3, [pc, #192]	; (19de0 <rpc_gnss_event_handler+0x124>)
   19d1e:	6034      	str	r4, [r6, #0]
   19d20:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   19d24:	701a      	strb	r2, [r3, #0]
   19d26:	4e2f      	ldr	r6, [pc, #188]	; (19de4 <rpc_gnss_event_handler+0x128>)
   19d28:	f014 0708 	ands.w	r7, r4, #8
   19d2c:	682b      	ldr	r3, [r5, #0]
   19d2e:	7832      	ldrb	r2, [r6, #0]
   19d30:	d025      	beq.n	19d7e <rpc_gnss_event_handler+0xc2>
   19d32:	b91a      	cbnz	r2, 19d3c <rpc_gnss_event_handler+0x80>
   19d34:	2005      	movs	r0, #5
   19d36:	4798      	blx	r3
   19d38:	2301      	movs	r3, #1
   19d3a:	7033      	strb	r3, [r6, #0]
   19d3c:	07e3      	lsls	r3, r4, #31
   19d3e:	d502      	bpl.n	19d46 <rpc_gnss_event_handler+0x8a>
   19d40:	2002      	movs	r0, #2
   19d42:	682b      	ldr	r3, [r5, #0]
   19d44:	4798      	blx	r3
   19d46:	2001      	movs	r0, #1
   19d48:	682b      	ldr	r3, [r5, #0]
   19d4a:	4798      	blx	r3
   19d4c:	e7c2      	b.n	19cd4 <rpc_gnss_event_handler+0x18>
   19d4e:	4e23      	ldr	r6, [pc, #140]	; (19ddc <rpc_gnss_event_handler+0x120>)
   19d50:	6830      	ldr	r0, [r6, #0]
   19d52:	b108      	cbz	r0, 19d58 <rpc_gnss_event_handler+0x9c>
   19d54:	f006 fb4c 	bl	203f0 <rpc_client_msg_data_rx_free>
   19d58:	2200      	movs	r2, #0
   19d5a:	4b21      	ldr	r3, [pc, #132]	; (19de0 <rpc_gnss_event_handler+0x124>)
   19d5c:	6034      	str	r4, [r6, #0]
   19d5e:	701a      	strb	r2, [r3, #0]
   19d60:	f894 403d 	ldrb.w	r4, [r4, #61]	; 0x3d
   19d64:	e7df      	b.n	19d26 <rpc_gnss_event_handler+0x6a>
   19d66:	4e1d      	ldr	r6, [pc, #116]	; (19ddc <rpc_gnss_event_handler+0x120>)
   19d68:	6830      	ldr	r0, [r6, #0]
   19d6a:	b108      	cbz	r0, 19d70 <rpc_gnss_event_handler+0xb4>
   19d6c:	f006 fb40 	bl	203f0 <rpc_client_msg_data_rx_free>
   19d70:	2201      	movs	r2, #1
   19d72:	4b1b      	ldr	r3, [pc, #108]	; (19de0 <rpc_gnss_event_handler+0x124>)
   19d74:	6034      	str	r4, [r6, #0]
   19d76:	701a      	strb	r2, [r3, #0]
   19d78:	f894 4041 	ldrb.w	r4, [r4, #65]	; 0x41
   19d7c:	e7d3      	b.n	19d26 <rpc_gnss_event_handler+0x6a>
   19d7e:	2a00      	cmp	r2, #0
   19d80:	d0dc      	beq.n	19d3c <rpc_gnss_event_handler+0x80>
   19d82:	2006      	movs	r0, #6
   19d84:	4798      	blx	r3
   19d86:	7037      	strb	r7, [r6, #0]
   19d88:	e7d8      	b.n	19d3c <rpc_gnss_event_handler+0x80>
   19d8a:	4e17      	ldr	r6, [pc, #92]	; (19de8 <rpc_gnss_event_handler+0x12c>)
   19d8c:	6830      	ldr	r0, [r6, #0]
   19d8e:	b108      	cbz	r0, 19d94 <rpc_gnss_event_handler+0xd8>
   19d90:	f006 fb2e 	bl	203f0 <rpc_client_msg_data_rx_free>
   19d94:	2003      	movs	r0, #3
   19d96:	682b      	ldr	r3, [r5, #0]
   19d98:	6034      	str	r4, [r6, #0]
   19d9a:	e7d6      	b.n	19d4a <rpc_gnss_event_handler+0x8e>
   19d9c:	4e13      	ldr	r6, [pc, #76]	; (19dec <rpc_gnss_event_handler+0x130>)
   19d9e:	6830      	ldr	r0, [r6, #0]
   19da0:	b108      	cbz	r0, 19da6 <rpc_gnss_event_handler+0xea>
   19da2:	f006 fb25 	bl	203f0 <rpc_client_msg_data_rx_free>
   19da6:	2004      	movs	r0, #4
   19da8:	682b      	ldr	r3, [r5, #0]
   19daa:	6034      	str	r4, [r6, #0]
   19dac:	e7cd      	b.n	19d4a <rpc_gnss_event_handler+0x8e>
   19dae:	7822      	ldrb	r2, [r4, #0]
   19db0:	2a03      	cmp	r2, #3
   19db2:	d805      	bhi.n	19dc0 <rpc_gnss_event_handler+0x104>
   19db4:	e8df f002 	tbb	[pc, r2]
   19db8:	0c0a0802 	.word	0x0c0a0802
   19dbc:	2007      	movs	r0, #7
   19dbe:	4798      	blx	r3
   19dc0:	6830      	ldr	r0, [r6, #0]
   19dc2:	f006 fb15 	bl	203f0 <rpc_client_msg_data_rx_free>
   19dc6:	e785      	b.n	19cd4 <rpc_gnss_event_handler+0x18>
   19dc8:	2008      	movs	r0, #8
   19dca:	e7f8      	b.n	19dbe <rpc_gnss_event_handler+0x102>
   19dcc:	2009      	movs	r0, #9
   19dce:	e7f6      	b.n	19dbe <rpc_gnss_event_handler+0x102>
   19dd0:	200a      	movs	r0, #10
   19dd2:	e7f4      	b.n	19dbe <rpc_gnss_event_handler+0x102>
   19dd4:	2000e2cc 	.word	0x2000e2cc
   19dd8:	2000e2bc 	.word	0x2000e2bc
   19ddc:	2000e2c8 	.word	0x2000e2c8
   19de0:	200110c8 	.word	0x200110c8
   19de4:	200110c9 	.word	0x200110c9
   19de8:	2000e2c4 	.word	0x2000e2c4
   19dec:	2000e2c0 	.word	0x2000e2c0

00019df0 <rpc_gnss_init>:
   19df0:	b508      	push	{r3, lr}
   19df2:	2300      	movs	r3, #0
   19df4:	4a09      	ldr	r2, [pc, #36]	; (19e1c <rpc_gnss_init+0x2c>)
   19df6:	480a      	ldr	r0, [pc, #40]	; (19e20 <rpc_gnss_init+0x30>)
   19df8:	7013      	strb	r3, [r2, #0]
   19dfa:	4a0a      	ldr	r2, [pc, #40]	; (19e24 <rpc_gnss_init+0x34>)
   19dfc:	7013      	strb	r3, [r2, #0]
   19dfe:	4a0a      	ldr	r2, [pc, #40]	; (19e28 <rpc_gnss_init+0x38>)
   19e00:	7013      	strb	r3, [r2, #0]
   19e02:	4a0a      	ldr	r2, [pc, #40]	; (19e2c <rpc_gnss_init+0x3c>)
   19e04:	7013      	strb	r3, [r2, #0]
   19e06:	4a0a      	ldr	r2, [pc, #40]	; (19e30 <rpc_gnss_init+0x40>)
   19e08:	6013      	str	r3, [r2, #0]
   19e0a:	2201      	movs	r2, #1
   19e0c:	4611      	mov	r1, r2
   19e0e:	f7f7 fad1 	bl	113b4 <nrf_modem_os_sem_init>
   19e12:	2800      	cmp	r0, #0
   19e14:	bf18      	it	ne
   19e16:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   19e1a:	bd08      	pop	{r3, pc}
   19e1c:	200110c9 	.word	0x200110c9
   19e20:	2000e2d4 	.word	0x2000e2d4
   19e24:	200110cb 	.word	0x200110cb
   19e28:	200110ca 	.word	0x200110ca
   19e2c:	200110c8 	.word	0x200110c8
   19e30:	2000e2bc 	.word	0x2000e2bc

00019e34 <rpc_gnss_deinit>:
   19e34:	b510      	push	{r4, lr}
   19e36:	4c0b      	ldr	r4, [pc, #44]	; (19e64 <rpc_gnss_deinit+0x30>)
   19e38:	6820      	ldr	r0, [r4, #0]
   19e3a:	b118      	cbz	r0, 19e44 <rpc_gnss_deinit+0x10>
   19e3c:	f006 fad8 	bl	203f0 <rpc_client_msg_data_rx_free>
   19e40:	2300      	movs	r3, #0
   19e42:	6023      	str	r3, [r4, #0]
   19e44:	4c08      	ldr	r4, [pc, #32]	; (19e68 <rpc_gnss_deinit+0x34>)
   19e46:	6820      	ldr	r0, [r4, #0]
   19e48:	b118      	cbz	r0, 19e52 <rpc_gnss_deinit+0x1e>
   19e4a:	f006 fad1 	bl	203f0 <rpc_client_msg_data_rx_free>
   19e4e:	2300      	movs	r3, #0
   19e50:	6023      	str	r3, [r4, #0]
   19e52:	4c06      	ldr	r4, [pc, #24]	; (19e6c <rpc_gnss_deinit+0x38>)
   19e54:	6820      	ldr	r0, [r4, #0]
   19e56:	b118      	cbz	r0, 19e60 <rpc_gnss_deinit+0x2c>
   19e58:	f006 faca 	bl	203f0 <rpc_client_msg_data_rx_free>
   19e5c:	2300      	movs	r3, #0
   19e5e:	6023      	str	r3, [r4, #0]
   19e60:	2000      	movs	r0, #0
   19e62:	bd10      	pop	{r4, pc}
   19e64:	2000e2c8 	.word	0x2000e2c8
   19e68:	2000e2c4 	.word	0x2000e2c4
   19e6c:	2000e2c0 	.word	0x2000e2c0

00019e70 <modem_off>:
   19e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19e72:	2501      	movs	r5, #1
   19e74:	4c07      	ldr	r4, [pc, #28]	; (19e94 <modem_off+0x24>)
   19e76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   19e7a:	6165      	str	r5, [r4, #20]
   19e7c:	f005 fc16 	bl	1f6ac <nrf_modem_os_busywait>
   19e80:	2300      	movs	r3, #0
   19e82:	6163      	str	r3, [r4, #20]
   19e84:	9301      	str	r3, [sp, #4]
   19e86:	6125      	str	r5, [r4, #16]
   19e88:	6923      	ldr	r3, [r4, #16]
   19e8a:	9301      	str	r3, [sp, #4]
   19e8c:	9b01      	ldr	r3, [sp, #4]
   19e8e:	b003      	add	sp, #12
   19e90:	bd30      	pop	{r4, r5, pc}
   19e92:	bf00      	nop
   19e94:	40005600 	.word	0x40005600

00019e98 <atomic_set.constprop.0.isra.0>:
   19e98:	4b03      	ldr	r3, [pc, #12]	; (19ea8 <atomic_set.constprop.0.isra.0+0x10>)
   19e9a:	e8d3 2fef 	ldaex	r2, [r3]
   19e9e:	e8c3 0fe1 	stlex	r1, r0, [r3]
   19ea2:	2900      	cmp	r1, #0
   19ea4:	d1f9      	bne.n	19e9a <atomic_set.constprop.0.isra.0+0x2>
   19ea6:	4770      	bx	lr
   19ea8:	2000e2d8 	.word	0x2000e2d8

00019eac <nrf_modem_init>:
   19eac:	b570      	push	{r4, r5, r6, lr}
   19eae:	4604      	mov	r4, r0
   19eb0:	b086      	sub	sp, #24
   19eb2:	b390      	cbz	r0, 19f1a <nrf_modem_init+0x6e>
   19eb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   19eb6:	b3ab      	cbz	r3, 19f24 <nrf_modem_init+0x78>
   19eb8:	2201      	movs	r2, #1
   19eba:	4b1d      	ldr	r3, [pc, #116]	; (19f30 <nrf_modem_init+0x84>)
   19ebc:	e8d3 1fef 	ldaex	r1, [r3]
   19ec0:	2900      	cmp	r1, #0
   19ec2:	d103      	bne.n	19ecc <nrf_modem_init+0x20>
   19ec4:	e8c3 2fe0 	stlex	r0, r2, [r3]
   19ec8:	2800      	cmp	r0, #0
   19eca:	d1f7      	bne.n	19ebc <nrf_modem_init+0x10>
   19ecc:	d12d      	bne.n	19f2a <nrf_modem_init+0x7e>
   19ece:	6a60      	ldr	r0, [r4, #36]	; 0x24
   19ed0:	f000 f832 	bl	19f38 <nrf_modem_fault_handler_set>
   19ed4:	f7f7 fac2 	bl	1145c <nrf_modem_os_init>
   19ed8:	6a23      	ldr	r3, [r4, #32]
   19eda:	ad02      	add	r5, sp, #8
   19edc:	f88d 3004 	strb.w	r3, [sp, #4]
   19ee0:	4b14      	ldr	r3, [pc, #80]	; (19f34 <nrf_modem_init+0x88>)
   19ee2:	9400      	str	r4, [sp, #0]
   19ee4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   19ee6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   19eea:	4668      	mov	r0, sp
   19eec:	f006 fa16 	bl	2031c <rpc_init>
   19ef0:	4604      	mov	r4, r0
   19ef2:	b950      	cbnz	r0, 19f0a <nrf_modem_init+0x5e>
   19ef4:	4606      	mov	r6, r0
   19ef6:	f855 3b04 	ldr.w	r3, [r5], #4
   19efa:	4798      	blx	r3
   19efc:	4604      	mov	r4, r0
   19efe:	b920      	cbnz	r0, 19f0a <nrf_modem_init+0x5e>
   19f00:	3601      	adds	r6, #1
   19f02:	2e04      	cmp	r6, #4
   19f04:	d1f7      	bne.n	19ef6 <nrf_modem_init+0x4a>
   19f06:	2002      	movs	r0, #2
   19f08:	e004      	b.n	19f14 <nrf_modem_init+0x68>
   19f0a:	f7ff ffb1 	bl	19e70 <modem_off>
   19f0e:	f7f7 fabd 	bl	1148c <nrf_modem_os_shutdown>
   19f12:	2000      	movs	r0, #0
   19f14:	f7ff ffc0 	bl	19e98 <atomic_set.constprop.0.isra.0>
   19f18:	e001      	b.n	19f1e <nrf_modem_init+0x72>
   19f1a:	f06f 040d 	mvn.w	r4, #13
   19f1e:	4620      	mov	r0, r4
   19f20:	b006      	add	sp, #24
   19f22:	bd70      	pop	{r4, r5, r6, pc}
   19f24:	f06f 0415 	mvn.w	r4, #21
   19f28:	e7f9      	b.n	19f1e <nrf_modem_init+0x72>
   19f2a:	f04f 34ff 	mov.w	r4, #4294967295
   19f2e:	e7f6      	b.n	19f1e <nrf_modem_init+0x72>
   19f30:	2000e2d8 	.word	0x2000e2d8
   19f34:	00023098 	.word	0x00023098

00019f38 <nrf_modem_fault_handler_set>:
   19f38:	4b01      	ldr	r3, [pc, #4]	; (19f40 <nrf_modem_fault_handler_set+0x8>)
   19f3a:	6018      	str	r0, [r3, #0]
   19f3c:	4770      	bx	lr
   19f3e:	bf00      	nop
   19f40:	2000e2dc 	.word	0x2000e2dc

00019f44 <nrf_modem_fault_handler_internal>:
   19f44:	b507      	push	{r0, r1, r2, lr}
   19f46:	4b04      	ldr	r3, [pc, #16]	; (19f58 <nrf_modem_fault_handler_internal+0x14>)
   19f48:	e9cd 0100 	strd	r0, r1, [sp]
   19f4c:	681b      	ldr	r3, [r3, #0]
   19f4e:	4668      	mov	r0, sp
   19f50:	4798      	blx	r3
   19f52:	b003      	add	sp, #12
   19f54:	f85d fb04 	ldr.w	pc, [sp], #4
   19f58:	2000e2dc 	.word	0x2000e2dc

00019f5c <nrf_modem_state_set>:
   19f5c:	4b01      	ldr	r3, [pc, #4]	; (19f64 <nrf_modem_state_set+0x8>)
   19f5e:	7018      	strb	r0, [r3, #0]
   19f60:	4770      	bx	lr
   19f62:	bf00      	nop
   19f64:	200110cc 	.word	0x200110cc

00019f68 <nrf_modem_state_is_initialized>:
   19f68:	4b02      	ldr	r3, [pc, #8]	; (19f74 <nrf_modem_state_is_initialized+0xc>)
   19f6a:	7818      	ldrb	r0, [r3, #0]
   19f6c:	1e43      	subs	r3, r0, #1
   19f6e:	4258      	negs	r0, r3
   19f70:	4158      	adcs	r0, r3
   19f72:	4770      	bx	lr
   19f74:	200110cc 	.word	0x200110cc

00019f78 <ipc_trace_init>:
   19f78:	2100      	movs	r1, #0
   19f7a:	4b07      	ldr	r3, [pc, #28]	; (19f98 <ipc_trace_init+0x20>)
   19f7c:	2201      	movs	r2, #1
   19f7e:	7019      	strb	r1, [r3, #0]
   19f80:	4b06      	ldr	r3, [pc, #24]	; (19f9c <ipc_trace_init+0x24>)
   19f82:	7019      	strb	r1, [r3, #0]
   19f84:	4b06      	ldr	r3, [pc, #24]	; (19fa0 <ipc_trace_init+0x28>)
   19f86:	6019      	str	r1, [r3, #0]
   19f88:	4b06      	ldr	r3, [pc, #24]	; (19fa4 <ipc_trace_init+0x2c>)
   19f8a:	6019      	str	r1, [r3, #0]
   19f8c:	4b06      	ldr	r3, [pc, #24]	; (19fa8 <ipc_trace_init+0x30>)
   19f8e:	6018      	str	r0, [r3, #0]
   19f90:	4806      	ldr	r0, [pc, #24]	; (19fac <ipc_trace_init+0x34>)
   19f92:	f7f7 ba0f 	b.w	113b4 <nrf_modem_os_sem_init>
   19f96:	bf00      	nop
   19f98:	200110cd 	.word	0x200110cd
   19f9c:	200110ce 	.word	0x200110ce
   19fa0:	2000e2e4 	.word	0x2000e2e4
   19fa4:	2000e2e8 	.word	0x2000e2e8
   19fa8:	2000e2f8 	.word	0x2000e2f8
   19fac:	2000e2e0 	.word	0x2000e2e0

00019fb0 <ipc_trace_handler>:
   19fb0:	b470      	push	{r4, r5, r6}
   19fb2:	4b2d      	ldr	r3, [pc, #180]	; (1a068 <ipc_trace_handler+0xb8>)
   19fb4:	681b      	ldr	r3, [r3, #0]
   19fb6:	6919      	ldr	r1, [r3, #16]
   19fb8:	6958      	ldr	r0, [r3, #20]
   19fba:	7c1a      	ldrb	r2, [r3, #16]
   19fbc:	2200      	movs	r2, #0
   19fbe:	741a      	strb	r2, [r3, #16]
   19fc0:	7c5c      	ldrb	r4, [r3, #17]
   19fc2:	745a      	strb	r2, [r3, #17]
   19fc4:	7c9c      	ldrb	r4, [r3, #18]
   19fc6:	749a      	strb	r2, [r3, #18]
   19fc8:	7cdc      	ldrb	r4, [r3, #19]
   19fca:	74da      	strb	r2, [r3, #19]
   19fcc:	7d1c      	ldrb	r4, [r3, #20]
   19fce:	751a      	strb	r2, [r3, #20]
   19fd0:	7d5c      	ldrb	r4, [r3, #21]
   19fd2:	755a      	strb	r2, [r3, #21]
   19fd4:	7d9c      	ldrb	r4, [r3, #22]
   19fd6:	2903      	cmp	r1, #3
   19fd8:	759a      	strb	r2, [r3, #22]
   19fda:	7ddc      	ldrb	r4, [r3, #23]
   19fdc:	75da      	strb	r2, [r3, #23]
   19fde:	d029      	beq.n	1a034 <ipc_trace_handler+0x84>
   19fe0:	2904      	cmp	r1, #4
   19fe2:	d033      	beq.n	1a04c <ipc_trace_handler+0x9c>
   19fe4:	2901      	cmp	r1, #1
   19fe6:	d12f      	bne.n	1a048 <ipc_trace_handler+0x98>
   19fe8:	6885      	ldr	r5, [r0, #8]
   19fea:	4e20      	ldr	r6, [pc, #128]	; (1a06c <ipc_trace_handler+0xbc>)
   19fec:	4295      	cmp	r5, r2
   19fee:	d110      	bne.n	1a012 <ipc_trace_handler+0x62>
   19ff0:	2101      	movs	r1, #1
   19ff2:	7a1a      	ldrb	r2, [r3, #8]
   19ff4:	2200      	movs	r2, #0
   19ff6:	7219      	strb	r1, [r3, #8]
   19ff8:	7a59      	ldrb	r1, [r3, #9]
   19ffa:	725a      	strb	r2, [r3, #9]
   19ffc:	7a99      	ldrb	r1, [r3, #10]
   19ffe:	729a      	strb	r2, [r3, #10]
   1a000:	7ada      	ldrb	r2, [r3, #11]
   1a002:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   1a006:	72da      	strb	r2, [r3, #11]
   1a008:	4b19      	ldr	r3, [pc, #100]	; (1a070 <ipc_trace_handler+0xc0>)
   1a00a:	bc70      	pop	{r4, r5, r6}
   1a00c:	6818      	ldr	r0, [r3, #0]
   1a00e:	f005 bb57 	b.w	1f6c0 <nrf_modem_os_sem_give>
   1a012:	1c91      	adds	r1, r2, #2
   1a014:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1a018:	684c      	ldr	r4, [r1, #4]
   1a01a:	7821      	ldrb	r1, [r4, #0]
   1a01c:	2962      	cmp	r1, #98	; 0x62
   1a01e:	d007      	beq.n	1a030 <ipc_trace_handler+0x80>
   1a020:	3963      	subs	r1, #99	; 0x63
   1a022:	bf18      	it	ne
   1a024:	2101      	movne	r1, #1
   1a026:	0049      	lsls	r1, r1, #1
   1a028:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
   1a02c:	3201      	adds	r2, #1
   1a02e:	e7dd      	b.n	19fec <ipc_trace_handler+0x3c>
   1a030:	2101      	movs	r1, #1
   1a032:	e7f9      	b.n	1a028 <ipc_trace_handler+0x78>
   1a034:	7a18      	ldrb	r0, [r3, #8]
   1a036:	7219      	strb	r1, [r3, #8]
   1a038:	7a59      	ldrb	r1, [r3, #9]
   1a03a:	725a      	strb	r2, [r3, #9]
   1a03c:	7a99      	ldrb	r1, [r3, #10]
   1a03e:	729a      	strb	r2, [r3, #10]
   1a040:	7ada      	ldrb	r2, [r3, #11]
   1a042:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   1a046:	72da      	strb	r2, [r3, #11]
   1a048:	bc70      	pop	{r4, r5, r6}
   1a04a:	4770      	bx	lr
   1a04c:	7a18      	ldrb	r0, [r3, #8]
   1a04e:	7219      	strb	r1, [r3, #8]
   1a050:	7a59      	ldrb	r1, [r3, #9]
   1a052:	725a      	strb	r2, [r3, #9]
   1a054:	7a99      	ldrb	r1, [r3, #10]
   1a056:	729a      	strb	r2, [r3, #10]
   1a058:	7ada      	ldrb	r2, [r3, #11]
   1a05a:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   1a05e:	72da      	strb	r2, [r3, #11]
   1a060:	2201      	movs	r2, #1
   1a062:	4b04      	ldr	r3, [pc, #16]	; (1a074 <ipc_trace_handler+0xc4>)
   1a064:	701a      	strb	r2, [r3, #0]
   1a066:	e7ef      	b.n	1a048 <ipc_trace_handler+0x98>
   1a068:	2000e2f8 	.word	0x2000e2f8
   1a06c:	2000e2ec 	.word	0x2000e2ec
   1a070:	2000e2e0 	.word	0x2000e2e0
   1a074:	200110ce 	.word	0x200110ce

0001a078 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1a078:	4b01      	ldr	r3, [pc, #4]	; (1a080 <z_impl_z_errno+0x8>)
   1a07a:	6898      	ldr	r0, [r3, #8]
}
   1a07c:	3064      	adds	r0, #100	; 0x64
   1a07e:	4770      	bx	lr
   1a080:	2000e2fc 	.word	0x2000e2fc

0001a084 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1a084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a088:	4606      	mov	r6, r0
   1a08a:	b086      	sub	sp, #24
   1a08c:	460f      	mov	r7, r1
	__asm__ volatile(
   1a08e:	f04f 0320 	mov.w	r3, #32
   1a092:	f3ef 8811 	mrs	r8, BASEPRI
   1a096:	f383 8812 	msr	BASEPRI_MAX, r3
   1a09a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1a09e:	f000 ffcf 	bl	1b040 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1a0a2:	2400      	movs	r4, #0
   1a0a4:	2e04      	cmp	r6, #4
   1a0a6:	bf96      	itet	ls
   1a0a8:	4b21      	ldrls	r3, [pc, #132]	; (1a130 <z_fatal_error+0xac>)
   1a0aa:	4b22      	ldrhi	r3, [pc, #136]	; (1a134 <z_fatal_error+0xb0>)
   1a0ac:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
   1a0b0:	4605      	mov	r5, r0
   1a0b2:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1a0b6:	4b20      	ldr	r3, [pc, #128]	; (1a138 <z_fatal_error+0xb4>)
   1a0b8:	2201      	movs	r2, #1
   1a0ba:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1a0be:	4620      	mov	r0, r4
   1a0c0:	4623      	mov	r3, r4
   1a0c2:	491e      	ldr	r1, [pc, #120]	; (1a13c <z_fatal_error+0xb8>)
   1a0c4:	9603      	str	r6, [sp, #12]
   1a0c6:	9400      	str	r4, [sp, #0]
   1a0c8:	f007 f90d 	bl	212e6 <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1a0cc:	b16f      	cbz	r7, 1a0ea <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1a0ce:	69fb      	ldr	r3, [r7, #28]
   1a0d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1a0d4:	b14b      	cbz	r3, 1a0ea <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
   1a0d6:	4b1a      	ldr	r3, [pc, #104]	; (1a140 <z_fatal_error+0xbc>)
   1a0d8:	2201      	movs	r2, #1
   1a0da:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1a0de:	4620      	mov	r0, r4
   1a0e0:	4623      	mov	r3, r4
   1a0e2:	4916      	ldr	r1, [pc, #88]	; (1a13c <z_fatal_error+0xb8>)
   1a0e4:	9400      	str	r4, [sp, #0]
   1a0e6:	f007 f8fe 	bl	212e6 <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1a0ea:	b12d      	cbz	r5, 1a0f8 <z_fatal_error+0x74>
   1a0ec:	4628      	mov	r0, r5
   1a0ee:	f007 f9aa 	bl	21446 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1a0f2:	b108      	cbz	r0, 1a0f8 <z_fatal_error+0x74>
   1a0f4:	7803      	ldrb	r3, [r0, #0]
   1a0f6:	b903      	cbnz	r3, 1a0fa <z_fatal_error+0x76>
		thread_name = "unknown";
   1a0f8:	4812      	ldr	r0, [pc, #72]	; (1a144 <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1a0fa:	4b13      	ldr	r3, [pc, #76]	; (1a148 <z_fatal_error+0xc4>)
   1a0fc:	2201      	movs	r2, #1
   1a0fe:	9302      	str	r3, [sp, #8]
   1a100:	2300      	movs	r3, #0
   1a102:	e9cd 5003 	strd	r5, r0, [sp, #12]
   1a106:	e9cd 3300 	strd	r3, r3, [sp]
   1a10a:	4618      	mov	r0, r3
   1a10c:	490b      	ldr	r1, [pc, #44]	; (1a13c <z_fatal_error+0xb8>)
   1a10e:	f007 f8ea 	bl	212e6 <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1a112:	4639      	mov	r1, r7
   1a114:	4630      	mov	r0, r6
   1a116:	f7fa fb57 	bl	147c8 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1a11a:	f388 8811 	msr	BASEPRI, r8
   1a11e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1a122:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1a124:	b006      	add	sp, #24
   1a126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a12a:	f7f4 b8f9 	b.w	e320 <z_impl_k_thread_abort>
   1a12e:	bf00      	nop
   1a130:	0002393c 	.word	0x0002393c
   1a134:	000279c7 	.word	0x000279c7
   1a138:	000279dd 	.word	0x000279dd
   1a13c:	0002303c 	.word	0x0002303c
   1a140:	00027a05 	.word	0x00027a05
   1a144:	000279d5 	.word	0x000279d5
   1a148:	00027a26 	.word	0x00027a26

0001a14c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a14c:	4b10      	ldr	r3, [pc, #64]	; (1a190 <z_sys_init_run_level+0x44>)
{
   1a14e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a150:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1a154:	3001      	adds	r0, #1
   1a156:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1a15a:	42a6      	cmp	r6, r4
   1a15c:	d800      	bhi.n	1a160 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   1a15e:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   1a160:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   1a164:	b18d      	cbz	r5, 1a18a <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   1a166:	4628      	mov	r0, r5
   1a168:	4798      	blx	r3
			if (rc != 0) {
   1a16a:	b138      	cbz	r0, 1a17c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1a16c:	2800      	cmp	r0, #0
   1a16e:	bfb8      	it	lt
   1a170:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   1a172:	28ff      	cmp	r0, #255	; 0xff
   1a174:	bfa8      	it	ge
   1a176:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1a178:	68eb      	ldr	r3, [r5, #12]
   1a17a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1a17c:	68ea      	ldr	r2, [r5, #12]
   1a17e:	7853      	ldrb	r3, [r2, #1]
   1a180:	f043 0301 	orr.w	r3, r3, #1
   1a184:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a186:	3408      	adds	r4, #8
   1a188:	e7e7      	b.n	1a15a <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   1a18a:	4798      	blx	r3
   1a18c:	e7fb      	b.n	1a186 <z_sys_init_run_level+0x3a>
   1a18e:	bf00      	nop
   1a190:	00023950 	.word	0x00023950

0001a194 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1a194:	2201      	movs	r2, #1
{
   1a196:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1a198:	4b09      	ldr	r3, [pc, #36]	; (1a1c0 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1a19a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1a19c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1a19e:	f7ff ffd5 	bl	1a14c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1a1a2:	f001 f9c9 	bl	1b538 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1a1a6:	2004      	movs	r0, #4
   1a1a8:	f7ff ffd0 	bl	1a14c <z_sys_init_run_level>

	z_init_static_threads();
   1a1ac:	f000 f93e 	bl	1a42c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   1a1b0:	f7f1 ff20 	bl	bff4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1a1b4:	4a03      	ldr	r2, [pc, #12]	; (1a1c4 <bg_thread_main+0x30>)
   1a1b6:	7b13      	ldrb	r3, [r2, #12]
   1a1b8:	f023 0301 	bic.w	r3, r3, #1
   1a1bc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1a1be:	bd08      	pop	{r3, pc}
   1a1c0:	200110cf 	.word	0x200110cf
   1a1c4:	2000d978 	.word	0x2000d978

0001a1c8 <z_bss_zero>:
{
   1a1c8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1a1ca:	4803      	ldr	r0, [pc, #12]	; (1a1d8 <z_bss_zero+0x10>)
   1a1cc:	4a03      	ldr	r2, [pc, #12]	; (1a1dc <z_bss_zero+0x14>)
   1a1ce:	2100      	movs	r1, #0
   1a1d0:	1a12      	subs	r2, r2, r0
   1a1d2:	f007 f898 	bl	21306 <z_early_memset>
}
   1a1d6:	bd08      	pop	{r3, pc}
   1a1d8:	2000cb68 	.word	0x2000cb68
   1a1dc:	200110d4 	.word	0x200110d4

0001a1e0 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   1a1e0:	23c8      	movs	r3, #200	; 0xc8
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1a1e2:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   1a1e4:	4e13      	ldr	r6, [pc, #76]	; (1a234 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   1a1e6:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   1a1e8:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   1a1ec:	2300      	movs	r3, #0
{
   1a1ee:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1a1f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1a1f4:	220f      	movs	r2, #15
   1a1f6:	9301      	str	r3, [sp, #4]
   1a1f8:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1a1fc:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   1a1fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1a202:	4d0d      	ldr	r5, [pc, #52]	; (1a238 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   1a204:	490d      	ldr	r1, [pc, #52]	; (1a23c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1a206:	fb03 5500 	mla	r5, r3, r0, r5
{
   1a20a:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1a20c:	fb02 1100 	mla	r1, r2, r0, r1
   1a210:	4b0b      	ldr	r3, [pc, #44]	; (1a240 <z_init_cpu+0x60>)
   1a212:	4630      	mov	r0, r6
   1a214:	9500      	str	r5, [sp, #0]
   1a216:	f000 f8ad 	bl	1a374 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1a21a:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   1a21c:	742c      	strb	r4, [r5, #16]
   1a21e:	f023 0304 	bic.w	r3, r3, #4
   1a222:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1a224:	4b07      	ldr	r3, [pc, #28]	; (1a244 <z_init_cpu+0x64>)
   1a226:	3401      	adds	r4, #1
   1a228:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1a22c:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   1a22e:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1a230:	b006      	add	sp, #24
   1a232:	bd70      	pop	{r4, r5, r6, pc}
   1a234:	2000d8b0 	.word	0x2000d8b0
   1a238:	2000e2fc 	.word	0x2000e2fc
   1a23c:	20012bd8 	.word	0x20012bd8
   1a240:	0001a4e5 	.word	0x0001a4e5
   1a244:	200123d8 	.word	0x200123d8

0001a248 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   1a248:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1a24a:	2000      	movs	r0, #0
{
   1a24c:	b0b8      	sub	sp, #224	; 0xe0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1a24e:	f7ff ff7d 	bl	1a14c <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1a252:	4b2f      	ldr	r3, [pc, #188]	; (1a310 <z_cstart+0xc8>)
	uint32_t msp =
   1a254:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1a258:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   1a25c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a260:	2400      	movs	r4, #0
   1a262:	23e0      	movs	r3, #224	; 0xe0
   1a264:	4d2b      	ldr	r5, [pc, #172]	; (1a314 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1a266:	4e2c      	ldr	r6, [pc, #176]	; (1a318 <z_cstart+0xd0>)
   1a268:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1a26c:	77ec      	strb	r4, [r5, #31]
   1a26e:	762c      	strb	r4, [r5, #24]
   1a270:	766c      	strb	r4, [r5, #25]
   1a272:	76ac      	strb	r4, [r5, #26]
   1a274:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1a278:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a27a:	4f28      	ldr	r7, [pc, #160]	; (1a31c <z_cstart+0xd4>)
   1a27c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1a280:	626b      	str	r3, [r5, #36]	; 0x24
   1a282:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1a286:	f7f3 ffaf 	bl	e1e8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1a28a:	f7f3 fae1 	bl	d850 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1a28e:	f04f 33ff 	mov.w	r3, #4294967295
   1a292:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1a294:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1a296:	f7f4 f9df 	bl	e658 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1a29a:	f7f4 f857 	bl	e34c <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   1a29e:	f7f2 fe19 	bl	ced4 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1a2a2:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   1a2a6:	ad06      	add	r5, sp, #24
   1a2a8:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   1a2aa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   1a2ae:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   1a2b2:	f001 f923 	bl	1b4fc <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   1a2b6:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1a2b8:	f007 f809 	bl	212ce <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1a2bc:	2001      	movs	r0, #1
   1a2be:	f7ff ff45 	bl	1a14c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1a2c2:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1a2c4:	4d16      	ldr	r5, [pc, #88]	; (1a320 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1a2c6:	f7ff ff41 	bl	1a14c <z_sys_init_run_level>
	z_sched_init();
   1a2ca:	f000 fe15 	bl	1aef8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a2ce:	4b15      	ldr	r3, [pc, #84]	; (1a324 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   1a2d0:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a2d2:	9305      	str	r3, [sp, #20]
   1a2d4:	2301      	movs	r3, #1
   1a2d6:	4914      	ldr	r1, [pc, #80]	; (1a328 <z_cstart+0xe0>)
   1a2d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1a2dc:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1a2e0:	4628      	mov	r0, r5
   1a2e2:	463b      	mov	r3, r7
   1a2e4:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1a2e8:	9400      	str	r4, [sp, #0]
   1a2ea:	f000 f843 	bl	1a374 <z_setup_new_thread>
   1a2ee:	4606      	mov	r6, r0
   1a2f0:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   1a2f2:	4628      	mov	r0, r5
   1a2f4:	f022 0204 	bic.w	r2, r2, #4
   1a2f8:	736a      	strb	r2, [r5, #13]
   1a2fa:	f007 fa0e 	bl	2171a <z_ready_thread>
	z_init_cpu(0);
   1a2fe:	4620      	mov	r0, r4
   1a300:	f7ff ff6e 	bl	1a1e0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1a304:	463a      	mov	r2, r7
   1a306:	4631      	mov	r1, r6
   1a308:	4628      	mov	r0, r5
   1a30a:	f7f3 fc4d 	bl	dba8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1a30e:	bf00      	nop
   1a310:	200123d8 	.word	0x200123d8
   1a314:	e000ed00 	.word	0xe000ed00
   1a318:	2000e2fc 	.word	0x2000e2fc
   1a31c:	0001a195 	.word	0x0001a195
   1a320:	2000d978 	.word	0x2000d978
   1a324:	00027a88 	.word	0x00027a88
   1a328:	20012d18 	.word	0x20012d18

0001a32c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   1a32c:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1a32e:	4c06      	ldr	r4, [pc, #24]	; (1a348 <statics_init+0x1c>)
   1a330:	4d06      	ldr	r5, [pc, #24]	; (1a34c <statics_init+0x20>)
   1a332:	42ac      	cmp	r4, r5
   1a334:	d301      	bcc.n	1a33a <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1a336:	2000      	movs	r0, #0
   1a338:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1a33a:	4620      	mov	r0, r4
   1a33c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1a340:	f006 ffe5 	bl	2130e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1a344:	3414      	adds	r4, #20
   1a346:	e7f4      	b.n	1a332 <statics_init+0x6>
   1a348:	2000c968 	.word	0x2000c968
   1a34c:	2000c990 	.word	0x2000c990

0001a350 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
	int rc = 0;
   1a350:	2000      	movs	r0, #0
{
   1a352:	b538      	push	{r3, r4, r5, lr}

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1a354:	4c05      	ldr	r4, [pc, #20]	; (1a36c <init_mem_slab_module+0x1c>)
   1a356:	4d06      	ldr	r5, [pc, #24]	; (1a370 <init_mem_slab_module+0x20>)
   1a358:	42ac      	cmp	r4, r5
   1a35a:	d300      	bcc.n	1a35e <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   1a35c:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   1a35e:	4620      	mov	r0, r4
   1a360:	f007 f852 	bl	21408 <create_free_list>
		if (rc < 0) {
   1a364:	2800      	cmp	r0, #0
   1a366:	dbf9      	blt.n	1a35c <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1a368:	341c      	adds	r4, #28
   1a36a:	e7f5      	b.n	1a358 <init_mem_slab_module+0x8>
   1a36c:	2000c968 	.word	0x2000c968
   1a370:	2000c968 	.word	0x2000c968

0001a374 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1a374:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1a378:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1a37a:	f100 0558 	add.w	r5, r0, #88	; 0x58
   1a37e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1a380:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1a382:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   1a386:	2500      	movs	r5, #0
{
   1a388:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
   1a38a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1a38c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1a38e:	e9c0 5506 	strd	r5, r5, [r0, #24]
   1a392:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1a394:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1a396:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1a398:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
   1a39c:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1a3a0:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1a3a2:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1a3a4:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1a3a6:	9202      	str	r2, [sp, #8]
   1a3a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   1a3aa:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1a3ae:	9201      	str	r2, [sp, #4]
   1a3b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a3b2:	9200      	str	r2, [sp, #0]
   1a3b4:	4642      	mov	r2, r8
   1a3b6:	f7f3 fbd7 	bl	db68 <arch_new_thread>
	if (!_current) {
   1a3ba:	4b05      	ldr	r3, [pc, #20]	; (1a3d0 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   1a3bc:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1a3be:	689b      	ldr	r3, [r3, #8]
   1a3c0:	b103      	cbz	r3, 1a3c4 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   1a3c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   1a3c4:	4640      	mov	r0, r8
   1a3c6:	6763      	str	r3, [r4, #116]	; 0x74
   1a3c8:	b004      	add	sp, #16
   1a3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a3ce:	bf00      	nop
   1a3d0:	2000e2fc 	.word	0x2000e2fc

0001a3d4 <z_impl_k_thread_create>:
{
   1a3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a3d6:	2500      	movs	r5, #0
{
   1a3d8:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a3da:	9505      	str	r5, [sp, #20]
   1a3dc:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   1a3de:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a3e2:	9504      	str	r5, [sp, #16]
   1a3e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   1a3e6:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a3e8:	9503      	str	r5, [sp, #12]
   1a3ea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1a3ec:	9502      	str	r5, [sp, #8]
   1a3ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1a3f0:	9501      	str	r5, [sp, #4]
   1a3f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1a3f4:	9500      	str	r5, [sp, #0]
   1a3f6:	f7ff ffbd 	bl	1a374 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1a3fa:	f1b6 3fff 	cmp.w	r6, #4294967295
   1a3fe:	bf08      	it	eq
   1a400:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   1a404:	d005      	beq.n	1a412 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a406:	ea56 0307 	orrs.w	r3, r6, r7
   1a40a:	d105      	bne.n	1a418 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1a40c:	4620      	mov	r0, r4
   1a40e:	f000 fcf3 	bl	1adf8 <z_sched_start>
}
   1a412:	4620      	mov	r0, r4
   1a414:	b007      	add	sp, #28
   1a416:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1a418:	463a      	mov	r2, r7
   1a41a:	4633      	mov	r3, r6
   1a41c:	4902      	ldr	r1, [pc, #8]	; (1a428 <z_impl_k_thread_create+0x54>)
   1a41e:	f104 0018 	add.w	r0, r4, #24
   1a422:	f000 fee5 	bl	1b1f0 <z_add_timeout>
   1a426:	e7f4      	b.n	1a412 <z_impl_k_thread_create+0x3e>
   1a428:	0002177f 	.word	0x0002177f

0001a42c <z_init_static_threads>:
{
   1a42c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a430:	4c29      	ldr	r4, [pc, #164]	; (1a4d8 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1a432:	4d2a      	ldr	r5, [pc, #168]	; (1a4dc <z_init_static_threads+0xb0>)
{
   1a434:	b087      	sub	sp, #28
   1a436:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1a438:	42ae      	cmp	r6, r5
   1a43a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   1a43e:	d30f      	bcc.n	1a460 <z_init_static_threads+0x34>
	k_sched_lock();
   1a440:	f000 fd2a 	bl	1ae98 <k_sched_lock>
   1a444:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1a448:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   1a44c:	4c22      	ldr	r4, [pc, #136]	; (1a4d8 <z_init_static_threads+0xac>)
   1a44e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 1a4e0 <z_init_static_threads+0xb4>
   1a452:	42ac      	cmp	r4, r5
   1a454:	d320      	bcc.n	1a498 <z_init_static_threads+0x6c>
}
   1a456:	b007      	add	sp, #28
   1a458:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1a45c:	f000 bd30 	b.w	1aec0 <k_sched_unlock>
		z_setup_new_thread(
   1a460:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a464:	9305      	str	r3, [sp, #20]
   1a466:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   1a46a:	9304      	str	r3, [sp, #16]
   1a46c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1a470:	9303      	str	r3, [sp, #12]
   1a472:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1a476:	9302      	str	r3, [sp, #8]
   1a478:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1a47c:	9301      	str	r3, [sp, #4]
   1a47e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1a482:	9300      	str	r3, [sp, #0]
   1a484:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   1a488:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   1a48c:	f7ff ff72 	bl	1a374 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1a490:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   1a494:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1a496:	e7ce      	b.n	1a436 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1a498:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a49a:	1c5a      	adds	r2, r3, #1
   1a49c:	d00d      	beq.n	1a4ba <z_init_static_threads+0x8e>
   1a49e:	2100      	movs	r1, #0
   1a4a0:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   1a4a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1a4a6:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a4aa:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1a4ae:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a4b2:	d104      	bne.n	1a4be <z_init_static_threads+0x92>
	z_sched_start(thread);
   1a4b4:	4640      	mov	r0, r8
   1a4b6:	f000 fc9f 	bl	1adf8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1a4ba:	342c      	adds	r4, #44	; 0x2c
   1a4bc:	e7c9      	b.n	1a452 <z_init_static_threads+0x26>
   1a4be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a4c2:	2300      	movs	r3, #0
   1a4c4:	f7ee fb94 	bl	8bf0 <__aeabi_uldivmod>
   1a4c8:	4602      	mov	r2, r0
   1a4ca:	460b      	mov	r3, r1
   1a4cc:	f108 0018 	add.w	r0, r8, #24
   1a4d0:	4649      	mov	r1, r9
   1a4d2:	f000 fe8d 	bl	1b1f0 <z_add_timeout>
   1a4d6:	e7f0      	b.n	1a4ba <z_init_static_threads+0x8e>
   1a4d8:	00022eb0 	.word	0x00022eb0
   1a4dc:	00022edc 	.word	0x00022edc
   1a4e0:	0002177f 	.word	0x0002177f

0001a4e4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1a4e4:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1a4e6:	4c0b      	ldr	r4, [pc, #44]	; (1a514 <idle+0x30>)
   1a4e8:	4d0b      	ldr	r5, [pc, #44]	; (1a518 <idle+0x34>)
	__asm__ volatile(
   1a4ea:	f04f 0220 	mov.w	r2, #32
   1a4ee:	f3ef 8311 	mrs	r3, BASEPRI
   1a4f2:	f382 8812 	msr	BASEPRI_MAX, r2
   1a4f6:	f3bf 8f6f 	isb	sy
   1a4fa:	f007 f9d7 	bl	218ac <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1a4fe:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1a500:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1a502:	b913      	cbnz	r3, 1a50a <idle+0x26>
	arch_cpu_idle();
   1a504:	f7f3 f9aa 	bl	d85c <arch_cpu_idle>
}
   1a508:	e7ef      	b.n	1a4ea <idle+0x6>
   1a50a:	f7f3 f807 	bl	d51c <pm_system_suspend>
   1a50e:	2800      	cmp	r0, #0
   1a510:	d1eb      	bne.n	1a4ea <idle+0x6>
   1a512:	e7f7      	b.n	1a504 <idle+0x20>
   1a514:	2000e2fc 	.word	0x2000e2fc
   1a518:	200110cf 	.word	0x200110cf

0001a51c <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   1a51c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a520:	4604      	mov	r4, r0
   1a522:	460e      	mov	r6, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   1a524:	f100 0808 	add.w	r8, r0, #8
   1a528:	f04f 0120 	mov.w	r1, #32
   1a52c:	f3ef 8711 	mrs	r7, BASEPRI
   1a530:	f381 8812 	msr	BASEPRI_MAX, r1
   1a534:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   1a538:	6a05      	ldr	r5, [r0, #32]
   1a53a:	68c1      	ldr	r1, [r0, #12]
   1a53c:	428d      	cmp	r5, r1
   1a53e:	d231      	bcs.n	1a5a4 <z_impl_k_msgq_put+0x88>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1a540:	f007 f921 	bl	21786 <z_unpend_first_thread>
   1a544:	4631      	mov	r1, r6
		if (pending_thread != NULL) {
   1a546:	4605      	mov	r5, r0
   1a548:	68a2      	ldr	r2, [r4, #8]
   1a54a:	b178      	cbz	r0, 1a56c <z_impl_k_msgq_put+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1a54c:	2400      	movs	r4, #0
   1a54e:	6940      	ldr	r0, [r0, #20]
   1a550:	f007 fb92 	bl	21c78 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1a554:	4628      	mov	r0, r5
   1a556:	67ec      	str	r4, [r5, #124]	; 0x7c
   1a558:	f007 f8df 	bl	2171a <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1a55c:	4640      	mov	r0, r8
   1a55e:	4639      	mov	r1, r7
   1a560:	f000 fc38 	bl	1add4 <z_reschedule>
			return 0;
   1a564:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1a566:	b002      	add	sp, #8
   1a568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a56c:	69e0      	ldr	r0, [r4, #28]
   1a56e:	f007 fb83 	bl	21c78 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   1a572:	69e3      	ldr	r3, [r4, #28]
   1a574:	68a2      	ldr	r2, [r4, #8]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   1a576:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->write_ptr += msgq->msg_size;
   1a57a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1a57c:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1a57e:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1a580:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1a582:	bf08      	it	eq
   1a584:	6923      	ldreq	r3, [r4, #16]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   1a586:	f04f 0110 	mov.w	r1, #16
				msgq->write_ptr = msgq->buffer_start;
   1a58a:	bf08      	it	eq
   1a58c:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1a58e:	6a23      	ldr	r3, [r4, #32]
   1a590:	3301      	adds	r3, #1
   1a592:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   1a594:	f007 fb06 	bl	21ba4 <z_handle_obj_poll_events>
		result = 0;
   1a598:	2000      	movs	r0, #0
	__asm__ volatile(
   1a59a:	f387 8811 	msr	BASEPRI, r7
   1a59e:	f3bf 8f6f 	isb	sy
	return result;
   1a5a2:	e7e0      	b.n	1a566 <z_impl_k_msgq_put+0x4a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a5a4:	ea52 0103 	orrs.w	r1, r2, r3
   1a5a8:	d00a      	beq.n	1a5c0 <z_impl_k_msgq_put+0xa4>
		_current->base.swap_data = (void *) data;
   1a5aa:	4907      	ldr	r1, [pc, #28]	; (1a5c8 <z_impl_k_msgq_put+0xac>)
   1a5ac:	6889      	ldr	r1, [r1, #8]
   1a5ae:	614e      	str	r6, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1a5b0:	e9cd 2300 	strd	r2, r3, [sp]
   1a5b4:	4639      	mov	r1, r7
   1a5b6:	4602      	mov	r2, r0
   1a5b8:	4640      	mov	r0, r8
   1a5ba:	f000 fba7 	bl	1ad0c <z_pend_curr>
		return result;
   1a5be:	e7d2      	b.n	1a566 <z_impl_k_msgq_put+0x4a>
		result = -ENOMSG;
   1a5c0:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1a5c4:	e7e9      	b.n	1a59a <z_impl_k_msgq_put+0x7e>
   1a5c6:	bf00      	nop
   1a5c8:	2000e2fc 	.word	0x2000e2fc

0001a5cc <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   1a5cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a5ce:	4604      	mov	r4, r0
   1a5d0:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1a5d2:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
   1a5d6:	f04f 0120 	mov.w	r1, #32
   1a5da:	f3ef 8611 	mrs	r6, BASEPRI
   1a5de:	f381 8812 	msr	BASEPRI_MAX, r1
   1a5e2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   1a5e6:	6a21      	ldr	r1, [r4, #32]
   1a5e8:	2900      	cmp	r1, #0
   1a5ea:	d031      	beq.n	1a650 <z_impl_k_msgq_get+0x84>
   1a5ec:	68a2      	ldr	r2, [r4, #8]
   1a5ee:	69a1      	ldr	r1, [r4, #24]
   1a5f0:	f007 fb42 	bl	21c78 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   1a5f4:	69a3      	ldr	r3, [r4, #24]
   1a5f6:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1a5f8:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   1a5fa:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   1a5fc:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   1a5fe:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   1a600:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   1a602:	bf04      	itt	eq
   1a604:	6923      	ldreq	r3, [r4, #16]
   1a606:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   1a608:	6a23      	ldr	r3, [r4, #32]
   1a60a:	3b01      	subs	r3, #1
   1a60c:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1a60e:	f007 f8ba 	bl	21786 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1a612:	4605      	mov	r5, r0
   1a614:	b360      	cbz	r0, 1a670 <z_impl_k_msgq_get+0xa4>
   1a616:	6941      	ldr	r1, [r0, #20]
   1a618:	68a2      	ldr	r2, [r4, #8]
   1a61a:	69e0      	ldr	r0, [r4, #28]
   1a61c:	f007 fb2c 	bl	21c78 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   1a620:	69e3      	ldr	r3, [r4, #28]
   1a622:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1a624:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   1a626:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1a628:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1a62a:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1a62c:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1a62e:	bf04      	itt	eq
   1a630:	6923      	ldreq	r3, [r4, #16]
   1a632:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1a634:	6a23      	ldr	r3, [r4, #32]
   1a636:	3301      	adds	r3, #1
   1a638:	6223      	str	r3, [r4, #32]
   1a63a:	2400      	movs	r4, #0
   1a63c:	67ec      	str	r4, [r5, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1a63e:	f007 f86c 	bl	2171a <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1a642:	4638      	mov	r0, r7
   1a644:	4631      	mov	r1, r6
   1a646:	f000 fbc5 	bl	1add4 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   1a64a:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1a64c:	b003      	add	sp, #12
   1a64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a650:	ea52 0103 	orrs.w	r1, r2, r3
   1a654:	d00a      	beq.n	1a66c <z_impl_k_msgq_get+0xa0>
		_current->base.swap_data = data;
   1a656:	4909      	ldr	r1, [pc, #36]	; (1a67c <z_impl_k_msgq_get+0xb0>)
   1a658:	6889      	ldr	r1, [r1, #8]
   1a65a:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1a65c:	e9cd 2300 	strd	r2, r3, [sp]
   1a660:	4631      	mov	r1, r6
   1a662:	4622      	mov	r2, r4
   1a664:	4638      	mov	r0, r7
   1a666:	f000 fb51 	bl	1ad0c <z_pend_curr>
		return result;
   1a66a:	e7ef      	b.n	1a64c <z_impl_k_msgq_get+0x80>
		result = -ENOMSG;
   1a66c:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   1a670:	f386 8811 	msr	BASEPRI, r6
   1a674:	f3bf 8f6f 	isb	sy
	return result;
   1a678:	e7e8      	b.n	1a64c <z_impl_k_msgq_get+0x80>
   1a67a:	bf00      	nop
   1a67c:	2000e2fc 	.word	0x2000e2fc

0001a680 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1a680:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a684:	4604      	mov	r4, r0
   1a686:	4617      	mov	r7, r2
   1a688:	461e      	mov	r6, r3
	__asm__ volatile(
   1a68a:	f04f 0320 	mov.w	r3, #32
   1a68e:	f3ef 8811 	mrs	r8, BASEPRI
   1a692:	f383 8812 	msr	BASEPRI_MAX, r3
   1a696:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1a69a:	68c3      	ldr	r3, [r0, #12]
   1a69c:	4a33      	ldr	r2, [pc, #204]	; (1a76c <z_impl_k_mutex_lock+0xec>)
   1a69e:	b17b      	cbz	r3, 1a6c0 <z_impl_k_mutex_lock+0x40>
   1a6a0:	6880      	ldr	r0, [r0, #8]
   1a6a2:	6891      	ldr	r1, [r2, #8]
   1a6a4:	4288      	cmp	r0, r1
   1a6a6:	d019      	beq.n	1a6dc <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1a6a8:	ea57 0306 	orrs.w	r3, r7, r6
   1a6ac:	d118      	bne.n	1a6e0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1a6ae:	f388 8811 	msr	BASEPRI, r8
   1a6b2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1a6b6:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1a6ba:	b002      	add	sp, #8
   1a6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1a6c0:	6891      	ldr	r1, [r2, #8]
   1a6c2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1a6c6:	3301      	adds	r3, #1
   1a6c8:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1a6ca:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1a6cc:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1a6ce:	60a3      	str	r3, [r4, #8]
   1a6d0:	f388 8811 	msr	BASEPRI, r8
   1a6d4:	f3bf 8f6f 	isb	sy
		return 0;
   1a6d8:	2000      	movs	r0, #0
   1a6da:	e7ee      	b.n	1a6ba <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   1a6dc:	6921      	ldr	r1, [r4, #16]
   1a6de:	e7f2      	b.n	1a6c6 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1a6e0:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1a6e4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1a6e8:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1a6ec:	4299      	cmp	r1, r3
   1a6ee:	bfa8      	it	ge
   1a6f0:	4619      	movge	r1, r3
   1a6f2:	4291      	cmp	r1, r2
   1a6f4:	bfb8      	it	lt
   1a6f6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1a6f8:	428b      	cmp	r3, r1
   1a6fa:	dd2e      	ble.n	1a75a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   1a6fc:	f006 feae 	bl	2145c <adjust_owner_prio.isra.0>
   1a700:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1a702:	4622      	mov	r2, r4
   1a704:	4641      	mov	r1, r8
   1a706:	e9cd 7600 	strd	r7, r6, [sp]
   1a70a:	4819      	ldr	r0, [pc, #100]	; (1a770 <z_impl_k_mutex_lock+0xf0>)
   1a70c:	f000 fafe 	bl	1ad0c <z_pend_curr>
	if (got_mutex == 0) {
   1a710:	2800      	cmp	r0, #0
   1a712:	d0e1      	beq.n	1a6d8 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   1a714:	f04f 0320 	mov.w	r3, #32
   1a718:	f3ef 8611 	mrs	r6, BASEPRI
   1a71c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a720:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   1a724:	68a0      	ldr	r0, [r4, #8]
   1a726:	b1d0      	cbz	r0, 1a75e <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1a728:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1a72a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a72c:	429c      	cmp	r4, r3
   1a72e:	d00a      	beq.n	1a746 <z_impl_k_mutex_lock+0xc6>
   1a730:	b14b      	cbz	r3, 1a746 <z_impl_k_mutex_lock+0xc6>
   1a732:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1a736:	4299      	cmp	r1, r3
   1a738:	bfa8      	it	ge
   1a73a:	4619      	movge	r1, r3
   1a73c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1a740:	4299      	cmp	r1, r3
   1a742:	bfb8      	it	lt
   1a744:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1a746:	f006 fe89 	bl	2145c <adjust_owner_prio.isra.0>
   1a74a:	b140      	cbz	r0, 1a75e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1a74c:	4631      	mov	r1, r6
   1a74e:	4808      	ldr	r0, [pc, #32]	; (1a770 <z_impl_k_mutex_lock+0xf0>)
   1a750:	f000 fb40 	bl	1add4 <z_reschedule>
	return -EAGAIN;
   1a754:	f06f 000a 	mvn.w	r0, #10
   1a758:	e7af      	b.n	1a6ba <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   1a75a:	2500      	movs	r5, #0
   1a75c:	e7d1      	b.n	1a702 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   1a75e:	2d00      	cmp	r5, #0
   1a760:	d1f4      	bne.n	1a74c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1a762:	f386 8811 	msr	BASEPRI, r6
   1a766:	f3bf 8f6f 	isb	sy
   1a76a:	e7f3      	b.n	1a754 <z_impl_k_mutex_lock+0xd4>
   1a76c:	2000e2fc 	.word	0x2000e2fc
   1a770:	200110d0 	.word	0x200110d0

0001a774 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1a774:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1a776:	6883      	ldr	r3, [r0, #8]
{
   1a778:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1a77a:	b36b      	cbz	r3, 1a7d8 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1a77c:	4a19      	ldr	r2, [pc, #100]	; (1a7e4 <z_impl_k_mutex_unlock+0x70>)
   1a77e:	6892      	ldr	r2, [r2, #8]
   1a780:	4293      	cmp	r3, r2
   1a782:	d12c      	bne.n	1a7de <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1a784:	68c3      	ldr	r3, [r0, #12]
   1a786:	2b01      	cmp	r3, #1
   1a788:	d903      	bls.n	1a792 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   1a78a:	3b01      	subs	r3, #1
   1a78c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1a78e:	2000      	movs	r0, #0
}
   1a790:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1a792:	f04f 0320 	mov.w	r3, #32
   1a796:	f3ef 8511 	mrs	r5, BASEPRI
   1a79a:	f383 8812 	msr	BASEPRI_MAX, r3
   1a79e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1a7a2:	6901      	ldr	r1, [r0, #16]
   1a7a4:	6880      	ldr	r0, [r0, #8]
   1a7a6:	f006 fe59 	bl	2145c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1a7aa:	4620      	mov	r0, r4
   1a7ac:	f006 ffeb 	bl	21786 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1a7b0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1a7b2:	b158      	cbz	r0, 1a7cc <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   1a7b4:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1a7b8:	6122      	str	r2, [r4, #16]
   1a7ba:	2200      	movs	r2, #0
   1a7bc:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1a7be:	f006 ffac 	bl	2171a <z_ready_thread>
		z_reschedule(&lock, key);
   1a7c2:	4629      	mov	r1, r5
   1a7c4:	4808      	ldr	r0, [pc, #32]	; (1a7e8 <z_impl_k_mutex_unlock+0x74>)
   1a7c6:	f000 fb05 	bl	1add4 <z_reschedule>
   1a7ca:	e7e0      	b.n	1a78e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   1a7cc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1a7ce:	f385 8811 	msr	BASEPRI, r5
   1a7d2:	f3bf 8f6f 	isb	sy
   1a7d6:	e7da      	b.n	1a78e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   1a7d8:	f06f 0015 	mvn.w	r0, #21
   1a7dc:	e7d8      	b.n	1a790 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   1a7de:	f04f 30ff 	mov.w	r0, #4294967295
   1a7e2:	e7d5      	b.n	1a790 <z_impl_k_mutex_unlock+0x1c>
   1a7e4:	2000e2fc 	.word	0x2000e2fc
   1a7e8:	200110d0 	.word	0x200110d0

0001a7ec <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1a7ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a7ee:	4611      	mov	r1, r2
	__asm__ volatile(
   1a7f0:	f04f 0220 	mov.w	r2, #32
   1a7f4:	f3ef 8511 	mrs	r5, BASEPRI
   1a7f8:	f382 8812 	msr	BASEPRI_MAX, r2
   1a7fc:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1a800:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1a802:	b19c      	cbz	r4, 1a82c <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a804:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1a806:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a808:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1a80c:	4294      	cmp	r4, r2
	list->head = node;
   1a80e:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1a810:	bf08      	it	eq
   1a812:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1a814:	2101      	movs	r1, #1
   1a816:	4620      	mov	r0, r4
   1a818:	f006 fe95 	bl	21546 <z_queue_node_peek>
   1a81c:	4604      	mov	r4, r0
	__asm__ volatile(
   1a81e:	f385 8811 	msr	BASEPRI, r5
   1a822:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1a826:	4620      	mov	r0, r4
   1a828:	b003      	add	sp, #12
   1a82a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a82c:	ea51 0203 	orrs.w	r2, r1, r3
   1a830:	d0f5      	beq.n	1a81e <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a832:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1a836:	e9cd 1300 	strd	r1, r3, [sp]
   1a83a:	4610      	mov	r0, r2
   1a83c:	4629      	mov	r1, r5
   1a83e:	f000 fa65 	bl	1ad0c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1a842:	2800      	cmp	r0, #0
   1a844:	d1ef      	bne.n	1a826 <z_impl_k_queue_get+0x3a>
   1a846:	4b02      	ldr	r3, [pc, #8]	; (1a850 <z_impl_k_queue_get+0x64>)
   1a848:	689b      	ldr	r3, [r3, #8]
   1a84a:	695c      	ldr	r4, [r3, #20]
   1a84c:	e7eb      	b.n	1a826 <z_impl_k_queue_get+0x3a>
   1a84e:	bf00      	nop
   1a850:	2000e2fc 	.word	0x2000e2fc

0001a854 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1a854:	b538      	push	{r3, r4, r5, lr}
   1a856:	4604      	mov	r4, r0
	__asm__ volatile(
   1a858:	f04f 0320 	mov.w	r3, #32
   1a85c:	f3ef 8511 	mrs	r5, BASEPRI
   1a860:	f383 8812 	msr	BASEPRI_MAX, r3
   1a864:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1a868:	f006 ff8d 	bl	21786 <z_unpend_first_thread>

	if (thread != NULL) {
   1a86c:	b148      	cbz	r0, 1a882 <z_impl_k_sem_give+0x2e>
   1a86e:	2200      	movs	r2, #0
   1a870:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1a872:	f006 ff52 	bl	2171a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1a876:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1a878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1a87c:	4807      	ldr	r0, [pc, #28]	; (1a89c <z_impl_k_sem_give+0x48>)
   1a87e:	f000 baa9 	b.w	1add4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1a882:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1a886:	429a      	cmp	r2, r3
   1a888:	bf18      	it	ne
   1a88a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1a88c:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1a88e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1a890:	f104 0010 	add.w	r0, r4, #16
   1a894:	f007 f986 	bl	21ba4 <z_handle_obj_poll_events>
}
   1a898:	e7ed      	b.n	1a876 <z_impl_k_sem_give+0x22>
   1a89a:	bf00      	nop
   1a89c:	200110d0 	.word	0x200110d0

0001a8a0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1a8a0:	b513      	push	{r0, r1, r4, lr}
   1a8a2:	f04f 0420 	mov.w	r4, #32
   1a8a6:	f3ef 8111 	mrs	r1, BASEPRI
   1a8aa:	f384 8812 	msr	BASEPRI_MAX, r4
   1a8ae:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1a8b2:	6884      	ldr	r4, [r0, #8]
   1a8b4:	b144      	cbz	r4, 1a8c8 <z_impl_k_sem_take+0x28>
		sem->count--;
   1a8b6:	3c01      	subs	r4, #1
   1a8b8:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1a8ba:	f381 8811 	msr	BASEPRI, r1
   1a8be:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1a8c2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1a8c4:	b002      	add	sp, #8
   1a8c6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a8c8:	ea52 0403 	orrs.w	r4, r2, r3
   1a8cc:	d106      	bne.n	1a8dc <z_impl_k_sem_take+0x3c>
   1a8ce:	f381 8811 	msr	BASEPRI, r1
   1a8d2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1a8d6:	f06f 000f 	mvn.w	r0, #15
   1a8da:	e7f3      	b.n	1a8c4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1a8dc:	e9cd 2300 	strd	r2, r3, [sp]
   1a8e0:	4602      	mov	r2, r0
   1a8e2:	4802      	ldr	r0, [pc, #8]	; (1a8ec <z_impl_k_sem_take+0x4c>)
   1a8e4:	f000 fa12 	bl	1ad0c <z_pend_curr>
	return ret;
   1a8e8:	e7ec      	b.n	1a8c4 <z_impl_k_sem_take+0x24>
   1a8ea:	bf00      	nop
   1a8ec:	200110d0 	.word	0x200110d0

0001a8f0 <submit_to_queue_locked>:
{
   1a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1a8f2:	68c3      	ldr	r3, [r0, #12]
{
   1a8f4:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a8f6:	079a      	lsls	r2, r3, #30
{
   1a8f8:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a8fa:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1a8fe:	d42c      	bmi.n	1a95a <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1a900:	075b      	lsls	r3, r3, #29
   1a902:	d41a      	bmi.n	1a93a <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   1a904:	680b      	ldr	r3, [r1, #0]
   1a906:	b90b      	cbnz	r3, 1a90c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1a908:	6883      	ldr	r3, [r0, #8]
   1a90a:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   1a90c:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1a90e:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   1a910:	bf42      	ittt	mi
   1a912:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   1a914:	2602      	movmi	r6, #2
			*queuep = work->queue;
   1a916:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   1a918:	683d      	ldr	r5, [r7, #0]
		ret = 1;
   1a91a:	bf58      	it	pl
   1a91c:	2601      	movpl	r6, #1
	if (queue == NULL) {
   1a91e:	2d00      	cmp	r5, #0
   1a920:	d03a      	beq.n	1a998 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1a922:	4b1f      	ldr	r3, [pc, #124]	; (1a9a0 <submit_to_queue_locked+0xb0>)
   1a924:	689b      	ldr	r3, [r3, #8]
   1a926:	42ab      	cmp	r3, r5
   1a928:	d00a      	beq.n	1a940 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   1a92a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1a92e:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1a930:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1a934:	d414      	bmi.n	1a960 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   1a936:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   1a93a:	2300      	movs	r3, #0
   1a93c:	603b      	str	r3, [r7, #0]
	return ret;
   1a93e:	e025      	b.n	1a98c <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1a940:	f006 fd78 	bl	21434 <k_is_in_isr>
   1a944:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   1a948:	2800      	cmp	r0, #0
   1a94a:	d1f0      	bne.n	1a92e <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1a94c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1a94e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1a952:	d5f0      	bpl.n	1a936 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   1a954:	b152      	cbz	r2, 1a96c <submit_to_queue_locked+0x7c>
   1a956:	075b      	lsls	r3, r3, #29
   1a958:	d408      	bmi.n	1a96c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   1a95a:	f06f 060f 	mvn.w	r6, #15
   1a95e:	e7ec      	b.n	1a93a <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   1a960:	2a00      	cmp	r2, #0
   1a962:	d1fa      	bne.n	1a95a <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   1a964:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   1a968:	2b00      	cmp	r3, #0
   1a96a:	d1f6      	bne.n	1a95a <submit_to_queue_locked+0x6a>
	parent->next = child;
   1a96c:	2300      	movs	r3, #0
   1a96e:	6023      	str	r3, [r4, #0]
	return list->tail;
   1a970:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
Z_GENLIST_APPEND(slist, snode)
   1a974:	b963      	cbnz	r3, 1a990 <submit_to_queue_locked+0xa0>
	list->head = node;
   1a976:	e9c5 4432 	strd	r4, r4, [r5, #200]	; 0xc8
		(void)notify_queue_locked(queue);
   1a97a:	4628      	mov	r0, r5
   1a97c:	f006 fe24 	bl	215c8 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1a980:	68e3      	ldr	r3, [r4, #12]
   1a982:	f043 0304 	orr.w	r3, r3, #4
   1a986:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1a988:	683b      	ldr	r3, [r7, #0]
   1a98a:	60a3      	str	r3, [r4, #8]
}
   1a98c:	4630      	mov	r0, r6
   1a98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1a990:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a992:	f8c5 40cc 	str.w	r4, [r5, #204]	; 0xcc
}
   1a996:	e7f0      	b.n	1a97a <submit_to_queue_locked+0x8a>
		return -EINVAL;
   1a998:	f06f 0615 	mvn.w	r6, #21
   1a99c:	e7cd      	b.n	1a93a <submit_to_queue_locked+0x4a>
   1a99e:	bf00      	nop
   1a9a0:	2000e2fc 	.word	0x2000e2fc

0001a9a4 <k_work_submit>:
{
   1a9a4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1a9a6:	4801      	ldr	r0, [pc, #4]	; (1a9ac <k_work_submit+0x8>)
   1a9a8:	f006 be61 	b.w	2166e <k_work_submit_to_queue>
   1a9ac:	2000da60 	.word	0x2000da60

0001a9b0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1a9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a9b2:	4604      	mov	r4, r0
	list->head = NULL;
   1a9b4:	2000      	movs	r0, #0
   1a9b6:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   1a9b8:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8
   1a9bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1a9be:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
	list->tail = (sys_dnode_t *)list;
   1a9c2:	e9c4 0034 	strd	r0, r0, [r4, #208]	; 0xd0
   1a9c6:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1a9ca:	e9c4 0036 	strd	r0, r0, [r4, #216]	; 0xd8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1a9ce:	b31d      	cbz	r5, 1aa18 <k_work_queue_start+0x68>
   1a9d0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1a9d2:	2800      	cmp	r0, #0
   1a9d4:	f240 1001 	movw	r0, #257	; 0x101
   1a9d8:	bf08      	it	eq
   1a9da:	2001      	moveq	r0, #1
	*flagp = flags;
   1a9dc:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a9e0:	2000      	movs	r0, #0
   1a9e2:	f04f 36ff 	mov.w	r6, #4294967295
   1a9e6:	f04f 37ff 	mov.w	r7, #4294967295
   1a9ea:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1a9ee:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1a9f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1a9f6:	4620      	mov	r0, r4
   1a9f8:	4b08      	ldr	r3, [pc, #32]	; (1aa1c <k_work_queue_start+0x6c>)
   1a9fa:	9400      	str	r4, [sp, #0]
   1a9fc:	f7ff fcea 	bl	1a3d4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1aa00:	b125      	cbz	r5, 1aa0c <k_work_queue_start+0x5c>
   1aa02:	6829      	ldr	r1, [r5, #0]
   1aa04:	b111      	cbz	r1, 1aa0c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1aa06:	4620      	mov	r0, r4
   1aa08:	f006 fd1a 	bl	21440 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1aa0c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1aa0e:	b009      	add	sp, #36	; 0x24
   1aa10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1aa14:	f006 bd19 	b.w	2144a <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1aa18:	2001      	movs	r0, #1
   1aa1a:	e7df      	b.n	1a9dc <k_work_queue_start+0x2c>
   1aa1c:	0000a451 	.word	0x0000a451

0001aa20 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1aa20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1aa22:	460c      	mov	r4, r1
   1aa24:	4616      	mov	r6, r2
   1aa26:	461d      	mov	r5, r3
   1aa28:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   1aa2a:	f04f 0320 	mov.w	r3, #32
   1aa2e:	f3ef 8711 	mrs	r7, BASEPRI
   1aa32:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa36:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1aa3a:	4608      	mov	r0, r1
   1aa3c:	f006 fdb5 	bl	215aa <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1aa40:	ea55 0306 	orrs.w	r3, r5, r6
   1aa44:	d109      	bne.n	1aa5a <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1aa46:	4620      	mov	r0, r4
   1aa48:	a901      	add	r1, sp, #4
   1aa4a:	f7ff ff51 	bl	1a8f0 <submit_to_queue_locked>
	__asm__ volatile(
   1aa4e:	f387 8811 	msr	BASEPRI, r7
   1aa52:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1aa56:	b003      	add	sp, #12
   1aa58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1aa5a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1aa5c:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   1aa60:	f043 0308 	orr.w	r3, r3, #8
   1aa64:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1aa66:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1aa68:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   1aa6a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1aa6c:	4902      	ldr	r1, [pc, #8]	; (1aa78 <k_work_reschedule_for_queue+0x58>)
   1aa6e:	462b      	mov	r3, r5
   1aa70:	f000 fbbe 	bl	1b1f0 <z_add_timeout>
	return ret;
   1aa74:	2001      	movs	r0, #1
   1aa76:	e7ea      	b.n	1aa4e <k_work_reschedule_for_queue+0x2e>
   1aa78:	000215d7 	.word	0x000215d7

0001aa7c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1aa7c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1aa7e:	4801      	ldr	r0, [pc, #4]	; (1aa84 <k_work_reschedule+0x8>)
   1aa80:	f7ff bfce 	b.w	1aa20 <k_work_reschedule_for_queue>
   1aa84:	2000da60 	.word	0x2000da60

0001aa88 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   1aa88:	89c3      	ldrh	r3, [r0, #14]
   1aa8a:	2b7f      	cmp	r3, #127	; 0x7f
   1aa8c:	d812      	bhi.n	1aab4 <sliceable+0x2c>
	int ret = slice_ticks;
   1aa8e:	4b0a      	ldr	r3, [pc, #40]	; (1aab8 <sliceable+0x30>)
   1aa90:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   1aa92:	b163      	cbz	r3, 1aaae <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1aa94:	4b09      	ldr	r3, [pc, #36]	; (1aabc <sliceable+0x34>)
   1aa96:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1aa9a:	681b      	ldr	r3, [r3, #0]
   1aa9c:	429a      	cmp	r2, r3
   1aa9e:	db09      	blt.n	1aab4 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   1aaa0:	7b43      	ldrb	r3, [r0, #13]
   1aaa2:	06db      	lsls	r3, r3, #27
   1aaa4:	d106      	bne.n	1aab4 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   1aaa6:	4b06      	ldr	r3, [pc, #24]	; (1aac0 <sliceable+0x38>)
   1aaa8:	1ac3      	subs	r3, r0, r3
   1aaaa:	bf18      	it	ne
   1aaac:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   1aaae:	f003 0001 	and.w	r0, r3, #1
   1aab2:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   1aab4:	2300      	movs	r3, #0
   1aab6:	e7fa      	b.n	1aaae <sliceable+0x26>
   1aab8:	2000e338 	.word	0x2000e338
   1aabc:	2000e334 	.word	0x2000e334
   1aac0:	2000d8b0 	.word	0x2000d8b0

0001aac4 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
   1aac4:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   1aac6:	4b04      	ldr	r3, [pc, #16]	; (1aad8 <slice_timeout+0x14>)
   1aac8:	1ac0      	subs	r0, r0, r3
   1aaca:	4b04      	ldr	r3, [pc, #16]	; (1aadc <slice_timeout+0x18>)
   1aacc:	10c0      	asrs	r0, r0, #3
   1aace:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
   1aad0:	4b03      	ldr	r3, [pc, #12]	; (1aae0 <slice_timeout+0x1c>)
   1aad2:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   1aad4:	4770      	bx	lr
   1aad6:	bf00      	nop
   1aad8:	2000da40 	.word	0x2000da40
   1aadc:	aaaaaaab 	.word	0xaaaaaaab
   1aae0:	200110d0 	.word	0x200110d0

0001aae4 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   1aae4:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   1aae6:	4b0e      	ldr	r3, [pc, #56]	; (1ab20 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   1aae8:	4c0e      	ldr	r4, [pc, #56]	; (1ab24 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   1aaea:	7c1e      	ldrb	r6, [r3, #16]
{
   1aaec:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   1aaee:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1aaf2:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   1aaf6:	4620      	mov	r0, r4
   1aaf8:	f006 fec2 	bl	21880 <z_abort_timeout>
	slice_expired[cpu] = false;
   1aafc:	2200      	movs	r2, #0
   1aafe:	4b0a      	ldr	r3, [pc, #40]	; (1ab28 <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
   1ab00:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   1ab02:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   1ab04:	f7ff ffc0 	bl	1aa88 <sliceable>
   1ab08:	b148      	cbz	r0, 1ab1e <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   1ab0a:	4b08      	ldr	r3, [pc, #32]	; (1ab2c <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   1ab0c:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
   1ab0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
   1ab12:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   1ab14:	4906      	ldr	r1, [pc, #24]	; (1ab30 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   1ab16:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   1ab18:	17d3      	asrs	r3, r2, #31
   1ab1a:	f000 bb69 	b.w	1b1f0 <z_add_timeout>
}
   1ab1e:	bd70      	pop	{r4, r5, r6, pc}
   1ab20:	2000e2fc 	.word	0x2000e2fc
   1ab24:	2000da40 	.word	0x2000da40
   1ab28:	200110d0 	.word	0x200110d0
   1ab2c:	2000e338 	.word	0x2000e338
   1ab30:	0001aac5 	.word	0x0001aac5

0001ab34 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   1ab34:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1ab36:	4d0d      	ldr	r5, [pc, #52]	; (1ab6c <update_cache+0x38>)
   1ab38:	462b      	mov	r3, r5
   1ab3a:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ab3e:	429c      	cmp	r4, r3
   1ab40:	d000      	beq.n	1ab44 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1ab42:	b904      	cbnz	r4, 1ab46 <update_cache+0x12>
   1ab44:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1ab46:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1ab48:	b938      	cbnz	r0, 1ab5a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   1ab4a:	7b5a      	ldrb	r2, [r3, #13]
   1ab4c:	06d2      	lsls	r2, r2, #27
   1ab4e:	d104      	bne.n	1ab5a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1ab50:	69a2      	ldr	r2, [r4, #24]
   1ab52:	b912      	cbnz	r2, 1ab5a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   1ab54:	89da      	ldrh	r2, [r3, #14]
   1ab56:	2a7f      	cmp	r2, #127	; 0x7f
   1ab58:	d805      	bhi.n	1ab66 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   1ab5a:	429c      	cmp	r4, r3
   1ab5c:	d002      	beq.n	1ab64 <update_cache+0x30>
			z_reset_time_slice(thread);
   1ab5e:	4620      	mov	r0, r4
   1ab60:	f7ff ffc0 	bl	1aae4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   1ab64:	4623      	mov	r3, r4
   1ab66:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   1ab68:	bd38      	pop	{r3, r4, r5, pc}
   1ab6a:	bf00      	nop
   1ab6c:	2000e2fc 	.word	0x2000e2fc

0001ab70 <move_thread_to_end_of_prio_q>:
{
   1ab70:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1ab72:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   1ab76:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1ab78:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   1ab7a:	7b43      	ldrb	r3, [r0, #13]
   1ab7c:	da04      	bge.n	1ab88 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ab7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ab82:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1ab84:	f006 fd86 	bl	21694 <sys_dlist_remove>
	return list->head == list;
   1ab88:	4a15      	ldr	r2, [pc, #84]	; (1abe0 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1ab8a:	7b4b      	ldrb	r3, [r1, #13]
   1ab8c:	4610      	mov	r0, r2
   1ab8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ab92:	734b      	strb	r3, [r1, #13]
   1ab94:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1ab98:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ab9a:	4283      	cmp	r3, r0
   1ab9c:	bf08      	it	eq
   1ab9e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1aba0:	b923      	cbnz	r3, 1abac <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   1aba2:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   1aba6:	6021      	str	r1, [r4, #0]
	list->tail = node;
   1aba8:	6251      	str	r1, [r2, #36]	; 0x24
}
   1abaa:	e00c      	b.n	1abc6 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   1abac:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1abb0:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1abb4:	42b5      	cmp	r5, r6
   1abb6:	d00e      	beq.n	1abd6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1abb8:	42ae      	cmp	r6, r5
   1abba:	dd0c      	ble.n	1abd6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1abbc:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1abbe:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1abc2:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1abc4:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1abc6:	6890      	ldr	r0, [r2, #8]
}
   1abc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1abcc:	1a43      	subs	r3, r0, r1
   1abce:	4258      	negs	r0, r3
   1abd0:	4158      	adcs	r0, r3
   1abd2:	f7ff bfaf 	b.w	1ab34 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1abd6:	429c      	cmp	r4, r3
   1abd8:	d0e3      	beq.n	1aba2 <move_thread_to_end_of_prio_q+0x32>
   1abda:	681b      	ldr	r3, [r3, #0]
   1abdc:	e7e0      	b.n	1aba0 <move_thread_to_end_of_prio_q+0x30>
   1abde:	bf00      	nop
   1abe0:	2000e2fc 	.word	0x2000e2fc

0001abe4 <ready_thread>:
{
   1abe4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1abe6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1abea:	7b42      	ldrb	r2, [r0, #13]
   1abec:	2b00      	cmp	r3, #0
   1abee:	db29      	blt.n	1ac44 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1abf0:	06d3      	lsls	r3, r2, #27
   1abf2:	d127      	bne.n	1ac44 <ready_thread+0x60>
	return node->next != NULL;
   1abf4:	6983      	ldr	r3, [r0, #24]
   1abf6:	bb2b      	cbnz	r3, 1ac44 <ready_thread+0x60>
	return list->head == list;
   1abf8:	4913      	ldr	r1, [pc, #76]	; (1ac48 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1abfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1abfe:	7342      	strb	r2, [r0, #13]
   1ac00:	460a      	mov	r2, r1
   1ac02:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ac06:	4294      	cmp	r4, r2
   1ac08:	bf18      	it	ne
   1ac0a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   1ac0c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ac0e:	b923      	cbnz	r3, 1ac1a <ready_thread+0x36>
	node->prev = tail;
   1ac10:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   1ac14:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1ac16:	6248      	str	r0, [r1, #36]	; 0x24
}
   1ac18:	e00c      	b.n	1ac34 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   1ac1a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1ac1e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1ac22:	42b5      	cmp	r5, r6
   1ac24:	d00a      	beq.n	1ac3c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ac26:	42ae      	cmp	r6, r5
   1ac28:	dd08      	ble.n	1ac3c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   1ac2a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1ac2c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1ac30:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1ac32:	6058      	str	r0, [r3, #4]
		update_cache(0);
   1ac34:	2000      	movs	r0, #0
}
   1ac36:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1ac38:	f7ff bf7c 	b.w	1ab34 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1ac3c:	42a3      	cmp	r3, r4
   1ac3e:	d0e7      	beq.n	1ac10 <ready_thread+0x2c>
   1ac40:	681b      	ldr	r3, [r3, #0]
   1ac42:	e7e4      	b.n	1ac0e <ready_thread+0x2a>
}
   1ac44:	bc70      	pop	{r4, r5, r6}
   1ac46:	4770      	bx	lr
   1ac48:	2000e2fc 	.word	0x2000e2fc

0001ac4c <unready_thread>:
{
   1ac4c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1ac4e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   1ac52:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1ac54:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   1ac56:	7b43      	ldrb	r3, [r0, #13]
   1ac58:	da04      	bge.n	1ac64 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ac5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ac5e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ac60:	f006 fd18 	bl	21694 <sys_dlist_remove>
	update_cache(thread == _current);
   1ac64:	4b04      	ldr	r3, [pc, #16]	; (1ac78 <unready_thread+0x2c>)
   1ac66:	6898      	ldr	r0, [r3, #8]
   1ac68:	1a43      	subs	r3, r0, r1
   1ac6a:	4258      	negs	r0, r3
   1ac6c:	4158      	adcs	r0, r3
}
   1ac6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1ac72:	f7ff bf5f 	b.w	1ab34 <update_cache>
   1ac76:	bf00      	nop
   1ac78:	2000e2fc 	.word	0x2000e2fc

0001ac7c <pend_locked>:
{
   1ac7c:	b570      	push	{r4, r5, r6, lr}
   1ac7e:	4615      	mov	r5, r2
   1ac80:	461c      	mov	r4, r3
   1ac82:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   1ac84:	f006 fd21 	bl	216ca <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ac88:	f1b4 3fff 	cmp.w	r4, #4294967295
   1ac8c:	bf08      	it	eq
   1ac8e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1ac92:	d008      	beq.n	1aca6 <pend_locked+0x2a>
   1ac94:	462a      	mov	r2, r5
   1ac96:	4623      	mov	r3, r4
   1ac98:	f106 0018 	add.w	r0, r6, #24
   1ac9c:	4902      	ldr	r1, [pc, #8]	; (1aca8 <pend_locked+0x2c>)
}
   1ac9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1aca2:	f000 baa5 	b.w	1b1f0 <z_add_timeout>
   1aca6:	bd70      	pop	{r4, r5, r6, pc}
   1aca8:	0002177f 	.word	0x0002177f

0001acac <z_time_slice>:
{
   1acac:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1acae:	f04f 0320 	mov.w	r3, #32
   1acb2:	f3ef 8511 	mrs	r5, BASEPRI
   1acb6:	f383 8812 	msr	BASEPRI_MAX, r3
   1acba:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   1acbe:	4b10      	ldr	r3, [pc, #64]	; (1ad00 <z_time_slice+0x54>)
	if (pending_current == curr) {
   1acc0:	4a10      	ldr	r2, [pc, #64]	; (1ad04 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   1acc2:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   1acc4:	6810      	ldr	r0, [r2, #0]
   1acc6:	42a0      	cmp	r0, r4
   1acc8:	d106      	bne.n	1acd8 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   1acca:	f7ff ff0b 	bl	1aae4 <z_reset_time_slice>
	__asm__ volatile(
   1acce:	f385 8811 	msr	BASEPRI, r5
   1acd2:	f3bf 8f6f 	isb	sy
}
   1acd6:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1acd8:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   1acda:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   1acdc:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   1acde:	4a0a      	ldr	r2, [pc, #40]	; (1ad08 <z_time_slice+0x5c>)
   1ace0:	5cd3      	ldrb	r3, [r2, r3]
   1ace2:	2b00      	cmp	r3, #0
   1ace4:	d0f3      	beq.n	1acce <z_time_slice+0x22>
   1ace6:	4620      	mov	r0, r4
   1ace8:	f7ff fece 	bl	1aa88 <sliceable>
   1acec:	2800      	cmp	r0, #0
   1acee:	d0ee      	beq.n	1acce <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   1acf0:	7b63      	ldrb	r3, [r4, #13]
   1acf2:	06db      	lsls	r3, r3, #27
   1acf4:	d102      	bne.n	1acfc <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   1acf6:	4620      	mov	r0, r4
   1acf8:	f7ff ff3a 	bl	1ab70 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   1acfc:	4620      	mov	r0, r4
   1acfe:	e7e4      	b.n	1acca <z_time_slice+0x1e>
   1ad00:	2000e2fc 	.word	0x2000e2fc
   1ad04:	2000e330 	.word	0x2000e330
   1ad08:	200110d0 	.word	0x200110d0

0001ad0c <z_pend_curr>:
{
   1ad0c:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   1ad0e:	480c      	ldr	r0, [pc, #48]	; (1ad40 <z_pend_curr+0x34>)
   1ad10:	4d0c      	ldr	r5, [pc, #48]	; (1ad44 <z_pend_curr+0x38>)
   1ad12:	6886      	ldr	r6, [r0, #8]
{
   1ad14:	460c      	mov	r4, r1
	pending_current = _current;
   1ad16:	602e      	str	r6, [r5, #0]
{
   1ad18:	4611      	mov	r1, r2
   1ad1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   1ad1e:	f04f 0620 	mov.w	r6, #32
   1ad22:	f3ef 8511 	mrs	r5, BASEPRI
   1ad26:	f386 8812 	msr	BASEPRI_MAX, r6
   1ad2a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   1ad2e:	6880      	ldr	r0, [r0, #8]
   1ad30:	f7ff ffa4 	bl	1ac7c <pend_locked>
	ret = arch_swap(key);
   1ad34:	4620      	mov	r0, r4
}
   1ad36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ad3a:	f7f2 bea1 	b.w	da80 <arch_swap>
   1ad3e:	bf00      	nop
   1ad40:	2000e2fc 	.word	0x2000e2fc
   1ad44:	2000e330 	.word	0x2000e330

0001ad48 <z_set_prio>:
{
   1ad48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad4a:	4604      	mov	r4, r0
   1ad4c:	f04f 0320 	mov.w	r3, #32
   1ad50:	f3ef 8611 	mrs	r6, BASEPRI
   1ad54:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad58:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1ad5c:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   1ad5e:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ad60:	06da      	lsls	r2, r3, #27
   1ad62:	d119      	bne.n	1ad98 <z_set_prio+0x50>
	return node->next != NULL;
   1ad64:	6985      	ldr	r5, [r0, #24]
   1ad66:	b9bd      	cbnz	r5, 1ad98 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ad68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ad6c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ad6e:	f006 fc91 	bl	21694 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1ad72:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1ad74:	4a16      	ldr	r2, [pc, #88]	; (1add0 <z_set_prio+0x88>)
   1ad76:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ad7a:	7343      	strb	r3, [r0, #13]
   1ad7c:	4613      	mov	r3, r2
				thread->base.prio = prio;
   1ad7e:	7381      	strb	r1, [r0, #14]
   1ad80:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ad84:	4298      	cmp	r0, r3
   1ad86:	bf18      	it	ne
   1ad88:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   1ad8a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ad8c:	b95d      	cbnz	r5, 1ada6 <z_set_prio+0x5e>
	node->prev = tail;
   1ad8e:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   1ad92:	6004      	str	r4, [r0, #0]
	list->tail = node;
   1ad94:	6254      	str	r4, [r2, #36]	; 0x24
}
   1ad96:	e011      	b.n	1adbc <z_set_prio+0x74>
   1ad98:	2000      	movs	r0, #0
			thread->base.prio = prio;
   1ad9a:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
   1ad9c:	f386 8811 	msr	BASEPRI, r6
   1ada0:	f3bf 8f6f 	isb	sy
}
   1ada4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   1ada6:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   1adaa:	42b9      	cmp	r1, r7
   1adac:	d00b      	beq.n	1adc6 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1adae:	428f      	cmp	r7, r1
   1adb0:	dd09      	ble.n	1adc6 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   1adb2:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   1adb4:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   1adb8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1adba:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1adbc:	2001      	movs	r0, #1
   1adbe:	f7ff feb9 	bl	1ab34 <update_cache>
   1adc2:	2001      	movs	r0, #1
   1adc4:	e7ea      	b.n	1ad9c <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   1adc6:	42a8      	cmp	r0, r5
   1adc8:	d0e1      	beq.n	1ad8e <z_set_prio+0x46>
   1adca:	682d      	ldr	r5, [r5, #0]
   1adcc:	e7de      	b.n	1ad8c <z_set_prio+0x44>
   1adce:	bf00      	nop
   1add0:	2000e2fc 	.word	0x2000e2fc

0001add4 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1add4:	b949      	cbnz	r1, 1adea <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1add6:	f3ef 8005 	mrs	r0, IPSR
   1adda:	b930      	cbnz	r0, 1adea <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1addc:	4b05      	ldr	r3, [pc, #20]	; (1adf4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1adde:	69da      	ldr	r2, [r3, #28]
   1ade0:	689b      	ldr	r3, [r3, #8]
   1ade2:	429a      	cmp	r2, r3
   1ade4:	d001      	beq.n	1adea <z_reschedule+0x16>
   1ade6:	f7f2 be4b 	b.w	da80 <arch_swap>
   1adea:	f381 8811 	msr	BASEPRI, r1
   1adee:	f3bf 8f6f 	isb	sy
}
   1adf2:	4770      	bx	lr
   1adf4:	2000e2fc 	.word	0x2000e2fc

0001adf8 <z_sched_start>:
{
   1adf8:	b510      	push	{r4, lr}
	__asm__ volatile(
   1adfa:	f04f 0220 	mov.w	r2, #32
   1adfe:	f3ef 8411 	mrs	r4, BASEPRI
   1ae02:	f382 8812 	msr	BASEPRI_MAX, r2
   1ae06:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1ae0a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1ae0c:	0751      	lsls	r1, r2, #29
   1ae0e:	d404      	bmi.n	1ae1a <z_sched_start+0x22>
	__asm__ volatile(
   1ae10:	f384 8811 	msr	BASEPRI, r4
   1ae14:	f3bf 8f6f 	isb	sy
}
   1ae18:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ae1a:	f022 0204 	bic.w	r2, r2, #4
   1ae1e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1ae20:	f7ff fee0 	bl	1abe4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1ae24:	4621      	mov	r1, r4
}
   1ae26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1ae2a:	4801      	ldr	r0, [pc, #4]	; (1ae30 <z_sched_start+0x38>)
   1ae2c:	f7ff bfd2 	b.w	1add4 <z_reschedule>
   1ae30:	200110d1 	.word	0x200110d1

0001ae34 <z_impl_k_thread_suspend>:
{
   1ae34:	b570      	push	{r4, r5, r6, lr}
   1ae36:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1ae38:	3018      	adds	r0, #24
   1ae3a:	f006 fd21 	bl	21880 <z_abort_timeout>
	__asm__ volatile(
   1ae3e:	f04f 0320 	mov.w	r3, #32
   1ae42:	f3ef 8611 	mrs	r6, BASEPRI
   1ae46:	f383 8812 	msr	BASEPRI_MAX, r3
   1ae4a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1ae4e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   1ae52:	7b63      	ldrb	r3, [r4, #13]
   1ae54:	2a00      	cmp	r2, #0
   1ae56:	da05      	bge.n	1ae64 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ae58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ae5c:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ae5e:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ae60:	f006 fc18 	bl	21694 <sys_dlist_remove>
		update_cache(thread == _current);
   1ae64:	4d0b      	ldr	r5, [pc, #44]	; (1ae94 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1ae66:	7b63      	ldrb	r3, [r4, #13]
   1ae68:	68a8      	ldr	r0, [r5, #8]
   1ae6a:	f043 0310 	orr.w	r3, r3, #16
   1ae6e:	7363      	strb	r3, [r4, #13]
   1ae70:	1b03      	subs	r3, r0, r4
   1ae72:	4258      	negs	r0, r3
   1ae74:	4158      	adcs	r0, r3
   1ae76:	f7ff fe5d 	bl	1ab34 <update_cache>
	__asm__ volatile(
   1ae7a:	f386 8811 	msr	BASEPRI, r6
   1ae7e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1ae82:	68ab      	ldr	r3, [r5, #8]
   1ae84:	42a3      	cmp	r3, r4
   1ae86:	d103      	bne.n	1ae90 <z_impl_k_thread_suspend+0x5c>
}
   1ae88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1ae8c:	f006 bcbb 	b.w	21806 <z_reschedule_unlocked>
}
   1ae90:	bd70      	pop	{r4, r5, r6, pc}
   1ae92:	bf00      	nop
   1ae94:	2000e2fc 	.word	0x2000e2fc

0001ae98 <k_sched_lock>:
	__asm__ volatile(
   1ae98:	f04f 0320 	mov.w	r3, #32
   1ae9c:	f3ef 8111 	mrs	r1, BASEPRI
   1aea0:	f383 8812 	msr	BASEPRI_MAX, r3
   1aea4:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1aea8:	4b04      	ldr	r3, [pc, #16]	; (1aebc <k_sched_lock+0x24>)
   1aeaa:	689a      	ldr	r2, [r3, #8]
   1aeac:	7bd3      	ldrb	r3, [r2, #15]
   1aeae:	3b01      	subs	r3, #1
   1aeb0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1aeb2:	f381 8811 	msr	BASEPRI, r1
   1aeb6:	f3bf 8f6f 	isb	sy
}
   1aeba:	4770      	bx	lr
   1aebc:	2000e2fc 	.word	0x2000e2fc

0001aec0 <k_sched_unlock>:
{
   1aec0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1aec2:	f04f 0320 	mov.w	r3, #32
   1aec6:	f3ef 8411 	mrs	r4, BASEPRI
   1aeca:	f383 8812 	msr	BASEPRI_MAX, r3
   1aece:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1aed2:	4b08      	ldr	r3, [pc, #32]	; (1aef4 <k_sched_unlock+0x34>)
		update_cache(0);
   1aed4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1aed6:	689a      	ldr	r2, [r3, #8]
   1aed8:	7bd3      	ldrb	r3, [r2, #15]
   1aeda:	3301      	adds	r3, #1
   1aedc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1aede:	f7ff fe29 	bl	1ab34 <update_cache>
	__asm__ volatile(
   1aee2:	f384 8811 	msr	BASEPRI, r4
   1aee6:	f3bf 8f6f 	isb	sy
}
   1aeea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1aeee:	f006 bc8a 	b.w	21806 <z_reschedule_unlocked>
   1aef2:	bf00      	nop
   1aef4:	2000e2fc 	.word	0x2000e2fc

0001aef8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1aef8:	4b02      	ldr	r3, [pc, #8]	; (1af04 <z_sched_init+0xc>)
   1aefa:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1aefe:	e9c3 2208 	strd	r2, r2, [r3, #32]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   1af02:	4770      	bx	lr
   1af04:	2000e2fc 	.word	0x2000e2fc

0001af08 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   1af08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1af0a:	f04f 0320 	mov.w	r3, #32
   1af0e:	f3ef 8511 	mrs	r5, BASEPRI
   1af12:	f383 8812 	msr	BASEPRI_MAX, r3
   1af16:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1af1a:	4919      	ldr	r1, [pc, #100]	; (1af80 <z_impl_k_yield+0x78>)
   1af1c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1af1e:	7b43      	ldrb	r3, [r0, #13]
   1af20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1af24:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1af26:	f006 fbb5 	bl	21694 <sys_dlist_remove>
	return list->head == list;
   1af2a:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   1af2c:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1af2e:	7b5a      	ldrb	r2, [r3, #13]
   1af30:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1af34:	735a      	strb	r2, [r3, #13]
   1af36:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   1af3a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1af3c:	4282      	cmp	r2, r0
   1af3e:	bf08      	it	eq
   1af40:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1af42:	b922      	cbnz	r2, 1af4e <z_impl_k_yield+0x46>
	node->prev = tail;
   1af44:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   1af48:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1af4a:	624b      	str	r3, [r1, #36]	; 0x24
}
   1af4c:	e00c      	b.n	1af68 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   1af4e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1af52:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   1af56:	42be      	cmp	r6, r7
   1af58:	d00e      	beq.n	1af78 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1af5a:	42b7      	cmp	r7, r6
   1af5c:	dd0c      	ble.n	1af78 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   1af5e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1af60:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1af64:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1af66:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1af68:	2001      	movs	r0, #1
   1af6a:	f7ff fde3 	bl	1ab34 <update_cache>
   1af6e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1af70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1af74:	f7f2 bd84 	b.w	da80 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1af78:	42a2      	cmp	r2, r4
   1af7a:	d0e3      	beq.n	1af44 <z_impl_k_yield+0x3c>
   1af7c:	6812      	ldr	r2, [r2, #0]
   1af7e:	e7e0      	b.n	1af42 <z_impl_k_yield+0x3a>
   1af80:	2000e2fc 	.word	0x2000e2fc

0001af84 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1af84:	ea50 0301 	orrs.w	r3, r0, r1
{
   1af88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af8c:	4605      	mov	r5, r0
   1af8e:	460e      	mov	r6, r1
	if (ticks == 0) {
   1af90:	d103      	bne.n	1af9a <z_tick_sleep+0x16>
	z_impl_k_yield();
   1af92:	f7ff ffb9 	bl	1af08 <z_impl_k_yield>
		k_yield();
		return 0;
   1af96:	2000      	movs	r0, #0
   1af98:	e02c      	b.n	1aff4 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   1af9a:	1c83      	adds	r3, r0, #2
   1af9c:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   1afa0:	db2a      	blt.n	1aff8 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1afa2:	f006 fc93 	bl	218cc <sys_clock_tick_get_32>
   1afa6:	182c      	adds	r4, r5, r0
   1afa8:	f04f 0320 	mov.w	r3, #32
   1afac:	f3ef 8811 	mrs	r8, BASEPRI
   1afb0:	f383 8812 	msr	BASEPRI_MAX, r3
   1afb4:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1afb8:	4f11      	ldr	r7, [pc, #68]	; (1b000 <z_tick_sleep+0x7c>)
   1afba:	4b12      	ldr	r3, [pc, #72]	; (1b004 <z_tick_sleep+0x80>)
   1afbc:	68b8      	ldr	r0, [r7, #8]
   1afbe:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1afc0:	f7ff fe44 	bl	1ac4c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1afc4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1afc6:	4910      	ldr	r1, [pc, #64]	; (1b008 <z_tick_sleep+0x84>)
   1afc8:	462a      	mov	r2, r5
   1afca:	4633      	mov	r3, r6
   1afcc:	3018      	adds	r0, #24
   1afce:	f000 f90f 	bl	1b1f0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1afd2:	68ba      	ldr	r2, [r7, #8]
   1afd4:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1afd6:	7b53      	ldrb	r3, [r2, #13]
   1afd8:	f043 0310 	orr.w	r3, r3, #16
   1afdc:	7353      	strb	r3, [r2, #13]
   1afde:	f7f2 fd4f 	bl	da80 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1afe2:	f006 fc73 	bl	218cc <sys_clock_tick_get_32>
   1afe6:	1a20      	subs	r0, r4, r0
   1afe8:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1afec:	2801      	cmp	r0, #1
   1afee:	f173 0300 	sbcs.w	r3, r3, #0
   1aff2:	dbd0      	blt.n	1af96 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   1aff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1aff8:	f06f 0401 	mvn.w	r4, #1
   1affc:	1a24      	subs	r4, r4, r0
   1affe:	e7d3      	b.n	1afa8 <z_tick_sleep+0x24>
   1b000:	2000e2fc 	.word	0x2000e2fc
   1b004:	2000e330 	.word	0x2000e330
   1b008:	0002177f 	.word	0x0002177f

0001b00c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b00c:	f1b1 3fff 	cmp.w	r1, #4294967295
   1b010:	bf08      	it	eq
   1b012:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1b016:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b018:	d106      	bne.n	1b028 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1b01a:	4b08      	ldr	r3, [pc, #32]	; (1b03c <z_impl_k_sleep+0x30>)
   1b01c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1b01e:	f7ff ff09 	bl	1ae34 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1b022:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1b026:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1b028:	f7ff ffac 	bl	1af84 <z_tick_sleep>
   1b02c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1b030:	fb80 0303 	smull	r0, r3, r0, r3
   1b034:	0bc0      	lsrs	r0, r0, #15
   1b036:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1b03a:	e7f4      	b.n	1b026 <z_impl_k_sleep+0x1a>
   1b03c:	2000e2fc 	.word	0x2000e2fc

0001b040 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1b040:	4b01      	ldr	r3, [pc, #4]	; (1b048 <z_impl_z_current_get+0x8>)
   1b042:	6898      	ldr	r0, [r3, #8]
   1b044:	4770      	bx	lr
   1b046:	bf00      	nop
   1b048:	2000e2fc 	.word	0x2000e2fc

0001b04c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1b04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b050:	4604      	mov	r4, r0
   1b052:	f04f 0320 	mov.w	r3, #32
   1b056:	f3ef 8611 	mrs	r6, BASEPRI
   1b05a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b05e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   1b062:	7b03      	ldrb	r3, [r0, #12]
   1b064:	07d9      	lsls	r1, r3, #31
   1b066:	d50b      	bpl.n	1b080 <z_thread_abort+0x34>
	__asm__ volatile(
   1b068:	f386 8811 	msr	BASEPRI, r6
   1b06c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   1b070:	4040      	eors	r0, r0
   1b072:	f380 8811 	msr	BASEPRI, r0
   1b076:	f04f 0004 	mov.w	r0, #4
   1b07a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1b07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1b080:	7b43      	ldrb	r3, [r0, #13]
   1b082:	071a      	lsls	r2, r3, #28
   1b084:	d504      	bpl.n	1b090 <z_thread_abort+0x44>
   1b086:	f386 8811 	msr	BASEPRI, r6
   1b08a:	f3bf 8f6f 	isb	sy
   1b08e:	e7f5      	b.n	1b07c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1b090:	f023 0220 	bic.w	r2, r3, #32
   1b094:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1b098:	09d2      	lsrs	r2, r2, #7
   1b09a:	d120      	bne.n	1b0de <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1b09c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1b09e:	68a3      	ldr	r3, [r4, #8]
   1b0a0:	b113      	cbz	r3, 1b0a8 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   1b0a2:	4620      	mov	r0, r4
   1b0a4:	f006 fafe 	bl	216a4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1b0a8:	f104 0018 	add.w	r0, r4, #24
   1b0ac:	f006 fbe8 	bl	21880 <z_abort_timeout>
   1b0b0:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1b0b4:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   1b0b8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b0ba:	42bd      	cmp	r5, r7
   1b0bc:	d000      	beq.n	1b0c0 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1b0be:	b9b5      	cbnz	r5, 1b0ee <z_thread_abort+0xa2>
		update_cache(1);
   1b0c0:	2001      	movs	r0, #1
   1b0c2:	f7ff fd37 	bl	1ab34 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1b0c6:	4b10      	ldr	r3, [pc, #64]	; (1b108 <z_thread_abort+0xbc>)
   1b0c8:	689b      	ldr	r3, [r3, #8]
   1b0ca:	42a3      	cmp	r3, r4
   1b0cc:	d1db      	bne.n	1b086 <z_thread_abort+0x3a>
   1b0ce:	f3ef 8305 	mrs	r3, IPSR
   1b0d2:	2b00      	cmp	r3, #0
   1b0d4:	d1d7      	bne.n	1b086 <z_thread_abort+0x3a>
   1b0d6:	4630      	mov	r0, r6
   1b0d8:	f7f2 fcd2 	bl	da80 <arch_swap>
	return ret;
   1b0dc:	e7d3      	b.n	1b086 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b0de:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1b0e2:	f043 0308 	orr.w	r3, r3, #8
   1b0e6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b0e8:	f006 fad4 	bl	21694 <sys_dlist_remove>
}
   1b0ec:	e7d7      	b.n	1b09e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   1b0ee:	4628      	mov	r0, r5
   1b0f0:	f006 fad8 	bl	216a4 <unpend_thread_no_timeout>
   1b0f4:	f105 0018 	add.w	r0, r5, #24
   1b0f8:	f006 fbc2 	bl	21880 <z_abort_timeout>
		ready_thread(thread);
   1b0fc:	4628      	mov	r0, r5
   1b0fe:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   1b102:	f7ff fd6f 	bl	1abe4 <ready_thread>
   1b106:	e7d7      	b.n	1b0b8 <z_thread_abort+0x6c>
   1b108:	2000e2fc 	.word	0x2000e2fc

0001b10c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1b10c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1b10e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1b112:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1b114:	e9cd 6700 	strd	r6, r7, [sp]
   1b118:	f7ff fdf8 	bl	1ad0c <z_pend_curr>

	if (data != NULL) {
   1b11c:	b11c      	cbz	r4, 1b126 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1b11e:	4b03      	ldr	r3, [pc, #12]	; (1b12c <z_sched_wait+0x20>)
   1b120:	689b      	ldr	r3, [r3, #8]
   1b122:	695b      	ldr	r3, [r3, #20]
   1b124:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1b126:	b002      	add	sp, #8
   1b128:	bdd0      	pop	{r4, r6, r7, pc}
   1b12a:	bf00      	nop
   1b12c:	2000e2fc 	.word	0x2000e2fc

0001b130 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1b130:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1b132:	4806      	ldr	r0, [pc, #24]	; (1b14c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   1b134:	4a06      	ldr	r2, [pc, #24]	; (1b150 <z_data_copy+0x20>)
   1b136:	4907      	ldr	r1, [pc, #28]	; (1b154 <z_data_copy+0x24>)
   1b138:	1a12      	subs	r2, r2, r0
   1b13a:	f006 f8e6 	bl	2130a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1b13e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1b142:	4a05      	ldr	r2, [pc, #20]	; (1b158 <z_data_copy+0x28>)
   1b144:	4905      	ldr	r1, [pc, #20]	; (1b15c <z_data_copy+0x2c>)
   1b146:	4806      	ldr	r0, [pc, #24]	; (1b160 <z_data_copy+0x30>)
   1b148:	f006 b8df 	b.w	2130a <z_early_memcpy>
   1b14c:	2000c580 	.word	0x2000c580
   1b150:	2000cb64 	.word	0x2000cb64
   1b154:	00027e34 	.word	0x00027e34
   1b158:	00000000 	.word	0x00000000
   1b15c:	00027e1c 	.word	0x00027e1c
   1b160:	2000c580 	.word	0x2000c580

0001b164 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1b164:	4b03      	ldr	r3, [pc, #12]	; (1b174 <elapsed+0x10>)
   1b166:	681b      	ldr	r3, [r3, #0]
   1b168:	b90b      	cbnz	r3, 1b16e <elapsed+0xa>
   1b16a:	f7f6 b807 	b.w	1117c <sys_clock_elapsed>
}
   1b16e:	2000      	movs	r0, #0
   1b170:	4770      	bx	lr
   1b172:	bf00      	nop
   1b174:	2000e33c 	.word	0x2000e33c

0001b178 <next_timeout>:

static int32_t next_timeout(void)
{
   1b178:	b510      	push	{r4, lr}
	return list->head == list;
   1b17a:	4b0e      	ldr	r3, [pc, #56]	; (1b1b4 <next_timeout+0x3c>)
   1b17c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b17e:	429c      	cmp	r4, r3
   1b180:	d104      	bne.n	1b18c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1b182:	f7ff ffef 	bl	1b164 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   1b186:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   1b18a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   1b18c:	f7ff ffea 	bl	1b164 <elapsed>
	if ((to == NULL) ||
   1b190:	2c00      	cmp	r4, #0
   1b192:	d0f8      	beq.n	1b186 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1b194:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   1b198:	1a1b      	subs	r3, r3, r0
   1b19a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   1b19e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1b1a2:	f172 0100 	sbcs.w	r1, r2, #0
   1b1a6:	daee      	bge.n	1b186 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   1b1a8:	2a00      	cmp	r2, #0
   1b1aa:	bfac      	ite	ge
   1b1ac:	4618      	movge	r0, r3
   1b1ae:	2000      	movlt	r0, #0
	return ret;
   1b1b0:	e7eb      	b.n	1b18a <next_timeout+0x12>
   1b1b2:	bf00      	nop
   1b1b4:	2000c6e0 	.word	0x2000c6e0

0001b1b8 <remove_timeout>:
{
   1b1b8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b1ba:	b170      	cbz	r0, 1b1da <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1b1bc:	4b0b      	ldr	r3, [pc, #44]	; (1b1ec <remove_timeout+0x34>)
   1b1be:	685b      	ldr	r3, [r3, #4]
   1b1c0:	4298      	cmp	r0, r3
   1b1c2:	d00a      	beq.n	1b1da <remove_timeout+0x22>
   1b1c4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   1b1c6:	b143      	cbz	r3, 1b1da <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1b1c8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1b1cc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1b1d0:	1912      	adds	r2, r2, r4
   1b1d2:	eb41 0105 	adc.w	r1, r1, r5
   1b1d6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   1b1da:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   1b1de:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1b1e0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b1e2:	2300      	movs	r3, #0
	node->prev = NULL;
   1b1e4:	e9c0 3300 	strd	r3, r3, [r0]
}
   1b1e8:	bd30      	pop	{r4, r5, pc}
   1b1ea:	bf00      	nop
   1b1ec:	2000c6e0 	.word	0x2000c6e0

0001b1f0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
   1b1f4:	bf08      	it	eq
   1b1f6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1b1fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b1fc:	4604      	mov	r4, r0
   1b1fe:	461d      	mov	r5, r3
   1b200:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b202:	d05c      	beq.n	1b2be <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1b204:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1b206:	f04f 0320 	mov.w	r3, #32
   1b20a:	f3ef 8711 	mrs	r7, BASEPRI
   1b20e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b212:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1b216:	3201      	adds	r2, #1
   1b218:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   1b21c:	da24      	bge.n	1b268 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1b21e:	f06f 0301 	mvn.w	r3, #1
   1b222:	492c      	ldr	r1, [pc, #176]	; (1b2d4 <z_add_timeout+0xe4>)
   1b224:	e9d1 2000 	ldrd	r2, r0, [r1]
   1b228:	1a9b      	subs	r3, r3, r2
   1b22a:	f04f 32ff 	mov.w	r2, #4294967295
   1b22e:	eb62 0000 	sbc.w	r0, r2, r0
   1b232:	1b9e      	subs	r6, r3, r6
   1b234:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   1b238:	2e01      	cmp	r6, #1
   1b23a:	f170 0300 	sbcs.w	r3, r0, #0
   1b23e:	da01      	bge.n	1b244 <z_add_timeout+0x54>
   1b240:	2601      	movs	r6, #1
   1b242:	2000      	movs	r0, #0
   1b244:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   1b248:	4e23      	ldr	r6, [pc, #140]	; (1b2d8 <z_add_timeout+0xe8>)
   1b24a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   1b24e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b250:	45b4      	cmp	ip, r6
   1b252:	bf08      	it	eq
   1b254:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   1b258:	f1bc 0f00 	cmp.w	ip, #0
   1b25c:	d10d      	bne.n	1b27a <z_add_timeout+0x8a>
	node->prev = tail;
   1b25e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   1b262:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1b264:	6074      	str	r4, [r6, #4]
}
   1b266:	e01c      	b.n	1b2a2 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   1b268:	f7ff ff7c 	bl	1b164 <elapsed>
   1b26c:	3601      	adds	r6, #1
   1b26e:	f145 0500 	adc.w	r5, r5, #0
   1b272:	1836      	adds	r6, r6, r0
   1b274:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   1b278:	e7e4      	b.n	1b244 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   1b27a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   1b27e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   1b282:	4293      	cmp	r3, r2
   1b284:	eb71 0e00 	sbcs.w	lr, r1, r0
   1b288:	da1a      	bge.n	1b2c0 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   1b28a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   1b28c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1b290:	eb60 0001 	sbc.w	r0, r0, r1
   1b294:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   1b298:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   1b29c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1b29e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   1b2a2:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b2a4:	42b3      	cmp	r3, r6
   1b2a6:	d006      	beq.n	1b2b6 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1b2a8:	429c      	cmp	r4, r3
   1b2aa:	d104      	bne.n	1b2b6 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   1b2ac:	f7ff ff64 	bl	1b178 <next_timeout>
   1b2b0:	2100      	movs	r1, #0
   1b2b2:	f7f5 ff31 	bl	11118 <sys_clock_set_timeout>
	__asm__ volatile(
   1b2b6:	f387 8811 	msr	BASEPRI, r7
   1b2ba:	f3bf 8f6f 	isb	sy
		}
	}
}
   1b2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   1b2c0:	1a9b      	subs	r3, r3, r2
   1b2c2:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1b2c6:	45ac      	cmp	ip, r5
   1b2c8:	e9c4 3104 	strd	r3, r1, [r4, #16]
   1b2cc:	d0c7      	beq.n	1b25e <z_add_timeout+0x6e>
   1b2ce:	f8dc c000 	ldr.w	ip, [ip]
   1b2d2:	e7c1      	b.n	1b258 <z_add_timeout+0x68>
   1b2d4:	2000da58 	.word	0x2000da58
   1b2d8:	2000c6e0 	.word	0x2000c6e0

0001b2dc <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   1b2dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   1b2e0:	f04f 0320 	mov.w	r3, #32
   1b2e4:	f3ef 8711 	mrs	r7, BASEPRI
   1b2e8:	f383 8812 	msr	BASEPRI_MAX, r3
   1b2ec:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1b2f0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 1b3ac <sys_clock_announce+0xd0>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1b2f4:	4e2b      	ldr	r6, [pc, #172]	; (1b3a4 <sys_clock_announce+0xc8>)
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
   1b2f6:	f04f 0a00 	mov.w	sl, #0
	announce_remaining = ticks;
   1b2fa:	6030      	str	r0, [r6, #0]
   1b2fc:	f8d9 0000 	ldr.w	r0, [r9]
		t->dticks = 0;
   1b300:	f04f 0b00 	mov.w	fp, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b304:	4548      	cmp	r0, r9
   1b306:	bf08      	it	eq
   1b308:	2000      	moveq	r0, #0
		curr_tick += dt;
   1b30a:	4c27      	ldr	r4, [pc, #156]	; (1b3a8 <sys_clock_announce+0xcc>)
   1b30c:	463d      	mov	r5, r7
   1b30e:	e9d4 1e00 	ldrd	r1, lr, [r4]
	     (t != NULL) && (t->dticks <= announce_remaining);
   1b312:	6833      	ldr	r3, [r6, #0]
   1b314:	b388      	cbz	r0, 1b37a <sys_clock_announce+0x9e>
   1b316:	e9d0 8704 	ldrd	r8, r7, [r0, #16]
   1b31a:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   1b31e:	4543      	cmp	r3, r8
   1b320:	eb7c 0207 	sbcs.w	r2, ip, r7
   1b324:	da06      	bge.n	1b334 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   1b326:	ebb8 0203 	subs.w	r2, r8, r3
   1b32a:	eb67 070c 	sbc.w	r7, r7, ip
   1b32e:	e9c0 2704 	strd	r2, r7, [r0, #16]
   1b332:	e022      	b.n	1b37a <sys_clock_announce+0x9e>
		curr_tick += dt;
   1b334:	eb18 0101 	adds.w	r1, r8, r1
   1b338:	eb4e 73e8 	adc.w	r3, lr, r8, asr #31
		t->dticks = 0;
   1b33c:	e9c0 ab04 	strd	sl, fp, [r0, #16]
		curr_tick += dt;
   1b340:	e9c4 1300 	strd	r1, r3, [r4]
		remove_timeout(t);
   1b344:	f7ff ff38 	bl	1b1b8 <remove_timeout>
	__asm__ volatile(
   1b348:	f385 8811 	msr	BASEPRI, r5
   1b34c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1b350:	6883      	ldr	r3, [r0, #8]
   1b352:	4798      	blx	r3
	__asm__ volatile(
   1b354:	f04f 0320 	mov.w	r3, #32
   1b358:	f3ef 8511 	mrs	r5, BASEPRI
   1b35c:	f383 8812 	msr	BASEPRI_MAX, r3
   1b360:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   1b364:	6833      	ldr	r3, [r6, #0]
	return list->head == list;
   1b366:	f8d9 0000 	ldr.w	r0, [r9]
   1b36a:	eba3 0308 	sub.w	r3, r3, r8
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b36e:	4548      	cmp	r0, r9
	k.key = arch_irq_lock();
   1b370:	462f      	mov	r7, r5
   1b372:	6033      	str	r3, [r6, #0]
   1b374:	d1ca      	bne.n	1b30c <sys_clock_announce+0x30>
		curr_tick += dt;
   1b376:	e9d4 1e00 	ldrd	r1, lr, [r4]
	}

	curr_tick += announce_remaining;
   1b37a:	1859      	adds	r1, r3, r1
   1b37c:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
   1b380:	e9c4 1300 	strd	r1, r3, [r4]
	announce_remaining = 0;
   1b384:	2400      	movs	r4, #0
   1b386:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1b388:	f7ff fef6 	bl	1b178 <next_timeout>
   1b38c:	4621      	mov	r1, r4
   1b38e:	f7f5 fec3 	bl	11118 <sys_clock_set_timeout>
	__asm__ volatile(
   1b392:	f385 8811 	msr	BASEPRI, r5
   1b396:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   1b39a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   1b39e:	f7ff bc85 	b.w	1acac <z_time_slice>
   1b3a2:	bf00      	nop
   1b3a4:	2000e33c 	.word	0x2000e33c
   1b3a8:	2000da58 	.word	0x2000da58
   1b3ac:	2000c6e0 	.word	0x2000c6e0

0001b3b0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1b3b0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b3b2:	f04f 0320 	mov.w	r3, #32
   1b3b6:	f3ef 8411 	mrs	r4, BASEPRI
   1b3ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1b3be:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   1b3c2:	f7ff fecf 	bl	1b164 <elapsed>
   1b3c6:	4603      	mov	r3, r0
   1b3c8:	4a05      	ldr	r2, [pc, #20]	; (1b3e0 <sys_clock_tick_get+0x30>)
   1b3ca:	e9d2 0100 	ldrd	r0, r1, [r2]
   1b3ce:	1818      	adds	r0, r3, r0
   1b3d0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   1b3d4:	f384 8811 	msr	BASEPRI, r4
   1b3d8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1b3dc:	bd10      	pop	{r4, pc}
   1b3de:	bf00      	nop
   1b3e0:	2000da58 	.word	0x2000da58

0001b3e4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1b3e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1b3e8:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1b3ea:	4b29      	ldr	r3, [pc, #164]	; (1b490 <z_impl_k_poll+0xac>)
{
   1b3ec:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   1b3ee:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   1b3f0:	2301      	movs	r3, #1
   1b3f2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1b3f6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1b3fa:	ea52 0305 	orrs.w	r3, r2, r5
   1b3fe:	bf0c      	ite	eq
   1b400:	2301      	moveq	r3, #1
   1b402:	2300      	movne	r3, #0
   1b404:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1b408:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1b40a:	f006 fabc 	bl	21986 <register_events>
   1b40e:	4681      	mov	r9, r0
	__asm__ volatile(
   1b410:	f04f 0320 	mov.w	r3, #32
   1b414:	f3ef 8a11 	mrs	sl, BASEPRI
   1b418:	f383 8812 	msr	BASEPRI_MAX, r3
   1b41c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1b420:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1b424:	b964      	cbnz	r4, 1b440 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1b426:	4601      	mov	r1, r0
   1b428:	4652      	mov	r2, sl
   1b42a:	4640      	mov	r0, r8
   1b42c:	f006 fb7c 	bl	21b28 <clear_event_registrations>
	__asm__ volatile(
   1b430:	f38a 8811 	msr	BASEPRI, sl
   1b434:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1b438:	4620      	mov	r0, r4
   1b43a:	b002      	add	sp, #8
   1b43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1b440:	2300      	movs	r3, #0
   1b442:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b446:	ea56 0305 	orrs.w	r3, r6, r5
   1b44a:	d106      	bne.n	1b45a <z_impl_k_poll+0x76>
   1b44c:	f38a 8811 	msr	BASEPRI, sl
   1b450:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1b454:	f06f 040a 	mvn.w	r4, #10
   1b458:	e7ee      	b.n	1b438 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1b45a:	4651      	mov	r1, sl
   1b45c:	e9cd 6500 	strd	r6, r5, [sp]
   1b460:	4a0c      	ldr	r2, [pc, #48]	; (1b494 <z_impl_k_poll+0xb0>)
   1b462:	480d      	ldr	r0, [pc, #52]	; (1b498 <z_impl_k_poll+0xb4>)
   1b464:	f7ff fc52 	bl	1ad0c <z_pend_curr>
   1b468:	4604      	mov	r4, r0
	__asm__ volatile(
   1b46a:	f04f 0320 	mov.w	r3, #32
   1b46e:	f3ef 8511 	mrs	r5, BASEPRI
   1b472:	f383 8812 	msr	BASEPRI_MAX, r3
   1b476:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1b47a:	462a      	mov	r2, r5
   1b47c:	4649      	mov	r1, r9
   1b47e:	4640      	mov	r0, r8
   1b480:	f006 fb52 	bl	21b28 <clear_event_registrations>
	__asm__ volatile(
   1b484:	f385 8811 	msr	BASEPRI, r5
   1b488:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1b48c:	e7d4      	b.n	1b438 <z_impl_k_poll+0x54>
   1b48e:	bf00      	nop
   1b490:	2000e2fc 	.word	0x2000e2fc
   1b494:	2000c6e8 	.word	0x2000c6e8
   1b498:	200110d1 	.word	0x200110d1

0001b49c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1b49c:	b538      	push	{r3, r4, r5, lr}
   1b49e:	4603      	mov	r3, r0
	__asm__ volatile(
   1b4a0:	f04f 0220 	mov.w	r2, #32
   1b4a4:	f3ef 8511 	mrs	r5, BASEPRI
   1b4a8:	f382 8812 	msr	BASEPRI_MAX, r2
   1b4ac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1b4b0:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1b4b2:	2101      	movs	r1, #1
   1b4b4:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1b4b6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1b4b8:	4283      	cmp	r3, r0
   1b4ba:	d106      	bne.n	1b4ca <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1b4bc:	f385 8811 	msr	BASEPRI, r5
   1b4c0:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1b4c4:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1b4c6:	4620      	mov	r0, r4
   1b4c8:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1b4ca:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1b4ce:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1b4d0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b4d2:	2300      	movs	r3, #0
	node->prev = NULL;
   1b4d4:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1b4d8:	f006 facc 	bl	21a74 <signal_poll_event>
	z_reschedule(&lock, key);
   1b4dc:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1b4de:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1b4e0:	4801      	ldr	r0, [pc, #4]	; (1b4e8 <z_impl_k_poll_signal_raise+0x4c>)
   1b4e2:	f7ff fc77 	bl	1add4 <z_reschedule>
	return rc;
   1b4e6:	e7ee      	b.n	1b4c6 <z_impl_k_poll_signal_raise+0x2a>
   1b4e8:	200110d1 	.word	0x200110d1

0001b4ec <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   1b4ec:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1b4ee:	4601      	mov	r1, r0
   1b4f0:	4801      	ldr	r0, [pc, #4]	; (1b4f8 <k_aligned_alloc+0xc>)
   1b4f2:	f006 bb6f 	b.w	21bd4 <z_heap_aligned_alloc>
   1b4f6:	bf00      	nop
   1b4f8:	2000c968 	.word	0x2000c968

0001b4fc <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   1b4fc:	4b01      	ldr	r3, [pc, #4]	; (1b504 <k_thread_system_pool_assign+0x8>)
   1b4fe:	6743      	str	r3, [r0, #116]	; 0x74
}
   1b500:	4770      	bx	lr
   1b502:	bf00      	nop
   1b504:	2000c968 	.word	0x2000c968

0001b508 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1b508:	b538      	push	{r3, r4, r5, lr}
   1b50a:	4604      	mov	r4, r0
   1b50c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1b50e:	f005 ff91 	bl	21434 <k_is_in_isr>
   1b512:	b920      	cbnz	r0, 1b51e <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1b514:	4b06      	ldr	r3, [pc, #24]	; (1b530 <z_thread_aligned_alloc+0x28>)
   1b516:	689b      	ldr	r3, [r3, #8]
   1b518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1b51a:	b90b      	cbnz	r3, 1b520 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   1b51c:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   1b51e:	4b05      	ldr	r3, [pc, #20]	; (1b534 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   1b520:	462a      	mov	r2, r5
   1b522:	4621      	mov	r1, r4
   1b524:	4618      	mov	r0, r3
}
   1b526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1b52a:	f006 bb53 	b.w	21bd4 <z_heap_aligned_alloc>
   1b52e:	bf00      	nop
   1b530:	2000e2fc 	.word	0x2000e2fc
   1b534:	2000c968 	.word	0x2000c968

0001b538 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   1b538:	4801      	ldr	r0, [pc, #4]	; (1b540 <boot_banner+0x8>)
   1b53a:	f002 bdcf 	b.w	1e0dc <printk>
   1b53e:	bf00      	nop
   1b540:	00027a90 	.word	0x00027a90

0001b544 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   1b544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   1b546:	2400      	movs	r4, #0
   1b548:	4b08      	ldr	r3, [pc, #32]	; (1b56c <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1b54a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
	struct k_work_queue_config cfg = {
   1b54e:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   1b550:	ab02      	add	r3, sp, #8
   1b552:	9300      	str	r3, [sp, #0]
   1b554:	4906      	ldr	r1, [pc, #24]	; (1b570 <k_sys_work_q_init+0x2c>)
   1b556:	f04f 33ff 	mov.w	r3, #4294967295
   1b55a:	4806      	ldr	r0, [pc, #24]	; (1b574 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1b55c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1b560:	f7ff fa26 	bl	1a9b0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1b564:	4620      	mov	r0, r4
   1b566:	b004      	add	sp, #16
   1b568:	bd10      	pop	{r4, pc}
   1b56a:	bf00      	nop
   1b56c:	00027abe 	.word	0x00027abe
   1b570:	20014518 	.word	0x20014518
   1b574:	2000da60 	.word	0x2000da60

0001b578 <gmtime_r>:
   1b578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b57c:	4a4c      	ldr	r2, [pc, #304]	; (1b6b0 <gmtime_r+0x138>)
   1b57e:	460c      	mov	r4, r1
   1b580:	2300      	movs	r3, #0
   1b582:	e9d0 0100 	ldrd	r0, r1, [r0]
   1b586:	f7ed fae3 	bl	8b50 <__aeabi_ldivmod>
   1b58a:	2a00      	cmp	r2, #0
   1b58c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1b590:	f500 202f 	add.w	r0, r0, #716800	; 0xaf000
   1b594:	bfb7      	itett	lt
   1b596:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   1b59a:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
   1b59e:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
   1b5a2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   1b5a6:	fbb2 f3f1 	udiv	r3, r2, r1
   1b5aa:	fb01 2213 	mls	r2, r1, r3, r2
   1b5ae:	213c      	movs	r1, #60	; 0x3c
   1b5b0:	60a3      	str	r3, [r4, #8]
   1b5b2:	fbb2 f3f1 	udiv	r3, r2, r1
   1b5b6:	fb01 2213 	mls	r2, r1, r3, r2
   1b5ba:	493e      	ldr	r1, [pc, #248]	; (1b6b4 <gmtime_r+0x13c>)
   1b5bc:	6063      	str	r3, [r4, #4]
   1b5be:	1cc3      	adds	r3, r0, #3
   1b5c0:	6022      	str	r2, [r4, #0]
   1b5c2:	2207      	movs	r2, #7
   1b5c4:	fb93 f2f2 	sdiv	r2, r3, r2
   1b5c8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   1b5cc:	1a9b      	subs	r3, r3, r2
   1b5ce:	d555      	bpl.n	1b67c <gmtime_r+0x104>
   1b5d0:	3307      	adds	r3, #7
   1b5d2:	61a3      	str	r3, [r4, #24]
   1b5d4:	f5a0 330e 	sub.w	r3, r0, #145408	; 0x23800
   1b5d8:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
   1b5dc:	fb93 f1f1 	sdiv	r1, r3, r1
   1b5e0:	4b35      	ldr	r3, [pc, #212]	; (1b6b8 <gmtime_r+0x140>)
   1b5e2:	f240 5cb4 	movw	ip, #1460	; 0x5b4
   1b5e6:	f240 176d 	movw	r7, #365	; 0x16d
   1b5ea:	2664      	movs	r6, #100	; 0x64
   1b5ec:	fb03 0001 	mla	r0, r3, r1, r0
   1b5f0:	f648 63ac 	movw	r3, #36524	; 0x8eac
   1b5f4:	f04f 0805 	mov.w	r8, #5
   1b5f8:	fbb0 f3f3 	udiv	r3, r0, r3
   1b5fc:	fbb0 f2fc 	udiv	r2, r0, ip
   1b600:	4403      	add	r3, r0
   1b602:	1a9b      	subs	r3, r3, r2
   1b604:	4a2d      	ldr	r2, [pc, #180]	; (1b6bc <gmtime_r+0x144>)
   1b606:	fbb0 f2f2 	udiv	r2, r0, r2
   1b60a:	1a9b      	subs	r3, r3, r2
   1b60c:	fbb3 f2f7 	udiv	r2, r3, r7
   1b610:	fbb3 f3fc 	udiv	r3, r3, ip
   1b614:	fbb2 f5f6 	udiv	r5, r2, r6
   1b618:	1aeb      	subs	r3, r5, r3
   1b61a:	4403      	add	r3, r0
   1b61c:	2099      	movs	r0, #153	; 0x99
   1b61e:	fb07 3312 	mls	r3, r7, r2, r3
   1b622:	eb03 0783 	add.w	r7, r3, r3, lsl #2
   1b626:	f103 0e01 	add.w	lr, r3, #1
   1b62a:	3702      	adds	r7, #2
   1b62c:	fbb7 fcf0 	udiv	ip, r7, r0
   1b630:	fb00 f00c 	mul.w	r0, r0, ip
   1b634:	3002      	adds	r0, #2
   1b636:	fbb0 f0f8 	udiv	r0, r0, r8
   1b63a:	ebae 0000 	sub.w	r0, lr, r0
   1b63e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
   1b642:	4577      	cmp	r7, lr
   1b644:	bf8c      	ite	hi
   1b646:	f06f 0709 	mvnhi.w	r7, #9
   1b64a:	2702      	movls	r7, #2
   1b64c:	4467      	add	r7, ip
   1b64e:	f44f 7cc8 	mov.w	ip, #400	; 0x190
   1b652:	fb0c 2101 	mla	r1, ip, r1, r2
   1b656:	2f01      	cmp	r7, #1
   1b658:	bf98      	it	ls
   1b65a:	3101      	addls	r1, #1
   1b65c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   1b660:	d312      	bcc.n	1b688 <gmtime_r+0x110>
   1b662:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
   1b666:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
   1b66a:	61e3      	str	r3, [r4, #28]
   1b66c:	2300      	movs	r3, #0
   1b66e:	60e0      	str	r0, [r4, #12]
   1b670:	4620      	mov	r0, r4
   1b672:	6223      	str	r3, [r4, #32]
   1b674:	e9c4 7104 	strd	r7, r1, [r4, #16]
   1b678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b67c:	2800      	cmp	r0, #0
   1b67e:	61a3      	str	r3, [r4, #24]
   1b680:	dba8      	blt.n	1b5d4 <gmtime_r+0x5c>
   1b682:	fb90 f1f1 	sdiv	r1, r0, r1
   1b686:	e7ab      	b.n	1b5e0 <gmtime_r+0x68>
   1b688:	f012 0f03 	tst.w	r2, #3
   1b68c:	d102      	bne.n	1b694 <gmtime_r+0x11c>
   1b68e:	fb06 2515 	mls	r5, r6, r5, r2
   1b692:	b95d      	cbnz	r5, 1b6ac <gmtime_r+0x134>
   1b694:	f44f 75c8 	mov.w	r5, #400	; 0x190
   1b698:	fbb2 f6f5 	udiv	r6, r2, r5
   1b69c:	fb05 2216 	mls	r2, r5, r6, r2
   1b6a0:	fab2 f282 	clz	r2, r2
   1b6a4:	0952      	lsrs	r2, r2, #5
   1b6a6:	333b      	adds	r3, #59	; 0x3b
   1b6a8:	4413      	add	r3, r2
   1b6aa:	e7dc      	b.n	1b666 <gmtime_r+0xee>
   1b6ac:	2201      	movs	r2, #1
   1b6ae:	e7fa      	b.n	1b6a6 <gmtime_r+0x12e>
   1b6b0:	00015180 	.word	0x00015180
   1b6b4:	00023ab1 	.word	0x00023ab1
   1b6b8:	fffdc54f 	.word	0xfffdc54f
   1b6bc:	00023ab0 	.word	0x00023ab0

0001b6c0 <malloc>:
   1b6c0:	4b02      	ldr	r3, [pc, #8]	; (1b6cc <malloc+0xc>)
   1b6c2:	4601      	mov	r1, r0
   1b6c4:	6818      	ldr	r0, [r3, #0]
   1b6c6:	f000 b855 	b.w	1b774 <_malloc_r>
   1b6ca:	bf00      	nop
   1b6cc:	2000c6f0 	.word	0x2000c6f0

0001b6d0 <free>:
   1b6d0:	4b02      	ldr	r3, [pc, #8]	; (1b6dc <free+0xc>)
   1b6d2:	4601      	mov	r1, r0
   1b6d4:	6818      	ldr	r0, [r3, #0]
   1b6d6:	f000 b803 	b.w	1b6e0 <_free_r>
   1b6da:	bf00      	nop
   1b6dc:	2000c6f0 	.word	0x2000c6f0

0001b6e0 <_free_r>:
   1b6e0:	b538      	push	{r3, r4, r5, lr}
   1b6e2:	4605      	mov	r5, r0
   1b6e4:	2900      	cmp	r1, #0
   1b6e6:	d041      	beq.n	1b76c <_free_r+0x8c>
   1b6e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1b6ec:	1f0c      	subs	r4, r1, #4
   1b6ee:	2b00      	cmp	r3, #0
   1b6f0:	bfb8      	it	lt
   1b6f2:	18e4      	addlt	r4, r4, r3
   1b6f4:	f001 facc 	bl	1cc90 <__malloc_lock>
   1b6f8:	4a1d      	ldr	r2, [pc, #116]	; (1b770 <_free_r+0x90>)
   1b6fa:	6813      	ldr	r3, [r2, #0]
   1b6fc:	b933      	cbnz	r3, 1b70c <_free_r+0x2c>
   1b6fe:	6063      	str	r3, [r4, #4]
   1b700:	6014      	str	r4, [r2, #0]
   1b702:	4628      	mov	r0, r5
   1b704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b708:	f001 bac8 	b.w	1cc9c <__malloc_unlock>
   1b70c:	42a3      	cmp	r3, r4
   1b70e:	d908      	bls.n	1b722 <_free_r+0x42>
   1b710:	6820      	ldr	r0, [r4, #0]
   1b712:	1821      	adds	r1, r4, r0
   1b714:	428b      	cmp	r3, r1
   1b716:	bf01      	itttt	eq
   1b718:	6819      	ldreq	r1, [r3, #0]
   1b71a:	685b      	ldreq	r3, [r3, #4]
   1b71c:	1809      	addeq	r1, r1, r0
   1b71e:	6021      	streq	r1, [r4, #0]
   1b720:	e7ed      	b.n	1b6fe <_free_r+0x1e>
   1b722:	461a      	mov	r2, r3
   1b724:	685b      	ldr	r3, [r3, #4]
   1b726:	b10b      	cbz	r3, 1b72c <_free_r+0x4c>
   1b728:	42a3      	cmp	r3, r4
   1b72a:	d9fa      	bls.n	1b722 <_free_r+0x42>
   1b72c:	6811      	ldr	r1, [r2, #0]
   1b72e:	1850      	adds	r0, r2, r1
   1b730:	42a0      	cmp	r0, r4
   1b732:	d10b      	bne.n	1b74c <_free_r+0x6c>
   1b734:	6820      	ldr	r0, [r4, #0]
   1b736:	4401      	add	r1, r0
   1b738:	1850      	adds	r0, r2, r1
   1b73a:	6011      	str	r1, [r2, #0]
   1b73c:	4283      	cmp	r3, r0
   1b73e:	d1e0      	bne.n	1b702 <_free_r+0x22>
   1b740:	6818      	ldr	r0, [r3, #0]
   1b742:	685b      	ldr	r3, [r3, #4]
   1b744:	4408      	add	r0, r1
   1b746:	6053      	str	r3, [r2, #4]
   1b748:	6010      	str	r0, [r2, #0]
   1b74a:	e7da      	b.n	1b702 <_free_r+0x22>
   1b74c:	d902      	bls.n	1b754 <_free_r+0x74>
   1b74e:	230c      	movs	r3, #12
   1b750:	602b      	str	r3, [r5, #0]
   1b752:	e7d6      	b.n	1b702 <_free_r+0x22>
   1b754:	6820      	ldr	r0, [r4, #0]
   1b756:	1821      	adds	r1, r4, r0
   1b758:	428b      	cmp	r3, r1
   1b75a:	bf02      	ittt	eq
   1b75c:	6819      	ldreq	r1, [r3, #0]
   1b75e:	685b      	ldreq	r3, [r3, #4]
   1b760:	1809      	addeq	r1, r1, r0
   1b762:	6063      	str	r3, [r4, #4]
   1b764:	bf08      	it	eq
   1b766:	6021      	streq	r1, [r4, #0]
   1b768:	6054      	str	r4, [r2, #4]
   1b76a:	e7ca      	b.n	1b702 <_free_r+0x22>
   1b76c:	bd38      	pop	{r3, r4, r5, pc}
   1b76e:	bf00      	nop
   1b770:	2000e344 	.word	0x2000e344

0001b774 <_malloc_r>:
   1b774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b776:	1ccd      	adds	r5, r1, #3
   1b778:	4606      	mov	r6, r0
   1b77a:	f025 0503 	bic.w	r5, r5, #3
   1b77e:	3508      	adds	r5, #8
   1b780:	2d0c      	cmp	r5, #12
   1b782:	bf38      	it	cc
   1b784:	250c      	movcc	r5, #12
   1b786:	2d00      	cmp	r5, #0
   1b788:	db01      	blt.n	1b78e <_malloc_r+0x1a>
   1b78a:	42a9      	cmp	r1, r5
   1b78c:	d903      	bls.n	1b796 <_malloc_r+0x22>
   1b78e:	230c      	movs	r3, #12
   1b790:	6033      	str	r3, [r6, #0]
   1b792:	2000      	movs	r0, #0
   1b794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b796:	f001 fa7b 	bl	1cc90 <__malloc_lock>
   1b79a:	4921      	ldr	r1, [pc, #132]	; (1b820 <_malloc_r+0xac>)
   1b79c:	680a      	ldr	r2, [r1, #0]
   1b79e:	4614      	mov	r4, r2
   1b7a0:	b99c      	cbnz	r4, 1b7ca <_malloc_r+0x56>
   1b7a2:	4f20      	ldr	r7, [pc, #128]	; (1b824 <_malloc_r+0xb0>)
   1b7a4:	683b      	ldr	r3, [r7, #0]
   1b7a6:	b923      	cbnz	r3, 1b7b2 <_malloc_r+0x3e>
   1b7a8:	4621      	mov	r1, r4
   1b7aa:	4630      	mov	r0, r6
   1b7ac:	f000 fbbe 	bl	1bf2c <_sbrk_r>
   1b7b0:	6038      	str	r0, [r7, #0]
   1b7b2:	4629      	mov	r1, r5
   1b7b4:	4630      	mov	r0, r6
   1b7b6:	f000 fbb9 	bl	1bf2c <_sbrk_r>
   1b7ba:	1c43      	adds	r3, r0, #1
   1b7bc:	d123      	bne.n	1b806 <_malloc_r+0x92>
   1b7be:	230c      	movs	r3, #12
   1b7c0:	4630      	mov	r0, r6
   1b7c2:	6033      	str	r3, [r6, #0]
   1b7c4:	f001 fa6a 	bl	1cc9c <__malloc_unlock>
   1b7c8:	e7e3      	b.n	1b792 <_malloc_r+0x1e>
   1b7ca:	6823      	ldr	r3, [r4, #0]
   1b7cc:	1b5b      	subs	r3, r3, r5
   1b7ce:	d417      	bmi.n	1b800 <_malloc_r+0x8c>
   1b7d0:	2b0b      	cmp	r3, #11
   1b7d2:	d903      	bls.n	1b7dc <_malloc_r+0x68>
   1b7d4:	6023      	str	r3, [r4, #0]
   1b7d6:	441c      	add	r4, r3
   1b7d8:	6025      	str	r5, [r4, #0]
   1b7da:	e004      	b.n	1b7e6 <_malloc_r+0x72>
   1b7dc:	6863      	ldr	r3, [r4, #4]
   1b7de:	42a2      	cmp	r2, r4
   1b7e0:	bf0c      	ite	eq
   1b7e2:	600b      	streq	r3, [r1, #0]
   1b7e4:	6053      	strne	r3, [r2, #4]
   1b7e6:	4630      	mov	r0, r6
   1b7e8:	f001 fa58 	bl	1cc9c <__malloc_unlock>
   1b7ec:	f104 000b 	add.w	r0, r4, #11
   1b7f0:	1d23      	adds	r3, r4, #4
   1b7f2:	f020 0007 	bic.w	r0, r0, #7
   1b7f6:	1ac2      	subs	r2, r0, r3
   1b7f8:	bf1c      	itt	ne
   1b7fa:	1a1b      	subne	r3, r3, r0
   1b7fc:	50a3      	strne	r3, [r4, r2]
   1b7fe:	e7c9      	b.n	1b794 <_malloc_r+0x20>
   1b800:	4622      	mov	r2, r4
   1b802:	6864      	ldr	r4, [r4, #4]
   1b804:	e7cc      	b.n	1b7a0 <_malloc_r+0x2c>
   1b806:	1cc4      	adds	r4, r0, #3
   1b808:	f024 0403 	bic.w	r4, r4, #3
   1b80c:	42a0      	cmp	r0, r4
   1b80e:	d0e3      	beq.n	1b7d8 <_malloc_r+0x64>
   1b810:	1a21      	subs	r1, r4, r0
   1b812:	4630      	mov	r0, r6
   1b814:	f000 fb8a 	bl	1bf2c <_sbrk_r>
   1b818:	3001      	adds	r0, #1
   1b81a:	d1dd      	bne.n	1b7d8 <_malloc_r+0x64>
   1b81c:	e7cf      	b.n	1b7be <_malloc_r+0x4a>
   1b81e:	bf00      	nop
   1b820:	2000e344 	.word	0x2000e344
   1b824:	2000e340 	.word	0x2000e340

0001b828 <_printf_float>:
   1b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b82c:	b08d      	sub	sp, #52	; 0x34
   1b82e:	460c      	mov	r4, r1
   1b830:	4616      	mov	r6, r2
   1b832:	461f      	mov	r7, r3
   1b834:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   1b838:	4605      	mov	r5, r0
   1b83a:	f001 f9d3 	bl	1cbe4 <_localeconv_r>
   1b83e:	6803      	ldr	r3, [r0, #0]
   1b840:	4618      	mov	r0, r3
   1b842:	9304      	str	r3, [sp, #16]
   1b844:	f7ed fb7b 	bl	8f3e <strlen>
   1b848:	2300      	movs	r3, #0
   1b84a:	9005      	str	r0, [sp, #20]
   1b84c:	930a      	str	r3, [sp, #40]	; 0x28
   1b84e:	f8d8 3000 	ldr.w	r3, [r8]
   1b852:	f894 a018 	ldrb.w	sl, [r4, #24]
   1b856:	3307      	adds	r3, #7
   1b858:	f8d4 b000 	ldr.w	fp, [r4]
   1b85c:	f023 0307 	bic.w	r3, r3, #7
   1b860:	f103 0208 	add.w	r2, r3, #8
   1b864:	f8c8 2000 	str.w	r2, [r8]
   1b868:	f04f 32ff 	mov.w	r2, #4294967295
   1b86c:	e9d3 8900 	ldrd	r8, r9, [r3]
   1b870:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   1b874:	f8cd 8018 	str.w	r8, [sp, #24]
   1b878:	9307      	str	r3, [sp, #28]
   1b87a:	4b9c      	ldr	r3, [pc, #624]	; (1baec <_printf_float+0x2c4>)
   1b87c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1b880:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   1b884:	f7ed f8b6 	bl	89f4 <__aeabi_dcmpun>
   1b888:	bb70      	cbnz	r0, 1b8e8 <_printf_float+0xc0>
   1b88a:	f04f 32ff 	mov.w	r2, #4294967295
   1b88e:	4b97      	ldr	r3, [pc, #604]	; (1baec <_printf_float+0x2c4>)
   1b890:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1b894:	f7ed f890 	bl	89b8 <__aeabi_dcmple>
   1b898:	bb30      	cbnz	r0, 1b8e8 <_printf_float+0xc0>
   1b89a:	2200      	movs	r2, #0
   1b89c:	2300      	movs	r3, #0
   1b89e:	4640      	mov	r0, r8
   1b8a0:	4649      	mov	r1, r9
   1b8a2:	f7ed f87f 	bl	89a4 <__aeabi_dcmplt>
   1b8a6:	b110      	cbz	r0, 1b8ae <_printf_float+0x86>
   1b8a8:	232d      	movs	r3, #45	; 0x2d
   1b8aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1b8ae:	4a90      	ldr	r2, [pc, #576]	; (1baf0 <_printf_float+0x2c8>)
   1b8b0:	4b90      	ldr	r3, [pc, #576]	; (1baf4 <_printf_float+0x2cc>)
   1b8b2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   1b8b6:	bf94      	ite	ls
   1b8b8:	4690      	movls	r8, r2
   1b8ba:	4698      	movhi	r8, r3
   1b8bc:	2303      	movs	r3, #3
   1b8be:	f04f 0900 	mov.w	r9, #0
   1b8c2:	6123      	str	r3, [r4, #16]
   1b8c4:	f02b 0304 	bic.w	r3, fp, #4
   1b8c8:	6023      	str	r3, [r4, #0]
   1b8ca:	4633      	mov	r3, r6
   1b8cc:	aa0b      	add	r2, sp, #44	; 0x2c
   1b8ce:	4621      	mov	r1, r4
   1b8d0:	4628      	mov	r0, r5
   1b8d2:	9700      	str	r7, [sp, #0]
   1b8d4:	f006 faa0 	bl	21e18 <_printf_common>
   1b8d8:	3001      	adds	r0, #1
   1b8da:	f040 8096 	bne.w	1ba0a <_printf_float+0x1e2>
   1b8de:	f04f 30ff 	mov.w	r0, #4294967295
   1b8e2:	b00d      	add	sp, #52	; 0x34
   1b8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8e8:	4642      	mov	r2, r8
   1b8ea:	464b      	mov	r3, r9
   1b8ec:	4640      	mov	r0, r8
   1b8ee:	4649      	mov	r1, r9
   1b8f0:	f7ed f880 	bl	89f4 <__aeabi_dcmpun>
   1b8f4:	b140      	cbz	r0, 1b908 <_printf_float+0xe0>
   1b8f6:	464b      	mov	r3, r9
   1b8f8:	4a7f      	ldr	r2, [pc, #508]	; (1baf8 <_printf_float+0x2d0>)
   1b8fa:	2b00      	cmp	r3, #0
   1b8fc:	bfbc      	itt	lt
   1b8fe:	232d      	movlt	r3, #45	; 0x2d
   1b900:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   1b904:	4b7d      	ldr	r3, [pc, #500]	; (1bafc <_printf_float+0x2d4>)
   1b906:	e7d4      	b.n	1b8b2 <_printf_float+0x8a>
   1b908:	6863      	ldr	r3, [r4, #4]
   1b90a:	1c5a      	adds	r2, r3, #1
   1b90c:	d126      	bne.n	1b95c <_printf_float+0x134>
   1b90e:	2306      	movs	r3, #6
   1b910:	6063      	str	r3, [r4, #4]
   1b912:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   1b916:	2300      	movs	r3, #0
   1b918:	4628      	mov	r0, r5
   1b91a:	6022      	str	r2, [r4, #0]
   1b91c:	9303      	str	r3, [sp, #12]
   1b91e:	ab0a      	add	r3, sp, #40	; 0x28
   1b920:	e9cd a301 	strd	sl, r3, [sp, #4]
   1b924:	ab09      	add	r3, sp, #36	; 0x24
   1b926:	ec49 8b10 	vmov	d0, r8, r9
   1b92a:	9300      	str	r3, [sp, #0]
   1b92c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1b930:	6861      	ldr	r1, [r4, #4]
   1b932:	f006 f9d0 	bl	21cd6 <__cvt>
   1b936:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   1b93a:	4680      	mov	r8, r0
   1b93c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b93e:	d115      	bne.n	1b96c <_printf_float+0x144>
   1b940:	1ccb      	adds	r3, r1, #3
   1b942:	db3b      	blt.n	1b9bc <_printf_float+0x194>
   1b944:	6863      	ldr	r3, [r4, #4]
   1b946:	4299      	cmp	r1, r3
   1b948:	dc38      	bgt.n	1b9bc <_printf_float+0x194>
   1b94a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b94c:	4299      	cmp	r1, r3
   1b94e:	db55      	blt.n	1b9fc <_printf_float+0x1d4>
   1b950:	6823      	ldr	r3, [r4, #0]
   1b952:	6121      	str	r1, [r4, #16]
   1b954:	07d8      	lsls	r0, r3, #31
   1b956:	d545      	bpl.n	1b9e4 <_printf_float+0x1bc>
   1b958:	1c4b      	adds	r3, r1, #1
   1b95a:	e042      	b.n	1b9e2 <_printf_float+0x1ba>
   1b95c:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   1b960:	2a47      	cmp	r2, #71	; 0x47
   1b962:	d1d6      	bne.n	1b912 <_printf_float+0xea>
   1b964:	2b00      	cmp	r3, #0
   1b966:	d1d4      	bne.n	1b912 <_printf_float+0xea>
   1b968:	2301      	movs	r3, #1
   1b96a:	e7d1      	b.n	1b910 <_printf_float+0xe8>
   1b96c:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   1b970:	d107      	bne.n	1b982 <_printf_float+0x15a>
   1b972:	1cc8      	adds	r0, r1, #3
   1b974:	db25      	blt.n	1b9c2 <_printf_float+0x19a>
   1b976:	6863      	ldr	r3, [r4, #4]
   1b978:	428b      	cmp	r3, r1
   1b97a:	db22      	blt.n	1b9c2 <_printf_float+0x19a>
   1b97c:	f04f 0a67 	mov.w	sl, #103	; 0x67
   1b980:	e7e3      	b.n	1b94a <_printf_float+0x122>
   1b982:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   1b986:	d81f      	bhi.n	1b9c8 <_printf_float+0x1a0>
   1b988:	3901      	subs	r1, #1
   1b98a:	4652      	mov	r2, sl
   1b98c:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1b990:	9109      	str	r1, [sp, #36]	; 0x24
   1b992:	f006 fa08 	bl	21da6 <__exponent>
   1b996:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b998:	4681      	mov	r9, r0
   1b99a:	1813      	adds	r3, r2, r0
   1b99c:	2a01      	cmp	r2, #1
   1b99e:	6123      	str	r3, [r4, #16]
   1b9a0:	dc02      	bgt.n	1b9a8 <_printf_float+0x180>
   1b9a2:	6822      	ldr	r2, [r4, #0]
   1b9a4:	07d2      	lsls	r2, r2, #31
   1b9a6:	d501      	bpl.n	1b9ac <_printf_float+0x184>
   1b9a8:	3301      	adds	r3, #1
   1b9aa:	6123      	str	r3, [r4, #16]
   1b9ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1b9b0:	2b00      	cmp	r3, #0
   1b9b2:	d08a      	beq.n	1b8ca <_printf_float+0xa2>
   1b9b4:	232d      	movs	r3, #45	; 0x2d
   1b9b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1b9ba:	e786      	b.n	1b8ca <_printf_float+0xa2>
   1b9bc:	f04f 0a65 	mov.w	sl, #101	; 0x65
   1b9c0:	e7e2      	b.n	1b988 <_printf_float+0x160>
   1b9c2:	f04f 0a45 	mov.w	sl, #69	; 0x45
   1b9c6:	e7df      	b.n	1b988 <_printf_float+0x160>
   1b9c8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   1b9cc:	d1bd      	bne.n	1b94a <_printf_float+0x122>
   1b9ce:	2900      	cmp	r1, #0
   1b9d0:	6863      	ldr	r3, [r4, #4]
   1b9d2:	dd0b      	ble.n	1b9ec <_printf_float+0x1c4>
   1b9d4:	6121      	str	r1, [r4, #16]
   1b9d6:	b913      	cbnz	r3, 1b9de <_printf_float+0x1b6>
   1b9d8:	6822      	ldr	r2, [r4, #0]
   1b9da:	07d0      	lsls	r0, r2, #31
   1b9dc:	d502      	bpl.n	1b9e4 <_printf_float+0x1bc>
   1b9de:	3301      	adds	r3, #1
   1b9e0:	440b      	add	r3, r1
   1b9e2:	6123      	str	r3, [r4, #16]
   1b9e4:	f04f 0900 	mov.w	r9, #0
   1b9e8:	65a1      	str	r1, [r4, #88]	; 0x58
   1b9ea:	e7df      	b.n	1b9ac <_printf_float+0x184>
   1b9ec:	b913      	cbnz	r3, 1b9f4 <_printf_float+0x1cc>
   1b9ee:	6822      	ldr	r2, [r4, #0]
   1b9f0:	07d2      	lsls	r2, r2, #31
   1b9f2:	d501      	bpl.n	1b9f8 <_printf_float+0x1d0>
   1b9f4:	3302      	adds	r3, #2
   1b9f6:	e7f4      	b.n	1b9e2 <_printf_float+0x1ba>
   1b9f8:	2301      	movs	r3, #1
   1b9fa:	e7f2      	b.n	1b9e2 <_printf_float+0x1ba>
   1b9fc:	2900      	cmp	r1, #0
   1b9fe:	bfd4      	ite	le
   1ba00:	f1c1 0202 	rsble	r2, r1, #2
   1ba04:	2201      	movgt	r2, #1
   1ba06:	4413      	add	r3, r2
   1ba08:	e7eb      	b.n	1b9e2 <_printf_float+0x1ba>
   1ba0a:	6823      	ldr	r3, [r4, #0]
   1ba0c:	055a      	lsls	r2, r3, #21
   1ba0e:	d407      	bmi.n	1ba20 <_printf_float+0x1f8>
   1ba10:	6923      	ldr	r3, [r4, #16]
   1ba12:	4642      	mov	r2, r8
   1ba14:	4631      	mov	r1, r6
   1ba16:	4628      	mov	r0, r5
   1ba18:	47b8      	blx	r7
   1ba1a:	3001      	adds	r0, #1
   1ba1c:	d12b      	bne.n	1ba76 <_printf_float+0x24e>
   1ba1e:	e75e      	b.n	1b8de <_printf_float+0xb6>
   1ba20:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   1ba24:	f240 80dd 	bls.w	1bbe2 <_printf_float+0x3ba>
   1ba28:	2200      	movs	r2, #0
   1ba2a:	2300      	movs	r3, #0
   1ba2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1ba30:	f7ec ffae 	bl	8990 <__aeabi_dcmpeq>
   1ba34:	2800      	cmp	r0, #0
   1ba36:	d033      	beq.n	1baa0 <_printf_float+0x278>
   1ba38:	2301      	movs	r3, #1
   1ba3a:	4a31      	ldr	r2, [pc, #196]	; (1bb00 <_printf_float+0x2d8>)
   1ba3c:	4631      	mov	r1, r6
   1ba3e:	4628      	mov	r0, r5
   1ba40:	47b8      	blx	r7
   1ba42:	3001      	adds	r0, #1
   1ba44:	f43f af4b 	beq.w	1b8de <_printf_float+0xb6>
   1ba48:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	; 0x24
   1ba4c:	4543      	cmp	r3, r8
   1ba4e:	db02      	blt.n	1ba56 <_printf_float+0x22e>
   1ba50:	6823      	ldr	r3, [r4, #0]
   1ba52:	07d8      	lsls	r0, r3, #31
   1ba54:	d50f      	bpl.n	1ba76 <_printf_float+0x24e>
   1ba56:	4631      	mov	r1, r6
   1ba58:	4628      	mov	r0, r5
   1ba5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ba5e:	47b8      	blx	r7
   1ba60:	3001      	adds	r0, #1
   1ba62:	f43f af3c 	beq.w	1b8de <_printf_float+0xb6>
   1ba66:	f04f 0900 	mov.w	r9, #0
   1ba6a:	f108 38ff 	add.w	r8, r8, #4294967295
   1ba6e:	f104 0a1a 	add.w	sl, r4, #26
   1ba72:	45c8      	cmp	r8, r9
   1ba74:	dc09      	bgt.n	1ba8a <_printf_float+0x262>
   1ba76:	6823      	ldr	r3, [r4, #0]
   1ba78:	079b      	lsls	r3, r3, #30
   1ba7a:	f100 8103 	bmi.w	1bc84 <_printf_float+0x45c>
   1ba7e:	68e0      	ldr	r0, [r4, #12]
   1ba80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ba82:	4298      	cmp	r0, r3
   1ba84:	bfb8      	it	lt
   1ba86:	4618      	movlt	r0, r3
   1ba88:	e72b      	b.n	1b8e2 <_printf_float+0xba>
   1ba8a:	2301      	movs	r3, #1
   1ba8c:	4652      	mov	r2, sl
   1ba8e:	4631      	mov	r1, r6
   1ba90:	4628      	mov	r0, r5
   1ba92:	47b8      	blx	r7
   1ba94:	3001      	adds	r0, #1
   1ba96:	f43f af22 	beq.w	1b8de <_printf_float+0xb6>
   1ba9a:	f109 0901 	add.w	r9, r9, #1
   1ba9e:	e7e8      	b.n	1ba72 <_printf_float+0x24a>
   1baa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1baa2:	2b00      	cmp	r3, #0
   1baa4:	dc39      	bgt.n	1bb1a <_printf_float+0x2f2>
   1baa6:	2301      	movs	r3, #1
   1baa8:	4a15      	ldr	r2, [pc, #84]	; (1bb00 <_printf_float+0x2d8>)
   1baaa:	4631      	mov	r1, r6
   1baac:	4628      	mov	r0, r5
   1baae:	47b8      	blx	r7
   1bab0:	3001      	adds	r0, #1
   1bab2:	f43f af14 	beq.w	1b8de <_printf_float+0xb6>
   1bab6:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	; 0x24
   1baba:	ea59 0303 	orrs.w	r3, r9, r3
   1babe:	d102      	bne.n	1bac6 <_printf_float+0x29e>
   1bac0:	6823      	ldr	r3, [r4, #0]
   1bac2:	07d9      	lsls	r1, r3, #31
   1bac4:	d5d7      	bpl.n	1ba76 <_printf_float+0x24e>
   1bac6:	4631      	mov	r1, r6
   1bac8:	4628      	mov	r0, r5
   1baca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1bace:	47b8      	blx	r7
   1bad0:	3001      	adds	r0, #1
   1bad2:	f43f af04 	beq.w	1b8de <_printf_float+0xb6>
   1bad6:	f04f 0a00 	mov.w	sl, #0
   1bada:	f104 0b1a 	add.w	fp, r4, #26
   1bade:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bae0:	425b      	negs	r3, r3
   1bae2:	4553      	cmp	r3, sl
   1bae4:	dc0e      	bgt.n	1bb04 <_printf_float+0x2dc>
   1bae6:	464b      	mov	r3, r9
   1bae8:	e793      	b.n	1ba12 <_printf_float+0x1ea>
   1baea:	bf00      	nop
   1baec:	7fefffff 	.word	0x7fefffff
   1baf0:	00027bc8 	.word	0x00027bc8
   1baf4:	00023fb0 	.word	0x00023fb0
   1baf8:	00027bcc 	.word	0x00027bcc
   1bafc:	00027bd0 	.word	0x00027bd0
   1bb00:	000259f5 	.word	0x000259f5
   1bb04:	2301      	movs	r3, #1
   1bb06:	465a      	mov	r2, fp
   1bb08:	4631      	mov	r1, r6
   1bb0a:	4628      	mov	r0, r5
   1bb0c:	47b8      	blx	r7
   1bb0e:	3001      	adds	r0, #1
   1bb10:	f43f aee5 	beq.w	1b8de <_printf_float+0xb6>
   1bb14:	f10a 0a01 	add.w	sl, sl, #1
   1bb18:	e7e1      	b.n	1bade <_printf_float+0x2b6>
   1bb1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1bb1c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1bb20:	4553      	cmp	r3, sl
   1bb22:	bfa8      	it	ge
   1bb24:	4653      	movge	r3, sl
   1bb26:	2b00      	cmp	r3, #0
   1bb28:	4699      	mov	r9, r3
   1bb2a:	dc36      	bgt.n	1bb9a <_printf_float+0x372>
   1bb2c:	f04f 0b00 	mov.w	fp, #0
   1bb30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   1bb34:	f104 021a 	add.w	r2, r4, #26
   1bb38:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1bb3a:	9306      	str	r3, [sp, #24]
   1bb3c:	eba3 0309 	sub.w	r3, r3, r9
   1bb40:	455b      	cmp	r3, fp
   1bb42:	dc31      	bgt.n	1bba8 <_printf_float+0x380>
   1bb44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bb46:	459a      	cmp	sl, r3
   1bb48:	dc3a      	bgt.n	1bbc0 <_printf_float+0x398>
   1bb4a:	6823      	ldr	r3, [r4, #0]
   1bb4c:	07da      	lsls	r2, r3, #31
   1bb4e:	d437      	bmi.n	1bbc0 <_printf_float+0x398>
   1bb50:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bb52:	ebaa 0903 	sub.w	r9, sl, r3
   1bb56:	9b06      	ldr	r3, [sp, #24]
   1bb58:	ebaa 0303 	sub.w	r3, sl, r3
   1bb5c:	4599      	cmp	r9, r3
   1bb5e:	bfa8      	it	ge
   1bb60:	4699      	movge	r9, r3
   1bb62:	f1b9 0f00 	cmp.w	r9, #0
   1bb66:	dc33      	bgt.n	1bbd0 <_printf_float+0x3a8>
   1bb68:	f04f 0800 	mov.w	r8, #0
   1bb6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   1bb70:	f104 0b1a 	add.w	fp, r4, #26
   1bb74:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bb76:	ebaa 0303 	sub.w	r3, sl, r3
   1bb7a:	eba3 0309 	sub.w	r3, r3, r9
   1bb7e:	4543      	cmp	r3, r8
   1bb80:	f77f af79 	ble.w	1ba76 <_printf_float+0x24e>
   1bb84:	2301      	movs	r3, #1
   1bb86:	465a      	mov	r2, fp
   1bb88:	4631      	mov	r1, r6
   1bb8a:	4628      	mov	r0, r5
   1bb8c:	47b8      	blx	r7
   1bb8e:	3001      	adds	r0, #1
   1bb90:	f43f aea5 	beq.w	1b8de <_printf_float+0xb6>
   1bb94:	f108 0801 	add.w	r8, r8, #1
   1bb98:	e7ec      	b.n	1bb74 <_printf_float+0x34c>
   1bb9a:	4642      	mov	r2, r8
   1bb9c:	4631      	mov	r1, r6
   1bb9e:	4628      	mov	r0, r5
   1bba0:	47b8      	blx	r7
   1bba2:	3001      	adds	r0, #1
   1bba4:	d1c2      	bne.n	1bb2c <_printf_float+0x304>
   1bba6:	e69a      	b.n	1b8de <_printf_float+0xb6>
   1bba8:	2301      	movs	r3, #1
   1bbaa:	4631      	mov	r1, r6
   1bbac:	4628      	mov	r0, r5
   1bbae:	9206      	str	r2, [sp, #24]
   1bbb0:	47b8      	blx	r7
   1bbb2:	3001      	adds	r0, #1
   1bbb4:	f43f ae93 	beq.w	1b8de <_printf_float+0xb6>
   1bbb8:	f10b 0b01 	add.w	fp, fp, #1
   1bbbc:	9a06      	ldr	r2, [sp, #24]
   1bbbe:	e7bb      	b.n	1bb38 <_printf_float+0x310>
   1bbc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1bbc4:	4631      	mov	r1, r6
   1bbc6:	4628      	mov	r0, r5
   1bbc8:	47b8      	blx	r7
   1bbca:	3001      	adds	r0, #1
   1bbcc:	d1c0      	bne.n	1bb50 <_printf_float+0x328>
   1bbce:	e686      	b.n	1b8de <_printf_float+0xb6>
   1bbd0:	9a06      	ldr	r2, [sp, #24]
   1bbd2:	464b      	mov	r3, r9
   1bbd4:	4631      	mov	r1, r6
   1bbd6:	4628      	mov	r0, r5
   1bbd8:	4442      	add	r2, r8
   1bbda:	47b8      	blx	r7
   1bbdc:	3001      	adds	r0, #1
   1bbde:	d1c3      	bne.n	1bb68 <_printf_float+0x340>
   1bbe0:	e67d      	b.n	1b8de <_printf_float+0xb6>
   1bbe2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1bbe6:	f1ba 0f01 	cmp.w	sl, #1
   1bbea:	dc01      	bgt.n	1bbf0 <_printf_float+0x3c8>
   1bbec:	07db      	lsls	r3, r3, #31
   1bbee:	d536      	bpl.n	1bc5e <_printf_float+0x436>
   1bbf0:	2301      	movs	r3, #1
   1bbf2:	4642      	mov	r2, r8
   1bbf4:	4631      	mov	r1, r6
   1bbf6:	4628      	mov	r0, r5
   1bbf8:	47b8      	blx	r7
   1bbfa:	3001      	adds	r0, #1
   1bbfc:	f43f ae6f 	beq.w	1b8de <_printf_float+0xb6>
   1bc00:	4631      	mov	r1, r6
   1bc02:	4628      	mov	r0, r5
   1bc04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1bc08:	47b8      	blx	r7
   1bc0a:	3001      	adds	r0, #1
   1bc0c:	f43f ae67 	beq.w	1b8de <_printf_float+0xb6>
   1bc10:	2200      	movs	r2, #0
   1bc12:	2300      	movs	r3, #0
   1bc14:	f10a 3aff 	add.w	sl, sl, #4294967295
   1bc18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1bc1c:	f7ec feb8 	bl	8990 <__aeabi_dcmpeq>
   1bc20:	b9c0      	cbnz	r0, 1bc54 <_printf_float+0x42c>
   1bc22:	4653      	mov	r3, sl
   1bc24:	f108 0201 	add.w	r2, r8, #1
   1bc28:	4631      	mov	r1, r6
   1bc2a:	4628      	mov	r0, r5
   1bc2c:	47b8      	blx	r7
   1bc2e:	3001      	adds	r0, #1
   1bc30:	d10c      	bne.n	1bc4c <_printf_float+0x424>
   1bc32:	e654      	b.n	1b8de <_printf_float+0xb6>
   1bc34:	2301      	movs	r3, #1
   1bc36:	465a      	mov	r2, fp
   1bc38:	4631      	mov	r1, r6
   1bc3a:	4628      	mov	r0, r5
   1bc3c:	47b8      	blx	r7
   1bc3e:	3001      	adds	r0, #1
   1bc40:	f43f ae4d 	beq.w	1b8de <_printf_float+0xb6>
   1bc44:	f108 0801 	add.w	r8, r8, #1
   1bc48:	45d0      	cmp	r8, sl
   1bc4a:	dbf3      	blt.n	1bc34 <_printf_float+0x40c>
   1bc4c:	464b      	mov	r3, r9
   1bc4e:	f104 0250 	add.w	r2, r4, #80	; 0x50
   1bc52:	e6df      	b.n	1ba14 <_printf_float+0x1ec>
   1bc54:	f04f 0800 	mov.w	r8, #0
   1bc58:	f104 0b1a 	add.w	fp, r4, #26
   1bc5c:	e7f4      	b.n	1bc48 <_printf_float+0x420>
   1bc5e:	2301      	movs	r3, #1
   1bc60:	4642      	mov	r2, r8
   1bc62:	e7e1      	b.n	1bc28 <_printf_float+0x400>
   1bc64:	2301      	movs	r3, #1
   1bc66:	464a      	mov	r2, r9
   1bc68:	4631      	mov	r1, r6
   1bc6a:	4628      	mov	r0, r5
   1bc6c:	47b8      	blx	r7
   1bc6e:	3001      	adds	r0, #1
   1bc70:	f43f ae35 	beq.w	1b8de <_printf_float+0xb6>
   1bc74:	f108 0801 	add.w	r8, r8, #1
   1bc78:	68e3      	ldr	r3, [r4, #12]
   1bc7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1bc7c:	1a5b      	subs	r3, r3, r1
   1bc7e:	4543      	cmp	r3, r8
   1bc80:	dcf0      	bgt.n	1bc64 <_printf_float+0x43c>
   1bc82:	e6fc      	b.n	1ba7e <_printf_float+0x256>
   1bc84:	f04f 0800 	mov.w	r8, #0
   1bc88:	f104 0919 	add.w	r9, r4, #25
   1bc8c:	e7f4      	b.n	1bc78 <_printf_float+0x450>
   1bc8e:	bf00      	nop

0001bc90 <_printf_i>:
   1bc90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1bc94:	7e0f      	ldrb	r7, [r1, #24]
   1bc96:	4691      	mov	r9, r2
   1bc98:	4680      	mov	r8, r0
   1bc9a:	460c      	mov	r4, r1
   1bc9c:	2f78      	cmp	r7, #120	; 0x78
   1bc9e:	469a      	mov	sl, r3
   1bca0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1bca2:	f101 0243 	add.w	r2, r1, #67	; 0x43
   1bca6:	d807      	bhi.n	1bcb8 <_printf_i+0x28>
   1bca8:	2f62      	cmp	r7, #98	; 0x62
   1bcaa:	d80a      	bhi.n	1bcc2 <_printf_i+0x32>
   1bcac:	2f00      	cmp	r7, #0
   1bcae:	f000 80e0 	beq.w	1be72 <_printf_i+0x1e2>
   1bcb2:	2f58      	cmp	r7, #88	; 0x58
   1bcb4:	f000 80bb 	beq.w	1be2e <_printf_i+0x19e>
   1bcb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1bcbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   1bcc0:	e03a      	b.n	1bd38 <_printf_i+0xa8>
   1bcc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1bcc6:	2b15      	cmp	r3, #21
   1bcc8:	d8f6      	bhi.n	1bcb8 <_printf_i+0x28>
   1bcca:	a101      	add	r1, pc, #4	; (adr r1, 1bcd0 <_printf_i+0x40>)
   1bccc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1bcd0:	0001bd29 	.word	0x0001bd29
   1bcd4:	0001bd3d 	.word	0x0001bd3d
   1bcd8:	0001bcb9 	.word	0x0001bcb9
   1bcdc:	0001bcb9 	.word	0x0001bcb9
   1bce0:	0001bcb9 	.word	0x0001bcb9
   1bce4:	0001bcb9 	.word	0x0001bcb9
   1bce8:	0001bd3d 	.word	0x0001bd3d
   1bcec:	0001bcb9 	.word	0x0001bcb9
   1bcf0:	0001bcb9 	.word	0x0001bcb9
   1bcf4:	0001bcb9 	.word	0x0001bcb9
   1bcf8:	0001bcb9 	.word	0x0001bcb9
   1bcfc:	0001be59 	.word	0x0001be59
   1bd00:	0001bdcd 	.word	0x0001bdcd
   1bd04:	0001be0f 	.word	0x0001be0f
   1bd08:	0001bcb9 	.word	0x0001bcb9
   1bd0c:	0001bcb9 	.word	0x0001bcb9
   1bd10:	0001be7b 	.word	0x0001be7b
   1bd14:	0001bcb9 	.word	0x0001bcb9
   1bd18:	0001bdcd 	.word	0x0001bdcd
   1bd1c:	0001bcb9 	.word	0x0001bcb9
   1bd20:	0001bcb9 	.word	0x0001bcb9
   1bd24:	0001be17 	.word	0x0001be17
   1bd28:	682b      	ldr	r3, [r5, #0]
   1bd2a:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1bd2e:	1d1a      	adds	r2, r3, #4
   1bd30:	681b      	ldr	r3, [r3, #0]
   1bd32:	602a      	str	r2, [r5, #0]
   1bd34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1bd38:	2301      	movs	r3, #1
   1bd3a:	e0ab      	b.n	1be94 <_printf_i+0x204>
   1bd3c:	6823      	ldr	r3, [r4, #0]
   1bd3e:	6829      	ldr	r1, [r5, #0]
   1bd40:	061f      	lsls	r7, r3, #24
   1bd42:	f101 0004 	add.w	r0, r1, #4
   1bd46:	6028      	str	r0, [r5, #0]
   1bd48:	d501      	bpl.n	1bd4e <_printf_i+0xbe>
   1bd4a:	680d      	ldr	r5, [r1, #0]
   1bd4c:	e003      	b.n	1bd56 <_printf_i+0xc6>
   1bd4e:	065e      	lsls	r6, r3, #25
   1bd50:	d5fb      	bpl.n	1bd4a <_printf_i+0xba>
   1bd52:	f9b1 5000 	ldrsh.w	r5, [r1]
   1bd56:	2d00      	cmp	r5, #0
   1bd58:	6861      	ldr	r1, [r4, #4]
   1bd5a:	da7a      	bge.n	1be52 <_printf_i+0x1c2>
   1bd5c:	202d      	movs	r0, #45	; 0x2d
   1bd5e:	2900      	cmp	r1, #0
   1bd60:	60a1      	str	r1, [r4, #8]
   1bd62:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   1bd66:	da2d      	bge.n	1bdc4 <_printf_i+0x134>
   1bd68:	426d      	negs	r5, r5
   1bd6a:	485e      	ldr	r0, [pc, #376]	; (1bee4 <_printf_i+0x254>)
   1bd6c:	230a      	movs	r3, #10
   1bd6e:	4616      	mov	r6, r2
   1bd70:	fbb5 f1f3 	udiv	r1, r5, r3
   1bd74:	fb03 5711 	mls	r7, r3, r1, r5
   1bd78:	5dc7      	ldrb	r7, [r0, r7]
   1bd7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
   1bd7e:	462f      	mov	r7, r5
   1bd80:	460d      	mov	r5, r1
   1bd82:	42bb      	cmp	r3, r7
   1bd84:	d9f4      	bls.n	1bd70 <_printf_i+0xe0>
   1bd86:	2b08      	cmp	r3, #8
   1bd88:	d10b      	bne.n	1bda2 <_printf_i+0x112>
   1bd8a:	6823      	ldr	r3, [r4, #0]
   1bd8c:	07df      	lsls	r7, r3, #31
   1bd8e:	d508      	bpl.n	1bda2 <_printf_i+0x112>
   1bd90:	6923      	ldr	r3, [r4, #16]
   1bd92:	6861      	ldr	r1, [r4, #4]
   1bd94:	4299      	cmp	r1, r3
   1bd96:	bfde      	ittt	le
   1bd98:	2330      	movle	r3, #48	; 0x30
   1bd9a:	f806 3c01 	strble.w	r3, [r6, #-1]
   1bd9e:	f106 36ff 	addle.w	r6, r6, #4294967295
   1bda2:	1b92      	subs	r2, r2, r6
   1bda4:	6122      	str	r2, [r4, #16]
   1bda6:	464b      	mov	r3, r9
   1bda8:	aa03      	add	r2, sp, #12
   1bdaa:	4621      	mov	r1, r4
   1bdac:	4640      	mov	r0, r8
   1bdae:	f8cd a000 	str.w	sl, [sp]
   1bdb2:	f006 f831 	bl	21e18 <_printf_common>
   1bdb6:	3001      	adds	r0, #1
   1bdb8:	d171      	bne.n	1be9e <_printf_i+0x20e>
   1bdba:	f04f 30ff 	mov.w	r0, #4294967295
   1bdbe:	b004      	add	sp, #16
   1bdc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bdc4:	f023 0304 	bic.w	r3, r3, #4
   1bdc8:	6023      	str	r3, [r4, #0]
   1bdca:	e7cd      	b.n	1bd68 <_printf_i+0xd8>
   1bdcc:	682b      	ldr	r3, [r5, #0]
   1bdce:	6820      	ldr	r0, [r4, #0]
   1bdd0:	1d19      	adds	r1, r3, #4
   1bdd2:	6029      	str	r1, [r5, #0]
   1bdd4:	0605      	lsls	r5, r0, #24
   1bdd6:	d501      	bpl.n	1bddc <_printf_i+0x14c>
   1bdd8:	681d      	ldr	r5, [r3, #0]
   1bdda:	e002      	b.n	1bde2 <_printf_i+0x152>
   1bddc:	0641      	lsls	r1, r0, #25
   1bdde:	d5fb      	bpl.n	1bdd8 <_printf_i+0x148>
   1bde0:	881d      	ldrh	r5, [r3, #0]
   1bde2:	2f6f      	cmp	r7, #111	; 0x6f
   1bde4:	483f      	ldr	r0, [pc, #252]	; (1bee4 <_printf_i+0x254>)
   1bde6:	bf14      	ite	ne
   1bde8:	230a      	movne	r3, #10
   1bdea:	2308      	moveq	r3, #8
   1bdec:	2100      	movs	r1, #0
   1bdee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   1bdf2:	6866      	ldr	r6, [r4, #4]
   1bdf4:	2e00      	cmp	r6, #0
   1bdf6:	60a6      	str	r6, [r4, #8]
   1bdf8:	dbb9      	blt.n	1bd6e <_printf_i+0xde>
   1bdfa:	6821      	ldr	r1, [r4, #0]
   1bdfc:	f021 0104 	bic.w	r1, r1, #4
   1be00:	6021      	str	r1, [r4, #0]
   1be02:	2d00      	cmp	r5, #0
   1be04:	d1b3      	bne.n	1bd6e <_printf_i+0xde>
   1be06:	2e00      	cmp	r6, #0
   1be08:	d1b1      	bne.n	1bd6e <_printf_i+0xde>
   1be0a:	4616      	mov	r6, r2
   1be0c:	e7bb      	b.n	1bd86 <_printf_i+0xf6>
   1be0e:	6823      	ldr	r3, [r4, #0]
   1be10:	f043 0320 	orr.w	r3, r3, #32
   1be14:	6023      	str	r3, [r4, #0]
   1be16:	2778      	movs	r7, #120	; 0x78
   1be18:	4833      	ldr	r0, [pc, #204]	; (1bee8 <_printf_i+0x258>)
   1be1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   1be1e:	6829      	ldr	r1, [r5, #0]
   1be20:	6823      	ldr	r3, [r4, #0]
   1be22:	1d0e      	adds	r6, r1, #4
   1be24:	602e      	str	r6, [r5, #0]
   1be26:	061e      	lsls	r6, r3, #24
   1be28:	d503      	bpl.n	1be32 <_printf_i+0x1a2>
   1be2a:	680d      	ldr	r5, [r1, #0]
   1be2c:	e004      	b.n	1be38 <_printf_i+0x1a8>
   1be2e:	482d      	ldr	r0, [pc, #180]	; (1bee4 <_printf_i+0x254>)
   1be30:	e7f3      	b.n	1be1a <_printf_i+0x18a>
   1be32:	065d      	lsls	r5, r3, #25
   1be34:	d5f9      	bpl.n	1be2a <_printf_i+0x19a>
   1be36:	880d      	ldrh	r5, [r1, #0]
   1be38:	07d9      	lsls	r1, r3, #31
   1be3a:	bf44      	itt	mi
   1be3c:	f043 0320 	orrmi.w	r3, r3, #32
   1be40:	6023      	strmi	r3, [r4, #0]
   1be42:	b10d      	cbz	r5, 1be48 <_printf_i+0x1b8>
   1be44:	2310      	movs	r3, #16
   1be46:	e7d1      	b.n	1bdec <_printf_i+0x15c>
   1be48:	6823      	ldr	r3, [r4, #0]
   1be4a:	f023 0320 	bic.w	r3, r3, #32
   1be4e:	6023      	str	r3, [r4, #0]
   1be50:	e7f8      	b.n	1be44 <_printf_i+0x1b4>
   1be52:	4824      	ldr	r0, [pc, #144]	; (1bee4 <_printf_i+0x254>)
   1be54:	230a      	movs	r3, #10
   1be56:	e7cc      	b.n	1bdf2 <_printf_i+0x162>
   1be58:	682b      	ldr	r3, [r5, #0]
   1be5a:	6826      	ldr	r6, [r4, #0]
   1be5c:	1d18      	adds	r0, r3, #4
   1be5e:	6961      	ldr	r1, [r4, #20]
   1be60:	6028      	str	r0, [r5, #0]
   1be62:	0635      	lsls	r5, r6, #24
   1be64:	681b      	ldr	r3, [r3, #0]
   1be66:	d501      	bpl.n	1be6c <_printf_i+0x1dc>
   1be68:	6019      	str	r1, [r3, #0]
   1be6a:	e002      	b.n	1be72 <_printf_i+0x1e2>
   1be6c:	0670      	lsls	r0, r6, #25
   1be6e:	d5fb      	bpl.n	1be68 <_printf_i+0x1d8>
   1be70:	8019      	strh	r1, [r3, #0]
   1be72:	2300      	movs	r3, #0
   1be74:	4616      	mov	r6, r2
   1be76:	6123      	str	r3, [r4, #16]
   1be78:	e795      	b.n	1bda6 <_printf_i+0x116>
   1be7a:	682b      	ldr	r3, [r5, #0]
   1be7c:	2100      	movs	r1, #0
   1be7e:	1d1a      	adds	r2, r3, #4
   1be80:	602a      	str	r2, [r5, #0]
   1be82:	681e      	ldr	r6, [r3, #0]
   1be84:	6862      	ldr	r2, [r4, #4]
   1be86:	4630      	mov	r0, r6
   1be88:	f005 fed8 	bl	21c3c <memchr>
   1be8c:	b108      	cbz	r0, 1be92 <_printf_i+0x202>
   1be8e:	1b80      	subs	r0, r0, r6
   1be90:	6060      	str	r0, [r4, #4]
   1be92:	6863      	ldr	r3, [r4, #4]
   1be94:	6123      	str	r3, [r4, #16]
   1be96:	2300      	movs	r3, #0
   1be98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1be9c:	e783      	b.n	1bda6 <_printf_i+0x116>
   1be9e:	6923      	ldr	r3, [r4, #16]
   1bea0:	4632      	mov	r2, r6
   1bea2:	4649      	mov	r1, r9
   1bea4:	4640      	mov	r0, r8
   1bea6:	47d0      	blx	sl
   1bea8:	3001      	adds	r0, #1
   1beaa:	d086      	beq.n	1bdba <_printf_i+0x12a>
   1beac:	6823      	ldr	r3, [r4, #0]
   1beae:	079b      	lsls	r3, r3, #30
   1beb0:	d414      	bmi.n	1bedc <_printf_i+0x24c>
   1beb2:	68e0      	ldr	r0, [r4, #12]
   1beb4:	9b03      	ldr	r3, [sp, #12]
   1beb6:	4298      	cmp	r0, r3
   1beb8:	bfb8      	it	lt
   1beba:	4618      	movlt	r0, r3
   1bebc:	e77f      	b.n	1bdbe <_printf_i+0x12e>
   1bebe:	2301      	movs	r3, #1
   1bec0:	4632      	mov	r2, r6
   1bec2:	4649      	mov	r1, r9
   1bec4:	4640      	mov	r0, r8
   1bec6:	47d0      	blx	sl
   1bec8:	3001      	adds	r0, #1
   1beca:	f43f af76 	beq.w	1bdba <_printf_i+0x12a>
   1bece:	3501      	adds	r5, #1
   1bed0:	68e3      	ldr	r3, [r4, #12]
   1bed2:	9903      	ldr	r1, [sp, #12]
   1bed4:	1a5b      	subs	r3, r3, r1
   1bed6:	42ab      	cmp	r3, r5
   1bed8:	dcf1      	bgt.n	1bebe <_printf_i+0x22e>
   1beda:	e7ea      	b.n	1beb2 <_printf_i+0x222>
   1bedc:	2500      	movs	r5, #0
   1bede:	f104 0619 	add.w	r6, r4, #25
   1bee2:	e7f5      	b.n	1bed0 <_printf_i+0x240>
   1bee4:	00027bd4 	.word	0x00027bd4
   1bee8:	00027be5 	.word	0x00027be5

0001beec <iprintf>:
   1beec:	b40f      	push	{r0, r1, r2, r3}
   1beee:	4b0a      	ldr	r3, [pc, #40]	; (1bf18 <iprintf+0x2c>)
   1bef0:	b513      	push	{r0, r1, r4, lr}
   1bef2:	681c      	ldr	r4, [r3, #0]
   1bef4:	b124      	cbz	r4, 1bf00 <iprintf+0x14>
   1bef6:	69a3      	ldr	r3, [r4, #24]
   1bef8:	b913      	cbnz	r3, 1bf00 <iprintf+0x14>
   1befa:	4620      	mov	r0, r4
   1befc:	f000 fbc4 	bl	1c688 <__sinit>
   1bf00:	ab05      	add	r3, sp, #20
   1bf02:	9a04      	ldr	r2, [sp, #16]
   1bf04:	68a1      	ldr	r1, [r4, #8]
   1bf06:	4620      	mov	r0, r4
   1bf08:	9301      	str	r3, [sp, #4]
   1bf0a:	f001 fd1f 	bl	1d94c <_vfiprintf_r>
   1bf0e:	b002      	add	sp, #8
   1bf10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bf14:	b004      	add	sp, #16
   1bf16:	4770      	bx	lr
   1bf18:	2000c6f0 	.word	0x2000c6f0

0001bf1c <realloc>:
   1bf1c:	4b02      	ldr	r3, [pc, #8]	; (1bf28 <realloc+0xc>)
   1bf1e:	460a      	mov	r2, r1
   1bf20:	4601      	mov	r1, r0
   1bf22:	6818      	ldr	r0, [r3, #0]
   1bf24:	f006 bc7d 	b.w	22822 <_realloc_r>
   1bf28:	2000c6f0 	.word	0x2000c6f0

0001bf2c <_sbrk_r>:
   1bf2c:	b538      	push	{r3, r4, r5, lr}
   1bf2e:	2300      	movs	r3, #0
   1bf30:	4d05      	ldr	r5, [pc, #20]	; (1bf48 <_sbrk_r+0x1c>)
   1bf32:	4604      	mov	r4, r0
   1bf34:	4608      	mov	r0, r1
   1bf36:	602b      	str	r3, [r5, #0]
   1bf38:	f7f2 fbee 	bl	e718 <_sbrk>
   1bf3c:	1c43      	adds	r3, r0, #1
   1bf3e:	d102      	bne.n	1bf46 <_sbrk_r+0x1a>
   1bf40:	682b      	ldr	r3, [r5, #0]
   1bf42:	b103      	cbz	r3, 1bf46 <_sbrk_r+0x1a>
   1bf44:	6023      	str	r3, [r4, #0]
   1bf46:	bd38      	pop	{r3, r4, r5, pc}
   1bf48:	2000e348 	.word	0x2000e348

0001bf4c <sniprintf>:
   1bf4c:	b40c      	push	{r2, r3}
   1bf4e:	4b18      	ldr	r3, [pc, #96]	; (1bfb0 <sniprintf+0x64>)
   1bf50:	b530      	push	{r4, r5, lr}
   1bf52:	1e0c      	subs	r4, r1, #0
   1bf54:	b09d      	sub	sp, #116	; 0x74
   1bf56:	681d      	ldr	r5, [r3, #0]
   1bf58:	da08      	bge.n	1bf6c <sniprintf+0x20>
   1bf5a:	238b      	movs	r3, #139	; 0x8b
   1bf5c:	f04f 30ff 	mov.w	r0, #4294967295
   1bf60:	602b      	str	r3, [r5, #0]
   1bf62:	b01d      	add	sp, #116	; 0x74
   1bf64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1bf68:	b002      	add	sp, #8
   1bf6a:	4770      	bx	lr
   1bf6c:	f44f 7302 	mov.w	r3, #520	; 0x208
   1bf70:	9002      	str	r0, [sp, #8]
   1bf72:	9006      	str	r0, [sp, #24]
   1bf74:	a902      	add	r1, sp, #8
   1bf76:	f8ad 3014 	strh.w	r3, [sp, #20]
   1bf7a:	bf14      	ite	ne
   1bf7c:	f104 33ff 	addne.w	r3, r4, #4294967295
   1bf80:	4623      	moveq	r3, r4
   1bf82:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1bf84:	4628      	mov	r0, r5
   1bf86:	9304      	str	r3, [sp, #16]
   1bf88:	9307      	str	r3, [sp, #28]
   1bf8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bf8e:	f8ad 3016 	strh.w	r3, [sp, #22]
   1bf92:	ab21      	add	r3, sp, #132	; 0x84
   1bf94:	9301      	str	r3, [sp, #4]
   1bf96:	f001 fa65 	bl	1d464 <_svfiprintf_r>
   1bf9a:	1c43      	adds	r3, r0, #1
   1bf9c:	bfbc      	itt	lt
   1bf9e:	238b      	movlt	r3, #139	; 0x8b
   1bfa0:	602b      	strlt	r3, [r5, #0]
   1bfa2:	2c00      	cmp	r4, #0
   1bfa4:	d0dd      	beq.n	1bf62 <sniprintf+0x16>
   1bfa6:	9b02      	ldr	r3, [sp, #8]
   1bfa8:	2200      	movs	r2, #0
   1bfaa:	701a      	strb	r2, [r3, #0]
   1bfac:	e7d9      	b.n	1bf62 <sniprintf+0x16>
   1bfae:	bf00      	nop
   1bfb0:	2000c6f0 	.word	0x2000c6f0

0001bfb4 <strncasecmp>:
   1bfb4:	b570      	push	{r4, r5, r6, lr}
   1bfb6:	440a      	add	r2, r1
   1bfb8:	4605      	mov	r5, r0
   1bfba:	4e0e      	ldr	r6, [pc, #56]	; (1bff4 <strncasecmp+0x40>)
   1bfbc:	4291      	cmp	r1, r2
   1bfbe:	d101      	bne.n	1bfc4 <strncasecmp+0x10>
   1bfc0:	2000      	movs	r0, #0
   1bfc2:	e011      	b.n	1bfe8 <strncasecmp+0x34>
   1bfc4:	f815 3b01 	ldrb.w	r3, [r5], #1
   1bfc8:	f811 4b01 	ldrb.w	r4, [r1], #1
   1bfcc:	5cf0      	ldrb	r0, [r6, r3]
   1bfce:	f000 0003 	and.w	r0, r0, #3
   1bfd2:	2801      	cmp	r0, #1
   1bfd4:	5d30      	ldrb	r0, [r6, r4]
   1bfd6:	f000 0003 	and.w	r0, r0, #3
   1bfda:	bf08      	it	eq
   1bfdc:	3320      	addeq	r3, #32
   1bfde:	2801      	cmp	r0, #1
   1bfe0:	d103      	bne.n	1bfea <strncasecmp+0x36>
   1bfe2:	3420      	adds	r4, #32
   1bfe4:	1b18      	subs	r0, r3, r4
   1bfe6:	d0e9      	beq.n	1bfbc <strncasecmp+0x8>
   1bfe8:	bd70      	pop	{r4, r5, r6, pc}
   1bfea:	1b18      	subs	r0, r3, r4
   1bfec:	d1fc      	bne.n	1bfe8 <strncasecmp+0x34>
   1bfee:	2c00      	cmp	r4, #0
   1bff0:	d1e4      	bne.n	1bfbc <strncasecmp+0x8>
   1bff2:	e7f9      	b.n	1bfe8 <strncasecmp+0x34>
   1bff4:	00027ac8 	.word	0x00027ac8

0001bff8 <strtod>:
   1bff8:	460a      	mov	r2, r1
   1bffa:	4601      	mov	r1, r0
   1bffc:	4802      	ldr	r0, [pc, #8]	; (1c008 <strtod+0x10>)
   1bffe:	4b03      	ldr	r3, [pc, #12]	; (1c00c <strtod+0x14>)
   1c000:	6800      	ldr	r0, [r0, #0]
   1c002:	f7ee bac5 	b.w	a590 <_strtod_l>
   1c006:	bf00      	nop
   1c008:	2000c6f0 	.word	0x2000c6f0
   1c00c:	2000c754 	.word	0x2000c754

0001c010 <_strtol_l.constprop.0>:
   1c010:	2b24      	cmp	r3, #36	; 0x24
   1c012:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c016:	4686      	mov	lr, r0
   1c018:	4690      	mov	r8, r2
   1c01a:	d801      	bhi.n	1c020 <_strtol_l.constprop.0+0x10>
   1c01c:	2b01      	cmp	r3, #1
   1c01e:	d106      	bne.n	1c02e <_strtol_l.constprop.0+0x1e>
   1c020:	f002 fe3e 	bl	1eca0 <__errno>
   1c024:	2316      	movs	r3, #22
   1c026:	6003      	str	r3, [r0, #0]
   1c028:	2000      	movs	r0, #0
   1c02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c02e:	460d      	mov	r5, r1
   1c030:	4835      	ldr	r0, [pc, #212]	; (1c108 <_strtol_l.constprop.0+0xf8>)
   1c032:	462a      	mov	r2, r5
   1c034:	f815 4b01 	ldrb.w	r4, [r5], #1
   1c038:	5d06      	ldrb	r6, [r0, r4]
   1c03a:	f016 0608 	ands.w	r6, r6, #8
   1c03e:	d1f8      	bne.n	1c032 <_strtol_l.constprop.0+0x22>
   1c040:	2c2d      	cmp	r4, #45	; 0x2d
   1c042:	d124      	bne.n	1c08e <_strtol_l.constprop.0+0x7e>
   1c044:	782c      	ldrb	r4, [r5, #0]
   1c046:	2601      	movs	r6, #1
   1c048:	1c95      	adds	r5, r2, #2
   1c04a:	bb2b      	cbnz	r3, 1c098 <_strtol_l.constprop.0+0x88>
   1c04c:	2c30      	cmp	r4, #48	; 0x30
   1c04e:	d030      	beq.n	1c0b2 <_strtol_l.constprop.0+0xa2>
   1c050:	230a      	movs	r3, #10
   1c052:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   1c056:	2200      	movs	r2, #0
   1c058:	f10c 3cff 	add.w	ip, ip, #4294967295
   1c05c:	4610      	mov	r0, r2
   1c05e:	fbbc f9f3 	udiv	r9, ip, r3
   1c062:	fb03 ca19 	mls	sl, r3, r9, ip
   1c066:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   1c06a:	2f09      	cmp	r7, #9
   1c06c:	d828      	bhi.n	1c0c0 <_strtol_l.constprop.0+0xb0>
   1c06e:	463c      	mov	r4, r7
   1c070:	42a3      	cmp	r3, r4
   1c072:	dd34      	ble.n	1c0de <_strtol_l.constprop.0+0xce>
   1c074:	1c57      	adds	r7, r2, #1
   1c076:	d007      	beq.n	1c088 <_strtol_l.constprop.0+0x78>
   1c078:	4581      	cmp	r9, r0
   1c07a:	d32d      	bcc.n	1c0d8 <_strtol_l.constprop.0+0xc8>
   1c07c:	d101      	bne.n	1c082 <_strtol_l.constprop.0+0x72>
   1c07e:	45a2      	cmp	sl, r4
   1c080:	db2a      	blt.n	1c0d8 <_strtol_l.constprop.0+0xc8>
   1c082:	fb00 4003 	mla	r0, r0, r3, r4
   1c086:	2201      	movs	r2, #1
   1c088:	f815 4b01 	ldrb.w	r4, [r5], #1
   1c08c:	e7eb      	b.n	1c066 <_strtol_l.constprop.0+0x56>
   1c08e:	2c2b      	cmp	r4, #43	; 0x2b
   1c090:	bf04      	itt	eq
   1c092:	782c      	ldrbeq	r4, [r5, #0]
   1c094:	1c95      	addeq	r5, r2, #2
   1c096:	e7d8      	b.n	1c04a <_strtol_l.constprop.0+0x3a>
   1c098:	2b10      	cmp	r3, #16
   1c09a:	d1da      	bne.n	1c052 <_strtol_l.constprop.0+0x42>
   1c09c:	2c30      	cmp	r4, #48	; 0x30
   1c09e:	d1d8      	bne.n	1c052 <_strtol_l.constprop.0+0x42>
   1c0a0:	782a      	ldrb	r2, [r5, #0]
   1c0a2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   1c0a6:	2a58      	cmp	r2, #88	; 0x58
   1c0a8:	d1d3      	bne.n	1c052 <_strtol_l.constprop.0+0x42>
   1c0aa:	786c      	ldrb	r4, [r5, #1]
   1c0ac:	2310      	movs	r3, #16
   1c0ae:	3502      	adds	r5, #2
   1c0b0:	e7cf      	b.n	1c052 <_strtol_l.constprop.0+0x42>
   1c0b2:	782b      	ldrb	r3, [r5, #0]
   1c0b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1c0b8:	2b58      	cmp	r3, #88	; 0x58
   1c0ba:	d0f6      	beq.n	1c0aa <_strtol_l.constprop.0+0x9a>
   1c0bc:	2308      	movs	r3, #8
   1c0be:	e7c8      	b.n	1c052 <_strtol_l.constprop.0+0x42>
   1c0c0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   1c0c4:	2f19      	cmp	r7, #25
   1c0c6:	d801      	bhi.n	1c0cc <_strtol_l.constprop.0+0xbc>
   1c0c8:	3c37      	subs	r4, #55	; 0x37
   1c0ca:	e7d1      	b.n	1c070 <_strtol_l.constprop.0+0x60>
   1c0cc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   1c0d0:	2f19      	cmp	r7, #25
   1c0d2:	d804      	bhi.n	1c0de <_strtol_l.constprop.0+0xce>
   1c0d4:	3c57      	subs	r4, #87	; 0x57
   1c0d6:	e7cb      	b.n	1c070 <_strtol_l.constprop.0+0x60>
   1c0d8:	f04f 32ff 	mov.w	r2, #4294967295
   1c0dc:	e7d4      	b.n	1c088 <_strtol_l.constprop.0+0x78>
   1c0de:	1c53      	adds	r3, r2, #1
   1c0e0:	d108      	bne.n	1c0f4 <_strtol_l.constprop.0+0xe4>
   1c0e2:	2322      	movs	r3, #34	; 0x22
   1c0e4:	4660      	mov	r0, ip
   1c0e6:	f8ce 3000 	str.w	r3, [lr]
   1c0ea:	f1b8 0f00 	cmp.w	r8, #0
   1c0ee:	d09c      	beq.n	1c02a <_strtol_l.constprop.0+0x1a>
   1c0f0:	1e69      	subs	r1, r5, #1
   1c0f2:	e006      	b.n	1c102 <_strtol_l.constprop.0+0xf2>
   1c0f4:	b106      	cbz	r6, 1c0f8 <_strtol_l.constprop.0+0xe8>
   1c0f6:	4240      	negs	r0, r0
   1c0f8:	f1b8 0f00 	cmp.w	r8, #0
   1c0fc:	d095      	beq.n	1c02a <_strtol_l.constprop.0+0x1a>
   1c0fe:	2a00      	cmp	r2, #0
   1c100:	d1f6      	bne.n	1c0f0 <_strtol_l.constprop.0+0xe0>
   1c102:	f8c8 1000 	str.w	r1, [r8]
   1c106:	e790      	b.n	1c02a <_strtol_l.constprop.0+0x1a>
   1c108:	00027ac8 	.word	0x00027ac8

0001c10c <strtol>:
   1c10c:	4613      	mov	r3, r2
   1c10e:	460a      	mov	r2, r1
   1c110:	4601      	mov	r1, r0
   1c112:	4802      	ldr	r0, [pc, #8]	; (1c11c <strtol+0x10>)
   1c114:	6800      	ldr	r0, [r0, #0]
   1c116:	f7ff bf7b 	b.w	1c010 <_strtol_l.constprop.0>
   1c11a:	bf00      	nop
   1c11c:	2000c6f0 	.word	0x2000c6f0

0001c120 <_strtoll_l.constprop.0>:
   1c120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c124:	4690      	mov	r8, r2
   1c126:	b085      	sub	sp, #20
   1c128:	4689      	mov	r9, r1
   1c12a:	461e      	mov	r6, r3
   1c12c:	460d      	mov	r5, r1
   1c12e:	4a45      	ldr	r2, [pc, #276]	; (1c244 <_strtoll_l.constprop.0+0x124>)
   1c130:	9002      	str	r0, [sp, #8]
   1c132:	462b      	mov	r3, r5
   1c134:	f815 4b01 	ldrb.w	r4, [r5], #1
   1c138:	5d17      	ldrb	r7, [r2, r4]
   1c13a:	f017 0708 	ands.w	r7, r7, #8
   1c13e:	d1f8      	bne.n	1c132 <_strtoll_l.constprop.0+0x12>
   1c140:	2c2d      	cmp	r4, #45	; 0x2d
   1c142:	d141      	bne.n	1c1c8 <_strtoll_l.constprop.0+0xa8>
   1c144:	782c      	ldrb	r4, [r5, #0]
   1c146:	2701      	movs	r7, #1
   1c148:	1c9d      	adds	r5, r3, #2
   1c14a:	2e00      	cmp	r6, #0
   1c14c:	d141      	bne.n	1c1d2 <_strtoll_l.constprop.0+0xb2>
   1c14e:	2c30      	cmp	r4, #48	; 0x30
   1c150:	d04c      	beq.n	1c1ec <_strtoll_l.constprop.0+0xcc>
   1c152:	260a      	movs	r6, #10
   1c154:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   1c158:	f107 3bff 	add.w	fp, r7, #4294967295
   1c15c:	17f3      	asrs	r3, r6, #31
   1c15e:	4632      	mov	r2, r6
   1c160:	f10a 3aff 	add.w	sl, sl, #4294967295
   1c164:	4658      	mov	r0, fp
   1c166:	9303      	str	r3, [sp, #12]
   1c168:	4651      	mov	r1, sl
   1c16a:	f7ec fd41 	bl	8bf0 <__aeabi_uldivmod>
   1c16e:	9201      	str	r2, [sp, #4]
   1c170:	2200      	movs	r2, #0
   1c172:	468e      	mov	lr, r1
   1c174:	4684      	mov	ip, r0
   1c176:	4611      	mov	r1, r2
   1c178:	4610      	mov	r0, r2
   1c17a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1c17e:	2b09      	cmp	r3, #9
   1c180:	d905      	bls.n	1c18e <_strtoll_l.constprop.0+0x6e>
   1c182:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   1c186:	2b19      	cmp	r3, #25
   1c188:	d837      	bhi.n	1c1fa <_strtoll_l.constprop.0+0xda>
   1c18a:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   1c18e:	429e      	cmp	r6, r3
   1c190:	dd3d      	ble.n	1c20e <_strtoll_l.constprop.0+0xee>
   1c192:	1c54      	adds	r4, r2, #1
   1c194:	d015      	beq.n	1c1c2 <_strtoll_l.constprop.0+0xa2>
   1c196:	4584      	cmp	ip, r0
   1c198:	eb7e 0201 	sbcs.w	r2, lr, r1
   1c19c:	d334      	bcc.n	1c208 <_strtoll_l.constprop.0+0xe8>
   1c19e:	458e      	cmp	lr, r1
   1c1a0:	bf08      	it	eq
   1c1a2:	4584      	cmpeq	ip, r0
   1c1a4:	d102      	bne.n	1c1ac <_strtoll_l.constprop.0+0x8c>
   1c1a6:	9a01      	ldr	r2, [sp, #4]
   1c1a8:	429a      	cmp	r2, r3
   1c1aa:	db2d      	blt.n	1c208 <_strtoll_l.constprop.0+0xe8>
   1c1ac:	9a03      	ldr	r2, [sp, #12]
   1c1ae:	4371      	muls	r1, r6
   1c1b0:	fb00 1102 	mla	r1, r0, r2, r1
   1c1b4:	fba6 0200 	umull	r0, r2, r6, r0
   1c1b8:	440a      	add	r2, r1
   1c1ba:	1818      	adds	r0, r3, r0
   1c1bc:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
   1c1c0:	2201      	movs	r2, #1
   1c1c2:	f815 4b01 	ldrb.w	r4, [r5], #1
   1c1c6:	e7d8      	b.n	1c17a <_strtoll_l.constprop.0+0x5a>
   1c1c8:	2c2b      	cmp	r4, #43	; 0x2b
   1c1ca:	bf04      	itt	eq
   1c1cc:	782c      	ldrbeq	r4, [r5, #0]
   1c1ce:	1c9d      	addeq	r5, r3, #2
   1c1d0:	e7bb      	b.n	1c14a <_strtoll_l.constprop.0+0x2a>
   1c1d2:	2e10      	cmp	r6, #16
   1c1d4:	d1be      	bne.n	1c154 <_strtoll_l.constprop.0+0x34>
   1c1d6:	2c30      	cmp	r4, #48	; 0x30
   1c1d8:	d1bc      	bne.n	1c154 <_strtoll_l.constprop.0+0x34>
   1c1da:	782b      	ldrb	r3, [r5, #0]
   1c1dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1c1e0:	2b58      	cmp	r3, #88	; 0x58
   1c1e2:	d1b7      	bne.n	1c154 <_strtoll_l.constprop.0+0x34>
   1c1e4:	786c      	ldrb	r4, [r5, #1]
   1c1e6:	2610      	movs	r6, #16
   1c1e8:	3502      	adds	r5, #2
   1c1ea:	e7b3      	b.n	1c154 <_strtoll_l.constprop.0+0x34>
   1c1ec:	782b      	ldrb	r3, [r5, #0]
   1c1ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1c1f2:	2b58      	cmp	r3, #88	; 0x58
   1c1f4:	d0f6      	beq.n	1c1e4 <_strtoll_l.constprop.0+0xc4>
   1c1f6:	2608      	movs	r6, #8
   1c1f8:	e7ac      	b.n	1c154 <_strtoll_l.constprop.0+0x34>
   1c1fa:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   1c1fe:	2b19      	cmp	r3, #25
   1c200:	d805      	bhi.n	1c20e <_strtoll_l.constprop.0+0xee>
   1c202:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   1c206:	e7c2      	b.n	1c18e <_strtoll_l.constprop.0+0x6e>
   1c208:	f04f 32ff 	mov.w	r2, #4294967295
   1c20c:	e7d9      	b.n	1c1c2 <_strtoll_l.constprop.0+0xa2>
   1c20e:	1c53      	adds	r3, r2, #1
   1c210:	d10a      	bne.n	1c228 <_strtoll_l.constprop.0+0x108>
   1c212:	2322      	movs	r3, #34	; 0x22
   1c214:	9a02      	ldr	r2, [sp, #8]
   1c216:	4658      	mov	r0, fp
   1c218:	4651      	mov	r1, sl
   1c21a:	6013      	str	r3, [r2, #0]
   1c21c:	f1b8 0f00 	cmp.w	r8, #0
   1c220:	d10a      	bne.n	1c238 <_strtoll_l.constprop.0+0x118>
   1c222:	b005      	add	sp, #20
   1c224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c228:	b117      	cbz	r7, 1c230 <_strtoll_l.constprop.0+0x110>
   1c22a:	4240      	negs	r0, r0
   1c22c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c230:	f1b8 0f00 	cmp.w	r8, #0
   1c234:	d0f5      	beq.n	1c222 <_strtoll_l.constprop.0+0x102>
   1c236:	b10a      	cbz	r2, 1c23c <_strtoll_l.constprop.0+0x11c>
   1c238:	f105 39ff 	add.w	r9, r5, #4294967295
   1c23c:	f8c8 9000 	str.w	r9, [r8]
   1c240:	e7ef      	b.n	1c222 <_strtoll_l.constprop.0+0x102>
   1c242:	bf00      	nop
   1c244:	00027ac8 	.word	0x00027ac8

0001c248 <strtoll>:
   1c248:	4613      	mov	r3, r2
   1c24a:	460a      	mov	r2, r1
   1c24c:	4601      	mov	r1, r0
   1c24e:	4802      	ldr	r0, [pc, #8]	; (1c258 <strtoll+0x10>)
   1c250:	6800      	ldr	r0, [r0, #0]
   1c252:	f7ff bf65 	b.w	1c120 <_strtoll_l.constprop.0>
   1c256:	bf00      	nop
   1c258:	2000c6f0 	.word	0x2000c6f0

0001c25c <_strtoul_l.constprop.0>:
   1c25c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c260:	4686      	mov	lr, r0
   1c262:	460d      	mov	r5, r1
   1c264:	4e35      	ldr	r6, [pc, #212]	; (1c33c <_strtoul_l.constprop.0+0xe0>)
   1c266:	4628      	mov	r0, r5
   1c268:	f815 4b01 	ldrb.w	r4, [r5], #1
   1c26c:	5d37      	ldrb	r7, [r6, r4]
   1c26e:	f017 0708 	ands.w	r7, r7, #8
   1c272:	d1f8      	bne.n	1c266 <_strtoul_l.constprop.0+0xa>
   1c274:	2c2d      	cmp	r4, #45	; 0x2d
   1c276:	d126      	bne.n	1c2c6 <_strtoul_l.constprop.0+0x6a>
   1c278:	782c      	ldrb	r4, [r5, #0]
   1c27a:	2701      	movs	r7, #1
   1c27c:	1c85      	adds	r5, r0, #2
   1c27e:	bb3b      	cbnz	r3, 1c2d0 <_strtoul_l.constprop.0+0x74>
   1c280:	2c30      	cmp	r4, #48	; 0x30
   1c282:	d032      	beq.n	1c2ea <_strtoul_l.constprop.0+0x8e>
   1c284:	230a      	movs	r3, #10
   1c286:	f04f 38ff 	mov.w	r8, #4294967295
   1c28a:	2600      	movs	r6, #0
   1c28c:	fbb8 f8f3 	udiv	r8, r8, r3
   1c290:	fb03 f908 	mul.w	r9, r3, r8
   1c294:	4630      	mov	r0, r6
   1c296:	ea6f 0909 	mvn.w	r9, r9
   1c29a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   1c29e:	f1bc 0f09 	cmp.w	ip, #9
   1c2a2:	d829      	bhi.n	1c2f8 <_strtoul_l.constprop.0+0x9c>
   1c2a4:	4664      	mov	r4, ip
   1c2a6:	42a3      	cmp	r3, r4
   1c2a8:	dd37      	ble.n	1c31a <_strtoul_l.constprop.0+0xbe>
   1c2aa:	f1b6 3fff 	cmp.w	r6, #4294967295
   1c2ae:	d007      	beq.n	1c2c0 <_strtoul_l.constprop.0+0x64>
   1c2b0:	4580      	cmp	r8, r0
   1c2b2:	d32f      	bcc.n	1c314 <_strtoul_l.constprop.0+0xb8>
   1c2b4:	d101      	bne.n	1c2ba <_strtoul_l.constprop.0+0x5e>
   1c2b6:	45a1      	cmp	r9, r4
   1c2b8:	db2c      	blt.n	1c314 <_strtoul_l.constprop.0+0xb8>
   1c2ba:	fb00 4003 	mla	r0, r0, r3, r4
   1c2be:	2601      	movs	r6, #1
   1c2c0:	f815 4b01 	ldrb.w	r4, [r5], #1
   1c2c4:	e7e9      	b.n	1c29a <_strtoul_l.constprop.0+0x3e>
   1c2c6:	2c2b      	cmp	r4, #43	; 0x2b
   1c2c8:	bf04      	itt	eq
   1c2ca:	782c      	ldrbeq	r4, [r5, #0]
   1c2cc:	1c85      	addeq	r5, r0, #2
   1c2ce:	e7d6      	b.n	1c27e <_strtoul_l.constprop.0+0x22>
   1c2d0:	2b10      	cmp	r3, #16
   1c2d2:	d1d8      	bne.n	1c286 <_strtoul_l.constprop.0+0x2a>
   1c2d4:	2c30      	cmp	r4, #48	; 0x30
   1c2d6:	d1d6      	bne.n	1c286 <_strtoul_l.constprop.0+0x2a>
   1c2d8:	7828      	ldrb	r0, [r5, #0]
   1c2da:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   1c2de:	2858      	cmp	r0, #88	; 0x58
   1c2e0:	d1d1      	bne.n	1c286 <_strtoul_l.constprop.0+0x2a>
   1c2e2:	786c      	ldrb	r4, [r5, #1]
   1c2e4:	2310      	movs	r3, #16
   1c2e6:	3502      	adds	r5, #2
   1c2e8:	e7cd      	b.n	1c286 <_strtoul_l.constprop.0+0x2a>
   1c2ea:	782b      	ldrb	r3, [r5, #0]
   1c2ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1c2f0:	2b58      	cmp	r3, #88	; 0x58
   1c2f2:	d0f6      	beq.n	1c2e2 <_strtoul_l.constprop.0+0x86>
   1c2f4:	2308      	movs	r3, #8
   1c2f6:	e7c6      	b.n	1c286 <_strtoul_l.constprop.0+0x2a>
   1c2f8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   1c2fc:	f1bc 0f19 	cmp.w	ip, #25
   1c300:	d801      	bhi.n	1c306 <_strtoul_l.constprop.0+0xaa>
   1c302:	3c37      	subs	r4, #55	; 0x37
   1c304:	e7cf      	b.n	1c2a6 <_strtoul_l.constprop.0+0x4a>
   1c306:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   1c30a:	f1bc 0f19 	cmp.w	ip, #25
   1c30e:	d804      	bhi.n	1c31a <_strtoul_l.constprop.0+0xbe>
   1c310:	3c57      	subs	r4, #87	; 0x57
   1c312:	e7c8      	b.n	1c2a6 <_strtoul_l.constprop.0+0x4a>
   1c314:	f04f 36ff 	mov.w	r6, #4294967295
   1c318:	e7d2      	b.n	1c2c0 <_strtoul_l.constprop.0+0x64>
   1c31a:	1c73      	adds	r3, r6, #1
   1c31c:	d106      	bne.n	1c32c <_strtoul_l.constprop.0+0xd0>
   1c31e:	2322      	movs	r3, #34	; 0x22
   1c320:	4630      	mov	r0, r6
   1c322:	f8ce 3000 	str.w	r3, [lr]
   1c326:	b932      	cbnz	r2, 1c336 <_strtoul_l.constprop.0+0xda>
   1c328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c32c:	b107      	cbz	r7, 1c330 <_strtoul_l.constprop.0+0xd4>
   1c32e:	4240      	negs	r0, r0
   1c330:	2a00      	cmp	r2, #0
   1c332:	d0f9      	beq.n	1c328 <_strtoul_l.constprop.0+0xcc>
   1c334:	b106      	cbz	r6, 1c338 <_strtoul_l.constprop.0+0xdc>
   1c336:	1e69      	subs	r1, r5, #1
   1c338:	6011      	str	r1, [r2, #0]
   1c33a:	e7f5      	b.n	1c328 <_strtoul_l.constprop.0+0xcc>
   1c33c:	00027ac8 	.word	0x00027ac8

0001c340 <strtoul>:
   1c340:	4613      	mov	r3, r2
   1c342:	460a      	mov	r2, r1
   1c344:	4601      	mov	r1, r0
   1c346:	4802      	ldr	r0, [pc, #8]	; (1c350 <strtoul+0x10>)
   1c348:	6800      	ldr	r0, [r0, #0]
   1c34a:	f7ff bf87 	b.w	1c25c <_strtoul_l.constprop.0>
   1c34e:	bf00      	nop
   1c350:	2000c6f0 	.word	0x2000c6f0

0001c354 <vsniprintf>:
   1c354:	b507      	push	{r0, r1, r2, lr}
   1c356:	9300      	str	r3, [sp, #0]
   1c358:	4613      	mov	r3, r2
   1c35a:	460a      	mov	r2, r1
   1c35c:	4601      	mov	r1, r0
   1c35e:	4803      	ldr	r0, [pc, #12]	; (1c36c <vsniprintf+0x18>)
   1c360:	6800      	ldr	r0, [r0, #0]
   1c362:	f005 fea2 	bl	220aa <_vsniprintf_r>
   1c366:	b003      	add	sp, #12
   1c368:	f85d fb04 	ldr.w	pc, [sp], #4
   1c36c:	2000c6f0 	.word	0x2000c6f0

0001c370 <_vsiscanf_r>:
   1c370:	b570      	push	{r4, r5, r6, lr}
   1c372:	461e      	mov	r6, r3
   1c374:	b09a      	sub	sp, #104	; 0x68
   1c376:	f44f 7301 	mov.w	r3, #516	; 0x204
   1c37a:	4604      	mov	r4, r0
   1c37c:	4608      	mov	r0, r1
   1c37e:	4615      	mov	r5, r2
   1c380:	f8ad 300c 	strh.w	r3, [sp, #12]
   1c384:	9100      	str	r1, [sp, #0]
   1c386:	9104      	str	r1, [sp, #16]
   1c388:	f7ec fdd9 	bl	8f3e <strlen>
   1c38c:	4b09      	ldr	r3, [pc, #36]	; (1c3b4 <_vsiscanf_r+0x44>)
   1c38e:	462a      	mov	r2, r5
   1c390:	4669      	mov	r1, sp
   1c392:	9001      	str	r0, [sp, #4]
   1c394:	9309      	str	r3, [sp, #36]	; 0x24
   1c396:	2300      	movs	r3, #0
   1c398:	9005      	str	r0, [sp, #20]
   1c39a:	4620      	mov	r0, r4
   1c39c:	930d      	str	r3, [sp, #52]	; 0x34
   1c39e:	9312      	str	r3, [sp, #72]	; 0x48
   1c3a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c3a4:	f8ad 300e 	strh.w	r3, [sp, #14]
   1c3a8:	4633      	mov	r3, r6
   1c3aa:	f001 f957 	bl	1d65c <__ssvfiscanf_r>
   1c3ae:	b01a      	add	sp, #104	; 0x68
   1c3b0:	bd70      	pop	{r4, r5, r6, pc}
   1c3b2:	bf00      	nop
   1c3b4:	00021f1f 	.word	0x00021f1f

0001c3b8 <vsiscanf>:
   1c3b8:	4613      	mov	r3, r2
   1c3ba:	460a      	mov	r2, r1
   1c3bc:	4601      	mov	r1, r0
   1c3be:	4802      	ldr	r0, [pc, #8]	; (1c3c8 <vsiscanf+0x10>)
   1c3c0:	6800      	ldr	r0, [r0, #0]
   1c3c2:	f7ff bfd5 	b.w	1c370 <_vsiscanf_r>
   1c3c6:	bf00      	nop
   1c3c8:	2000c6f0 	.word	0x2000c6f0

0001c3cc <__swbuf_r>:
   1c3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c3ce:	460e      	mov	r6, r1
   1c3d0:	4614      	mov	r4, r2
   1c3d2:	4605      	mov	r5, r0
   1c3d4:	b118      	cbz	r0, 1c3de <__swbuf_r+0x12>
   1c3d6:	6983      	ldr	r3, [r0, #24]
   1c3d8:	b90b      	cbnz	r3, 1c3de <__swbuf_r+0x12>
   1c3da:	f000 f955 	bl	1c688 <__sinit>
   1c3de:	4b21      	ldr	r3, [pc, #132]	; (1c464 <__swbuf_r+0x98>)
   1c3e0:	429c      	cmp	r4, r3
   1c3e2:	d110      	bne.n	1c406 <__swbuf_r+0x3a>
   1c3e4:	686c      	ldr	r4, [r5, #4]
   1c3e6:	69a3      	ldr	r3, [r4, #24]
   1c3e8:	60a3      	str	r3, [r4, #8]
   1c3ea:	89a3      	ldrh	r3, [r4, #12]
   1c3ec:	071a      	lsls	r2, r3, #28
   1c3ee:	d501      	bpl.n	1c3f4 <__swbuf_r+0x28>
   1c3f0:	6923      	ldr	r3, [r4, #16]
   1c3f2:	b993      	cbnz	r3, 1c41a <__swbuf_r+0x4e>
   1c3f4:	4621      	mov	r1, r4
   1c3f6:	4628      	mov	r0, r5
   1c3f8:	f000 f84c 	bl	1c494 <__swsetup_r>
   1c3fc:	b168      	cbz	r0, 1c41a <__swbuf_r+0x4e>
   1c3fe:	f04f 37ff 	mov.w	r7, #4294967295
   1c402:	4638      	mov	r0, r7
   1c404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c406:	4b18      	ldr	r3, [pc, #96]	; (1c468 <__swbuf_r+0x9c>)
   1c408:	429c      	cmp	r4, r3
   1c40a:	d101      	bne.n	1c410 <__swbuf_r+0x44>
   1c40c:	68ac      	ldr	r4, [r5, #8]
   1c40e:	e7ea      	b.n	1c3e6 <__swbuf_r+0x1a>
   1c410:	4b16      	ldr	r3, [pc, #88]	; (1c46c <__swbuf_r+0xa0>)
   1c412:	429c      	cmp	r4, r3
   1c414:	bf08      	it	eq
   1c416:	68ec      	ldreq	r4, [r5, #12]
   1c418:	e7e5      	b.n	1c3e6 <__swbuf_r+0x1a>
   1c41a:	6923      	ldr	r3, [r4, #16]
   1c41c:	b2f6      	uxtb	r6, r6
   1c41e:	6820      	ldr	r0, [r4, #0]
   1c420:	4637      	mov	r7, r6
   1c422:	1ac0      	subs	r0, r0, r3
   1c424:	6963      	ldr	r3, [r4, #20]
   1c426:	4283      	cmp	r3, r0
   1c428:	dc05      	bgt.n	1c436 <__swbuf_r+0x6a>
   1c42a:	4621      	mov	r1, r4
   1c42c:	4628      	mov	r0, r5
   1c42e:	f000 f8ad 	bl	1c58c <_fflush_r>
   1c432:	2800      	cmp	r0, #0
   1c434:	d1e3      	bne.n	1c3fe <__swbuf_r+0x32>
   1c436:	68a3      	ldr	r3, [r4, #8]
   1c438:	3001      	adds	r0, #1
   1c43a:	3b01      	subs	r3, #1
   1c43c:	60a3      	str	r3, [r4, #8]
   1c43e:	6823      	ldr	r3, [r4, #0]
   1c440:	1c5a      	adds	r2, r3, #1
   1c442:	6022      	str	r2, [r4, #0]
   1c444:	701e      	strb	r6, [r3, #0]
   1c446:	6963      	ldr	r3, [r4, #20]
   1c448:	4283      	cmp	r3, r0
   1c44a:	d004      	beq.n	1c456 <__swbuf_r+0x8a>
   1c44c:	89a3      	ldrh	r3, [r4, #12]
   1c44e:	07db      	lsls	r3, r3, #31
   1c450:	d5d7      	bpl.n	1c402 <__swbuf_r+0x36>
   1c452:	2e0a      	cmp	r6, #10
   1c454:	d1d5      	bne.n	1c402 <__swbuf_r+0x36>
   1c456:	4621      	mov	r1, r4
   1c458:	4628      	mov	r0, r5
   1c45a:	f000 f897 	bl	1c58c <_fflush_r>
   1c45e:	2800      	cmp	r0, #0
   1c460:	d0cf      	beq.n	1c402 <__swbuf_r+0x36>
   1c462:	e7cc      	b.n	1c3fe <__swbuf_r+0x32>
   1c464:	000239d4 	.word	0x000239d4
   1c468:	000239b4 	.word	0x000239b4
   1c46c:	00023994 	.word	0x00023994

0001c470 <_write_r>:
   1c470:	b538      	push	{r3, r4, r5, lr}
   1c472:	4604      	mov	r4, r0
   1c474:	4d06      	ldr	r5, [pc, #24]	; (1c490 <_write_r+0x20>)
   1c476:	4608      	mov	r0, r1
   1c478:	4611      	mov	r1, r2
   1c47a:	2200      	movs	r2, #0
   1c47c:	602a      	str	r2, [r5, #0]
   1c47e:	461a      	mov	r2, r3
   1c480:	f002 fbe5 	bl	1ec4e <_write>
   1c484:	1c43      	adds	r3, r0, #1
   1c486:	d102      	bne.n	1c48e <_write_r+0x1e>
   1c488:	682b      	ldr	r3, [r5, #0]
   1c48a:	b103      	cbz	r3, 1c48e <_write_r+0x1e>
   1c48c:	6023      	str	r3, [r4, #0]
   1c48e:	bd38      	pop	{r3, r4, r5, pc}
   1c490:	2000e348 	.word	0x2000e348

0001c494 <__swsetup_r>:
   1c494:	4b31      	ldr	r3, [pc, #196]	; (1c55c <__swsetup_r+0xc8>)
   1c496:	b570      	push	{r4, r5, r6, lr}
   1c498:	681d      	ldr	r5, [r3, #0]
   1c49a:	4606      	mov	r6, r0
   1c49c:	460c      	mov	r4, r1
   1c49e:	b125      	cbz	r5, 1c4aa <__swsetup_r+0x16>
   1c4a0:	69ab      	ldr	r3, [r5, #24]
   1c4a2:	b913      	cbnz	r3, 1c4aa <__swsetup_r+0x16>
   1c4a4:	4628      	mov	r0, r5
   1c4a6:	f000 f8ef 	bl	1c688 <__sinit>
   1c4aa:	4b2d      	ldr	r3, [pc, #180]	; (1c560 <__swsetup_r+0xcc>)
   1c4ac:	429c      	cmp	r4, r3
   1c4ae:	d10e      	bne.n	1c4ce <__swsetup_r+0x3a>
   1c4b0:	686c      	ldr	r4, [r5, #4]
   1c4b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1c4b6:	071a      	lsls	r2, r3, #28
   1c4b8:	d42c      	bmi.n	1c514 <__swsetup_r+0x80>
   1c4ba:	06dd      	lsls	r5, r3, #27
   1c4bc:	d411      	bmi.n	1c4e2 <__swsetup_r+0x4e>
   1c4be:	2209      	movs	r2, #9
   1c4c0:	6032      	str	r2, [r6, #0]
   1c4c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c4c6:	f04f 30ff 	mov.w	r0, #4294967295
   1c4ca:	81a3      	strh	r3, [r4, #12]
   1c4cc:	e03d      	b.n	1c54a <__swsetup_r+0xb6>
   1c4ce:	4b25      	ldr	r3, [pc, #148]	; (1c564 <__swsetup_r+0xd0>)
   1c4d0:	429c      	cmp	r4, r3
   1c4d2:	d101      	bne.n	1c4d8 <__swsetup_r+0x44>
   1c4d4:	68ac      	ldr	r4, [r5, #8]
   1c4d6:	e7ec      	b.n	1c4b2 <__swsetup_r+0x1e>
   1c4d8:	4b23      	ldr	r3, [pc, #140]	; (1c568 <__swsetup_r+0xd4>)
   1c4da:	429c      	cmp	r4, r3
   1c4dc:	bf08      	it	eq
   1c4de:	68ec      	ldreq	r4, [r5, #12]
   1c4e0:	e7e7      	b.n	1c4b2 <__swsetup_r+0x1e>
   1c4e2:	0758      	lsls	r0, r3, #29
   1c4e4:	d512      	bpl.n	1c50c <__swsetup_r+0x78>
   1c4e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1c4e8:	b141      	cbz	r1, 1c4fc <__swsetup_r+0x68>
   1c4ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1c4ee:	4299      	cmp	r1, r3
   1c4f0:	d002      	beq.n	1c4f8 <__swsetup_r+0x64>
   1c4f2:	4630      	mov	r0, r6
   1c4f4:	f7ff f8f4 	bl	1b6e0 <_free_r>
   1c4f8:	2300      	movs	r3, #0
   1c4fa:	6363      	str	r3, [r4, #52]	; 0x34
   1c4fc:	89a3      	ldrh	r3, [r4, #12]
   1c4fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   1c502:	81a3      	strh	r3, [r4, #12]
   1c504:	2300      	movs	r3, #0
   1c506:	6063      	str	r3, [r4, #4]
   1c508:	6923      	ldr	r3, [r4, #16]
   1c50a:	6023      	str	r3, [r4, #0]
   1c50c:	89a3      	ldrh	r3, [r4, #12]
   1c50e:	f043 0308 	orr.w	r3, r3, #8
   1c512:	81a3      	strh	r3, [r4, #12]
   1c514:	6923      	ldr	r3, [r4, #16]
   1c516:	b94b      	cbnz	r3, 1c52c <__swsetup_r+0x98>
   1c518:	89a3      	ldrh	r3, [r4, #12]
   1c51a:	f403 7320 	and.w	r3, r3, #640	; 0x280
   1c51e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1c522:	d003      	beq.n	1c52c <__swsetup_r+0x98>
   1c524:	4621      	mov	r1, r4
   1c526:	4630      	mov	r0, r6
   1c528:	f000 fb72 	bl	1cc10 <__smakebuf_r>
   1c52c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1c530:	f013 0201 	ands.w	r2, r3, #1
   1c534:	d00a      	beq.n	1c54c <__swsetup_r+0xb8>
   1c536:	2200      	movs	r2, #0
   1c538:	60a2      	str	r2, [r4, #8]
   1c53a:	6962      	ldr	r2, [r4, #20]
   1c53c:	4252      	negs	r2, r2
   1c53e:	61a2      	str	r2, [r4, #24]
   1c540:	6922      	ldr	r2, [r4, #16]
   1c542:	b942      	cbnz	r2, 1c556 <__swsetup_r+0xc2>
   1c544:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   1c548:	d1bb      	bne.n	1c4c2 <__swsetup_r+0x2e>
   1c54a:	bd70      	pop	{r4, r5, r6, pc}
   1c54c:	0799      	lsls	r1, r3, #30
   1c54e:	bf58      	it	pl
   1c550:	6962      	ldrpl	r2, [r4, #20]
   1c552:	60a2      	str	r2, [r4, #8]
   1c554:	e7f4      	b.n	1c540 <__swsetup_r+0xac>
   1c556:	2000      	movs	r0, #0
   1c558:	e7f7      	b.n	1c54a <__swsetup_r+0xb6>
   1c55a:	bf00      	nop
   1c55c:	2000c6f0 	.word	0x2000c6f0
   1c560:	000239d4 	.word	0x000239d4
   1c564:	000239b4 	.word	0x000239b4
   1c568:	00023994 	.word	0x00023994

0001c56c <_close_r>:
   1c56c:	b538      	push	{r3, r4, r5, lr}
   1c56e:	2300      	movs	r3, #0
   1c570:	4d05      	ldr	r5, [pc, #20]	; (1c588 <_close_r+0x1c>)
   1c572:	4604      	mov	r4, r0
   1c574:	4608      	mov	r0, r1
   1c576:	602b      	str	r3, [r5, #0]
   1c578:	f002 fb6d 	bl	1ec56 <_close>
   1c57c:	1c43      	adds	r3, r0, #1
   1c57e:	d102      	bne.n	1c586 <_close_r+0x1a>
   1c580:	682b      	ldr	r3, [r5, #0]
   1c582:	b103      	cbz	r3, 1c586 <_close_r+0x1a>
   1c584:	6023      	str	r3, [r4, #0]
   1c586:	bd38      	pop	{r3, r4, r5, pc}
   1c588:	2000e348 	.word	0x2000e348

0001c58c <_fflush_r>:
   1c58c:	b538      	push	{r3, r4, r5, lr}
   1c58e:	690b      	ldr	r3, [r1, #16]
   1c590:	4605      	mov	r5, r0
   1c592:	460c      	mov	r4, r1
   1c594:	b913      	cbnz	r3, 1c59c <_fflush_r+0x10>
   1c596:	2500      	movs	r5, #0
   1c598:	4628      	mov	r0, r5
   1c59a:	bd38      	pop	{r3, r4, r5, pc}
   1c59c:	b118      	cbz	r0, 1c5a6 <_fflush_r+0x1a>
   1c59e:	6983      	ldr	r3, [r0, #24]
   1c5a0:	b90b      	cbnz	r3, 1c5a6 <_fflush_r+0x1a>
   1c5a2:	f000 f871 	bl	1c688 <__sinit>
   1c5a6:	4b14      	ldr	r3, [pc, #80]	; (1c5f8 <_fflush_r+0x6c>)
   1c5a8:	429c      	cmp	r4, r3
   1c5aa:	d11b      	bne.n	1c5e4 <_fflush_r+0x58>
   1c5ac:	686c      	ldr	r4, [r5, #4]
   1c5ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1c5b2:	2b00      	cmp	r3, #0
   1c5b4:	d0ef      	beq.n	1c596 <_fflush_r+0xa>
   1c5b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1c5b8:	07d0      	lsls	r0, r2, #31
   1c5ba:	d404      	bmi.n	1c5c6 <_fflush_r+0x3a>
   1c5bc:	0599      	lsls	r1, r3, #22
   1c5be:	d402      	bmi.n	1c5c6 <_fflush_r+0x3a>
   1c5c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c5c2:	f002 fb65 	bl	1ec90 <__retarget_lock_acquire_recursive>
   1c5c6:	4628      	mov	r0, r5
   1c5c8:	4621      	mov	r1, r4
   1c5ca:	f005 fe26 	bl	2221a <__sflush_r>
   1c5ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1c5d0:	4605      	mov	r5, r0
   1c5d2:	07da      	lsls	r2, r3, #31
   1c5d4:	d4e0      	bmi.n	1c598 <_fflush_r+0xc>
   1c5d6:	89a3      	ldrh	r3, [r4, #12]
   1c5d8:	059b      	lsls	r3, r3, #22
   1c5da:	d4dd      	bmi.n	1c598 <_fflush_r+0xc>
   1c5dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c5de:	f002 fb5d 	bl	1ec9c <__retarget_lock_release_recursive>
   1c5e2:	e7d9      	b.n	1c598 <_fflush_r+0xc>
   1c5e4:	4b05      	ldr	r3, [pc, #20]	; (1c5fc <_fflush_r+0x70>)
   1c5e6:	429c      	cmp	r4, r3
   1c5e8:	d101      	bne.n	1c5ee <_fflush_r+0x62>
   1c5ea:	68ac      	ldr	r4, [r5, #8]
   1c5ec:	e7df      	b.n	1c5ae <_fflush_r+0x22>
   1c5ee:	4b04      	ldr	r3, [pc, #16]	; (1c600 <_fflush_r+0x74>)
   1c5f0:	429c      	cmp	r4, r3
   1c5f2:	bf08      	it	eq
   1c5f4:	68ec      	ldreq	r4, [r5, #12]
   1c5f6:	e7da      	b.n	1c5ae <_fflush_r+0x22>
   1c5f8:	000239d4 	.word	0x000239d4
   1c5fc:	000239b4 	.word	0x000239b4
   1c600:	00023994 	.word	0x00023994

0001c604 <std>:
   1c604:	2300      	movs	r3, #0
   1c606:	b510      	push	{r4, lr}
   1c608:	4604      	mov	r4, r0
   1c60a:	6083      	str	r3, [r0, #8]
   1c60c:	8181      	strh	r1, [r0, #12]
   1c60e:	4619      	mov	r1, r3
   1c610:	6643      	str	r3, [r0, #100]	; 0x64
   1c612:	81c2      	strh	r2, [r0, #14]
   1c614:	2208      	movs	r2, #8
   1c616:	6183      	str	r3, [r0, #24]
   1c618:	e9c0 3300 	strd	r3, r3, [r0]
   1c61c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   1c620:	305c      	adds	r0, #92	; 0x5c
   1c622:	f005 fb50 	bl	21cc6 <memset>
   1c626:	4b05      	ldr	r3, [pc, #20]	; (1c63c <std+0x38>)
   1c628:	6224      	str	r4, [r4, #32]
   1c62a:	6263      	str	r3, [r4, #36]	; 0x24
   1c62c:	4b04      	ldr	r3, [pc, #16]	; (1c640 <std+0x3c>)
   1c62e:	62a3      	str	r3, [r4, #40]	; 0x28
   1c630:	4b04      	ldr	r3, [pc, #16]	; (1c644 <std+0x40>)
   1c632:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c634:	4b04      	ldr	r3, [pc, #16]	; (1c648 <std+0x44>)
   1c636:	6323      	str	r3, [r4, #48]	; 0x30
   1c638:	bd10      	pop	{r4, pc}
   1c63a:	bf00      	nop
   1c63c:	00021efd 	.word	0x00021efd
   1c640:	00021f23 	.word	0x00021f23
   1c644:	00021f5b 	.word	0x00021f5b
   1c648:	00021f7f 	.word	0x00021f7f

0001c64c <_cleanup_r>:
   1c64c:	4901      	ldr	r1, [pc, #4]	; (1c654 <_cleanup_r+0x8>)
   1c64e:	f005 be7d 	b.w	2234c <_fwalk_reent>
   1c652:	bf00      	nop
   1c654:	0001c58d 	.word	0x0001c58d

0001c658 <__sfp_lock_acquire>:
   1c658:	4801      	ldr	r0, [pc, #4]	; (1c660 <__sfp_lock_acquire+0x8>)
   1c65a:	f002 bb19 	b.w	1ec90 <__retarget_lock_acquire_recursive>
   1c65e:	bf00      	nop
   1c660:	2000c9a4 	.word	0x2000c9a4

0001c664 <__sfp_lock_release>:
   1c664:	4801      	ldr	r0, [pc, #4]	; (1c66c <__sfp_lock_release+0x8>)
   1c666:	f002 bb19 	b.w	1ec9c <__retarget_lock_release_recursive>
   1c66a:	bf00      	nop
   1c66c:	2000c9a4 	.word	0x2000c9a4

0001c670 <__sinit_lock_acquire>:
   1c670:	4801      	ldr	r0, [pc, #4]	; (1c678 <__sinit_lock_acquire+0x8>)
   1c672:	f002 bb0d 	b.w	1ec90 <__retarget_lock_acquire_recursive>
   1c676:	bf00      	nop
   1c678:	2000c9b8 	.word	0x2000c9b8

0001c67c <__sinit_lock_release>:
   1c67c:	4801      	ldr	r0, [pc, #4]	; (1c684 <__sinit_lock_release+0x8>)
   1c67e:	f002 bb0d 	b.w	1ec9c <__retarget_lock_release_recursive>
   1c682:	bf00      	nop
   1c684:	2000c9b8 	.word	0x2000c9b8

0001c688 <__sinit>:
   1c688:	b510      	push	{r4, lr}
   1c68a:	4604      	mov	r4, r0
   1c68c:	f7ff fff0 	bl	1c670 <__sinit_lock_acquire>
   1c690:	69a3      	ldr	r3, [r4, #24]
   1c692:	b11b      	cbz	r3, 1c69c <__sinit+0x14>
   1c694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c698:	f7ff bff0 	b.w	1c67c <__sinit_lock_release>
   1c69c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   1c6a0:	6523      	str	r3, [r4, #80]	; 0x50
   1c6a2:	4620      	mov	r0, r4
   1c6a4:	4b12      	ldr	r3, [pc, #72]	; (1c6f0 <__sinit+0x68>)
   1c6a6:	4a13      	ldr	r2, [pc, #76]	; (1c6f4 <__sinit+0x6c>)
   1c6a8:	681b      	ldr	r3, [r3, #0]
   1c6aa:	62a2      	str	r2, [r4, #40]	; 0x28
   1c6ac:	42a3      	cmp	r3, r4
   1c6ae:	bf04      	itt	eq
   1c6b0:	2301      	moveq	r3, #1
   1c6b2:	61a3      	streq	r3, [r4, #24]
   1c6b4:	f000 f820 	bl	1c6f8 <__sfp>
   1c6b8:	6060      	str	r0, [r4, #4]
   1c6ba:	4620      	mov	r0, r4
   1c6bc:	f000 f81c 	bl	1c6f8 <__sfp>
   1c6c0:	60a0      	str	r0, [r4, #8]
   1c6c2:	4620      	mov	r0, r4
   1c6c4:	f000 f818 	bl	1c6f8 <__sfp>
   1c6c8:	2200      	movs	r2, #0
   1c6ca:	2104      	movs	r1, #4
   1c6cc:	60e0      	str	r0, [r4, #12]
   1c6ce:	6860      	ldr	r0, [r4, #4]
   1c6d0:	f7ff ff98 	bl	1c604 <std>
   1c6d4:	2201      	movs	r2, #1
   1c6d6:	2109      	movs	r1, #9
   1c6d8:	68a0      	ldr	r0, [r4, #8]
   1c6da:	f7ff ff93 	bl	1c604 <std>
   1c6de:	2202      	movs	r2, #2
   1c6e0:	2112      	movs	r1, #18
   1c6e2:	68e0      	ldr	r0, [r4, #12]
   1c6e4:	f7ff ff8e 	bl	1c604 <std>
   1c6e8:	2301      	movs	r3, #1
   1c6ea:	61a3      	str	r3, [r4, #24]
   1c6ec:	e7d2      	b.n	1c694 <__sinit+0xc>
   1c6ee:	bf00      	nop
   1c6f0:	00023968 	.word	0x00023968
   1c6f4:	0001c64d 	.word	0x0001c64d

0001c6f8 <__sfp>:
   1c6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c6fa:	4607      	mov	r7, r0
   1c6fc:	f7ff ffac 	bl	1c658 <__sfp_lock_acquire>
   1c700:	4b1e      	ldr	r3, [pc, #120]	; (1c77c <__sfp+0x84>)
   1c702:	681e      	ldr	r6, [r3, #0]
   1c704:	69b3      	ldr	r3, [r6, #24]
   1c706:	b913      	cbnz	r3, 1c70e <__sfp+0x16>
   1c708:	4630      	mov	r0, r6
   1c70a:	f7ff ffbd 	bl	1c688 <__sinit>
   1c70e:	3648      	adds	r6, #72	; 0x48
   1c710:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   1c714:	3b01      	subs	r3, #1
   1c716:	d503      	bpl.n	1c720 <__sfp+0x28>
   1c718:	6833      	ldr	r3, [r6, #0]
   1c71a:	b30b      	cbz	r3, 1c760 <__sfp+0x68>
   1c71c:	6836      	ldr	r6, [r6, #0]
   1c71e:	e7f7      	b.n	1c710 <__sfp+0x18>
   1c720:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   1c724:	b9d5      	cbnz	r5, 1c75c <__sfp+0x64>
   1c726:	4b16      	ldr	r3, [pc, #88]	; (1c780 <__sfp+0x88>)
   1c728:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1c72c:	6665      	str	r5, [r4, #100]	; 0x64
   1c72e:	60e3      	str	r3, [r4, #12]
   1c730:	f002 faa4 	bl	1ec7c <__retarget_lock_init_recursive>
   1c734:	f7ff ff96 	bl	1c664 <__sfp_lock_release>
   1c738:	2208      	movs	r2, #8
   1c73a:	4629      	mov	r1, r5
   1c73c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1c740:	6025      	str	r5, [r4, #0]
   1c742:	61a5      	str	r5, [r4, #24]
   1c744:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1c748:	e9c4 5504 	strd	r5, r5, [r4, #16]
   1c74c:	f005 fabb 	bl	21cc6 <memset>
   1c750:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   1c754:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   1c758:	4620      	mov	r0, r4
   1c75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c75c:	3468      	adds	r4, #104	; 0x68
   1c75e:	e7d9      	b.n	1c714 <__sfp+0x1c>
   1c760:	2104      	movs	r1, #4
   1c762:	4638      	mov	r0, r7
   1c764:	f005 fddc 	bl	22320 <__sfmoreglue>
   1c768:	4604      	mov	r4, r0
   1c76a:	6030      	str	r0, [r6, #0]
   1c76c:	2800      	cmp	r0, #0
   1c76e:	d1d5      	bne.n	1c71c <__sfp+0x24>
   1c770:	f7ff ff78 	bl	1c664 <__sfp_lock_release>
   1c774:	230c      	movs	r3, #12
   1c776:	603b      	str	r3, [r7, #0]
   1c778:	e7ee      	b.n	1c758 <__sfp+0x60>
   1c77a:	bf00      	nop
   1c77c:	00023968 	.word	0x00023968
   1c780:	ffff0001 	.word	0xffff0001

0001c784 <__gethex>:
   1c784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c788:	b08b      	sub	sp, #44	; 0x2c
   1c78a:	468b      	mov	fp, r1
   1c78c:	4690      	mov	r8, r2
   1c78e:	9306      	str	r3, [sp, #24]
   1c790:	4bac      	ldr	r3, [pc, #688]	; (1ca44 <__gethex+0x2c0>)
   1c792:	9002      	str	r0, [sp, #8]
   1c794:	681b      	ldr	r3, [r3, #0]
   1c796:	4618      	mov	r0, r3
   1c798:	9303      	str	r3, [sp, #12]
   1c79a:	f7ec fbd0 	bl	8f3e <strlen>
   1c79e:	9b03      	ldr	r3, [sp, #12]
   1c7a0:	9001      	str	r0, [sp, #4]
   1c7a2:	4403      	add	r3, r0
   1c7a4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   1c7a8:	9307      	str	r3, [sp, #28]
   1c7aa:	f8db 3000 	ldr.w	r3, [fp]
   1c7ae:	1c9a      	adds	r2, r3, #2
   1c7b0:	4617      	mov	r7, r2
   1c7b2:	f812 0b01 	ldrb.w	r0, [r2], #1
   1c7b6:	2830      	cmp	r0, #48	; 0x30
   1c7b8:	d0fa      	beq.n	1c7b0 <__gethex+0x2c>
   1c7ba:	1afb      	subs	r3, r7, r3
   1c7bc:	f1a3 0a02 	sub.w	sl, r3, #2
   1c7c0:	f005 fe34 	bl	2242c <__hexdig_fun>
   1c7c4:	4604      	mov	r4, r0
   1c7c6:	2800      	cmp	r0, #0
   1c7c8:	d138      	bne.n	1c83c <__gethex+0xb8>
   1c7ca:	9a01      	ldr	r2, [sp, #4]
   1c7cc:	4638      	mov	r0, r7
   1c7ce:	9903      	ldr	r1, [sp, #12]
   1c7d0:	f005 fbee 	bl	21fb0 <strncmp>
   1c7d4:	4605      	mov	r5, r0
   1c7d6:	2800      	cmp	r0, #0
   1c7d8:	d164      	bne.n	1c8a4 <__gethex+0x120>
   1c7da:	9b01      	ldr	r3, [sp, #4]
   1c7dc:	5cf8      	ldrb	r0, [r7, r3]
   1c7de:	18fe      	adds	r6, r7, r3
   1c7e0:	f005 fe24 	bl	2242c <__hexdig_fun>
   1c7e4:	2800      	cmp	r0, #0
   1c7e6:	d05f      	beq.n	1c8a8 <__gethex+0x124>
   1c7e8:	4633      	mov	r3, r6
   1c7ea:	7818      	ldrb	r0, [r3, #0]
   1c7ec:	461f      	mov	r7, r3
   1c7ee:	3301      	adds	r3, #1
   1c7f0:	2830      	cmp	r0, #48	; 0x30
   1c7f2:	d0fa      	beq.n	1c7ea <__gethex+0x66>
   1c7f4:	f005 fe1a 	bl	2242c <__hexdig_fun>
   1c7f8:	fab0 f480 	clz	r4, r0
   1c7fc:	4635      	mov	r5, r6
   1c7fe:	f04f 0a01 	mov.w	sl, #1
   1c802:	0964      	lsrs	r4, r4, #5
   1c804:	463a      	mov	r2, r7
   1c806:	4616      	mov	r6, r2
   1c808:	3201      	adds	r2, #1
   1c80a:	7830      	ldrb	r0, [r6, #0]
   1c80c:	f005 fe0e 	bl	2242c <__hexdig_fun>
   1c810:	2800      	cmp	r0, #0
   1c812:	d1f8      	bne.n	1c806 <__gethex+0x82>
   1c814:	9a01      	ldr	r2, [sp, #4]
   1c816:	4630      	mov	r0, r6
   1c818:	9903      	ldr	r1, [sp, #12]
   1c81a:	f005 fbc9 	bl	21fb0 <strncmp>
   1c81e:	b980      	cbnz	r0, 1c842 <__gethex+0xbe>
   1c820:	b94d      	cbnz	r5, 1c836 <__gethex+0xb2>
   1c822:	9b01      	ldr	r3, [sp, #4]
   1c824:	18f5      	adds	r5, r6, r3
   1c826:	462a      	mov	r2, r5
   1c828:	4616      	mov	r6, r2
   1c82a:	3201      	adds	r2, #1
   1c82c:	7830      	ldrb	r0, [r6, #0]
   1c82e:	f005 fdfd 	bl	2242c <__hexdig_fun>
   1c832:	2800      	cmp	r0, #0
   1c834:	d1f8      	bne.n	1c828 <__gethex+0xa4>
   1c836:	1bad      	subs	r5, r5, r6
   1c838:	00ad      	lsls	r5, r5, #2
   1c83a:	e004      	b.n	1c846 <__gethex+0xc2>
   1c83c:	2400      	movs	r4, #0
   1c83e:	4625      	mov	r5, r4
   1c840:	e7e0      	b.n	1c804 <__gethex+0x80>
   1c842:	2d00      	cmp	r5, #0
   1c844:	d1f7      	bne.n	1c836 <__gethex+0xb2>
   1c846:	7833      	ldrb	r3, [r6, #0]
   1c848:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1c84c:	2b50      	cmp	r3, #80	; 0x50
   1c84e:	d138      	bne.n	1c8c2 <__gethex+0x13e>
   1c850:	7873      	ldrb	r3, [r6, #1]
   1c852:	2b2b      	cmp	r3, #43	; 0x2b
   1c854:	d02a      	beq.n	1c8ac <__gethex+0x128>
   1c856:	2b2d      	cmp	r3, #45	; 0x2d
   1c858:	d02c      	beq.n	1c8b4 <__gethex+0x130>
   1c85a:	1c71      	adds	r1, r6, #1
   1c85c:	f04f 0900 	mov.w	r9, #0
   1c860:	7808      	ldrb	r0, [r1, #0]
   1c862:	f005 fde3 	bl	2242c <__hexdig_fun>
   1c866:	1e43      	subs	r3, r0, #1
   1c868:	b2db      	uxtb	r3, r3
   1c86a:	2b18      	cmp	r3, #24
   1c86c:	d829      	bhi.n	1c8c2 <__gethex+0x13e>
   1c86e:	f1a0 0210 	sub.w	r2, r0, #16
   1c872:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1c876:	f005 fdd9 	bl	2242c <__hexdig_fun>
   1c87a:	1e43      	subs	r3, r0, #1
   1c87c:	b2db      	uxtb	r3, r3
   1c87e:	2b18      	cmp	r3, #24
   1c880:	d91b      	bls.n	1c8ba <__gethex+0x136>
   1c882:	f1b9 0f00 	cmp.w	r9, #0
   1c886:	d000      	beq.n	1c88a <__gethex+0x106>
   1c888:	4252      	negs	r2, r2
   1c88a:	4415      	add	r5, r2
   1c88c:	f8cb 1000 	str.w	r1, [fp]
   1c890:	b1cc      	cbz	r4, 1c8c6 <__gethex+0x142>
   1c892:	f1ba 0f00 	cmp.w	sl, #0
   1c896:	bf0c      	ite	eq
   1c898:	2606      	moveq	r6, #6
   1c89a:	2600      	movne	r6, #0
   1c89c:	4630      	mov	r0, r6
   1c89e:	b00b      	add	sp, #44	; 0x2c
   1c8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8a4:	463e      	mov	r6, r7
   1c8a6:	4625      	mov	r5, r4
   1c8a8:	2401      	movs	r4, #1
   1c8aa:	e7cc      	b.n	1c846 <__gethex+0xc2>
   1c8ac:	f04f 0900 	mov.w	r9, #0
   1c8b0:	1cb1      	adds	r1, r6, #2
   1c8b2:	e7d5      	b.n	1c860 <__gethex+0xdc>
   1c8b4:	f04f 0901 	mov.w	r9, #1
   1c8b8:	e7fa      	b.n	1c8b0 <__gethex+0x12c>
   1c8ba:	230a      	movs	r3, #10
   1c8bc:	fb03 0002 	mla	r0, r3, r2, r0
   1c8c0:	e7d5      	b.n	1c86e <__gethex+0xea>
   1c8c2:	4631      	mov	r1, r6
   1c8c4:	e7e2      	b.n	1c88c <__gethex+0x108>
   1c8c6:	1bf3      	subs	r3, r6, r7
   1c8c8:	4621      	mov	r1, r4
   1c8ca:	3b01      	subs	r3, #1
   1c8cc:	2b07      	cmp	r3, #7
   1c8ce:	dc0a      	bgt.n	1c8e6 <__gethex+0x162>
   1c8d0:	9802      	ldr	r0, [sp, #8]
   1c8d2:	f000 f9e9 	bl	1cca8 <_Balloc>
   1c8d6:	4604      	mov	r4, r0
   1c8d8:	b940      	cbnz	r0, 1c8ec <__gethex+0x168>
   1c8da:	4b5b      	ldr	r3, [pc, #364]	; (1ca48 <__gethex+0x2c4>)
   1c8dc:	4602      	mov	r2, r0
   1c8de:	21de      	movs	r1, #222	; 0xde
   1c8e0:	485a      	ldr	r0, [pc, #360]	; (1ca4c <__gethex+0x2c8>)
   1c8e2:	f001 fac9 	bl	1de78 <__assert_func>
   1c8e6:	3101      	adds	r1, #1
   1c8e8:	105b      	asrs	r3, r3, #1
   1c8ea:	e7ef      	b.n	1c8cc <__gethex+0x148>
   1c8ec:	f04f 0b00 	mov.w	fp, #0
   1c8f0:	9b01      	ldr	r3, [sp, #4]
   1c8f2:	f100 0914 	add.w	r9, r0, #20
   1c8f6:	f1c3 0301 	rsb	r3, r3, #1
   1c8fa:	46da      	mov	sl, fp
   1c8fc:	f8cd 9010 	str.w	r9, [sp, #16]
   1c900:	9308      	str	r3, [sp, #32]
   1c902:	42b7      	cmp	r7, r6
   1c904:	d338      	bcc.n	1c978 <__gethex+0x1f4>
   1c906:	9e04      	ldr	r6, [sp, #16]
   1c908:	4650      	mov	r0, sl
   1c90a:	f846 ab04 	str.w	sl, [r6], #4
   1c90e:	eba6 0609 	sub.w	r6, r6, r9
   1c912:	10b6      	asrs	r6, r6, #2
   1c914:	6126      	str	r6, [r4, #16]
   1c916:	0176      	lsls	r6, r6, #5
   1c918:	f005 fe95 	bl	22646 <__hi0bits>
   1c91c:	f8d8 7000 	ldr.w	r7, [r8]
   1c920:	1a36      	subs	r6, r6, r0
   1c922:	42be      	cmp	r6, r7
   1c924:	dd60      	ble.n	1c9e8 <__gethex+0x264>
   1c926:	1bf6      	subs	r6, r6, r7
   1c928:	4620      	mov	r0, r4
   1c92a:	4631      	mov	r1, r6
   1c92c:	f005 ff4a 	bl	227c4 <__any_on>
   1c930:	4682      	mov	sl, r0
   1c932:	b178      	cbz	r0, 1c954 <__gethex+0x1d0>
   1c934:	1e73      	subs	r3, r6, #1
   1c936:	f04f 0a01 	mov.w	sl, #1
   1c93a:	1159      	asrs	r1, r3, #5
   1c93c:	f003 021f 	and.w	r2, r3, #31
   1c940:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   1c944:	fa0a f202 	lsl.w	r2, sl, r2
   1c948:	420a      	tst	r2, r1
   1c94a:	d003      	beq.n	1c954 <__gethex+0x1d0>
   1c94c:	4553      	cmp	r3, sl
   1c94e:	dc42      	bgt.n	1c9d6 <__gethex+0x252>
   1c950:	f04f 0a02 	mov.w	sl, #2
   1c954:	4435      	add	r5, r6
   1c956:	4631      	mov	r1, r6
   1c958:	4620      	mov	r0, r4
   1c95a:	f005 fd16 	bl	2238a <rshift>
   1c95e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1c962:	42ab      	cmp	r3, r5
   1c964:	da4e      	bge.n	1ca04 <__gethex+0x280>
   1c966:	4621      	mov	r1, r4
   1c968:	9802      	ldr	r0, [sp, #8]
   1c96a:	f000 f9dd 	bl	1cd28 <_Bfree>
   1c96e:	2300      	movs	r3, #0
   1c970:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1c972:	26a3      	movs	r6, #163	; 0xa3
   1c974:	6013      	str	r3, [r2, #0]
   1c976:	e791      	b.n	1c89c <__gethex+0x118>
   1c978:	1e73      	subs	r3, r6, #1
   1c97a:	9a07      	ldr	r2, [sp, #28]
   1c97c:	9305      	str	r3, [sp, #20]
   1c97e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1c982:	4293      	cmp	r3, r2
   1c984:	d017      	beq.n	1c9b6 <__gethex+0x232>
   1c986:	f1bb 0f20 	cmp.w	fp, #32
   1c98a:	d106      	bne.n	1c99a <__gethex+0x216>
   1c98c:	9b04      	ldr	r3, [sp, #16]
   1c98e:	f843 ab04 	str.w	sl, [r3], #4
   1c992:	f04f 0a00 	mov.w	sl, #0
   1c996:	9304      	str	r3, [sp, #16]
   1c998:	46d3      	mov	fp, sl
   1c99a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   1c99e:	f005 fd45 	bl	2242c <__hexdig_fun>
   1c9a2:	f000 000f 	and.w	r0, r0, #15
   1c9a6:	9b05      	ldr	r3, [sp, #20]
   1c9a8:	fa00 f00b 	lsl.w	r0, r0, fp
   1c9ac:	f10b 0b04 	add.w	fp, fp, #4
   1c9b0:	ea4a 0a00 	orr.w	sl, sl, r0
   1c9b4:	e00d      	b.n	1c9d2 <__gethex+0x24e>
   1c9b6:	9b05      	ldr	r3, [sp, #20]
   1c9b8:	9a08      	ldr	r2, [sp, #32]
   1c9ba:	4413      	add	r3, r2
   1c9bc:	42bb      	cmp	r3, r7
   1c9be:	d3e2      	bcc.n	1c986 <__gethex+0x202>
   1c9c0:	4618      	mov	r0, r3
   1c9c2:	9a01      	ldr	r2, [sp, #4]
   1c9c4:	9903      	ldr	r1, [sp, #12]
   1c9c6:	9309      	str	r3, [sp, #36]	; 0x24
   1c9c8:	f005 faf2 	bl	21fb0 <strncmp>
   1c9cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c9ce:	2800      	cmp	r0, #0
   1c9d0:	d1d9      	bne.n	1c986 <__gethex+0x202>
   1c9d2:	461e      	mov	r6, r3
   1c9d4:	e795      	b.n	1c902 <__gethex+0x17e>
   1c9d6:	1eb1      	subs	r1, r6, #2
   1c9d8:	4620      	mov	r0, r4
   1c9da:	f005 fef3 	bl	227c4 <__any_on>
   1c9de:	2800      	cmp	r0, #0
   1c9e0:	d0b6      	beq.n	1c950 <__gethex+0x1cc>
   1c9e2:	f04f 0a03 	mov.w	sl, #3
   1c9e6:	e7b5      	b.n	1c954 <__gethex+0x1d0>
   1c9e8:	da09      	bge.n	1c9fe <__gethex+0x27a>
   1c9ea:	1bbe      	subs	r6, r7, r6
   1c9ec:	4621      	mov	r1, r4
   1c9ee:	9802      	ldr	r0, [sp, #8]
   1c9f0:	4632      	mov	r2, r6
   1c9f2:	1bad      	subs	r5, r5, r6
   1c9f4:	f000 fb66 	bl	1d0c4 <__lshift>
   1c9f8:	4604      	mov	r4, r0
   1c9fa:	f100 0914 	add.w	r9, r0, #20
   1c9fe:	f04f 0a00 	mov.w	sl, #0
   1ca02:	e7ac      	b.n	1c95e <__gethex+0x1da>
   1ca04:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1ca08:	42ab      	cmp	r3, r5
   1ca0a:	dd70      	ble.n	1caee <__gethex+0x36a>
   1ca0c:	1b5d      	subs	r5, r3, r5
   1ca0e:	42af      	cmp	r7, r5
   1ca10:	dc35      	bgt.n	1ca7e <__gethex+0x2fa>
   1ca12:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1ca16:	2b02      	cmp	r3, #2
   1ca18:	d029      	beq.n	1ca6e <__gethex+0x2ea>
   1ca1a:	2b03      	cmp	r3, #3
   1ca1c:	d02b      	beq.n	1ca76 <__gethex+0x2f2>
   1ca1e:	2b01      	cmp	r3, #1
   1ca20:	d11c      	bne.n	1ca5c <__gethex+0x2d8>
   1ca22:	42af      	cmp	r7, r5
   1ca24:	d11a      	bne.n	1ca5c <__gethex+0x2d8>
   1ca26:	2f01      	cmp	r7, #1
   1ca28:	d112      	bne.n	1ca50 <__gethex+0x2cc>
   1ca2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1ca2e:	2662      	movs	r6, #98	; 0x62
   1ca30:	9a06      	ldr	r2, [sp, #24]
   1ca32:	6013      	str	r3, [r2, #0]
   1ca34:	2301      	movs	r3, #1
   1ca36:	6123      	str	r3, [r4, #16]
   1ca38:	f8c9 3000 	str.w	r3, [r9]
   1ca3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1ca3e:	601c      	str	r4, [r3, #0]
   1ca40:	e72c      	b.n	1c89c <__gethex+0x118>
   1ca42:	bf00      	nop
   1ca44:	000239f4 	.word	0x000239f4
   1ca48:	00027c8e 	.word	0x00027c8e
   1ca4c:	00027c9f 	.word	0x00027c9f
   1ca50:	1e79      	subs	r1, r7, #1
   1ca52:	4620      	mov	r0, r4
   1ca54:	f005 feb6 	bl	227c4 <__any_on>
   1ca58:	2800      	cmp	r0, #0
   1ca5a:	d1e6      	bne.n	1ca2a <__gethex+0x2a6>
   1ca5c:	4621      	mov	r1, r4
   1ca5e:	9802      	ldr	r0, [sp, #8]
   1ca60:	f000 f962 	bl	1cd28 <_Bfree>
   1ca64:	2300      	movs	r3, #0
   1ca66:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1ca68:	2650      	movs	r6, #80	; 0x50
   1ca6a:	6013      	str	r3, [r2, #0]
   1ca6c:	e716      	b.n	1c89c <__gethex+0x118>
   1ca6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ca70:	2b00      	cmp	r3, #0
   1ca72:	d1f3      	bne.n	1ca5c <__gethex+0x2d8>
   1ca74:	e7d9      	b.n	1ca2a <__gethex+0x2a6>
   1ca76:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ca78:	2b00      	cmp	r3, #0
   1ca7a:	d1d6      	bne.n	1ca2a <__gethex+0x2a6>
   1ca7c:	e7ee      	b.n	1ca5c <__gethex+0x2d8>
   1ca7e:	1e6e      	subs	r6, r5, #1
   1ca80:	f1ba 0f00 	cmp.w	sl, #0
   1ca84:	d130      	bne.n	1cae8 <__gethex+0x364>
   1ca86:	b126      	cbz	r6, 1ca92 <__gethex+0x30e>
   1ca88:	4631      	mov	r1, r6
   1ca8a:	4620      	mov	r0, r4
   1ca8c:	f005 fe9a 	bl	227c4 <__any_on>
   1ca90:	4682      	mov	sl, r0
   1ca92:	1172      	asrs	r2, r6, #5
   1ca94:	2301      	movs	r3, #1
   1ca96:	f006 061f 	and.w	r6, r6, #31
   1ca9a:	4629      	mov	r1, r5
   1ca9c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
   1caa0:	4620      	mov	r0, r4
   1caa2:	40b3      	lsls	r3, r6
   1caa4:	1b7f      	subs	r7, r7, r5
   1caa6:	2602      	movs	r6, #2
   1caa8:	4213      	tst	r3, r2
   1caaa:	bf18      	it	ne
   1caac:	f04a 0a02 	orrne.w	sl, sl, #2
   1cab0:	f005 fc6b 	bl	2238a <rshift>
   1cab4:	f8d8 5004 	ldr.w	r5, [r8, #4]
   1cab8:	f1ba 0f00 	cmp.w	sl, #0
   1cabc:	d047      	beq.n	1cb4e <__gethex+0x3ca>
   1cabe:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1cac2:	2b02      	cmp	r3, #2
   1cac4:	d015      	beq.n	1caf2 <__gethex+0x36e>
   1cac6:	2b03      	cmp	r3, #3
   1cac8:	d017      	beq.n	1cafa <__gethex+0x376>
   1caca:	2b01      	cmp	r3, #1
   1cacc:	d109      	bne.n	1cae2 <__gethex+0x35e>
   1cace:	f01a 0f02 	tst.w	sl, #2
   1cad2:	d006      	beq.n	1cae2 <__gethex+0x35e>
   1cad4:	f8d9 3000 	ldr.w	r3, [r9]
   1cad8:	ea4a 0a03 	orr.w	sl, sl, r3
   1cadc:	f01a 0f01 	tst.w	sl, #1
   1cae0:	d10e      	bne.n	1cb00 <__gethex+0x37c>
   1cae2:	f046 0610 	orr.w	r6, r6, #16
   1cae6:	e032      	b.n	1cb4e <__gethex+0x3ca>
   1cae8:	f04f 0a01 	mov.w	sl, #1
   1caec:	e7d1      	b.n	1ca92 <__gethex+0x30e>
   1caee:	2601      	movs	r6, #1
   1caf0:	e7e2      	b.n	1cab8 <__gethex+0x334>
   1caf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1caf4:	f1c3 0301 	rsb	r3, r3, #1
   1caf8:	9315      	str	r3, [sp, #84]	; 0x54
   1cafa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1cafc:	2b00      	cmp	r3, #0
   1cafe:	d0f0      	beq.n	1cae2 <__gethex+0x35e>
   1cb00:	f8d4 b010 	ldr.w	fp, [r4, #16]
   1cb04:	f104 0314 	add.w	r3, r4, #20
   1cb08:	f04f 0c00 	mov.w	ip, #0
   1cb0c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   1cb10:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   1cb14:	4618      	mov	r0, r3
   1cb16:	f853 2b04 	ldr.w	r2, [r3], #4
   1cb1a:	f1b2 3fff 	cmp.w	r2, #4294967295
   1cb1e:	d01b      	beq.n	1cb58 <__gethex+0x3d4>
   1cb20:	3201      	adds	r2, #1
   1cb22:	6002      	str	r2, [r0, #0]
   1cb24:	2e02      	cmp	r6, #2
   1cb26:	f104 0314 	add.w	r3, r4, #20
   1cb2a:	d13c      	bne.n	1cba6 <__gethex+0x422>
   1cb2c:	f8d8 2000 	ldr.w	r2, [r8]
   1cb30:	3a01      	subs	r2, #1
   1cb32:	42ba      	cmp	r2, r7
   1cb34:	d109      	bne.n	1cb4a <__gethex+0x3c6>
   1cb36:	1179      	asrs	r1, r7, #5
   1cb38:	2201      	movs	r2, #1
   1cb3a:	f007 071f 	and.w	r7, r7, #31
   1cb3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1cb42:	fa02 f707 	lsl.w	r7, r2, r7
   1cb46:	421f      	tst	r7, r3
   1cb48:	d13a      	bne.n	1cbc0 <__gethex+0x43c>
   1cb4a:	f046 0620 	orr.w	r6, r6, #32
   1cb4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1cb50:	601c      	str	r4, [r3, #0]
   1cb52:	9b06      	ldr	r3, [sp, #24]
   1cb54:	601d      	str	r5, [r3, #0]
   1cb56:	e6a1      	b.n	1c89c <__gethex+0x118>
   1cb58:	4299      	cmp	r1, r3
   1cb5a:	f843 cc04 	str.w	ip, [r3, #-4]
   1cb5e:	d8d9      	bhi.n	1cb14 <__gethex+0x390>
   1cb60:	68a3      	ldr	r3, [r4, #8]
   1cb62:	459b      	cmp	fp, r3
   1cb64:	db17      	blt.n	1cb96 <__gethex+0x412>
   1cb66:	6861      	ldr	r1, [r4, #4]
   1cb68:	9802      	ldr	r0, [sp, #8]
   1cb6a:	3101      	adds	r1, #1
   1cb6c:	f000 f89c 	bl	1cca8 <_Balloc>
   1cb70:	4681      	mov	r9, r0
   1cb72:	b918      	cbnz	r0, 1cb7c <__gethex+0x3f8>
   1cb74:	4b1a      	ldr	r3, [pc, #104]	; (1cbe0 <__gethex+0x45c>)
   1cb76:	4602      	mov	r2, r0
   1cb78:	2184      	movs	r1, #132	; 0x84
   1cb7a:	e6b1      	b.n	1c8e0 <__gethex+0x15c>
   1cb7c:	6922      	ldr	r2, [r4, #16]
   1cb7e:	f104 010c 	add.w	r1, r4, #12
   1cb82:	300c      	adds	r0, #12
   1cb84:	3202      	adds	r2, #2
   1cb86:	0092      	lsls	r2, r2, #2
   1cb88:	f005 f876 	bl	21c78 <memcpy>
   1cb8c:	4621      	mov	r1, r4
   1cb8e:	464c      	mov	r4, r9
   1cb90:	9802      	ldr	r0, [sp, #8]
   1cb92:	f000 f8c9 	bl	1cd28 <_Bfree>
   1cb96:	6923      	ldr	r3, [r4, #16]
   1cb98:	1c5a      	adds	r2, r3, #1
   1cb9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1cb9e:	6122      	str	r2, [r4, #16]
   1cba0:	2201      	movs	r2, #1
   1cba2:	615a      	str	r2, [r3, #20]
   1cba4:	e7be      	b.n	1cb24 <__gethex+0x3a0>
   1cba6:	6922      	ldr	r2, [r4, #16]
   1cba8:	455a      	cmp	r2, fp
   1cbaa:	dd0b      	ble.n	1cbc4 <__gethex+0x440>
   1cbac:	2101      	movs	r1, #1
   1cbae:	4620      	mov	r0, r4
   1cbb0:	f005 fbeb 	bl	2238a <rshift>
   1cbb4:	3501      	adds	r5, #1
   1cbb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1cbba:	42ab      	cmp	r3, r5
   1cbbc:	f6ff aed3 	blt.w	1c966 <__gethex+0x1e2>
   1cbc0:	2601      	movs	r6, #1
   1cbc2:	e7c2      	b.n	1cb4a <__gethex+0x3c6>
   1cbc4:	f017 071f 	ands.w	r7, r7, #31
   1cbc8:	d0fa      	beq.n	1cbc0 <__gethex+0x43c>
   1cbca:	4453      	add	r3, sl
   1cbcc:	f1c7 0720 	rsb	r7, r7, #32
   1cbd0:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1cbd4:	f005 fd37 	bl	22646 <__hi0bits>
   1cbd8:	42b8      	cmp	r0, r7
   1cbda:	dbe7      	blt.n	1cbac <__gethex+0x428>
   1cbdc:	e7f0      	b.n	1cbc0 <__gethex+0x43c>
   1cbde:	bf00      	nop
   1cbe0:	00027c8e 	.word	0x00027c8e

0001cbe4 <_localeconv_r>:
   1cbe4:	4800      	ldr	r0, [pc, #0]	; (1cbe8 <_localeconv_r+0x4>)
   1cbe6:	4770      	bx	lr
   1cbe8:	2000c844 	.word	0x2000c844

0001cbec <_lseek_r>:
   1cbec:	b538      	push	{r3, r4, r5, lr}
   1cbee:	4604      	mov	r4, r0
   1cbf0:	4d06      	ldr	r5, [pc, #24]	; (1cc0c <_lseek_r+0x20>)
   1cbf2:	4608      	mov	r0, r1
   1cbf4:	4611      	mov	r1, r2
   1cbf6:	2200      	movs	r2, #0
   1cbf8:	602a      	str	r2, [r5, #0]
   1cbfa:	461a      	mov	r2, r3
   1cbfc:	f002 f82e 	bl	1ec5c <_lseek>
   1cc00:	1c43      	adds	r3, r0, #1
   1cc02:	d102      	bne.n	1cc0a <_lseek_r+0x1e>
   1cc04:	682b      	ldr	r3, [r5, #0]
   1cc06:	b103      	cbz	r3, 1cc0a <_lseek_r+0x1e>
   1cc08:	6023      	str	r3, [r4, #0]
   1cc0a:	bd38      	pop	{r3, r4, r5, pc}
   1cc0c:	2000e348 	.word	0x2000e348

0001cc10 <__smakebuf_r>:
   1cc10:	898b      	ldrh	r3, [r1, #12]
   1cc12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cc14:	079d      	lsls	r5, r3, #30
   1cc16:	4606      	mov	r6, r0
   1cc18:	460c      	mov	r4, r1
   1cc1a:	d507      	bpl.n	1cc2c <__smakebuf_r+0x1c>
   1cc1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
   1cc20:	6023      	str	r3, [r4, #0]
   1cc22:	6123      	str	r3, [r4, #16]
   1cc24:	2301      	movs	r3, #1
   1cc26:	6163      	str	r3, [r4, #20]
   1cc28:	b003      	add	sp, #12
   1cc2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cc2c:	ab01      	add	r3, sp, #4
   1cc2e:	466a      	mov	r2, sp
   1cc30:	f005 fcd2 	bl	225d8 <__swhatbuf_r>
   1cc34:	9f00      	ldr	r7, [sp, #0]
   1cc36:	4605      	mov	r5, r0
   1cc38:	4630      	mov	r0, r6
   1cc3a:	4639      	mov	r1, r7
   1cc3c:	f7fe fd9a 	bl	1b774 <_malloc_r>
   1cc40:	b948      	cbnz	r0, 1cc56 <__smakebuf_r+0x46>
   1cc42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1cc46:	059a      	lsls	r2, r3, #22
   1cc48:	d4ee      	bmi.n	1cc28 <__smakebuf_r+0x18>
   1cc4a:	f023 0303 	bic.w	r3, r3, #3
   1cc4e:	f043 0302 	orr.w	r3, r3, #2
   1cc52:	81a3      	strh	r3, [r4, #12]
   1cc54:	e7e2      	b.n	1cc1c <__smakebuf_r+0xc>
   1cc56:	4b0d      	ldr	r3, [pc, #52]	; (1cc8c <__smakebuf_r+0x7c>)
   1cc58:	62b3      	str	r3, [r6, #40]	; 0x28
   1cc5a:	89a3      	ldrh	r3, [r4, #12]
   1cc5c:	6020      	str	r0, [r4, #0]
   1cc5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1cc62:	81a3      	strh	r3, [r4, #12]
   1cc64:	9b01      	ldr	r3, [sp, #4]
   1cc66:	e9c4 0704 	strd	r0, r7, [r4, #16]
   1cc6a:	b15b      	cbz	r3, 1cc84 <__smakebuf_r+0x74>
   1cc6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1cc70:	4630      	mov	r0, r6
   1cc72:	f001 f943 	bl	1defc <_isatty_r>
   1cc76:	b128      	cbz	r0, 1cc84 <__smakebuf_r+0x74>
   1cc78:	89a3      	ldrh	r3, [r4, #12]
   1cc7a:	f023 0303 	bic.w	r3, r3, #3
   1cc7e:	f043 0301 	orr.w	r3, r3, #1
   1cc82:	81a3      	strh	r3, [r4, #12]
   1cc84:	89a3      	ldrh	r3, [r4, #12]
   1cc86:	431d      	orrs	r5, r3
   1cc88:	81a5      	strh	r5, [r4, #12]
   1cc8a:	e7cd      	b.n	1cc28 <__smakebuf_r+0x18>
   1cc8c:	0001c64d 	.word	0x0001c64d

0001cc90 <__malloc_lock>:
   1cc90:	4801      	ldr	r0, [pc, #4]	; (1cc98 <__malloc_lock+0x8>)
   1cc92:	f001 bffd 	b.w	1ec90 <__retarget_lock_acquire_recursive>
   1cc96:	bf00      	nop
   1cc98:	2000c990 	.word	0x2000c990

0001cc9c <__malloc_unlock>:
   1cc9c:	4801      	ldr	r0, [pc, #4]	; (1cca4 <__malloc_unlock+0x8>)
   1cc9e:	f001 bffd 	b.w	1ec9c <__retarget_lock_release_recursive>
   1cca2:	bf00      	nop
   1cca4:	2000c990 	.word	0x2000c990

0001cca8 <_Balloc>:
   1cca8:	b570      	push	{r4, r5, r6, lr}
   1ccaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1ccac:	4604      	mov	r4, r0
   1ccae:	460d      	mov	r5, r1
   1ccb0:	b976      	cbnz	r6, 1ccd0 <_Balloc+0x28>
   1ccb2:	2010      	movs	r0, #16
   1ccb4:	f7fe fd04 	bl	1b6c0 <malloc>
   1ccb8:	4602      	mov	r2, r0
   1ccba:	6260      	str	r0, [r4, #36]	; 0x24
   1ccbc:	b920      	cbnz	r0, 1ccc8 <_Balloc+0x20>
   1ccbe:	4b18      	ldr	r3, [pc, #96]	; (1cd20 <_Balloc+0x78>)
   1ccc0:	2166      	movs	r1, #102	; 0x66
   1ccc2:	4818      	ldr	r0, [pc, #96]	; (1cd24 <_Balloc+0x7c>)
   1ccc4:	f001 f8d8 	bl	1de78 <__assert_func>
   1ccc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
   1cccc:	6006      	str	r6, [r0, #0]
   1ccce:	60c6      	str	r6, [r0, #12]
   1ccd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1ccd2:	68f3      	ldr	r3, [r6, #12]
   1ccd4:	b183      	cbz	r3, 1ccf8 <_Balloc+0x50>
   1ccd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ccd8:	68db      	ldr	r3, [r3, #12]
   1ccda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   1ccde:	b9b8      	cbnz	r0, 1cd10 <_Balloc+0x68>
   1cce0:	2101      	movs	r1, #1
   1cce2:	4620      	mov	r0, r4
   1cce4:	fa01 f605 	lsl.w	r6, r1, r5
   1cce8:	1d72      	adds	r2, r6, #5
   1ccea:	0092      	lsls	r2, r2, #2
   1ccec:	f005 fd8b 	bl	22806 <_calloc_r>
   1ccf0:	b160      	cbz	r0, 1cd0c <_Balloc+0x64>
   1ccf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
   1ccf6:	e00e      	b.n	1cd16 <_Balloc+0x6e>
   1ccf8:	2221      	movs	r2, #33	; 0x21
   1ccfa:	2104      	movs	r1, #4
   1ccfc:	4620      	mov	r0, r4
   1ccfe:	f005 fd82 	bl	22806 <_calloc_r>
   1cd02:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cd04:	60f0      	str	r0, [r6, #12]
   1cd06:	68db      	ldr	r3, [r3, #12]
   1cd08:	2b00      	cmp	r3, #0
   1cd0a:	d1e4      	bne.n	1ccd6 <_Balloc+0x2e>
   1cd0c:	2000      	movs	r0, #0
   1cd0e:	bd70      	pop	{r4, r5, r6, pc}
   1cd10:	6802      	ldr	r2, [r0, #0]
   1cd12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   1cd16:	2300      	movs	r3, #0
   1cd18:	e9c0 3303 	strd	r3, r3, [r0, #12]
   1cd1c:	e7f7      	b.n	1cd0e <_Balloc+0x66>
   1cd1e:	bf00      	nop
   1cd20:	00027c03 	.word	0x00027c03
   1cd24:	00027d21 	.word	0x00027d21

0001cd28 <_Bfree>:
   1cd28:	b570      	push	{r4, r5, r6, lr}
   1cd2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1cd2c:	4605      	mov	r5, r0
   1cd2e:	460c      	mov	r4, r1
   1cd30:	b976      	cbnz	r6, 1cd50 <_Bfree+0x28>
   1cd32:	2010      	movs	r0, #16
   1cd34:	f7fe fcc4 	bl	1b6c0 <malloc>
   1cd38:	4602      	mov	r2, r0
   1cd3a:	6268      	str	r0, [r5, #36]	; 0x24
   1cd3c:	b920      	cbnz	r0, 1cd48 <_Bfree+0x20>
   1cd3e:	4b09      	ldr	r3, [pc, #36]	; (1cd64 <_Bfree+0x3c>)
   1cd40:	218a      	movs	r1, #138	; 0x8a
   1cd42:	4809      	ldr	r0, [pc, #36]	; (1cd68 <_Bfree+0x40>)
   1cd44:	f001 f898 	bl	1de78 <__assert_func>
   1cd48:	e9c0 6601 	strd	r6, r6, [r0, #4]
   1cd4c:	6006      	str	r6, [r0, #0]
   1cd4e:	60c6      	str	r6, [r0, #12]
   1cd50:	b13c      	cbz	r4, 1cd62 <_Bfree+0x3a>
   1cd52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1cd54:	6862      	ldr	r2, [r4, #4]
   1cd56:	68db      	ldr	r3, [r3, #12]
   1cd58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1cd5c:	6021      	str	r1, [r4, #0]
   1cd5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   1cd62:	bd70      	pop	{r4, r5, r6, pc}
   1cd64:	00027c03 	.word	0x00027c03
   1cd68:	00027d21 	.word	0x00027d21

0001cd6c <__multadd>:
   1cd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cd70:	f101 0c14 	add.w	ip, r1, #20
   1cd74:	4607      	mov	r7, r0
   1cd76:	460c      	mov	r4, r1
   1cd78:	461e      	mov	r6, r3
   1cd7a:	690d      	ldr	r5, [r1, #16]
   1cd7c:	2000      	movs	r0, #0
   1cd7e:	f8dc 3000 	ldr.w	r3, [ip]
   1cd82:	3001      	adds	r0, #1
   1cd84:	b299      	uxth	r1, r3
   1cd86:	4285      	cmp	r5, r0
   1cd88:	fb02 6101 	mla	r1, r2, r1, r6
   1cd8c:	ea4f 4613 	mov.w	r6, r3, lsr #16
   1cd90:	ea4f 4311 	mov.w	r3, r1, lsr #16
   1cd94:	b289      	uxth	r1, r1
   1cd96:	fb02 3306 	mla	r3, r2, r6, r3
   1cd9a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   1cd9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
   1cda2:	f84c 1b04 	str.w	r1, [ip], #4
   1cda6:	dcea      	bgt.n	1cd7e <__multadd+0x12>
   1cda8:	b30e      	cbz	r6, 1cdee <__multadd+0x82>
   1cdaa:	68a3      	ldr	r3, [r4, #8]
   1cdac:	42ab      	cmp	r3, r5
   1cdae:	dc19      	bgt.n	1cde4 <__multadd+0x78>
   1cdb0:	6861      	ldr	r1, [r4, #4]
   1cdb2:	4638      	mov	r0, r7
   1cdb4:	3101      	adds	r1, #1
   1cdb6:	f7ff ff77 	bl	1cca8 <_Balloc>
   1cdba:	4680      	mov	r8, r0
   1cdbc:	b928      	cbnz	r0, 1cdca <__multadd+0x5e>
   1cdbe:	4602      	mov	r2, r0
   1cdc0:	4b0c      	ldr	r3, [pc, #48]	; (1cdf4 <__multadd+0x88>)
   1cdc2:	21b5      	movs	r1, #181	; 0xb5
   1cdc4:	480c      	ldr	r0, [pc, #48]	; (1cdf8 <__multadd+0x8c>)
   1cdc6:	f001 f857 	bl	1de78 <__assert_func>
   1cdca:	6922      	ldr	r2, [r4, #16]
   1cdcc:	f104 010c 	add.w	r1, r4, #12
   1cdd0:	300c      	adds	r0, #12
   1cdd2:	3202      	adds	r2, #2
   1cdd4:	0092      	lsls	r2, r2, #2
   1cdd6:	f004 ff4f 	bl	21c78 <memcpy>
   1cdda:	4621      	mov	r1, r4
   1cddc:	4644      	mov	r4, r8
   1cdde:	4638      	mov	r0, r7
   1cde0:	f7ff ffa2 	bl	1cd28 <_Bfree>
   1cde4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   1cde8:	3501      	adds	r5, #1
   1cdea:	615e      	str	r6, [r3, #20]
   1cdec:	6125      	str	r5, [r4, #16]
   1cdee:	4620      	mov	r0, r4
   1cdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cdf4:	00027c8e 	.word	0x00027c8e
   1cdf8:	00027d21 	.word	0x00027d21

0001cdfc <__s2b>:
   1cdfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ce00:	4615      	mov	r5, r2
   1ce02:	461f      	mov	r7, r3
   1ce04:	2209      	movs	r2, #9
   1ce06:	3308      	adds	r3, #8
   1ce08:	460c      	mov	r4, r1
   1ce0a:	4606      	mov	r6, r0
   1ce0c:	2100      	movs	r1, #0
   1ce0e:	fb93 f3f2 	sdiv	r3, r3, r2
   1ce12:	2201      	movs	r2, #1
   1ce14:	429a      	cmp	r2, r3
   1ce16:	db09      	blt.n	1ce2c <__s2b+0x30>
   1ce18:	4630      	mov	r0, r6
   1ce1a:	f7ff ff45 	bl	1cca8 <_Balloc>
   1ce1e:	b940      	cbnz	r0, 1ce32 <__s2b+0x36>
   1ce20:	4602      	mov	r2, r0
   1ce22:	4b19      	ldr	r3, [pc, #100]	; (1ce88 <__s2b+0x8c>)
   1ce24:	21ce      	movs	r1, #206	; 0xce
   1ce26:	4819      	ldr	r0, [pc, #100]	; (1ce8c <__s2b+0x90>)
   1ce28:	f001 f826 	bl	1de78 <__assert_func>
   1ce2c:	0052      	lsls	r2, r2, #1
   1ce2e:	3101      	adds	r1, #1
   1ce30:	e7f0      	b.n	1ce14 <__s2b+0x18>
   1ce32:	9b08      	ldr	r3, [sp, #32]
   1ce34:	2d09      	cmp	r5, #9
   1ce36:	6143      	str	r3, [r0, #20]
   1ce38:	f04f 0301 	mov.w	r3, #1
   1ce3c:	6103      	str	r3, [r0, #16]
   1ce3e:	dd16      	ble.n	1ce6e <__s2b+0x72>
   1ce40:	f104 0909 	add.w	r9, r4, #9
   1ce44:	442c      	add	r4, r5
   1ce46:	46c8      	mov	r8, r9
   1ce48:	f818 3b01 	ldrb.w	r3, [r8], #1
   1ce4c:	4601      	mov	r1, r0
   1ce4e:	220a      	movs	r2, #10
   1ce50:	4630      	mov	r0, r6
   1ce52:	3b30      	subs	r3, #48	; 0x30
   1ce54:	f7ff ff8a 	bl	1cd6c <__multadd>
   1ce58:	45a0      	cmp	r8, r4
   1ce5a:	d1f5      	bne.n	1ce48 <__s2b+0x4c>
   1ce5c:	f1a5 0408 	sub.w	r4, r5, #8
   1ce60:	444c      	add	r4, r9
   1ce62:	1b2d      	subs	r5, r5, r4
   1ce64:	1963      	adds	r3, r4, r5
   1ce66:	42bb      	cmp	r3, r7
   1ce68:	db04      	blt.n	1ce74 <__s2b+0x78>
   1ce6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ce6e:	340a      	adds	r4, #10
   1ce70:	2509      	movs	r5, #9
   1ce72:	e7f6      	b.n	1ce62 <__s2b+0x66>
   1ce74:	f814 3b01 	ldrb.w	r3, [r4], #1
   1ce78:	4601      	mov	r1, r0
   1ce7a:	220a      	movs	r2, #10
   1ce7c:	4630      	mov	r0, r6
   1ce7e:	3b30      	subs	r3, #48	; 0x30
   1ce80:	f7ff ff74 	bl	1cd6c <__multadd>
   1ce84:	e7ee      	b.n	1ce64 <__s2b+0x68>
   1ce86:	bf00      	nop
   1ce88:	00027c8e 	.word	0x00027c8e
   1ce8c:	00027d21 	.word	0x00027d21

0001ce90 <__i2b>:
   1ce90:	b510      	push	{r4, lr}
   1ce92:	460c      	mov	r4, r1
   1ce94:	2101      	movs	r1, #1
   1ce96:	f7ff ff07 	bl	1cca8 <_Balloc>
   1ce9a:	4602      	mov	r2, r0
   1ce9c:	b928      	cbnz	r0, 1ceaa <__i2b+0x1a>
   1ce9e:	4b05      	ldr	r3, [pc, #20]	; (1ceb4 <__i2b+0x24>)
   1cea0:	f44f 71a0 	mov.w	r1, #320	; 0x140
   1cea4:	4804      	ldr	r0, [pc, #16]	; (1ceb8 <__i2b+0x28>)
   1cea6:	f000 ffe7 	bl	1de78 <__assert_func>
   1ceaa:	2301      	movs	r3, #1
   1ceac:	6144      	str	r4, [r0, #20]
   1ceae:	6103      	str	r3, [r0, #16]
   1ceb0:	bd10      	pop	{r4, pc}
   1ceb2:	bf00      	nop
   1ceb4:	00027c8e 	.word	0x00027c8e
   1ceb8:	00027d21 	.word	0x00027d21

0001cebc <__multiply>:
   1cebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cec0:	4614      	mov	r4, r2
   1cec2:	690a      	ldr	r2, [r1, #16]
   1cec4:	460f      	mov	r7, r1
   1cec6:	b085      	sub	sp, #20
   1cec8:	6923      	ldr	r3, [r4, #16]
   1ceca:	429a      	cmp	r2, r3
   1cecc:	bfa2      	ittt	ge
   1cece:	4623      	movge	r3, r4
   1ced0:	460c      	movge	r4, r1
   1ced2:	461f      	movge	r7, r3
   1ced4:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1ced8:	68a3      	ldr	r3, [r4, #8]
   1ceda:	f8d7 9010 	ldr.w	r9, [r7, #16]
   1cede:	6861      	ldr	r1, [r4, #4]
   1cee0:	eb0a 0609 	add.w	r6, sl, r9
   1cee4:	42b3      	cmp	r3, r6
   1cee6:	bfb8      	it	lt
   1cee8:	3101      	addlt	r1, #1
   1ceea:	f7ff fedd 	bl	1cca8 <_Balloc>
   1ceee:	b930      	cbnz	r0, 1cefe <__multiply+0x42>
   1cef0:	4602      	mov	r2, r0
   1cef2:	4b45      	ldr	r3, [pc, #276]	; (1d008 <__multiply+0x14c>)
   1cef4:	f240 115d 	movw	r1, #349	; 0x15d
   1cef8:	4844      	ldr	r0, [pc, #272]	; (1d00c <__multiply+0x150>)
   1cefa:	f000 ffbd 	bl	1de78 <__assert_func>
   1cefe:	f100 0514 	add.w	r5, r0, #20
   1cf02:	2200      	movs	r2, #0
   1cf04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   1cf08:	462b      	mov	r3, r5
   1cf0a:	4543      	cmp	r3, r8
   1cf0c:	d321      	bcc.n	1cf52 <__multiply+0x96>
   1cf0e:	f107 0114 	add.w	r1, r7, #20
   1cf12:	f104 0214 	add.w	r2, r4, #20
   1cf16:	f104 0715 	add.w	r7, r4, #21
   1cf1a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   1cf1e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   1cf22:	9302      	str	r3, [sp, #8]
   1cf24:	1b13      	subs	r3, r2, r4
   1cf26:	3b15      	subs	r3, #21
   1cf28:	f023 0303 	bic.w	r3, r3, #3
   1cf2c:	3304      	adds	r3, #4
   1cf2e:	42ba      	cmp	r2, r7
   1cf30:	bf38      	it	cc
   1cf32:	2304      	movcc	r3, #4
   1cf34:	9301      	str	r3, [sp, #4]
   1cf36:	9b02      	ldr	r3, [sp, #8]
   1cf38:	9103      	str	r1, [sp, #12]
   1cf3a:	428b      	cmp	r3, r1
   1cf3c:	d80c      	bhi.n	1cf58 <__multiply+0x9c>
   1cf3e:	2e00      	cmp	r6, #0
   1cf40:	dd03      	ble.n	1cf4a <__multiply+0x8e>
   1cf42:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   1cf46:	2b00      	cmp	r3, #0
   1cf48:	d05b      	beq.n	1d002 <__multiply+0x146>
   1cf4a:	6106      	str	r6, [r0, #16]
   1cf4c:	b005      	add	sp, #20
   1cf4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf52:	f843 2b04 	str.w	r2, [r3], #4
   1cf56:	e7d8      	b.n	1cf0a <__multiply+0x4e>
   1cf58:	f8b1 a000 	ldrh.w	sl, [r1]
   1cf5c:	f1ba 0f00 	cmp.w	sl, #0
   1cf60:	d024      	beq.n	1cfac <__multiply+0xf0>
   1cf62:	f104 0e14 	add.w	lr, r4, #20
   1cf66:	46a9      	mov	r9, r5
   1cf68:	f04f 0c00 	mov.w	ip, #0
   1cf6c:	f85e 7b04 	ldr.w	r7, [lr], #4
   1cf70:	f8d9 3000 	ldr.w	r3, [r9]
   1cf74:	fa1f fb87 	uxth.w	fp, r7
   1cf78:	4572      	cmp	r2, lr
   1cf7a:	b29b      	uxth	r3, r3
   1cf7c:	fb0a 330b 	mla	r3, sl, fp, r3
   1cf80:	ea4f 4b17 	mov.w	fp, r7, lsr #16
   1cf84:	f8d9 7000 	ldr.w	r7, [r9]
   1cf88:	4463      	add	r3, ip
   1cf8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   1cf8e:	fb0a c70b 	mla	r7, sl, fp, ip
   1cf92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   1cf96:	b29b      	uxth	r3, r3
   1cf98:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   1cf9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   1cfa0:	f849 3b04 	str.w	r3, [r9], #4
   1cfa4:	d8e2      	bhi.n	1cf6c <__multiply+0xb0>
   1cfa6:	9b01      	ldr	r3, [sp, #4]
   1cfa8:	f845 c003 	str.w	ip, [r5, r3]
   1cfac:	9b03      	ldr	r3, [sp, #12]
   1cfae:	3104      	adds	r1, #4
   1cfb0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   1cfb4:	f1b9 0f00 	cmp.w	r9, #0
   1cfb8:	d021      	beq.n	1cffe <__multiply+0x142>
   1cfba:	682b      	ldr	r3, [r5, #0]
   1cfbc:	f104 0c14 	add.w	ip, r4, #20
   1cfc0:	46ae      	mov	lr, r5
   1cfc2:	f04f 0a00 	mov.w	sl, #0
   1cfc6:	f8bc b000 	ldrh.w	fp, [ip]
   1cfca:	b29b      	uxth	r3, r3
   1cfcc:	f8be 7002 	ldrh.w	r7, [lr, #2]
   1cfd0:	fb09 770b 	mla	r7, r9, fp, r7
   1cfd4:	4457      	add	r7, sl
   1cfd6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   1cfda:	f84e 3b04 	str.w	r3, [lr], #4
   1cfde:	f85c 3b04 	ldr.w	r3, [ip], #4
   1cfe2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   1cfe6:	f8be 3000 	ldrh.w	r3, [lr]
   1cfea:	4562      	cmp	r2, ip
   1cfec:	fb09 330a 	mla	r3, r9, sl, r3
   1cff0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   1cff4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   1cff8:	d8e5      	bhi.n	1cfc6 <__multiply+0x10a>
   1cffa:	9f01      	ldr	r7, [sp, #4]
   1cffc:	51eb      	str	r3, [r5, r7]
   1cffe:	3504      	adds	r5, #4
   1d000:	e799      	b.n	1cf36 <__multiply+0x7a>
   1d002:	3e01      	subs	r6, #1
   1d004:	e79b      	b.n	1cf3e <__multiply+0x82>
   1d006:	bf00      	nop
   1d008:	00027c8e 	.word	0x00027c8e
   1d00c:	00027d21 	.word	0x00027d21

0001d010 <__pow5mult>:
   1d010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d014:	4615      	mov	r5, r2
   1d016:	f012 0203 	ands.w	r2, r2, #3
   1d01a:	4607      	mov	r7, r0
   1d01c:	460e      	mov	r6, r1
   1d01e:	d007      	beq.n	1d030 <__pow5mult+0x20>
   1d020:	3a01      	subs	r2, #1
   1d022:	4c25      	ldr	r4, [pc, #148]	; (1d0b8 <__pow5mult+0xa8>)
   1d024:	2300      	movs	r3, #0
   1d026:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   1d02a:	f7ff fe9f 	bl	1cd6c <__multadd>
   1d02e:	4606      	mov	r6, r0
   1d030:	10ad      	asrs	r5, r5, #2
   1d032:	d03d      	beq.n	1d0b0 <__pow5mult+0xa0>
   1d034:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   1d036:	b97c      	cbnz	r4, 1d058 <__pow5mult+0x48>
   1d038:	2010      	movs	r0, #16
   1d03a:	f7fe fb41 	bl	1b6c0 <malloc>
   1d03e:	4602      	mov	r2, r0
   1d040:	6278      	str	r0, [r7, #36]	; 0x24
   1d042:	b928      	cbnz	r0, 1d050 <__pow5mult+0x40>
   1d044:	4b1d      	ldr	r3, [pc, #116]	; (1d0bc <__pow5mult+0xac>)
   1d046:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   1d04a:	481d      	ldr	r0, [pc, #116]	; (1d0c0 <__pow5mult+0xb0>)
   1d04c:	f000 ff14 	bl	1de78 <__assert_func>
   1d050:	e9c0 4401 	strd	r4, r4, [r0, #4]
   1d054:	6004      	str	r4, [r0, #0]
   1d056:	60c4      	str	r4, [r0, #12]
   1d058:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   1d05c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1d060:	b94c      	cbnz	r4, 1d076 <__pow5mult+0x66>
   1d062:	f240 2171 	movw	r1, #625	; 0x271
   1d066:	4638      	mov	r0, r7
   1d068:	f7ff ff12 	bl	1ce90 <__i2b>
   1d06c:	2300      	movs	r3, #0
   1d06e:	4604      	mov	r4, r0
   1d070:	f8c8 0008 	str.w	r0, [r8, #8]
   1d074:	6003      	str	r3, [r0, #0]
   1d076:	f04f 0900 	mov.w	r9, #0
   1d07a:	07eb      	lsls	r3, r5, #31
   1d07c:	d50a      	bpl.n	1d094 <__pow5mult+0x84>
   1d07e:	4631      	mov	r1, r6
   1d080:	4622      	mov	r2, r4
   1d082:	4638      	mov	r0, r7
   1d084:	f7ff ff1a 	bl	1cebc <__multiply>
   1d088:	4680      	mov	r8, r0
   1d08a:	4631      	mov	r1, r6
   1d08c:	4638      	mov	r0, r7
   1d08e:	4646      	mov	r6, r8
   1d090:	f7ff fe4a 	bl	1cd28 <_Bfree>
   1d094:	106d      	asrs	r5, r5, #1
   1d096:	d00b      	beq.n	1d0b0 <__pow5mult+0xa0>
   1d098:	6820      	ldr	r0, [r4, #0]
   1d09a:	b938      	cbnz	r0, 1d0ac <__pow5mult+0x9c>
   1d09c:	4622      	mov	r2, r4
   1d09e:	4621      	mov	r1, r4
   1d0a0:	4638      	mov	r0, r7
   1d0a2:	f7ff ff0b 	bl	1cebc <__multiply>
   1d0a6:	6020      	str	r0, [r4, #0]
   1d0a8:	f8c0 9000 	str.w	r9, [r0]
   1d0ac:	4604      	mov	r4, r0
   1d0ae:	e7e4      	b.n	1d07a <__pow5mult+0x6a>
   1d0b0:	4630      	mov	r0, r6
   1d0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d0b6:	bf00      	nop
   1d0b8:	00023a00 	.word	0x00023a00
   1d0bc:	00027c03 	.word	0x00027c03
   1d0c0:	00027d21 	.word	0x00027d21

0001d0c4 <__lshift>:
   1d0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d0c8:	460c      	mov	r4, r1
   1d0ca:	4607      	mov	r7, r0
   1d0cc:	4691      	mov	r9, r2
   1d0ce:	ea4f 1a62 	mov.w	sl, r2, asr #5
   1d0d2:	6923      	ldr	r3, [r4, #16]
   1d0d4:	6849      	ldr	r1, [r1, #4]
   1d0d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   1d0da:	68a3      	ldr	r3, [r4, #8]
   1d0dc:	f108 0601 	add.w	r6, r8, #1
   1d0e0:	42b3      	cmp	r3, r6
   1d0e2:	db0b      	blt.n	1d0fc <__lshift+0x38>
   1d0e4:	4638      	mov	r0, r7
   1d0e6:	f7ff fddf 	bl	1cca8 <_Balloc>
   1d0ea:	4605      	mov	r5, r0
   1d0ec:	b948      	cbnz	r0, 1d102 <__lshift+0x3e>
   1d0ee:	4602      	mov	r2, r0
   1d0f0:	4b28      	ldr	r3, [pc, #160]	; (1d194 <__lshift+0xd0>)
   1d0f2:	f240 11d9 	movw	r1, #473	; 0x1d9
   1d0f6:	4828      	ldr	r0, [pc, #160]	; (1d198 <__lshift+0xd4>)
   1d0f8:	f000 febe 	bl	1de78 <__assert_func>
   1d0fc:	3101      	adds	r1, #1
   1d0fe:	005b      	lsls	r3, r3, #1
   1d100:	e7ee      	b.n	1d0e0 <__lshift+0x1c>
   1d102:	2300      	movs	r3, #0
   1d104:	f100 0114 	add.w	r1, r0, #20
   1d108:	f100 0210 	add.w	r2, r0, #16
   1d10c:	4618      	mov	r0, r3
   1d10e:	4553      	cmp	r3, sl
   1d110:	db33      	blt.n	1d17a <__lshift+0xb6>
   1d112:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   1d116:	f104 0314 	add.w	r3, r4, #20
   1d11a:	6920      	ldr	r0, [r4, #16]
   1d11c:	f019 091f 	ands.w	r9, r9, #31
   1d120:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   1d124:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   1d128:	d02b      	beq.n	1d182 <__lshift+0xbe>
   1d12a:	f1c9 0e20 	rsb	lr, r9, #32
   1d12e:	468a      	mov	sl, r1
   1d130:	2200      	movs	r2, #0
   1d132:	6818      	ldr	r0, [r3, #0]
   1d134:	fa00 f009 	lsl.w	r0, r0, r9
   1d138:	4310      	orrs	r0, r2
   1d13a:	f84a 0b04 	str.w	r0, [sl], #4
   1d13e:	f853 2b04 	ldr.w	r2, [r3], #4
   1d142:	459c      	cmp	ip, r3
   1d144:	fa22 f20e 	lsr.w	r2, r2, lr
   1d148:	d8f3      	bhi.n	1d132 <__lshift+0x6e>
   1d14a:	ebac 0304 	sub.w	r3, ip, r4
   1d14e:	f104 0015 	add.w	r0, r4, #21
   1d152:	3b15      	subs	r3, #21
   1d154:	f023 0303 	bic.w	r3, r3, #3
   1d158:	3304      	adds	r3, #4
   1d15a:	4584      	cmp	ip, r0
   1d15c:	bf38      	it	cc
   1d15e:	2304      	movcc	r3, #4
   1d160:	50ca      	str	r2, [r1, r3]
   1d162:	b10a      	cbz	r2, 1d168 <__lshift+0xa4>
   1d164:	f108 0602 	add.w	r6, r8, #2
   1d168:	3e01      	subs	r6, #1
   1d16a:	4638      	mov	r0, r7
   1d16c:	4621      	mov	r1, r4
   1d16e:	612e      	str	r6, [r5, #16]
   1d170:	f7ff fdda 	bl	1cd28 <_Bfree>
   1d174:	4628      	mov	r0, r5
   1d176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d17a:	3301      	adds	r3, #1
   1d17c:	f842 0f04 	str.w	r0, [r2, #4]!
   1d180:	e7c5      	b.n	1d10e <__lshift+0x4a>
   1d182:	3904      	subs	r1, #4
   1d184:	f853 2b04 	ldr.w	r2, [r3], #4
   1d188:	459c      	cmp	ip, r3
   1d18a:	f841 2f04 	str.w	r2, [r1, #4]!
   1d18e:	d8f9      	bhi.n	1d184 <__lshift+0xc0>
   1d190:	e7ea      	b.n	1d168 <__lshift+0xa4>
   1d192:	bf00      	nop
   1d194:	00027c8e 	.word	0x00027c8e
   1d198:	00027d21 	.word	0x00027d21

0001d19c <__mdiff>:
   1d19c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1a0:	4689      	mov	r9, r1
   1d1a2:	4606      	mov	r6, r0
   1d1a4:	4611      	mov	r1, r2
   1d1a6:	4614      	mov	r4, r2
   1d1a8:	4648      	mov	r0, r9
   1d1aa:	f005 fa9b 	bl	226e4 <__mcmp>
   1d1ae:	1e05      	subs	r5, r0, #0
   1d1b0:	d112      	bne.n	1d1d8 <__mdiff+0x3c>
   1d1b2:	4629      	mov	r1, r5
   1d1b4:	4630      	mov	r0, r6
   1d1b6:	f7ff fd77 	bl	1cca8 <_Balloc>
   1d1ba:	4602      	mov	r2, r0
   1d1bc:	b928      	cbnz	r0, 1d1ca <__mdiff+0x2e>
   1d1be:	4b41      	ldr	r3, [pc, #260]	; (1d2c4 <__mdiff+0x128>)
   1d1c0:	f240 2132 	movw	r1, #562	; 0x232
   1d1c4:	4840      	ldr	r0, [pc, #256]	; (1d2c8 <__mdiff+0x12c>)
   1d1c6:	f000 fe57 	bl	1de78 <__assert_func>
   1d1ca:	2301      	movs	r3, #1
   1d1cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   1d1d0:	4610      	mov	r0, r2
   1d1d2:	b003      	add	sp, #12
   1d1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1d8:	bfbc      	itt	lt
   1d1da:	464b      	movlt	r3, r9
   1d1dc:	46a1      	movlt	r9, r4
   1d1de:	4630      	mov	r0, r6
   1d1e0:	bfb8      	it	lt
   1d1e2:	2501      	movlt	r5, #1
   1d1e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1d1e8:	bfb4      	ite	lt
   1d1ea:	461c      	movlt	r4, r3
   1d1ec:	2500      	movge	r5, #0
   1d1ee:	f7ff fd5b 	bl	1cca8 <_Balloc>
   1d1f2:	4602      	mov	r2, r0
   1d1f4:	b918      	cbnz	r0, 1d1fe <__mdiff+0x62>
   1d1f6:	4b33      	ldr	r3, [pc, #204]	; (1d2c4 <__mdiff+0x128>)
   1d1f8:	f44f 7110 	mov.w	r1, #576	; 0x240
   1d1fc:	e7e2      	b.n	1d1c4 <__mdiff+0x28>
   1d1fe:	f8d9 7010 	ldr.w	r7, [r9, #16]
   1d202:	f104 0e14 	add.w	lr, r4, #20
   1d206:	6926      	ldr	r6, [r4, #16]
   1d208:	f100 0b14 	add.w	fp, r0, #20
   1d20c:	60c5      	str	r5, [r0, #12]
   1d20e:	f109 0514 	add.w	r5, r9, #20
   1d212:	f109 0310 	add.w	r3, r9, #16
   1d216:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   1d21a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   1d21e:	46d9      	mov	r9, fp
   1d220:	f04f 0c00 	mov.w	ip, #0
   1d224:	9301      	str	r3, [sp, #4]
   1d226:	9b01      	ldr	r3, [sp, #4]
   1d228:	f85e 0b04 	ldr.w	r0, [lr], #4
   1d22c:	f853 af04 	ldr.w	sl, [r3, #4]!
   1d230:	4576      	cmp	r6, lr
   1d232:	9301      	str	r3, [sp, #4]
   1d234:	fa1f f38a 	uxth.w	r3, sl
   1d238:	4619      	mov	r1, r3
   1d23a:	b283      	uxth	r3, r0
   1d23c:	ea4f 4010 	mov.w	r0, r0, lsr #16
   1d240:	eba1 0303 	sub.w	r3, r1, r3
   1d244:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   1d248:	4463      	add	r3, ip
   1d24a:	eb00 4023 	add.w	r0, r0, r3, asr #16
   1d24e:	b29b      	uxth	r3, r3
   1d250:	ea4f 4c20 	mov.w	ip, r0, asr #16
   1d254:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   1d258:	f849 3b04 	str.w	r3, [r9], #4
   1d25c:	d8e3      	bhi.n	1d226 <__mdiff+0x8a>
   1d25e:	1b33      	subs	r3, r6, r4
   1d260:	3415      	adds	r4, #21
   1d262:	3b15      	subs	r3, #21
   1d264:	f023 0303 	bic.w	r3, r3, #3
   1d268:	3304      	adds	r3, #4
   1d26a:	42a6      	cmp	r6, r4
   1d26c:	bf38      	it	cc
   1d26e:	2304      	movcc	r3, #4
   1d270:	441d      	add	r5, r3
   1d272:	445b      	add	r3, fp
   1d274:	462c      	mov	r4, r5
   1d276:	461e      	mov	r6, r3
   1d278:	4544      	cmp	r4, r8
   1d27a:	d30e      	bcc.n	1d29a <__mdiff+0xfe>
   1d27c:	f108 0103 	add.w	r1, r8, #3
   1d280:	1b49      	subs	r1, r1, r5
   1d282:	3d03      	subs	r5, #3
   1d284:	f021 0103 	bic.w	r1, r1, #3
   1d288:	45a8      	cmp	r8, r5
   1d28a:	bf38      	it	cc
   1d28c:	2100      	movcc	r1, #0
   1d28e:	440b      	add	r3, r1
   1d290:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   1d294:	b199      	cbz	r1, 1d2be <__mdiff+0x122>
   1d296:	6117      	str	r7, [r2, #16]
   1d298:	e79a      	b.n	1d1d0 <__mdiff+0x34>
   1d29a:	f854 1b04 	ldr.w	r1, [r4], #4
   1d29e:	46e6      	mov	lr, ip
   1d2a0:	fa1f fc81 	uxth.w	ip, r1
   1d2a4:	0c08      	lsrs	r0, r1, #16
   1d2a6:	4471      	add	r1, lr
   1d2a8:	44f4      	add	ip, lr
   1d2aa:	b289      	uxth	r1, r1
   1d2ac:	eb00 402c 	add.w	r0, r0, ip, asr #16
   1d2b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1d2b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
   1d2b8:	f846 1b04 	str.w	r1, [r6], #4
   1d2bc:	e7dc      	b.n	1d278 <__mdiff+0xdc>
   1d2be:	3f01      	subs	r7, #1
   1d2c0:	e7e6      	b.n	1d290 <__mdiff+0xf4>
   1d2c2:	bf00      	nop
   1d2c4:	00027c8e 	.word	0x00027c8e
   1d2c8:	00027d21 	.word	0x00027d21

0001d2cc <__ulp>:
   1d2cc:	b082      	sub	sp, #8
   1d2ce:	4b11      	ldr	r3, [pc, #68]	; (1d314 <__ulp+0x48>)
   1d2d0:	ed8d 0b00 	vstr	d0, [sp]
   1d2d4:	9a01      	ldr	r2, [sp, #4]
   1d2d6:	4013      	ands	r3, r2
   1d2d8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   1d2dc:	2b00      	cmp	r3, #0
   1d2de:	dc08      	bgt.n	1d2f2 <__ulp+0x26>
   1d2e0:	425b      	negs	r3, r3
   1d2e2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   1d2e6:	ea4f 5223 	mov.w	r2, r3, asr #20
   1d2ea:	da04      	bge.n	1d2f6 <__ulp+0x2a>
   1d2ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1d2f0:	4113      	asrs	r3, r2
   1d2f2:	2200      	movs	r2, #0
   1d2f4:	e008      	b.n	1d308 <__ulp+0x3c>
   1d2f6:	f1a2 0314 	sub.w	r3, r2, #20
   1d2fa:	2b1e      	cmp	r3, #30
   1d2fc:	bfd6      	itet	le
   1d2fe:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   1d302:	2201      	movgt	r2, #1
   1d304:	40da      	lsrle	r2, r3
   1d306:	2300      	movs	r3, #0
   1d308:	4619      	mov	r1, r3
   1d30a:	4610      	mov	r0, r2
   1d30c:	ec41 0b10 	vmov	d0, r0, r1
   1d310:	b002      	add	sp, #8
   1d312:	4770      	bx	lr
   1d314:	7ff00000 	.word	0x7ff00000

0001d318 <__b2d>:
   1d318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d31c:	6906      	ldr	r6, [r0, #16]
   1d31e:	f100 0814 	add.w	r8, r0, #20
   1d322:	eb08 0686 	add.w	r6, r8, r6, lsl #2
   1d326:	f856 2c04 	ldr.w	r2, [r6, #-4]
   1d32a:	1f37      	subs	r7, r6, #4
   1d32c:	4610      	mov	r0, r2
   1d32e:	f005 f98a 	bl	22646 <__hi0bits>
   1d332:	f1c0 0320 	rsb	r3, r0, #32
   1d336:	280a      	cmp	r0, #10
   1d338:	600b      	str	r3, [r1, #0]
   1d33a:	491d      	ldr	r1, [pc, #116]	; (1d3b0 <__b2d+0x98>)
   1d33c:	dc16      	bgt.n	1d36c <__b2d+0x54>
   1d33e:	f1c0 0c0b 	rsb	ip, r0, #11
   1d342:	45b8      	cmp	r8, r7
   1d344:	f100 0015 	add.w	r0, r0, #21
   1d348:	fa22 f30c 	lsr.w	r3, r2, ip
   1d34c:	fa02 f000 	lsl.w	r0, r2, r0
   1d350:	ea43 0501 	orr.w	r5, r3, r1
   1d354:	bf34      	ite	cc
   1d356:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
   1d35a:	2300      	movcs	r3, #0
   1d35c:	fa23 f30c 	lsr.w	r3, r3, ip
   1d360:	4303      	orrs	r3, r0
   1d362:	461c      	mov	r4, r3
   1d364:	ec45 4b10 	vmov	d0, r4, r5
   1d368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d36c:	45b8      	cmp	r8, r7
   1d36e:	bf3a      	itte	cc
   1d370:	f1a6 0708 	subcc.w	r7, r6, #8
   1d374:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
   1d378:	2300      	movcs	r3, #0
   1d37a:	380b      	subs	r0, #11
   1d37c:	d014      	beq.n	1d3a8 <__b2d+0x90>
   1d37e:	f1c0 0120 	rsb	r1, r0, #32
   1d382:	4082      	lsls	r2, r0
   1d384:	4547      	cmp	r7, r8
   1d386:	fa23 f401 	lsr.w	r4, r3, r1
   1d38a:	fa03 f300 	lsl.w	r3, r3, r0
   1d38e:	ea42 0204 	orr.w	r2, r2, r4
   1d392:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   1d396:	bf8c      	ite	hi
   1d398:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
   1d39c:	2200      	movls	r2, #0
   1d39e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   1d3a2:	40ca      	lsrs	r2, r1
   1d3a4:	4313      	orrs	r3, r2
   1d3a6:	e7dc      	b.n	1d362 <__b2d+0x4a>
   1d3a8:	ea42 0501 	orr.w	r5, r2, r1
   1d3ac:	e7d9      	b.n	1d362 <__b2d+0x4a>
   1d3ae:	bf00      	nop
   1d3b0:	3ff00000 	.word	0x3ff00000

0001d3b4 <__d2b>:
   1d3b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d3b8:	460f      	mov	r7, r1
   1d3ba:	2101      	movs	r1, #1
   1d3bc:	4616      	mov	r6, r2
   1d3be:	ec59 8b10 	vmov	r8, r9, d0
   1d3c2:	f7ff fc71 	bl	1cca8 <_Balloc>
   1d3c6:	4604      	mov	r4, r0
   1d3c8:	b930      	cbnz	r0, 1d3d8 <__d2b+0x24>
   1d3ca:	4602      	mov	r2, r0
   1d3cc:	4b23      	ldr	r3, [pc, #140]	; (1d45c <__d2b+0xa8>)
   1d3ce:	f240 310a 	movw	r1, #778	; 0x30a
   1d3d2:	4823      	ldr	r0, [pc, #140]	; (1d460 <__d2b+0xac>)
   1d3d4:	f000 fd50 	bl	1de78 <__assert_func>
   1d3d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
   1d3dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
   1d3e0:	b10d      	cbz	r5, 1d3e6 <__d2b+0x32>
   1d3e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1d3e6:	9301      	str	r3, [sp, #4]
   1d3e8:	f1b8 0300 	subs.w	r3, r8, #0
   1d3ec:	d023      	beq.n	1d436 <__d2b+0x82>
   1d3ee:	4668      	mov	r0, sp
   1d3f0:	9300      	str	r3, [sp, #0]
   1d3f2:	f005 f94a 	bl	2268a <__lo0bits>
   1d3f6:	e9dd 1200 	ldrd	r1, r2, [sp]
   1d3fa:	b1d0      	cbz	r0, 1d432 <__d2b+0x7e>
   1d3fc:	f1c0 0320 	rsb	r3, r0, #32
   1d400:	fa02 f303 	lsl.w	r3, r2, r3
   1d404:	40c2      	lsrs	r2, r0
   1d406:	430b      	orrs	r3, r1
   1d408:	9201      	str	r2, [sp, #4]
   1d40a:	6163      	str	r3, [r4, #20]
   1d40c:	9b01      	ldr	r3, [sp, #4]
   1d40e:	2b00      	cmp	r3, #0
   1d410:	61a3      	str	r3, [r4, #24]
   1d412:	bf0c      	ite	eq
   1d414:	2201      	moveq	r2, #1
   1d416:	2202      	movne	r2, #2
   1d418:	6122      	str	r2, [r4, #16]
   1d41a:	b1a5      	cbz	r5, 1d446 <__d2b+0x92>
   1d41c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   1d420:	4405      	add	r5, r0
   1d422:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   1d426:	603d      	str	r5, [r7, #0]
   1d428:	6030      	str	r0, [r6, #0]
   1d42a:	4620      	mov	r0, r4
   1d42c:	b003      	add	sp, #12
   1d42e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d432:	6161      	str	r1, [r4, #20]
   1d434:	e7ea      	b.n	1d40c <__d2b+0x58>
   1d436:	a801      	add	r0, sp, #4
   1d438:	f005 f927 	bl	2268a <__lo0bits>
   1d43c:	9b01      	ldr	r3, [sp, #4]
   1d43e:	3020      	adds	r0, #32
   1d440:	2201      	movs	r2, #1
   1d442:	6163      	str	r3, [r4, #20]
   1d444:	e7e8      	b.n	1d418 <__d2b+0x64>
   1d446:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   1d44a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   1d44e:	6038      	str	r0, [r7, #0]
   1d450:	6918      	ldr	r0, [r3, #16]
   1d452:	f005 f8f8 	bl	22646 <__hi0bits>
   1d456:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   1d45a:	e7e5      	b.n	1d428 <__d2b+0x74>
   1d45c:	00027c8e 	.word	0x00027c8e
   1d460:	00027d21 	.word	0x00027d21

0001d464 <_svfiprintf_r>:
   1d464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d468:	4698      	mov	r8, r3
   1d46a:	898b      	ldrh	r3, [r1, #12]
   1d46c:	b09d      	sub	sp, #116	; 0x74
   1d46e:	4607      	mov	r7, r0
   1d470:	061b      	lsls	r3, r3, #24
   1d472:	460d      	mov	r5, r1
   1d474:	4614      	mov	r4, r2
   1d476:	d510      	bpl.n	1d49a <_svfiprintf_r+0x36>
   1d478:	690b      	ldr	r3, [r1, #16]
   1d47a:	b973      	cbnz	r3, 1d49a <_svfiprintf_r+0x36>
   1d47c:	2140      	movs	r1, #64	; 0x40
   1d47e:	f7fe f979 	bl	1b774 <_malloc_r>
   1d482:	6028      	str	r0, [r5, #0]
   1d484:	6128      	str	r0, [r5, #16]
   1d486:	b930      	cbnz	r0, 1d496 <_svfiprintf_r+0x32>
   1d488:	230c      	movs	r3, #12
   1d48a:	603b      	str	r3, [r7, #0]
   1d48c:	f04f 30ff 	mov.w	r0, #4294967295
   1d490:	b01d      	add	sp, #116	; 0x74
   1d492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d496:	2340      	movs	r3, #64	; 0x40
   1d498:	616b      	str	r3, [r5, #20]
   1d49a:	2300      	movs	r3, #0
   1d49c:	f8cd 800c 	str.w	r8, [sp, #12]
   1d4a0:	f04f 0901 	mov.w	r9, #1
   1d4a4:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 1d648 <_svfiprintf_r+0x1e4>
   1d4a8:	9309      	str	r3, [sp, #36]	; 0x24
   1d4aa:	2320      	movs	r3, #32
   1d4ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1d4b0:	2330      	movs	r3, #48	; 0x30
   1d4b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1d4b6:	4623      	mov	r3, r4
   1d4b8:	469a      	mov	sl, r3
   1d4ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d4be:	b10a      	cbz	r2, 1d4c4 <_svfiprintf_r+0x60>
   1d4c0:	2a25      	cmp	r2, #37	; 0x25
   1d4c2:	d1f9      	bne.n	1d4b8 <_svfiprintf_r+0x54>
   1d4c4:	ebba 0b04 	subs.w	fp, sl, r4
   1d4c8:	d00b      	beq.n	1d4e2 <_svfiprintf_r+0x7e>
   1d4ca:	465b      	mov	r3, fp
   1d4cc:	4622      	mov	r2, r4
   1d4ce:	4629      	mov	r1, r5
   1d4d0:	4638      	mov	r0, r7
   1d4d2:	f005 f9cb 	bl	2286c <__ssputs_r>
   1d4d6:	3001      	adds	r0, #1
   1d4d8:	f000 80a7 	beq.w	1d62a <_svfiprintf_r+0x1c6>
   1d4dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d4de:	445a      	add	r2, fp
   1d4e0:	9209      	str	r2, [sp, #36]	; 0x24
   1d4e2:	f89a 3000 	ldrb.w	r3, [sl]
   1d4e6:	2b00      	cmp	r3, #0
   1d4e8:	f000 809f 	beq.w	1d62a <_svfiprintf_r+0x1c6>
   1d4ec:	2300      	movs	r3, #0
   1d4ee:	f04f 32ff 	mov.w	r2, #4294967295
   1d4f2:	f10a 0a01 	add.w	sl, sl, #1
   1d4f6:	9304      	str	r3, [sp, #16]
   1d4f8:	9307      	str	r3, [sp, #28]
   1d4fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   1d4fe:	931a      	str	r3, [sp, #104]	; 0x68
   1d500:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1d504:	4654      	mov	r4, sl
   1d506:	2205      	movs	r2, #5
   1d508:	484f      	ldr	r0, [pc, #316]	; (1d648 <_svfiprintf_r+0x1e4>)
   1d50a:	f814 1b01 	ldrb.w	r1, [r4], #1
   1d50e:	f004 fb95 	bl	21c3c <memchr>
   1d512:	9a04      	ldr	r2, [sp, #16]
   1d514:	b9d8      	cbnz	r0, 1d54e <_svfiprintf_r+0xea>
   1d516:	06d0      	lsls	r0, r2, #27
   1d518:	bf44      	itt	mi
   1d51a:	2320      	movmi	r3, #32
   1d51c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1d520:	0711      	lsls	r1, r2, #28
   1d522:	bf44      	itt	mi
   1d524:	232b      	movmi	r3, #43	; 0x2b
   1d526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1d52a:	f89a 3000 	ldrb.w	r3, [sl]
   1d52e:	2b2a      	cmp	r3, #42	; 0x2a
   1d530:	d015      	beq.n	1d55e <_svfiprintf_r+0xfa>
   1d532:	9a07      	ldr	r2, [sp, #28]
   1d534:	4654      	mov	r4, sl
   1d536:	2000      	movs	r0, #0
   1d538:	f04f 0c0a 	mov.w	ip, #10
   1d53c:	4621      	mov	r1, r4
   1d53e:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d542:	3b30      	subs	r3, #48	; 0x30
   1d544:	2b09      	cmp	r3, #9
   1d546:	d94b      	bls.n	1d5e0 <_svfiprintf_r+0x17c>
   1d548:	b1b0      	cbz	r0, 1d578 <_svfiprintf_r+0x114>
   1d54a:	9207      	str	r2, [sp, #28]
   1d54c:	e014      	b.n	1d578 <_svfiprintf_r+0x114>
   1d54e:	eba0 0308 	sub.w	r3, r0, r8
   1d552:	46a2      	mov	sl, r4
   1d554:	fa09 f303 	lsl.w	r3, r9, r3
   1d558:	4313      	orrs	r3, r2
   1d55a:	9304      	str	r3, [sp, #16]
   1d55c:	e7d2      	b.n	1d504 <_svfiprintf_r+0xa0>
   1d55e:	9b03      	ldr	r3, [sp, #12]
   1d560:	1d19      	adds	r1, r3, #4
   1d562:	681b      	ldr	r3, [r3, #0]
   1d564:	2b00      	cmp	r3, #0
   1d566:	9103      	str	r1, [sp, #12]
   1d568:	bfbb      	ittet	lt
   1d56a:	425b      	neglt	r3, r3
   1d56c:	f042 0202 	orrlt.w	r2, r2, #2
   1d570:	9307      	strge	r3, [sp, #28]
   1d572:	9307      	strlt	r3, [sp, #28]
   1d574:	bfb8      	it	lt
   1d576:	9204      	strlt	r2, [sp, #16]
   1d578:	7823      	ldrb	r3, [r4, #0]
   1d57a:	2b2e      	cmp	r3, #46	; 0x2e
   1d57c:	d10a      	bne.n	1d594 <_svfiprintf_r+0x130>
   1d57e:	7863      	ldrb	r3, [r4, #1]
   1d580:	2b2a      	cmp	r3, #42	; 0x2a
   1d582:	d132      	bne.n	1d5ea <_svfiprintf_r+0x186>
   1d584:	9b03      	ldr	r3, [sp, #12]
   1d586:	3402      	adds	r4, #2
   1d588:	1d1a      	adds	r2, r3, #4
   1d58a:	681b      	ldr	r3, [r3, #0]
   1d58c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   1d590:	9203      	str	r2, [sp, #12]
   1d592:	9305      	str	r3, [sp, #20]
   1d594:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 1d658 <_svfiprintf_r+0x1f4>
   1d598:	2203      	movs	r2, #3
   1d59a:	7821      	ldrb	r1, [r4, #0]
   1d59c:	4650      	mov	r0, sl
   1d59e:	f004 fb4d 	bl	21c3c <memchr>
   1d5a2:	b138      	cbz	r0, 1d5b4 <_svfiprintf_r+0x150>
   1d5a4:	eba0 000a 	sub.w	r0, r0, sl
   1d5a8:	2240      	movs	r2, #64	; 0x40
   1d5aa:	9b04      	ldr	r3, [sp, #16]
   1d5ac:	3401      	adds	r4, #1
   1d5ae:	4082      	lsls	r2, r0
   1d5b0:	4313      	orrs	r3, r2
   1d5b2:	9304      	str	r3, [sp, #16]
   1d5b4:	f814 1b01 	ldrb.w	r1, [r4], #1
   1d5b8:	2206      	movs	r2, #6
   1d5ba:	4824      	ldr	r0, [pc, #144]	; (1d64c <_svfiprintf_r+0x1e8>)
   1d5bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1d5c0:	f004 fb3c 	bl	21c3c <memchr>
   1d5c4:	2800      	cmp	r0, #0
   1d5c6:	d036      	beq.n	1d636 <_svfiprintf_r+0x1d2>
   1d5c8:	4b21      	ldr	r3, [pc, #132]	; (1d650 <_svfiprintf_r+0x1ec>)
   1d5ca:	bb1b      	cbnz	r3, 1d614 <_svfiprintf_r+0x1b0>
   1d5cc:	9b03      	ldr	r3, [sp, #12]
   1d5ce:	3307      	adds	r3, #7
   1d5d0:	f023 0307 	bic.w	r3, r3, #7
   1d5d4:	3308      	adds	r3, #8
   1d5d6:	9303      	str	r3, [sp, #12]
   1d5d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d5da:	4433      	add	r3, r6
   1d5dc:	9309      	str	r3, [sp, #36]	; 0x24
   1d5de:	e76a      	b.n	1d4b6 <_svfiprintf_r+0x52>
   1d5e0:	fb0c 3202 	mla	r2, ip, r2, r3
   1d5e4:	460c      	mov	r4, r1
   1d5e6:	2001      	movs	r0, #1
   1d5e8:	e7a8      	b.n	1d53c <_svfiprintf_r+0xd8>
   1d5ea:	2300      	movs	r3, #0
   1d5ec:	3401      	adds	r4, #1
   1d5ee:	f04f 0c0a 	mov.w	ip, #10
   1d5f2:	4619      	mov	r1, r3
   1d5f4:	9305      	str	r3, [sp, #20]
   1d5f6:	4620      	mov	r0, r4
   1d5f8:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d5fc:	3a30      	subs	r2, #48	; 0x30
   1d5fe:	2a09      	cmp	r2, #9
   1d600:	d903      	bls.n	1d60a <_svfiprintf_r+0x1a6>
   1d602:	2b00      	cmp	r3, #0
   1d604:	d0c6      	beq.n	1d594 <_svfiprintf_r+0x130>
   1d606:	9105      	str	r1, [sp, #20]
   1d608:	e7c4      	b.n	1d594 <_svfiprintf_r+0x130>
   1d60a:	fb0c 2101 	mla	r1, ip, r1, r2
   1d60e:	4604      	mov	r4, r0
   1d610:	2301      	movs	r3, #1
   1d612:	e7f0      	b.n	1d5f6 <_svfiprintf_r+0x192>
   1d614:	ab03      	add	r3, sp, #12
   1d616:	462a      	mov	r2, r5
   1d618:	a904      	add	r1, sp, #16
   1d61a:	4638      	mov	r0, r7
   1d61c:	9300      	str	r3, [sp, #0]
   1d61e:	4b0d      	ldr	r3, [pc, #52]	; (1d654 <_svfiprintf_r+0x1f0>)
   1d620:	f7fe f902 	bl	1b828 <_printf_float>
   1d624:	1c42      	adds	r2, r0, #1
   1d626:	4606      	mov	r6, r0
   1d628:	d1d6      	bne.n	1d5d8 <_svfiprintf_r+0x174>
   1d62a:	89ab      	ldrh	r3, [r5, #12]
   1d62c:	065b      	lsls	r3, r3, #25
   1d62e:	f53f af2d 	bmi.w	1d48c <_svfiprintf_r+0x28>
   1d632:	9809      	ldr	r0, [sp, #36]	; 0x24
   1d634:	e72c      	b.n	1d490 <_svfiprintf_r+0x2c>
   1d636:	ab03      	add	r3, sp, #12
   1d638:	462a      	mov	r2, r5
   1d63a:	a904      	add	r1, sp, #16
   1d63c:	4638      	mov	r0, r7
   1d63e:	9300      	str	r3, [sp, #0]
   1d640:	4b04      	ldr	r3, [pc, #16]	; (1d654 <_svfiprintf_r+0x1f0>)
   1d642:	f7fe fb25 	bl	1bc90 <_printf_i>
   1d646:	e7ed      	b.n	1d624 <_svfiprintf_r+0x1c0>
   1d648:	00027d96 	.word	0x00027d96
   1d64c:	00027da0 	.word	0x00027da0
   1d650:	0001b829 	.word	0x0001b829
   1d654:	0002286d 	.word	0x0002286d
   1d658:	00027d9c 	.word	0x00027d9c

0001d65c <__ssvfiscanf_r>:
   1d65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d660:	460c      	mov	r4, r1
   1d662:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   1d666:	2100      	movs	r1, #0
   1d668:	4606      	mov	r6, r0
   1d66a:	f10d 0804 	add.w	r8, sp, #4
   1d66e:	4fa7      	ldr	r7, [pc, #668]	; (1d90c <__ssvfiscanf_r+0x2b0>)
   1d670:	9300      	str	r3, [sp, #0]
   1d672:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   1d676:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   1d67a:	49a5      	ldr	r1, [pc, #660]	; (1d910 <__ssvfiscanf_r+0x2b4>)
   1d67c:	91a0      	str	r1, [sp, #640]	; 0x280
   1d67e:	49a5      	ldr	r1, [pc, #660]	; (1d914 <__ssvfiscanf_r+0x2b8>)
   1d680:	91a1      	str	r1, [sp, #644]	; 0x284
   1d682:	7813      	ldrb	r3, [r2, #0]
   1d684:	2b00      	cmp	r3, #0
   1d686:	f000 815c 	beq.w	1d942 <__ssvfiscanf_r+0x2e6>
   1d68a:	5cf9      	ldrb	r1, [r7, r3]
   1d68c:	1c55      	adds	r5, r2, #1
   1d68e:	f011 0108 	ands.w	r1, r1, #8
   1d692:	d019      	beq.n	1d6c8 <__ssvfiscanf_r+0x6c>
   1d694:	6863      	ldr	r3, [r4, #4]
   1d696:	2b00      	cmp	r3, #0
   1d698:	dd0f      	ble.n	1d6ba <__ssvfiscanf_r+0x5e>
   1d69a:	6823      	ldr	r3, [r4, #0]
   1d69c:	781a      	ldrb	r2, [r3, #0]
   1d69e:	5cba      	ldrb	r2, [r7, r2]
   1d6a0:	0712      	lsls	r2, r2, #28
   1d6a2:	d401      	bmi.n	1d6a8 <__ssvfiscanf_r+0x4c>
   1d6a4:	462a      	mov	r2, r5
   1d6a6:	e7ec      	b.n	1d682 <__ssvfiscanf_r+0x26>
   1d6a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1d6aa:	3301      	adds	r3, #1
   1d6ac:	3201      	adds	r2, #1
   1d6ae:	6023      	str	r3, [r4, #0]
   1d6b0:	9245      	str	r2, [sp, #276]	; 0x114
   1d6b2:	6862      	ldr	r2, [r4, #4]
   1d6b4:	3a01      	subs	r2, #1
   1d6b6:	6062      	str	r2, [r4, #4]
   1d6b8:	e7ec      	b.n	1d694 <__ssvfiscanf_r+0x38>
   1d6ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1d6bc:	4621      	mov	r1, r4
   1d6be:	4630      	mov	r0, r6
   1d6c0:	4798      	blx	r3
   1d6c2:	2800      	cmp	r0, #0
   1d6c4:	d0e9      	beq.n	1d69a <__ssvfiscanf_r+0x3e>
   1d6c6:	e7ed      	b.n	1d6a4 <__ssvfiscanf_r+0x48>
   1d6c8:	2b25      	cmp	r3, #37	; 0x25
   1d6ca:	d012      	beq.n	1d6f2 <__ssvfiscanf_r+0x96>
   1d6cc:	4699      	mov	r9, r3
   1d6ce:	6863      	ldr	r3, [r4, #4]
   1d6d0:	2b00      	cmp	r3, #0
   1d6d2:	f340 8094 	ble.w	1d7fe <__ssvfiscanf_r+0x1a2>
   1d6d6:	6822      	ldr	r2, [r4, #0]
   1d6d8:	7813      	ldrb	r3, [r2, #0]
   1d6da:	454b      	cmp	r3, r9
   1d6dc:	f040 8131 	bne.w	1d942 <__ssvfiscanf_r+0x2e6>
   1d6e0:	6863      	ldr	r3, [r4, #4]
   1d6e2:	3201      	adds	r2, #1
   1d6e4:	3b01      	subs	r3, #1
   1d6e6:	6022      	str	r2, [r4, #0]
   1d6e8:	6063      	str	r3, [r4, #4]
   1d6ea:	9b45      	ldr	r3, [sp, #276]	; 0x114
   1d6ec:	3301      	adds	r3, #1
   1d6ee:	9345      	str	r3, [sp, #276]	; 0x114
   1d6f0:	e7d8      	b.n	1d6a4 <__ssvfiscanf_r+0x48>
   1d6f2:	9141      	str	r1, [sp, #260]	; 0x104
   1d6f4:	9143      	str	r1, [sp, #268]	; 0x10c
   1d6f6:	7853      	ldrb	r3, [r2, #1]
   1d6f8:	2b2a      	cmp	r3, #42	; 0x2a
   1d6fa:	bf04      	itt	eq
   1d6fc:	2310      	moveq	r3, #16
   1d6fe:	1c95      	addeq	r5, r2, #2
   1d700:	f04f 020a 	mov.w	r2, #10
   1d704:	bf08      	it	eq
   1d706:	9341      	streq	r3, [sp, #260]	; 0x104
   1d708:	46a9      	mov	r9, r5
   1d70a:	f819 1b01 	ldrb.w	r1, [r9], #1
   1d70e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1d712:	2b09      	cmp	r3, #9
   1d714:	d91e      	bls.n	1d754 <__ssvfiscanf_r+0xf8>
   1d716:	f8df a200 	ldr.w	sl, [pc, #512]	; 1d918 <__ssvfiscanf_r+0x2bc>
   1d71a:	2203      	movs	r2, #3
   1d71c:	4650      	mov	r0, sl
   1d71e:	f004 fa8d 	bl	21c3c <memchr>
   1d722:	b138      	cbz	r0, 1d734 <__ssvfiscanf_r+0xd8>
   1d724:	eba0 000a 	sub.w	r0, r0, sl
   1d728:	2301      	movs	r3, #1
   1d72a:	9a41      	ldr	r2, [sp, #260]	; 0x104
   1d72c:	464d      	mov	r5, r9
   1d72e:	4083      	lsls	r3, r0
   1d730:	4313      	orrs	r3, r2
   1d732:	9341      	str	r3, [sp, #260]	; 0x104
   1d734:	f815 3b01 	ldrb.w	r3, [r5], #1
   1d738:	2b78      	cmp	r3, #120	; 0x78
   1d73a:	d806      	bhi.n	1d74a <__ssvfiscanf_r+0xee>
   1d73c:	2b57      	cmp	r3, #87	; 0x57
   1d73e:	d810      	bhi.n	1d762 <__ssvfiscanf_r+0x106>
   1d740:	2b25      	cmp	r3, #37	; 0x25
   1d742:	d0c3      	beq.n	1d6cc <__ssvfiscanf_r+0x70>
   1d744:	d856      	bhi.n	1d7f4 <__ssvfiscanf_r+0x198>
   1d746:	2b00      	cmp	r3, #0
   1d748:	d064      	beq.n	1d814 <__ssvfiscanf_r+0x1b8>
   1d74a:	2303      	movs	r3, #3
   1d74c:	9347      	str	r3, [sp, #284]	; 0x11c
   1d74e:	230a      	movs	r3, #10
   1d750:	9342      	str	r3, [sp, #264]	; 0x108
   1d752:	e06a      	b.n	1d82a <__ssvfiscanf_r+0x1ce>
   1d754:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   1d756:	464d      	mov	r5, r9
   1d758:	fb02 1103 	mla	r1, r2, r3, r1
   1d75c:	3930      	subs	r1, #48	; 0x30
   1d75e:	9143      	str	r1, [sp, #268]	; 0x10c
   1d760:	e7d2      	b.n	1d708 <__ssvfiscanf_r+0xac>
   1d762:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   1d766:	2a20      	cmp	r2, #32
   1d768:	d8ef      	bhi.n	1d74a <__ssvfiscanf_r+0xee>
   1d76a:	a101      	add	r1, pc, #4	; (adr r1, 1d770 <__ssvfiscanf_r+0x114>)
   1d76c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   1d770:	0001d85f 	.word	0x0001d85f
   1d774:	0001d74b 	.word	0x0001d74b
   1d778:	0001d74b 	.word	0x0001d74b
   1d77c:	0001d881 	.word	0x0001d881
   1d780:	0001d74b 	.word	0x0001d74b
   1d784:	0001d74b 	.word	0x0001d74b
   1d788:	0001d74b 	.word	0x0001d74b
   1d78c:	0001d74b 	.word	0x0001d74b
   1d790:	0001d74b 	.word	0x0001d74b
   1d794:	0001d74b 	.word	0x0001d74b
   1d798:	0001d74b 	.word	0x0001d74b
   1d79c:	0001d897 	.word	0x0001d897
   1d7a0:	0001d87d 	.word	0x0001d87d
   1d7a4:	0001d7fb 	.word	0x0001d7fb
   1d7a8:	0001d7fb 	.word	0x0001d7fb
   1d7ac:	0001d7fb 	.word	0x0001d7fb
   1d7b0:	0001d74b 	.word	0x0001d74b
   1d7b4:	0001d871 	.word	0x0001d871
   1d7b8:	0001d74b 	.word	0x0001d74b
   1d7bc:	0001d74b 	.word	0x0001d74b
   1d7c0:	0001d74b 	.word	0x0001d74b
   1d7c4:	0001d74b 	.word	0x0001d74b
   1d7c8:	0001d8a7 	.word	0x0001d8a7
   1d7cc:	0001d879 	.word	0x0001d879
   1d7d0:	0001d81b 	.word	0x0001d81b
   1d7d4:	0001d74b 	.word	0x0001d74b
   1d7d8:	0001d74b 	.word	0x0001d74b
   1d7dc:	0001d8a3 	.word	0x0001d8a3
   1d7e0:	0001d74b 	.word	0x0001d74b
   1d7e4:	0001d87d 	.word	0x0001d87d
   1d7e8:	0001d74b 	.word	0x0001d74b
   1d7ec:	0001d74b 	.word	0x0001d74b
   1d7f0:	0001d85f 	.word	0x0001d85f
   1d7f4:	3b45      	subs	r3, #69	; 0x45
   1d7f6:	2b02      	cmp	r3, #2
   1d7f8:	d8a7      	bhi.n	1d74a <__ssvfiscanf_r+0xee>
   1d7fa:	2305      	movs	r3, #5
   1d7fc:	e014      	b.n	1d828 <__ssvfiscanf_r+0x1cc>
   1d7fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1d800:	4621      	mov	r1, r4
   1d802:	4630      	mov	r0, r6
   1d804:	4798      	blx	r3
   1d806:	2800      	cmp	r0, #0
   1d808:	f43f af65 	beq.w	1d6d6 <__ssvfiscanf_r+0x7a>
   1d80c:	9844      	ldr	r0, [sp, #272]	; 0x110
   1d80e:	2800      	cmp	r0, #0
   1d810:	f040 808f 	bne.w	1d932 <__ssvfiscanf_r+0x2d6>
   1d814:	f04f 30ff 	mov.w	r0, #4294967295
   1d818:	e08f      	b.n	1d93a <__ssvfiscanf_r+0x2de>
   1d81a:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1d81c:	f443 7308 	orr.w	r3, r3, #544	; 0x220
   1d820:	9341      	str	r3, [sp, #260]	; 0x104
   1d822:	2310      	movs	r3, #16
   1d824:	9342      	str	r3, [sp, #264]	; 0x108
   1d826:	2304      	movs	r3, #4
   1d828:	9347      	str	r3, [sp, #284]	; 0x11c
   1d82a:	6863      	ldr	r3, [r4, #4]
   1d82c:	2b00      	cmp	r3, #0
   1d82e:	dd4a      	ble.n	1d8c6 <__ssvfiscanf_r+0x26a>
   1d830:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1d832:	0659      	lsls	r1, r3, #25
   1d834:	d404      	bmi.n	1d840 <__ssvfiscanf_r+0x1e4>
   1d836:	6823      	ldr	r3, [r4, #0]
   1d838:	781a      	ldrb	r2, [r3, #0]
   1d83a:	5cba      	ldrb	r2, [r7, r2]
   1d83c:	0712      	lsls	r2, r2, #28
   1d83e:	d449      	bmi.n	1d8d4 <__ssvfiscanf_r+0x278>
   1d840:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   1d842:	2b02      	cmp	r3, #2
   1d844:	dc58      	bgt.n	1d8f8 <__ssvfiscanf_r+0x29c>
   1d846:	466b      	mov	r3, sp
   1d848:	4622      	mov	r2, r4
   1d84a:	a941      	add	r1, sp, #260	; 0x104
   1d84c:	4630      	mov	r0, r6
   1d84e:	f000 f9a9 	bl	1dba4 <_scanf_chars>
   1d852:	2801      	cmp	r0, #1
   1d854:	d075      	beq.n	1d942 <__ssvfiscanf_r+0x2e6>
   1d856:	2802      	cmp	r0, #2
   1d858:	f47f af24 	bne.w	1d6a4 <__ssvfiscanf_r+0x48>
   1d85c:	e7d6      	b.n	1d80c <__ssvfiscanf_r+0x1b0>
   1d85e:	9a41      	ldr	r2, [sp, #260]	; 0x104
   1d860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   1d864:	9241      	str	r2, [sp, #260]	; 0x104
   1d866:	2210      	movs	r2, #16
   1d868:	2b6e      	cmp	r3, #110	; 0x6e
   1d86a:	9242      	str	r2, [sp, #264]	; 0x108
   1d86c:	d902      	bls.n	1d874 <__ssvfiscanf_r+0x218>
   1d86e:	e7da      	b.n	1d826 <__ssvfiscanf_r+0x1ca>
   1d870:	2300      	movs	r3, #0
   1d872:	9342      	str	r3, [sp, #264]	; 0x108
   1d874:	2303      	movs	r3, #3
   1d876:	e7d7      	b.n	1d828 <__ssvfiscanf_r+0x1cc>
   1d878:	2308      	movs	r3, #8
   1d87a:	e7d3      	b.n	1d824 <__ssvfiscanf_r+0x1c8>
   1d87c:	220a      	movs	r2, #10
   1d87e:	e7f3      	b.n	1d868 <__ssvfiscanf_r+0x20c>
   1d880:	4629      	mov	r1, r5
   1d882:	4640      	mov	r0, r8
   1d884:	f005 f8ce 	bl	22a24 <__sccl>
   1d888:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1d88a:	4605      	mov	r5, r0
   1d88c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d890:	9341      	str	r3, [sp, #260]	; 0x104
   1d892:	2301      	movs	r3, #1
   1d894:	e7c8      	b.n	1d828 <__ssvfiscanf_r+0x1cc>
   1d896:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1d898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d89c:	9341      	str	r3, [sp, #260]	; 0x104
   1d89e:	2300      	movs	r3, #0
   1d8a0:	e7c2      	b.n	1d828 <__ssvfiscanf_r+0x1cc>
   1d8a2:	2302      	movs	r3, #2
   1d8a4:	e7c0      	b.n	1d828 <__ssvfiscanf_r+0x1cc>
   1d8a6:	9841      	ldr	r0, [sp, #260]	; 0x104
   1d8a8:	06c3      	lsls	r3, r0, #27
   1d8aa:	f53f aefb 	bmi.w	1d6a4 <__ssvfiscanf_r+0x48>
   1d8ae:	9b00      	ldr	r3, [sp, #0]
   1d8b0:	f010 0f01 	tst.w	r0, #1
   1d8b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1d8b6:	f103 0104 	add.w	r1, r3, #4
   1d8ba:	9100      	str	r1, [sp, #0]
   1d8bc:	681b      	ldr	r3, [r3, #0]
   1d8be:	bf14      	ite	ne
   1d8c0:	801a      	strhne	r2, [r3, #0]
   1d8c2:	601a      	streq	r2, [r3, #0]
   1d8c4:	e6ee      	b.n	1d6a4 <__ssvfiscanf_r+0x48>
   1d8c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1d8c8:	4621      	mov	r1, r4
   1d8ca:	4630      	mov	r0, r6
   1d8cc:	4798      	blx	r3
   1d8ce:	2800      	cmp	r0, #0
   1d8d0:	d0ae      	beq.n	1d830 <__ssvfiscanf_r+0x1d4>
   1d8d2:	e79b      	b.n	1d80c <__ssvfiscanf_r+0x1b0>
   1d8d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1d8d6:	3201      	adds	r2, #1
   1d8d8:	9245      	str	r2, [sp, #276]	; 0x114
   1d8da:	6862      	ldr	r2, [r4, #4]
   1d8dc:	3a01      	subs	r2, #1
   1d8de:	2a00      	cmp	r2, #0
   1d8e0:	6062      	str	r2, [r4, #4]
   1d8e2:	dd02      	ble.n	1d8ea <__ssvfiscanf_r+0x28e>
   1d8e4:	3301      	adds	r3, #1
   1d8e6:	6023      	str	r3, [r4, #0]
   1d8e8:	e7a5      	b.n	1d836 <__ssvfiscanf_r+0x1da>
   1d8ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1d8ec:	4621      	mov	r1, r4
   1d8ee:	4630      	mov	r0, r6
   1d8f0:	4798      	blx	r3
   1d8f2:	2800      	cmp	r0, #0
   1d8f4:	d09f      	beq.n	1d836 <__ssvfiscanf_r+0x1da>
   1d8f6:	e789      	b.n	1d80c <__ssvfiscanf_r+0x1b0>
   1d8f8:	2b04      	cmp	r3, #4
   1d8fa:	dc0f      	bgt.n	1d91c <__ssvfiscanf_r+0x2c0>
   1d8fc:	466b      	mov	r3, sp
   1d8fe:	4622      	mov	r2, r4
   1d900:	a941      	add	r1, sp, #260	; 0x104
   1d902:	4630      	mov	r0, r6
   1d904:	f000 f9a8 	bl	1dc58 <_scanf_i>
   1d908:	e7a3      	b.n	1d852 <__ssvfiscanf_r+0x1f6>
   1d90a:	bf00      	nop
   1d90c:	00027ac8 	.word	0x00027ac8
   1d910:	00022923 	.word	0x00022923
   1d914:	00022999 	.word	0x00022999
   1d918:	00027d9c 	.word	0x00027d9c
   1d91c:	4b0a      	ldr	r3, [pc, #40]	; (1d948 <__ssvfiscanf_r+0x2ec>)
   1d91e:	2b00      	cmp	r3, #0
   1d920:	f43f aec0 	beq.w	1d6a4 <__ssvfiscanf_r+0x48>
   1d924:	466b      	mov	r3, sp
   1d926:	4622      	mov	r2, r4
   1d928:	a941      	add	r1, sp, #260	; 0x104
   1d92a:	4630      	mov	r0, r6
   1d92c:	f3af 8000 	nop.w
   1d930:	e78f      	b.n	1d852 <__ssvfiscanf_r+0x1f6>
   1d932:	89a3      	ldrh	r3, [r4, #12]
   1d934:	065b      	lsls	r3, r3, #25
   1d936:	f53f af6d 	bmi.w	1d814 <__ssvfiscanf_r+0x1b8>
   1d93a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   1d93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d942:	9844      	ldr	r0, [sp, #272]	; 0x110
   1d944:	e7f9      	b.n	1d93a <__ssvfiscanf_r+0x2de>
   1d946:	bf00      	nop
   1d948:	00000000 	.word	0x00000000

0001d94c <_vfiprintf_r>:
   1d94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d950:	460d      	mov	r5, r1
   1d952:	b09d      	sub	sp, #116	; 0x74
   1d954:	4614      	mov	r4, r2
   1d956:	4698      	mov	r8, r3
   1d958:	4606      	mov	r6, r0
   1d95a:	b118      	cbz	r0, 1d964 <_vfiprintf_r+0x18>
   1d95c:	6983      	ldr	r3, [r0, #24]
   1d95e:	b90b      	cbnz	r3, 1d964 <_vfiprintf_r+0x18>
   1d960:	f7fe fe92 	bl	1c688 <__sinit>
   1d964:	4b87      	ldr	r3, [pc, #540]	; (1db84 <_vfiprintf_r+0x238>)
   1d966:	429d      	cmp	r5, r3
   1d968:	d11b      	bne.n	1d9a2 <_vfiprintf_r+0x56>
   1d96a:	6875      	ldr	r5, [r6, #4]
   1d96c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1d96e:	07d9      	lsls	r1, r3, #31
   1d970:	d405      	bmi.n	1d97e <_vfiprintf_r+0x32>
   1d972:	89ab      	ldrh	r3, [r5, #12]
   1d974:	059a      	lsls	r2, r3, #22
   1d976:	d402      	bmi.n	1d97e <_vfiprintf_r+0x32>
   1d978:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1d97a:	f001 f989 	bl	1ec90 <__retarget_lock_acquire_recursive>
   1d97e:	89ab      	ldrh	r3, [r5, #12]
   1d980:	071b      	lsls	r3, r3, #28
   1d982:	d501      	bpl.n	1d988 <_vfiprintf_r+0x3c>
   1d984:	692b      	ldr	r3, [r5, #16]
   1d986:	b9eb      	cbnz	r3, 1d9c4 <_vfiprintf_r+0x78>
   1d988:	4629      	mov	r1, r5
   1d98a:	4630      	mov	r0, r6
   1d98c:	f7fe fd82 	bl	1c494 <__swsetup_r>
   1d990:	b1c0      	cbz	r0, 1d9c4 <_vfiprintf_r+0x78>
   1d992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1d994:	07dc      	lsls	r4, r3, #31
   1d996:	d50e      	bpl.n	1d9b6 <_vfiprintf_r+0x6a>
   1d998:	f04f 30ff 	mov.w	r0, #4294967295
   1d99c:	b01d      	add	sp, #116	; 0x74
   1d99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9a2:	4b79      	ldr	r3, [pc, #484]	; (1db88 <_vfiprintf_r+0x23c>)
   1d9a4:	429d      	cmp	r5, r3
   1d9a6:	d101      	bne.n	1d9ac <_vfiprintf_r+0x60>
   1d9a8:	68b5      	ldr	r5, [r6, #8]
   1d9aa:	e7df      	b.n	1d96c <_vfiprintf_r+0x20>
   1d9ac:	4b77      	ldr	r3, [pc, #476]	; (1db8c <_vfiprintf_r+0x240>)
   1d9ae:	429d      	cmp	r5, r3
   1d9b0:	bf08      	it	eq
   1d9b2:	68f5      	ldreq	r5, [r6, #12]
   1d9b4:	e7da      	b.n	1d96c <_vfiprintf_r+0x20>
   1d9b6:	89ab      	ldrh	r3, [r5, #12]
   1d9b8:	0598      	lsls	r0, r3, #22
   1d9ba:	d4ed      	bmi.n	1d998 <_vfiprintf_r+0x4c>
   1d9bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1d9be:	f001 f96d 	bl	1ec9c <__retarget_lock_release_recursive>
   1d9c2:	e7e9      	b.n	1d998 <_vfiprintf_r+0x4c>
   1d9c4:	2300      	movs	r3, #0
   1d9c6:	f8cd 800c 	str.w	r8, [sp, #12]
   1d9ca:	f04f 0901 	mov.w	r9, #1
   1d9ce:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 1db90 <_vfiprintf_r+0x244>
   1d9d2:	9309      	str	r3, [sp, #36]	; 0x24
   1d9d4:	2320      	movs	r3, #32
   1d9d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1d9da:	2330      	movs	r3, #48	; 0x30
   1d9dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1d9e0:	4623      	mov	r3, r4
   1d9e2:	469a      	mov	sl, r3
   1d9e4:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d9e8:	b10a      	cbz	r2, 1d9ee <_vfiprintf_r+0xa2>
   1d9ea:	2a25      	cmp	r2, #37	; 0x25
   1d9ec:	d1f9      	bne.n	1d9e2 <_vfiprintf_r+0x96>
   1d9ee:	ebba 0b04 	subs.w	fp, sl, r4
   1d9f2:	d00b      	beq.n	1da0c <_vfiprintf_r+0xc0>
   1d9f4:	465b      	mov	r3, fp
   1d9f6:	4622      	mov	r2, r4
   1d9f8:	4629      	mov	r1, r5
   1d9fa:	4630      	mov	r0, r6
   1d9fc:	f005 f800 	bl	22a00 <__sfputs_r>
   1da00:	3001      	adds	r0, #1
   1da02:	f000 80a6 	beq.w	1db52 <_vfiprintf_r+0x206>
   1da06:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1da08:	445a      	add	r2, fp
   1da0a:	9209      	str	r2, [sp, #36]	; 0x24
   1da0c:	f89a 3000 	ldrb.w	r3, [sl]
   1da10:	2b00      	cmp	r3, #0
   1da12:	f000 809e 	beq.w	1db52 <_vfiprintf_r+0x206>
   1da16:	2300      	movs	r3, #0
   1da18:	f04f 32ff 	mov.w	r2, #4294967295
   1da1c:	f10a 0a01 	add.w	sl, sl, #1
   1da20:	9304      	str	r3, [sp, #16]
   1da22:	9307      	str	r3, [sp, #28]
   1da24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   1da28:	931a      	str	r3, [sp, #104]	; 0x68
   1da2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1da2e:	4654      	mov	r4, sl
   1da30:	2205      	movs	r2, #5
   1da32:	4857      	ldr	r0, [pc, #348]	; (1db90 <_vfiprintf_r+0x244>)
   1da34:	f814 1b01 	ldrb.w	r1, [r4], #1
   1da38:	f004 f900 	bl	21c3c <memchr>
   1da3c:	9b04      	ldr	r3, [sp, #16]
   1da3e:	b9d0      	cbnz	r0, 1da76 <_vfiprintf_r+0x12a>
   1da40:	06d9      	lsls	r1, r3, #27
   1da42:	bf44      	itt	mi
   1da44:	2220      	movmi	r2, #32
   1da46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   1da4a:	071a      	lsls	r2, r3, #28
   1da4c:	bf44      	itt	mi
   1da4e:	222b      	movmi	r2, #43	; 0x2b
   1da50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   1da54:	f89a 2000 	ldrb.w	r2, [sl]
   1da58:	2a2a      	cmp	r2, #42	; 0x2a
   1da5a:	d014      	beq.n	1da86 <_vfiprintf_r+0x13a>
   1da5c:	9a07      	ldr	r2, [sp, #28]
   1da5e:	4654      	mov	r4, sl
   1da60:	2000      	movs	r0, #0
   1da62:	f04f 0c0a 	mov.w	ip, #10
   1da66:	4621      	mov	r1, r4
   1da68:	f811 3b01 	ldrb.w	r3, [r1], #1
   1da6c:	3b30      	subs	r3, #48	; 0x30
   1da6e:	2b09      	cmp	r3, #9
   1da70:	d94a      	bls.n	1db08 <_vfiprintf_r+0x1bc>
   1da72:	b970      	cbnz	r0, 1da92 <_vfiprintf_r+0x146>
   1da74:	e014      	b.n	1daa0 <_vfiprintf_r+0x154>
   1da76:	eba0 0008 	sub.w	r0, r0, r8
   1da7a:	46a2      	mov	sl, r4
   1da7c:	fa09 f000 	lsl.w	r0, r9, r0
   1da80:	4318      	orrs	r0, r3
   1da82:	9004      	str	r0, [sp, #16]
   1da84:	e7d3      	b.n	1da2e <_vfiprintf_r+0xe2>
   1da86:	9a03      	ldr	r2, [sp, #12]
   1da88:	1d11      	adds	r1, r2, #4
   1da8a:	6812      	ldr	r2, [r2, #0]
   1da8c:	2a00      	cmp	r2, #0
   1da8e:	9103      	str	r1, [sp, #12]
   1da90:	db01      	blt.n	1da96 <_vfiprintf_r+0x14a>
   1da92:	9207      	str	r2, [sp, #28]
   1da94:	e004      	b.n	1daa0 <_vfiprintf_r+0x154>
   1da96:	4252      	negs	r2, r2
   1da98:	f043 0302 	orr.w	r3, r3, #2
   1da9c:	9207      	str	r2, [sp, #28]
   1da9e:	9304      	str	r3, [sp, #16]
   1daa0:	7823      	ldrb	r3, [r4, #0]
   1daa2:	2b2e      	cmp	r3, #46	; 0x2e
   1daa4:	d10a      	bne.n	1dabc <_vfiprintf_r+0x170>
   1daa6:	7863      	ldrb	r3, [r4, #1]
   1daa8:	2b2a      	cmp	r3, #42	; 0x2a
   1daaa:	d132      	bne.n	1db12 <_vfiprintf_r+0x1c6>
   1daac:	9b03      	ldr	r3, [sp, #12]
   1daae:	3402      	adds	r4, #2
   1dab0:	1d1a      	adds	r2, r3, #4
   1dab2:	681b      	ldr	r3, [r3, #0]
   1dab4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   1dab8:	9203      	str	r2, [sp, #12]
   1daba:	9305      	str	r3, [sp, #20]
   1dabc:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1dba0 <_vfiprintf_r+0x254>
   1dac0:	2203      	movs	r2, #3
   1dac2:	7821      	ldrb	r1, [r4, #0]
   1dac4:	4650      	mov	r0, sl
   1dac6:	f004 f8b9 	bl	21c3c <memchr>
   1daca:	b138      	cbz	r0, 1dadc <_vfiprintf_r+0x190>
   1dacc:	eba0 000a 	sub.w	r0, r0, sl
   1dad0:	2240      	movs	r2, #64	; 0x40
   1dad2:	9b04      	ldr	r3, [sp, #16]
   1dad4:	3401      	adds	r4, #1
   1dad6:	4082      	lsls	r2, r0
   1dad8:	4313      	orrs	r3, r2
   1dada:	9304      	str	r3, [sp, #16]
   1dadc:	f814 1b01 	ldrb.w	r1, [r4], #1
   1dae0:	2206      	movs	r2, #6
   1dae2:	482c      	ldr	r0, [pc, #176]	; (1db94 <_vfiprintf_r+0x248>)
   1dae4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1dae8:	f004 f8a8 	bl	21c3c <memchr>
   1daec:	2800      	cmp	r0, #0
   1daee:	d03f      	beq.n	1db70 <_vfiprintf_r+0x224>
   1daf0:	4b29      	ldr	r3, [pc, #164]	; (1db98 <_vfiprintf_r+0x24c>)
   1daf2:	bb1b      	cbnz	r3, 1db3c <_vfiprintf_r+0x1f0>
   1daf4:	9b03      	ldr	r3, [sp, #12]
   1daf6:	3307      	adds	r3, #7
   1daf8:	f023 0307 	bic.w	r3, r3, #7
   1dafc:	3308      	adds	r3, #8
   1dafe:	9303      	str	r3, [sp, #12]
   1db00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1db02:	443b      	add	r3, r7
   1db04:	9309      	str	r3, [sp, #36]	; 0x24
   1db06:	e76b      	b.n	1d9e0 <_vfiprintf_r+0x94>
   1db08:	fb0c 3202 	mla	r2, ip, r2, r3
   1db0c:	460c      	mov	r4, r1
   1db0e:	2001      	movs	r0, #1
   1db10:	e7a9      	b.n	1da66 <_vfiprintf_r+0x11a>
   1db12:	2300      	movs	r3, #0
   1db14:	3401      	adds	r4, #1
   1db16:	f04f 0c0a 	mov.w	ip, #10
   1db1a:	4619      	mov	r1, r3
   1db1c:	9305      	str	r3, [sp, #20]
   1db1e:	4620      	mov	r0, r4
   1db20:	f810 2b01 	ldrb.w	r2, [r0], #1
   1db24:	3a30      	subs	r2, #48	; 0x30
   1db26:	2a09      	cmp	r2, #9
   1db28:	d903      	bls.n	1db32 <_vfiprintf_r+0x1e6>
   1db2a:	2b00      	cmp	r3, #0
   1db2c:	d0c6      	beq.n	1dabc <_vfiprintf_r+0x170>
   1db2e:	9105      	str	r1, [sp, #20]
   1db30:	e7c4      	b.n	1dabc <_vfiprintf_r+0x170>
   1db32:	fb0c 2101 	mla	r1, ip, r1, r2
   1db36:	4604      	mov	r4, r0
   1db38:	2301      	movs	r3, #1
   1db3a:	e7f0      	b.n	1db1e <_vfiprintf_r+0x1d2>
   1db3c:	ab03      	add	r3, sp, #12
   1db3e:	462a      	mov	r2, r5
   1db40:	a904      	add	r1, sp, #16
   1db42:	4630      	mov	r0, r6
   1db44:	9300      	str	r3, [sp, #0]
   1db46:	4b15      	ldr	r3, [pc, #84]	; (1db9c <_vfiprintf_r+0x250>)
   1db48:	f7fd fe6e 	bl	1b828 <_printf_float>
   1db4c:	4607      	mov	r7, r0
   1db4e:	1c78      	adds	r0, r7, #1
   1db50:	d1d6      	bne.n	1db00 <_vfiprintf_r+0x1b4>
   1db52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1db54:	07d9      	lsls	r1, r3, #31
   1db56:	d405      	bmi.n	1db64 <_vfiprintf_r+0x218>
   1db58:	89ab      	ldrh	r3, [r5, #12]
   1db5a:	059a      	lsls	r2, r3, #22
   1db5c:	d402      	bmi.n	1db64 <_vfiprintf_r+0x218>
   1db5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1db60:	f001 f89c 	bl	1ec9c <__retarget_lock_release_recursive>
   1db64:	89ab      	ldrh	r3, [r5, #12]
   1db66:	065b      	lsls	r3, r3, #25
   1db68:	f53f af16 	bmi.w	1d998 <_vfiprintf_r+0x4c>
   1db6c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1db6e:	e715      	b.n	1d99c <_vfiprintf_r+0x50>
   1db70:	ab03      	add	r3, sp, #12
   1db72:	462a      	mov	r2, r5
   1db74:	a904      	add	r1, sp, #16
   1db76:	4630      	mov	r0, r6
   1db78:	9300      	str	r3, [sp, #0]
   1db7a:	4b08      	ldr	r3, [pc, #32]	; (1db9c <_vfiprintf_r+0x250>)
   1db7c:	f7fe f888 	bl	1bc90 <_printf_i>
   1db80:	e7e4      	b.n	1db4c <_vfiprintf_r+0x200>
   1db82:	bf00      	nop
   1db84:	000239d4 	.word	0x000239d4
   1db88:	000239b4 	.word	0x000239b4
   1db8c:	00023994 	.word	0x00023994
   1db90:	00027d96 	.word	0x00027d96
   1db94:	00027da0 	.word	0x00027da0
   1db98:	0001b829 	.word	0x0001b829
   1db9c:	00022a01 	.word	0x00022a01
   1dba0:	00027d9c 	.word	0x00027d9c

0001dba4 <_scanf_chars>:
   1dba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1dba8:	4615      	mov	r5, r2
   1dbaa:	688a      	ldr	r2, [r1, #8]
   1dbac:	4680      	mov	r8, r0
   1dbae:	460c      	mov	r4, r1
   1dbb0:	b932      	cbnz	r2, 1dbc0 <_scanf_chars+0x1c>
   1dbb2:	698a      	ldr	r2, [r1, #24]
   1dbb4:	2a00      	cmp	r2, #0
   1dbb6:	bf14      	ite	ne
   1dbb8:	f04f 32ff 	movne.w	r2, #4294967295
   1dbbc:	2201      	moveq	r2, #1
   1dbbe:	608a      	str	r2, [r1, #8]
   1dbc0:	6822      	ldr	r2, [r4, #0]
   1dbc2:	2700      	movs	r7, #0
   1dbc4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1dc54 <_scanf_chars+0xb0>
   1dbc8:	06d1      	lsls	r1, r2, #27
   1dbca:	bf5f      	itttt	pl
   1dbcc:	681a      	ldrpl	r2, [r3, #0]
   1dbce:	1d11      	addpl	r1, r2, #4
   1dbd0:	6019      	strpl	r1, [r3, #0]
   1dbd2:	6816      	ldrpl	r6, [r2, #0]
   1dbd4:	69a0      	ldr	r0, [r4, #24]
   1dbd6:	b188      	cbz	r0, 1dbfc <_scanf_chars+0x58>
   1dbd8:	2801      	cmp	r0, #1
   1dbda:	d107      	bne.n	1dbec <_scanf_chars+0x48>
   1dbdc:	682b      	ldr	r3, [r5, #0]
   1dbde:	781a      	ldrb	r2, [r3, #0]
   1dbe0:	6963      	ldr	r3, [r4, #20]
   1dbe2:	5c9b      	ldrb	r3, [r3, r2]
   1dbe4:	b953      	cbnz	r3, 1dbfc <_scanf_chars+0x58>
   1dbe6:	2f00      	cmp	r7, #0
   1dbe8:	d031      	beq.n	1dc4e <_scanf_chars+0xaa>
   1dbea:	e022      	b.n	1dc32 <_scanf_chars+0x8e>
   1dbec:	2802      	cmp	r0, #2
   1dbee:	d120      	bne.n	1dc32 <_scanf_chars+0x8e>
   1dbf0:	682b      	ldr	r3, [r5, #0]
   1dbf2:	781b      	ldrb	r3, [r3, #0]
   1dbf4:	f819 3003 	ldrb.w	r3, [r9, r3]
   1dbf8:	071b      	lsls	r3, r3, #28
   1dbfa:	d41a      	bmi.n	1dc32 <_scanf_chars+0x8e>
   1dbfc:	6823      	ldr	r3, [r4, #0]
   1dbfe:	3701      	adds	r7, #1
   1dc00:	06da      	lsls	r2, r3, #27
   1dc02:	bf5e      	ittt	pl
   1dc04:	682b      	ldrpl	r3, [r5, #0]
   1dc06:	781b      	ldrbpl	r3, [r3, #0]
   1dc08:	f806 3b01 	strbpl.w	r3, [r6], #1
   1dc0c:	682a      	ldr	r2, [r5, #0]
   1dc0e:	686b      	ldr	r3, [r5, #4]
   1dc10:	3201      	adds	r2, #1
   1dc12:	3b01      	subs	r3, #1
   1dc14:	602a      	str	r2, [r5, #0]
   1dc16:	68a2      	ldr	r2, [r4, #8]
   1dc18:	606b      	str	r3, [r5, #4]
   1dc1a:	3a01      	subs	r2, #1
   1dc1c:	60a2      	str	r2, [r4, #8]
   1dc1e:	b142      	cbz	r2, 1dc32 <_scanf_chars+0x8e>
   1dc20:	2b00      	cmp	r3, #0
   1dc22:	dcd7      	bgt.n	1dbd4 <_scanf_chars+0x30>
   1dc24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   1dc28:	4629      	mov	r1, r5
   1dc2a:	4640      	mov	r0, r8
   1dc2c:	4798      	blx	r3
   1dc2e:	2800      	cmp	r0, #0
   1dc30:	d0d0      	beq.n	1dbd4 <_scanf_chars+0x30>
   1dc32:	6823      	ldr	r3, [r4, #0]
   1dc34:	f013 0310 	ands.w	r3, r3, #16
   1dc38:	d105      	bne.n	1dc46 <_scanf_chars+0xa2>
   1dc3a:	68e2      	ldr	r2, [r4, #12]
   1dc3c:	3201      	adds	r2, #1
   1dc3e:	60e2      	str	r2, [r4, #12]
   1dc40:	69a2      	ldr	r2, [r4, #24]
   1dc42:	b102      	cbz	r2, 1dc46 <_scanf_chars+0xa2>
   1dc44:	7033      	strb	r3, [r6, #0]
   1dc46:	6923      	ldr	r3, [r4, #16]
   1dc48:	2000      	movs	r0, #0
   1dc4a:	443b      	add	r3, r7
   1dc4c:	6123      	str	r3, [r4, #16]
   1dc4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1dc52:	bf00      	nop
   1dc54:	00027ac8 	.word	0x00027ac8

0001dc58 <_scanf_i>:
   1dc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc5c:	4698      	mov	r8, r3
   1dc5e:	b087      	sub	sp, #28
   1dc60:	4b78      	ldr	r3, [pc, #480]	; (1de44 <_scanf_i+0x1ec>)
   1dc62:	460c      	mov	r4, r1
   1dc64:	4682      	mov	sl, r0
   1dc66:	4616      	mov	r6, r2
   1dc68:	4627      	mov	r7, r4
   1dc6a:	f04f 0b00 	mov.w	fp, #0
   1dc6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1dc72:	ab03      	add	r3, sp, #12
   1dc74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   1dc78:	4b73      	ldr	r3, [pc, #460]	; (1de48 <_scanf_i+0x1f0>)
   1dc7a:	69a1      	ldr	r1, [r4, #24]
   1dc7c:	4a73      	ldr	r2, [pc, #460]	; (1de4c <_scanf_i+0x1f4>)
   1dc7e:	2903      	cmp	r1, #3
   1dc80:	bf08      	it	eq
   1dc82:	461a      	moveq	r2, r3
   1dc84:	68a3      	ldr	r3, [r4, #8]
   1dc86:	9201      	str	r2, [sp, #4]
   1dc88:	1e5a      	subs	r2, r3, #1
   1dc8a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   1dc8e:	bf89      	itett	hi
   1dc90:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   1dc94:	f04f 0900 	movls.w	r9, #0
   1dc98:	eb03 0905 	addhi.w	r9, r3, r5
   1dc9c:	f240 135d 	movwhi	r3, #349	; 0x15d
   1dca0:	bf88      	it	hi
   1dca2:	60a3      	strhi	r3, [r4, #8]
   1dca4:	f857 3b1c 	ldr.w	r3, [r7], #28
   1dca8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   1dcac:	463d      	mov	r5, r7
   1dcae:	6023      	str	r3, [r4, #0]
   1dcb0:	6831      	ldr	r1, [r6, #0]
   1dcb2:	ab03      	add	r3, sp, #12
   1dcb4:	2202      	movs	r2, #2
   1dcb6:	7809      	ldrb	r1, [r1, #0]
   1dcb8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   1dcbc:	f003 ffbe 	bl	21c3c <memchr>
   1dcc0:	2800      	cmp	r0, #0
   1dcc2:	d040      	beq.n	1dd46 <_scanf_i+0xee>
   1dcc4:	f1bb 0f01 	cmp.w	fp, #1
   1dcc8:	d112      	bne.n	1dcf0 <_scanf_i+0x98>
   1dcca:	6862      	ldr	r2, [r4, #4]
   1dccc:	b92a      	cbnz	r2, 1dcda <_scanf_i+0x82>
   1dcce:	6822      	ldr	r2, [r4, #0]
   1dcd0:	2108      	movs	r1, #8
   1dcd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   1dcd6:	6061      	str	r1, [r4, #4]
   1dcd8:	6022      	str	r2, [r4, #0]
   1dcda:	6822      	ldr	r2, [r4, #0]
   1dcdc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   1dce0:	6022      	str	r2, [r4, #0]
   1dce2:	68a2      	ldr	r2, [r4, #8]
   1dce4:	1e51      	subs	r1, r2, #1
   1dce6:	60a1      	str	r1, [r4, #8]
   1dce8:	b9da      	cbnz	r2, 1dd22 <_scanf_i+0xca>
   1dcea:	f04f 0b02 	mov.w	fp, #2
   1dcee:	e7df      	b.n	1dcb0 <_scanf_i+0x58>
   1dcf0:	f1bb 0f02 	cmp.w	fp, #2
   1dcf4:	d006      	beq.n	1dd04 <_scanf_i+0xac>
   1dcf6:	68a2      	ldr	r2, [r4, #8]
   1dcf8:	1e51      	subs	r1, r2, #1
   1dcfa:	60a1      	str	r1, [r4, #8]
   1dcfc:	b98a      	cbnz	r2, 1dd22 <_scanf_i+0xca>
   1dcfe:	f04f 0b01 	mov.w	fp, #1
   1dd02:	e7d5      	b.n	1dcb0 <_scanf_i+0x58>
   1dd04:	6822      	ldr	r2, [r4, #0]
   1dd06:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   1dd0a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1dd0e:	d11f      	bne.n	1dd50 <_scanf_i+0xf8>
   1dd10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1dd14:	2110      	movs	r1, #16
   1dd16:	6022      	str	r2, [r4, #0]
   1dd18:	68a2      	ldr	r2, [r4, #8]
   1dd1a:	6061      	str	r1, [r4, #4]
   1dd1c:	1e51      	subs	r1, r2, #1
   1dd1e:	60a1      	str	r1, [r4, #8]
   1dd20:	b1b2      	cbz	r2, 1dd50 <_scanf_i+0xf8>
   1dd22:	6832      	ldr	r2, [r6, #0]
   1dd24:	1c51      	adds	r1, r2, #1
   1dd26:	6031      	str	r1, [r6, #0]
   1dd28:	7812      	ldrb	r2, [r2, #0]
   1dd2a:	f805 2b01 	strb.w	r2, [r5], #1
   1dd2e:	6872      	ldr	r2, [r6, #4]
   1dd30:	3a01      	subs	r2, #1
   1dd32:	2a00      	cmp	r2, #0
   1dd34:	6072      	str	r2, [r6, #4]
   1dd36:	dc06      	bgt.n	1dd46 <_scanf_i+0xee>
   1dd38:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   1dd3c:	4631      	mov	r1, r6
   1dd3e:	4650      	mov	r0, sl
   1dd40:	4790      	blx	r2
   1dd42:	2800      	cmp	r0, #0
   1dd44:	d174      	bne.n	1de30 <_scanf_i+0x1d8>
   1dd46:	f10b 0b01 	add.w	fp, fp, #1
   1dd4a:	f1bb 0f03 	cmp.w	fp, #3
   1dd4e:	d1af      	bne.n	1dcb0 <_scanf_i+0x58>
   1dd50:	6863      	ldr	r3, [r4, #4]
   1dd52:	b90b      	cbnz	r3, 1dd58 <_scanf_i+0x100>
   1dd54:	230a      	movs	r3, #10
   1dd56:	6063      	str	r3, [r4, #4]
   1dd58:	6863      	ldr	r3, [r4, #4]
   1dd5a:	f04f 0b00 	mov.w	fp, #0
   1dd5e:	493c      	ldr	r1, [pc, #240]	; (1de50 <_scanf_i+0x1f8>)
   1dd60:	6960      	ldr	r0, [r4, #20]
   1dd62:	1ac9      	subs	r1, r1, r3
   1dd64:	f004 fe5e 	bl	22a24 <__sccl>
   1dd68:	68a3      	ldr	r3, [r4, #8]
   1dd6a:	6822      	ldr	r2, [r4, #0]
   1dd6c:	b373      	cbz	r3, 1ddcc <_scanf_i+0x174>
   1dd6e:	6831      	ldr	r1, [r6, #0]
   1dd70:	6960      	ldr	r0, [r4, #20]
   1dd72:	f891 c000 	ldrb.w	ip, [r1]
   1dd76:	f810 000c 	ldrb.w	r0, [r0, ip]
   1dd7a:	b338      	cbz	r0, 1ddcc <_scanf_i+0x174>
   1dd7c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   1dd80:	d116      	bne.n	1ddb0 <_scanf_i+0x158>
   1dd82:	0510      	lsls	r0, r2, #20
   1dd84:	d514      	bpl.n	1ddb0 <_scanf_i+0x158>
   1dd86:	f10b 0b01 	add.w	fp, fp, #1
   1dd8a:	f1b9 0f00 	cmp.w	r9, #0
   1dd8e:	d003      	beq.n	1dd98 <_scanf_i+0x140>
   1dd90:	3301      	adds	r3, #1
   1dd92:	f109 39ff 	add.w	r9, r9, #4294967295
   1dd96:	60a3      	str	r3, [r4, #8]
   1dd98:	6873      	ldr	r3, [r6, #4]
   1dd9a:	3b01      	subs	r3, #1
   1dd9c:	2b00      	cmp	r3, #0
   1dd9e:	6073      	str	r3, [r6, #4]
   1dda0:	dd0d      	ble.n	1ddbe <_scanf_i+0x166>
   1dda2:	6833      	ldr	r3, [r6, #0]
   1dda4:	3301      	adds	r3, #1
   1dda6:	6033      	str	r3, [r6, #0]
   1dda8:	68a3      	ldr	r3, [r4, #8]
   1ddaa:	3b01      	subs	r3, #1
   1ddac:	60a3      	str	r3, [r4, #8]
   1ddae:	e7db      	b.n	1dd68 <_scanf_i+0x110>
   1ddb0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   1ddb4:	6022      	str	r2, [r4, #0]
   1ddb6:	780b      	ldrb	r3, [r1, #0]
   1ddb8:	f805 3b01 	strb.w	r3, [r5], #1
   1ddbc:	e7ec      	b.n	1dd98 <_scanf_i+0x140>
   1ddbe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   1ddc2:	4631      	mov	r1, r6
   1ddc4:	4650      	mov	r0, sl
   1ddc6:	4798      	blx	r3
   1ddc8:	2800      	cmp	r0, #0
   1ddca:	d0ed      	beq.n	1dda8 <_scanf_i+0x150>
   1ddcc:	6823      	ldr	r3, [r4, #0]
   1ddce:	05d9      	lsls	r1, r3, #23
   1ddd0:	d50d      	bpl.n	1ddee <_scanf_i+0x196>
   1ddd2:	42bd      	cmp	r5, r7
   1ddd4:	d909      	bls.n	1ddea <_scanf_i+0x192>
   1ddd6:	f105 39ff 	add.w	r9, r5, #4294967295
   1ddda:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1ddde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   1dde2:	4632      	mov	r2, r6
   1dde4:	464d      	mov	r5, r9
   1dde6:	4650      	mov	r0, sl
   1dde8:	4798      	blx	r3
   1ddea:	42bd      	cmp	r5, r7
   1ddec:	d028      	beq.n	1de40 <_scanf_i+0x1e8>
   1ddee:	6822      	ldr	r2, [r4, #0]
   1ddf0:	f012 0210 	ands.w	r2, r2, #16
   1ddf4:	d113      	bne.n	1de1e <_scanf_i+0x1c6>
   1ddf6:	702a      	strb	r2, [r5, #0]
   1ddf8:	4639      	mov	r1, r7
   1ddfa:	6863      	ldr	r3, [r4, #4]
   1ddfc:	4650      	mov	r0, sl
   1ddfe:	9e01      	ldr	r6, [sp, #4]
   1de00:	47b0      	blx	r6
   1de02:	f8d8 3000 	ldr.w	r3, [r8]
   1de06:	6821      	ldr	r1, [r4, #0]
   1de08:	1d1a      	adds	r2, r3, #4
   1de0a:	f011 0f20 	tst.w	r1, #32
   1de0e:	f8c8 2000 	str.w	r2, [r8]
   1de12:	681b      	ldr	r3, [r3, #0]
   1de14:	d00f      	beq.n	1de36 <_scanf_i+0x1de>
   1de16:	6018      	str	r0, [r3, #0]
   1de18:	68e3      	ldr	r3, [r4, #12]
   1de1a:	3301      	adds	r3, #1
   1de1c:	60e3      	str	r3, [r4, #12]
   1de1e:	1bed      	subs	r5, r5, r7
   1de20:	6923      	ldr	r3, [r4, #16]
   1de22:	2000      	movs	r0, #0
   1de24:	445d      	add	r5, fp
   1de26:	442b      	add	r3, r5
   1de28:	6123      	str	r3, [r4, #16]
   1de2a:	b007      	add	sp, #28
   1de2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de30:	f04f 0b00 	mov.w	fp, #0
   1de34:	e7ca      	b.n	1ddcc <_scanf_i+0x174>
   1de36:	07ca      	lsls	r2, r1, #31
   1de38:	bf4c      	ite	mi
   1de3a:	8018      	strhmi	r0, [r3, #0]
   1de3c:	6018      	strpl	r0, [r3, #0]
   1de3e:	e7eb      	b.n	1de18 <_scanf_i+0x1c0>
   1de40:	2001      	movs	r0, #1
   1de42:	e7f2      	b.n	1de2a <_scanf_i+0x1d2>
   1de44:	000230b8 	.word	0x000230b8
   1de48:	000220a3 	.word	0x000220a3
   1de4c:	000220a7 	.word	0x000220a7
   1de50:	00027db7 	.word	0x00027db7

0001de54 <_read_r>:
   1de54:	b538      	push	{r3, r4, r5, lr}
   1de56:	4604      	mov	r4, r0
   1de58:	4d06      	ldr	r5, [pc, #24]	; (1de74 <_read_r+0x20>)
   1de5a:	4608      	mov	r0, r1
   1de5c:	4611      	mov	r1, r2
   1de5e:	2200      	movs	r2, #0
   1de60:	602a      	str	r2, [r5, #0]
   1de62:	461a      	mov	r2, r3
   1de64:	f000 feef 	bl	1ec46 <_read>
   1de68:	1c43      	adds	r3, r0, #1
   1de6a:	d102      	bne.n	1de72 <_read_r+0x1e>
   1de6c:	682b      	ldr	r3, [r5, #0]
   1de6e:	b103      	cbz	r3, 1de72 <_read_r+0x1e>
   1de70:	6023      	str	r3, [r4, #0]
   1de72:	bd38      	pop	{r3, r4, r5, pc}
   1de74:	2000e348 	.word	0x2000e348

0001de78 <__assert_func>:
   1de78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1de7a:	4614      	mov	r4, r2
   1de7c:	461a      	mov	r2, r3
   1de7e:	4b09      	ldr	r3, [pc, #36]	; (1dea4 <__assert_func+0x2c>)
   1de80:	4605      	mov	r5, r0
   1de82:	681b      	ldr	r3, [r3, #0]
   1de84:	68d8      	ldr	r0, [r3, #12]
   1de86:	b954      	cbnz	r4, 1de9e <__assert_func+0x26>
   1de88:	4b07      	ldr	r3, [pc, #28]	; (1dea8 <__assert_func+0x30>)
   1de8a:	461c      	mov	r4, r3
   1de8c:	9100      	str	r1, [sp, #0]
   1de8e:	4907      	ldr	r1, [pc, #28]	; (1deac <__assert_func+0x34>)
   1de90:	e9cd 3401 	strd	r3, r4, [sp, #4]
   1de94:	462b      	mov	r3, r5
   1de96:	f000 f80d 	bl	1deb4 <fiprintf>
   1de9a:	f004 fe48 	bl	22b2e <abort>
   1de9e:	4b04      	ldr	r3, [pc, #16]	; (1deb0 <__assert_func+0x38>)
   1dea0:	e7f4      	b.n	1de8c <__assert_func+0x14>
   1dea2:	bf00      	nop
   1dea4:	2000c6f0 	.word	0x2000c6f0
   1dea8:	0002756e 	.word	0x0002756e
   1deac:	00027dcc 	.word	0x00027dcc
   1deb0:	00027dbf 	.word	0x00027dbf

0001deb4 <fiprintf>:
   1deb4:	b40e      	push	{r1, r2, r3}
   1deb6:	b503      	push	{r0, r1, lr}
   1deb8:	ab03      	add	r3, sp, #12
   1deba:	4601      	mov	r1, r0
   1debc:	4805      	ldr	r0, [pc, #20]	; (1ded4 <fiprintf+0x20>)
   1debe:	f853 2b04 	ldr.w	r2, [r3], #4
   1dec2:	6800      	ldr	r0, [r0, #0]
   1dec4:	9301      	str	r3, [sp, #4]
   1dec6:	f7ff fd41 	bl	1d94c <_vfiprintf_r>
   1deca:	b002      	add	sp, #8
   1decc:	f85d eb04 	ldr.w	lr, [sp], #4
   1ded0:	b003      	add	sp, #12
   1ded2:	4770      	bx	lr
   1ded4:	2000c6f0 	.word	0x2000c6f0

0001ded8 <_fstat_r>:
   1ded8:	b538      	push	{r3, r4, r5, lr}
   1deda:	2300      	movs	r3, #0
   1dedc:	4d06      	ldr	r5, [pc, #24]	; (1def8 <_fstat_r+0x20>)
   1dede:	4604      	mov	r4, r0
   1dee0:	4608      	mov	r0, r1
   1dee2:	4611      	mov	r1, r2
   1dee4:	602b      	str	r3, [r5, #0]
   1dee6:	f000 fec4 	bl	1ec72 <_fstat>
   1deea:	1c43      	adds	r3, r0, #1
   1deec:	d102      	bne.n	1def4 <_fstat_r+0x1c>
   1deee:	682b      	ldr	r3, [r5, #0]
   1def0:	b103      	cbz	r3, 1def4 <_fstat_r+0x1c>
   1def2:	6023      	str	r3, [r4, #0]
   1def4:	bd38      	pop	{r3, r4, r5, pc}
   1def6:	bf00      	nop
   1def8:	2000e348 	.word	0x2000e348

0001defc <_isatty_r>:
   1defc:	b538      	push	{r3, r4, r5, lr}
   1defe:	2300      	movs	r3, #0
   1df00:	4d05      	ldr	r5, [pc, #20]	; (1df18 <_isatty_r+0x1c>)
   1df02:	4604      	mov	r4, r0
   1df04:	4608      	mov	r0, r1
   1df06:	602b      	str	r3, [r5, #0]
   1df08:	f000 feaa 	bl	1ec60 <_isatty>
   1df0c:	1c43      	adds	r3, r0, #1
   1df0e:	d102      	bne.n	1df16 <_isatty_r+0x1a>
   1df10:	682b      	ldr	r3, [r5, #0]
   1df12:	b103      	cbz	r3, 1df16 <_isatty_r+0x1a>
   1df14:	6023      	str	r3, [r4, #0]
   1df16:	bd38      	pop	{r3, r4, r5, pc}
   1df18:	2000e348 	.word	0x2000e348

0001df1c <raise>:
   1df1c:	4b02      	ldr	r3, [pc, #8]	; (1df28 <raise+0xc>)
   1df1e:	4601      	mov	r1, r0
   1df20:	6818      	ldr	r0, [r3, #0]
   1df22:	f004 be0b 	b.w	22b3c <_raise_r>
   1df26:	bf00      	nop
   1df28:	2000c6f0 	.word	0x2000c6f0

0001df2c <_kill_r>:
   1df2c:	b538      	push	{r3, r4, r5, lr}
   1df2e:	2300      	movs	r3, #0
   1df30:	4d06      	ldr	r5, [pc, #24]	; (1df4c <_kill_r+0x20>)
   1df32:	4604      	mov	r4, r0
   1df34:	4608      	mov	r0, r1
   1df36:	4611      	mov	r1, r2
   1df38:	602b      	str	r3, [r5, #0]
   1df3a:	f000 fe96 	bl	1ec6a <_kill>
   1df3e:	1c43      	adds	r3, r0, #1
   1df40:	d102      	bne.n	1df48 <_kill_r+0x1c>
   1df42:	682b      	ldr	r3, [r5, #0]
   1df44:	b103      	cbz	r3, 1df48 <_kill_r+0x1c>
   1df46:	6023      	str	r3, [r4, #0]
   1df48:	bd38      	pop	{r3, r4, r5, pc}
   1df4a:	bf00      	nop
   1df4c:	2000e348 	.word	0x2000e348

0001df50 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   1df50:	4601      	mov	r1, r0
   1df52:	f240 30e7 	movw	r0, #999	; 0x3e7
   1df56:	b508      	push	{r3, lr}
   1df58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1df5c:	2300      	movs	r3, #0
   1df5e:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   1df62:	1449      	asrs	r1, r1, #17
   1df64:	f7ea fe44 	bl	8bf0 <__aeabi_uldivmod>
}
   1df68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   1df6c:	f7fd b84e 	b.w	1b00c <z_impl_k_sleep>

0001df70 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1df70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1df72:	ab0b      	add	r3, sp, #44	; 0x2c
   1df74:	9305      	str	r3, [sp, #20]
   1df76:	9303      	str	r3, [sp, #12]
   1df78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1df7a:	9302      	str	r3, [sp, #8]
   1df7c:	2300      	movs	r3, #0
   1df7e:	4618      	mov	r0, r3
   1df80:	e9cd 3300 	strd	r3, r3, [sp]
   1df84:	f7ef f82a 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   1df88:	b007      	add	sp, #28
   1df8a:	f85d fb04 	ldr.w	pc, [sp], #4

0001df8e <assistance_init>:
}
   1df8e:	2000      	movs	r0, #0
   1df90:	4770      	bx	lr

0001df92 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
   1df92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1df96:	4606      	mov	r6, r0
   1df98:	460d      	mov	r5, r1
   1df9a:	4617      	mov	r7, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
   1df9c:	4698      	mov	r8, r3
   1df9e:	b32b      	cbz	r3, 1dfec <cbpprintf_external+0x5a>
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   1dfa0:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   1dfa4:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   1dfa8:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1dfac:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   1dfae:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1dfb0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   1dfb4:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1dfb8:	441c      	add	r4, r3
   1dfba:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   1dfbc:	45ca      	cmp	sl, r9
   1dfbe:	d309      	bcc.n	1dfd4 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   1dfc0:	4639      	mov	r1, r7
   1dfc2:	4630      	mov	r0, r6
   1dfc4:	46ac      	mov	ip, r5
   1dfc6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1dfca:	f108 0308 	add.w	r3, r8, #8
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
   1dfce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   1dfd2:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   1dfd4:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   1dfd8:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   1dfdc:	4620      	mov	r0, r4
		*ps = s;
   1dfde:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   1dfe2:	f7ea ffac 	bl	8f3e <strlen>
   1dfe6:	3001      	adds	r0, #1
   1dfe8:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   1dfea:	e7e7      	b.n	1dfbc <cbpprintf_external+0x2a>
}
   1dfec:	f06f 0015 	mvn.w	r0, #21
   1dff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001dff4 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   1dff4:	b40c      	push	{r2, r3}
   1dff6:	4603      	mov	r3, r0
   1dff8:	b507      	push	{r0, r1, r2, lr}
   1dffa:	4608      	mov	r0, r1
				       unsigned long request, ...)
{
	va_list args;
	int res;

	va_start(args, request);
   1dffc:	aa05      	add	r2, sp, #20
	res = vtable->ioctl(obj, request, args);
   1dffe:	f240 1105 	movw	r1, #261	; 0x105
   1e002:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   1e004:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   1e006:	4798      	blx	r3
	va_end(args);

	return res;
}
   1e008:	b003      	add	sp, #12
   1e00a:	f85d eb04 	ldr.w	lr, [sp], #4
   1e00e:	b002      	add	sp, #8
   1e010:	4770      	bx	lr

0001e012 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1e012:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1e016:	b2db      	uxtb	r3, r3
   1e018:	2b09      	cmp	r3, #9
   1e01a:	d802      	bhi.n	1e022 <char2hex+0x10>
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1e01c:	2000      	movs	r0, #0
		*x = c - '0';
   1e01e:	700b      	strb	r3, [r1, #0]
   1e020:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1e022:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1e026:	2b05      	cmp	r3, #5
   1e028:	d802      	bhi.n	1e030 <char2hex+0x1e>
		*x = c - 'a' + 10;
   1e02a:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   1e02c:	b2c3      	uxtb	r3, r0
   1e02e:	e7f5      	b.n	1e01c <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   1e030:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1e034:	2b05      	cmp	r3, #5
   1e036:	d801      	bhi.n	1e03c <char2hex+0x2a>
		*x = c - 'A' + 10;
   1e038:	3837      	subs	r0, #55	; 0x37
   1e03a:	e7f7      	b.n	1e02c <char2hex+0x1a>
		return -EINVAL;
   1e03c:	f06f 0015 	mvn.w	r0, #21
}
   1e040:	4770      	bx	lr

0001e042 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   1e042:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e044:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1e046:	f001 0001 	and.w	r0, r1, #1
   1e04a:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   1e04e:	429e      	cmp	r6, r3
   1e050:	ea4f 0751 	mov.w	r7, r1, lsr #1
   1e054:	d903      	bls.n	1e05e <hex2bin+0x1c>
		return 0;
   1e056:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   1e058:	4630      	mov	r0, r6
   1e05a:	b003      	add	sp, #12
   1e05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   1e05e:	b158      	cbz	r0, 1e078 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1e060:	7828      	ldrb	r0, [r5, #0]
   1e062:	f10d 0107 	add.w	r1, sp, #7
   1e066:	f7ff ffd4 	bl	1e012 <char2hex>
   1e06a:	2800      	cmp	r0, #0
   1e06c:	dbf3      	blt.n	1e056 <hex2bin+0x14>
		buf[0] = dec;
   1e06e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   1e072:	3501      	adds	r5, #1
		buf[0] = dec;
   1e074:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1e078:	3501      	adds	r5, #1
   1e07a:	4417      	add	r7, r2
   1e07c:	42ba      	cmp	r2, r7
   1e07e:	d0eb      	beq.n	1e058 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1e080:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1e084:	f10d 0107 	add.w	r1, sp, #7
   1e088:	f7ff ffc3 	bl	1e012 <char2hex>
   1e08c:	2800      	cmp	r0, #0
   1e08e:	dbe2      	blt.n	1e056 <hex2bin+0x14>
		buf[i] = dec << 4;
   1e090:	f89d 4007 	ldrb.w	r4, [sp, #7]
   1e094:	0124      	lsls	r4, r4, #4
   1e096:	b2e4      	uxtb	r4, r4
   1e098:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   1e09a:	f815 0b02 	ldrb.w	r0, [r5], #2
   1e09e:	f7ff ffb8 	bl	1e012 <char2hex>
   1e0a2:	2800      	cmp	r0, #0
   1e0a4:	dbd7      	blt.n	1e056 <hex2bin+0x14>
		buf[i] += dec;
   1e0a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e0aa:	441c      	add	r4, r3
   1e0ac:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1e0b0:	e7e4      	b.n	1e07c <hex2bin+0x3a>

0001e0b2 <arch_printk_char_out>:
}
   1e0b2:	2000      	movs	r0, #0
   1e0b4:	4770      	bx	lr

0001e0b6 <str_out>:
{
   1e0b6:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1e0b8:	688a      	ldr	r2, [r1, #8]
   1e0ba:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1e0bc:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1e0be:	b114      	cbz	r4, 1e0c6 <str_out+0x10>
   1e0c0:	684b      	ldr	r3, [r1, #4]
   1e0c2:	4293      	cmp	r3, r2
   1e0c4:	dc01      	bgt.n	1e0ca <str_out+0x14>
		ctx->count++;
   1e0c6:	608d      	str	r5, [r1, #8]
}
   1e0c8:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1e0ca:	3b01      	subs	r3, #1
   1e0cc:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1e0ce:	bf08      	it	eq
   1e0d0:	2200      	moveq	r2, #0
   1e0d2:	608d      	str	r5, [r1, #8]
   1e0d4:	bf0c      	ite	eq
   1e0d6:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1e0d8:	54a0      	strbne	r0, [r4, r2]
   1e0da:	e7f5      	b.n	1e0c8 <str_out+0x12>

0001e0dc <printk>:
{
   1e0dc:	b40f      	push	{r0, r1, r2, r3}
   1e0de:	b507      	push	{r0, r1, r2, lr}
   1e0e0:	a904      	add	r1, sp, #16
   1e0e2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1e0e6:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   1e0e8:	f000 fb3c 	bl	1e764 <z_log_vprintk>
}
   1e0ec:	b003      	add	sp, #12
   1e0ee:	f85d eb04 	ldr.w	lr, [sp], #4
   1e0f2:	b004      	add	sp, #16
   1e0f4:	4770      	bx	lr

0001e0f6 <snprintk>:
{
   1e0f6:	b40c      	push	{r2, r3}
   1e0f8:	b507      	push	{r0, r1, r2, lr}
   1e0fa:	ab04      	add	r3, sp, #16
   1e0fc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1e100:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1e102:	f7ee fc4f 	bl	c9a4 <vsnprintk>
}
   1e106:	b003      	add	sp, #12
   1e108:	f85d eb04 	ldr.w	lr, [sp], #4
   1e10c:	b002      	add	sp, #8
   1e10e:	4770      	bx	lr

0001e110 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1e110:	4604      	mov	r4, r0
   1e112:	b508      	push	{r3, lr}
   1e114:	4608      	mov	r0, r1
   1e116:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1e118:	461a      	mov	r2, r3
   1e11a:	47a0      	blx	r4
	return z_impl_z_current_get();
   1e11c:	f7fc ff90 	bl	1b040 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1e120:	f7f0 f8fe 	bl	e320 <z_impl_k_thread_abort>

0001e124 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1e124:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1e128:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1e12a:	0840      	lsrs	r0, r0, #1
   1e12c:	4770      	bx	lr

0001e12e <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1e12e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e130:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1e132:	f7ff fff7 	bl	1e124 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1e136:	fab0 f080 	clz	r0, r0
   1e13a:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1e13e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   1e142:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   1e146:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   1e148:	1d17      	adds	r7, r2, #4
{
   1e14a:	460c      	mov	r4, r1
   1e14c:	3206      	adds	r2, #6
   1e14e:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   1e150:	b956      	cbnz	r6, 1e168 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1e152:	2101      	movs	r1, #1
   1e154:	fa01 f000 	lsl.w	r0, r1, r0
   1e158:	68d9      	ldr	r1, [r3, #12]
   1e15a:	4301      	orrs	r1, r0
   1e15c:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1e15e:	f8cc 4010 	str.w	r4, [ip, #16]
   1e162:	53dd      	strh	r5, [r3, r7]
   1e164:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   1e166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1e168:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1e16a:	3104      	adds	r1, #4
   1e16c:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1e16e:	53d8      	strh	r0, [r3, r7]
   1e170:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1e174:	529e      	strh	r6, [r3, r2]
   1e176:	80c5      	strh	r5, [r0, #6]
   1e178:	525d      	strh	r5, [r3, r1]
   1e17a:	e7f4      	b.n	1e166 <free_list_add+0x38>

0001e17c <free_list_remove_bidx>:
{
   1e17c:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1e17e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1e182:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1e184:	4299      	cmp	r1, r3
   1e186:	f102 0104 	add.w	r1, r2, #4
   1e18a:	d10a      	bne.n	1e1a2 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1e18c:	2301      	movs	r3, #1
   1e18e:	fa03 f202 	lsl.w	r2, r3, r2
   1e192:	68c3      	ldr	r3, [r0, #12]
   1e194:	ea23 0302 	bic.w	r3, r3, r2
   1e198:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1e19a:	2300      	movs	r3, #0
   1e19c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1e1a0:	bd10      	pop	{r4, pc}
   1e1a2:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1e1a4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1e1a8:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1e1ac:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1e1b0:	80cb      	strh	r3, [r1, #6]
   1e1b2:	8082      	strh	r2, [r0, #4]
}
   1e1b4:	e7f4      	b.n	1e1a0 <free_list_remove_bidx+0x24>

0001e1b6 <free_list_remove>:
{
   1e1b6:	b508      	push	{r3, lr}
   1e1b8:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1e1ba:	f7ff ffb3 	bl	1e124 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1e1be:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1e1c2:	4618      	mov	r0, r3
}
   1e1c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   1e1c8:	f1c2 021f 	rsb	r2, r2, #31
   1e1cc:	f7ff bfd6 	b.w	1e17c <free_list_remove_bidx>

0001e1d0 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1e1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e1d4:	fab1 f581 	clz	r5, r1
   1e1d8:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1e1dc:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   1e1e0:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   1e1e4:	4603      	mov	r3, r0
   1e1e6:	460e      	mov	r6, r1
	if (b->next) {
   1e1e8:	b1c2      	cbz	r2, 1e21c <alloc_chunk+0x4c>
   1e1ea:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1e1ec:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   1e1f0:	4618      	mov	r0, r3
   1e1f2:	4621      	mov	r1, r4
   1e1f4:	f7ff ff96 	bl	1e124 <chunk_size>
   1e1f8:	42b0      	cmp	r0, r6
   1e1fa:	d306      	bcc.n	1e20a <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   1e1fc:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1e1fe:	4618      	mov	r0, r3
   1e200:	f7ff ffbc 	bl	1e17c <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1e204:	4620      	mov	r0, r4
   1e206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1e20a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1e20e:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   1e210:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1e212:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   1e216:	d001      	beq.n	1e21c <alloc_chunk+0x4c>
   1e218:	4282      	cmp	r2, r0
   1e21a:	d1e7      	bne.n	1e1ec <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1e21c:	f04f 34ff 	mov.w	r4, #4294967295
   1e220:	f1c5 0220 	rsb	r2, r5, #32
   1e224:	4094      	lsls	r4, r2
   1e226:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1e228:	4014      	ands	r4, r2
   1e22a:	d0eb      	beq.n	1e204 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1e22c:	fa94 f2a4 	rbit	r2, r4
   1e230:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1e234:	1d11      	adds	r1, r2, #4
   1e236:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1e23a:	4621      	mov	r1, r4
   1e23c:	e7df      	b.n	1e1fe <alloc_chunk+0x2e>

0001e23e <merge_chunks>:
{
   1e23e:	b538      	push	{r3, r4, r5, lr}
   1e240:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1e242:	f7ff ff6f 	bl	1e124 <chunk_size>
{
   1e246:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1e248:	4604      	mov	r4, r0
   1e24a:	4611      	mov	r1, r2
   1e24c:	4618      	mov	r0, r3
   1e24e:	f7ff ff69 	bl	1e124 <chunk_size>
   1e252:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e254:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1e256:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1e25a:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1e25c:	4618      	mov	r0, r3
   1e25e:	f7ff ff61 	bl	1e124 <chunk_size>
	void *cmem = &buf[c];
   1e262:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1e264:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1e268:	bd38      	pop	{r3, r4, r5, pc}

0001e26a <split_chunks>:
{
   1e26a:	b538      	push	{r3, r4, r5, lr}
   1e26c:	460c      	mov	r4, r1
   1e26e:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1e270:	f7ff ff58 	bl	1e124 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   1e274:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   1e276:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1e278:	4405      	add	r5, r0
   1e27a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e27e:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1e280:	8060      	strh	r0, [r4, #2]
   1e282:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e286:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1e288:	8044      	strh	r4, [r0, #2]
   1e28a:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1e28e:	4618      	mov	r0, r3
   1e290:	4611      	mov	r1, r2
   1e292:	f7ff ff47 	bl	1e124 <chunk_size>
	void *cmem = &buf[c];
   1e296:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1e298:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1e29c:	bd38      	pop	{r3, r4, r5, pc}

0001e29e <free_chunk>:
{
   1e29e:	b538      	push	{r3, r4, r5, lr}
   1e2a0:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1e2a2:	f7ff ff3f 	bl	1e124 <chunk_size>
   1e2a6:	460c      	mov	r4, r1
   1e2a8:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1e2aa:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1e2ae:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1e2b0:	07da      	lsls	r2, r3, #31
   1e2b2:	d40a      	bmi.n	1e2ca <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1e2b4:	4628      	mov	r0, r5
   1e2b6:	f7ff ff7e 	bl	1e1b6 <free_list_remove>
	return c + chunk_size(h, c);
   1e2ba:	4621      	mov	r1, r4
   1e2bc:	4628      	mov	r0, r5
   1e2be:	f7ff ff31 	bl	1e124 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1e2c2:	1822      	adds	r2, r4, r0
   1e2c4:	4628      	mov	r0, r5
   1e2c6:	f7ff ffba 	bl	1e23e <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1e2ca:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1e2ce:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1e2d0:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1e2d4:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1e2d6:	07db      	lsls	r3, r3, #31
   1e2d8:	d40c      	bmi.n	1e2f4 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1e2da:	4628      	mov	r0, r5
   1e2dc:	f7ff ff6b 	bl	1e1b6 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1e2e0:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1e2e4:	4622      	mov	r2, r4
   1e2e6:	1a61      	subs	r1, r4, r1
   1e2e8:	4628      	mov	r0, r5
   1e2ea:	f7ff ffa8 	bl	1e23e <merge_chunks>
   1e2ee:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1e2f2:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1e2f4:	4621      	mov	r1, r4
   1e2f6:	4628      	mov	r0, r5
}
   1e2f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1e2fc:	f7ff bf17 	b.w	1e12e <free_list_add>

0001e300 <sys_heap_free>:
	if (mem == NULL) {
   1e300:	b161      	cbz	r1, 1e31c <sys_heap_free+0x1c>
   1e302:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e304:	3904      	subs	r1, #4
   1e306:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1e308:	f021 0307 	bic.w	r3, r1, #7
   1e30c:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1e30e:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   1e310:	08c9      	lsrs	r1, r1, #3
   1e312:	f022 0201 	bic.w	r2, r2, #1
   1e316:	805a      	strh	r2, [r3, #2]
   1e318:	f7ff bfc1 	b.w	1e29e <free_chunk>
}
   1e31c:	4770      	bx	lr

0001e31e <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1e31e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1e320:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1e322:	b909      	cbnz	r1, 1e328 <sys_heap_alloc+0xa>
		return NULL;
   1e324:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1e326:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1e328:	68ab      	ldr	r3, [r5, #8]
   1e32a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1e32e:	d9f9      	bls.n	1e324 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e330:	310b      	adds	r1, #11
   1e332:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1e334:	4621      	mov	r1, r4
   1e336:	4628      	mov	r0, r5
   1e338:	f7ff ff4a 	bl	1e1d0 <alloc_chunk>
	if (c == 0U) {
   1e33c:	4606      	mov	r6, r0
   1e33e:	2800      	cmp	r0, #0
   1e340:	d0f0      	beq.n	1e324 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1e342:	4601      	mov	r1, r0
   1e344:	4628      	mov	r0, r5
   1e346:	f7ff feed 	bl	1e124 <chunk_size>
   1e34a:	42a0      	cmp	r0, r4
   1e34c:	d907      	bls.n	1e35e <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1e34e:	4628      	mov	r0, r5
   1e350:	1932      	adds	r2, r6, r4
   1e352:	f7ff ff8a 	bl	1e26a <split_chunks>
		free_list_add(h, c + chunk_sz);
   1e356:	4611      	mov	r1, r2
   1e358:	4628      	mov	r0, r5
   1e35a:	f7ff fee8 	bl	1e12e <free_list_add>
	void *cmem = &buf[c];
   1e35e:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1e362:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e364:	8853      	ldrh	r3, [r2, #2]
   1e366:	3004      	adds	r0, #4
   1e368:	f043 0301 	orr.w	r3, r3, #1
   1e36c:	8053      	strh	r3, [r2, #2]
	return mem;
   1e36e:	e7da      	b.n	1e326 <sys_heap_alloc+0x8>

0001e370 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1e370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e374:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   1e378:	ea19 0901 	ands.w	r9, r9, r1
{
   1e37c:	460f      	mov	r7, r1
   1e37e:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   1e380:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   1e382:	d00c      	beq.n	1e39e <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   1e384:	424b      	negs	r3, r1
   1e386:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   1e388:	2b04      	cmp	r3, #4
   1e38a:	461a      	mov	r2, r3
   1e38c:	464f      	mov	r7, r9
   1e38e:	bf28      	it	cs
   1e390:	2204      	movcs	r2, #4
	rew = align & -align;
   1e392:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1e394:	b964      	cbnz	r4, 1e3b0 <sys_heap_aligned_alloc+0x40>
		return NULL;
   1e396:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1e398:	4628      	mov	r0, r5
   1e39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1e39e:	2904      	cmp	r1, #4
   1e3a0:	d804      	bhi.n	1e3ac <sys_heap_aligned_alloc+0x3c>
}
   1e3a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1e3a6:	4611      	mov	r1, r2
   1e3a8:	f7ff bfb9 	b.w	1e31e <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   1e3ac:	2204      	movs	r2, #4
   1e3ae:	e7f1      	b.n	1e394 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1e3b0:	68b3      	ldr	r3, [r6, #8]
   1e3b2:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1e3b6:	d9ee      	bls.n	1e396 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e3b8:	f104 010b 	add.w	r1, r4, #11
   1e3bc:	4439      	add	r1, r7
   1e3be:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1e3c0:	4630      	mov	r0, r6
   1e3c2:	08c9      	lsrs	r1, r1, #3
   1e3c4:	f7ff ff04 	bl	1e1d0 <alloc_chunk>
	if (c0 == 0) {
   1e3c8:	4680      	mov	r8, r0
   1e3ca:	2800      	cmp	r0, #0
   1e3cc:	d0e3      	beq.n	1e396 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1e3ce:	f109 0504 	add.w	r5, r9, #4
   1e3d2:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1e3d6:	1e7b      	subs	r3, r7, #1
   1e3d8:	4435      	add	r5, r6
   1e3da:	441d      	add	r5, r3
   1e3dc:	427f      	negs	r7, r7
   1e3de:	403d      	ands	r5, r7
   1e3e0:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1e3e4:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e3e6:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1e3e8:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e3ea:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1e3ec:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1e3f0:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1e3f2:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e3f6:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1e3fa:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1e3fe:	d208      	bcs.n	1e412 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   1e400:	4601      	mov	r1, r0
   1e402:	463a      	mov	r2, r7
   1e404:	4630      	mov	r0, r6
   1e406:	f7ff ff30 	bl	1e26a <split_chunks>
		free_list_add(h, c0);
   1e40a:	4641      	mov	r1, r8
   1e40c:	4630      	mov	r0, r6
   1e40e:	f7ff fe8e 	bl	1e12e <free_list_add>
	return c + chunk_size(h, c);
   1e412:	4639      	mov	r1, r7
   1e414:	4630      	mov	r0, r6
   1e416:	f7ff fe85 	bl	1e124 <chunk_size>
   1e41a:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1e41c:	4284      	cmp	r4, r0
   1e41e:	d207      	bcs.n	1e430 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   1e420:	4630      	mov	r0, r6
   1e422:	4622      	mov	r2, r4
   1e424:	f7ff ff21 	bl	1e26a <split_chunks>
		free_list_add(h, c_end);
   1e428:	4621      	mov	r1, r4
   1e42a:	4630      	mov	r0, r6
   1e42c:	f7ff fe7f 	bl	1e12e <free_list_add>
	void *cmem = &buf[c];
   1e430:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e434:	8873      	ldrh	r3, [r6, #2]
   1e436:	f043 0301 	orr.w	r3, r3, #1
   1e43a:	8073      	strh	r3, [r6, #2]
   1e43c:	e7ac      	b.n	1e398 <sys_heap_aligned_alloc+0x28>

0001e43e <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1e43e:	3a04      	subs	r2, #4
{
   1e440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1e444:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1e446:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1e448:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1e44c:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1e450:	1b0e      	subs	r6, r1, r4
   1e452:	08f7      	lsrs	r7, r6, #3
	return 31 - __builtin_clz(usable_sz);
   1e454:	fab7 f287 	clz	r2, r7
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1e458:	f04f 0800 	mov.w	r8, #0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1e45c:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
   1e460:	00ad      	lsls	r5, r5, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e462:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1e464:	f1c2 0220 	rsb	r2, r2, #32
   1e468:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   1e46a:	6004      	str	r4, [r0, #0]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   1e46c:	4641      	mov	r1, r8
	h->end_chunk = heap_sz;
   1e46e:	60a7      	str	r7, [r4, #8]
	h->avail_buckets = 0;
   1e470:	f8c4 800c 	str.w	r8, [r4, #12]
		h->buckets[i].next = 0;
   1e474:	0092      	lsls	r2, r2, #2
   1e476:	f104 0010 	add.w	r0, r4, #16
   1e47a:	f003 fc24 	bl	21cc6 <memset>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e47e:	006b      	lsls	r3, r5, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e480:	f043 0301 	orr.w	r3, r3, #1
   1e484:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1e486:	1b7b      	subs	r3, r7, r5
		((uint16_t *)cmem)[f] = val;
   1e488:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e48c:	0059      	lsls	r1, r3, #1
		((uint16_t *)cmem)[f] = val;
   1e48e:	f8a4 8000 	strh.w	r8, [r4]
   1e492:	8051      	strh	r1, [r2, #2]
   1e494:	19a2      	adds	r2, r4, r6
   1e496:	f824 5035 	strh.w	r5, [r4, r5, lsl #3]
   1e49a:	f8a2 8002 	strh.w	r8, [r2, #2]
   1e49e:	53a3      	strh	r3, [r4, r6]
	void *cmem = &buf[c];
   1e4a0:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e4a4:	885a      	ldrh	r2, [r3, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   1e4a6:	4629      	mov	r1, r5
   1e4a8:	f042 0201 	orr.w	r2, r2, #1
   1e4ac:	805a      	strh	r2, [r3, #2]
   1e4ae:	4620      	mov	r0, r4
}
   1e4b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
   1e4b4:	f7ff be3b 	b.w	1e12e <free_list_add>

0001e4b8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1e4b8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1e4ba:	f013 0307 	ands.w	r3, r3, #7
   1e4be:	d105      	bne.n	1e4cc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1e4c0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1e4c2:	2b00      	cmp	r3, #0
   1e4c4:	bf0c      	ite	eq
   1e4c6:	2000      	moveq	r0, #0
   1e4c8:	2003      	movne	r0, #3
   1e4ca:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1e4cc:	2b02      	cmp	r3, #2
   1e4ce:	d105      	bne.n	1e4dc <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1e4d0:	8b40      	ldrh	r0, [r0, #26]
   1e4d2:	fab0 f080 	clz	r0, r0
   1e4d6:	0940      	lsrs	r0, r0, #5
   1e4d8:	0080      	lsls	r0, r0, #2
   1e4da:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1e4dc:	2b01      	cmp	r3, #1
   1e4de:	d105      	bne.n	1e4ec <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1e4e0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1e4e2:	2b00      	cmp	r3, #0
   1e4e4:	bf0c      	ite	eq
   1e4e6:	2000      	moveq	r0, #0
   1e4e8:	2005      	movne	r0, #5
   1e4ea:	4770      	bx	lr
	int evt = EVT_NOP;
   1e4ec:	2000      	movs	r0, #0
}
   1e4ee:	4770      	bx	lr

0001e4f0 <validate_args>:
{
   1e4f0:	b510      	push	{r4, lr}
   1e4f2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1e4f4:	b100      	cbz	r0, 1e4f8 <validate_args+0x8>
   1e4f6:	b911      	cbnz	r1, 1e4fe <validate_args+0xe>
		return -EINVAL;
   1e4f8:	f06f 0015 	mvn.w	r0, #21
}
   1e4fc:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   1e4fe:	1d08      	adds	r0, r1, #4
   1e500:	f000 f896 	bl	1e630 <sys_notify_validate>
	if ((rv == 0)
   1e504:	2800      	cmp	r0, #0
   1e506:	d1f9      	bne.n	1e4fc <validate_args+0xc>
	    && ((cli->notify.flags
   1e508:	68a3      	ldr	r3, [r4, #8]
   1e50a:	2b03      	cmp	r3, #3
   1e50c:	d9f6      	bls.n	1e4fc <validate_args+0xc>
   1e50e:	e7f3      	b.n	1e4f8 <validate_args+0x8>

0001e510 <notify_one>:
{
   1e510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e514:	460d      	mov	r5, r1
   1e516:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1e518:	4619      	mov	r1, r3
   1e51a:	1d28      	adds	r0, r5, #4
{
   1e51c:	4690      	mov	r8, r2
   1e51e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1e520:	f000 f89a 	bl	1e658 <sys_notify_finalize>
	if (cb) {
   1e524:	4604      	mov	r4, r0
   1e526:	b138      	cbz	r0, 1e538 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1e528:	4633      	mov	r3, r6
   1e52a:	4642      	mov	r2, r8
   1e52c:	4629      	mov	r1, r5
   1e52e:	4638      	mov	r0, r7
   1e530:	46a4      	mov	ip, r4
}
   1e532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1e536:	4760      	bx	ip
}
   1e538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e53c <transition_complete>:
{
   1e53c:	b410      	push	{r4}
	__asm__ volatile(
   1e53e:	f04f 0420 	mov.w	r4, #32
   1e542:	f3ef 8211 	mrs	r2, BASEPRI
   1e546:	f384 8812 	msr	BASEPRI_MAX, r4
   1e54a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1e54e:	6141      	str	r1, [r0, #20]
}
   1e550:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   1e554:	2101      	movs	r1, #1
   1e556:	f7ee baaf 	b.w	cab8 <process_event>

0001e55a <onoff_manager_init>:
{
   1e55a:	b538      	push	{r3, r4, r5, lr}
   1e55c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1e55e:	4605      	mov	r5, r0
   1e560:	b158      	cbz	r0, 1e57a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1e562:	b151      	cbz	r1, 1e57a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1e564:	680b      	ldr	r3, [r1, #0]
   1e566:	b143      	cbz	r3, 1e57a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1e568:	684b      	ldr	r3, [r1, #4]
   1e56a:	b133      	cbz	r3, 1e57a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1e56c:	221c      	movs	r2, #28
   1e56e:	2100      	movs	r1, #0
   1e570:	f003 fba9 	bl	21cc6 <memset>
	return 0;
   1e574:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1e576:	612c      	str	r4, [r5, #16]
}
   1e578:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e57a:	f06f 0015 	mvn.w	r0, #21
   1e57e:	e7fb      	b.n	1e578 <onoff_manager_init+0x1e>

0001e580 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1e580:	b570      	push	{r4, r5, r6, lr}
   1e582:	4605      	mov	r5, r0
   1e584:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1e586:	f7ff ffb3 	bl	1e4f0 <validate_args>

	if (rv < 0) {
   1e58a:	1e04      	subs	r4, r0, #0
   1e58c:	db15      	blt.n	1e5ba <onoff_request+0x3a>
   1e58e:	f04f 0320 	mov.w	r3, #32
   1e592:	f3ef 8211 	mrs	r2, BASEPRI
   1e596:	f383 8812 	msr	BASEPRI_MAX, r3
   1e59a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1e59e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e5a2:	8b6b      	ldrh	r3, [r5, #26]
   1e5a4:	8b2c      	ldrh	r4, [r5, #24]
   1e5a6:	428b      	cmp	r3, r1
   1e5a8:	f004 0407 	and.w	r4, r4, #7
   1e5ac:	d107      	bne.n	1e5be <onoff_request+0x3e>
	__asm__ volatile(
   1e5ae:	f382 8811 	msr	BASEPRI, r2
   1e5b2:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   1e5b6:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1e5ba:	4620      	mov	r0, r4
   1e5bc:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   1e5be:	2c02      	cmp	r4, #2
   1e5c0:	d10c      	bne.n	1e5dc <onoff_request+0x5c>
		mgr->refs += 1U;
   1e5c2:	3301      	adds	r3, #1
   1e5c4:	836b      	strh	r3, [r5, #26]
   1e5c6:	f382 8811 	msr	BASEPRI, r2
   1e5ca:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   1e5ce:	2300      	movs	r3, #0
   1e5d0:	4622      	mov	r2, r4
   1e5d2:	4631      	mov	r1, r6
   1e5d4:	4628      	mov	r0, r5
   1e5d6:	f7ff ff9b 	bl	1e510 <notify_one>
   1e5da:	e7ee      	b.n	1e5ba <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   1e5dc:	2c06      	cmp	r4, #6
   1e5de:	d814      	bhi.n	1e60a <onoff_request+0x8a>
   1e5e0:	e8df f004 	tbb	[pc, r4]
   1e5e4:	13131304 	.word	0x13131304
   1e5e8:	1a04      	.short	0x1a04
   1e5ea:	04          	.byte	0x04
   1e5eb:	00          	.byte	0x00
	parent->next = child;
   1e5ec:	2300      	movs	r3, #0
   1e5ee:	6033      	str	r3, [r6, #0]
	return list->tail;
   1e5f0:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1e5f2:	b93b      	cbnz	r3, 1e604 <onoff_request+0x84>
	list->head = node;
   1e5f4:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   1e5f8:	b9ac      	cbnz	r4, 1e626 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   1e5fa:	2102      	movs	r1, #2
   1e5fc:	4628      	mov	r0, r5
   1e5fe:	f7ee fa5b 	bl	cab8 <process_event>
   1e602:	e7da      	b.n	1e5ba <onoff_request+0x3a>
	parent->next = child;
   1e604:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1e606:	606e      	str	r6, [r5, #4]
}
   1e608:	e7f6      	b.n	1e5f8 <onoff_request+0x78>
   1e60a:	f382 8811 	msr	BASEPRI, r2
   1e60e:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   1e612:	f06f 0404 	mvn.w	r4, #4
   1e616:	e7d0      	b.n	1e5ba <onoff_request+0x3a>
   1e618:	f382 8811 	msr	BASEPRI, r2
   1e61c:	f3bf 8f6f 	isb	sy
   1e620:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1e624:	e7c9      	b.n	1e5ba <onoff_request+0x3a>
   1e626:	f382 8811 	msr	BASEPRI, r2
   1e62a:	f3bf 8f6f 	isb	sy
		if (notify) {
   1e62e:	e7c4      	b.n	1e5ba <onoff_request+0x3a>

0001e630 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1e630:	4603      	mov	r3, r0
   1e632:	b140      	cbz	r0, 1e646 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1e634:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1e636:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1e63a:	2a02      	cmp	r2, #2
   1e63c:	d006      	beq.n	1e64c <sys_notify_validate+0x1c>
   1e63e:	2a03      	cmp	r2, #3
   1e640:	d004      	beq.n	1e64c <sys_notify_validate+0x1c>
   1e642:	2a01      	cmp	r2, #1
   1e644:	d005      	beq.n	1e652 <sys_notify_validate+0x22>
   1e646:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1e64a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1e64c:	681a      	ldr	r2, [r3, #0]
   1e64e:	2a00      	cmp	r2, #0
   1e650:	d0f9      	beq.n	1e646 <sys_notify_validate+0x16>
		notify->result = 0;
   1e652:	2000      	movs	r0, #0
   1e654:	6098      	str	r0, [r3, #8]
   1e656:	4770      	bx	lr

0001e658 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1e658:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1e65a:	6842      	ldr	r2, [r0, #4]
   1e65c:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   1e65e:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1e662:	2a02      	cmp	r2, #2
   1e664:	f04f 0400 	mov.w	r4, #0
	notify->result = res;
   1e668:	6081      	str	r1, [r0, #8]
	switch (method) {
   1e66a:	d007      	beq.n	1e67c <sys_notify_finalize+0x24>
   1e66c:	2a03      	cmp	r2, #3
   1e66e:	d002      	beq.n	1e676 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1e670:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   1e672:	2000      	movs	r0, #0
   1e674:	e001      	b.n	1e67a <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   1e676:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1e678:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1e67a:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1e67c:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1e67e:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1e680:	2800      	cmp	r0, #0
   1e682:	d0f6      	beq.n	1e672 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   1e684:	f7fc ff0a 	bl	1b49c <z_impl_k_poll_signal_raise>
   1e688:	e7f3      	b.n	1e672 <sys_notify_finalize+0x1a>

0001e68a <_ldiv5>:
	uint32_t v_lo = *v;
   1e68a:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   1e68e:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   1e690:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   1e694:	fba2 2403 	umull	r2, r4, r2, r3
   1e698:	18d5      	adds	r5, r2, r3
   1e69a:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   1e69e:	fba1 1303 	umull	r1, r3, r1, r3
   1e6a2:	1852      	adds	r2, r2, r1
   1e6a4:	eb44 0403 	adc.w	r4, r4, r3
   1e6a8:	1952      	adds	r2, r2, r5
   1e6aa:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   1e6ae:	1889      	adds	r1, r1, r2
   1e6b0:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   1e6b4:	e9c0 1300 	strd	r1, r3, [r0]
}
   1e6b8:	bd30      	pop	{r4, r5, pc}

0001e6ba <_get_digit>:
{
   1e6ba:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   1e6bc:	680a      	ldr	r2, [r1, #0]
{
   1e6be:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   1e6c0:	2a00      	cmp	r2, #0
   1e6c2:	dd0f      	ble.n	1e6e4 <_get_digit+0x2a>
		--*digit_count;
   1e6c4:	3a01      	subs	r2, #1
   1e6c6:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   1e6c8:	6844      	ldr	r4, [r0, #4]
   1e6ca:	200a      	movs	r0, #10
   1e6cc:	681a      	ldr	r2, [r3, #0]
   1e6ce:	fba2 1200 	umull	r1, r2, r2, r0
   1e6d2:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   1e6d6:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   1e6d8:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   1e6dc:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   1e6e0:	3030      	adds	r0, #48	; 0x30
}
   1e6e2:	bd10      	pop	{r4, pc}
		rval = '0';
   1e6e4:	2030      	movs	r0, #48	; 0x30
   1e6e6:	e7fc      	b.n	1e6e2 <_get_digit+0x28>

0001e6e8 <outs>:
{
   1e6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e6ec:	4607      	mov	r7, r0
   1e6ee:	4688      	mov	r8, r1
   1e6f0:	4615      	mov	r5, r2
   1e6f2:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1e6f4:	4614      	mov	r4, r2
   1e6f6:	42b4      	cmp	r4, r6
   1e6f8:	d305      	bcc.n	1e706 <outs+0x1e>
   1e6fa:	b10e      	cbz	r6, 1e700 <outs+0x18>
	return (int)count;
   1e6fc:	1b60      	subs	r0, r4, r5
   1e6fe:	e008      	b.n	1e712 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1e700:	7823      	ldrb	r3, [r4, #0]
   1e702:	2b00      	cmp	r3, #0
   1e704:	d0fa      	beq.n	1e6fc <outs+0x14>
		int rc = out((int)*sp++, ctx);
   1e706:	4641      	mov	r1, r8
   1e708:	f814 0b01 	ldrb.w	r0, [r4], #1
   1e70c:	47b8      	blx	r7
		if (rc < 0) {
   1e70e:	2800      	cmp	r0, #0
   1e710:	daf1      	bge.n	1e6f6 <outs+0xe>
}
   1e712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e716 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_GNSS_SAMPLE_LOG_LEVEL_DEFAULT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_GNSS_SAMPLE_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   1e716:	4770      	bx	lr

0001e718 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   1e718:	2806      	cmp	r0, #6
   1e71a:	d108      	bne.n	1e72e <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   1e71c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1e720:	2201      	movs	r2, #1
   1e722:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1e726:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   1e72a:	bf20      	wfe
    while (true)
   1e72c:	e7fd      	b.n	1e72a <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   1e72e:	4770      	bx	lr

0001e730 <pm_state_exit_post_ops>:
   1e730:	2300      	movs	r3, #0
   1e732:	f383 8811 	msr	BASEPRI, r3
   1e736:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1e73a:	4770      	bx	lr

0001e73c <dummy_timestamp>:
}
   1e73c:	2000      	movs	r0, #0
   1e73e:	4770      	bx	lr

0001e740 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1e740:	f000 bfb0 	b.w	1f6a4 <sys_clock_cycle_get_32>

0001e744 <atomic_inc>:
{
   1e744:	4603      	mov	r3, r0
}
   1e746:	e8d3 0fef 	ldaex	r0, [r3]
   1e74a:	1c42      	adds	r2, r0, #1
   1e74c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1e750:	2900      	cmp	r1, #0
   1e752:	d1f8      	bne.n	1e746 <atomic_inc+0x2>
   1e754:	4770      	bx	lr

0001e756 <enable_logger>:
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
   1e756:	2100      	movs	r1, #0
{
   1e758:	b508      	push	{r3, lr}
		(void)z_log_init(false, false);
   1e75a:	4608      	mov	r0, r1
   1e75c:	f7ee fb3c 	bl	cdd8 <z_log_init.isra.0>
	}

	return 0;
}
   1e760:	2000      	movs	r0, #0
   1e762:	bd08      	pop	{r3, pc}

0001e764 <z_log_vprintk>:
{
   1e764:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1e766:	2300      	movs	r3, #0
   1e768:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1e76c:	461a      	mov	r2, r3
   1e76e:	4619      	mov	r1, r3
   1e770:	4618      	mov	r0, r3
   1e772:	e9cd 3300 	strd	r3, r3, [sp]
   1e776:	f7ee fc31 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   1e77a:	b005      	add	sp, #20
   1e77c:	f85d fb04 	ldr.w	pc, [sp], #4

0001e780 <z_log_notify_backend_enabled>:
}
   1e780:	4770      	bx	lr

0001e782 <z_log_get_tag>:
}
   1e782:	2000      	movs	r0, #0
   1e784:	4770      	bx	lr

0001e786 <z_log_msg_finalize>:
{
   1e786:	b570      	push	{r4, r5, r6, lr}
   1e788:	460e      	mov	r6, r1
   1e78a:	4615      	mov	r5, r2
   1e78c:	4619      	mov	r1, r3
	if (!msg) {
   1e78e:	4604      	mov	r4, r0
   1e790:	0d12      	lsrs	r2, r2, #20
   1e792:	b918      	cbnz	r0, 1e79c <z_log_msg_finalize+0x16>
}
   1e794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   1e798:	f7ee bbce 	b.w	cf38 <z_log_dropped>
	if (data) {
   1e79c:	b12b      	cbz	r3, 1e7aa <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
   1e79e:	3010      	adds	r0, #16
   1e7a0:	f3c5 234a 	ubfx	r3, r5, #9, #11
   1e7a4:	4418      	add	r0, r3
   1e7a6:	f003 fa67 	bl	21c78 <memcpy>
	msg->hdr.source = source;
   1e7aa:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   1e7ae:	4620      	mov	r0, r4
}
   1e7b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   1e7b4:	f7ee bbd4 	b.w	cf60 <z_log_msg_commit>

0001e7b8 <out_func>:
{
   1e7b8:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   1e7ba:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
   1e7be:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   1e7c2:	2101      	movs	r1, #1
   1e7c4:	6852      	ldr	r2, [r2, #4]
   1e7c6:	f10d 0007 	add.w	r0, sp, #7
   1e7ca:	4798      	blx	r3
}
   1e7cc:	2000      	movs	r0, #0
   1e7ce:	b003      	add	sp, #12
   1e7d0:	f85d fb04 	ldr.w	pc, [sp], #4

0001e7d4 <cr_out_func>:
	if (c == '\n') {
   1e7d4:	280a      	cmp	r0, #10
{
   1e7d6:	b538      	push	{r3, r4, r5, lr}
   1e7d8:	4604      	mov	r4, r0
   1e7da:	460d      	mov	r5, r1
	if (c == '\n') {
   1e7dc:	d102      	bne.n	1e7e4 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   1e7de:	200d      	movs	r0, #13
   1e7e0:	f7ff ffea 	bl	1e7b8 <out_func>
	out_func(c, ctx);
   1e7e4:	4629      	mov	r1, r5
   1e7e6:	4620      	mov	r0, r4
   1e7e8:	f7ff ffe6 	bl	1e7b8 <out_func>
}
   1e7ec:	2000      	movs	r0, #0
   1e7ee:	bd38      	pop	{r3, r4, r5, pc}

0001e7f0 <buffer_write>:
{
   1e7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e7f2:	4606      	mov	r6, r0
   1e7f4:	460d      	mov	r5, r1
   1e7f6:	4614      	mov	r4, r2
   1e7f8:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1e7fa:	4621      	mov	r1, r4
   1e7fc:	4628      	mov	r0, r5
   1e7fe:	463a      	mov	r2, r7
   1e800:	47b0      	blx	r6
	} while (len != 0);
   1e802:	1a24      	subs	r4, r4, r0
		buf += processed;
   1e804:	4405      	add	r5, r0
	} while (len != 0);
   1e806:	d1f8      	bne.n	1e7fa <buffer_write+0xa>
}
   1e808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e80a <cbvprintf>:
{
   1e80a:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1e80c:	2400      	movs	r4, #0
   1e80e:	9400      	str	r4, [sp, #0]
   1e810:	f7ea fb9e 	bl	8f50 <z_cbvprintf_impl>
}
   1e814:	b002      	add	sp, #8
   1e816:	bd10      	pop	{r4, pc}

0001e818 <log_output_flush>:
{
   1e818:	b510      	push	{r4, lr}
		     output->control_block->offset,
   1e81a:	6842      	ldr	r2, [r0, #4]
{
   1e81c:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1e81e:	e9d2 2300 	ldrd	r2, r3, [r2]
   1e822:	6881      	ldr	r1, [r0, #8]
   1e824:	6800      	ldr	r0, [r0, #0]
   1e826:	f7ff ffe3 	bl	1e7f0 <buffer_write>
	output->control_block->offset = 0;
   1e82a:	2200      	movs	r2, #0
   1e82c:	6863      	ldr	r3, [r4, #4]
   1e82e:	601a      	str	r2, [r3, #0]
}
   1e830:	bd10      	pop	{r4, pc}

0001e832 <log_backend_uart_init>:
}
   1e832:	4770      	bx	lr

0001e834 <sntp_init>:
{
   1e834:	b570      	push	{r4, r5, r6, lr}
   1e836:	460d      	mov	r5, r1
   1e838:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   1e83a:	4604      	mov	r4, r0
   1e83c:	b330      	cbz	r0, 1e88c <sntp_init+0x58>
   1e83e:	b329      	cbz	r1, 1e88c <sntp_init+0x58>
__ssp_bos_icheck3(memset, void *, int)
   1e840:	2214      	movs	r2, #20
   1e842:	2100      	movs	r1, #0
   1e844:	f003 fa3f 	bl	21cc6 <memset>
	ctx->sock.fd = zsock_socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   1e848:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   1e84a:	2211      	movs	r2, #17
   1e84c:	2102      	movs	r1, #2
   1e84e:	f7ee ffbf 	bl	d7d0 <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   1e852:	2800      	cmp	r0, #0
	ctx->sock.fd = zsock_socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   1e854:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   1e856:	da04      	bge.n	1e862 <sntp_init+0x2e>
		return -errno;
   1e858:	f000 fa22 	bl	1eca0 <__errno>
   1e85c:	6800      	ldr	r0, [r0, #0]
   1e85e:	4240      	negs	r0, r0
}
   1e860:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   1e862:	4632      	mov	r2, r6
   1e864:	4629      	mov	r1, r5
   1e866:	f000 f871 	bl	1e94c <z_impl_zsock_connect>
	if (ret < 0) {
   1e86a:	2800      	cmp	r0, #0
   1e86c:	68e0      	ldr	r0, [r4, #12]
   1e86e:	da02      	bge.n	1e876 <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   1e870:	f000 f848 	bl	1e904 <z_impl_zsock_close>
   1e874:	e7f0      	b.n	1e858 <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   1e876:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   1e878:	68a3      	ldr	r3, [r4, #8]
   1e87a:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   1e87e:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   1e882:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   1e884:	8091      	strh	r1, [r2, #4]
	return 0;
   1e886:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   1e888:	60a3      	str	r3, [r4, #8]
	return 0;
   1e88a:	e7e9      	b.n	1e860 <sntp_init+0x2c>
		return -EFAULT;
   1e88c:	f06f 000d 	mvn.w	r0, #13
   1e890:	e7e6      	b.n	1e860 <sntp_init+0x2c>

0001e892 <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   1e892:	b110      	cbz	r0, 1e89a <sntp_close+0x8>
		(void)zsock_close(ctx->sock.fd);
   1e894:	68c0      	ldr	r0, [r0, #12]
   1e896:	f000 b835 	b.w	1e904 <z_impl_zsock_close>
	}
}
   1e89a:	4770      	bx	lr

0001e89c <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   1e89c:	f7ee bfc8 	b.w	d830 <socket_offload_getaddrinfo>

0001e8a0 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   1e8a0:	f7ee bfd0 	b.w	d844 <socket_offload_freeaddrinfo>

0001e8a4 <z_fdtable_call_ioctl>:
{
   1e8a4:	b40c      	push	{r2, r3}
   1e8a6:	4603      	mov	r3, r0
   1e8a8:	b507      	push	{r0, r1, r2, lr}
   1e8aa:	aa04      	add	r2, sp, #16
   1e8ac:	4608      	mov	r0, r1
   1e8ae:	f852 1b04 	ldr.w	r1, [r2], #4
	res = vtable->ioctl(obj, request, args);
   1e8b2:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   1e8b4:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   1e8b6:	4798      	blx	r3
}
   1e8b8:	b003      	add	sp, #12
   1e8ba:	f85d eb04 	ldr.w	lr, [sp], #4
   1e8be:	b002      	add	sp, #8
   1e8c0:	4770      	bx	lr

0001e8c2 <timeout_recalc>:
{
   1e8c2:	b570      	push	{r4, r5, r6, lr}
   1e8c4:	4614      	mov	r4, r2
	if (!K_TIMEOUT_EQ(*timeout, K_NO_WAIT) &&
   1e8c6:	e9d2 3200 	ldrd	r3, r2, [r2]
   1e8ca:	3301      	adds	r3, #1
   1e8cc:	f142 0200 	adc.w	r2, r2, #0
   1e8d0:	2b02      	cmp	r3, #2
   1e8d2:	f172 0200 	sbcs.w	r2, r2, #0
{
   1e8d6:	4605      	mov	r5, r0
   1e8d8:	460e      	mov	r6, r1
	if (!K_TIMEOUT_EQ(*timeout, K_NO_WAIT) &&
   1e8da:	d30e      	bcc.n	1e8fa <timeout_recalc+0x38>
		int64_t remaining = end - sys_clock_tick_get();
   1e8dc:	f7fc fd68 	bl	1b3b0 <sys_clock_tick_get>
   1e8e0:	1a2d      	subs	r5, r5, r0
   1e8e2:	eb66 0101 	sbc.w	r1, r6, r1
		if (remaining <= 0) {
   1e8e6:	2d01      	cmp	r5, #1
   1e8e8:	f171 0300 	sbcs.w	r3, r1, #0
			*timeout = K_NO_WAIT;
   1e8ec:	bfbb      	ittet	lt
   1e8ee:	2200      	movlt	r2, #0
   1e8f0:	2300      	movlt	r3, #0
			*timeout = Z_TIMEOUT_TICKS(remaining);
   1e8f2:	e9c4 5100 	strdge	r5, r1, [r4]
			*timeout = K_NO_WAIT;
   1e8f6:	e9c4 2300 	strdlt	r2, r3, [r4]
}
   1e8fa:	bd70      	pop	{r4, r5, r6, pc}

0001e8fc <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1e8fc:	f7fb bec0 	b.w	1a680 <z_impl_k_mutex_lock>

0001e900 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1e900:	f7fb bf38 	b.w	1a774 <z_impl_k_mutex_unlock>

0001e904 <z_impl_zsock_close>:
{
   1e904:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   1e906:	4669      	mov	r1, sp
   1e908:	aa01      	add	r2, sp, #4
{
   1e90a:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   1e90c:	f7ed ffbc 	bl	c888 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   1e910:	4604      	mov	r4, r0
   1e912:	b940      	cbnz	r0, 1e926 <z_impl_zsock_close+0x22>
		errno = EBADF;
   1e914:	f000 f9c4 	bl	1eca0 <__errno>
   1e918:	2309      	movs	r3, #9
		return -1;
   1e91a:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   1e91e:	6003      	str	r3, [r0, #0]
}
   1e920:	4620      	mov	r0, r4
   1e922:	b003      	add	sp, #12
   1e924:	bd30      	pop	{r4, r5, pc}
	(void)k_mutex_lock(lock, K_FOREVER);
   1e926:	f04f 32ff 	mov.w	r2, #4294967295
   1e92a:	9801      	ldr	r0, [sp, #4]
   1e92c:	f04f 33ff 	mov.w	r3, #4294967295
   1e930:	f7ff ffe4 	bl	1e8fc <k_mutex_lock.constprop.0.isra.0>
	ret = vtable->fd_vtable.close(ctx);
   1e934:	9b00      	ldr	r3, [sp, #0]
   1e936:	4620      	mov	r0, r4
   1e938:	689b      	ldr	r3, [r3, #8]
   1e93a:	4798      	blx	r3
   1e93c:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   1e93e:	9801      	ldr	r0, [sp, #4]
   1e940:	f7ff ffde 	bl	1e900 <k_mutex_unlock.isra.0>
	z_free_fd(sock);
   1e944:	4628      	mov	r0, r5
   1e946:	f7ee f809 	bl	c95c <z_free_fd>
	return ret;
   1e94a:	e7e9      	b.n	1e920 <z_impl_zsock_close+0x1c>

0001e94c <z_impl_zsock_connect>:
{
   1e94c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e94e:	460d      	mov	r5, r1
   1e950:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   1e952:	4669      	mov	r1, sp
   1e954:	aa01      	add	r2, sp, #4
   1e956:	f7ed ff97 	bl	c888 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   1e95a:	4604      	mov	r4, r0
   1e95c:	b940      	cbnz	r0, 1e970 <z_impl_zsock_connect+0x24>
   1e95e:	f000 f99f 	bl	1eca0 <__errno>
   1e962:	2309      	movs	r3, #9
   1e964:	f04f 34ff 	mov.w	r4, #4294967295
   1e968:	6003      	str	r3, [r0, #0]
}
   1e96a:	4620      	mov	r0, r4
   1e96c:	b002      	add	sp, #8
   1e96e:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   1e970:	9b00      	ldr	r3, [sp, #0]
   1e972:	699b      	ldr	r3, [r3, #24]
   1e974:	b91b      	cbnz	r3, 1e97e <z_impl_zsock_connect+0x32>
   1e976:	f000 f993 	bl	1eca0 <__errno>
   1e97a:	235f      	movs	r3, #95	; 0x5f
   1e97c:	e7f2      	b.n	1e964 <z_impl_zsock_connect+0x18>
   1e97e:	9801      	ldr	r0, [sp, #4]
   1e980:	f04f 32ff 	mov.w	r2, #4294967295
   1e984:	f04f 33ff 	mov.w	r3, #4294967295
   1e988:	f7ff ffb8 	bl	1e8fc <k_mutex_lock.constprop.0.isra.0>
   1e98c:	9b00      	ldr	r3, [sp, #0]
   1e98e:	4632      	mov	r2, r6
   1e990:	4629      	mov	r1, r5
   1e992:	4620      	mov	r0, r4
   1e994:	699b      	ldr	r3, [r3, #24]
   1e996:	4798      	blx	r3
   1e998:	4604      	mov	r4, r0
   1e99a:	9801      	ldr	r0, [sp, #4]
   1e99c:	f7ff ffb0 	bl	1e900 <k_mutex_unlock.isra.0>
   1e9a0:	e7e3      	b.n	1e96a <z_impl_zsock_connect+0x1e>

0001e9a2 <z_impl_zsock_sendto>:
{
   1e9a2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1e9a6:	460d      	mov	r5, r1
   1e9a8:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   1e9aa:	a902      	add	r1, sp, #8
   1e9ac:	aa03      	add	r2, sp, #12
{
   1e9ae:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   1e9b0:	f7ed ff6a 	bl	c888 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   1e9b4:	4604      	mov	r4, r0
   1e9b6:	b948      	cbnz	r0, 1e9cc <z_impl_zsock_sendto+0x2a>
   1e9b8:	f000 f972 	bl	1eca0 <__errno>
   1e9bc:	2309      	movs	r3, #9
   1e9be:	f04f 34ff 	mov.w	r4, #4294967295
   1e9c2:	6003      	str	r3, [r0, #0]
}
   1e9c4:	4620      	mov	r0, r4
   1e9c6:	b004      	add	sp, #16
   1e9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   1e9cc:	9b02      	ldr	r3, [sp, #8]
   1e9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e9d0:	b91b      	cbnz	r3, 1e9da <z_impl_zsock_sendto+0x38>
   1e9d2:	f000 f965 	bl	1eca0 <__errno>
   1e9d6:	235f      	movs	r3, #95	; 0x5f
   1e9d8:	e7f1      	b.n	1e9be <z_impl_zsock_sendto+0x1c>
   1e9da:	9803      	ldr	r0, [sp, #12]
   1e9dc:	f04f 32ff 	mov.w	r2, #4294967295
   1e9e0:	f04f 33ff 	mov.w	r3, #4294967295
   1e9e4:	f7ff ff8a 	bl	1e8fc <k_mutex_lock.constprop.0.isra.0>
   1e9e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e9ea:	4632      	mov	r2, r6
   1e9ec:	9301      	str	r3, [sp, #4]
   1e9ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e9f0:	4629      	mov	r1, r5
   1e9f2:	9300      	str	r3, [sp, #0]
   1e9f4:	9b02      	ldr	r3, [sp, #8]
   1e9f6:	4620      	mov	r0, r4
   1e9f8:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   1e9fc:	463b      	mov	r3, r7
   1e9fe:	47c0      	blx	r8
   1ea00:	4604      	mov	r4, r0
   1ea02:	9803      	ldr	r0, [sp, #12]
   1ea04:	f7ff ff7c 	bl	1e900 <k_mutex_unlock.isra.0>
   1ea08:	e7dc      	b.n	1e9c4 <z_impl_zsock_sendto+0x22>

0001ea0a <z_impl_zsock_recvfrom>:
{
   1ea0a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1ea0e:	460d      	mov	r5, r1
   1ea10:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   1ea12:	a902      	add	r1, sp, #8
   1ea14:	aa03      	add	r2, sp, #12
{
   1ea16:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   1ea18:	f7ed ff36 	bl	c888 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   1ea1c:	4604      	mov	r4, r0
   1ea1e:	b948      	cbnz	r0, 1ea34 <z_impl_zsock_recvfrom+0x2a>
   1ea20:	f000 f93e 	bl	1eca0 <__errno>
   1ea24:	2309      	movs	r3, #9
   1ea26:	f04f 34ff 	mov.w	r4, #4294967295
   1ea2a:	6003      	str	r3, [r0, #0]
}
   1ea2c:	4620      	mov	r0, r4
   1ea2e:	b004      	add	sp, #16
   1ea30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   1ea34:	9b02      	ldr	r3, [sp, #8]
   1ea36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ea38:	b91b      	cbnz	r3, 1ea42 <z_impl_zsock_recvfrom+0x38>
   1ea3a:	f000 f931 	bl	1eca0 <__errno>
   1ea3e:	235f      	movs	r3, #95	; 0x5f
   1ea40:	e7f1      	b.n	1ea26 <z_impl_zsock_recvfrom+0x1c>
   1ea42:	9803      	ldr	r0, [sp, #12]
   1ea44:	f04f 32ff 	mov.w	r2, #4294967295
   1ea48:	f04f 33ff 	mov.w	r3, #4294967295
   1ea4c:	f7ff ff56 	bl	1e8fc <k_mutex_lock.constprop.0.isra.0>
   1ea50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ea52:	4632      	mov	r2, r6
   1ea54:	9301      	str	r3, [sp, #4]
   1ea56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ea58:	4629      	mov	r1, r5
   1ea5a:	9300      	str	r3, [sp, #0]
   1ea5c:	9b02      	ldr	r3, [sp, #8]
   1ea5e:	4620      	mov	r0, r4
   1ea60:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
   1ea64:	463b      	mov	r3, r7
   1ea66:	47c0      	blx	r8
   1ea68:	4604      	mov	r4, r0
   1ea6a:	9803      	ldr	r0, [sp, #12]
   1ea6c:	f7ff ff48 	bl	1e900 <k_mutex_unlock.isra.0>
   1ea70:	e7dc      	b.n	1ea2c <z_impl_zsock_recvfrom+0x22>

0001ea72 <z_impl_zsock_poll>:

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   1ea72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_timeout_t timeout;

	if (poll_timeout < 0) {
   1ea76:	1e14      	subs	r4, r2, #0
{
   1ea78:	4605      	mov	r5, r0
   1ea7a:	460e      	mov	r6, r1
	if (poll_timeout < 0) {
   1ea7c:	db13      	blt.n	1eaa6 <z_impl_zsock_poll+0x34>
   1ea7e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1ea82:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ea86:	2100      	movs	r1, #0
   1ea88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ea8c:	2300      	movs	r3, #0
   1ea8e:	fbc4 0107 	smlal	r0, r1, r4, r7
   1ea92:	f7ea f8ad 	bl	8bf0 <__aeabi_uldivmod>
   1ea96:	4602      	mov	r2, r0
   1ea98:	460b      	mov	r3, r1
		timeout = K_FOREVER;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	return zsock_poll_internal(fds, nfds, timeout);
   1ea9a:	4631      	mov	r1, r6
   1ea9c:	4628      	mov	r0, r5
}
   1ea9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return zsock_poll_internal(fds, nfds, timeout);
   1eaa2:	f7eb b8c1 	b.w	9c28 <zsock_poll_internal>
		timeout = K_FOREVER;
   1eaa6:	f04f 32ff 	mov.w	r2, #4294967295
   1eaaa:	4613      	mov	r3, r2
   1eaac:	e7f5      	b.n	1ea9a <z_impl_zsock_poll+0x28>

0001eaae <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   1eaae:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1eab2:	460d      	mov	r5, r1
   1eab4:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   1eab6:	a902      	add	r1, sp, #8
   1eab8:	aa03      	add	r2, sp, #12
{
   1eaba:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   1eabc:	f7ed fee4 	bl	c888 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   1eac0:	4604      	mov	r4, r0
   1eac2:	b948      	cbnz	r0, 1ead8 <z_impl_zsock_setsockopt+0x2a>
   1eac4:	f000 f8ec 	bl	1eca0 <__errno>
   1eac8:	2309      	movs	r3, #9
   1eaca:	f04f 34ff 	mov.w	r4, #4294967295
   1eace:	6003      	str	r3, [r0, #0]
}
   1ead0:	4620      	mov	r0, r4
   1ead2:	b004      	add	sp, #16
   1ead4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   1ead8:	9b02      	ldr	r3, [sp, #8]
   1eada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1eadc:	b91b      	cbnz	r3, 1eae6 <z_impl_zsock_setsockopt+0x38>
   1eade:	f000 f8df 	bl	1eca0 <__errno>
   1eae2:	235f      	movs	r3, #95	; 0x5f
   1eae4:	e7f1      	b.n	1eaca <z_impl_zsock_setsockopt+0x1c>
   1eae6:	9803      	ldr	r0, [sp, #12]
   1eae8:	f04f 32ff 	mov.w	r2, #4294967295
   1eaec:	f04f 33ff 	mov.w	r3, #4294967295
   1eaf0:	f7ff ff04 	bl	1e8fc <k_mutex_lock.constprop.0.isra.0>
   1eaf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1eaf6:	4632      	mov	r2, r6
   1eaf8:	9300      	str	r3, [sp, #0]
   1eafa:	9b02      	ldr	r3, [sp, #8]
   1eafc:	4629      	mov	r1, r5
   1eafe:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   1eb02:	4620      	mov	r0, r4
   1eb04:	463b      	mov	r3, r7
   1eb06:	47c0      	blx	r8
   1eb08:	4604      	mov	r4, r0
   1eb0a:	9803      	ldr	r0, [sp, #12]
   1eb0c:	f7ff fef8 	bl	1e900 <k_mutex_unlock.isra.0>
   1eb10:	e7de      	b.n	1ead0 <z_impl_zsock_setsockopt+0x22>

0001eb12 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1eb12:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1eb14:	ab0b      	add	r3, sp, #44	; 0x2c
   1eb16:	9305      	str	r3, [sp, #20]
   1eb18:	9303      	str	r3, [sp, #12]
   1eb1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1eb1c:	2201      	movs	r2, #1
   1eb1e:	9302      	str	r3, [sp, #8]
   1eb20:	2300      	movs	r3, #0
   1eb22:	4618      	mov	r0, r3
   1eb24:	e9cd 3300 	strd	r3, r3, [sp]
   1eb28:	f7ee fa58 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   1eb2c:	b007      	add	sp, #28
   1eb2e:	f85d fb04 	ldr.w	pc, [sp], #4

0001eb32 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1eb32:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1eb34:	6800      	ldr	r0, [r0, #0]
   1eb36:	f7ee beab 	b.w	d890 <z_arm_fatal_error>

0001eb3a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1eb3a:	2100      	movs	r1, #0
   1eb3c:	2001      	movs	r0, #1
   1eb3e:	f7ee bea7 	b.w	d890 <z_arm_fatal_error>

0001eb42 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1eb42:	b508      	push	{r3, lr}
	handler();
   1eb44:	f7ee ff6a 	bl	da1c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1eb48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1eb4c:	f7ef b86e 	b.w	dc2c <z_arm_exc_exit>

0001eb50 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1eb50:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1eb52:	f383 880b 	msr	PSPLIM, r3
}
   1eb56:	4770      	bx	lr

0001eb58 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1eb58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1eb5a:	ab0b      	add	r3, sp, #44	; 0x2c
   1eb5c:	9305      	str	r3, [sp, #20]
   1eb5e:	9303      	str	r3, [sp, #12]
   1eb60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1eb62:	2201      	movs	r2, #1
   1eb64:	9302      	str	r3, [sp, #8]
   1eb66:	2300      	movs	r3, #0
   1eb68:	4618      	mov	r0, r3
   1eb6a:	e9cd 3300 	strd	r3, r3, [sp]
   1eb6e:	f7ee fa35 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   1eb72:	b007      	add	sp, #28
   1eb74:	f85d fb04 	ldr.w	pc, [sp], #4

0001eb78 <z_arm_save_fp_context>:
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1eb78:	f3ef 8314 	mrs	r3, CONTROL
#if defined(CONFIG_FPU_SHARING)
	__ASSERT_NO_MSG(buffer != NULL);

	uint32_t CONTROL = __get_CONTROL();

	if (CONTROL & CONTROL_FPCA_Msk) {
   1eb7c:	075a      	lsls	r2, r3, #29
   1eb7e:	d512      	bpl.n	1eba6 <z_arm_save_fp_context+0x2e>
		/* Store caller-saved and callee-saved FP registers. */
		__asm__ volatile(
   1eb80:	f100 0240 	add.w	r2, r0, #64	; 0x40
   1eb84:	ec80 0a10 	vstmia	r0, {s0-s15}
   1eb88:	ec82 8a10 	vstmia	r2, {s16-s31}
  return __builtin_arm_get_fpscr();
   1eb8c:	eef1 2a10 	vmrs	r2, fpscr
			"vstmia %0, {s0-s15}\n"
			"vstmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);

		buffer->fpscr = __get_FPSCR();
   1eb90:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		buffer->ctx_saved = true;
   1eb94:	2201      	movs	r2, #1

		/* Disable FPCA so no stacking of FP registers happens in TFM. */
		__set_CONTROL(CONTROL & ~CONTROL_FPCA_Msk);
   1eb96:	f023 0304 	bic.w	r3, r3, #4
		buffer->ctx_saved = true;
   1eb9a:	f880 2084 	strb.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   1eb9e:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   1eba2:	f3bf 8f6f 	isb	sy
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   1eba6:	4770      	bx	lr

0001eba8 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
{
#if defined(CONFIG_FPU_SHARING)
	if (buffer->ctx_saved) {
   1eba8:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
   1ebac:	b18b      	cbz	r3, 1ebd2 <z_arm_restore_fp_context+0x2a>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1ebae:	f3ef 8314 	mrs	r3, CONTROL
		/* Set FPCA first so it is set even if an interrupt happens
		 * during restoration.
		 */
		__set_CONTROL(__get_CONTROL() | CONTROL_FPCA_Msk);
   1ebb2:	f043 0304 	orr.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   1ebb6:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   1ebba:	f3bf 8f6f 	isb	sy
  __builtin_arm_set_fpscr(fpscr);
   1ebbe:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   1ebc2:	eee1 3a10 	vmsr	fpscr, r3

		/* Restore FP state. */
		__set_FPSCR(buffer->fpscr);

		__asm__ volatile(
   1ebc6:	f100 0340 	add.w	r3, r0, #64	; 0x40
   1ebca:	ec90 0a10 	vldmia	r0, {s0-s15}
   1ebce:	ec93 8a10 	vldmia	r3, {s16-s31}
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   1ebd2:	4770      	bx	lr

0001ebd4 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1ebd4:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1ebd8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1ebdc:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1ebde:	bf08      	it	eq
   1ebe0:	f06f 0015 	mvneq.w	r0, #21
   1ebe4:	4770      	bx	lr

0001ebe6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1ebe6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1ebe8:	ab0b      	add	r3, sp, #44	; 0x2c
   1ebea:	9305      	str	r3, [sp, #20]
   1ebec:	9303      	str	r3, [sp, #12]
   1ebee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ebf0:	2201      	movs	r2, #1
   1ebf2:	9302      	str	r3, [sp, #8]
   1ebf4:	2300      	movs	r3, #0
   1ebf6:	4618      	mov	r0, r3
   1ebf8:	e9cd 3300 	strd	r3, r3, [sp]
   1ebfc:	f7ee f9ee 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   1ec00:	b007      	add	sp, #28
   1ec02:	f85d fb04 	ldr.w	pc, [sp], #4

0001ec06 <mpu_configure_region>:
{
   1ec06:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   1ec08:	680c      	ldr	r4, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   1ec0a:	684b      	ldr	r3, [r1, #4]
{
   1ec0c:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   1ec0e:	890a      	ldrh	r2, [r1, #8]
   1ec10:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   1ec12:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1ec14:	3b01      	subs	r3, #1
   1ec16:	f024 041f 	bic.w	r4, r4, #31
   1ec1a:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   1ec1c:	f002 021f 	and.w	r2, r2, #31
   1ec20:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1ec24:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   1ec28:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   1ec2a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1ec2e:	9303      	str	r3, [sp, #12]
   1ec30:	f7ef fbc2 	bl	e3b8 <region_allocate_and_init>
}
   1ec34:	b005      	add	sp, #20
   1ec36:	bd30      	pop	{r4, r5, pc}

0001ec38 <malloc_prepare>:
}
   1ec38:	2000      	movs	r0, #0
   1ec3a:	4770      	bx	lr

0001ec3c <_stdout_hook_default>:
}
   1ec3c:	f04f 30ff 	mov.w	r0, #4294967295
   1ec40:	4770      	bx	lr

0001ec42 <_stdin_hook_default>:
}
   1ec42:	2000      	movs	r0, #0
   1ec44:	4770      	bx	lr

0001ec46 <_read>:
{
   1ec46:	4608      	mov	r0, r1
   1ec48:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   1ec4a:	f7ef bd31 	b.w	e6b0 <z_impl_zephyr_read_stdin>

0001ec4e <_write>:
{
   1ec4e:	4608      	mov	r0, r1
   1ec50:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1ec52:	f7ef bd41 	b.w	e6d8 <z_impl_zephyr_write_stdout>

0001ec56 <_close>:
int _close(int file)
   1ec56:	f04f 30ff 	mov.w	r0, #4294967295
   1ec5a:	4770      	bx	lr

0001ec5c <_lseek>:
}
   1ec5c:	2000      	movs	r0, #0
   1ec5e:	4770      	bx	lr

0001ec60 <_isatty>:
}
   1ec60:	2802      	cmp	r0, #2
   1ec62:	bfcc      	ite	gt
   1ec64:	2000      	movgt	r0, #0
   1ec66:	2001      	movle	r0, #1
   1ec68:	4770      	bx	lr

0001ec6a <_kill>:
}
   1ec6a:	2000      	movs	r0, #0
   1ec6c:	4770      	bx	lr

0001ec6e <_getpid>:
int _getpid(void)
   1ec6e:	2000      	movs	r0, #0
   1ec70:	4770      	bx	lr

0001ec72 <_fstat>:
	st->st_mode = S_IFCHR;
   1ec72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   1ec76:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   1ec78:	604b      	str	r3, [r1, #4]
}
   1ec7a:	4770      	bx	lr

0001ec7c <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   1ec7c:	b510      	push	{r4, lr}
   1ec7e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   1ec80:	2014      	movs	r0, #20
   1ec82:	f7fc fd1d 	bl	1b6c0 <malloc>
   1ec86:	6020      	str	r0, [r4, #0]
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
   1ec88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   1ec8c:	f002 bbee 	b.w	2146c <z_impl_k_mutex_init>

0001ec90 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1ec90:	f04f 32ff 	mov.w	r2, #4294967295
   1ec94:	f04f 33ff 	mov.w	r3, #4294967295
   1ec98:	f7fb bcf2 	b.w	1a680 <z_impl_k_mutex_lock>

0001ec9c <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   1ec9c:	f7fb bd6a 	b.w	1a774 <z_impl_k_mutex_unlock>

0001eca0 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1eca0:	f7fb b9ea 	b.w	1a078 <z_impl_z_errno>

0001eca4 <offloaded_netdev_if_enable>:
   1eca4:	6803      	ldr	r3, [r0, #0]
#include <zephyr/net/net_if.h>
#include <zephyr/net/offloaded_netdev.h>

static inline int offloaded_netdev_if_enable(struct net_if *iface, bool state)
{
	const struct offloaded_if_api *off_if = net_if_get_device(iface)->api;
   1eca6:	681b      	ldr	r3, [r3, #0]
   1eca8:	689b      	ldr	r3, [r3, #8]

	if (!off_if || !(off_if->enable)) {
   1ecaa:	b113      	cbz	r3, 1ecb2 <offloaded_netdev_if_enable+0xe>
   1ecac:	685b      	ldr	r3, [r3, #4]
   1ecae:	b103      	cbz	r3, 1ecb2 <offloaded_netdev_if_enable+0xe>
		return 0;
	}

	return off_if->enable(iface, state);
   1ecb0:	4718      	bx	r3
}
   1ecb2:	2000      	movs	r0, #0
   1ecb4:	4770      	bx	lr

0001ecb6 <net_init>:

	return status;
}

static int net_init(void)
{
   1ecb6:	b508      	push	{r3, lr}
	net_if_init();
   1ecb8:	f7ef fd50 	bl	e75c <net_if_init>
	net_if_post_init();
   1ecbc:	f7ef fd72 	bl	e7a4 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   1ecc0:	2000      	movs	r0, #0
   1ecc2:	bd08      	pop	{r3, pc}

0001ecc4 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   1ecc4:	b110      	cbz	r0, 1eccc <net_if_l2+0x8>
   1ecc6:	6800      	ldr	r0, [r0, #0]
   1ecc8:	b100      	cbz	r0, 1eccc <net_if_l2+0x8>
	return iface->if_dev->l2;
   1ecca:	6840      	ldr	r0, [r0, #4]
}
   1eccc:	4770      	bx	lr

0001ecce <atomic_set_bit>:
   1ecce:	2301      	movs	r3, #1
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ecd0:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1ecd2:	f001 011f 	and.w	r1, r1, #31
   1ecd6:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ecd8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   1ecdc:	e8d0 2fef 	ldaex	r2, [r0]
   1ece0:	431a      	orrs	r2, r3
   1ece2:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1ece6:	2900      	cmp	r1, #0
   1ece8:	d1f8      	bne.n	1ecdc <atomic_set_bit+0xe>
}
   1ecea:	4770      	bx	lr

0001ecec <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1ecec:	2301      	movs	r3, #1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ecee:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1ecf0:	f001 011f 	and.w	r1, r1, #31
   1ecf4:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ecf6:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ecf8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   1ecfc:	e8d0 2fef 	ldaex	r2, [r0]
   1ed00:	401a      	ands	r2, r3
   1ed02:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1ed06:	2900      	cmp	r1, #0
   1ed08:	d1f8      	bne.n	1ecfc <atomic_clear_bit+0x10>
}
   1ed0a:	4770      	bx	lr

0001ed0c <net_if_flag_is_set>:
	if (iface == NULL) {
   1ed0c:	b130      	cbz	r0, 1ed1c <net_if_flag_is_set+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ed0e:	6803      	ldr	r3, [r0, #0]
   1ed10:	330c      	adds	r3, #12
   1ed12:	e8d3 0faf 	lda	r0, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1ed16:	4108      	asrs	r0, r1
   1ed18:	f000 0001 	and.w	r0, r0, #1
}
   1ed1c:	4770      	bx	lr

0001ed1e <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
   1ed1e:	b510      	push	{r4, lr}
   1ed20:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   1ed22:	f7ff ffcf 	bl	1ecc4 <net_if_l2>
   1ed26:	b128      	cbz	r0, 1ed34 <l2_flags_get.isra.0+0x16>
   1ed28:	68c2      	ldr	r2, [r0, #12]
   1ed2a:	b11a      	cbz	r2, 1ed34 <l2_flags_get.isra.0+0x16>
}
   1ed2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   1ed30:	4618      	mov	r0, r3
   1ed32:	4710      	bx	r2
}
   1ed34:	bd10      	pop	{r4, pc}

0001ed36 <update_operational_state>:
{
   1ed36:	b510      	push	{r4, lr}
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   1ed38:	6803      	ldr	r3, [r0, #0]
 */
static inline bool net_if_is_admin_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_UP);
   1ed3a:	2100      	movs	r1, #0
{
   1ed3c:	4604      	mov	r4, r0
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   1ed3e:	f893 2020 	ldrb.w	r2, [r3, #32]
   1ed42:	f7ff ffe3 	bl	1ed0c <net_if_flag_is_set>
	if (!net_if_is_admin_up(iface)) {
   1ed46:	b978      	cbnz	r0, 1ed68 <update_operational_state+0x32>
		iface->if_dev->oper_state = oper_state;
   1ed48:	2102      	movs	r1, #2
   1ed4a:	6823      	ldr	r3, [r4, #0]
   1ed4c:	f883 1020 	strb.w	r1, [r3, #32]
	return iface->if_dev->oper_state;
   1ed50:	6820      	ldr	r0, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   1ed52:	f890 3020 	ldrb.w	r3, [r0, #32]
   1ed56:	428b      	cmp	r3, r1
   1ed58:	d12b      	bne.n	1edb2 <update_operational_state+0x7c>
		if (prev_state == NET_IF_OPER_UP) {
   1ed5a:	2a06      	cmp	r2, #6
   1ed5c:	d129      	bne.n	1edb2 <update_operational_state+0x7c>
	atomic_clear_bit(iface->if_dev->flags, value);
   1ed5e:	2108      	movs	r1, #8
   1ed60:	300c      	adds	r0, #12
   1ed62:	f7ff ffc3 	bl	1ecec <atomic_clear_bit>
	return (iface->if_dev->socket_offload != NULL);
   1ed66:	e01c      	b.n	1eda2 <update_operational_state+0x6c>
 */
static inline bool net_if_is_carrier_ok(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_LOWER_UP);
   1ed68:	2109      	movs	r1, #9
   1ed6a:	4620      	mov	r0, r4
   1ed6c:	f7ff ffce 	bl	1ed0c <net_if_flag_is_set>
	if (!net_if_is_carrier_ok(iface)) {
   1ed70:	2800      	cmp	r0, #0
   1ed72:	d0e9      	beq.n	1ed48 <update_operational_state+0x12>
 */
static inline bool net_if_is_dormant(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_DORMANT);
   1ed74:	210a      	movs	r1, #10
   1ed76:	4620      	mov	r0, r4
   1ed78:	f7ff ffc8 	bl	1ed0c <net_if_flag_is_set>
		iface->if_dev->oper_state = oper_state;
   1ed7c:	6821      	ldr	r1, [r4, #0]
   1ed7e:	f1c0 0306 	rsb	r3, r0, #6
   1ed82:	b2db      	uxtb	r3, r3
   1ed84:	f881 3020 	strb.w	r3, [r1, #32]
	return iface->if_dev->oper_state;
   1ed88:	6820      	ldr	r0, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   1ed8a:	f890 1020 	ldrb.w	r1, [r0, #32]
   1ed8e:	4299      	cmp	r1, r3
   1ed90:	d10f      	bne.n	1edb2 <update_operational_state+0x7c>
	if (net_if_oper_state(iface) == NET_IF_OPER_UP) {
   1ed92:	2906      	cmp	r1, #6
   1ed94:	d1e1      	bne.n	1ed5a <update_operational_state+0x24>
		if (prev_state != NET_IF_OPER_UP) {
   1ed96:	2a06      	cmp	r2, #6
   1ed98:	d00b      	beq.n	1edb2 <update_operational_state+0x7c>
	atomic_set_bit(iface->if_dev->flags, value);
   1ed9a:	2108      	movs	r1, #8
   1ed9c:	300c      	adds	r0, #12
   1ed9e:	f7ff ff96 	bl	1ecce <atomic_set_bit>
	return (iface->if_dev->socket_offload != NULL);
   1eda2:	6823      	ldr	r3, [r4, #0]
	if (!is_iface_offloaded(iface) &&
   1eda4:	69db      	ldr	r3, [r3, #28]
   1eda6:	b923      	cbnz	r3, 1edb2 <update_operational_state+0x7c>
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1eda8:	4620      	mov	r0, r4
}
   1edaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1edae:	f7ff bfb6 	b.w	1ed1e <l2_flags_get.isra.0>
}
   1edb2:	bd10      	pop	{r4, pc}

0001edb4 <net_if_flag_test_and_set.isra.0>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1edb4:	2301      	movs	r3, #1
static inline bool net_if_flag_test_and_set(struct net_if *iface,
   1edb6:	b510      	push	{r4, lr}
   1edb8:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1edbc:	300c      	adds	r0, #12
   1edbe:	e8d0 3fef 	ldaex	r3, [r0]
   1edc2:	ea43 0201 	orr.w	r2, r3, r1
   1edc6:	e8c0 2fe4 	stlex	r4, r2, [r0]
   1edca:	2c00      	cmp	r4, #0
   1edcc:	d1f7      	bne.n	1edbe <net_if_flag_test_and_set.isra.0+0xa>
	return (old & mask) != 0;
   1edce:	4219      	tst	r1, r3
}
   1edd0:	bf14      	ite	ne
   1edd2:	2001      	movne	r0, #1
   1edd4:	2000      	moveq	r0, #0
   1edd6:	bd10      	pop	{r4, pc}

0001edd8 <net_if_up>:
{
   1edd8:	b538      	push	{r3, r4, r5, lr}
   1edda:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
   1eddc:	f04f 31ff 	mov.w	r1, #4294967295
   1ede0:	f04f 30ff 	mov.w	r0, #4294967295
   1ede4:	f7ef fcac 	bl	e740 <k_mutex_lock.constprop.0.isra.0>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1ede8:	2100      	movs	r1, #0
   1edea:	4628      	mov	r0, r5
   1edec:	f7ff ff8e 	bl	1ed0c <net_if_flag_is_set>
   1edf0:	b9b8      	cbnz	r0, 1ee22 <net_if_up+0x4a>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1edf2:	4628      	mov	r0, r5
   1edf4:	f7ff ff66 	bl	1ecc4 <net_if_l2>
   1edf8:	4604      	mov	r4, r0
   1edfa:	b130      	cbz	r0, 1ee0a <net_if_up+0x32>
   1edfc:	6884      	ldr	r4, [r0, #8]
   1edfe:	b124      	cbz	r4, 1ee0a <net_if_up+0x32>
	status = net_if_l2(iface)->enable(iface, true);
   1ee00:	2101      	movs	r1, #1
   1ee02:	4628      	mov	r0, r5
   1ee04:	47a0      	blx	r4
	if (status < 0) {
   1ee06:	1e04      	subs	r4, r0, #0
   1ee08:	db07      	blt.n	1ee1a <net_if_up+0x42>
	atomic_set_bit(iface->if_dev->flags, value);
   1ee0a:	6828      	ldr	r0, [r5, #0]
   1ee0c:	2100      	movs	r1, #0
   1ee0e:	300c      	adds	r0, #12
   1ee10:	f7ff ff5d 	bl	1ecce <atomic_set_bit>
	update_operational_state(iface);
   1ee14:	4628      	mov	r0, r5
   1ee16:	f7ff ff8e 	bl	1ed36 <update_operational_state>
	k_mutex_unlock(&lock);
   1ee1a:	f7ef fc99 	bl	e750 <k_mutex_unlock.constprop.0.isra.0>
}
   1ee1e:	4620      	mov	r0, r4
   1ee20:	bd38      	pop	{r3, r4, r5, pc}
		status = -EALREADY;
   1ee22:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1ee26:	e7f8      	b.n	1ee1a <net_if_up+0x42>

0001ee28 <net_byte_to_hex>:
{
   1ee28:	b510      	push	{r4, lr}
   1ee2a:	4604      	mov	r4, r0
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1ee2c:	0908      	lsrs	r0, r1, #4
		if (i == 0 && !pad && !val) {
   1ee2e:	b1b3      	cbz	r3, 1ee5e <net_byte_to_hex+0x36>
		if (val < 10) {
   1ee30:	2809      	cmp	r0, #9
   1ee32:	d912      	bls.n	1ee5a <net_byte_to_hex+0x32>
			*ptr++ = (char) (val - 10 + base);
   1ee34:	f1a2 030a 	sub.w	r3, r2, #10
   1ee38:	4418      	add	r0, r3
   1ee3a:	b2c0      	uxtb	r0, r0
   1ee3c:	f804 0b01 	strb.w	r0, [r4], #1
	*ptr = '\0';
   1ee40:	2300      	movs	r3, #0
   1ee42:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   1ee46:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   1ee48:	bf83      	ittte	hi
   1ee4a:	3a0a      	subhi	r2, #10
   1ee4c:	1889      	addhi	r1, r1, r2
   1ee4e:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   1ee50:	3130      	addls	r1, #48	; 0x30
   1ee52:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   1ee54:	7063      	strb	r3, [r4, #1]
			*ptr++ = (char) (val - 10 + base);
   1ee56:	1c60      	adds	r0, r4, #1
}
   1ee58:	bd10      	pop	{r4, pc}
			*ptr++ = (char) (val + '0');
   1ee5a:	3030      	adds	r0, #48	; 0x30
   1ee5c:	e7ee      	b.n	1ee3c <net_byte_to_hex+0x14>
		if (i == 0 && !pad && !val) {
   1ee5e:	2800      	cmp	r0, #0
   1ee60:	d1e6      	bne.n	1ee30 <net_byte_to_hex+0x8>
   1ee62:	e7ed      	b.n	1ee40 <net_byte_to_hex+0x18>

0001ee64 <cb_notify>:
{
   1ee64:	b570      	push	{r4, r5, r6, lr}
   1ee66:	4604      	mov	r4, r0
   1ee68:	460d      	mov	r5, r1
   1ee6a:	461e      	mov	r6, r3
	if (cb == NULL) {
   1ee6c:	b90a      	cbnz	r2, 1ee72 <cb_notify+0xe>
		return 0;
   1ee6e:	2000      	movs	r0, #0
}
   1ee70:	bd70      	pop	{r4, r5, r6, pc}
	parser->state = *current_state;
   1ee72:	6803      	ldr	r3, [r0, #0]
   1ee74:	7809      	ldrb	r1, [r1, #0]
   1ee76:	f361 2390 	bfi	r3, r1, #10, #7
   1ee7a:	6003      	str	r3, [r0, #0]
	if (UNLIKELY(cb(parser) != 0)) {
   1ee7c:	4790      	blx	r2
   1ee7e:	b118      	cbz	r0, 1ee88 <cb_notify+0x24>
		SET_ERRNO(cb_error);
   1ee80:	7de3      	ldrb	r3, [r4, #23]
   1ee82:	f366 0306 	bfi	r3, r6, #0, #7
   1ee86:	75e3      	strb	r3, [r4, #23]
	*current_state = parser->state;
   1ee88:	6823      	ldr	r3, [r4, #0]
   1ee8a:	f3c3 2386 	ubfx	r3, r3, #10, #7
   1ee8e:	702b      	strb	r3, [r5, #0]
	if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {
   1ee90:	7de3      	ldrb	r3, [r4, #23]
   1ee92:	065b      	lsls	r3, r3, #25
   1ee94:	d0eb      	beq.n	1ee6e <cb_notify+0xa>
		*parsed = already_parsed;
   1ee96:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   1ee9a:	601a      	str	r2, [r3, #0]
		return -HTTP_PARSER_ERRNO(parser);
   1ee9c:	7de0      	ldrb	r0, [r4, #23]
   1ee9e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1eea2:	4240      	negs	r0, r0
   1eea4:	e7e4      	b.n	1ee70 <cb_notify+0xc>

0001eea6 <cb_data>:
{
   1eea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eeaa:	9f08      	ldr	r7, [sp, #32]
   1eeac:	461d      	mov	r5, r3
	if (*mark == NULL) {
   1eeae:	683b      	ldr	r3, [r7, #0]
{
   1eeb0:	4604      	mov	r4, r0
   1eeb2:	460e      	mov	r6, r1
   1eeb4:	4690      	mov	r8, r2
	if (*mark == NULL) {
   1eeb6:	b1fb      	cbz	r3, 1eef8 <cb_data+0x52>
	if (cb == NULL) {
   1eeb8:	b1e1      	cbz	r1, 1eef4 <cb_data+0x4e>
	parser->state = *current_state;
   1eeba:	782a      	ldrb	r2, [r5, #0]
   1eebc:	6803      	ldr	r3, [r0, #0]
   1eebe:	f362 2390 	bfi	r3, r2, #10, #7
   1eec2:	6003      	str	r3, [r0, #0]
	rc = cb(parser, *mark, len);
   1eec4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1eec6:	6839      	ldr	r1, [r7, #0]
   1eec8:	47b0      	blx	r6
	if (UNLIKELY(rc != 0)) {
   1eeca:	b118      	cbz	r0, 1eed4 <cb_data+0x2e>
		SET_ERRNO(cb_error);
   1eecc:	7de3      	ldrb	r3, [r4, #23]
   1eece:	f368 0306 	bfi	r3, r8, #0, #7
   1eed2:	75e3      	strb	r3, [r4, #23]
	*current_state = parser->state;
   1eed4:	6823      	ldr	r3, [r4, #0]
   1eed6:	f3c3 2386 	ubfx	r3, r3, #10, #7
   1eeda:	702b      	strb	r3, [r5, #0]
	if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {
   1eedc:	7de3      	ldrb	r3, [r4, #23]
   1eede:	065b      	lsls	r3, r3, #25
   1eee0:	d008      	beq.n	1eef4 <cb_data+0x4e>
		*parsed = already_parsed;
   1eee2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   1eee6:	601a      	str	r2, [r3, #0]
		return -HTTP_PARSER_ERRNO(parser);
   1eee8:	7de0      	ldrb	r0, [r4, #23]
   1eeea:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1eeee:	4240      	negs	r0, r0
}
   1eef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*mark = NULL;
   1eef4:	2300      	movs	r3, #0
   1eef6:	603b      	str	r3, [r7, #0]
		return 0;
   1eef8:	2000      	movs	r0, #0
   1eefa:	e7f9      	b.n	1eef0 <cb_data+0x4a>

0001eefc <http_message_needs_eof>:
	if (parser->type == HTTP_REQUEST) {
   1eefc:	7803      	ldrb	r3, [r0, #0]
{
   1eefe:	4602      	mov	r2, r0
	if (parser->type == HTTP_REQUEST) {
   1ef00:	f013 0003 	ands.w	r0, r3, #3
   1ef04:	d017      	beq.n	1ef36 <http_message_needs_eof+0x3a>
	if (parser->status_code / 100 == 1U || /* 1xx e.g. Continue */
   1ef06:	8a93      	ldrh	r3, [r2, #20]
   1ef08:	f1a3 0164 	sub.w	r1, r3, #100	; 0x64
   1ef0c:	2963      	cmp	r1, #99	; 0x63
   1ef0e:	d911      	bls.n	1ef34 <http_message_needs_eof+0x38>
   1ef10:	2bcc      	cmp	r3, #204	; 0xcc
   1ef12:	d00f      	beq.n	1ef34 <http_message_needs_eof+0x38>
			parser->status_code == 204U ||     /* No Content */
   1ef14:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
   1ef18:	d00c      	beq.n	1ef34 <http_message_needs_eof+0x38>
			parser->flags & F_SKIPBODY) {     /* response to a HEAD
   1ef1a:	8813      	ldrh	r3, [r2, #0]
   1ef1c:	f3c3 0387 	ubfx	r3, r3, #2, #8
	if ((parser->flags & F_CHUNKED) ||
   1ef20:	f003 0341 	and.w	r3, r3, #65	; 0x41
   1ef24:	b933      	cbnz	r3, 1ef34 <http_message_needs_eof+0x38>
   1ef26:	e9d2 3002 	ldrd	r3, r0, [r2, #8]
   1ef2a:	4018      	ands	r0, r3
   1ef2c:	1c43      	adds	r3, r0, #1
   1ef2e:	4258      	negs	r0, r3
   1ef30:	4158      	adcs	r0, r3
   1ef32:	4770      	bx	lr
		return 0;
   1ef34:	2000      	movs	r0, #0
}
   1ef36:	4770      	bx	lr

0001ef38 <http_parser_init>:


void http_parser_init(struct http_parser *parser, enum http_parser_type t)
{
   1ef38:	b570      	push	{r4, r5, r6, lr}
   1ef3a:	2220      	movs	r2, #32
   1ef3c:	460d      	mov	r5, r1
   1ef3e:	2100      	movs	r1, #0
   1ef40:	4604      	mov	r4, r0
	void *data = parser->data; /* preserve application data */
   1ef42:	6986      	ldr	r6, [r0, #24]
   1ef44:	f002 febf 	bl	21cc6 <memset>

	(void)memset(parser, 0, sizeof(*parser));
	parser->data = data;
	parser->type = t;
   1ef48:	f04f 0300 	mov.w	r3, #0
   1ef4c:	f365 0301 	bfi	r3, r5, #0, #2
	parser->data = data;
   1ef50:	61a6      	str	r6, [r4, #24]
	parser->type = t;
   1ef52:	7023      	strb	r3, [r4, #0]
	parser->state =
		(t == HTTP_REQUEST ? s_start_req :
   1ef54:	b145      	cbz	r5, 1ef68 <http_parser_init+0x30>
   1ef56:	2d01      	cmp	r5, #1
   1ef58:	bf14      	ite	ne
   1ef5a:	2202      	movne	r2, #2
   1ef5c:	2204      	moveq	r2, #4
	parser->state =
   1ef5e:	6823      	ldr	r3, [r4, #0]
   1ef60:	f362 2390 	bfi	r3, r2, #10, #7
   1ef64:	6023      	str	r3, [r4, #0]
		 (t == HTTP_RESPONSE ? s_start_res : s_start_req_or_res));
	parser->http_errno = HPE_OK;
}
   1ef66:	bd70      	pop	{r4, r5, r6, pc}
		(t == HTTP_REQUEST ? s_start_req :
   1ef68:	2212      	movs	r2, #18
   1ef6a:	e7f8      	b.n	1ef5e <http_parser_init+0x26>

0001ef6c <on_url>:
{
   1ef6c:	b508      	push	{r3, lr}
	if (req->internal.response.http_cb &&
   1ef6e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1ef70:	b113      	cbz	r3, 1ef78 <on_url+0xc>
	    req->internal.response.http_cb->on_url) {
   1ef72:	685b      	ldr	r3, [r3, #4]
	if (req->internal.response.http_cb &&
   1ef74:	b103      	cbz	r3, 1ef78 <on_url+0xc>
		req->internal.response.http_cb->on_url(parser, at, length);
   1ef76:	4798      	blx	r3
}
   1ef78:	2000      	movs	r0, #0
   1ef7a:	bd08      	pop	{r3, pc}

0001ef7c <on_body>:
{
   1ef7c:	b538      	push	{r3, r4, r5, lr}
	req->internal.response.body_found = 1;
   1ef7e:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
{
   1ef82:	4604      	mov	r4, r0
	req->internal.response.body_found = 1;
   1ef84:	f043 0302 	orr.w	r3, r3, #2
   1ef88:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
	req->internal.response.processed += length;
   1ef8c:	6e83      	ldr	r3, [r0, #104]	; 0x68
{
   1ef8e:	460d      	mov	r5, r1
	req->internal.response.processed += length;
   1ef90:	4413      	add	r3, r2
   1ef92:	6683      	str	r3, [r0, #104]	; 0x68
	if (req->internal.response.http_cb &&
   1ef94:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1ef96:	b113      	cbz	r3, 1ef9e <on_body+0x22>
	    req->internal.response.http_cb->on_body) {
   1ef98:	699b      	ldr	r3, [r3, #24]
	if (req->internal.response.http_cb &&
   1ef9a:	b103      	cbz	r3, 1ef9e <on_body+0x22>
		req->internal.response.http_cb->on_body(parser, at, length);
   1ef9c:	4798      	blx	r3
	if (!req->internal.response.body_frag_start) {
   1ef9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1efa0:	b903      	cbnz	r3, 1efa4 <on_body+0x28>
		req->internal.response.body_frag_start = (uint8_t *)at;
   1efa2:	6525      	str	r5, [r4, #80]	; 0x50
		(req->internal.response.body_frag_start - req->internal.response.recv_buf);
   1efa4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1efa6:	6da2      	ldr	r2, [r4, #88]	; 0x58
}
   1efa8:	2000      	movs	r0, #0
		(req->internal.response.body_frag_start - req->internal.response.recv_buf);
   1efaa:	1a9a      	subs	r2, r3, r2
	req->internal.response.body_frag_len = req->internal.response.data_len -
   1efac:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1efae:	1a9b      	subs	r3, r3, r2
   1efb0:	6563      	str	r3, [r4, #84]	; 0x54
}
   1efb2:	bd38      	pop	{r3, r4, r5, pc}

0001efb4 <on_message_begin>:
{
   1efb4:	b508      	push	{r3, lr}
	if (req->internal.response.http_cb &&
   1efb6:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1efb8:	b113      	cbz	r3, 1efc0 <on_message_begin+0xc>
	    req->internal.response.http_cb->on_message_begin) {
   1efba:	681b      	ldr	r3, [r3, #0]
	if (req->internal.response.http_cb &&
   1efbc:	b103      	cbz	r3, 1efc0 <on_message_begin+0xc>
		req->internal.response.http_cb->on_message_begin(parser);
   1efbe:	4798      	blx	r3
}
   1efc0:	2000      	movs	r0, #0
   1efc2:	bd08      	pop	{r3, pc}

0001efc4 <on_message_complete>:
{
   1efc4:	b510      	push	{r4, lr}
	if (req->internal.response.http_cb &&
   1efc6:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   1efc8:	4604      	mov	r4, r0
	if (req->internal.response.http_cb &&
   1efca:	b113      	cbz	r3, 1efd2 <on_message_complete+0xe>
	    req->internal.response.http_cb->on_message_complete) {
   1efcc:	69db      	ldr	r3, [r3, #28]
	if (req->internal.response.http_cb &&
   1efce:	b103      	cbz	r3, 1efd2 <on_message_complete+0xe>
		req->internal.response.http_cb->on_message_complete(parser);
   1efd0:	4798      	blx	r3
	req->internal.response.message_complete = 1;
   1efd2:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
}
   1efd6:	2000      	movs	r0, #0
	req->internal.response.message_complete = 1;
   1efd8:	f043 0304 	orr.w	r3, r3, #4
   1efdc:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
}
   1efe0:	bd10      	pop	{r4, pc}

0001efe2 <on_chunk_header>:
{
   1efe2:	b508      	push	{r3, lr}
	if (req->internal.response.http_cb &&
   1efe4:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1efe6:	b113      	cbz	r3, 1efee <on_chunk_header+0xc>
	    req->internal.response.http_cb->on_chunk_header) {
   1efe8:	6a1b      	ldr	r3, [r3, #32]
	if (req->internal.response.http_cb &&
   1efea:	b103      	cbz	r3, 1efee <on_chunk_header+0xc>
		req->internal.response.http_cb->on_chunk_header(parser);
   1efec:	4798      	blx	r3
}
   1efee:	2000      	movs	r0, #0
   1eff0:	bd08      	pop	{r3, pc}

0001eff2 <on_chunk_complete>:
{
   1eff2:	b508      	push	{r3, lr}
	if (req->internal.response.http_cb &&
   1eff4:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1eff6:	b113      	cbz	r3, 1effe <on_chunk_complete+0xc>
	    req->internal.response.http_cb->on_chunk_complete) {
   1eff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	if (req->internal.response.http_cb &&
   1effa:	b103      	cbz	r3, 1effe <on_chunk_complete+0xc>
		req->internal.response.http_cb->on_chunk_complete(parser);
   1effc:	4798      	blx	r3
}
   1effe:	2000      	movs	r0, #0
   1f000:	bd08      	pop	{r3, pc}

0001f002 <on_headers_complete>:
{
   1f002:	b510      	push	{r4, lr}
	if (req->internal.response.http_cb &&
   1f004:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   1f006:	4604      	mov	r4, r0
	if (req->internal.response.http_cb &&
   1f008:	b113      	cbz	r3, 1f010 <on_headers_complete+0xe>
	    req->internal.response.http_cb->on_headers_complete) {
   1f00a:	695b      	ldr	r3, [r3, #20]
	if (req->internal.response.http_cb &&
   1f00c:	b103      	cbz	r3, 1f010 <on_headers_complete+0xe>
		req->internal.response.http_cb->on_headers_complete(parser);
   1f00e:	4798      	blx	r3
	if (parser->status_code >= 500 && parser->status_code < 600) {
   1f010:	8aa3      	ldrh	r3, [r4, #20]
   1f012:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
   1f016:	b29b      	uxth	r3, r3
   1f018:	2b63      	cmp	r3, #99	; 0x63
   1f01a:	d90a      	bls.n	1f032 <on_headers_complete+0x30>
	if ((req->method == HTTP_HEAD || req->method == HTTP_OPTIONS) &&
   1f01c:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
   1f020:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1f024:	2b02      	cmp	r3, #2
   1f026:	d106      	bne.n	1f036 <on_headers_complete+0x34>
   1f028:	6e60      	ldr	r0, [r4, #100]	; 0x64
   1f02a:	3800      	subs	r0, #0
   1f02c:	bf18      	it	ne
   1f02e:	2001      	movne	r0, #1
}
   1f030:	bd10      	pop	{r4, pc}
		return 1;
   1f032:	2001      	movs	r0, #1
   1f034:	e7fc      	b.n	1f030 <on_headers_complete+0x2e>
	return 0;
   1f036:	2000      	movs	r0, #0
   1f038:	e7fa      	b.n	1f030 <on_headers_complete+0x2e>

0001f03a <on_status>:
	len = MIN(length, sizeof(req->internal.response.http_status) - 1);
   1f03a:	2a1f      	cmp	r2, #31
{
   1f03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	len = MIN(length, sizeof(req->internal.response.http_status) - 1);
   1f03e:	4616      	mov	r6, r2
   1f040:	bf28      	it	cs
   1f042:	261f      	movcs	r6, #31
{
   1f044:	4604      	mov	r4, r0
   1f046:	4615      	mov	r5, r2
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1f048:	306c      	adds	r0, #108	; 0x6c
   1f04a:	4632      	mov	r2, r6
   1f04c:	460f      	mov	r7, r1
   1f04e:	f002 fe13 	bl	21c78 <memcpy>
	req->internal.response.http_status[len] = 0;
   1f052:	2300      	movs	r3, #0
   1f054:	4426      	add	r6, r4
   1f056:	f886 306c 	strb.w	r3, [r6, #108]	; 0x6c
	req->internal.response.http_status_code =
   1f05a:	8aa3      	ldrh	r3, [r4, #20]
   1f05c:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
	if (req->internal.response.http_cb &&
   1f060:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1f062:	b12b      	cbz	r3, 1f070 <on_status+0x36>
	    req->internal.response.http_cb->on_status) {
   1f064:	689b      	ldr	r3, [r3, #8]
	if (req->internal.response.http_cb &&
   1f066:	b11b      	cbz	r3, 1f070 <on_status+0x36>
		req->internal.response.http_cb->on_status(parser, at, length);
   1f068:	462a      	mov	r2, r5
   1f06a:	4639      	mov	r1, r7
   1f06c:	4620      	mov	r0, r4
   1f06e:	4798      	blx	r3
}
   1f070:	2000      	movs	r0, #0
   1f072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f074 <on_header_value>:
{
   1f074:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (req->internal.response.cl_present) {
   1f076:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
{
   1f07a:	4604      	mov	r4, r0
	if (req->internal.response.cl_present) {
   1f07c:	07db      	lsls	r3, r3, #31
{
   1f07e:	460e      	mov	r6, r1
   1f080:	4615      	mov	r5, r2
	if (req->internal.response.cl_present) {
   1f082:	d51a      	bpl.n	1f0ba <on_header_value+0x46>
		if (length <= MAX_NUM_DIGITS - 1) {
   1f084:	2a0f      	cmp	r2, #15
   1f086:	d812      	bhi.n	1f0ae <on_header_value+0x3a>
			memcpy(str, at, length);
   1f088:	4668      	mov	r0, sp
   1f08a:	f002 fdf5 	bl	21c78 <memcpy>
			str[length] = 0;
   1f08e:	2100      	movs	r1, #0
   1f090:	f105 0310 	add.w	r3, r5, #16
   1f094:	446b      	add	r3, sp
			num = strtol(str, NULL, 10);
   1f096:	220a      	movs	r2, #10
   1f098:	4668      	mov	r0, sp
			str[length] = 0;
   1f09a:	f803 1c10 	strb.w	r1, [r3, #-16]
			num = strtol(str, NULL, 10);
   1f09e:	f7fd f835 	bl	1c10c <strtol>
			if (num == LONG_MIN || num == LONG_MAX) {
   1f0a2:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   1f0a6:	3b01      	subs	r3, #1
   1f0a8:	3303      	adds	r3, #3
   1f0aa:	d812      	bhi.n	1f0d2 <on_header_value+0x5e>
			req->internal.response.content_length = num;
   1f0ac:	6660      	str	r0, [r4, #100]	; 0x64
		req->internal.response.cl_present = false;
   1f0ae:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   1f0b2:	f36f 0300 	bfc	r3, #0, #1
   1f0b6:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	if (req->internal.response.http_cb &&
   1f0ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1f0bc:	b10b      	cbz	r3, 1f0c2 <on_header_value+0x4e>
	    req->internal.response.http_cb->on_header_value) {
   1f0be:	691b      	ldr	r3, [r3, #16]
	if (req->internal.response.http_cb &&
   1f0c0:	b913      	cbnz	r3, 1f0c8 <on_header_value+0x54>
	return 0;
   1f0c2:	2000      	movs	r0, #0
}
   1f0c4:	b004      	add	sp, #16
   1f0c6:	bd70      	pop	{r4, r5, r6, pc}
		req->internal.response.http_cb->on_header_value(parser, at,
   1f0c8:	462a      	mov	r2, r5
   1f0ca:	4631      	mov	r1, r6
   1f0cc:	4620      	mov	r0, r4
   1f0ce:	4798      	blx	r3
   1f0d0:	e7f7      	b.n	1f0c2 <on_header_value+0x4e>
				return -EINVAL;
   1f0d2:	f06f 0015 	mvn.w	r0, #21
   1f0d6:	e7f5      	b.n	1f0c4 <on_header_value+0x50>

0001f0d8 <sendall>:
{
   1f0d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f0da:	4606      	mov	r6, r0
   1f0dc:	460d      	mov	r5, r1
   1f0de:	4614      	mov	r4, r2
   1f0e0:	2700      	movs	r7, #0
	while (len) {
   1f0e2:	b90c      	cbnz	r4, 1f0e8 <sendall+0x10>
	return 0;
   1f0e4:	4620      	mov	r0, r4
   1f0e6:	e00d      	b.n	1f104 <sendall+0x2c>
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1f0e8:	2300      	movs	r3, #0
   1f0ea:	4622      	mov	r2, r4
   1f0ec:	4629      	mov	r1, r5
   1f0ee:	4630      	mov	r0, r6
   1f0f0:	e9cd 7700 	strd	r7, r7, [sp]
   1f0f4:	f7ff fc55 	bl	1e9a2 <z_impl_zsock_sendto>
		if (out_len < 0) {
   1f0f8:	1e03      	subs	r3, r0, #0
   1f0fa:	da05      	bge.n	1f108 <sendall+0x30>
			return -errno;
   1f0fc:	f7ff fdd0 	bl	1eca0 <__errno>
   1f100:	6800      	ldr	r0, [r0, #0]
   1f102:	4240      	negs	r0, r0
}
   1f104:	b003      	add	sp, #12
   1f106:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = (const char *)buf + out_len;
   1f108:	441d      	add	r5, r3
		len -= out_len;
   1f10a:	1ae4      	subs	r4, r4, r3
   1f10c:	e7e9      	b.n	1f0e2 <sendall+0xa>

0001f10e <http_send_data.constprop.0>:
static int http_send_data(int sock, char *send_buf,
   1f10e:	b408      	push	{r3}
   1f110:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f114:	4680      	mov	r8, r0
   1f116:	460d      	mov	r5, r1
	int sent = 0;
   1f118:	2600      	movs	r6, #0
static int http_send_data(int sock, char *send_buf,
   1f11a:	ab0d      	add	r3, sp, #52	; 0x34
   1f11c:	f853 ab04 	ldr.w	sl, [r3], #4
	data = va_arg(va, const char *);
   1f120:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1f122:	3304      	adds	r3, #4
	int ret, end_of_send = *send_buf_pos;
   1f124:	f8da 4000 	ldr.w	r4, [sl]
	data = va_arg(va, const char *);
   1f128:	9303      	str	r3, [sp, #12]
	while (data) {
   1f12a:	b95f      	cbnz	r7, 1f144 <http_send_data.constprop.0+0x36>
	if (end_of_send > (int)send_buf_max_len) {
   1f12c:	2cc0      	cmp	r4, #192	; 0xc0
	return sent;
   1f12e:	bfd6      	itet	le
   1f130:	4630      	movle	r0, r6
		return -EMSGSIZE;
   1f132:	f06f 0079 	mvngt.w	r0, #121	; 0x79
	*send_buf_pos = end_of_send;
   1f136:	f8ca 4000 	strle.w	r4, [sl]
}
   1f13a:	b004      	add	sp, #16
   1f13c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f140:	b001      	add	sp, #4
   1f142:	4770      	bx	lr
		end_of_data = 0;
   1f144:	f04f 0900 	mov.w	r9, #0
			remaining_len = strlen(data + end_of_data);
   1f148:	eb07 0109 	add.w	r1, r7, r9
   1f14c:	4608      	mov	r0, r1
   1f14e:	9101      	str	r1, [sp, #4]
   1f150:	f7e9 fef5 	bl	8f3e <strlen>
   1f154:	4602      	mov	r2, r0
			to_be_copied = send_buf_max_len - end_of_send;
   1f156:	f1c4 0bc0 	rsb	fp, r4, #192	; 0xc0
			if (remaining_len > to_be_copied) {
   1f15a:	455a      	cmp	r2, fp
   1f15c:	9901      	ldr	r1, [sp, #4]
				strncpy(send_buf + end_of_send,
   1f15e:	eb05 0004 	add.w	r0, r5, r4
			if (remaining_len > to_be_copied) {
   1f162:	dd0d      	ble.n	1f180 <http_send_data.constprop.0+0x72>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1f164:	465a      	mov	r2, fp
   1f166:	f002 ff35 	bl	21fd4 <strncpy>
				ret = sendall(sock, send_buf, end_of_send);
   1f16a:	22c0      	movs	r2, #192	; 0xc0
   1f16c:	4629      	mov	r1, r5
   1f16e:	4640      	mov	r0, r8
   1f170:	f7ff ffb2 	bl	1f0d8 <sendall>
				if (ret < 0) {
   1f174:	2800      	cmp	r0, #0
   1f176:	dbe0      	blt.n	1f13a <http_send_data.constprop.0+0x2c>
				end_of_send = 0;
   1f178:	2400      	movs	r4, #0
				end_of_data += to_be_copied;
   1f17a:	44d9      	add	r9, fp
				sent += end_of_send;
   1f17c:	36c0      	adds	r6, #192	; 0xc0
		} while (remaining_len > 0);
   1f17e:	e7e3      	b.n	1f148 <http_send_data.constprop.0+0x3a>
   1f180:	9201      	str	r2, [sp, #4]
   1f182:	f002 ff27 	bl	21fd4 <strncpy>
		data = va_arg(va, const char *);
   1f186:	9b03      	ldr	r3, [sp, #12]
				end_of_send += remaining_len;
   1f188:	9a01      	ldr	r2, [sp, #4]
		data = va_arg(va, const char *);
   1f18a:	681f      	ldr	r7, [r3, #0]
				end_of_send += remaining_len;
   1f18c:	4414      	add	r4, r2
		data = va_arg(va, const char *);
   1f18e:	1d1a      	adds	r2, r3, #4
   1f190:	9203      	str	r2, [sp, #12]
   1f192:	e7ca      	b.n	1f12a <http_send_data.constprop.0+0x1c>

0001f194 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1f194:	220c      	movs	r2, #12
   1f196:	6903      	ldr	r3, [r0, #16]
   1f198:	b2c9      	uxtb	r1, r1
   1f19a:	fb01 3302 	mla	r3, r1, r2, r3
   1f19e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   1f1a0:	f000 0007 	and.w	r0, r0, #7
   1f1a4:	4770      	bx	lr

0001f1a6 <set_on_state>:
	__asm__ volatile(
   1f1a6:	f04f 0320 	mov.w	r3, #32
   1f1aa:	f3ef 8211 	mrs	r2, BASEPRI
   1f1ae:	f383 8812 	msr	BASEPRI_MAX, r3
   1f1b2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1f1b6:	6803      	ldr	r3, [r0, #0]
   1f1b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f1bc:	f043 0302 	orr.w	r3, r3, #2
   1f1c0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1f1c2:	f382 8811 	msr	BASEPRI, r2
   1f1c6:	f3bf 8f6f 	isb	sy
}
   1f1ca:	4770      	bx	lr

0001f1cc <stop>:
{
   1f1cc:	b570      	push	{r4, r5, r6, lr}
   1f1ce:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   1f1d0:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   1f1d2:	f04f 0420 	mov.w	r4, #32
   1f1d6:	f3ef 8511 	mrs	r5, BASEPRI
   1f1da:	f384 8812 	msr	BASEPRI_MAX, r4
   1f1de:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1f1e2:	260c      	movs	r6, #12
   1f1e4:	fb06 3401 	mla	r4, r6, r1, r3
   1f1e8:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1f1ea:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1f1ee:	d008      	beq.n	1f202 <stop+0x36>
   1f1f0:	42a2      	cmp	r2, r4
   1f1f2:	d006      	beq.n	1f202 <stop+0x36>
	__asm__ volatile(
   1f1f4:	f385 8811 	msr	BASEPRI, r5
   1f1f8:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1f1fc:	f04f 30ff 	mov.w	r0, #4294967295
}
   1f200:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1f202:	2201      	movs	r2, #1
   1f204:	4371      	muls	r1, r6
   1f206:	440b      	add	r3, r1
   1f208:	641a      	str	r2, [r3, #64]	; 0x40
   1f20a:	f385 8811 	msr	BASEPRI, r5
   1f20e:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1f212:	6843      	ldr	r3, [r0, #4]
   1f214:	440b      	add	r3, r1
   1f216:	685b      	ldr	r3, [r3, #4]
   1f218:	4798      	blx	r3
	return 0;
   1f21a:	2000      	movs	r0, #0
   1f21c:	e7f0      	b.n	1f200 <stop+0x34>

0001f21e <api_stop>:
	return stop(dev, subsys, CTX_API);
   1f21e:	2280      	movs	r2, #128	; 0x80
   1f220:	f7ff bfd4 	b.w	1f1cc <stop>

0001f224 <async_start>:
{
   1f224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f226:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1f228:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   1f22a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1f22c:	f04f 0520 	mov.w	r5, #32
   1f230:	f3ef 8611 	mrs	r6, BASEPRI
   1f234:	f385 8812 	msr	BASEPRI_MAX, r5
   1f238:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1f23c:	250c      	movs	r5, #12
   1f23e:	4369      	muls	r1, r5
   1f240:	440c      	add	r4, r1
   1f242:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1f244:	f005 0c07 	and.w	ip, r5, #7
   1f248:	f1bc 0f01 	cmp.w	ip, #1
   1f24c:	d10b      	bne.n	1f266 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1f24e:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   1f250:	f386 8811 	msr	BASEPRI, r6
   1f254:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   1f258:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1f25c:	6843      	ldr	r3, [r0, #4]
   1f25e:	585b      	ldr	r3, [r3, r1]
   1f260:	4798      	blx	r3
	return 0;
   1f262:	2000      	movs	r0, #0
}
   1f264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1f266:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1f26a:	42af      	cmp	r7, r5
   1f26c:	f386 8811 	msr	BASEPRI, r6
   1f270:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   1f274:	bf0c      	ite	eq
   1f276:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   1f27a:	f04f 30ff 	movne.w	r0, #4294967295
   1f27e:	e7f1      	b.n	1f264 <async_start+0x40>

0001f280 <api_start>:
{
   1f280:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1f282:	2480      	movs	r4, #128	; 0x80
   1f284:	9400      	str	r4, [sp, #0]
   1f286:	f7ff ffcd 	bl	1f224 <async_start>
}
   1f28a:	b002      	add	sp, #8
   1f28c:	bd10      	pop	{r4, pc}

0001f28e <onoff_started_callback>:
{
   1f28e:	b410      	push	{r4}
	notify(mgr, 0);
   1f290:	241c      	movs	r4, #28
	return &data->mgr[type];
   1f292:	6900      	ldr	r0, [r0, #16]
   1f294:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1f296:	fb03 0004 	mla	r0, r3, r4, r0
   1f29a:	2100      	movs	r1, #0
}
   1f29c:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   1f2a0:	4710      	bx	r2

0001f2a2 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1f2a2:	2000      	movs	r0, #0
   1f2a4:	f7f8 b82e 	b.w	17304 <nrfx_clock_start>

0001f2a8 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1f2a8:	2000      	movs	r0, #0
   1f2aa:	f001 b81d 	b.w	202e8 <nrfx_clock_stop>

0001f2ae <blocking_start_callback>:
{
   1f2ae:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1f2b0:	f7fb bad0 	b.w	1a854 <z_impl_k_sem_give>

0001f2b4 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   1f2b4:	4608      	mov	r0, r1
   1f2b6:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   1f2b8:	4611      	mov	r1, r2
   1f2ba:	f7f7 fcc9 	bl	16c50 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   1f2be:	2800      	cmp	r0, #0
	}

	return 0;
}
   1f2c0:	bf18      	it	ne
   1f2c2:	f06f 0004 	mvnne.w	r0, #4
   1f2c6:	bd08      	pop	{r3, pc}

0001f2c8 <entropy_psa_crypto_rng_init>:
{
   1f2c8:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   1f2ca:	f000 fefd 	bl	200c8 <psa_crypto_init>
		return -EIO;
   1f2ce:	2800      	cmp	r0, #0
}
   1f2d0:	bf18      	it	ne
   1f2d2:	f06f 0004 	mvnne.w	r0, #4
   1f2d6:	bd08      	pop	{r3, pc}

0001f2d8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f2d8:	6843      	ldr	r3, [r0, #4]
}
   1f2da:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f2dc:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1f2de:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1f2e0:	600b      	str	r3, [r1, #0]
}
   1f2e2:	4770      	bx	lr

0001f2e4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f2e4:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   1f2e6:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f2ea:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   1f2ec:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   1f2f0:	6098      	str	r0, [r3, #8]
}
   1f2f2:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1f2f4:	60d9      	str	r1, [r3, #12]
   1f2f6:	4770      	bx	lr

0001f2f8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f2f8:	6843      	ldr	r3, [r0, #4]
}
   1f2fa:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f2fc:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1f2fe:	6099      	str	r1, [r3, #8]
}
   1f300:	4770      	bx	lr

0001f302 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f302:	6843      	ldr	r3, [r0, #4]
}
   1f304:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f306:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1f308:	60d9      	str	r1, [r3, #12]
}
   1f30a:	4770      	bx	lr

0001f30c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f30c:	6843      	ldr	r3, [r0, #4]
   1f30e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1f310:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   1f312:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   1f316:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   1f318:	6090      	str	r0, [r2, #8]
}
   1f31a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1f31c:	60d3      	str	r3, [r2, #12]
   1f31e:	4770      	bx	lr

0001f320 <gpio_nrfx_manage_callback>:
{
   1f320:	b510      	push	{r4, lr}
	return port->data;
   1f322:	6903      	ldr	r3, [r0, #16]
	return list->head;
   1f324:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   1f326:	b1f8      	cbz	r0, 1f368 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f328:	4288      	cmp	r0, r1
   1f32a:	d119      	bne.n	1f360 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   1f32c:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1f32e:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f330:	42a1      	cmp	r1, r4
	list->head = node;
   1f332:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f334:	d100      	bne.n	1f338 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   1f336:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1f338:	2000      	movs	r0, #0
   1f33a:	6008      	str	r0, [r1, #0]
	if (set) {
   1f33c:	b12a      	cbz	r2, 1f34a <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   1f33e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1f340:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f342:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1f344:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f346:	b902      	cbnz	r2, 1f34a <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   1f348:	6099      	str	r1, [r3, #8]
	return 0;
   1f34a:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1f34c:	e010      	b.n	1f370 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f34e:	4281      	cmp	r1, r0
   1f350:	d106      	bne.n	1f360 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   1f352:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1f354:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f356:	6898      	ldr	r0, [r3, #8]
   1f358:	4281      	cmp	r1, r0
   1f35a:	d1ed      	bne.n	1f338 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   1f35c:	609c      	str	r4, [r3, #8]
}
   1f35e:	e7eb      	b.n	1f338 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   1f360:	4604      	mov	r4, r0
   1f362:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f364:	2800      	cmp	r0, #0
   1f366:	d1f2      	bne.n	1f34e <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   1f368:	2a00      	cmp	r2, #0
   1f36a:	d1e8      	bne.n	1f33e <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   1f36c:	f06f 0015 	mvn.w	r0, #21
}
   1f370:	bd10      	pop	{r4, pc}

0001f372 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1f372:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   1f374:	6843      	ldr	r3, [r0, #4]
   1f376:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   1f378:	7a05      	ldrb	r5, [r0, #8]
   1f37a:	6844      	ldr	r4, [r0, #4]
   1f37c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1f380:	42a3      	cmp	r3, r4
   1f382:	d302      	bcc.n	1f38a <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   1f384:	f06f 0001 	mvn.w	r0, #1
}
   1f388:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   1f38a:	795c      	ldrb	r4, [r3, #5]
   1f38c:	428c      	cmp	r4, r1
   1f38e:	d001      	beq.n	1f394 <pinctrl_lookup_state+0x22>
		(*state)++;
   1f390:	3308      	adds	r3, #8
   1f392:	e7f0      	b.n	1f376 <pinctrl_lookup_state+0x4>
			return 0;
   1f394:	2000      	movs	r0, #0
   1f396:	e7f7      	b.n	1f388 <pinctrl_lookup_state+0x16>

0001f398 <uarte_nrfx_config_get>:
{
   1f398:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   1f39a:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   1f39c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1f3a0:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1f3a4:	2000      	movs	r0, #0
   1f3a6:	4770      	bx	lr

0001f3a8 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1f3a8:	6843      	ldr	r3, [r0, #4]
   1f3aa:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1f3ac:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1f3b0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1f3b4:	4770      	bx	lr

0001f3b6 <tx_start>:
{
   1f3b6:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1f3b8:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   1f3ba:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1f3bc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1f3c0:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f3c4:	2200      	movs	r2, #0
   1f3c6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1f3ca:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1f3ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   1f3d2:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1f3d6:	6862      	ldr	r2, [r4, #4]
   1f3d8:	06d2      	lsls	r2, r2, #27
   1f3da:	d508      	bpl.n	1f3ee <tx_start+0x38>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1f3dc:	2108      	movs	r1, #8
	return config->uarte_regs;
   1f3de:	6842      	ldr	r2, [r0, #4]
   1f3e0:	6812      	ldr	r2, [r2, #0]
   1f3e2:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1f3e6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1f3ea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f3ee:	2201      	movs	r2, #1
   1f3f0:	609a      	str	r2, [r3, #8]
}
   1f3f2:	bd10      	pop	{r4, pc}

0001f3f4 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1f3f4:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   1f3f6:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1f3f8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f3fa:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1f3fe:	b150      	cbz	r0, 1f416 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f400:	2000      	movs	r0, #0
	*c = *data->rx_data;
   1f402:	6992      	ldr	r2, [r2, #24]
   1f404:	7812      	ldrb	r2, [r2, #0]
   1f406:	700a      	strb	r2, [r1, #0]
   1f408:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1f40c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f410:	2201      	movs	r2, #1
   1f412:	601a      	str	r2, [r3, #0]
	return 0;
   1f414:	4770      	bx	lr
		return -1;
   1f416:	f04f 30ff 	mov.w	r0, #4294967295
}
   1f41a:	4770      	bx	lr

0001f41c <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1f41c:	2a00      	cmp	r2, #0
{
   1f41e:	b510      	push	{r4, lr}
   1f420:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1f422:	dd10      	ble.n	1f446 <uarte_nrfx_fifo_read+0x2a>
	return config->uarte_regs;
   1f424:	6843      	ldr	r3, [r0, #4]
   1f426:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f428:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1f42c:	b150      	cbz	r0, 1f444 <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f42e:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = dev->data;
   1f430:	6922      	ldr	r2, [r4, #16]
   1f432:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1f436:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f43a:	2001      	movs	r0, #1
		rx_data[num_rx++] = *data->rx_data;
   1f43c:	6992      	ldr	r2, [r2, #24]
   1f43e:	7812      	ldrb	r2, [r2, #0]
   1f440:	700a      	strb	r2, [r1, #0]
   1f442:	6018      	str	r0, [r3, #0]
}
   1f444:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   1f446:	2000      	movs	r0, #0
   1f448:	e7fc      	b.n	1f444 <uarte_nrfx_fifo_read+0x28>

0001f44a <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   1f44a:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   1f44c:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   1f44e:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   1f450:	f04f 0020 	mov.w	r0, #32
   1f454:	f3ef 8311 	mrs	r3, BASEPRI
   1f458:	f380 8812 	msr	BASEPRI_MAX, r0
   1f45c:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   1f460:	2000      	movs	r0, #0
   1f462:	68c9      	ldr	r1, [r1, #12]
   1f464:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   1f466:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1f46a:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1f46e:	f383 8811 	msr	BASEPRI, r3
   1f472:	f3bf 8f6f 	isb	sy
}
   1f476:	4770      	bx	lr

0001f478 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1f478:	2201      	movs	r2, #1
   1f47a:	6903      	ldr	r3, [r0, #16]
   1f47c:	68db      	ldr	r3, [r3, #12]
   1f47e:	739a      	strb	r2, [r3, #14]
}
   1f480:	4770      	bx	lr

0001f482 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   1f482:	6903      	ldr	r3, [r0, #16]
   1f484:	68db      	ldr	r3, [r3, #12]
   1f486:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1f488:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1f48c:	b962      	cbnz	r2, 1f4a8 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   1f48e:	6842      	ldr	r2, [r0, #4]
   1f490:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f492:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   1f496:	b140      	cbz	r0, 1f4aa <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   1f498:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1f49c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1f4a0:	d003      	beq.n	1f4aa <uarte_nrfx_irq_tx_ready_complete+0x28>
   1f4a2:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   1f4a4:	6119      	str	r1, [r3, #16]
   1f4a6:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1f4a8:	2000      	movs	r0, #0
}
   1f4aa:	4770      	bx	lr

0001f4ac <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   1f4ac:	6843      	ldr	r3, [r0, #4]
   1f4ae:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f4b0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1f4b4:	3800      	subs	r0, #0
   1f4b6:	bf18      	it	ne
   1f4b8:	2001      	movne	r0, #1
   1f4ba:	4770      	bx	lr

0001f4bc <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1f4bc:	2210      	movs	r2, #16
	return config->uarte_regs;
   1f4be:	6843      	ldr	r3, [r0, #4]
   1f4c0:	681b      	ldr	r3, [r3, #0]
   1f4c2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1f4c6:	4770      	bx	lr

0001f4c8 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1f4c8:	2210      	movs	r2, #16
	return config->uarte_regs;
   1f4ca:	6843      	ldr	r3, [r0, #4]
   1f4cc:	681b      	ldr	r3, [r3, #0]
   1f4ce:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1f4d2:	4770      	bx	lr

0001f4d4 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1f4d4:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1f4d8:	6843      	ldr	r3, [r0, #4]
   1f4da:	681b      	ldr	r3, [r3, #0]
   1f4dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1f4e0:	4770      	bx	lr

0001f4e2 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1f4e2:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1f4e6:	6843      	ldr	r3, [r0, #4]
   1f4e8:	681b      	ldr	r3, [r3, #0]
   1f4ea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1f4ee:	4770      	bx	lr

0001f4f0 <uarte_nrfx_irq_is_pending>:
{
   1f4f0:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   1f4f2:	6843      	ldr	r3, [r0, #4]
{
   1f4f4:	4604      	mov	r4, r0
	return config->uarte_regs;
   1f4f6:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1f4f8:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   1f4fc:	025b      	lsls	r3, r3, #9
   1f4fe:	d405      	bmi.n	1f50c <uarte_nrfx_irq_is_pending+0x1c>
   1f500:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   1f504:	f010 0010 	ands.w	r0, r0, #16
   1f508:	d106      	bne.n	1f518 <uarte_nrfx_irq_is_pending+0x28>
}
   1f50a:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1f50c:	f7ff ffb9 	bl	1f482 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   1f510:	2800      	cmp	r0, #0
   1f512:	d0f5      	beq.n	1f500 <uarte_nrfx_irq_is_pending+0x10>
		||
   1f514:	2001      	movs	r0, #1
   1f516:	e7f8      	b.n	1f50a <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   1f518:	4620      	mov	r0, r4
   1f51a:	f7ff ffc7 	bl	1f4ac <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1f51e:	3800      	subs	r0, #0
   1f520:	bf18      	it	ne
   1f522:	2001      	movne	r0, #1
   1f524:	e7f1      	b.n	1f50a <uarte_nrfx_irq_is_pending+0x1a>

0001f526 <uarte_nrfx_irq_update>:
}
   1f526:	2001      	movs	r0, #1
   1f528:	4770      	bx	lr

0001f52a <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   1f52a:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   1f52c:	68d8      	ldr	r0, [r3, #12]
   1f52e:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   1f530:	68db      	ldr	r3, [r3, #12]
   1f532:	605a      	str	r2, [r3, #4]
}
   1f534:	4770      	bx	lr

0001f536 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1f536:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1f538:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f53a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1f53e:	b940      	cbnz	r0, 1f552 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1f540:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1f542:	079b      	lsls	r3, r3, #30
   1f544:	d406      	bmi.n	1f554 <is_tx_ready.isra.0+0x1e>
   1f546:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1f54a:	3800      	subs	r0, #0
   1f54c:	bf18      	it	ne
   1f54e:	2001      	movne	r0, #1
   1f550:	4770      	bx	lr
   1f552:	2001      	movs	r0, #1
}
   1f554:	4770      	bx	lr

0001f556 <uarte_nrfx_fifo_fill>:
{
   1f556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   1f558:	6906      	ldr	r6, [r0, #16]
{
   1f55a:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
   1f55c:	68f3      	ldr	r3, [r6, #12]
   1f55e:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f560:	3310      	adds	r3, #16
   1f562:	4294      	cmp	r4, r2
   1f564:	bfa8      	it	ge
   1f566:	4614      	movge	r4, r2
   1f568:	2201      	movs	r2, #1
   1f56a:	e8d3 0fef 	ldaex	r0, [r3]
   1f56e:	2800      	cmp	r0, #0
   1f570:	d103      	bne.n	1f57a <uarte_nrfx_fifo_fill+0x24>
   1f572:	e8c3 2fe7 	stlex	r7, r2, [r3]
   1f576:	2f00      	cmp	r7, #0
   1f578:	d1f7      	bne.n	1f56a <uarte_nrfx_fifo_fill+0x14>
   1f57a:	bf0c      	ite	eq
   1f57c:	4613      	moveq	r3, r2
   1f57e:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   1f580:	d11f      	bne.n	1f5c2 <uarte_nrfx_fifo_fill+0x6c>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
   1f582:	68f3      	ldr	r3, [r6, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1f584:	4622      	mov	r2, r4
   1f586:	6898      	ldr	r0, [r3, #8]
   1f588:	f002 fb76 	bl	21c78 <memcpy>
	__asm__ volatile(
   1f58c:	f04f 0320 	mov.w	r3, #32
   1f590:	f3ef 8711 	mrs	r7, BASEPRI
   1f594:	f383 8812 	msr	BASEPRI_MAX, r3
   1f598:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   1f59c:	6868      	ldr	r0, [r5, #4]
   1f59e:	f7ff ffca 	bl	1f536 <is_tx_ready.isra.0>
   1f5a2:	68f3      	ldr	r3, [r6, #12]
   1f5a4:	b938      	cbnz	r0, 1f5b6 <uarte_nrfx_fifo_fill+0x60>
		len = 0;
   1f5a6:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   1f5a8:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   1f5aa:	f387 8811 	msr	BASEPRI, r7
   1f5ae:	f3bf 8f6f 	isb	sy
}
   1f5b2:	4620      	mov	r0, r4
   1f5b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   1f5b6:	4622      	mov	r2, r4
   1f5b8:	4628      	mov	r0, r5
   1f5ba:	6899      	ldr	r1, [r3, #8]
   1f5bc:	f7ff fefb 	bl	1f3b6 <tx_start>
   1f5c0:	e7f3      	b.n	1f5aa <uarte_nrfx_fifo_fill+0x54>
		return 0;
   1f5c2:	461c      	mov	r4, r3
   1f5c4:	e7f5      	b.n	1f5b2 <uarte_nrfx_fifo_fill+0x5c>

0001f5c6 <uarte_nrfx_isr_int>:
{
   1f5c6:	b410      	push	{r4}
	const struct uarte_nrfx_config *config = dev->config;
   1f5c8:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1f5ca:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1f5cc:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1f5d0:	05c9      	lsls	r1, r1, #23
   1f5d2:	d518      	bpl.n	1f606 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f5d4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1f5d8:	b1a9      	cbz	r1, 1f606 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   1f5da:	f04f 0420 	mov.w	r4, #32
   1f5de:	f3ef 8111 	mrs	r1, BASEPRI
   1f5e2:	f384 8812 	msr	BASEPRI_MAX, r4
   1f5e6:	f3bf 8f6f 	isb	sy
   1f5ea:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1f5ee:	b134      	cbz	r4, 1f5fe <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f5f0:	2400      	movs	r4, #0
   1f5f2:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   1f5f6:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f5fa:	2401      	movs	r4, #1
   1f5fc:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   1f5fe:	f381 8811 	msr	BASEPRI, r1
   1f602:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1f606:	6852      	ldr	r2, [r2, #4]
   1f608:	06d2      	lsls	r2, r2, #27
   1f60a:	d51a      	bpl.n	1f642 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   1f60c:	f04f 0220 	mov.w	r2, #32
   1f610:	f3ef 8111 	mrs	r1, BASEPRI
   1f614:	f382 8812 	msr	BASEPRI_MAX, r2
   1f618:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f61c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1f620:	b112      	cbz	r2, 1f628 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1f622:	2200      	movs	r2, #0
   1f624:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   1f628:	6902      	ldr	r2, [r0, #16]
   1f62a:	68d2      	ldr	r2, [r2, #12]
   1f62c:	b10a      	cbz	r2, 1f632 <uarte_nrfx_isr_int+0x6c>
   1f62e:	6912      	ldr	r2, [r2, #16]
   1f630:	b91a      	cbnz	r2, 1f63a <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   1f632:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1f636:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   1f63a:	f381 8811 	msr	BASEPRI, r1
   1f63e:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
   1f642:	6902      	ldr	r2, [r0, #16]
	if (!data->int_driven) {
   1f644:	68d4      	ldr	r4, [r2, #12]
   1f646:	b16c      	cbz	r4, 1f664 <uarte_nrfx_isr_int+0x9e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f648:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1f64c:	b169      	cbz	r1, 1f66a <uarte_nrfx_isr_int+0xa4>
		data->int_driven->fifo_fill_lock = 0;
   1f64e:	2100      	movs	r1, #0
   1f650:	6121      	str	r1, [r4, #16]
		if (data->int_driven->disable_tx_irq) {
   1f652:	68d4      	ldr	r4, [r2, #12]
   1f654:	7ba4      	ldrb	r4, [r4, #14]
   1f656:	b144      	cbz	r4, 1f66a <uarte_nrfx_isr_int+0xa4>
    p_reg->INTENCLR = mask;
   1f658:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1f65c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1f660:	68d3      	ldr	r3, [r2, #12]
   1f662:	7399      	strb	r1, [r3, #14]
}
   1f664:	f85d 4b04 	ldr.w	r4, [sp], #4
   1f668:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f66a:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1f66e:	b121      	cbz	r1, 1f67a <uarte_nrfx_isr_int+0xb4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f670:	2100      	movs	r1, #0
   1f672:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   1f676:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1f67a:	68d2      	ldr	r2, [r2, #12]
   1f67c:	6813      	ldr	r3, [r2, #0]
   1f67e:	2b00      	cmp	r3, #0
   1f680:	d0f0      	beq.n	1f664 <uarte_nrfx_isr_int+0x9e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1f682:	6851      	ldr	r1, [r2, #4]
}
   1f684:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1f688:	4718      	bx	r3

0001f68a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1f68a:	4770      	bx	lr

0001f68c <event_clear>:
   1f68c:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1f68e:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1f692:	009b      	lsls	r3, r3, #2
   1f694:	b29b      	uxth	r3, r3
   1f696:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f69a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1f69e:	601a      	str	r2, [r3, #0]
   1f6a0:	681b      	ldr	r3, [r3, #0]
}
   1f6a2:	4770      	bx	lr

0001f6a4 <sys_clock_cycle_get_32>:
{
   1f6a4:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1f6a6:	f7f1 fbdd 	bl	10e64 <z_nrf_rtc_timer_read>
}
   1f6aa:	bd08      	pop	{r3, pc}

0001f6ac <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   1f6ac:	f002 b914 	b.w	218d8 <z_impl_k_busy_wait>

0001f6b0 <nrf_modem_os_errno_set>:
{
   1f6b0:	b510      	push	{r4, lr}
   1f6b2:	4604      	mov	r4, r0
	errno = err_code;
   1f6b4:	f7ff faf4 	bl	1eca0 <__errno>
   1f6b8:	6004      	str	r4, [r0, #0]
}
   1f6ba:	bd10      	pop	{r4, pc}

0001f6bc <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   1f6bc:	f001 beba 	b.w	21434 <k_is_in_isr>

0001f6c0 <nrf_modem_os_sem_give>:
	z_impl_k_sem_give(sem);
   1f6c0:	f7fb b8c8 	b.w	1a854 <z_impl_k_sem_give>

0001f6c4 <nrf_modem_os_sem_take>:
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   1f6c4:	1c4b      	adds	r3, r1, #1
{
   1f6c6:	b570      	push	{r4, r5, r6, lr}
   1f6c8:	4605      	mov	r5, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   1f6ca:	d017      	beq.n	1f6fc <nrf_modem_os_sem_take+0x38>
   1f6cc:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   1f6d0:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1f6d4:	f240 30e7 	movw	r0, #999	; 0x3e7
   1f6d8:	2100      	movs	r1, #0
   1f6da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f6de:	2300      	movs	r3, #0
   1f6e0:	fbc4 0106 	smlal	r0, r1, r4, r6
   1f6e4:	f7e9 fa84 	bl	8bf0 <__aeabi_uldivmod>
   1f6e8:	4602      	mov	r2, r0
   1f6ea:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1f6ec:	4628      	mov	r0, r5
   1f6ee:	f7fb f8d7 	bl	1a8a0 <z_impl_k_sem_take>
		return -NRF_EAGAIN;
   1f6f2:	2800      	cmp	r0, #0
}
   1f6f4:	bf18      	it	ne
   1f6f6:	f06f 000a 	mvnne.w	r0, #10
   1f6fa:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   1f6fc:	f04f 32ff 	mov.w	r2, #4294967295
   1f700:	4613      	mov	r3, r2
   1f702:	e7f3      	b.n	1f6ec <nrf_modem_os_sem_take+0x28>

0001f704 <nrf91_iface_enable>:
#else
	ARG_UNUSED(iface);
	ARG_UNUSED(enabled);
	return 0;
#endif /* CONFIG_NRF9160_CONNECTIVITY */
}
   1f704:	2000      	movs	r0, #0
   1f706:	4770      	bx	lr

0001f708 <nrf91_socket_offload_setsockopt>:
{
   1f708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f70c:	460e      	mov	r6, r1
   1f70e:	4615      	mov	r5, r2
   1f710:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = { 0 };
   1f712:	2300      	movs	r3, #0
{
   1f714:	b086      	sub	sp, #24
	int sd = OBJ_TO_SD(obj);
   1f716:	f8d0 8000 	ldr.w	r8, [r0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   1f71a:	4629      	mov	r1, r5
   1f71c:	4630      	mov	r0, r6
   1f71e:	aa03      	add	r2, sp, #12
	struct nrf_timeval nrf_timeo = { 0 };
   1f720:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
   1f724:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   1f726:	f7f1 febd 	bl	114a4 <z_to_nrf_optname>
   1f72a:	2800      	cmp	r0, #0
   1f72c:	da08      	bge.n	1f740 <nrf91_socket_offload_setsockopt+0x38>
		errno = ENOPROTOOPT;
   1f72e:	f7ff fab7 	bl	1eca0 <__errno>
   1f732:	236d      	movs	r3, #109	; 0x6d
   1f734:	6003      	str	r3, [r0, #0]
		return -1;
   1f736:	f04f 30ff 	mov.w	r0, #4294967295
}
   1f73a:	b006      	add	sp, #24
   1f73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   1f740:	2e01      	cmp	r6, #1
   1f742:	d111      	bne.n	1f768 <nrf91_socket_offload_setsockopt+0x60>
   1f744:	3d14      	subs	r5, #20
   1f746:	2d01      	cmp	r5, #1
   1f748:	d806      	bhi.n	1f758 <nrf91_socket_offload_setsockopt+0x50>
		if (optval != NULL) {
   1f74a:	b12c      	cbz	r4, 1f758 <nrf91_socket_offload_setsockopt+0x50>
			nrf_optlen = sizeof(struct nrf_timeval);
   1f74c:	2708      	movs	r7, #8
			nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   1f74e:	6823      	ldr	r3, [r4, #0]
   1f750:	9304      	str	r3, [sp, #16]
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1f752:	68a3      	ldr	r3, [r4, #8]
			nrf_optval = &nrf_timeo;
   1f754:	ac04      	add	r4, sp, #16
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1f756:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1f758:	4623      	mov	r3, r4
   1f75a:	4631      	mov	r1, r6
   1f75c:	4640      	mov	r0, r8
   1f75e:	9a03      	ldr	r2, [sp, #12]
   1f760:	9700      	str	r7, [sp, #0]
   1f762:	f7f9 fc13 	bl	18f8c <nrf_setsockopt>
	return retval;
   1f766:	e7e8      	b.n	1f73a <nrf91_socket_offload_setsockopt+0x32>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   1f768:	f5b6 7f8d 	cmp.w	r6, #282	; 0x11a
   1f76c:	d1f4      	bne.n	1f758 <nrf91_socket_offload_setsockopt+0x50>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   1f76e:	2d0c      	cmp	r5, #12
   1f770:	bf08      	it	eq
   1f772:	2704      	moveq	r7, #4
   1f774:	e7f0      	b.n	1f758 <nrf91_socket_offload_setsockopt+0x50>

0001f776 <nrf91_socket_offload_getsockopt>:
{
   1f776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f77a:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   1f77c:	2300      	movs	r3, #0
{
   1f77e:	b086      	sub	sp, #24
   1f780:	460f      	mov	r7, r1
   1f782:	4615      	mov	r5, r2
	struct nrf_timeval nrf_timeo = {0, 0};
   1f784:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   1f788:	2308      	movs	r3, #8
	int sd = OBJ_TO_SD(obj);
   1f78a:	6806      	ldr	r6, [r0, #0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   1f78c:	4629      	mov	r1, r5
   1f78e:	4638      	mov	r0, r7
   1f790:	eb0d 0203 	add.w	r2, sp, r3
{
   1f794:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   1f798:	9303      	str	r3, [sp, #12]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   1f79a:	f7f1 fe83 	bl	114a4 <z_to_nrf_optname>
   1f79e:	2800      	cmp	r0, #0
   1f7a0:	da09      	bge.n	1f7b6 <nrf91_socket_offload_getsockopt+0x40>
		errno = ENOPROTOOPT;
   1f7a2:	f7ff fa7d 	bl	1eca0 <__errno>
   1f7a6:	236d      	movs	r3, #109	; 0x6d
		return -1;
   1f7a8:	f04f 36ff 	mov.w	r6, #4294967295
		errno = ENOPROTOOPT;
   1f7ac:	6003      	str	r3, [r0, #0]
}
   1f7ae:	4630      	mov	r0, r6
   1f7b0:	b006      	add	sp, #24
   1f7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   1f7b6:	2f01      	cmp	r7, #1
   1f7b8:	d11c      	bne.n	1f7f4 <nrf91_socket_offload_getsockopt+0x7e>
   1f7ba:	f1a5 0314 	sub.w	r3, r5, #20
   1f7be:	2b01      	cmp	r3, #1
   1f7c0:	d818      	bhi.n	1f7f4 <nrf91_socket_offload_getsockopt+0x7e>
		nrf_optlen = &nrf_timeo_size;
   1f7c2:	aa03      	add	r2, sp, #12
		nrf_optval = &nrf_timeo;
   1f7c4:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1f7c6:	4630      	mov	r0, r6
   1f7c8:	9200      	str	r2, [sp, #0]
   1f7ca:	4639      	mov	r1, r7
   1f7cc:	9a02      	ldr	r2, [sp, #8]
   1f7ce:	f7f9 fd1b 	bl	19208 <nrf_getsockopt>
	if (retval == 0) {
   1f7d2:	4606      	mov	r6, r0
   1f7d4:	2800      	cmp	r0, #0
   1f7d6:	d1ea      	bne.n	1f7ae <nrf91_socket_offload_getsockopt+0x38>
		if (level == SOL_SOCKET) {
   1f7d8:	2f01      	cmp	r7, #1
   1f7da:	d1e8      	bne.n	1f7ae <nrf91_socket_offload_getsockopt+0x38>
			if (optname == SO_ERROR) {
   1f7dc:	2d04      	cmp	r5, #4
   1f7de:	d10c      	bne.n	1f7fa <nrf91_socket_offload_getsockopt+0x84>
				if (*(int *)optval != 0) {
   1f7e0:	6820      	ldr	r0, [r4, #0]
   1f7e2:	2800      	cmp	r0, #0
   1f7e4:	d0e3      	beq.n	1f7ae <nrf91_socket_offload_getsockopt+0x38>
					nrf_modem_os_errno_set(*(int *)optval);
   1f7e6:	f7ff ff63 	bl	1f6b0 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   1f7ea:	f7ff fa59 	bl	1eca0 <__errno>
   1f7ee:	6803      	ldr	r3, [r0, #0]
   1f7f0:	6023      	str	r3, [r4, #0]
   1f7f2:	e7dc      	b.n	1f7ae <nrf91_socket_offload_getsockopt+0x38>
	nrf_socklen_t *nrf_optlen = (nrf_socklen_t *)optlen;
   1f7f4:	4642      	mov	r2, r8
   1f7f6:	4623      	mov	r3, r4
   1f7f8:	e7e5      	b.n	1f7c6 <nrf91_socket_offload_getsockopt+0x50>
			} else if ((optname == SO_RCVTIMEO) ||
   1f7fa:	3d14      	subs	r5, #20
   1f7fc:	2d01      	cmp	r5, #1
   1f7fe:	d8d6      	bhi.n	1f7ae <nrf91_socket_offload_getsockopt+0x38>
					nrf_timeo.tv_sec;
   1f800:	9b04      	ldr	r3, [sp, #16]
   1f802:	e9c4 3000 	strd	r3, r0, [r4]
				((struct timeval *)optval)->tv_usec =
   1f806:	9b05      	ldr	r3, [sp, #20]
   1f808:	60a3      	str	r3, [r4, #8]
				*optlen = sizeof(struct timeval);
   1f80a:	2310      	movs	r3, #16
   1f80c:	f8c8 3000 	str.w	r3, [r8]
   1f810:	e7cd      	b.n	1f7ae <nrf91_socket_offload_getsockopt+0x38>

0001f812 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   1f812:	6800      	ldr	r0, [r0, #0]
   1f814:	f001 b8e1 	b.w	209da <nrf_listen>

0001f818 <nrf91_socket_offload_freeaddrinfo>:
{
   1f818:	b538      	push	{r3, r4, r5, lr}
   1f81a:	4604      	mov	r4, r0
	while (next != NULL) {
   1f81c:	b904      	cbnz	r4, 1f820 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   1f81e:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   1f820:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   1f822:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   1f824:	f002 f9e9 	bl	21bfa <k_free>
		k_free(this);
   1f828:	4620      	mov	r0, r4
   1f82a:	f002 f9e6 	bl	21bfa <k_free>
		next = next->ai_next;
   1f82e:	462c      	mov	r4, r5
   1f830:	e7f4      	b.n	1f81c <nrf91_socket_offload_freeaddrinfo+0x4>

0001f832 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   1f832:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   1f834:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   1f836:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   1f838:	4603      	mov	r3, r0
{
   1f83a:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   1f83c:	f823 2b04 	strh.w	r2, [r3], #4
   1f840:	f101 0420 	add.w	r4, r1, #32
   1f844:	f101 0210 	add.w	r2, r1, #16
   1f848:	f852 5b04 	ldr.w	r5, [r2], #4
   1f84c:	42a2      	cmp	r2, r4
   1f84e:	f843 5b04 	str.w	r5, [r3], #4
   1f852:	d1f9      	bne.n	1f848 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   1f854:	6a0b      	ldr	r3, [r1, #32]
   1f856:	7503      	strb	r3, [r0, #20]
}
   1f858:	bd30      	pop	{r4, r5, pc}

0001f85a <z_to_nrf_ipv6>:
{
   1f85a:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1f85c:	2124      	movs	r1, #36	; 0x24
{
   1f85e:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1f860:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   1f862:	8841      	ldrh	r1, [r0, #2]
{
   1f864:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   1f866:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   1f868:	2102      	movs	r1, #2
   1f86a:	1d04      	adds	r4, r0, #4
   1f86c:	6059      	str	r1, [r3, #4]
   1f86e:	f103 0610 	add.w	r6, r3, #16
   1f872:	f100 0714 	add.w	r7, r0, #20
   1f876:	4635      	mov	r5, r6
   1f878:	6820      	ldr	r0, [r4, #0]
   1f87a:	6861      	ldr	r1, [r4, #4]
   1f87c:	3408      	adds	r4, #8
   1f87e:	c503      	stmia	r5!, {r0, r1}
   1f880:	42bc      	cmp	r4, r7
   1f882:	462e      	mov	r6, r5
   1f884:	d1f7      	bne.n	1f876 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   1f886:	7d12      	ldrb	r2, [r2, #20]
   1f888:	621a      	str	r2, [r3, #32]
}
   1f88a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f88c <nrf91_socket_offload_sendto>:
{
   1f88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f890:	4604      	mov	r4, r0
   1f892:	b08c      	sub	sp, #48	; 0x30
   1f894:	9812      	ldr	r0, [sp, #72]	; 0x48
   1f896:	460d      	mov	r5, r1
   1f898:	4616      	mov	r6, r2
   1f89a:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   1f89c:	6824      	ldr	r4, [r4, #0]
	if (to == NULL) {
   1f89e:	b930      	cbnz	r0, 1f8ae <nrf91_socket_offload_sendto+0x22>
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   1f8a0:	9013      	str	r0, [sp, #76]	; 0x4c
   1f8a2:	4620      	mov	r0, r4
}
   1f8a4:	b00c      	add	sp, #48	; 0x30
   1f8a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   1f8aa:	f7f9 ba63 	b.w	18d74 <nrf_sendto>
	} else if (to->sa_family == AF_INET) {
   1f8ae:	f8b0 c000 	ldrh.w	ip, [r0]
   1f8b2:	f1bc 0f01 	cmp.w	ip, #1
   1f8b6:	d112      	bne.n	1f8de <nrf91_socket_offload_sendto+0x52>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1f8b8:	2510      	movs	r5, #16
	nrf_out->sin_port = ptr->sin_port;
   1f8ba:	8846      	ldrh	r6, [r0, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1f8bc:	6840      	ldr	r0, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1f8be:	f88d 500c 	strb.w	r5, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1f8c2:	9006      	str	r0, [sp, #24]
		retval = nrf_sendto(sd, buf, len, flags,
   1f8c4:	a803      	add	r0, sp, #12
	nrf_out->sin_port = ptr->sin_port;
   1f8c6:	f8ad 6014 	strh.w	r6, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   1f8ca:	f8cd c010 	str.w	ip, [sp, #16]
		retval = nrf_sendto(sd, buf, len, flags,
   1f8ce:	9501      	str	r5, [sp, #4]
   1f8d0:	9000      	str	r0, [sp, #0]
		retval = nrf_sendto(sd, buf, len, flags,
   1f8d2:	4620      	mov	r0, r4
   1f8d4:	f7f9 fa4e 	bl	18d74 <nrf_sendto>
}
   1f8d8:	b00c      	add	sp, #48	; 0x30
   1f8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET6) {
   1f8de:	f1bc 0f02 	cmp.w	ip, #2
   1f8e2:	d10b      	bne.n	1f8fc <nrf91_socket_offload_sendto+0x70>
		z_to_nrf_ipv6(to, &ipv6);
   1f8e4:	f10d 080c 	add.w	r8, sp, #12
   1f8e8:	4641      	mov	r1, r8
   1f8ea:	f7ff ffb6 	bl	1f85a <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, flags,
   1f8ee:	2324      	movs	r3, #36	; 0x24
   1f8f0:	4632      	mov	r2, r6
   1f8f2:	e9cd 8300 	strd	r8, r3, [sp]
   1f8f6:	4629      	mov	r1, r5
   1f8f8:	463b      	mov	r3, r7
   1f8fa:	e7ea      	b.n	1f8d2 <nrf91_socket_offload_sendto+0x46>
		errno = EAFNOSUPPORT;
   1f8fc:	f7ff f9d0 	bl	1eca0 <__errno>
   1f900:	236a      	movs	r3, #106	; 0x6a
   1f902:	6003      	str	r3, [r0, #0]
		retval = -1;
   1f904:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   1f908:	e7e6      	b.n	1f8d8 <nrf91_socket_offload_sendto+0x4c>

0001f90a <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   1f90a:	2300      	movs	r3, #0
{
   1f90c:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   1f90e:	e9cd 3300 	strd	r3, r3, [sp]
   1f912:	f7ff ffbb 	bl	1f88c <nrf91_socket_offload_sendto>
}
   1f916:	b003      	add	sp, #12
   1f918:	f85d fb04 	ldr.w	pc, [sp], #4

0001f91c <nrf91_socket_offload_connect>:
{
   1f91c:	4603      	mov	r3, r0
   1f91e:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   1f920:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   1f922:	880b      	ldrh	r3, [r1, #0]
{
   1f924:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   1f926:	2b01      	cmp	r3, #1
{
   1f928:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1f92a:	d10e      	bne.n	1f94a <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1f92c:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1f92e:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   1f930:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1f932:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1f934:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   1f938:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1f93c:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   1f93e:	4620      	mov	r0, r4
   1f940:	a901      	add	r1, sp, #4
   1f942:	f000 ff67 	bl	20814 <nrf_connect>
}
   1f946:	b00a      	add	sp, #40	; 0x28
   1f948:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   1f94a:	2b02      	cmp	r3, #2
   1f94c:	d104      	bne.n	1f958 <nrf91_socket_offload_connect+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   1f94e:	a901      	add	r1, sp, #4
   1f950:	f7ff ff83 	bl	1f85a <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   1f954:	2224      	movs	r2, #36	; 0x24
   1f956:	e7f2      	b.n	1f93e <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   1f958:	4620      	mov	r0, r4
}
   1f95a:	b00a      	add	sp, #40	; 0x28
   1f95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		retval = nrf_connect(sd, (void *)addr, addrlen);
   1f960:	f000 bf58 	b.w	20814 <nrf_connect>

0001f964 <nrf91_socket_offload_bind>:
{
   1f964:	4603      	mov	r3, r0
   1f966:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   1f968:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   1f96a:	880b      	ldrh	r3, [r1, #0]
{
   1f96c:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   1f96e:	2b01      	cmp	r3, #1
{
   1f970:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1f972:	d10e      	bne.n	1f992 <nrf91_socket_offload_bind+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1f974:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1f976:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   1f978:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1f97a:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1f97c:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   1f980:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1f984:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1f986:	4620      	mov	r0, r4
   1f988:	a901      	add	r1, sp, #4
   1f98a:	f000 ffdd 	bl	20948 <nrf_bind>
}
   1f98e:	b00a      	add	sp, #40	; 0x28
   1f990:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   1f992:	2b02      	cmp	r3, #2
   1f994:	d104      	bne.n	1f9a0 <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   1f996:	a901      	add	r1, sp, #4
   1f998:	f7ff ff5f 	bl	1f85a <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1f99c:	2224      	movs	r2, #36	; 0x24
   1f99e:	e7f2      	b.n	1f986 <nrf91_socket_offload_bind+0x22>
		errno = EAFNOSUPPORT;
   1f9a0:	f7ff f97e 	bl	1eca0 <__errno>
   1f9a4:	236a      	movs	r3, #106	; 0x6a
   1f9a6:	6003      	str	r3, [r0, #0]
		retval = -1;
   1f9a8:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   1f9ac:	e7ef      	b.n	1f98e <nrf91_socket_offload_bind+0x2a>

0001f9ae <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1f9ae:	f7fa be67 	b.w	1a680 <z_impl_k_mutex_lock>

0001f9b2 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1f9b2:	f7fa bedf 	b.w	1a774 <z_impl_k_mutex_unlock>

0001f9b6 <nrf91_socket_offload_recvfrom>:
{
   1f9b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f9ba:	4605      	mov	r5, r0
	if (ctx->lock) {
   1f9bc:	6840      	ldr	r0, [r0, #4]
{
   1f9be:	b08d      	sub	sp, #52	; 0x34
   1f9c0:	460c      	mov	r4, r1
   1f9c2:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   1f9c6:	4691      	mov	r9, r2
   1f9c8:	469a      	mov	sl, r3
	if (ctx->lock) {
   1f9ca:	b108      	cbz	r0, 1f9d0 <nrf91_socket_offload_recvfrom+0x1a>
		k_mutex_unlock(ctx->lock);
   1f9cc:	f7ff fff1 	bl	1f9b2 <k_mutex_unlock.isra.0>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   1f9d0:	f8d5 b000 	ldr.w	fp, [r5]
	if (from == NULL || fromlen == NULL) {
   1f9d4:	b106      	cbz	r6, 1f9d8 <nrf91_socket_offload_recvfrom+0x22>
   1f9d6:	b9af      	cbnz	r7, 1fa04 <nrf91_socket_offload_recvfrom+0x4e>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   1f9d8:	2300      	movs	r3, #0
   1f9da:	4621      	mov	r1, r4
   1f9dc:	e9cd 3300 	strd	r3, r3, [sp]
   1f9e0:	464a      	mov	r2, r9
   1f9e2:	4653      	mov	r3, sl
   1f9e4:	4658      	mov	r0, fp
   1f9e6:	f001 f8bd 	bl	20b64 <nrf_recvfrom>
   1f9ea:	4604      	mov	r4, r0
	if (ctx->lock) {
   1f9ec:	6868      	ldr	r0, [r5, #4]
   1f9ee:	b128      	cbz	r0, 1f9fc <nrf91_socket_offload_recvfrom+0x46>
		k_mutex_lock(ctx->lock, K_FOREVER);
   1f9f0:	f04f 32ff 	mov.w	r2, #4294967295
   1f9f4:	f04f 33ff 	mov.w	r3, #4294967295
   1f9f8:	f7ff ffd9 	bl	1f9ae <k_mutex_lock.constprop.0.isra.0>
}
   1f9fc:	4620      	mov	r0, r4
   1f9fe:	b00d      	add	sp, #52	; 0x34
   1fa00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   1fa04:	f10d 080c 	add.w	r8, sp, #12
   1fa08:	2224      	movs	r2, #36	; 0x24
   1fa0a:	2100      	movs	r1, #0
   1fa0c:	4640      	mov	r0, r8
   1fa0e:	f002 f95a 	bl	21cc6 <memset>
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   1fa12:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   1fa14:	ab02      	add	r3, sp, #8
   1fa16:	4621      	mov	r1, r4
   1fa18:	e9cd 8300 	strd	r8, r3, [sp]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   1fa1c:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   1fa1e:	4653      	mov	r3, sl
   1fa20:	464a      	mov	r2, r9
   1fa22:	4658      	mov	r0, fp
   1fa24:	f001 f89e 	bl	20b64 <nrf_recvfrom>
		if (retval < 0) {
   1fa28:	1e04      	subs	r4, r0, #0
   1fa2a:	dbdf      	blt.n	1f9ec <nrf91_socket_offload_recvfrom+0x36>
		if (cliaddr->sa_family == NRF_AF_INET &&
   1fa2c:	9b04      	ldr	r3, [sp, #16]
   1fa2e:	2b01      	cmp	r3, #1
   1fa30:	d10b      	bne.n	1fa4a <nrf91_socket_offload_recvfrom+0x94>
   1fa32:	9a02      	ldr	r2, [sp, #8]
   1fa34:	2a10      	cmp	r2, #16
   1fa36:	d1d9      	bne.n	1f9ec <nrf91_socket_offload_recvfrom+0x36>
	ptr->sin_family = AF_INET;
   1fa38:	8033      	strh	r3, [r6, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1fa3a:	9b06      	ldr	r3, [sp, #24]
	ptr->sin_port = nrf_in->sin_port;
   1fa3c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1fa40:	6073      	str	r3, [r6, #4]
			*fromlen = sizeof(struct sockaddr_in);
   1fa42:	2308      	movs	r3, #8
	ptr->sin_port = nrf_in->sin_port;
   1fa44:	8072      	strh	r2, [r6, #2]
			*fromlen = sizeof(struct sockaddr_in6);
   1fa46:	603b      	str	r3, [r7, #0]
   1fa48:	e7d0      	b.n	1f9ec <nrf91_socket_offload_recvfrom+0x36>
		} else if (cliaddr->sa_family == NRF_AF_INET6 &&
   1fa4a:	2b02      	cmp	r3, #2
   1fa4c:	d1ce      	bne.n	1f9ec <nrf91_socket_offload_recvfrom+0x36>
   1fa4e:	9b02      	ldr	r3, [sp, #8]
   1fa50:	2b24      	cmp	r3, #36	; 0x24
   1fa52:	d1cb      	bne.n	1f9ec <nrf91_socket_offload_recvfrom+0x36>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   1fa54:	4641      	mov	r1, r8
   1fa56:	4630      	mov	r0, r6
   1fa58:	f7ff feeb 	bl	1f832 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   1fa5c:	2318      	movs	r3, #24
   1fa5e:	e7f2      	b.n	1fa46 <nrf91_socket_offload_recvfrom+0x90>

0001fa60 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   1fa60:	2300      	movs	r3, #0
{
   1fa62:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   1fa64:	e9cd 3300 	strd	r3, r3, [sp]
   1fa68:	f7ff ffa5 	bl	1f9b6 <nrf91_socket_offload_recvfrom>
}
   1fa6c:	b003      	add	sp, #12
   1fa6e:	f85d fb04 	ldr.w	pc, [sp], #4

0001fa72 <nrf91_socket_offload_close>:
{
   1fa72:	b538      	push	{r3, r4, r5, lr}
   1fa74:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   1fa76:	6800      	ldr	r0, [r0, #0]
   1fa78:	f7f9 f948 	bl	18d0c <nrf_close>
	if (retval == 0) {
   1fa7c:	4604      	mov	r4, r0
   1fa7e:	b910      	cbnz	r0, 1fa86 <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   1fa80:	4628      	mov	r0, r5
   1fa82:	f7f1 ff05 	bl	11890 <release_ctx>
}
   1fa86:	4620      	mov	r0, r4
   1fa88:	bd38      	pop	{r3, r4, r5, pc}

0001fa8a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1fa8a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1fa8c:	ab0b      	add	r3, sp, #44	; 0x2c
   1fa8e:	9305      	str	r3, [sp, #20]
   1fa90:	9303      	str	r3, [sp, #12]
   1fa92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fa94:	9302      	str	r3, [sp, #8]
   1fa96:	2300      	movs	r3, #0
   1fa98:	4618      	mov	r0, r3
   1fa9a:	e9cd 3300 	strd	r3, r3, [sp]
   1fa9e:	f7ed fa9d 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   1faa2:	b007      	add	sp, #28
   1faa4:	f85d fb04 	ldr.w	pc, [sp], #4

0001faa8 <response_handler>:
	write_uart_string(response);
   1faa8:	f7f2 b920 	b.w	11cec <write_uart_string>

0001faac <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1faac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1faae:	ab0b      	add	r3, sp, #44	; 0x2c
   1fab0:	9305      	str	r3, [sp, #20]
   1fab2:	9303      	str	r3, [sp, #12]
   1fab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fab6:	9302      	str	r3, [sp, #8]
   1fab8:	2300      	movs	r3, #0
   1faba:	4618      	mov	r0, r3
   1fabc:	e9cd 3300 	strd	r3, r3, [sp]
   1fac0:	f7ed fa8c 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   1fac4:	b007      	add	sp, #28
   1fac6:	f85d fb04 	ldr.w	pc, [sp], #4

0001faca <is_notification>:
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1faca:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
   1face:	b2db      	uxtb	r3, r3
   1fad0:	2b08      	cmp	r3, #8
   1fad2:	bf9d      	ittte	ls
   1fad4:	f240 1005 	movwls	r0, #261	; 0x105
   1fad8:	40d8      	lsrls	r0, r3
   1fada:	f000 0001 	andls.w	r0, r0, #1
{
   1fade:	2000      	movhi	r0, #0
}
   1fae0:	4770      	bx	lr

0001fae2 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   1fae2:	280d      	cmp	r0, #13
   1fae4:	d004      	beq.n	1faf0 <is_lfcr+0xe>
   1fae6:	f1a0 030a 	sub.w	r3, r0, #10
   1faea:	4258      	negs	r0, r3
   1faec:	4158      	adcs	r0, r3
   1faee:	4770      	bx	lr
		return true;
   1faf0:	2001      	movs	r0, #1
}
   1faf2:	4770      	bx	lr

0001faf4 <skip_command_prefix>:
{
   1faf4:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   1faf6:	6801      	ldr	r1, [r0, #0]
{
   1faf8:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   1fafa:	1c8b      	adds	r3, r1, #2
   1fafc:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   1fafe:	788c      	ldrb	r4, [r1, #2]
   1fb00:	4620      	mov	r0, r4
   1fb02:	f7ff ffee 	bl	1fae2 <is_lfcr>
   1fb06:	b910      	cbnz	r0, 1fb0e <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1fb08:	b10c      	cbz	r4, 1fb0e <skip_command_prefix+0x1a>
	(*cmd)++;
   1fb0a:	3103      	adds	r1, #3
   1fb0c:	6011      	str	r1, [r2, #0]
}
   1fb0e:	bd10      	pop	{r4, pc}

0001fb10 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   1fb10:	6813      	ldr	r3, [r2, #0]
   1fb12:	f7f2 bcb7 	b.w	12484 <at_parser_max_params_from_str>

0001fb16 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   1fb16:	6803      	ldr	r3, [r0, #0]
   1fb18:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   1fb1a:	bf86      	itte	hi
   1fb1c:	6840      	ldrhi	r0, [r0, #4]
   1fb1e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
		return NULL;
   1fb22:	2000      	movls	r0, #0
}
   1fb24:	4770      	bx	lr

0001fb26 <at_param_clear>:
{
   1fb26:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1fb28:	7803      	ldrb	r3, [r0, #0]
{
   1fb2a:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1fb2c:	3b02      	subs	r3, #2
   1fb2e:	2b01      	cmp	r3, #1
   1fb30:	d802      	bhi.n	1fb38 <at_param_clear+0x12>
		k_free(param->value.str_val);
   1fb32:	6880      	ldr	r0, [r0, #8]
   1fb34:	f002 f861 	bl	21bfa <k_free>
	param->value.int_val = 0;
   1fb38:	2200      	movs	r2, #0
   1fb3a:	2300      	movs	r3, #0
   1fb3c:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   1fb40:	bd10      	pop	{r4, pc}

0001fb42 <at_params_list_init>:

	return 0;
}

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   1fb42:	b538      	push	{r3, r4, r5, lr}
   1fb44:	460d      	mov	r5, r1
	if (list == NULL) {
   1fb46:	4604      	mov	r4, r0
   1fb48:	b140      	cbz	r0, 1fb5c <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   1fb4a:	2110      	movs	r1, #16
   1fb4c:	4628      	mov	r0, r5
   1fb4e:	f002 f85f 	bl	21c10 <k_calloc>
   1fb52:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   1fb54:	b128      	cbz	r0, 1fb62 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   1fb56:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   1fb58:	6025      	str	r5, [r4, #0]
}
   1fb5a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1fb5c:	f06f 0015 	mvn.w	r0, #21
   1fb60:	e7fb      	b.n	1fb5a <at_params_list_init+0x18>
		return -ENOMEM;
   1fb62:	f06f 000b 	mvn.w	r0, #11
   1fb66:	e7f8      	b.n	1fb5a <at_params_list_init+0x18>

0001fb68 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   1fb68:	b570      	push	{r4, r5, r6, lr}
	if (list == NULL || list->params == NULL) {
   1fb6a:	4604      	mov	r4, r0
   1fb6c:	b128      	cbz	r0, 1fb7a <at_params_list_clear+0x12>
   1fb6e:	6843      	ldr	r3, [r0, #4]
   1fb70:	b11b      	cbz	r3, 1fb7a <at_params_list_clear+0x12>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   1fb72:	2500      	movs	r5, #0
   1fb74:	6823      	ldr	r3, [r4, #0]
   1fb76:	429d      	cmp	r5, r3
   1fb78:	d300      	bcc.n	1fb7c <at_params_list_clear+0x14>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   1fb7a:	bd70      	pop	{r4, r5, r6, pc}
		at_param_clear(&params[i]);
   1fb7c:	6866      	ldr	r6, [r4, #4]
   1fb7e:	eb06 1605 	add.w	r6, r6, r5, lsl #4
   1fb82:	4630      	mov	r0, r6
   1fb84:	f7ff ffcf 	bl	1fb26 <at_param_clear>
__ssp_bos_icheck3(memset, void *, int)
   1fb88:	2210      	movs	r2, #16
   1fb8a:	2100      	movs	r1, #0
   1fb8c:	4630      	mov	r0, r6
   1fb8e:	f002 f89a 	bl	21cc6 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   1fb92:	3501      	adds	r5, #1
   1fb94:	e7ee      	b.n	1fb74 <at_params_list_clear+0xc>

0001fb96 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   1fb96:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   1fb98:	4604      	mov	r4, r0
   1fb9a:	b148      	cbz	r0, 1fbb0 <at_params_list_free+0x1a>
   1fb9c:	6843      	ldr	r3, [r0, #4]
   1fb9e:	b13b      	cbz	r3, 1fbb0 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   1fba0:	2500      	movs	r5, #0
	at_params_list_clear(list);
   1fba2:	f7ff ffe1 	bl	1fb68 <at_params_list_clear>
	k_free(list->params);
   1fba6:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   1fba8:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   1fbaa:	f002 f826 	bl	21bfa <k_free>
	list->params = NULL;
   1fbae:	6065      	str	r5, [r4, #4]
}
   1fbb0:	bd38      	pop	{r3, r4, r5, pc}

0001fbb2 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   1fbb2:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   1fbb4:	b178      	cbz	r0, 1fbd6 <at_params_empty_put+0x24>
   1fbb6:	6843      	ldr	r3, [r0, #4]
   1fbb8:	b16b      	cbz	r3, 1fbd6 <at_params_empty_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1fbba:	f7ff ffac 	bl	1fb16 <at_params_get>

	if (param == NULL) {
   1fbbe:	4604      	mov	r4, r0
   1fbc0:	b148      	cbz	r0, 1fbd6 <at_params_empty_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   1fbc2:	f7ff ffb0 	bl	1fb26 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   1fbc6:	2304      	movs	r3, #4
	param->value.int_val = 0;
   1fbc8:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   1fbca:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   1fbcc:	2300      	movs	r3, #0

	return 0;
   1fbce:	2000      	movs	r0, #0
	param->value.int_val = 0;
   1fbd0:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   1fbd4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1fbd6:	f06f 0015 	mvn.w	r0, #21
   1fbda:	e7fb      	b.n	1fbd4 <at_params_empty_put+0x22>

0001fbdc <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   1fbdc:	b570      	push	{r4, r5, r6, lr}
   1fbde:	4616      	mov	r6, r2
   1fbe0:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   1fbe2:	b168      	cbz	r0, 1fc00 <at_params_int_put+0x24>
   1fbe4:	6843      	ldr	r3, [r0, #4]
   1fbe6:	b15b      	cbz	r3, 1fc00 <at_params_int_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1fbe8:	f7ff ff95 	bl	1fb16 <at_params_get>

	if (param == NULL) {
   1fbec:	4604      	mov	r4, r0
   1fbee:	b138      	cbz	r0, 1fc00 <at_params_int_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   1fbf0:	f7ff ff99 	bl	1fb26 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   1fbf4:	2301      	movs	r3, #1
	param->value.int_val = value;
	return 0;
   1fbf6:	2000      	movs	r0, #0
	param->value.int_val = value;
   1fbf8:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   1fbfc:	7023      	strb	r3, [r4, #0]
}
   1fbfe:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1fc00:	f06f 0015 	mvn.w	r0, #21
   1fc04:	e7fb      	b.n	1fbfe <at_params_int_put+0x22>

0001fc06 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   1fc06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fc08:	4617      	mov	r7, r2
   1fc0a:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   1fc0c:	b1c0      	cbz	r0, 1fc40 <at_params_string_put+0x3a>
   1fc0e:	6843      	ldr	r3, [r0, #4]
   1fc10:	b1b3      	cbz	r3, 1fc40 <at_params_string_put+0x3a>
   1fc12:	b1aa      	cbz	r2, 1fc40 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1fc14:	f7ff ff7f 	bl	1fb16 <at_params_get>

	if (param == NULL) {
   1fc18:	4604      	mov	r4, r0
   1fc1a:	b188      	cbz	r0, 1fc40 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   1fc1c:	1c68      	adds	r0, r5, #1
   1fc1e:	f001 fff3 	bl	21c08 <k_malloc>

	if (param_value == NULL) {
   1fc22:	4606      	mov	r6, r0
   1fc24:	b178      	cbz	r0, 1fc46 <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1fc26:	462a      	mov	r2, r5
   1fc28:	4639      	mov	r1, r7
   1fc2a:	f002 f825 	bl	21c78 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   1fc2e:	4620      	mov	r0, r4
   1fc30:	f7ff ff79 	bl	1fb26 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   1fc34:	2302      	movs	r3, #2
	param->value.str_val = param_value;

	return 0;
   1fc36:	2000      	movs	r0, #0
	param->size = str_len;
   1fc38:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   1fc3a:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   1fc3c:	60a6      	str	r6, [r4, #8]
}
   1fc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1fc40:	f06f 0015 	mvn.w	r0, #21
   1fc44:	e7fb      	b.n	1fc3e <at_params_string_put+0x38>
		return -ENOMEM;
   1fc46:	f06f 000b 	mvn.w	r0, #11
   1fc4a:	e7f8      	b.n	1fc3e <at_params_string_put+0x38>

0001fc4c <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   1fc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fc4e:	4617      	mov	r7, r2
   1fc50:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   1fc52:	b1c0      	cbz	r0, 1fc86 <at_params_array_put+0x3a>
   1fc54:	6843      	ldr	r3, [r0, #4]
   1fc56:	b1b3      	cbz	r3, 1fc86 <at_params_array_put+0x3a>
   1fc58:	b1aa      	cbz	r2, 1fc86 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1fc5a:	f7ff ff5c 	bl	1fb16 <at_params_get>

	if (param == NULL) {
   1fc5e:	4604      	mov	r4, r0
   1fc60:	b188      	cbz	r0, 1fc86 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   1fc62:	4628      	mov	r0, r5
   1fc64:	f001 ffd0 	bl	21c08 <k_malloc>

	if (param_value == NULL) {
   1fc68:	4606      	mov	r6, r0
   1fc6a:	b178      	cbz	r0, 1fc8c <at_params_array_put+0x40>
   1fc6c:	462a      	mov	r2, r5
   1fc6e:	4639      	mov	r1, r7
   1fc70:	f002 f802 	bl	21c78 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   1fc74:	4620      	mov	r0, r4
   1fc76:	f7ff ff56 	bl	1fb26 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   1fc7a:	2303      	movs	r3, #3
	param->value.array_val = param_value;

	return 0;
   1fc7c:	2000      	movs	r0, #0
	param->size = array_len;
   1fc7e:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   1fc80:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   1fc82:	60a6      	str	r6, [r4, #8]
}
   1fc84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1fc86:	f06f 0015 	mvn.w	r0, #21
   1fc8a:	e7fb      	b.n	1fc84 <at_params_array_put+0x38>
		return -ENOMEM;
   1fc8c:	f06f 000b 	mvn.w	r0, #11
   1fc90:	e7f8      	b.n	1fc84 <at_params_array_put+0x38>

0001fc92 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   1fc92:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   1fc94:	b1b0      	cbz	r0, 1fcc4 <at_params_short_get+0x32>
   1fc96:	6843      	ldr	r3, [r0, #4]
   1fc98:	b1a3      	cbz	r3, 1fcc4 <at_params_short_get+0x32>
   1fc9a:	b19a      	cbz	r2, 1fcc4 <at_params_short_get+0x32>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1fc9c:	f7ff ff3b 	bl	1fb16 <at_params_get>

	if (param == NULL) {
   1fca0:	b180      	cbz	r0, 1fcc4 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   1fca2:	7803      	ldrb	r3, [r0, #0]
   1fca4:	2b01      	cmp	r3, #1
   1fca6:	d10d      	bne.n	1fcc4 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   1fca8:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   1fcac:	f513 4000 	adds.w	r0, r3, #32768	; 0x8000
   1fcb0:	f141 0100 	adc.w	r1, r1, #0
   1fcb4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   1fcb8:	f171 0100 	sbcs.w	r1, r1, #0
   1fcbc:	d202      	bcs.n	1fcc4 <at_params_short_get+0x32>
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
   1fcbe:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   1fcc0:	8013      	strh	r3, [r2, #0]
}
   1fcc2:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1fcc4:	f06f 0015 	mvn.w	r0, #21
   1fcc8:	e7fb      	b.n	1fcc2 <at_params_short_get+0x30>

0001fcca <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   1fcca:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   1fccc:	b190      	cbz	r0, 1fcf4 <at_params_unsigned_short_get+0x2a>
   1fcce:	6843      	ldr	r3, [r0, #4]
   1fcd0:	b183      	cbz	r3, 1fcf4 <at_params_unsigned_short_get+0x2a>
   1fcd2:	b17a      	cbz	r2, 1fcf4 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1fcd4:	f7ff ff1f 	bl	1fb16 <at_params_get>

	if (param == NULL) {
   1fcd8:	b160      	cbz	r0, 1fcf4 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   1fcda:	7803      	ldrb	r3, [r0, #0]
   1fcdc:	2b01      	cmp	r3, #1
   1fcde:	d109      	bne.n	1fcf4 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   1fce0:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   1fce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1fce8:	f171 0100 	sbcs.w	r1, r1, #0
   1fcec:	d202      	bcs.n	1fcf4 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
   1fcee:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   1fcf0:	8013      	strh	r3, [r2, #0]
}
   1fcf2:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1fcf4:	f06f 0015 	mvn.w	r0, #21
   1fcf8:	e7fb      	b.n	1fcf2 <at_params_unsigned_short_get+0x28>

0001fcfa <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   1fcfa:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   1fcfc:	b190      	cbz	r0, 1fd24 <at_params_int_get+0x2a>
   1fcfe:	6843      	ldr	r3, [r0, #4]
   1fd00:	b183      	cbz	r3, 1fd24 <at_params_int_get+0x2a>
   1fd02:	b17a      	cbz	r2, 1fd24 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1fd04:	f7ff ff07 	bl	1fb16 <at_params_get>

	if (param == NULL) {
   1fd08:	b160      	cbz	r0, 1fd24 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   1fd0a:	7803      	ldrb	r3, [r0, #0]
   1fd0c:	2b01      	cmp	r3, #1
   1fd0e:	d109      	bne.n	1fd24 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   1fd10:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   1fd14:	f113 4000 	adds.w	r0, r3, #2147483648	; 0x80000000
   1fd18:	f141 0100 	adc.w	r1, r1, #0
   1fd1c:	b911      	cbnz	r1, 1fd24 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
   1fd1e:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   1fd20:	6013      	str	r3, [r2, #0]
}
   1fd22:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1fd24:	f06f 0015 	mvn.w	r0, #21
   1fd28:	e7fb      	b.n	1fd22 <at_params_int_get+0x28>

0001fd2a <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   1fd2a:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   1fd2c:	b170      	cbz	r0, 1fd4c <at_params_int64_get+0x22>
   1fd2e:	6843      	ldr	r3, [r0, #4]
   1fd30:	b163      	cbz	r3, 1fd4c <at_params_int64_get+0x22>
   1fd32:	b15a      	cbz	r2, 1fd4c <at_params_int64_get+0x22>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1fd34:	f7ff feef 	bl	1fb16 <at_params_get>

	if (param == NULL) {
   1fd38:	b140      	cbz	r0, 1fd4c <at_params_int64_get+0x22>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   1fd3a:	7803      	ldrb	r3, [r0, #0]
   1fd3c:	2b01      	cmp	r3, #1
   1fd3e:	d105      	bne.n	1fd4c <at_params_int64_get+0x22>

	if ((param->value.int_val > INT64_MAX) || (param->value.int_val < INT64_MIN)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   1fd40:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   1fd44:	e9c2 0100 	strd	r0, r1, [r2]
	return 0;
   1fd48:	2000      	movs	r0, #0
}
   1fd4a:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1fd4c:	f06f 0015 	mvn.w	r0, #21
   1fd50:	e7fb      	b.n	1fd4a <at_params_int64_get+0x20>

0001fd52 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   1fd52:	b570      	push	{r4, r5, r6, lr}
   1fd54:	4615      	mov	r5, r2
   1fd56:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL || len == NULL) {
   1fd58:	b1a8      	cbz	r0, 1fd86 <at_params_string_get+0x34>
   1fd5a:	6843      	ldr	r3, [r0, #4]
   1fd5c:	b19b      	cbz	r3, 1fd86 <at_params_string_get+0x34>
   1fd5e:	b192      	cbz	r2, 1fd86 <at_params_string_get+0x34>
   1fd60:	b18c      	cbz	r4, 1fd86 <at_params_string_get+0x34>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1fd62:	f7ff fed8 	bl	1fb16 <at_params_get>

	if (param == NULL) {
   1fd66:	b170      	cbz	r0, 1fd86 <at_params_string_get+0x34>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   1fd68:	7803      	ldrb	r3, [r0, #0]
   1fd6a:	2b02      	cmp	r3, #2
   1fd6c:	d10b      	bne.n	1fd86 <at_params_string_get+0x34>
		return param->size;
   1fd6e:	6846      	ldr	r6, [r0, #4]
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);

	if (*len < param_len) {
   1fd70:	6823      	ldr	r3, [r4, #0]
   1fd72:	42b3      	cmp	r3, r6
   1fd74:	d30a      	bcc.n	1fd8c <at_params_string_get+0x3a>
   1fd76:	6881      	ldr	r1, [r0, #8]
   1fd78:	4632      	mov	r2, r6
   1fd7a:	4628      	mov	r0, r5
   1fd7c:	f001 ff7c 	bl	21c78 <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   1fd80:	2000      	movs	r0, #0
	*len = param_len;
   1fd82:	6026      	str	r6, [r4, #0]
}
   1fd84:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1fd86:	f06f 0015 	mvn.w	r0, #21
   1fd8a:	e7fb      	b.n	1fd84 <at_params_string_get+0x32>
		return -ENOMEM;
   1fd8c:	f06f 000b 	mvn.w	r0, #11
   1fd90:	e7f8      	b.n	1fd84 <at_params_string_get+0x32>

0001fd92 <at_params_valid_count_get>:
	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   1fd92:	4602      	mov	r2, r0
{
   1fd94:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   1fd96:	b170      	cbz	r0, 1fdb6 <at_params_valid_count_get+0x24>
   1fd98:	6840      	ldr	r0, [r0, #4]
   1fd9a:	b160      	cbz	r0, 1fdb6 <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   1fd9c:	6811      	ldr	r1, [r2, #0]
   1fd9e:	b119      	cbz	r1, 1fda8 <at_params_valid_count_get+0x16>
   1fda0:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   1fda2:	b108      	cbz	r0, 1fda8 <at_params_valid_count_get+0x16>
   1fda4:	7803      	ldrb	r3, [r0, #0]
   1fda6:	b90b      	cbnz	r3, 1fdac <at_params_valid_count_get+0x1a>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   1fda8:	4608      	mov	r0, r1
   1fdaa:	bd08      	pop	{r3, pc}
		param = at_params_get(list, valid_i);
   1fdac:	4610      	mov	r0, r2
		valid_i += 1;
   1fdae:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   1fdb0:	f7ff feb1 	bl	1fb16 <at_params_get>
   1fdb4:	e7f5      	b.n	1fda2 <at_params_valid_count_get+0x10>
		return -EINVAL;
   1fdb6:	f06f 0115 	mvn.w	r1, #21
   1fdba:	e7f5      	b.n	1fda8 <at_params_valid_count_get+0x16>

0001fdbc <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1fdbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1fdbe:	ab0b      	add	r3, sp, #44	; 0x2c
   1fdc0:	9305      	str	r3, [sp, #20]
   1fdc2:	9303      	str	r3, [sp, #12]
   1fdc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fdc6:	9302      	str	r3, [sp, #8]
   1fdc8:	2300      	movs	r3, #0
   1fdca:	4618      	mov	r0, r3
   1fdcc:	e9cd 3300 	strd	r3, r3, [sp]
   1fdd0:	f7ed f904 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   1fdd4:	b007      	add	sp, #28
   1fdd6:	f85d fb04 	ldr.w	pc, [sp], #4

0001fdda <lte_lc_init>:
{
   1fdda:	b508      	push	{r3, lr}
	int err = init_and_config();
   1fddc:	f7f3 f92e 	bl	1303c <init_and_config>
	return err ? -EFAULT : 0;
   1fde0:	2800      	cmp	r0, #0
}
   1fde2:	bf18      	it	ne
   1fde4:	f06f 000d 	mvnne.w	r0, #13
   1fde8:	bd08      	pop	{r3, pc}

0001fdea <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1fdea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1fdec:	ab0b      	add	r3, sp, #44	; 0x2c
   1fdee:	9305      	str	r3, [sp, #20]
   1fdf0:	9303      	str	r3, [sp, #12]
   1fdf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fdf4:	9302      	str	r3, [sp, #8]
   1fdf6:	2300      	movs	r3, #0
   1fdf8:	4618      	mov	r0, r3
   1fdfa:	e9cd 3300 	strd	r3, r3, [sp]
   1fdfe:	f7ed f8ed 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   1fe02:	b007      	add	sp, #28
   1fe04:	f85d fb04 	ldr.w	pc, [sp], #4

0001fe08 <string_to_int>:
{
   1fe08:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1fe0a:	460c      	mov	r4, r1
   1fe0c:	4605      	mov	r5, r0
   1fe0e:	4616      	mov	r6, r2
	errno = 0;
   1fe10:	f7fe ff46 	bl	1eca0 <__errno>
   1fe14:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   1fe16:	4622      	mov	r2, r4
	errno = 0;
   1fe18:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   1fe1a:	a901      	add	r1, sp, #4
   1fe1c:	4628      	mov	r0, r5
   1fe1e:	f7fc f975 	bl	1c10c <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   1fe22:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   1fe24:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   1fe26:	42ab      	cmp	r3, r5
   1fe28:	d103      	bne.n	1fe32 <string_to_int+0x2a>
		return -ENODATA;
   1fe2a:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   1fe2e:	b002      	add	sp, #8
   1fe30:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   1fe32:	781b      	ldrb	r3, [r3, #0]
   1fe34:	2b00      	cmp	r3, #0
   1fe36:	d1f8      	bne.n	1fe2a <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   1fe38:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   1fe3c:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   1fe3e:	3303      	adds	r3, #3
   1fe40:	d802      	bhi.n	1fe48 <string_to_int+0x40>
	return 0;
   1fe42:	2000      	movs	r0, #0
	*output = temp;
   1fe44:	6034      	str	r4, [r6, #0]
	return 0;
   1fe46:	e7f2      	b.n	1fe2e <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   1fe48:	f7fe ff2a 	bl	1eca0 <__errno>
   1fe4c:	6803      	ldr	r3, [r0, #0]
   1fe4e:	2b22      	cmp	r3, #34	; 0x22
   1fe50:	d1f7      	bne.n	1fe42 <string_to_int+0x3a>
   1fe52:	e7ea      	b.n	1fe2a <string_to_int+0x22>

0001fe54 <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   1fe54:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   1fe56:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   1fe58:	b087      	sub	sp, #28
   1fe5a:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   1fe5c:	ab01      	add	r3, sp, #4
   1fe5e:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   1fe60:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   1fe62:	f7ff ff76 	bl	1fd52 <at_params_string_get>
	if (err) {
   1fe66:	b968      	cbnz	r0, 1fe84 <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   1fe68:	9b01      	ldr	r3, [sp, #4]
	if (string_to_int(str_buf, base, output)) {
   1fe6a:	4622      	mov	r2, r4
	str_buf[len] = '\0';
   1fe6c:	3318      	adds	r3, #24
   1fe6e:	446b      	add	r3, sp
   1fe70:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   1fe74:	4629      	mov	r1, r5
   1fe76:	a802      	add	r0, sp, #8
   1fe78:	f7ff ffc6 	bl	1fe08 <string_to_int>
		return -ENODATA;
   1fe7c:	2800      	cmp	r0, #0
   1fe7e:	bf18      	it	ne
   1fe80:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   1fe84:	b007      	add	sp, #28
   1fe86:	bd30      	pop	{r4, r5, pc}

0001fe88 <on_modem_shutdown>:

static void on_modem_shutdown(void *ctx)
{
	(void)lte_lc_deinit();
   1fe88:	f7f3 b9a4 	b.w	131d4 <lte_lc_deinit>

0001fe8c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1fe8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1fe8e:	ab0b      	add	r3, sp, #44	; 0x2c
   1fe90:	9305      	str	r3, [sp, #20]
   1fe92:	9303      	str	r3, [sp, #12]
   1fe94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fe96:	2201      	movs	r2, #1
   1fe98:	9302      	str	r3, [sp, #8]
   1fe9a:	2300      	movs	r3, #0
   1fe9c:	4618      	mov	r0, r3
   1fe9e:	e9cd 3300 	strd	r3, r3, [sp]
   1fea2:	f7ed f89b 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   1fea6:	b007      	add	sp, #28
   1fea8:	f85d fb04 	ldr.w	pc, [sp], #4

0001feac <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1feac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1feae:	ab0b      	add	r3, sp, #44	; 0x2c
   1feb0:	9305      	str	r3, [sp, #20]
   1feb2:	9303      	str	r3, [sp, #12]
   1feb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1feb6:	9302      	str	r3, [sp, #8]
   1feb8:	2300      	movs	r3, #0
   1feba:	4618      	mov	r0, r3
   1febc:	e9cd 3300 	strd	r3, r3, [sp]
   1fec0:	f7ed f88c 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   1fec4:	b007      	add	sp, #28
   1fec6:	f85d fb04 	ldr.w	pc, [sp], #4

0001feca <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1feca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1fecc:	ab0b      	add	r3, sp, #44	; 0x2c
   1fece:	9305      	str	r3, [sp, #20]
   1fed0:	9303      	str	r3, [sp, #12]
   1fed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fed4:	2201      	movs	r2, #1
   1fed6:	9302      	str	r3, [sp, #8]
   1fed8:	2300      	movs	r3, #0
   1feda:	4618      	mov	r0, r3
   1fedc:	e9cd 3300 	strd	r3, r3, [sp]
   1fee0:	f7ed f87c 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   1fee4:	b007      	add	sp, #28
   1fee6:	f85d fb04 	ldr.w	pc, [sp], #4

0001feea <date_time_init>:

	return 0;
}

static int date_time_init(void)
{
   1feea:	b508      	push	{r3, lr}
	date_time_core_init();
   1feec:	f7f4 fcc8 	bl	14880 <date_time_core_init>

	return 0;
}
   1fef0:	2000      	movs	r0, #0
   1fef2:	bd08      	pop	{r3, pc}

0001fef4 <date_time_is_valid>:
	return date_time_core_is_valid();
   1fef4:	f7f4 bcd0 	b.w	14898 <date_time_core_is_valid>

0001fef8 <date_time_register_handler>:
	date_time_core_register_handler(evt_handler);
   1fef8:	f7f4 bcc8 	b.w	1488c <date_time_core_register_handler>

0001fefc <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1fefc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1fefe:	ab0b      	add	r3, sp, #44	; 0x2c
   1ff00:	9305      	str	r3, [sp, #20]
   1ff02:	9303      	str	r3, [sp, #12]
   1ff04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ff06:	9302      	str	r3, [sp, #8]
   1ff08:	2300      	movs	r3, #0
   1ff0a:	4618      	mov	r0, r3
   1ff0c:	e9cd 3300 	strd	r3, r3, [sp]
   1ff10:	f7ed f864 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   1ff14:	b007      	add	sp, #28
   1ff16:	f85d fb04 	ldr.w	pc, [sp], #4

0001ff1a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1ff1a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1ff1c:	ab0b      	add	r3, sp, #44	; 0x2c
   1ff1e:	9305      	str	r3, [sp, #20]
   1ff20:	9303      	str	r3, [sp, #12]
   1ff22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ff24:	2202      	movs	r2, #2
   1ff26:	9302      	str	r3, [sp, #8]
   1ff28:	2300      	movs	r3, #0
   1ff2a:	4618      	mov	r0, r3
   1ff2c:	e9cd 3300 	strd	r3, r3, [sp]
   1ff30:	f7ed f854 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   1ff34:	b007      	add	sp, #28
   1ff36:	f85d fb04 	ldr.w	pc, [sp], #4

0001ff3a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1ff3a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1ff3c:	ab0b      	add	r3, sp, #44	; 0x2c
   1ff3e:	9305      	str	r3, [sp, #20]
   1ff40:	9303      	str	r3, [sp, #12]
   1ff42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ff44:	9302      	str	r3, [sp, #8]
   1ff46:	2300      	movs	r3, #0
   1ff48:	4618      	mov	r0, r3
   1ff4a:	e9cd 3300 	strd	r3, r3, [sp]
   1ff4e:	f7ed f845 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   1ff52:	b007      	add	sp, #28
   1ff54:	f85d fb04 	ldr.w	pc, [sp], #4

0001ff58 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1ff58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1ff5a:	ab0b      	add	r3, sp, #44	; 0x2c
   1ff5c:	9305      	str	r3, [sp, #20]
   1ff5e:	9303      	str	r3, [sp, #12]
   1ff60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ff62:	2201      	movs	r2, #1
   1ff64:	9302      	str	r3, [sp, #8]
   1ff66:	2300      	movs	r3, #0
   1ff68:	4618      	mov	r0, r3
   1ff6a:	e9cd 3300 	strd	r3, r3, [sp]
   1ff6e:	f7ed f835 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   1ff72:	b007      	add	sp, #28
   1ff74:	f85d fb04 	ldr.w	pc, [sp], #4

0001ff78 <json_add_num_cs>:
{
   1ff78:	b508      	push	{r3, lr}
	if (!parent || !str) {
   1ff7a:	b138      	cbz	r0, 1ff8c <json_add_num_cs+0x14>
	return cJSON_AddNumberToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   1ff7c:	f000 f96a 	bl	20254 <cJSON_AddNumberToObjectCS>
   1ff80:	2800      	cmp	r0, #0
   1ff82:	bf0c      	ite	eq
   1ff84:	f06f 000b 	mvneq.w	r0, #11
   1ff88:	2000      	movne	r0, #0
}
   1ff8a:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1ff8c:	f06f 0015 	mvn.w	r0, #21
   1ff90:	e7fb      	b.n	1ff8a <json_add_num_cs+0x12>

0001ff92 <json_item_string_exists>:
{
   1ff92:	b510      	push	{r4, lr}
   1ff94:	4614      	mov	r4, r2
	cJSON *item = cJSON_GetObjectItem(obj, key);
   1ff96:	f000 f912 	bl	201be <cJSON_GetObjectItem>
	if (!item) {
   1ff9a:	b908      	cbnz	r0, 1ffa0 <json_item_string_exists+0xe>
		return false;
   1ff9c:	2000      	movs	r0, #0
}
   1ff9e:	bd10      	pop	{r4, pc}
	if (!val) {
   1ffa0:	b92c      	cbnz	r4, 1ffae <json_item_string_exists+0x1c>
		return cJSON_IsNull(item);
   1ffa2:	f000 f978 	bl	20296 <cJSON_IsNull>
   1ffa6:	3800      	subs	r0, #0
   1ffa8:	bf18      	it	ne
   1ffaa:	2001      	movne	r0, #1
   1ffac:	e7f7      	b.n	1ff9e <json_item_string_exists+0xc>
	str_val = cJSON_GetStringValue(item);
   1ffae:	f000 f986 	bl	202be <cJSON_GetStringValue>
	if (!str_val) {
   1ffb2:	2800      	cmp	r0, #0
   1ffb4:	d0f2      	beq.n	1ff9c <json_item_string_exists+0xa>
	return (strcmp(str_val, val) == 0);
   1ffb6:	4621      	mov	r1, r4
   1ffb8:	f7e8 ffb7 	bl	8f2a <strcmp>
   1ffbc:	fab0 f080 	clz	r0, r0
   1ffc0:	0940      	lsrs	r0, r0, #5
   1ffc2:	e7ec      	b.n	1ff9e <json_item_string_exists+0xc>

0001ffc4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1ffc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1ffc6:	ab0b      	add	r3, sp, #44	; 0x2c
   1ffc8:	9305      	str	r3, [sp, #20]
   1ffca:	9303      	str	r3, [sp, #12]
   1ffcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ffce:	9302      	str	r3, [sp, #8]
   1ffd0:	2300      	movs	r3, #0
   1ffd2:	4618      	mov	r0, r3
   1ffd4:	e9cd 3300 	strd	r3, r3, [sp]
   1ffd8:	f7ed f800 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   1ffdc:	b007      	add	sp, #28
   1ffde:	f85d fb04 	ldr.w	pc, [sp], #4

0001ffe2 <json_add_bool_cs>:
{
   1ffe2:	b508      	push	{r3, lr}
	if (!parent || !str) {
   1ffe4:	b140      	cbz	r0, 1fff8 <json_add_bool_cs+0x16>
   1ffe6:	b139      	cbz	r1, 1fff8 <json_add_bool_cs+0x16>
	return cJSON_AddBoolToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   1ffe8:	f000 f91f 	bl	2022a <cJSON_AddBoolToObjectCS>
   1ffec:	2800      	cmp	r0, #0
   1ffee:	bf0c      	ite	eq
   1fff0:	f06f 000b 	mvneq.w	r0, #11
   1fff4:	2000      	movne	r0, #0
}
   1fff6:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1fff8:	f06f 0015 	mvn.w	r0, #21
   1fffc:	e7fb      	b.n	1fff6 <json_add_bool_cs+0x14>

0001fffe <get_string_from_array>:
{
   1fffe:	b538      	push	{r3, r4, r5, lr}
   20000:	4614      	mov	r4, r2
	cJSON *item = cJSON_GetArrayItem(array, index);
   20002:	f000 f8d6 	bl	201b2 <cJSON_GetArrayItem>
   20006:	4605      	mov	r5, r0
	if (!cJSON_IsString(item)) {
   20008:	f000 f952 	bl	202b0 <cJSON_IsString>
   2000c:	b118      	cbz	r0, 20016 <get_string_from_array+0x18>
	return 0;
   2000e:	2000      	movs	r0, #0
	*string_out = item->valuestring;
   20010:	692b      	ldr	r3, [r5, #16]
   20012:	6023      	str	r3, [r4, #0]
}
   20014:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   20016:	f06f 0015 	mvn.w	r0, #21
   2001a:	e7fb      	b.n	20014 <get_string_from_array+0x16>

0002001c <get_string_from_obj>:
{
   2001c:	b538      	push	{r3, r4, r5, lr}
   2001e:	4614      	mov	r4, r2
	cJSON *item = cJSON_GetObjectItem(obj, key);
   20020:	f000 f8cd 	bl	201be <cJSON_GetObjectItem>
   20024:	4605      	mov	r5, r0
	if (!cJSON_IsString(item)) {
   20026:	f000 f943 	bl	202b0 <cJSON_IsString>
   2002a:	b118      	cbz	r0, 20034 <get_string_from_obj+0x18>
	return 0;
   2002c:	2000      	movs	r0, #0
	*string_out = item->valuestring;
   2002e:	692b      	ldr	r3, [r5, #16]
   20030:	6023      	str	r3, [r4, #0]
}
   20032:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   20034:	f06f 0015 	mvn.w	r0, #21
   20038:	e7fb      	b.n	20032 <get_string_from_obj+0x16>

0002003a <nrf_cloud_client_id_get>:
		ret = nrf_cloud_configured_client_id_get(id_buf, id_len);
   2003a:	f7f5 bae9 	b.w	15610 <nrf_cloud_configured_client_id_get>

0002003e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2003e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   20040:	ab0b      	add	r3, sp, #44	; 0x2c
   20042:	9305      	str	r3, [sp, #20]
   20044:	9303      	str	r3, [sp, #12]
   20046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20048:	2201      	movs	r2, #1
   2004a:	9302      	str	r3, [sp, #8]
   2004c:	2300      	movs	r3, #0
   2004e:	4618      	mov	r0, r3
   20050:	e9cd 3300 	strd	r3, r3, [sp]
   20054:	f7ec ffc2 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   20058:	b007      	add	sp, #28
   2005a:	f85d fb04 	ldr.w	pc, [sp], #4

0002005e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2005e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   20060:	ab0b      	add	r3, sp, #44	; 0x2c
   20062:	9305      	str	r3, [sp, #20]
   20064:	9303      	str	r3, [sp, #12]
   20066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20068:	9302      	str	r3, [sp, #8]
   2006a:	2300      	movs	r3, #0
   2006c:	4618      	mov	r0, r3
   2006e:	e9cd 3300 	strd	r3, r3, [sp]
   20072:	f7ec ffb3 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   20076:	b007      	add	sp, #28
   20078:	f85d fb04 	ldr.w	pc, [sp], #4

0002007c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2007c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2007e:	ab0b      	add	r3, sp, #44	; 0x2c
   20080:	9305      	str	r3, [sp, #20]
   20082:	9303      	str	r3, [sp, #12]
   20084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20086:	2201      	movs	r2, #1
   20088:	9302      	str	r3, [sp, #8]
   2008a:	2300      	movs	r3, #0
   2008c:	4618      	mov	r0, r3
   2008e:	e9cd 3300 	strd	r3, r3, [sp]
   20092:	f7ec ffa3 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   20096:	b007      	add	sp, #28
   20098:	f85d fb04 	ldr.w	pc, [sp], #4

0002009c <close_connection>:
	if (!rest_ctx->keep_alive) {
   2009c:	7903      	ldrb	r3, [r0, #4]
   2009e:	b90b      	cbnz	r3, 200a4 <close_connection+0x8>
		(void)nrf_cloud_rest_disconnect(rest_ctx);
   200a0:	f7f6 b94c 	b.w	1633c <nrf_cloud_rest_disconnect>
}
   200a4:	4770      	bx	lr

000200a6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   200a6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   200a8:	ab0b      	add	r3, sp, #44	; 0x2c
   200aa:	9305      	str	r3, [sp, #20]
   200ac:	9303      	str	r3, [sp, #12]
   200ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   200b0:	9302      	str	r3, [sp, #8]
   200b2:	2300      	movs	r3, #0
   200b4:	4618      	mov	r0, r3
   200b6:	e9cd 3300 	strd	r3, r3, [sp]
   200ba:	f7ec ff8f 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   200be:	b007      	add	sp, #28
   200c0:	f85d fb04 	ldr.w	pc, [sp], #4

000200c4 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   200c4:	2000      	movs	r0, #0
   200c6:	4770      	bx	lr

000200c8 <psa_crypto_init>:
}
   200c8:	2000      	movs	r0, #0
   200ca:	4770      	bx	lr

000200cc <parse_hex4>:
    for (i = 0; i < 4; i++)
   200cc:	2100      	movs	r1, #0
{
   200ce:	b510      	push	{r4, lr}
    unsigned int h = 0;
   200d0:	460a      	mov	r2, r1
{
   200d2:	4604      	mov	r4, r0
        if ((input[i] >= '0') && (input[i] <= '9'))
   200d4:	5c63      	ldrb	r3, [r4, r1]
   200d6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   200da:	2809      	cmp	r0, #9
   200dc:	d807      	bhi.n	200ee <parse_hex4+0x22>
            h += (unsigned int) input[i] - '0';
   200de:	3a30      	subs	r2, #48	; 0x30
        if (i < 3)
   200e0:	2903      	cmp	r1, #3
            h += (unsigned int) 10 + input[i] - 'a';
   200e2:	eb03 0002 	add.w	r0, r3, r2
        if (i < 3)
   200e6:	d00f      	beq.n	20108 <parse_hex4+0x3c>
            h = h << 4;
   200e8:	0102      	lsls	r2, r0, #4
    for (i = 0; i < 4; i++)
   200ea:	3101      	adds	r1, #1
   200ec:	e7f2      	b.n	200d4 <parse_hex4+0x8>
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   200ee:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   200f2:	2805      	cmp	r0, #5
   200f4:	d801      	bhi.n	200fa <parse_hex4+0x2e>
            h += (unsigned int) 10 + input[i] - 'A';
   200f6:	3a37      	subs	r2, #55	; 0x37
   200f8:	e7f2      	b.n	200e0 <parse_hex4+0x14>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   200fa:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
   200fe:	2805      	cmp	r0, #5
   20100:	d801      	bhi.n	20106 <parse_hex4+0x3a>
            h += (unsigned int) 10 + input[i] - 'a';
   20102:	3a57      	subs	r2, #87	; 0x57
   20104:	e7ec      	b.n	200e0 <parse_hex4+0x14>
            return 0;
   20106:	2000      	movs	r0, #0
}
   20108:	bd10      	pop	{r4, pc}

0002010a <buffer_skip_whitespace>:
{
   2010a:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   2010c:	b128      	cbz	r0, 2011a <buffer_skip_whitespace+0x10>
   2010e:	6801      	ldr	r1, [r0, #0]
   20110:	b181      	cbz	r1, 20134 <buffer_skip_whitespace+0x2a>
    if (cannot_access_at_index(buffer, 0))
   20112:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
   20116:	429a      	cmp	r2, r3
   20118:	d305      	bcc.n	20126 <buffer_skip_whitespace+0x1c>
}
   2011a:	bd10      	pop	{r4, pc}
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   2011c:	5c8c      	ldrb	r4, [r1, r2]
   2011e:	2c20      	cmp	r4, #32
   20120:	d8fb      	bhi.n	2011a <buffer_skip_whitespace+0x10>
       buffer->offset++;
   20122:	3201      	adds	r2, #1
   20124:	6082      	str	r2, [r0, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   20126:	6882      	ldr	r2, [r0, #8]
   20128:	4293      	cmp	r3, r2
   2012a:	d8f7      	bhi.n	2011c <buffer_skip_whitespace+0x12>
    if (buffer->offset == buffer->length)
   2012c:	d1f5      	bne.n	2011a <buffer_skip_whitespace+0x10>
        buffer->offset--;
   2012e:	3b01      	subs	r3, #1
   20130:	6083      	str	r3, [r0, #8]
   20132:	e7f2      	b.n	2011a <buffer_skip_whitespace+0x10>
        return NULL;
   20134:	4608      	mov	r0, r1
   20136:	e7f0      	b.n	2011a <buffer_skip_whitespace+0x10>

00020138 <get_array_item>:
    if (array == NULL)
   20138:	b110      	cbz	r0, 20140 <get_array_item+0x8>
    current_child = array->child;
   2013a:	6880      	ldr	r0, [r0, #8]
    while ((current_child != NULL) && (index > 0))
   2013c:	b100      	cbz	r0, 20140 <get_array_item+0x8>
   2013e:	b901      	cbnz	r1, 20142 <get_array_item+0xa>
}
   20140:	4770      	bx	lr
        current_child = current_child->next;
   20142:	6800      	ldr	r0, [r0, #0]
        index--;
   20144:	3901      	subs	r1, #1
        current_child = current_child->next;
   20146:	e7f9      	b.n	2013c <get_array_item+0x4>

00020148 <add_item_to_array>:
    if ((item == NULL) || (array == NULL) || (array == item))
   20148:	b189      	cbz	r1, 2016e <add_item_to_array+0x26>
   2014a:	b188      	cbz	r0, 20170 <add_item_to_array+0x28>
   2014c:	4281      	cmp	r1, r0
   2014e:	d00e      	beq.n	2016e <add_item_to_array+0x26>
    child = array->child;
   20150:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   20152:	b923      	cbnz	r3, 2015e <add_item_to_array+0x16>
        array->child = item;
   20154:	6081      	str	r1, [r0, #8]
        item->next = NULL;
   20156:	e9c1 3100 	strd	r3, r1, [r1]
{
   2015a:	2001      	movs	r0, #1
   2015c:	4770      	bx	lr
        if (child->prev)
   2015e:	685b      	ldr	r3, [r3, #4]
   20160:	2b00      	cmp	r3, #0
   20162:	d0fa      	beq.n	2015a <add_item_to_array+0x12>
    prev->next = item;
   20164:	6019      	str	r1, [r3, #0]
    item->prev = prev;
   20166:	604b      	str	r3, [r1, #4]
            array->child->prev = item;
   20168:	6883      	ldr	r3, [r0, #8]
   2016a:	6059      	str	r1, [r3, #4]
   2016c:	e7f5      	b.n	2015a <add_item_to_array+0x12>
        return false;
   2016e:	2000      	movs	r0, #0
}
   20170:	4770      	bx	lr

00020172 <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   20172:	4603      	mov	r3, r0
   20174:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   20176:	2028      	movs	r0, #40	; 0x28
   20178:	4798      	blx	r3
    if (node)
   2017a:	4604      	mov	r4, r0
   2017c:	b118      	cbz	r0, 20186 <cJSON_New_Item.isra.0+0x14>
__ssp_bos_icheck3(memset, void *, int)
   2017e:	2228      	movs	r2, #40	; 0x28
   20180:	2100      	movs	r1, #0
   20182:	f001 fda0 	bl	21cc6 <memset>
}
   20186:	4620      	mov	r0, r4
   20188:	bd10      	pop	{r4, pc}

0002018a <cJSON_ParseWithOpts>:
{
   2018a:	b570      	push	{r4, r5, r6, lr}
   2018c:	460d      	mov	r5, r1
   2018e:	4616      	mov	r6, r2
    if (NULL == value)
   20190:	4604      	mov	r4, r0
   20192:	b148      	cbz	r0, 201a8 <cJSON_ParseWithOpts+0x1e>
    buffer_length = strlen(value) + sizeof("");
   20194:	f7e8 fed3 	bl	8f3e <strlen>
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   20198:	4633      	mov	r3, r6
   2019a:	462a      	mov	r2, r5
   2019c:	1c41      	adds	r1, r0, #1
   2019e:	4620      	mov	r0, r4
}
   201a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   201a4:	f7f6 bf4c 	b.w	17040 <cJSON_ParseWithLengthOpts>
}
   201a8:	bd70      	pop	{r4, r5, r6, pc}

000201aa <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   201aa:	2200      	movs	r2, #0
   201ac:	4611      	mov	r1, r2
   201ae:	f7ff bfec 	b.w	2018a <cJSON_ParseWithOpts>

000201b2 <cJSON_GetArrayItem>:
    if (index < 0)
   201b2:	2900      	cmp	r1, #0
   201b4:	db01      	blt.n	201ba <cJSON_GetArrayItem+0x8>
    return get_array_item(array, (size_t)index);
   201b6:	f7ff bfbf 	b.w	20138 <get_array_item>
}
   201ba:	2000      	movs	r0, #0
   201bc:	4770      	bx	lr

000201be <cJSON_GetObjectItem>:
    return get_object_item(object, string, false);
   201be:	2200      	movs	r2, #0
   201c0:	f7f6 be78 	b.w	16eb4 <get_object_item>

000201c4 <cJSON_AddItemToArray>:
    return add_item_to_array(array, item);
   201c4:	f7ff bfc0 	b.w	20148 <add_item_to_array>

000201c8 <cJSON_AddItemToObjectCS>:
    return add_item_to_object(object, string, item, &global_hooks, true);
   201c8:	2301      	movs	r3, #1
   201ca:	f7f6 bec7 	b.w	16f5c <add_item_to_object.constprop.0>

000201ce <cJSON_DetachItemViaPointer>:
    if ((parent == NULL) || (item == NULL))
   201ce:	b1c8      	cbz	r0, 20204 <cJSON_DetachItemViaPointer+0x36>
   201d0:	b189      	cbz	r1, 201f6 <cJSON_DetachItemViaPointer+0x28>
    if (item != parent->child)
   201d2:	6883      	ldr	r3, [r0, #8]
   201d4:	428b      	cmp	r3, r1
        item->prev->next = item->next;
   201d6:	bf1c      	itt	ne
   201d8:	e9d1 2300 	ldrdne	r2, r3, [r1]
   201dc:	601a      	strne	r2, [r3, #0]
    if (item->next != NULL)
   201de:	680b      	ldr	r3, [r1, #0]
   201e0:	b10b      	cbz	r3, 201e6 <cJSON_DetachItemViaPointer+0x18>
        item->next->prev = item->prev;
   201e2:	684a      	ldr	r2, [r1, #4]
   201e4:	605a      	str	r2, [r3, #4]
    if (item == parent->child)
   201e6:	6883      	ldr	r3, [r0, #8]
        parent->child = item->next;
   201e8:	680a      	ldr	r2, [r1, #0]
    if (item == parent->child)
   201ea:	428b      	cmp	r3, r1
   201ec:	d105      	bne.n	201fa <cJSON_DetachItemViaPointer+0x2c>
        parent->child = item->next;
   201ee:	6082      	str	r2, [r0, #8]
    item->prev = NULL;
   201f0:	2300      	movs	r3, #0
    item->next = NULL;
   201f2:	e9c1 3300 	strd	r3, r3, [r1]
}
   201f6:	4608      	mov	r0, r1
   201f8:	4770      	bx	lr
    else if (item->next == NULL)
   201fa:	2a00      	cmp	r2, #0
   201fc:	d1f8      	bne.n	201f0 <cJSON_DetachItemViaPointer+0x22>
        parent->child->prev = item->prev;
   201fe:	684a      	ldr	r2, [r1, #4]
   20200:	605a      	str	r2, [r3, #4]
   20202:	e7f5      	b.n	201f0 <cJSON_DetachItemViaPointer+0x22>
        return NULL;
   20204:	4601      	mov	r1, r0
   20206:	e7f6      	b.n	201f6 <cJSON_DetachItemViaPointer+0x28>

00020208 <cJSON_DetachItemFromObject>:
{
   20208:	b510      	push	{r4, lr}
   2020a:	4604      	mov	r4, r0
    cJSON *to_detach = cJSON_GetObjectItem(object, string);
   2020c:	f7ff ffd7 	bl	201be <cJSON_GetObjectItem>
   20210:	4601      	mov	r1, r0
    return cJSON_DetachItemViaPointer(object, to_detach);
   20212:	4620      	mov	r0, r4
}
   20214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return cJSON_DetachItemViaPointer(object, to_detach);
   20218:	f7ff bfd9 	b.w	201ce <cJSON_DetachItemViaPointer>

0002021c <cJSON_DeleteItemFromObject>:
{
   2021c:	b508      	push	{r3, lr}
    cJSON_Delete(cJSON_DetachItemFromObject(object, string));
   2021e:	f7ff fff3 	bl	20208 <cJSON_DetachItemFromObject>
}
   20222:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    cJSON_Delete(cJSON_DetachItemFromObject(object, string));
   20226:	f7f6 bee7 	b.w	16ff8 <cJSON_Delete>

0002022a <cJSON_AddBoolToObjectCS>:
{
   2022a:	b570      	push	{r4, r5, r6, lr}
   2022c:	4605      	mov	r5, r0
    cJSON *bool_item = cJSON_CreateBool(boolean);
   2022e:	4610      	mov	r0, r2
{
   20230:	460e      	mov	r6, r1
    cJSON *bool_item = cJSON_CreateBool(boolean);
   20232:	f7f6 ff71 	bl	17118 <cJSON_CreateBool>
    if (add_item_to_object(object, name, bool_item, &global_hooks, true))
   20236:	2301      	movs	r3, #1
   20238:	4602      	mov	r2, r0
    cJSON *bool_item = cJSON_CreateBool(boolean);
   2023a:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, bool_item, &global_hooks, true))
   2023c:	4631      	mov	r1, r6
   2023e:	4628      	mov	r0, r5
   20240:	f7f6 fe8c 	bl	16f5c <add_item_to_object.constprop.0>
   20244:	4605      	mov	r5, r0
   20246:	b918      	cbnz	r0, 20250 <cJSON_AddBoolToObjectCS+0x26>
    cJSON_Delete(bool_item);
   20248:	4620      	mov	r0, r4
   2024a:	f7f6 fed5 	bl	16ff8 <cJSON_Delete>
    return NULL;
   2024e:	462c      	mov	r4, r5
}
   20250:	4620      	mov	r0, r4
   20252:	bd70      	pop	{r4, r5, r6, pc}

00020254 <cJSON_AddNumberToObjectCS>:
{
   20254:	b570      	push	{r4, r5, r6, lr}
   20256:	4605      	mov	r5, r0
   20258:	460e      	mov	r6, r1
    cJSON *number_item = cJSON_CreateNumber(number);
   2025a:	f7ea f8b5 	bl	a3c8 <cJSON_CreateNumber>
    if (add_item_to_object(object, name, number_item, &global_hooks, true))
   2025e:	2301      	movs	r3, #1
   20260:	4602      	mov	r2, r0
    cJSON *number_item = cJSON_CreateNumber(number);
   20262:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, number_item, &global_hooks, true))
   20264:	4631      	mov	r1, r6
   20266:	4628      	mov	r0, r5
   20268:	f7f6 fe78 	bl	16f5c <add_item_to_object.constprop.0>
   2026c:	4605      	mov	r5, r0
   2026e:	b918      	cbnz	r0, 20278 <cJSON_AddNumberToObjectCS+0x24>
    cJSON_Delete(number_item);
   20270:	4620      	mov	r0, r4
   20272:	f7f6 fec1 	bl	16ff8 <cJSON_Delete>
    return NULL;
   20276:	462c      	mov	r4, r5
}
   20278:	4620      	mov	r0, r4
   2027a:	bd70      	pop	{r4, r5, r6, pc}

0002027c <cJSON_IsTrue>:
    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
    if (item == NULL)
   2027c:	b118      	cbz	r0, 20286 <cJSON_IsTrue+0xa>
    {
        return false;
    }

    return (item->type & 0xff) == cJSON_True;
   2027e:	7b00      	ldrb	r0, [r0, #12]
   20280:	1e83      	subs	r3, r0, #2
   20282:	4258      	negs	r0, r3
   20284:	4158      	adcs	r0, r3
}
   20286:	4770      	bx	lr

00020288 <cJSON_IsBool>:


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
    if (item == NULL)
   20288:	b120      	cbz	r0, 20294 <cJSON_IsBool+0xc>
    {
        return false;
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
   2028a:	68c0      	ldr	r0, [r0, #12]
   2028c:	f010 0003 	ands.w	r0, r0, #3
   20290:	bf18      	it	ne
   20292:	2001      	movne	r0, #1
}
   20294:	4770      	bx	lr

00020296 <cJSON_IsNull>:
CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)
{
    if (item == NULL)
   20296:	b118      	cbz	r0, 202a0 <cJSON_IsNull+0xa>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_NULL;
   20298:	7b00      	ldrb	r0, [r0, #12]
   2029a:	1f03      	subs	r3, r0, #4
   2029c:	4258      	negs	r0, r3
   2029e:	4158      	adcs	r0, r3
}
   202a0:	4770      	bx	lr

000202a2 <cJSON_IsNumber>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
    if (item == NULL)
   202a2:	b120      	cbz	r0, 202ae <cJSON_IsNumber+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Number;
   202a4:	7b00      	ldrb	r0, [r0, #12]
   202a6:	f1a0 0308 	sub.w	r3, r0, #8
   202aa:	4258      	negs	r0, r3
   202ac:	4158      	adcs	r0, r3
}
   202ae:	4770      	bx	lr

000202b0 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
    if (item == NULL)
   202b0:	b120      	cbz	r0, 202bc <cJSON_IsString+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_String;
   202b2:	7b00      	ldrb	r0, [r0, #12]
   202b4:	f1a0 0310 	sub.w	r3, r0, #16
   202b8:	4258      	negs	r0, r3
   202ba:	4158      	adcs	r0, r3
}
   202bc:	4770      	bx	lr

000202be <cJSON_GetStringValue>:
{
   202be:	b508      	push	{r3, lr}
   202c0:	4602      	mov	r2, r0
    if (!cJSON_IsString(item)) 
   202c2:	f7ff fff5 	bl	202b0 <cJSON_IsString>
   202c6:	b100      	cbz	r0, 202ca <cJSON_GetStringValue+0xc>
    return item->valuestring;
   202c8:	6910      	ldr	r0, [r2, #16]
}
   202ca:	bd08      	pop	{r3, pc}

000202cc <cJSON_IsArray>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
{
    if (item == NULL)
   202cc:	b120      	cbz	r0, 202d8 <cJSON_IsArray+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Array;
   202ce:	7b00      	ldrb	r0, [r0, #12]
   202d0:	f1a0 0320 	sub.w	r3, r0, #32
   202d4:	4258      	negs	r0, r3
   202d6:	4158      	adcs	r0, r3
}
   202d8:	4770      	bx	lr

000202da <malloc_fn_hook>:
static void *malloc_fn_hook(size_t sz) { return k_malloc(sz); }
   202da:	f001 bc95 	b.w	21c08 <k_malloc>

000202de <free_fn_hook>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   202de:	f001 bc8c 	b.w	21bfa <k_free>

000202e2 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   202e2:	4700      	bx	r0

000202e4 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   202e4:	f001 baf8 	b.w	218d8 <z_impl_k_busy_wait>

000202e8 <nrfx_clock_stop>:
    clock_stop(domain);
   202e8:	f7f6 bf92 	b.w	17210 <clock_stop>

000202ec <rpc_handle_ctrl_message>:
   202ec:	2902      	cmp	r1, #2
   202ee:	b510      	push	{r4, lr}
   202f0:	4604      	mov	r4, r0
   202f2:	d005      	beq.n	20300 <rpc_handle_ctrl_message+0x14>
   202f4:	2904      	cmp	r1, #4
   202f6:	d001      	beq.n	202fc <rpc_handle_ctrl_message+0x10>
   202f8:	2901      	cmp	r1, #1
   202fa:	d107      	bne.n	2030c <rpc_handle_ctrl_message+0x20>
   202fc:	2000      	movs	r0, #0
   202fe:	bd10      	pop	{r4, pc}
   20300:	6880      	ldr	r0, [r0, #8]
   20302:	2800      	cmp	r0, #0
   20304:	d0fa      	beq.n	202fc <rpc_handle_ctrl_message+0x10>
   20306:	f7f1 f8a3 	bl	11450 <nrf_modem_os_shm_tx_free>
   2030a:	e7f7      	b.n	202fc <rpc_handle_ctrl_message+0x10>
   2030c:	6880      	ldr	r0, [r0, #8]
   2030e:	b108      	cbz	r0, 20314 <rpc_handle_ctrl_message+0x28>
   20310:	f7f1 f89e 	bl	11450 <nrf_modem_os_shm_tx_free>
   20314:	4620      	mov	r0, r4
   20316:	f7f7 fc73 	bl	17c00 <rpc_transport_msg_rx_free>
   2031a:	e7ef      	b.n	202fc <rpc_handle_ctrl_message+0x10>

0002031c <rpc_init>:
   2031c:	f7f7 bc5e 	b.w	17bdc <rpc_transport_init>

00020320 <rpc_list_preambles_init>:
   20320:	2200      	movs	r2, #0
   20322:	b510      	push	{r4, lr}
   20324:	6804      	ldr	r4, [r0, #0]
   20326:	4294      	cmp	r4, r2
   20328:	d100      	bne.n	2032c <rpc_list_preambles_init+0xc>
   2032a:	bd10      	pop	{r4, pc}
   2032c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   20330:	684b      	ldr	r3, [r1, #4]
   20332:	3201      	adds	r2, #1
   20334:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   20338:	f043 0303 	orr.w	r3, r3, #3
   2033c:	604b      	str	r3, [r1, #4]
   2033e:	e7f2      	b.n	20326 <rpc_list_preambles_init+0x6>

00020340 <rpc_transport_ipc_data_rx_resume>:
   20340:	2004      	movs	r0, #4
   20342:	f7f7 bbff 	b.w	17b44 <nrfx_ipc_receive_event_enable>

00020346 <rpc_transport_ipc_data_rx_suspend>:
   20346:	2004      	movs	r0, #4
   20348:	f7f7 bc04 	b.w	17b54 <nrfx_ipc_receive_event_disable>

0002034c <rpc_transport_ipc_shutdown>:
   2034c:	f7f7 bbcc 	b.w	17ae8 <nrfx_ipc_uninit>

00020350 <rpc_transport_ipc_msg_alloc>:
   20350:	b538      	push	{r3, r4, r5, lr}
   20352:	4604      	mov	r4, r0
   20354:	2500      	movs	r5, #0
   20356:	1d03      	adds	r3, r0, #4
   20358:	6822      	ldr	r2, [r4, #0]
   2035a:	42aa      	cmp	r2, r5
   2035c:	d801      	bhi.n	20362 <rpc_transport_ipc_msg_alloc+0x12>
   2035e:	2300      	movs	r3, #0
   20360:	e019      	b.n	20396 <rpc_transport_ipc_msg_alloc+0x46>
   20362:	f04f 0200 	mov.w	r2, #0
   20366:	e8d3 0fcf 	ldaexb	r0, [r3]
   2036a:	2803      	cmp	r0, #3
   2036c:	d104      	bne.n	20378 <rpc_transport_ipc_msg_alloc+0x28>
   2036e:	e8c3 2fcc 	stlexb	ip, r2, [r3]
   20372:	f1bc 0f00 	cmp.w	ip, #0
   20376:	d1f6      	bne.n	20366 <rpc_transport_ipc_msg_alloc+0x16>
   20378:	d002      	beq.n	20380 <rpc_transport_ipc_msg_alloc+0x30>
   2037a:	3308      	adds	r3, #8
   2037c:	3501      	adds	r5, #1
   2037e:	e7eb      	b.n	20358 <rpc_transport_ipc_msg_alloc+0x8>
   20380:	eb01 1385 	add.w	r3, r1, r5, lsl #6
   20384:	4618      	mov	r0, r3
   20386:	2240      	movs	r2, #64	; 0x40
   20388:	2100      	movs	r1, #0
   2038a:	f001 fc9c 	bl	21cc6 <memset>
   2038e:	4603      	mov	r3, r0
   20390:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   20394:	60a0      	str	r0, [r4, #8]
   20396:	4618      	mov	r0, r3
   20398:	bd38      	pop	{r3, r4, r5, pc}

0002039a <rpc_client_msg_from_rpc_msg_get>:
   2039a:	3008      	adds	r0, #8
   2039c:	4770      	bx	lr

0002039e <rpc_client_msg_alloc>:
   2039e:	b538      	push	{r3, r4, r5, lr}
   203a0:	4605      	mov	r5, r0
   203a2:	b920      	cbnz	r0, 203ae <rpc_client_msg_alloc+0x10>
   203a4:	f7f7 fc20 	bl	17be8 <rpc_transport_msg_alloc>
   203a8:	b980      	cbnz	r0, 203cc <rpc_client_msg_alloc+0x2e>
   203aa:	2000      	movs	r0, #0
   203ac:	bd38      	pop	{r3, r4, r5, pc}
   203ae:	f7f1 f847 	bl	11440 <nrf_modem_os_shm_tx_alloc>
   203b2:	4604      	mov	r4, r0
   203b4:	2800      	cmp	r0, #0
   203b6:	d0f8      	beq.n	203aa <rpc_client_msg_alloc+0xc>
   203b8:	f7f7 fc16 	bl	17be8 <rpc_transport_msg_alloc>
   203bc:	b938      	cbnz	r0, 203ce <rpc_client_msg_alloc+0x30>
   203be:	4620      	mov	r0, r4
   203c0:	f7f1 f846 	bl	11450 <nrf_modem_os_shm_tx_free>
   203c4:	2001      	movs	r0, #1
   203c6:	f7f1 f811 	bl	113ec <nrf_modem_os_event_notify>
   203ca:	e7ee      	b.n	203aa <rpc_client_msg_alloc+0xc>
   203cc:	462c      	mov	r4, r5
   203ce:	60c5      	str	r5, [r0, #12]
   203d0:	f840 4f08 	str.w	r4, [r0, #8]!
   203d4:	e7ea      	b.n	203ac <rpc_client_msg_alloc+0xe>

000203d6 <rpc_client_msg_send>:
   203d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   203da:	4610      	mov	r0, r2
   203dc:	f840 1d08 	str.w	r1, [r0, #-8]!
   203e0:	f7f7 bc20 	b.w	17c24 <rpc_transport_msg_send>

000203e4 <rpc_client_msg_rx_free>:
   203e4:	3808      	subs	r0, #8
   203e6:	f7f7 bc0b 	b.w	17c00 <rpc_transport_msg_rx_free>

000203ea <rpc_client_msg_tx_free>:
   203ea:	3808      	subs	r0, #8
   203ec:	f7f7 bc0e 	b.w	17c0c <rpc_transport_msg_tx_free>

000203f0 <rpc_client_msg_data_rx_free>:
   203f0:	f7f7 bc12 	b.w	17c18 <rpc_transport_msg_data_rx_free>

000203f4 <rpc_client_msg_data_tx_size>:
   203f4:	f7f7 bbfe 	b.w	17bf4 <rpc_transport_msg_data_tx_size>

000203f8 <rpc_client_msg_data_tx_alloc>:
   203f8:	f7f1 b822 	b.w	11440 <nrf_modem_os_shm_tx_alloc>

000203fc <rpc_client_msg_data_tx_free>:
   203fc:	b508      	push	{r3, lr}
   203fe:	f7f1 f827 	bl	11450 <nrf_modem_os_shm_tx_free>
   20402:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   20406:	2001      	movs	r0, #1
   20408:	f7f0 bff0 	b.w	113ec <nrf_modem_os_event_notify>

0002040c <sockaddr_init>:
   2040c:	2904      	cmp	r1, #4
   2040e:	b570      	push	{r4, r5, r6, lr}
   20410:	4605      	mov	r5, r0
   20412:	4616      	mov	r6, r2
   20414:	d003      	beq.n	2041e <_flash_used+0x2>
   20416:	2910      	cmp	r1, #16
   20418:	d015      	beq.n	20446 <_flash_used+0x2a>
   2041a:	2400      	movs	r4, #0
   2041c:	e011      	b.n	20442 <_flash_used+0x26>
   2041e:	2010      	movs	r0, #16
   20420:	f7f1 f800 	bl	11424 <nrf_modem_os_alloc>
   20424:	4604      	mov	r4, r0
   20426:	2800      	cmp	r0, #0
   20428:	d0f7      	beq.n	2041a <sockaddr_init+0xe>
   2042a:	220f      	movs	r2, #15
   2042c:	2100      	movs	r1, #0
   2042e:	3001      	adds	r0, #1
   20430:	f001 fc49 	bl	21cc6 <memset>
   20434:	2310      	movs	r3, #16
   20436:	7023      	strb	r3, [r4, #0]
   20438:	2301      	movs	r3, #1
   2043a:	8126      	strh	r6, [r4, #8]
   2043c:	6063      	str	r3, [r4, #4]
   2043e:	682b      	ldr	r3, [r5, #0]
   20440:	60e3      	str	r3, [r4, #12]
   20442:	4620      	mov	r0, r4
   20444:	bd70      	pop	{r4, r5, r6, pc}
   20446:	2024      	movs	r0, #36	; 0x24
   20448:	f7f0 ffec 	bl	11424 <nrf_modem_os_alloc>
   2044c:	4604      	mov	r4, r0
   2044e:	2800      	cmp	r0, #0
   20450:	d0e3      	beq.n	2041a <sockaddr_init+0xe>
   20452:	2223      	movs	r2, #35	; 0x23
   20454:	2100      	movs	r1, #0
   20456:	3001      	adds	r0, #1
   20458:	f001 fc35 	bl	21cc6 <memset>
   2045c:	2324      	movs	r3, #36	; 0x24
   2045e:	7023      	strb	r3, [r4, #0]
   20460:	2302      	movs	r3, #2
   20462:	4628      	mov	r0, r5
   20464:	6063      	str	r3, [r4, #4]
   20466:	8126      	strh	r6, [r4, #8]
   20468:	f104 0310 	add.w	r3, r4, #16
   2046c:	f105 0210 	add.w	r2, r5, #16
   20470:	f850 1b04 	ldr.w	r1, [r0], #4
   20474:	4290      	cmp	r0, r2
   20476:	f843 1b04 	str.w	r1, [r3], #4
   2047a:	d1f9      	bne.n	20470 <_flash_used+0x54>
   2047c:	e7e1      	b.n	20442 <_flash_used+0x26>

0002047e <sock_pollcb>:
   2047e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20480:	2500      	movs	r5, #0
   20482:	6803      	ldr	r3, [r0, #0]
   20484:	4604      	mov	r4, r0
   20486:	9300      	str	r3, [sp, #0]
   20488:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   2048a:	4668      	mov	r0, sp
   2048c:	f8ad 5006 	strh.w	r5, [sp, #6]
   20490:	f8ad 3004 	strh.w	r3, [sp, #4]
   20494:	f000 fccb 	bl	20e2e <nrf_poll_one>
   20498:	b138      	cbz	r0, 204aa <sock_pollcb+0x2c>
   2049a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2049c:	4668      	mov	r0, sp
   2049e:	4798      	blx	r3
   204a0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   204a4:	b10b      	cbz	r3, 204aa <sock_pollcb+0x2c>
   204a6:	6365      	str	r5, [r4, #52]	; 0x34
   204a8:	63a5      	str	r5, [r4, #56]	; 0x38
   204aa:	b003      	add	sp, #12
   204ac:	bd30      	pop	{r4, r5, pc}

000204ae <sock_has_pkt>:
   204ae:	6840      	ldr	r0, [r0, #4]
   204b0:	3800      	subs	r0, #0
   204b2:	bf18      	it	ne
   204b4:	2001      	movne	r0, #1
   204b6:	4770      	bx	lr

000204b8 <sock_pkt_append>:
   204b8:	2300      	movs	r3, #0
   204ba:	600b      	str	r3, [r1, #0]
   204bc:	6883      	ldr	r3, [r0, #8]
   204be:	b913      	cbnz	r3, 204c6 <sock_pkt_append+0xe>
   204c0:	e9c0 1101 	strd	r1, r1, [r0, #4]
   204c4:	4770      	bx	lr
   204c6:	6019      	str	r1, [r3, #0]
   204c8:	6081      	str	r1, [r0, #8]
   204ca:	4770      	bx	lr

000204cc <sock_pkt_remove>:
   204cc:	b538      	push	{r3, r4, r5, lr}
   204ce:	4605      	mov	r5, r0
   204d0:	460c      	mov	r4, r1
   204d2:	f7f7 fbad 	bl	17c30 <rpc_transport_data_rx_suspend>
   204d6:	68aa      	ldr	r2, [r5, #8]
   204d8:	6823      	ldr	r3, [r4, #0]
   204da:	4294      	cmp	r4, r2
   204dc:	606b      	str	r3, [r5, #4]
   204de:	bf08      	it	eq
   204e0:	60ab      	streq	r3, [r5, #8]
   204e2:	2300      	movs	r3, #0
   204e4:	4620      	mov	r0, r4
   204e6:	6023      	str	r3, [r4, #0]
   204e8:	f000 f904 	bl	206f4 <pkt_free>
   204ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   204f0:	f7f7 bba4 	b.w	17c3c <rpc_transport_data_rx_resume>

000204f4 <sock_pkt_peek_head>:
   204f4:	6840      	ldr	r0, [r0, #4]
   204f6:	4770      	bx	lr

000204f8 <sock_is_stream>:
   204f8:	6900      	ldr	r0, [r0, #16]
   204fa:	1e43      	subs	r3, r0, #1
   204fc:	4258      	negs	r0, r3
   204fe:	4158      	adcs	r0, r3
   20500:	4770      	bx	lr

00020502 <sock_is_datagram>:
   20502:	6900      	ldr	r0, [r0, #16]
   20504:	1e83      	subs	r3, r0, #2
   20506:	4258      	negs	r0, r3
   20508:	4158      	adcs	r0, r3
   2050a:	4770      	bx	lr

0002050c <sock_is_raw>:
   2050c:	6900      	ldr	r0, [r0, #16]
   2050e:	1ec3      	subs	r3, r0, #3
   20510:	4258      	negs	r0, r3
   20512:	4158      	adcs	r0, r3
   20514:	4770      	bx	lr

00020516 <sock_proto_is_secure>:
   20516:	6940      	ldr	r0, [r0, #20]
   20518:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2051c:	d005      	beq.n	2052a <sock_proto_is_secure+0x14>
   2051e:	f240 1311 	movw	r3, #273	; 0x111
   20522:	1ac3      	subs	r3, r0, r3
   20524:	4258      	negs	r0, r3
   20526:	4158      	adcs	r0, r3
   20528:	4770      	bx	lr
   2052a:	2001      	movs	r0, #1
   2052c:	4770      	bx	lr

0002052e <sock_is_connecting>:
   2052e:	7f00      	ldrb	r0, [r0, #28]
   20530:	f3c0 0080 	ubfx	r0, r0, #2, #1
   20534:	4770      	bx	lr

00020536 <sock_is_connected>:
   20536:	7f00      	ldrb	r0, [r0, #28]
   20538:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   2053c:	4770      	bx	lr

0002053e <sock_is_attaching>:
   2053e:	7f00      	ldrb	r0, [r0, #28]
   20540:	f3c0 1000 	ubfx	r0, r0, #4, #1
   20544:	4770      	bx	lr

00020546 <sock_is_nonblock>:
   20546:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   20548:	f000 0001 	and.w	r0, r0, #1
   2054c:	4770      	bx	lr

0002054e <sock_is_closed>:
   2054e:	7f00      	ldrb	r0, [r0, #28]
   20550:	f000 0001 	and.w	r0, r0, #1
   20554:	4770      	bx	lr

00020556 <sock_is_local_closed>:
   20556:	7f00      	ldrb	r0, [r0, #28]
   20558:	f3c0 0040 	ubfx	r0, r0, #1, #1
   2055c:	4770      	bx	lr

0002055e <sock_is_eof>:
   2055e:	6903      	ldr	r3, [r0, #16]
   20560:	2b01      	cmp	r3, #1
   20562:	d105      	bne.n	20570 <sock_is_eof+0x12>
   20564:	6980      	ldr	r0, [r0, #24]
   20566:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   2056a:	4258      	negs	r0, r3
   2056c:	4158      	adcs	r0, r3
   2056e:	4770      	bx	lr
   20570:	2000      	movs	r0, #0
   20572:	4770      	bx	lr

00020574 <sock_has_stream_error>:
   20574:	7f00      	ldrb	r0, [r0, #28]
   20576:	09c0      	lsrs	r0, r0, #7
   20578:	4770      	bx	lr

0002057a <sock_has_error>:
   2057a:	6983      	ldr	r3, [r0, #24]
   2057c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   20580:	bf14      	ite	ne
   20582:	2001      	movne	r0, #1
   20584:	2000      	moveq	r0, #0
   20586:	4770      	bx	lr

00020588 <sock_has_flow_control>:
   20588:	7f00      	ldrb	r0, [r0, #28]
   2058a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2058e:	4770      	bx	lr

00020590 <sock_has_pollcb>:
   20590:	6b40      	ldr	r0, [r0, #52]	; 0x34
   20592:	3800      	subs	r0, #0
   20594:	bf18      	it	ne
   20596:	2001      	movne	r0, #1
   20598:	4770      	bx	lr

0002059a <sock_has_rai_no_data>:
   2059a:	6b00      	ldr	r0, [r0, #48]	; 0x30
   2059c:	f1a0 0332 	sub.w	r3, r0, #50	; 0x32
   205a0:	4258      	negs	r0, r3
   205a2:	4158      	adcs	r0, r3
   205a4:	4770      	bx	lr

000205a6 <sock_can_read>:
   205a6:	6840      	ldr	r0, [r0, #4]
   205a8:	3800      	subs	r0, #0
   205aa:	bf18      	it	ne
   205ac:	2001      	movne	r0, #1
   205ae:	4770      	bx	lr

000205b0 <sock_can_accept>:
   205b0:	7f40      	ldrb	r0, [r0, #29]
   205b2:	3800      	subs	r0, #0
   205b4:	bf18      	it	ne
   205b6:	2001      	movne	r0, #1
   205b8:	4770      	bx	lr

000205ba <sock_can_send>:
   205ba:	b510      	push	{r4, lr}
   205bc:	4602      	mov	r2, r0
   205be:	6904      	ldr	r4, [r0, #16]
   205c0:	f7ff ffa9 	bl	20516 <sock_proto_is_secure>
   205c4:	2c01      	cmp	r4, #1
   205c6:	4601      	mov	r1, r0
   205c8:	7f13      	ldrb	r3, [r2, #28]
   205ca:	d103      	bne.n	205d4 <sock_can_send+0x1a>
   205cc:	071c      	lsls	r4, r3, #28
   205ce:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   205d2:	d50b      	bpl.n	205ec <sock_can_send+0x32>
   205d4:	b931      	cbnz	r1, 205e4 <sock_can_send+0x2a>
   205d6:	07d9      	lsls	r1, r3, #31
   205d8:	d40b      	bmi.n	205f2 <sock_can_send+0x38>
   205da:	f3c3 1380 	ubfx	r3, r3, #6, #1
   205de:	f1c3 0001 	rsb	r0, r3, #1
   205e2:	e003      	b.n	205ec <sock_can_send+0x32>
   205e4:	069a      	lsls	r2, r3, #26
   205e6:	f3c3 1040 	ubfx	r0, r3, #5, #1
   205ea:	d4f4      	bmi.n	205d6 <sock_can_send+0x1c>
   205ec:	f000 0001 	and.w	r0, r0, #1
   205f0:	bd10      	pop	{r4, pc}
   205f2:	2000      	movs	r0, #0
   205f4:	e7fa      	b.n	205ec <sock_can_send+0x32>

000205f6 <sock_rcvtimeo_ms_get>:
   205f6:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   205fa:	ea53 0102 	orrs.w	r1, r3, r2
   205fe:	d009      	beq.n	20614 <sock_rcvtimeo_ms_get+0x1e>
   20600:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   20604:	fbb3 f0f1 	udiv	r0, r3, r1
   20608:	fb01 0002 	mla	r0, r1, r2, r0
   2060c:	2801      	cmp	r0, #1
   2060e:	bfb8      	it	lt
   20610:	2001      	movlt	r0, #1
   20612:	4770      	bx	lr
   20614:	f04f 30ff 	mov.w	r0, #4294967295
   20618:	4770      	bx	lr

0002061a <sock_sndtimeo_ms_get>:
   2061a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   2061e:	ea53 0102 	orrs.w	r1, r3, r2
   20622:	d009      	beq.n	20638 <sock_sndtimeo_ms_get+0x1e>
   20624:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   20628:	fbb3 f0f1 	udiv	r0, r3, r1
   2062c:	fb01 0002 	mla	r0, r1, r2, r0
   20630:	2801      	cmp	r0, #1
   20632:	bfb8      	it	lt
   20634:	2001      	movlt	r0, #1
   20636:	4770      	bx	lr
   20638:	f04f 30ff 	mov.w	r0, #4294967295
   2063c:	4770      	bx	lr

0002063e <sock_family_is_valid>:
   2063e:	3801      	subs	r0, #1
   20640:	2802      	cmp	r0, #2
   20642:	bf8c      	ite	hi
   20644:	2000      	movhi	r0, #0
   20646:	2001      	movls	r0, #1
   20648:	4770      	bx	lr

0002064a <sock_type_is_valid>:
   2064a:	3801      	subs	r0, #1
   2064c:	2802      	cmp	r0, #2
   2064e:	bf8c      	ite	hi
   20650:	2000      	movhi	r0, #0
   20652:	2001      	movls	r0, #1
   20654:	4770      	bx	lr

00020656 <sock_proto_supports_type>:
   20656:	2903      	cmp	r1, #3
   20658:	d015      	beq.n	20686 <sock_proto_supports_type+0x30>
   2065a:	2811      	cmp	r0, #17
   2065c:	d00c      	beq.n	20678 <sock_proto_supports_type+0x22>
   2065e:	dc04      	bgt.n	2066a <sock_proto_supports_type+0x14>
   20660:	b188      	cbz	r0, 20686 <sock_proto_supports_type+0x30>
   20662:	2806      	cmp	r0, #6
   20664:	d00a      	beq.n	2067c <sock_proto_supports_type+0x26>
   20666:	2000      	movs	r0, #0
   20668:	4770      	bx	lr
   2066a:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2066e:	d005      	beq.n	2067c <sock_proto_supports_type+0x26>
   20670:	f240 1311 	movw	r3, #273	; 0x111
   20674:	4298      	cmp	r0, r3
   20676:	d1f6      	bne.n	20666 <sock_proto_supports_type+0x10>
   20678:	2902      	cmp	r1, #2
   2067a:	e000      	b.n	2067e <sock_proto_supports_type+0x28>
   2067c:	2901      	cmp	r1, #1
   2067e:	bf14      	ite	ne
   20680:	2000      	movne	r0, #0
   20682:	2001      	moveq	r0, #1
   20684:	4770      	bx	lr
   20686:	2001      	movs	r0, #1
   20688:	4770      	bx	lr

0002068a <sock_sockaddr_len_is_valid>:
   2068a:	6843      	ldr	r3, [r0, #4]
   2068c:	2b01      	cmp	r3, #1
   2068e:	d003      	beq.n	20698 <sock_sockaddr_len_is_valid+0xe>
   20690:	2b02      	cmp	r3, #2
   20692:	d009      	beq.n	206a8 <sock_sockaddr_len_is_valid+0x1e>
   20694:	2000      	movs	r0, #0
   20696:	4770      	bx	lr
   20698:	7803      	ldrb	r3, [r0, #0]
   2069a:	2b10      	cmp	r3, #16
   2069c:	d1fa      	bne.n	20694 <sock_sockaddr_len_is_valid+0xa>
   2069e:	2910      	cmp	r1, #16
   206a0:	bf14      	ite	ne
   206a2:	2000      	movne	r0, #0
   206a4:	2001      	moveq	r0, #1
   206a6:	4770      	bx	lr
   206a8:	7803      	ldrb	r3, [r0, #0]
   206aa:	2b24      	cmp	r3, #36	; 0x24
   206ac:	d1f2      	bne.n	20694 <sock_sockaddr_len_is_valid+0xa>
   206ae:	2924      	cmp	r1, #36	; 0x24
   206b0:	e7f6      	b.n	206a0 <sock_sockaddr_len_is_valid+0x16>

000206b2 <sock_sockaddr_fam_is_valid>:
   206b2:	68c3      	ldr	r3, [r0, #12]
   206b4:	2b01      	cmp	r3, #1
   206b6:	d003      	beq.n	206c0 <sock_sockaddr_fam_is_valid+0xe>
   206b8:	2b02      	cmp	r3, #2
   206ba:	d007      	beq.n	206cc <sock_sockaddr_fam_is_valid+0x1a>
   206bc:	2001      	movs	r0, #1
   206be:	4770      	bx	lr
   206c0:	6848      	ldr	r0, [r1, #4]
   206c2:	2801      	cmp	r0, #1
   206c4:	bf14      	ite	ne
   206c6:	2000      	movne	r0, #0
   206c8:	2001      	moveq	r0, #1
   206ca:	4770      	bx	lr
   206cc:	6848      	ldr	r0, [r1, #4]
   206ce:	2802      	cmp	r0, #2
   206d0:	e7f8      	b.n	206c4 <sock_sockaddr_fam_is_valid+0x12>

000206d2 <pkt_has_next>:
   206d2:	b100      	cbz	r0, 206d6 <pkt_has_next+0x4>
   206d4:	6800      	ldr	r0, [r0, #0]
   206d6:	3800      	subs	r0, #0
   206d8:	bf18      	it	ne
   206da:	2001      	movne	r0, #1
   206dc:	4770      	bx	lr

000206de <pkt_peek_next>:
   206de:	b100      	cbz	r0, 206e2 <pkt_peek_next+0x4>
   206e0:	6800      	ldr	r0, [r0, #0]
   206e2:	4770      	bx	lr

000206e4 <pkt_bytes_get>:
   206e4:	8943      	ldrh	r3, [r0, #10]
   206e6:	6840      	ldr	r0, [r0, #4]
   206e8:	4418      	add	r0, r3
   206ea:	4770      	bx	lr

000206ec <pkt_bytes_left>:
   206ec:	8902      	ldrh	r2, [r0, #8]
   206ee:	8940      	ldrh	r0, [r0, #10]
   206f0:	1a10      	subs	r0, r2, r0
   206f2:	4770      	bx	lr

000206f4 <pkt_free>:
   206f4:	b510      	push	{r4, lr}
   206f6:	4604      	mov	r4, r0
   206f8:	6840      	ldr	r0, [r0, #4]
   206fa:	f7ff fe79 	bl	203f0 <rpc_client_msg_data_rx_free>
   206fe:	68e0      	ldr	r0, [r4, #12]
   20700:	b108      	cbz	r0, 20706 <pkt_free+0x12>
   20702:	f7f0 fe97 	bl	11434 <nrf_modem_os_free>
   20706:	4620      	mov	r0, r4
   20708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2070c:	f7f0 be92 	b.w	11434 <nrf_modem_os_free>

00020710 <pkt_flush>:
   20710:	b510      	push	{r4, lr}
   20712:	4604      	mov	r4, r0
   20714:	6820      	ldr	r0, [r4, #0]
   20716:	b900      	cbnz	r0, 2071a <pkt_flush+0xa>
   20718:	bd10      	pop	{r4, pc}
   2071a:	6862      	ldr	r2, [r4, #4]
   2071c:	6803      	ldr	r3, [r0, #0]
   2071e:	4290      	cmp	r0, r2
   20720:	6023      	str	r3, [r4, #0]
   20722:	bf08      	it	eq
   20724:	6063      	streq	r3, [r4, #4]
   20726:	f7ff ffe5 	bl	206f4 <pkt_free>
   2072a:	e7f3      	b.n	20714 <pkt_flush+0x4>

0002072c <on_conf_dnssrv_res>:
   2072c:	f000 bc71 	b.w	21012 <res_forward>

00020730 <nrf_freeaddrinfo>:
   20730:	b510      	push	{r4, lr}
   20732:	4604      	mov	r4, r0
   20734:	b160      	cbz	r0, 20750 <nrf_freeaddrinfo+0x20>
   20736:	6940      	ldr	r0, [r0, #20]
   20738:	b108      	cbz	r0, 2073e <nrf_freeaddrinfo+0xe>
   2073a:	f7f0 fe7b 	bl	11434 <nrf_modem_os_free>
   2073e:	69a0      	ldr	r0, [r4, #24]
   20740:	b108      	cbz	r0, 20746 <nrf_freeaddrinfo+0x16>
   20742:	f7f0 fe77 	bl	11434 <nrf_modem_os_free>
   20746:	4620      	mov	r0, r4
   20748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2074c:	f7f0 be72 	b.w	11434 <nrf_modem_os_free>
   20750:	bd10      	pop	{r4, pc}

00020752 <on_getifaddrs_res>:
   20752:	f000 bc5e 	b.w	21012 <res_forward>

00020756 <nrf_socket>:
   20756:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2075a:	4681      	mov	r9, r0
   2075c:	460f      	mov	r7, r1
   2075e:	4616      	mov	r6, r2
   20760:	f7ff ff6d 	bl	2063e <sock_family_is_valid>
   20764:	b930      	cbnz	r0, 20774 <nrf_socket+0x1e>
   20766:	206a      	movs	r0, #106	; 0x6a
   20768:	f7fe ffa2 	bl	1f6b0 <nrf_modem_os_errno_set>
   2076c:	f04f 30ff 	mov.w	r0, #4294967295
   20770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   20774:	4630      	mov	r0, r6
   20776:	f7f7 fff1 	bl	1875c <sock_proto_is_valid>
   2077a:	b908      	cbnz	r0, 20780 <nrf_socket+0x2a>
   2077c:	207b      	movs	r0, #123	; 0x7b
   2077e:	e7f3      	b.n	20768 <nrf_socket+0x12>
   20780:	4638      	mov	r0, r7
   20782:	f7ff ff62 	bl	2064a <sock_type_is_valid>
   20786:	b908      	cbnz	r0, 2078c <nrf_socket+0x36>
   20788:	206b      	movs	r0, #107	; 0x6b
   2078a:	e7ed      	b.n	20768 <nrf_socket+0x12>
   2078c:	4639      	mov	r1, r7
   2078e:	4630      	mov	r0, r6
   20790:	f7ff ff61 	bl	20656 <sock_proto_supports_type>
   20794:	2800      	cmp	r0, #0
   20796:	d0f7      	beq.n	20788 <nrf_socket+0x32>
   20798:	f7f7 ff56 	bl	18648 <sock_open>
   2079c:	4605      	mov	r5, r0
   2079e:	b908      	cbnz	r0, 207a4 <nrf_socket+0x4e>
   207a0:	2017      	movs	r0, #23
   207a2:	e7e1      	b.n	20768 <nrf_socket+0x12>
   207a4:	2000      	movs	r0, #0
   207a6:	f7ff fdfa 	bl	2039e <rpc_client_msg_alloc>
   207aa:	4604      	mov	r4, r0
   207ac:	b920      	cbnz	r0, 207b8 <nrf_socket+0x62>
   207ae:	6828      	ldr	r0, [r5, #0]
   207b0:	f7f7 ff82 	bl	186b8 <_sock_close>
   207b4:	2069      	movs	r0, #105	; 0x69
   207b6:	e7d7      	b.n	20768 <nrf_socket+0x12>
   207b8:	2300      	movs	r3, #0
   207ba:	220c      	movs	r2, #12
   207bc:	f04f 38ff 	mov.w	r8, #4294967295
   207c0:	7202      	strb	r2, [r0, #8]
   207c2:	7243      	strb	r3, [r0, #9]
   207c4:	7283      	strb	r3, [r0, #10]
   207c6:	72c3      	strb	r3, [r0, #11]
   207c8:	f880 8010 	strb.w	r8, [r0, #16]
   207cc:	f880 8011 	strb.w	r8, [r0, #17]
   207d0:	f880 8012 	strb.w	r8, [r0, #18]
   207d4:	f880 8013 	strb.w	r8, [r0, #19]
   207d8:	4648      	mov	r0, r9
   207da:	f7f8 feaf 	bl	1953c <nrf_af_to_rpc_af>
   207de:	6160      	str	r0, [r4, #20]
   207e0:	4638      	mov	r0, r7
   207e2:	f000 fb8e 	bl	20f02 <nrf_type_to_rpc_type>
   207e6:	4601      	mov	r1, r0
   207e8:	61a0      	str	r0, [r4, #24]
   207ea:	4630      	mov	r0, r6
   207ec:	f000 fb8a 	bl	20f04 <nrf_proto_to_rpc_proto>
   207f0:	4621      	mov	r1, r4
   207f2:	61e0      	str	r0, [r4, #28]
   207f4:	f247 0001 	movw	r0, #28673	; 0x7001
   207f8:	e9c5 9703 	strd	r9, r7, [r5, #12]
   207fc:	616e      	str	r6, [r5, #20]
   207fe:	f000 fbd8 	bl	20fb2 <req_forward>
   20802:	4604      	mov	r4, r0
   20804:	b120      	cbz	r0, 20810 <nrf_socket+0xba>
   20806:	4640      	mov	r0, r8
   20808:	f7f7 ff56 	bl	186b8 <_sock_close>
   2080c:	4620      	mov	r0, r4
   2080e:	e7ab      	b.n	20768 <nrf_socket+0x12>
   20810:	6828      	ldr	r0, [r5, #0]
   20812:	e7ad      	b.n	20770 <nrf_socket+0x1a>

00020814 <nrf_connect>:
   20814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20816:	4607      	mov	r7, r0
   20818:	460d      	mov	r5, r1
   2081a:	4616      	mov	r6, r2
   2081c:	f7f7 ff3a 	bl	18694 <sock_find>
   20820:	4604      	mov	r4, r0
   20822:	b938      	cbnz	r0, 20834 <nrf_connect+0x20>
   20824:	2009      	movs	r0, #9
   20826:	f7fe ff43 	bl	1f6b0 <nrf_modem_os_errno_set>
   2082a:	f04f 35ff 	mov.w	r5, #4294967295
   2082e:	4628      	mov	r0, r5
   20830:	b003      	add	sp, #12
   20832:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20834:	f7ff fe8b 	bl	2054e <sock_is_closed>
   20838:	b108      	cbz	r0, 2083e <nrf_connect+0x2a>
   2083a:	69a0      	ldr	r0, [r4, #24]
   2083c:	e7f3      	b.n	20826 <nrf_connect+0x12>
   2083e:	4620      	mov	r0, r4
   20840:	f7ff fe79 	bl	20536 <sock_is_connected>
   20844:	b108      	cbz	r0, 2084a <nrf_connect+0x36>
   20846:	207f      	movs	r0, #127	; 0x7f
   20848:	e7ed      	b.n	20826 <nrf_connect+0x12>
   2084a:	4620      	mov	r0, r4
   2084c:	f7ff fe6f 	bl	2052e <sock_is_connecting>
   20850:	b108      	cbz	r0, 20856 <nrf_connect+0x42>
   20852:	2078      	movs	r0, #120	; 0x78
   20854:	e7e7      	b.n	20826 <nrf_connect+0x12>
   20856:	b90d      	cbnz	r5, 2085c <nrf_connect+0x48>
   20858:	200e      	movs	r0, #14
   2085a:	e7e4      	b.n	20826 <nrf_connect+0x12>
   2085c:	4631      	mov	r1, r6
   2085e:	4628      	mov	r0, r5
   20860:	f7ff ff13 	bl	2068a <sock_sockaddr_len_is_valid>
   20864:	b908      	cbnz	r0, 2086a <nrf_connect+0x56>
   20866:	2016      	movs	r0, #22
   20868:	e7dd      	b.n	20826 <nrf_connect+0x12>
   2086a:	4629      	mov	r1, r5
   2086c:	4620      	mov	r0, r4
   2086e:	f7ff ff20 	bl	206b2 <sock_sockaddr_fam_is_valid>
   20872:	b908      	cbnz	r0, 20878 <nrf_connect+0x64>
   20874:	206a      	movs	r0, #106	; 0x6a
   20876:	e7d6      	b.n	20826 <nrf_connect+0x12>
   20878:	4620      	mov	r0, r4
   2087a:	f7ff fe64 	bl	20546 <sock_is_nonblock>
   2087e:	4606      	mov	r6, r0
   20880:	b118      	cbz	r0, 2088a <nrf_connect+0x76>
   20882:	6966      	ldr	r6, [r4, #20]
   20884:	3e11      	subs	r6, #17
   20886:	bf18      	it	ne
   20888:	2601      	movne	r6, #1
   2088a:	2000      	movs	r0, #0
   2088c:	f7ff fd87 	bl	2039e <rpc_client_msg_alloc>
   20890:	4602      	mov	r2, r0
   20892:	b908      	cbnz	r0, 20898 <nrf_connect+0x84>
   20894:	2069      	movs	r0, #105	; 0x69
   20896:	e7c6      	b.n	20826 <nrf_connect+0x12>
   20898:	2300      	movs	r3, #0
   2089a:	2114      	movs	r1, #20
   2089c:	6107      	str	r7, [r0, #16]
   2089e:	7201      	strb	r1, [r0, #8]
   208a0:	7243      	strb	r3, [r0, #9]
   208a2:	7283      	strb	r3, [r0, #10]
   208a4:	72c3      	strb	r3, [r0, #11]
   208a6:	6869      	ldr	r1, [r5, #4]
   208a8:	2901      	cmp	r1, #1
   208aa:	d00e      	beq.n	208ca <nrf_connect+0xb6>
   208ac:	2902      	cmp	r1, #2
   208ae:	d014      	beq.n	208da <nrf_connect+0xc6>
   208b0:	7f23      	ldrb	r3, [r4, #28]
   208b2:	f247 0102 	movw	r1, #28674	; 0x7002
   208b6:	f043 0304 	orr.w	r3, r3, #4
   208ba:	7723      	strb	r3, [r4, #28]
   208bc:	2004      	movs	r0, #4
   208be:	60d6      	str	r6, [r2, #12]
   208c0:	f7ff fd89 	bl	203d6 <rpc_client_msg_send>
   208c4:	b1ce      	cbz	r6, 208fa <nrf_connect+0xe6>
   208c6:	2077      	movs	r0, #119	; 0x77
   208c8:	e7ad      	b.n	20826 <nrf_connect+0x12>
   208ca:	8929      	ldrh	r1, [r5, #8]
   208cc:	75c3      	strb	r3, [r0, #23]
   208ce:	8281      	strh	r1, [r0, #20]
   208d0:	2104      	movs	r1, #4
   208d2:	7581      	strb	r1, [r0, #22]
   208d4:	68eb      	ldr	r3, [r5, #12]
   208d6:	6183      	str	r3, [r0, #24]
   208d8:	e7ea      	b.n	208b0 <nrf_connect+0x9c>
   208da:	8929      	ldrh	r1, [r5, #8]
   208dc:	75c3      	strb	r3, [r0, #23]
   208de:	8281      	strh	r1, [r0, #20]
   208e0:	2110      	movs	r1, #16
   208e2:	186b      	adds	r3, r5, r1
   208e4:	7581      	strb	r1, [r0, #22]
   208e6:	3520      	adds	r5, #32
   208e8:	f100 0118 	add.w	r1, r0, #24
   208ec:	f853 0b04 	ldr.w	r0, [r3], #4
   208f0:	42ab      	cmp	r3, r5
   208f2:	f841 0b04 	str.w	r0, [r1], #4
   208f6:	d1f9      	bne.n	208ec <nrf_connect+0xd8>
   208f8:	e7da      	b.n	208b0 <nrf_connect+0x9c>
   208fa:	4620      	mov	r0, r4
   208fc:	f7ff fe8d 	bl	2061a <sock_sndtimeo_ms_get>
   20900:	9001      	str	r0, [sp, #4]
   20902:	4620      	mov	r0, r4
   20904:	f7ff fe13 	bl	2052e <sock_is_connecting>
   20908:	b918      	cbnz	r0, 20912 <nrf_connect+0xfe>
   2090a:	69a5      	ldr	r5, [r4, #24]
   2090c:	b185      	cbz	r5, 20930 <nrf_connect+0x11c>
   2090e:	4628      	mov	r0, r5
   20910:	e789      	b.n	20826 <nrf_connect+0x12>
   20912:	2002      	movs	r0, #2
   20914:	a901      	add	r1, sp, #4
   20916:	f7f0 fc8b 	bl	11230 <nrf_modem_os_timedwait>
   2091a:	f110 0f0b 	cmn.w	r0, #11
   2091e:	d005      	beq.n	2092c <nrf_connect+0x118>
   20920:	2800      	cmp	r0, #0
   20922:	d0ee      	beq.n	20902 <nrf_connect+0xee>
   20924:	2800      	cmp	r0, #0
   20926:	bfb8      	it	lt
   20928:	4240      	neglt	r0, r0
   2092a:	e77c      	b.n	20826 <nrf_connect+0x12>
   2092c:	2074      	movs	r0, #116	; 0x74
   2092e:	e77a      	b.n	20826 <nrf_connect+0x12>
   20930:	4620      	mov	r0, r4
   20932:	f7ff fdf0 	bl	20516 <sock_proto_is_secure>
   20936:	2800      	cmp	r0, #0
   20938:	f43f af79 	beq.w	2082e <nrf_connect+0x1a>
   2093c:	4620      	mov	r0, r4
   2093e:	9901      	ldr	r1, [sp, #4]
   20940:	f7f8 fd84 	bl	1944c <tls_attach>
   20944:	4605      	mov	r5, r0
   20946:	e772      	b.n	2082e <nrf_connect+0x1a>

00020948 <nrf_bind>:
   20948:	b538      	push	{r3, r4, r5, lr}
   2094a:	4605      	mov	r5, r0
   2094c:	460c      	mov	r4, r1
   2094e:	f7f7 fea1 	bl	18694 <sock_find>
   20952:	b930      	cbnz	r0, 20962 <nrf_bind+0x1a>
   20954:	2009      	movs	r0, #9
   20956:	f7fe feab 	bl	1f6b0 <nrf_modem_os_errno_set>
   2095a:	f04f 33ff 	mov.w	r3, #4294967295
   2095e:	4618      	mov	r0, r3
   20960:	bd38      	pop	{r3, r4, r5, pc}
   20962:	b90c      	cbnz	r4, 20968 <nrf_bind+0x20>
   20964:	200e      	movs	r0, #14
   20966:	e7f6      	b.n	20956 <nrf_bind+0xe>
   20968:	4621      	mov	r1, r4
   2096a:	f7ff fea2 	bl	206b2 <sock_sockaddr_fam_is_valid>
   2096e:	b908      	cbnz	r0, 20974 <nrf_bind+0x2c>
   20970:	206a      	movs	r0, #106	; 0x6a
   20972:	e7f0      	b.n	20956 <nrf_bind+0xe>
   20974:	2000      	movs	r0, #0
   20976:	f7ff fd12 	bl	2039e <rpc_client_msg_alloc>
   2097a:	4601      	mov	r1, r0
   2097c:	b908      	cbnz	r0, 20982 <nrf_bind+0x3a>
   2097e:	2069      	movs	r0, #105	; 0x69
   20980:	e7e9      	b.n	20956 <nrf_bind+0xe>
   20982:	2300      	movs	r3, #0
   20984:	2214      	movs	r2, #20
   20986:	6105      	str	r5, [r0, #16]
   20988:	7202      	strb	r2, [r0, #8]
   2098a:	7243      	strb	r3, [r0, #9]
   2098c:	7283      	strb	r3, [r0, #10]
   2098e:	72c3      	strb	r3, [r0, #11]
   20990:	6862      	ldr	r2, [r4, #4]
   20992:	2a01      	cmp	r2, #1
   20994:	d009      	beq.n	209aa <nrf_bind+0x62>
   20996:	2a02      	cmp	r2, #2
   20998:	d00f      	beq.n	209ba <nrf_bind+0x72>
   2099a:	f247 0005 	movw	r0, #28677	; 0x7005
   2099e:	f000 fb08 	bl	20fb2 <req_forward>
   209a2:	4603      	mov	r3, r0
   209a4:	2800      	cmp	r0, #0
   209a6:	d0da      	beq.n	2095e <nrf_bind+0x16>
   209a8:	e7d5      	b.n	20956 <nrf_bind+0xe>
   209aa:	8922      	ldrh	r2, [r4, #8]
   209ac:	75c3      	strb	r3, [r0, #23]
   209ae:	8282      	strh	r2, [r0, #20]
   209b0:	2204      	movs	r2, #4
   209b2:	7582      	strb	r2, [r0, #22]
   209b4:	68e3      	ldr	r3, [r4, #12]
   209b6:	6183      	str	r3, [r0, #24]
   209b8:	e7ef      	b.n	2099a <nrf_bind+0x52>
   209ba:	8922      	ldrh	r2, [r4, #8]
   209bc:	75c3      	strb	r3, [r0, #23]
   209be:	8282      	strh	r2, [r0, #20]
   209c0:	2210      	movs	r2, #16
   209c2:	18a3      	adds	r3, r4, r2
   209c4:	7582      	strb	r2, [r0, #22]
   209c6:	3420      	adds	r4, #32
   209c8:	f100 0218 	add.w	r2, r0, #24
   209cc:	f853 0b04 	ldr.w	r0, [r3], #4
   209d0:	42a3      	cmp	r3, r4
   209d2:	f842 0b04 	str.w	r0, [r2], #4
   209d6:	d1f9      	bne.n	209cc <nrf_bind+0x84>
   209d8:	e7df      	b.n	2099a <nrf_bind+0x52>

000209da <nrf_listen>:
   209da:	b538      	push	{r3, r4, r5, lr}
   209dc:	4605      	mov	r5, r0
   209de:	460c      	mov	r4, r1
   209e0:	f7f7 fe58 	bl	18694 <sock_find>
   209e4:	b930      	cbnz	r0, 209f4 <nrf_listen+0x1a>
   209e6:	2009      	movs	r0, #9
   209e8:	f7fe fe62 	bl	1f6b0 <nrf_modem_os_errno_set>
   209ec:	f04f 33ff 	mov.w	r3, #4294967295
   209f0:	4618      	mov	r0, r3
   209f2:	bd38      	pop	{r3, r4, r5, pc}
   209f4:	f7ff fd80 	bl	204f8 <sock_is_stream>
   209f8:	b908      	cbnz	r0, 209fe <nrf_listen+0x24>
   209fa:	205f      	movs	r0, #95	; 0x5f
   209fc:	e7f4      	b.n	209e8 <nrf_listen+0xe>
   209fe:	2000      	movs	r0, #0
   20a00:	f7ff fccd 	bl	2039e <rpc_client_msg_alloc>
   20a04:	4601      	mov	r1, r0
   20a06:	b908      	cbnz	r0, 20a0c <nrf_listen+0x32>
   20a08:	2069      	movs	r0, #105	; 0x69
   20a0a:	e7ed      	b.n	209e8 <nrf_listen+0xe>
   20a0c:	2300      	movs	r3, #0
   20a0e:	2204      	movs	r2, #4
   20a10:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   20a14:	7243      	strb	r3, [r0, #9]
   20a16:	7283      	strb	r3, [r0, #10]
   20a18:	72c3      	strb	r3, [r0, #11]
   20a1a:	6105      	str	r5, [r0, #16]
   20a1c:	7202      	strb	r2, [r0, #8]
   20a1e:	6144      	str	r4, [r0, #20]
   20a20:	f247 0008 	movw	r0, #28680	; 0x7008
   20a24:	f000 fac5 	bl	20fb2 <req_forward>
   20a28:	4603      	mov	r3, r0
   20a2a:	2800      	cmp	r0, #0
   20a2c:	d0e0      	beq.n	209f0 <nrf_listen+0x16>
   20a2e:	e7db      	b.n	209e8 <nrf_listen+0xe>

00020a30 <nrf_accept>:
   20a30:	2300      	movs	r3, #0
   20a32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20a36:	b08d      	sub	sp, #52	; 0x34
   20a38:	4606      	mov	r6, r0
   20a3a:	4688      	mov	r8, r1
   20a3c:	4614      	mov	r4, r2
   20a3e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   20a42:	f7f7 fe27 	bl	18694 <sock_find>
   20a46:	4605      	mov	r5, r0
   20a48:	b938      	cbnz	r0, 20a5a <nrf_accept+0x2a>
   20a4a:	2009      	movs	r0, #9
   20a4c:	f7fe fe30 	bl	1f6b0 <nrf_modem_os_errno_set>
   20a50:	f04f 30ff 	mov.w	r0, #4294967295
   20a54:	b00d      	add	sp, #52	; 0x34
   20a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20a5a:	f1b8 0f00 	cmp.w	r8, #0
   20a5e:	d002      	beq.n	20a66 <nrf_accept+0x36>
   20a60:	b91c      	cbnz	r4, 20a6a <nrf_accept+0x3a>
   20a62:	200e      	movs	r0, #14
   20a64:	e7f2      	b.n	20a4c <nrf_accept+0x1c>
   20a66:	2c00      	cmp	r4, #0
   20a68:	d1fb      	bne.n	20a62 <nrf_accept+0x32>
   20a6a:	4628      	mov	r0, r5
   20a6c:	f7ff fd44 	bl	204f8 <sock_is_stream>
   20a70:	b908      	cbnz	r0, 20a76 <nrf_accept+0x46>
   20a72:	205f      	movs	r0, #95	; 0x5f
   20a74:	e7ea      	b.n	20a4c <nrf_accept+0x1c>
   20a76:	4628      	mov	r0, r5
   20a78:	f7ff fd65 	bl	20546 <sock_is_nonblock>
   20a7c:	b128      	cbz	r0, 20a8a <nrf_accept+0x5a>
   20a7e:	4628      	mov	r0, r5
   20a80:	f7ff fd96 	bl	205b0 <sock_can_accept>
   20a84:	b908      	cbnz	r0, 20a8a <nrf_accept+0x5a>
   20a86:	200b      	movs	r0, #11
   20a88:	e7e0      	b.n	20a4c <nrf_accept+0x1c>
   20a8a:	f7f7 fddd 	bl	18648 <sock_open>
   20a8e:	4607      	mov	r7, r0
   20a90:	b908      	cbnz	r0, 20a96 <nrf_accept+0x66>
   20a92:	2017      	movs	r0, #23
   20a94:	e7da      	b.n	20a4c <nrf_accept+0x1c>
   20a96:	2000      	movs	r0, #0
   20a98:	f7ff fc81 	bl	2039e <rpc_client_msg_alloc>
   20a9c:	4605      	mov	r5, r0
   20a9e:	b920      	cbnz	r0, 20aaa <nrf_accept+0x7a>
   20aa0:	6838      	ldr	r0, [r7, #0]
   20aa2:	f7f7 fe09 	bl	186b8 <_sock_close>
   20aa6:	2069      	movs	r0, #105	; 0x69
   20aa8:	e7d0      	b.n	20a4c <nrf_accept+0x1c>
   20aaa:	6106      	str	r6, [r0, #16]
   20aac:	a901      	add	r1, sp, #4
   20aae:	9702      	str	r7, [sp, #8]
   20ab0:	f000 faab 	bl	2100a <req_cookie_set>
   20ab4:	4629      	mov	r1, r5
   20ab6:	f247 000c 	movw	r0, #28684	; 0x700c
   20aba:	f000 fa7a 	bl	20fb2 <req_forward>
   20abe:	4606      	mov	r6, r0
   20ac0:	b120      	cbz	r0, 20acc <nrf_accept+0x9c>
   20ac2:	6838      	ldr	r0, [r7, #0]
   20ac4:	f7f7 fdf8 	bl	186b8 <_sock_close>
   20ac8:	4630      	mov	r0, r6
   20aca:	e7bf      	b.n	20a4c <nrf_accept+0x1c>
   20acc:	9d01      	ldr	r5, [sp, #4]
   20ace:	f1b8 0f00 	cmp.w	r8, #0
   20ad2:	d006      	beq.n	20ae2 <nrf_accept+0xb2>
   20ad4:	b12c      	cbz	r4, 20ae2 <nrf_accept+0xb2>
   20ad6:	8beb      	ldrh	r3, [r5, #30]
   20ad8:	2b04      	cmp	r3, #4
   20ada:	d007      	beq.n	20aec <nrf_accept+0xbc>
   20adc:	2b10      	cmp	r3, #16
   20ade:	d01e      	beq.n	20b1e <nrf_accept+0xee>
   20ae0:	6026      	str	r6, [r4, #0]
   20ae2:	4628      	mov	r0, r5
   20ae4:	f7ff fc7e 	bl	203e4 <rpc_client_msg_rx_free>
   20ae8:	6838      	ldr	r0, [r7, #0]
   20aea:	e7b3      	b.n	20a54 <nrf_accept+0x24>
   20aec:	2310      	movs	r3, #16
   20aee:	9003      	str	r0, [sp, #12]
   20af0:	f88d 300c 	strb.w	r3, [sp, #12]
   20af4:	2301      	movs	r3, #1
   20af6:	6826      	ldr	r6, [r4, #0]
   20af8:	9005      	str	r0, [sp, #20]
   20afa:	2e10      	cmp	r6, #16
   20afc:	bf28      	it	cs
   20afe:	2610      	movcs	r6, #16
   20b00:	9304      	str	r3, [sp, #16]
   20b02:	7f2b      	ldrb	r3, [r5, #28]
   20b04:	7f6a      	ldrb	r2, [r5, #29]
   20b06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   20b0a:	f8ad 3014 	strh.w	r3, [sp, #20]
   20b0e:	6a2b      	ldr	r3, [r5, #32]
   20b10:	9306      	str	r3, [sp, #24]
   20b12:	4632      	mov	r2, r6
   20b14:	4640      	mov	r0, r8
   20b16:	a903      	add	r1, sp, #12
   20b18:	f001 f8ae 	bl	21c78 <memcpy>
   20b1c:	e7e0      	b.n	20ae0 <nrf_accept+0xb0>
   20b1e:	f04f 0924 	mov.w	r9, #36	; 0x24
   20b22:	4601      	mov	r1, r0
   20b24:	464a      	mov	r2, r9
   20b26:	a803      	add	r0, sp, #12
   20b28:	f001 f8cd 	bl	21cc6 <memset>
   20b2c:	2302      	movs	r3, #2
   20b2e:	f88d 900c 	strb.w	r9, [sp, #12]
   20b32:	9304      	str	r3, [sp, #16]
   20b34:	7f2b      	ldrb	r3, [r5, #28]
   20b36:	7f6a      	ldrb	r2, [r5, #29]
   20b38:	ae07      	add	r6, sp, #28
   20b3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   20b3e:	f8ad 3014 	strh.w	r3, [sp, #20]
   20b42:	f105 0c30 	add.w	ip, r5, #48	; 0x30
   20b46:	f105 0320 	add.w	r3, r5, #32
   20b4a:	4632      	mov	r2, r6
   20b4c:	6818      	ldr	r0, [r3, #0]
   20b4e:	6859      	ldr	r1, [r3, #4]
   20b50:	3308      	adds	r3, #8
   20b52:	c203      	stmia	r2!, {r0, r1}
   20b54:	4563      	cmp	r3, ip
   20b56:	4616      	mov	r6, r2
   20b58:	d1f7      	bne.n	20b4a <nrf_accept+0x11a>
   20b5a:	6826      	ldr	r6, [r4, #0]
   20b5c:	2e24      	cmp	r6, #36	; 0x24
   20b5e:	bf28      	it	cs
   20b60:	2624      	movcs	r6, #36	; 0x24
   20b62:	e7d6      	b.n	20b12 <nrf_accept+0xe2>

00020b64 <nrf_recvfrom>:
   20b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b68:	b085      	sub	sp, #20
   20b6a:	4690      	mov	r8, r2
   20b6c:	e9dd b70e 	ldrd	fp, r7, [sp, #56]	; 0x38
   20b70:	461e      	mov	r6, r3
   20b72:	9101      	str	r1, [sp, #4]
   20b74:	f403 7a80 	and.w	sl, r3, #256	; 0x100
   20b78:	f7f7 fd8c 	bl	18694 <sock_find>
   20b7c:	4604      	mov	r4, r0
   20b7e:	b940      	cbnz	r0, 20b92 <nrf_recvfrom+0x2e>
   20b80:	2009      	movs	r0, #9
   20b82:	f7fe fd95 	bl	1f6b0 <nrf_modem_os_errno_set>
   20b86:	f04f 39ff 	mov.w	r9, #4294967295
   20b8a:	4648      	mov	r0, r9
   20b8c:	b005      	add	sp, #20
   20b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b92:	f436 79a1 	bics.w	r9, r6, #322	; 0x142
   20b96:	d001      	beq.n	20b9c <nrf_recvfrom+0x38>
   20b98:	205f      	movs	r0, #95	; 0x5f
   20b9a:	e7f2      	b.n	20b82 <nrf_recvfrom+0x1e>
   20b9c:	f1bb 0f00 	cmp.w	fp, #0
   20ba0:	d002      	beq.n	20ba8 <nrf_recvfrom+0x44>
   20ba2:	b91f      	cbnz	r7, 20bac <nrf_recvfrom+0x48>
   20ba4:	200e      	movs	r0, #14
   20ba6:	e7ec      	b.n	20b82 <nrf_recvfrom+0x1e>
   20ba8:	2f00      	cmp	r7, #0
   20baa:	d1fb      	bne.n	20ba4 <nrf_recvfrom+0x40>
   20bac:	4620      	mov	r0, r4
   20bae:	f7ff fca3 	bl	204f8 <sock_is_stream>
   20bb2:	b128      	cbz	r0, 20bc0 <nrf_recvfrom+0x5c>
   20bb4:	4620      	mov	r0, r4
   20bb6:	f7ff fcbe 	bl	20536 <sock_is_connected>
   20bba:	b908      	cbnz	r0, 20bc0 <nrf_recvfrom+0x5c>
   20bbc:	2080      	movs	r0, #128	; 0x80
   20bbe:	e7e0      	b.n	20b82 <nrf_recvfrom+0x1e>
   20bc0:	f1ba 0f00 	cmp.w	sl, #0
   20bc4:	d117      	bne.n	20bf6 <nrf_recvfrom+0x92>
   20bc6:	4620      	mov	r0, r4
   20bc8:	f7ff fcbd 	bl	20546 <sock_is_nonblock>
   20bcc:	b9a8      	cbnz	r0, 20bfa <nrf_recvfrom+0x96>
   20bce:	f3c6 1580 	ubfx	r5, r6, #6, #1
   20bd2:	4620      	mov	r0, r4
   20bd4:	f7ff fd0f 	bl	205f6 <sock_rcvtimeo_ms_get>
   20bd8:	9003      	str	r0, [sp, #12]
   20bda:	4620      	mov	r0, r4
   20bdc:	f7ff fcb7 	bl	2054e <sock_is_closed>
   20be0:	b1b8      	cbz	r0, 20c12 <nrf_recvfrom+0xae>
   20be2:	4620      	mov	r0, r4
   20be4:	f7ff fc63 	bl	204ae <sock_has_pkt>
   20be8:	bb78      	cbnz	r0, 20c4a <nrf_recvfrom+0xe6>
   20bea:	4620      	mov	r0, r4
   20bec:	f7ff fcc5 	bl	2057a <sock_has_error>
   20bf0:	b1c0      	cbz	r0, 20c24 <nrf_recvfrom+0xc0>
   20bf2:	69a0      	ldr	r0, [r4, #24]
   20bf4:	e7c5      	b.n	20b82 <nrf_recvfrom+0x1e>
   20bf6:	2500      	movs	r5, #0
   20bf8:	e7eb      	b.n	20bd2 <nrf_recvfrom+0x6e>
   20bfa:	2501      	movs	r5, #1
   20bfc:	e7e9      	b.n	20bd2 <nrf_recvfrom+0x6e>
   20bfe:	2002      	movs	r0, #2
   20c00:	a903      	add	r1, sp, #12
   20c02:	f7f0 fb15 	bl	11230 <nrf_modem_os_timedwait>
   20c06:	2800      	cmp	r0, #0
   20c08:	d0e7      	beq.n	20bda <nrf_recvfrom+0x76>
   20c0a:	2800      	cmp	r0, #0
   20c0c:	bfb8      	it	lt
   20c0e:	4240      	neglt	r0, r0
   20c10:	e7b7      	b.n	20b82 <nrf_recvfrom+0x1e>
   20c12:	4620      	mov	r0, r4
   20c14:	f7ff fc4b 	bl	204ae <sock_has_pkt>
   20c18:	2800      	cmp	r0, #0
   20c1a:	d1e2      	bne.n	20be2 <nrf_recvfrom+0x7e>
   20c1c:	2d00      	cmp	r5, #0
   20c1e:	d0ee      	beq.n	20bfe <nrf_recvfrom+0x9a>
   20c20:	200b      	movs	r0, #11
   20c22:	e7ae      	b.n	20b82 <nrf_recvfrom+0x1e>
   20c24:	4620      	mov	r0, r4
   20c26:	f7ff fc9a 	bl	2055e <sock_is_eof>
   20c2a:	2800      	cmp	r0, #0
   20c2c:	d1ad      	bne.n	20b8a <nrf_recvfrom+0x26>
   20c2e:	4620      	mov	r0, r4
   20c30:	f7ff fc91 	bl	20556 <sock_is_local_closed>
   20c34:	b148      	cbz	r0, 20c4a <nrf_recvfrom+0xe6>
   20c36:	4620      	mov	r0, r4
   20c38:	f7ff fc5e 	bl	204f8 <sock_is_stream>
   20c3c:	2800      	cmp	r0, #0
   20c3e:	d1a4      	bne.n	20b8a <nrf_recvfrom+0x26>
   20c40:	4620      	mov	r0, r4
   20c42:	f7ff fc5e 	bl	20502 <sock_is_datagram>
   20c46:	2800      	cmp	r0, #0
   20c48:	d19a      	bne.n	20b80 <nrf_recvfrom+0x1c>
   20c4a:	4620      	mov	r0, r4
   20c4c:	f7ff fc52 	bl	204f4 <sock_pkt_peek_head>
   20c50:	4605      	mov	r5, r0
   20c52:	f1bb 0f00 	cmp.w	fp, #0
   20c56:	d00a      	beq.n	20c6e <nrf_recvfrom+0x10a>
   20c58:	68c1      	ldr	r1, [r0, #12]
   20c5a:	b369      	cbz	r1, 20cb8 <nrf_recvfrom+0x154>
   20c5c:	780a      	ldrb	r2, [r1, #0]
   20c5e:	683b      	ldr	r3, [r7, #0]
   20c60:	4658      	mov	r0, fp
   20c62:	429a      	cmp	r2, r3
   20c64:	bf28      	it	cs
   20c66:	461a      	movcs	r2, r3
   20c68:	603a      	str	r2, [r7, #0]
   20c6a:	f001 f805 	bl	21c78 <memcpy>
   20c6e:	f006 0602 	and.w	r6, r6, #2
   20c72:	4628      	mov	r0, r5
   20c74:	f7ff fd3a 	bl	206ec <pkt_bytes_left>
   20c78:	4540      	cmp	r0, r8
   20c7a:	d81f      	bhi.n	20cbc <nrf_recvfrom+0x158>
   20c7c:	4628      	mov	r0, r5
   20c7e:	f7ff fd35 	bl	206ec <pkt_bytes_left>
   20c82:	4607      	mov	r7, r0
   20c84:	2f00      	cmp	r7, #0
   20c86:	d080      	beq.n	20b8a <nrf_recvfrom+0x26>
   20c88:	9b01      	ldr	r3, [sp, #4]
   20c8a:	4628      	mov	r0, r5
   20c8c:	eb03 0b09 	add.w	fp, r3, r9
   20c90:	f7ff fd28 	bl	206e4 <pkt_bytes_get>
   20c94:	463a      	mov	r2, r7
   20c96:	4601      	mov	r1, r0
   20c98:	4658      	mov	r0, fp
   20c9a:	f000 ffed 	bl	21c78 <memcpy>
   20c9e:	4620      	mov	r0, r4
   20ca0:	44b9      	add	r9, r7
   20ca2:	f7ff fc2e 	bl	20502 <sock_is_datagram>
   20ca6:	b158      	cbz	r0, 20cc0 <nrf_recvfrom+0x15c>
   20ca8:	2e00      	cmp	r6, #0
   20caa:	f47f af6e 	bne.w	20b8a <nrf_recvfrom+0x26>
   20cae:	4629      	mov	r1, r5
   20cb0:	4620      	mov	r0, r4
   20cb2:	f7ff fc0b 	bl	204cc <sock_pkt_remove>
   20cb6:	e768      	b.n	20b8a <nrf_recvfrom+0x26>
   20cb8:	6039      	str	r1, [r7, #0]
   20cba:	e7d8      	b.n	20c6e <nrf_recvfrom+0x10a>
   20cbc:	4647      	mov	r7, r8
   20cbe:	e7e1      	b.n	20c84 <nrf_recvfrom+0x120>
   20cc0:	4620      	mov	r0, r4
   20cc2:	f7ff fc23 	bl	2050c <sock_is_raw>
   20cc6:	2800      	cmp	r0, #0
   20cc8:	d1ee      	bne.n	20ca8 <nrf_recvfrom+0x144>
   20cca:	b956      	cbnz	r6, 20ce2 <nrf_recvfrom+0x17e>
   20ccc:	896b      	ldrh	r3, [r5, #10]
   20cce:	4628      	mov	r0, r5
   20cd0:	443b      	add	r3, r7
   20cd2:	816b      	strh	r3, [r5, #10]
   20cd4:	f7ff fd0a 	bl	206ec <pkt_bytes_left>
   20cd8:	b918      	cbnz	r0, 20ce2 <nrf_recvfrom+0x17e>
   20cda:	4629      	mov	r1, r5
   20cdc:	4620      	mov	r0, r4
   20cde:	f7ff fbf5 	bl	204cc <sock_pkt_remove>
   20ce2:	45b8      	cmp	r8, r7
   20ce4:	f43f af51 	beq.w	20b8a <nrf_recvfrom+0x26>
   20ce8:	f1ba 0f00 	cmp.w	sl, #0
   20cec:	d10a      	bne.n	20d04 <nrf_recvfrom+0x1a0>
   20cee:	b976      	cbnz	r6, 20d0e <nrf_recvfrom+0x1aa>
   20cf0:	4620      	mov	r0, r4
   20cf2:	f7ff fbff 	bl	204f4 <sock_pkt_peek_head>
   20cf6:	e00d      	b.n	20d14 <nrf_recvfrom+0x1b0>
   20cf8:	4620      	mov	r0, r4
   20cfa:	f7ff fc28 	bl	2054e <sock_is_closed>
   20cfe:	2800      	cmp	r0, #0
   20d00:	f47f af43 	bne.w	20b8a <nrf_recvfrom+0x26>
   20d04:	b16e      	cbz	r6, 20d22 <nrf_recvfrom+0x1be>
   20d06:	4628      	mov	r0, r5
   20d08:	f7ff fce3 	bl	206d2 <pkt_has_next>
   20d0c:	b170      	cbz	r0, 20d2c <nrf_recvfrom+0x1c8>
   20d0e:	4628      	mov	r0, r5
   20d10:	f7ff fce5 	bl	206de <pkt_peek_next>
   20d14:	4605      	mov	r5, r0
   20d16:	2800      	cmp	r0, #0
   20d18:	f43f af37 	beq.w	20b8a <nrf_recvfrom+0x26>
   20d1c:	eba8 0807 	sub.w	r8, r8, r7
   20d20:	e7a7      	b.n	20c72 <nrf_recvfrom+0x10e>
   20d22:	4620      	mov	r0, r4
   20d24:	f7ff fbc3 	bl	204ae <sock_has_pkt>
   20d28:	2800      	cmp	r0, #0
   20d2a:	d1e1      	bne.n	20cf0 <nrf_recvfrom+0x18c>
   20d2c:	2002      	movs	r0, #2
   20d2e:	a903      	add	r1, sp, #12
   20d30:	f7f0 fa7e 	bl	11230 <nrf_modem_os_timedwait>
   20d34:	2800      	cmp	r0, #0
   20d36:	d0df      	beq.n	20cf8 <nrf_recvfrom+0x194>
   20d38:	f1b9 0f00 	cmp.w	r9, #0
   20d3c:	f47f af25 	bne.w	20b8a <nrf_recvfrom+0x26>
   20d40:	e763      	b.n	20c0a <nrf_recvfrom+0xa6>

00020d42 <rpc_ip_deinit>:
   20d42:	b508      	push	{r3, lr}
   20d44:	f7f7 fcce 	bl	186e4 <sock_shutdown>
   20d48:	2000      	movs	r0, #0
   20d4a:	bd08      	pop	{r3, pc}

00020d4c <tls_setopt_role>:
   20d4c:	b508      	push	{r3, lr}
   20d4e:	b109      	cbz	r1, 20d54 <tls_setopt_role+0x8>
   20d50:	2a04      	cmp	r2, #4
   20d52:	d005      	beq.n	20d60 <tls_setopt_role+0x14>
   20d54:	2016      	movs	r0, #22
   20d56:	f7fe fcab 	bl	1f6b0 <nrf_modem_os_errno_set>
   20d5a:	f04f 30ff 	mov.w	r0, #4294967295
   20d5e:	e006      	b.n	20d6e <tls_setopt_role+0x22>
   20d60:	780b      	ldrb	r3, [r1, #0]
   20d62:	b12b      	cbz	r3, 20d70 <tls_setopt_role+0x24>
   20d64:	2b01      	cmp	r3, #1
   20d66:	d1f5      	bne.n	20d54 <tls_setopt_role+0x8>
   20d68:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   20d6c:	2000      	movs	r0, #0
   20d6e:	bd08      	pop	{r3, pc}
   20d70:	2302      	movs	r3, #2
   20d72:	e7f9      	b.n	20d68 <tls_setopt_role+0x1c>

00020d74 <tls_setopt_taglist>:
   20d74:	b510      	push	{r4, lr}
   20d76:	1e54      	subs	r4, r2, #1
   20d78:	2c1b      	cmp	r4, #27
   20d7a:	d802      	bhi.n	20d82 <tls_setopt_taglist+0xe>
   20d7c:	f012 0403 	ands.w	r4, r2, #3
   20d80:	d005      	beq.n	20d8e <tls_setopt_taglist+0x1a>
   20d82:	2016      	movs	r0, #22
   20d84:	f7fe fc94 	bl	1f6b0 <nrf_modem_os_errno_set>
   20d88:	f04f 30ff 	mov.w	r0, #4294967295
   20d8c:	bd10      	pop	{r4, pc}
   20d8e:	0893      	lsrs	r3, r2, #2
   20d90:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   20d94:	3048      	adds	r0, #72	; 0x48
   20d96:	f000 ff6f 	bl	21c78 <memcpy>
   20d9a:	4620      	mov	r0, r4
   20d9c:	e7f6      	b.n	20d8c <tls_setopt_taglist+0x18>

00020d9e <tls_setopt_sess_cache>:
   20d9e:	b508      	push	{r3, lr}
   20da0:	b109      	cbz	r1, 20da6 <tls_setopt_sess_cache+0x8>
   20da2:	2a04      	cmp	r2, #4
   20da4:	d005      	beq.n	20db2 <tls_setopt_sess_cache+0x14>
   20da6:	2016      	movs	r0, #22
   20da8:	f7fe fc82 	bl	1f6b0 <nrf_modem_os_errno_set>
   20dac:	f04f 30ff 	mov.w	r0, #4294967295
   20db0:	bd08      	pop	{r3, pc}
   20db2:	780b      	ldrb	r3, [r1, #0]
   20db4:	3b00      	subs	r3, #0
   20db6:	bf18      	it	ne
   20db8:	2301      	movne	r3, #1
   20dba:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   20dbe:	2000      	movs	r0, #0
   20dc0:	e7f6      	b.n	20db0 <tls_setopt_sess_cache+0x12>

00020dc2 <tls_setopt_peer_verify>:
   20dc2:	b508      	push	{r3, lr}
   20dc4:	b109      	cbz	r1, 20dca <tls_setopt_peer_verify+0x8>
   20dc6:	2a04      	cmp	r2, #4
   20dc8:	d005      	beq.n	20dd6 <tls_setopt_peer_verify+0x14>
   20dca:	2016      	movs	r0, #22
   20dcc:	f7fe fc70 	bl	1f6b0 <nrf_modem_os_errno_set>
   20dd0:	f04f 30ff 	mov.w	r0, #4294967295
   20dd4:	bd08      	pop	{r3, pc}
   20dd6:	680b      	ldr	r3, [r1, #0]
   20dd8:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   20ddc:	2000      	movs	r0, #0
   20dde:	e7f9      	b.n	20dd4 <tls_setopt_peer_verify+0x12>

00020de0 <tls_setopt_hostname>:
   20de0:	b570      	push	{r4, r5, r6, lr}
   20de2:	4605      	mov	r5, r0
   20de4:	4614      	mov	r4, r2
   20de6:	460e      	mov	r6, r1
   20de8:	b931      	cbnz	r1, 20df8 <tls_setopt_hostname+0x18>
   20dea:	b192      	cbz	r2, 20e12 <tls_setopt_hostname+0x32>
   20dec:	2016      	movs	r0, #22
   20dee:	f7fe fc5f 	bl	1f6b0 <nrf_modem_os_errno_set>
   20df2:	f04f 30ff 	mov.w	r0, #4294967295
   20df6:	bd70      	pop	{r4, r5, r6, pc}
   20df8:	2a00      	cmp	r2, #0
   20dfa:	d0f7      	beq.n	20dec <tls_setopt_hostname+0xc>
   20dfc:	6c00      	ldr	r0, [r0, #64]	; 0x40
   20dfe:	b108      	cbz	r0, 20e04 <tls_setopt_hostname+0x24>
   20e00:	f7f0 fb18 	bl	11434 <nrf_modem_os_free>
   20e04:	1c60      	adds	r0, r4, #1
   20e06:	f7f0 fb0d 	bl	11424 <nrf_modem_os_alloc>
   20e0a:	6428      	str	r0, [r5, #64]	; 0x40
   20e0c:	b938      	cbnz	r0, 20e1e <tls_setopt_hostname+0x3e>
   20e0e:	2069      	movs	r0, #105	; 0x69
   20e10:	e7ed      	b.n	20dee <tls_setopt_hostname+0xe>
   20e12:	6c00      	ldr	r0, [r0, #64]	; 0x40
   20e14:	b108      	cbz	r0, 20e1a <tls_setopt_hostname+0x3a>
   20e16:	f7f0 fb0d 	bl	11434 <nrf_modem_os_free>
   20e1a:	2000      	movs	r0, #0
   20e1c:	e7eb      	b.n	20df6 <tls_setopt_hostname+0x16>
   20e1e:	4622      	mov	r2, r4
   20e20:	4631      	mov	r1, r6
   20e22:	f000 ff29 	bl	21c78 <memcpy>
   20e26:	2200      	movs	r2, #0
   20e28:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   20e2a:	551a      	strb	r2, [r3, r4]
   20e2c:	e7f5      	b.n	20e1a <tls_setopt_hostname+0x3a>

00020e2e <nrf_poll_one>:
   20e2e:	b538      	push	{r3, r4, r5, lr}
   20e30:	4604      	mov	r4, r0
   20e32:	6800      	ldr	r0, [r0, #0]
   20e34:	f7f7 fc2e 	bl	18694 <sock_find>
   20e38:	4605      	mov	r5, r0
   20e3a:	b928      	cbnz	r0, 20e48 <nrf_poll_one+0x1a>
   20e3c:	2001      	movs	r0, #1
   20e3e:	88e3      	ldrh	r3, [r4, #6]
   20e40:	f043 0320 	orr.w	r3, r3, #32
   20e44:	80e3      	strh	r3, [r4, #6]
   20e46:	bd38      	pop	{r3, r4, r5, pc}
   20e48:	f7ff fb85 	bl	20556 <sock_is_local_closed>
   20e4c:	2800      	cmp	r0, #0
   20e4e:	d1f5      	bne.n	20e3c <nrf_poll_one+0xe>
   20e50:	4628      	mov	r0, r5
   20e52:	f7ff fb92 	bl	2057a <sock_has_error>
   20e56:	b1f8      	cbz	r0, 20e98 <nrf_poll_one+0x6a>
   20e58:	88e3      	ldrh	r3, [r4, #6]
   20e5a:	f043 0308 	orr.w	r3, r3, #8
   20e5e:	80e3      	strh	r3, [r4, #6]
   20e60:	88a3      	ldrh	r3, [r4, #4]
   20e62:	07da      	lsls	r2, r3, #31
   20e64:	d507      	bpl.n	20e76 <nrf_poll_one+0x48>
   20e66:	4628      	mov	r0, r5
   20e68:	f7ff fb9d 	bl	205a6 <sock_can_read>
   20e6c:	b1e8      	cbz	r0, 20eaa <nrf_poll_one+0x7c>
   20e6e:	88e3      	ldrh	r3, [r4, #6]
   20e70:	f043 0301 	orr.w	r3, r3, #1
   20e74:	80e3      	strh	r3, [r4, #6]
   20e76:	88a3      	ldrh	r3, [r4, #4]
   20e78:	075b      	lsls	r3, r3, #29
   20e7a:	d507      	bpl.n	20e8c <nrf_poll_one+0x5e>
   20e7c:	4628      	mov	r0, r5
   20e7e:	f7ff fb9c 	bl	205ba <sock_can_send>
   20e82:	b118      	cbz	r0, 20e8c <nrf_poll_one+0x5e>
   20e84:	88e3      	ldrh	r3, [r4, #6]
   20e86:	f043 0304 	orr.w	r3, r3, #4
   20e8a:	80e3      	strh	r3, [r4, #6]
   20e8c:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
   20e90:	3800      	subs	r0, #0
   20e92:	bf18      	it	ne
   20e94:	2001      	movne	r0, #1
   20e96:	e7d6      	b.n	20e46 <nrf_poll_one+0x18>
   20e98:	4628      	mov	r0, r5
   20e9a:	f7ff fb60 	bl	2055e <sock_is_eof>
   20e9e:	2800      	cmp	r0, #0
   20ea0:	d0de      	beq.n	20e60 <nrf_poll_one+0x32>
   20ea2:	88e3      	ldrh	r3, [r4, #6]
   20ea4:	f043 0310 	orr.w	r3, r3, #16
   20ea8:	e7d9      	b.n	20e5e <nrf_poll_one+0x30>
   20eaa:	4628      	mov	r0, r5
   20eac:	f7ff fb80 	bl	205b0 <sock_can_accept>
   20eb0:	2800      	cmp	r0, #0
   20eb2:	d1dc      	bne.n	20e6e <nrf_poll_one+0x40>
   20eb4:	4628      	mov	r0, r5
   20eb6:	f7ff fb52 	bl	2055e <sock_is_eof>
   20eba:	2800      	cmp	r0, #0
   20ebc:	d1d7      	bne.n	20e6e <nrf_poll_one+0x40>
   20ebe:	e7da      	b.n	20e76 <nrf_poll_one+0x48>

00020ec0 <nrf_fcntl>:
   20ec0:	b538      	push	{r3, r4, r5, lr}
   20ec2:	460d      	mov	r5, r1
   20ec4:	4614      	mov	r4, r2
   20ec6:	f7f7 fbe5 	bl	18694 <sock_find>
   20eca:	b928      	cbnz	r0, 20ed8 <nrf_fcntl+0x18>
   20ecc:	2009      	movs	r0, #9
   20ece:	f7fe fbef 	bl	1f6b0 <nrf_modem_os_errno_set>
   20ed2:	f04f 30ff 	mov.w	r0, #4294967295
   20ed6:	e006      	b.n	20ee6 <nrf_fcntl+0x26>
   20ed8:	2d03      	cmp	r5, #3
   20eda:	d003      	beq.n	20ee4 <nrf_fcntl+0x24>
   20edc:	2d04      	cmp	r5, #4
   20ede:	d003      	beq.n	20ee8 <nrf_fcntl+0x28>
   20ee0:	2016      	movs	r0, #22
   20ee2:	e7f4      	b.n	20ece <nrf_fcntl+0xe>
   20ee4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   20ee6:	bd38      	pop	{r3, r4, r5, pc}
   20ee8:	2c01      	cmp	r4, #1
   20eea:	d8f9      	bhi.n	20ee0 <nrf_fcntl+0x20>
   20eec:	63c4      	str	r4, [r0, #60]	; 0x3c
   20eee:	2000      	movs	r0, #0
   20ef0:	e7f9      	b.n	20ee6 <nrf_fcntl+0x26>

00020ef2 <rpc_af_to_nrf_af>:
   20ef2:	1f43      	subs	r3, r0, #5
   20ef4:	2b00      	cmp	r3, #0
   20ef6:	d803      	bhi.n	20f00 <rpc_af_to_nrf_af+0xe>
   20ef8:	e8df f003 	tbb	[pc, r3]
   20efc:	01          	.byte	0x01
   20efd:	00          	.byte	0x00
   20efe:	2003      	movs	r0, #3
   20f00:	4770      	bx	lr

00020f02 <nrf_type_to_rpc_type>:
   20f02:	4770      	bx	lr

00020f04 <nrf_proto_to_rpc_proto>:
   20f04:	2829      	cmp	r0, #41	; 0x29
   20f06:	d015      	beq.n	20f34 <nrf_proto_to_rpc_proto+0x30>
   20f08:	dc05      	bgt.n	20f16 <nrf_proto_to_rpc_proto+0x12>
   20f0a:	2806      	cmp	r0, #6
   20f0c:	d014      	beq.n	20f38 <nrf_proto_to_rpc_proto+0x34>
   20f0e:	2811      	cmp	r0, #17
   20f10:	d014      	beq.n	20f3c <nrf_proto_to_rpc_proto+0x38>
   20f12:	b148      	cbz	r0, 20f28 <nrf_proto_to_rpc_proto+0x24>
   20f14:	4770      	bx	lr
   20f16:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   20f1a:	d00d      	beq.n	20f38 <nrf_proto_to_rpc_proto+0x34>
   20f1c:	f240 1311 	movw	r3, #273	; 0x111
   20f20:	4298      	cmp	r0, r3
   20f22:	d00b      	beq.n	20f3c <nrf_proto_to_rpc_proto+0x38>
   20f24:	28ff      	cmp	r0, #255	; 0xff
   20f26:	d10c      	bne.n	20f42 <nrf_proto_to_rpc_proto+0x3e>
   20f28:	2901      	cmp	r1, #1
   20f2a:	d009      	beq.n	20f40 <nrf_proto_to_rpc_proto+0x3c>
   20f2c:	2902      	cmp	r1, #2
   20f2e:	bf08      	it	eq
   20f30:	2002      	moveq	r0, #2
   20f32:	4770      	bx	lr
   20f34:	2006      	movs	r0, #6
   20f36:	4770      	bx	lr
   20f38:	2001      	movs	r0, #1
   20f3a:	4770      	bx	lr
   20f3c:	2002      	movs	r0, #2
   20f3e:	4770      	bx	lr
   20f40:	4608      	mov	r0, r1
   20f42:	4770      	bx	lr

00020f44 <nrf_sol_to_rpc_sol>:
   20f44:	2829      	cmp	r0, #41	; 0x29
   20f46:	d011      	beq.n	20f6c <nrf_sol_to_rpc_sol+0x28>
   20f48:	dc0a      	bgt.n	20f60 <nrf_sol_to_rpc_sol+0x1c>
   20f4a:	2801      	cmp	r0, #1
   20f4c:	d010      	beq.n	20f70 <nrf_sol_to_rpc_sol+0x2c>
   20f4e:	2806      	cmp	r0, #6
   20f50:	d010      	beq.n	20f74 <nrf_sol_to_rpc_sol+0x30>
   20f52:	2800      	cmp	r0, #0
   20f54:	bf08      	it	eq
   20f56:	2004      	moveq	r0, #4
   20f58:	bf18      	it	ne
   20f5a:	f04f 30ff 	movne.w	r0, #4294967295
   20f5e:	4770      	bx	lr
   20f60:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   20f64:	d008      	beq.n	20f78 <nrf_sol_to_rpc_sol+0x34>
   20f66:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   20f6a:	e7f5      	b.n	20f58 <nrf_sol_to_rpc_sol+0x14>
   20f6c:	2006      	movs	r0, #6
   20f6e:	4770      	bx	lr
   20f70:	2008      	movs	r0, #8
   20f72:	4770      	bx	lr
   20f74:	2001      	movs	r0, #1
   20f76:	4770      	bx	lr
   20f78:	f44f 7080 	mov.w	r0, #256	; 0x100
   20f7c:	4770      	bx	lr

00020f7e <rpc_error_to_nrf_gai_errno>:
   20f7e:	b508      	push	{r3, lr}
   20f80:	1f03      	subs	r3, r0, #4
   20f82:	2b09      	cmp	r3, #9
   20f84:	d80f      	bhi.n	20fa6 <rpc_error_to_nrf_gai_errno+0x28>
   20f86:	e8df f003 	tbb	[pc, r3]
   20f8a:	1108      	.short	0x1108
   20f8c:	0e0e0e05 	.word	0x0e0e0e05
   20f90:	050e0e0e 	.word	0x050e0e0e
   20f94:	f06f 0001 	mvn.w	r0, #1
   20f98:	bd08      	pop	{r3, pc}
   20f9a:	2073      	movs	r0, #115	; 0x73
   20f9c:	f7fe fb88 	bl	1f6b0 <nrf_modem_os_errno_set>
   20fa0:	f06f 000a 	mvn.w	r0, #10
   20fa4:	e7f8      	b.n	20f98 <rpc_error_to_nrf_gai_errno+0x1a>
   20fa6:	f7f8 fadd 	bl	19564 <rpc_error_to_nrf_errno>
   20faa:	e7f7      	b.n	20f9c <rpc_error_to_nrf_gai_errno+0x1e>
   20fac:	f06f 0063 	mvn.w	r0, #99	; 0x63
   20fb0:	e7f2      	b.n	20f98 <rpc_error_to_nrf_gai_errno+0x1a>

00020fb2 <req_forward>:
   20fb2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   20fb4:	2300      	movs	r3, #0
   20fb6:	460a      	mov	r2, r1
   20fb8:	f04f 31ff 	mov.w	r1, #4294967295
   20fbc:	9303      	str	r3, [sp, #12]
   20fbe:	68d6      	ldr	r6, [r2, #12]
   20fc0:	ad02      	add	r5, sp, #8
   20fc2:	9302      	str	r3, [sp, #8]
   20fc4:	9101      	str	r1, [sp, #4]
   20fc6:	b18e      	cbz	r6, 20fec <req_forward+0x3a>
   20fc8:	4635      	mov	r5, r6
   20fca:	b281      	uxth	r1, r0
   20fcc:	602b      	str	r3, [r5, #0]
   20fce:	2004      	movs	r0, #4
   20fd0:	f7ff fa01 	bl	203d6 <rpc_client_msg_send>
   20fd4:	682b      	ldr	r3, [r5, #0]
   20fd6:	b15b      	cbz	r3, 20ff0 <req_forward+0x3e>
   20fd8:	6958      	ldr	r0, [r3, #20]
   20fda:	f7f8 fac3 	bl	19564 <rpc_error_to_nrf_errno>
   20fde:	4604      	mov	r4, r0
   20fe0:	b106      	cbz	r6, 20fe4 <req_forward+0x32>
   20fe2:	b178      	cbz	r0, 21004 <req_forward+0x52>
   20fe4:	6828      	ldr	r0, [r5, #0]
   20fe6:	f7ff f9fd 	bl	203e4 <rpc_client_msg_rx_free>
   20fea:	e00b      	b.n	21004 <req_forward+0x52>
   20fec:	60d5      	str	r5, [r2, #12]
   20fee:	e7ec      	b.n	20fca <req_forward+0x18>
   20ff0:	2002      	movs	r0, #2
   20ff2:	a901      	add	r1, sp, #4
   20ff4:	f7f0 f91c 	bl	11230 <nrf_modem_os_timedwait>
   20ff8:	2800      	cmp	r0, #0
   20ffa:	d0eb      	beq.n	20fd4 <req_forward+0x22>
   20ffc:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
   21000:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
   21004:	4620      	mov	r0, r4
   21006:	b004      	add	sp, #16
   21008:	bd70      	pop	{r4, r5, r6, pc}

0002100a <req_cookie_set>:
   2100a:	60c1      	str	r1, [r0, #12]
   2100c:	4770      	bx	lr

0002100e <res_cookie_get>:
   2100e:	68c0      	ldr	r0, [r0, #12]
   21010:	4770      	bx	lr

00021012 <res_forward>:
   21012:	68c3      	ldr	r3, [r0, #12]
   21014:	6018      	str	r0, [r3, #0]
   21016:	2001      	movs	r0, #1
   21018:	4770      	bx	lr

0002101a <gnss_msg_alloc_and_set_common>:
   2101a:	b538      	push	{r3, r4, r5, lr}
   2101c:	4605      	mov	r5, r0
   2101e:	f7ff f9be 	bl	2039e <rpc_client_msg_alloc>
   21022:	4604      	mov	r4, r0
   21024:	b190      	cbz	r0, 2104c <gnss_msg_alloc_and_set_common+0x32>
   21026:	6842      	ldr	r2, [r0, #4]
   21028:	2100      	movs	r1, #0
   2102a:	6800      	ldr	r0, [r0, #0]
   2102c:	f000 fe4b 	bl	21cc6 <memset>
   21030:	2300      	movs	r3, #0
   21032:	7223      	strb	r3, [r4, #8]
   21034:	7263      	strb	r3, [r4, #9]
   21036:	72a3      	strb	r3, [r4, #10]
   21038:	72e3      	strb	r3, [r4, #11]
   2103a:	2343      	movs	r3, #67	; 0x43
   2103c:	7323      	strb	r3, [r4, #12]
   2103e:	2354      	movs	r3, #84	; 0x54
   21040:	7363      	strb	r3, [r4, #13]
   21042:	2376      	movs	r3, #118	; 0x76
   21044:	73a3      	strb	r3, [r4, #14]
   21046:	2349      	movs	r3, #73	; 0x49
   21048:	6065      	str	r5, [r4, #4]
   2104a:	73e3      	strb	r3, [r4, #15]
   2104c:	4620      	mov	r0, r4
   2104e:	bd38      	pop	{r3, r4, r5, pc}

00021050 <rpc_gnss_serialize_utc>:
   21050:	b1d8      	cbz	r0, 2108a <rpc_gnss_serialize_utc+0x3a>
   21052:	b1d1      	cbz	r1, 2108a <rpc_gnss_serialize_utc+0x3a>
   21054:	2301      	movs	r3, #1
   21056:	700b      	strb	r3, [r1, #0]
   21058:	2300      	movs	r3, #0
   2105a:	704b      	strb	r3, [r1, #1]
   2105c:	6843      	ldr	r3, [r0, #4]
   2105e:	f8c1 3006 	str.w	r3, [r1, #6]
   21062:	6803      	ldr	r3, [r0, #0]
   21064:	f8c1 3002 	str.w	r3, [r1, #2]
   21068:	f990 300a 	ldrsb.w	r3, [r0, #10]
   2106c:	730b      	strb	r3, [r1, #12]
   2106e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   21072:	73cb      	strb	r3, [r1, #15]
   21074:	f990 300c 	ldrsb.w	r3, [r0, #12]
   21078:	738b      	strb	r3, [r1, #14]
   2107a:	7a03      	ldrb	r3, [r0, #8]
   2107c:	728b      	strb	r3, [r1, #10]
   2107e:	7ac3      	ldrb	r3, [r0, #11]
   21080:	734b      	strb	r3, [r1, #13]
   21082:	7a43      	ldrb	r3, [r0, #9]
   21084:	2010      	movs	r0, #16
   21086:	72cb      	strb	r3, [r1, #11]
   21088:	4770      	bx	lr
   2108a:	f04f 30ff 	mov.w	r0, #4294967295
   2108e:	4770      	bx	lr

00021090 <rpc_gnss_serialize_ephe>:
   21090:	2800      	cmp	r0, #0
   21092:	d04b      	beq.n	2112c <rpc_gnss_serialize_ephe+0x9c>
   21094:	2900      	cmp	r1, #0
   21096:	d049      	beq.n	2112c <rpc_gnss_serialize_ephe+0x9c>
   21098:	2302      	movs	r3, #2
   2109a:	700b      	strb	r3, [r1, #0]
   2109c:	2300      	movs	r3, #0
   2109e:	704b      	strb	r3, [r1, #1]
   210a0:	68c3      	ldr	r3, [r0, #12]
   210a2:	f8c1 300b 	str.w	r3, [r1, #11]
   210a6:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   210aa:	f8a1 3009 	strh.w	r3, [r1, #9]
   210ae:	f990 3006 	ldrsb.w	r3, [r0, #6]
   210b2:	720b      	strb	r3, [r1, #8]
   210b4:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
   210b8:	878b      	strh	r3, [r1, #60]	; 0x3c
   210ba:	f9b0 303e 	ldrsh.w	r3, [r0, #62]	; 0x3e
   210be:	86cb      	strh	r3, [r1, #54]	; 0x36
   210c0:	f9b0 3042 	ldrsh.w	r3, [r0, #66]	; 0x42
   210c4:	874b      	strh	r3, [r1, #58]	; 0x3a
   210c6:	f9b0 303c 	ldrsh.w	r3, [r0, #60]	; 0x3c
   210ca:	868b      	strh	r3, [r1, #52]	; 0x34
   210cc:	f9b0 3046 	ldrsh.w	r3, [r0, #70]	; 0x46
   210d0:	87cb      	strh	r3, [r1, #62]	; 0x3e
   210d2:	f9b0 3040 	ldrsh.w	r3, [r0, #64]	; 0x40
   210d6:	870b      	strh	r3, [r1, #56]	; 0x38
   210d8:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
   210dc:	830b      	strh	r3, [r1, #24]
   210de:	6a83      	ldr	r3, [r0, #40]	; 0x28
   210e0:	f8c1 3022 	str.w	r3, [r1, #34]	; 0x22
   210e4:	7c83      	ldrb	r3, [r0, #18]
   210e6:	744b      	strb	r3, [r1, #17]
   210e8:	7843      	ldrb	r3, [r0, #1]
   210ea:	70cb      	strb	r3, [r1, #3]
   210ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
   210ee:	62cb      	str	r3, [r1, #44]	; 0x2c
   210f0:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
   210f4:	84cb      	strh	r3, [r1, #38]	; 0x26
   210f6:	8843      	ldrh	r3, [r0, #2]
   210f8:	808b      	strh	r3, [r1, #4]
   210fa:	6a03      	ldr	r3, [r0, #32]
   210fc:	f8c1 301a 	str.w	r3, [r1, #26]
   21100:	6b83      	ldr	r3, [r0, #56]	; 0x38
   21102:	630b      	str	r3, [r1, #48]	; 0x30
   21104:	6a43      	ldr	r3, [r0, #36]	; 0x24
   21106:	f8c1 301e 	str.w	r3, [r1, #30]
   2110a:	6b03      	ldr	r3, [r0, #48]	; 0x30
   2110c:	628b      	str	r3, [r1, #40]	; 0x28
   2110e:	7803      	ldrb	r3, [r0, #0]
   21110:	708b      	strb	r3, [r1, #2]
   21112:	f990 3010 	ldrsb.w	r3, [r0, #16]
   21116:	73cb      	strb	r3, [r1, #15]
   21118:	8883      	ldrh	r3, [r0, #4]
   2111a:	80cb      	strh	r3, [r1, #6]
   2111c:	8a83      	ldrh	r3, [r0, #20]
   2111e:	824b      	strh	r3, [r1, #18]
   21120:	7c43      	ldrb	r3, [r0, #17]
   21122:	740b      	strb	r3, [r1, #16]
   21124:	6983      	ldr	r3, [r0, #24]
   21126:	2040      	movs	r0, #64	; 0x40
   21128:	614b      	str	r3, [r1, #20]
   2112a:	4770      	bx	lr
   2112c:	f04f 30ff 	mov.w	r0, #4294967295
   21130:	4770      	bx	lr

00021132 <rpc_gnss_serialize_alm>:
   21132:	b360      	cbz	r0, 2118e <rpc_gnss_serialize_alm+0x5c>
   21134:	b359      	cbz	r1, 2118e <rpc_gnss_serialize_alm+0x5c>
   21136:	2303      	movs	r3, #3
   21138:	700b      	strb	r3, [r1, #0]
   2113a:	2300      	movs	r3, #0
   2113c:	704b      	strb	r3, [r1, #1]
   2113e:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
   21142:	f8a1 301d 	strh.w	r3, [r1, #29]
   21146:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
   2114a:	f8a1 301f 	strh.w	r3, [r1, #31]
   2114e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   21152:	810b      	strh	r3, [r1, #8]
   21154:	8883      	ldrh	r3, [r0, #4]
   21156:	80cb      	strh	r3, [r1, #6]
   21158:	78c3      	ldrb	r3, [r0, #3]
   2115a:	714b      	strb	r3, [r1, #5]
   2115c:	6983      	ldr	r3, [r0, #24]
   2115e:	f8c1 3019 	str.w	r3, [r1, #25]
   21162:	6903      	ldr	r3, [r0, #16]
   21164:	f8c1 3011 	str.w	r3, [r1, #17]
   21168:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   2116c:	814b      	strh	r3, [r1, #10]
   2116e:	68c3      	ldr	r3, [r0, #12]
   21170:	f8c1 300d 	str.w	r3, [r1, #13]
   21174:	7a83      	ldrb	r3, [r0, #10]
   21176:	730b      	strb	r3, [r1, #12]
   21178:	7803      	ldrb	r3, [r0, #0]
   2117a:	708b      	strb	r3, [r1, #2]
   2117c:	7883      	ldrb	r3, [r0, #2]
   2117e:	710b      	strb	r3, [r1, #4]
   21180:	6943      	ldr	r3, [r0, #20]
   21182:	f8c1 3015 	str.w	r3, [r1, #21]
   21186:	7843      	ldrb	r3, [r0, #1]
   21188:	2021      	movs	r0, #33	; 0x21
   2118a:	70cb      	strb	r3, [r1, #3]
   2118c:	4770      	bx	lr
   2118e:	f04f 30ff 	mov.w	r0, #4294967295
   21192:	4770      	bx	lr

00021194 <rpc_gnss_serialize_klob>:
   21194:	b1f0      	cbz	r0, 211d4 <rpc_gnss_serialize_klob+0x40>
   21196:	b1e9      	cbz	r1, 211d4 <rpc_gnss_serialize_klob+0x40>
   21198:	2304      	movs	r3, #4
   2119a:	700b      	strb	r3, [r1, #0]
   2119c:	2300      	movs	r3, #0
   2119e:	704b      	strb	r3, [r1, #1]
   211a0:	f990 3000 	ldrsb.w	r3, [r0]
   211a4:	708b      	strb	r3, [r1, #2]
   211a6:	f990 3001 	ldrsb.w	r3, [r0, #1]
   211aa:	70cb      	strb	r3, [r1, #3]
   211ac:	f990 3002 	ldrsb.w	r3, [r0, #2]
   211b0:	710b      	strb	r3, [r1, #4]
   211b2:	f990 3003 	ldrsb.w	r3, [r0, #3]
   211b6:	714b      	strb	r3, [r1, #5]
   211b8:	f990 3004 	ldrsb.w	r3, [r0, #4]
   211bc:	718b      	strb	r3, [r1, #6]
   211be:	f990 3005 	ldrsb.w	r3, [r0, #5]
   211c2:	71cb      	strb	r3, [r1, #7]
   211c4:	f990 3006 	ldrsb.w	r3, [r0, #6]
   211c8:	720b      	strb	r3, [r1, #8]
   211ca:	f990 3007 	ldrsb.w	r3, [r0, #7]
   211ce:	200a      	movs	r0, #10
   211d0:	724b      	strb	r3, [r1, #9]
   211d2:	4770      	bx	lr
   211d4:	f04f 30ff 	mov.w	r0, #4294967295
   211d8:	4770      	bx	lr

000211da <rpc_gnss_serialize_nequick>:
   211da:	b198      	cbz	r0, 21204 <rpc_gnss_serialize_nequick+0x2a>
   211dc:	b191      	cbz	r1, 21204 <rpc_gnss_serialize_nequick+0x2a>
   211de:	2305      	movs	r3, #5
   211e0:	700b      	strb	r3, [r1, #0]
   211e2:	2300      	movs	r3, #0
   211e4:	704b      	strb	r3, [r1, #1]
   211e6:	f9b0 3000 	ldrsh.w	r3, [r0]
   211ea:	804b      	strh	r3, [r1, #2]
   211ec:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   211f0:	808b      	strh	r3, [r1, #4]
   211f2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   211f6:	80cb      	strh	r3, [r1, #6]
   211f8:	7983      	ldrb	r3, [r0, #6]
   211fa:	720b      	strb	r3, [r1, #8]
   211fc:	79c3      	ldrb	r3, [r0, #7]
   211fe:	200a      	movs	r0, #10
   21200:	724b      	strb	r3, [r1, #9]
   21202:	4770      	bx	lr
   21204:	f04f 30ff 	mov.w	r0, #4294967295
   21208:	4770      	bx	lr

0002120a <rpc_gnss_serialize_time_and_sv_tow>:
   2120a:	b570      	push	{r4, r5, r6, lr}
   2120c:	b1e8      	cbz	r0, 2124a <rpc_gnss_serialize_time_and_sv_tow+0x40>
   2120e:	b1e1      	cbz	r1, 2124a <rpc_gnss_serialize_time_and_sv_tow+0x40>
   21210:	2206      	movs	r2, #6
   21212:	2300      	movs	r3, #0
   21214:	700a      	strb	r2, [r1, #0]
   21216:	704b      	strb	r3, [r1, #1]
   21218:	8802      	ldrh	r2, [r0, #0]
   2121a:	f101 0410 	add.w	r4, r1, #16
   2121e:	804a      	strh	r2, [r1, #2]
   21220:	68c2      	ldr	r2, [r0, #12]
   21222:	f8c1 200a 	str.w	r2, [r1, #10]
   21226:	8902      	ldrh	r2, [r0, #8]
   21228:	810a      	strh	r2, [r1, #8]
   2122a:	6842      	ldr	r2, [r0, #4]
   2122c:	604a      	str	r2, [r1, #4]
   2122e:	8a06      	ldrh	r6, [r0, #16]
   21230:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   21234:	188d      	adds	r5, r1, r2
   21236:	81ee      	strh	r6, [r5, #14]
   21238:	7c85      	ldrb	r5, [r0, #18]
   2123a:	3301      	adds	r3, #1
   2123c:	2b20      	cmp	r3, #32
   2123e:	54a5      	strb	r5, [r4, r2]
   21240:	f100 0004 	add.w	r0, r0, #4
   21244:	d1f3      	bne.n	2122e <rpc_gnss_serialize_time_and_sv_tow+0x24>
   21246:	206e      	movs	r0, #110	; 0x6e
   21248:	bd70      	pop	{r4, r5, r6, pc}
   2124a:	f04f 30ff 	mov.w	r0, #4294967295
   2124e:	e7fb      	b.n	21248 <rpc_gnss_serialize_time_and_sv_tow+0x3e>

00021250 <rpc_gnss_serialize_location>:
   21250:	b1c8      	cbz	r0, 21286 <rpc_gnss_serialize_location+0x36>
   21252:	b1c1      	cbz	r1, 21286 <rpc_gnss_serialize_location+0x36>
   21254:	2307      	movs	r3, #7
   21256:	700b      	strb	r3, [r1, #0]
   21258:	2300      	movs	r3, #0
   2125a:	704b      	strb	r3, [r1, #1]
   2125c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   21260:	814b      	strh	r3, [r1, #10]
   21262:	7b83      	ldrb	r3, [r0, #14]
   21264:	740b      	strb	r3, [r1, #16]
   21266:	6803      	ldr	r3, [r0, #0]
   21268:	f8c1 3002 	str.w	r3, [r1, #2]
   2126c:	6843      	ldr	r3, [r0, #4]
   2126e:	f8c1 3006 	str.w	r3, [r1, #6]
   21272:	7b03      	ldrb	r3, [r0, #12]
   21274:	738b      	strb	r3, [r1, #14]
   21276:	7b43      	ldrb	r3, [r0, #13]
   21278:	73cb      	strb	r3, [r1, #15]
   2127a:	7a83      	ldrb	r3, [r0, #10]
   2127c:	730b      	strb	r3, [r1, #12]
   2127e:	7ac3      	ldrb	r3, [r0, #11]
   21280:	2011      	movs	r0, #17
   21282:	734b      	strb	r3, [r1, #13]
   21284:	4770      	bx	lr
   21286:	f04f 30ff 	mov.w	r0, #4294967295
   2128a:	4770      	bx	lr

0002128c <rpc_gnss_serialize_integrity>:
   2128c:	b148      	cbz	r0, 212a2 <rpc_gnss_serialize_integrity+0x16>
   2128e:	b141      	cbz	r1, 212a2 <rpc_gnss_serialize_integrity+0x16>
   21290:	2308      	movs	r3, #8
   21292:	700b      	strb	r3, [r1, #0]
   21294:	2300      	movs	r3, #0
   21296:	704b      	strb	r3, [r1, #1]
   21298:	6803      	ldr	r3, [r0, #0]
   2129a:	2006      	movs	r0, #6
   2129c:	f8c1 3002 	str.w	r3, [r1, #2]
   212a0:	4770      	bx	lr
   212a2:	f04f 30ff 	mov.w	r0, #4294967295
   212a6:	4770      	bx	lr

000212a8 <rpc_dfu_event_handler>:
   212a8:	b510      	push	{r4, lr}
   212aa:	4604      	mov	r4, r0
   212ac:	6800      	ldr	r0, [r0, #0]
   212ae:	b108      	cbz	r0, 212b4 <rpc_dfu_event_handler+0xc>
   212b0:	f7ff f89e 	bl	203f0 <rpc_client_msg_data_rx_free>
   212b4:	68e0      	ldr	r0, [r4, #12]
   212b6:	b108      	cbz	r0, 212bc <rpc_dfu_event_handler+0x14>
   212b8:	6004      	str	r4, [r0, #0]
   212ba:	2001      	movs	r0, #1
   212bc:	bd10      	pop	{r4, pc}

000212be <rpc_at_deinit>:
   212be:	2000      	movs	r0, #0
   212c0:	4770      	bx	lr

000212c2 <rpc_delta_dfu_deinit>:
   212c2:	2000      	movs	r0, #0
   212c4:	4770      	bx	lr

000212c6 <rpc_delta_dfu_init>:
   212c6:	2000      	movs	r0, #0
   212c8:	4770      	bx	lr

000212ca <nrf_modem_is_initialized>:
   212ca:	f7f8 be4d 	b.w	19f68 <nrf_modem_state_is_initialized>

000212ce <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   212ce:	4770      	bx	lr

000212d0 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   212d0:	b140      	cbz	r0, 212e4 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   212d2:	68c3      	ldr	r3, [r0, #12]
   212d4:	7858      	ldrb	r0, [r3, #1]
   212d6:	f010 0001 	ands.w	r0, r0, #1
   212da:	bf1e      	ittt	ne
   212dc:	7818      	ldrbne	r0, [r3, #0]
   212de:	fab0 f080 	clzne	r0, r0
   212e2:	0940      	lsrne	r0, r0, #5
}
   212e4:	4770      	bx	lr

000212e6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   212e6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   212e8:	ab0b      	add	r3, sp, #44	; 0x2c
   212ea:	9305      	str	r3, [sp, #20]
   212ec:	9303      	str	r3, [sp, #12]
   212ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   212f0:	2201      	movs	r2, #1
   212f2:	9302      	str	r3, [sp, #8]
   212f4:	2300      	movs	r3, #0
   212f6:	4618      	mov	r0, r3
   212f8:	e9cd 3300 	strd	r3, r3, [sp]
   212fc:	f7eb fe6e 	bl	cfdc <z_impl_z_log_msg_runtime_vcreate>
}
   21300:	b007      	add	sp, #28
   21302:	f85d fb04 	ldr.w	pc, [sp], #4

00021306 <z_early_memset>:
   21306:	f000 bcde 	b.w	21cc6 <memset>

0002130a <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2130a:	f000 bcb5 	b.w	21c78 <memcpy>

0002130e <k_heap_init>:
{
   2130e:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   21310:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   21314:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   21318:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   2131c:	f7fd b88f 	b.w	1e43e <sys_heap_init>

00021320 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   21320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21324:	b085      	sub	sp, #20
   21326:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   2132a:	4607      	mov	r7, r0
   2132c:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2132e:	4650      	mov	r0, sl
   21330:	4621      	mov	r1, r4
{
   21332:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21334:	f000 fad4 	bl	218e0 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   21338:	f1b4 3fff 	cmp.w	r4, #4294967295
   2133c:	bf08      	it	eq
   2133e:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21342:	4605      	mov	r5, r0
   21344:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   21346:	bf04      	itt	eq
   21348:	f04f 35ff 	moveq.w	r5, #4294967295
   2134c:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   21350:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   21354:	f04f 0320 	mov.w	r3, #32
   21358:	f3ef 8411 	mrs	r4, BASEPRI
   2135c:	f383 8812 	msr	BASEPRI_MAX, r3
   21360:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   21364:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   21368:	464a      	mov	r2, r9
   2136a:	4641      	mov	r1, r8
   2136c:	4638      	mov	r0, r7
   2136e:	f7fc ffff 	bl	1e370 <sys_heap_aligned_alloc>
   21372:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   21374:	f7fa f81c 	bl	1b3b0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   21378:	9b03      	ldr	r3, [sp, #12]
   2137a:	b13b      	cbz	r3, 2138c <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   2137c:	f384 8811 	msr	BASEPRI, r4
   21380:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   21384:	4618      	mov	r0, r3
   21386:	b005      	add	sp, #20
   21388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2138c:	1a28      	subs	r0, r5, r0
   2138e:	eb66 0101 	sbc.w	r1, r6, r1
   21392:	2801      	cmp	r0, #1
   21394:	f171 0200 	sbcs.w	r2, r1, #0
   21398:	dbf0      	blt.n	2137c <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2139a:	e9cd 0100 	strd	r0, r1, [sp]
   2139e:	465a      	mov	r2, fp
   213a0:	4621      	mov	r1, r4
   213a2:	4650      	mov	r0, sl
   213a4:	f7f9 fcb2 	bl	1ad0c <z_pend_curr>
	__asm__ volatile(
   213a8:	f04f 0320 	mov.w	r3, #32
   213ac:	f3ef 8411 	mrs	r4, BASEPRI
   213b0:	f383 8812 	msr	BASEPRI_MAX, r3
   213b4:	f3bf 8f6f 	isb	sy
	return k;
   213b8:	e7d6      	b.n	21368 <k_heap_aligned_alloc+0x48>

000213ba <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   213ba:	b507      	push	{r0, r1, r2, lr}
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   213bc:	e9cd 2300 	strd	r2, r3, [sp]
   213c0:	460a      	mov	r2, r1
   213c2:	2104      	movs	r1, #4
   213c4:	f7ff ffac 	bl	21320 <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   213c8:	b003      	add	sp, #12
   213ca:	f85d fb04 	ldr.w	pc, [sp], #4

000213ce <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   213ce:	b538      	push	{r3, r4, r5, lr}
   213d0:	4604      	mov	r4, r0
   213d2:	f04f 0320 	mov.w	r3, #32
   213d6:	f3ef 8511 	mrs	r5, BASEPRI
   213da:	f383 8812 	msr	BASEPRI_MAX, r3
   213de:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   213e2:	f7fc ff8d 	bl	1e300 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   213e6:	f104 000c 	add.w	r0, r4, #12
   213ea:	f000 fa16 	bl	2181a <z_unpend_all>
   213ee:	b130      	cbz	r0, 213fe <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   213f0:	4629      	mov	r1, r5
   213f2:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   213f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   213fa:	f7f9 bceb 	b.w	1add4 <z_reschedule>
	__asm__ volatile(
   213fe:	f385 8811 	msr	BASEPRI, r5
   21402:	f3bf 8f6f 	isb	sy
}
   21406:	bd38      	pop	{r3, r4, r5, pc}

00021408 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   21408:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   2140c:	4313      	orrs	r3, r2
   2140e:	f013 0303 	ands.w	r3, r3, #3
   21412:	d10c      	bne.n	2142e <create_free_list+0x26>
	slab->free_list = NULL;
   21414:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   21416:	6881      	ldr	r1, [r0, #8]
   21418:	4299      	cmp	r1, r3
   2141a:	d801      	bhi.n	21420 <create_free_list+0x18>
	return 0;
   2141c:	2000      	movs	r0, #0
   2141e:	4770      	bx	lr
		*(char **)p = slab->free_list;
   21420:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   21422:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   21424:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   21426:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   21428:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
   2142a:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2142c:	e7f3      	b.n	21416 <create_free_list+0xe>
		return -EINVAL;
   2142e:	f06f 0015 	mvn.w	r0, #21
}
   21432:	4770      	bx	lr

00021434 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21434:	f3ef 8005 	mrs	r0, IPSR
}
   21438:	3800      	subs	r0, #0
   2143a:	bf18      	it	ne
   2143c:	2001      	movne	r0, #1
   2143e:	4770      	bx	lr

00021440 <z_impl_k_thread_name_set>:
}
   21440:	f06f 0057 	mvn.w	r0, #87	; 0x57
   21444:	4770      	bx	lr

00021446 <k_thread_name_get>:
}
   21446:	2000      	movs	r0, #0
   21448:	4770      	bx	lr

0002144a <z_impl_k_thread_start>:
	z_sched_start(thread);
   2144a:	f7f9 bcd5 	b.w	1adf8 <z_sched_start>

0002144e <z_pm_save_idle_exit>:
{
   2144e:	b508      	push	{r3, lr}
	pm_system_resume();
   21450:	f7ec f82c 	bl	d4ac <pm_system_resume>
}
   21454:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   21458:	f7fe b917 	b.w	1f68a <sys_clock_idle_exit>

0002145c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2145c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   21460:	428b      	cmp	r3, r1
   21462:	d001      	beq.n	21468 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   21464:	f7f9 bc70 	b.w	1ad48 <z_set_prio>
}
   21468:	2000      	movs	r0, #0
   2146a:	4770      	bx	lr

0002146c <z_impl_k_mutex_init>:
{
   2146c:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2146e:	2000      	movs	r0, #0
   21470:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   21474:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   21478:	4770      	bx	lr

0002147a <queue_insert>:
{
   2147a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2147e:	4699      	mov	r9, r3
   21480:	4604      	mov	r4, r0
   21482:	460d      	mov	r5, r1
   21484:	4690      	mov	r8, r2
   21486:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2148a:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2148e:	f04f 0220 	mov.w	r2, #32
   21492:	f3ef 8711 	mrs	r7, BASEPRI
   21496:	f382 8812 	msr	BASEPRI_MAX, r2
   2149a:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2149e:	b103      	cbz	r3, 214a2 <queue_insert+0x28>
	return list->tail;
   214a0:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   214a2:	4630      	mov	r0, r6
   214a4:	f000 f96f 	bl	21786 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   214a8:	b158      	cbz	r0, 214c2 <queue_insert+0x48>
   214aa:	2300      	movs	r3, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   214ac:	f8c0 8014 	str.w	r8, [r0, #20]
   214b0:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   214b2:	f000 f932 	bl	2171a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   214b6:	4630      	mov	r0, r6
   214b8:	4639      	mov	r1, r7
   214ba:	f7f9 fc8b 	bl	1add4 <z_reschedule>
		return 0;
   214be:	2000      	movs	r0, #0
   214c0:	e00c      	b.n	214dc <queue_insert+0x62>
	if (alloc) {
   214c2:	f1b9 0f00 	cmp.w	r9, #0
   214c6:	d01b      	beq.n	21500 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   214c8:	2108      	movs	r1, #8
   214ca:	f7fa f81d 	bl	1b508 <z_thread_aligned_alloc>
		if (anode == NULL) {
   214ce:	b938      	cbnz	r0, 214e0 <queue_insert+0x66>
	__asm__ volatile(
   214d0:	f387 8811 	msr	BASEPRI, r7
   214d4:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   214d8:	f06f 000b 	mvn.w	r0, #11
}
   214dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   214e0:	2201      	movs	r2, #1
		anode->data = data;
   214e2:	f8c0 8004 	str.w	r8, [r0, #4]
   214e6:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   214e8:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   214ea:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   214ee:	b95d      	cbnz	r5, 21508 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   214f0:	6822      	ldr	r2, [r4, #0]
   214f2:	430a      	orrs	r2, r1
   214f4:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   214f6:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   214f8:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   214fa:	b96a      	cbnz	r2, 21518 <queue_insert+0x9e>
	list->tail = node;
   214fc:	6060      	str	r0, [r4, #4]
}
   214fe:	e00b      	b.n	21518 <queue_insert+0x9e>
}
   21500:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   21502:	f8c8 9000 	str.w	r9, [r8]
}
   21506:	e7ef      	b.n	214e8 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21508:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2150a:	2a03      	cmp	r2, #3
   2150c:	d810      	bhi.n	21530 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2150e:	6001      	str	r1, [r0, #0]
	return list->tail;
   21510:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   21512:	b939      	cbnz	r1, 21524 <queue_insert+0xaa>
	list->head = node;
   21514:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   21518:	2104      	movs	r1, #4
   2151a:	f104 0010 	add.w	r0, r4, #16
   2151e:	f000 fb41 	bl	21ba4 <z_handle_obj_poll_events>
   21522:	e7c8      	b.n	214b6 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21524:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21526:	f002 0203 	and.w	r2, r2, #3
   2152a:	4302      	orrs	r2, r0
   2152c:	600a      	str	r2, [r1, #0]
   2152e:	e7e5      	b.n	214fc <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21530:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   21534:	430a      	orrs	r2, r1
   21536:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21538:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2153a:	f002 0203 	and.w	r2, r2, #3
   2153e:	ea40 0302 	orr.w	r3, r0, r2
   21542:	602b      	str	r3, [r5, #0]
}
   21544:	e7e8      	b.n	21518 <queue_insert+0x9e>

00021546 <z_queue_node_peek>:
{
   21546:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   21548:	4604      	mov	r4, r0
   2154a:	b130      	cbz	r0, 2155a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2154c:	6802      	ldr	r2, [r0, #0]
   2154e:	0793      	lsls	r3, r2, #30
   21550:	d003      	beq.n	2155a <z_queue_node_peek+0x14>
		ret = anode->data;
   21552:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   21554:	b109      	cbz	r1, 2155a <z_queue_node_peek+0x14>
			k_free(anode);
   21556:	f000 fb50 	bl	21bfa <k_free>
}
   2155a:	4620      	mov	r0, r4
   2155c:	bd10      	pop	{r4, pc}

0002155e <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   2155e:	2301      	movs	r3, #1
{
   21560:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   21562:	9300      	str	r3, [sp, #0]
   21564:	2300      	movs	r3, #0
{
   21566:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   21568:	4619      	mov	r1, r3
   2156a:	f7ff ff86 	bl	2147a <queue_insert>
}
   2156e:	b003      	add	sp, #12
   21570:	f85d fb04 	ldr.w	pc, [sp], #4

00021574 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   21574:	b15a      	cbz	r2, 2158e <z_impl_k_sem_init+0x1a>
   21576:	428a      	cmp	r2, r1
   21578:	d309      	bcc.n	2158e <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2157a:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2157e:	e9c0 1202 	strd	r1, r2, [r0, #8]
   21582:	e9c0 0000 	strd	r0, r0, [r0]
   21586:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2158a:	2000      	movs	r0, #0
   2158c:	4770      	bx	lr
		return -EINVAL;
   2158e:	f06f 0015 	mvn.w	r0, #21
}
   21592:	4770      	bx	lr

00021594 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   21594:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   21596:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   21598:	408b      	lsls	r3, r1
   2159a:	ea22 0303 	bic.w	r3, r2, r3
   2159e:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   215a0:	fa22 f001 	lsr.w	r0, r2, r1
}
   215a4:	f000 0001 	and.w	r0, r0, #1
   215a8:	4770      	bx	lr

000215aa <unschedule_locked>:
{
   215aa:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   215ac:	2103      	movs	r1, #3
{
   215ae:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   215b0:	300c      	adds	r0, #12
   215b2:	f7ff ffef 	bl	21594 <flag_test_and_clear>
   215b6:	b130      	cbz	r0, 215c6 <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   215b8:	f104 0010 	add.w	r0, r4, #16
   215bc:	f000 f960 	bl	21880 <z_abort_timeout>
   215c0:	fab0 f080 	clz	r0, r0
   215c4:	0940      	lsrs	r0, r0, #5
}
   215c6:	bd10      	pop	{r4, pc}

000215c8 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   215c8:	b120      	cbz	r0, 215d4 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   215ca:	2200      	movs	r2, #0
   215cc:	30d0      	adds	r0, #208	; 0xd0
   215ce:	4611      	mov	r1, r2
   215d0:	f000 b933 	b.w	2183a <z_sched_wake>
}
   215d4:	4770      	bx	lr

000215d6 <work_timeout>:
{
   215d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   215d8:	4604      	mov	r4, r0
	__asm__ volatile(
   215da:	f04f 0320 	mov.w	r3, #32
   215de:	f3ef 8511 	mrs	r5, BASEPRI
   215e2:	f383 8812 	msr	BASEPRI_MAX, r3
   215e6:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   215ea:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   215ec:	f1a0 0610 	sub.w	r6, r0, #16
   215f0:	2103      	movs	r1, #3
   215f2:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   215f4:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   215f6:	f7ff ffcd 	bl	21594 <flag_test_and_clear>
   215fa:	b128      	cbz	r0, 21608 <work_timeout+0x32>
		queue = dw->queue;
   215fc:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   215fe:	4630      	mov	r0, r6
   21600:	a901      	add	r1, sp, #4
		queue = dw->queue;
   21602:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   21604:	f7f9 f974 	bl	1a8f0 <submit_to_queue_locked>
	__asm__ volatile(
   21608:	f385 8811 	msr	BASEPRI, r5
   2160c:	f3bf 8f6f 	isb	sy
}
   21610:	b002      	add	sp, #8
   21612:	bd70      	pop	{r4, r5, r6, pc}

00021614 <k_work_init>:
{
   21614:	b538      	push	{r3, r4, r5, lr}
   21616:	4604      	mov	r4, r0
   21618:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2161a:	2210      	movs	r2, #16
   2161c:	2100      	movs	r1, #0
   2161e:	f000 fb52 	bl	21cc6 <memset>
   21622:	6065      	str	r5, [r4, #4]
}
   21624:	bd38      	pop	{r3, r4, r5, pc}

00021626 <k_work_busy_get>:
	__asm__ volatile(
   21626:	f04f 0220 	mov.w	r2, #32
   2162a:	f3ef 8311 	mrs	r3, BASEPRI
   2162e:	f382 8812 	msr	BASEPRI_MAX, r2
   21632:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   21636:	68c0      	ldr	r0, [r0, #12]
   21638:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   2163c:	f383 8811 	msr	BASEPRI, r3
   21640:	f3bf 8f6f 	isb	sy
}
   21644:	4770      	bx	lr

00021646 <z_work_submit_to_queue>:
{
   21646:	b513      	push	{r0, r1, r4, lr}
   21648:	9001      	str	r0, [sp, #4]
   2164a:	4608      	mov	r0, r1
	__asm__ volatile(
   2164c:	f04f 0320 	mov.w	r3, #32
   21650:	f3ef 8411 	mrs	r4, BASEPRI
   21654:	f383 8812 	msr	BASEPRI_MAX, r3
   21658:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2165c:	a901      	add	r1, sp, #4
   2165e:	f7f9 f947 	bl	1a8f0 <submit_to_queue_locked>
	__asm__ volatile(
   21662:	f384 8811 	msr	BASEPRI, r4
   21666:	f3bf 8f6f 	isb	sy
}
   2166a:	b002      	add	sp, #8
   2166c:	bd10      	pop	{r4, pc}

0002166e <k_work_submit_to_queue>:
{
   2166e:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   21670:	f7ff ffe9 	bl	21646 <z_work_submit_to_queue>
	if (ret > 0) {
   21674:	1e04      	subs	r4, r0, #0
   21676:	dd09      	ble.n	2168c <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   21678:	f04f 0320 	mov.w	r3, #32
   2167c:	f3ef 8011 	mrs	r0, BASEPRI
   21680:	f383 8812 	msr	BASEPRI_MAX, r3
   21684:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   21688:	f000 f8b1 	bl	217ee <z_reschedule_irqlock>
}
   2168c:	4620      	mov	r0, r4
   2168e:	bd10      	pop	{r4, pc}

00021690 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   21690:	f7ff bfc9 	b.w	21626 <k_work_busy_get>

00021694 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   21694:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   21698:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2169a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2169c:	2300      	movs	r3, #0
	node->prev = NULL;
   2169e:	e9c0 3300 	strd	r3, r3, [r0]
}
   216a2:	4770      	bx	lr

000216a4 <unpend_thread_no_timeout>:
{
   216a4:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   216a6:	f7ff fff5 	bl	21694 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   216aa:	7b43      	ldrb	r3, [r0, #13]
   216ac:	f023 0302 	bic.w	r3, r3, #2
   216b0:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   216b2:	2300      	movs	r3, #0
   216b4:	6083      	str	r3, [r0, #8]
}
   216b6:	bd08      	pop	{r3, pc}

000216b8 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   216b8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   216bc:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   216c0:	4283      	cmp	r3, r0
		return b2 - b1;
   216c2:	bf14      	ite	ne
   216c4:	1ac0      	subne	r0, r0, r3
	return 0;
   216c6:	2000      	moveq	r0, #0
}
   216c8:	4770      	bx	lr

000216ca <add_to_waitq_locked>:
{
   216ca:	b538      	push	{r3, r4, r5, lr}
   216cc:	4604      	mov	r4, r0
   216ce:	460d      	mov	r5, r1
	unready_thread(thread);
   216d0:	f7f9 fabc 	bl	1ac4c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   216d4:	7b63      	ldrb	r3, [r4, #13]
   216d6:	f043 0302 	orr.w	r3, r3, #2
   216da:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   216dc:	b1e5      	cbz	r5, 21718 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   216de:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   216e0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   216e2:	429d      	cmp	r5, r3
   216e4:	d109      	bne.n	216fa <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   216e6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   216e8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   216ec:	601c      	str	r4, [r3, #0]
	list->tail = node;
   216ee:	606c      	str	r4, [r5, #4]
}
   216f0:	e012      	b.n	21718 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   216f2:	686a      	ldr	r2, [r5, #4]
   216f4:	4293      	cmp	r3, r2
   216f6:	d0f6      	beq.n	216e6 <add_to_waitq_locked+0x1c>
   216f8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   216fa:	2b00      	cmp	r3, #0
   216fc:	d0f3      	beq.n	216e6 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   216fe:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   21702:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   21706:	428a      	cmp	r2, r1
   21708:	d0f3      	beq.n	216f2 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2170a:	4291      	cmp	r1, r2
   2170c:	ddf1      	ble.n	216f2 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   2170e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21710:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   21714:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21716:	605c      	str	r4, [r3, #4]
}
   21718:	bd38      	pop	{r3, r4, r5, pc}

0002171a <z_ready_thread>:
{
   2171a:	b510      	push	{r4, lr}
   2171c:	f04f 0320 	mov.w	r3, #32
   21720:	f3ef 8411 	mrs	r4, BASEPRI
   21724:	f383 8812 	msr	BASEPRI_MAX, r3
   21728:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2172c:	f7f9 fa5a 	bl	1abe4 <ready_thread>
	__asm__ volatile(
   21730:	f384 8811 	msr	BASEPRI, r4
   21734:	f3bf 8f6f 	isb	sy
}
   21738:	bd10      	pop	{r4, pc}

0002173a <z_sched_wake_thread>:
{
   2173a:	b538      	push	{r3, r4, r5, lr}
   2173c:	4604      	mov	r4, r0
	__asm__ volatile(
   2173e:	f04f 0320 	mov.w	r3, #32
   21742:	f3ef 8511 	mrs	r5, BASEPRI
   21746:	f383 8812 	msr	BASEPRI_MAX, r3
   2174a:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2174e:	7b43      	ldrb	r3, [r0, #13]
   21750:	f013 0f28 	tst.w	r3, #40	; 0x28
   21754:	d10b      	bne.n	2176e <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   21756:	6883      	ldr	r3, [r0, #8]
   21758:	b10b      	cbz	r3, 2175e <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   2175a:	f7ff ffa3 	bl	216a4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2175e:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   21760:	b951      	cbnz	r1, 21778 <z_sched_wake_thread+0x3e>
   21762:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
   21766:	4620      	mov	r0, r4
   21768:	7363      	strb	r3, [r4, #13]
   2176a:	f7f9 fa3b 	bl	1abe4 <ready_thread>
	__asm__ volatile(
   2176e:	f385 8811 	msr	BASEPRI, r5
   21772:	f3bf 8f6f 	isb	sy
}
   21776:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   21778:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   2177c:	e7f3      	b.n	21766 <z_sched_wake_thread+0x2c>

0002177e <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   2177e:	2101      	movs	r1, #1
   21780:	3818      	subs	r0, #24
   21782:	f7ff bfda 	b.w	2173a <z_sched_wake_thread>

00021786 <z_unpend_first_thread>:
{
   21786:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   21788:	f04f 0320 	mov.w	r3, #32
   2178c:	f3ef 8511 	mrs	r5, BASEPRI
   21790:	f383 8812 	msr	BASEPRI_MAX, r3
   21794:	f3bf 8f6f 	isb	sy
	return list->head == list;
   21798:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2179a:	42a0      	cmp	r0, r4
   2179c:	d00d      	beq.n	217ba <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   2179e:	b134      	cbz	r4, 217ae <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   217a0:	4620      	mov	r0, r4
   217a2:	f7ff ff7f 	bl	216a4 <unpend_thread_no_timeout>
   217a6:	f104 0018 	add.w	r0, r4, #24
   217aa:	f000 f869 	bl	21880 <z_abort_timeout>
	__asm__ volatile(
   217ae:	f385 8811 	msr	BASEPRI, r5
   217b2:	f3bf 8f6f 	isb	sy
}
   217b6:	4620      	mov	r0, r4
   217b8:	bd38      	pop	{r3, r4, r5, pc}
   217ba:	2400      	movs	r4, #0
   217bc:	e7f7      	b.n	217ae <z_unpend_first_thread+0x28>

000217be <z_unpend_thread>:
{
   217be:	4601      	mov	r1, r0
   217c0:	b510      	push	{r4, lr}
	__asm__ volatile(
   217c2:	f04f 0320 	mov.w	r3, #32
   217c6:	f3ef 8411 	mrs	r4, BASEPRI
   217ca:	f383 8812 	msr	BASEPRI_MAX, r3
   217ce:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   217d2:	6883      	ldr	r3, [r0, #8]
   217d4:	b10b      	cbz	r3, 217da <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   217d6:	f7ff ff65 	bl	216a4 <unpend_thread_no_timeout>
	__asm__ volatile(
   217da:	f384 8811 	msr	BASEPRI, r4
   217de:	f3bf 8f6f 	isb	sy
}
   217e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   217e6:	f101 0018 	add.w	r0, r1, #24
   217ea:	f000 b849 	b.w	21880 <z_abort_timeout>

000217ee <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   217ee:	4603      	mov	r3, r0
   217f0:	b920      	cbnz	r0, 217fc <z_reschedule_irqlock+0xe>
   217f2:	f3ef 8205 	mrs	r2, IPSR
   217f6:	b90a      	cbnz	r2, 217fc <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   217f8:	f7ec b942 	b.w	da80 <arch_swap>
   217fc:	f383 8811 	msr	BASEPRI, r3
   21800:	f3bf 8f6f 	isb	sy
}
   21804:	4770      	bx	lr

00021806 <z_reschedule_unlocked>:
	__asm__ volatile(
   21806:	f04f 0320 	mov.w	r3, #32
   2180a:	f3ef 8011 	mrs	r0, BASEPRI
   2180e:	f383 8812 	msr	BASEPRI_MAX, r3
   21812:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   21816:	f7ff bfea 	b.w	217ee <z_reschedule_irqlock>

0002181a <z_unpend_all>:
{
   2181a:	b538      	push	{r3, r4, r5, lr}
   2181c:	4605      	mov	r5, r0
	int need_sched = 0;
   2181e:	2000      	movs	r0, #0
	return list->head == list;
   21820:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21822:	42a5      	cmp	r5, r4
   21824:	d000      	beq.n	21828 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   21826:	b904      	cbnz	r4, 2182a <z_unpend_all+0x10>
}
   21828:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2182a:	4620      	mov	r0, r4
   2182c:	f7ff ffc7 	bl	217be <z_unpend_thread>
		z_ready_thread(thread);
   21830:	4620      	mov	r0, r4
   21832:	f7ff ff72 	bl	2171a <z_ready_thread>
		need_sched = 1;
   21836:	2001      	movs	r0, #1
   21838:	e7f2      	b.n	21820 <z_unpend_all+0x6>

0002183a <z_sched_wake>:
{
   2183a:	b538      	push	{r3, r4, r5, lr}
   2183c:	f04f 0320 	mov.w	r3, #32
   21840:	f3ef 8511 	mrs	r5, BASEPRI
   21844:	f383 8812 	msr	BASEPRI_MAX, r3
   21848:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2184c:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2184e:	42a0      	cmp	r0, r4
   21850:	d012      	beq.n	21878 <z_sched_wake+0x3e>
		if (thread != NULL) {
   21852:	b19c      	cbz	r4, 2187c <z_sched_wake+0x42>
   21854:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   21856:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   21858:	4620      	mov	r0, r4
   2185a:	f7ff ff23 	bl	216a4 <unpend_thread_no_timeout>
   2185e:	f104 0018 	add.w	r0, r4, #24
   21862:	f000 f80d 	bl	21880 <z_abort_timeout>
			ready_thread(thread);
   21866:	4620      	mov	r0, r4
   21868:	f7f9 f9bc 	bl	1abe4 <ready_thread>
			ret = true;
   2186c:	2001      	movs	r0, #1
	__asm__ volatile(
   2186e:	f385 8811 	msr	BASEPRI, r5
   21872:	f3bf 8f6f 	isb	sy
}
   21876:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   21878:	2000      	movs	r0, #0
   2187a:	e7f8      	b.n	2186e <z_sched_wake+0x34>
   2187c:	4620      	mov	r0, r4
   2187e:	e7f6      	b.n	2186e <z_sched_wake+0x34>

00021880 <z_abort_timeout>:
{
   21880:	b510      	push	{r4, lr}
	__asm__ volatile(
   21882:	f04f 0220 	mov.w	r2, #32
   21886:	f3ef 8411 	mrs	r4, BASEPRI
   2188a:	f382 8812 	msr	BASEPRI_MAX, r2
   2188e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   21892:	6803      	ldr	r3, [r0, #0]
   21894:	b13b      	cbz	r3, 218a6 <z_abort_timeout+0x26>
			remove_timeout(to);
   21896:	f7f9 fc8f 	bl	1b1b8 <remove_timeout>
			ret = 0;
   2189a:	2000      	movs	r0, #0
	__asm__ volatile(
   2189c:	f384 8811 	msr	BASEPRI, r4
   218a0:	f3bf 8f6f 	isb	sy
}
   218a4:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   218a6:	f06f 0015 	mvn.w	r0, #21
   218aa:	e7f7      	b.n	2189c <z_abort_timeout+0x1c>

000218ac <z_get_next_timeout_expiry>:
{
   218ac:	b510      	push	{r4, lr}
	__asm__ volatile(
   218ae:	f04f 0320 	mov.w	r3, #32
   218b2:	f3ef 8411 	mrs	r4, BASEPRI
   218b6:	f383 8812 	msr	BASEPRI_MAX, r3
   218ba:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   218be:	f7f9 fc5b 	bl	1b178 <next_timeout>
	__asm__ volatile(
   218c2:	f384 8811 	msr	BASEPRI, r4
   218c6:	f3bf 8f6f 	isb	sy
}
   218ca:	bd10      	pop	{r4, pc}

000218cc <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   218cc:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   218ce:	f7f9 fd6f 	bl	1b3b0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   218d2:	bd08      	pop	{r3, pc}

000218d4 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   218d4:	f7f9 bd6c 	b.w	1b3b0 <sys_clock_tick_get>

000218d8 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   218d8:	b108      	cbz	r0, 218de <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   218da:	f7eb ba71 	b.w	cdc0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   218de:	4770      	bx	lr

000218e0 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   218e0:	f1b1 3fff 	cmp.w	r1, #4294967295
   218e4:	bf08      	it	eq
   218e6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   218ea:	b538      	push	{r3, r4, r5, lr}
   218ec:	460c      	mov	r4, r1
   218ee:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   218f0:	d014      	beq.n	2191c <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   218f2:	4308      	orrs	r0, r1
   218f4:	d103      	bne.n	218fe <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   218f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   218fa:	f7f9 bd59 	b.w	1b3b0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   218fe:	f06f 0001 	mvn.w	r0, #1
   21902:	f04f 33ff 	mov.w	r3, #4294967295
   21906:	1b40      	subs	r0, r0, r5
   21908:	eb63 0101 	sbc.w	r1, r3, r1
   2190c:	2900      	cmp	r1, #0
   2190e:	da04      	bge.n	2191a <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   21910:	f7f9 fd4e 	bl	1b3b0 <sys_clock_tick_get>
   21914:	1940      	adds	r0, r0, r5
   21916:	eb41 0104 	adc.w	r1, r1, r4
}
   2191a:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2191c:	f04f 30ff 	mov.w	r0, #4294967295
   21920:	4601      	mov	r1, r0
   21922:	e7fa      	b.n	2191a <sys_clock_timeout_end_calc+0x3a>

00021924 <add_event>:
{
   21924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21926:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   21928:	e9d0 1300 	ldrd	r1, r3, [r0]
   2192c:	4288      	cmp	r0, r1
   2192e:	4604      	mov	r4, r0
   21930:	d105      	bne.n	2193e <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   21932:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   21934:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   21938:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2193a:	6065      	str	r5, [r4, #4]
   2193c:	e01d      	b.n	2197a <add_event+0x56>
	if ((pending == NULL) ||
   2193e:	2b00      	cmp	r3, #0
   21940:	d0f7      	beq.n	21932 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   21942:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   21944:	b100      	cbz	r0, 21948 <add_event+0x24>
   21946:	3860      	subs	r0, #96	; 0x60
   21948:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2194c:	4639      	mov	r1, r7
   2194e:	f7ff feb3 	bl	216b8 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   21952:	2800      	cmp	r0, #0
   21954:	dced      	bgt.n	21932 <add_event+0xe>
	return list->head == list;
   21956:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21958:	42b4      	cmp	r4, r6
   2195a:	d0ea      	beq.n	21932 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2195c:	2e00      	cmp	r6, #0
   2195e:	d0e8      	beq.n	21932 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   21960:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   21962:	b101      	cbz	r1, 21966 <add_event+0x42>
   21964:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   21966:	4638      	mov	r0, r7
   21968:	f7ff fea6 	bl	216b8 <z_sched_prio_cmp>
   2196c:	2800      	cmp	r0, #0
   2196e:	dd05      	ble.n	2197c <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   21970:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   21972:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   21976:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   21978:	6075      	str	r5, [r6, #4]
}
   2197a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2197c:	6863      	ldr	r3, [r4, #4]
   2197e:	429e      	cmp	r6, r3
   21980:	d0d7      	beq.n	21932 <add_event+0xe>
   21982:	6836      	ldr	r6, [r6, #0]
   21984:	e7ea      	b.n	2195c <add_event+0x38>

00021986 <register_events>:
{
   21986:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2198a:	2500      	movs	r5, #0
{
   2198c:	468b      	mov	fp, r1
   2198e:	4614      	mov	r4, r2
   21990:	461f      	mov	r7, r3
   21992:	4682      	mov	sl, r0
	int events_registered = 0;
   21994:	462e      	mov	r6, r5
	event->poller = NULL;
   21996:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   21998:	455d      	cmp	r5, fp
   2199a:	db02      	blt.n	219a2 <register_events+0x1c>
}
   2199c:	4630      	mov	r0, r6
   2199e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   219a2:	f04f 0320 	mov.w	r3, #32
   219a6:	f3ef 8911 	mrs	r9, BASEPRI
   219aa:	f383 8812 	msr	BASEPRI_MAX, r3
   219ae:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   219b2:	f89a 300d 	ldrb.w	r3, [sl, #13]
   219b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   219ba:	3b01      	subs	r3, #1
   219bc:	2b07      	cmp	r3, #7
   219be:	d80f      	bhi.n	219e0 <register_events+0x5a>
   219c0:	e8df f003 	tbb	[pc, r3]
   219c4:	0a0e041e 	.word	0x0a0e041e
   219c8:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   219cc:	f8da 3010 	ldr.w	r3, [sl, #16]
   219d0:	689b      	ldr	r3, [r3, #8]
   219d2:	b12b      	cbz	r3, 219e0 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   219d4:	2302      	movs	r3, #2
   219d6:	e020      	b.n	21a1a <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   219d8:	f8da 3010 	ldr.w	r3, [sl, #16]
   219dc:	681b      	ldr	r3, [r3, #0]
   219de:	bb8b      	cbnz	r3, 21a44 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   219e0:	bb47      	cbnz	r7, 21a34 <register_events+0xae>
   219e2:	7823      	ldrb	r3, [r4, #0]
   219e4:	b333      	cbz	r3, 21a34 <register_events+0xae>
	switch (event->type) {
   219e6:	f89a 300d 	ldrb.w	r3, [sl, #13]
   219ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   219ee:	3b01      	subs	r3, #1
   219f0:	2b07      	cmp	r3, #7
   219f2:	d830      	bhi.n	21a56 <register_events+0xd0>
   219f4:	e8df f003 	tbb	[pc, r3]
   219f8:	282f2833 	.word	0x282f2833
   219fc:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   21a00:	f8da 3010 	ldr.w	r3, [sl, #16]
   21a04:	689b      	ldr	r3, [r3, #8]
   21a06:	2b00      	cmp	r3, #0
   21a08:	d0ea      	beq.n	219e0 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   21a0a:	2301      	movs	r3, #1
   21a0c:	e005      	b.n	21a1a <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   21a0e:	f8da 3010 	ldr.w	r3, [sl, #16]
   21a12:	6a1b      	ldr	r3, [r3, #32]
   21a14:	2b00      	cmp	r3, #0
   21a16:	d0e3      	beq.n	219e0 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   21a18:	2310      	movs	r3, #16
	event->state |= state;
   21a1a:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   21a1e:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   21a22:	f3c2 3186 	ubfx	r1, r2, #14, #7
   21a26:	430b      	orrs	r3, r1
   21a28:	f363 3294 	bfi	r2, r3, #14, #7
   21a2c:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   21a30:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   21a34:	f389 8811 	msr	BASEPRI, r9
   21a38:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   21a3c:	3501      	adds	r5, #1
   21a3e:	f10a 0a14 	add.w	sl, sl, #20
   21a42:	e7a9      	b.n	21998 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   21a44:	2304      	movs	r3, #4
   21a46:	e7e8      	b.n	21a1a <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   21a48:	4622      	mov	r2, r4
   21a4a:	4651      	mov	r1, sl
   21a4c:	f8da 0010 	ldr.w	r0, [sl, #16]
   21a50:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   21a52:	f7ff ff67 	bl	21924 <add_event>
	event->poller = poller;
   21a56:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   21a5a:	3601      	adds	r6, #1
   21a5c:	e7ea      	b.n	21a34 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   21a5e:	4622      	mov	r2, r4
   21a60:	4651      	mov	r1, sl
   21a62:	f8da 0010 	ldr.w	r0, [sl, #16]
   21a66:	e7f4      	b.n	21a52 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   21a68:	f8da 0010 	ldr.w	r0, [sl, #16]
   21a6c:	4622      	mov	r2, r4
   21a6e:	4651      	mov	r1, sl
   21a70:	3024      	adds	r0, #36	; 0x24
   21a72:	e7ee      	b.n	21a52 <register_events+0xcc>

00021a74 <signal_poll_event>:
{
   21a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   21a78:	6884      	ldr	r4, [r0, #8]
{
   21a7a:	4605      	mov	r5, r0
   21a7c:	460e      	mov	r6, r1
	if (poller != NULL) {
   21a7e:	b144      	cbz	r4, 21a92 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   21a80:	7863      	ldrb	r3, [r4, #1]
   21a82:	2b01      	cmp	r3, #1
   21a84:	d12e      	bne.n	21ae4 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   21a86:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   21a8a:	f013 0302 	ands.w	r3, r3, #2
   21a8e:	d10a      	bne.n	21aa6 <signal_poll_event+0x32>
		poller->is_polling = false;
   21a90:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   21a92:	2000      	movs	r0, #0
	event->state |= state;
   21a94:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   21a96:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   21a98:	f3c3 3286 	ubfx	r2, r3, #14, #7
   21a9c:	4316      	orrs	r6, r2
   21a9e:	f366 3394 	bfi	r3, r6, #14, #7
   21aa2:	60eb      	str	r3, [r5, #12]
	return retcode;
   21aa4:	e03e      	b.n	21b24 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   21aa6:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   21aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
   21aae:	bf08      	it	eq
   21ab0:	f112 0f02 	cmneq.w	r2, #2
   21ab4:	d032      	beq.n	21b1c <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   21ab6:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   21aba:	4640      	mov	r0, r8
   21abc:	f7ff fe7f 	bl	217be <z_unpend_thread>
	arch_thread_return_value_set(thread,
   21ac0:	2e08      	cmp	r6, #8
   21ac2:	bf0c      	ite	eq
   21ac4:	f06f 0303 	mvneq.w	r3, #3
   21ac8:	2300      	movne	r3, #0
   21aca:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21acc:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   21ad0:	06db      	lsls	r3, r3, #27
   21ad2:	d109      	bne.n	21ae8 <signal_poll_event+0x74>
   21ad4:	f854 7c48 	ldr.w	r7, [r4, #-72]
   21ad8:	b937      	cbnz	r7, 21ae8 <signal_poll_event+0x74>
	z_ready_thread(thread);
   21ada:	4640      	mov	r0, r8
   21adc:	f7ff fe1d 	bl	2171a <z_ready_thread>
		poller->is_polling = false;
   21ae0:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   21ae2:	e7d6      	b.n	21a92 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   21ae4:	2b02      	cmp	r3, #2
   21ae6:	d001      	beq.n	21aec <signal_poll_event+0x78>
		poller->is_polling = false;
   21ae8:	2300      	movs	r3, #0
   21aea:	e7d1      	b.n	21a90 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   21aec:	7823      	ldrb	r3, [r4, #0]
   21aee:	2b00      	cmp	r3, #0
   21af0:	d0cf      	beq.n	21a92 <signal_poll_event+0x1e>
   21af2:	f854 7c04 	ldr.w	r7, [r4, #-4]
   21af6:	2f00      	cmp	r7, #0
   21af8:	d0f2      	beq.n	21ae0 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   21afa:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   21afe:	f1a4 0914 	sub.w	r9, r4, #20
   21b02:	f104 0014 	add.w	r0, r4, #20
   21b06:	f7ff febb 	bl	21880 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   21b0a:	4649      	mov	r1, r9
   21b0c:	4638      	mov	r0, r7
		twork->poll_result = 0;
   21b0e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   21b12:	f7ff fd98 	bl	21646 <z_work_submit_to_queue>
		poller->is_polling = false;
   21b16:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   21b1a:	e7ba      	b.n	21a92 <signal_poll_event+0x1e>
		poller->is_polling = false;
   21b1c:	2300      	movs	r3, #0
		return -EAGAIN;
   21b1e:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   21b22:	7023      	strb	r3, [r4, #0]
}
   21b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00021b28 <clear_event_registrations>:
	while (num_events--) {
   21b28:	2314      	movs	r3, #20
{
   21b2a:	b5f0      	push	{r4, r5, r6, r7, lr}
	event->poller = NULL;
   21b2c:	2400      	movs	r4, #0
	switch (event->type) {
   21b2e:	f44f 768b 	mov.w	r6, #278	; 0x116
   21b32:	fb03 0001 	mla	r0, r3, r1, r0
	while (num_events--) {
   21b36:	b901      	cbnz	r1, 21b3a <clear_event_registrations+0x12>
}
   21b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   21b3a:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   21b3e:	f1a0 0714 	sub.w	r7, r0, #20
   21b42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   21b46:	2b08      	cmp	r3, #8
	event->poller = NULL;
   21b48:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   21b4c:	d80c      	bhi.n	21b68 <clear_event_registrations+0x40>
   21b4e:	fa26 f303 	lsr.w	r3, r6, r3
   21b52:	07db      	lsls	r3, r3, #31
   21b54:	d508      	bpl.n	21b68 <clear_event_registrations+0x40>
	return node->next != NULL;
   21b56:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   21b5a:	b12b      	cbz	r3, 21b68 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   21b5c:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   21b60:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   21b62:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   21b64:	e940 4405 	strd	r4, r4, [r0, #-20]
   21b68:	f382 8811 	msr	BASEPRI, r2
   21b6c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   21b70:	f04f 0320 	mov.w	r3, #32
   21b74:	f3ef 8211 	mrs	r2, BASEPRI
   21b78:	f383 8812 	msr	BASEPRI_MAX, r3
   21b7c:	f3bf 8f6f 	isb	sy
   21b80:	4638      	mov	r0, r7
   21b82:	3901      	subs	r1, #1
   21b84:	e7d7      	b.n	21b36 <clear_event_registrations+0xe>

00021b86 <k_poll_event_init>:
{
   21b86:	b510      	push	{r4, lr}
	event->poller = NULL;
   21b88:	2400      	movs	r4, #0
	event->type = type;
   21b8a:	0552      	lsls	r2, r2, #21
   21b8c:	0209      	lsls	r1, r1, #8
   21b8e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   21b92:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   21b96:	430a      	orrs	r2, r1
   21b98:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   21b9a:	6084      	str	r4, [r0, #8]
	event->type = type;
   21b9c:	430a      	orrs	r2, r1
	event->obj = obj;
   21b9e:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   21ba2:	bd10      	pop	{r4, pc}

00021ba4 <z_handle_obj_poll_events>:
{
   21ba4:	4603      	mov	r3, r0
	return list->head == list;
   21ba6:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   21ba8:	4283      	cmp	r3, r0
   21baa:	d008      	beq.n	21bbe <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   21bac:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   21bb0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21bb2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21bb4:	2300      	movs	r3, #0
	node->prev = NULL;
   21bb6:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   21bba:	f7ff bf5b 	b.w	21a74 <signal_poll_event>
}
   21bbe:	4770      	bx	lr

00021bc0 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   21bc0:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   21bc2:	e9c0 0000 	strd	r0, r0, [r0]
   21bc6:	6083      	str	r3, [r0, #8]
}
   21bc8:	4770      	bx	lr

00021bca <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   21bca:	6883      	ldr	r3, [r0, #8]
   21bcc:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   21bce:	68c3      	ldr	r3, [r0, #12]
   21bd0:	6013      	str	r3, [r2, #0]
}
   21bd2:	4770      	bx	lr

00021bd4 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   21bd4:	3204      	adds	r2, #4
{
   21bd6:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   21bd8:	4604      	mov	r4, r0
   21bda:	d208      	bcs.n	21bee <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   21bdc:	2600      	movs	r6, #0
   21bde:	2700      	movs	r7, #0
   21be0:	f041 0104 	orr.w	r1, r1, #4
   21be4:	e9cd 6700 	strd	r6, r7, [sp]
   21be8:	f7ff fb9a 	bl	21320 <k_heap_aligned_alloc>
	if (mem == NULL) {
   21bec:	b910      	cbnz	r0, 21bf4 <z_heap_aligned_alloc+0x20>
		return NULL;
   21bee:	2000      	movs	r0, #0
}
   21bf0:	b002      	add	sp, #8
   21bf2:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   21bf4:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   21bf8:	e7fa      	b.n	21bf0 <z_heap_aligned_alloc+0x1c>

00021bfa <k_free>:
	if (ptr != NULL) {
   21bfa:	b120      	cbz	r0, 21c06 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   21bfc:	1f01      	subs	r1, r0, #4
   21bfe:	f850 0c04 	ldr.w	r0, [r0, #-4]
   21c02:	f7ff bbe4 	b.w	213ce <k_heap_free>
}
   21c06:	4770      	bx	lr

00021c08 <k_malloc>:
{
   21c08:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   21c0a:	2004      	movs	r0, #4
   21c0c:	f7f9 bc6e 	b.w	1b4ec <k_aligned_alloc>

00021c10 <k_calloc>:
{
   21c10:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   21c12:	fba0 5401 	umull	r5, r4, r0, r1
   21c16:	b924      	cbnz	r4, 21c22 <k_calloc+0x12>
	ret = k_malloc(bounds);
   21c18:	4628      	mov	r0, r5
   21c1a:	f7ff fff5 	bl	21c08 <k_malloc>
	if (ret != NULL) {
   21c1e:	4606      	mov	r6, r0
   21c20:	b910      	cbnz	r0, 21c28 <k_calloc+0x18>
		return NULL;
   21c22:	2600      	movs	r6, #0
}
   21c24:	4630      	mov	r0, r6
   21c26:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3(memset, void *, int)
   21c28:	462a      	mov	r2, r5
   21c2a:	4621      	mov	r1, r4
   21c2c:	f000 f84b 	bl	21cc6 <memset>
   21c30:	e7f8      	b.n	21c24 <k_calloc+0x14>

00021c32 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   21c32:	4770      	bx	lr

00021c34 <atoi>:
   21c34:	220a      	movs	r2, #10
   21c36:	2100      	movs	r1, #0
   21c38:	f7fa ba68 	b.w	1c10c <strtol>

00021c3c <memchr>:
   21c3c:	b2c9      	uxtb	r1, r1
   21c3e:	4603      	mov	r3, r0
   21c40:	4402      	add	r2, r0
   21c42:	b510      	push	{r4, lr}
   21c44:	4293      	cmp	r3, r2
   21c46:	4618      	mov	r0, r3
   21c48:	d101      	bne.n	21c4e <memchr+0x12>
   21c4a:	2000      	movs	r0, #0
   21c4c:	e003      	b.n	21c56 <memchr+0x1a>
   21c4e:	7804      	ldrb	r4, [r0, #0]
   21c50:	3301      	adds	r3, #1
   21c52:	428c      	cmp	r4, r1
   21c54:	d1f6      	bne.n	21c44 <memchr+0x8>
   21c56:	bd10      	pop	{r4, pc}

00021c58 <memcmp>:
   21c58:	3901      	subs	r1, #1
   21c5a:	4402      	add	r2, r0
   21c5c:	b510      	push	{r4, lr}
   21c5e:	4290      	cmp	r0, r2
   21c60:	d101      	bne.n	21c66 <memcmp+0xe>
   21c62:	2000      	movs	r0, #0
   21c64:	e005      	b.n	21c72 <memcmp+0x1a>
   21c66:	7803      	ldrb	r3, [r0, #0]
   21c68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   21c6c:	42a3      	cmp	r3, r4
   21c6e:	d001      	beq.n	21c74 <memcmp+0x1c>
   21c70:	1b18      	subs	r0, r3, r4
   21c72:	bd10      	pop	{r4, pc}
   21c74:	3001      	adds	r0, #1
   21c76:	e7f2      	b.n	21c5e <memcmp+0x6>

00021c78 <memcpy>:
   21c78:	440a      	add	r2, r1
   21c7a:	1e43      	subs	r3, r0, #1
   21c7c:	4291      	cmp	r1, r2
   21c7e:	d100      	bne.n	21c82 <memcpy+0xa>
   21c80:	4770      	bx	lr
   21c82:	b510      	push	{r4, lr}
   21c84:	f811 4b01 	ldrb.w	r4, [r1], #1
   21c88:	4291      	cmp	r1, r2
   21c8a:	f803 4f01 	strb.w	r4, [r3, #1]!
   21c8e:	d1f9      	bne.n	21c84 <memcpy+0xc>
   21c90:	bd10      	pop	{r4, pc}

00021c92 <memmove>:
   21c92:	4288      	cmp	r0, r1
   21c94:	b510      	push	{r4, lr}
   21c96:	eb01 0402 	add.w	r4, r1, r2
   21c9a:	d902      	bls.n	21ca2 <memmove+0x10>
   21c9c:	4284      	cmp	r4, r0
   21c9e:	4623      	mov	r3, r4
   21ca0:	d807      	bhi.n	21cb2 <memmove+0x20>
   21ca2:	1e43      	subs	r3, r0, #1
   21ca4:	42a1      	cmp	r1, r4
   21ca6:	d008      	beq.n	21cba <memmove+0x28>
   21ca8:	f811 2b01 	ldrb.w	r2, [r1], #1
   21cac:	f803 2f01 	strb.w	r2, [r3, #1]!
   21cb0:	e7f8      	b.n	21ca4 <memmove+0x12>
   21cb2:	4402      	add	r2, r0
   21cb4:	4601      	mov	r1, r0
   21cb6:	428a      	cmp	r2, r1
   21cb8:	d100      	bne.n	21cbc <memmove+0x2a>
   21cba:	bd10      	pop	{r4, pc}
   21cbc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   21cc0:	f802 4d01 	strb.w	r4, [r2, #-1]!
   21cc4:	e7f7      	b.n	21cb6 <memmove+0x24>

00021cc6 <memset>:
   21cc6:	4402      	add	r2, r0
   21cc8:	4603      	mov	r3, r0
   21cca:	4293      	cmp	r3, r2
   21ccc:	d100      	bne.n	21cd0 <memset+0xa>
   21cce:	4770      	bx	lr
   21cd0:	f803 1b01 	strb.w	r1, [r3], #1
   21cd4:	e7f9      	b.n	21cca <memset+0x4>

00021cd6 <__cvt>:
   21cd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21cda:	b085      	sub	sp, #20
   21cdc:	460c      	mov	r4, r1
   21cde:	4690      	mov	r8, r2
   21ce0:	4619      	mov	r1, r3
   21ce2:	ec57 6b10 	vmov	r6, r7, d0
   21ce6:	2f00      	cmp	r7, #0
   21ce8:	463b      	mov	r3, r7
   21cea:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   21cee:	bfbc      	itt	lt
   21cf0:	f107 4300 	addlt.w	r3, r7, #2147483648	; 0x80000000
   21cf4:	4632      	movlt	r2, r6
   21cf6:	f02b 0a20 	bic.w	sl, fp, #32
   21cfa:	bfaf      	iteee	ge
   21cfc:	2300      	movge	r3, #0
   21cfe:	461f      	movlt	r7, r3
   21d00:	4616      	movlt	r6, r2
   21d02:	232d      	movlt	r3, #45	; 0x2d
   21d04:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   21d08:	700b      	strb	r3, [r1, #0]
   21d0a:	d005      	beq.n	21d18 <__cvt+0x42>
   21d0c:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   21d10:	d100      	bne.n	21d14 <__cvt+0x3e>
   21d12:	3401      	adds	r4, #1
   21d14:	2102      	movs	r1, #2
   21d16:	e000      	b.n	21d1a <__cvt+0x44>
   21d18:	2103      	movs	r1, #3
   21d1a:	ab03      	add	r3, sp, #12
   21d1c:	4622      	mov	r2, r4
   21d1e:	9301      	str	r3, [sp, #4]
   21d20:	ab02      	add	r3, sp, #8
   21d22:	ec47 6b10 	vmov	d0, r6, r7
   21d26:	9300      	str	r3, [sp, #0]
   21d28:	464b      	mov	r3, r9
   21d2a:	f7e9 fa35 	bl	b198 <_dtoa_r>
   21d2e:	f1bb 0f67 	cmp.w	fp, #103	; 0x67
   21d32:	4605      	mov	r5, r0
   21d34:	d119      	bne.n	21d6a <__cvt+0x94>
   21d36:	f018 0f01 	tst.w	r8, #1
   21d3a:	d00e      	beq.n	21d5a <__cvt+0x84>
   21d3c:	eb05 0804 	add.w	r8, r5, r4
   21d40:	2200      	movs	r2, #0
   21d42:	2300      	movs	r3, #0
   21d44:	4630      	mov	r0, r6
   21d46:	4639      	mov	r1, r7
   21d48:	f7e6 fe22 	bl	8990 <__aeabi_dcmpeq>
   21d4c:	b108      	cbz	r0, 21d52 <__cvt+0x7c>
   21d4e:	f8cd 800c 	str.w	r8, [sp, #12]
   21d52:	2230      	movs	r2, #48	; 0x30
   21d54:	9b03      	ldr	r3, [sp, #12]
   21d56:	4543      	cmp	r3, r8
   21d58:	d321      	bcc.n	21d9e <__cvt+0xc8>
   21d5a:	9b03      	ldr	r3, [sp, #12]
   21d5c:	4628      	mov	r0, r5
   21d5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   21d60:	1b5b      	subs	r3, r3, r5
   21d62:	6013      	str	r3, [r2, #0]
   21d64:	b005      	add	sp, #20
   21d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d6a:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   21d6e:	d0e2      	beq.n	21d36 <__cvt+0x60>
   21d70:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   21d74:	eb00 0804 	add.w	r8, r0, r4
   21d78:	d1e2      	bne.n	21d40 <__cvt+0x6a>
   21d7a:	7803      	ldrb	r3, [r0, #0]
   21d7c:	2b30      	cmp	r3, #48	; 0x30
   21d7e:	d10a      	bne.n	21d96 <__cvt+0xc0>
   21d80:	2200      	movs	r2, #0
   21d82:	2300      	movs	r3, #0
   21d84:	4630      	mov	r0, r6
   21d86:	4639      	mov	r1, r7
   21d88:	f7e6 fe02 	bl	8990 <__aeabi_dcmpeq>
   21d8c:	b918      	cbnz	r0, 21d96 <__cvt+0xc0>
   21d8e:	f1c4 0401 	rsb	r4, r4, #1
   21d92:	f8c9 4000 	str.w	r4, [r9]
   21d96:	f8d9 3000 	ldr.w	r3, [r9]
   21d9a:	4498      	add	r8, r3
   21d9c:	e7d0      	b.n	21d40 <__cvt+0x6a>
   21d9e:	1c59      	adds	r1, r3, #1
   21da0:	9103      	str	r1, [sp, #12]
   21da2:	701a      	strb	r2, [r3, #0]
   21da4:	e7d6      	b.n	21d54 <__cvt+0x7e>

00021da6 <__exponent>:
   21da6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21da8:	2900      	cmp	r1, #0
   21daa:	7002      	strb	r2, [r0, #0]
   21dac:	bfba      	itte	lt
   21dae:	4249      	neglt	r1, r1
   21db0:	232d      	movlt	r3, #45	; 0x2d
   21db2:	232b      	movge	r3, #43	; 0x2b
   21db4:	2909      	cmp	r1, #9
   21db6:	7043      	strb	r3, [r0, #1]
   21db8:	dd28      	ble.n	21e0c <__exponent+0x66>
   21dba:	f10d 0307 	add.w	r3, sp, #7
   21dbe:	270a      	movs	r7, #10
   21dc0:	461d      	mov	r5, r3
   21dc2:	461a      	mov	r2, r3
   21dc4:	3b01      	subs	r3, #1
   21dc6:	fbb1 f6f7 	udiv	r6, r1, r7
   21dca:	fb07 1416 	mls	r4, r7, r6, r1
   21dce:	3430      	adds	r4, #48	; 0x30
   21dd0:	f802 4c01 	strb.w	r4, [r2, #-1]
   21dd4:	460c      	mov	r4, r1
   21dd6:	4631      	mov	r1, r6
   21dd8:	2c63      	cmp	r4, #99	; 0x63
   21dda:	dcf2      	bgt.n	21dc2 <__exponent+0x1c>
   21ddc:	3130      	adds	r1, #48	; 0x30
   21dde:	1e94      	subs	r4, r2, #2
   21de0:	f803 1c01 	strb.w	r1, [r3, #-1]
   21de4:	1c41      	adds	r1, r0, #1
   21de6:	4623      	mov	r3, r4
   21de8:	42ab      	cmp	r3, r5
   21dea:	d30a      	bcc.n	21e02 <__exponent+0x5c>
   21dec:	f10d 0309 	add.w	r3, sp, #9
   21df0:	1a9b      	subs	r3, r3, r2
   21df2:	42ac      	cmp	r4, r5
   21df4:	bf88      	it	hi
   21df6:	2300      	movhi	r3, #0
   21df8:	3302      	adds	r3, #2
   21dfa:	4403      	add	r3, r0
   21dfc:	1a18      	subs	r0, r3, r0
   21dfe:	b003      	add	sp, #12
   21e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21e02:	f813 6b01 	ldrb.w	r6, [r3], #1
   21e06:	f801 6f01 	strb.w	r6, [r1, #1]!
   21e0a:	e7ed      	b.n	21de8 <__exponent+0x42>
   21e0c:	2330      	movs	r3, #48	; 0x30
   21e0e:	3130      	adds	r1, #48	; 0x30
   21e10:	7083      	strb	r3, [r0, #2]
   21e12:	1d03      	adds	r3, r0, #4
   21e14:	70c1      	strb	r1, [r0, #3]
   21e16:	e7f1      	b.n	21dfc <__exponent+0x56>

00021e18 <_printf_common>:
   21e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21e1c:	4616      	mov	r6, r2
   21e1e:	4698      	mov	r8, r3
   21e20:	688a      	ldr	r2, [r1, #8]
   21e22:	4607      	mov	r7, r0
   21e24:	690b      	ldr	r3, [r1, #16]
   21e26:	460c      	mov	r4, r1
   21e28:	f8dd 9020 	ldr.w	r9, [sp, #32]
   21e2c:	4293      	cmp	r3, r2
   21e2e:	bfb8      	it	lt
   21e30:	4613      	movlt	r3, r2
   21e32:	6033      	str	r3, [r6, #0]
   21e34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   21e38:	b10a      	cbz	r2, 21e3e <_printf_common+0x26>
   21e3a:	3301      	adds	r3, #1
   21e3c:	6033      	str	r3, [r6, #0]
   21e3e:	6823      	ldr	r3, [r4, #0]
   21e40:	0699      	lsls	r1, r3, #26
   21e42:	bf42      	ittt	mi
   21e44:	6833      	ldrmi	r3, [r6, #0]
   21e46:	3302      	addmi	r3, #2
   21e48:	6033      	strmi	r3, [r6, #0]
   21e4a:	6825      	ldr	r5, [r4, #0]
   21e4c:	f015 0506 	ands.w	r5, r5, #6
   21e50:	d106      	bne.n	21e60 <_printf_common+0x48>
   21e52:	f104 0a19 	add.w	sl, r4, #25
   21e56:	68e3      	ldr	r3, [r4, #12]
   21e58:	6832      	ldr	r2, [r6, #0]
   21e5a:	1a9b      	subs	r3, r3, r2
   21e5c:	42ab      	cmp	r3, r5
   21e5e:	dc2b      	bgt.n	21eb8 <_printf_common+0xa0>
   21e60:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   21e64:	6822      	ldr	r2, [r4, #0]
   21e66:	3b00      	subs	r3, #0
   21e68:	bf18      	it	ne
   21e6a:	2301      	movne	r3, #1
   21e6c:	0692      	lsls	r2, r2, #26
   21e6e:	d430      	bmi.n	21ed2 <_printf_common+0xba>
   21e70:	f104 0243 	add.w	r2, r4, #67	; 0x43
   21e74:	4641      	mov	r1, r8
   21e76:	4638      	mov	r0, r7
   21e78:	47c8      	blx	r9
   21e7a:	3001      	adds	r0, #1
   21e7c:	d023      	beq.n	21ec6 <_printf_common+0xae>
   21e7e:	6823      	ldr	r3, [r4, #0]
   21e80:	341a      	adds	r4, #26
   21e82:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   21e86:	f003 0306 	and.w	r3, r3, #6
   21e8a:	2b04      	cmp	r3, #4
   21e8c:	bf0a      	itet	eq
   21e8e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   21e92:	2500      	movne	r5, #0
   21e94:	6833      	ldreq	r3, [r6, #0]
   21e96:	f04f 0600 	mov.w	r6, #0
   21e9a:	bf08      	it	eq
   21e9c:	1aed      	subeq	r5, r5, r3
   21e9e:	f854 3c12 	ldr.w	r3, [r4, #-18]
   21ea2:	bf08      	it	eq
   21ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   21ea8:	4293      	cmp	r3, r2
   21eaa:	bfc4      	itt	gt
   21eac:	1a9b      	subgt	r3, r3, r2
   21eae:	18ed      	addgt	r5, r5, r3
   21eb0:	42b5      	cmp	r5, r6
   21eb2:	d11a      	bne.n	21eea <_printf_common+0xd2>
   21eb4:	2000      	movs	r0, #0
   21eb6:	e008      	b.n	21eca <_printf_common+0xb2>
   21eb8:	2301      	movs	r3, #1
   21eba:	4652      	mov	r2, sl
   21ebc:	4641      	mov	r1, r8
   21ebe:	4638      	mov	r0, r7
   21ec0:	47c8      	blx	r9
   21ec2:	3001      	adds	r0, #1
   21ec4:	d103      	bne.n	21ece <_printf_common+0xb6>
   21ec6:	f04f 30ff 	mov.w	r0, #4294967295
   21eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21ece:	3501      	adds	r5, #1
   21ed0:	e7c1      	b.n	21e56 <_printf_common+0x3e>
   21ed2:	18e1      	adds	r1, r4, r3
   21ed4:	1c5a      	adds	r2, r3, #1
   21ed6:	2030      	movs	r0, #48	; 0x30
   21ed8:	3302      	adds	r3, #2
   21eda:	4422      	add	r2, r4
   21edc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   21ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   21ee4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   21ee8:	e7c2      	b.n	21e70 <_printf_common+0x58>
   21eea:	2301      	movs	r3, #1
   21eec:	4622      	mov	r2, r4
   21eee:	4641      	mov	r1, r8
   21ef0:	4638      	mov	r0, r7
   21ef2:	47c8      	blx	r9
   21ef4:	3001      	adds	r0, #1
   21ef6:	d0e6      	beq.n	21ec6 <_printf_common+0xae>
   21ef8:	3601      	adds	r6, #1
   21efa:	e7d9      	b.n	21eb0 <_printf_common+0x98>

00021efc <__sread>:
   21efc:	b510      	push	{r4, lr}
   21efe:	460c      	mov	r4, r1
   21f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21f04:	f7fb ffa6 	bl	1de54 <_read_r>
   21f08:	2800      	cmp	r0, #0
   21f0a:	bfab      	itete	ge
   21f0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   21f0e:	89a3      	ldrhlt	r3, [r4, #12]
   21f10:	181b      	addge	r3, r3, r0
   21f12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   21f16:	bfac      	ite	ge
   21f18:	6563      	strge	r3, [r4, #84]	; 0x54
   21f1a:	81a3      	strhlt	r3, [r4, #12]
   21f1c:	bd10      	pop	{r4, pc}

00021f1e <__seofread>:
   21f1e:	2000      	movs	r0, #0
   21f20:	4770      	bx	lr

00021f22 <__swrite>:
   21f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21f26:	461f      	mov	r7, r3
   21f28:	898b      	ldrh	r3, [r1, #12]
   21f2a:	4605      	mov	r5, r0
   21f2c:	460c      	mov	r4, r1
   21f2e:	05db      	lsls	r3, r3, #23
   21f30:	4616      	mov	r6, r2
   21f32:	d505      	bpl.n	21f40 <__swrite+0x1e>
   21f34:	2302      	movs	r3, #2
   21f36:	2200      	movs	r2, #0
   21f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21f3c:	f7fa fe56 	bl	1cbec <_lseek_r>
   21f40:	89a3      	ldrh	r3, [r4, #12]
   21f42:	4632      	mov	r2, r6
   21f44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   21f48:	4628      	mov	r0, r5
   21f4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   21f4e:	81a3      	strh	r3, [r4, #12]
   21f50:	463b      	mov	r3, r7
   21f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21f56:	f7fa ba8b 	b.w	1c470 <_write_r>

00021f5a <__sseek>:
   21f5a:	b510      	push	{r4, lr}
   21f5c:	460c      	mov	r4, r1
   21f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21f62:	f7fa fe43 	bl	1cbec <_lseek_r>
   21f66:	1c43      	adds	r3, r0, #1
   21f68:	89a3      	ldrh	r3, [r4, #12]
   21f6a:	bf15      	itete	ne
   21f6c:	6560      	strne	r0, [r4, #84]	; 0x54
   21f6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   21f72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   21f76:	81a3      	strheq	r3, [r4, #12]
   21f78:	bf18      	it	ne
   21f7a:	81a3      	strhne	r3, [r4, #12]
   21f7c:	bd10      	pop	{r4, pc}

00021f7e <__sclose>:
   21f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21f82:	f7fa baf3 	b.w	1c56c <_close_r>

00021f86 <strchr>:
   21f86:	b2c9      	uxtb	r1, r1
   21f88:	4603      	mov	r3, r0
   21f8a:	4618      	mov	r0, r3
   21f8c:	f813 2b01 	ldrb.w	r2, [r3], #1
   21f90:	b112      	cbz	r2, 21f98 <strchr+0x12>
   21f92:	428a      	cmp	r2, r1
   21f94:	d1f9      	bne.n	21f8a <strchr+0x4>
   21f96:	4770      	bx	lr
   21f98:	2900      	cmp	r1, #0
   21f9a:	bf18      	it	ne
   21f9c:	2000      	movne	r0, #0
   21f9e:	4770      	bx	lr

00021fa0 <strcpy>:
   21fa0:	4603      	mov	r3, r0
   21fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
   21fa6:	f803 2b01 	strb.w	r2, [r3], #1
   21faa:	2a00      	cmp	r2, #0
   21fac:	d1f9      	bne.n	21fa2 <strcpy+0x2>
   21fae:	4770      	bx	lr

00021fb0 <strncmp>:
   21fb0:	b510      	push	{r4, lr}
   21fb2:	b16a      	cbz	r2, 21fd0 <strncmp+0x20>
   21fb4:	3901      	subs	r1, #1
   21fb6:	1884      	adds	r4, r0, r2
   21fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
   21fbc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   21fc0:	429a      	cmp	r2, r3
   21fc2:	d103      	bne.n	21fcc <strncmp+0x1c>
   21fc4:	42a0      	cmp	r0, r4
   21fc6:	d001      	beq.n	21fcc <strncmp+0x1c>
   21fc8:	2a00      	cmp	r2, #0
   21fca:	d1f5      	bne.n	21fb8 <strncmp+0x8>
   21fcc:	1ad0      	subs	r0, r2, r3
   21fce:	bd10      	pop	{r4, pc}
   21fd0:	4610      	mov	r0, r2
   21fd2:	e7fc      	b.n	21fce <strncmp+0x1e>

00021fd4 <strncpy>:
   21fd4:	3901      	subs	r1, #1
   21fd6:	4603      	mov	r3, r0
   21fd8:	b510      	push	{r4, lr}
   21fda:	b132      	cbz	r2, 21fea <strncpy+0x16>
   21fdc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   21fe0:	3a01      	subs	r2, #1
   21fe2:	f803 4b01 	strb.w	r4, [r3], #1
   21fe6:	2c00      	cmp	r4, #0
   21fe8:	d1f7      	bne.n	21fda <strncpy+0x6>
   21fea:	441a      	add	r2, r3
   21fec:	2100      	movs	r1, #0
   21fee:	4293      	cmp	r3, r2
   21ff0:	d100      	bne.n	21ff4 <strncpy+0x20>
   21ff2:	bd10      	pop	{r4, pc}
   21ff4:	f803 1b01 	strb.w	r1, [r3], #1
   21ff8:	e7f9      	b.n	21fee <strncpy+0x1a>

00021ffa <strnlen>:
   21ffa:	4602      	mov	r2, r0
   21ffc:	4401      	add	r1, r0
   21ffe:	b510      	push	{r4, lr}
   22000:	428a      	cmp	r2, r1
   22002:	4613      	mov	r3, r2
   22004:	d003      	beq.n	2200e <strnlen+0x14>
   22006:	781c      	ldrb	r4, [r3, #0]
   22008:	3201      	adds	r2, #1
   2200a:	2c00      	cmp	r4, #0
   2200c:	d1f8      	bne.n	22000 <strnlen+0x6>
   2200e:	1a18      	subs	r0, r3, r0
   22010:	bd10      	pop	{r4, pc}

00022012 <strrchr>:
   22012:	b538      	push	{r3, r4, r5, lr}
   22014:	4603      	mov	r3, r0
   22016:	460c      	mov	r4, r1
   22018:	b969      	cbnz	r1, 22036 <strrchr+0x24>
   2201a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2201e:	f7ff bfb2 	b.w	21f86 <strchr>
   22022:	1c43      	adds	r3, r0, #1
   22024:	4605      	mov	r5, r0
   22026:	4621      	mov	r1, r4
   22028:	4618      	mov	r0, r3
   2202a:	f7ff ffac 	bl	21f86 <strchr>
   2202e:	2800      	cmp	r0, #0
   22030:	d1f7      	bne.n	22022 <strrchr+0x10>
   22032:	4628      	mov	r0, r5
   22034:	bd38      	pop	{r3, r4, r5, pc}
   22036:	2500      	movs	r5, #0
   22038:	e7f5      	b.n	22026 <strrchr+0x14>

0002203a <strstr>:
   2203a:	780a      	ldrb	r2, [r1, #0]
   2203c:	b570      	push	{r4, r5, r6, lr}
   2203e:	b96a      	cbnz	r2, 2205c <strstr+0x22>
   22040:	bd70      	pop	{r4, r5, r6, pc}
   22042:	429a      	cmp	r2, r3
   22044:	d109      	bne.n	2205a <strstr+0x20>
   22046:	460c      	mov	r4, r1
   22048:	4605      	mov	r5, r0
   2204a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2204e:	2b00      	cmp	r3, #0
   22050:	d0f6      	beq.n	22040 <strstr+0x6>
   22052:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   22056:	429e      	cmp	r6, r3
   22058:	d0f7      	beq.n	2204a <strstr+0x10>
   2205a:	3001      	adds	r0, #1
   2205c:	7803      	ldrb	r3, [r0, #0]
   2205e:	2b00      	cmp	r3, #0
   22060:	d1ef      	bne.n	22042 <strstr+0x8>
   22062:	4618      	mov	r0, r3
   22064:	e7ec      	b.n	22040 <strstr+0x6>

00022066 <sulp>:
   22066:	b570      	push	{r4, r5, r6, lr}
   22068:	4604      	mov	r4, r0
   2206a:	460d      	mov	r5, r1
   2206c:	4616      	mov	r6, r2
   2206e:	ec45 4b10 	vmov	d0, r4, r5
   22072:	f7fb f92b 	bl	1d2cc <__ulp>
   22076:	ec51 0b10 	vmov	r0, r1, d0
   2207a:	b17e      	cbz	r6, 2209c <sulp+0x36>
   2207c:	f3c5 530a 	ubfx	r3, r5, #20, #11
   22080:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   22084:	2b00      	cmp	r3, #0
   22086:	dd09      	ble.n	2209c <sulp+0x36>
   22088:	051b      	lsls	r3, r3, #20
   2208a:	2400      	movs	r4, #0
   2208c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   22090:	4622      	mov	r2, r4
   22092:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   22096:	462b      	mov	r3, r5
   22098:	f7e6 fa12 	bl	84c0 <__aeabi_dmul>
   2209c:	ec41 0b10 	vmov	d0, r0, r1
   220a0:	bd70      	pop	{r4, r5, r6, pc}

000220a2 <_strtol_r>:
   220a2:	f7f9 bfb5 	b.w	1c010 <_strtol_l.constprop.0>

000220a6 <_strtoul_r>:
   220a6:	f7fa b8d9 	b.w	1c25c <_strtoul_l.constprop.0>

000220aa <_vsniprintf_r>:
   220aa:	b530      	push	{r4, r5, lr}
   220ac:	4614      	mov	r4, r2
   220ae:	b09b      	sub	sp, #108	; 0x6c
   220b0:	4605      	mov	r5, r0
   220b2:	461a      	mov	r2, r3
   220b4:	2c00      	cmp	r4, #0
   220b6:	da05      	bge.n	220c4 <_vsniprintf_r+0x1a>
   220b8:	238b      	movs	r3, #139	; 0x8b
   220ba:	6003      	str	r3, [r0, #0]
   220bc:	f04f 30ff 	mov.w	r0, #4294967295
   220c0:	b01b      	add	sp, #108	; 0x6c
   220c2:	bd30      	pop	{r4, r5, pc}
   220c4:	f44f 7302 	mov.w	r3, #520	; 0x208
   220c8:	9100      	str	r1, [sp, #0]
   220ca:	9104      	str	r1, [sp, #16]
   220cc:	4669      	mov	r1, sp
   220ce:	f8ad 300c 	strh.w	r3, [sp, #12]
   220d2:	bf14      	ite	ne
   220d4:	f104 33ff 	addne.w	r3, r4, #4294967295
   220d8:	4623      	moveq	r3, r4
   220da:	9302      	str	r3, [sp, #8]
   220dc:	9305      	str	r3, [sp, #20]
   220de:	f64f 73ff 	movw	r3, #65535	; 0xffff
   220e2:	f8ad 300e 	strh.w	r3, [sp, #14]
   220e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   220e8:	f7fb f9bc 	bl	1d464 <_svfiprintf_r>
   220ec:	1c43      	adds	r3, r0, #1
   220ee:	bfbc      	itt	lt
   220f0:	238b      	movlt	r3, #139	; 0x8b
   220f2:	602b      	strlt	r3, [r5, #0]
   220f4:	2c00      	cmp	r4, #0
   220f6:	d0e3      	beq.n	220c0 <_vsniprintf_r+0x16>
   220f8:	9b00      	ldr	r3, [sp, #0]
   220fa:	2200      	movs	r2, #0
   220fc:	701a      	strb	r2, [r3, #0]
   220fe:	e7df      	b.n	220c0 <_vsniprintf_r+0x16>

00022100 <quorem>:
   22100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22104:	6903      	ldr	r3, [r0, #16]
   22106:	4607      	mov	r7, r0
   22108:	690c      	ldr	r4, [r1, #16]
   2210a:	42a3      	cmp	r3, r4
   2210c:	f2c0 8083 	blt.w	22216 <quorem+0x116>
   22110:	3c01      	subs	r4, #1
   22112:	f100 0514 	add.w	r5, r0, #20
   22116:	f101 0814 	add.w	r8, r1, #20
   2211a:	00a3      	lsls	r3, r4, #2
   2211c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   22120:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   22124:	9300      	str	r3, [sp, #0]
   22126:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2212a:	9301      	str	r3, [sp, #4]
   2212c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   22130:	3301      	adds	r3, #1
   22132:	429a      	cmp	r2, r3
   22134:	fbb2 f6f3 	udiv	r6, r2, r3
   22138:	d331      	bcc.n	2219e <quorem+0x9e>
   2213a:	f04f 0a00 	mov.w	sl, #0
   2213e:	46c4      	mov	ip, r8
   22140:	46ae      	mov	lr, r5
   22142:	46d3      	mov	fp, sl
   22144:	f85c 3b04 	ldr.w	r3, [ip], #4
   22148:	b298      	uxth	r0, r3
   2214a:	45e1      	cmp	r9, ip
   2214c:	ea4f 4313 	mov.w	r3, r3, lsr #16
   22150:	fb06 a000 	mla	r0, r6, r0, sl
   22154:	ea4f 4210 	mov.w	r2, r0, lsr #16
   22158:	b280      	uxth	r0, r0
   2215a:	fb06 2303 	mla	r3, r6, r3, r2
   2215e:	f8de 2000 	ldr.w	r2, [lr]
   22162:	b292      	uxth	r2, r2
   22164:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   22168:	eba2 0200 	sub.w	r2, r2, r0
   2216c:	b29b      	uxth	r3, r3
   2216e:	f8de 0000 	ldr.w	r0, [lr]
   22172:	445a      	add	r2, fp
   22174:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   22178:	b292      	uxth	r2, r2
   2217a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   2217e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   22182:	ea4f 4b23 	mov.w	fp, r3, asr #16
   22186:	f84e 2b04 	str.w	r2, [lr], #4
   2218a:	d2db      	bcs.n	22144 <quorem+0x44>
   2218c:	9b00      	ldr	r3, [sp, #0]
   2218e:	58eb      	ldr	r3, [r5, r3]
   22190:	b92b      	cbnz	r3, 2219e <quorem+0x9e>
   22192:	9b01      	ldr	r3, [sp, #4]
   22194:	3b04      	subs	r3, #4
   22196:	429d      	cmp	r5, r3
   22198:	461a      	mov	r2, r3
   2219a:	d330      	bcc.n	221fe <quorem+0xfe>
   2219c:	613c      	str	r4, [r7, #16]
   2219e:	4638      	mov	r0, r7
   221a0:	f000 faa0 	bl	226e4 <__mcmp>
   221a4:	2800      	cmp	r0, #0
   221a6:	db26      	blt.n	221f6 <quorem+0xf6>
   221a8:	4629      	mov	r1, r5
   221aa:	2000      	movs	r0, #0
   221ac:	f858 2b04 	ldr.w	r2, [r8], #4
   221b0:	f8d1 c000 	ldr.w	ip, [r1]
   221b4:	fa1f fe82 	uxth.w	lr, r2
   221b8:	45c1      	cmp	r9, r8
   221ba:	fa1f f38c 	uxth.w	r3, ip
   221be:	ea4f 4212 	mov.w	r2, r2, lsr #16
   221c2:	eba3 030e 	sub.w	r3, r3, lr
   221c6:	4403      	add	r3, r0
   221c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   221cc:	b29b      	uxth	r3, r3
   221ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   221d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   221d6:	ea4f 4022 	mov.w	r0, r2, asr #16
   221da:	f841 3b04 	str.w	r3, [r1], #4
   221de:	d2e5      	bcs.n	221ac <quorem+0xac>
   221e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   221e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   221e8:	b922      	cbnz	r2, 221f4 <quorem+0xf4>
   221ea:	3b04      	subs	r3, #4
   221ec:	429d      	cmp	r5, r3
   221ee:	461a      	mov	r2, r3
   221f0:	d30b      	bcc.n	2220a <quorem+0x10a>
   221f2:	613c      	str	r4, [r7, #16]
   221f4:	3601      	adds	r6, #1
   221f6:	4630      	mov	r0, r6
   221f8:	b003      	add	sp, #12
   221fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   221fe:	6812      	ldr	r2, [r2, #0]
   22200:	3b04      	subs	r3, #4
   22202:	2a00      	cmp	r2, #0
   22204:	d1ca      	bne.n	2219c <quorem+0x9c>
   22206:	3c01      	subs	r4, #1
   22208:	e7c5      	b.n	22196 <quorem+0x96>
   2220a:	6812      	ldr	r2, [r2, #0]
   2220c:	3b04      	subs	r3, #4
   2220e:	2a00      	cmp	r2, #0
   22210:	d1ef      	bne.n	221f2 <quorem+0xf2>
   22212:	3c01      	subs	r4, #1
   22214:	e7ea      	b.n	221ec <quorem+0xec>
   22216:	2000      	movs	r0, #0
   22218:	e7ee      	b.n	221f8 <quorem+0xf8>

0002221a <__sflush_r>:
   2221a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2221e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22222:	0717      	lsls	r7, r2, #28
   22224:	4605      	mov	r5, r0
   22226:	460c      	mov	r4, r1
   22228:	d456      	bmi.n	222d8 <__sflush_r+0xbe>
   2222a:	684b      	ldr	r3, [r1, #4]
   2222c:	2b00      	cmp	r3, #0
   2222e:	dc02      	bgt.n	22236 <__sflush_r+0x1c>
   22230:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   22232:	2b00      	cmp	r3, #0
   22234:	dd3d      	ble.n	222b2 <__sflush_r+0x98>
   22236:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   22238:	2e00      	cmp	r6, #0
   2223a:	d03a      	beq.n	222b2 <__sflush_r+0x98>
   2223c:	2300      	movs	r3, #0
   2223e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   22242:	682f      	ldr	r7, [r5, #0]
   22244:	6a21      	ldr	r1, [r4, #32]
   22246:	602b      	str	r3, [r5, #0]
   22248:	d025      	beq.n	22296 <__sflush_r+0x7c>
   2224a:	6d62      	ldr	r2, [r4, #84]	; 0x54
   2224c:	89a3      	ldrh	r3, [r4, #12]
   2224e:	0758      	lsls	r0, r3, #29
   22250:	d505      	bpl.n	2225e <__sflush_r+0x44>
   22252:	6863      	ldr	r3, [r4, #4]
   22254:	1ad2      	subs	r2, r2, r3
   22256:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22258:	b10b      	cbz	r3, 2225e <__sflush_r+0x44>
   2225a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2225c:	1ad2      	subs	r2, r2, r3
   2225e:	6a21      	ldr	r1, [r4, #32]
   22260:	2300      	movs	r3, #0
   22262:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   22264:	4628      	mov	r0, r5
   22266:	47b0      	blx	r6
   22268:	1c41      	adds	r1, r0, #1
   2226a:	d024      	beq.n	222b6 <__sflush_r+0x9c>
   2226c:	2300      	movs	r3, #0
   2226e:	6063      	str	r3, [r4, #4]
   22270:	6923      	ldr	r3, [r4, #16]
   22272:	6023      	str	r3, [r4, #0]
   22274:	89a3      	ldrh	r3, [r4, #12]
   22276:	04da      	lsls	r2, r3, #19
   22278:	d500      	bpl.n	2227c <__sflush_r+0x62>
   2227a:	6560      	str	r0, [r4, #84]	; 0x54
   2227c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2227e:	602f      	str	r7, [r5, #0]
   22280:	b1b9      	cbz	r1, 222b2 <__sflush_r+0x98>
   22282:	f104 0344 	add.w	r3, r4, #68	; 0x44
   22286:	4299      	cmp	r1, r3
   22288:	d002      	beq.n	22290 <__sflush_r+0x76>
   2228a:	4628      	mov	r0, r5
   2228c:	f7f9 fa28 	bl	1b6e0 <_free_r>
   22290:	2300      	movs	r3, #0
   22292:	6363      	str	r3, [r4, #52]	; 0x34
   22294:	e00d      	b.n	222b2 <__sflush_r+0x98>
   22296:	2301      	movs	r3, #1
   22298:	4628      	mov	r0, r5
   2229a:	47b0      	blx	r6
   2229c:	1c46      	adds	r6, r0, #1
   2229e:	4602      	mov	r2, r0
   222a0:	d1d4      	bne.n	2224c <__sflush_r+0x32>
   222a2:	682b      	ldr	r3, [r5, #0]
   222a4:	2b00      	cmp	r3, #0
   222a6:	d0d1      	beq.n	2224c <__sflush_r+0x32>
   222a8:	2b1d      	cmp	r3, #29
   222aa:	d001      	beq.n	222b0 <__sflush_r+0x96>
   222ac:	2b16      	cmp	r3, #22
   222ae:	d12a      	bne.n	22306 <__sflush_r+0xec>
   222b0:	602f      	str	r7, [r5, #0]
   222b2:	2000      	movs	r0, #0
   222b4:	e02e      	b.n	22314 <__sflush_r+0xfa>
   222b6:	682a      	ldr	r2, [r5, #0]
   222b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   222bc:	b142      	cbz	r2, 222d0 <__sflush_r+0xb6>
   222be:	2a1d      	cmp	r2, #29
   222c0:	d001      	beq.n	222c6 <__sflush_r+0xac>
   222c2:	2a16      	cmp	r2, #22
   222c4:	d121      	bne.n	2230a <__sflush_r+0xf0>
   222c6:	2300      	movs	r3, #0
   222c8:	6063      	str	r3, [r4, #4]
   222ca:	6923      	ldr	r3, [r4, #16]
   222cc:	6023      	str	r3, [r4, #0]
   222ce:	e7d5      	b.n	2227c <__sflush_r+0x62>
   222d0:	6062      	str	r2, [r4, #4]
   222d2:	6922      	ldr	r2, [r4, #16]
   222d4:	6022      	str	r2, [r4, #0]
   222d6:	e7ce      	b.n	22276 <__sflush_r+0x5c>
   222d8:	690f      	ldr	r7, [r1, #16]
   222da:	2f00      	cmp	r7, #0
   222dc:	d0e9      	beq.n	222b2 <__sflush_r+0x98>
   222de:	0793      	lsls	r3, r2, #30
   222e0:	680e      	ldr	r6, [r1, #0]
   222e2:	600f      	str	r7, [r1, #0]
   222e4:	bf0c      	ite	eq
   222e6:	694b      	ldreq	r3, [r1, #20]
   222e8:	2300      	movne	r3, #0
   222ea:	eba6 0807 	sub.w	r8, r6, r7
   222ee:	608b      	str	r3, [r1, #8]
   222f0:	f1b8 0f00 	cmp.w	r8, #0
   222f4:	dddd      	ble.n	222b2 <__sflush_r+0x98>
   222f6:	4643      	mov	r3, r8
   222f8:	463a      	mov	r2, r7
   222fa:	6a21      	ldr	r1, [r4, #32]
   222fc:	4628      	mov	r0, r5
   222fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   22300:	47b0      	blx	r6
   22302:	2800      	cmp	r0, #0
   22304:	dc08      	bgt.n	22318 <__sflush_r+0xfe>
   22306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2230a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2230e:	f04f 30ff 	mov.w	r0, #4294967295
   22312:	81a3      	strh	r3, [r4, #12]
   22314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22318:	4407      	add	r7, r0
   2231a:	eba8 0800 	sub.w	r8, r8, r0
   2231e:	e7e7      	b.n	222f0 <__sflush_r+0xd6>

00022320 <__sfmoreglue>:
   22320:	b570      	push	{r4, r5, r6, lr}
   22322:	2368      	movs	r3, #104	; 0x68
   22324:	1e4d      	subs	r5, r1, #1
   22326:	460e      	mov	r6, r1
   22328:	435d      	muls	r5, r3
   2232a:	f105 0174 	add.w	r1, r5, #116	; 0x74
   2232e:	f7f9 fa21 	bl	1b774 <_malloc_r>
   22332:	4604      	mov	r4, r0
   22334:	b140      	cbz	r0, 22348 <__sfmoreglue+0x28>
   22336:	2100      	movs	r1, #0
   22338:	f105 0268 	add.w	r2, r5, #104	; 0x68
   2233c:	e9c0 1600 	strd	r1, r6, [r0]
   22340:	300c      	adds	r0, #12
   22342:	60a0      	str	r0, [r4, #8]
   22344:	f7ff fcbf 	bl	21cc6 <memset>
   22348:	4620      	mov	r0, r4
   2234a:	bd70      	pop	{r4, r5, r6, pc}

0002234c <_fwalk_reent>:
   2234c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22350:	4606      	mov	r6, r0
   22352:	4688      	mov	r8, r1
   22354:	f100 0448 	add.w	r4, r0, #72	; 0x48
   22358:	2700      	movs	r7, #0
   2235a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   2235e:	f1b9 0901 	subs.w	r9, r9, #1
   22362:	d505      	bpl.n	22370 <_fwalk_reent+0x24>
   22364:	6824      	ldr	r4, [r4, #0]
   22366:	2c00      	cmp	r4, #0
   22368:	d1f7      	bne.n	2235a <_fwalk_reent+0xe>
   2236a:	4638      	mov	r0, r7
   2236c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22370:	89ab      	ldrh	r3, [r5, #12]
   22372:	2b01      	cmp	r3, #1
   22374:	d907      	bls.n	22386 <_fwalk_reent+0x3a>
   22376:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   2237a:	3301      	adds	r3, #1
   2237c:	d003      	beq.n	22386 <_fwalk_reent+0x3a>
   2237e:	4629      	mov	r1, r5
   22380:	4630      	mov	r0, r6
   22382:	47c0      	blx	r8
   22384:	4307      	orrs	r7, r0
   22386:	3568      	adds	r5, #104	; 0x68
   22388:	e7e9      	b.n	2235e <_fwalk_reent+0x12>

0002238a <rshift>:
   2238a:	6903      	ldr	r3, [r0, #16]
   2238c:	114a      	asrs	r2, r1, #5
   2238e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   22392:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22396:	dc04      	bgt.n	223a2 <rshift+0x18>
   22398:	2300      	movs	r3, #0
   2239a:	6103      	str	r3, [r0, #16]
   2239c:	2300      	movs	r3, #0
   2239e:	6143      	str	r3, [r0, #20]
   223a0:	e031      	b.n	22406 <rshift+0x7c>
   223a2:	f100 0414 	add.w	r4, r0, #20
   223a6:	f011 011f 	ands.w	r1, r1, #31
   223aa:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   223ae:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   223b2:	d10c      	bne.n	223ce <rshift+0x44>
   223b4:	f100 0710 	add.w	r7, r0, #16
   223b8:	4629      	mov	r1, r5
   223ba:	42b1      	cmp	r1, r6
   223bc:	d331      	bcc.n	22422 <rshift+0x98>
   223be:	1a9b      	subs	r3, r3, r2
   223c0:	1eea      	subs	r2, r5, #3
   223c2:	009b      	lsls	r3, r3, #2
   223c4:	4296      	cmp	r6, r2
   223c6:	bf38      	it	cc
   223c8:	2300      	movcc	r3, #0
   223ca:	4423      	add	r3, r4
   223cc:	e015      	b.n	223fa <rshift+0x70>
   223ce:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   223d2:	f1c1 0820 	rsb	r8, r1, #32
   223d6:	f105 0e04 	add.w	lr, r5, #4
   223da:	46a1      	mov	r9, r4
   223dc:	40cf      	lsrs	r7, r1
   223de:	4576      	cmp	r6, lr
   223e0:	46f4      	mov	ip, lr
   223e2:	d812      	bhi.n	2240a <rshift+0x80>
   223e4:	1a9a      	subs	r2, r3, r2
   223e6:	3501      	adds	r5, #1
   223e8:	0092      	lsls	r2, r2, #2
   223ea:	3a04      	subs	r2, #4
   223ec:	42ae      	cmp	r6, r5
   223ee:	bf38      	it	cc
   223f0:	2200      	movcc	r2, #0
   223f2:	18a3      	adds	r3, r4, r2
   223f4:	50a7      	str	r7, [r4, r2]
   223f6:	b107      	cbz	r7, 223fa <rshift+0x70>
   223f8:	3304      	adds	r3, #4
   223fa:	1b1a      	subs	r2, r3, r4
   223fc:	42a3      	cmp	r3, r4
   223fe:	ea4f 02a2 	mov.w	r2, r2, asr #2
   22402:	6102      	str	r2, [r0, #16]
   22404:	d0ca      	beq.n	2239c <rshift+0x12>
   22406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2240a:	f8dc c000 	ldr.w	ip, [ip]
   2240e:	fa0c fc08 	lsl.w	ip, ip, r8
   22412:	ea4c 0707 	orr.w	r7, ip, r7
   22416:	f849 7b04 	str.w	r7, [r9], #4
   2241a:	f85e 7b04 	ldr.w	r7, [lr], #4
   2241e:	40cf      	lsrs	r7, r1
   22420:	e7dd      	b.n	223de <rshift+0x54>
   22422:	f851 cb04 	ldr.w	ip, [r1], #4
   22426:	f847 cf04 	str.w	ip, [r7, #4]!
   2242a:	e7c6      	b.n	223ba <rshift+0x30>

0002242c <__hexdig_fun>:
   2242c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   22430:	2b09      	cmp	r3, #9
   22432:	d802      	bhi.n	2243a <__hexdig_fun+0xe>
   22434:	3820      	subs	r0, #32
   22436:	b2c0      	uxtb	r0, r0
   22438:	4770      	bx	lr
   2243a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2243e:	2b05      	cmp	r3, #5
   22440:	d801      	bhi.n	22446 <__hexdig_fun+0x1a>
   22442:	3847      	subs	r0, #71	; 0x47
   22444:	e7f7      	b.n	22436 <__hexdig_fun+0xa>
   22446:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2244a:	2b05      	cmp	r3, #5
   2244c:	d801      	bhi.n	22452 <__hexdig_fun+0x26>
   2244e:	3827      	subs	r0, #39	; 0x27
   22450:	e7f1      	b.n	22436 <__hexdig_fun+0xa>
   22452:	2000      	movs	r0, #0
   22454:	4770      	bx	lr

00022456 <L_shift>:
   22456:	f1c2 0208 	rsb	r2, r2, #8
   2245a:	0092      	lsls	r2, r2, #2
   2245c:	b570      	push	{r4, r5, r6, lr}
   2245e:	f1c2 0620 	rsb	r6, r2, #32
   22462:	6843      	ldr	r3, [r0, #4]
   22464:	6804      	ldr	r4, [r0, #0]
   22466:	fa03 f506 	lsl.w	r5, r3, r6
   2246a:	40d3      	lsrs	r3, r2
   2246c:	432c      	orrs	r4, r5
   2246e:	6004      	str	r4, [r0, #0]
   22470:	f840 3f04 	str.w	r3, [r0, #4]!
   22474:	4288      	cmp	r0, r1
   22476:	d3f4      	bcc.n	22462 <L_shift+0xc>
   22478:	bd70      	pop	{r4, r5, r6, pc}

0002247a <__match>:
   2247a:	6803      	ldr	r3, [r0, #0]
   2247c:	3301      	adds	r3, #1
   2247e:	b530      	push	{r4, r5, lr}
   22480:	f811 4b01 	ldrb.w	r4, [r1], #1
   22484:	b914      	cbnz	r4, 2248c <__match+0x12>
   22486:	6003      	str	r3, [r0, #0]
   22488:	2001      	movs	r0, #1
   2248a:	bd30      	pop	{r4, r5, pc}
   2248c:	f813 2b01 	ldrb.w	r2, [r3], #1
   22490:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   22494:	2d19      	cmp	r5, #25
   22496:	bf98      	it	ls
   22498:	3220      	addls	r2, #32
   2249a:	42a2      	cmp	r2, r4
   2249c:	d0f0      	beq.n	22480 <__match+0x6>
   2249e:	2000      	movs	r0, #0
   224a0:	e7f3      	b.n	2248a <__match+0x10>

000224a2 <__hexnan>:
   224a2:	680b      	ldr	r3, [r1, #0]
   224a4:	6801      	ldr	r1, [r0, #0]
   224a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224aa:	115e      	asrs	r6, r3, #5
   224ac:	f013 031f 	ands.w	r3, r3, #31
   224b0:	f04f 0500 	mov.w	r5, #0
   224b4:	b087      	sub	sp, #28
   224b6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   224ba:	4682      	mov	sl, r0
   224bc:	4690      	mov	r8, r2
   224be:	46ab      	mov	fp, r5
   224c0:	bf18      	it	ne
   224c2:	3604      	addne	r6, #4
   224c4:	9301      	str	r3, [sp, #4]
   224c6:	9502      	str	r5, [sp, #8]
   224c8:	1f37      	subs	r7, r6, #4
   224ca:	f846 5c04 	str.w	r5, [r6, #-4]
   224ce:	46b9      	mov	r9, r7
   224d0:	463c      	mov	r4, r7
   224d2:	1c4b      	adds	r3, r1, #1
   224d4:	784a      	ldrb	r2, [r1, #1]
   224d6:	9303      	str	r3, [sp, #12]
   224d8:	b342      	cbz	r2, 2252c <__hexnan+0x8a>
   224da:	4610      	mov	r0, r2
   224dc:	9105      	str	r1, [sp, #20]
   224de:	9204      	str	r2, [sp, #16]
   224e0:	f7ff ffa4 	bl	2242c <__hexdig_fun>
   224e4:	2800      	cmp	r0, #0
   224e6:	d151      	bne.n	2258c <__hexnan+0xea>
   224e8:	9a04      	ldr	r2, [sp, #16]
   224ea:	9905      	ldr	r1, [sp, #20]
   224ec:	2a20      	cmp	r2, #32
   224ee:	d818      	bhi.n	22522 <__hexnan+0x80>
   224f0:	9b02      	ldr	r3, [sp, #8]
   224f2:	459b      	cmp	fp, r3
   224f4:	dd13      	ble.n	2251e <__hexnan+0x7c>
   224f6:	454c      	cmp	r4, r9
   224f8:	d206      	bcs.n	22508 <__hexnan+0x66>
   224fa:	2d07      	cmp	r5, #7
   224fc:	dc04      	bgt.n	22508 <__hexnan+0x66>
   224fe:	462a      	mov	r2, r5
   22500:	4649      	mov	r1, r9
   22502:	4620      	mov	r0, r4
   22504:	f7ff ffa7 	bl	22456 <L_shift>
   22508:	4544      	cmp	r4, r8
   2250a:	d951      	bls.n	225b0 <__hexnan+0x10e>
   2250c:	2300      	movs	r3, #0
   2250e:	f1a4 0904 	sub.w	r9, r4, #4
   22512:	f8cd b008 	str.w	fp, [sp, #8]
   22516:	f844 3c04 	str.w	r3, [r4, #-4]
   2251a:	461d      	mov	r5, r3
   2251c:	464c      	mov	r4, r9
   2251e:	9903      	ldr	r1, [sp, #12]
   22520:	e7d7      	b.n	224d2 <__hexnan+0x30>
   22522:	2a29      	cmp	r2, #41	; 0x29
   22524:	d156      	bne.n	225d4 <__hexnan+0x132>
   22526:	3102      	adds	r1, #2
   22528:	f8ca 1000 	str.w	r1, [sl]
   2252c:	f1bb 0f00 	cmp.w	fp, #0
   22530:	d050      	beq.n	225d4 <__hexnan+0x132>
   22532:	454c      	cmp	r4, r9
   22534:	d206      	bcs.n	22544 <__hexnan+0xa2>
   22536:	2d07      	cmp	r5, #7
   22538:	dc04      	bgt.n	22544 <__hexnan+0xa2>
   2253a:	462a      	mov	r2, r5
   2253c:	4649      	mov	r1, r9
   2253e:	4620      	mov	r0, r4
   22540:	f7ff ff89 	bl	22456 <L_shift>
   22544:	4544      	cmp	r4, r8
   22546:	d935      	bls.n	225b4 <__hexnan+0x112>
   22548:	f1a8 0204 	sub.w	r2, r8, #4
   2254c:	4623      	mov	r3, r4
   2254e:	f853 1b04 	ldr.w	r1, [r3], #4
   22552:	429f      	cmp	r7, r3
   22554:	f842 1f04 	str.w	r1, [r2, #4]!
   22558:	d2f9      	bcs.n	2254e <__hexnan+0xac>
   2255a:	1b3b      	subs	r3, r7, r4
   2255c:	3e03      	subs	r6, #3
   2255e:	3401      	adds	r4, #1
   22560:	2200      	movs	r2, #0
   22562:	f023 0303 	bic.w	r3, r3, #3
   22566:	3304      	adds	r3, #4
   22568:	42b4      	cmp	r4, r6
   2256a:	bf88      	it	hi
   2256c:	2304      	movhi	r3, #4
   2256e:	4443      	add	r3, r8
   22570:	f843 2b04 	str.w	r2, [r3], #4
   22574:	429f      	cmp	r7, r3
   22576:	d2fb      	bcs.n	22570 <__hexnan+0xce>
   22578:	683b      	ldr	r3, [r7, #0]
   2257a:	b91b      	cbnz	r3, 22584 <__hexnan+0xe2>
   2257c:	4547      	cmp	r7, r8
   2257e:	d127      	bne.n	225d0 <__hexnan+0x12e>
   22580:	2301      	movs	r3, #1
   22582:	603b      	str	r3, [r7, #0]
   22584:	2005      	movs	r0, #5
   22586:	b007      	add	sp, #28
   22588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2258c:	3501      	adds	r5, #1
   2258e:	f10b 0b01 	add.w	fp, fp, #1
   22592:	2d08      	cmp	r5, #8
   22594:	dd05      	ble.n	225a2 <__hexnan+0x100>
   22596:	4544      	cmp	r4, r8
   22598:	d9c1      	bls.n	2251e <__hexnan+0x7c>
   2259a:	2300      	movs	r3, #0
   2259c:	3c04      	subs	r4, #4
   2259e:	2501      	movs	r5, #1
   225a0:	6023      	str	r3, [r4, #0]
   225a2:	6822      	ldr	r2, [r4, #0]
   225a4:	f000 000f 	and.w	r0, r0, #15
   225a8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
   225ac:	6020      	str	r0, [r4, #0]
   225ae:	e7b6      	b.n	2251e <__hexnan+0x7c>
   225b0:	2508      	movs	r5, #8
   225b2:	e7b4      	b.n	2251e <__hexnan+0x7c>
   225b4:	9b01      	ldr	r3, [sp, #4]
   225b6:	2b00      	cmp	r3, #0
   225b8:	d0de      	beq.n	22578 <__hexnan+0xd6>
   225ba:	f1c3 0320 	rsb	r3, r3, #32
   225be:	f04f 32ff 	mov.w	r2, #4294967295
   225c2:	40da      	lsrs	r2, r3
   225c4:	f856 3c04 	ldr.w	r3, [r6, #-4]
   225c8:	4013      	ands	r3, r2
   225ca:	f846 3c04 	str.w	r3, [r6, #-4]
   225ce:	e7d3      	b.n	22578 <__hexnan+0xd6>
   225d0:	3f04      	subs	r7, #4
   225d2:	e7d1      	b.n	22578 <__hexnan+0xd6>
   225d4:	2004      	movs	r0, #4
   225d6:	e7d6      	b.n	22586 <__hexnan+0xe4>

000225d8 <__swhatbuf_r>:
   225d8:	b570      	push	{r4, r5, r6, lr}
   225da:	460c      	mov	r4, r1
   225dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   225e0:	b096      	sub	sp, #88	; 0x58
   225e2:	4615      	mov	r5, r2
   225e4:	2900      	cmp	r1, #0
   225e6:	461e      	mov	r6, r3
   225e8:	da0c      	bge.n	22604 <__swhatbuf_r+0x2c>
   225ea:	89a3      	ldrh	r3, [r4, #12]
   225ec:	2100      	movs	r1, #0
   225ee:	f013 0f80 	tst.w	r3, #128	; 0x80
   225f2:	bf14      	ite	ne
   225f4:	2340      	movne	r3, #64	; 0x40
   225f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   225fa:	2000      	movs	r0, #0
   225fc:	6031      	str	r1, [r6, #0]
   225fe:	602b      	str	r3, [r5, #0]
   22600:	b016      	add	sp, #88	; 0x58
   22602:	bd70      	pop	{r4, r5, r6, pc}
   22604:	466a      	mov	r2, sp
   22606:	f7fb fc67 	bl	1ded8 <_fstat_r>
   2260a:	2800      	cmp	r0, #0
   2260c:	dbed      	blt.n	225ea <__swhatbuf_r+0x12>
   2260e:	9901      	ldr	r1, [sp, #4]
   22610:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   22614:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   22618:	4259      	negs	r1, r3
   2261a:	4159      	adcs	r1, r3
   2261c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   22620:	e7eb      	b.n	225fa <__swhatbuf_r+0x22>

00022622 <__ascii_mbtowc>:
   22622:	b082      	sub	sp, #8
   22624:	b901      	cbnz	r1, 22628 <__ascii_mbtowc+0x6>
   22626:	a901      	add	r1, sp, #4
   22628:	b142      	cbz	r2, 2263c <__ascii_mbtowc+0x1a>
   2262a:	b14b      	cbz	r3, 22640 <__ascii_mbtowc+0x1e>
   2262c:	7813      	ldrb	r3, [r2, #0]
   2262e:	600b      	str	r3, [r1, #0]
   22630:	7812      	ldrb	r2, [r2, #0]
   22632:	1e10      	subs	r0, r2, #0
   22634:	bf18      	it	ne
   22636:	2001      	movne	r0, #1
   22638:	b002      	add	sp, #8
   2263a:	4770      	bx	lr
   2263c:	4610      	mov	r0, r2
   2263e:	e7fb      	b.n	22638 <__ascii_mbtowc+0x16>
   22640:	f06f 0001 	mvn.w	r0, #1
   22644:	e7f8      	b.n	22638 <__ascii_mbtowc+0x16>

00022646 <__hi0bits>:
   22646:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   2264a:	4603      	mov	r3, r0
   2264c:	bf36      	itet	cc
   2264e:	0403      	lslcc	r3, r0, #16
   22650:	2000      	movcs	r0, #0
   22652:	2010      	movcc	r0, #16
   22654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   22658:	bf3c      	itt	cc
   2265a:	021b      	lslcc	r3, r3, #8
   2265c:	3008      	addcc	r0, #8
   2265e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   22662:	bf3c      	itt	cc
   22664:	011b      	lslcc	r3, r3, #4
   22666:	3004      	addcc	r0, #4
   22668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   2266c:	d303      	bcc.n	22676 <__hi0bits+0x30>
   2266e:	2b00      	cmp	r3, #0
   22670:	db0a      	blt.n	22688 <__hi0bits+0x42>
   22672:	3001      	adds	r0, #1
   22674:	4770      	bx	lr
   22676:	009b      	lsls	r3, r3, #2
   22678:	d501      	bpl.n	2267e <__hi0bits+0x38>
   2267a:	3002      	adds	r0, #2
   2267c:	4770      	bx	lr
   2267e:	005b      	lsls	r3, r3, #1
   22680:	d501      	bpl.n	22686 <__hi0bits+0x40>
   22682:	3003      	adds	r0, #3
   22684:	4770      	bx	lr
   22686:	2020      	movs	r0, #32
   22688:	4770      	bx	lr

0002268a <__lo0bits>:
   2268a:	6803      	ldr	r3, [r0, #0]
   2268c:	4602      	mov	r2, r0
   2268e:	f013 0007 	ands.w	r0, r3, #7
   22692:	d00b      	beq.n	226ac <__lo0bits+0x22>
   22694:	07d9      	lsls	r1, r3, #31
   22696:	d421      	bmi.n	226dc <__lo0bits+0x52>
   22698:	0798      	lsls	r0, r3, #30
   2269a:	bf47      	ittee	mi
   2269c:	085b      	lsrmi	r3, r3, #1
   2269e:	2001      	movmi	r0, #1
   226a0:	089b      	lsrpl	r3, r3, #2
   226a2:	2002      	movpl	r0, #2
   226a4:	bf4c      	ite	mi
   226a6:	6013      	strmi	r3, [r2, #0]
   226a8:	6013      	strpl	r3, [r2, #0]
   226aa:	4770      	bx	lr
   226ac:	b299      	uxth	r1, r3
   226ae:	b909      	cbnz	r1, 226b4 <__lo0bits+0x2a>
   226b0:	0c1b      	lsrs	r3, r3, #16
   226b2:	2010      	movs	r0, #16
   226b4:	b2d9      	uxtb	r1, r3
   226b6:	b909      	cbnz	r1, 226bc <__lo0bits+0x32>
   226b8:	3008      	adds	r0, #8
   226ba:	0a1b      	lsrs	r3, r3, #8
   226bc:	0719      	lsls	r1, r3, #28
   226be:	bf04      	itt	eq
   226c0:	091b      	lsreq	r3, r3, #4
   226c2:	3004      	addeq	r0, #4
   226c4:	0799      	lsls	r1, r3, #30
   226c6:	bf04      	itt	eq
   226c8:	089b      	lsreq	r3, r3, #2
   226ca:	3002      	addeq	r0, #2
   226cc:	07d9      	lsls	r1, r3, #31
   226ce:	d403      	bmi.n	226d8 <__lo0bits+0x4e>
   226d0:	085b      	lsrs	r3, r3, #1
   226d2:	f100 0001 	add.w	r0, r0, #1
   226d6:	d003      	beq.n	226e0 <__lo0bits+0x56>
   226d8:	6013      	str	r3, [r2, #0]
   226da:	4770      	bx	lr
   226dc:	2000      	movs	r0, #0
   226de:	4770      	bx	lr
   226e0:	2020      	movs	r0, #32
   226e2:	4770      	bx	lr

000226e4 <__mcmp>:
   226e4:	4603      	mov	r3, r0
   226e6:	690a      	ldr	r2, [r1, #16]
   226e8:	6900      	ldr	r0, [r0, #16]
   226ea:	1a80      	subs	r0, r0, r2
   226ec:	b530      	push	{r4, r5, lr}
   226ee:	d10e      	bne.n	2270e <__mcmp+0x2a>
   226f0:	3314      	adds	r3, #20
   226f2:	3114      	adds	r1, #20
   226f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   226f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   226fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   22700:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   22704:	4295      	cmp	r5, r2
   22706:	d003      	beq.n	22710 <__mcmp+0x2c>
   22708:	d205      	bcs.n	22716 <__mcmp+0x32>
   2270a:	f04f 30ff 	mov.w	r0, #4294967295
   2270e:	bd30      	pop	{r4, r5, pc}
   22710:	42a3      	cmp	r3, r4
   22712:	d3f3      	bcc.n	226fc <__mcmp+0x18>
   22714:	e7fb      	b.n	2270e <__mcmp+0x2a>
   22716:	2001      	movs	r0, #1
   22718:	e7f9      	b.n	2270e <__mcmp+0x2a>

0002271a <__ratio>:
   2271a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2271e:	b085      	sub	sp, #20
   22720:	e9cd 1000 	strd	r1, r0, [sp]
   22724:	a902      	add	r1, sp, #8
   22726:	f7fa fdf7 	bl	1d318 <__b2d>
   2272a:	a903      	add	r1, sp, #12
   2272c:	9800      	ldr	r0, [sp, #0]
   2272e:	ec55 4b10 	vmov	r4, r5, d0
   22732:	f7fa fdf1 	bl	1d318 <__b2d>
   22736:	9b01      	ldr	r3, [sp, #4]
   22738:	462f      	mov	r7, r5
   2273a:	4620      	mov	r0, r4
   2273c:	6919      	ldr	r1, [r3, #16]
   2273e:	9b00      	ldr	r3, [sp, #0]
   22740:	691b      	ldr	r3, [r3, #16]
   22742:	1ac9      	subs	r1, r1, r3
   22744:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   22748:	ec5b ab10 	vmov	sl, fp, d0
   2274c:	1a9b      	subs	r3, r3, r2
   2274e:	46d9      	mov	r9, fp
   22750:	eb03 1341 	add.w	r3, r3, r1, lsl #5
   22754:	2b00      	cmp	r3, #0
   22756:	bfcd      	iteet	gt
   22758:	462a      	movgt	r2, r5
   2275a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   2275e:	465a      	movle	r2, fp
   22760:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   22764:	bfd8      	it	le
   22766:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
   2276a:	4652      	mov	r2, sl
   2276c:	4639      	mov	r1, r7
   2276e:	464b      	mov	r3, r9
   22770:	f7e5 ffd0 	bl	8714 <__aeabi_ddiv>
   22774:	ec41 0b10 	vmov	d0, r0, r1
   22778:	b005      	add	sp, #20
   2277a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002277e <__copybits>:
   2277e:	3901      	subs	r1, #1
   22780:	f102 0314 	add.w	r3, r2, #20
   22784:	1149      	asrs	r1, r1, #5
   22786:	b570      	push	{r4, r5, r6, lr}
   22788:	3101      	adds	r1, #1
   2278a:	6914      	ldr	r4, [r2, #16]
   2278c:	1f05      	subs	r5, r0, #4
   2278e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   22792:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   22796:	42a3      	cmp	r3, r4
   22798:	d30c      	bcc.n	227b4 <__copybits+0x36>
   2279a:	1aa3      	subs	r3, r4, r2
   2279c:	3211      	adds	r2, #17
   2279e:	3b11      	subs	r3, #17
   227a0:	f023 0303 	bic.w	r3, r3, #3
   227a4:	42a2      	cmp	r2, r4
   227a6:	bf88      	it	hi
   227a8:	2300      	movhi	r3, #0
   227aa:	4418      	add	r0, r3
   227ac:	2300      	movs	r3, #0
   227ae:	4288      	cmp	r0, r1
   227b0:	d305      	bcc.n	227be <__copybits+0x40>
   227b2:	bd70      	pop	{r4, r5, r6, pc}
   227b4:	f853 6b04 	ldr.w	r6, [r3], #4
   227b8:	f845 6f04 	str.w	r6, [r5, #4]!
   227bc:	e7eb      	b.n	22796 <__copybits+0x18>
   227be:	f840 3b04 	str.w	r3, [r0], #4
   227c2:	e7f4      	b.n	227ae <__copybits+0x30>

000227c4 <__any_on>:
   227c4:	f100 0214 	add.w	r2, r0, #20
   227c8:	114b      	asrs	r3, r1, #5
   227ca:	6900      	ldr	r0, [r0, #16]
   227cc:	4298      	cmp	r0, r3
   227ce:	b510      	push	{r4, lr}
   227d0:	db11      	blt.n	227f6 <__any_on+0x32>
   227d2:	dd0a      	ble.n	227ea <__any_on+0x26>
   227d4:	f011 011f 	ands.w	r1, r1, #31
   227d8:	d007      	beq.n	227ea <__any_on+0x26>
   227da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   227de:	fa24 f001 	lsr.w	r0, r4, r1
   227e2:	fa00 f101 	lsl.w	r1, r0, r1
   227e6:	428c      	cmp	r4, r1
   227e8:	d10b      	bne.n	22802 <__any_on+0x3e>
   227ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   227ee:	4293      	cmp	r3, r2
   227f0:	d803      	bhi.n	227fa <__any_on+0x36>
   227f2:	2000      	movs	r0, #0
   227f4:	bd10      	pop	{r4, pc}
   227f6:	4603      	mov	r3, r0
   227f8:	e7f7      	b.n	227ea <__any_on+0x26>
   227fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   227fe:	2900      	cmp	r1, #0
   22800:	d0f5      	beq.n	227ee <__any_on+0x2a>
   22802:	2001      	movs	r0, #1
   22804:	e7f6      	b.n	227f4 <__any_on+0x30>

00022806 <_calloc_r>:
   22806:	b538      	push	{r3, r4, r5, lr}
   22808:	fb02 f501 	mul.w	r5, r2, r1
   2280c:	4629      	mov	r1, r5
   2280e:	f7f8 ffb1 	bl	1b774 <_malloc_r>
   22812:	4604      	mov	r4, r0
   22814:	b118      	cbz	r0, 2281e <_calloc_r+0x18>
   22816:	462a      	mov	r2, r5
   22818:	2100      	movs	r1, #0
   2281a:	f7ff fa54 	bl	21cc6 <memset>
   2281e:	4620      	mov	r0, r4
   22820:	bd38      	pop	{r3, r4, r5, pc}

00022822 <_realloc_r>:
   22822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22824:	4607      	mov	r7, r0
   22826:	4615      	mov	r5, r2
   22828:	460c      	mov	r4, r1
   2282a:	b921      	cbnz	r1, 22836 <_realloc_r+0x14>
   2282c:	4611      	mov	r1, r2
   2282e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   22832:	f7f8 bf9f 	b.w	1b774 <_malloc_r>
   22836:	b922      	cbnz	r2, 22842 <_realloc_r+0x20>
   22838:	f7f8 ff52 	bl	1b6e0 <_free_r>
   2283c:	2400      	movs	r4, #0
   2283e:	4620      	mov	r0, r4
   22840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22842:	f000 f96c 	bl	22b1e <_malloc_usable_size_r>
   22846:	42a8      	cmp	r0, r5
   22848:	d2f9      	bcs.n	2283e <_realloc_r+0x1c>
   2284a:	4629      	mov	r1, r5
   2284c:	4638      	mov	r0, r7
   2284e:	f7f8 ff91 	bl	1b774 <_malloc_r>
   22852:	4606      	mov	r6, r0
   22854:	2800      	cmp	r0, #0
   22856:	d0f1      	beq.n	2283c <_realloc_r+0x1a>
   22858:	4621      	mov	r1, r4
   2285a:	462a      	mov	r2, r5
   2285c:	f7ff fa0c 	bl	21c78 <memcpy>
   22860:	4621      	mov	r1, r4
   22862:	4638      	mov	r0, r7
   22864:	4634      	mov	r4, r6
   22866:	f7f8 ff3b 	bl	1b6e0 <_free_r>
   2286a:	e7e8      	b.n	2283e <_realloc_r+0x1c>

0002286c <__ssputs_r>:
   2286c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22870:	461f      	mov	r7, r3
   22872:	688e      	ldr	r6, [r1, #8]
   22874:	4682      	mov	sl, r0
   22876:	460c      	mov	r4, r1
   22878:	42be      	cmp	r6, r7
   2287a:	4690      	mov	r8, r2
   2287c:	680b      	ldr	r3, [r1, #0]
   2287e:	d82d      	bhi.n	228dc <__ssputs_r+0x70>
   22880:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   22884:	f412 6f90 	tst.w	r2, #1152	; 0x480
   22888:	d026      	beq.n	228d8 <__ssputs_r+0x6c>
   2288a:	6965      	ldr	r5, [r4, #20]
   2288c:	6909      	ldr	r1, [r1, #16]
   2288e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   22892:	eba3 0901 	sub.w	r9, r3, r1
   22896:	1c7b      	adds	r3, r7, #1
   22898:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2289c:	444b      	add	r3, r9
   2289e:	106d      	asrs	r5, r5, #1
   228a0:	429d      	cmp	r5, r3
   228a2:	bf38      	it	cc
   228a4:	461d      	movcc	r5, r3
   228a6:	0553      	lsls	r3, r2, #21
   228a8:	d527      	bpl.n	228fa <__ssputs_r+0x8e>
   228aa:	4629      	mov	r1, r5
   228ac:	f7f8 ff62 	bl	1b774 <_malloc_r>
   228b0:	4606      	mov	r6, r0
   228b2:	b360      	cbz	r0, 2290e <__ssputs_r+0xa2>
   228b4:	464a      	mov	r2, r9
   228b6:	6921      	ldr	r1, [r4, #16]
   228b8:	f7ff f9de 	bl	21c78 <memcpy>
   228bc:	89a3      	ldrh	r3, [r4, #12]
   228be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   228c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   228c6:	81a3      	strh	r3, [r4, #12]
   228c8:	6126      	str	r6, [r4, #16]
   228ca:	444e      	add	r6, r9
   228cc:	6165      	str	r5, [r4, #20]
   228ce:	eba5 0509 	sub.w	r5, r5, r9
   228d2:	6026      	str	r6, [r4, #0]
   228d4:	463e      	mov	r6, r7
   228d6:	60a5      	str	r5, [r4, #8]
   228d8:	42be      	cmp	r6, r7
   228da:	d900      	bls.n	228de <__ssputs_r+0x72>
   228dc:	463e      	mov	r6, r7
   228de:	4632      	mov	r2, r6
   228e0:	4641      	mov	r1, r8
   228e2:	6820      	ldr	r0, [r4, #0]
   228e4:	f7ff f9d5 	bl	21c92 <memmove>
   228e8:	68a3      	ldr	r3, [r4, #8]
   228ea:	2000      	movs	r0, #0
   228ec:	1b9b      	subs	r3, r3, r6
   228ee:	60a3      	str	r3, [r4, #8]
   228f0:	6823      	ldr	r3, [r4, #0]
   228f2:	4433      	add	r3, r6
   228f4:	6023      	str	r3, [r4, #0]
   228f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   228fa:	462a      	mov	r2, r5
   228fc:	f7ff ff91 	bl	22822 <_realloc_r>
   22900:	4606      	mov	r6, r0
   22902:	2800      	cmp	r0, #0
   22904:	d1e0      	bne.n	228c8 <__ssputs_r+0x5c>
   22906:	6921      	ldr	r1, [r4, #16]
   22908:	4650      	mov	r0, sl
   2290a:	f7f8 fee9 	bl	1b6e0 <_free_r>
   2290e:	230c      	movs	r3, #12
   22910:	f04f 30ff 	mov.w	r0, #4294967295
   22914:	f8ca 3000 	str.w	r3, [sl]
   22918:	89a3      	ldrh	r3, [r4, #12]
   2291a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2291e:	81a3      	strh	r3, [r4, #12]
   22920:	e7e9      	b.n	228f6 <__ssputs_r+0x8a>

00022922 <_sungetc_r>:
   22922:	b538      	push	{r3, r4, r5, lr}
   22924:	1c4b      	adds	r3, r1, #1
   22926:	4614      	mov	r4, r2
   22928:	d103      	bne.n	22932 <_sungetc_r+0x10>
   2292a:	f04f 35ff 	mov.w	r5, #4294967295
   2292e:	4628      	mov	r0, r5
   22930:	bd38      	pop	{r3, r4, r5, pc}
   22932:	8993      	ldrh	r3, [r2, #12]
   22934:	b2cd      	uxtb	r5, r1
   22936:	f023 0320 	bic.w	r3, r3, #32
   2293a:	8193      	strh	r3, [r2, #12]
   2293c:	6853      	ldr	r3, [r2, #4]
   2293e:	6b52      	ldr	r2, [r2, #52]	; 0x34
   22940:	b18a      	cbz	r2, 22966 <_sungetc_r+0x44>
   22942:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   22944:	429a      	cmp	r2, r3
   22946:	dd08      	ble.n	2295a <_sungetc_r+0x38>
   22948:	6823      	ldr	r3, [r4, #0]
   2294a:	1e5a      	subs	r2, r3, #1
   2294c:	6022      	str	r2, [r4, #0]
   2294e:	f803 5c01 	strb.w	r5, [r3, #-1]
   22952:	6863      	ldr	r3, [r4, #4]
   22954:	3301      	adds	r3, #1
   22956:	6063      	str	r3, [r4, #4]
   22958:	e7e9      	b.n	2292e <_sungetc_r+0xc>
   2295a:	4621      	mov	r1, r4
   2295c:	f000 f89b 	bl	22a96 <__submore>
   22960:	2800      	cmp	r0, #0
   22962:	d0f1      	beq.n	22948 <_sungetc_r+0x26>
   22964:	e7e1      	b.n	2292a <_sungetc_r+0x8>
   22966:	6921      	ldr	r1, [r4, #16]
   22968:	6822      	ldr	r2, [r4, #0]
   2296a:	b141      	cbz	r1, 2297e <_sungetc_r+0x5c>
   2296c:	4291      	cmp	r1, r2
   2296e:	d206      	bcs.n	2297e <_sungetc_r+0x5c>
   22970:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   22974:	42a9      	cmp	r1, r5
   22976:	d102      	bne.n	2297e <_sungetc_r+0x5c>
   22978:	3a01      	subs	r2, #1
   2297a:	6022      	str	r2, [r4, #0]
   2297c:	e7ea      	b.n	22954 <_sungetc_r+0x32>
   2297e:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
   22982:	f104 0344 	add.w	r3, r4, #68	; 0x44
   22986:	6363      	str	r3, [r4, #52]	; 0x34
   22988:	2303      	movs	r3, #3
   2298a:	63a3      	str	r3, [r4, #56]	; 0x38
   2298c:	4623      	mov	r3, r4
   2298e:	f803 5f46 	strb.w	r5, [r3, #70]!
   22992:	6023      	str	r3, [r4, #0]
   22994:	2301      	movs	r3, #1
   22996:	e7de      	b.n	22956 <_sungetc_r+0x34>

00022998 <__ssrefill_r>:
   22998:	b510      	push	{r4, lr}
   2299a:	460c      	mov	r4, r1
   2299c:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2299e:	b169      	cbz	r1, 229bc <__ssrefill_r+0x24>
   229a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   229a4:	4299      	cmp	r1, r3
   229a6:	d001      	beq.n	229ac <__ssrefill_r+0x14>
   229a8:	f7f8 fe9a 	bl	1b6e0 <_free_r>
   229ac:	2000      	movs	r0, #0
   229ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
   229b0:	6360      	str	r0, [r4, #52]	; 0x34
   229b2:	6063      	str	r3, [r4, #4]
   229b4:	b113      	cbz	r3, 229bc <__ssrefill_r+0x24>
   229b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   229b8:	6023      	str	r3, [r4, #0]
   229ba:	bd10      	pop	{r4, pc}
   229bc:	6923      	ldr	r3, [r4, #16]
   229be:	f04f 30ff 	mov.w	r0, #4294967295
   229c2:	6023      	str	r3, [r4, #0]
   229c4:	2300      	movs	r3, #0
   229c6:	6063      	str	r3, [r4, #4]
   229c8:	89a3      	ldrh	r3, [r4, #12]
   229ca:	f043 0320 	orr.w	r3, r3, #32
   229ce:	81a3      	strh	r3, [r4, #12]
   229d0:	e7f3      	b.n	229ba <__ssrefill_r+0x22>

000229d2 <__sfputc_r>:
   229d2:	6893      	ldr	r3, [r2, #8]
   229d4:	3b01      	subs	r3, #1
   229d6:	2b00      	cmp	r3, #0
   229d8:	6093      	str	r3, [r2, #8]
   229da:	b410      	push	{r4}
   229dc:	da08      	bge.n	229f0 <__sfputc_r+0x1e>
   229de:	6994      	ldr	r4, [r2, #24]
   229e0:	42a3      	cmp	r3, r4
   229e2:	db01      	blt.n	229e8 <__sfputc_r+0x16>
   229e4:	290a      	cmp	r1, #10
   229e6:	d103      	bne.n	229f0 <__sfputc_r+0x1e>
   229e8:	f85d 4b04 	ldr.w	r4, [sp], #4
   229ec:	f7f9 bcee 	b.w	1c3cc <__swbuf_r>
   229f0:	6813      	ldr	r3, [r2, #0]
   229f2:	1c58      	adds	r0, r3, #1
   229f4:	6010      	str	r0, [r2, #0]
   229f6:	4608      	mov	r0, r1
   229f8:	7019      	strb	r1, [r3, #0]
   229fa:	f85d 4b04 	ldr.w	r4, [sp], #4
   229fe:	4770      	bx	lr

00022a00 <__sfputs_r>:
   22a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22a02:	4606      	mov	r6, r0
   22a04:	460f      	mov	r7, r1
   22a06:	4614      	mov	r4, r2
   22a08:	18d5      	adds	r5, r2, r3
   22a0a:	42ac      	cmp	r4, r5
   22a0c:	d101      	bne.n	22a12 <__sfputs_r+0x12>
   22a0e:	2000      	movs	r0, #0
   22a10:	e007      	b.n	22a22 <__sfputs_r+0x22>
   22a12:	463a      	mov	r2, r7
   22a14:	f814 1b01 	ldrb.w	r1, [r4], #1
   22a18:	4630      	mov	r0, r6
   22a1a:	f7ff ffda 	bl	229d2 <__sfputc_r>
   22a1e:	1c43      	adds	r3, r0, #1
   22a20:	d1f3      	bne.n	22a0a <__sfputs_r+0xa>
   22a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022a24 <__sccl>:
   22a24:	b570      	push	{r4, r5, r6, lr}
   22a26:	780b      	ldrb	r3, [r1, #0]
   22a28:	4604      	mov	r4, r0
   22a2a:	3801      	subs	r0, #1
   22a2c:	2b5e      	cmp	r3, #94	; 0x5e
   22a2e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   22a32:	bf13      	iteet	ne
   22a34:	1c4a      	addne	r2, r1, #1
   22a36:	1c8a      	addeq	r2, r1, #2
   22a38:	784b      	ldrbeq	r3, [r1, #1]
   22a3a:	2100      	movne	r1, #0
   22a3c:	bf08      	it	eq
   22a3e:	2101      	moveq	r1, #1
   22a40:	f800 1f01 	strb.w	r1, [r0, #1]!
   22a44:	42a8      	cmp	r0, r5
   22a46:	d1fb      	bne.n	22a40 <__sccl+0x1c>
   22a48:	b90b      	cbnz	r3, 22a4e <__sccl+0x2a>
   22a4a:	1e50      	subs	r0, r2, #1
   22a4c:	bd70      	pop	{r4, r5, r6, pc}
   22a4e:	f081 0101 	eor.w	r1, r1, #1
   22a52:	4610      	mov	r0, r2
   22a54:	54e1      	strb	r1, [r4, r3]
   22a56:	4602      	mov	r2, r0
   22a58:	f812 5b01 	ldrb.w	r5, [r2], #1
   22a5c:	2d2d      	cmp	r5, #45	; 0x2d
   22a5e:	d005      	beq.n	22a6c <__sccl+0x48>
   22a60:	2d5d      	cmp	r5, #93	; 0x5d
   22a62:	d016      	beq.n	22a92 <__sccl+0x6e>
   22a64:	2d00      	cmp	r5, #0
   22a66:	d0f1      	beq.n	22a4c <__sccl+0x28>
   22a68:	462b      	mov	r3, r5
   22a6a:	e7f2      	b.n	22a52 <__sccl+0x2e>
   22a6c:	7846      	ldrb	r6, [r0, #1]
   22a6e:	2e5d      	cmp	r6, #93	; 0x5d
   22a70:	d0fa      	beq.n	22a68 <__sccl+0x44>
   22a72:	42b3      	cmp	r3, r6
   22a74:	dcf8      	bgt.n	22a68 <__sccl+0x44>
   22a76:	3002      	adds	r0, #2
   22a78:	461a      	mov	r2, r3
   22a7a:	3201      	adds	r2, #1
   22a7c:	4296      	cmp	r6, r2
   22a7e:	54a1      	strb	r1, [r4, r2]
   22a80:	dcfb      	bgt.n	22a7a <__sccl+0x56>
   22a82:	1af2      	subs	r2, r6, r3
   22a84:	1c5d      	adds	r5, r3, #1
   22a86:	3a01      	subs	r2, #1
   22a88:	42b3      	cmp	r3, r6
   22a8a:	bfa8      	it	ge
   22a8c:	2200      	movge	r2, #0
   22a8e:	18ab      	adds	r3, r5, r2
   22a90:	e7e1      	b.n	22a56 <__sccl+0x32>
   22a92:	4610      	mov	r0, r2
   22a94:	e7da      	b.n	22a4c <__sccl+0x28>

00022a96 <__submore>:
   22a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22a9a:	460c      	mov	r4, r1
   22a9c:	6b49      	ldr	r1, [r1, #52]	; 0x34
   22a9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   22aa2:	4299      	cmp	r1, r3
   22aa4:	d11a      	bne.n	22adc <__submore+0x46>
   22aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   22aaa:	f7f8 fe63 	bl	1b774 <_malloc_r>
   22aae:	b918      	cbnz	r0, 22ab8 <__submore+0x22>
   22ab0:	f04f 30ff 	mov.w	r0, #4294967295
   22ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   22abc:	6360      	str	r0, [r4, #52]	; 0x34
   22abe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   22ac2:	63a3      	str	r3, [r4, #56]	; 0x38
   22ac4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   22ac8:	7083      	strb	r3, [r0, #2]
   22aca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   22ace:	7043      	strb	r3, [r0, #1]
   22ad0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   22ad4:	7003      	strb	r3, [r0, #0]
   22ad6:	6020      	str	r0, [r4, #0]
   22ad8:	2000      	movs	r0, #0
   22ada:	e7eb      	b.n	22ab4 <__submore+0x1e>
   22adc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   22ade:	0077      	lsls	r7, r6, #1
   22ae0:	463a      	mov	r2, r7
   22ae2:	f7ff fe9e 	bl	22822 <_realloc_r>
   22ae6:	4605      	mov	r5, r0
   22ae8:	2800      	cmp	r0, #0
   22aea:	d0e1      	beq.n	22ab0 <__submore+0x1a>
   22aec:	eb00 0806 	add.w	r8, r0, r6
   22af0:	4601      	mov	r1, r0
   22af2:	4632      	mov	r2, r6
   22af4:	4640      	mov	r0, r8
   22af6:	f7ff f8bf 	bl	21c78 <memcpy>
   22afa:	f8c4 8000 	str.w	r8, [r4]
   22afe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   22b02:	e7e9      	b.n	22ad8 <__submore+0x42>

00022b04 <__ascii_wctomb>:
   22b04:	4603      	mov	r3, r0
   22b06:	4608      	mov	r0, r1
   22b08:	b141      	cbz	r1, 22b1c <__ascii_wctomb+0x18>
   22b0a:	2aff      	cmp	r2, #255	; 0xff
   22b0c:	d904      	bls.n	22b18 <__ascii_wctomb+0x14>
   22b0e:	228a      	movs	r2, #138	; 0x8a
   22b10:	f04f 30ff 	mov.w	r0, #4294967295
   22b14:	601a      	str	r2, [r3, #0]
   22b16:	4770      	bx	lr
   22b18:	2001      	movs	r0, #1
   22b1a:	700a      	strb	r2, [r1, #0]
   22b1c:	4770      	bx	lr

00022b1e <_malloc_usable_size_r>:
   22b1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
   22b22:	1f18      	subs	r0, r3, #4
   22b24:	2b00      	cmp	r3, #0
   22b26:	bfbc      	itt	lt
   22b28:	580b      	ldrlt	r3, [r1, r0]
   22b2a:	18c0      	addlt	r0, r0, r3
   22b2c:	4770      	bx	lr

00022b2e <abort>:
   22b2e:	2006      	movs	r0, #6
   22b30:	b508      	push	{r3, lr}
   22b32:	f7fb f9f3 	bl	1df1c <raise>
   22b36:	2001      	movs	r0, #1
   22b38:	f7eb fde6 	bl	e708 <_exit>

00022b3c <_raise_r>:
   22b3c:	291f      	cmp	r1, #31
   22b3e:	b538      	push	{r3, r4, r5, lr}
   22b40:	4605      	mov	r5, r0
   22b42:	460c      	mov	r4, r1
   22b44:	d904      	bls.n	22b50 <_raise_r+0x14>
   22b46:	2316      	movs	r3, #22
   22b48:	6003      	str	r3, [r0, #0]
   22b4a:	f04f 30ff 	mov.w	r0, #4294967295
   22b4e:	bd38      	pop	{r3, r4, r5, pc}
   22b50:	6c42      	ldr	r2, [r0, #68]	; 0x44
   22b52:	b112      	cbz	r2, 22b5a <_raise_r+0x1e>
   22b54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   22b58:	b94b      	cbnz	r3, 22b6e <_raise_r+0x32>
   22b5a:	4628      	mov	r0, r5
   22b5c:	f000 f816 	bl	22b8c <_getpid_r>
   22b60:	4622      	mov	r2, r4
   22b62:	4601      	mov	r1, r0
   22b64:	4628      	mov	r0, r5
   22b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22b6a:	f7fb b9df 	b.w	1df2c <_kill_r>
   22b6e:	2b01      	cmp	r3, #1
   22b70:	d00a      	beq.n	22b88 <_raise_r+0x4c>
   22b72:	1c59      	adds	r1, r3, #1
   22b74:	d103      	bne.n	22b7e <_raise_r+0x42>
   22b76:	2316      	movs	r3, #22
   22b78:	6003      	str	r3, [r0, #0]
   22b7a:	2001      	movs	r0, #1
   22b7c:	e7e7      	b.n	22b4e <_raise_r+0x12>
   22b7e:	2100      	movs	r1, #0
   22b80:	4620      	mov	r0, r4
   22b82:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   22b86:	4798      	blx	r3
   22b88:	2000      	movs	r0, #0
   22b8a:	e7e0      	b.n	22b4e <_raise_r+0x12>

00022b8c <_getpid_r>:
   22b8c:	f7fc b86f 	b.w	1ec6e <_getpid>
