
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	18 e1 00 20 d1 98 00 00 d5 f6 00 00 a5 98 00 00     ... ............
    8010:	a5 98 00 00 a5 98 00 00 a5 98 00 00 a5 98 00 00     ................
	...
    802c:	3d 95 00 00 a5 98 00 00 00 00 00 00 dd 94 00 00     =...............
    803c:	a5 98 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	c1 95 00 00 c1 95 00 00 c1 95 00 00 c1 95 00 00     ................
    8050:	c1 95 00 00 c1 95 00 00 c1 95 00 00 c1 95 00 00     ................
    8060:	c1 95 00 00 c1 95 00 00 c1 95 00 00 c1 95 00 00     ................
    8070:	c1 95 00 00 c1 95 00 00 c1 95 00 00 c1 95 00 00     ................
    8080:	c1 95 00 00 c1 95 00 00 c1 95 00 00 c1 95 00 00     ................
    8090:	c1 95 00 00 c1 95 00 00 c1 95 00 00 c1 95 00 00     ................
    80a0:	c1 95 00 00 c1 95 00 00 c1 95 00 00 c1 95 00 00     ................
    80b0:	c1 95 00 00 c1 95 00 00 c1 95 00 00 c1 95 00 00     ................
    80c0:	c1 95 00 00 c1 95 00 00 c1 95 00 00 c1 95 00 00     ................
    80d0:	c1 95 00 00 c1 95 00 00 c1 95 00 00 c1 95 00 00     ................
    80e0:	c1 95 00 00 c1 95 00 00 c1 95 00 00 c1 95 00 00     ................
    80f0:	c1 95 00 00 c1 95 00 00 c1 95 00 00 c1 95 00 00     ................
    8100:	c1 95 00 00 c1 95 00 00 c1 95 00 00 c1 95 00 00     ................
    8110:	c1 95 00 00 c1 95 00 00 c1 95 00 00 c1 95 00 00     ................
    8120:	c1 95 00 00 c1 95 00 00 c1 95 00 00 c1 95 00 00     ................
    8130:	c1 95 00 00 c1 95 00 00 c1 95 00 00 c1 95 00 00     ................
    8140:	c1 95 00 00                                         ....

Disassembly of section text:

00008144 <__aeabi_uldivmod>:
    8144:	b953      	cbnz	r3, 815c <__aeabi_uldivmod+0x18>
    8146:	b94a      	cbnz	r2, 815c <__aeabi_uldivmod+0x18>
    8148:	2900      	cmp	r1, #0
    814a:	bf08      	it	eq
    814c:	2800      	cmpeq	r0, #0
    814e:	bf1c      	itt	ne
    8150:	f04f 31ff 	movne.w	r1, #4294967295
    8154:	f04f 30ff 	movne.w	r0, #4294967295
    8158:	f000 b80c 	b.w	8174 <__aeabi_idiv0>
    815c:	f1ad 0c08 	sub.w	ip, sp, #8
    8160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8164:	f000 f808 	bl	8178 <__udivmoddi4>
    8168:	f8dd e004 	ldr.w	lr, [sp, #4]
    816c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8170:	b004      	add	sp, #16
    8172:	4770      	bx	lr

00008174 <__aeabi_idiv0>:
    8174:	4770      	bx	lr
    8176:	bf00      	nop

00008178 <__udivmoddi4>:
    8178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    817c:	4686      	mov	lr, r0
    817e:	468c      	mov	ip, r1
    8180:	4608      	mov	r0, r1
    8182:	9e08      	ldr	r6, [sp, #32]
    8184:	4615      	mov	r5, r2
    8186:	4674      	mov	r4, lr
    8188:	4619      	mov	r1, r3
    818a:	2b00      	cmp	r3, #0
    818c:	f040 80c1 	bne.w	8312 <__udivmoddi4+0x19a>
    8190:	4285      	cmp	r5, r0
    8192:	fab2 f282 	clz	r2, r2
    8196:	d945      	bls.n	8224 <__udivmoddi4+0xac>
    8198:	b14a      	cbz	r2, 81ae <__udivmoddi4+0x36>
    819a:	f1c2 0320 	rsb	r3, r2, #32
    819e:	fa00 fc02 	lsl.w	ip, r0, r2
    81a2:	4095      	lsls	r5, r2
    81a4:	4094      	lsls	r4, r2
    81a6:	fa2e f303 	lsr.w	r3, lr, r3
    81aa:	ea43 0c0c 	orr.w	ip, r3, ip
    81ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    81b2:	b2a8      	uxth	r0, r5
    81b4:	0c23      	lsrs	r3, r4, #16
    81b6:	fbbc f8fe 	udiv	r8, ip, lr
    81ba:	fb0e cc18 	mls	ip, lr, r8, ip
    81be:	fb08 f900 	mul.w	r9, r8, r0
    81c2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    81c6:	4599      	cmp	r9, r3
    81c8:	d928      	bls.n	821c <__udivmoddi4+0xa4>
    81ca:	18eb      	adds	r3, r5, r3
    81cc:	f108 37ff 	add.w	r7, r8, #4294967295
    81d0:	d204      	bcs.n	81dc <__udivmoddi4+0x64>
    81d2:	4599      	cmp	r9, r3
    81d4:	d902      	bls.n	81dc <__udivmoddi4+0x64>
    81d6:	f1a8 0702 	sub.w	r7, r8, #2
    81da:	442b      	add	r3, r5
    81dc:	eba3 0309 	sub.w	r3, r3, r9
    81e0:	b2a4      	uxth	r4, r4
    81e2:	fbb3 fcfe 	udiv	ip, r3, lr
    81e6:	fb0e 331c 	mls	r3, lr, ip, r3
    81ea:	fb0c f000 	mul.w	r0, ip, r0
    81ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    81f2:	42a0      	cmp	r0, r4
    81f4:	d914      	bls.n	8220 <__udivmoddi4+0xa8>
    81f6:	192c      	adds	r4, r5, r4
    81f8:	f10c 33ff 	add.w	r3, ip, #4294967295
    81fc:	d204      	bcs.n	8208 <__udivmoddi4+0x90>
    81fe:	42a0      	cmp	r0, r4
    8200:	d902      	bls.n	8208 <__udivmoddi4+0x90>
    8202:	f1ac 0302 	sub.w	r3, ip, #2
    8206:	442c      	add	r4, r5
    8208:	1a24      	subs	r4, r4, r0
    820a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    820e:	b11e      	cbz	r6, 8218 <__udivmoddi4+0xa0>
    8210:	40d4      	lsrs	r4, r2
    8212:	2300      	movs	r3, #0
    8214:	6034      	str	r4, [r6, #0]
    8216:	6073      	str	r3, [r6, #4]
    8218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    821c:	4647      	mov	r7, r8
    821e:	e7dd      	b.n	81dc <__udivmoddi4+0x64>
    8220:	4663      	mov	r3, ip
    8222:	e7f1      	b.n	8208 <__udivmoddi4+0x90>
    8224:	bb92      	cbnz	r2, 828c <__udivmoddi4+0x114>
    8226:	1b43      	subs	r3, r0, r5
    8228:	2101      	movs	r1, #1
    822a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    822e:	b2af      	uxth	r7, r5
    8230:	0c20      	lsrs	r0, r4, #16
    8232:	fbb3 fcfe 	udiv	ip, r3, lr
    8236:	fb0e 331c 	mls	r3, lr, ip, r3
    823a:	fb0c f807 	mul.w	r8, ip, r7
    823e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8242:	4598      	cmp	r8, r3
    8244:	d961      	bls.n	830a <__udivmoddi4+0x192>
    8246:	18eb      	adds	r3, r5, r3
    8248:	f10c 30ff 	add.w	r0, ip, #4294967295
    824c:	d204      	bcs.n	8258 <__udivmoddi4+0xe0>
    824e:	4598      	cmp	r8, r3
    8250:	d902      	bls.n	8258 <__udivmoddi4+0xe0>
    8252:	f1ac 0002 	sub.w	r0, ip, #2
    8256:	442b      	add	r3, r5
    8258:	eba3 0308 	sub.w	r3, r3, r8
    825c:	b2a4      	uxth	r4, r4
    825e:	fbb3 fcfe 	udiv	ip, r3, lr
    8262:	fb0e 331c 	mls	r3, lr, ip, r3
    8266:	fb0c f707 	mul.w	r7, ip, r7
    826a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    826e:	42a7      	cmp	r7, r4
    8270:	d94d      	bls.n	830e <__udivmoddi4+0x196>
    8272:	192c      	adds	r4, r5, r4
    8274:	f10c 33ff 	add.w	r3, ip, #4294967295
    8278:	d204      	bcs.n	8284 <__udivmoddi4+0x10c>
    827a:	42a7      	cmp	r7, r4
    827c:	d902      	bls.n	8284 <__udivmoddi4+0x10c>
    827e:	f1ac 0302 	sub.w	r3, ip, #2
    8282:	442c      	add	r4, r5
    8284:	1be4      	subs	r4, r4, r7
    8286:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    828a:	e7c0      	b.n	820e <__udivmoddi4+0x96>
    828c:	f1c2 0320 	rsb	r3, r2, #32
    8290:	4095      	lsls	r5, r2
    8292:	4094      	lsls	r4, r2
    8294:	fa20 f103 	lsr.w	r1, r0, r3
    8298:	fa2e f303 	lsr.w	r3, lr, r3
    829c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    82a0:	4090      	lsls	r0, r2
    82a2:	b2af      	uxth	r7, r5
    82a4:	4303      	orrs	r3, r0
    82a6:	fbb1 fcfe 	udiv	ip, r1, lr
    82aa:	fb0e 101c 	mls	r0, lr, ip, r1
    82ae:	0c19      	lsrs	r1, r3, #16
    82b0:	fb0c f807 	mul.w	r8, ip, r7
    82b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    82b8:	4588      	cmp	r8, r1
    82ba:	d922      	bls.n	8302 <__udivmoddi4+0x18a>
    82bc:	1869      	adds	r1, r5, r1
    82be:	f10c 30ff 	add.w	r0, ip, #4294967295
    82c2:	d204      	bcs.n	82ce <__udivmoddi4+0x156>
    82c4:	4588      	cmp	r8, r1
    82c6:	d902      	bls.n	82ce <__udivmoddi4+0x156>
    82c8:	f1ac 0002 	sub.w	r0, ip, #2
    82cc:	4429      	add	r1, r5
    82ce:	eba1 0108 	sub.w	r1, r1, r8
    82d2:	b29b      	uxth	r3, r3
    82d4:	fbb1 fcfe 	udiv	ip, r1, lr
    82d8:	fb0e 111c 	mls	r1, lr, ip, r1
    82dc:	fb0c f707 	mul.w	r7, ip, r7
    82e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    82e4:	429f      	cmp	r7, r3
    82e6:	d90e      	bls.n	8306 <__udivmoddi4+0x18e>
    82e8:	18eb      	adds	r3, r5, r3
    82ea:	f10c 31ff 	add.w	r1, ip, #4294967295
    82ee:	d204      	bcs.n	82fa <__udivmoddi4+0x182>
    82f0:	429f      	cmp	r7, r3
    82f2:	d902      	bls.n	82fa <__udivmoddi4+0x182>
    82f4:	f1ac 0102 	sub.w	r1, ip, #2
    82f8:	442b      	add	r3, r5
    82fa:	1bdb      	subs	r3, r3, r7
    82fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8300:	e793      	b.n	822a <__udivmoddi4+0xb2>
    8302:	4660      	mov	r0, ip
    8304:	e7e3      	b.n	82ce <__udivmoddi4+0x156>
    8306:	4661      	mov	r1, ip
    8308:	e7f7      	b.n	82fa <__udivmoddi4+0x182>
    830a:	4660      	mov	r0, ip
    830c:	e7a4      	b.n	8258 <__udivmoddi4+0xe0>
    830e:	4663      	mov	r3, ip
    8310:	e7b8      	b.n	8284 <__udivmoddi4+0x10c>
    8312:	4283      	cmp	r3, r0
    8314:	d906      	bls.n	8324 <__udivmoddi4+0x1ac>
    8316:	b916      	cbnz	r6, 831e <__udivmoddi4+0x1a6>
    8318:	2100      	movs	r1, #0
    831a:	4608      	mov	r0, r1
    831c:	e77c      	b.n	8218 <__udivmoddi4+0xa0>
    831e:	e9c6 e000 	strd	lr, r0, [r6]
    8322:	e7f9      	b.n	8318 <__udivmoddi4+0x1a0>
    8324:	fab3 f783 	clz	r7, r3
    8328:	b98f      	cbnz	r7, 834e <__udivmoddi4+0x1d6>
    832a:	4283      	cmp	r3, r0
    832c:	d301      	bcc.n	8332 <__udivmoddi4+0x1ba>
    832e:	4572      	cmp	r2, lr
    8330:	d808      	bhi.n	8344 <__udivmoddi4+0x1cc>
    8332:	ebbe 0402 	subs.w	r4, lr, r2
    8336:	eb60 0303 	sbc.w	r3, r0, r3
    833a:	2001      	movs	r0, #1
    833c:	469c      	mov	ip, r3
    833e:	b91e      	cbnz	r6, 8348 <__udivmoddi4+0x1d0>
    8340:	2100      	movs	r1, #0
    8342:	e769      	b.n	8218 <__udivmoddi4+0xa0>
    8344:	4638      	mov	r0, r7
    8346:	e7fa      	b.n	833e <__udivmoddi4+0x1c6>
    8348:	e9c6 4c00 	strd	r4, ip, [r6]
    834c:	e7f8      	b.n	8340 <__udivmoddi4+0x1c8>
    834e:	f1c7 0c20 	rsb	ip, r7, #32
    8352:	40bb      	lsls	r3, r7
    8354:	fa0e f507 	lsl.w	r5, lr, r7
    8358:	fa22 f40c 	lsr.w	r4, r2, ip
    835c:	fa2e f10c 	lsr.w	r1, lr, ip
    8360:	40ba      	lsls	r2, r7
    8362:	431c      	orrs	r4, r3
    8364:	fa20 f30c 	lsr.w	r3, r0, ip
    8368:	40b8      	lsls	r0, r7
    836a:	ea4f 4914 	mov.w	r9, r4, lsr #16
    836e:	4301      	orrs	r1, r0
    8370:	fa1f fe84 	uxth.w	lr, r4
    8374:	fbb3 f8f9 	udiv	r8, r3, r9
    8378:	fb09 3018 	mls	r0, r9, r8, r3
    837c:	0c0b      	lsrs	r3, r1, #16
    837e:	fb08 fa0e 	mul.w	sl, r8, lr
    8382:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    8386:	459a      	cmp	sl, r3
    8388:	d940      	bls.n	840c <__udivmoddi4+0x294>
    838a:	18e3      	adds	r3, r4, r3
    838c:	f108 30ff 	add.w	r0, r8, #4294967295
    8390:	d204      	bcs.n	839c <__udivmoddi4+0x224>
    8392:	459a      	cmp	sl, r3
    8394:	d902      	bls.n	839c <__udivmoddi4+0x224>
    8396:	f1a8 0002 	sub.w	r0, r8, #2
    839a:	4423      	add	r3, r4
    839c:	eba3 030a 	sub.w	r3, r3, sl
    83a0:	b289      	uxth	r1, r1
    83a2:	fbb3 f8f9 	udiv	r8, r3, r9
    83a6:	fb09 3318 	mls	r3, r9, r8, r3
    83aa:	fb08 fe0e 	mul.w	lr, r8, lr
    83ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    83b2:	458e      	cmp	lr, r1
    83b4:	d92c      	bls.n	8410 <__udivmoddi4+0x298>
    83b6:	1861      	adds	r1, r4, r1
    83b8:	f108 33ff 	add.w	r3, r8, #4294967295
    83bc:	d204      	bcs.n	83c8 <__udivmoddi4+0x250>
    83be:	458e      	cmp	lr, r1
    83c0:	d902      	bls.n	83c8 <__udivmoddi4+0x250>
    83c2:	f1a8 0302 	sub.w	r3, r8, #2
    83c6:	4421      	add	r1, r4
    83c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    83cc:	eba1 010e 	sub.w	r1, r1, lr
    83d0:	fba0 9802 	umull	r9, r8, r0, r2
    83d4:	4541      	cmp	r1, r8
    83d6:	46ce      	mov	lr, r9
    83d8:	4643      	mov	r3, r8
    83da:	d302      	bcc.n	83e2 <__udivmoddi4+0x26a>
    83dc:	d106      	bne.n	83ec <__udivmoddi4+0x274>
    83de:	454d      	cmp	r5, r9
    83e0:	d204      	bcs.n	83ec <__udivmoddi4+0x274>
    83e2:	3801      	subs	r0, #1
    83e4:	ebb9 0e02 	subs.w	lr, r9, r2
    83e8:	eb68 0304 	sbc.w	r3, r8, r4
    83ec:	2e00      	cmp	r6, #0
    83ee:	d0a7      	beq.n	8340 <__udivmoddi4+0x1c8>
    83f0:	ebb5 020e 	subs.w	r2, r5, lr
    83f4:	eb61 0103 	sbc.w	r1, r1, r3
    83f8:	fa01 fc0c 	lsl.w	ip, r1, ip
    83fc:	fa22 f307 	lsr.w	r3, r2, r7
    8400:	40f9      	lsrs	r1, r7
    8402:	ea4c 0303 	orr.w	r3, ip, r3
    8406:	e9c6 3100 	strd	r3, r1, [r6]
    840a:	e799      	b.n	8340 <__udivmoddi4+0x1c8>
    840c:	4640      	mov	r0, r8
    840e:	e7c5      	b.n	839c <__udivmoddi4+0x224>
    8410:	4643      	mov	r3, r8
    8412:	e7d9      	b.n	83c8 <__udivmoddi4+0x250>

00008414 <strlen>:
    8414:	4603      	mov	r3, r0
    8416:	f813 2b01 	ldrb.w	r2, [r3], #1
    841a:	2a00      	cmp	r2, #0
    841c:	d1fb      	bne.n	8416 <strlen+0x2>
    841e:	1a18      	subs	r0, r3, r0
    8420:	3801      	subs	r0, #1
    8422:	4770      	bx	lr

00008424 <gpio_pin_set_dt.constprop.0.isra.0>:
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    8424:	2101      	movs	r1, #1
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    8426:	4603      	mov	r3, r0
{
	return gpio_pin_set(spec->port, spec->pin, value);
    8428:	4a08      	ldr	r2, [pc, #32]	; (844c <gpio_pin_set_dt.constprop.0.isra.0+0x28>)
    842a:	6810      	ldr	r0, [r2, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    842c:	7912      	ldrb	r2, [r2, #4]
    842e:	4091      	lsls	r1, r2
    8430:	6902      	ldr	r2, [r0, #16]
    8432:	6812      	ldr	r2, [r2, #0]
    8434:	4211      	tst	r1, r2
		value = (value != 0) ? 0 : 1;
    8436:	bf18      	it	ne
    8438:	f083 0301 	eorne.w	r3, r3, #1
	if (value != 0)	{
    843c:	b113      	cbz	r3, 8444 <gpio_pin_set_dt.constprop.0.isra.0+0x20>
	return api->port_set_bits_raw(port, pins);
    843e:	6883      	ldr	r3, [r0, #8]
    8440:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    8442:	4718      	bx	r3
    8444:	6883      	ldr	r3, [r0, #8]
    8446:	691b      	ldr	r3, [r3, #16]
    8448:	e7fb      	b.n	8442 <gpio_pin_set_dt.constprop.0.isra.0+0x1e>
    844a:	bf00      	nop
    844c:	2000c580 	.word	0x2000c580

00008450 <main>:
void button_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins) {
	//printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
}

int main(void)
{
    8450:	b570      	push	{r4, r5, r6, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    8452:	4c35      	ldr	r4, [pc, #212]	; (8528 <main+0xd8>)
    8454:	4620      	mov	r0, r4
    8456:	f007 fd9e 	bl	ff96 <z_device_is_ready>
	int ret;

	if (!gpio_is_ready_dt(&button)) {
    845a:	2800      	cmp	r0, #0
    845c:	d061      	beq.n	8522 <main+0xd2>
		return 0;
	}

	ret = gpio_pin_configure_dt(&button, GPIO_INPUT);
    845e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    8462:	4832      	ldr	r0, [pc, #200]	; (852c <main+0xdc>)
    8464:	f006 fe18 	bl	f098 <gpio_pin_configure_dt>
	if (ret != 0) {
    8468:	2800      	cmp	r0, #0
    846a:	d15a      	bne.n	8522 <main+0xd2>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    846c:	6923      	ldr	r3, [r4, #16]
	const struct gpio_driver_api *api =
    846e:	68a5      	ldr	r5, [r4, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    8470:	681b      	ldr	r3, [r3, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
    8472:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    8476:	f013 0f40 	tst.w	r3, #64	; 0x40
	return api->pin_interrupt_configure(port, pin, mode, trig);
    847a:	bf14      	ite	ne
    847c:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
    8480:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
    8484:	2106      	movs	r1, #6
    8486:	4620      	mov	r0, r4
    8488:	69ae      	ldr	r6, [r5, #24]
    848a:	47b0      	blx	r6
		return 0;
	}

	ret = gpio_pin_interrupt_configure_dt(&button,
					      GPIO_INT_EDGE_TO_ACTIVE);
	if (ret != 0) {
    848c:	2800      	cmp	r0, #0
    848e:	d148      	bne.n	8522 <main+0xd2>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    8490:	4927      	ldr	r1, [pc, #156]	; (8530 <main+0xe0>)
    8492:	4b28      	ldr	r3, [pc, #160]	; (8534 <main+0xe4>)
    8494:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    8496:	2340      	movs	r3, #64	; 0x40
    8498:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    849a:	69eb      	ldr	r3, [r5, #28]
    849c:	b113      	cbz	r3, 84a4 <main+0x54>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    849e:	2201      	movs	r2, #1
    84a0:	4620      	mov	r0, r4
    84a2:	4798      	blx	r3
	}

	gpio_init_callback(&button_cb_data, button_pressed, BIT(button.pin));
	gpio_add_callback(button.port, &button_cb_data);

	if (led.port && !device_is_ready(led.port)) {
    84a4:	4c24      	ldr	r4, [pc, #144]	; (8538 <main+0xe8>)
    84a6:	6820      	ldr	r0, [r4, #0]
    84a8:	b118      	cbz	r0, 84b2 <main+0x62>
    84aa:	f007 fd74 	bl	ff96 <z_device_is_ready>
    84ae:	b9c0      	cbnz	r0, 84e2 <main+0x92>
		led.port = NULL;
    84b0:	6020      	str	r0, [r4, #0]
		k_sleep(K_SECONDS(2) );
	}
#endif

#if INIT_MODEM_TO_DISABLE
	int err = nrf_modem_lib_init();
    84b2:	f002 f8cf 	bl	a654 <nrf_modem_lib_init>
    if (err) {
    84b6:	4601      	mov	r1, r0
    84b8:	b300      	cbz	r0, 84fc <main+0xac>
        printk("Modem initialization failed with error: %d\n", err);
    84ba:	4820      	ldr	r0, [pc, #128]	; (853c <main+0xec>)
    84bc:	f006 fe04 	bl	f0c8 <printk>
		
		while(1){
			gpio_pin_set_dt(&led, 1);
    84c0:	2001      	movs	r0, #1
    84c2:	f7ff ffaf 	bl	8424 <gpio_pin_set_dt.constprop.0.isra.0>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    84c6:	2100      	movs	r1, #0
    84c8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    84cc:	f005 fc1a 	bl	dd04 <z_impl_k_sleep>
			k_sleep(K_SECONDS(4) );
			gpio_pin_set_dt(&led, 0);
    84d0:	2000      	movs	r0, #0
    84d2:	f7ff ffa7 	bl	8424 <gpio_pin_set_dt.constprop.0.isra.0>
    84d6:	2100      	movs	r1, #0
    84d8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    84dc:	f005 fc12 	bl	dd04 <z_impl_k_sleep>
		while(1){
    84e0:	e7ee      	b.n	84c0 <main+0x70>
	if (led.port) {
    84e2:	6823      	ldr	r3, [r4, #0]
    84e4:	2b00      	cmp	r3, #0
    84e6:	d0e4      	beq.n	84b2 <main+0x62>
		ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT);
    84e8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    84ec:	4620      	mov	r0, r4
    84ee:	f006 fdd3 	bl	f098 <gpio_pin_configure_dt>
		if (ret != 0) {
    84f2:	2800      	cmp	r0, #0
    84f4:	d0dd      	beq.n	84b2 <main+0x62>
			led.port = NULL;
    84f6:	2300      	movs	r3, #0
    84f8:	6023      	str	r3, [r4, #0]
    84fa:	e7da      	b.n	84b2 <main+0x62>
			k_sleep(K_SECONDS(4) );
		}
        return;
    }

    nrf_modem_lib_shutdown();
    84fc:	f002 f8c6 	bl	a68c <nrf_modem_lib_shutdown>
	while(1){
		gpio_pin_set_dt(&led, 1);
    8500:	2001      	movs	r0, #1
    8502:	f7ff ff8f 	bl	8424 <gpio_pin_set_dt.constprop.0.isra.0>
    8506:	2100      	movs	r1, #0
    8508:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    850c:	f005 fbfa 	bl	dd04 <z_impl_k_sleep>
		k_sleep(K_SECONDS(1) );
		gpio_pin_set_dt(&led, 0);
    8510:	2000      	movs	r0, #0
    8512:	f7ff ff87 	bl	8424 <gpio_pin_set_dt.constprop.0.isra.0>
    8516:	2100      	movs	r1, #0
    8518:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    851c:	f005 fbf2 	bl	dd04 <z_impl_k_sleep>
	while(1){
    8520:	e7ee      	b.n	8500 <main+0xb0>
			}
			k_msleep(SLEEP_TIME_MS);
		}
	}
	return 0;
}
    8522:	2000      	movs	r0, #0
    8524:	bd70      	pop	{r4, r5, r6, pc}
    8526:	bf00      	nop
    8528:	00010ac4 	.word	0x00010ac4
    852c:	00010dd8 	.word	0x00010dd8
    8530:	2000c8f0 	.word	0x2000c8f0
    8534:	0000f0c3 	.word	0x0000f0c3
    8538:	2000c580 	.word	0x2000c580
    853c:	00011124 	.word	0x00011124

00008540 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    8540:	4b01      	ldr	r3, [pc, #4]	; (8548 <char_out+0x8>)
    8542:	681b      	ldr	r3, [r3, #0]
    8544:	4718      	bx	r3
    8546:	bf00      	nop
    8548:	2000c588 	.word	0x2000c588

0000854c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    854c:	b507      	push	{r0, r1, r2, lr}
    854e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    8550:	2100      	movs	r1, #0
    8552:	4602      	mov	r2, r0
    8554:	9100      	str	r1, [sp, #0]
    8556:	4803      	ldr	r0, [pc, #12]	; (8564 <vprintk+0x18>)
    8558:	f000 f976 	bl	8848 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    855c:	b003      	add	sp, #12
    855e:	f85d fb04 	ldr.w	pc, [sp], #4
    8562:	bf00      	nop
    8564:	00008541 	.word	0x00008541

00008568 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    8568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    856c:	8b05      	ldrh	r5, [r0, #24]
{
    856e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    8570:	0728      	lsls	r0, r5, #28
{
    8572:	4690      	mov	r8, r2
	if (processing) {
    8574:	d411      	bmi.n	859a <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    8576:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8578:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    857c:	f040 80cd 	bne.w	871a <process_event+0x1b2>
			evt = process_recheck(mgr);
    8580:	4620      	mov	r0, r4
    8582:	f006 ff82 	bl	f48a <process_recheck>
		}

		if (evt == EVT_NOP) {
    8586:	b178      	cbz	r0, 85a8 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    8588:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    858a:	8b21      	ldrh	r1, [r4, #24]
    858c:	2804      	cmp	r0, #4
    858e:	d811      	bhi.n	85b4 <process_event+0x4c>
    8590:	e8df f000 	tbb	[pc, r0]
    8594:	856d10c3 	.word	0x856d10c3
    8598:	95          	.byte	0x95
    8599:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    859a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    859c:	bf0c      	ite	eq
    859e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    85a2:	f045 0520 	orrne.w	r5, r5, #32
    85a6:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    85a8:	f388 8811 	msr	BASEPRI, r8
    85ac:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    85b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    85b4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    85b8:	45aa      	cmp	sl, r5
    85ba:	f000 80a6 	beq.w	870a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    85be:	2700      	movs	r7, #0
    85c0:	46b9      	mov	r9, r7
    85c2:	463e      	mov	r6, r7
    85c4:	68a3      	ldr	r3, [r4, #8]
    85c6:	2b00      	cmp	r3, #0
    85c8:	f000 80bd 	beq.w	8746 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    85cc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    85d0:	8321      	strh	r1, [r4, #24]
    85d2:	f388 8811 	msr	BASEPRI, r8
    85d6:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    85da:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    85dc:	2900      	cmp	r1, #0
    85de:	f000 80bb 	beq.w	8758 <process_event+0x1f0>
	return node->next;
    85e2:	680d      	ldr	r5, [r1, #0]
    85e4:	2900      	cmp	r1, #0
    85e6:	f000 80b7 	beq.w	8758 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    85ea:	4633      	mov	r3, r6
    85ec:	4652      	mov	r2, sl
    85ee:	4620      	mov	r0, r4
    85f0:	f8d1 8004 	ldr.w	r8, [r1, #4]
    85f4:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    85f6:	2d00      	cmp	r5, #0
    85f8:	d076      	beq.n	86e8 <process_event+0x180>
    85fa:	682b      	ldr	r3, [r5, #0]
    85fc:	4629      	mov	r1, r5
    85fe:	461d      	mov	r5, r3
    8600:	e7f0      	b.n	85e4 <process_event+0x7c>
    8602:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    8606:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    8608:	2a01      	cmp	r2, #1
    860a:	d81b      	bhi.n	8644 <process_event+0xdc>
	list->head = NULL;
    860c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    860e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    8612:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    8614:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8616:	b289      	uxth	r1, r1
	list->tail = NULL;
    8618:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    861c:	d109      	bne.n	8632 <process_event+0xca>
    861e:	463b      	mov	r3, r7
    8620:	e003      	b.n	862a <process_event+0xc2>
				mgr->refs += 1U;
    8622:	8b62      	ldrh	r2, [r4, #26]
    8624:	3201      	adds	r2, #1
    8626:	8362      	strh	r2, [r4, #26]
	return node->next;
    8628:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    862a:	2b00      	cmp	r3, #0
    862c:	d1f9      	bne.n	8622 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    862e:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    8632:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    8634:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    8636:	f006 ff28 	bl	f48a <process_recheck>
    863a:	2800      	cmp	r0, #0
    863c:	d07b      	beq.n	8736 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    863e:	f041 0120 	orr.w	r1, r1, #32
    8642:	e077      	b.n	8734 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    8644:	2b04      	cmp	r3, #4
    8646:	d10a      	bne.n	865e <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8648:	f021 0107 	bic.w	r1, r1, #7
    864c:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    864e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    8650:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    8652:	f006 ff1a 	bl	f48a <process_recheck>
    8656:	b110      	cbz	r0, 865e <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8658:	f041 0120 	orr.w	r1, r1, #32
    865c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    865e:	8b21      	ldrh	r1, [r4, #24]
    8660:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    8664:	45aa      	cmp	sl, r5
    8666:	d050      	beq.n	870a <process_event+0x1a2>
    8668:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    866a:	46b9      	mov	r9, r7
    866c:	e7aa      	b.n	85c4 <process_event+0x5c>
			transit = mgr->transitions->start;
    866e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8670:	f021 0107 	bic.w	r1, r1, #7
    8674:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    8678:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    867a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    867e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    8680:	d12d      	bne.n	86de <process_event+0x176>
		    || (transit != NULL)) {
    8682:	f1b9 0f00 	cmp.w	r9, #0
    8686:	d040      	beq.n	870a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    8688:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    868c:	8321      	strh	r1, [r4, #24]
    868e:	f388 8811 	msr	BASEPRI, r8
    8692:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    8696:	4620      	mov	r0, r4
    8698:	4939      	ldr	r1, [pc, #228]	; (8780 <process_event+0x218>)
    869a:	47c8      	blx	r9
    869c:	e029      	b.n	86f2 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    869e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    86a2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    86a4:	f041 0104 	orr.w	r1, r1, #4
    86a8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    86aa:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    86ac:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    86b0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    86b2:	d0e6      	beq.n	8682 <process_event+0x11a>
    86b4:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    86b6:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    86ba:	463e      	mov	r6, r7
    86bc:	e782      	b.n	85c4 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    86be:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    86c2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    86c4:	f041 0105 	orr.w	r1, r1, #5
    86c8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    86ca:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    86cc:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    86d0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    86d2:	d0d6      	beq.n	8682 <process_event+0x11a>
    86d4:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    86d6:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    86da:	463e      	mov	r6, r7
    86dc:	e772      	b.n	85c4 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    86de:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    86e0:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    86e4:	463e      	mov	r6, r7
    86e6:	e76d      	b.n	85c4 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    86e8:	462b      	mov	r3, r5
    86ea:	e787      	b.n	85fc <process_event+0x94>
			if (transit != NULL) {
    86ec:	f1b9 0f00 	cmp.w	r9, #0
    86f0:	d1d1      	bne.n	8696 <process_event+0x12e>
	__asm__ volatile(
    86f2:	f04f 0320 	mov.w	r3, #32
    86f6:	f3ef 8811 	mrs	r8, BASEPRI
    86fa:	f383 8812 	msr	BASEPRI_MAX, r3
    86fe:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    8702:	8b23      	ldrh	r3, [r4, #24]
    8704:	f023 0308 	bic.w	r3, r3, #8
    8708:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    870a:	8b25      	ldrh	r5, [r4, #24]
    870c:	06ea      	lsls	r2, r5, #27
    870e:	d52e      	bpl.n	876e <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    8710:	f025 0310 	bic.w	r3, r5, #16
    8714:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    8716:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    871a:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    871c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    871e:	2e00      	cmp	r6, #0
    8720:	f6bf af6f 	bge.w	8602 <process_event+0x9a>
	list->head = NULL;
    8724:	2300      	movs	r3, #0
		*clients = mgr->clients;
    8726:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    8728:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    872c:	f021 0107 	bic.w	r1, r1, #7
    8730:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8734:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8736:	8b21      	ldrh	r1, [r4, #24]
    8738:	f04f 0900 	mov.w	r9, #0
    873c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    8740:	45aa      	cmp	sl, r5
    8742:	f47f af3f 	bne.w	85c4 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    8746:	2f00      	cmp	r7, #0
    8748:	d09b      	beq.n	8682 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    874a:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    874e:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    8750:	f388 8811 	msr	BASEPRI, r8
    8754:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    8758:	2f00      	cmp	r7, #0
    875a:	d0c7      	beq.n	86ec <process_event+0x184>
	return node->next;
    875c:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    875e:	4639      	mov	r1, r7
    8760:	4633      	mov	r3, r6
    8762:	4652      	mov	r2, sl
    8764:	4620      	mov	r0, r4
    8766:	f006 febc 	bl	f4e2 <notify_one>
	list->head = node;
    876a:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    876c:	e7f4      	b.n	8758 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    876e:	06ab      	lsls	r3, r5, #26
    8770:	f57f af1a 	bpl.w	85a8 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    8774:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    8778:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    877a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    877e:	e6ff      	b.n	8580 <process_event+0x18>
    8780:	0000f50f 	.word	0x0000f50f

00008784 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    8784:	b5f0      	push	{r4, r5, r6, r7, lr}
    8786:	4602      	mov	r2, r0
    8788:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp) != 0) {
		val = 10U * val + *sp++ - '0';
    878a:	270a      	movs	r7, #10
	size_t val = 0;
    878c:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp) != 0) {
    878e:	4e07      	ldr	r6, [pc, #28]	; (87ac <extract_decimal+0x28>)
    8790:	460b      	mov	r3, r1
    8792:	781c      	ldrb	r4, [r3, #0]
    8794:	3101      	adds	r1, #1
    8796:	5d35      	ldrb	r5, [r6, r4]
    8798:	076d      	lsls	r5, r5, #29
    879a:	d401      	bmi.n	87a0 <extract_decimal+0x1c>
	}
	*str = sp;
    879c:	6013      	str	r3, [r2, #0]
	return val;
}
    879e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    87a0:	fb07 4300 	mla	r3, r7, r0, r4
    87a4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    87a8:	e7f2      	b.n	8790 <extract_decimal+0xc>
    87aa:	bf00      	nop
    87ac:	000114cf 	.word	0x000114cf

000087b0 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    87b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    87b4:	4615      	mov	r5, r2
    87b6:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    87b8:	78d3      	ldrb	r3, [r2, #3]
    87ba:	4a22      	ldr	r2, [pc, #136]	; (8844 <encode_uint+0x94>)
	switch (specifier) {
    87bc:	2b6f      	cmp	r3, #111	; 0x6f
    87be:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    87c2:	4680      	mov	r8, r0
    87c4:	460f      	mov	r7, r1
    87c6:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    87ca:	d029      	beq.n	8820 <encode_uint+0x70>
    87cc:	d824      	bhi.n	8818 <encode_uint+0x68>
		return 10;
    87ce:	2b58      	cmp	r3, #88	; 0x58
    87d0:	bf0c      	ite	eq
    87d2:	2610      	moveq	r6, #16
    87d4:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    87d6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    87da:	4632      	mov	r2, r6
    87dc:	2300      	movs	r3, #0
    87de:	4640      	mov	r0, r8
    87e0:	4639      	mov	r1, r7
    87e2:	f7ff fcaf 	bl	8144 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    87e6:	2a09      	cmp	r2, #9
    87e8:	b2d4      	uxtb	r4, r2
    87ea:	d81e      	bhi.n	882a <encode_uint+0x7a>
    87ec:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    87ee:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    87f0:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    87f2:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    87f6:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    87fa:	d301      	bcc.n	8800 <encode_uint+0x50>
    87fc:	45d1      	cmp	r9, sl
    87fe:	d811      	bhi.n	8824 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    8800:	782b      	ldrb	r3, [r5, #0]
    8802:	069b      	lsls	r3, r3, #26
    8804:	d505      	bpl.n	8812 <encode_uint+0x62>
		if (radix == 8) {
    8806:	2e08      	cmp	r6, #8
    8808:	d115      	bne.n	8836 <encode_uint+0x86>
			conv->altform_0 = true;
    880a:	78ab      	ldrb	r3, [r5, #2]
    880c:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    8810:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    8812:	4648      	mov	r0, r9
    8814:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    8818:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    881c:	2b70      	cmp	r3, #112	; 0x70
    881e:	e7d7      	b.n	87d0 <encode_uint+0x20>
	switch (specifier) {
    8820:	2608      	movs	r6, #8
    8822:	e7d8      	b.n	87d6 <encode_uint+0x26>
		value /= radix;
    8824:	4680      	mov	r8, r0
    8826:	460f      	mov	r7, r1
    8828:	e7d7      	b.n	87da <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    882a:	f1bb 0f01 	cmp.w	fp, #1
    882e:	bf0c      	ite	eq
    8830:	3437      	addeq	r4, #55	; 0x37
    8832:	3457      	addne	r4, #87	; 0x57
    8834:	e7db      	b.n	87ee <encode_uint+0x3e>
		} else if (radix == 16) {
    8836:	2e10      	cmp	r6, #16
    8838:	d1eb      	bne.n	8812 <encode_uint+0x62>
			conv->altform_0c = true;
    883a:	78ab      	ldrb	r3, [r5, #2]
    883c:	f043 0310 	orr.w	r3, r3, #16
    8840:	e7e6      	b.n	8810 <encode_uint+0x60>
    8842:	bf00      	nop
    8844:	000114cf 	.word	0x000114cf

00008848 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    8848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    884c:	468a      	mov	sl, r1
    884e:	4616      	mov	r6, r2
    8850:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    8852:	2500      	movs	r5, #0
{
    8854:	b097      	sub	sp, #92	; 0x5c
    8856:	9003      	str	r0, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    8858:	7830      	ldrb	r0, [r6, #0]
    885a:	b908      	cbnz	r0, 8860 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    885c:	4628      	mov	r0, r5
    885e:	e34a      	b.n	8ef6 <z_cbvprintf_impl+0x6ae>
			OUTC(*fp++);
    8860:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    8862:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    8864:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    8866:	d007      	beq.n	8878 <z_cbvprintf_impl+0x30>
			OUTC('%');
    8868:	4651      	mov	r1, sl
    886a:	9b03      	ldr	r3, [sp, #12]
    886c:	4798      	blx	r3
    886e:	2800      	cmp	r0, #0
    8870:	f2c0 8341 	blt.w	8ef6 <z_cbvprintf_impl+0x6ae>
    8874:	3501      	adds	r5, #1
		if (bps == NULL) {
    8876:	e1f0      	b.n	8c5a <z_cbvprintf_impl+0x412>
		} state = {
    8878:	2218      	movs	r2, #24
    887a:	2100      	movs	r1, #0
    887c:	a810      	add	r0, sp, #64	; 0x40
    887e:	f007 fe71 	bl	10564 <memset>
	if (*sp == '%') {
    8882:	7873      	ldrb	r3, [r6, #1]
    8884:	2b25      	cmp	r3, #37	; 0x25
    8886:	f000 80a3 	beq.w	89d0 <z_cbvprintf_impl+0x188>
    888a:	2300      	movs	r3, #0
    888c:	4698      	mov	r8, r3
    888e:	469e      	mov	lr, r3
    8890:	469c      	mov	ip, r3
    8892:	4618      	mov	r0, r3
    8894:	1c71      	adds	r1, r6, #1
    8896:	460f      	mov	r7, r1
		switch (*sp) {
    8898:	f811 2b01 	ldrb.w	r2, [r1], #1
    889c:	2a2b      	cmp	r2, #43	; 0x2b
    889e:	f000 80c6 	beq.w	8a2e <z_cbvprintf_impl+0x1e6>
    88a2:	f200 80bd 	bhi.w	8a20 <z_cbvprintf_impl+0x1d8>
    88a6:	2a20      	cmp	r2, #32
    88a8:	f000 80c4 	beq.w	8a34 <z_cbvprintf_impl+0x1ec>
    88ac:	2a23      	cmp	r2, #35	; 0x23
    88ae:	f000 80c4 	beq.w	8a3a <z_cbvprintf_impl+0x1f2>
    88b2:	b12b      	cbz	r3, 88c0 <z_cbvprintf_impl+0x78>
    88b4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    88b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    88bc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    88c0:	f1b8 0f00 	cmp.w	r8, #0
    88c4:	d005      	beq.n	88d2 <z_cbvprintf_impl+0x8a>
    88c6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    88ca:	f043 0320 	orr.w	r3, r3, #32
    88ce:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    88d2:	f1be 0f00 	cmp.w	lr, #0
    88d6:	d005      	beq.n	88e4 <z_cbvprintf_impl+0x9c>
    88d8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    88dc:	f043 0310 	orr.w	r3, r3, #16
    88e0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    88e4:	f1bc 0f00 	cmp.w	ip, #0
    88e8:	d005      	beq.n	88f6 <z_cbvprintf_impl+0xae>
    88ea:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    88ee:	f043 0308 	orr.w	r3, r3, #8
    88f2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    88f6:	b128      	cbz	r0, 8904 <z_cbvprintf_impl+0xbc>
    88f8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    88fc:	f043 0304 	orr.w	r3, r3, #4
    8900:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    8904:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8908:	f003 0144 	and.w	r1, r3, #68	; 0x44
    890c:	2944      	cmp	r1, #68	; 0x44
    890e:	d103      	bne.n	8918 <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
    8910:	f36f 1386 	bfc	r3, #6, #1
    8914:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    8918:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    891c:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    891e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8922:	9709      	str	r7, [sp, #36]	; 0x24
    8924:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    8928:	f040 808c 	bne.w	8a44 <z_cbvprintf_impl+0x1fc>
		conv->width_star = true;
    892c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    8930:	f043 0301 	orr.w	r3, r3, #1
    8934:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    8938:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
    893a:	781a      	ldrb	r2, [r3, #0]
    893c:	2a2e      	cmp	r2, #46	; 0x2e
    893e:	bf0c      	ite	eq
    8940:	2101      	moveq	r1, #1
    8942:	2100      	movne	r1, #0
    8944:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    8948:	f361 0241 	bfi	r2, r1, #1, #1
    894c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    8950:	d10c      	bne.n	896c <z_cbvprintf_impl+0x124>
	++sp;
    8952:	1c5a      	adds	r2, r3, #1
    8954:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    8956:	785a      	ldrb	r2, [r3, #1]
    8958:	2a2a      	cmp	r2, #42	; 0x2a
    895a:	f040 8083 	bne.w	8a64 <z_cbvprintf_impl+0x21c>
		conv->prec_star = true;
    895e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    8962:	3302      	adds	r3, #2
		conv->prec_star = true;
    8964:	f042 0204 	orr.w	r2, r2, #4
    8968:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    896c:	781a      	ldrb	r2, [r3, #0]
    896e:	2a6c      	cmp	r2, #108	; 0x6c
    8970:	f000 80a4 	beq.w	8abc <z_cbvprintf_impl+0x274>
    8974:	f200 8086 	bhi.w	8a84 <z_cbvprintf_impl+0x23c>
    8978:	2a68      	cmp	r2, #104	; 0x68
    897a:	f000 808c 	beq.w	8a96 <z_cbvprintf_impl+0x24e>
    897e:	2a6a      	cmp	r2, #106	; 0x6a
    8980:	f000 80a5 	beq.w	8ace <z_cbvprintf_impl+0x286>
    8984:	2a4c      	cmp	r2, #76	; 0x4c
    8986:	f000 80aa 	beq.w	8ade <z_cbvprintf_impl+0x296>
	conv->specifier = *sp++;
    898a:	461a      	mov	r2, r3
    898c:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    8990:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    8992:	9204      	str	r2, [sp, #16]
    8994:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    8998:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    899c:	f200 8117 	bhi.w	8bce <z_cbvprintf_impl+0x386>
    89a0:	2b6d      	cmp	r3, #109	; 0x6d
    89a2:	f200 80a9 	bhi.w	8af8 <z_cbvprintf_impl+0x2b0>
    89a6:	2b69      	cmp	r3, #105	; 0x69
    89a8:	f200 8111 	bhi.w	8bce <z_cbvprintf_impl+0x386>
    89ac:	2b57      	cmp	r3, #87	; 0x57
    89ae:	f200 80be 	bhi.w	8b2e <z_cbvprintf_impl+0x2e6>
    89b2:	2b41      	cmp	r3, #65	; 0x41
    89b4:	d003      	beq.n	89be <z_cbvprintf_impl+0x176>
    89b6:	3b45      	subs	r3, #69	; 0x45
    89b8:	2b02      	cmp	r3, #2
    89ba:	f200 8108 	bhi.w	8bce <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_FP;
    89be:	2204      	movs	r2, #4
    89c0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    89c4:	f362 0302 	bfi	r3, r2, #0, #3
    89c8:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    89cc:	2301      	movs	r3, #1
			break;
    89ce:	e0ca      	b.n	8b66 <z_cbvprintf_impl+0x31e>
		conv->specifier = *sp++;
    89d0:	1cb2      	adds	r2, r6, #2
    89d2:	9204      	str	r2, [sp, #16]
    89d4:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    89d8:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    89dc:	07d9      	lsls	r1, r3, #31
    89de:	f140 80fd 	bpl.w	8bdc <z_cbvprintf_impl+0x394>
			width = va_arg(ap, int);
    89e2:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    89e6:	f1b8 0f00 	cmp.w	r8, #0
    89ea:	da07      	bge.n	89fc <z_cbvprintf_impl+0x1b4>
				conv->flag_dash = true;
    89ec:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    89f0:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    89f4:	f042 0204 	orr.w	r2, r2, #4
    89f8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    89fc:	075a      	lsls	r2, r3, #29
    89fe:	f140 80f6 	bpl.w	8bee <z_cbvprintf_impl+0x3a6>
			int arg = va_arg(ap, int);
    8a02:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    8a06:	f1bb 0f00 	cmp.w	fp, #0
    8a0a:	f280 80f5 	bge.w	8bf8 <z_cbvprintf_impl+0x3b0>
				conv->prec_present = false;
    8a0e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    8a12:	f36f 0341 	bfc	r3, #1, #1
    8a16:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    8a1a:	f04f 3bff 	mov.w	fp, #4294967295
    8a1e:	e0eb      	b.n	8bf8 <z_cbvprintf_impl+0x3b0>
		switch (*sp) {
    8a20:	2a2d      	cmp	r2, #45	; 0x2d
    8a22:	d00d      	beq.n	8a40 <z_cbvprintf_impl+0x1f8>
    8a24:	2a30      	cmp	r2, #48	; 0x30
    8a26:	f47f af44 	bne.w	88b2 <z_cbvprintf_impl+0x6a>
    8a2a:	2301      	movs	r3, #1
	} while (loop);
    8a2c:	e733      	b.n	8896 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
    8a2e:	f04f 0c01 	mov.w	ip, #1
    8a32:	e730      	b.n	8896 <z_cbvprintf_impl+0x4e>
    8a34:	f04f 0e01 	mov.w	lr, #1
    8a38:	e72d      	b.n	8896 <z_cbvprintf_impl+0x4e>
    8a3a:	f04f 0801 	mov.w	r8, #1
    8a3e:	e72a      	b.n	8896 <z_cbvprintf_impl+0x4e>
    8a40:	2001      	movs	r0, #1
    8a42:	e728      	b.n	8896 <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
    8a44:	a809      	add	r0, sp, #36	; 0x24
    8a46:	f7ff fe9d 	bl	8784 <extract_decimal>
	if (sp != wp) {
    8a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8a4c:	42bb      	cmp	r3, r7
    8a4e:	f43f af74 	beq.w	893a <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
    8a52:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    8a56:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    8a58:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    8a5a:	f360 0241 	bfi	r2, r0, #1, #1
    8a5e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    8a62:	e76a      	b.n	893a <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
    8a64:	a809      	add	r0, sp, #36	; 0x24
    8a66:	f7ff fe8d 	bl	8784 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    8a6a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    8a6e:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    8a70:	f3c3 0240 	ubfx	r2, r3, #1, #1
    8a74:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    8a78:	f362 0341 	bfi	r3, r2, #1, #1
    8a7c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    8a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8a82:	e773      	b.n	896c <z_cbvprintf_impl+0x124>
	switch (*sp) {
    8a84:	2a74      	cmp	r2, #116	; 0x74
    8a86:	d026      	beq.n	8ad6 <z_cbvprintf_impl+0x28e>
    8a88:	2a7a      	cmp	r2, #122	; 0x7a
    8a8a:	f47f af7e 	bne.w	898a <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
    8a8e:	2106      	movs	r1, #6
    8a90:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    8a94:	e00c      	b.n	8ab0 <z_cbvprintf_impl+0x268>
		if (*++sp == 'h') {
    8a96:	785a      	ldrb	r2, [r3, #1]
    8a98:	2a68      	cmp	r2, #104	; 0x68
    8a9a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    8a9e:	d106      	bne.n	8aae <z_cbvprintf_impl+0x266>
			conv->length_mod = LENGTH_HH;
    8aa0:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    8aa2:	f361 02c6 	bfi	r2, r1, #3, #4
    8aa6:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    8aaa:	3302      	adds	r3, #2
    8aac:	e76d      	b.n	898a <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
    8aae:	2102      	movs	r1, #2
    8ab0:	f361 02c6 	bfi	r2, r1, #3, #4
    8ab4:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    8ab8:	3301      	adds	r3, #1
    8aba:	e766      	b.n	898a <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
    8abc:	785a      	ldrb	r2, [r3, #1]
    8abe:	2a6c      	cmp	r2, #108	; 0x6c
    8ac0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    8ac4:	d101      	bne.n	8aca <z_cbvprintf_impl+0x282>
			conv->length_mod = LENGTH_LL;
    8ac6:	2104      	movs	r1, #4
    8ac8:	e7eb      	b.n	8aa2 <z_cbvprintf_impl+0x25a>
			conv->length_mod = LENGTH_L;
    8aca:	2103      	movs	r1, #3
    8acc:	e7f0      	b.n	8ab0 <z_cbvprintf_impl+0x268>
		conv->length_mod = LENGTH_J;
    8ace:	2105      	movs	r1, #5
    8ad0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    8ad4:	e7ec      	b.n	8ab0 <z_cbvprintf_impl+0x268>
		conv->length_mod = LENGTH_T;
    8ad6:	2107      	movs	r1, #7
    8ad8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    8adc:	e7e8      	b.n	8ab0 <z_cbvprintf_impl+0x268>
		conv->unsupported = true;
    8ade:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    8ae2:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    8ae6:	f022 0202 	bic.w	r2, r2, #2
    8aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    8aee:	f042 0202 	orr.w	r2, r2, #2
    8af2:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    8af6:	e7df      	b.n	8ab8 <z_cbvprintf_impl+0x270>
	switch (conv->specifier) {
    8af8:	3b6e      	subs	r3, #110	; 0x6e
    8afa:	b2d9      	uxtb	r1, r3
    8afc:	2301      	movs	r3, #1
    8afe:	408b      	lsls	r3, r1
    8b00:	f240 4182 	movw	r1, #1154	; 0x482
    8b04:	420b      	tst	r3, r1
    8b06:	d138      	bne.n	8b7a <z_cbvprintf_impl+0x332>
    8b08:	f013 0f24 	tst.w	r3, #36	; 0x24
    8b0c:	d152      	bne.n	8bb4 <z_cbvprintf_impl+0x36c>
    8b0e:	07df      	lsls	r7, r3, #31
    8b10:	d55d      	bpl.n	8bce <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_PTR;
    8b12:	2103      	movs	r1, #3
    8b14:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    8b18:	f361 0302 	bfi	r3, r1, #0, #3
    8b1c:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    8b20:	f002 0378 	and.w	r3, r2, #120	; 0x78
    8b24:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
    8b28:	4243      	negs	r3, r0
    8b2a:	4143      	adcs	r3, r0
    8b2c:	e01b      	b.n	8b66 <z_cbvprintf_impl+0x31e>
    8b2e:	2001      	movs	r0, #1
	switch (conv->specifier) {
    8b30:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    8b34:	b2c9      	uxtb	r1, r1
    8b36:	fa00 f101 	lsl.w	r1, r0, r1
    8b3a:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    8b3e:	f47f af3e 	bne.w	89be <z_cbvprintf_impl+0x176>
    8b42:	f640 0701 	movw	r7, #2049	; 0x801
    8b46:	4239      	tst	r1, r7
    8b48:	d11d      	bne.n	8b86 <z_cbvprintf_impl+0x33e>
    8b4a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    8b4e:	d03e      	beq.n	8bce <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_SINT;
    8b50:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    8b54:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    8b58:	f002 0278 	and.w	r2, r2, #120	; 0x78
    8b5c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    8b5e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    8b62:	d034      	beq.n	8bce <z_cbvprintf_impl+0x386>
	bool unsupported = false;
    8b64:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    8b66:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    8b6a:	f3c2 0140 	ubfx	r1, r2, #1, #1
    8b6e:	430b      	orrs	r3, r1
    8b70:	f363 0241 	bfi	r2, r3, #1, #1
    8b74:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    8b78:	e72e      	b.n	89d8 <z_cbvprintf_impl+0x190>
		conv->specifier_cat = SPECIFIER_UINT;
    8b7a:	2102      	movs	r1, #2
    8b7c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    8b80:	f361 0302 	bfi	r3, r1, #0, #3
    8b84:	e7e8      	b.n	8b58 <z_cbvprintf_impl+0x310>
    8b86:	2002      	movs	r0, #2
    8b88:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    8b8c:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    8b90:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    8b94:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    8b96:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    8b9a:	bf02      	ittt	eq
    8b9c:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    8ba0:	f041 0101 	orreq.w	r1, r1, #1
    8ba4:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    8ba8:	2b63      	cmp	r3, #99	; 0x63
    8baa:	d1db      	bne.n	8b64 <z_cbvprintf_impl+0x31c>
			unsupported = (conv->length_mod != LENGTH_NONE);
    8bac:	1e13      	subs	r3, r2, #0
    8bae:	bf18      	it	ne
    8bb0:	2301      	movne	r3, #1
    8bb2:	e7d8      	b.n	8b66 <z_cbvprintf_impl+0x31e>
		conv->specifier_cat = SPECIFIER_PTR;
    8bb4:	2103      	movs	r1, #3
    8bb6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    8bba:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    8bbe:	f361 0302 	bfi	r3, r1, #0, #3
    8bc2:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    8bc6:	bf14      	ite	ne
    8bc8:	2301      	movne	r3, #1
    8bca:	2300      	moveq	r3, #0
    8bcc:	e7cb      	b.n	8b66 <z_cbvprintf_impl+0x31e>
		conv->invalid = true;
    8bce:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8bd2:	f043 0301 	orr.w	r3, r3, #1
    8bd6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    8bda:	e7c3      	b.n	8b64 <z_cbvprintf_impl+0x31c>
		} else if (conv->width_present) {
    8bdc:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    8be0:	2a00      	cmp	r2, #0
		int width = -1;
    8be2:	bfac      	ite	ge
    8be4:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
    8be8:	f8dd 804c 	ldrlt.w	r8, [sp, #76]	; 0x4c
    8bec:	e706      	b.n	89fc <z_cbvprintf_impl+0x1b4>
		} else if (conv->prec_present) {
    8bee:	079f      	lsls	r7, r3, #30
    8bf0:	f57f af13 	bpl.w	8a1a <z_cbvprintf_impl+0x1d2>
			precision = conv->prec_value;
    8bf4:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    8bf8:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    8bfa:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    8bfe:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    8c02:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    8c06:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    8c0a:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    8c0c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    8c10:	d133      	bne.n	8c7a <z_cbvprintf_impl+0x432>
			switch (length_mod) {
    8c12:	1ecb      	subs	r3, r1, #3
    8c14:	2b04      	cmp	r3, #4
    8c16:	d804      	bhi.n	8c22 <z_cbvprintf_impl+0x3da>
    8c18:	e8df f003 	tbb	[pc, r3]
    8c1c:	21464621 	.word	0x21464621
    8c20:	21          	.byte	0x21
    8c21:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    8c22:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    8c24:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    8c26:	ea4f 72e3 	mov.w	r2, r3, asr #31
    8c2a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    8c2e:	d11c      	bne.n	8c6a <z_cbvprintf_impl+0x422>
				value->sint = (signed char)value->sint;
    8c30:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    8c34:	17da      	asrs	r2, r3, #31
    8c36:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    8c3a:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    8c3c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8c40:	f013 0703 	ands.w	r7, r3, #3
    8c44:	d050      	beq.n	8ce8 <z_cbvprintf_impl+0x4a0>
			OUTS(sp, fp);
    8c46:	4632      	mov	r2, r6
    8c48:	4651      	mov	r1, sl
    8c4a:	9b04      	ldr	r3, [sp, #16]
    8c4c:	9803      	ldr	r0, [sp, #12]
    8c4e:	f006 fcf5 	bl	f63c <outs>
    8c52:	2800      	cmp	r0, #0
    8c54:	f2c0 814f 	blt.w	8ef6 <z_cbvprintf_impl+0x6ae>
    8c58:	4405      	add	r5, r0
			continue;
    8c5a:	9e04      	ldr	r6, [sp, #16]
    8c5c:	e5fc      	b.n	8858 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    8c5e:	f854 3b04 	ldr.w	r3, [r4], #4
    8c62:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    8c64:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    8c68:	e7e8      	b.n	8c3c <z_cbvprintf_impl+0x3f4>
			} else if (length_mod == LENGTH_H) {
    8c6a:	2902      	cmp	r1, #2
    8c6c:	d1e5      	bne.n	8c3a <z_cbvprintf_impl+0x3f2>
				value->sint = (short)value->sint;
    8c6e:	b21a      	sxth	r2, r3
    8c70:	f343 33c0 	sbfx	r3, r3, #15, #1
    8c74:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    8c78:	e7df      	b.n	8c3a <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_UINT) {
    8c7a:	2b02      	cmp	r3, #2
    8c7c:	d124      	bne.n	8cc8 <z_cbvprintf_impl+0x480>
			switch (length_mod) {
    8c7e:	1ecb      	subs	r3, r1, #3
    8c80:	2b04      	cmp	r3, #4
    8c82:	d804      	bhi.n	8c8e <z_cbvprintf_impl+0x446>
    8c84:	e8df f003 	tbb	[pc, r3]
    8c88:	18101018 	.word	0x18101018
    8c8c:	18          	.byte	0x18
    8c8d:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    8c8e:	2901      	cmp	r1, #1
    8c90:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    8c94:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    8c98:	d014      	beq.n	8cc4 <z_cbvprintf_impl+0x47c>
			} else if (length_mod == LENGTH_H) {
    8c9a:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    8c9c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    8ca0:	d1cc      	bne.n	8c3c <z_cbvprintf_impl+0x3f4>
				value->uint = (unsigned short)value->uint;
    8ca2:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    8ca4:	9310      	str	r3, [sp, #64]	; 0x40
    8ca6:	e7c9      	b.n	8c3c <z_cbvprintf_impl+0x3f4>
					(uint_value_type)va_arg(ap,
    8ca8:	3407      	adds	r4, #7
    8caa:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    8cae:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    8cb2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    8cb6:	e7c1      	b.n	8c3c <z_cbvprintf_impl+0x3f4>
					(uint_value_type)va_arg(ap, size_t);
    8cb8:	f854 3b04 	ldr.w	r3, [r4], #4
    8cbc:	9310      	str	r3, [sp, #64]	; 0x40
    8cbe:	2300      	movs	r3, #0
    8cc0:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    8cc2:	e7bb      	b.n	8c3c <z_cbvprintf_impl+0x3f4>
				value->uint = (unsigned char)value->uint;
    8cc4:	b2db      	uxtb	r3, r3
    8cc6:	e7cd      	b.n	8c64 <z_cbvprintf_impl+0x41c>
		} else if (specifier_cat == SPECIFIER_FP) {
    8cc8:	2b04      	cmp	r3, #4
    8cca:	d108      	bne.n	8cde <z_cbvprintf_impl+0x496>
					(sint_value_type)va_arg(ap, long long);
    8ccc:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    8cce:	f024 0407 	bic.w	r4, r4, #7
    8cd2:	e9d4 2300 	ldrd	r2, r3, [r4]
    8cd6:	3408      	adds	r4, #8
    8cd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    8cdc:	e7ae      	b.n	8c3c <z_cbvprintf_impl+0x3f4>
		} else if (specifier_cat == SPECIFIER_PTR) {
    8cde:	2b03      	cmp	r3, #3
    8ce0:	d1ac      	bne.n	8c3c <z_cbvprintf_impl+0x3f4>
			value->ptr = va_arg(ap, void *);
    8ce2:	f854 3b04 	ldr.w	r3, [r4], #4
    8ce6:	e7dd      	b.n	8ca4 <z_cbvprintf_impl+0x45c>
		switch (conv->specifier) {
    8ce8:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    8cec:	2878      	cmp	r0, #120	; 0x78
    8cee:	d8b4      	bhi.n	8c5a <z_cbvprintf_impl+0x412>
    8cf0:	2862      	cmp	r0, #98	; 0x62
    8cf2:	d81d      	bhi.n	8d30 <z_cbvprintf_impl+0x4e8>
    8cf4:	2825      	cmp	r0, #37	; 0x25
    8cf6:	f43f adb7 	beq.w	8868 <z_cbvprintf_impl+0x20>
    8cfa:	2858      	cmp	r0, #88	; 0x58
    8cfc:	d1ad      	bne.n	8c5a <z_cbvprintf_impl+0x412>
			bps = encode_uint(value->uint, conv, buf, bpe);
    8cfe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    8d02:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    8d06:	9300      	str	r3, [sp, #0]
    8d08:	aa12      	add	r2, sp, #72	; 0x48
    8d0a:	ab0a      	add	r3, sp, #40	; 0x28
    8d0c:	f7ff fd50 	bl	87b0 <encode_uint>
			if (precision >= 0) {
    8d10:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    8d14:	4681      	mov	r9, r0
			if (precision >= 0) {
    8d16:	f280 8098 	bge.w	8e4a <z_cbvprintf_impl+0x602>
		if (bps == NULL) {
    8d1a:	f1b9 0f00 	cmp.w	r9, #0
    8d1e:	d09c      	beq.n	8c5a <z_cbvprintf_impl+0x412>
		size_t nj_len = (bpe - bps);
    8d20:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
    8d24:	eba6 0309 	sub.w	r3, r6, r9
		if (sign != 0) {
    8d28:	2f00      	cmp	r7, #0
    8d2a:	d050      	beq.n	8dce <z_cbvprintf_impl+0x586>
			nj_len += 1U;
    8d2c:	3301      	adds	r3, #1
    8d2e:	e04e      	b.n	8dce <z_cbvprintf_impl+0x586>
		switch (conv->specifier) {
    8d30:	3863      	subs	r0, #99	; 0x63
    8d32:	2815      	cmp	r0, #21
    8d34:	d891      	bhi.n	8c5a <z_cbvprintf_impl+0x412>
    8d36:	a201      	add	r2, pc, #4	; (adr r2, 8d3c <z_cbvprintf_impl+0x4f4>)
    8d38:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    8d3c:	00008dbd 	.word	0x00008dbd
    8d40:	00008e21 	.word	0x00008e21
    8d44:	00008c5b 	.word	0x00008c5b
    8d48:	00008c5b 	.word	0x00008c5b
    8d4c:	00008c5b 	.word	0x00008c5b
    8d50:	00008c5b 	.word	0x00008c5b
    8d54:	00008e21 	.word	0x00008e21
    8d58:	00008c5b 	.word	0x00008c5b
    8d5c:	00008c5b 	.word	0x00008c5b
    8d60:	00008c5b 	.word	0x00008c5b
    8d64:	00008c5b 	.word	0x00008c5b
    8d68:	00008eab 	.word	0x00008eab
    8d6c:	00008e45 	.word	0x00008e45
    8d70:	00008e6d 	.word	0x00008e6d
    8d74:	00008c5b 	.word	0x00008c5b
    8d78:	00008c5b 	.word	0x00008c5b
    8d7c:	00008d95 	.word	0x00008d95
    8d80:	00008c5b 	.word	0x00008c5b
    8d84:	00008e45 	.word	0x00008e45
    8d88:	00008c5b 	.word	0x00008c5b
    8d8c:	00008c5b 	.word	0x00008c5b
    8d90:	00008e45 	.word	0x00008e45
			if (precision >= 0) {
    8d94:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    8d98:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
			if (precision >= 0) {
    8d9c:	db0a      	blt.n	8db4 <z_cbvprintf_impl+0x56c>
				len = strnlen(bps, precision);
    8d9e:	4659      	mov	r1, fp
    8da0:	4648      	mov	r0, r9
    8da2:	f007 fc14 	bl	105ce <strnlen>
		if (bps == NULL) {
    8da6:	f1b9 0f00 	cmp.w	r9, #0
    8daa:	f43f af56 	beq.w	8c5a <z_cbvprintf_impl+0x412>
			bpe = bps + len;
    8dae:	eb09 0600 	add.w	r6, r9, r0
    8db2:	e076      	b.n	8ea2 <z_cbvprintf_impl+0x65a>
				len = strlen(bps);
    8db4:	4648      	mov	r0, r9
    8db6:	f7ff fb2d 	bl	8414 <strlen>
    8dba:	e7f8      	b.n	8dae <z_cbvprintf_impl+0x566>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    8dbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
		char sign = 0;
    8dbe:	2700      	movs	r7, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    8dc0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		size_t nj_len = (bpe - bps);
    8dc4:	2301      	movs	r3, #1
			bpe = buf + 1;
    8dc6:	f10d 0629 	add.w	r6, sp, #41	; 0x29
			bps = buf;
    8dca:	f10d 0928 	add.w	r9, sp, #40	; 0x28
		if (conv->altform_0c) {
    8dce:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    8dd2:	f011 0210 	ands.w	r2, r1, #16
    8dd6:	9206      	str	r2, [sp, #24]
    8dd8:	f000 8081 	beq.w	8ede <z_cbvprintf_impl+0x696>
			nj_len += 2U;
    8ddc:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    8dde:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8de0:	4413      	add	r3, r2
    8de2:	9205      	str	r2, [sp, #20]
		if (conv->pad_fp) {
    8de4:	064a      	lsls	r2, r1, #25
			nj_len += conv->pad0_pre_exp;
    8de6:	bf44      	itt	mi
    8de8:	9914      	ldrmi	r1, [sp, #80]	; 0x50
    8dea:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    8dec:	f1b8 0f00 	cmp.w	r8, #0
    8df0:	f340 808e 	ble.w	8f10 <z_cbvprintf_impl+0x6c8>
			width -= (int)nj_len;
    8df4:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    8df8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8dfc:	0758      	lsls	r0, r3, #29
    8dfe:	f3c3 0b80 	ubfx	fp, r3, #2, #1
    8e02:	f100 8085 	bmi.w	8f10 <z_cbvprintf_impl+0x6c8>
				if (conv->flag_zero) {
    8e06:	0659      	lsls	r1, r3, #25
    8e08:	d578      	bpl.n	8efc <z_cbvprintf_impl+0x6b4>
					if (sign != 0) {
    8e0a:	b13f      	cbz	r7, 8e1c <z_cbvprintf_impl+0x5d4>
						OUTC(sign);
    8e0c:	4651      	mov	r1, sl
    8e0e:	4638      	mov	r0, r7
    8e10:	9b03      	ldr	r3, [sp, #12]
    8e12:	4798      	blx	r3
    8e14:	2800      	cmp	r0, #0
    8e16:	db6e      	blt.n	8ef6 <z_cbvprintf_impl+0x6ae>
    8e18:	465f      	mov	r7, fp
    8e1a:	3501      	adds	r5, #1
					pad = '0';
    8e1c:	2330      	movs	r3, #48	; 0x30
    8e1e:	e06e      	b.n	8efe <z_cbvprintf_impl+0x6b6>
			if (conv->flag_plus) {
    8e20:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    8e22:	bf5a      	itte	pl
    8e24:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    8e28:	015f      	lslpl	r7, r3, #5
				sign = '+';
    8e2a:	272b      	movmi	r7, #43	; 0x2b
			sint = value->sint;
    8e2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    8e30:	2b00      	cmp	r3, #0
    8e32:	f6bf af64 	bge.w	8cfe <z_cbvprintf_impl+0x4b6>
				value->uint = (uint_value_type)-sint;
    8e36:	4252      	negs	r2, r2
    8e38:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    8e3c:	272d      	movs	r7, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    8e3e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    8e42:	e75c      	b.n	8cfe <z_cbvprintf_impl+0x4b6>
		switch (conv->specifier) {
    8e44:	2700      	movs	r7, #0
    8e46:	e75a      	b.n	8cfe <z_cbvprintf_impl+0x4b6>
		char sign = 0;
    8e48:	2700      	movs	r7, #0
				conv->flag_zero = false;
    8e4a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    8e4e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    8e52:	eba3 0309 	sub.w	r3, r3, r9
				conv->flag_zero = false;
    8e56:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    8e5a:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    8e5c:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    8e60:	f67f af5b 	bls.w	8d1a <z_cbvprintf_impl+0x4d2>
					conv->pad0_value = precision - (int)len;
    8e64:	ebab 0303 	sub.w	r3, fp, r3
    8e68:	9313      	str	r3, [sp, #76]	; 0x4c
    8e6a:	e756      	b.n	8d1a <z_cbvprintf_impl+0x4d2>
			if (value->ptr != NULL) {
    8e6c:	9810      	ldr	r0, [sp, #64]	; 0x40
    8e6e:	b380      	cbz	r0, 8ed2 <z_cbvprintf_impl+0x68a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    8e70:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
    8e74:	ab0a      	add	r3, sp, #40	; 0x28
    8e76:	2100      	movs	r1, #0
    8e78:	9600      	str	r6, [sp, #0]
    8e7a:	aa12      	add	r2, sp, #72	; 0x48
    8e7c:	f7ff fc98 	bl	87b0 <encode_uint>
				conv->altform_0c = true;
    8e80:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    8e84:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    8e88:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    8e8c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    8e90:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    8e94:	4681      	mov	r9, r0
				conv->altform_0c = true;
    8e96:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    8e9a:	dad5      	bge.n	8e48 <z_cbvprintf_impl+0x600>
		if (bps == NULL) {
    8e9c:	2800      	cmp	r0, #0
    8e9e:	f43f aedc 	beq.w	8c5a <z_cbvprintf_impl+0x412>
		char sign = 0;
    8ea2:	2700      	movs	r7, #0
		size_t nj_len = (bpe - bps);
    8ea4:	eba6 0309 	sub.w	r3, r6, r9
		if (sign != 0) {
    8ea8:	e791      	b.n	8dce <z_cbvprintf_impl+0x586>
				store_count(conv, value->ptr, count);
    8eaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    8eac:	2907      	cmp	r1, #7
    8eae:	f63f aed4 	bhi.w	8c5a <z_cbvprintf_impl+0x412>
    8eb2:	e8df f001 	tbb	[pc, r1]
    8eb6:	040c      	.short	0x040c
    8eb8:	08080c06 	.word	0x08080c06
    8ebc:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    8ebe:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    8ec0:	e6cb      	b.n	8c5a <z_cbvprintf_impl+0x412>
		*(short *)dp = (short)count;
    8ec2:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    8ec4:	e6c9      	b.n	8c5a <z_cbvprintf_impl+0x412>
		*(intmax_t *)dp = (intmax_t)count;
    8ec6:	17ea      	asrs	r2, r5, #31
    8ec8:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    8ecc:	e6c5      	b.n	8c5a <z_cbvprintf_impl+0x412>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    8ece:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    8ed0:	e6c3      	b.n	8c5a <z_cbvprintf_impl+0x412>
			bpe = bps + 5;
    8ed2:	4e31      	ldr	r6, [pc, #196]	; (8f98 <z_cbvprintf_impl+0x750>)
		char sign = 0;
    8ed4:	4607      	mov	r7, r0
		size_t nj_len = (bpe - bps);
    8ed6:	2305      	movs	r3, #5
    8ed8:	f1a6 0905 	sub.w	r9, r6, #5
    8edc:	e777      	b.n	8dce <z_cbvprintf_impl+0x586>
		} else if (conv->altform_0) {
    8ede:	0708      	lsls	r0, r1, #28
			nj_len += 1U;
    8ee0:	bf48      	it	mi
    8ee2:	3301      	addmi	r3, #1
    8ee4:	e77b      	b.n	8dde <z_cbvprintf_impl+0x596>
					OUTC(pad);
    8ee6:	4618      	mov	r0, r3
    8ee8:	9307      	str	r3, [sp, #28]
    8eea:	4651      	mov	r1, sl
    8eec:	9b03      	ldr	r3, [sp, #12]
    8eee:	4798      	blx	r3
    8ef0:	2800      	cmp	r0, #0
    8ef2:	9b07      	ldr	r3, [sp, #28]
    8ef4:	da04      	bge.n	8f00 <z_cbvprintf_impl+0x6b8>
#undef OUTS
#undef OUTC
}
    8ef6:	b017      	add	sp, #92	; 0x5c
    8ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    8efc:	2320      	movs	r3, #32
					pad = '0';
    8efe:	46c3      	mov	fp, r8
				while (width-- > 0) {
    8f00:	4659      	mov	r1, fp
    8f02:	2900      	cmp	r1, #0
    8f04:	f10b 3bff 	add.w	fp, fp, #4294967295
    8f08:	dced      	bgt.n	8ee6 <z_cbvprintf_impl+0x69e>
    8f0a:	4445      	add	r5, r8
    8f0c:	46d8      	mov	r8, fp
    8f0e:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    8f10:	b137      	cbz	r7, 8f20 <z_cbvprintf_impl+0x6d8>
			OUTC(sign);
    8f12:	4651      	mov	r1, sl
    8f14:	4638      	mov	r0, r7
    8f16:	9b03      	ldr	r3, [sp, #12]
    8f18:	4798      	blx	r3
    8f1a:	2800      	cmp	r0, #0
    8f1c:	dbeb      	blt.n	8ef6 <z_cbvprintf_impl+0x6ae>
    8f1e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    8f20:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    8f24:	06da      	lsls	r2, r3, #27
    8f26:	d401      	bmi.n	8f2c <z_cbvprintf_impl+0x6e4>
    8f28:	071b      	lsls	r3, r3, #28
    8f2a:	d506      	bpl.n	8f3a <z_cbvprintf_impl+0x6f2>
				OUTC('0');
    8f2c:	4651      	mov	r1, sl
    8f2e:	2030      	movs	r0, #48	; 0x30
    8f30:	9b03      	ldr	r3, [sp, #12]
    8f32:	4798      	blx	r3
    8f34:	2800      	cmp	r0, #0
    8f36:	dbde      	blt.n	8ef6 <z_cbvprintf_impl+0x6ae>
    8f38:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    8f3a:	9b06      	ldr	r3, [sp, #24]
    8f3c:	b13b      	cbz	r3, 8f4e <z_cbvprintf_impl+0x706>
				OUTC(conv->specifier);
    8f3e:	4651      	mov	r1, sl
    8f40:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    8f44:	9b03      	ldr	r3, [sp, #12]
    8f46:	4798      	blx	r3
    8f48:	2800      	cmp	r0, #0
    8f4a:	dbd4      	blt.n	8ef6 <z_cbvprintf_impl+0x6ae>
    8f4c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    8f4e:	9f05      	ldr	r7, [sp, #20]
    8f50:	442f      	add	r7, r5
    8f52:	e006      	b.n	8f62 <z_cbvprintf_impl+0x71a>
				OUTC('0');
    8f54:	4651      	mov	r1, sl
    8f56:	2030      	movs	r0, #48	; 0x30
    8f58:	9b03      	ldr	r3, [sp, #12]
    8f5a:	4798      	blx	r3
    8f5c:	2800      	cmp	r0, #0
    8f5e:	dbca      	blt.n	8ef6 <z_cbvprintf_impl+0x6ae>
    8f60:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    8f62:	1b7b      	subs	r3, r7, r5
    8f64:	2b00      	cmp	r3, #0
    8f66:	dcf5      	bgt.n	8f54 <z_cbvprintf_impl+0x70c>
			OUTS(bps, bpe);
    8f68:	4633      	mov	r3, r6
    8f6a:	464a      	mov	r2, r9
    8f6c:	4651      	mov	r1, sl
    8f6e:	9803      	ldr	r0, [sp, #12]
    8f70:	f006 fb64 	bl	f63c <outs>
    8f74:	2800      	cmp	r0, #0
    8f76:	dbbe      	blt.n	8ef6 <z_cbvprintf_impl+0x6ae>
    8f78:	4405      	add	r5, r0
		while (width > 0) {
    8f7a:	44a8      	add	r8, r5
    8f7c:	eba8 0305 	sub.w	r3, r8, r5
    8f80:	2b00      	cmp	r3, #0
    8f82:	f77f ae6a 	ble.w	8c5a <z_cbvprintf_impl+0x412>
			OUTC(' ');
    8f86:	4651      	mov	r1, sl
    8f88:	2020      	movs	r0, #32
    8f8a:	9b03      	ldr	r3, [sp, #12]
    8f8c:	4798      	blx	r3
    8f8e:	2800      	cmp	r0, #0
    8f90:	dbb1      	blt.n	8ef6 <z_cbvprintf_impl+0x6ae>
    8f92:	3501      	adds	r5, #1
			--width;
    8f94:	e7f2      	b.n	8f7c <z_cbvprintf_impl+0x734>
    8f96:	bf00      	nop
    8f98:	00011166 	.word	0x00011166

00008f9c <nordicsemi_nrf91_init>:
	__asm__ volatile(
    8f9c:	f04f 0220 	mov.w	r2, #32
    8fa0:	f3ef 8311 	mrs	r3, BASEPRI
    8fa4:	f382 8812 	msr	BASEPRI_MAX, r2
    8fa8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    8fac:	2101      	movs	r1, #1
    8fae:	4a04      	ldr	r2, [pc, #16]	; (8fc0 <nordicsemi_nrf91_init+0x24>)
    8fb0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    8fb4:	f383 8811 	msr	BASEPRI, r3
    8fb8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    8fbc:	2000      	movs	r0, #0
    8fbe:	4770      	bx	lr
    8fc0:	40039000 	.word	0x40039000

00008fc4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    8fc4:	b120      	cbz	r0, 8fd0 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    8fc6:	4b03      	ldr	r3, [pc, #12]	; (8fd4 <arch_busy_wait+0x10>)
    8fc8:	0180      	lsls	r0, r0, #6
    8fca:	f043 0301 	orr.w	r3, r3, #1
    8fce:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    8fd0:	4770      	bx	lr
    8fd2:	bf00      	nop
    8fd4:	00010dd0 	.word	0x00010dd0

00008fd8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    8fd8:	f006 bdf2 	b.w	fbc0 <SystemInit>

00008fdc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    8fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8fe0:	4605      	mov	r5, r0
	__asm__ volatile(
    8fe2:	f04f 0320 	mov.w	r3, #32
    8fe6:	f3ef 8611 	mrs	r6, BASEPRI
    8fea:	f383 8812 	msr	BASEPRI_MAX, r3
    8fee:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    8ff2:	f04f 090c 	mov.w	r9, #12
	return list->head;
    8ff6:	4b0d      	ldr	r3, [pc, #52]	; (902c <pm_state_notify+0x50>)
    8ff8:	4f0d      	ldr	r7, [pc, #52]	; (9030 <pm_state_notify+0x54>)
    8ffa:	681c      	ldr	r4, [r3, #0]
    8ffc:	f8df 8034 	ldr.w	r8, [pc, #52]	; 9034 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    9000:	b92c      	cbnz	r4, 900e <pm_state_notify+0x32>
	__asm__ volatile(
    9002:	f386 8811 	msr	BASEPRI, r6
    9006:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    900a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    900e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    9012:	2d00      	cmp	r5, #0
    9014:	bf18      	it	ne
    9016:	4613      	movne	r3, r2
		if (callback) {
    9018:	b12b      	cbz	r3, 9026 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    901a:	f898 2010 	ldrb.w	r2, [r8, #16]
    901e:	fb09 f202 	mul.w	r2, r9, r2
    9022:	5cb8      	ldrb	r0, [r7, r2]
    9024:	4798      	blx	r3
	return node->next;
    9026:	6824      	ldr	r4, [r4, #0]
    9028:	e7ea      	b.n	9000 <pm_state_notify+0x24>
    902a:	bf00      	nop
    902c:	2000c918 	.word	0x2000c918
    9030:	2000c90c 	.word	0x2000c90c
    9034:	2000ce78 	.word	0x2000ce78

00009038 <pm_resume_devices>:
{
    9038:	b570      	push	{r4, r5, r6, lr}
	for (int i = (num_susp - 1); i >= 0; i--) {
    903a:	4d08      	ldr	r5, [pc, #32]	; (905c <pm_resume_devices+0x24>)
		pm_device_action_run(__pm_device_slots_start[i],
    903c:	4e08      	ldr	r6, [pc, #32]	; (9060 <pm_resume_devices+0x28>)
	for (int i = (num_susp - 1); i >= 0; i--) {
    903e:	682c      	ldr	r4, [r5, #0]
    9040:	3c01      	subs	r4, #1
    9042:	2c00      	cmp	r4, #0
    9044:	da02      	bge.n	904c <pm_resume_devices+0x14>
	num_susp = 0;
    9046:	2300      	movs	r3, #0
    9048:	602b      	str	r3, [r5, #0]
}
    904a:	bd70      	pop	{r4, r5, r6, pc}
		pm_device_action_run(__pm_device_slots_start[i],
    904c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    9050:	2101      	movs	r1, #1
    9052:	f000 f96f 	bl	9334 <pm_device_action_run>
	for (int i = (num_susp - 1); i >= 0; i--) {
    9056:	3c01      	subs	r4, #1
    9058:	e7f3      	b.n	9042 <pm_resume_devices+0xa>
    905a:	bf00      	nop
    905c:	2000c8fc 	.word	0x2000c8fc
    9060:	2000c6aa 	.word	0x2000c6aa

00009064 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    9064:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    9066:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    9068:	4b16      	ldr	r3, [pc, #88]	; (90c4 <pm_system_resume+0x60>)
    906a:	7c1c      	ldrb	r4, [r3, #16]
    906c:	f004 031f 	and.w	r3, r4, #31
    9070:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9072:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9074:	4b14      	ldr	r3, [pc, #80]	; (90c8 <pm_system_resume+0x64>)
    9076:	0961      	lsrs	r1, r4, #5
    9078:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    907c:	e8d3 1fef 	ldaex	r1, [r3]
    9080:	ea01 0500 	and.w	r5, r1, r0
    9084:	e8c3 5fe6 	stlex	r6, r5, [r3]
    9088:	2e00      	cmp	r6, #0
    908a:	d1f7      	bne.n	907c <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    908c:	420a      	tst	r2, r1
    908e:	d013      	beq.n	90b8 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    9090:	4b0e      	ldr	r3, [pc, #56]	; (90cc <pm_system_resume+0x68>)
    9092:	4d0f      	ldr	r5, [pc, #60]	; (90d0 <pm_system_resume+0x6c>)
    9094:	b18b      	cbz	r3, 90ba <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    9096:	230c      	movs	r3, #12
    9098:	4363      	muls	r3, r4
    909a:	18ea      	adds	r2, r5, r3
    909c:	7851      	ldrb	r1, [r2, #1]
    909e:	5ce8      	ldrb	r0, [r5, r3]
    90a0:	f006 faf0 	bl	f684 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    90a4:	2000      	movs	r0, #0
    90a6:	f7ff ff99 	bl	8fdc <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    90aa:	230c      	movs	r3, #12
    90ac:	435c      	muls	r4, r3
    90ae:	2300      	movs	r3, #0
    90b0:	192a      	adds	r2, r5, r4
    90b2:	512b      	str	r3, [r5, r4]
    90b4:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    90b8:	bd70      	pop	{r4, r5, r6, pc}
    90ba:	f383 8811 	msr	BASEPRI, r3
    90be:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    90c2:	e7ef      	b.n	90a4 <pm_system_resume+0x40>
    90c4:	2000ce78 	.word	0x2000ce78
    90c8:	2000c920 	.word	0x2000c920
    90cc:	0000f685 	.word	0x0000f685
    90d0:	2000c90c 	.word	0x2000c90c

000090d4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    90d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t id = CURRENT_CPU;
    90d8:	4b63      	ldr	r3, [pc, #396]	; (9268 <pm_system_suspend+0x194>)
{
    90da:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    90dc:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    90de:	f04f 0320 	mov.w	r3, #32
    90e2:	f3ef 8811 	mrs	r8, BASEPRI
    90e6:	f383 8812 	msr	BASEPRI_MAX, r3
    90ea:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    90ee:	240c      	movs	r4, #12
    90f0:	436c      	muls	r4, r5
    90f2:	4b5e      	ldr	r3, [pc, #376]	; (926c <pm_system_suspend+0x198>)
    90f4:	4e5e      	ldr	r6, [pc, #376]	; (9270 <pm_system_suspend+0x19c>)
    90f6:	5d19      	ldrb	r1, [r3, r4]
    90f8:	191a      	adds	r2, r3, r4
    90fa:	2900      	cmp	r1, #0
    90fc:	d06f      	beq.n	91de <pm_system_suspend+0x10a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    90fe:	ca07      	ldmia	r2, {r0, r1, r2}
    9100:	eb06 0c04 	add.w	ip, r6, r4
    9104:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    9108:	2200      	movs	r2, #0
    910a:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    910c:	f388 8811 	msr	BASEPRI, r8
    9110:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    9114:	230c      	movs	r3, #12
    9116:	436b      	muls	r3, r5
    9118:	18f2      	adds	r2, r6, r3
    911a:	5cf3      	ldrb	r3, [r6, r3]
    911c:	2b00      	cmp	r3, #0
    911e:	f000 809e 	beq.w	925e <pm_system_suspend+0x18a>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    9122:	1c7b      	adds	r3, r7, #1
    9124:	d010      	beq.n	9148 <pm_system_suspend+0x74>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    9126:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    912a:	2100      	movs	r1, #0
    912c:	f8d2 c008 	ldr.w	ip, [r2, #8]
    9130:	4c50      	ldr	r4, [pc, #320]	; (9274 <pm_system_suspend+0x1a0>)
    9132:	2300      	movs	r3, #0
    9134:	fbec 4100 	umlal	r4, r1, ip, r0
    9138:	4a4f      	ldr	r2, [pc, #316]	; (9278 <pm_system_suspend+0x1a4>)
    913a:	4620      	mov	r0, r4
    913c:	f7ff f802 	bl	8144 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    9140:	2101      	movs	r1, #1
    9142:	1a38      	subs	r0, r7, r0
    9144:	f001 fa4a 	bl	a5dc <sys_clock_set_timeout>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    9148:	4f4c      	ldr	r7, [pc, #304]	; (927c <pm_system_suspend+0x1a8>)
    914a:	e8d7 4fef 	ldaex	r4, [r7]
    914e:	3c01      	subs	r4, #1
    9150:	e8c7 4fe3 	stlex	r3, r4, [r7]
    9154:	2b00      	cmp	r3, #0
    9156:	d1f8      	bne.n	914a <pm_system_suspend+0x76>
    9158:	46b9      	mov	r9, r7
			     z_cpus_pm_state[id].exit_latency_us),
				     true);
	}

#if defined(CONFIG_PM_DEVICE) && !defined(CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE)
	if (atomic_sub(&z_cpus_active, 1) == 1) {
    915a:	b99c      	cbnz	r4, 9184 <pm_system_suspend+0xb0>
		if (z_cpus_pm_state[id].state != PM_STATE_RUNTIME_IDLE) {
    915c:	230c      	movs	r3, #12
    915e:	436b      	muls	r3, r5
    9160:	5cf3      	ldrb	r3, [r6, r3]
    9162:	2b01      	cmp	r3, #1
    9164:	d00e      	beq.n	9184 <pm_system_suspend+0xb0>
	devc = z_device_get_all_static(&devs);
    9166:	a801      	add	r0, sp, #4
    9168:	f003 febc 	bl	cee4 <z_device_get_all_static>
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
    916c:	231c      	movs	r3, #28
    916e:	4358      	muls	r0, r3
	num_susp = 0;
    9170:	f8df a10c 	ldr.w	sl, [pc, #268]	; 9280 <pm_system_suspend+0x1ac>
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
    9174:	381c      	subs	r0, #28
	num_susp = 0;
    9176:	f8ca 4000 	str.w	r4, [sl]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
    917a:	9c01      	ldr	r4, [sp, #4]
    917c:	4404      	add	r4, r0
    917e:	9b01      	ldr	r3, [sp, #4]
    9180:	429c      	cmp	r4, r3
    9182:	d237      	bcs.n	91f4 <pm_system_suspend+0x120>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    9184:	f004 fd04 	bl	db90 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    9188:	2001      	movs	r0, #1
    918a:	f7ff ff27 	bl	8fdc <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    918e:	4b3d      	ldr	r3, [pc, #244]	; (9284 <pm_system_suspend+0x1b0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9190:	096a      	lsrs	r2, r5, #5
    9192:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    9196:	2201      	movs	r2, #1
    9198:	f005 011f 	and.w	r1, r5, #31
    919c:	408a      	lsls	r2, r1
    919e:	e8d3 0fef 	ldaex	r0, [r3]
    91a2:	4310      	orrs	r0, r2
    91a4:	e8c3 0fe1 	stlex	r1, r0, [r3]
    91a8:	2900      	cmp	r1, #0
    91aa:	d1f8      	bne.n	919e <pm_system_suspend+0xca>
	if (pm_state_set != NULL) {
    91ac:	4b36      	ldr	r3, [pc, #216]	; (9288 <pm_system_suspend+0x1b4>)
    91ae:	b133      	cbz	r3, 91be <pm_system_suspend+0xea>
		pm_state_set(info->state, info->substate_id);
    91b0:	230c      	movs	r3, #12
    91b2:	436b      	muls	r3, r5
    91b4:	18f2      	adds	r2, r6, r3
    91b6:	7851      	ldrb	r1, [r2, #1]
    91b8:	5cf0      	ldrb	r0, [r6, r3]
    91ba:	f006 fa57 	bl	f66c <pm_state_set>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    91be:	e8d9 3fef 	ldaex	r3, [r9]
    91c2:	1c5a      	adds	r2, r3, #1
    91c4:	e8c9 2fe1 	stlex	r1, r2, [r9]
    91c8:	2900      	cmp	r1, #0
    91ca:	d1f8      	bne.n	91be <pm_system_suspend+0xea>
	state_set(&z_cpus_pm_state[id]);
	pm_stats_stop();

	/* Wake up sequence starts here */
#if defined(CONFIG_PM_DEVICE) && !defined(CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE)
	if (atomic_add(&z_cpus_active, 1) == 0) {
    91cc:	b90b      	cbnz	r3, 91d2 <pm_system_suspend+0xfe>
		pm_resume_devices();
    91ce:	f7ff ff33 	bl	9038 <pm_resume_devices>
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    91d2:	f7ff ff47 	bl	9064 <pm_system_resume>
	k_sched_unlock();
    91d6:	f004 fcef 	bl	dbb8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    91da:	2001      	movs	r0, #1
    91dc:	e040      	b.n	9260 <pm_system_suspend+0x18c>
		info = pm_policy_next_state(id, ticks);
    91de:	4601      	mov	r1, r0
    91e0:	4628      	mov	r0, r5
    91e2:	f000 f855 	bl	9290 <pm_policy_next_state>
		if (info != NULL) {
    91e6:	2800      	cmp	r0, #0
    91e8:	d090      	beq.n	910c <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    91ea:	c807      	ldmia	r0, {r0, r1, r2}
    91ec:	4434      	add	r4, r6
    91ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    91f2:	e78b      	b.n	910c <pm_system_suspend+0x38>
    91f4:	4620      	mov	r0, r4
    91f6:	f006 fece 	bl	ff96 <z_device_is_ready>
		if (!device_is_ready(dev) || pm_device_is_busy(dev) ||
    91fa:	b308      	cbz	r0, 9240 <pm_system_suspend+0x16c>
    91fc:	4620      	mov	r0, r4
    91fe:	f006 fa47 	bl	f690 <pm_device_is_busy>
    9202:	b9e8      	cbnz	r0, 9240 <pm_system_suspend+0x16c>
		    pm_device_state_is_locked(dev) ||
    9204:	4620      	mov	r0, r4
    9206:	f006 fa53 	bl	f6b0 <pm_device_state_is_locked>
		if (!device_is_ready(dev) || pm_device_is_busy(dev) ||
    920a:	b9c8      	cbnz	r0, 9240 <pm_system_suspend+0x16c>
		    pm_device_wakeup_is_enabled(dev) ||
    920c:	4620      	mov	r0, r4
    920e:	f006 fa47 	bl	f6a0 <pm_device_wakeup_is_enabled>
		    pm_device_state_is_locked(dev) ||
    9212:	4680      	mov	r8, r0
    9214:	b9a0      	cbnz	r0, 9240 <pm_system_suspend+0x16c>
		ret = pm_device_action_run(dev, PM_DEVICE_ACTION_SUSPEND);
    9216:	4601      	mov	r1, r0
    9218:	4620      	mov	r0, r4
    921a:	f000 f88b 	bl	9334 <pm_device_action_run>
		if ((ret == -ENOSYS) || (ret == -ENOTSUP) || (ret == -EALREADY)) {
    921e:	f020 0320 	bic.w	r3, r0, #32
    9222:	3378      	adds	r3, #120	; 0x78
    9224:	d00c      	beq.n	9240 <pm_system_suspend+0x16c>
    9226:	f110 0f86 	cmn.w	r0, #134	; 0x86
    922a:	d009      	beq.n	9240 <pm_system_suspend+0x16c>
		} else if (ret < 0) {
    922c:	2800      	cmp	r0, #0
    922e:	db09      	blt.n	9244 <pm_system_suspend+0x170>
		__pm_device_slots_start[num_susp] = dev;
    9230:	f8da 3000 	ldr.w	r3, [sl]
    9234:	4a15      	ldr	r2, [pc, #84]	; (928c <pm_system_suspend+0x1b8>)
    9236:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
		num_susp++;
    923a:	3301      	adds	r3, #1
    923c:	f8ca 3000 	str.w	r3, [sl]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
    9240:	3c1c      	subs	r4, #28
    9242:	e79c      	b.n	917e <pm_system_suspend+0xaa>
				pm_resume_devices();
    9244:	f7ff fef8 	bl	9038 <pm_resume_devices>
				z_cpus_pm_state[id].state = PM_STATE_ACTIVE;
    9248:	230c      	movs	r3, #12
    924a:	436b      	muls	r3, r5
    924c:	f806 8003 	strb.w	r8, [r6, r3]
    9250:	e8d7 3fef 	ldaex	r3, [r7]
    9254:	3301      	adds	r3, #1
    9256:	e8c7 3fe2 	stlex	r2, r3, [r7]
    925a:	2a00      	cmp	r2, #0
    925c:	d1f8      	bne.n	9250 <pm_system_suspend+0x17c>
		return false;
    925e:	2000      	movs	r0, #0
}
    9260:	b002      	add	sp, #8
    9262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9266:	bf00      	nop
    9268:	2000ce78 	.word	0x2000ce78
    926c:	2000c900 	.word	0x2000c900
    9270:	2000c90c 	.word	0x2000c90c
    9274:	000f423f 	.word	0x000f423f
    9278:	000f4240 	.word	0x000f4240
    927c:	2000c58c 	.word	0x2000c58c
    9280:	2000c8fc 	.word	0x2000c8fc
    9284:	2000c920 	.word	0x2000c920
    9288:	0000f66d 	.word	0x0000f66d
    928c:	2000c6aa 	.word	0x2000c6aa

00009290 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    9290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9294:	b085      	sub	sp, #20
    9296:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    9298:	a903      	add	r1, sp, #12
    929a:	f000 f843 	bl	9324 <pm_state_cpu_get_all>
    929e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    92a2:	4604      	mov	r4, r0
    92a4:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    92a8:	4b1b      	ldr	r3, [pc, #108]	; (9318 <pm_policy_next_state+0x88>)
    92aa:	9d03      	ldr	r5, [sp, #12]
    92ac:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    92b0:	1e43      	subs	r3, r0, #1
    92b2:	b21b      	sxth	r3, r3
    92b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    92b8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 931c <pm_policy_next_state+0x8c>
    92bc:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    92c0:	b924      	cbnz	r4, 92cc <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    92c2:	46a1      	mov	r9, r4
}
    92c4:	4648      	mov	r0, r9
    92c6:	b005      	add	sp, #20
    92c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    92cc:	46c4      	mov	ip, r8
    92ce:	4659      	mov	r1, fp
    92d0:	6868      	ldr	r0, [r5, #4]
    92d2:	2300      	movs	r3, #0
    92d4:	fbe0 c107 	umlal	ip, r1, r0, r7
    92d8:	4a11      	ldr	r2, [pc, #68]	; (9320 <pm_policy_next_state+0x90>)
    92da:	4660      	mov	r0, ip
    92dc:	f7fe ff32 	bl	8144 <__aeabi_uldivmod>
    92e0:	46c4      	mov	ip, r8
    92e2:	4659      	mov	r1, fp
    92e4:	9001      	str	r0, [sp, #4]
    92e6:	68a8      	ldr	r0, [r5, #8]
    92e8:	2300      	movs	r3, #0
    92ea:	fbe0 c107 	umlal	ip, r1, r0, r7
    92ee:	4a0c      	ldr	r2, [pc, #48]	; (9320 <pm_policy_next_state+0x90>)
    92f0:	4660      	mov	r0, ip
    92f2:	f7fe ff27 	bl	8144 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    92f6:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    92fa:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    92fc:	d001      	beq.n	9302 <pm_policy_next_state+0x72>
    92fe:	4582      	cmp	sl, r0
    9300:	d905      	bls.n	930e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    9302:	1c73      	adds	r3, r6, #1
    9304:	d0de      	beq.n	92c4 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    9306:	9b01      	ldr	r3, [sp, #4]
    9308:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    930a:	42b0      	cmp	r0, r6
    930c:	d9da      	bls.n	92c4 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    930e:	3c01      	subs	r4, #1
    9310:	b2a4      	uxth	r4, r4
    9312:	3d0c      	subs	r5, #12
    9314:	e7d4      	b.n	92c0 <pm_policy_next_state+0x30>
    9316:	bf00      	nop
    9318:	2000c590 	.word	0x2000c590
    931c:	000f423f 	.word	0x000f423f
    9320:	000f4240 	.word	0x000f4240

00009324 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    9324:	b908      	cbnz	r0, 932a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    9326:	4b02      	ldr	r3, [pc, #8]	; (9330 <pm_state_cpu_get_all+0xc>)
    9328:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    932a:	2000      	movs	r0, #0
    932c:	4770      	bx	lr
    932e:	bf00      	nop
    9330:	00010de0 	.word	0x00010de0

00009334 <pm_device_action_run>:
	}
}

int pm_device_action_run(const struct device *dev,
			 enum pm_device_action action)
{
    9334:	b570      	push	{r4, r5, r6, lr}
	struct pm_device *pm = dev->pm;
    9336:	6984      	ldr	r4, [r0, #24]
{
    9338:	4603      	mov	r3, r0
    933a:	460d      	mov	r5, r1
	int ret;

	if (pm == NULL) {
    933c:	b38c      	cbz	r4, 93a2 <pm_device_action_run+0x6e>
		return -ENOSYS;
	}

	if (pm_device_state_is_locked(dev)) {
    933e:	f006 f9b7 	bl	f6b0 <pm_device_state_is_locked>
    9342:	bb88      	cbnz	r0, 93a8 <pm_device_action_run+0x74>
		return -EPERM;
	}

	/* Validate action against current state */
	if (pm->state == action_target_state[action]) {
    9344:	481d      	ldr	r0, [pc, #116]	; (93bc <pm_device_action_run+0x88>)
    9346:	7a22      	ldrb	r2, [r4, #8]
    9348:	5c46      	ldrb	r6, [r0, r1]
    934a:	42b2      	cmp	r2, r6
    934c:	d02f      	beq.n	93ae <pm_device_action_run+0x7a>
		return -EALREADY;
	}
	if (pm->state != action_expected_state[action]) {
    934e:	481c      	ldr	r0, [pc, #112]	; (93c0 <pm_device_action_run+0x8c>)
    9350:	5c40      	ldrb	r0, [r0, r1]
    9352:	4290      	cmp	r0, r2
    9354:	d12e      	bne.n	93b4 <pm_device_action_run+0x80>
		return -ENOTSUP;
	}

	ret = pm->action_cb(dev, action);
    9356:	4618      	mov	r0, r3
    9358:	68e2      	ldr	r2, [r4, #12]
    935a:	4790      	blx	r2
	if (ret < 0) {
    935c:	2800      	cmp	r0, #0
    935e:	da11      	bge.n	9384 <pm_device_action_run+0x50>
		 * physical behavior.
		 *
		 * The function will still return the error code so the domain
		 * can take whatever action is more appropriated.
		 */
		switch (action) {
    9360:	2d02      	cmp	r5, #2
    9362:	d00d      	beq.n	9380 <pm_device_action_run+0x4c>
    9364:	2d03      	cmp	r5, #3
    9366:	d10c      	bne.n	9382 <pm_device_action_run+0x4e>
		case PM_DEVICE_ACTION_TURN_ON:
			/* Store an error flag when the transition explicitly fails */
			if (ret != -ENOTSUP) {
    9368:	f110 0f86 	cmn.w	r0, #134	; 0x86
    936c:	d008      	beq.n	9380 <pm_device_action_run+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    936e:	1d23      	adds	r3, r4, #4
    9370:	e8d3 1fef 	ldaex	r1, [r3]
    9374:	f041 0102 	orr.w	r1, r1, #2
    9378:	e8c3 1fe2 	stlex	r2, r1, [r3]
    937c:	2a00      	cmp	r2, #0
    937e:	d1f7      	bne.n	9370 <pm_device_action_run+0x3c>
				atomic_set_bit(&pm->flags, PM_DEVICE_FLAG_TURN_ON_FAILED);
			}
			__fallthrough;
		case PM_DEVICE_ACTION_TURN_OFF:
			pm->state = action_target_state[action];
    9380:	7226      	strb	r6, [r4, #8]
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
		atomic_clear_bit(&pm->flags, PM_DEVICE_FLAG_TURN_ON_FAILED);
	}

	return 0;
}
    9382:	bd70      	pop	{r4, r5, r6, pc}
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
    9384:	2d02      	cmp	r5, #2
	pm->state = action_target_state[action];
    9386:	7226      	strb	r6, [r4, #8]
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
    9388:	d001      	beq.n	938e <pm_device_action_run+0x5a>
	return 0;
    938a:	2000      	movs	r0, #0
    938c:	e7f9      	b.n	9382 <pm_device_action_run+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    938e:	3404      	adds	r4, #4
    9390:	e8d4 3fef 	ldaex	r3, [r4]
    9394:	f023 0302 	bic.w	r3, r3, #2
    9398:	e8c4 3fe2 	stlex	r2, r3, [r4]
    939c:	2a00      	cmp	r2, #0
    939e:	d0f4      	beq.n	938a <pm_device_action_run+0x56>
    93a0:	e7f6      	b.n	9390 <pm_device_action_run+0x5c>
		return -ENOSYS;
    93a2:	f06f 0057 	mvn.w	r0, #87	; 0x57
    93a6:	e7ec      	b.n	9382 <pm_device_action_run+0x4e>
		return -EPERM;
    93a8:	f04f 30ff 	mov.w	r0, #4294967295
    93ac:	e7e9      	b.n	9382 <pm_device_action_run+0x4e>
		return -EALREADY;
    93ae:	f06f 0077 	mvn.w	r0, #119	; 0x77
    93b2:	e7e6      	b.n	9382 <pm_device_action_run+0x4e>
		return -ENOTSUP;
    93b4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    93b8:	e7e3      	b.n	9382 <pm_device_action_run+0x4e>
    93ba:	bf00      	nop
    93bc:	00011191 	.word	0x00011191
    93c0:	0001118d 	.word	0x0001118d

000093c4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    93c4:	4901      	ldr	r1, [pc, #4]	; (93cc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    93c6:	2210      	movs	r2, #16
	str	r2, [r1]
    93c8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    93ca:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    93cc:	e000ed10 	.word	0xe000ed10

000093d0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    93d0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    93d2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    93d4:	f380 8811 	msr	BASEPRI, r0
	isb
    93d8:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    93dc:	f3bf 8f4f 	dsb	sy
    93e0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    93e2:	b662      	cpsie	i
	isb
    93e4:	f3bf 8f6f 	isb	sy

	bx	lr
    93e8:	4770      	bx	lr
    93ea:	bf00      	nop

000093ec <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    93ec:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    93ee:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    93f0:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    93f4:	f3bf 8f4f 	dsb	sy
    93f8:	bf20      	wfe

	msr	BASEPRI, r0
    93fa:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    93fe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    9400:	4770      	bx	lr
    9402:	bf00      	nop

00009404 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    9404:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    9406:	2800      	cmp	r0, #0
    9408:	db07      	blt.n	941a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    940a:	2301      	movs	r3, #1
    940c:	0941      	lsrs	r1, r0, #5
    940e:	4a03      	ldr	r2, [pc, #12]	; (941c <arch_irq_enable+0x18>)
    9410:	f000 001f 	and.w	r0, r0, #31
    9414:	4083      	lsls	r3, r0
    9416:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    941a:	4770      	bx	lr
    941c:	e000e100 	.word	0xe000e100

00009420 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    9420:	4b05      	ldr	r3, [pc, #20]	; (9438 <arch_irq_is_enabled+0x18>)
    9422:	0942      	lsrs	r2, r0, #5
    9424:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    9428:	2301      	movs	r3, #1
    942a:	f000 001f 	and.w	r0, r0, #31
    942e:	fa03 f000 	lsl.w	r0, r3, r0
}
    9432:	4010      	ands	r0, r2
    9434:	4770      	bx	lr
    9436:	bf00      	nop
    9438:	e000e100 	.word	0xe000e100

0000943c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    943c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    943e:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    9440:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9444:	bfac      	ite	ge
    9446:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    944a:	4b06      	ldrlt	r3, [pc, #24]	; (9464 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    944c:	ea4f 1141 	mov.w	r1, r1, lsl #5
    9450:	b2c9      	uxtb	r1, r1
    9452:	bfab      	itete	ge
    9454:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9458:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    945c:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9460:	5419      	strblt	r1, [r3, r0]
}
    9462:	4770      	bx	lr
    9464:	e000ed14 	.word	0xe000ed14

00009468 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    9468:	bf30      	wfi
    b z_SysNmiOnReset
    946a:	f7ff bffd 	b.w	9468 <z_SysNmiOnReset>
    946e:	bf00      	nop

00009470 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    9470:	4a0b      	ldr	r2, [pc, #44]	; (94a0 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    9472:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    9474:	4b0b      	ldr	r3, [pc, #44]	; (94a4 <z_arm_prep_c+0x34>)
    9476:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    947a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    947c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9480:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    9484:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    9488:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    948c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    9490:	f003 fd7a 	bl	cf88 <z_bss_zero>
	z_data_copy();
    9494:	f004 fcc8 	bl	de28 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    9498:	f000 fa0e 	bl	98b8 <z_arm_interrupt_init>
	z_cstart();
    949c:	f003 fdb4 	bl	d008 <z_cstart>
    94a0:	00008000 	.word	0x00008000
    94a4:	e000ed00 	.word	0xe000ed00

000094a8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    94a8:	4a09      	ldr	r2, [pc, #36]	; (94d0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    94aa:	490a      	ldr	r1, [pc, #40]	; (94d4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    94ac:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    94ae:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    94b0:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    94b2:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    94b4:	4908      	ldr	r1, [pc, #32]	; (94d8 <arch_swap+0x30>)
    94b6:	684b      	ldr	r3, [r1, #4]
    94b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    94bc:	604b      	str	r3, [r1, #4]
    94be:	2300      	movs	r3, #0
    94c0:	f383 8811 	msr	BASEPRI, r3
    94c4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    94c8:	6893      	ldr	r3, [r2, #8]
}
    94ca:	6f98      	ldr	r0, [r3, #120]	; 0x78
    94cc:	4770      	bx	lr
    94ce:	bf00      	nop
    94d0:	2000ce78 	.word	0x2000ce78
    94d4:	000110a8 	.word	0x000110a8
    94d8:	e000ed00 	.word	0xe000ed00

000094dc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    94dc:	4915      	ldr	r1, [pc, #84]	; (9534 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    94de:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    94e0:	f882 e07d 	strb.w	lr, [r2, #125]	; 0x7d
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    94e4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    94e8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    94ea:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    94ee:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    94f2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    94f4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    94f8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    94fc:	4f0e      	ldr	r7, [pc, #56]	; (9538 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    94fe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    9502:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    9504:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    9506:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    9508:	f992 e07d 	ldrsb.w	lr, [r2, #125]	; 0x7d

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    950c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    950e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    9510:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    9512:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    9516:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    951a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    951e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    9522:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    9526:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    9528:	f006 f8db 	bl	f6e2 <configure_builtin_stack_guard>
    pop {r2, lr}
    952c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    9530:	4770      	bx	lr
    9532:	0000      	.short	0x0000
    ldr r1, =_kernel
    9534:	2000ce78 	.word	0x2000ce78
    ldr v4, =_SCS_ICSR
    9538:	e000ed04 	.word	0xe000ed04

0000953c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    953c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    9540:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    9542:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    9546:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    954a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    954c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    9550:	2902      	cmp	r1, #2
    beq _oops
    9552:	d0ff      	beq.n	9554 <_oops>

00009554 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    9554:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    9556:	f006 f8b5 	bl	f6c4 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    955a:	bd01      	pop	{r0, pc}

0000955c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    955c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    9560:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    9562:	490c      	ldr	r1, [pc, #48]	; (9594 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
    9564:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    9568:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    956a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    956e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    9572:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    9574:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    9578:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    957c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    9580:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    9584:	2300      	movs	r3, #0
    9586:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    9588:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    958c:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    958e:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    9590:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    9592:	4770      	bx	lr
    9594:	0000f0e3 	.word	0x0000f0e3

00009598 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    9598:	4b08      	ldr	r3, [pc, #32]	; (95bc <arch_switch_to_main_thread+0x24>)
    959a:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    959c:	6e43      	ldr	r3, [r0, #100]	; 0x64
    959e:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    95a2:	4610      	mov	r0, r2
    95a4:	f381 8809 	msr	PSP, r1
    95a8:	2100      	movs	r1, #0
    95aa:	b663      	cpsie	if
    95ac:	f381 8811 	msr	BASEPRI, r1
    95b0:	f3bf 8f6f 	isb	sy
    95b4:	2200      	movs	r2, #0
    95b6:	2300      	movs	r3, #0
    95b8:	f005 fd93 	bl	f0e2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    95bc:	2000ce78 	.word	0x2000ce78

000095c0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    95c0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    95c2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    95c4:	4a0b      	ldr	r2, [pc, #44]	; (95f4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    95c6:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    95c8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    95ca:	bf1e      	ittt	ne
	movne	r1, #0
    95cc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    95ce:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    95d0:	f006 fd92 	blne	100f8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    95d4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    95d6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    95da:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    95de:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    95e2:	4905      	ldr	r1, [pc, #20]	; (95f8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    95e4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    95e6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    95e8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    95ea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    95ee:	4903      	ldr	r1, [pc, #12]	; (95fc <_isr_wrapper+0x3c>)
	bx r1
    95f0:	4708      	bx	r1
    95f2:	0000      	.short	0x0000
	ldr r2, =_kernel
    95f4:	2000ce78 	.word	0x2000ce78
	ldr r1, =_sw_isr_table
    95f8:	00010afc 	.word	0x00010afc
	ldr r1, =z_arm_int_exit
    95fc:	00009601 	.word	0x00009601

00009600 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    9600:	4b04      	ldr	r3, [pc, #16]	; (9614 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    9602:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    9604:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    9606:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    9608:	d003      	beq.n	9612 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    960a:	4903      	ldr	r1, [pc, #12]	; (9618 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    960c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    9610:	600a      	str	r2, [r1, #0]

00009612 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    9612:	4770      	bx	lr
	ldr r3, =_kernel
    9614:	2000ce78 	.word	0x2000ce78
	ldr r1, =_SCS_ICSR
    9618:	e000ed04 	.word	0xe000ed04

0000961c <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    961c:	4b15      	ldr	r3, [pc, #84]	; (9674 <usage_fault.constprop.0+0x58>)
    961e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    9620:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    9624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    9626:	bf14      	ite	ne
    9628:	201e      	movne	r0, #30
    962a:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    962c:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    9630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    9632:	bf18      	it	ne
    9634:	201f      	movne	r0, #31
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    9636:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    963a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
    963c:	bf18      	it	ne
    963e:	2002      	movne	r0, #2
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    9640:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    9644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    9646:	bf18      	it	ne
    9648:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    964a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    964e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    9650:	bf18      	it	ne
    9652:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    9654:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    9658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    965a:	bf18      	it	ne
    965c:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    965e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    9662:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	return reason;
}
    9664:	bf18      	it	ne
    9666:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    9668:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    966c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    9670:	629a      	str	r2, [r3, #40]	; 0x28
}
    9672:	4770      	bx	lr
    9674:	e000ed00 	.word	0xe000ed00

00009678 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    9678:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    967a:	4b19      	ldr	r3, [pc, #100]	; (96e0 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    967c:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    967e:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    9680:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    9682:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    9686:	bf14      	ite	ne
    9688:	2017      	movne	r0, #23
    968a:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    968c:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    9690:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    9692:	bf18      	it	ne
    9694:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    9696:	05a4      	lsls	r4, r4, #22
    9698:	d509      	bpl.n	96ae <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    969a:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    969c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    969e:	0400      	lsls	r0, r0, #16
    96a0:	d504      	bpl.n	96ac <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    96a2:	b11a      	cbz	r2, 96ac <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    96a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    96a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    96aa:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    96ac:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    96ae:	4b0c      	ldr	r3, [pc, #48]	; (96e0 <bus_fault.constprop.0+0x68>)
    96b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    96b2:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    96b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    96b8:	bf18      	it	ne
    96ba:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    96bc:	05d2      	lsls	r2, r2, #23
    96be:	d40c      	bmi.n	96da <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    96c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    96c2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    96c6:	bf18      	it	ne
    96c8:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    96ca:	4a05      	ldr	r2, [pc, #20]	; (96e0 <bus_fault.constprop.0+0x68>)
    96cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    96ce:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    96d2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    96d4:	2300      	movs	r3, #0
    96d6:	700b      	strb	r3, [r1, #0]
}
    96d8:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    96da:	201b      	movs	r0, #27
    96dc:	e7f5      	b.n	96ca <bus_fault.constprop.0+0x52>
    96de:	bf00      	nop
    96e0:	e000ed00 	.word	0xe000ed00

000096e4 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    96e4:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    96e6:	4b1c      	ldr	r3, [pc, #112]	; (9758 <mem_manage_fault.constprop.0+0x74>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    96e8:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    96ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    96ec:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    96ee:	f010 0f10 	tst.w	r0, #16
    96f2:	bf14      	ite	ne
    96f4:	2011      	movne	r0, #17
    96f6:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    96f8:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    96fc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    96fe:	bf18      	it	ne
    9700:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    9702:	07a4      	lsls	r4, r4, #30
    9704:	d509      	bpl.n	971a <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
    9706:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    9708:	6a98      	ldr	r0, [r3, #40]	; 0x28
    970a:	0600      	lsls	r0, r0, #24
    970c:	d504      	bpl.n	9718 <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    970e:	b11a      	cbz	r2, 9718 <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    9710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9712:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    9716:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    9718:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    971a:	4b0f      	ldr	r3, [pc, #60]	; (9758 <mem_manage_fault.constprop.0+0x74>)
    971c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    971e:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    9722:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    9724:	bf18      	it	ne
    9726:	2014      	movne	r0, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    9728:	f012 0f20 	tst.w	r2, #32
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    972c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    972e:	bf18      	it	ne
    9730:	2015      	movne	r0, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    9732:	06d4      	lsls	r4, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    9734:	bf58      	it	pl
    9736:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    9738:	4b07      	ldr	r3, [pc, #28]	; (9758 <mem_manage_fault.constprop.0+0x74>)
    973a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    973c:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    973e:	bf42      	ittt	mi
    9740:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    9742:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    9746:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    9748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    974a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    974e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    9750:	2300      	movs	r3, #0
    9752:	700b      	strb	r3, [r1, #0]
}
    9754:	bd10      	pop	{r4, pc}
    9756:	bf00      	nop
    9758:	e000ed00 	.word	0xe000ed00

0000975c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    975c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    975e:	4b4a      	ldr	r3, [pc, #296]	; (9888 <_flash_used+0xbc>)
{
    9760:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    9762:	685b      	ldr	r3, [r3, #4]
    9764:	2500      	movs	r5, #0
{
    9766:	b08b      	sub	sp, #44	; 0x2c
    9768:	f3c3 0308 	ubfx	r3, r3, #0, #9
    976c:	f385 8811 	msr	BASEPRI, r5
    9770:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    9774:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    9778:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    977c:	d116      	bne.n	97ac <z_arm_fault+0x50>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    977e:	07d6      	lsls	r6, r2, #31
    9780:	d414      	bmi.n	97ac <z_arm_fault+0x50>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    9782:	0655      	lsls	r5, r2, #25
    9784:	d403      	bmi.n	978e <z_arm_fault+0x32>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    9786:	0710      	lsls	r0, r2, #28
    9788:	d404      	bmi.n	9794 <z_arm_fault+0x38>
			*nested_exc = true;
    978a:	2501      	movs	r5, #1
    978c:	e004      	b.n	9798 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    978e:	f012 0204 	ands.w	r2, r2, #4
    9792:	d000      	beq.n	9796 <z_arm_fault+0x3a>
			ptr_esf = (z_arch_esf_t *)psp;
    9794:	460c      	mov	r4, r1
	*nested_exc = false;
    9796:	2500      	movs	r5, #0
	*recoverable = false;
    9798:	2200      	movs	r2, #0
	switch (fault) {
    979a:	3b03      	subs	r3, #3
	*recoverable = false;
    979c:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    97a0:	2b03      	cmp	r3, #3
    97a2:	d805      	bhi.n	97b0 <z_arm_fault+0x54>
    97a4:	e8df f003 	tbb	[pc, r3]
    97a8:	5f666224 	.word	0x5f666224
		return NULL;
    97ac:	462c      	mov	r4, r5
    97ae:	e7f3      	b.n	9798 <z_arm_fault+0x3c>
    97b0:	2300      	movs	r3, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    97b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    97b6:	b9ca      	cbnz	r2, 97ec <_flash_used+0x20>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    97b8:	ae02      	add	r6, sp, #8
    97ba:	f104 0720 	add.w	r7, r4, #32
    97be:	4632      	mov	r2, r6
    97c0:	6820      	ldr	r0, [r4, #0]
    97c2:	6861      	ldr	r1, [r4, #4]
    97c4:	3408      	adds	r4, #8
    97c6:	c203      	stmia	r2!, {r0, r1}
    97c8:	42bc      	cmp	r4, r7
    97ca:	4616      	mov	r6, r2
    97cc:	d1f7      	bne.n	97be <z_arm_fault+0x62>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    97ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    97d0:	2d00      	cmp	r5, #0
    97d2:	d053      	beq.n	987c <_flash_used+0xb0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    97d4:	f3c2 0108 	ubfx	r1, r2, #0, #9
    97d8:	b921      	cbnz	r1, 97e4 <_flash_used+0x18>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    97da:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    97de:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    97e2:	9209      	str	r2, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    97e4:	4618      	mov	r0, r3
    97e6:	a902      	add	r1, sp, #8
    97e8:	f005 ff6a 	bl	f6c0 <z_arm_fatal_error>
}
    97ec:	b00b      	add	sp, #44	; 0x2c
    97ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    97f0:	4b25      	ldr	r3, [pc, #148]	; (9888 <_flash_used+0xbc>)
    97f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    97f4:	0791      	lsls	r1, r2, #30
    97f6:	d4db      	bmi.n	97b0 <z_arm_fault+0x54>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    97f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    97fa:	2a00      	cmp	r2, #0
    97fc:	dbd8      	blt.n	97b0 <z_arm_fault+0x54>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    97fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9800:	0052      	lsls	r2, r2, #1
    9802:	d5d5      	bpl.n	97b0 <z_arm_fault+0x54>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    9804:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    9806:	69a1      	ldr	r1, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    9808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    980c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    980e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9812:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    9816:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    9818:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    981c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    9820:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    9822:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9826:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    982a:	f64d 7202 	movw	r2, #57090	; 0xdf02
    982e:	4291      	cmp	r1, r2
    9830:	d101      	bne.n	9836 <_flash_used+0x6a>
			reason = esf->basic.r0;
    9832:	6823      	ldr	r3, [r4, #0]
    9834:	e7bd      	b.n	97b2 <z_arm_fault+0x56>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    9836:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9838:	b2d2      	uxtb	r2, r2
    983a:	b132      	cbz	r2, 984a <_flash_used+0x7e>
			reason = mem_manage_fault(esf, 1, recoverable);
    983c:	2001      	movs	r0, #1
    983e:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    9842:	f7ff ff4f 	bl	96e4 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
    9846:	4603      	mov	r3, r0
		break;
    9848:	e7b3      	b.n	97b2 <z_arm_fault+0x56>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    984a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    984c:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    9850:	d005      	beq.n	985e <_flash_used+0x92>
			reason = bus_fault(esf, 1, recoverable);
    9852:	2001      	movs	r0, #1
    9854:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    9858:	f7ff ff0e 	bl	9678 <bus_fault.constprop.0>
    985c:	e7f3      	b.n	9846 <_flash_used+0x7a>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    985e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    9864:	d3a4      	bcc.n	97b0 <z_arm_fault+0x54>
		reason = usage_fault(esf);
    9866:	f7ff fed9 	bl	961c <usage_fault.constprop.0>
    986a:	e7ec      	b.n	9846 <_flash_used+0x7a>
		reason = mem_manage_fault(esf, 0, recoverable);
    986c:	2000      	movs	r0, #0
    986e:	f10d 0107 	add.w	r1, sp, #7
    9872:	e7e6      	b.n	9842 <_flash_used+0x76>
		reason = bus_fault(esf, 0, recoverable);
    9874:	2000      	movs	r0, #0
    9876:	f10d 0107 	add.w	r1, sp, #7
    987a:	e7ed      	b.n	9858 <_flash_used+0x8c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    987c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
    9880:	f022 0201 	bic.w	r2, r2, #1
    9884:	e7ad      	b.n	97e2 <_flash_used+0x16>
    9886:	bf00      	nop
    9888:	e000ed00 	.word	0xe000ed00

0000988c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    988c:	4b04      	ldr	r3, [pc, #16]	; (98a0 <z_arm_fault_init+0x14>)
    988e:	695a      	ldr	r2, [r3, #20]
    9890:	f042 0210 	orr.w	r2, r2, #16
    9894:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    9896:	695a      	ldr	r2, [r3, #20]
    9898:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    989c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    989e:	4770      	bx	lr
    98a0:	e000ed00 	.word	0xe000ed00

000098a4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    98a4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    98a8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    98ac:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    98ae:	4672      	mov	r2, lr
	bl z_arm_fault
    98b0:	f7ff ff54 	bl	975c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    98b4:	bd01      	pop	{r0, pc}
    98b6:	bf00      	nop

000098b8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    98b8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    98ba:	2120      	movs	r1, #32
    98bc:	4803      	ldr	r0, [pc, #12]	; (98cc <z_arm_interrupt_init+0x14>)
    98be:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    98c0:	3301      	adds	r3, #1
    98c2:	2b41      	cmp	r3, #65	; 0x41
    98c4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    98c8:	d1f9      	bne.n	98be <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    98ca:	4770      	bx	lr
    98cc:	e000e100 	.word	0xe000e100

000098d0 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    98d0:	2000      	movs	r0, #0
    msr CONTROL, r0
    98d2:	f380 8814 	msr	CONTROL, r0
    isb
    98d6:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    98da:	2000      	movs	r0, #0
    msr MSPLIM, r0
    98dc:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    98e0:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    98e4:	f7ff fb78 	bl	8fd8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    98e8:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    98ea:	490e      	ldr	r1, [pc, #56]	; (9924 <__start+0x54>)
    str r0, [r1]
    98ec:	6008      	str	r0, [r1, #0]
    dsb
    98ee:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    98f2:	480d      	ldr	r0, [pc, #52]	; (9928 <__start+0x58>)
    msr msp, r0
    98f4:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    98f8:	f000 f83e 	bl	9978 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    98fc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    98fe:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    9902:	480a      	ldr	r0, [pc, #40]	; (992c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    9904:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    9908:	1840      	adds	r0, r0, r1
    msr PSP, r0
    990a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    990e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    9912:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    9914:	4308      	orrs	r0, r1
    msr CONTROL, r0
    9916:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    991a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    991e:	f7ff fda7 	bl	9470 <z_arm_prep_c>
    9922:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    9924:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    9928:	2000e118 	.word	0x2000e118
    ldr r0, =z_interrupt_stacks
    992c:	2000d3d8 	.word	0x2000d3d8

00009930 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    9930:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    9934:	4905      	ldr	r1, [pc, #20]	; (994c <sys_arch_reboot+0x1c>)
    9936:	4b06      	ldr	r3, [pc, #24]	; (9950 <sys_arch_reboot+0x20>)
    9938:	68ca      	ldr	r2, [r1, #12]
    993a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    993e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    9940:	60cb      	str	r3, [r1, #12]
    9942:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    9946:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    9948:	e7fd      	b.n	9946 <sys_arch_reboot+0x16>
    994a:	bf00      	nop
    994c:	e000ed00 	.word	0xe000ed00
    9950:	05fa0004 	.word	0x05fa0004

00009954 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    9954:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    9956:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    9958:	4906      	ldr	r1, [pc, #24]	; (9974 <z_arm_clear_arm_mpu_config+0x20>)
    995a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    995e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    9962:	4293      	cmp	r3, r2
    9964:	db00      	blt.n	9968 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    9966:	4770      	bx	lr
  mpu->RNR = rnr;
    9968:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    996c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    9970:	3301      	adds	r3, #1
    9972:	e7f6      	b.n	9962 <z_arm_clear_arm_mpu_config+0xe>
    9974:	e000ed00 	.word	0xe000ed00

00009978 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    9978:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    997a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    997c:	2400      	movs	r4, #0
    997e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    9982:	f7ff ffe7 	bl	9954 <z_arm_clear_arm_mpu_config>
    9986:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    9988:	f04f 30ff 	mov.w	r0, #4294967295
    998c:	4a0c      	ldr	r2, [pc, #48]	; (99c0 <z_arm_init_arch_hw_at_boot+0x48>)
    998e:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    9992:	3301      	adds	r3, #1
    9994:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    9996:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    999a:	d1f8      	bne.n	998e <z_arm_init_arch_hw_at_boot+0x16>
    999c:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    999e:	f04f 30ff 	mov.w	r0, #4294967295
    99a2:	4a07      	ldr	r2, [pc, #28]	; (99c0 <z_arm_init_arch_hw_at_boot+0x48>)
    99a4:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    99a8:	3301      	adds	r3, #1
    99aa:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    99ac:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    99b0:	d1f8      	bne.n	99a4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    99b2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    99b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    99b8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    99bc:	bd10      	pop	{r4, pc}
    99be:	bf00      	nop
    99c0:	e000e100 	.word	0xe000e100

000099c4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    99c4:	4b08      	ldr	r3, [pc, #32]	; (99e8 <z_impl_k_thread_abort+0x24>)
    99c6:	689b      	ldr	r3, [r3, #8]
    99c8:	4283      	cmp	r3, r0
    99ca:	d10b      	bne.n	99e4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    99cc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    99d0:	b143      	cbz	r3, 99e4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    99d2:	4b06      	ldr	r3, [pc, #24]	; (99ec <z_impl_k_thread_abort+0x28>)
    99d4:	685a      	ldr	r2, [r3, #4]
    99d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    99da:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    99dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    99de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    99e2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    99e4:	f004 b9ae 	b.w	dd44 <z_thread_abort>
    99e8:	2000ce78 	.word	0x2000ce78
    99ec:	e000ed00 	.word	0xe000ed00

000099f0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    99f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    99f2:	4c09      	ldr	r4, [pc, #36]	; (9a18 <z_arm_configure_static_mpu_regions+0x28>)
    99f4:	4a09      	ldr	r2, [pc, #36]	; (9a1c <z_arm_configure_static_mpu_regions+0x2c>)
    99f6:	4623      	mov	r3, r4
    99f8:	2101      	movs	r1, #1
    99fa:	4809      	ldr	r0, [pc, #36]	; (9a20 <z_arm_configure_static_mpu_regions+0x30>)
    99fc:	f000 f8ea 	bl	9bd4 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    9a00:	2300      	movs	r3, #0
    9a02:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    9a04:	4b07      	ldr	r3, [pc, #28]	; (9a24 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    9a06:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    9a08:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    9a0a:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    9a0c:	9301      	str	r3, [sp, #4]
    9a0e:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    9a10:	f000 f8ea 	bl	9be8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    9a14:	b004      	add	sp, #16
    9a16:	bd10      	pop	{r4, pc}
    9a18:	20040000 	.word	0x20040000
    9a1c:	2000c580 	.word	0x2000c580
    9a20:	00010de0 	.word	0x00010de0
    9a24:	2000c710 	.word	0x2000c710

00009a28 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    9a28:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    9a2a:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    9a2c:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    9a2e:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    9a32:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    9a36:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    9a38:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    9a3a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    9a3c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    9a40:	4905      	ldr	r1, [pc, #20]	; (9a58 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    9a42:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    9a46:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    9a4a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    9a4e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    9a52:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    9a56:	bd10      	pop	{r4, pc}
    9a58:	e000ed00 	.word	0xe000ed00

00009a5c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    9a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a60:	460f      	mov	r7, r1
    9a62:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    9a64:	4606      	mov	r6, r0
    9a66:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    9a6a:	4d4e      	ldr	r5, [pc, #312]	; (9ba4 <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    9a6c:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    9a6e:	45b8      	cmp	r8, r7
    9a70:	f280 8094 	bge.w	9b9c <mpu_configure_regions_and_partition.constprop.0+0x140>
		if (regions[i].size == 0U) {
    9a74:	f8d6 9004 	ldr.w	r9, [r6, #4]
    9a78:	f1b9 0f00 	cmp.w	r9, #0
    9a7c:	d036      	beq.n	9aec <mpu_configure_regions_and_partition.constprop.0+0x90>
		&&
    9a7e:	f1b9 0f1f 	cmp.w	r9, #31
    9a82:	f240 8089 	bls.w	9b98 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		&&
    9a86:	f019 0f1f 	tst.w	r9, #31
    9a8a:	f040 8085 	bne.w	9b98 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		((part->start &
    9a8e:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    9a92:	f01a 0f1f 	tst.w	sl, #31
    9a96:	d17f      	bne.n	9b98 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    9a98:	4650      	mov	r0, sl
    9a9a:	f005 fe28 	bl	f6ee <arm_cmse_mpu_region_get>
    9a9e:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    9aa0:	eb09 000a 	add.w	r0, r9, sl
    9aa4:	3801      	subs	r0, #1
    9aa6:	f005 fe22 	bl	f6ee <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    9aaa:	4583      	cmp	fp, r0
    9aac:	d174      	bne.n	9b98 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
    9aae:	f11b 0f16 	cmn.w	fp, #22
    9ab2:	d071      	beq.n	9b98 <mpu_configure_regions_and_partition.constprop.0+0x13c>
    9ab4:	455c      	cmp	r4, fp
    9ab6:	dd6f      	ble.n	9b98 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    9ab8:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    9abc:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    9ac0:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    9ac4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    9ac8:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    9acc:	f043 0a1f 	orr.w	sl, r3, #31
		 * The new memory region is to be placed inside the underlying
		 * region, possibly splitting the underlying region into two.
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    9ad0:	e9d6 3200 	ldrd	r3, r2, [r6]
    9ad4:	441a      	add	r2, r3

		if ((regions[i].start == u_reg_base) &&
    9ad6:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    9ad8:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    9adc:	d11e      	bne.n	9b1c <mpu_configure_regions_and_partition.constprop.0+0xc0>
    9ade:	45ca      	cmp	sl, r9
    9ae0:	d108      	bne.n	9af4 <mpu_configure_regions_and_partition.constprop.0+0x98>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    9ae2:	4631      	mov	r1, r6
    9ae4:	fa5f f08b 	uxtb.w	r0, fp
    9ae8:	f005 fe0a 	bl	f700 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    9aec:	f108 0801 	add.w	r8, r8, #1
    9af0:	360c      	adds	r6, #12
    9af2:	e7bc      	b.n	9a6e <mpu_configure_regions_and_partition.constprop.0+0x12>
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    9af4:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    9af6:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    9afa:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    9afe:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    9b02:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    9b06:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    9b08:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    9b0c:	b2e0      	uxtb	r0, r4
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    9b0e:	f005 fdf7 	bl	f700 <mpu_configure_region>

			if (reg_index == -EINVAL) {
    9b12:	f110 0f16 	cmn.w	r0, #22
    9b16:	d03f      	beq.n	9b98 <mpu_configure_regions_and_partition.constprop.0+0x13c>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    9b18:	1c44      	adds	r4, r0, #1
    9b1a:	e7e7      	b.n	9aec <mpu_configure_regions_and_partition.constprop.0+0x90>
	MPU->RNR = rnr;
    9b1c:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    9b20:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    9b24:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    9b26:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    9b2a:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    9b2e:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    9b30:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
    9b32:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    9b34:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    9b36:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    9b3a:	d0e8      	beq.n	9b0e <mpu_configure_regions_and_partition.constprop.0+0xb2>
				mpu_configure_region(reg_index, &regions[i]);
    9b3c:	f005 fde0 	bl	f700 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    9b40:	f110 0f16 	cmn.w	r0, #22
    9b44:	d028      	beq.n	9b98 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    9b46:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    9b4a:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    9b4e:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    9b52:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = mpu_get_rbar() &
    9b56:	f362 0304 	bfi	r3, r2, #0, #5
    9b5a:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
    9b5e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    9b62:	f89d 2008 	ldrb.w	r2, [sp, #8]
    9b66:	085b      	lsrs	r3, r3, #1
    9b68:	f363 1247 	bfi	r2, r3, #5, #3
    9b6c:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    9b70:	e9d6 3200 	ldrd	r3, r2, [r6]
    9b74:	4413      	add	r3, r2
    9b76:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    9b78:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    9b7c:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    9b7e:	4453      	add	r3, sl
    9b80:	eba3 0309 	sub.w	r3, r3, r9
    9b84:	b2c8      	uxtb	r0, r1
    9b86:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    9b8a:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    9b8c:	9303      	str	r3, [sp, #12]
    9b8e:	d803      	bhi.n	9b98 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    9b90:	4669      	mov	r1, sp
    9b92:	f7ff ff49 	bl	9a28 <region_init>
    9b96:	e7bf      	b.n	9b18 <mpu_configure_regions_and_partition.constprop.0+0xbc>
			return -EINVAL;
    9b98:	f06f 0415 	mvn.w	r4, #21
		}
	}

	return reg_index;
}
    9b9c:	4620      	mov	r0, r4
    9b9e:	b005      	add	sp, #20
    9ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ba4:	e000ed00 	.word	0xe000ed00

00009ba8 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    9ba8:	2205      	movs	r2, #5
    9baa:	4b04      	ldr	r3, [pc, #16]	; (9bbc <arm_core_mpu_enable+0x14>)
    9bac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    9bb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9bb4:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    9bb8:	4770      	bx	lr
    9bba:	bf00      	nop
    9bbc:	e000ed00 	.word	0xe000ed00

00009bc0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    9bc0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    9bc4:	2200      	movs	r2, #0
    9bc6:	4b02      	ldr	r3, [pc, #8]	; (9bd0 <arm_core_mpu_disable+0x10>)
    9bc8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    9bcc:	4770      	bx	lr
    9bce:	bf00      	nop
    9bd0:	e000ed00 	.word	0xe000ed00

00009bd4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    9bd4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    9bd6:	4c03      	ldr	r4, [pc, #12]	; (9be4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    9bd8:	7822      	ldrb	r2, [r4, #0]
    9bda:	f7ff ff3f 	bl	9a5c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    9bde:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    9be0:	bd10      	pop	{r4, pc}
    9be2:	bf00      	nop
    9be4:	2000cec4 	.word	0x2000cec4

00009be8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    9be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9bec:	4d29      	ldr	r5, [pc, #164]	; (9c94 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    9bee:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    9bf0:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    9bf2:	f04f 0800 	mov.w	r8, #0
    9bf6:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    9bf8:	4f27      	ldr	r7, [pc, #156]	; (9c98 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    9bfa:	45d0      	cmp	r8, sl
    9bfc:	da1b      	bge.n	9c36 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    9bfe:	f8d6 9004 	ldr.w	r9, [r6, #4]
    9c02:	f1b9 0f00 	cmp.w	r9, #0
    9c06:	d03f      	beq.n	9c88 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    9c08:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    9c0a:	4608      	mov	r0, r1
    9c0c:	9101      	str	r1, [sp, #4]
    9c0e:	f005 fd6e 	bl	f6ee <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    9c12:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    9c14:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    9c16:	eb09 0001 	add.w	r0, r9, r1
    9c1a:	3801      	subs	r0, #1
    9c1c:	f005 fd67 	bl	f6ee <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    9c20:	4284      	cmp	r4, r0
    9c22:	f04f 0214 	mov.w	r2, #20
    9c26:	4b1d      	ldr	r3, [pc, #116]	; (9c9c <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    9c28:	d008      	beq.n	9c3c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    9c2a:	fb02 f308 	mul.w	r3, r2, r8
    9c2e:	f06f 0215 	mvn.w	r2, #21
    9c32:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    9c36:	b003      	add	sp, #12
    9c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    9c3c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    9c40:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    9c42:	d0f8      	beq.n	9c36 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    9c44:	7819      	ldrb	r1, [r3, #0]
    9c46:	42a1      	cmp	r1, r4
    9c48:	ddf5      	ble.n	9c36 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    9c4a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    9c4e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    9c52:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    9c56:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    9c5a:	f100 0108 	add.w	r1, r0, #8
    9c5e:	7b00      	ldrb	r0, [r0, #12]
    9c60:	f364 0004 	bfi	r0, r4, #0, #5
    9c64:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    9c66:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    9c6a:	790c      	ldrb	r4, [r1, #4]
    9c6c:	0840      	lsrs	r0, r0, #1
    9c6e:	f360 1447 	bfi	r4, r0, #5, #3
    9c72:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    9c74:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    9c78:	f021 011f 	bic.w	r1, r1, #31
    9c7c:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    9c7e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    9c82:	f021 011f 	bic.w	r1, r1, #31
    9c86:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    9c88:	f108 0801 	add.w	r8, r8, #1
    9c8c:	3514      	adds	r5, #20
    9c8e:	360c      	adds	r6, #12
    9c90:	e7b3      	b.n	9bfa <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    9c92:	bf00      	nop
    9c94:	2000c924 	.word	0x2000c924
    9c98:	e000ed00 	.word	0xe000ed00
    9c9c:	2000cec4 	.word	0x2000cec4

00009ca0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    9ca0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    9ca2:	4d0e      	ldr	r5, [pc, #56]	; (9cdc <z_arm_mpu_init+0x3c>)
    9ca4:	682c      	ldr	r4, [r5, #0]
    9ca6:	2c10      	cmp	r4, #16
    9ca8:	d815      	bhi.n	9cd6 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    9caa:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    9cac:	f7ff ff88 	bl	9bc0 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    9cb0:	4b0b      	ldr	r3, [pc, #44]	; (9ce0 <z_arm_mpu_init+0x40>)
    9cb2:	4a0c      	ldr	r2, [pc, #48]	; (9ce4 <z_arm_mpu_init+0x44>)
    9cb4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    9cb8:	4284      	cmp	r4, r0
    9cba:	d105      	bne.n	9cc8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    9cbc:	4b0a      	ldr	r3, [pc, #40]	; (9ce8 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    9cbe:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    9cc0:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    9cc2:	f7ff ff71 	bl	9ba8 <arm_core_mpu_enable>
}
    9cc6:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    9cc8:	6869      	ldr	r1, [r5, #4]
    9cca:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    9cce:	f7ff feab 	bl	9a28 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    9cd2:	3001      	adds	r0, #1
    9cd4:	e7f0      	b.n	9cb8 <z_arm_mpu_init+0x18>
		return -1;
    9cd6:	f04f 30ff 	mov.w	r0, #4294967295
    9cda:	e7f4      	b.n	9cc6 <z_arm_mpu_init+0x26>
    9cdc:	00010dec 	.word	0x00010dec
    9ce0:	e000ed00 	.word	0xe000ed00
    9ce4:	0044ffaa 	.word	0x0044ffaa
    9ce8:	2000cec4 	.word	0x2000cec4

00009cec <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    9cec:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    9cee:	4c07      	ldr	r4, [pc, #28]	; (9d0c <_sbrk+0x20>)
    9cf0:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    9cf2:	18c2      	adds	r2, r0, r3
    9cf4:	4806      	ldr	r0, [pc, #24]	; (9d10 <_sbrk+0x24>)
    9cf6:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    9cfa:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    9cfe:	428a      	cmp	r2, r1
		heap_sz += count;
    9d00:	bf36      	itet	cc
    9d02:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    9d04:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
    9d08:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
    9d0a:	bd10      	pop	{r4, pc}
    9d0c:	2000c938 	.word	0x2000c938
    9d10:	2000e718 	.word	0x2000e718

00009d14 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    9d14:	4b08      	ldr	r3, [pc, #32]	; (9d38 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    9d16:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    9d18:	1ac3      	subs	r3, r0, r3
{
    9d1a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    9d1c:	4907      	ldr	r1, [pc, #28]	; (9d3c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    9d1e:	109b      	asrs	r3, r3, #2
{
    9d20:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    9d22:	4359      	muls	r1, r3
    9d24:	2240      	movs	r2, #64	; 0x40
    9d26:	4806      	ldr	r0, [pc, #24]	; (9d40 <onoff_stop+0x2c>)
    9d28:	f005 fd2f 	bl	f78a <stop>
	notify(mgr, res);
    9d2c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    9d2e:	4601      	mov	r1, r0
	notify(mgr, res);
    9d30:	4620      	mov	r0, r4
}
    9d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    9d36:	4718      	bx	r3
    9d38:	2000c950 	.word	0x2000c950
    9d3c:	b6db6db7 	.word	0xb6db6db7
    9d40:	00010aa8 	.word	0x00010aa8

00009d44 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9d44:	2340      	movs	r3, #64	; 0x40
{
    9d46:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    9d48:	4c0b      	ldr	r4, [pc, #44]	; (9d78 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9d4a:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    9d4c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9d4e:	460b      	mov	r3, r1
{
    9d50:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9d52:	490a      	ldr	r1, [pc, #40]	; (9d7c <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    9d54:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9d56:	4361      	muls	r1, r4
{
    9d58:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9d5a:	4a09      	ldr	r2, [pc, #36]	; (9d80 <onoff_start+0x3c>)
    9d5c:	4809      	ldr	r0, [pc, #36]	; (9d84 <onoff_start+0x40>)
    9d5e:	f005 fd41 	bl	f7e4 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    9d62:	1e01      	subs	r1, r0, #0
    9d64:	da05      	bge.n	9d72 <onoff_start+0x2e>
		notify(mgr, err);
    9d66:	4630      	mov	r0, r6
    9d68:	462b      	mov	r3, r5
	}
}
    9d6a:	b002      	add	sp, #8
    9d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    9d70:	4718      	bx	r3
}
    9d72:	b002      	add	sp, #8
    9d74:	bd70      	pop	{r4, r5, r6, pc}
    9d76:	bf00      	nop
    9d78:	2000c950 	.word	0x2000c950
    9d7c:	b6db6db7 	.word	0xb6db6db7
    9d80:	0000f851 	.word	0x0000f851
    9d84:	00010aa8 	.word	0x00010aa8

00009d88 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    9d88:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    9d8a:	2200      	movs	r2, #0
    9d8c:	2101      	movs	r1, #1
{
    9d8e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    9d90:	2005      	movs	r0, #5
    9d92:	f7ff fb53 	bl	943c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    9d96:	480f      	ldr	r0, [pc, #60]	; (9dd4 <clk_init+0x4c>)
    9d98:	f001 faaa 	bl	b2f0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    9d9c:	4b0e      	ldr	r3, [pc, #56]	; (9dd8 <clk_init+0x50>)
    9d9e:	4298      	cmp	r0, r3
    9da0:	d115      	bne.n	9dce <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    9da2:	f001 fab5 	bl	b310 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    9da6:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    9da8:	490c      	ldr	r1, [pc, #48]	; (9ddc <clk_init+0x54>)
    9daa:	4630      	mov	r0, r6
    9dac:	f005 fbbd 	bl	f52a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    9db0:	2800      	cmp	r0, #0
    9db2:	db0b      	blt.n	9dcc <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    9db4:	2501      	movs	r5, #1
    9db6:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    9db8:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    9dba:	4908      	ldr	r1, [pc, #32]	; (9ddc <clk_init+0x54>)
    9dbc:	f104 001c 	add.w	r0, r4, #28
    9dc0:	f005 fbb3 	bl	f52a <onoff_manager_init>
		if (err < 0) {
    9dc4:	2800      	cmp	r0, #0
    9dc6:	db01      	blt.n	9dcc <clk_init+0x44>
	}

	return 0;
    9dc8:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    9dca:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    9dcc:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    9dce:	f06f 0004 	mvn.w	r0, #4
    9dd2:	e7fb      	b.n	9dcc <clk_init+0x44>
    9dd4:	00009e15 	.word	0x00009e15
    9dd8:	0bad0000 	.word	0x0bad0000
    9ddc:	00010e14 	.word	0x00010e14

00009de0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    9de0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    9de2:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    9de4:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    9de6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    9de8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    9dea:	4808      	ldr	r0, [pc, #32]	; (9e0c <clkstarted_handle.constprop.0+0x2c>)
    9dec:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    9dee:	3340      	adds	r3, #64	; 0x40
    9df0:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    9df2:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    9df6:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    9df8:	f005 fcb4 	bl	f764 <set_on_state>
	if (callback) {
    9dfc:	b12d      	cbz	r5, 9e0a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    9dfe:	4632      	mov	r2, r6
    9e00:	462b      	mov	r3, r5
}
    9e02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    9e06:	4802      	ldr	r0, [pc, #8]	; (9e10 <clkstarted_handle.constprop.0+0x30>)
    9e08:	4718      	bx	r3
}
    9e0a:	bd70      	pop	{r4, r5, r6, pc}
    9e0c:	2000c950 	.word	0x2000c950
    9e10:	00010aa8 	.word	0x00010aa8

00009e14 <clock_event_handler>:
	switch (event) {
    9e14:	b110      	cbz	r0, 9e1c <clock_event_handler+0x8>
    9e16:	2801      	cmp	r0, #1
    9e18:	d004      	beq.n	9e24 <clock_event_handler+0x10>
    9e1a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    9e1c:	4b03      	ldr	r3, [pc, #12]	; (9e2c <clock_event_handler+0x18>)
    9e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9e20:	075b      	lsls	r3, r3, #29
    9e22:	d101      	bne.n	9e28 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    9e24:	f7ff bfdc 	b.w	9de0 <clkstarted_handle.constprop.0>
}
    9e28:	4770      	bx	lr
    9e2a:	bf00      	nop
    9e2c:	2000c950 	.word	0x2000c950

00009e30 <generic_hfclk_start>:
{
    9e30:	b508      	push	{r3, lr}
	__asm__ volatile(
    9e32:	f04f 0320 	mov.w	r3, #32
    9e36:	f3ef 8111 	mrs	r1, BASEPRI
    9e3a:	f383 8812 	msr	BASEPRI_MAX, r3
    9e3e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    9e42:	4a11      	ldr	r2, [pc, #68]	; (9e88 <generic_hfclk_start+0x58>)
    9e44:	6813      	ldr	r3, [r2, #0]
    9e46:	f043 0002 	orr.w	r0, r3, #2
    9e4a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    9e4c:	07da      	lsls	r2, r3, #31
    9e4e:	d408      	bmi.n	9e62 <generic_hfclk_start+0x32>
	__asm__ volatile(
    9e50:	f381 8811 	msr	BASEPRI, r1
    9e54:	f3bf 8f6f 	isb	sy
}
    9e58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    9e5c:	2001      	movs	r0, #1
    9e5e:	f001 ba6b 	b.w	b338 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    9e62:	4b0a      	ldr	r3, [pc, #40]	; (9e8c <generic_hfclk_start+0x5c>)
    9e64:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    9e68:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    9e6c:	07d3      	lsls	r3, r2, #31
    9e6e:	d5ef      	bpl.n	9e50 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    9e70:	4807      	ldr	r0, [pc, #28]	; (9e90 <generic_hfclk_start+0x60>)
    9e72:	f005 fc77 	bl	f764 <set_on_state>
    9e76:	f381 8811 	msr	BASEPRI, r1
    9e7a:	f3bf 8f6f 	isb	sy
}
    9e7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    9e82:	2000      	movs	r0, #0
    9e84:	f7ff bfac 	b.w	9de0 <clkstarted_handle.constprop.0>
    9e88:	2000c9a0 	.word	0x2000c9a0
    9e8c:	40005000 	.word	0x40005000
    9e90:	2000c990 	.word	0x2000c990

00009e94 <api_blocking_start>:
{
    9e94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    9e96:	2200      	movs	r2, #0
    9e98:	2301      	movs	r3, #1
    9e9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    9e9e:	466b      	mov	r3, sp
    9ea0:	4a08      	ldr	r2, [pc, #32]	; (9ec4 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    9ea2:	f8cd d000 	str.w	sp, [sp]
    9ea6:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    9eaa:	f005 fcca 	bl	f842 <api_start>
	if (err < 0) {
    9eae:	2800      	cmp	r0, #0
    9eb0:	db05      	blt.n	9ebe <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    9eb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9eb6:	2300      	movs	r3, #0
    9eb8:	4668      	mov	r0, sp
    9eba:	f003 fb05 	bl	d4c8 <z_impl_k_sem_take>
}
    9ebe:	b005      	add	sp, #20
    9ec0:	f85d fb04 	ldr.w	pc, [sp], #4
    9ec4:	0000f86f 	.word	0x0000f86f

00009ec8 <generic_hfclk_stop>:
{
    9ec8:	b510      	push	{r4, lr}
	__asm__ volatile(
    9eca:	f04f 0320 	mov.w	r3, #32
    9ece:	f3ef 8411 	mrs	r4, BASEPRI
    9ed2:	f383 8812 	msr	BASEPRI_MAX, r3
    9ed6:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    9eda:	4a07      	ldr	r2, [pc, #28]	; (9ef8 <generic_hfclk_stop+0x30>)
    9edc:	6813      	ldr	r3, [r2, #0]
    9ede:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    9ee2:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    9ee4:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    9ee6:	d402      	bmi.n	9eee <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    9ee8:	2001      	movs	r0, #1
    9eea:	f005 fe6d 	bl	fbc8 <nrfx_clock_stop>
	__asm__ volatile(
    9eee:	f384 8811 	msr	BASEPRI, r4
    9ef2:	f3bf 8f6f 	isb	sy
}
    9ef6:	bd10      	pop	{r4, pc}
    9ef8:	2000c9a0 	.word	0x2000c9a0

00009efc <z_nrf_clock_control_lf_on>:
{
    9efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9f00:	2201      	movs	r2, #1
    9f02:	4607      	mov	r7, r0
    9f04:	4935      	ldr	r1, [pc, #212]	; (9fdc <z_nrf_clock_control_lf_on+0xe0>)
    9f06:	e8d1 3fef 	ldaex	r3, [r1]
    9f0a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    9f0e:	2800      	cmp	r0, #0
    9f10:	d1f9      	bne.n	9f06 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    9f12:	b933      	cbnz	r3, 9f22 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    9f14:	4932      	ldr	r1, [pc, #200]	; (9fe0 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
    9f16:	4833      	ldr	r0, [pc, #204]	; (9fe4 <z_nrf_clock_control_lf_on+0xe8>)
    9f18:	604b      	str	r3, [r1, #4]
    9f1a:	60cb      	str	r3, [r1, #12]
    9f1c:	608a      	str	r2, [r1, #8]
    9f1e:	f005 fb17 	bl	f550 <onoff_request>
	switch (start_mode) {
    9f22:	1e7b      	subs	r3, r7, #1
    9f24:	2b01      	cmp	r3, #1
    9f26:	d828      	bhi.n	9f7a <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    9f28:	2f01      	cmp	r7, #1
    9f2a:	d106      	bne.n	9f3a <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    9f2c:	4b2e      	ldr	r3, [pc, #184]	; (9fe8 <z_nrf_clock_control_lf_on+0xec>)
    9f2e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    9f32:	f003 0303 	and.w	r3, r3, #3
    9f36:	2b02      	cmp	r3, #2
    9f38:	d01f      	beq.n	9f7a <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    9f3a:	f006 f8d2 	bl	100e2 <k_is_in_isr>
    9f3e:	4605      	mov	r5, r0
    9f40:	b9e8      	cbnz	r0, 9f7e <z_nrf_clock_control_lf_on+0x82>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    9f42:	4b2a      	ldr	r3, [pc, #168]	; (9fec <z_nrf_clock_control_lf_on+0xf0>)
    9f44:	781b      	ldrb	r3, [r3, #0]
    9f46:	b1d3      	cbz	r3, 9f7e <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
    9f48:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    9f4a:	4606      	mov	r6, r0
    9f4c:	4b26      	ldr	r3, [pc, #152]	; (9fe8 <z_nrf_clock_control_lf_on+0xec>)
    9f4e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9f52:	4c25      	ldr	r4, [pc, #148]	; (9fe8 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9f54:	f8df 8098 	ldr.w	r8, [pc, #152]	; 9ff0 <z_nrf_clock_control_lf_on+0xf4>
    9f58:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9f5c:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    9f60:	03d2      	lsls	r2, r2, #15
    9f62:	d516      	bpl.n	9f92 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    9f64:	f003 0303 	and.w	r3, r3, #3
    9f68:	2b02      	cmp	r3, #2
    9f6a:	d001      	beq.n	9f70 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    9f6c:	2f01      	cmp	r7, #1
    9f6e:	d110      	bne.n	9f92 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
    9f70:	b375      	cbz	r5, 9fd0 <z_nrf_clock_control_lf_on+0xd4>
    9f72:	f386 8811 	msr	BASEPRI, r6
    9f76:	f3bf 8f6f 	isb	sy
}
    9f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    9f7e:	f04f 0320 	mov.w	r3, #32
    9f82:	f3ef 8611 	mrs	r6, BASEPRI
    9f86:	f383 8812 	msr	BASEPRI_MAX, r3
    9f8a:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    9f8e:	2501      	movs	r5, #1
    9f90:	e7df      	b.n	9f52 <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    9f92:	b1c5      	cbz	r5, 9fc6 <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    9f94:	4630      	mov	r0, r6
    9f96:	f7ff fa29 	bl	93ec <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    9f9a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    9f9e:	b2db      	uxtb	r3, r3
    9fa0:	2b01      	cmp	r3, #1
    9fa2:	d1d9      	bne.n	9f58 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9fa4:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    9fa8:	2a00      	cmp	r2, #0
    9faa:	d0d5      	beq.n	9f58 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9fac:	2200      	movs	r2, #0
    9fae:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    9fb2:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    9fb6:	2202      	movs	r2, #2
    9fb8:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    9fbc:	2220      	movs	r2, #32
    9fbe:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9fc2:	60a3      	str	r3, [r4, #8]
}
    9fc4:	e7c8      	b.n	9f58 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
    9fc6:	2100      	movs	r1, #0
    9fc8:	2021      	movs	r0, #33	; 0x21
    9fca:	f003 fe9b 	bl	dd04 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    9fce:	e7e4      	b.n	9f9a <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
    9fd0:	2202      	movs	r2, #2
    9fd2:	4b05      	ldr	r3, [pc, #20]	; (9fe8 <z_nrf_clock_control_lf_on+0xec>)
    9fd4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    9fd8:	e7cf      	b.n	9f7a <z_nrf_clock_control_lf_on+0x7e>
    9fda:	bf00      	nop
    9fdc:	2000c94c 	.word	0x2000c94c
    9fe0:	2000c93c 	.word	0x2000c93c
    9fe4:	2000c96c 	.word	0x2000c96c
    9fe8:	40005000 	.word	0x40005000
    9fec:	2000d2d6 	.word	0x2000d2d6
    9ff0:	e000e100 	.word	0xe000e100

00009ff4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    9ff4:	b530      	push	{r4, r5, lr}
	return port->config;
    9ff6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    9ff8:	f001 041f 	and.w	r4, r1, #31
    9ffc:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    9ffe:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    a002:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    a004:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    a008:	d105      	bne.n	a016 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    a00a:	4620      	mov	r0, r4
    a00c:	f001 fc52 	bl	b8b4 <nrfx_gpiote_trigger_disable>

		return 0;
    a010:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    a012:	b005      	add	sp, #20
    a014:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    a016:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    a018:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    a01c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    a020:	d114      	bne.n	a04c <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    a022:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    a026:	bf0c      	ite	eq
    a028:	2304      	moveq	r3, #4
    a02a:	2305      	movne	r3, #5
    a02c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    a030:	2300      	movs	r3, #0
    a032:	4620      	mov	r0, r4
    a034:	4619      	mov	r1, r3
    a036:	aa02      	add	r2, sp, #8
    a038:	f001 fa72 	bl	b520 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    a03c:	4b1c      	ldr	r3, [pc, #112]	; (a0b0 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    a03e:	4298      	cmp	r0, r3
    a040:	d133      	bne.n	a0aa <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    a042:	2101      	movs	r1, #1
    a044:	4620      	mov	r0, r4
    a046:	f001 fbf1 	bl	b82c <nrfx_gpiote_trigger_enable>
	return 0;
    a04a:	e7e1      	b.n	a010 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    a04c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    a050:	d020      	beq.n	a094 <gpio_nrfx_pin_interrupt_configure+0xa0>
    a052:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    a056:	bf14      	ite	ne
    a058:	2301      	movne	r3, #1
    a05a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    a05c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    a060:	6883      	ldr	r3, [r0, #8]
    a062:	40cb      	lsrs	r3, r1
    a064:	07d9      	lsls	r1, r3, #31
    a066:	d4e3      	bmi.n	a030 <gpio_nrfx_pin_interrupt_configure+0x3c>
    a068:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    a06c:	d1e0      	bne.n	a030 <gpio_nrfx_pin_interrupt_configure+0x3c>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    a06e:	4a11      	ldr	r2, [pc, #68]	; (a0b4 <gpio_nrfx_pin_interrupt_configure+0xc0>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    a070:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    a074:	3380      	adds	r3, #128	; 0x80
    a076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    a07a:	07db      	lsls	r3, r3, #31
    a07c:	d4d8      	bmi.n	a030 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    a07e:	f10d 0507 	add.w	r5, sp, #7
    a082:	4629      	mov	r1, r5
    a084:	4620      	mov	r0, r4
    a086:	f001 fb7d 	bl	b784 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    a08a:	4b0b      	ldr	r3, [pc, #44]	; (a0b8 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    a08c:	4298      	cmp	r0, r3
    a08e:	d003      	beq.n	a098 <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
    a090:	9503      	str	r5, [sp, #12]
    a092:	e7cd      	b.n	a030 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    a094:	2303      	movs	r3, #3
    a096:	e7e1      	b.n	a05c <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    a098:	4628      	mov	r0, r5
    a09a:	f001 fbc1 	bl	b820 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    a09e:	4b04      	ldr	r3, [pc, #16]	; (a0b0 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    a0a0:	4298      	cmp	r0, r3
    a0a2:	d0f5      	beq.n	a090 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
    a0a4:	f06f 000b 	mvn.w	r0, #11
    a0a8:	e7b3      	b.n	a012 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    a0aa:	f06f 0015 	mvn.w	r0, #21
    a0ae:	e7b0      	b.n	a012 <gpio_nrfx_pin_interrupt_configure+0x1e>
    a0b0:	0bad0000 	.word	0x0bad0000
    a0b4:	40842500 	.word	0x40842500
    a0b8:	0bad0004 	.word	0x0bad0004

0000a0bc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    a0bc:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    a0be:	f001 fb9f 	bl	b800 <nrfx_gpiote_is_init>
    a0c2:	4604      	mov	r4, r0
    a0c4:	b968      	cbnz	r0, a0e2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    a0c6:	f001 fb73 	bl	b7b0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    a0ca:	4b08      	ldr	r3, [pc, #32]	; (a0ec <gpio_nrfx_init+0x30>)
    a0cc:	4298      	cmp	r0, r3
    a0ce:	d10a      	bne.n	a0e6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    a0d0:	4621      	mov	r1, r4
    a0d2:	4807      	ldr	r0, [pc, #28]	; (a0f0 <gpio_nrfx_init+0x34>)
    a0d4:	f001 fb50 	bl	b778 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    a0d8:	4622      	mov	r2, r4
    a0da:	2105      	movs	r1, #5
    a0dc:	2031      	movs	r0, #49	; 0x31
    a0de:	f7ff f9ad 	bl	943c <z_arm_irq_priority_set>
		return 0;
    a0e2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    a0e4:	bd10      	pop	{r4, pc}
		return -EIO;
    a0e6:	f06f 0004 	mvn.w	r0, #4
    a0ea:	e7fb      	b.n	a0e4 <gpio_nrfx_init+0x28>
    a0ec:	0bad0000 	.word	0x0bad0000
    a0f0:	0000a0f5 	.word	0x0000a0f5

0000a0f4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    a0f4:	0943      	lsrs	r3, r0, #5
{
    a0f6:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    a0f8:	d107      	bne.n	a10a <nrfx_gpio_handler+0x16>
	return list->head;
    a0fa:	4b0b      	ldr	r3, [pc, #44]	; (a128 <nrfx_gpio_handler+0x34>)
    a0fc:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    a0fe:	b121      	cbz	r1, a10a <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    a100:	2501      	movs	r5, #1
	return node->next;
    a102:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    a104:	4e09      	ldr	r6, [pc, #36]	; (a12c <nrfx_gpio_handler+0x38>)
    a106:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    a108:	b901      	cbnz	r1, a10c <nrfx_gpio_handler+0x18>
}
    a10a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    a10c:	688a      	ldr	r2, [r1, #8]
    a10e:	402a      	ands	r2, r5
    a110:	d002      	beq.n	a118 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    a112:	4630      	mov	r0, r6
    a114:	684b      	ldr	r3, [r1, #4]
    a116:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    a118:	b11c      	cbz	r4, a122 <nrfx_gpio_handler+0x2e>
    a11a:	6823      	ldr	r3, [r4, #0]
    a11c:	4621      	mov	r1, r4
    a11e:	461c      	mov	r4, r3
    a120:	e7f2      	b.n	a108 <nrfx_gpio_handler+0x14>
    a122:	4623      	mov	r3, r4
    a124:	e7fa      	b.n	a11c <nrfx_gpio_handler+0x28>
    a126:	bf00      	nop
    a128:	2000c9a4 	.word	0x2000c9a4
    a12c:	00010ac4 	.word	0x00010ac4

0000a130 <gpio_nrfx_pin_configure>:
{
    a130:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    a134:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    a136:	f001 051f 	and.w	r5, r1, #31
    a13a:	7b3b      	ldrb	r3, [r7, #12]
{
    a13c:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    a13e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    a142:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    a144:	4628      	mov	r0, r5
    a146:	f10d 0103 	add.w	r1, sp, #3
    a14a:	f001 fb1b 	bl	b784 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    a14e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    a152:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    a154:	d10b      	bne.n	a16e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    a156:	4628      	mov	r0, r5
    a158:	f001 fbd4 	bl	b904 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    a15c:	4b3c      	ldr	r3, [pc, #240]	; (a250 <gpio_nrfx_pin_configure+0x120>)
    a15e:	4598      	cmp	r8, r3
    a160:	d103      	bne.n	a16a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    a162:	f89d 0003 	ldrb.w	r0, [sp, #3]
    a166:	f001 fb55 	bl	b814 <nrfx_gpiote_channel_free>
		return 0;
    a16a:	2000      	movs	r0, #0
    a16c:	e00c      	b.n	a188 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    a16e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    a170:	4628      	mov	r0, r5
    a172:	4619      	mov	r1, r3
    a174:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    a176:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    a17a:	f001 f9d1 	bl	b520 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    a17e:	4b34      	ldr	r3, [pc, #208]	; (a250 <gpio_nrfx_pin_configure+0x120>)
    a180:	4298      	cmp	r0, r3
    a182:	d004      	beq.n	a18e <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    a184:	f06f 0015 	mvn.w	r0, #21
}
    a188:	b004      	add	sp, #16
    a18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    a18e:	4580      	cmp	r8, r0
    a190:	d103      	bne.n	a19a <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    a192:	f89d 0003 	ldrb.w	r0, [sp, #3]
    a196:	f001 fb3d 	bl	b814 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    a19a:	03a3      	lsls	r3, r4, #14
    a19c:	d549      	bpl.n	a232 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    a19e:	f240 3306 	movw	r3, #774	; 0x306
    a1a2:	4023      	ands	r3, r4
    a1a4:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    a1a8:	d019      	beq.n	a1de <gpio_nrfx_pin_configure+0xae>
    a1aa:	d80c      	bhi.n	a1c6 <gpio_nrfx_pin_configure+0x96>
    a1ac:	2b06      	cmp	r3, #6
    a1ae:	d017      	beq.n	a1e0 <gpio_nrfx_pin_configure+0xb0>
    a1b0:	d804      	bhi.n	a1bc <gpio_nrfx_pin_configure+0x8c>
    a1b2:	b1ab      	cbz	r3, a1e0 <gpio_nrfx_pin_configure+0xb0>
    a1b4:	2b02      	cmp	r3, #2
    a1b6:	d1e5      	bne.n	a184 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    a1b8:	2304      	movs	r3, #4
    a1ba:	e011      	b.n	a1e0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    a1bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a1c0:	d1e0      	bne.n	a184 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    a1c2:	2301      	movs	r3, #1
    a1c4:	e00c      	b.n	a1e0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    a1c6:	f240 2202 	movw	r2, #514	; 0x202
    a1ca:	4293      	cmp	r3, r2
    a1cc:	d026      	beq.n	a21c <gpio_nrfx_pin_configure+0xec>
    a1ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    a1d2:	d025      	beq.n	a220 <gpio_nrfx_pin_configure+0xf0>
    a1d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a1d8:	d1d4      	bne.n	a184 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    a1da:	2302      	movs	r3, #2
    a1dc:	e000      	b.n	a1e0 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    a1de:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    a1e0:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    a1e4:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    a1e8:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    a1ec:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    a1ee:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    a1f2:	bf4c      	ite	mi
    a1f4:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    a1f6:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    a1fa:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    a1fc:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    a200:	d510      	bpl.n	a224 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    a202:	2301      	movs	r3, #1
    a204:	687a      	ldr	r2, [r7, #4]
    a206:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    a208:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    a20a:	2200      	movs	r2, #0
    a20c:	4628      	mov	r0, r5
    a20e:	a901      	add	r1, sp, #4
    a210:	f001 fa32 	bl	b678 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    a214:	4b0e      	ldr	r3, [pc, #56]	; (a250 <gpio_nrfx_pin_configure+0x120>)
    a216:	4298      	cmp	r0, r3
    a218:	d0a7      	beq.n	a16a <gpio_nrfx_pin_configure+0x3a>
    a21a:	e7b3      	b.n	a184 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    a21c:	2305      	movs	r3, #5
    a21e:	e7df      	b.n	a1e0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    a220:	2303      	movs	r3, #3
    a222:	e7dd      	b.n	a1e0 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    a224:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    a226:	bf41      	itttt	mi
    a228:	2301      	movmi	r3, #1
    a22a:	687a      	ldrmi	r2, [r7, #4]
    a22c:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    a22e:	60d3      	strmi	r3, [r2, #12]
}
    a230:	e7eb      	b.n	a20a <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    a232:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    a234:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    a238:	bf4c      	ite	mi
    a23a:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    a23c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    a240:	461a      	mov	r2, r3
    a242:	4628      	mov	r0, r5
    a244:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    a246:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    a24a:	f001 f969 	bl	b520 <nrfx_gpiote_input_configure>
    a24e:	e7e1      	b.n	a214 <gpio_nrfx_pin_configure+0xe4>
    a250:	0bad0000 	.word	0x0bad0000

0000a254 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    a254:	2301      	movs	r3, #1
    a256:	4083      	lsls	r3, r0
{
    a258:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    a25a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a25c:	4a0b      	ldr	r2, [pc, #44]	; (a28c <compare_int_lock+0x38>)
    a25e:	e8d2 1fef 	ldaex	r1, [r2]
    a262:	ea01 0504 	and.w	r5, r1, r4
    a266:	e8c2 5fe6 	stlex	r6, r5, [r2]
    a26a:	2e00      	cmp	r6, #0
    a26c:	d1f7      	bne.n	a25e <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a26e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    a272:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    a274:	4806      	ldr	r0, [pc, #24]	; (a290 <compare_int_lock+0x3c>)
    a276:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    a27a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a27e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    a282:	420b      	tst	r3, r1
}
    a284:	bf14      	ite	ne
    a286:	2001      	movne	r0, #1
    a288:	2000      	moveq	r0, #0
    a28a:	bd70      	pop	{r4, r5, r6, pc}
    a28c:	2000c9b4 	.word	0x2000c9b4
    a290:	40015000 	.word	0x40015000

0000a294 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    a294:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    a296:	490e      	ldr	r1, [pc, #56]	; (a2d0 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    a298:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    a29c:	e9d1 3400 	ldrd	r3, r4, [r1]
    a2a0:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    a2a2:	18c3      	adds	r3, r0, r3
    a2a4:	f144 0400 	adc.w	r4, r4, #0
    a2a8:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    a2ac:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    a2b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    a2b4:	d209      	bcs.n	a2ca <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    a2b6:	4b07      	ldr	r3, [pc, #28]	; (a2d4 <sys_clock_timeout_handler+0x40>)
    a2b8:	681b      	ldr	r3, [r3, #0]
    a2ba:	0a1a      	lsrs	r2, r3, #8
    a2bc:	061b      	lsls	r3, r3, #24
    a2be:	199c      	adds	r4, r3, r6
    a2c0:	4b05      	ldr	r3, [pc, #20]	; (a2d8 <sys_clock_timeout_handler+0x44>)
    a2c2:	f142 0500 	adc.w	r5, r2, #0
    a2c6:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    a2ca:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    a2cc:	f003 be82 	b.w	dfd4 <sys_clock_announce>
    a2d0:	2000c720 	.word	0x2000c720
    a2d4:	2000c9b8 	.word	0x2000c9b8
    a2d8:	2000c728 	.word	0x2000c728

0000a2dc <compare_int_unlock>:
	if (key) {
    a2dc:	b1d9      	cbz	r1, a316 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    a2de:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a2e0:	4a0d      	ldr	r2, [pc, #52]	; (a318 <compare_int_unlock+0x3c>)
    a2e2:	4083      	lsls	r3, r0
    a2e4:	e8d2 cfef 	ldaex	ip, [r2]
    a2e8:	ea4c 0c03 	orr.w	ip, ip, r3
    a2ec:	e8c2 cfe1 	stlex	r1, ip, [r2]
    a2f0:	2900      	cmp	r1, #0
    a2f2:	d1f7      	bne.n	a2e4 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a2f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    a2f8:	4a08      	ldr	r2, [pc, #32]	; (a31c <compare_int_unlock+0x40>)
    a2fa:	4083      	lsls	r3, r0
    a2fc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a300:	4b07      	ldr	r3, [pc, #28]	; (a320 <compare_int_unlock+0x44>)
    a302:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    a306:	40c3      	lsrs	r3, r0
    a308:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a30a:	bf42      	ittt	mi
    a30c:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    a310:	4b04      	ldrmi	r3, [pc, #16]	; (a324 <compare_int_unlock+0x48>)
    a312:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    a316:	4770      	bx	lr
    a318:	2000c9b4 	.word	0x2000c9b4
    a31c:	40015000 	.word	0x40015000
    a320:	2000c9b0 	.word	0x2000c9b0
    a324:	e000e100 	.word	0xe000e100

0000a328 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    a328:	4b0d      	ldr	r3, [pc, #52]	; (a360 <z_nrf_rtc_timer_read+0x38>)
    a32a:	6818      	ldr	r0, [r3, #0]
    a32c:	0a01      	lsrs	r1, r0, #8
    a32e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    a330:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    a334:	4b0b      	ldr	r3, [pc, #44]	; (a364 <z_nrf_rtc_timer_read+0x3c>)
    a336:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    a33a:	1818      	adds	r0, r3, r0
    a33c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    a340:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    a344:	d20a      	bcs.n	a35c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    a346:	4b08      	ldr	r3, [pc, #32]	; (a368 <z_nrf_rtc_timer_read+0x40>)
    a348:	e9d3 2300 	ldrd	r2, r3, [r3]
    a34c:	4290      	cmp	r0, r2
    a34e:	eb71 0303 	sbcs.w	r3, r1, r3
    a352:	d203      	bcs.n	a35c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    a354:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    a358:	f141 0100 	adc.w	r1, r1, #0
}
    a35c:	4770      	bx	lr
    a35e:	bf00      	nop
    a360:	2000c9b8 	.word	0x2000c9b8
    a364:	40015000 	.word	0x40015000
    a368:	2000c728 	.word	0x2000c728

0000a36c <compare_set>:
{
    a36c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a370:	4616      	mov	r6, r2
    a372:	461f      	mov	r7, r3
    a374:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    a376:	f7ff ff6d 	bl	a254 <compare_int_lock>
    a37a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    a37c:	f7ff ffd4 	bl	a328 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    a380:	42b0      	cmp	r0, r6
    a382:	eb71 0307 	sbcs.w	r3, r1, r7
    a386:	d250      	bcs.n	a42a <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    a388:	4b38      	ldr	r3, [pc, #224]	; (a46c <compare_set+0x100>)
    a38a:	1a30      	subs	r0, r6, r0
    a38c:	eb67 0101 	sbc.w	r1, r7, r1
    a390:	4298      	cmp	r0, r3
    a392:	f171 0100 	sbcs.w	r1, r1, #0
    a396:	d265      	bcs.n	a464 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
    a398:	4b35      	ldr	r3, [pc, #212]	; (a470 <compare_set+0x104>)
    a39a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    a39e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    a3a2:	429f      	cmp	r7, r3
    a3a4:	bf08      	it	eq
    a3a6:	4296      	cmpeq	r6, r2
    a3a8:	d049      	beq.n	a43e <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a3aa:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    a3ae:	4931      	ldr	r1, [pc, #196]	; (a474 <compare_set+0x108>)
    a3b0:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
    a3b4:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    a3b6:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    a3ba:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    a3be:	f005 fab9 	bl	f934 <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    a3c2:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
    a3c6:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    a3c8:	f104 0550 	add.w	r5, r4, #80	; 0x50
    a3cc:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a3ce:	b2ad      	uxth	r5, r5
    a3d0:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    a3d4:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    a3d8:	4a27      	ldr	r2, [pc, #156]	; (a478 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a3da:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
    p_reg->CC[ch] = cc_val;
    a3de:	9301      	str	r3, [sp, #4]
    a3e0:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    a3e4:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    a3e8:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
    a3ec:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    a3f0:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    a3f4:	eba0 0008 	sub.w	r0, r0, r8
    a3f8:	3803      	subs	r0, #3
    a3fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    a3fe:	4290      	cmp	r0, r2
    a400:	d91d      	bls.n	a43e <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a402:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    a404:	b160      	cbz	r0, a420 <compare_set+0xb4>
     return p_reg->COUNTER;
    a406:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    a40a:	eba8 000b 	sub.w	r0, r8, fp
    a40e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    a412:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a416:	d912      	bls.n	a43e <compare_set+0xd2>
					event_clear(chan);
    a418:	4620      	mov	r0, r4
    a41a:	f005 fa8b 	bl	f934 <event_clear>
    a41e:	4a16      	ldr	r2, [pc, #88]	; (a478 <compare_set+0x10c>)
			cc_val = now + cc_inc;
    a420:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
    a424:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    a428:	e7da      	b.n	a3e0 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    a42a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a42c:	4a13      	ldr	r2, [pc, #76]	; (a47c <compare_set+0x110>)
    a42e:	40a3      	lsls	r3, r4
    a430:	e8d2 0fef 	ldaex	r0, [r2]
    a434:	4318      	orrs	r0, r3
    a436:	e8c2 0fe1 	stlex	r1, r0, [r2]
    a43a:	2900      	cmp	r1, #0
    a43c:	d1f8      	bne.n	a430 <compare_set+0xc4>
	return ret;
    a43e:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
    a440:	490b      	ldr	r1, [pc, #44]	; (a470 <compare_set+0x104>)
	cc_data[chan].callback = handler;
    a442:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    a444:	0123      	lsls	r3, r4, #4
    a446:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
    a44a:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    a44c:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
    a450:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a452:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    a454:	4620      	mov	r0, r4
    a456:	9900      	ldr	r1, [sp, #0]
    a458:	f7ff ff40 	bl	a2dc <compare_int_unlock>
}
    a45c:	4628      	mov	r0, r5
    a45e:	b003      	add	sp, #12
    a460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    a464:	f06f 0515 	mvn.w	r5, #21
    a468:	e7f4      	b.n	a454 <compare_set+0xe8>
    a46a:	bf00      	nop
    a46c:	00800001 	.word	0x00800001
    a470:	2000c710 	.word	0x2000c710
    a474:	40015000 	.word	0x40015000
    a478:	007ffffd 	.word	0x007ffffd
    a47c:	2000c9b0 	.word	0x2000c9b0

0000a480 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    a480:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    a482:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    a484:	f04f 30ff 	mov.w	r0, #4294967295
    a488:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->INTENCLR = mask;
    a48c:	4c18      	ldr	r4, [pc, #96]	; (a4f0 <sys_clock_driver_init+0x70>)
    a48e:	4b19      	ldr	r3, [pc, #100]	; (a4f4 <sys_clock_driver_init+0x74>)
    p_reg->INTENSET = mask;
    a490:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
    a492:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    a496:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    a49a:	4b17      	ldr	r3, [pc, #92]	; (a4f8 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    a49c:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    a4a0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    a4a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a4a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    a4ac:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    a4b0:	4b12      	ldr	r3, [pc, #72]	; (a4fc <sys_clock_driver_init+0x7c>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    a4b2:	2101      	movs	r1, #1
    a4b4:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    a4b8:	2015      	movs	r0, #21
    a4ba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    a4be:	462a      	mov	r2, r5
    a4c0:	f7fe ffbc 	bl	943c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    a4c4:	2015      	movs	r0, #21
    a4c6:	f7fe ff9d 	bl	9404 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    a4ca:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    a4cc:	4a0c      	ldr	r2, [pc, #48]	; (a500 <sys_clock_driver_init+0x80>)
    a4ce:	60a3      	str	r3, [r4, #8]
    a4d0:	6023      	str	r3, [r4, #0]
    a4d2:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    a4d4:	4b0b      	ldr	r3, [pc, #44]	; (a504 <sys_clock_driver_init+0x84>)
    a4d6:	4a0c      	ldr	r2, [pc, #48]	; (a508 <sys_clock_driver_init+0x88>)
    a4d8:	9300      	str	r3, [sp, #0]
    a4da:	4628      	mov	r0, r5
    a4dc:	2300      	movs	r3, #0
    a4de:	9501      	str	r5, [sp, #4]
    a4e0:	f7ff ff44 	bl	a36c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    a4e4:	4630      	mov	r0, r6
    a4e6:	f7ff fd09 	bl	9efc <z_nrf_clock_control_lf_on>

	return 0;
}
    a4ea:	4628      	mov	r0, r5
    a4ec:	b002      	add	sp, #8
    a4ee:	bd70      	pop	{r4, r5, r6, pc}
    a4f0:	40015000 	.word	0x40015000
    a4f4:	000f0003 	.word	0x000f0003
    a4f8:	2000c710 	.word	0x2000c710
    a4fc:	e000e100 	.word	0xe000e100
    a500:	2000c9b4 	.word	0x2000c9b4
    a504:	0000a295 	.word	0x0000a295
    a508:	007fffff 	.word	0x007fffff

0000a50c <rtc_nrf_isr>:
{
    a50c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    a510:	4b2e      	ldr	r3, [pc, #184]	; (a5cc <rtc_nrf_isr+0xc0>)
    a512:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    a516:	0790      	lsls	r0, r2, #30
    a518:	d50b      	bpl.n	a532 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a51a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    a51e:	b142      	cbz	r2, a532 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a520:	2200      	movs	r2, #0
    a522:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    a526:	4a2a      	ldr	r2, [pc, #168]	; (a5d0 <rtc_nrf_isr+0xc4>)
    a528:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    a52c:	6813      	ldr	r3, [r2, #0]
    a52e:	3301      	adds	r3, #1
    a530:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    a532:	4a26      	ldr	r2, [pc, #152]	; (a5cc <rtc_nrf_isr+0xc0>)
    a534:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    a538:	03d9      	lsls	r1, r3, #15
    a53a:	d527      	bpl.n	a58c <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a53c:	4b25      	ldr	r3, [pc, #148]	; (a5d4 <rtc_nrf_isr+0xc8>)
    a53e:	e8d3 1fef 	ldaex	r1, [r3]
    a542:	f021 0001 	bic.w	r0, r1, #1
    a546:	e8c3 0fe4 	stlex	r4, r0, [r3]
    a54a:	2c00      	cmp	r4, #0
    a54c:	d1f7      	bne.n	a53e <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    a54e:	07cb      	lsls	r3, r1, #31
    a550:	d402      	bmi.n	a558 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a552:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    a556:	b1cb      	cbz	r3, a58c <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a558:	2500      	movs	r5, #0
    a55a:	4c1c      	ldr	r4, [pc, #112]	; (a5cc <rtc_nrf_isr+0xc0>)
    a55c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    a560:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    a564:	f7ff fee0 	bl	a328 <z_nrf_rtc_timer_read>
    a568:	f04f 0320 	mov.w	r3, #32
    a56c:	f3ef 8211 	mrs	r2, BASEPRI
    a570:	f383 8812 	msr	BASEPRI_MAX, r3
    a574:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    a578:	4b17      	ldr	r3, [pc, #92]	; (a5d8 <rtc_nrf_isr+0xcc>)
    a57a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    a57e:	42b0      	cmp	r0, r6
    a580:	41b9      	sbcs	r1, r7
    a582:	d206      	bcs.n	a592 <rtc_nrf_isr+0x86>
	__asm__ volatile(
    a584:	f382 8811 	msr	BASEPRI, r2
    a588:	f3bf 8f6f 	isb	sy
}
    a58c:	b003      	add	sp, #12
    a58e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    a592:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
    a596:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    a59a:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
    a59e:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    a5a0:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    a5a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    a5a8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a5ac:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    a5b0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    a5b4:	f382 8811 	msr	BASEPRI, r2
    a5b8:	f3bf 8f6f 	isb	sy
		if (handler) {
    a5bc:	2900      	cmp	r1, #0
    a5be:	d0e5      	beq.n	a58c <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
    a5c0:	9000      	str	r0, [sp, #0]
    a5c2:	4632      	mov	r2, r6
    a5c4:	463b      	mov	r3, r7
    a5c6:	4628      	mov	r0, r5
    a5c8:	4788      	blx	r1
    a5ca:	e7df      	b.n	a58c <rtc_nrf_isr+0x80>
    a5cc:	40015000 	.word	0x40015000
    a5d0:	2000c9b8 	.word	0x2000c9b8
    a5d4:	2000c9b0 	.word	0x2000c9b0
    a5d8:	2000c710 	.word	0x2000c710

0000a5dc <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    a5dc:	1c43      	adds	r3, r0, #1
{
    a5de:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    a5e0:	d021      	beq.n	a626 <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    a5e2:	2801      	cmp	r0, #1
    a5e4:	dd21      	ble.n	a62a <sys_clock_set_timeout+0x4e>
    a5e6:	4a12      	ldr	r2, [pc, #72]	; (a630 <sys_clock_set_timeout+0x54>)
    a5e8:	4b12      	ldr	r3, [pc, #72]	; (a634 <sys_clock_set_timeout+0x58>)
    a5ea:	4290      	cmp	r0, r2
    a5ec:	bfd4      	ite	le
    a5ee:	4604      	movle	r4, r0
    a5f0:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    a5f2:	f7ff fe99 	bl	a328 <z_nrf_rtc_timer_read>
    a5f6:	4b10      	ldr	r3, [pc, #64]	; (a638 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    a5f8:	490e      	ldr	r1, [pc, #56]	; (a634 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    a5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    a5fe:	1a80      	subs	r0, r0, r2
		cyc = 0;
    a600:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a604:	bf28      	it	cs
    a606:	2400      	movcs	r4, #0
	cyc += unannounced;
    a608:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    a60a:	428c      	cmp	r4, r1
    a60c:	bf28      	it	cs
    a60e:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    a610:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    a612:	490a      	ldr	r1, [pc, #40]	; (a63c <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
    a614:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    a616:	9001      	str	r0, [sp, #4]
    a618:	9100      	str	r1, [sp, #0]
    a61a:	f143 0300 	adc.w	r3, r3, #0
    a61e:	f7ff fea5 	bl	a36c <compare_set>
}
    a622:	b002      	add	sp, #8
    a624:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    a626:	4c03      	ldr	r4, [pc, #12]	; (a634 <sys_clock_set_timeout+0x58>)
    a628:	e7e3      	b.n	a5f2 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    a62a:	2401      	movs	r4, #1
    a62c:	e7e1      	b.n	a5f2 <sys_clock_set_timeout+0x16>
    a62e:	bf00      	nop
    a630:	007ffffe 	.word	0x007ffffe
    a634:	007fffff 	.word	0x007fffff
    a638:	2000c720 	.word	0x2000c720
    a63c:	0000a295 	.word	0x0000a295

0000a640 <sys_clock_elapsed>:
{
    a640:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    a642:	f7ff fe71 	bl	a328 <z_nrf_rtc_timer_read>
    a646:	4b02      	ldr	r3, [pc, #8]	; (a650 <sys_clock_elapsed+0x10>)
    a648:	681b      	ldr	r3, [r3, #0]
}
    a64a:	1ac0      	subs	r0, r0, r3
    a64c:	bd08      	pop	{r3, pc}
    a64e:	bf00      	nop
    a650:	2000c720 	.word	0x2000c720

0000a654 <nrf_modem_lib_init>:

	return rc;
}

int nrf_modem_lib_init(void)
{
    a654:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(NRF_MODEM_IPC_IRQ, CONFIG_NRF_MODEM_LIB_IPC_IRQ_PRIO,
    a656:	2200      	movs	r2, #0
    a658:	2101      	movs	r1, #1
    a65a:	202a      	movs	r0, #42	; 0x2a
    a65c:	f7fe feee 	bl	943c <z_arm_irq_priority_set>
	rc = nrf_modem_init(&init_params);
    a660:	4807      	ldr	r0, [pc, #28]	; (a680 <nrf_modem_lib_init+0x2c>)
    a662:	f002 fae9 	bl	cc38 <nrf_modem_init>
    a666:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
    a668:	4c06      	ldr	r4, [pc, #24]	; (a684 <nrf_modem_lib_init+0x30>)
    a66a:	4e07      	ldr	r6, [pc, #28]	; (a688 <nrf_modem_lib_init+0x34>)
    a66c:	42b4      	cmp	r4, r6
    a66e:	d301      	bcc.n	a674 <nrf_modem_lib_init+0x20>
	return _nrf_modem_lib_init();
}
    a670:	4628      	mov	r0, r5
    a672:	bd70      	pop	{r4, r5, r6, pc}
		e->callback(rc, e->context);
    a674:	e9d4 3100 	ldrd	r3, r1, [r4]
    a678:	4628      	mov	r0, r5
    a67a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
    a67c:	3408      	adds	r4, #8
    a67e:	e7f5      	b.n	a66c <nrf_modem_lib_init+0x18>
    a680:	00010e88 	.word	0x00010e88
    a684:	0001161c 	.word	0x0001161c
    a688:	00011624 	.word	0x00011624

0000a68c <nrf_modem_lib_shutdown>:
{
	return nrf_modem_bootloader_init(&bootloader_init_params);
}

int nrf_modem_lib_shutdown(void)
{
    a68c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int ret;
	uint16_t mode;

	LOG_DBG("Shutting down modem library");
	STRUCT_SECTION_FOREACH(nrf_modem_lib_shutdown_cb, e) {
    a68e:	4c0e      	ldr	r4, [pc, #56]	; (a6c8 <nrf_modem_lib_shutdown+0x3c>)
    a690:	4d0e      	ldr	r5, [pc, #56]	; (a6cc <nrf_modem_lib_shutdown+0x40>)
    a692:	42ac      	cmp	r4, r5
    a694:	d312      	bcc.n	a6bc <nrf_modem_lib_shutdown+0x30>
		LOG_DBG("Modem shutdown callback: %p", e->callback);
		e->callback(e->context);
	}

	/* The application must set CFUN=0 before calling nrf_modem_shutdown. */
	ret = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode);
    a696:	490e      	ldr	r1, [pc, #56]	; (a6d0 <nrf_modem_lib_shutdown+0x44>)
    a698:	480e      	ldr	r0, [pc, #56]	; (a6d4 <nrf_modem_lib_shutdown+0x48>)
    a69a:	f10d 0206 	add.w	r2, sp, #6
    a69e:	f001 fea7 	bl	c3f0 <nrf_modem_at_scanf>
	if (ret == 1 && mode != AT_CFUN0_VAL) {
    a6a2:	2801      	cmp	r0, #1
    a6a4:	d105      	bne.n	a6b2 <nrf_modem_lib_shutdown+0x26>
    a6a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a6aa:	b113      	cbz	r3, a6b2 <nrf_modem_lib_shutdown+0x26>
		LOG_WRN("Application should set minimal functional mode (CFUN=0) before "
			"shutting down modem library");
		nrf_modem_at_printf("AT+CFUN=0");
    a6ac:	480a      	ldr	r0, [pc, #40]	; (a6d8 <nrf_modem_lib_shutdown+0x4c>)
    a6ae:	f001 fe53 	bl	c358 <nrf_modem_at_printf>
	}

	nrf_modem_shutdown();
    a6b2:	f002 fb07 	bl	ccc4 <nrf_modem_shutdown>
	 */
	nrf_modem_lib_trace_processing_done_wait(K_FOREVER);
#endif

	return 0;
}
    a6b6:	2000      	movs	r0, #0
    a6b8:	b003      	add	sp, #12
    a6ba:	bd30      	pop	{r4, r5, pc}
		e->callback(e->context);
    a6bc:	e9d4 3000 	ldrd	r3, r0, [r4]
    a6c0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_shutdown_cb, e) {
    a6c2:	3408      	adds	r4, #8
    a6c4:	e7e5      	b.n	a692 <nrf_modem_lib_shutdown+0x6>
    a6c6:	bf00      	nop
    a6c8:	00011624 	.word	0x00011624
    a6cc:	00011624 	.word	0x00011624
    a6d0:	000111d5 	.word	0x000111d5
    a6d4:	000111e0 	.word	0x000111e0
    a6d8:	000111e9 	.word	0x000111e9

0000a6dc <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
    a6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
    a6de:	4b0f      	ldr	r3, [pc, #60]	; (a71c <thread_monitor_entry_get+0x40>)
{
    a6e0:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
    a6e2:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
    a6e4:	4b0e      	ldr	r3, [pc, #56]	; (a720 <thread_monitor_entry_get+0x44>)
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    a6e6:	250b      	movs	r5, #11
	int entry_age, oldest_entry_age = 0;
    a6e8:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
    a6ea:	4618      	mov	r0, r3
    a6ec:	461f      	mov	r7, r3
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    a6ee:	42b8      	cmp	r0, r7
    a6f0:	d301      	bcc.n	a6f6 <thread_monitor_entry_get+0x1a>
    a6f2:	3d01      	subs	r5, #1
    a6f4:	d104      	bne.n	a700 <thread_monitor_entry_get+0x24>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
    a6f6:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
    a6f8:	3a01      	subs	r2, #1
	new_entry->id = id;
    a6fa:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
    a6fc:	605a      	str	r2, [r3, #4]
}
    a6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (entry->id == id) {
    a700:	6804      	ldr	r4, [r0, #0]
    a702:	428c      	cmp	r4, r1
    a704:	d0fb      	beq.n	a6fe <thread_monitor_entry_get+0x22>
		} else if (entry->id == 0) {
    a706:	b13c      	cbz	r4, a718 <thread_monitor_entry_get+0x3c>
		entry_age = rpc_event_cnt - entry->cnt;
    a708:	6844      	ldr	r4, [r0, #4]
    a70a:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
    a70c:	42a6      	cmp	r6, r4
    a70e:	bfbc      	itt	lt
    a710:	4603      	movlt	r3, r0
    a712:	4626      	movlt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    a714:	3008      	adds	r0, #8
    a716:	e7ea      	b.n	a6ee <thread_monitor_entry_get+0x12>
    a718:	4603      	mov	r3, r0
    a71a:	e7ec      	b.n	a6f6 <thread_monitor_entry_get+0x1a>
    a71c:	2000ca2c 	.word	0x2000ca2c
    a720:	2000ca38 	.word	0x2000ca38

0000a724 <on_init>:
	list->head = NULL;
    a724:	2000      	movs	r0, #0
    a726:	4b05      	ldr	r3, [pc, #20]	; (a73c <on_init+0x18>)
	list->tail = NULL;
    a728:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a72c:	4b04      	ldr	r3, [pc, #16]	; (a740 <on_init+0x1c>)
    a72e:	e8d3 2fef 	ldaex	r2, [r3]
    a732:	e8c3 0fe1 	stlex	r1, r0, [r3]
    a736:	2900      	cmp	r1, #0
    a738:	d1f9      	bne.n	a72e <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
    a73a:	4770      	bx	lr
    a73c:	2000ca30 	.word	0x2000ca30
    a740:	2000ca2c 	.word	0x2000ca2c

0000a744 <nrf_modem_os_timedwait>:
{
    a744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a748:	b086      	sub	sp, #24
    a74a:	4605      	mov	r5, r0
    a74c:	460e      	mov	r6, r1
	if (!nrf_modem_is_initialized()) {
    a74e:	f005 fc1f 	bl	ff90 <nrf_modem_is_initialized>
    a752:	b920      	cbnz	r0, a75e <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
    a754:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
    a758:	b006      	add	sp, #24
    a75a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
    a75e:	f005 fead 	bl	104bc <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
    a762:	6833      	ldr	r3, [r6, #0]
    a764:	4604      	mov	r4, r0
    a766:	2b00      	cmp	r3, #0
    a768:	460f      	mov	r7, r1
    a76a:	d104      	bne.n	a776 <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
    a76c:	f003 fa48 	bl	dc00 <z_impl_k_yield>
		return -NRF_EAGAIN;
    a770:	f06f 000a 	mvn.w	r0, #10
    a774:	e7f0      	b.n	a758 <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
    a776:	bfbc      	itt	lt
    a778:	f04f 33ff 	movlt.w	r3, #4294967295
    a77c:	6033      	strlt	r3, [r6, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    a77e:	2201      	movs	r2, #1
    a780:	2100      	movs	r1, #0
    a782:	a801      	add	r0, sp, #4
    a784:	f005 fd40 	bl	10208 <z_impl_k_sem_init>
    a788:	46e8      	mov	r8, sp
	thread->context = context;
    a78a:	9505      	str	r5, [sp, #20]
	__asm__ volatile(
    a78c:	f04f 0320 	mov.w	r3, #32
    a790:	f3ef 8a11 	mrs	sl, BASEPRI
    a794:	f383 8812 	msr	BASEPRI_MAX, r3
    a798:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    a79c:	f003 facc 	bl	dd38 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    a7a0:	f7ff ff9c 	bl	a6dc <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
    a7a4:	f8df 9118 	ldr.w	r9, [pc, #280]	; a8c0 <nrf_modem_os_timedwait+0x17c>
    a7a8:	6842      	ldr	r2, [r0, #4]
    a7aa:	f8d9 3000 	ldr.w	r3, [r9]
    a7ae:	429a      	cmp	r2, r3
    a7b0:	d16d      	bne.n	a88e <nrf_modem_os_timedwait+0x14a>
	parent->next = child;
    a7b2:	2300      	movs	r3, #0
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    a7b4:	4d43      	ldr	r5, [pc, #268]	; (a8c4 <nrf_modem_os_timedwait+0x180>)
	parent->next = child;
    a7b6:	9300      	str	r3, [sp, #0]
	return list->tail;
    a7b8:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    a7ba:	2b00      	cmp	r3, #0
    a7bc:	d16e      	bne.n	a89c <nrf_modem_os_timedwait+0x158>
	list->head = node;
    a7be:	e9c5 8800 	strd	r8, r8, [r5]
	__asm__ volatile(
    a7c2:	f38a 8811 	msr	BASEPRI, sl
    a7c6:	f3bf 8f6f 	isb	sy
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
    a7ca:	6833      	ldr	r3, [r6, #0]
    a7cc:	1c5a      	adds	r2, r3, #1
    a7ce:	d06a      	beq.n	a8a6 <nrf_modem_os_timedwait+0x162>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    a7d0:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    a7d4:	f240 30e7 	movw	r0, #999	; 0x3e7
    a7d8:	2100      	movs	r1, #0
    a7da:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
    a7de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a7e2:	2300      	movs	r3, #0
    a7e4:	fbcc 010e 	smlal	r0, r1, ip, lr
    a7e8:	f7fd fcac 	bl	8144 <__aeabi_uldivmod>
    a7ec:	4602      	mov	r2, r0
    a7ee:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    a7f0:	a801      	add	r0, sp, #4
    a7f2:	f002 fe69 	bl	d4c8 <z_impl_k_sem_take>
	__asm__ volatile(
    a7f6:	f04f 0320 	mov.w	r3, #32
    a7fa:	f3ef 8a11 	mrs	sl, BASEPRI
    a7fe:	f383 8812 	msr	BASEPRI_MAX, r3
    a802:	f3bf 8f6f 	isb	sy
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a806:	2200      	movs	r2, #0
	return list->head;
    a808:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a80a:	b15b      	cbz	r3, a824 <nrf_modem_os_timedwait+0xe0>
    a80c:	4543      	cmp	r3, r8
    a80e:	d154      	bne.n	a8ba <nrf_modem_os_timedwait+0x176>
	return node->next;
    a810:	9900      	ldr	r1, [sp, #0]
Z_GENLIST_REMOVE(slist, snode)
    a812:	2a00      	cmp	r2, #0
    a814:	d14b      	bne.n	a8ae <nrf_modem_os_timedwait+0x16a>
    a816:	686a      	ldr	r2, [r5, #4]
	list->head = node;
    a818:	6029      	str	r1, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
    a81a:	429a      	cmp	r2, r3
    a81c:	d100      	bne.n	a820 <nrf_modem_os_timedwait+0xdc>
	list->tail = node;
    a81e:	6069      	str	r1, [r5, #4]
	parent->next = child;
    a820:	2300      	movs	r3, #0
    a822:	9300      	str	r3, [sp, #0]
	return z_impl_z_current_get();
    a824:	f003 fa88 	bl	dd38 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    a828:	f7ff ff58 	bl	a6dc <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
    a82c:	f8d9 3000 	ldr.w	r3, [r9]
    a830:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
    a832:	f38a 8811 	msr	BASEPRI, sl
    a836:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
    a83a:	f005 fba9 	bl	ff90 <nrf_modem_is_initialized>
    a83e:	2800      	cmp	r0, #0
    a840:	d088      	beq.n	a754 <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
    a842:	6835      	ldr	r5, [r6, #0]
    a844:	1c6b      	adds	r3, r5, #1
    a846:	d027      	beq.n	a898 <nrf_modem_os_timedwait+0x154>
	return z_impl_k_uptime_ticks();
    a848:	f005 fe38 	bl	104bc <z_impl_k_uptime_ticks>
    a84c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
    a850:	fba0 320e 	umull	r3, r2, r0, lr
    a854:	fb0e 2101 	mla	r1, lr, r1, r2
    a858:	fba4 420e 	umull	r4, r2, r4, lr
    a85c:	fb0e 2207 	mla	r2, lr, r7, r2
    a860:	0bdb      	lsrs	r3, r3, #15
    a862:	0be4      	lsrs	r4, r4, #15
    a864:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    a868:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
	delta = uptime - *reftime;
    a86c:	1b1b      	subs	r3, r3, r4
    a86e:	ea4f 31d1 	mov.w	r1, r1, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
    a872:	ea4f 7ce5 	mov.w	ip, r5, asr #31
    a876:	eb61 31d2 	sbc.w	r1, r1, r2, lsr #15
    a87a:	1aed      	subs	r5, r5, r3
    a87c:	eb6c 0c01 	sbc.w	ip, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
    a880:	f1bc 0f00 	cmp.w	ip, #0
    a884:	bfb8      	it	lt
    a886:	2500      	movlt	r5, #0
    a888:	6035      	str	r5, [r6, #0]
	if (*timeout == 0) {
    a88a:	b92d      	cbnz	r5, a898 <nrf_modem_os_timedwait+0x154>
    a88c:	e770      	b.n	a770 <nrf_modem_os_timedwait+0x2c>
	entry->cnt = rpc_event_cnt;
    a88e:	6043      	str	r3, [r0, #4]
    a890:	f38a 8811 	msr	BASEPRI, sl
    a894:	f3bf 8f6f 	isb	sy
		return 0;
    a898:	2000      	movs	r0, #0
    a89a:	e75d      	b.n	a758 <nrf_modem_os_timedwait+0x14>
    a89c:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
    a8a0:	f8c5 8004 	str.w	r8, [r5, #4]
    a8a4:	e78d      	b.n	a7c2 <nrf_modem_os_timedwait+0x7e>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
    a8a6:	f04f 32ff 	mov.w	r2, #4294967295
    a8aa:	4613      	mov	r3, r2
    a8ac:	e7a0      	b.n	a7f0 <nrf_modem_os_timedwait+0xac>
	parent->next = child;
    a8ae:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    a8b0:	6869      	ldr	r1, [r5, #4]
    a8b2:	4299      	cmp	r1, r3
	list->tail = node;
    a8b4:	bf08      	it	eq
    a8b6:	606a      	streq	r2, [r5, #4]
}
    a8b8:	e7b2      	b.n	a820 <nrf_modem_os_timedwait+0xdc>
	return node->next;
    a8ba:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a8bc:	681b      	ldr	r3, [r3, #0]
    a8be:	e7a4      	b.n	a80a <nrf_modem_os_timedwait+0xc6>
    a8c0:	2000ca2c 	.word	0x2000ca2c
    a8c4:	2000ca30 	.word	0x2000ca30

0000a8c8 <nrf_modem_os_sem_init>:
{
    a8c8:	b470      	push	{r4, r5, r6}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
    a8ca:	6804      	ldr	r4, [r0, #0]
    a8cc:	4b09      	ldr	r3, [pc, #36]	; (a8f4 <nrf_modem_os_sem_init+0x2c>)
    a8ce:	b12c      	cbz	r4, a8dc <nrf_modem_os_sem_init+0x14>
    a8d0:	429c      	cmp	r4, r3
    a8d2:	d303      	bcc.n	a8dc <nrf_modem_os_sem_init+0x14>
    a8d4:	f103 0570 	add.w	r5, r3, #112	; 0x70
    a8d8:	42ac      	cmp	r4, r5
    a8da:	d306      	bcc.n	a8ea <nrf_modem_os_sem_init+0x22>
	*sem = &nrf_modem_os_sems[used++];
    a8dc:	4d06      	ldr	r5, [pc, #24]	; (a8f8 <nrf_modem_os_sem_init+0x30>)
    a8de:	782c      	ldrb	r4, [r5, #0]
    a8e0:	1c66      	adds	r6, r4, #1
    a8e2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    a8e6:	702e      	strb	r6, [r5, #0]
    a8e8:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
    a8ea:	6800      	ldr	r0, [r0, #0]
}
    a8ec:	bc70      	pop	{r4, r5, r6}
	return z_impl_k_sem_init(sem, initial_count, limit);
    a8ee:	f005 bc8b 	b.w	10208 <z_impl_k_sem_init>
    a8f2:	bf00      	nop
    a8f4:	2000c9bc 	.word	0x2000c9bc
    a8f8:	2000cec5 	.word	0x2000cec5

0000a8fc <nrf_modem_os_event_notify>:
{
    a8fc:	b538      	push	{r3, r4, r5, lr}
    a8fe:	4605      	mov	r5, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    a900:	4b0a      	ldr	r3, [pc, #40]	; (a92c <nrf_modem_os_event_notify+0x30>)
    a902:	e8d3 1fef 	ldaex	r1, [r3]
    a906:	3101      	adds	r1, #1
    a908:	e8c3 1fe2 	stlex	r2, r1, [r3]
    a90c:	2a00      	cmp	r2, #0
    a90e:	d1f8      	bne.n	a902 <nrf_modem_os_event_notify+0x6>
	return list->head;
    a910:	4b07      	ldr	r3, [pc, #28]	; (a930 <nrf_modem_os_event_notify+0x34>)
    a912:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    a914:	b904      	cbnz	r4, a918 <nrf_modem_os_event_notify+0x1c>
}
    a916:	bd38      	pop	{r3, r4, r5, pc}
		if ((thread->context == context) || (context == 0)) {
    a918:	6963      	ldr	r3, [r4, #20]
    a91a:	42ab      	cmp	r3, r5
    a91c:	d000      	beq.n	a920 <nrf_modem_os_event_notify+0x24>
    a91e:	b915      	cbnz	r5, a926 <nrf_modem_os_event_notify+0x2a>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    a920:	1d20      	adds	r0, r4, #4
    a922:	f002 fdb1 	bl	d488 <z_impl_k_sem_give>
	return node->next;
    a926:	6824      	ldr	r4, [r4, #0]
    a928:	e7f4      	b.n	a914 <nrf_modem_os_event_notify+0x18>
    a92a:	bf00      	nop
    a92c:	2000ca2c 	.word	0x2000ca2c
    a930:	2000ca30 	.word	0x2000ca30

0000a934 <nrf_modem_os_alloc>:
{
    a934:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
    a936:	2200      	movs	r2, #0
    a938:	2300      	movs	r3, #0
    a93a:	4801      	ldr	r0, [pc, #4]	; (a940 <nrf_modem_os_alloc+0xc>)
    a93c:	f005 bbaa 	b.w	10094 <k_heap_alloc>
    a940:	2000ca88 	.word	0x2000ca88

0000a944 <nrf_modem_os_free>:
{
    a944:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_heap, mem);
    a946:	4801      	ldr	r0, [pc, #4]	; (a94c <nrf_modem_os_free+0x8>)
    a948:	f005 bbae 	b.w	100a8 <k_heap_free>
    a94c:	2000ca88 	.word	0x2000ca88

0000a950 <nrf_modem_os_shm_tx_alloc>:
{
    a950:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
    a952:	2200      	movs	r2, #0
    a954:	2300      	movs	r3, #0
    a956:	4801      	ldr	r0, [pc, #4]	; (a95c <nrf_modem_os_shm_tx_alloc+0xc>)
    a958:	f005 bb9c 	b.w	10094 <k_heap_alloc>
    a95c:	2000ca9c 	.word	0x2000ca9c

0000a960 <nrf_modem_os_shm_tx_free>:
{
    a960:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
    a962:	4801      	ldr	r0, [pc, #4]	; (a968 <nrf_modem_os_shm_tx_free+0x8>)
    a964:	f005 bba0 	b.w	100a8 <k_heap_free>
    a968:	2000ca9c 	.word	0x2000ca9c

0000a96c <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
    a96c:	b508      	push	{r3, lr}
	/* Initialize heaps */
	k_heap_init(&nrf_modem_lib_heap, library_heap_buf, sizeof(library_heap_buf));
    a96e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a972:	4906      	ldr	r1, [pc, #24]	; (a98c <nrf_modem_os_init+0x20>)
    a974:	4806      	ldr	r0, [pc, #24]	; (a990 <nrf_modem_os_init+0x24>)
    a976:	f005 fb38 	bl	ffea <k_heap_init>
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
		    CONFIG_NRF_MODEM_LIB_SHMEM_TX_SIZE);
}
    a97a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
    a97e:	f44f 5202 	mov.w	r2, #8320	; 0x2080
    a982:	4904      	ldr	r1, [pc, #16]	; (a994 <nrf_modem_os_init+0x28>)
    a984:	4804      	ldr	r0, [pc, #16]	; (a998 <nrf_modem_os_init+0x2c>)
    a986:	f005 bb30 	b.w	ffea <k_heap_init>
    a98a:	bf00      	nop
    a98c:	2000cec6 	.word	0x2000cec6
    a990:	2000ca88 	.word	0x2000ca88
    a994:	200084e8 	.word	0x200084e8
    a998:	2000ca9c 	.word	0x2000ca9c

0000a99c <nrf_modem_os_shutdown>:

void nrf_modem_os_shutdown(void)
{
    a99c:	b510      	push	{r4, lr}
	return list->head;
    a99e:	4b04      	ldr	r3, [pc, #16]	; (a9b0 <nrf_modem_os_shutdown+0x14>)
    a9a0:	681c      	ldr	r4, [r3, #0]
	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    a9a2:	b904      	cbnz	r4, a9a6 <nrf_modem_os_shutdown+0xa>
		k_sem_give(&thread->sem);
	}
}
    a9a4:	bd10      	pop	{r4, pc}
    a9a6:	1d20      	adds	r0, r4, #4
    a9a8:	f002 fd6e 	bl	d488 <z_impl_k_sem_give>
	return node->next;
    a9ac:	6824      	ldr	r4, [r4, #0]
    a9ae:	e7f8      	b.n	a9a2 <nrf_modem_os_shutdown+0x6>
    a9b0:	2000ca30 	.word	0x2000ca30

0000a9b4 <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(void)
{
    a9b4:	b508      	push	{r3, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
    a9b6:	4802      	ldr	r0, [pc, #8]	; (a9c0 <at_monitor_sys_init+0xc>)
    a9b8:	f001 fcc8 	bl	c34c <nrf_modem_at_notif_handler_set>
	if (err) {
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
	}

	return 0;
}
    a9bc:	2000      	movs	r0, #0
    a9be:	bd08      	pop	{r3, pc}
    a9c0:	0000aa29 	.word	0x0000aa29

0000a9c4 <at_monitor_task>:
{
    a9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
    a9c8:	4e13      	ldr	r6, [pc, #76]	; (aa18 <at_monitor_task+0x54>)
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    a9ca:	4f14      	ldr	r7, [pc, #80]	; (aa1c <at_monitor_task+0x58>)
		k_heap_free(&at_monitor_heap, at_notif);
    a9cc:	f8df 8050 	ldr.w	r8, [pc, #80]	; aa20 <at_monitor_task+0x5c>
    a9d0:	2200      	movs	r2, #0
    a9d2:	2300      	movs	r3, #0
    a9d4:	4630      	mov	r0, r6
    a9d6:	f002 fd23 	bl	d420 <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
    a9da:	4605      	mov	r5, r0
    a9dc:	b9b8      	cbnz	r0, aa0e <at_monitor_task+0x4a>
}
    a9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return mon->flags.paused;
    a9e2:	7a23      	ldrb	r3, [r4, #8]
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
    a9e4:	07da      	lsls	r2, r3, #31
    a9e6:	d40a      	bmi.n	a9fe <at_monitor_task+0x3a>
    a9e8:	079b      	lsls	r3, r3, #30
    a9ea:	d408      	bmi.n	a9fe <at_monitor_task+0x3a>
    a9ec:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
    a9ee:	b119      	cbz	r1, a9f8 <at_monitor_task+0x34>
    a9f0:	4648      	mov	r0, r9
    a9f2:	f005 fdf8 	bl	105e6 <strstr>
    a9f6:	b110      	cbz	r0, a9fe <at_monitor_task+0x3a>
				e->handler(at_notif->data);
    a9f8:	4648      	mov	r0, r9
    a9fa:	6863      	ldr	r3, [r4, #4]
    a9fc:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    a9fe:	340c      	adds	r4, #12
    aa00:	42bc      	cmp	r4, r7
    aa02:	d3ee      	bcc.n	a9e2 <at_monitor_task+0x1e>
		k_heap_free(&at_monitor_heap, at_notif);
    aa04:	4629      	mov	r1, r5
    aa06:	4640      	mov	r0, r8
    aa08:	f005 fb4e 	bl	100a8 <k_heap_free>
    aa0c:	e7e0      	b.n	a9d0 <at_monitor_task+0xc>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    aa0e:	4c05      	ldr	r4, [pc, #20]	; (aa24 <at_monitor_task+0x60>)
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
    aa10:	f105 0904 	add.w	r9, r5, #4
    aa14:	e7f4      	b.n	aa00 <at_monitor_task+0x3c>
    aa16:	bf00      	nop
    aa18:	2000c6fc 	.word	0x2000c6fc
    aa1c:	2000c6a4 	.word	0x2000c6a4
    aa20:	2000c6c0 	.word	0x2000c6c0
    aa24:	2000c698 	.word	0x2000c698

0000aa28 <at_monitor_dispatch>:
{
    aa28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa2c:	4604      	mov	r4, r0
	monitored = false;
    aa2e:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    aa30:	4d18      	ldr	r5, [pc, #96]	; (aa94 <at_monitor_dispatch+0x6c>)
    aa32:	f8df 8064 	ldr.w	r8, [pc, #100]	; aa98 <at_monitor_dispatch+0x70>
    aa36:	4545      	cmp	r5, r8
    aa38:	d318      	bcc.n	aa6c <at_monitor_dispatch+0x44>
	if (!monitored) {
    aa3a:	b34e      	cbz	r6, aa90 <at_monitor_dispatch+0x68>
	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
    aa3c:	4620      	mov	r0, r4
    aa3e:	f7fd fce9 	bl	8414 <strlen>
	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
    aa42:	2200      	movs	r2, #0
    aa44:	1d41      	adds	r1, r0, #5
    aa46:	2300      	movs	r3, #0
    aa48:	4814      	ldr	r0, [pc, #80]	; (aa9c <at_monitor_dispatch+0x74>)
    aa4a:	f005 fb23 	bl	10094 <k_heap_alloc>
	if (!at_notif) {
    aa4e:	4605      	mov	r5, r0
    aa50:	b1f0      	cbz	r0, aa90 <at_monitor_dispatch+0x68>
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    aa52:	4621      	mov	r1, r4
    aa54:	3004      	adds	r0, #4
    aa56:	f005 fd8d 	bl	10574 <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
    aa5a:	4629      	mov	r1, r5
    aa5c:	4810      	ldr	r0, [pc, #64]	; (aaa0 <at_monitor_dispatch+0x78>)
    aa5e:	f005 fbc8 	bl	101f2 <k_queue_append>
}
    aa62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_submit(&at_monitor_work);
    aa66:	480f      	ldr	r0, [pc, #60]	; (aaa4 <at_monitor_dispatch+0x7c>)
    aa68:	f002 be4c 	b.w	d704 <k_work_submit>
	return mon->flags.paused;
    aa6c:	7a2f      	ldrb	r7, [r5, #8]
		if (!is_paused(e) && has_match(e, notif)) {
    aa6e:	07fa      	lsls	r2, r7, #31
    aa70:	d40a      	bmi.n	aa88 <at_monitor_dispatch+0x60>
    aa72:	6829      	ldr	r1, [r5, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
    aa74:	b119      	cbz	r1, aa7e <at_monitor_dispatch+0x56>
    aa76:	4620      	mov	r0, r4
    aa78:	f005 fdb5 	bl	105e6 <strstr>
    aa7c:	b120      	cbz	r0, aa88 <at_monitor_dispatch+0x60>
			if (is_direct(e)) {
    aa7e:	07bb      	lsls	r3, r7, #30
    aa80:	d504      	bpl.n	aa8c <at_monitor_dispatch+0x64>
				e->handler(notif);
    aa82:	4620      	mov	r0, r4
    aa84:	686b      	ldr	r3, [r5, #4]
    aa86:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    aa88:	350c      	adds	r5, #12
    aa8a:	e7d4      	b.n	aa36 <at_monitor_dispatch+0xe>
				monitored = true;
    aa8c:	2601      	movs	r6, #1
    aa8e:	e7fb      	b.n	aa88 <at_monitor_dispatch+0x60>
}
    aa90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aa94:	2000c698 	.word	0x2000c698
    aa98:	2000c6a4 	.word	0x2000c6a4
    aa9c:	2000c6c0 	.word	0x2000c6c0
    aaa0:	2000c6fc 	.word	0x2000c6fc
    aaa4:	2000c594 	.word	0x2000c594

0000aaa8 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
    aaa8:	4b09      	ldr	r3, [pc, #36]	; (aad0 <is_valid_notification_char+0x28>)
    aaaa:	5c1b      	ldrb	r3, [r3, r0]
    aaac:	f003 0303 	and.w	r3, r3, #3
    aab0:	2b02      	cmp	r3, #2
    aab2:	bf08      	it	eq
    aab4:	3820      	subeq	r0, #32
    aab6:	b2c0      	uxtb	r0, r0

	if (((chr >= 'A') && (chr <= 'Z')) || (chr == '_')) {
    aab8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    aabc:	2b19      	cmp	r3, #25
    aabe:	d904      	bls.n	aaca <is_valid_notification_char+0x22>
    aac0:	f1a0 035f 	sub.w	r3, r0, #95	; 0x5f
    aac4:	4258      	negs	r0, r3
    aac6:	4158      	adcs	r0, r3
    aac8:	4770      	bx	lr
		return true;
    aaca:	2001      	movs	r0, #1
	}

	return false;
}
    aacc:	4770      	bx	lr
    aace:	bf00      	nop
    aad0:	000114cf 	.word	0x000114cf

0000aad4 <is_separator>:
 * @retval true  If character is ':' or ','
 * @retval false In all other cases
 */
static inline bool is_separator(char chr)
{
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
    aad4:	f1a0 032c 	sub.w	r3, r0, #44	; 0x2c
    aad8:	b2db      	uxtb	r3, r3
    aada:	2b11      	cmp	r3, #17
    aadc:	bf9d      	ittte	ls
    aade:	4803      	ldrls	r0, [pc, #12]	; (aaec <is_separator+0x18>)
    aae0:	40d8      	lsrls	r0, r3
    aae2:	f000 0001 	andls.w	r0, r0, #1
{
    aae6:	2000      	movhi	r0, #0
	    (chr == AT_CMD_SEPARATOR)) {
		return true;
	}

	return false;
}
    aae8:	4770      	bx	lr
    aaea:	bf00      	nop
    aaec:	00024001 	.word	0x00024001

0000aaf0 <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
    aaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aaf2:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
    aaf4:	2400      	movs	r4, #0
    aaf6:	4e09      	ldr	r6, [pc, #36]	; (ab1c <is_result+0x2c>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
    aaf8:	f856 7b04 	ldr.w	r7, [r6], #4
    aafc:	4638      	mov	r0, r7
    aafe:	f7fd fc89 	bl	8414 <strlen>
    ab02:	4639      	mov	r1, r7
    ab04:	4602      	mov	r2, r0
    ab06:	4628      	mov	r0, r5
    ab08:	f005 fd3c 	bl	10584 <strncmp>
		if (!diff) {
    ab0c:	b120      	cbz	r0, ab18 <is_result+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
    ab0e:	3401      	adds	r4, #1
    ab10:	2c04      	cmp	r4, #4
    ab12:	d1f1      	bne.n	aaf8 <is_result+0x8>
			return true;
		}
	}

	return false;
    ab14:	2000      	movs	r0, #0
}
    ab16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
    ab18:	2001      	movs	r0, #1
    ab1a:	e7fc      	b.n	ab16 <is_result+0x26>
    ab1c:	00010eb0 	.word	0x00010eb0

0000ab20 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
    ab20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
    ab24:	6804      	ldr	r4, [r0, #0]
{
    ab26:	b0a3      	sub	sp, #140	; 0x8c
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
    ab28:	7823      	ldrb	r3, [r4, #0]
    ab2a:	4680      	mov	r8, r0
    ab2c:	460e      	mov	r6, r1
    ab2e:	4615      	mov	r5, r2
	const char *tmpstr = *str;
    ab30:	9400      	str	r4, [sp, #0]
    ab32:	2b00      	cmp	r3, #0
    ab34:	f000 80cf 	beq.w	acd6 <at_parse_process_element+0x1b6>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
    ab38:	4b68      	ldr	r3, [pc, #416]	; (acdc <at_parse_process_element+0x1bc>)
    ab3a:	781b      	ldrb	r3, [r3, #0]
    ab3c:	2b06      	cmp	r3, #6
    ab3e:	d113      	bne.n	ab68 <at_parse_process_element+0x48>
		const char *start_ptr = tmpstr++;

		while (is_valid_notification_char(*tmpstr)) {
    ab40:	2000      	movs	r0, #0
		const char *start_ptr = tmpstr++;
    ab42:	1c62      	adds	r2, r4, #1
    ab44:	9200      	str	r2, [sp, #0]
		while (is_valid_notification_char(*tmpstr)) {
    ab46:	4611      	mov	r1, r2
    ab48:	4607      	mov	r7, r0
    ab4a:	f812 0b01 	ldrb.w	r0, [r2], #1
    ab4e:	f7ff ffab 	bl	aaa8 <is_valid_notification_char>
    ab52:	2800      	cmp	r0, #0
    ab54:	d1f7      	bne.n	ab46 <at_parse_process_element+0x26>
    ab56:	b107      	cbz	r7, ab5a <at_parse_process_element+0x3a>
    ab58:	9100      	str	r1, [sp, #0]
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
    ab5a:	1b0b      	subs	r3, r1, r4

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
    ab5c:	4622      	mov	r2, r4
    ab5e:	4631      	mov	r1, r6
    ab60:	4628      	mov	r0, r5
    ab62:	f004 ffb2 	bl	faca <at_params_string_put>
    ab66:	e046      	b.n	abf6 <at_parse_process_element+0xd6>
	} else if (state == COMMAND) {
    ab68:	3b01      	subs	r3, #1
    ab6a:	2b08      	cmp	r3, #8
    ab6c:	d843      	bhi.n	abf6 <at_parse_process_element+0xd6>
    ab6e:	e8df f003 	tbb	[pc, r3]
    ab72:	4964      	.short	0x4964
    ab74:	420da25a 	.word	0x420da25a
    ab78:	3f1c      	.short	0x3f1c
    ab7a:	05          	.byte	0x05
    ab7b:	00          	.byte	0x00
    ab7c:	4622      	mov	r2, r4
	if (state == NOTIFICATION) {
    ab7e:	2100      	movs	r1, #0
    ab80:	4613      	mov	r3, r2
    ab82:	f812 0b01 	ldrb.w	r0, [r2], #1
    ab86:	b160      	cbz	r0, aba2 <at_parse_process_element+0x82>
    ab88:	2101      	movs	r1, #1
    ab8a:	e7f9      	b.n	ab80 <at_parse_process_element+0x60>
    ab8c:	4622      	mov	r2, r4
    ab8e:	2100      	movs	r1, #0
		while (isxdigit((int)*tmpstr)) {
    ab90:	4f53      	ldr	r7, [pc, #332]	; (ace0 <at_parse_process_element+0x1c0>)
    ab92:	4613      	mov	r3, r2
    ab94:	f812 0b01 	ldrb.w	r0, [r2], #1
    ab98:	5c38      	ldrb	r0, [r7, r0]
    ab9a:	f010 0f44 	tst.w	r0, #68	; 0x44
    ab9e:	f040 8098 	bne.w	acd2 <at_parse_process_element+0x1b2>
    aba2:	b101      	cbz	r1, aba6 <at_parse_process_element+0x86>
    aba4:	9300      	str	r3, [sp, #0]
		at_params_string_put(list, index, start_ptr,
    aba6:	1b1b      	subs	r3, r3, r4
    aba8:	e7d8      	b.n	ab5c <at_parse_process_element+0x3c>
		skip_command_prefix(&tmpstr);
    abaa:	4668      	mov	r0, sp
    abac:	f004 ff28 	bl	fa00 <skip_command_prefix>
		while (is_valid_command_char(*tmpstr)) {
    abb0:	2200      	movs	r2, #0
    abb2:	9b00      	ldr	r3, [sp, #0]
	if (isalpha((int)chr) || isdigit((int)chr)) {
    abb4:	484a      	ldr	r0, [pc, #296]	; (ace0 <at_parse_process_element+0x1c0>)
    abb6:	461f      	mov	r7, r3
    abb8:	f813 1b01 	ldrb.w	r1, [r3], #1
    abbc:	5c41      	ldrb	r1, [r0, r1]
    abbe:	0749      	lsls	r1, r1, #29
    abc0:	d110      	bne.n	abe4 <at_parse_process_element+0xc4>
    abc2:	b102      	cbz	r2, abc6 <at_parse_process_element+0xa6>
    abc4:	9700      	str	r7, [sp, #0]
		at_params_string_put(list, index, start_ptr,
    abc6:	1b3b      	subs	r3, r7, r4
    abc8:	4622      	mov	r2, r4
    abca:	4631      	mov	r1, r6
    abcc:	4628      	mov	r0, r5
    abce:	f004 ff7c 	bl	faca <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
    abd2:	783b      	ldrb	r3, [r7, #0]
    abd4:	2b3d      	cmp	r3, #61	; 0x3d
    abd6:	d107      	bne.n	abe8 <at_parse_process_element+0xc8>
    abd8:	787b      	ldrb	r3, [r7, #1]
    abda:	2b3f      	cmp	r3, #63	; 0x3f
    abdc:	d10b      	bne.n	abf6 <at_parse_process_element+0xd6>
			tmpstr += 2;
    abde:	3702      	adds	r7, #2
		tmpstr++;
    abe0:	9700      	str	r7, [sp, #0]
    abe2:	e008      	b.n	abf6 <at_parse_process_element+0xd6>
    abe4:	2201      	movs	r2, #1
    abe6:	e7e6      	b.n	abb6 <at_parse_process_element+0x96>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
    abe8:	2b3f      	cmp	r3, #63	; 0x3f
    abea:	d104      	bne.n	abf6 <at_parse_process_element+0xd6>
			tmpstr++;
    abec:	3701      	adds	r7, #1
    abee:	e7f7      	b.n	abe0 <at_parse_process_element+0xc0>
		at_params_empty_put(list, index);
    abf0:	4628      	mov	r0, r5
    abf2:	f004 ff40 	bl	fa76 <at_params_empty_put>
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
    abf6:	2000      	movs	r0, #0
	*str = tmpstr;
    abf8:	9b00      	ldr	r3, [sp, #0]
    abfa:	f8c8 3000 	str.w	r3, [r8]
}
    abfe:	b023      	add	sp, #140	; 0x8c
    ac00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state == NOTIFICATION) {
    ac04:	4627      	mov	r7, r4
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
    ac06:	783a      	ldrb	r2, [r7, #0]
    ac08:	4610      	mov	r0, r2
    ac0a:	f004 fef0 	bl	f9ee <is_lfcr>
    ac0e:	463b      	mov	r3, r7
			tmpstr++;
    ac10:	3701      	adds	r7, #1
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
    ac12:	b908      	cbnz	r0, ac18 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
    ac14:	2a00      	cmp	r2, #0
    ac16:	d1f6      	bne.n	ac06 <at_parse_process_element+0xe6>
		at_params_string_put(list, index, start_ptr,
    ac18:	4622      	mov	r2, r4
    ac1a:	4631      	mov	r1, r6
    ac1c:	4628      	mov	r0, r5
    ac1e:	1b1b      	subs	r3, r3, r4
    ac20:	f004 ff53 	bl	faca <at_params_string_put>
    ac24:	e7dc      	b.n	abe0 <at_parse_process_element+0xc0>
	if (state == NOTIFICATION) {
    ac26:	4627      	mov	r7, r4
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
    ac28:	783a      	ldrb	r2, [r7, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
    ac2a:	463b      	mov	r3, r7
    ac2c:	2a22      	cmp	r2, #34	; 0x22
			tmpstr++;
    ac2e:	f107 0701 	add.w	r7, r7, #1
    ac32:	d0f1      	beq.n	ac18 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
    ac34:	2a00      	cmp	r2, #0
    ac36:	d1f7      	bne.n	ac28 <at_parse_process_element+0x108>
    ac38:	e7ee      	b.n	ac18 <at_parse_process_element+0xf8>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
    ac3a:	4620      	mov	r0, r4
    ac3c:	220a      	movs	r2, #10
    ac3e:	a901      	add	r1, sp, #4
    ac40:	f003 fcde 	bl	e600 <strtoul>
    ac44:	2401      	movs	r4, #1
		tmpstr = next;
    ac46:	9b01      	ldr	r3, [sp, #4]
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
    ac48:	9002      	str	r0, [sp, #8]
		tmpstr = next;
    ac4a:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
    ac4c:	9b00      	ldr	r3, [sp, #0]
    ac4e:	7818      	ldrb	r0, [r3, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
    ac50:	2829      	cmp	r0, #41	; 0x29
    ac52:	d025      	beq.n	aca0 <at_parse_process_element+0x180>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
    ac54:	b320      	cbz	r0, aca0 <at_parse_process_element+0x180>
					(uint32_t)strtoul(++tmpstr, &next, 10);
    ac56:	f103 0901 	add.w	r9, r3, #1
			if (is_separator(*tmpstr)) {
    ac5a:	f7ff ff3b 	bl	aad4 <is_separator>
				tmparray[i++] =
    ac5e:	f8cd 9000 	str.w	r9, [sp]
			if (is_separator(*tmpstr)) {
    ac62:	b908      	cbnz	r0, ac68 <at_parse_process_element+0x148>
					tmpstr = next;
    ac64:	4627      	mov	r7, r4
    ac66:	e019      	b.n	ac9c <at_parse_process_element+0x17c>
					(uint32_t)strtoul(++tmpstr, &next, 10);
    ac68:	220a      	movs	r2, #10
    ac6a:	a901      	add	r1, sp, #4
    ac6c:	4648      	mov	r0, r9
    ac6e:	f003 fcc7 	bl	e600 <strtoul>
				tmparray[i++] =
    ac72:	ab22      	add	r3, sp, #136	; 0x88
    ac74:	1c67      	adds	r7, r4, #1
    ac76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    ac7a:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
    ac7e:	4648      	mov	r0, r9
    ac80:	f7fd fbc8 	bl	8414 <strlen>
    ac84:	f8dd 9004 	ldr.w	r9, [sp, #4]
    ac88:	4604      	mov	r4, r0
    ac8a:	4648      	mov	r0, r9
    ac8c:	f7fd fbc2 	bl	8414 <strlen>
    ac90:	4284      	cmp	r4, r0
    ac92:	d006      	beq.n	aca2 <at_parse_process_element+0x182>
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
    ac94:	2f20      	cmp	r7, #32
					tmpstr = next;
    ac96:	f8cd 9000 	str.w	r9, [sp]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
    ac9a:	d002      	beq.n	aca2 <at_parse_process_element+0x182>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
    ac9c:	463c      	mov	r4, r7
    ac9e:	e7d5      	b.n	ac4c <at_parse_process_element+0x12c>
    aca0:	4627      	mov	r7, r4
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
    aca2:	00bb      	lsls	r3, r7, #2
    aca4:	4631      	mov	r1, r6
    aca6:	4628      	mov	r0, r5
    aca8:	aa02      	add	r2, sp, #8
    acaa:	f004 ff31 	bl	fb10 <at_params_array_put>
		tmpstr++;
    acae:	9b00      	ldr	r3, [sp, #0]
    acb0:	3301      	adds	r3, #1
    acb2:	9300      	str	r3, [sp, #0]
    acb4:	e79f      	b.n	abf6 <at_parse_process_element+0xd6>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
    acb6:	220a      	movs	r2, #10
    acb8:	4620      	mov	r0, r4
    acba:	a902      	add	r1, sp, #8
    acbc:	f003 fc24 	bl	e508 <strtoll>
    acc0:	460b      	mov	r3, r1
		tmpstr = next;
    acc2:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
    acc4:	4602      	mov	r2, r0
		tmpstr = next;
    acc6:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
    acc8:	4628      	mov	r0, r5
    acca:	4631      	mov	r1, r6
    accc:	f004 fee8 	bl	faa0 <at_params_int_put>
    acd0:	e791      	b.n	abf6 <at_parse_process_element+0xd6>
    acd2:	2101      	movs	r1, #1
    acd4:	e75d      	b.n	ab92 <at_parse_process_element+0x72>
		return -1;
    acd6:	f04f 30ff 	mov.w	r0, #4294967295
    acda:	e790      	b.n	abfe <at_parse_process_element+0xde>
    acdc:	2000d2c7 	.word	0x2000d2c7
    ace0:	000114cf 	.word	0x000114cf

0000ace4 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
    ace4:	b510      	push	{r4, lr}
    ace6:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
    ace8:	f7fd fb94 	bl	8414 <strlen>
    acec:	2801      	cmp	r0, #1
    acee:	d921      	bls.n	ad34 <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
    acf0:	7823      	ldrb	r3, [r4, #0]
    acf2:	4912      	ldr	r1, [pc, #72]	; (ad3c <is_command+0x58>)
    acf4:	5cca      	ldrb	r2, [r1, r3]
    acf6:	f002 0203 	and.w	r2, r2, #3
    acfa:	2a02      	cmp	r2, #2
    acfc:	bf08      	it	eq
    acfe:	3b20      	subeq	r3, #32
    ad00:	2b41      	cmp	r3, #65	; 0x41
    ad02:	d117      	bne.n	ad34 <is_command+0x50>
    ad04:	7863      	ldrb	r3, [r4, #1]
    ad06:	5cca      	ldrb	r2, [r1, r3]
    ad08:	f002 0203 	and.w	r2, r2, #3
    ad0c:	2a02      	cmp	r2, #2
    ad0e:	bf08      	it	eq
    ad10:	3b20      	subeq	r3, #32
    ad12:	2b54      	cmp	r3, #84	; 0x54
    ad14:	d10e      	bne.n	ad34 <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
    ad16:	78a2      	ldrb	r2, [r4, #2]
    ad18:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
    ad1c:	2b23      	cmp	r3, #35	; 0x23
    ad1e:	d00b      	beq.n	ad38 <is_command+0x54>
    ad20:	2a25      	cmp	r2, #37	; 0x25
    ad22:	d009      	beq.n	ad38 <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
    ad24:	4610      	mov	r0, r2
    ad26:	f004 fe62 	bl	f9ee <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
    ad2a:	b910      	cbnz	r0, ad32 <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
    ad2c:	fab2 f082 	clz	r0, r2
    ad30:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
    ad32:	bd10      	pop	{r4, pc}
		return false;
    ad34:	2000      	movs	r0, #0
    ad36:	e7fc      	b.n	ad32 <is_command+0x4e>
		return true;
    ad38:	2001      	movs	r0, #1
    ad3a:	e7fa      	b.n	ad32 <is_command+0x4e>
    ad3c:	000114cf 	.word	0x000114cf

0000ad40 <at_parse_detect_type>:
{
    ad40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ad44:	4607      	mov	r7, r0
	const char *tmpstr = *str;
    ad46:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
    ad48:	f8df 8190 	ldr.w	r8, [pc, #400]	; aedc <at_parse_detect_type+0x19c>
    ad4c:	2900      	cmp	r1, #0
    ad4e:	d13d      	bne.n	adcc <at_parse_detect_type+0x8c>
    ad50:	7820      	ldrb	r0, [r4, #0]
    ad52:	f004 fe40 	bl	f9d6 <is_notification>
    ad56:	4e62      	ldr	r6, [pc, #392]	; (aee0 <at_parse_detect_type+0x1a0>)
    ad58:	4605      	mov	r5, r0
    ad5a:	b360      	cbz	r0, adb6 <at_parse_detect_type+0x76>
	state = new_state;
    ad5c:	2306      	movs	r3, #6
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
    ad5e:	2205      	movs	r2, #5
    ad60:	4620      	mov	r0, r4
    ad62:	4960      	ldr	r1, [pc, #384]	; (aee4 <at_parse_detect_type+0x1a4>)
	state = new_state;
    ad64:	7033      	strb	r3, [r6, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
    ad66:	f005 fc0d 	bl	10584 <strncmp>
    ad6a:	b1f8      	cbz	r0, adac <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
    ad6c:	2205      	movs	r2, #5
    ad6e:	4620      	mov	r0, r4
    ad70:	495d      	ldr	r1, [pc, #372]	; (aee8 <at_parse_detect_type+0x1a8>)
    ad72:	f005 fc07 	bl	10584 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
    ad76:	b1c8      	cbz	r0, adac <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
    ad78:	220b      	movs	r2, #11
    ad7a:	4620      	mov	r0, r4
    ad7c:	495b      	ldr	r1, [pc, #364]	; (aeec <at_parse_detect_type+0x1ac>)
    ad7e:	f005 fc01 	bl	10584 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
    ad82:	b198      	cbz	r0, adac <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
    ad84:	220a      	movs	r2, #10
    ad86:	4620      	mov	r0, r4
    ad88:	4959      	ldr	r1, [pc, #356]	; (aef0 <at_parse_detect_type+0x1b0>)
    ad8a:	f005 fbfb 	bl	10584 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
    ad8e:	b168      	cbz	r0, adac <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
    ad90:	220b      	movs	r2, #11
    ad92:	4620      	mov	r0, r4
    ad94:	4957      	ldr	r1, [pc, #348]	; (aef4 <at_parse_detect_type+0x1b4>)
    ad96:	f005 fbf5 	bl	10584 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
    ad9a:	b138      	cbz	r0, adac <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
    ad9c:	2207      	movs	r2, #7
    ad9e:	4620      	mov	r0, r4
    ada0:	4955      	ldr	r1, [pc, #340]	; (aef8 <at_parse_detect_type+0x1b8>)
    ada2:	f005 fbef 	bl	10584 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
    ada6:	fab0 f580 	clz	r5, r0
    adaa:	096d      	lsrs	r5, r5, #5
		set_type_string = check_response_for_forced_string(tmpstr);
    adac:	f888 5000 	strb.w	r5, [r8]
	return 0;
    adb0:	2000      	movs	r0, #0
	*str = tmpstr;
    adb2:	603c      	str	r4, [r7, #0]
	return 0;
    adb4:	e04e      	b.n	ae54 <at_parse_detect_type+0x114>
	} else if (set_type_string) {
    adb6:	f898 3000 	ldrb.w	r3, [r8]
    adba:	b953      	cbnz	r3, add2 <at_parse_detect_type+0x92>
	} else if ((index == 0) && is_command(tmpstr)) {
    adbc:	4620      	mov	r0, r4
    adbe:	f7ff ff91 	bl	ace4 <is_command>
    adc2:	2800      	cmp	r0, #0
    adc4:	d048      	beq.n	ae58 <at_parse_detect_type+0x118>
	state = new_state;
    adc6:	2307      	movs	r3, #7
    adc8:	7033      	strb	r3, [r6, #0]
}
    adca:	e7f1      	b.n	adb0 <at_parse_detect_type+0x70>
	} else if (set_type_string) {
    adcc:	f898 3000 	ldrb.w	r3, [r8]
    add0:	b11b      	cbz	r3, adda <at_parse_detect_type+0x9a>
	state = new_state;
    add2:	2202      	movs	r2, #2
    add4:	4b42      	ldr	r3, [pc, #264]	; (aee0 <at_parse_detect_type+0x1a0>)
    add6:	701a      	strb	r2, [r3, #0]
}
    add8:	e7ea      	b.n	adb0 <at_parse_detect_type+0x70>
	} else if ((index > 0) && is_clac(tmpstr)) {
    adda:	2900      	cmp	r1, #0
    addc:	dd43      	ble.n	ae66 <at_parse_detect_type+0x126>
    adde:	4622      	mov	r2, r4
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
    ade0:	7815      	ldrb	r5, [r2, #0]
    ade2:	4616      	mov	r6, r2
    ade4:	4628      	mov	r0, r5
    ade6:	3201      	adds	r2, #1
    ade8:	f004 fe01 	bl	f9ee <is_lfcr>
    adec:	2800      	cmp	r0, #0
    adee:	d1f7      	bne.n	ade0 <at_parse_detect_type+0xa0>
		str++;
	}

	if (strlen(str) < 4) {
    adf0:	4630      	mov	r0, r6
    adf2:	f7fd fb0f 	bl	8414 <strlen>
    adf6:	2803      	cmp	r0, #3
    adf8:	d930      	bls.n	ae5c <at_parse_detect_type+0x11c>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
    adfa:	462b      	mov	r3, r5
    adfc:	4a3f      	ldr	r2, [pc, #252]	; (aefc <at_parse_detect_type+0x1bc>)
    adfe:	5d51      	ldrb	r1, [r2, r5]
    ae00:	f001 0103 	and.w	r1, r1, #3
    ae04:	2902      	cmp	r1, #2
    ae06:	bf08      	it	eq
    ae08:	f1a5 0320 	subeq.w	r3, r5, #32
    ae0c:	2b41      	cmp	r3, #65	; 0x41
    ae0e:	d125      	bne.n	ae5c <at_parse_detect_type+0x11c>
    ae10:	7873      	ldrb	r3, [r6, #1]
    ae12:	5cd1      	ldrb	r1, [r2, r3]
    ae14:	f001 0103 	and.w	r1, r1, #3
    ae18:	2902      	cmp	r1, #2
    ae1a:	bf08      	it	eq
    ae1c:	3b20      	subeq	r3, #32
    ae1e:	2b54      	cmp	r3, #84	; 0x54
    ae20:	d11c      	bne.n	ae5c <at_parse_detect_type+0x11c>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
    ae22:	78b3      	ldrb	r3, [r6, #2]
    ae24:	5cd1      	ldrb	r1, [r2, r3]
    ae26:	f001 0103 	and.w	r1, r1, #3
    ae2a:	2902      	cmp	r1, #2
    ae2c:	bf08      	it	eq
    ae2e:	3b20      	subeq	r3, #32
    ae30:	2b2b      	cmp	r3, #43	; 0x2b
    ae32:	d00a      	beq.n	ae4a <at_parse_detect_type+0x10a>
    ae34:	2b25      	cmp	r3, #37	; 0x25
    ae36:	d111      	bne.n	ae5c <at_parse_detect_type+0x11c>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
    ae38:	78f3      	ldrb	r3, [r6, #3]
    ae3a:	5cd2      	ldrb	r2, [r2, r3]
    ae3c:	f002 0203 	and.w	r2, r2, #3
    ae40:	2a02      	cmp	r2, #2
    ae42:	bf08      	it	eq
    ae44:	3b20      	subeq	r3, #32
    ae46:	2b58      	cmp	r3, #88	; 0x58
    ae48:	d008      	beq.n	ae5c <at_parse_detect_type+0x11c>
	state = new_state;
    ae4a:	2209      	movs	r2, #9
		return -2;
    ae4c:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
    ae50:	4b23      	ldr	r3, [pc, #140]	; (aee0 <at_parse_detect_type+0x1a0>)
    ae52:	701a      	strb	r2, [r3, #0]
}
    ae54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	state = new_state;
    ae58:	2302      	movs	r3, #2
    ae5a:	e7b5      	b.n	adc8 <at_parse_detect_type+0x88>
	} else if ((index > 0) && is_notification(*tmpstr)) {
    ae5c:	7820      	ldrb	r0, [r4, #0]
    ae5e:	f004 fdba 	bl	f9d6 <is_notification>
    ae62:	2800      	cmp	r0, #0
    ae64:	d136      	bne.n	aed4 <at_parse_detect_type+0x194>
	} else if (is_number(*tmpstr)) {
    ae66:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
    ae68:	4b24      	ldr	r3, [pc, #144]	; (aefc <at_parse_detect_type+0x1bc>)
    ae6a:	5c9b      	ldrb	r3, [r3, r2]
    ae6c:	075b      	lsls	r3, r3, #29
    ae6e:	d40a      	bmi.n	ae86 <at_parse_detect_type+0x146>
    ae70:	2a2d      	cmp	r2, #45	; 0x2d
    ae72:	d008      	beq.n	ae86 <at_parse_detect_type+0x146>
    ae74:	2a2b      	cmp	r2, #43	; 0x2b
    ae76:	d006      	beq.n	ae86 <at_parse_detect_type+0x146>
	if (chr == '"') {
    ae78:	2a22      	cmp	r2, #34	; 0x22
    ae7a:	d107      	bne.n	ae8c <at_parse_detect_type+0x14c>
	state = new_state;
    ae7c:	2203      	movs	r2, #3
    ae7e:	4b18      	ldr	r3, [pc, #96]	; (aee0 <at_parse_detect_type+0x1a0>)
		tmpstr++;
    ae80:	3401      	adds	r4, #1
	state = new_state;
    ae82:	701a      	strb	r2, [r3, #0]
		tmpstr++;
    ae84:	e794      	b.n	adb0 <at_parse_detect_type+0x70>
	state = new_state;
    ae86:	2204      	movs	r2, #4
    ae88:	4b15      	ldr	r3, [pc, #84]	; (aee0 <at_parse_detect_type+0x1a0>)
    ae8a:	e7a4      	b.n	add6 <at_parse_detect_type+0x96>
	if (chr == '(') {
    ae8c:	2a28      	cmp	r2, #40	; 0x28
    ae8e:	d104      	bne.n	ae9a <at_parse_detect_type+0x15a>
    ae90:	2201      	movs	r2, #1
    ae92:	4b13      	ldr	r3, [pc, #76]	; (aee0 <at_parse_detect_type+0x1a0>)
		tmpstr++;
    ae94:	4414      	add	r4, r2
	state = new_state;
    ae96:	701a      	strb	r2, [r3, #0]
		tmpstr++;
    ae98:	e78a      	b.n	adb0 <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
    ae9a:	4610      	mov	r0, r2
    ae9c:	f004 fda7 	bl	f9ee <is_lfcr>
    aea0:	b188      	cbz	r0, aec6 <at_parse_detect_type+0x186>
    aea2:	490f      	ldr	r1, [pc, #60]	; (aee0 <at_parse_detect_type+0x1a0>)
    aea4:	780b      	ldrb	r3, [r1, #0]
    aea6:	2b04      	cmp	r3, #4
    aea8:	d10a      	bne.n	aec0 <at_parse_detect_type+0x180>
    aeaa:	4622      	mov	r2, r4
    aeac:	4614      	mov	r4, r2
		while (is_lfcr(*tmpstr)) {
    aeae:	f812 0b01 	ldrb.w	r0, [r2], #1
    aeb2:	f004 fd9c 	bl	f9ee <is_lfcr>
    aeb6:	2800      	cmp	r0, #0
    aeb8:	d1f8      	bne.n	aeac <at_parse_detect_type+0x16c>
	state = new_state;
    aeba:	2305      	movs	r3, #5
    aebc:	700b      	strb	r3, [r1, #0]
}
    aebe:	e777      	b.n	adb0 <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
    aec0:	2b08      	cmp	r3, #8
    aec2:	f43f af75 	beq.w	adb0 <at_parse_detect_type+0x70>
	} else if (is_separator(*tmpstr)) {
    aec6:	4610      	mov	r0, r2
    aec8:	f7ff fe04 	bl	aad4 <is_separator>
    aecc:	b110      	cbz	r0, aed4 <at_parse_detect_type+0x194>
	state = new_state;
    aece:	2208      	movs	r2, #8
    aed0:	4b03      	ldr	r3, [pc, #12]	; (aee0 <at_parse_detect_type+0x1a0>)
    aed2:	e780      	b.n	add6 <at_parse_detect_type+0x96>
		return -1;
    aed4:	f04f 30ff 	mov.w	r0, #4294967295
    aed8:	e7bc      	b.n	ae54 <at_parse_detect_type+0x114>
    aeda:	bf00      	nop
    aedc:	2000d2c6 	.word	0x2000d2c6
    aee0:	2000d2c7 	.word	0x2000d2c7
    aee4:	00011208 	.word	0x00011208
    aee8:	0001120e 	.word	0x0001120e
    aeec:	00011214 	.word	0x00011214
    aef0:	00011220 	.word	0x00011220
    aef4:	0001122b 	.word	0x0001122b
    aef8:	00011237 	.word	0x00011237
    aefc:	000114cf 	.word	0x000114cf

0000af00 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
    af00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af04:	4689      	mov	r9, r1
    af06:	4616      	mov	r6, r2
    af08:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
    af0a:	4680      	mov	r8, r0
    af0c:	2800      	cmp	r0, #0
    af0e:	f000 8099 	beq.w	b044 <at_parser_max_params_from_str+0x144>
    af12:	2a00      	cmp	r2, #0
    af14:	f000 8096 	beq.w	b044 <at_parser_max_params_from_str+0x144>
    af18:	6853      	ldr	r3, [r2, #4]
    af1a:	2b00      	cmp	r3, #0
    af1c:	f000 8092 	beq.w	b044 <at_parser_max_params_from_str+0x144>
	state = IDLE;
    af20:	2400      	movs	r4, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
    af22:	4610      	mov	r0, r2
    af24:	f004 fd90 	bl	fa48 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
    af28:	4642      	mov	r2, r8
    af2a:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
    af2c:	f8cd 8004 	str.w	r8, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
    af30:	429f      	cmp	r7, r3
    af32:	bf28      	it	cs
    af34:	461f      	movcs	r7, r3
	state = IDLE;
    af36:	4b45      	ldr	r3, [pc, #276]	; (b04c <at_parser_max_params_from_str+0x14c>)
    af38:	701c      	strb	r4, [r3, #0]
	set_type_string = false;
    af3a:	4b45      	ldr	r3, [pc, #276]	; (b050 <at_parser_max_params_from_str+0x150>)
    af3c:	701c      	strb	r4, [r3, #0]
    af3e:	4611      	mov	r1, r2
	while (is_lfcr(*str)) {
    af40:	7808      	ldrb	r0, [r1, #0]
    af42:	f004 fd54 	bl	f9ee <is_lfcr>
    af46:	4625      	mov	r5, r4
    af48:	3201      	adds	r2, #1
    af4a:	4604      	mov	r4, r0
    af4c:	2800      	cmp	r0, #0
    af4e:	d1f6      	bne.n	af3e <at_parser_max_params_from_str+0x3e>
    af50:	b105      	cbz	r5, af54 <at_parser_max_params_from_str+0x54>
    af52:	9101      	str	r1, [sp, #4]
	int index = 0;
    af54:	2500      	movs	r5, #0
		if (isspace((int)*str)) {
    af56:	f8df b0fc 	ldr.w	fp, [pc, #252]	; b054 <at_parser_max_params_from_str+0x154>
	while ((!is_terminated(*str)) && (index < max_params)) {
    af5a:	9b01      	ldr	r3, [sp, #4]
    af5c:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
    af5e:	2a00      	cmp	r2, #0
    af60:	d050      	beq.n	b004 <at_parser_max_params_from_str+0x104>
    af62:	42af      	cmp	r7, r5
    af64:	d94e      	bls.n	b004 <at_parser_max_params_from_str+0x104>
		if (isspace((int)*str)) {
    af66:	f81b 2002 	ldrb.w	r2, [fp, r2]
		ret = at_parse_detect_type(&str, index);
    af6a:	4629      	mov	r1, r5
		if (isspace((int)*str)) {
    af6c:	0712      	lsls	r2, r2, #28
			str++;
    af6e:	bf48      	it	mi
    af70:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
    af72:	a801      	add	r0, sp, #4
			str++;
    af74:	bf48      	it	mi
    af76:	9301      	strmi	r3, [sp, #4]
		ret = at_parse_detect_type(&str, index);
    af78:	f7ff fee2 	bl	ad40 <at_parse_detect_type>
		if (ret == -1) {
    af7c:	1c43      	adds	r3, r0, #1
    af7e:	d041      	beq.n	b004 <at_parser_max_params_from_str+0x104>
		if (ret == -2) {
    af80:	3002      	adds	r0, #2
			index = 0;
    af82:	bf08      	it	eq
    af84:	2500      	moveq	r5, #0
		if (at_parse_process_element(&str, index, list) == -1) {
    af86:	4632      	mov	r2, r6
    af88:	4629      	mov	r1, r5
    af8a:	a801      	add	r0, sp, #4
			str = *at_params_str;
    af8c:	bf08      	it	eq
    af8e:	f8cd 8004 	streq.w	r8, [sp, #4]
		if (at_parse_process_element(&str, index, list) == -1) {
    af92:	f7ff fdc5 	bl	ab20 <at_parse_process_element>
    af96:	3001      	adds	r0, #1
    af98:	d034      	beq.n	b004 <at_parser_max_params_from_str+0x104>
		if (is_separator(*str)) {
    af9a:	9a01      	ldr	r2, [sp, #4]
    af9c:	7810      	ldrb	r0, [r2, #0]
    af9e:	f7ff fd99 	bl	aad4 <is_separator>
    afa2:	b1b0      	cbz	r0, afd2 <at_parser_max_params_from_str+0xd2>
			if (is_lfcr(*(str + 1))) {
    afa4:	7850      	ldrb	r0, [r2, #1]
    afa6:	f004 fd22 	bl	f9ee <is_lfcr>
    afaa:	b178      	cbz	r0, afcc <at_parser_max_params_from_str+0xcc>
				index++;
    afac:	3501      	adds	r5, #1
				if (index == max_params) {
    afae:	42bd      	cmp	r5, r7
    afb0:	d041      	beq.n	b036 <at_parser_max_params_from_str+0x136>
				if (at_parse_detect_type(&str, index) == -1) {
    afb2:	4629      	mov	r1, r5
    afb4:	a801      	add	r0, sp, #4
    afb6:	f7ff fec3 	bl	ad40 <at_parse_detect_type>
    afba:	3001      	adds	r0, #1
    afbc:	d022      	beq.n	b004 <at_parser_max_params_from_str+0x104>
				if (at_parse_process_element(&str, index,
    afbe:	4632      	mov	r2, r6
    afc0:	4629      	mov	r1, r5
    afc2:	a801      	add	r0, sp, #4
    afc4:	f7ff fdac 	bl	ab20 <at_parse_process_element>
    afc8:	3001      	adds	r0, #1
    afca:	d01b      	beq.n	b004 <at_parser_max_params_from_str+0x104>
			str++;
    afcc:	9b01      	ldr	r3, [sp, #4]
    afce:	3301      	adds	r3, #1
    afd0:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
    afd2:	9a01      	ldr	r2, [sp, #4]
    afd4:	7810      	ldrb	r0, [r2, #0]
    afd6:	f004 fd0a 	bl	f9ee <is_lfcr>
    afda:	b338      	cbz	r0, b02c <at_parser_max_params_from_str+0x12c>
    afdc:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
    afde:	7811      	ldrb	r1, [r2, #0]
    afe0:	4692      	mov	sl, r2
    afe2:	4608      	mov	r0, r1
    afe4:	3201      	adds	r2, #1
    afe6:	f004 fd02 	bl	f9ee <is_lfcr>
    afea:	2800      	cmp	r0, #0
    afec:	d1f7      	bne.n	afde <at_parser_max_params_from_str+0xde>
    afee:	b139      	cbz	r1, b000 <at_parser_max_params_from_str+0x100>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
    aff0:	4608      	mov	r0, r1
    aff2:	f004 fcf0 	bl	f9d6 <is_notification>
    aff6:	b918      	cbnz	r0, b000 <at_parser_max_params_from_str+0x100>
			    is_result(str + i)) {
    aff8:	4650      	mov	r0, sl
    affa:	f7ff fd79 	bl	aaf0 <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
    affe:	b1a8      	cbz	r0, b02c <at_parser_max_params_from_str+0x12c>
				str += i;
    b000:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
    b004:	9d01      	ldr	r5, [sp, #4]
	if (oversized) {
    b006:	b9c4      	cbnz	r4, b03a <at_parser_max_params_from_str+0x13a>
    b008:	782b      	ldrb	r3, [r5, #0]
    b00a:	b1cb      	cbz	r3, b040 <at_parser_max_params_from_str+0x140>
	if (!is_terminated(*str) && !is_result(str)) {
    b00c:	4628      	mov	r0, r5
    b00e:	f7ff fd6f 	bl	aaf0 <is_result>
		return -EAGAIN;
    b012:	2800      	cmp	r0, #0
    b014:	bf14      	ite	ne
    b016:	2000      	movne	r0, #0
    b018:	f06f 000a 	mvneq.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
    b01c:	f1b9 0f00 	cmp.w	r9, #0
    b020:	d001      	beq.n	b026 <at_parser_max_params_from_str+0x126>
		*next_param_str = (char *)at_params_str;
    b022:	f8c9 5000 	str.w	r5, [r9]
	}

	return err;
}
    b026:	b003      	add	sp, #12
    b028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
    b02c:	3501      	adds	r5, #1
			oversized = true;
    b02e:	42bd      	cmp	r5, r7
    b030:	bf08      	it	eq
    b032:	2401      	moveq	r4, #1
    b034:	e791      	b.n	af5a <at_parser_max_params_from_str+0x5a>
					oversized = true;
    b036:	4604      	mov	r4, r0
    b038:	e7e4      	b.n	b004 <at_parser_max_params_from_str+0x104>
		return -E2BIG;
    b03a:	f06f 0006 	mvn.w	r0, #6
    b03e:	e7ed      	b.n	b01c <at_parser_max_params_from_str+0x11c>
	return 0;
    b040:	4620      	mov	r0, r4
    b042:	e7eb      	b.n	b01c <at_parser_max_params_from_str+0x11c>
		return -EINVAL;
    b044:	f06f 0015 	mvn.w	r0, #21
    b048:	e7ed      	b.n	b026 <at_parser_max_params_from_str+0x126>
    b04a:	bf00      	nop
    b04c:	2000d2c7 	.word	0x2000d2c7
    b050:	2000d2c6 	.word	0x2000d2c6
    b054:	000114cf 	.word	0x000114cf

0000b058 <modem_info_parse>:
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
			    const char *buf)
{
    b058:	b510      	push	{r4, lr}
    b05a:	4604      	mov	r4, r0
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
    b05c:	4a09      	ldr	r2, [pc, #36]	; (b084 <modem_info_parse+0x2c>)
{
    b05e:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
    b060:	7a63      	ldrb	r3, [r4, #9]
    b062:	2100      	movs	r1, #0
    b064:	f7ff ff4c 	bl	af00 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
    b068:	f110 0f0b 	cmn.w	r0, #11
    b06c:	d000      	beq.n	b070 <modem_info_parse+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
    b06e:	b940      	cbnz	r0, b082 <modem_info_parse+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
    b070:	4804      	ldr	r0, [pc, #16]	; (b084 <modem_info_parse+0x2c>)
    b072:	f004 fd88 	bl	fb86 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
    b076:	7a63      	ldrb	r3, [r4, #9]
		return -EAGAIN;
	}

	return err;
    b078:	4298      	cmp	r0, r3
    b07a:	bf8c      	ite	hi
    b07c:	f06f 000a 	mvnhi.w	r0, #10
    b080:	2000      	movls	r0, #0
}
    b082:	bd10      	pop	{r4, pc}
    b084:	2000cab0 	.word	0x2000cab0

0000b088 <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(const char *notif)
{
    b088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    b08a:	4604      	mov	r4, r0
	int err;
	uint16_t param_value;

	const struct modem_info_data rsrp_notify_data = {
    b08c:	4a0b      	ldr	r2, [pc, #44]	; (b0bc <modem_info_rsrp_subscribe_handler+0x34>)
    b08e:	ab01      	add	r3, sp, #4
    b090:	ca07      	ldmia	r2, {r0, r1, r2}
    b092:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.param_index	= RSRP_NOTIFY_PARAM_INDEX,
		.param_count	= RSRP_NOTIFY_PARAM_COUNT,
		.data_type	= AT_PARAM_TYPE_NUM_INT,
	};

	err = modem_info_parse(&rsrp_notify_data, notif);
    b096:	4621      	mov	r1, r4
    b098:	4618      	mov	r0, r3
    b09a:	f7ff ffdd 	bl	b058 <modem_info_parse>
	if (err != 0) {
    b09e:	b958      	cbnz	r0, b0b8 <modem_info_rsrp_subscribe_handler+0x30>
		LOG_ERR("modem_info_parse failed to parse "
			"CESQ notification, %d", err);
		return;
	}

	err = at_params_unsigned_short_get(&m_param_list,
    b0a0:	2101      	movs	r1, #1
    b0a2:	4807      	ldr	r0, [pc, #28]	; (b0c0 <modem_info_rsrp_subscribe_handler+0x38>)
    b0a4:	f10d 0202 	add.w	r2, sp, #2
    b0a8:	f004 fd55 	bl	fb56 <at_params_unsigned_short_get>
					   rsrp_notify_data.param_index,
					   &param_value);
	if (err != 0) {
    b0ac:	b920      	cbnz	r0, b0b8 <modem_info_rsrp_subscribe_handler+0x30>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
		return;
	}

	modem_info_rsrp_cb(param_value);
    b0ae:	4b05      	ldr	r3, [pc, #20]	; (b0c4 <modem_info_rsrp_subscribe_handler+0x3c>)
    b0b0:	f89d 0002 	ldrb.w	r0, [sp, #2]
    b0b4:	681b      	ldr	r3, [r3, #0]
    b0b6:	4798      	blx	r3
}
    b0b8:	b004      	add	sp, #16
    b0ba:	bd10      	pop	{r4, pc}
    b0bc:	00010d90 	.word	0x00010d90
    b0c0:	2000cab0 	.word	0x2000cab0
    b0c4:	2000cab8 	.word	0x2000cab8

0000b0c8 <on_modem_lib_init>:
LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
{
    b0c8:	b508      	push	{r3, lr}
	int err;

	if (ret != 0) {
    b0ca:	b948      	cbnz	r0, b0e0 <on_modem_lib_init+0x18>
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
    b0cc:	4905      	ldr	r1, [pc, #20]	; (b0e4 <on_modem_lib_init+0x1c>)
    b0ce:	4806      	ldr	r0, [pc, #24]	; (b0e8 <on_modem_lib_init+0x20>)
    b0d0:	f001 f942 	bl	c358 <nrf_modem_at_printf>
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		if (err) {
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
		}
	}
}
    b0d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
    b0d8:	4904      	ldr	r1, [pc, #16]	; (b0ec <on_modem_lib_init+0x24>)
    b0da:	4803      	ldr	r0, [pc, #12]	; (b0e8 <on_modem_lib_init+0x20>)
    b0dc:	f001 b93c 	b.w	c358 <nrf_modem_at_printf>
}
    b0e0:	bd08      	pop	{r3, pc}
    b0e2:	bf00      	nop
    b0e4:	00011418 	.word	0x00011418
    b0e8:	00011437 	.word	0x00011437
    b0ec:	0001143a 	.word	0x0001143a

0000b0f0 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
    b0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b0f4:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
    b0f6:	4b15      	ldr	r3, [pc, #84]	; (b14c <tfm_ns_interface_dispatch+0x5c>)
    b0f8:	4604      	mov	r4, r0
    b0fa:	f893 8000 	ldrb.w	r8, [r3]
    b0fe:	460d      	mov	r5, r1
    b100:	4616      	mov	r6, r2
    b102:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();
	int tfm_ns_saved_prio;

	if (!is_pre_kernel) {
    b104:	f1b8 0f00 	cmp.w	r8, #0
    b108:	d115      	bne.n	b136 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
    b10a:	4668      	mov	r0, sp
    b10c:	f004 faed 	bl	f6ea <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
    b110:	463a      	mov	r2, r7
    b112:	4631      	mov	r1, r6
    b114:	4628      	mov	r0, r5
    b116:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    b118:	47a0      	blx	r4
    b11a:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
    b11c:	4668      	mov	r0, sp
    b11e:	f004 fae5 	bl	f6ec <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
    b122:	f1b8 0f00 	cmp.w	r8, #0
    b126:	d002      	beq.n	b12e <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
    b128:	4809      	ldr	r0, [pc, #36]	; (b150 <tfm_ns_interface_dispatch+0x60>)
    b12a:	f002 f93d 	bl	d3a8 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
    b12e:	4620      	mov	r0, r4
    b130:	b022      	add	sp, #136	; 0x88
    b132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
    b136:	f04f 32ff 	mov.w	r2, #4294967295
    b13a:	f04f 33ff 	mov.w	r3, #4294967295
    b13e:	4804      	ldr	r0, [pc, #16]	; (b150 <tfm_ns_interface_dispatch+0x60>)
    b140:	f002 f8b8 	bl	d2b4 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
    b144:	2800      	cmp	r0, #0
    b146:	d0e0      	beq.n	b10a <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
    b148:	241f      	movs	r4, #31
    b14a:	e7f0      	b.n	b12e <tfm_ns_interface_dispatch+0x3e>
    b14c:	2000d2d6 	.word	0x2000d2d6
    b150:	2000c6e8 	.word	0x2000c6e8

0000b154 <psa_generate_random>:
    return API_DISPATCH_NO_OUTVEC(in_vec);
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
    b154:	b570      	push	{r4, r5, r6, lr}
    struct tfm_crypto_pack_iovec iov = {
    b156:	2630      	movs	r6, #48	; 0x30
{
    b158:	b092      	sub	sp, #72	; 0x48
    struct tfm_crypto_pack_iovec iov = {
    b15a:	ab06      	add	r3, sp, #24
{
    b15c:	4605      	mov	r5, r0
    b15e:	460c      	mov	r4, r1
    struct tfm_crypto_pack_iovec iov = {
    b160:	4632      	mov	r2, r6
    b162:	2100      	movs	r1, #0
    b164:	4618      	mov	r0, r3
    b166:	f005 f9fd 	bl	10564 <memset>

    psa_invec in_vec[] = {
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
    b16a:	e9cd 5404 	strd	r5, r4, [sp, #16]
    psa_invec in_vec[] = {
    b16e:	e9cd 0602 	strd	r0, r6, [sp, #8]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
    b172:	b154      	cbz	r4, b18a <psa_generate_random+0x36>
        return PSA_SUCCESS;
    }

    return API_DISPATCH(in_vec, out_vec);
    b174:	2301      	movs	r3, #1
    b176:	aa04      	add	r2, sp, #16
    b178:	9200      	str	r2, [sp, #0]
    b17a:	2100      	movs	r1, #0
    b17c:	4804      	ldr	r0, [pc, #16]	; (b190 <psa_generate_random+0x3c>)
    b17e:	9301      	str	r3, [sp, #4]
    b180:	aa02      	add	r2, sp, #8
    b182:	f000 f807 	bl	b194 <psa_call>
}
    b186:	b012      	add	sp, #72	; 0x48
    b188:	bd70      	pop	{r4, r5, r6, pc}
        return PSA_SUCCESS;
    b18a:	4620      	mov	r0, r4
    b18c:	e7fb      	b.n	b186 <psa_generate_random+0x32>
    b18e:	bf00      	nop
    b190:	40000100 	.word	0x40000100

0000b194 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
    b194:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
    b196:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
    b19a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
    b19e:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
    b1a0:	d20d      	bcs.n	b1be <psa_call+0x2a>
        (type < INT16_MIN) ||
    b1a2:	ea43 0504 	orr.w	r5, r3, r4
    b1a6:	2dff      	cmp	r5, #255	; 0xff
    b1a8:	d809      	bhi.n	b1be <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
    b1aa:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
    b1ae:	4613      	mov	r3, r2
    b1b0:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
    b1b4:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
    b1b6:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
    b1b8:	4803      	ldr	r0, [pc, #12]	; (b1c8 <psa_call+0x34>)
    b1ba:	f7ff bf99 	b.w	b0f0 <tfm_ns_interface_dispatch>
}
    b1be:	f06f 0080 	mvn.w	r0, #128	; 0x80
    b1c2:	bc30      	pop	{r4, r5}
    b1c4:	4770      	bx	lr
    b1c6:	bf00      	nop
    b1c8:	00007c11 	.word	0x00007c11

0000b1cc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    b1cc:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    b1ce:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    b1d0:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    b1d2:	fab2 f382 	clz	r3, r2
    b1d6:	f1c3 031f 	rsb	r3, r3, #31
    b1da:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    b1dc:	fa05 f403 	lsl.w	r4, r5, r3
    b1e0:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b1e4:	e8d0 6fef 	ldaex	r6, [r0]
    b1e8:	4296      	cmp	r6, r2
    b1ea:	d104      	bne.n	b1f6 <nrfx_flag32_alloc+0x2a>
    b1ec:	e8c0 4fec 	stlex	ip, r4, [r0]
    b1f0:	f1bc 0f00 	cmp.w	ip, #0
    b1f4:	d1f6      	bne.n	b1e4 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    b1f6:	d1eb      	bne.n	b1d0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    b1f8:	4801      	ldr	r0, [pc, #4]	; (b200 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    b1fa:	700b      	strb	r3, [r1, #0]
}
    b1fc:	bd70      	pop	{r4, r5, r6, pc}
    b1fe:	bf00      	nop
    b200:	0bad0000 	.word	0x0bad0000

0000b204 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    b204:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    b206:	6803      	ldr	r3, [r0, #0]
    b208:	40cb      	lsrs	r3, r1
    b20a:	07db      	lsls	r3, r3, #31
    b20c:	d410      	bmi.n	b230 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    b20e:	2301      	movs	r3, #1
    b210:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    b212:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    b214:	ea43 0102 	orr.w	r1, r3, r2
    b218:	e8d0 4fef 	ldaex	r4, [r0]
    b21c:	4294      	cmp	r4, r2
    b21e:	d104      	bne.n	b22a <nrfx_flag32_free+0x26>
    b220:	e8c0 1fec 	stlex	ip, r1, [r0]
    b224:	f1bc 0f00 	cmp.w	ip, #0
    b228:	d1f6      	bne.n	b218 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    b22a:	d1f2      	bne.n	b212 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    b22c:	4801      	ldr	r0, [pc, #4]	; (b234 <nrfx_flag32_free+0x30>)
}
    b22e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    b230:	4801      	ldr	r0, [pc, #4]	; (b238 <nrfx_flag32_free+0x34>)
    b232:	e7fc      	b.n	b22e <nrfx_flag32_free+0x2a>
    b234:	0bad0000 	.word	0x0bad0000
    b238:	0bad0004 	.word	0x0bad0004

0000b23c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    b23c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    b23e:	4604      	mov	r4, r0
    b240:	b118      	cbz	r0, b24a <clock_stop+0xe>
    b242:	2801      	cmp	r0, #1
    b244:	d01e      	beq.n	b284 <clock_stop+0x48>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    b246:	b003      	add	sp, #12
    b248:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    b24a:	2202      	movs	r2, #2
    b24c:	4b27      	ldr	r3, [pc, #156]	; (b2ec <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    b24e:	4607      	mov	r7, r0
    b250:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b254:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    b258:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b25c:	2201      	movs	r2, #1
    b25e:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    b260:	2301      	movs	r3, #1
    b262:	f242 7510 	movw	r5, #10000	; 0x2710
    b266:	4e21      	ldr	r6, [pc, #132]	; (b2ec <clock_stop+0xb0>)
    b268:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    b26c:	b1b4      	cbz	r4, b29c <clock_stop+0x60>
    b26e:	2c01      	cmp	r4, #1
    b270:	d1e9      	bne.n	b246 <clock_stop+0xa>
            if (p_clk_src != NULL)
    b272:	b387      	cbz	r7, b2d6 <clock_stop+0x9a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    b274:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    b278:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    b27c:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    b27e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    b282:	e013      	b.n	b2ac <clock_stop+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b284:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    b286:	4b19      	ldr	r3, [pc, #100]	; (b2ec <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    b288:	f10d 0707 	add.w	r7, sp, #7
    b28c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b290:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    b294:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b298:	6058      	str	r0, [r3, #4]
    b29a:	e7e1      	b.n	b260 <clock_stop+0x24>
            if (p_clk_src != NULL)
    b29c:	b18f      	cbz	r7, b2c2 <clock_stop+0x86>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b29e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    b2a2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    b2a6:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b2a8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    b2ac:	03da      	lsls	r2, r3, #15
    b2ae:	d5ca      	bpl.n	b246 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    b2b0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    b2b4:	2801      	cmp	r0, #1
    b2b6:	d1c6      	bne.n	b246 <clock_stop+0xa>
    b2b8:	f004 fc84 	bl	fbc4 <nrfx_busy_wait>
    b2bc:	3d01      	subs	r5, #1
    b2be:	d1d5      	bne.n	b26c <clock_stop+0x30>
    b2c0:	e7c1      	b.n	b246 <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b2c2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    b2c6:	03d9      	lsls	r1, r3, #15
    b2c8:	d5bd      	bpl.n	b246 <clock_stop+0xa>
    b2ca:	2001      	movs	r0, #1
    b2cc:	f004 fc7a 	bl	fbc4 <nrfx_busy_wait>
    b2d0:	3d01      	subs	r5, #1
    b2d2:	d1f6      	bne.n	b2c2 <clock_stop+0x86>
    b2d4:	e7b7      	b.n	b246 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    b2d6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    b2da:	03db      	lsls	r3, r3, #15
    b2dc:	d5b3      	bpl.n	b246 <clock_stop+0xa>
    b2de:	2001      	movs	r0, #1
    b2e0:	f004 fc70 	bl	fbc4 <nrfx_busy_wait>
    b2e4:	3d01      	subs	r5, #1
    b2e6:	d1f6      	bne.n	b2d6 <clock_stop+0x9a>
    b2e8:	e7ad      	b.n	b246 <clock_stop+0xa>
    b2ea:	bf00      	nop
    b2ec:	40005000 	.word	0x40005000

0000b2f0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    b2f0:	4b04      	ldr	r3, [pc, #16]	; (b304 <nrfx_clock_init+0x14>)
    b2f2:	791a      	ldrb	r2, [r3, #4]
    b2f4:	b922      	cbnz	r2, b300 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    b2f6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    b2f8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    b2fa:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    b2fc:	4802      	ldr	r0, [pc, #8]	; (b308 <nrfx_clock_init+0x18>)
    b2fe:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    b300:	4802      	ldr	r0, [pc, #8]	; (b30c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    b302:	4770      	bx	lr
    b304:	2000cabc 	.word	0x2000cabc
    b308:	0bad0000 	.word	0x0bad0000
    b30c:	0bad000c 	.word	0x0bad000c

0000b310 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    b310:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    b312:	2005      	movs	r0, #5
    b314:	f7fe f884 	bl	9420 <arch_irq_is_enabled>
    b318:	b910      	cbnz	r0, b320 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    b31a:	2005      	movs	r0, #5
    b31c:	f7fe f872 	bl	9404 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    b320:	2301      	movs	r3, #1
    b322:	4a03      	ldr	r2, [pc, #12]	; (b330 <nrfx_clock_enable+0x20>)
    b324:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    b328:	4a02      	ldr	r2, [pc, #8]	; (b334 <nrfx_clock_enable+0x24>)
    b32a:	7013      	strb	r3, [r2, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    b32c:	bd08      	pop	{r3, pc}
    b32e:	bf00      	nop
    b330:	40005000 	.word	0x40005000
    b334:	2000d2c8 	.word	0x2000d2c8

0000b338 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    b338:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    b33a:	b110      	cbz	r0, b342 <nrfx_clock_start+0xa>
    b33c:	2801      	cmp	r0, #1
    b33e:	d02e      	beq.n	b39e <nrfx_clock_start+0x66>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    b340:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b342:	4a1c      	ldr	r2, [pc, #112]	; (b3b4 <nrfx_clock_start+0x7c>)
    b344:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b348:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    b34c:	03c9      	lsls	r1, r1, #15
    b34e:	d40e      	bmi.n	b36e <nrfx_clock_start+0x36>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    b350:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    b354:	07db      	lsls	r3, r3, #31
    b356:	d513      	bpl.n	b380 <nrfx_clock_start+0x48>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    b358:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    b35c:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    b360:	3b01      	subs	r3, #1
    b362:	2b01      	cmp	r3, #1
    b364:	d809      	bhi.n	b37a <nrfx_clock_start+0x42>
    p_reg->INTENSET = mask;
    b366:	2302      	movs	r3, #2
    b368:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    b36c:	e7e8      	b.n	b340 <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b36e:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    b372:	2b02      	cmp	r3, #2
    b374:	d005      	beq.n	b382 <nrfx_clock_start+0x4a>
    b376:	2b01      	cmp	r3, #1
    b378:	d002      	beq.n	b380 <nrfx_clock_start+0x48>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    b37a:	2000      	movs	r0, #0
    b37c:	f7ff ff5e 	bl	b23c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    b380:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    b382:	4a0c      	ldr	r2, [pc, #48]	; (b3b4 <nrfx_clock_start+0x7c>)
    b384:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b388:	2300      	movs	r3, #0
    b38a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    b38e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    b392:	2302      	movs	r3, #2
    b394:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b398:	2301      	movs	r3, #1
    b39a:	6093      	str	r3, [r2, #8]
}
    b39c:	e7d0      	b.n	b340 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b39e:	2200      	movs	r2, #0
    b3a0:	4b04      	ldr	r3, [pc, #16]	; (b3b4 <nrfx_clock_start+0x7c>)
    b3a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    b3a6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    b3aa:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b3ae:	6018      	str	r0, [r3, #0]
}
    b3b0:	e7c6      	b.n	b340 <nrfx_clock_start+0x8>
    b3b2:	bf00      	nop
    b3b4:	40005000 	.word	0x40005000

0000b3b8 <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    b3b8:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    b3ba:	4b17      	ldr	r3, [pc, #92]	; (b418 <nrfx_clock_irq_handler+0x60>)
    b3bc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    b3c0:	b152      	cbz	r2, b3d8 <nrfx_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b3c2:	2000      	movs	r0, #0
    b3c4:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    b3c8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    b3cc:	2201      	movs	r2, #1
    b3ce:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    b3d2:	4b12      	ldr	r3, [pc, #72]	; (b41c <nrfx_clock_irq_handler+0x64>)
    b3d4:	681b      	ldr	r3, [r3, #0]
    b3d6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    b3d8:	4b0f      	ldr	r3, [pc, #60]	; (b418 <nrfx_clock_irq_handler+0x60>)
    b3da:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    b3de:	b18a      	cbz	r2, b404 <nrfx_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b3e0:	2200      	movs	r2, #0
    b3e2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    b3e6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b3ea:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b3ee:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    b3f2:	f002 0203 	and.w	r2, r2, #3
    b3f6:	2a01      	cmp	r2, #1
    b3f8:	f04f 0102 	mov.w	r1, #2
    b3fc:	d103      	bne.n	b406 <nrfx_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    b3fe:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b402:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    b404:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    b406:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    b40a:	4b04      	ldr	r3, [pc, #16]	; (b41c <nrfx_clock_irq_handler+0x64>)
    b40c:	2001      	movs	r0, #1
}
    b40e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    b412:	681b      	ldr	r3, [r3, #0]
    b414:	4718      	bx	r3
    b416:	bf00      	nop
    b418:	40005000 	.word	0x40005000
    b41c:	2000cabc 	.word	0x2000cabc

0000b420 <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b420:	4a06      	ldr	r2, [pc, #24]	; (b43c <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
    b422:	f000 001f 	and.w	r0, r0, #31
    b426:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b42a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    cnf &= ~to_update;
    b42e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    b432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    b436:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    b43a:	4770      	bx	lr
    b43c:	40842500 	.word	0x40842500

0000b440 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    b440:	4b03      	ldr	r3, [pc, #12]	; (b450 <pin_in_use_by_te+0x10>)
    b442:	3008      	adds	r0, #8
    b444:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    b448:	f3c0 1040 	ubfx	r0, r0, #5, #1
    b44c:	4770      	bx	lr
    b44e:	bf00      	nop
    b450:	2000c5a4 	.word	0x2000c5a4

0000b454 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    b454:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    b456:	4c0d      	ldr	r4, [pc, #52]	; (b48c <call_handler+0x38>)
    b458:	f100 0308 	add.w	r3, r0, #8
    b45c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    b460:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    b462:	05da      	lsls	r2, r3, #23
{
    b464:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    b466:	d507      	bpl.n	b478 <call_handler+0x24>
    b468:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    b46c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    b470:	6852      	ldr	r2, [r2, #4]
    b472:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    b476:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    b478:	68a3      	ldr	r3, [r4, #8]
    b47a:	b12b      	cbz	r3, b488 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    b47c:	4631      	mov	r1, r6
    b47e:	4628      	mov	r0, r5
    b480:	68e2      	ldr	r2, [r4, #12]
    }
}
    b482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    b486:	4718      	bx	r3
}
    b488:	bd70      	pop	{r4, r5, r6, pc}
    b48a:	bf00      	nop
    b48c:	2000c5a4 	.word	0x2000c5a4

0000b490 <release_handler>:
{
    b490:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    b492:	4a12      	ldr	r2, [pc, #72]	; (b4dc <release_handler+0x4c>)
    b494:	3008      	adds	r0, #8
    b496:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    b49a:	05d9      	lsls	r1, r3, #23
    b49c:	d51b      	bpl.n	b4d6 <release_handler+0x46>
    b49e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    b4a2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    b4a6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    b4aa:	2000      	movs	r0, #0
    b4ac:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    b4b0:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    b4b4:	f413 7f80 	tst.w	r3, #256	; 0x100
    b4b8:	d003      	beq.n	b4c2 <release_handler+0x32>
    b4ba:	f3c3 2343 	ubfx	r3, r3, #9, #4
    b4be:	4299      	cmp	r1, r3
    b4c0:	d009      	beq.n	b4d6 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    b4c2:	3001      	adds	r0, #1
    b4c4:	2820      	cmp	r0, #32
    b4c6:	d1f3      	bne.n	b4b0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    b4c8:	2300      	movs	r3, #0
    b4ca:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    b4ce:	4804      	ldr	r0, [pc, #16]	; (b4e0 <release_handler+0x50>)
}
    b4d0:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    b4d2:	f7ff be97 	b.w	b204 <nrfx_flag32_free>
}
    b4d6:	bc10      	pop	{r4}
    b4d8:	4770      	bx	lr
    b4da:	bf00      	nop
    b4dc:	2000c5a4 	.word	0x2000c5a4
    b4e0:	2000c5f8 	.word	0x2000c5f8

0000b4e4 <pin_handler_trigger_uninit>:
{
    b4e4:	b538      	push	{r3, r4, r5, lr}
    b4e6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    b4e8:	f7ff ffaa 	bl	b440 <pin_in_use_by_te>
    b4ec:	4c0b      	ldr	r4, [pc, #44]	; (b51c <pin_handler_trigger_uninit+0x38>)
    b4ee:	f102 0508 	add.w	r5, r2, #8
    b4f2:	b160      	cbz	r0, b50e <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    b4f4:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b4f6:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    b4fa:	0b5b      	lsrs	r3, r3, #13
    b4fc:	009b      	lsls	r3, r3, #2
    b4fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b502:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    b506:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
    b50a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    b50e:	4610      	mov	r0, r2
    b510:	f7ff ffbe 	bl	b490 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    b514:	2300      	movs	r3, #0
    b516:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    b51a:	bd38      	pop	{r3, r4, r5, pc}
    b51c:	2000c5a4 	.word	0x2000c5a4

0000b520 <nrfx_gpiote_input_configure>:
{
    b520:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b524:	4604      	mov	r4, r0
    b526:	461d      	mov	r5, r3
    if (p_input_config)
    b528:	b309      	cbz	r1, b56e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b52a:	4f4e      	ldr	r7, [pc, #312]	; (b664 <nrfx_gpiote_input_configure+0x144>)
    b52c:	f100 0808 	add.w	r8, r0, #8
    b530:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    b534:	07b3      	lsls	r3, r6, #30
    b536:	d506      	bpl.n	b546 <nrfx_gpiote_input_configure+0x26>
    b538:	f7ff ff82 	bl	b440 <pin_in_use_by_te>
    b53c:	b118      	cbz	r0, b546 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    b53e:	484a      	ldr	r0, [pc, #296]	; (b668 <nrfx_gpiote_input_configure+0x148>)
}
    b540:	b002      	add	sp, #8
    b542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b546:	4849      	ldr	r0, [pc, #292]	; (b66c <nrfx_gpiote_input_configure+0x14c>)
    *p_pin = pin_number & 0x1F;
    b548:	f004 031f 	and.w	r3, r4, #31
    b54c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b550:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    b554:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    b556:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    b55a:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    b55e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    b562:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
    b566:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    b56a:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
    b56e:	b19a      	cbz	r2, b598 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b570:	4e3c      	ldr	r6, [pc, #240]	; (b664 <nrfx_gpiote_input_configure+0x144>)
    b572:	f104 0708 	add.w	r7, r4, #8
    b576:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    b57a:	7813      	ldrb	r3, [r2, #0]
        if (pin_is_output(pin))
    b57c:	f011 0f02 	tst.w	r1, #2
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    b580:	6850      	ldr	r0, [r2, #4]
        if (pin_is_output(pin))
    b582:	d00c      	beq.n	b59e <nrfx_gpiote_input_configure+0x7e>
            if (use_evt)
    b584:	2800      	cmp	r0, #0
    b586:	d1da      	bne.n	b53e <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    b588:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
    b58c:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    b590:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
    b594:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    b598:	bbd5      	cbnz	r5, b610 <nrfx_gpiote_input_configure+0xf0>
        err = NRFX_SUCCESS;
    b59a:	4835      	ldr	r0, [pc, #212]	; (b670 <nrfx_gpiote_input_configure+0x150>)
    b59c:	e7d0      	b.n	b540 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    b59e:	f021 0120 	bic.w	r1, r1, #32
    b5a2:	04c9      	lsls	r1, r1, #19
    b5a4:	0cc9      	lsrs	r1, r1, #19
    b5a6:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    b5aa:	2800      	cmp	r0, #0
    b5ac:	d0ec      	beq.n	b588 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    b5ae:	2b03      	cmp	r3, #3
    b5b0:	d8c5      	bhi.n	b53e <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    b5b2:	6852      	ldr	r2, [r2, #4]
    b5b4:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    b5b8:	4662      	mov	r2, ip
    b5ba:	0092      	lsls	r2, r2, #2
    b5bc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    b5c0:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    b5c4:	b923      	cbnz	r3, b5d0 <nrfx_gpiote_input_configure+0xb0>
    p_reg->CONFIG[idx] = 0;
    b5c6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    b5ca:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
    b5ce:	e7db      	b.n	b588 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    b5d0:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    b5d4:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    b5d8:	f020 0003 	bic.w	r0, r0, #3
    b5dc:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    b5e0:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    b5e4:	f041 0120 	orr.w	r1, r1, #32
    b5e8:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    b5ec:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    b5f0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b5f4:	0220      	lsls	r0, r4, #8
    b5f6:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    b5fa:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    b5fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    b602:	ea40 000e 	orr.w	r0, r0, lr
    b606:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    b60a:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    b60e:	e7bb      	b.n	b588 <nrfx_gpiote_input_configure+0x68>
    release_handler(pin);
    b610:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    b612:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    b616:	f7ff ff3b 	bl	b490 <release_handler>
    if (!handler)
    b61a:	2e00      	cmp	r6, #0
    b61c:	d0bd      	beq.n	b59a <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    b61e:	4d11      	ldr	r5, [pc, #68]	; (b664 <nrfx_gpiote_input_configure+0x144>)
    b620:	e9d5 2300 	ldrd	r2, r3, [r5]
    b624:	4296      	cmp	r6, r2
    b626:	d101      	bne.n	b62c <nrfx_gpiote_input_configure+0x10c>
    b628:	429f      	cmp	r7, r3
    b62a:	d018      	beq.n	b65e <nrfx_gpiote_input_configure+0x13e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    b62c:	4811      	ldr	r0, [pc, #68]	; (b674 <nrfx_gpiote_input_configure+0x154>)
    b62e:	f10d 0107 	add.w	r1, sp, #7
    b632:	f7ff fdcb 	bl	b1cc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    b636:	4b0e      	ldr	r3, [pc, #56]	; (b670 <nrfx_gpiote_input_configure+0x150>)
    b638:	4298      	cmp	r0, r3
    b63a:	d181      	bne.n	b540 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    b63c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
    b640:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    b644:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    b646:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    b648:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    b64c:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    b650:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    b654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b658:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    b65c:	e79d      	b.n	b59a <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    b65e:	2200      	movs	r2, #0
    b660:	e7ee      	b.n	b640 <nrfx_gpiote_input_configure+0x120>
    b662:	bf00      	nop
    b664:	2000c5a4 	.word	0x2000c5a4
    b668:	0bad0004 	.word	0x0bad0004
    b66c:	40842500 	.word	0x40842500
    b670:	0bad0000 	.word	0x0bad0000
    b674:	2000c5f8 	.word	0x2000c5f8

0000b678 <nrfx_gpiote_output_configure>:
{
    b678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b67a:	4604      	mov	r4, r0
    if (p_config)
    b67c:	b379      	cbz	r1, b6de <nrfx_gpiote_output_configure+0x66>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b67e:	4e3a      	ldr	r6, [pc, #232]	; (b768 <nrfx_gpiote_output_configure+0xf0>)
    b680:	f100 0708 	add.w	r7, r0, #8
    b684:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    b688:	07ab      	lsls	r3, r5, #30
    b68a:	d404      	bmi.n	b696 <nrfx_gpiote_output_configure+0x1e>
    b68c:	f7ff fed8 	bl	b440 <pin_in_use_by_te>
    b690:	b108      	cbz	r0, b696 <nrfx_gpiote_output_configure+0x1e>
{
    b692:	4836      	ldr	r0, [pc, #216]	; (b76c <nrfx_gpiote_output_configure+0xf4>)
}
    b694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    b696:	f015 0f1c 	tst.w	r5, #28
    b69a:	784b      	ldrb	r3, [r1, #1]
    b69c:	d122      	bne.n	b6e4 <nrfx_gpiote_output_configure+0x6c>
    *p_pin = pin_number & 0x1F;
    b69e:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b6a2:	f8df c0cc 	ldr.w	ip, [pc, #204]	; b770 <nrfx_gpiote_output_configure+0xf8>
    b6a6:	f100 0e80 	add.w	lr, r0, #128	; 0x80
    b6aa:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    b6ae:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    b6b2:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    b6b4:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    b6b8:	7809      	ldrb	r1, [r1, #0]
    b6ba:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    cnf &= ~to_update;
    b6be:	f02c 0c07 	bic.w	ip, ip, #7
    b6c2:	ea43 030c 	orr.w	r3, r3, ip
    b6c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    b6ca:	4929      	ldr	r1, [pc, #164]	; (b770 <nrfx_gpiote_output_configure+0xf8>)
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    b6cc:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
    b6d0:	3080      	adds	r0, #128	; 0x80
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    b6d2:	f045 0503 	orr.w	r5, r5, #3
    b6d6:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    b6da:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    b6de:	b922      	cbnz	r2, b6ea <nrfx_gpiote_output_configure+0x72>
    return NRFX_SUCCESS;
    b6e0:	4824      	ldr	r0, [pc, #144]	; (b774 <nrfx_gpiote_output_configure+0xfc>)
    b6e2:	e7d7      	b.n	b694 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    b6e4:	2b01      	cmp	r3, #1
    b6e6:	d1da      	bne.n	b69e <nrfx_gpiote_output_configure+0x26>
    b6e8:	e7d3      	b.n	b692 <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b6ea:	4e1f      	ldr	r6, [pc, #124]	; (b768 <nrfx_gpiote_output_configure+0xf0>)
    b6ec:	f104 0708 	add.w	r7, r4, #8
    b6f0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    b6f4:	0783      	lsls	r3, r0, #30
    b6f6:	d5cc      	bpl.n	b692 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    b6f8:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    b6fc:	2300      	movs	r3, #0
    b6fe:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    b700:	f020 0020 	bic.w	r0, r0, #32
    b704:	0089      	lsls	r1, r1, #2
    b706:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b70a:	04c0      	lsls	r0, r0, #19
    b70c:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
    b710:	0cc0      	lsrs	r0, r0, #19
    b712:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    b716:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    b71a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    b71e:	7855      	ldrb	r5, [r2, #1]
    b720:	2d00      	cmp	r5, #0
    b722:	d0dd      	beq.n	b6e0 <nrfx_gpiote_output_configure+0x68>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    b724:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    b728:	7892      	ldrb	r2, [r2, #2]
    b72a:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    b72e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    b732:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b736:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    b73a:	0223      	lsls	r3, r4, #8
    b73c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    b740:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b742:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    b746:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    b74a:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b74c:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    b74e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    b752:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b756:	4313      	orrs	r3, r2
    b758:	f040 0020 	orr.w	r0, r0, #32
    b75c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    b760:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    b764:	e7bc      	b.n	b6e0 <nrfx_gpiote_output_configure+0x68>
    b766:	bf00      	nop
    b768:	2000c5a4 	.word	0x2000c5a4
    b76c:	0bad0004 	.word	0x0bad0004
    b770:	40842500 	.word	0x40842500
    b774:	0bad0000 	.word	0x0bad0000

0000b778 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    b778:	4b01      	ldr	r3, [pc, #4]	; (b780 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    b77a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    b77e:	4770      	bx	lr
    b780:	2000c5a4 	.word	0x2000c5a4

0000b784 <nrfx_gpiote_channel_get>:
{
    b784:	b508      	push	{r3, lr}
    b786:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    b788:	f7ff fe5a 	bl	b440 <pin_in_use_by_te>
    b78c:	b138      	cbz	r0, b79e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b78e:	4b05      	ldr	r3, [pc, #20]	; (b7a4 <nrfx_gpiote_channel_get+0x20>)
    b790:	3208      	adds	r2, #8
    b792:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    b796:	4804      	ldr	r0, [pc, #16]	; (b7a8 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b798:	0b5b      	lsrs	r3, r3, #13
    b79a:	700b      	strb	r3, [r1, #0]
}
    b79c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    b79e:	4803      	ldr	r0, [pc, #12]	; (b7ac <nrfx_gpiote_channel_get+0x28>)
    b7a0:	e7fc      	b.n	b79c <nrfx_gpiote_channel_get+0x18>
    b7a2:	bf00      	nop
    b7a4:	2000c5a4 	.word	0x2000c5a4
    b7a8:	0bad0000 	.word	0x0bad0000
    b7ac:	0bad0004 	.word	0x0bad0004

0000b7b0 <nrfx_gpiote_init>:
{
    b7b0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    b7b2:	4c0f      	ldr	r4, [pc, #60]	; (b7f0 <nrfx_gpiote_init+0x40>)
    b7b4:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    b7b8:	b9bd      	cbnz	r5, b7ea <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    b7ba:	2240      	movs	r2, #64	; 0x40
    b7bc:	4629      	mov	r1, r5
    b7be:	f104 0010 	add.w	r0, r4, #16
    b7c2:	f004 fecf 	bl	10564 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    b7c6:	2031      	movs	r0, #49	; 0x31
    b7c8:	f7fd fe1c 	bl	9404 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b7cc:	4b09      	ldr	r3, [pc, #36]	; (b7f4 <nrfx_gpiote_init+0x44>)
    return err_code;
    b7ce:	480a      	ldr	r0, [pc, #40]	; (b7f8 <nrfx_gpiote_init+0x48>)
    b7d0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    b7d4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    b7d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    b7dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    b7e0:	2301      	movs	r3, #1
    b7e2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    b7e6:	6563      	str	r3, [r4, #84]	; 0x54
}
    b7e8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    b7ea:	4804      	ldr	r0, [pc, #16]	; (b7fc <nrfx_gpiote_init+0x4c>)
    b7ec:	e7fc      	b.n	b7e8 <nrfx_gpiote_init+0x38>
    b7ee:	bf00      	nop
    b7f0:	2000c5a4 	.word	0x2000c5a4
    b7f4:	40031000 	.word	0x40031000
    b7f8:	0bad0000 	.word	0x0bad0000
    b7fc:	0bad0005 	.word	0x0bad0005

0000b800 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    b800:	4b03      	ldr	r3, [pc, #12]	; (b810 <nrfx_gpiote_is_init+0x10>)
    b802:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    b806:	3800      	subs	r0, #0
    b808:	bf18      	it	ne
    b80a:	2001      	movne	r0, #1
    b80c:	4770      	bx	lr
    b80e:	bf00      	nop
    b810:	2000c5a4 	.word	0x2000c5a4

0000b814 <nrfx_gpiote_channel_free>:
{
    b814:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    b816:	4801      	ldr	r0, [pc, #4]	; (b81c <nrfx_gpiote_channel_free+0x8>)
    b818:	f7ff bcf4 	b.w	b204 <nrfx_flag32_free>
    b81c:	2000c5f4 	.word	0x2000c5f4

0000b820 <nrfx_gpiote_channel_alloc>:
{
    b820:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    b822:	4801      	ldr	r0, [pc, #4]	; (b828 <nrfx_gpiote_channel_alloc+0x8>)
    b824:	f7ff bcd2 	b.w	b1cc <nrfx_flag32_alloc>
    b828:	2000c5f4 	.word	0x2000c5f4

0000b82c <nrfx_gpiote_trigger_enable>:
{
    b82c:	4602      	mov	r2, r0
    b82e:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b830:	f7ff fe06 	bl	b440 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b834:	4b1b      	ldr	r3, [pc, #108]	; (b8a4 <nrfx_gpiote_trigger_enable+0x78>)
    b836:	f102 0408 	add.w	r4, r2, #8
    b83a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b83e:	b1c8      	cbz	r0, b874 <nrfx_gpiote_trigger_enable+0x48>
    b840:	f013 0402 	ands.w	r4, r3, #2
    b844:	d116      	bne.n	b874 <nrfx_gpiote_trigger_enable+0x48>
    return ((uint32_t)p_reg + event);
    b846:	4818      	ldr	r0, [pc, #96]	; (b8a8 <nrfx_gpiote_trigger_enable+0x7c>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b848:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    b84a:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b84c:	5084      	str	r4, [r0, r2]
    b84e:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    b850:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    b854:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    b858:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    b85c:	f040 0001 	orr.w	r0, r0, #1
    b860:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    b864:	b129      	cbz	r1, b872 <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    b866:	2201      	movs	r2, #1
    b868:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    b86c:	4a0f      	ldr	r2, [pc, #60]	; (b8ac <nrfx_gpiote_trigger_enable+0x80>)
    b86e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    b872:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    b874:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    b878:	2b04      	cmp	r3, #4
    b87a:	d00e      	beq.n	b89a <nrfx_gpiote_trigger_enable+0x6e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    b87c:	2b05      	cmp	r3, #5
    b87e:	d00e      	beq.n	b89e <nrfx_gpiote_trigger_enable+0x72>
    return p_reg->IN;
    b880:	4b0b      	ldr	r3, [pc, #44]	; (b8b0 <nrfx_gpiote_trigger_enable+0x84>)
    b882:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
    b884:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    b888:	40d9      	lsrs	r1, r3
    b88a:	f001 0101 	and.w	r1, r1, #1
    b88e:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    b890:	4610      	mov	r0, r2
}
    b892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    b896:	f7ff bdc3 	b.w	b420 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    b89a:	2103      	movs	r1, #3
    b89c:	e7f8      	b.n	b890 <nrfx_gpiote_trigger_enable+0x64>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    b89e:	2102      	movs	r1, #2
    b8a0:	e7f6      	b.n	b890 <nrfx_gpiote_trigger_enable+0x64>
    b8a2:	bf00      	nop
    b8a4:	2000c5a4 	.word	0x2000c5a4
    b8a8:	40031100 	.word	0x40031100
    b8ac:	40031000 	.word	0x40031000
    b8b0:	40842500 	.word	0x40842500

0000b8b4 <nrfx_gpiote_trigger_disable>:
{
    b8b4:	b508      	push	{r3, lr}
    b8b6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b8b8:	f7ff fdc2 	bl	b440 <pin_in_use_by_te>
    b8bc:	b1c0      	cbz	r0, b8f0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b8be:	4b0f      	ldr	r3, [pc, #60]	; (b8fc <nrfx_gpiote_trigger_disable+0x48>)
    b8c0:	f102 0108 	add.w	r1, r2, #8
    b8c4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b8c8:	0799      	lsls	r1, r3, #30
    b8ca:	d411      	bmi.n	b8f0 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    b8cc:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b8ce:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    b8d0:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    b8d2:	490b      	ldr	r1, [pc, #44]	; (b900 <nrfx_gpiote_trigger_disable+0x4c>)
    b8d4:	009b      	lsls	r3, r3, #2
    b8d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b8da:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    b8de:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    b8e2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    b8e6:	f022 0203 	bic.w	r2, r2, #3
    b8ea:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    b8ee:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    b8f0:	2100      	movs	r1, #0
}
    b8f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    b8f6:	4610      	mov	r0, r2
    b8f8:	f7ff bd92 	b.w	b420 <nrf_gpio_cfg_sense_set>
    b8fc:	2000c5a4 	.word	0x2000c5a4
    b900:	40031000 	.word	0x40031000

0000b904 <nrfx_gpiote_pin_uninit>:
{
    b904:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    b906:	4b0c      	ldr	r3, [pc, #48]	; (b938 <nrfx_gpiote_pin_uninit+0x34>)
    b908:	f100 0208 	add.w	r2, r0, #8
    b90c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    b910:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    b912:	07db      	lsls	r3, r3, #31
    b914:	d50d      	bpl.n	b932 <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
    b916:	f7ff ffcd 	bl	b8b4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    b91a:	4620      	mov	r0, r4
    b91c:	f7ff fde2 	bl	b4e4 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    b920:	2202      	movs	r2, #2
    b922:	4b06      	ldr	r3, [pc, #24]	; (b93c <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
    b924:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    b928:	3480      	adds	r4, #128	; 0x80
    b92a:	4805      	ldr	r0, [pc, #20]	; (b940 <nrfx_gpiote_pin_uninit+0x3c>)
    b92c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
    b930:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    b932:	4804      	ldr	r0, [pc, #16]	; (b944 <nrfx_gpiote_pin_uninit+0x40>)
    b934:	e7fc      	b.n	b930 <nrfx_gpiote_pin_uninit+0x2c>
    b936:	bf00      	nop
    b938:	2000c5a4 	.word	0x2000c5a4
    b93c:	40842500 	.word	0x40842500
    b940:	0bad0000 	.word	0x0bad0000
    b944:	0bad0004 	.word	0x0bad0004

0000b948 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    b948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    b94c:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    b94e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b950:	462c      	mov	r4, r5
{
    b952:	4b4d      	ldr	r3, [pc, #308]	; (ba88 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    b954:	484d      	ldr	r0, [pc, #308]	; (ba8c <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    b956:	494e      	ldr	r1, [pc, #312]	; (ba90 <nrfx_gpiote_irq_handler+0x148>)
{
    b958:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b95a:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    b95c:	b136      	cbz	r6, b96c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    b95e:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    b962:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b964:	bf1e      	ittt	ne
    b966:	601c      	strne	r4, [r3, #0]
    b968:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    b96a:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    b96c:	3304      	adds	r3, #4
    b96e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    b970:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    b974:	d1f1      	bne.n	b95a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b976:	4f45      	ldr	r7, [pc, #276]	; (ba8c <nrfx_gpiote_irq_handler+0x144>)
    b978:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    b97c:	b193      	cbz	r3, b9a4 <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
    b97e:	4e45      	ldr	r6, [pc, #276]	; (ba94 <nrfx_gpiote_irq_handler+0x14c>)
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    b980:	f10d 090c 	add.w	r9, sp, #12
    b984:	6a33      	ldr	r3, [r6, #32]
    b986:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    b988:	6233      	str	r3, [r6, #32]
    b98a:	f04f 0a01 	mov.w	sl, #1
            while (latch[i])
    b98e:	9803      	ldr	r0, [sp, #12]
    b990:	b970      	cbnz	r0, b9b0 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b992:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
    b996:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    b99a:	6a33      	ldr	r3, [r6, #32]
    b99c:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    b99e:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
    b9a0:	2b00      	cmp	r3, #0
    b9a2:	d1f2      	bne.n	b98a <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    b9a4:	2401      	movs	r4, #1
    while (mask)
    b9a6:	2d00      	cmp	r5, #0
    b9a8:	d156      	bne.n	ba58 <nrfx_gpiote_irq_handler+0x110>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    b9aa:	b005      	add	sp, #20
    b9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    b9b0:	fa90 fba0 	rbit	fp, r0
    b9b4:	fabb fb8b 	clz	fp, fp
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    b9b8:	4a37      	ldr	r2, [pc, #220]	; (ba98 <nrfx_gpiote_irq_handler+0x150>)
    b9ba:	f10b 0308 	add.w	r3, fp, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    b9be:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
    b9c2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    b9c6:	f00b 0407 	and.w	r4, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    b9ca:	f819 300c 	ldrb.w	r3, [r9, ip]
    b9ce:	fa0a f404 	lsl.w	r4, sl, r4
    b9d2:	ea23 0304 	bic.w	r3, r3, r4
    b9d6:	f809 300c 	strb.w	r3, [r9, ip]
    b9da:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    b9de:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    b9e2:	f3c1 0282 	ubfx	r2, r1, #2, #3
    if (is_level(trigger))
    b9e6:	06c9      	lsls	r1, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    b9e8:	4690      	mov	r8, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    b9ea:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
    b9ee:	d518      	bpl.n	ba22 <nrfx_gpiote_irq_handler+0xda>
        call_handler(pin, trigger);
    b9f0:	4611      	mov	r1, r2
    b9f2:	4658      	mov	r0, fp
    b9f4:	9301      	str	r3, [sp, #4]
    b9f6:	f7ff fd2d 	bl	b454 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    b9fa:	9b01      	ldr	r3, [sp, #4]
    b9fc:	b2e4      	uxtb	r4, r4
    b9fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
    ba02:	f3c3 4301 	ubfx	r3, r3, #16, #2
    ba06:	429c      	cmp	r4, r3
    ba08:	d107      	bne.n	ba1a <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    ba0a:	2100      	movs	r1, #0
    ba0c:	4658      	mov	r0, fp
    ba0e:	f7ff fd07 	bl	b420 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    ba12:	4621      	mov	r1, r4
    ba14:	4658      	mov	r0, fp
    ba16:	f7ff fd03 	bl	b420 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    ba1a:	fa0a f00b 	lsl.w	r0, sl, fp
    ba1e:	6230      	str	r0, [r6, #32]
}
    ba20:	e7b5      	b.n	b98e <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    ba22:	2c02      	cmp	r4, #2
    ba24:	d10c      	bne.n	ba40 <nrfx_gpiote_irq_handler+0xf8>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    ba26:	2103      	movs	r1, #3
    ba28:	4658      	mov	r0, fp
    ba2a:	f7ff fcf9 	bl	b420 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    ba2e:	f008 0305 	and.w	r3, r8, #5
    ba32:	2b01      	cmp	r3, #1
    ba34:	d1f1      	bne.n	ba1a <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
    ba36:	4641      	mov	r1, r8
    ba38:	4658      	mov	r0, fp
    ba3a:	f7ff fd0b 	bl	b454 <call_handler>
    ba3e:	e7ec      	b.n	ba1a <nrfx_gpiote_irq_handler+0xd2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    ba40:	2102      	movs	r1, #2
    ba42:	4658      	mov	r0, fp
    ba44:	9201      	str	r2, [sp, #4]
    ba46:	f7ff fceb 	bl	b420 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    ba4a:	9a01      	ldr	r2, [sp, #4]
    ba4c:	2a03      	cmp	r2, #3
    ba4e:	d0f2      	beq.n	ba36 <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    ba50:	2c03      	cmp	r4, #3
    ba52:	d1e2      	bne.n	ba1a <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    ba54:	428a      	cmp	r2, r1
    ba56:	e7ed      	b.n	ba34 <nrfx_gpiote_irq_handler+0xec>
        uint32_t ch = NRF_CTZ(mask);
    ba58:	fa95 f3a5 	rbit	r3, r5
    ba5c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    ba60:	fa04 f203 	lsl.w	r2, r4, r3
    ba64:	009b      	lsls	r3, r3, #2
    ba66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ba6a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    ba6e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    ba72:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    ba76:	f3c0 2004 	ubfx	r0, r0, #8, #5
    ba7a:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    ba7e:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    ba82:	f7ff fce7 	bl	b454 <call_handler>
    ba86:	e78e      	b.n	b9a6 <nrfx_gpiote_irq_handler+0x5e>
    ba88:	40031100 	.word	0x40031100
    ba8c:	40031000 	.word	0x40031000
    ba90:	40031120 	.word	0x40031120
    ba94:	40842500 	.word	0x40842500
    ba98:	2000c5a4 	.word	0x2000c5a4

0000ba9c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    ba9c:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    ba9e:	4c08      	ldr	r4, [pc, #32]	; (bac0 <nrfx_ipc_init+0x24>)
{
    baa0:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    baa2:	7923      	ldrb	r3, [r4, #4]
{
    baa4:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    baa6:	b943      	cbnz	r3, baba <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
    baa8:	202a      	movs	r0, #42	; 0x2a
    baaa:	f7fd fcab 	bl	9404 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    baae:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
    bab0:	4804      	ldr	r0, [pc, #16]	; (bac4 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    bab2:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
    bab4:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
    bab6:	60a5      	str	r5, [r4, #8]
}
    bab8:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    baba:	4803      	ldr	r0, [pc, #12]	; (bac8 <nrfx_ipc_init+0x2c>)
    babc:	e7fc      	b.n	bab8 <nrfx_ipc_init+0x1c>
    babe:	bf00      	nop
    bac0:	2000cac4 	.word	0x2000cac4
    bac4:	0bad0000 	.word	0x0bad0000
    bac8:	0bad000c 	.word	0x0bad000c

0000bacc <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    bacc:	2300      	movs	r3, #0
{
    bace:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
    bad0:	4a0d      	ldr	r2, [pc, #52]	; (bb08 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
    bad2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    bad6:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
    bada:	3301      	adds	r3, #1
    badc:	2b08      	cmp	r3, #8
    bade:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
    bae2:	d1f6      	bne.n	bad2 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
    bae4:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
    bae6:	4a08      	ldr	r2, [pc, #32]	; (bb08 <nrfx_ipc_config_load+0x3c>)
    bae8:	f100 011c 	add.w	r1, r0, #28
    baec:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
    baf0:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
    baf4:	3301      	adds	r3, #1
    baf6:	2b08      	cmp	r3, #8
    baf8:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    bafc:	d1f6      	bne.n	baec <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
    bafe:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
    bb00:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    bb04:	bd30      	pop	{r4, r5, pc}
    bb06:	bf00      	nop
    bb08:	4002a000 	.word	0x4002a000

0000bb0c <nrfx_ipc_uninit>:
    p_reg->SEND_CNF[index] = channels_mask;
    bb0c:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    bb0e:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->SEND_CNF[index] = channels_mask;
    bb12:	4a13      	ldr	r2, [pc, #76]	; (bb60 <nrfx_ipc_uninit+0x54>)
    bb14:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    bb18:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
    bb1c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    bb20:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    bb24:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    bb28:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    bb2c:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    bb30:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
    bb34:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
    bb38:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
    bb3c:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
    bb40:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
    bb44:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
    bb48:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
    bb4c:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
    bb50:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
    bb54:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
    bb58:	4a02      	ldr	r2, [pc, #8]	; (bb64 <nrfx_ipc_uninit+0x58>)
    bb5a:	7113      	strb	r3, [r2, #4]
}
    bb5c:	4770      	bx	lr
    bb5e:	bf00      	nop
    bb60:	4002a000 	.word	0x4002a000
    bb64:	2000cac4 	.word	0x2000cac4

0000bb68 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
    bb68:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
    bb6a:	4a02      	ldr	r2, [pc, #8]	; (bb74 <nrfx_ipc_receive_event_enable+0xc>)
    bb6c:	4083      	lsls	r3, r0
    bb6e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    bb72:	4770      	bx	lr
    bb74:	4002a000 	.word	0x4002a000

0000bb78 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
    bb78:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
    bb7a:	4a02      	ldr	r2, [pc, #8]	; (bb84 <nrfx_ipc_receive_event_disable+0xc>)
    bb7c:	4083      	lsls	r3, r0
    bb7e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    bb82:	4770      	bx	lr
    bb84:	4002a000 	.word	0x4002a000

0000bb88 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    bb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
    bb8a:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bb8c:	2700      	movs	r7, #0
    return p_reg->INTPEND;
    bb8e:	4b0b      	ldr	r3, [pc, #44]	; (bbbc <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
    bb90:	4d0b      	ldr	r5, [pc, #44]	; (bbc0 <nrfx_ipc_irq_handler+0x38>)
    bb92:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
    bb96:	b904      	cbnz	r4, bb9a <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
    bb98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
    bb9a:	fa94 f0a4 	rbit	r0, r4
    bb9e:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
    bba2:	fa06 f300 	lsl.w	r3, r6, r0
    bba6:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bbaa:	4b06      	ldr	r3, [pc, #24]	; (bbc4 <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    bbac:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bbae:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
    bbb0:	682b      	ldr	r3, [r5, #0]
    bbb2:	2b00      	cmp	r3, #0
    bbb4:	d0ef      	beq.n	bb96 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
    bbb6:	68a9      	ldr	r1, [r5, #8]
    bbb8:	4798      	blx	r3
    bbba:	e7ec      	b.n	bb96 <nrfx_ipc_irq_handler+0xe>
    bbbc:	4002a000 	.word	0x4002a000
    bbc0:	2000cac4 	.word	0x2000cac4
    bbc4:	4002a100 	.word	0x4002a100

0000bbc8 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    bbc8:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE uint32_t nrf_power_int_enable_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->INTENSET;
    bbca:	4b11      	ldr	r3, [pc, #68]	; (bc10 <nrfx_power_irq_handler+0x48>)
    bbcc:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    bbd0:	06a2      	lsls	r2, r4, #26
    bbd2:	d50a      	bpl.n	bbea <nrfx_power_irq_handler+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    bbd4:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    if (ret)
    bbd8:	b13a      	cbz	r2, bbea <nrfx_power_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bbda:	2000      	movs	r0, #0
    bbdc:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    bbe0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    bbe4:	4b0b      	ldr	r3, [pc, #44]	; (bc14 <nrfx_power_irq_handler+0x4c>)
    bbe6:	681b      	ldr	r3, [r3, #0]
    bbe8:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    bbea:	0663      	lsls	r3, r4, #25
    bbec:	d50e      	bpl.n	bc0c <nrfx_power_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    bbee:	4b08      	ldr	r3, [pc, #32]	; (bc10 <nrfx_power_irq_handler+0x48>)
    bbf0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (ret)
    bbf4:	b152      	cbz	r2, bc0c <nrfx_power_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bbf6:	2200      	movs	r2, #0
    bbf8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    bbfc:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    bc00:	4b04      	ldr	r3, [pc, #16]	; (bc14 <nrfx_power_irq_handler+0x4c>)
    bc02:	2001      	movs	r0, #1
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    }
#endif
}
    bc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    bc08:	681b      	ldr	r3, [r3, #0]
    bc0a:	4718      	bx	r3
}
    bc0c:	bd10      	pop	{r4, pc}
    bc0e:	bf00      	nop
    bc10:	40005000 	.word	0x40005000
    bc14:	2000cad0 	.word	0x2000cad0

0000bc18 <rpc_handle_data_message>:
    bc18:	b570      	push	{r4, r5, r6, lr}
    bc1a:	6803      	ldr	r3, [r0, #0]
    bc1c:	4604      	mov	r4, r0
    bc1e:	3b03      	subs	r3, #3
    bc20:	b2db      	uxtb	r3, r3
    bc22:	2b04      	cmp	r3, #4
    bc24:	d803      	bhi.n	bc2e <rpc_handle_data_message+0x16>
    bc26:	4a09      	ldr	r2, [pc, #36]	; (bc4c <rpc_handle_data_message+0x34>)
    bc28:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    bc2c:	b92d      	cbnz	r5, bc3a <rpc_handle_data_message+0x22>
    bc2e:	68a0      	ldr	r0, [r4, #8]
    bc30:	b108      	cbz	r0, bc36 <rpc_handle_data_message+0x1e>
    bc32:	f000 f81f 	bl	bc74 <rpc_transport_msg_data_rx_free>
    bc36:	2000      	movs	r0, #0
    bc38:	bd70      	pop	{r4, r5, r6, pc}
    bc3a:	f004 f831 	bl	fca0 <rpc_client_msg_from_rpc_msg_get>
    bc3e:	6821      	ldr	r1, [r4, #0]
    bc40:	462b      	mov	r3, r5
    bc42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bc46:	0c09      	lsrs	r1, r1, #16
    bc48:	4718      	bx	r3
    bc4a:	bf00      	nop
    bc4c:	00010ec0 	.word	0x00010ec0

0000bc50 <rpc_transport_init>:
    bc50:	4b01      	ldr	r3, [pc, #4]	; (bc58 <rpc_transport_init+0x8>)
    bc52:	699b      	ldr	r3, [r3, #24]
    bc54:	4718      	bx	r3
    bc56:	bf00      	nop
    bc58:	2000c600 	.word	0x2000c600

0000bc5c <rpc_transport_msg_alloc>:
    bc5c:	4b01      	ldr	r3, [pc, #4]	; (bc64 <rpc_transport_msg_alloc+0x8>)
    bc5e:	681b      	ldr	r3, [r3, #0]
    bc60:	4718      	bx	r3
    bc62:	bf00      	nop
    bc64:	2000c600 	.word	0x2000c600

0000bc68 <rpc_transport_msg_rx_free>:
    bc68:	4b01      	ldr	r3, [pc, #4]	; (bc70 <rpc_transport_msg_rx_free+0x8>)
    bc6a:	68db      	ldr	r3, [r3, #12]
    bc6c:	4718      	bx	r3
    bc6e:	bf00      	nop
    bc70:	2000c600 	.word	0x2000c600

0000bc74 <rpc_transport_msg_data_rx_free>:
    bc74:	4b01      	ldr	r3, [pc, #4]	; (bc7c <rpc_transport_msg_data_rx_free+0x8>)
    bc76:	695b      	ldr	r3, [r3, #20]
    bc78:	4718      	bx	r3
    bc7a:	bf00      	nop
    bc7c:	2000c600 	.word	0x2000c600

0000bc80 <rpc_transport_msg_send>:
    bc80:	4b01      	ldr	r3, [pc, #4]	; (bc88 <rpc_transport_msg_send+0x8>)
    bc82:	689b      	ldr	r3, [r3, #8]
    bc84:	4718      	bx	r3
    bc86:	bf00      	nop
    bc88:	2000c600 	.word	0x2000c600

0000bc8c <rpc_transport_request_shutdown>:
    bc8c:	4b01      	ldr	r3, [pc, #4]	; (bc94 <rpc_transport_request_shutdown+0x8>)
    bc8e:	69db      	ldr	r3, [r3, #28]
    bc90:	4718      	bx	r3
    bc92:	bf00      	nop
    bc94:	2000c600 	.word	0x2000c600

0000bc98 <rpc_transport_shutdown>:
    bc98:	4b01      	ldr	r3, [pc, #4]	; (bca0 <rpc_transport_shutdown+0x8>)
    bc9a:	6a1b      	ldr	r3, [r3, #32]
    bc9c:	4718      	bx	r3
    bc9e:	bf00      	nop
    bca0:	2000c600 	.word	0x2000c600

0000bca4 <rpc_transport_ipc_msg_data_tx_size>:
    bca4:	4b01      	ldr	r3, [pc, #4]	; (bcac <rpc_transport_ipc_msg_data_tx_size+0x8>)
    bca6:	681b      	ldr	r3, [r3, #0]
    bca8:	68d8      	ldr	r0, [r3, #12]
    bcaa:	4770      	bx	lr
    bcac:	2000cad4 	.word	0x2000cad4

0000bcb0 <rpc_transport_ipc_msg_rx_free>:
    bcb0:	2300      	movs	r3, #0
    bcb2:	b530      	push	{r4, r5, lr}
    bcb4:	4910      	ldr	r1, [pc, #64]	; (bcf8 <rpc_transport_ipc_msg_rx_free+0x48>)
    bcb6:	680a      	ldr	r2, [r1, #0]
    bcb8:	6814      	ldr	r4, [r2, #0]
    bcba:	42a3      	cmp	r3, r4
    bcbc:	d10b      	bne.n	bcd6 <rpc_transport_ipc_msg_rx_free+0x26>
    bcbe:	2300      	movs	r3, #0
    bcc0:	684a      	ldr	r2, [r1, #4]
    bcc2:	6811      	ldr	r1, [r2, #0]
    bcc4:	428b      	cmp	r3, r1
    bcc6:	d015      	beq.n	bcf4 <rpc_transport_ipc_msg_rx_free+0x44>
    bcc8:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
    bccc:	68a4      	ldr	r4, [r4, #8]
    bcce:	42a0      	cmp	r0, r4
    bcd0:	d008      	beq.n	bce4 <rpc_transport_ipc_msg_rx_free+0x34>
    bcd2:	3301      	adds	r3, #1
    bcd4:	e7f6      	b.n	bcc4 <rpc_transport_ipc_msg_rx_free+0x14>
    bcd6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
    bcda:	68ad      	ldr	r5, [r5, #8]
    bcdc:	42a8      	cmp	r0, r5
    bcde:	d001      	beq.n	bce4 <rpc_transport_ipc_msg_rx_free+0x34>
    bce0:	3301      	adds	r3, #1
    bce2:	e7ea      	b.n	bcba <rpc_transport_ipc_msg_rx_free+0xa>
    bce4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    bce8:	6853      	ldr	r3, [r2, #4]
    bcea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    bcee:	f043 0303 	orr.w	r3, r3, #3
    bcf2:	6053      	str	r3, [r2, #4]
    bcf4:	bd30      	pop	{r4, r5, pc}
    bcf6:	bf00      	nop
    bcf8:	2000caf4 	.word	0x2000caf4

0000bcfc <rpc_transport_ipc_msg_tx_free>:
    bcfc:	2200      	movs	r2, #0
    bcfe:	b530      	push	{r4, r5, lr}
    bd00:	4b0b      	ldr	r3, [pc, #44]	; (bd30 <rpc_transport_ipc_msg_tx_free+0x34>)
    bd02:	6819      	ldr	r1, [r3, #0]
    bd04:	680c      	ldr	r4, [r1, #0]
    bd06:	4294      	cmp	r4, r2
    bd08:	d00f      	beq.n	bd2a <rpc_transport_ipc_msg_tx_free+0x2e>
    bd0a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    bd0e:	689d      	ldr	r5, [r3, #8]
    bd10:	42a8      	cmp	r0, r5
    bd12:	d10b      	bne.n	bd2c <rpc_transport_ipc_msg_tx_free+0x30>
    bd14:	f04f 0203 	mov.w	r2, #3
    bd18:	3304      	adds	r3, #4
    bd1a:	e8d3 1fcf 	ldaexb	r1, [r3]
    bd1e:	2900      	cmp	r1, #0
    bd20:	d103      	bne.n	bd2a <rpc_transport_ipc_msg_tx_free+0x2e>
    bd22:	e8c3 2fc0 	stlexb	r0, r2, [r3]
    bd26:	2800      	cmp	r0, #0
    bd28:	d1f7      	bne.n	bd1a <rpc_transport_ipc_msg_tx_free+0x1e>
    bd2a:	bd30      	pop	{r4, r5, pc}
    bd2c:	3201      	adds	r2, #1
    bd2e:	e7ea      	b.n	bd06 <rpc_transport_ipc_msg_tx_free+0xa>
    bd30:	2000caec 	.word	0x2000caec

0000bd34 <handle_modem_rpc_msg>:
    bd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd38:	2500      	movs	r5, #0
    bd3a:	4606      	mov	r6, r0
    bd3c:	460f      	mov	r7, r1
    bd3e:	4628      	mov	r0, r5
    bd40:	f8df 8064 	ldr.w	r8, [pc, #100]	; bda8 <handle_modem_rpc_msg+0x74>
    bd44:	6833      	ldr	r3, [r6, #0]
    bd46:	42ab      	cmp	r3, r5
    bd48:	d801      	bhi.n	bd4e <handle_modem_rpc_msg+0x1a>
    bd4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd4e:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
    bd52:	6863      	ldr	r3, [r4, #4]
    bd54:	b2db      	uxtb	r3, r3
    bd56:	2b01      	cmp	r3, #1
    bd58:	d117      	bne.n	bd8a <handle_modem_rpc_msg+0x56>
    bd5a:	6862      	ldr	r2, [r4, #4]
    bd5c:	f8b8 3000 	ldrh.w	r3, [r8]
    bd60:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
    bd64:	d111      	bne.n	bd8a <handle_modem_rpc_msg+0x56>
    bd66:	2f02      	cmp	r7, #2
    bd68:	68a0      	ldr	r0, [r4, #8]
    bd6a:	d110      	bne.n	bd8e <handle_modem_rpc_msg+0x5a>
    bd6c:	f7ff ff54 	bl	bc18 <rpc_handle_data_message>
    bd70:	b990      	cbnz	r0, bd98 <handle_modem_rpc_msg+0x64>
    bd72:	6863      	ldr	r3, [r4, #4]
    bd74:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    bd78:	f043 0303 	orr.w	r3, r3, #3
    bd7c:	6063      	str	r3, [r4, #4]
    bd7e:	2001      	movs	r0, #1
    bd80:	f8b8 3000 	ldrh.w	r3, [r8]
    bd84:	3301      	adds	r3, #1
    bd86:	f8a8 3000 	strh.w	r3, [r8]
    bd8a:	3501      	adds	r5, #1
    bd8c:	e7da      	b.n	bd44 <handle_modem_rpc_msg+0x10>
    bd8e:	6801      	ldr	r1, [r0, #0]
    bd90:	0c09      	lsrs	r1, r1, #16
    bd92:	f003 ff24 	bl	fbde <rpc_handle_ctrl_message>
    bd96:	e7eb      	b.n	bd70 <handle_modem_rpc_msg+0x3c>
    bd98:	2801      	cmp	r0, #1
    bd9a:	d1f0      	bne.n	bd7e <handle_modem_rpc_msg+0x4a>
    bd9c:	6863      	ldr	r3, [r4, #4]
    bd9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    bda2:	f043 0302 	orr.w	r3, r3, #2
    bda6:	e7e9      	b.n	bd7c <handle_modem_rpc_msg+0x48>
    bda8:	2000cec0 	.word	0x2000cec0

0000bdac <rpc_message_handler>:
    bdac:	b538      	push	{r3, r4, r5, lr}
    bdae:	4d07      	ldr	r5, [pc, #28]	; (bdcc <rpc_message_handler+0x20>)
    bdb0:	2101      	movs	r1, #1
    bdb2:	6828      	ldr	r0, [r5, #0]
    bdb4:	f7ff ffbe 	bl	bd34 <handle_modem_rpc_msg>
    bdb8:	2102      	movs	r1, #2
    bdba:	4604      	mov	r4, r0
    bdbc:	6868      	ldr	r0, [r5, #4]
    bdbe:	f7ff ffb9 	bl	bd34 <handle_modem_rpc_msg>
    bdc2:	2800      	cmp	r0, #0
    bdc4:	d1f4      	bne.n	bdb0 <rpc_message_handler+0x4>
    bdc6:	2c00      	cmp	r4, #0
    bdc8:	d1f2      	bne.n	bdb0 <rpc_message_handler+0x4>
    bdca:	bd38      	pop	{r3, r4, r5, pc}
    bdcc:	2000caf4 	.word	0x2000caf4

0000bdd0 <ipc_irq_handler>:
    bdd0:	b570      	push	{r4, r5, r6, lr}
    bdd2:	2807      	cmp	r0, #7
    bdd4:	d868      	bhi.n	bea8 <ipc_irq_handler+0xd8>
    bdd6:	e8df f000 	tbb	[pc, r0]
    bdda:	670b      	.short	0x670b
    bddc:	674b674f 	.word	0x674b674f
    bde0:	0440      	.short	0x0440
    bde2:	f001 f81b 	bl	ce1c <ipc_trace_handler>
    bde6:	2003      	movs	r0, #3
    bde8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bdec:	f7fe bd86 	b.w	a8fc <nrf_modem_os_event_notify>
    bdf0:	2003      	movs	r0, #3
    bdf2:	4b2e      	ldr	r3, [pc, #184]	; (beac <ipc_irq_handler+0xdc>)
    bdf4:	f8d3 4614 	ldr.w	r4, [r3, #1556]	; 0x614
    bdf8:	f8d3 6618 	ldr.w	r6, [r3, #1560]	; 0x618
    bdfc:	4b2c      	ldr	r3, [pc, #176]	; (beb0 <ipc_irq_handler+0xe0>)
    bdfe:	781d      	ldrb	r5, [r3, #0]
    be00:	7018      	strb	r0, [r3, #0]
    be02:	f000 ffd9 	bl	cdb8 <nrf_modem_state_set>
    be06:	4b2b      	ldr	r3, [pc, #172]	; (beb4 <ipc_irq_handler+0xe4>)
    be08:	b2ed      	uxtb	r5, r5
    be0a:	6818      	ldr	r0, [r3, #0]
    be0c:	f003 fdc0 	bl	f990 <nrf_modem_os_sem_give>
    be10:	2d01      	cmp	r5, #1
    be12:	d11c      	bne.n	be4e <ipc_irq_handler+0x7e>
    be14:	4b28      	ldr	r3, [pc, #160]	; (beb8 <ipc_irq_handler+0xe8>)
    be16:	429c      	cmp	r4, r3
    be18:	d010      	beq.n	be3c <ipc_irq_handler+0x6c>
    be1a:	d809      	bhi.n	be30 <ipc_irq_handler+0x60>
    be1c:	3b02      	subs	r3, #2
    be1e:	429c      	cmp	r4, r3
    be20:	d00f      	beq.n	be42 <ipc_irq_handler+0x72>
    be22:	3301      	adds	r3, #1
    be24:	429c      	cmp	r4, r3
    be26:	d00f      	beq.n	be48 <ipc_irq_handler+0x78>
    be28:	4b24      	ldr	r3, [pc, #144]	; (bebc <ipc_irq_handler+0xec>)
    be2a:	601c      	str	r4, [r3, #0]
    be2c:	2000      	movs	r0, #0
    be2e:	e7db      	b.n	bde8 <ipc_irq_handler+0x18>
    be30:	4b23      	ldr	r3, [pc, #140]	; (bec0 <ipc_irq_handler+0xf0>)
    be32:	429c      	cmp	r4, r3
    be34:	d1f8      	bne.n	be28 <ipc_irq_handler+0x58>
    be36:	f06f 040c 	mvn.w	r4, #12
    be3a:	e7f5      	b.n	be28 <ipc_irq_handler+0x58>
    be3c:	f06f 040b 	mvn.w	r4, #11
    be40:	e7f2      	b.n	be28 <ipc_irq_handler+0x58>
    be42:	f06f 0415 	mvn.w	r4, #21
    be46:	e7ef      	b.n	be28 <ipc_irq_handler+0x58>
    be48:	f06f 0485 	mvn.w	r4, #133	; 0x85
    be4c:	e7ec      	b.n	be28 <ipc_irq_handler+0x58>
    be4e:	4631      	mov	r1, r6
    be50:	f3c4 000b 	ubfx	r0, r4, #0, #12
    be54:	f000 ffa4 	bl	cda0 <nrf_modem_fault_handler_internal>
    be58:	e7e8      	b.n	be2c <ipc_irq_handler+0x5c>
    be5a:	2202      	movs	r2, #2
    be5c:	4b14      	ldr	r3, [pc, #80]	; (beb0 <ipc_irq_handler+0xe0>)
    be5e:	2000      	movs	r0, #0
    be60:	701a      	strb	r2, [r3, #0]
    be62:	f000 ffa9 	bl	cdb8 <nrf_modem_state_set>
    be66:	4b13      	ldr	r3, [pc, #76]	; (beb4 <ipc_irq_handler+0xe4>)
    be68:	6818      	ldr	r0, [r3, #0]
    be6a:	f003 fd91 	bl	f990 <nrf_modem_os_sem_give>
    be6e:	e7dd      	b.n	be2c <ipc_irq_handler+0x5c>
    be70:	f7ff ff9c 	bl	bdac <rpc_message_handler>
    be74:	2002      	movs	r0, #2
    be76:	e7b7      	b.n	bde8 <ipc_irq_handler+0x18>
    be78:	4b0d      	ldr	r3, [pc, #52]	; (beb0 <ipc_irq_handler+0xe0>)
    be7a:	781a      	ldrb	r2, [r3, #0]
    be7c:	2a01      	cmp	r2, #1
    be7e:	b2d0      	uxtb	r0, r2
    be80:	d10e      	bne.n	bea0 <ipc_irq_handler+0xd0>
    be82:	4a10      	ldr	r2, [pc, #64]	; (bec4 <ipc_irq_handler+0xf4>)
    be84:	6811      	ldr	r1, [r2, #0]
    be86:	4a10      	ldr	r2, [pc, #64]	; (bec8 <ipc_irq_handler+0xf8>)
    be88:	688c      	ldr	r4, [r1, #8]
    be8a:	6054      	str	r4, [r2, #4]
    be8c:	6849      	ldr	r1, [r1, #4]
    be8e:	6011      	str	r1, [r2, #0]
    be90:	2200      	movs	r2, #0
    be92:	701a      	strb	r2, [r3, #0]
    be94:	f000 ff90 	bl	cdb8 <nrf_modem_state_set>
    be98:	4b06      	ldr	r3, [pc, #24]	; (beb4 <ipc_irq_handler+0xe4>)
    be9a:	6818      	ldr	r0, [r3, #0]
    be9c:	f003 fd78 	bl	f990 <nrf_modem_os_sem_give>
    bea0:	f7ff ff84 	bl	bdac <rpc_message_handler>
    bea4:	2001      	movs	r0, #1
    bea6:	e79f      	b.n	bde8 <ipc_irq_handler+0x18>
    bea8:	bd70      	pop	{r4, r5, r6, pc}
    beaa:	bf00      	nop
    beac:	4002a000 	.word	0x4002a000
    beb0:	2000d2ca 	.word	0x2000d2ca
    beb4:	2000cadc 	.word	0x2000cadc
    beb8:	00010022 	.word	0x00010022
    bebc:	2000caf0 	.word	0x2000caf0
    bec0:	00013032 	.word	0x00013032
    bec4:	2000cad8 	.word	0x2000cad8
    bec8:	2000caf4 	.word	0x2000caf4

0000becc <rpc_transport_ipc_data_msg_send>:
    becc:	b570      	push	{r4, r5, r6, lr}
    bece:	4b16      	ldr	r3, [pc, #88]	; (bf28 <rpc_transport_ipc_data_msg_send+0x5c>)
    bed0:	6842      	ldr	r2, [r0, #4]
    bed2:	681b      	ldr	r3, [r3, #0]
    bed4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    bed8:	f042 0202 	orr.w	r2, r2, #2
    bedc:	1ac3      	subs	r3, r0, r3
    bede:	6042      	str	r2, [r0, #4]
    bee0:	4812      	ldr	r0, [pc, #72]	; (bf2c <rpc_transport_ipc_data_msg_send+0x60>)
    bee2:	4a13      	ldr	r2, [pc, #76]	; (bf30 <rpc_transport_ipc_data_msg_send+0x64>)
    bee4:	6801      	ldr	r1, [r0, #0]
    bee6:	f3c3 1389 	ubfx	r3, r3, #6, #10
    beea:	e8d2 4fdf 	ldaexh	r4, [r2]
    beee:	1c65      	adds	r5, r4, #1
    bef0:	e8c2 5fd6 	stlexh	r6, r5, [r2]
    bef4:	2e00      	cmp	r6, #0
    bef6:	d1f8      	bne.n	beea <rpc_transport_ipc_data_msg_send+0x1e>
    bef8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    befc:	684a      	ldr	r2, [r1, #4]
    befe:	b292      	uxth	r2, r2
    bf00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    bf04:	604a      	str	r2, [r1, #4]
    bf06:	6802      	ldr	r2, [r0, #0]
    bf08:	2003      	movs	r0, #3
    bf0a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    bf0e:	6853      	ldr	r3, [r2, #4]
    bf10:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    bf14:	f043 0301 	orr.w	r3, r3, #1
    bf18:	6053      	str	r3, [r2, #4]
    bf1a:	f003 fd17 	bl	f94c <nrf_modem_os_busywait>
    bf1e:	2201      	movs	r2, #1
    bf20:	4b04      	ldr	r3, [pc, #16]	; (bf34 <rpc_transport_ipc_data_msg_send+0x68>)
    bf22:	60da      	str	r2, [r3, #12]
    bf24:	bd70      	pop	{r4, r5, r6, pc}
    bf26:	bf00      	nop
    bf28:	2000cae4 	.word	0x2000cae4
    bf2c:	2000caec 	.word	0x2000caec
    bf30:	2000cec2 	.word	0x2000cec2
    bf34:	4002a000 	.word	0x4002a000

0000bf38 <rpc_transport_ipc_ctrl_msg_alloc>:
    bf38:	230a      	movs	r3, #10
    bf3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bf3c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    bf40:	4e0c      	ldr	r6, [pc, #48]	; (bf74 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
    bf42:	4f0d      	ldr	r7, [pc, #52]	; (bf78 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
    bf44:	9301      	str	r3, [sp, #4]
    bf46:	6831      	ldr	r1, [r6, #0]
    bf48:	6838      	ldr	r0, [r7, #0]
    bf4a:	f003 fe84 	bl	fc56 <rpc_transport_ipc_msg_alloc>
    bf4e:	4604      	mov	r4, r0
    bf50:	b940      	cbnz	r0, bf64 <rpc_transport_ipc_ctrl_msg_alloc+0x2c>
    bf52:	f003 fd1b 	bl	f98c <nrf_modem_os_is_in_isr>
    bf56:	b940      	cbnz	r0, bf6a <rpc_transport_ipc_ctrl_msg_alloc+0x32>
    bf58:	2001      	movs	r0, #1
    bf5a:	a901      	add	r1, sp, #4
    bf5c:	f7fe fbf2 	bl	a744 <nrf_modem_os_timedwait>
    bf60:	306e      	adds	r0, #110	; 0x6e
    bf62:	d1f0      	bne.n	bf46 <rpc_transport_ipc_ctrl_msg_alloc+0xe>
    bf64:	4620      	mov	r0, r4
    bf66:	b003      	add	sp, #12
    bf68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf6a:	9801      	ldr	r0, [sp, #4]
    bf6c:	4368      	muls	r0, r5
    bf6e:	f003 fced 	bl	f94c <nrf_modem_os_busywait>
    bf72:	e7e8      	b.n	bf46 <rpc_transport_ipc_ctrl_msg_alloc+0xe>
    bf74:	2000cae0 	.word	0x2000cae0
    bf78:	2000cae8 	.word	0x2000cae8

0000bf7c <rpc_transport_ipc_data_msg_alloc>:
    bf7c:	4b05      	ldr	r3, [pc, #20]	; (bf94 <rpc_transport_ipc_data_msg_alloc+0x18>)
    bf7e:	781b      	ldrb	r3, [r3, #0]
    bf80:	b92b      	cbnz	r3, bf8e <rpc_transport_ipc_data_msg_alloc+0x12>
    bf82:	4b05      	ldr	r3, [pc, #20]	; (bf98 <rpc_transport_ipc_data_msg_alloc+0x1c>)
    bf84:	6819      	ldr	r1, [r3, #0]
    bf86:	4b05      	ldr	r3, [pc, #20]	; (bf9c <rpc_transport_ipc_data_msg_alloc+0x20>)
    bf88:	6818      	ldr	r0, [r3, #0]
    bf8a:	f003 be64 	b.w	fc56 <rpc_transport_ipc_msg_alloc>
    bf8e:	2000      	movs	r0, #0
    bf90:	4770      	bx	lr
    bf92:	bf00      	nop
    bf94:	2000d2c9 	.word	0x2000d2c9
    bf98:	2000cae4 	.word	0x2000cae4
    bf9c:	2000caec 	.word	0x2000caec

0000bfa0 <rpc_transport_ipc_init>:
    bfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bfa4:	b095      	sub	sp, #84	; 0x54
    bfa6:	2238      	movs	r2, #56	; 0x38
    bfa8:	2100      	movs	r1, #0
    bfaa:	4606      	mov	r6, r0
    bfac:	a803      	add	r0, sp, #12
    bfae:	f004 fad9 	bl	10564 <memset>
    bfb2:	2302      	movs	r3, #2
    bfb4:	9304      	str	r3, [sp, #16]
    bfb6:	2308      	movs	r3, #8
    bfb8:	9306      	str	r3, [sp, #24]
    bfba:	2320      	movs	r3, #32
    bfbc:	9308      	str	r3, [sp, #32]
    bfbe:	2304      	movs	r3, #4
    bfc0:	930d      	str	r3, [sp, #52]	; 0x34
    bfc2:	2310      	movs	r3, #16
    bfc4:	2540      	movs	r5, #64	; 0x40
    bfc6:	930f      	str	r3, [sp, #60]	; 0x3c
    bfc8:	2380      	movs	r3, #128	; 0x80
    bfca:	2201      	movs	r2, #1
    bfcc:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
    bfd0:	23d5      	movs	r3, #213	; 0xd5
    bfd2:	2100      	movs	r1, #0
    bfd4:	4855      	ldr	r0, [pc, #340]	; (c12c <rpc_transport_ipc_init+0x18c>)
    bfd6:	920b      	str	r2, [sp, #44]	; 0x2c
    bfd8:	9313      	str	r3, [sp, #76]	; 0x4c
    bfda:	f7fe fc75 	bl	a8c8 <nrf_modem_os_sem_init>
    bfde:	4605      	mov	r5, r0
    bfe0:	2800      	cmp	r0, #0
    bfe2:	f040 809f 	bne.w	c124 <rpc_transport_ipc_init+0x184>
    bfe6:	4602      	mov	r2, r0
    bfe8:	4951      	ldr	r1, [pc, #324]	; (c130 <rpc_transport_ipc_init+0x190>)
    bfea:	7930      	ldrb	r0, [r6, #4]
    bfec:	f7ff fd56 	bl	ba9c <nrfx_ipc_init>
    bff0:	a803      	add	r0, sp, #12
    bff2:	f7ff fd6b 	bl	bacc <nrfx_ipc_config_load>
    bff6:	6834      	ldr	r4, [r6, #0]
    bff8:	6862      	ldr	r2, [r4, #4]
    bffa:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
    bffe:	f040 8089 	bne.w	c114 <rpc_transport_ipc_init+0x174>
    c002:	6961      	ldr	r1, [r4, #20]
    c004:	68e3      	ldr	r3, [r4, #12]
    c006:	440b      	add	r3, r1
    c008:	69e1      	ldr	r1, [r4, #28]
    c00a:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
    c00e:	440b      	add	r3, r1
    c010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    c014:	d87e      	bhi.n	c114 <rpc_transport_ipc_init+0x174>
    c016:	6820      	ldr	r0, [r4, #0]
    c018:	4629      	mov	r1, r5
    c01a:	f004 faa3 	bl	10564 <memset>
    c01e:	6833      	ldr	r3, [r6, #0]
    c020:	681c      	ldr	r4, [r3, #0]
    c022:	f8d3 901c 	ldr.w	r9, [r3, #28]
    c026:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
    c02a:	9201      	str	r2, [sp, #4]
    c02c:	f104 0760 	add.w	r7, r4, #96	; 0x60
    c030:	4a40      	ldr	r2, [pc, #256]	; (c134 <rpc_transport_ipc_init+0x194>)
    c032:	f104 08a4 	add.w	r8, r4, #164	; 0xa4
    c036:	f104 0b20 	add.w	fp, r4, #32
    c03a:	f1b9 0f00 	cmp.w	r9, #0
    c03e:	d15c      	bne.n	c0fa <rpc_transport_ipc_init+0x15a>
    c040:	f8c2 b000 	str.w	fp, [r2]
    c044:	2500      	movs	r5, #0
    c046:	f04f 0a01 	mov.w	sl, #1
    c04a:	7025      	strb	r5, [r4, #0]
    c04c:	7065      	strb	r5, [r4, #1]
    c04e:	f884 a002 	strb.w	sl, [r4, #2]
    c052:	70e5      	strb	r5, [r4, #3]
    c054:	6833      	ldr	r3, [r6, #0]
    c056:	4640      	mov	r0, r8
    c058:	691b      	ldr	r3, [r3, #16]
    c05a:	6063      	str	r3, [r4, #4]
    c05c:	6833      	ldr	r3, [r6, #0]
    c05e:	695b      	ldr	r3, [r3, #20]
    c060:	f8c4 b014 	str.w	fp, [r4, #20]
    c064:	60a3      	str	r3, [r4, #8]
    c066:	4b34      	ldr	r3, [pc, #208]	; (c138 <rpc_transport_ipc_init+0x198>)
    c068:	f8c4 9018 	str.w	r9, [r4, #24]
    c06c:	f8c3 8000 	str.w	r8, [r3]
    c070:	4b32      	ldr	r3, [pc, #200]	; (c13c <rpc_transport_ipc_init+0x19c>)
    c072:	60e7      	str	r7, [r4, #12]
    c074:	601f      	str	r7, [r3, #0]
    c076:	2308      	movs	r3, #8
    c078:	f8c4 8010 	str.w	r8, [r4, #16]
    c07c:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
    c080:	f888 5001 	strb.w	r5, [r8, #1]
    c084:	f888 5002 	strb.w	r5, [r8, #2]
    c088:	f888 5003 	strb.w	r5, [r8, #3]
    c08c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    c090:	707d      	strb	r5, [r7, #1]
    c092:	70bd      	strb	r5, [r7, #2]
    c094:	70fd      	strb	r5, [r7, #3]
    c096:	f003 fdc6 	bl	fc26 <rpc_list_preambles_init>
    c09a:	4638      	mov	r0, r7
    c09c:	f003 fdc3 	bl	fc26 <rpc_list_preambles_init>
    c0a0:	4b27      	ldr	r3, [pc, #156]	; (c140 <rpc_transport_ipc_init+0x1a0>)
    c0a2:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
    c0a6:	601a      	str	r2, [r3, #0]
    c0a8:	4b26      	ldr	r3, [pc, #152]	; (c144 <rpc_transport_ipc_init+0x1a4>)
    c0aa:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
    c0ae:	601a      	str	r2, [r3, #0]
    c0b0:	6831      	ldr	r1, [r6, #0]
    c0b2:	4b25      	ldr	r3, [pc, #148]	; (c148 <rpc_transport_ipc_init+0x1a8>)
    c0b4:	6019      	str	r1, [r3, #0]
    c0b6:	4b25      	ldr	r3, [pc, #148]	; (c14c <rpc_transport_ipc_init+0x1ac>)
    c0b8:	4925      	ldr	r1, [pc, #148]	; (c150 <rpc_transport_ipc_init+0x1b0>)
    c0ba:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
    c0be:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
    c0c2:	4b24      	ldr	r3, [pc, #144]	; (c154 <rpc_transport_ipc_init+0x1b4>)
    c0c4:	4c24      	ldr	r4, [pc, #144]	; (c158 <rpc_transport_ipc_init+0x1b8>)
    c0c6:	801d      	strh	r5, [r3, #0]
    c0c8:	4b24      	ldr	r3, [pc, #144]	; (c15c <rpc_transport_ipc_init+0x1bc>)
    c0ca:	6025      	str	r5, [r4, #0]
    c0cc:	801d      	strh	r5, [r3, #0]
    c0ce:	4b24      	ldr	r3, [pc, #144]	; (c160 <rpc_transport_ipc_init+0x1c0>)
    c0d0:	f883 a000 	strb.w	sl, [r3]
    c0d4:	4b23      	ldr	r3, [pc, #140]	; (c164 <rpc_transport_ipc_init+0x1c4>)
    c0d6:	9502      	str	r5, [sp, #8]
    c0d8:	611d      	str	r5, [r3, #16]
    c0da:	691b      	ldr	r3, [r3, #16]
    c0dc:	9302      	str	r3, [sp, #8]
    c0de:	9b02      	ldr	r3, [sp, #8]
    c0e0:	4b12      	ldr	r3, [pc, #72]	; (c12c <rpc_transport_ipc_init+0x18c>)
    c0e2:	6818      	ldr	r0, [r3, #0]
    c0e4:	f003 fc56 	bl	f994 <nrf_modem_os_sem_take>
    c0e8:	b9c8      	cbnz	r0, c11e <rpc_transport_ipc_init+0x17e>
    c0ea:	6824      	ldr	r4, [r4, #0]
    c0ec:	b9a4      	cbnz	r4, c118 <rpc_transport_ipc_init+0x178>
    c0ee:	4b1e      	ldr	r3, [pc, #120]	; (c168 <rpc_transport_ipc_init+0x1c8>)
    c0f0:	701c      	strb	r4, [r3, #0]
    c0f2:	4620      	mov	r0, r4
    c0f4:	b015      	add	sp, #84	; 0x54
    c0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c0fa:	699b      	ldr	r3, [r3, #24]
    c0fc:	f104 0940 	add.w	r9, r4, #64	; 0x40
    c100:	6463      	str	r3, [r4, #68]	; 0x44
    c102:	6833      	ldr	r3, [r6, #0]
    c104:	4648      	mov	r0, r9
    c106:	69db      	ldr	r3, [r3, #28]
    c108:	f8c2 b000 	str.w	fp, [r2]
    c10c:	6423      	str	r3, [r4, #64]	; 0x40
    c10e:	f000 fe69 	bl	cde4 <ipc_trace_init>
    c112:	e797      	b.n	c044 <rpc_transport_ipc_init+0xa4>
    c114:	f06f 0415 	mvn.w	r4, #21
    c118:	f7ff fcf8 	bl	bb0c <nrfx_ipc_uninit>
    c11c:	e7e9      	b.n	c0f2 <rpc_transport_ipc_init+0x152>
    c11e:	f06f 0473 	mvn.w	r4, #115	; 0x73
    c122:	e7f9      	b.n	c118 <rpc_transport_ipc_init+0x178>
    c124:	f06f 042d 	mvn.w	r4, #45	; 0x2d
    c128:	e7e3      	b.n	c0f2 <rpc_transport_ipc_init+0x152>
    c12a:	bf00      	nop
    c12c:	2000cadc 	.word	0x2000cadc
    c130:	0000bdd1 	.word	0x0000bdd1
    c134:	2000cad8 	.word	0x2000cad8
    c138:	2000caec 	.word	0x2000caec
    c13c:	2000cae8 	.word	0x2000cae8
    c140:	2000cae4 	.word	0x2000cae4
    c144:	2000cae0 	.word	0x2000cae0
    c148:	2000cad4 	.word	0x2000cad4
    c14c:	4002a000 	.word	0x4002a000
    c150:	000249f0 	.word	0x000249f0
    c154:	2000cec2 	.word	0x2000cec2
    c158:	2000caf0 	.word	0x2000caf0
    c15c:	2000cec0 	.word	0x2000cec0
    c160:	2000d2ca 	.word	0x2000d2ca
    c164:	40005600 	.word	0x40005600
    c168:	2000d2c9 	.word	0x2000d2c9

0000c16c <rpc_transport_ipc_ctrl_msg_send>:
    c16c:	b570      	push	{r4, r5, r6, lr}
    c16e:	4b16      	ldr	r3, [pc, #88]	; (c1c8 <rpc_transport_ipc_ctrl_msg_send+0x5c>)
    c170:	6842      	ldr	r2, [r0, #4]
    c172:	681b      	ldr	r3, [r3, #0]
    c174:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    c178:	f042 0201 	orr.w	r2, r2, #1
    c17c:	1ac3      	subs	r3, r0, r3
    c17e:	6042      	str	r2, [r0, #4]
    c180:	4812      	ldr	r0, [pc, #72]	; (c1cc <rpc_transport_ipc_ctrl_msg_send+0x60>)
    c182:	4a13      	ldr	r2, [pc, #76]	; (c1d0 <rpc_transport_ipc_ctrl_msg_send+0x64>)
    c184:	6801      	ldr	r1, [r0, #0]
    c186:	f3c3 1389 	ubfx	r3, r3, #6, #10
    c18a:	e8d2 4fdf 	ldaexh	r4, [r2]
    c18e:	1c65      	adds	r5, r4, #1
    c190:	e8c2 5fd6 	stlexh	r6, r5, [r2]
    c194:	2e00      	cmp	r6, #0
    c196:	d1f8      	bne.n	c18a <rpc_transport_ipc_ctrl_msg_send+0x1e>
    c198:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    c19c:	684a      	ldr	r2, [r1, #4]
    c19e:	b292      	uxth	r2, r2
    c1a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    c1a4:	604a      	str	r2, [r1, #4]
    c1a6:	6802      	ldr	r2, [r0, #0]
    c1a8:	2003      	movs	r0, #3
    c1aa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    c1ae:	6853      	ldr	r3, [r2, #4]
    c1b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c1b4:	f043 0301 	orr.w	r3, r3, #1
    c1b8:	6053      	str	r3, [r2, #4]
    c1ba:	f003 fbc7 	bl	f94c <nrf_modem_os_busywait>
    c1be:	2201      	movs	r2, #1
    c1c0:	4b04      	ldr	r3, [pc, #16]	; (c1d4 <rpc_transport_ipc_ctrl_msg_send+0x68>)
    c1c2:	605a      	str	r2, [r3, #4]
    c1c4:	bd70      	pop	{r4, r5, r6, pc}
    c1c6:	bf00      	nop
    c1c8:	2000cae0 	.word	0x2000cae0
    c1cc:	2000cae8 	.word	0x2000cae8
    c1d0:	2000cec2 	.word	0x2000cec2
    c1d4:	4002a000 	.word	0x4002a000

0000c1d8 <rpc_transport_ipc_request_shutdown>:
    c1d8:	b510      	push	{r4, lr}
    c1da:	f7ff fead 	bl	bf38 <rpc_transport_ipc_ctrl_msg_alloc>
    c1de:	2401      	movs	r4, #1
    c1e0:	2200      	movs	r2, #0
    c1e2:	2103      	movs	r1, #3
    c1e4:	7004      	strb	r4, [r0, #0]
    c1e6:	7081      	strb	r1, [r0, #2]
    c1e8:	7042      	strb	r2, [r0, #1]
    c1ea:	70c2      	strb	r2, [r0, #3]
    c1ec:	f7ff ffbe 	bl	c16c <rpc_transport_ipc_ctrl_msg_send>
    c1f0:	4b05      	ldr	r3, [pc, #20]	; (c208 <rpc_transport_ipc_request_shutdown+0x30>)
    c1f2:	701c      	strb	r4, [r3, #0]
    c1f4:	f003 fd2a 	bl	fc4c <rpc_transport_ipc_data_rx_suspend>
    c1f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c1fc:	4b03      	ldr	r3, [pc, #12]	; (c20c <rpc_transport_ipc_request_shutdown+0x34>)
    c1fe:	f247 5130 	movw	r1, #30000	; 0x7530
    c202:	6818      	ldr	r0, [r3, #0]
    c204:	f003 bbc6 	b.w	f994 <nrf_modem_os_sem_take>
    c208:	2000d2c9 	.word	0x2000d2c9
    c20c:	2000cadc 	.word	0x2000cadc

0000c210 <rpc_transport_ipc_msg_data_rx_free>:
    c210:	b510      	push	{r4, lr}
    c212:	4b0a      	ldr	r3, [pc, #40]	; (c23c <rpc_transport_ipc_msg_data_rx_free+0x2c>)
    c214:	4604      	mov	r4, r0
    c216:	781b      	ldrb	r3, [r3, #0]
    c218:	2b03      	cmp	r3, #3
    c21a:	d00e      	beq.n	c23a <rpc_transport_ipc_msg_data_rx_free+0x2a>
    c21c:	f7ff fe8c 	bl	bf38 <rpc_transport_ipc_ctrl_msg_alloc>
    c220:	b158      	cbz	r0, c23a <rpc_transport_ipc_msg_data_rx_free+0x2a>
    c222:	2101      	movs	r1, #1
    c224:	2200      	movs	r2, #0
    c226:	7001      	strb	r1, [r0, #0]
    c228:	2102      	movs	r1, #2
    c22a:	6084      	str	r4, [r0, #8]
    c22c:	7042      	strb	r2, [r0, #1]
    c22e:	7081      	strb	r1, [r0, #2]
    c230:	70c2      	strb	r2, [r0, #3]
    c232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c236:	f7ff bf99 	b.w	c16c <rpc_transport_ipc_ctrl_msg_send>
    c23a:	bd10      	pop	{r4, pc}
    c23c:	2000d2ca 	.word	0x2000d2ca

0000c240 <at_cmd_send>:
    c240:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c244:	4605      	mov	r5, r0
    c246:	2000      	movs	r0, #0
    c248:	4617      	mov	r7, r2
    c24a:	4688      	mov	r8, r1
    c24c:	461e      	mov	r6, r3
    c24e:	f003 fd29 	bl	fca4 <rpc_client_msg_alloc>
    c252:	4602      	mov	r2, r0
    c254:	b940      	cbnz	r0, c268 <at_cmd_send+0x28>
    c256:	b115      	cbz	r5, c25e <at_cmd_send+0x1e>
    c258:	4628      	mov	r0, r5
    c25a:	f003 fd4d 	bl	fcf8 <rpc_client_msg_data_tx_free>
    c25e:	f06f 000b 	mvn.w	r0, #11
    c262:	b002      	add	sp, #8
    c264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c268:	f06f 0358 	mvn.w	r3, #88	; 0x58
    c26c:	2400      	movs	r4, #0
    c26e:	7303      	strb	r3, [r0, #12]
    c270:	2304      	movs	r3, #4
    c272:	6005      	str	r5, [r0, #0]
    c274:	4d0e      	ldr	r5, [pc, #56]	; (c2b0 <at_cmd_send+0x70>)
    c276:	7203      	strb	r3, [r0, #8]
    c278:	7344      	strb	r4, [r0, #13]
    c27a:	7384      	strb	r4, [r0, #14]
    c27c:	73c4      	strb	r4, [r0, #15]
    c27e:	7244      	strb	r4, [r0, #9]
    c280:	7284      	strb	r4, [r0, #10]
    c282:	72c4      	strb	r4, [r0, #11]
    c284:	f8c0 8004 	str.w	r8, [r0, #4]
    c288:	4639      	mov	r1, r7
    c28a:	2003      	movs	r0, #3
    c28c:	702c      	strb	r4, [r5, #0]
    c28e:	f003 fd25 	bl	fcdc <rpc_client_msg_send>
    c292:	f04f 33ff 	mov.w	r3, #4294967295
    c296:	9301      	str	r3, [sp, #4]
    c298:	782b      	ldrb	r3, [r5, #0]
    c29a:	42b3      	cmp	r3, r6
    c29c:	d101      	bne.n	c2a2 <at_cmd_send+0x62>
    c29e:	2000      	movs	r0, #0
    c2a0:	e7df      	b.n	c262 <at_cmd_send+0x22>
    c2a2:	2002      	movs	r0, #2
    c2a4:	a901      	add	r1, sp, #4
    c2a6:	f7fe fa4d 	bl	a744 <nrf_modem_os_timedwait>
    c2aa:	2800      	cmp	r0, #0
    c2ac:	d0f4      	beq.n	c298 <at_cmd_send+0x58>
    c2ae:	e7d8      	b.n	c262 <at_cmd_send+0x22>
    c2b0:	2000d2cb 	.word	0x2000d2cb

0000c2b4 <at_response_match>:
    c2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c2b6:	4605      	mov	r5, r0
    c2b8:	2400      	movs	r4, #0
    c2ba:	4f0f      	ldr	r7, [pc, #60]	; (c2f8 <at_response_match+0x44>)
    c2bc:	f857 6b04 	ldr.w	r6, [r7], #4
    c2c0:	4628      	mov	r0, r5
    c2c2:	4631      	mov	r1, r6
    c2c4:	f004 f98f 	bl	105e6 <strstr>
    c2c8:	b928      	cbnz	r0, c2d6 <at_response_match+0x22>
    c2ca:	3401      	adds	r4, #1
    c2cc:	2c04      	cmp	r4, #4
    c2ce:	d1f5      	bne.n	c2bc <at_response_match+0x8>
    c2d0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    c2d4:	e00d      	b.n	c2f2 <at_response_match+0x3e>
    c2d6:	b16c      	cbz	r4, c2f4 <at_response_match+0x40>
    c2d8:	1ea3      	subs	r3, r4, #2
    c2da:	2b01      	cmp	r3, #1
    c2dc:	d8f8      	bhi.n	c2d0 <at_response_match+0x1c>
    c2de:	4630      	mov	r0, r6
    c2e0:	f7fc f898 	bl	8414 <strlen>
    c2e4:	220a      	movs	r2, #10
    c2e6:	2100      	movs	r1, #0
    c2e8:	4428      	add	r0, r5
    c2ea:	f002 f86f 	bl	e3cc <strtol>
    c2ee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
    c2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c2f4:	4620      	mov	r0, r4
    c2f6:	e7fc      	b.n	c2f2 <at_response_match+0x3e>
    c2f8:	00010ed4 	.word	0x00010ed4

0000c2fc <at_vsprintf>:
    c2fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c300:	2500      	movs	r5, #0
    c302:	4681      	mov	r9, r0
    c304:	460f      	mov	r7, r1
    c306:	4810      	ldr	r0, [pc, #64]	; (c348 <at_vsprintf+0x4c>)
    c308:	4629      	mov	r1, r5
    c30a:	4690      	mov	r8, r2
    c30c:	461e      	mov	r6, r3
    c30e:	9301      	str	r3, [sp, #4]
    c310:	f002 f980 	bl	e614 <vsniprintf>
    c314:	1e04      	subs	r4, r0, #0
    c316:	db11      	blt.n	c33c <at_vsprintf+0x40>
    c318:	3401      	adds	r4, #1
    c31a:	4620      	mov	r0, r4
    c31c:	f003 fcea 	bl	fcf4 <rpc_client_msg_data_tx_alloc>
    c320:	f8c9 0000 	str.w	r0, [r9]
    c324:	b168      	cbz	r0, c342 <at_vsprintf+0x46>
    c326:	4633      	mov	r3, r6
    c328:	4642      	mov	r2, r8
    c32a:	4621      	mov	r1, r4
    c32c:	9601      	str	r6, [sp, #4]
    c32e:	f002 f971 	bl	e614 <vsniprintf>
    c332:	4628      	mov	r0, r5
    c334:	603c      	str	r4, [r7, #0]
    c336:	b003      	add	sp, #12
    c338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c33c:	f06f 0015 	mvn.w	r0, #21
    c340:	e7f9      	b.n	c336 <at_vsprintf+0x3a>
    c342:	f06f 000b 	mvn.w	r0, #11
    c346:	e7f6      	b.n	c336 <at_vsprintf+0x3a>
    c348:	00010dc8 	.word	0x00010dc8

0000c34c <nrf_modem_at_notif_handler_set>:
    c34c:	4b01      	ldr	r3, [pc, #4]	; (c354 <nrf_modem_at_notif_handler_set+0x8>)
    c34e:	6018      	str	r0, [r3, #0]
    c350:	2000      	movs	r0, #0
    c352:	4770      	bx	lr
    c354:	2000cb00 	.word	0x2000cb00

0000c358 <nrf_modem_at_printf>:
    c358:	b40f      	push	{r0, r1, r2, r3}
    c35a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    c35c:	9c08      	ldr	r4, [sp, #32]
    c35e:	f000 fd31 	bl	cdc4 <nrf_modem_state_is_initialized>
    c362:	2800      	cmp	r0, #0
    c364:	d039      	beq.n	c3da <nrf_modem_at_printf+0x82>
    c366:	2c00      	cmp	r4, #0
    c368:	d03a      	beq.n	c3e0 <nrf_modem_at_printf+0x88>
    c36a:	4622      	mov	r2, r4
    c36c:	ab09      	add	r3, sp, #36	; 0x24
    c36e:	a903      	add	r1, sp, #12
    c370:	a802      	add	r0, sp, #8
    c372:	9301      	str	r3, [sp, #4]
    c374:	f7ff ffc2 	bl	c2fc <at_vsprintf>
    c378:	4604      	mov	r4, r0
    c37a:	b960      	cbnz	r0, c396 <nrf_modem_at_printf+0x3e>
    c37c:	4e1a      	ldr	r6, [pc, #104]	; (c3e8 <nrf_modem_at_printf+0x90>)
    c37e:	f04f 31ff 	mov.w	r1, #4294967295
    c382:	6830      	ldr	r0, [r6, #0]
    c384:	f003 fb06 	bl	f994 <nrf_modem_os_sem_take>
    c388:	4603      	mov	r3, r0
    c38a:	9802      	ldr	r0, [sp, #8]
    c38c:	b14b      	cbz	r3, c3a2 <nrf_modem_at_printf+0x4a>
    c38e:	f003 fcb3 	bl	fcf8 <rpc_client_msg_data_tx_free>
    c392:	f06f 040a 	mvn.w	r4, #10
    c396:	4620      	mov	r0, r4
    c398:	b004      	add	sp, #16
    c39a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c39e:	b004      	add	sp, #16
    c3a0:	4770      	bx	lr
    c3a2:	2302      	movs	r3, #2
    c3a4:	2201      	movs	r2, #1
    c3a6:	9903      	ldr	r1, [sp, #12]
    c3a8:	f7ff ff4a 	bl	c240 <at_cmd_send>
    c3ac:	4604      	mov	r4, r0
    c3ae:	b118      	cbz	r0, c3b8 <nrf_modem_at_printf+0x60>
    c3b0:	6830      	ldr	r0, [r6, #0]
    c3b2:	f003 faed 	bl	f990 <nrf_modem_os_sem_give>
    c3b6:	e7ee      	b.n	c396 <nrf_modem_at_printf+0x3e>
    c3b8:	4d0c      	ldr	r5, [pc, #48]	; (c3ec <nrf_modem_at_printf+0x94>)
    c3ba:	682b      	ldr	r3, [r5, #0]
    c3bc:	6818      	ldr	r0, [r3, #0]
    c3be:	f7ff ff79 	bl	c2b4 <at_response_match>
    c3c2:	4604      	mov	r4, r0
    c3c4:	6830      	ldr	r0, [r6, #0]
    c3c6:	f003 fae3 	bl	f990 <nrf_modem_os_sem_give>
    c3ca:	682b      	ldr	r3, [r5, #0]
    c3cc:	6818      	ldr	r0, [r3, #0]
    c3ce:	f003 fc8f 	bl	fcf0 <rpc_client_msg_data_rx_free>
    c3d2:	6828      	ldr	r0, [r5, #0]
    c3d4:	f003 fc89 	bl	fcea <rpc_client_msg_rx_free>
    c3d8:	e7dd      	b.n	c396 <nrf_modem_at_printf+0x3e>
    c3da:	f04f 34ff 	mov.w	r4, #4294967295
    c3de:	e7da      	b.n	c396 <nrf_modem_at_printf+0x3e>
    c3e0:	f06f 040d 	mvn.w	r4, #13
    c3e4:	e7d7      	b.n	c396 <nrf_modem_at_printf+0x3e>
    c3e6:	bf00      	nop
    c3e8:	2000cb08 	.word	0x2000cb08
    c3ec:	2000cb04 	.word	0x2000cb04

0000c3f0 <nrf_modem_at_scanf>:
    c3f0:	b40e      	push	{r1, r2, r3}
    c3f2:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
    c3f4:	9f07      	ldr	r7, [sp, #28]
    c3f6:	4606      	mov	r6, r0
    c3f8:	f000 fce4 	bl	cdc4 <nrf_modem_state_is_initialized>
    c3fc:	2800      	cmp	r0, #0
    c3fe:	d042      	beq.n	c486 <nrf_modem_at_scanf+0x96>
    c400:	2e00      	cmp	r6, #0
    c402:	d043      	beq.n	c48c <nrf_modem_at_scanf+0x9c>
    c404:	2f00      	cmp	r7, #0
    c406:	d041      	beq.n	c48c <nrf_modem_at_scanf+0x9c>
    c408:	4630      	mov	r0, r6
    c40a:	f7fc f803 	bl	8414 <strlen>
    c40e:	1c45      	adds	r5, r0, #1
    c410:	4628      	mov	r0, r5
    c412:	f003 fc6f 	bl	fcf4 <rpc_client_msg_data_tx_alloc>
    c416:	4604      	mov	r4, r0
    c418:	2800      	cmp	r0, #0
    c41a:	d03a      	beq.n	c492 <nrf_modem_at_scanf+0xa2>
    c41c:	4631      	mov	r1, r6
    c41e:	4e1e      	ldr	r6, [pc, #120]	; (c498 <nrf_modem_at_scanf+0xa8>)
    c420:	462a      	mov	r2, r5
    c422:	f004 f8c1 	bl	105a8 <strncpy>
    c426:	f04f 31ff 	mov.w	r1, #4294967295
    c42a:	6830      	ldr	r0, [r6, #0]
    c42c:	f003 fab2 	bl	f994 <nrf_modem_os_sem_take>
    c430:	b150      	cbz	r0, c448 <nrf_modem_at_scanf+0x58>
    c432:	4620      	mov	r0, r4
    c434:	f003 fc60 	bl	fcf8 <rpc_client_msg_data_tx_free>
    c438:	f06f 040a 	mvn.w	r4, #10
    c43c:	4620      	mov	r0, r4
    c43e:	b002      	add	sp, #8
    c440:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    c444:	b003      	add	sp, #12
    c446:	4770      	bx	lr
    c448:	4620      	mov	r0, r4
    c44a:	2302      	movs	r3, #2
    c44c:	2201      	movs	r2, #1
    c44e:	4629      	mov	r1, r5
    c450:	f7ff fef6 	bl	c240 <at_cmd_send>
    c454:	4604      	mov	r4, r0
    c456:	b990      	cbnz	r0, c47e <nrf_modem_at_scanf+0x8e>
    c458:	4d10      	ldr	r5, [pc, #64]	; (c49c <nrf_modem_at_scanf+0xac>)
    c45a:	aa08      	add	r2, sp, #32
    c45c:	682b      	ldr	r3, [r5, #0]
    c45e:	4639      	mov	r1, r7
    c460:	6818      	ldr	r0, [r3, #0]
    c462:	9201      	str	r2, [sp, #4]
    c464:	f002 f908 	bl	e678 <vsiscanf>
    c468:	682b      	ldr	r3, [r5, #0]
    c46a:	1e04      	subs	r4, r0, #0
    c46c:	6818      	ldr	r0, [r3, #0]
    c46e:	bf08      	it	eq
    c470:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
    c474:	f003 fc3c 	bl	fcf0 <rpc_client_msg_data_rx_free>
    c478:	6828      	ldr	r0, [r5, #0]
    c47a:	f003 fc36 	bl	fcea <rpc_client_msg_rx_free>
    c47e:	6830      	ldr	r0, [r6, #0]
    c480:	f003 fa86 	bl	f990 <nrf_modem_os_sem_give>
    c484:	e7da      	b.n	c43c <nrf_modem_at_scanf+0x4c>
    c486:	f04f 34ff 	mov.w	r4, #4294967295
    c48a:	e7d7      	b.n	c43c <nrf_modem_at_scanf+0x4c>
    c48c:	f06f 040d 	mvn.w	r4, #13
    c490:	e7d4      	b.n	c43c <nrf_modem_at_scanf+0x4c>
    c492:	f06f 040b 	mvn.w	r4, #11
    c496:	e7d1      	b.n	c43c <nrf_modem_at_scanf+0x4c>
    c498:	2000cb08 	.word	0x2000cb08
    c49c:	2000cb04 	.word	0x2000cb04

0000c4a0 <rpc_at_event_handler>:
    c4a0:	b538      	push	{r3, r4, r5, lr}
    c4a2:	68c3      	ldr	r3, [r0, #12]
    c4a4:	4604      	mov	r4, r0
    c4a6:	2ba7      	cmp	r3, #167	; 0xa7
    c4a8:	d003      	beq.n	c4b2 <rpc_at_event_handler+0x12>
    c4aa:	6820      	ldr	r0, [r4, #0]
    c4ac:	f003 fc20 	bl	fcf0 <rpc_client_msg_data_rx_free>
    c4b0:	e008      	b.n	c4c4 <rpc_at_event_handler+0x24>
    c4b2:	2903      	cmp	r1, #3
    c4b4:	d008      	beq.n	c4c8 <rpc_at_event_handler+0x28>
    c4b6:	2904      	cmp	r1, #4
    c4b8:	d021      	beq.n	c4fe <rpc_at_event_handler+0x5e>
    c4ba:	2902      	cmp	r1, #2
    c4bc:	bf02      	ittt	eq
    c4be:	2201      	moveq	r2, #1
    c4c0:	4b12      	ldreq	r3, [pc, #72]	; (c50c <rpc_at_event_handler+0x6c>)
    c4c2:	701a      	strbeq	r2, [r3, #0]
    c4c4:	2000      	movs	r0, #0
    c4c6:	bd38      	pop	{r3, r4, r5, pc}
    c4c8:	4d11      	ldr	r5, [pc, #68]	; (c510 <rpc_at_event_handler+0x70>)
    c4ca:	682b      	ldr	r3, [r5, #0]
    c4cc:	b13b      	cbz	r3, c4de <rpc_at_event_handler+0x3e>
    c4ce:	6800      	ldr	r0, [r0, #0]
    c4d0:	4798      	blx	r3
    c4d2:	2300      	movs	r3, #0
    c4d4:	6820      	ldr	r0, [r4, #0]
    c4d6:	602b      	str	r3, [r5, #0]
    c4d8:	f003 fc0a 	bl	fcf0 <rpc_client_msg_data_rx_free>
    c4dc:	e006      	b.n	c4ec <rpc_at_event_handler+0x4c>
    c4de:	4b0b      	ldr	r3, [pc, #44]	; (c50c <rpc_at_event_handler+0x6c>)
    c4e0:	781a      	ldrb	r2, [r3, #0]
    c4e2:	2a02      	cmp	r2, #2
    c4e4:	d105      	bne.n	c4f2 <rpc_at_event_handler+0x52>
    c4e6:	6800      	ldr	r0, [r0, #0]
    c4e8:	2800      	cmp	r0, #0
    c4ea:	d1f5      	bne.n	c4d8 <rpc_at_event_handler+0x38>
    c4ec:	2000      	movs	r0, #0
    c4ee:	b2c0      	uxtb	r0, r0
    c4f0:	e7e9      	b.n	c4c6 <rpc_at_event_handler+0x26>
    c4f2:	4a08      	ldr	r2, [pc, #32]	; (c514 <rpc_at_event_handler+0x74>)
    c4f4:	6010      	str	r0, [r2, #0]
    c4f6:	2202      	movs	r2, #2
    c4f8:	2001      	movs	r0, #1
    c4fa:	701a      	strb	r2, [r3, #0]
    c4fc:	e7f7      	b.n	c4ee <rpc_at_event_handler+0x4e>
    c4fe:	4b06      	ldr	r3, [pc, #24]	; (c518 <rpc_at_event_handler+0x78>)
    c500:	681b      	ldr	r3, [r3, #0]
    c502:	2b00      	cmp	r3, #0
    c504:	d0d1      	beq.n	c4aa <rpc_at_event_handler+0xa>
    c506:	6800      	ldr	r0, [r0, #0]
    c508:	4798      	blx	r3
    c50a:	e7ce      	b.n	c4aa <rpc_at_event_handler+0xa>
    c50c:	2000d2cb 	.word	0x2000d2cb
    c510:	2000cafc 	.word	0x2000cafc
    c514:	2000cb04 	.word	0x2000cb04
    c518:	2000cb00 	.word	0x2000cb00

0000c51c <rpc_at_init>:
    c51c:	2201      	movs	r2, #1
    c51e:	b510      	push	{r4, lr}
    c520:	4611      	mov	r1, r2
    c522:	4807      	ldr	r0, [pc, #28]	; (c540 <rpc_at_init+0x24>)
    c524:	f7fe f9d0 	bl	a8c8 <nrf_modem_os_sem_init>
    c528:	4601      	mov	r1, r0
    c52a:	b928      	cbnz	r0, c538 <rpc_at_init+0x1c>
    c52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c530:	2301      	movs	r3, #1
    c532:	2205      	movs	r2, #5
    c534:	f7ff be84 	b.w	c240 <at_cmd_send>
    c538:	f06f 002d 	mvn.w	r0, #45	; 0x2d
    c53c:	bd10      	pop	{r4, pc}
    c53e:	bf00      	nop
    c540:	2000cb08 	.word	0x2000cb08

0000c544 <sock_init>:
    c544:	f44f 7248 	mov.w	r2, #800	; 0x320
    c548:	2100      	movs	r1, #0
    c54a:	b508      	push	{r3, lr}
    c54c:	4808      	ldr	r0, [pc, #32]	; (c570 <sock_init+0x2c>)
    c54e:	f004 f809 	bl	10564 <memset>
    c552:	2300      	movs	r3, #0
    c554:	4619      	mov	r1, r3
    c556:	4a07      	ldr	r2, [pc, #28]	; (c574 <sock_init+0x30>)
    c558:	4807      	ldr	r0, [pc, #28]	; (c578 <sock_init+0x34>)
    c55a:	7013      	strb	r3, [r2, #0]
    c55c:	4a04      	ldr	r2, [pc, #16]	; (c570 <sock_init+0x2c>)
    c55e:	3301      	adds	r3, #1
    c560:	2b08      	cmp	r3, #8
    c562:	e9c2 0100 	strd	r0, r1, [r2]
    c566:	6091      	str	r1, [r2, #8]
    c568:	f102 0264 	add.w	r2, r2, #100	; 0x64
    c56c:	d1f7      	bne.n	c55e <sock_init+0x1a>
    c56e:	bd08      	pop	{r3, pc}
    c570:	2000cb0c 	.word	0x2000cb0c
    c574:	2000d2cc 	.word	0x2000d2cc
    c578:	1badf11e 	.word	0x1badf11e

0000c57c <sock_find>:
    c57c:	b530      	push	{r4, r5, lr}
    c57e:	4602      	mov	r2, r0
    c580:	2300      	movs	r3, #0
    c582:	2564      	movs	r5, #100	; 0x64
    c584:	4905      	ldr	r1, [pc, #20]	; (c59c <sock_find+0x20>)
    c586:	fb05 f403 	mul.w	r4, r5, r3
    c58a:	1860      	adds	r0, r4, r1
    c58c:	590c      	ldr	r4, [r1, r4]
    c58e:	4294      	cmp	r4, r2
    c590:	d003      	beq.n	c59a <sock_find+0x1e>
    c592:	3301      	adds	r3, #1
    c594:	2b08      	cmp	r3, #8
    c596:	d1f6      	bne.n	c586 <sock_find+0xa>
    c598:	2000      	movs	r0, #0
    c59a:	bd30      	pop	{r4, r5, pc}
    c59c:	2000cb0c 	.word	0x2000cb0c

0000c5a0 <_sock_close>:
    c5a0:	b538      	push	{r3, r4, r5, lr}
    c5a2:	f7ff ffeb 	bl	c57c <sock_find>
    c5a6:	4604      	mov	r4, r0
    c5a8:	1d05      	adds	r5, r0, #4
    c5aa:	4628      	mov	r0, r5
    c5ac:	f003 fc79 	bl	fea2 <pkt_flush>
    c5b0:	6c20      	ldr	r0, [r4, #64]	; 0x40
    c5b2:	b108      	cbz	r0, c5b8 <_sock_close+0x18>
    c5b4:	f7fe f9c6 	bl	a944 <nrf_modem_os_free>
    c5b8:	2260      	movs	r2, #96	; 0x60
    c5ba:	2100      	movs	r1, #0
    c5bc:	4628      	mov	r0, r5
    c5be:	f003 ffd1 	bl	10564 <memset>
    c5c2:	4b01      	ldr	r3, [pc, #4]	; (c5c8 <_sock_close+0x28>)
    c5c4:	6023      	str	r3, [r4, #0]
    c5c6:	bd38      	pop	{r3, r4, r5, pc}
    c5c8:	1badf11e 	.word	0x1badf11e

0000c5cc <sock_shutdown>:
    c5cc:	b570      	push	{r4, r5, r6, lr}
    c5ce:	2400      	movs	r4, #0
    c5d0:	4d05      	ldr	r5, [pc, #20]	; (c5e8 <sock_shutdown+0x1c>)
    c5d2:	4e06      	ldr	r6, [pc, #24]	; (c5ec <sock_shutdown+0x20>)
    c5d4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    c5d8:	42b0      	cmp	r0, r6
    c5da:	d001      	beq.n	c5e0 <sock_shutdown+0x14>
    c5dc:	f7ff ffe0 	bl	c5a0 <_sock_close>
    c5e0:	3419      	adds	r4, #25
    c5e2:	2cc8      	cmp	r4, #200	; 0xc8
    c5e4:	d1f6      	bne.n	c5d4 <sock_shutdown+0x8>
    c5e6:	bd70      	pop	{r4, r5, r6, pc}
    c5e8:	2000cb0c 	.word	0x2000cb0c
    c5ec:	1badf11e 	.word	0x1badf11e

0000c5f0 <sock_flow_control_set>:
    c5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c5f4:	1e02      	subs	r2, r0, #0
    c5f6:	4c10      	ldr	r4, [pc, #64]	; (c638 <sock_flow_control_set+0x48>)
    c5f8:	bf18      	it	ne
    c5fa:	2201      	movne	r2, #1
    c5fc:	4606      	mov	r6, r0
    c5fe:	2500      	movs	r5, #0
    c600:	46a0      	mov	r8, r4
    c602:	f04f 0964 	mov.w	r9, #100	; 0x64
    c606:	4b0d      	ldr	r3, [pc, #52]	; (c63c <sock_flow_control_set+0x4c>)
    c608:	4f0d      	ldr	r7, [pc, #52]	; (c640 <sock_flow_control_set+0x50>)
    c60a:	701a      	strb	r2, [r3, #0]
    c60c:	6823      	ldr	r3, [r4, #0]
    c60e:	42bb      	cmp	r3, r7
    c610:	d00a      	beq.n	c628 <sock_flow_control_set+0x38>
    c612:	fb09 8305 	mla	r3, r9, r5, r8
    c616:	7f1a      	ldrb	r2, [r3, #28]
    c618:	f366 1286 	bfi	r2, r6, #6, #1
    c61c:	771a      	strb	r2, [r3, #28]
    c61e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c620:	b113      	cbz	r3, c628 <sock_flow_control_set+0x38>
    c622:	4620      	mov	r0, r4
    c624:	f003 fba9 	bl	fd7a <sock_pollcb>
    c628:	3501      	adds	r5, #1
    c62a:	2d08      	cmp	r5, #8
    c62c:	f104 0464 	add.w	r4, r4, #100	; 0x64
    c630:	d1ec      	bne.n	c60c <sock_flow_control_set+0x1c>
    c632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c636:	bf00      	nop
    c638:	2000cb0c 	.word	0x2000cb0c
    c63c:	2000d2cc 	.word	0x2000d2cc
    c640:	1badf11e 	.word	0x1badf11e

0000c644 <on_getaddrinfo_res>:
    c644:	2301      	movs	r3, #1
    c646:	4a03      	ldr	r2, [pc, #12]	; (c654 <on_getaddrinfo_res+0x10>)
    c648:	7013      	strb	r3, [r2, #0]
    c64a:	4a03      	ldr	r2, [pc, #12]	; (c658 <on_getaddrinfo_res+0x14>)
    c64c:	6010      	str	r0, [r2, #0]
    c64e:	4618      	mov	r0, r3
    c650:	4770      	bx	lr
    c652:	bf00      	nop
    c654:	2000d2cd 	.word	0x2000d2cd
    c658:	2000ce2c 	.word	0x2000ce2c

0000c65c <addrinfo_init>:
    c65c:	2201      	movs	r2, #1
    c65e:	b508      	push	{r3, lr}
    c660:	4611      	mov	r1, r2
    c662:	4804      	ldr	r0, [pc, #16]	; (c674 <addrinfo_init+0x18>)
    c664:	f7fe f930 	bl	a8c8 <nrf_modem_os_sem_init>
    c668:	2800      	cmp	r0, #0
    c66a:	bf18      	it	ne
    c66c:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
    c670:	bd08      	pop	{r3, pc}
    c672:	bf00      	nop
    c674:	2000ce30 	.word	0x2000ce30

0000c678 <rpc_ip_event_handler>:
    c678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c67a:	f248 030f 	movw	r3, #32783	; 0x800f
    c67e:	4299      	cmp	r1, r3
    c680:	4606      	mov	r6, r0
    c682:	460d      	mov	r5, r1
    c684:	d03b      	beq.n	c6fe <rpc_ip_event_handler+0x86>
    c686:	d822      	bhi.n	c6ce <rpc_ip_event_handler+0x56>
    c688:	f248 030d 	movw	r3, #32781	; 0x800d
    c68c:	4299      	cmp	r1, r3
    c68e:	d02f      	beq.n	c6f0 <rpc_ip_event_handler+0x78>
    c690:	f248 030e 	movw	r3, #32782	; 0x800e
    c694:	4299      	cmp	r1, r3
    c696:	d02f      	beq.n	c6f8 <rpc_ip_event_handler+0x80>
    c698:	6900      	ldr	r0, [r0, #16]
    c69a:	f7ff ff6f 	bl	c57c <sock_find>
    c69e:	4604      	mov	r4, r0
    c6a0:	b308      	cbz	r0, c6e6 <rpc_ip_event_handler+0x6e>
    c6a2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    c6a6:	d91e      	bls.n	c6e6 <rpc_ip_event_handler+0x6e>
    c6a8:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
    c6ac:	3d01      	subs	r5, #1
    c6ae:	2d0b      	cmp	r5, #11
    c6b0:	d819      	bhi.n	c6e6 <rpc_ip_event_handler+0x6e>
    c6b2:	e8df f015 	tbh	[pc, r5, lsl #1]
    c6b6:	0090      	.short	0x0090
    c6b8:	009400b3 	.word	0x009400b3
    c6bc:	00940094 	.word	0x00940094
    c6c0:	00ee00ee 	.word	0x00ee00ee
    c6c4:	00990094 	.word	0x00990094
    c6c8:	00180018 	.word	0x00180018
    c6cc:	00d2      	.short	0x00d2
    c6ce:	f249 0304 	movw	r3, #36868	; 0x9004
    c6d2:	4299      	cmp	r1, r3
    c6d4:	d016      	beq.n	c704 <rpc_ip_event_handler+0x8c>
    c6d6:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
    c6da:	d924      	bls.n	c726 <rpc_ip_event_handler+0xae>
    c6dc:	68c0      	ldr	r0, [r0, #12]
    c6de:	f7ff ff4d 	bl	c57c <sock_find>
    c6e2:	4604      	mov	r4, r0
    c6e4:	bb70      	cbnz	r0, c744 <rpc_ip_event_handler+0xcc>
    c6e6:	6830      	ldr	r0, [r6, #0]
    c6e8:	b1b0      	cbz	r0, c718 <rpc_ip_event_handler+0xa0>
    c6ea:	f003 fb01 	bl	fcf0 <rpc_client_msg_data_rx_free>
    c6ee:	e013      	b.n	c718 <rpc_ip_event_handler+0xa0>
    c6f0:	f7ff ffa8 	bl	c644 <on_getaddrinfo_res>
    c6f4:	b2c0      	uxtb	r0, r0
    c6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c6f8:	f003 fbe3 	bl	fec2 <on_getifaddrs_res>
    c6fc:	e7fa      	b.n	c6f4 <rpc_ip_event_handler+0x7c>
    c6fe:	f003 fbde 	bl	febe <on_conf_dnssrv_res>
    c702:	e7f7      	b.n	c6f4 <rpc_ip_event_handler+0x7c>
    c704:	6903      	ldr	r3, [r0, #16]
    c706:	2b03      	cmp	r3, #3
    c708:	d806      	bhi.n	c718 <rpc_ip_event_handler+0xa0>
    c70a:	e8df f003 	tbb	[pc, r3]
    c70e:	0a02      	.short	0x0a02
    c710:	0702      	.short	0x0702
    c712:	2000      	movs	r0, #0
    c714:	f7ff ff6c 	bl	c5f0 <sock_flow_control_set>
    c718:	2000      	movs	r0, #0
    c71a:	e7ec      	b.n	c6f6 <rpc_ip_event_handler+0x7e>
    c71c:	2201      	movs	r2, #1
    c71e:	4b65      	ldr	r3, [pc, #404]	; (c8b4 <rpc_ip_event_handler+0x23c>)
    c720:	701a      	strb	r2, [r3, #0]
    c722:	2001      	movs	r0, #1
    c724:	e7f6      	b.n	c714 <rpc_ip_event_handler+0x9c>
    c726:	6900      	ldr	r0, [r0, #16]
    c728:	f7ff ff28 	bl	c57c <sock_find>
    c72c:	4604      	mov	r4, r0
    c72e:	2800      	cmp	r0, #0
    c730:	d0d9      	beq.n	c6e6 <rpc_ip_event_handler+0x6e>
    c732:	f248 0381 	movw	r3, #32897	; 0x8081
    c736:	429d      	cmp	r5, r3
    c738:	d1d5      	bne.n	c6e6 <rpc_ip_event_handler+0x6e>
    c73a:	4601      	mov	r1, r0
    c73c:	4630      	mov	r0, r6
    c73e:	f000 f8d1 	bl	c8e4 <on_tls_attach_res>
    c742:	e04f      	b.n	c7e4 <rpc_ip_event_handler+0x16c>
    c744:	f249 0302 	movw	r3, #36866	; 0x9002
    c748:	429d      	cmp	r5, r3
    c74a:	f000 809e 	beq.w	c88a <rpc_ip_event_handler+0x212>
    c74e:	d835      	bhi.n	c7bc <rpc_ip_event_handler+0x144>
    c750:	f003 fb62 	bl	fe18 <sock_has_stream_error>
    c754:	4607      	mov	r7, r0
    c756:	b9e0      	cbnz	r0, c792 <rpc_ip_event_handler+0x11a>
    c758:	2010      	movs	r0, #16
    c75a:	f7fe f8eb 	bl	a934 <nrf_modem_os_alloc>
    c75e:	4605      	mov	r5, r0
    c760:	b1b8      	cbz	r0, c792 <rpc_ip_event_handler+0x11a>
    c762:	4639      	mov	r1, r7
    c764:	2210      	movs	r2, #16
    c766:	f003 fefd 	bl	10564 <memset>
    c76a:	6833      	ldr	r3, [r6, #0]
    c76c:	606b      	str	r3, [r5, #4]
    c76e:	6873      	ldr	r3, [r6, #4]
    c770:	812b      	strh	r3, [r5, #8]
    c772:	8a71      	ldrh	r1, [r6, #18]
    c774:	2900      	cmp	r1, #0
    c776:	f000 8097 	beq.w	c8a8 <rpc_ip_event_handler+0x230>
    c77a:	8a32      	ldrh	r2, [r6, #16]
    c77c:	f106 0014 	add.w	r0, r6, #20
    c780:	f003 fac2 	bl	fd08 <sockaddr_init>
    c784:	60e8      	str	r0, [r5, #12]
    c786:	2800      	cmp	r0, #0
    c788:	f040 808e 	bne.w	c8a8 <rpc_ip_event_handler+0x230>
    c78c:	4628      	mov	r0, r5
    c78e:	f7fe f8d9 	bl	a944 <nrf_modem_os_free>
    c792:	6830      	ldr	r0, [r6, #0]
    c794:	f003 faac 	bl	fcf0 <rpc_client_msg_data_rx_free>
    c798:	4620      	mov	r0, r4
    c79a:	f003 fb10 	bl	fdbe <sock_is_stream>
    c79e:	b148      	cbz	r0, c7b4 <rpc_ip_event_handler+0x13c>
    c7a0:	4620      	mov	r0, r4
    c7a2:	f003 fb39 	bl	fe18 <sock_has_stream_error>
    c7a6:	b928      	cbnz	r0, c7b4 <rpc_ip_event_handler+0x13c>
    c7a8:	230c      	movs	r3, #12
    c7aa:	61a3      	str	r3, [r4, #24]
    c7ac:	7f23      	ldrb	r3, [r4, #28]
    c7ae:	f063 037e 	orn	r3, r3, #126	; 0x7e
    c7b2:	7723      	strb	r3, [r4, #28]
    c7b4:	4620      	mov	r0, r4
    c7b6:	f003 fb07 	bl	fdc8 <sock_is_datagram>
    c7ba:	e025      	b.n	c808 <rpc_ip_event_handler+0x190>
    c7bc:	f249 0303 	movw	r3, #36867	; 0x9003
    c7c0:	429d      	cmp	r5, r3
    c7c2:	d018      	beq.n	c7f6 <rpc_ip_event_handler+0x17e>
    c7c4:	f249 0382 	movw	r3, #36994	; 0x9082
    c7c8:	429d      	cmp	r5, r3
    c7ca:	d18c      	bne.n	c6e6 <rpc_ip_event_handler+0x6e>
    c7cc:	4601      	mov	r1, r0
    c7ce:	4630      	mov	r0, r6
    c7d0:	f000 f89c 	bl	c90c <on_tls_handshake_ntf>
    c7d4:	e006      	b.n	c7e4 <rpc_ip_event_handler+0x16c>
    c7d6:	6973      	ldr	r3, [r6, #20]
    c7d8:	b90b      	cbnz	r3, c7de <rpc_ip_event_handler+0x166>
    c7da:	69b3      	ldr	r3, [r6, #24]
    c7dc:	6003      	str	r3, [r0, #0]
    c7de:	4630      	mov	r0, r6
    c7e0:	f003 fbc1 	bl	ff66 <res_forward>
    c7e4:	4605      	mov	r5, r0
    c7e6:	e010      	b.n	c80a <rpc_ip_event_handler+0x192>
    c7e8:	7f03      	ldrb	r3, [r0, #28]
    c7ea:	f023 0303 	bic.w	r3, r3, #3
    c7ee:	f043 0303 	orr.w	r3, r3, #3
    c7f2:	7703      	strb	r3, [r0, #28]
    c7f4:	e7f3      	b.n	c7de <rpc_ip_event_handler+0x166>
    c7f6:	7f03      	ldrb	r3, [r0, #28]
    c7f8:	f043 0301 	orr.w	r3, r3, #1
    c7fc:	7703      	strb	r3, [r0, #28]
    c7fe:	6930      	ldr	r0, [r6, #16]
    c800:	2869      	cmp	r0, #105	; 0x69
    c802:	d112      	bne.n	c82a <rpc_ip_event_handler+0x1b2>
    c804:	2368      	movs	r3, #104	; 0x68
    c806:	61a3      	str	r3, [r4, #24]
    c808:	2500      	movs	r5, #0
    c80a:	4620      	mov	r0, r4
    c80c:	f003 fb0e 	bl	fe2c <sock_has_pollcb>
    c810:	b110      	cbz	r0, c818 <rpc_ip_event_handler+0x1a0>
    c812:	4620      	mov	r0, r4
    c814:	f003 fab1 	bl	fd7a <sock_pollcb>
    c818:	b2e8      	uxtb	r0, r5
    c81a:	e76c      	b.n	c6f6 <rpc_ip_event_handler+0x7e>
    c81c:	7f03      	ldrb	r3, [r0, #28]
    c81e:	68f5      	ldr	r5, [r6, #12]
    c820:	f36f 0382 	bfc	r3, #2, #1
    c824:	7703      	strb	r3, [r0, #28]
    c826:	6970      	ldr	r0, [r6, #20]
    c828:	b118      	cbz	r0, c832 <rpc_ip_event_handler+0x1ba>
    c82a:	f000 f901 	bl	ca30 <rpc_error_to_nrf_errno>
    c82e:	61a0      	str	r0, [r4, #24]
    c830:	e7ea      	b.n	c808 <rpc_ip_event_handler+0x190>
    c832:	4620      	mov	r0, r4
    c834:	f003 facd 	bl	fdd2 <sock_proto_is_secure>
    c838:	b918      	cbnz	r0, c842 <rpc_ip_event_handler+0x1ca>
    c83a:	7f23      	ldrb	r3, [r4, #28]
    c83c:	f043 0308 	orr.w	r3, r3, #8
    c840:	7723      	strb	r3, [r4, #28]
    c842:	4620      	mov	r0, r4
    c844:	f003 fac5 	bl	fdd2 <sock_proto_is_secure>
    c848:	2800      	cmp	r0, #0
    c84a:	d0cb      	beq.n	c7e4 <rpc_ip_event_handler+0x16c>
    c84c:	2d00      	cmp	r5, #0
    c84e:	d0dc      	beq.n	c80a <rpc_ip_event_handler+0x192>
    c850:	2100      	movs	r1, #0
    c852:	4620      	mov	r0, r4
    c854:	f000 f874 	bl	c940 <tls_attach>
    c858:	e7d6      	b.n	c808 <rpc_ip_event_handler+0x190>
    c85a:	7f43      	ldrb	r3, [r0, #29]
    c85c:	3b01      	subs	r3, #1
    c85e:	7743      	strb	r3, [r0, #29]
    c860:	6973      	ldr	r3, [r6, #20]
    c862:	2b00      	cmp	r3, #0
    c864:	d1bb      	bne.n	c7de <rpc_ip_event_handler+0x166>
    c866:	4630      	mov	r0, r6
    c868:	f003 fb7b 	bl	ff62 <res_cookie_get>
    c86c:	69b2      	ldr	r2, [r6, #24]
    c86e:	6843      	ldr	r3, [r0, #4]
    c870:	601a      	str	r2, [r3, #0]
    c872:	6842      	ldr	r2, [r0, #4]
    c874:	7f13      	ldrb	r3, [r2, #28]
    c876:	f043 0308 	orr.w	r3, r3, #8
    c87a:	7713      	strb	r3, [r2, #28]
    c87c:	6843      	ldr	r3, [r0, #4]
    c87e:	6922      	ldr	r2, [r4, #16]
    c880:	611a      	str	r2, [r3, #16]
    c882:	6843      	ldr	r3, [r0, #4]
    c884:	6962      	ldr	r2, [r4, #20]
    c886:	615a      	str	r2, [r3, #20]
    c888:	e7a9      	b.n	c7de <rpc_ip_event_handler+0x166>
    c88a:	7f43      	ldrb	r3, [r0, #29]
    c88c:	3301      	adds	r3, #1
    c88e:	7743      	strb	r3, [r0, #29]
    c890:	e7ba      	b.n	c808 <rpc_ip_event_handler+0x190>
    c892:	4630      	mov	r0, r6
    c894:	f003 fb65 	bl	ff62 <res_cookie_get>
    c898:	6973      	ldr	r3, [r6, #20]
    c89a:	b913      	cbnz	r3, c8a2 <rpc_ip_event_handler+0x22a>
    c89c:	69b3      	ldr	r3, [r6, #24]
    c89e:	6043      	str	r3, [r0, #4]
    c8a0:	e79d      	b.n	c7de <rpc_ip_event_handler+0x166>
    c8a2:	f04f 33ff 	mov.w	r3, #4294967295
    c8a6:	e7fa      	b.n	c89e <rpc_ip_event_handler+0x226>
    c8a8:	4629      	mov	r1, r5
    c8aa:	4620      	mov	r0, r4
    c8ac:	f003 fa7d 	bl	fdaa <sock_pkt_append>
    c8b0:	e7aa      	b.n	c808 <rpc_ip_event_handler+0x190>
    c8b2:	bf00      	nop
    c8b4:	2000d2ce 	.word	0x2000d2ce

0000c8b8 <rpc_ip_init>:
    c8b8:	b508      	push	{r3, lr}
    c8ba:	f7ff fe43 	bl	c544 <sock_init>
    c8be:	f7ff fecd 	bl	c65c <addrinfo_init>
    c8c2:	2200      	movs	r2, #0
    c8c4:	4b05      	ldr	r3, [pc, #20]	; (c8dc <rpc_ip_init+0x24>)
    c8c6:	4806      	ldr	r0, [pc, #24]	; (c8e0 <rpc_ip_init+0x28>)
    c8c8:	701a      	strb	r2, [r3, #0]
    c8ca:	2201      	movs	r2, #1
    c8cc:	4611      	mov	r1, r2
    c8ce:	f7fd fffb 	bl	a8c8 <nrf_modem_os_sem_init>
    c8d2:	2800      	cmp	r0, #0
    c8d4:	bf18      	it	ne
    c8d6:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
    c8da:	bd08      	pop	{r3, pc}
    c8dc:	2000d2ce 	.word	0x2000d2ce
    c8e0:	2000ce34 	.word	0x2000ce34

0000c8e4 <on_tls_attach_res>:
    c8e4:	b510      	push	{r4, lr}
    c8e6:	6943      	ldr	r3, [r0, #20]
    c8e8:	460c      	mov	r4, r1
    c8ea:	b15b      	cbz	r3, c904 <on_tls_attach_res+0x20>
    c8ec:	7f0b      	ldrb	r3, [r1, #28]
    c8ee:	f36f 1304 	bfc	r3, #4, #1
    c8f2:	770b      	strb	r3, [r1, #28]
    c8f4:	6940      	ldr	r0, [r0, #20]
    c8f6:	f000 f89b 	bl	ca30 <rpc_error_to_nrf_errno>
    c8fa:	4b03      	ldr	r3, [pc, #12]	; (c908 <on_tls_attach_res+0x24>)
    c8fc:	61a0      	str	r0, [r4, #24]
    c8fe:	6818      	ldr	r0, [r3, #0]
    c900:	f003 f846 	bl	f990 <nrf_modem_os_sem_give>
    c904:	2000      	movs	r0, #0
    c906:	bd10      	pop	{r4, pc}
    c908:	2000ce34 	.word	0x2000ce34

0000c90c <on_tls_handshake_ntf>:
    c90c:	b510      	push	{r4, lr}
    c90e:	7f0b      	ldrb	r3, [r1, #28]
    c910:	460c      	mov	r4, r1
    c912:	f36f 1304 	bfc	r3, #4, #1
    c916:	770b      	strb	r3, [r1, #28]
    c918:	6900      	ldr	r0, [r0, #16]
    c91a:	b958      	cbnz	r0, c934 <on_tls_handshake_ntf+0x28>
    c91c:	b2db      	uxtb	r3, r3
    c91e:	f023 0328 	bic.w	r3, r3, #40	; 0x28
    c922:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    c926:	770b      	strb	r3, [r1, #28]
    c928:	4b04      	ldr	r3, [pc, #16]	; (c93c <on_tls_handshake_ntf+0x30>)
    c92a:	6818      	ldr	r0, [r3, #0]
    c92c:	f003 f830 	bl	f990 <nrf_modem_os_sem_give>
    c930:	2000      	movs	r0, #0
    c932:	bd10      	pop	{r4, pc}
    c934:	f000 f87c 	bl	ca30 <rpc_error_to_nrf_errno>
    c938:	61a0      	str	r0, [r4, #24]
    c93a:	e7f5      	b.n	c928 <on_tls_handshake_ntf+0x1c>
    c93c:	2000ce34 	.word	0x2000ce34

0000c940 <tls_attach>:
    c940:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c944:	f8df 80e4 	ldr.w	r8, [pc, #228]	; ca2c <tls_attach+0xec>
    c948:	4605      	mov	r5, r0
    c94a:	f8d8 0000 	ldr.w	r0, [r8]
    c94e:	9101      	str	r1, [sp, #4]
    c950:	f003 f820 	bl	f994 <nrf_modem_os_sem_take>
    c954:	4607      	mov	r7, r0
    c956:	b150      	cbz	r0, c96e <tls_attach+0x2e>
    c958:	9b01      	ldr	r3, [sp, #4]
    c95a:	2b00      	cmp	r3, #0
    c95c:	d163      	bne.n	ca26 <tls_attach+0xe6>
    c95e:	2310      	movs	r3, #16
    c960:	61ab      	str	r3, [r5, #24]
    c962:	f04f 37ff 	mov.w	r7, #4294967295
    c966:	4638      	mov	r0, r7
    c968:	b002      	add	sp, #8
    c96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c96e:	6c28      	ldr	r0, [r5, #64]	; 0x40
    c970:	b1a8      	cbz	r0, c99e <tls_attach+0x5e>
    c972:	f7fb fd4f 	bl	8414 <strlen>
    c976:	1c46      	adds	r6, r0, #1
    c978:	4630      	mov	r0, r6
    c97a:	f003 f993 	bl	fca4 <rpc_client_msg_alloc>
    c97e:	4604      	mov	r4, r0
    c980:	b978      	cbnz	r0, c9a2 <tls_attach+0x62>
    c982:	4628      	mov	r0, r5
    c984:	f003 fa35 	bl	fdf2 <sock_is_nonblock>
    c988:	b108      	cbz	r0, c98e <tls_attach+0x4e>
    c98a:	2369      	movs	r3, #105	; 0x69
    c98c:	61ab      	str	r3, [r5, #24]
    c98e:	f8d8 0000 	ldr.w	r0, [r8]
    c992:	f002 fffd 	bl	f990 <nrf_modem_os_sem_give>
    c996:	2069      	movs	r0, #105	; 0x69
    c998:	f002 fff2 	bl	f980 <nrf_modem_os_errno_set>
    c99c:	e7e1      	b.n	c962 <tls_attach+0x22>
    c99e:	463e      	mov	r6, r7
    c9a0:	e7ea      	b.n	c978 <tls_attach+0x38>
    c9a2:	682b      	ldr	r3, [r5, #0]
    c9a4:	2204      	movs	r2, #4
    c9a6:	6103      	str	r3, [r0, #16]
    c9a8:	2300      	movs	r3, #0
    c9aa:	7202      	strb	r2, [r0, #8]
    c9ac:	7243      	strb	r3, [r0, #9]
    c9ae:	7283      	strb	r3, [r0, #10]
    c9b0:	72c3      	strb	r3, [r0, #11]
    c9b2:	f895 2047 	ldrb.w	r2, [r5, #71]	; 0x47
    c9b6:	f105 0144 	add.w	r1, r5, #68	; 0x44
    c9ba:	3201      	adds	r2, #1
    c9bc:	0092      	lsls	r2, r2, #2
    c9be:	6082      	str	r2, [r0, #8]
    c9c0:	3014      	adds	r0, #20
    c9c2:	f003 fdc2 	bl	1054a <memcpy>
    c9c6:	b1e6      	cbz	r6, ca02 <tls_attach+0xc2>
    c9c8:	4632      	mov	r2, r6
    c9ca:	6c29      	ldr	r1, [r5, #64]	; 0x40
    c9cc:	6820      	ldr	r0, [r4, #0]
    c9ce:	f003 fdeb 	bl	105a8 <strncpy>
    c9d2:	6066      	str	r6, [r4, #4]
    c9d4:	7f2b      	ldrb	r3, [r5, #28]
    c9d6:	2004      	movs	r0, #4
    c9d8:	f043 0310 	orr.w	r3, r3, #16
    c9dc:	4622      	mov	r2, r4
    c9de:	f247 0181 	movw	r1, #28801	; 0x7081
    c9e2:	772b      	strb	r3, [r5, #28]
    c9e4:	f003 f97a 	bl	fcdc <rpc_client_msg_send>
    c9e8:	4628      	mov	r0, r5
    c9ea:	f003 fa02 	bl	fdf2 <sock_is_nonblock>
    c9ee:	2800      	cmp	r0, #0
    c9f0:	d1b9      	bne.n	c966 <tls_attach+0x26>
    c9f2:	4628      	mov	r0, r5
    c9f4:	f003 f9f9 	bl	fdea <sock_is_attaching>
    c9f8:	b940      	cbnz	r0, ca0c <tls_attach+0xcc>
    c9fa:	69a8      	ldr	r0, [r5, #24]
    c9fc:	2800      	cmp	r0, #0
    c9fe:	d0b2      	beq.n	c966 <tls_attach+0x26>
    ca00:	e7ca      	b.n	c998 <tls_attach+0x58>
    ca02:	7026      	strb	r6, [r4, #0]
    ca04:	7066      	strb	r6, [r4, #1]
    ca06:	70a6      	strb	r6, [r4, #2]
    ca08:	70e6      	strb	r6, [r4, #3]
    ca0a:	e7e2      	b.n	c9d2 <tls_attach+0x92>
    ca0c:	2002      	movs	r0, #2
    ca0e:	a901      	add	r1, sp, #4
    ca10:	f7fd fe98 	bl	a744 <nrf_modem_os_timedwait>
    ca14:	f110 0f0b 	cmn.w	r0, #11
    ca18:	d005      	beq.n	ca26 <tls_attach+0xe6>
    ca1a:	2800      	cmp	r0, #0
    ca1c:	d0e9      	beq.n	c9f2 <tls_attach+0xb2>
    ca1e:	2800      	cmp	r0, #0
    ca20:	bfb8      	it	lt
    ca22:	4240      	neglt	r0, r0
    ca24:	e7b8      	b.n	c998 <tls_attach+0x58>
    ca26:	2074      	movs	r0, #116	; 0x74
    ca28:	e7b6      	b.n	c998 <tls_attach+0x58>
    ca2a:	bf00      	nop
    ca2c:	2000ce34 	.word	0x2000ce34

0000ca30 <rpc_error_to_nrf_errno>:
    ca30:	2870      	cmp	r0, #112	; 0x70
    ca32:	bf9a      	itte	ls
    ca34:	4b02      	ldrls	r3, [pc, #8]	; (ca40 <rpc_error_to_nrf_errno+0x10>)
    ca36:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    ca3a:	4802      	ldrhi	r0, [pc, #8]	; (ca44 <rpc_error_to_nrf_errno+0x14>)
    ca3c:	4770      	bx	lr
    ca3e:	bf00      	nop
    ca40:	00010ee4 	.word	0x00010ee4
    ca44:	baadbaad 	.word	0xbaadbaad

0000ca48 <rpc_gnss_event_handler>:
    ca48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ca4a:	6804      	ldr	r4, [r0, #0]
    ca4c:	4606      	mov	r6, r0
    ca4e:	b13c      	cbz	r4, ca60 <rpc_gnss_event_handler+0x18>
    ca50:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
    ca54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    ca58:	d104      	bne.n	ca64 <rpc_gnss_event_handler+0x1c>
    ca5a:	4b41      	ldr	r3, [pc, #260]	; (cb60 <rpc_gnss_event_handler+0x118>)
    ca5c:	e9c3 1400 	strd	r1, r4, [r3]
    ca60:	2000      	movs	r0, #0
    ca62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ca64:	4d3f      	ldr	r5, [pc, #252]	; (cb64 <rpc_gnss_event_handler+0x11c>)
    ca66:	682b      	ldr	r3, [r5, #0]
    ca68:	2b00      	cmp	r3, #0
    ca6a:	d06f      	beq.n	cb4c <rpc_gnss_event_handler+0x104>
    ca6c:	f244 0204 	movw	r2, #16388	; 0x4004
    ca70:	4291      	cmp	r1, r2
    ca72:	d80b      	bhi.n	ca8c <rpc_gnss_event_handler+0x44>
    ca74:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    ca78:	d968      	bls.n	cb4c <rpc_gnss_event_handler+0x104>
    ca7a:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
    ca7e:	3902      	subs	r1, #2
    ca80:	2902      	cmp	r1, #2
    ca82:	d82a      	bhi.n	cada <rpc_gnss_event_handler+0x92>
    ca84:	e8df f001 	tbb	[pc, r1]
    ca88:	5047      	.short	0x5047
    ca8a:	59          	.byte	0x59
    ca8b:	00          	.byte	0x00
    ca8c:	f244 1301 	movw	r3, #16641	; 0x4101
    ca90:	4299      	cmp	r1, r3
    ca92:	d02e      	beq.n	caf2 <rpc_gnss_event_handler+0xaa>
    ca94:	f244 2301 	movw	r3, #16897	; 0x4201
    ca98:	4299      	cmp	r1, r3
    ca9a:	d157      	bne.n	cb4c <rpc_gnss_event_handler+0x104>
    ca9c:	4e32      	ldr	r6, [pc, #200]	; (cb68 <rpc_gnss_event_handler+0x120>)
    ca9e:	6830      	ldr	r0, [r6, #0]
    caa0:	b108      	cbz	r0, caa6 <rpc_gnss_event_handler+0x5e>
    caa2:	f003 f925 	bl	fcf0 <rpc_client_msg_data_rx_free>
    caa6:	2202      	movs	r2, #2
    caa8:	4b30      	ldr	r3, [pc, #192]	; (cb6c <rpc_gnss_event_handler+0x124>)
    caaa:	6034      	str	r4, [r6, #0]
    caac:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
    cab0:	701a      	strb	r2, [r3, #0]
    cab2:	4e2f      	ldr	r6, [pc, #188]	; (cb70 <rpc_gnss_event_handler+0x128>)
    cab4:	f014 0708 	ands.w	r7, r4, #8
    cab8:	682b      	ldr	r3, [r5, #0]
    caba:	7832      	ldrb	r2, [r6, #0]
    cabc:	d025      	beq.n	cb0a <rpc_gnss_event_handler+0xc2>
    cabe:	b91a      	cbnz	r2, cac8 <rpc_gnss_event_handler+0x80>
    cac0:	2005      	movs	r0, #5
    cac2:	4798      	blx	r3
    cac4:	2301      	movs	r3, #1
    cac6:	7033      	strb	r3, [r6, #0]
    cac8:	07e3      	lsls	r3, r4, #31
    caca:	d502      	bpl.n	cad2 <rpc_gnss_event_handler+0x8a>
    cacc:	2002      	movs	r0, #2
    cace:	682b      	ldr	r3, [r5, #0]
    cad0:	4798      	blx	r3
    cad2:	2001      	movs	r0, #1
    cad4:	682b      	ldr	r3, [r5, #0]
    cad6:	4798      	blx	r3
    cad8:	e7c2      	b.n	ca60 <rpc_gnss_event_handler+0x18>
    cada:	4e23      	ldr	r6, [pc, #140]	; (cb68 <rpc_gnss_event_handler+0x120>)
    cadc:	6830      	ldr	r0, [r6, #0]
    cade:	b108      	cbz	r0, cae4 <rpc_gnss_event_handler+0x9c>
    cae0:	f003 f906 	bl	fcf0 <rpc_client_msg_data_rx_free>
    cae4:	2200      	movs	r2, #0
    cae6:	4b21      	ldr	r3, [pc, #132]	; (cb6c <rpc_gnss_event_handler+0x124>)
    cae8:	6034      	str	r4, [r6, #0]
    caea:	701a      	strb	r2, [r3, #0]
    caec:	f894 403d 	ldrb.w	r4, [r4, #61]	; 0x3d
    caf0:	e7df      	b.n	cab2 <rpc_gnss_event_handler+0x6a>
    caf2:	4e1d      	ldr	r6, [pc, #116]	; (cb68 <rpc_gnss_event_handler+0x120>)
    caf4:	6830      	ldr	r0, [r6, #0]
    caf6:	b108      	cbz	r0, cafc <rpc_gnss_event_handler+0xb4>
    caf8:	f003 f8fa 	bl	fcf0 <rpc_client_msg_data_rx_free>
    cafc:	2201      	movs	r2, #1
    cafe:	4b1b      	ldr	r3, [pc, #108]	; (cb6c <rpc_gnss_event_handler+0x124>)
    cb00:	6034      	str	r4, [r6, #0]
    cb02:	701a      	strb	r2, [r3, #0]
    cb04:	f894 4041 	ldrb.w	r4, [r4, #65]	; 0x41
    cb08:	e7d3      	b.n	cab2 <rpc_gnss_event_handler+0x6a>
    cb0a:	2a00      	cmp	r2, #0
    cb0c:	d0dc      	beq.n	cac8 <rpc_gnss_event_handler+0x80>
    cb0e:	2006      	movs	r0, #6
    cb10:	4798      	blx	r3
    cb12:	7037      	strb	r7, [r6, #0]
    cb14:	e7d8      	b.n	cac8 <rpc_gnss_event_handler+0x80>
    cb16:	4e17      	ldr	r6, [pc, #92]	; (cb74 <rpc_gnss_event_handler+0x12c>)
    cb18:	6830      	ldr	r0, [r6, #0]
    cb1a:	b108      	cbz	r0, cb20 <rpc_gnss_event_handler+0xd8>
    cb1c:	f003 f8e8 	bl	fcf0 <rpc_client_msg_data_rx_free>
    cb20:	2003      	movs	r0, #3
    cb22:	682b      	ldr	r3, [r5, #0]
    cb24:	6034      	str	r4, [r6, #0]
    cb26:	e7d6      	b.n	cad6 <rpc_gnss_event_handler+0x8e>
    cb28:	4e13      	ldr	r6, [pc, #76]	; (cb78 <rpc_gnss_event_handler+0x130>)
    cb2a:	6830      	ldr	r0, [r6, #0]
    cb2c:	b108      	cbz	r0, cb32 <rpc_gnss_event_handler+0xea>
    cb2e:	f003 f8df 	bl	fcf0 <rpc_client_msg_data_rx_free>
    cb32:	2004      	movs	r0, #4
    cb34:	682b      	ldr	r3, [r5, #0]
    cb36:	6034      	str	r4, [r6, #0]
    cb38:	e7cd      	b.n	cad6 <rpc_gnss_event_handler+0x8e>
    cb3a:	7822      	ldrb	r2, [r4, #0]
    cb3c:	2a03      	cmp	r2, #3
    cb3e:	d805      	bhi.n	cb4c <rpc_gnss_event_handler+0x104>
    cb40:	e8df f002 	tbb	[pc, r2]
    cb44:	0c0a0802 	.word	0x0c0a0802
    cb48:	2007      	movs	r0, #7
    cb4a:	4798      	blx	r3
    cb4c:	6830      	ldr	r0, [r6, #0]
    cb4e:	f003 f8cf 	bl	fcf0 <rpc_client_msg_data_rx_free>
    cb52:	e785      	b.n	ca60 <rpc_gnss_event_handler+0x18>
    cb54:	2008      	movs	r0, #8
    cb56:	e7f8      	b.n	cb4a <rpc_gnss_event_handler+0x102>
    cb58:	2009      	movs	r0, #9
    cb5a:	e7f6      	b.n	cb4a <rpc_gnss_event_handler+0x102>
    cb5c:	200a      	movs	r0, #10
    cb5e:	e7f4      	b.n	cb4a <rpc_gnss_event_handler+0x102>
    cb60:	2000ce48 	.word	0x2000ce48
    cb64:	2000ce38 	.word	0x2000ce38
    cb68:	2000ce44 	.word	0x2000ce44
    cb6c:	2000d2cf 	.word	0x2000d2cf
    cb70:	2000d2d0 	.word	0x2000d2d0
    cb74:	2000ce40 	.word	0x2000ce40
    cb78:	2000ce3c 	.word	0x2000ce3c

0000cb7c <rpc_gnss_init>:
    cb7c:	b508      	push	{r3, lr}
    cb7e:	2300      	movs	r3, #0
    cb80:	4a09      	ldr	r2, [pc, #36]	; (cba8 <rpc_gnss_init+0x2c>)
    cb82:	480a      	ldr	r0, [pc, #40]	; (cbac <rpc_gnss_init+0x30>)
    cb84:	7013      	strb	r3, [r2, #0]
    cb86:	4a0a      	ldr	r2, [pc, #40]	; (cbb0 <rpc_gnss_init+0x34>)
    cb88:	7013      	strb	r3, [r2, #0]
    cb8a:	4a0a      	ldr	r2, [pc, #40]	; (cbb4 <rpc_gnss_init+0x38>)
    cb8c:	7013      	strb	r3, [r2, #0]
    cb8e:	4a0a      	ldr	r2, [pc, #40]	; (cbb8 <rpc_gnss_init+0x3c>)
    cb90:	7013      	strb	r3, [r2, #0]
    cb92:	4a0a      	ldr	r2, [pc, #40]	; (cbbc <rpc_gnss_init+0x40>)
    cb94:	6013      	str	r3, [r2, #0]
    cb96:	2201      	movs	r2, #1
    cb98:	4611      	mov	r1, r2
    cb9a:	f7fd fe95 	bl	a8c8 <nrf_modem_os_sem_init>
    cb9e:	2800      	cmp	r0, #0
    cba0:	bf18      	it	ne
    cba2:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
    cba6:	bd08      	pop	{r3, pc}
    cba8:	2000d2d0 	.word	0x2000d2d0
    cbac:	2000ce50 	.word	0x2000ce50
    cbb0:	2000d2d2 	.word	0x2000d2d2
    cbb4:	2000d2d1 	.word	0x2000d2d1
    cbb8:	2000d2cf 	.word	0x2000d2cf
    cbbc:	2000ce38 	.word	0x2000ce38

0000cbc0 <rpc_gnss_deinit>:
    cbc0:	b510      	push	{r4, lr}
    cbc2:	4c0b      	ldr	r4, [pc, #44]	; (cbf0 <rpc_gnss_deinit+0x30>)
    cbc4:	6820      	ldr	r0, [r4, #0]
    cbc6:	b118      	cbz	r0, cbd0 <rpc_gnss_deinit+0x10>
    cbc8:	f003 f892 	bl	fcf0 <rpc_client_msg_data_rx_free>
    cbcc:	2300      	movs	r3, #0
    cbce:	6023      	str	r3, [r4, #0]
    cbd0:	4c08      	ldr	r4, [pc, #32]	; (cbf4 <rpc_gnss_deinit+0x34>)
    cbd2:	6820      	ldr	r0, [r4, #0]
    cbd4:	b118      	cbz	r0, cbde <rpc_gnss_deinit+0x1e>
    cbd6:	f003 f88b 	bl	fcf0 <rpc_client_msg_data_rx_free>
    cbda:	2300      	movs	r3, #0
    cbdc:	6023      	str	r3, [r4, #0]
    cbde:	4c06      	ldr	r4, [pc, #24]	; (cbf8 <rpc_gnss_deinit+0x38>)
    cbe0:	6820      	ldr	r0, [r4, #0]
    cbe2:	b118      	cbz	r0, cbec <rpc_gnss_deinit+0x2c>
    cbe4:	f003 f884 	bl	fcf0 <rpc_client_msg_data_rx_free>
    cbe8:	2300      	movs	r3, #0
    cbea:	6023      	str	r3, [r4, #0]
    cbec:	2000      	movs	r0, #0
    cbee:	bd10      	pop	{r4, pc}
    cbf0:	2000ce44 	.word	0x2000ce44
    cbf4:	2000ce40 	.word	0x2000ce40
    cbf8:	2000ce3c 	.word	0x2000ce3c

0000cbfc <modem_off>:
    cbfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    cbfe:	2501      	movs	r5, #1
    cc00:	4c07      	ldr	r4, [pc, #28]	; (cc20 <modem_off+0x24>)
    cc02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    cc06:	6165      	str	r5, [r4, #20]
    cc08:	f002 fea0 	bl	f94c <nrf_modem_os_busywait>
    cc0c:	2300      	movs	r3, #0
    cc0e:	6163      	str	r3, [r4, #20]
    cc10:	9301      	str	r3, [sp, #4]
    cc12:	6125      	str	r5, [r4, #16]
    cc14:	6923      	ldr	r3, [r4, #16]
    cc16:	9301      	str	r3, [sp, #4]
    cc18:	9b01      	ldr	r3, [sp, #4]
    cc1a:	b003      	add	sp, #12
    cc1c:	bd30      	pop	{r4, r5, pc}
    cc1e:	bf00      	nop
    cc20:	40005600 	.word	0x40005600

0000cc24 <atomic_set.constprop.0.isra.0>:
    cc24:	4b03      	ldr	r3, [pc, #12]	; (cc34 <atomic_set.constprop.0.isra.0+0x10>)
    cc26:	e8d3 2fef 	ldaex	r2, [r3]
    cc2a:	e8c3 0fe1 	stlex	r1, r0, [r3]
    cc2e:	2900      	cmp	r1, #0
    cc30:	d1f9      	bne.n	cc26 <atomic_set.constprop.0.isra.0+0x2>
    cc32:	4770      	bx	lr
    cc34:	2000ce54 	.word	0x2000ce54

0000cc38 <nrf_modem_init>:
    cc38:	b570      	push	{r4, r5, r6, lr}
    cc3a:	4604      	mov	r4, r0
    cc3c:	b086      	sub	sp, #24
    cc3e:	b390      	cbz	r0, cca6 <nrf_modem_init+0x6e>
    cc40:	6a43      	ldr	r3, [r0, #36]	; 0x24
    cc42:	b3ab      	cbz	r3, ccb0 <nrf_modem_init+0x78>
    cc44:	2201      	movs	r2, #1
    cc46:	4b1d      	ldr	r3, [pc, #116]	; (ccbc <nrf_modem_init+0x84>)
    cc48:	e8d3 1fef 	ldaex	r1, [r3]
    cc4c:	2900      	cmp	r1, #0
    cc4e:	d103      	bne.n	cc58 <nrf_modem_init+0x20>
    cc50:	e8c3 2fe0 	stlex	r0, r2, [r3]
    cc54:	2800      	cmp	r0, #0
    cc56:	d1f7      	bne.n	cc48 <nrf_modem_init+0x10>
    cc58:	d12d      	bne.n	ccb6 <nrf_modem_init+0x7e>
    cc5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    cc5c:	f000 f89a 	bl	cd94 <nrf_modem_fault_handler_set>
    cc60:	f7fd fe84 	bl	a96c <nrf_modem_os_init>
    cc64:	6a23      	ldr	r3, [r4, #32]
    cc66:	ad02      	add	r5, sp, #8
    cc68:	f88d 3004 	strb.w	r3, [sp, #4]
    cc6c:	4b14      	ldr	r3, [pc, #80]	; (ccc0 <nrf_modem_init+0x88>)
    cc6e:	9400      	str	r4, [sp, #0]
    cc70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    cc72:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    cc76:	4668      	mov	r0, sp
    cc78:	f002 ffc9 	bl	fc0e <rpc_init>
    cc7c:	4604      	mov	r4, r0
    cc7e:	b950      	cbnz	r0, cc96 <nrf_modem_init+0x5e>
    cc80:	4606      	mov	r6, r0
    cc82:	f855 3b04 	ldr.w	r3, [r5], #4
    cc86:	4798      	blx	r3
    cc88:	4604      	mov	r4, r0
    cc8a:	b920      	cbnz	r0, cc96 <nrf_modem_init+0x5e>
    cc8c:	3601      	adds	r6, #1
    cc8e:	2e04      	cmp	r6, #4
    cc90:	d1f7      	bne.n	cc82 <nrf_modem_init+0x4a>
    cc92:	2002      	movs	r0, #2
    cc94:	e004      	b.n	cca0 <nrf_modem_init+0x68>
    cc96:	f7ff ffb1 	bl	cbfc <modem_off>
    cc9a:	f7fd fe7f 	bl	a99c <nrf_modem_os_shutdown>
    cc9e:	2000      	movs	r0, #0
    cca0:	f7ff ffc0 	bl	cc24 <atomic_set.constprop.0.isra.0>
    cca4:	e001      	b.n	ccaa <nrf_modem_init+0x72>
    cca6:	f06f 040d 	mvn.w	r4, #13
    ccaa:	4620      	mov	r0, r4
    ccac:	b006      	add	sp, #24
    ccae:	bd70      	pop	{r4, r5, r6, pc}
    ccb0:	f06f 0415 	mvn.w	r4, #21
    ccb4:	e7f9      	b.n	ccaa <nrf_modem_init+0x72>
    ccb6:	f04f 34ff 	mov.w	r4, #4294967295
    ccba:	e7f6      	b.n	ccaa <nrf_modem_init+0x72>
    ccbc:	2000ce54 	.word	0x2000ce54
    ccc0:	00010d9c 	.word	0x00010d9c

0000ccc4 <nrf_modem_shutdown>:
    ccc4:	b530      	push	{r4, r5, lr}
    ccc6:	4b2f      	ldr	r3, [pc, #188]	; (cd84 <nrf_modem_shutdown+0xc0>)
    ccc8:	b085      	sub	sp, #20
    ccca:	681a      	ldr	r2, [r3, #0]
    cccc:	2a02      	cmp	r2, #2
    ccce:	d005      	beq.n	ccdc <nrf_modem_shutdown+0x18>
    ccd0:	2a03      	cmp	r2, #3
    ccd2:	d046      	beq.n	cd62 <nrf_modem_shutdown+0x9e>
    ccd4:	f04f 30ff 	mov.w	r0, #4294967295
    ccd8:	b005      	add	sp, #20
    ccda:	bd30      	pop	{r4, r5, pc}
    ccdc:	2204      	movs	r2, #4
    ccde:	e8d3 1fef 	ldaex	r1, [r3]
    cce2:	2902      	cmp	r1, #2
    cce4:	d103      	bne.n	ccee <nrf_modem_shutdown+0x2a>
    cce6:	e8c3 2fe0 	stlex	r0, r2, [r3]
    ccea:	2800      	cmp	r0, #0
    ccec:	d1f7      	bne.n	ccde <nrf_modem_shutdown+0x1a>
    ccee:	d1f1      	bne.n	ccd4 <nrf_modem_shutdown+0x10>
    ccf0:	466c      	mov	r4, sp
    ccf2:	2500      	movs	r5, #0
    ccf4:	4b24      	ldr	r3, [pc, #144]	; (cd88 <nrf_modem_shutdown+0xc4>)
    ccf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    ccf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    ccfc:	f854 3b04 	ldr.w	r3, [r4], #4
    cd00:	3501      	adds	r5, #1
    cd02:	4798      	blx	r3
    cd04:	2d04      	cmp	r5, #4
    cd06:	d1f9      	bne.n	ccfc <nrf_modem_shutdown+0x38>
    cd08:	f000 f864 	bl	cdd4 <nrf_modem_state_is_fault>
    cd0c:	b910      	cbnz	r0, cd14 <nrf_modem_shutdown+0x50>
    cd0e:	2064      	movs	r0, #100	; 0x64
    cd10:	f002 fe1e 	bl	f950 <nrf_modem_os_sleep>
    cd14:	f002 ff7d 	bl	fc12 <rpc_shutdown>
    cd18:	f000 f85c 	bl	cdd4 <nrf_modem_state_is_fault>
    cd1c:	b150      	cbz	r0, cd34 <nrf_modem_shutdown+0x70>
    cd1e:	2000      	movs	r0, #0
    cd20:	f000 f84a 	bl	cdb8 <nrf_modem_state_set>
    cd24:	f7ff ff6a 	bl	cbfc <modem_off>
    cd28:	f7fd fe38 	bl	a99c <nrf_modem_os_shutdown>
    cd2c:	2000      	movs	r0, #0
    cd2e:	f7ff ff79 	bl	cc24 <atomic_set.constprop.0.isra.0>
    cd32:	e7d1      	b.n	ccd8 <nrf_modem_shutdown+0x14>
    cd34:	4b15      	ldr	r3, [pc, #84]	; (cd8c <nrf_modem_shutdown+0xc8>)
    cd36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    cd3a:	07db      	lsls	r3, r3, #31
    cd3c:	d50d      	bpl.n	cd5a <nrf_modem_shutdown+0x96>
    cd3e:	200a      	movs	r0, #10
    cd40:	f002 fe06 	bl	f950 <nrf_modem_os_sleep>
    cd44:	e7ee      	b.n	cd24 <nrf_modem_shutdown+0x60>
    cd46:	200a      	movs	r0, #10
    cd48:	f002 fe02 	bl	f950 <nrf_modem_os_sleep>
    cd4c:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
    cd50:	2b01      	cmp	r3, #1
    cd52:	d1e7      	bne.n	cd24 <nrf_modem_shutdown+0x60>
    cd54:	3c01      	subs	r4, #1
    cd56:	d1f6      	bne.n	cd46 <nrf_modem_shutdown+0x82>
    cd58:	e7e4      	b.n	cd24 <nrf_modem_shutdown+0x60>
    cd5a:	f241 24c1 	movw	r4, #4801	; 0x12c1
    cd5e:	4d0c      	ldr	r5, [pc, #48]	; (cd90 <nrf_modem_shutdown+0xcc>)
    cd60:	e7f4      	b.n	cd4c <nrf_modem_shutdown+0x88>
    cd62:	2204      	movs	r2, #4
    cd64:	e8d3 1fef 	ldaex	r1, [r3]
    cd68:	2903      	cmp	r1, #3
    cd6a:	d103      	bne.n	cd74 <nrf_modem_shutdown+0xb0>
    cd6c:	e8c3 2fe0 	stlex	r0, r2, [r3]
    cd70:	2800      	cmp	r0, #0
    cd72:	d1f7      	bne.n	cd64 <nrf_modem_shutdown+0xa0>
    cd74:	d1ae      	bne.n	ccd4 <nrf_modem_shutdown+0x10>
    cd76:	2000      	movs	r0, #0
    cd78:	f000 f81e 	bl	cdb8 <nrf_modem_state_set>
    cd7c:	f002 ff2d 	bl	fbda <ipc_bootloader_shutdown>
    cd80:	e7d0      	b.n	cd24 <nrf_modem_shutdown+0x60>
    cd82:	bf00      	nop
    cd84:	2000ce54 	.word	0x2000ce54
    cd88:	00010dac 	.word	0x00010dac
    cd8c:	e000ed00 	.word	0xe000ed00
    cd90:	40005000 	.word	0x40005000

0000cd94 <nrf_modem_fault_handler_set>:
    cd94:	4b01      	ldr	r3, [pc, #4]	; (cd9c <nrf_modem_fault_handler_set+0x8>)
    cd96:	6018      	str	r0, [r3, #0]
    cd98:	4770      	bx	lr
    cd9a:	bf00      	nop
    cd9c:	2000ce58 	.word	0x2000ce58

0000cda0 <nrf_modem_fault_handler_internal>:
    cda0:	b507      	push	{r0, r1, r2, lr}
    cda2:	4b04      	ldr	r3, [pc, #16]	; (cdb4 <nrf_modem_fault_handler_internal+0x14>)
    cda4:	e9cd 0100 	strd	r0, r1, [sp]
    cda8:	681b      	ldr	r3, [r3, #0]
    cdaa:	4668      	mov	r0, sp
    cdac:	4798      	blx	r3
    cdae:	b003      	add	sp, #12
    cdb0:	f85d fb04 	ldr.w	pc, [sp], #4
    cdb4:	2000ce58 	.word	0x2000ce58

0000cdb8 <nrf_modem_state_set>:
    cdb8:	4b01      	ldr	r3, [pc, #4]	; (cdc0 <nrf_modem_state_set+0x8>)
    cdba:	7018      	strb	r0, [r3, #0]
    cdbc:	4770      	bx	lr
    cdbe:	bf00      	nop
    cdc0:	2000d2d3 	.word	0x2000d2d3

0000cdc4 <nrf_modem_state_is_initialized>:
    cdc4:	4b02      	ldr	r3, [pc, #8]	; (cdd0 <nrf_modem_state_is_initialized+0xc>)
    cdc6:	7818      	ldrb	r0, [r3, #0]
    cdc8:	1e43      	subs	r3, r0, #1
    cdca:	4258      	negs	r0, r3
    cdcc:	4158      	adcs	r0, r3
    cdce:	4770      	bx	lr
    cdd0:	2000d2d3 	.word	0x2000d2d3

0000cdd4 <nrf_modem_state_is_fault>:
    cdd4:	4b02      	ldr	r3, [pc, #8]	; (cde0 <nrf_modem_state_is_fault+0xc>)
    cdd6:	7818      	ldrb	r0, [r3, #0]
    cdd8:	1ec3      	subs	r3, r0, #3
    cdda:	4258      	negs	r0, r3
    cddc:	4158      	adcs	r0, r3
    cdde:	4770      	bx	lr
    cde0:	2000d2d3 	.word	0x2000d2d3

0000cde4 <ipc_trace_init>:
    cde4:	2100      	movs	r1, #0
    cde6:	4b07      	ldr	r3, [pc, #28]	; (ce04 <ipc_trace_init+0x20>)
    cde8:	2201      	movs	r2, #1
    cdea:	7019      	strb	r1, [r3, #0]
    cdec:	4b06      	ldr	r3, [pc, #24]	; (ce08 <ipc_trace_init+0x24>)
    cdee:	7019      	strb	r1, [r3, #0]
    cdf0:	4b06      	ldr	r3, [pc, #24]	; (ce0c <ipc_trace_init+0x28>)
    cdf2:	6019      	str	r1, [r3, #0]
    cdf4:	4b06      	ldr	r3, [pc, #24]	; (ce10 <ipc_trace_init+0x2c>)
    cdf6:	6019      	str	r1, [r3, #0]
    cdf8:	4b06      	ldr	r3, [pc, #24]	; (ce14 <ipc_trace_init+0x30>)
    cdfa:	6018      	str	r0, [r3, #0]
    cdfc:	4806      	ldr	r0, [pc, #24]	; (ce18 <ipc_trace_init+0x34>)
    cdfe:	f7fd bd63 	b.w	a8c8 <nrf_modem_os_sem_init>
    ce02:	bf00      	nop
    ce04:	2000d2d4 	.word	0x2000d2d4
    ce08:	2000d2d5 	.word	0x2000d2d5
    ce0c:	2000ce60 	.word	0x2000ce60
    ce10:	2000ce64 	.word	0x2000ce64
    ce14:	2000ce74 	.word	0x2000ce74
    ce18:	2000ce5c 	.word	0x2000ce5c

0000ce1c <ipc_trace_handler>:
    ce1c:	b470      	push	{r4, r5, r6}
    ce1e:	4b2d      	ldr	r3, [pc, #180]	; (ced4 <ipc_trace_handler+0xb8>)
    ce20:	681b      	ldr	r3, [r3, #0]
    ce22:	6919      	ldr	r1, [r3, #16]
    ce24:	6958      	ldr	r0, [r3, #20]
    ce26:	7c1a      	ldrb	r2, [r3, #16]
    ce28:	2200      	movs	r2, #0
    ce2a:	741a      	strb	r2, [r3, #16]
    ce2c:	7c5c      	ldrb	r4, [r3, #17]
    ce2e:	745a      	strb	r2, [r3, #17]
    ce30:	7c9c      	ldrb	r4, [r3, #18]
    ce32:	749a      	strb	r2, [r3, #18]
    ce34:	7cdc      	ldrb	r4, [r3, #19]
    ce36:	74da      	strb	r2, [r3, #19]
    ce38:	7d1c      	ldrb	r4, [r3, #20]
    ce3a:	751a      	strb	r2, [r3, #20]
    ce3c:	7d5c      	ldrb	r4, [r3, #21]
    ce3e:	755a      	strb	r2, [r3, #21]
    ce40:	7d9c      	ldrb	r4, [r3, #22]
    ce42:	2903      	cmp	r1, #3
    ce44:	759a      	strb	r2, [r3, #22]
    ce46:	7ddc      	ldrb	r4, [r3, #23]
    ce48:	75da      	strb	r2, [r3, #23]
    ce4a:	d029      	beq.n	cea0 <ipc_trace_handler+0x84>
    ce4c:	2904      	cmp	r1, #4
    ce4e:	d033      	beq.n	ceb8 <ipc_trace_handler+0x9c>
    ce50:	2901      	cmp	r1, #1
    ce52:	d12f      	bne.n	ceb4 <ipc_trace_handler+0x98>
    ce54:	6885      	ldr	r5, [r0, #8]
    ce56:	4e20      	ldr	r6, [pc, #128]	; (ced8 <ipc_trace_handler+0xbc>)
    ce58:	4295      	cmp	r5, r2
    ce5a:	d110      	bne.n	ce7e <ipc_trace_handler+0x62>
    ce5c:	2101      	movs	r1, #1
    ce5e:	7a1a      	ldrb	r2, [r3, #8]
    ce60:	2200      	movs	r2, #0
    ce62:	7219      	strb	r1, [r3, #8]
    ce64:	7a59      	ldrb	r1, [r3, #9]
    ce66:	725a      	strb	r2, [r3, #9]
    ce68:	7a99      	ldrb	r1, [r3, #10]
    ce6a:	729a      	strb	r2, [r3, #10]
    ce6c:	7ada      	ldrb	r2, [r3, #11]
    ce6e:	f06f 025f 	mvn.w	r2, #95	; 0x5f
    ce72:	72da      	strb	r2, [r3, #11]
    ce74:	4b19      	ldr	r3, [pc, #100]	; (cedc <ipc_trace_handler+0xc0>)
    ce76:	bc70      	pop	{r4, r5, r6}
    ce78:	6818      	ldr	r0, [r3, #0]
    ce7a:	f002 bd89 	b.w	f990 <nrf_modem_os_sem_give>
    ce7e:	1c91      	adds	r1, r2, #2
    ce80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    ce84:	684c      	ldr	r4, [r1, #4]
    ce86:	7821      	ldrb	r1, [r4, #0]
    ce88:	2962      	cmp	r1, #98	; 0x62
    ce8a:	d007      	beq.n	ce9c <ipc_trace_handler+0x80>
    ce8c:	3963      	subs	r1, #99	; 0x63
    ce8e:	bf18      	it	ne
    ce90:	2101      	movne	r1, #1
    ce92:	0049      	lsls	r1, r1, #1
    ce94:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
    ce98:	3201      	adds	r2, #1
    ce9a:	e7dd      	b.n	ce58 <ipc_trace_handler+0x3c>
    ce9c:	2101      	movs	r1, #1
    ce9e:	e7f9      	b.n	ce94 <ipc_trace_handler+0x78>
    cea0:	7a18      	ldrb	r0, [r3, #8]
    cea2:	7219      	strb	r1, [r3, #8]
    cea4:	7a59      	ldrb	r1, [r3, #9]
    cea6:	725a      	strb	r2, [r3, #9]
    cea8:	7a99      	ldrb	r1, [r3, #10]
    ceaa:	729a      	strb	r2, [r3, #10]
    ceac:	7ada      	ldrb	r2, [r3, #11]
    ceae:	f06f 025f 	mvn.w	r2, #95	; 0x5f
    ceb2:	72da      	strb	r2, [r3, #11]
    ceb4:	bc70      	pop	{r4, r5, r6}
    ceb6:	4770      	bx	lr
    ceb8:	7a18      	ldrb	r0, [r3, #8]
    ceba:	7219      	strb	r1, [r3, #8]
    cebc:	7a59      	ldrb	r1, [r3, #9]
    cebe:	725a      	strb	r2, [r3, #9]
    cec0:	7a99      	ldrb	r1, [r3, #10]
    cec2:	729a      	strb	r2, [r3, #10]
    cec4:	7ada      	ldrb	r2, [r3, #11]
    cec6:	f06f 025f 	mvn.w	r2, #95	; 0x5f
    ceca:	72da      	strb	r2, [r3, #11]
    cecc:	2201      	movs	r2, #1
    cece:	4b04      	ldr	r3, [pc, #16]	; (cee0 <ipc_trace_handler+0xc4>)
    ced0:	701a      	strb	r2, [r3, #0]
    ced2:	e7ef      	b.n	ceb4 <ipc_trace_handler+0x98>
    ced4:	2000ce74 	.word	0x2000ce74
    ced8:	2000ce68 	.word	0x2000ce68
    cedc:	2000ce5c 	.word	0x2000ce5c
    cee0:	2000d2d5 	.word	0x2000d2d5

0000cee4 <z_device_get_all_static>:
#include <syscalls/device_is_ready_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
    cee4:	4a03      	ldr	r2, [pc, #12]	; (cef4 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
    cee6:	4b04      	ldr	r3, [pc, #16]	; (cef8 <z_device_get_all_static+0x14>)
	*devices = __device_start;
    cee8:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
    ceea:	1a9b      	subs	r3, r3, r2
}
    ceec:	4803      	ldr	r0, [pc, #12]	; (cefc <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
    ceee:	109b      	asrs	r3, r3, #2
}
    cef0:	4358      	muls	r0, r3
    cef2:	4770      	bx	lr
    cef4:	00010aa8 	.word	0x00010aa8
    cef8:	00010afc 	.word	0x00010afc
    cefc:	b6db6db7 	.word	0xb6db6db7

0000cf00 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    cf00:	4b01      	ldr	r3, [pc, #4]	; (cf08 <z_impl_z_errno+0x8>)
    cf02:	6898      	ldr	r0, [r3, #8]
}
    cf04:	3060      	adds	r0, #96	; 0x60
    cf06:	4770      	bx	lr
    cf08:	2000ce78 	.word	0x2000ce78

0000cf0c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    cf0c:	4b10      	ldr	r3, [pc, #64]	; (cf50 <z_sys_init_run_level+0x44>)
{
    cf0e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    cf10:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    cf14:	3001      	adds	r0, #1
    cf16:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    cf1a:	42a6      	cmp	r6, r4
    cf1c:	d800      	bhi.n	cf20 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    cf1e:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    cf20:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    cf24:	b18d      	cbz	r5, cf4a <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    cf26:	4628      	mov	r0, r5
    cf28:	4798      	blx	r3
			if (rc != 0) {
    cf2a:	b138      	cbz	r0, cf3c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    cf2c:	2800      	cmp	r0, #0
    cf2e:	bfb8      	it	lt
    cf30:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    cf32:	28ff      	cmp	r0, #255	; 0xff
    cf34:	bfa8      	it	ge
    cf36:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    cf38:	68eb      	ldr	r3, [r5, #12]
    cf3a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    cf3c:	68ea      	ldr	r2, [r5, #12]
    cf3e:	7853      	ldrb	r3, [r2, #1]
    cf40:	f043 0301 	orr.w	r3, r3, #1
    cf44:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    cf46:	3408      	adds	r4, #8
    cf48:	e7e7      	b.n	cf1a <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    cf4a:	4798      	blx	r3
    cf4c:	e7fb      	b.n	cf46 <z_sys_init_run_level+0x3a>
    cf4e:	bf00      	nop
    cf50:	000110ac 	.word	0x000110ac

0000cf54 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    cf54:	2201      	movs	r2, #1
{
    cf56:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    cf58:	4b09      	ldr	r3, [pc, #36]	; (cf80 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    cf5a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    cf5c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    cf5e:	f7ff ffd5 	bl	cf0c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    cf62:	f001 f8e1 	bl	e128 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    cf66:	2004      	movs	r0, #4
    cf68:	f7ff ffd0 	bl	cf0c <z_sys_init_run_level>

	z_init_static_threads();
    cf6c:	f000 f92a 	bl	d1c4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    cf70:	f7fb fa6e 	bl	8450 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    cf74:	4a03      	ldr	r2, [pc, #12]	; (cf84 <bg_thread_main+0x30>)
    cf76:	7b13      	ldrb	r3, [r2, #12]
    cf78:	f023 0301 	bic.w	r3, r3, #1
    cf7c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    cf7e:	bd08      	pop	{r3, pc}
    cf80:	2000d2d6 	.word	0x2000d2d6
    cf84:	2000c7b0 	.word	0x2000c7b0

0000cf88 <z_bss_zero>:
{
    cf88:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    cf8a:	4803      	ldr	r0, [pc, #12]	; (cf98 <z_bss_zero+0x10>)
    cf8c:	4a03      	ldr	r2, [pc, #12]	; (cf9c <z_bss_zero+0x14>)
    cf8e:	2100      	movs	r1, #0
    cf90:	1a12      	subs	r2, r2, r0
    cf92:	f003 f826 	bl	ffe2 <z_early_memset>
}
    cf96:	bd08      	pop	{r3, pc}
    cf98:	2000c710 	.word	0x2000c710
    cf9c:	2000d2d8 	.word	0x2000d2d8

0000cfa0 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    cfa0:	2300      	movs	r3, #0
    cfa2:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    cfa4:	b570      	push	{r4, r5, r6, lr}
    cfa6:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    cfa8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    cfac:	220f      	movs	r2, #15
    cfae:	9301      	str	r3, [sp, #4]
    cfb0:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    cfb4:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
    cfb6:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    cfba:	4d0e      	ldr	r5, [pc, #56]	; (cff4 <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
    cfbc:	4e0e      	ldr	r6, [pc, #56]	; (cff8 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    cfbe:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
    cfc2:	490e      	ldr	r1, [pc, #56]	; (cffc <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    cfc4:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    cfc8:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    cfca:	fb02 1100 	mla	r1, r2, r0, r1
    cfce:	4b0c      	ldr	r3, [pc, #48]	; (d000 <z_init_cpu+0x60>)
    cfd0:	4630      	mov	r0, r6
    cfd2:	9500      	str	r5, [sp, #0]
    cfd4:	f000 f89a 	bl	d10c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    cfd8:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    cfda:	742c      	strb	r4, [r5, #16]
    cfdc:	f023 0304 	bic.w	r3, r3, #4
    cfe0:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    cfe2:	4b08      	ldr	r3, [pc, #32]	; (d004 <z_init_cpu+0x64>)
    cfe4:	3401      	adds	r4, #1
    cfe6:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    cfea:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    cfec:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    cfee:	b006      	add	sp, #24
    cff0:	bd70      	pop	{r4, r5, r6, pc}
    cff2:	bf00      	nop
    cff4:	2000ce78 	.word	0x2000ce78
    cff8:	2000c730 	.word	0x2000c730
    cffc:	2000dbd8 	.word	0x2000dbd8
    d000:	0000d27d 	.word	0x0000d27d
    d004:	2000d3d8 	.word	0x2000d3d8

0000d008 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    d008:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    d00a:	2000      	movs	r0, #0
{
    d00c:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    d00e:	f7ff ff7d 	bl	cf0c <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    d012:	4b2e      	ldr	r3, [pc, #184]	; (d0cc <z_cstart+0xc4>)
	uint32_t msp =
    d014:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    d018:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    d01c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d020:	2400      	movs	r4, #0
    d022:	23e0      	movs	r3, #224	; 0xe0
    d024:	4d2a      	ldr	r5, [pc, #168]	; (d0d0 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    d026:	4e2b      	ldr	r6, [pc, #172]	; (d0d4 <z_cstart+0xcc>)
    d028:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    d02c:	77ec      	strb	r4, [r5, #31]
    d02e:	762c      	strb	r4, [r5, #24]
    d030:	766c      	strb	r4, [r5, #25]
    d032:	76ac      	strb	r4, [r5, #26]
    d034:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    d038:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    d03a:	4f27      	ldr	r7, [pc, #156]	; (d0d8 <z_cstart+0xd0>)
    d03c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    d040:	626b      	str	r3, [r5, #36]	; 0x24
    d042:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    d046:	f7fc fc21 	bl	988c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    d04a:	f7fc f9bb 	bl	93c4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    d04e:	f04f 33ff 	mov.w	r3, #4294967295
    d052:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    d054:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    d056:	f7fc fe23 	bl	9ca0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    d05a:	f7fc fcc9 	bl	99f0 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    d05e:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    d062:	ad06      	add	r5, sp, #24
    d064:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    d066:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    d06a:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
    d06e:	f001 f83d 	bl	e0ec <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    d072:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    d074:	f002 ff8e 	bl	ff94 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    d078:	2001      	movs	r0, #1
    d07a:	f7ff ff47 	bl	cf0c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    d07e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    d080:	4d16      	ldr	r5, [pc, #88]	; (d0dc <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    d082:	f7ff ff43 	bl	cf0c <z_sys_init_run_level>
	z_sched_init();
    d086:	f000 fdb3 	bl	dbf0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    d08a:	4b15      	ldr	r3, [pc, #84]	; (d0e0 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    d08c:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    d08e:	9305      	str	r3, [sp, #20]
    d090:	2301      	movs	r3, #1
    d092:	4914      	ldr	r1, [pc, #80]	; (d0e4 <z_cstart+0xdc>)
    d094:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d098:	e9cd 4303 	strd	r4, r3, [sp, #12]
    d09c:	4628      	mov	r0, r5
    d09e:	463b      	mov	r3, r7
    d0a0:	e9cd 4401 	strd	r4, r4, [sp, #4]
    d0a4:	9400      	str	r4, [sp, #0]
    d0a6:	f000 f831 	bl	d10c <z_setup_new_thread>
    d0aa:	4606      	mov	r6, r0
    d0ac:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    d0ae:	4628      	mov	r0, r5
    d0b0:	f022 0204 	bic.w	r2, r2, #4
    d0b4:	736a      	strb	r2, [r5, #13]
    d0b6:	f003 f924 	bl	10302 <z_ready_thread>
	z_init_cpu(0);
    d0ba:	4620      	mov	r0, r4
    d0bc:	f7ff ff70 	bl	cfa0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    d0c0:	463a      	mov	r2, r7
    d0c2:	4631      	mov	r1, r6
    d0c4:	4628      	mov	r0, r5
    d0c6:	f7fc fa67 	bl	9598 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    d0ca:	bf00      	nop
    d0cc:	2000d3d8 	.word	0x2000d3d8
    d0d0:	e000ed00 	.word	0xe000ed00
    d0d4:	2000ce78 	.word	0x2000ce78
    d0d8:	0000cf55 	.word	0x0000cf55
    d0dc:	2000c7b0 	.word	0x2000c7b0
    d0e0:	0001148f 	.word	0x0001148f
    d0e4:	2000dd18 	.word	0x2000dd18

0000d0e8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    d0e8:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    d0ea:	4c06      	ldr	r4, [pc, #24]	; (d104 <statics_init+0x1c>)
    d0ec:	4d06      	ldr	r5, [pc, #24]	; (d108 <statics_init+0x20>)
    d0ee:	42ac      	cmp	r4, r5
    d0f0:	d301      	bcc.n	d0f6 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    d0f2:	2000      	movs	r0, #0
    d0f4:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    d0f6:	4620      	mov	r0, r4
    d0f8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    d0fc:	f002 ff75 	bl	ffea <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    d100:	3414      	adds	r4, #20
    d102:	e7f4      	b.n	d0ee <statics_init+0x6>
    d104:	2000c6ac 	.word	0x2000c6ac
    d108:	2000c6d4 	.word	0x2000c6d4

0000d10c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    d10c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    d110:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    d112:	f100 0558 	add.w	r5, r0, #88	; 0x58
    d116:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    d118:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    d11a:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    d11e:	2500      	movs	r5, #0
{
    d120:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    d122:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    d124:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    d126:	e9c0 5506 	strd	r5, r5, [r0, #24]
    d12a:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    d12c:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    d12e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    d130:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    d134:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    d138:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    d13a:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    d13c:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    d13e:	9202      	str	r2, [sp, #8]
    d140:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    d142:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    d146:	9201      	str	r2, [sp, #4]
    d148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d14a:	9200      	str	r2, [sp, #0]
    d14c:	4642      	mov	r2, r8
    d14e:	f7fc fa05 	bl	955c <arch_new_thread>
	if (!_current) {
    d152:	4b05      	ldr	r3, [pc, #20]	; (d168 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    d154:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    d156:	689b      	ldr	r3, [r3, #8]
    d158:	b103      	cbz	r3, d15c <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    d15a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    d15c:	4640      	mov	r0, r8
    d15e:	6723      	str	r3, [r4, #112]	; 0x70
    d160:	b004      	add	sp, #16
    d162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d166:	bf00      	nop
    d168:	2000ce78 	.word	0x2000ce78

0000d16c <z_impl_k_thread_create>:
{
    d16c:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    d16e:	2500      	movs	r5, #0
{
    d170:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    d172:	9505      	str	r5, [sp, #20]
    d174:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
    d176:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    d17a:	9504      	str	r5, [sp, #16]
    d17c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
    d17e:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    d180:	9503      	str	r5, [sp, #12]
    d182:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    d184:	9502      	str	r5, [sp, #8]
    d186:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    d188:	9501      	str	r5, [sp, #4]
    d18a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    d18c:	9500      	str	r5, [sp, #0]
    d18e:	f7ff ffbd 	bl	d10c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    d192:	f1b6 3fff 	cmp.w	r6, #4294967295
    d196:	bf08      	it	eq
    d198:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    d19c:	d005      	beq.n	d1aa <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    d19e:	ea56 0307 	orrs.w	r3, r6, r7
    d1a2:	d105      	bne.n	d1b0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    d1a4:	4620      	mov	r0, r4
    d1a6:	f000 fca3 	bl	daf0 <z_sched_start>
}
    d1aa:	4620      	mov	r0, r4
    d1ac:	b007      	add	sp, #28
    d1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    d1b0:	463a      	mov	r2, r7
    d1b2:	4633      	mov	r3, r6
    d1b4:	4902      	ldr	r1, [pc, #8]	; (d1c0 <z_impl_k_thread_create+0x54>)
    d1b6:	f104 0018 	add.w	r0, r4, #24
    d1ba:	f000 fe95 	bl	dee8 <z_add_timeout>
    d1be:	e7f4      	b.n	d1aa <z_impl_k_thread_create+0x3e>
    d1c0:	00010367 	.word	0x00010367

0000d1c4 <z_init_static_threads>:
{
    d1c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d1c8:	4c29      	ldr	r4, [pc, #164]	; (d270 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    d1ca:	4d2a      	ldr	r5, [pc, #168]	; (d274 <z_init_static_threads+0xb0>)
{
    d1cc:	b087      	sub	sp, #28
    d1ce:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    d1d0:	42ae      	cmp	r6, r5
    d1d2:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    d1d6:	d30f      	bcc.n	d1f8 <z_init_static_threads+0x34>
	k_sched_lock();
    d1d8:	f000 fcda 	bl	db90 <k_sched_lock>
    d1dc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    d1e0:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    d1e4:	4c22      	ldr	r4, [pc, #136]	; (d270 <z_init_static_threads+0xac>)
    d1e6:	f8df 9090 	ldr.w	r9, [pc, #144]	; d278 <z_init_static_threads+0xb4>
    d1ea:	42ac      	cmp	r4, r5
    d1ec:	d320      	bcc.n	d230 <z_init_static_threads+0x6c>
}
    d1ee:	b007      	add	sp, #28
    d1f0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    d1f4:	f000 bce0 	b.w	dbb8 <k_sched_unlock>
		z_setup_new_thread(
    d1f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
    d1fc:	9305      	str	r3, [sp, #20]
    d1fe:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    d202:	9304      	str	r3, [sp, #16]
    d204:	f854 3c10 	ldr.w	r3, [r4, #-16]
    d208:	9303      	str	r3, [sp, #12]
    d20a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    d20e:	9302      	str	r3, [sp, #8]
    d210:	f854 3c18 	ldr.w	r3, [r4, #-24]
    d214:	9301      	str	r3, [sp, #4]
    d216:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    d21a:	9300      	str	r3, [sp, #0]
    d21c:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    d220:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    d224:	f7ff ff72 	bl	d10c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    d228:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    d22c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    d22e:	e7ce      	b.n	d1ce <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    d230:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d232:	1c5a      	adds	r2, r3, #1
    d234:	d00d      	beq.n	d252 <z_init_static_threads+0x8e>
    d236:	2100      	movs	r1, #0
    d238:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    d23a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    d23e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    d242:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    d246:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    d24a:	d104      	bne.n	d256 <z_init_static_threads+0x92>
	z_sched_start(thread);
    d24c:	4640      	mov	r0, r8
    d24e:	f000 fc4f 	bl	daf0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    d252:	342c      	adds	r4, #44	; 0x2c
    d254:	e7c9      	b.n	d1ea <z_init_static_threads+0x26>
    d256:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d25a:	2300      	movs	r3, #0
    d25c:	f7fa ff72 	bl	8144 <__aeabi_uldivmod>
    d260:	4602      	mov	r2, r0
    d262:	460b      	mov	r3, r1
    d264:	f108 0018 	add.w	r0, r8, #24
    d268:	4649      	mov	r1, r9
    d26a:	f000 fe3d 	bl	dee8 <z_add_timeout>
    d26e:	e7f0      	b.n	d252 <z_init_static_threads+0x8e>
    d270:	00010d04 	.word	0x00010d04
    d274:	00010d04 	.word	0x00010d04
    d278:	00010367 	.word	0x00010367

0000d27c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    d27c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    d27e:	4c0b      	ldr	r4, [pc, #44]	; (d2ac <idle+0x30>)
    d280:	4d0b      	ldr	r5, [pc, #44]	; (d2b0 <idle+0x34>)
	__asm__ volatile(
    d282:	f04f 0220 	mov.w	r2, #32
    d286:	f3ef 8311 	mrs	r3, BASEPRI
    d28a:	f382 8812 	msr	BASEPRI_MAX, r2
    d28e:	f3bf 8f6f 	isb	sy
    d292:	f003 f8ff 	bl	10494 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    d296:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    d298:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    d29a:	b913      	cbnz	r3, d2a2 <idle+0x26>
	arch_cpu_idle();
    d29c:	f7fc f898 	bl	93d0 <arch_cpu_idle>
}
    d2a0:	e7ef      	b.n	d282 <idle+0x6>
    d2a2:	f7fb ff17 	bl	90d4 <pm_system_suspend>
    d2a6:	2800      	cmp	r0, #0
    d2a8:	d1eb      	bne.n	d282 <idle+0x6>
    d2aa:	e7f7      	b.n	d29c <idle+0x20>
    d2ac:	2000ce78 	.word	0x2000ce78
    d2b0:	2000d2d6 	.word	0x2000d2d6

0000d2b4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    d2b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d2b8:	4604      	mov	r4, r0
    d2ba:	4617      	mov	r7, r2
    d2bc:	461e      	mov	r6, r3
    d2be:	f04f 0320 	mov.w	r3, #32
    d2c2:	f3ef 8811 	mrs	r8, BASEPRI
    d2c6:	f383 8812 	msr	BASEPRI_MAX, r3
    d2ca:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    d2ce:	68c3      	ldr	r3, [r0, #12]
    d2d0:	4a33      	ldr	r2, [pc, #204]	; (d3a0 <z_impl_k_mutex_lock+0xec>)
    d2d2:	b17b      	cbz	r3, d2f4 <z_impl_k_mutex_lock+0x40>
    d2d4:	6880      	ldr	r0, [r0, #8]
    d2d6:	6891      	ldr	r1, [r2, #8]
    d2d8:	4288      	cmp	r0, r1
    d2da:	d019      	beq.n	d310 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    d2dc:	ea57 0306 	orrs.w	r3, r7, r6
    d2e0:	d118      	bne.n	d314 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    d2e2:	f388 8811 	msr	BASEPRI, r8
    d2e6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    d2ea:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    d2ee:	b002      	add	sp, #8
    d2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    d2f4:	6891      	ldr	r1, [r2, #8]
    d2f6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    d2fa:	3301      	adds	r3, #1
    d2fc:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    d2fe:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    d300:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    d302:	60a3      	str	r3, [r4, #8]
    d304:	f388 8811 	msr	BASEPRI, r8
    d308:	f3bf 8f6f 	isb	sy
		return 0;
    d30c:	2000      	movs	r0, #0
    d30e:	e7ee      	b.n	d2ee <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    d310:	6921      	ldr	r1, [r4, #16]
    d312:	e7f2      	b.n	d2fa <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    d314:	f991 100e 	ldrsb.w	r1, [r1, #14]
    d318:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    d31c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    d320:	4299      	cmp	r1, r3
    d322:	bfa8      	it	ge
    d324:	4619      	movge	r1, r3
    d326:	4291      	cmp	r1, r2
    d328:	bfb8      	it	lt
    d32a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    d32c:	428b      	cmp	r3, r1
    d32e:	dd2e      	ble.n	d38e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    d330:	f002 fee9 	bl	10106 <adjust_owner_prio.isra.0>
    d334:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    d336:	4622      	mov	r2, r4
    d338:	4641      	mov	r1, r8
    d33a:	e9cd 7600 	strd	r7, r6, [sp]
    d33e:	4819      	ldr	r0, [pc, #100]	; (d3a4 <z_impl_k_mutex_lock+0xf0>)
    d340:	f000 fb60 	bl	da04 <z_pend_curr>
	if (got_mutex == 0) {
    d344:	2800      	cmp	r0, #0
    d346:	d0e1      	beq.n	d30c <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    d348:	f04f 0320 	mov.w	r3, #32
    d34c:	f3ef 8611 	mrs	r6, BASEPRI
    d350:	f383 8812 	msr	BASEPRI_MAX, r3
    d354:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    d358:	68a0      	ldr	r0, [r4, #8]
    d35a:	b1d0      	cbz	r0, d392 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    d35c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    d35e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d360:	429c      	cmp	r4, r3
    d362:	d00a      	beq.n	d37a <z_impl_k_mutex_lock+0xc6>
    d364:	b14b      	cbz	r3, d37a <z_impl_k_mutex_lock+0xc6>
    d366:	f993 300e 	ldrsb.w	r3, [r3, #14]
    d36a:	4299      	cmp	r1, r3
    d36c:	bfa8      	it	ge
    d36e:	4619      	movge	r1, r3
    d370:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    d374:	4299      	cmp	r1, r3
    d376:	bfb8      	it	lt
    d378:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    d37a:	f002 fec4 	bl	10106 <adjust_owner_prio.isra.0>
    d37e:	b140      	cbz	r0, d392 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    d380:	4631      	mov	r1, r6
    d382:	4808      	ldr	r0, [pc, #32]	; (d3a4 <z_impl_k_mutex_lock+0xf0>)
    d384:	f000 fba2 	bl	dacc <z_reschedule>
	return -EAGAIN;
    d388:	f06f 000a 	mvn.w	r0, #10
    d38c:	e7af      	b.n	d2ee <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    d38e:	2500      	movs	r5, #0
    d390:	e7d1      	b.n	d336 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    d392:	2d00      	cmp	r5, #0
    d394:	d1f4      	bne.n	d380 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    d396:	f386 8811 	msr	BASEPRI, r6
    d39a:	f3bf 8f6f 	isb	sy
    d39e:	e7f3      	b.n	d388 <z_impl_k_mutex_lock+0xd4>
    d3a0:	2000ce78 	.word	0x2000ce78
    d3a4:	2000d2d7 	.word	0x2000d2d7

0000d3a8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    d3a8:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    d3aa:	6883      	ldr	r3, [r0, #8]
{
    d3ac:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    d3ae:	b36b      	cbz	r3, d40c <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    d3b0:	4a19      	ldr	r2, [pc, #100]	; (d418 <z_impl_k_mutex_unlock+0x70>)
    d3b2:	6892      	ldr	r2, [r2, #8]
    d3b4:	4293      	cmp	r3, r2
    d3b6:	d12c      	bne.n	d412 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    d3b8:	68c3      	ldr	r3, [r0, #12]
    d3ba:	2b01      	cmp	r3, #1
    d3bc:	d903      	bls.n	d3c6 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    d3be:	3b01      	subs	r3, #1
    d3c0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    d3c2:	2000      	movs	r0, #0
}
    d3c4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    d3c6:	f04f 0320 	mov.w	r3, #32
    d3ca:	f3ef 8511 	mrs	r5, BASEPRI
    d3ce:	f383 8812 	msr	BASEPRI_MAX, r3
    d3d2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    d3d6:	6901      	ldr	r1, [r0, #16]
    d3d8:	6880      	ldr	r0, [r0, #8]
    d3da:	f002 fe94 	bl	10106 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    d3de:	4620      	mov	r0, r4
    d3e0:	f002 ffc5 	bl	1036e <z_unpend_first_thread>
	mutex->owner = new_owner;
    d3e4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    d3e6:	b158      	cbz	r0, d400 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    d3e8:	f990 200e 	ldrsb.w	r2, [r0, #14]
    d3ec:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    d3ee:	2200      	movs	r2, #0
    d3f0:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    d3f2:	f002 ff86 	bl	10302 <z_ready_thread>
		z_reschedule(&lock, key);
    d3f6:	4629      	mov	r1, r5
    d3f8:	4808      	ldr	r0, [pc, #32]	; (d41c <z_impl_k_mutex_unlock+0x74>)
    d3fa:	f000 fb67 	bl	dacc <z_reschedule>
    d3fe:	e7e0      	b.n	d3c2 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    d400:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    d402:	f385 8811 	msr	BASEPRI, r5
    d406:	f3bf 8f6f 	isb	sy
    d40a:	e7da      	b.n	d3c2 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    d40c:	f06f 0015 	mvn.w	r0, #21
    d410:	e7d8      	b.n	d3c4 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    d412:	f04f 30ff 	mov.w	r0, #4294967295
    d416:	e7d5      	b.n	d3c4 <z_impl_k_mutex_unlock+0x1c>
    d418:	2000ce78 	.word	0x2000ce78
    d41c:	2000d2d7 	.word	0x2000d2d7

0000d420 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    d420:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d422:	4611      	mov	r1, r2
	__asm__ volatile(
    d424:	f04f 0220 	mov.w	r2, #32
    d428:	f3ef 8511 	mrs	r5, BASEPRI
    d42c:	f382 8812 	msr	BASEPRI_MAX, r2
    d430:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    d434:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    d436:	b19c      	cbz	r4, d460 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    d438:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    d43a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    d43c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    d440:	4294      	cmp	r4, r2
	list->head = node;
    d442:	6003      	str	r3, [r0, #0]
	list->tail = node;
    d444:	bf08      	it	eq
    d446:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    d448:	2101      	movs	r1, #1
    d44a:	4620      	mov	r0, r4
    d44c:	f002 fec5 	bl	101da <z_queue_node_peek>
    d450:	4604      	mov	r4, r0
	__asm__ volatile(
    d452:	f385 8811 	msr	BASEPRI, r5
    d456:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    d45a:	4620      	mov	r0, r4
    d45c:	b003      	add	sp, #12
    d45e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    d460:	ea51 0203 	orrs.w	r2, r1, r3
    d464:	d0f5      	beq.n	d452 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    d466:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    d46a:	e9cd 1300 	strd	r1, r3, [sp]
    d46e:	4610      	mov	r0, r2
    d470:	4629      	mov	r1, r5
    d472:	f000 fac7 	bl	da04 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    d476:	2800      	cmp	r0, #0
    d478:	d1ef      	bne.n	d45a <z_impl_k_queue_get+0x3a>
    d47a:	4b02      	ldr	r3, [pc, #8]	; (d484 <z_impl_k_queue_get+0x64>)
    d47c:	689b      	ldr	r3, [r3, #8]
    d47e:	695c      	ldr	r4, [r3, #20]
    d480:	e7eb      	b.n	d45a <z_impl_k_queue_get+0x3a>
    d482:	bf00      	nop
    d484:	2000ce78 	.word	0x2000ce78

0000d488 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    d488:	b538      	push	{r3, r4, r5, lr}
    d48a:	4604      	mov	r4, r0
	__asm__ volatile(
    d48c:	f04f 0320 	mov.w	r3, #32
    d490:	f3ef 8511 	mrs	r5, BASEPRI
    d494:	f383 8812 	msr	BASEPRI_MAX, r3
    d498:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    d49c:	f002 ff67 	bl	1036e <z_unpend_first_thread>

	if (thread != NULL) {
    d4a0:	b148      	cbz	r0, d4b6 <z_impl_k_sem_give+0x2e>
    d4a2:	2200      	movs	r2, #0
    d4a4:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    d4a6:	f002 ff2c 	bl	10302 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    d4aa:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    d4ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    d4b0:	4804      	ldr	r0, [pc, #16]	; (d4c4 <z_impl_k_sem_give+0x3c>)
    d4b2:	f000 bb0b 	b.w	dacc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    d4b6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    d4ba:	429a      	cmp	r2, r3
    d4bc:	bf18      	it	ne
    d4be:	3301      	addne	r3, #1
    d4c0:	60a3      	str	r3, [r4, #8]
}
    d4c2:	e7f2      	b.n	d4aa <z_impl_k_sem_give+0x22>
    d4c4:	2000d2d7 	.word	0x2000d2d7

0000d4c8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    d4c8:	b513      	push	{r0, r1, r4, lr}
    d4ca:	f04f 0420 	mov.w	r4, #32
    d4ce:	f3ef 8111 	mrs	r1, BASEPRI
    d4d2:	f384 8812 	msr	BASEPRI_MAX, r4
    d4d6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    d4da:	6884      	ldr	r4, [r0, #8]
    d4dc:	b144      	cbz	r4, d4f0 <z_impl_k_sem_take+0x28>
		sem->count--;
    d4de:	3c01      	subs	r4, #1
    d4e0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    d4e2:	f381 8811 	msr	BASEPRI, r1
    d4e6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    d4ea:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    d4ec:	b002      	add	sp, #8
    d4ee:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    d4f0:	ea52 0403 	orrs.w	r4, r2, r3
    d4f4:	d106      	bne.n	d504 <z_impl_k_sem_take+0x3c>
    d4f6:	f381 8811 	msr	BASEPRI, r1
    d4fa:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    d4fe:	f06f 000f 	mvn.w	r0, #15
    d502:	e7f3      	b.n	d4ec <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    d504:	e9cd 2300 	strd	r2, r3, [sp]
    d508:	4602      	mov	r2, r0
    d50a:	4802      	ldr	r0, [pc, #8]	; (d514 <z_impl_k_sem_take+0x4c>)
    d50c:	f000 fa7a 	bl	da04 <z_pend_curr>
	return ret;
    d510:	e7ec      	b.n	d4ec <z_impl_k_sem_take+0x24>
    d512:	bf00      	nop
    d514:	2000d2d7 	.word	0x2000d2d7

0000d518 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    d518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d51c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    d51e:	f04f 38ff 	mov.w	r8, #4294967295
    d522:	f04f 39ff 	mov.w	r9, #4294967295
	return list->head;
    d526:	4e48      	ldr	r6, [pc, #288]	; (d648 <work_queue_main+0x130>)
{
    d528:	b085      	sub	sp, #20
	__asm__ volatile(
    d52a:	f04f 0320 	mov.w	r3, #32
    d52e:	f3ef 8711 	mrs	r7, BASEPRI
    d532:	f383 8812 	msr	BASEPRI_MAX, r3
    d536:	f3bf 8f6f 	isb	sy
    d53a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
    d53e:	b98d      	cbnz	r5, d564 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    d540:	2102      	movs	r1, #2
    d542:	f104 0098 	add.w	r0, r4, #152	; 0x98
    d546:	f002 fe6b 	bl	10220 <flag_test_and_clear>
    d54a:	2800      	cmp	r0, #0
    d54c:	d143      	bne.n	d5d6 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    d54e:	2300      	movs	r3, #0
    d550:	4639      	mov	r1, r7
    d552:	e9cd 8900 	strd	r8, r9, [sp]
    d556:	9302      	str	r3, [sp, #8]
    d558:	f104 0288 	add.w	r2, r4, #136	; 0x88
    d55c:	483b      	ldr	r0, [pc, #236]	; (d64c <work_queue_main+0x134>)
    d55e:	f000 fc51 	bl	de04 <z_sched_wait>
			continue;
    d562:	e7e2      	b.n	d52a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    d564:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    d568:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    d56a:	4295      	cmp	r5, r2
	list->head = node;
    d56c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	list->tail = node;
    d570:	bf08      	it	eq
    d572:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    d576:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    d57a:	f043 0302 	orr.w	r3, r3, #2
    d57e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    d582:	68eb      	ldr	r3, [r5, #12]
    d584:	f023 0304 	bic.w	r3, r3, #4
    d588:	f043 0301 	orr.w	r3, r3, #1
    d58c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    d58e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    d590:	f387 8811 	msr	BASEPRI, r7
    d594:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    d598:	4628      	mov	r0, r5
    d59a:	4798      	blx	r3
	__asm__ volatile(
    d59c:	f04f 0320 	mov.w	r3, #32
    d5a0:	f3ef 8b11 	mrs	fp, BASEPRI
    d5a4:	f383 8812 	msr	BASEPRI_MAX, r3
    d5a8:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    d5ac:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    d5ae:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    d5b0:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    d5b4:	d419      	bmi.n	d5ea <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    d5b6:	60ea      	str	r2, [r5, #12]
    d5b8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    d5bc:	f023 0302 	bic.w	r3, r3, #2
    d5c0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    d5c4:	f38b 8811 	msr	BASEPRI, fp
    d5c8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    d5cc:	05db      	lsls	r3, r3, #23
    d5ce:	d4ac      	bmi.n	d52a <work_queue_main+0x12>
	z_impl_k_yield();
    d5d0:	f000 fb16 	bl	dc00 <z_impl_k_yield>
}
    d5d4:	e7a9      	b.n	d52a <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    d5d6:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    d5da:	2200      	movs	r2, #0
    d5dc:	2101      	movs	r1, #1
    d5de:	4628      	mov	r0, r5
    d5e0:	f002 ff1f 	bl	10422 <z_sched_wake>
    d5e4:	2800      	cmp	r0, #0
    d5e6:	d1f8      	bne.n	d5da <work_queue_main+0xc2>
    d5e8:	e7b1      	b.n	d54e <work_queue_main+0x36>
	return list->head;
    d5ea:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    d5ec:	f023 0303 	bic.w	r3, r3, #3
    d5f0:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    d5f2:	2800      	cmp	r0, #0
    d5f4:	d0e0      	beq.n	d5b8 <work_queue_main+0xa0>
	return node->next;
    d5f6:	2700      	movs	r7, #0
	parent->next = child;
    d5f8:	463b      	mov	r3, r7
	return node->next;
    d5fa:	f8d0 a000 	ldr.w	sl, [r0]
    d5fe:	2800      	cmp	r0, #0
    d600:	d0da      	beq.n	d5b8 <work_queue_main+0xa0>
		if (wc->work == work) {
    d602:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    d604:	4601      	mov	r1, r0
		if (wc->work == work) {
    d606:	4295      	cmp	r5, r2
    d608:	d10c      	bne.n	d624 <work_queue_main+0x10c>
    d60a:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    d60c:	b99f      	cbnz	r7, d636 <work_queue_main+0x11e>
    d60e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    d610:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    d612:	4282      	cmp	r2, r0
    d614:	d100      	bne.n	d618 <work_queue_main+0x100>
	list->tail = node;
    d616:	6071      	str	r1, [r6, #4]
	parent->next = child;
    d618:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    d61c:	f7ff ff34 	bl	d488 <z_impl_k_sem_give>
}
    d620:	4639      	mov	r1, r7
    d622:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    d624:	f1ba 0f00 	cmp.w	sl, #0
    d628:	d00b      	beq.n	d642 <work_queue_main+0x12a>
	return node->next;
    d62a:	f8da 2000 	ldr.w	r2, [sl]
    d62e:	4650      	mov	r0, sl
    d630:	460f      	mov	r7, r1
    d632:	4692      	mov	sl, r2
    d634:	e7e3      	b.n	d5fe <work_queue_main+0xe6>
	parent->next = child;
    d636:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    d638:	6872      	ldr	r2, [r6, #4]
    d63a:	4282      	cmp	r2, r0
	list->tail = node;
    d63c:	bf08      	it	eq
    d63e:	6077      	streq	r7, [r6, #4]
}
    d640:	e7ea      	b.n	d618 <work_queue_main+0x100>
    d642:	4652      	mov	r2, sl
    d644:	e7f3      	b.n	d62e <work_queue_main+0x116>
    d646:	bf00      	nop
    d648:	2000ce9c 	.word	0x2000ce9c
    d64c:	2000d2d7 	.word	0x2000d2d7

0000d650 <submit_to_queue_locked>:
{
    d650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    d652:	68c3      	ldr	r3, [r0, #12]
{
    d654:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    d656:	079a      	lsls	r2, r3, #30
{
    d658:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    d65a:	f3c3 0640 	ubfx	r6, r3, #1, #1
    d65e:	d42c      	bmi.n	d6ba <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    d660:	075b      	lsls	r3, r3, #29
    d662:	d41a      	bmi.n	d69a <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    d664:	680b      	ldr	r3, [r1, #0]
    d666:	b90b      	cbnz	r3, d66c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    d668:	6883      	ldr	r3, [r0, #8]
    d66a:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    d66c:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    d66e:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    d670:	bf42      	ittt	mi
    d672:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
    d674:	2602      	movmi	r6, #2
			*queuep = work->queue;
    d676:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    d678:	683d      	ldr	r5, [r7, #0]
		ret = 1;
    d67a:	bf58      	it	pl
    d67c:	2601      	movpl	r6, #1
	if (queue == NULL) {
    d67e:	2d00      	cmp	r5, #0
    d680:	d03a      	beq.n	d6f8 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    d682:	4b1f      	ldr	r3, [pc, #124]	; (d700 <submit_to_queue_locked+0xb0>)
    d684:	689b      	ldr	r3, [r3, #8]
    d686:	42ab      	cmp	r3, r5
    d688:	d00a      	beq.n	d6a0 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    d68a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    d68e:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    d690:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    d694:	d414      	bmi.n	d6c0 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    d696:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    d69a:	2300      	movs	r3, #0
    d69c:	603b      	str	r3, [r7, #0]
	return ret;
    d69e:	e025      	b.n	d6ec <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    d6a0:	f002 fd1f 	bl	100e2 <k_is_in_isr>
    d6a4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    d6a8:	2800      	cmp	r0, #0
    d6aa:	d1f0      	bne.n	d68e <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    d6ac:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    d6ae:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    d6b2:	d5f0      	bpl.n	d696 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    d6b4:	b152      	cbz	r2, d6cc <submit_to_queue_locked+0x7c>
    d6b6:	075b      	lsls	r3, r3, #29
    d6b8:	d408      	bmi.n	d6cc <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    d6ba:	f06f 060f 	mvn.w	r6, #15
    d6be:	e7ec      	b.n	d69a <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    d6c0:	2a00      	cmp	r2, #0
    d6c2:	d1fa      	bne.n	d6ba <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    d6c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    d6c8:	2b00      	cmp	r3, #0
    d6ca:	d1f6      	bne.n	d6ba <submit_to_queue_locked+0x6a>
	parent->next = child;
    d6cc:	2300      	movs	r3, #0
    d6ce:	6023      	str	r3, [r4, #0]
	return list->tail;
    d6d0:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    d6d4:	b963      	cbnz	r3, d6f0 <submit_to_queue_locked+0xa0>
	list->head = node;
    d6d6:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    d6da:	4628      	mov	r0, r5
    d6dc:	f002 fdab 	bl	10236 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    d6e0:	68e3      	ldr	r3, [r4, #12]
    d6e2:	f043 0304 	orr.w	r3, r3, #4
    d6e6:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    d6e8:	683b      	ldr	r3, [r7, #0]
    d6ea:	60a3      	str	r3, [r4, #8]
}
    d6ec:	4630      	mov	r0, r6
    d6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    d6f0:	601c      	str	r4, [r3, #0]
	list->tail = node;
    d6f2:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    d6f6:	e7f0      	b.n	d6da <submit_to_queue_locked+0x8a>
		return -EINVAL;
    d6f8:	f06f 0615 	mvn.w	r6, #21
    d6fc:	e7cd      	b.n	d69a <submit_to_queue_locked+0x4a>
    d6fe:	bf00      	nop
    d700:	2000ce78 	.word	0x2000ce78

0000d704 <k_work_submit>:
{
    d704:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    d706:	4801      	ldr	r0, [pc, #4]	; (d70c <k_work_submit+0x8>)
    d708:	f002 bdb0 	b.w	1026c <k_work_submit_to_queue>
    d70c:	2000c850 	.word	0x2000c850

0000d710 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    d710:	b5f0      	push	{r4, r5, r6, r7, lr}
    d712:	4604      	mov	r4, r0
	list->head = NULL;
    d714:	2000      	movs	r0, #0
    d716:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
    d718:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    d71c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    d71e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    d722:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    d726:	f104 0090 	add.w	r0, r4, #144	; 0x90
    d72a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    d72e:	b31d      	cbz	r5, d778 <k_work_queue_start+0x68>
    d730:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    d732:	2800      	cmp	r0, #0
    d734:	f240 1001 	movw	r0, #257	; 0x101
    d738:	bf08      	it	eq
    d73a:	2001      	moveq	r0, #1
	*flagp = flags;
    d73c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    d740:	2000      	movs	r0, #0
    d742:	f04f 36ff 	mov.w	r6, #4294967295
    d746:	f04f 37ff 	mov.w	r7, #4294967295
    d74a:	e9cd 3003 	strd	r3, r0, [sp, #12]
    d74e:	e9cd 0001 	strd	r0, r0, [sp, #4]
    d752:	e9cd 6706 	strd	r6, r7, [sp, #24]
    d756:	4620      	mov	r0, r4
    d758:	4b08      	ldr	r3, [pc, #32]	; (d77c <k_work_queue_start+0x6c>)
    d75a:	9400      	str	r4, [sp, #0]
    d75c:	f7ff fd06 	bl	d16c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    d760:	b125      	cbz	r5, d76c <k_work_queue_start+0x5c>
    d762:	6829      	ldr	r1, [r5, #0]
    d764:	b111      	cbz	r1, d76c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    d766:	4620      	mov	r0, r4
    d768:	f002 fcc1 	bl	100ee <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    d76c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    d76e:	b009      	add	sp, #36	; 0x24
    d770:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    d774:	f002 bcbe 	b.w	100f4 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    d778:	2001      	movs	r0, #1
    d77a:	e7df      	b.n	d73c <k_work_queue_start+0x2c>
    d77c:	0000d519 	.word	0x0000d519

0000d780 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    d780:	89c3      	ldrh	r3, [r0, #14]
    d782:	2b7f      	cmp	r3, #127	; 0x7f
    d784:	d812      	bhi.n	d7ac <sliceable+0x2c>
	int ret = slice_ticks;
    d786:	4b0a      	ldr	r3, [pc, #40]	; (d7b0 <sliceable+0x30>)
    d788:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    d78a:	b163      	cbz	r3, d7a6 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    d78c:	4b09      	ldr	r3, [pc, #36]	; (d7b4 <sliceable+0x34>)
    d78e:	f990 200e 	ldrsb.w	r2, [r0, #14]
    d792:	681b      	ldr	r3, [r3, #0]
    d794:	429a      	cmp	r2, r3
    d796:	db09      	blt.n	d7ac <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    d798:	7b43      	ldrb	r3, [r0, #13]
    d79a:	06db      	lsls	r3, r3, #27
    d79c:	d106      	bne.n	d7ac <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    d79e:	4b06      	ldr	r3, [pc, #24]	; (d7b8 <sliceable+0x38>)
    d7a0:	1ac3      	subs	r3, r0, r3
    d7a2:	bf18      	it	ne
    d7a4:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    d7a6:	f003 0001 	and.w	r0, r3, #1
    d7aa:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    d7ac:	2300      	movs	r3, #0
    d7ae:	e7fa      	b.n	d7a6 <sliceable+0x26>
    d7b0:	2000ceac 	.word	0x2000ceac
    d7b4:	2000cea8 	.word	0x2000cea8
    d7b8:	2000c730 	.word	0x2000c730

0000d7bc <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
    d7bc:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    d7be:	4b04      	ldr	r3, [pc, #16]	; (d7d0 <slice_timeout+0x14>)
    d7c0:	1ac0      	subs	r0, r0, r3
    d7c2:	4b04      	ldr	r3, [pc, #16]	; (d7d4 <slice_timeout+0x18>)
    d7c4:	10c0      	asrs	r0, r0, #3
    d7c6:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
    d7c8:	4b03      	ldr	r3, [pc, #12]	; (d7d8 <slice_timeout+0x1c>)
    d7ca:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    d7cc:	4770      	bx	lr
    d7ce:	bf00      	nop
    d7d0:	2000c830 	.word	0x2000c830
    d7d4:	aaaaaaab 	.word	0xaaaaaaab
    d7d8:	2000d2d7 	.word	0x2000d2d7

0000d7dc <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    d7dc:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    d7de:	4b0e      	ldr	r3, [pc, #56]	; (d818 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    d7e0:	4c0e      	ldr	r4, [pc, #56]	; (d81c <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    d7e2:	7c1e      	ldrb	r6, [r3, #16]
{
    d7e4:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    d7e6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    d7ea:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    d7ee:	4620      	mov	r0, r4
    d7f0:	f002 fe3a 	bl	10468 <z_abort_timeout>
	slice_expired[cpu] = false;
    d7f4:	2200      	movs	r2, #0
    d7f6:	4b0a      	ldr	r3, [pc, #40]	; (d820 <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
    d7f8:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    d7fa:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    d7fc:	f7ff ffc0 	bl	d780 <sliceable>
    d800:	b148      	cbz	r0, d816 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    d802:	4b08      	ldr	r3, [pc, #32]	; (d824 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    d804:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
    d806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
    d80a:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    d80c:	4906      	ldr	r1, [pc, #24]	; (d828 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    d80e:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    d810:	17d3      	asrs	r3, r2, #31
    d812:	f000 bb69 	b.w	dee8 <z_add_timeout>
}
    d816:	bd70      	pop	{r4, r5, r6, pc}
    d818:	2000ce78 	.word	0x2000ce78
    d81c:	2000c830 	.word	0x2000c830
    d820:	2000d2d7 	.word	0x2000d2d7
    d824:	2000ceac 	.word	0x2000ceac
    d828:	0000d7bd 	.word	0x0000d7bd

0000d82c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    d82c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    d82e:	4d0d      	ldr	r5, [pc, #52]	; (d864 <update_cache+0x38>)
    d830:	462b      	mov	r3, r5
    d832:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d836:	429c      	cmp	r4, r3
    d838:	d000      	beq.n	d83c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    d83a:	b904      	cbnz	r4, d83e <update_cache+0x12>
    d83c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    d83e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    d840:	b938      	cbnz	r0, d852 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    d842:	7b5a      	ldrb	r2, [r3, #13]
    d844:	06d2      	lsls	r2, r2, #27
    d846:	d104      	bne.n	d852 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    d848:	69a2      	ldr	r2, [r4, #24]
    d84a:	b912      	cbnz	r2, d852 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    d84c:	89da      	ldrh	r2, [r3, #14]
    d84e:	2a7f      	cmp	r2, #127	; 0x7f
    d850:	d805      	bhi.n	d85e <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    d852:	429c      	cmp	r4, r3
    d854:	d002      	beq.n	d85c <update_cache+0x30>
			z_reset_time_slice(thread);
    d856:	4620      	mov	r0, r4
    d858:	f7ff ffc0 	bl	d7dc <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    d85c:	4623      	mov	r3, r4
    d85e:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    d860:	bd38      	pop	{r3, r4, r5, pc}
    d862:	bf00      	nop
    d864:	2000ce78 	.word	0x2000ce78

0000d868 <move_thread_to_end_of_prio_q>:
{
    d868:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    d86a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    d86e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    d870:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    d872:	7b43      	ldrb	r3, [r0, #13]
    d874:	da04      	bge.n	d880 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d87a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    d87c:	f002 fd07 	bl	1028e <sys_dlist_remove>
	return list->head == list;
    d880:	4a15      	ldr	r2, [pc, #84]	; (d8d8 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
    d882:	7b4b      	ldrb	r3, [r1, #13]
    d884:	4610      	mov	r0, r2
    d886:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d88a:	734b      	strb	r3, [r1, #13]
    d88c:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    d890:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d892:	4283      	cmp	r3, r0
    d894:	bf08      	it	eq
    d896:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d898:	b923      	cbnz	r3, d8a4 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    d89a:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    d89e:	6021      	str	r1, [r4, #0]
	list->tail = node;
    d8a0:	6211      	str	r1, [r2, #32]
}
    d8a2:	e00c      	b.n	d8be <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    d8a4:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    d8a8:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    d8ac:	42b5      	cmp	r5, r6
    d8ae:	d00e      	beq.n	d8ce <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    d8b0:	42ae      	cmp	r6, r5
    d8b2:	dd0c      	ble.n	d8ce <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    d8b4:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    d8b6:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    d8ba:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    d8bc:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    d8be:	6890      	ldr	r0, [r2, #8]
}
    d8c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    d8c4:	1a43      	subs	r3, r0, r1
    d8c6:	4258      	negs	r0, r3
    d8c8:	4158      	adcs	r0, r3
    d8ca:	f7ff bfaf 	b.w	d82c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    d8ce:	429c      	cmp	r4, r3
    d8d0:	d0e3      	beq.n	d89a <move_thread_to_end_of_prio_q+0x32>
    d8d2:	681b      	ldr	r3, [r3, #0]
    d8d4:	e7e0      	b.n	d898 <move_thread_to_end_of_prio_q+0x30>
    d8d6:	bf00      	nop
    d8d8:	2000ce78 	.word	0x2000ce78

0000d8dc <ready_thread>:
{
    d8dc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    d8de:	f990 300d 	ldrsb.w	r3, [r0, #13]
    d8e2:	7b42      	ldrb	r2, [r0, #13]
    d8e4:	2b00      	cmp	r3, #0
    d8e6:	db29      	blt.n	d93c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    d8e8:	06d3      	lsls	r3, r2, #27
    d8ea:	d127      	bne.n	d93c <ready_thread+0x60>
	return node->next != NULL;
    d8ec:	6983      	ldr	r3, [r0, #24]
    d8ee:	bb2b      	cbnz	r3, d93c <ready_thread+0x60>
	return list->head == list;
    d8f0:	4913      	ldr	r1, [pc, #76]	; (d940 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    d8f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    d8f6:	7342      	strb	r2, [r0, #13]
    d8f8:	460a      	mov	r2, r1
    d8fa:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d8fe:	4294      	cmp	r4, r2
    d900:	bf18      	it	ne
    d902:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    d904:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d906:	b923      	cbnz	r3, d912 <ready_thread+0x36>
	node->prev = tail;
    d908:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    d90c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    d90e:	6208      	str	r0, [r1, #32]
}
    d910:	e00c      	b.n	d92c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    d912:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    d916:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    d91a:	42b5      	cmp	r5, r6
    d91c:	d00a      	beq.n	d934 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    d91e:	42ae      	cmp	r6, r5
    d920:	dd08      	ble.n	d934 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    d922:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    d924:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    d928:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    d92a:	6058      	str	r0, [r3, #4]
		update_cache(0);
    d92c:	2000      	movs	r0, #0
}
    d92e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    d930:	f7ff bf7c 	b.w	d82c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    d934:	42a3      	cmp	r3, r4
    d936:	d0e7      	beq.n	d908 <ready_thread+0x2c>
    d938:	681b      	ldr	r3, [r3, #0]
    d93a:	e7e4      	b.n	d906 <ready_thread+0x2a>
}
    d93c:	bc70      	pop	{r4, r5, r6}
    d93e:	4770      	bx	lr
    d940:	2000ce78 	.word	0x2000ce78

0000d944 <unready_thread>:
{
    d944:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    d946:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    d94a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    d94c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    d94e:	7b43      	ldrb	r3, [r0, #13]
    d950:	da04      	bge.n	d95c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d956:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    d958:	f002 fc99 	bl	1028e <sys_dlist_remove>
	update_cache(thread == _current);
    d95c:	4b04      	ldr	r3, [pc, #16]	; (d970 <unready_thread+0x2c>)
    d95e:	6898      	ldr	r0, [r3, #8]
    d960:	1a43      	subs	r3, r0, r1
    d962:	4258      	negs	r0, r3
    d964:	4158      	adcs	r0, r3
}
    d966:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    d96a:	f7ff bf5f 	b.w	d82c <update_cache>
    d96e:	bf00      	nop
    d970:	2000ce78 	.word	0x2000ce78

0000d974 <pend_locked>:
{
    d974:	b570      	push	{r4, r5, r6, lr}
    d976:	4615      	mov	r5, r2
    d978:	461c      	mov	r4, r3
    d97a:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    d97c:	f002 fc99 	bl	102b2 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d980:	f1b4 3fff 	cmp.w	r4, #4294967295
    d984:	bf08      	it	eq
    d986:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    d98a:	d008      	beq.n	d99e <pend_locked+0x2a>
    d98c:	462a      	mov	r2, r5
    d98e:	4623      	mov	r3, r4
    d990:	f106 0018 	add.w	r0, r6, #24
    d994:	4902      	ldr	r1, [pc, #8]	; (d9a0 <pend_locked+0x2c>)
}
    d996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d99a:	f000 baa5 	b.w	dee8 <z_add_timeout>
    d99e:	bd70      	pop	{r4, r5, r6, pc}
    d9a0:	00010367 	.word	0x00010367

0000d9a4 <z_time_slice>:
{
    d9a4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    d9a6:	f04f 0320 	mov.w	r3, #32
    d9aa:	f3ef 8511 	mrs	r5, BASEPRI
    d9ae:	f383 8812 	msr	BASEPRI_MAX, r3
    d9b2:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    d9b6:	4b10      	ldr	r3, [pc, #64]	; (d9f8 <z_time_slice+0x54>)
	if (pending_current == curr) {
    d9b8:	4a10      	ldr	r2, [pc, #64]	; (d9fc <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    d9ba:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    d9bc:	6810      	ldr	r0, [r2, #0]
    d9be:	42a0      	cmp	r0, r4
    d9c0:	d106      	bne.n	d9d0 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    d9c2:	f7ff ff0b 	bl	d7dc <z_reset_time_slice>
	__asm__ volatile(
    d9c6:	f385 8811 	msr	BASEPRI, r5
    d9ca:	f3bf 8f6f 	isb	sy
}
    d9ce:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    d9d0:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    d9d2:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    d9d4:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    d9d6:	4a0a      	ldr	r2, [pc, #40]	; (da00 <z_time_slice+0x5c>)
    d9d8:	5cd3      	ldrb	r3, [r2, r3]
    d9da:	2b00      	cmp	r3, #0
    d9dc:	d0f3      	beq.n	d9c6 <z_time_slice+0x22>
    d9de:	4620      	mov	r0, r4
    d9e0:	f7ff fece 	bl	d780 <sliceable>
    d9e4:	2800      	cmp	r0, #0
    d9e6:	d0ee      	beq.n	d9c6 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    d9e8:	7b63      	ldrb	r3, [r4, #13]
    d9ea:	06db      	lsls	r3, r3, #27
    d9ec:	d102      	bne.n	d9f4 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    d9ee:	4620      	mov	r0, r4
    d9f0:	f7ff ff3a 	bl	d868 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    d9f4:	4620      	mov	r0, r4
    d9f6:	e7e4      	b.n	d9c2 <z_time_slice+0x1e>
    d9f8:	2000ce78 	.word	0x2000ce78
    d9fc:	2000cea4 	.word	0x2000cea4
    da00:	2000d2d7 	.word	0x2000d2d7

0000da04 <z_pend_curr>:
{
    da04:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    da06:	480c      	ldr	r0, [pc, #48]	; (da38 <z_pend_curr+0x34>)
    da08:	4d0c      	ldr	r5, [pc, #48]	; (da3c <z_pend_curr+0x38>)
    da0a:	6886      	ldr	r6, [r0, #8]
{
    da0c:	460c      	mov	r4, r1
	pending_current = _current;
    da0e:	602e      	str	r6, [r5, #0]
{
    da10:	4611      	mov	r1, r2
    da12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    da16:	f04f 0620 	mov.w	r6, #32
    da1a:	f3ef 8511 	mrs	r5, BASEPRI
    da1e:	f386 8812 	msr	BASEPRI_MAX, r6
    da22:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    da26:	6880      	ldr	r0, [r0, #8]
    da28:	f7ff ffa4 	bl	d974 <pend_locked>
	ret = arch_swap(key);
    da2c:	4620      	mov	r0, r4
}
    da2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    da32:	f7fb bd39 	b.w	94a8 <arch_swap>
    da36:	bf00      	nop
    da38:	2000ce78 	.word	0x2000ce78
    da3c:	2000cea4 	.word	0x2000cea4

0000da40 <z_set_prio>:
{
    da40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da42:	4604      	mov	r4, r0
    da44:	f04f 0320 	mov.w	r3, #32
    da48:	f3ef 8611 	mrs	r6, BASEPRI
    da4c:	f383 8812 	msr	BASEPRI_MAX, r3
    da50:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    da54:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    da56:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    da58:	06da      	lsls	r2, r3, #27
    da5a:	d119      	bne.n	da90 <z_set_prio+0x50>
	return node->next != NULL;
    da5c:	6985      	ldr	r5, [r0, #24]
    da5e:	b9bd      	cbnz	r5, da90 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    da60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    da64:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    da66:	f002 fc12 	bl	1028e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    da6a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    da6c:	4a16      	ldr	r2, [pc, #88]	; (dac8 <z_set_prio+0x88>)
    da6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    da72:	7343      	strb	r3, [r0, #13]
    da74:	4613      	mov	r3, r2
				thread->base.prio = prio;
    da76:	7381      	strb	r1, [r0, #14]
    da78:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    da7c:	4298      	cmp	r0, r3
    da7e:	bf18      	it	ne
    da80:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    da82:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    da84:	b95d      	cbnz	r5, da9e <z_set_prio+0x5e>
	node->prev = tail;
    da86:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    da8a:	6004      	str	r4, [r0, #0]
	list->tail = node;
    da8c:	6214      	str	r4, [r2, #32]
}
    da8e:	e011      	b.n	dab4 <z_set_prio+0x74>
    da90:	2000      	movs	r0, #0
			thread->base.prio = prio;
    da92:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    da94:	f386 8811 	msr	BASEPRI, r6
    da98:	f3bf 8f6f 	isb	sy
}
    da9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    da9e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    daa2:	42b9      	cmp	r1, r7
    daa4:	d00b      	beq.n	dabe <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    daa6:	428f      	cmp	r7, r1
    daa8:	dd09      	ble.n	dabe <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    daaa:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    daac:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    dab0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    dab2:	606c      	str	r4, [r5, #4]
			update_cache(1);
    dab4:	2001      	movs	r0, #1
    dab6:	f7ff feb9 	bl	d82c <update_cache>
    daba:	2001      	movs	r0, #1
    dabc:	e7ea      	b.n	da94 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    dabe:	42a8      	cmp	r0, r5
    dac0:	d0e1      	beq.n	da86 <z_set_prio+0x46>
    dac2:	682d      	ldr	r5, [r5, #0]
    dac4:	e7de      	b.n	da84 <z_set_prio+0x44>
    dac6:	bf00      	nop
    dac8:	2000ce78 	.word	0x2000ce78

0000dacc <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    dacc:	b949      	cbnz	r1, dae2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    dace:	f3ef 8005 	mrs	r0, IPSR
    dad2:	b930      	cbnz	r0, dae2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    dad4:	4b05      	ldr	r3, [pc, #20]	; (daec <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    dad6:	699a      	ldr	r2, [r3, #24]
    dad8:	689b      	ldr	r3, [r3, #8]
    dada:	429a      	cmp	r2, r3
    dadc:	d001      	beq.n	dae2 <z_reschedule+0x16>
    dade:	f7fb bce3 	b.w	94a8 <arch_swap>
    dae2:	f381 8811 	msr	BASEPRI, r1
    dae6:	f3bf 8f6f 	isb	sy
}
    daea:	4770      	bx	lr
    daec:	2000ce78 	.word	0x2000ce78

0000daf0 <z_sched_start>:
{
    daf0:	b510      	push	{r4, lr}
	__asm__ volatile(
    daf2:	f04f 0220 	mov.w	r2, #32
    daf6:	f3ef 8411 	mrs	r4, BASEPRI
    dafa:	f382 8812 	msr	BASEPRI_MAX, r2
    dafe:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    db02:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    db04:	0751      	lsls	r1, r2, #29
    db06:	d404      	bmi.n	db12 <z_sched_start+0x22>
	__asm__ volatile(
    db08:	f384 8811 	msr	BASEPRI, r4
    db0c:	f3bf 8f6f 	isb	sy
}
    db10:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    db12:	f022 0204 	bic.w	r2, r2, #4
    db16:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    db18:	f7ff fee0 	bl	d8dc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    db1c:	4621      	mov	r1, r4
}
    db1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    db22:	4801      	ldr	r0, [pc, #4]	; (db28 <z_sched_start+0x38>)
    db24:	f7ff bfd2 	b.w	dacc <z_reschedule>
    db28:	2000d2d8 	.word	0x2000d2d8

0000db2c <z_impl_k_thread_suspend>:
{
    db2c:	b570      	push	{r4, r5, r6, lr}
    db2e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    db30:	3018      	adds	r0, #24
    db32:	f002 fc99 	bl	10468 <z_abort_timeout>
	__asm__ volatile(
    db36:	f04f 0320 	mov.w	r3, #32
    db3a:	f3ef 8611 	mrs	r6, BASEPRI
    db3e:	f383 8812 	msr	BASEPRI_MAX, r3
    db42:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    db46:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    db4a:	7b63      	ldrb	r3, [r4, #13]
    db4c:	2a00      	cmp	r2, #0
    db4e:	da05      	bge.n	db5c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    db50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    db54:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    db56:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    db58:	f002 fb99 	bl	1028e <sys_dlist_remove>
		update_cache(thread == _current);
    db5c:	4d0b      	ldr	r5, [pc, #44]	; (db8c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    db5e:	7b63      	ldrb	r3, [r4, #13]
    db60:	68a8      	ldr	r0, [r5, #8]
    db62:	f043 0310 	orr.w	r3, r3, #16
    db66:	7363      	strb	r3, [r4, #13]
    db68:	1b03      	subs	r3, r0, r4
    db6a:	4258      	negs	r0, r3
    db6c:	4158      	adcs	r0, r3
    db6e:	f7ff fe5d 	bl	d82c <update_cache>
	__asm__ volatile(
    db72:	f386 8811 	msr	BASEPRI, r6
    db76:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    db7a:	68ab      	ldr	r3, [r5, #8]
    db7c:	42a3      	cmp	r3, r4
    db7e:	d103      	bne.n	db88 <z_impl_k_thread_suspend+0x5c>
}
    db80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    db84:	f002 bc33 	b.w	103ee <z_reschedule_unlocked>
}
    db88:	bd70      	pop	{r4, r5, r6, pc}
    db8a:	bf00      	nop
    db8c:	2000ce78 	.word	0x2000ce78

0000db90 <k_sched_lock>:
	__asm__ volatile(
    db90:	f04f 0320 	mov.w	r3, #32
    db94:	f3ef 8111 	mrs	r1, BASEPRI
    db98:	f383 8812 	msr	BASEPRI_MAX, r3
    db9c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    dba0:	4b04      	ldr	r3, [pc, #16]	; (dbb4 <k_sched_lock+0x24>)
    dba2:	689a      	ldr	r2, [r3, #8]
    dba4:	7bd3      	ldrb	r3, [r2, #15]
    dba6:	3b01      	subs	r3, #1
    dba8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    dbaa:	f381 8811 	msr	BASEPRI, r1
    dbae:	f3bf 8f6f 	isb	sy
}
    dbb2:	4770      	bx	lr
    dbb4:	2000ce78 	.word	0x2000ce78

0000dbb8 <k_sched_unlock>:
{
    dbb8:	b510      	push	{r4, lr}
	__asm__ volatile(
    dbba:	f04f 0320 	mov.w	r3, #32
    dbbe:	f3ef 8411 	mrs	r4, BASEPRI
    dbc2:	f383 8812 	msr	BASEPRI_MAX, r3
    dbc6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    dbca:	4b08      	ldr	r3, [pc, #32]	; (dbec <k_sched_unlock+0x34>)
		update_cache(0);
    dbcc:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    dbce:	689a      	ldr	r2, [r3, #8]
    dbd0:	7bd3      	ldrb	r3, [r2, #15]
    dbd2:	3301      	adds	r3, #1
    dbd4:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    dbd6:	f7ff fe29 	bl	d82c <update_cache>
	__asm__ volatile(
    dbda:	f384 8811 	msr	BASEPRI, r4
    dbde:	f3bf 8f6f 	isb	sy
}
    dbe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    dbe6:	f002 bc02 	b.w	103ee <z_reschedule_unlocked>
    dbea:	bf00      	nop
    dbec:	2000ce78 	.word	0x2000ce78

0000dbf0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    dbf0:	4b02      	ldr	r3, [pc, #8]	; (dbfc <z_sched_init+0xc>)
    dbf2:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    dbf6:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    dbfa:	4770      	bx	lr
    dbfc:	2000ce78 	.word	0x2000ce78

0000dc00 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    dc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    dc02:	f04f 0320 	mov.w	r3, #32
    dc06:	f3ef 8511 	mrs	r5, BASEPRI
    dc0a:	f383 8812 	msr	BASEPRI_MAX, r3
    dc0e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    dc12:	4919      	ldr	r1, [pc, #100]	; (dc78 <z_impl_k_yield+0x78>)
    dc14:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    dc16:	7b43      	ldrb	r3, [r0, #13]
    dc18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    dc1c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    dc1e:	f002 fb36 	bl	1028e <sys_dlist_remove>
	return list->head == list;
    dc22:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    dc24:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    dc26:	7b5a      	ldrb	r2, [r3, #13]
    dc28:	f062 027f 	orn	r2, r2, #127	; 0x7f
    dc2c:	735a      	strb	r2, [r3, #13]
    dc2e:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    dc32:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    dc34:	4282      	cmp	r2, r0
    dc36:	bf08      	it	eq
    dc38:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    dc3a:	b922      	cbnz	r2, dc46 <z_impl_k_yield+0x46>
	node->prev = tail;
    dc3c:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    dc40:	6023      	str	r3, [r4, #0]
	list->tail = node;
    dc42:	620b      	str	r3, [r1, #32]
}
    dc44:	e00c      	b.n	dc60 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    dc46:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    dc4a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    dc4e:	42be      	cmp	r6, r7
    dc50:	d00e      	beq.n	dc70 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    dc52:	42b7      	cmp	r7, r6
    dc54:	dd0c      	ble.n	dc70 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    dc56:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    dc58:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    dc5c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    dc5e:	6053      	str	r3, [r2, #4]
	update_cache(1);
    dc60:	2001      	movs	r0, #1
    dc62:	f7ff fde3 	bl	d82c <update_cache>
    dc66:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    dc68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    dc6c:	f7fb bc1c 	b.w	94a8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    dc70:	42a2      	cmp	r2, r4
    dc72:	d0e3      	beq.n	dc3c <z_impl_k_yield+0x3c>
    dc74:	6812      	ldr	r2, [r2, #0]
    dc76:	e7e0      	b.n	dc3a <z_impl_k_yield+0x3a>
    dc78:	2000ce78 	.word	0x2000ce78

0000dc7c <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    dc7c:	ea50 0301 	orrs.w	r3, r0, r1
{
    dc80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc84:	4605      	mov	r5, r0
    dc86:	460e      	mov	r6, r1
	if (ticks == 0) {
    dc88:	d103      	bne.n	dc92 <z_tick_sleep+0x16>
	z_impl_k_yield();
    dc8a:	f7ff ffb9 	bl	dc00 <z_impl_k_yield>
		k_yield();
		return 0;
    dc8e:	2000      	movs	r0, #0
    dc90:	e02c      	b.n	dcec <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    dc92:	1c83      	adds	r3, r0, #2
    dc94:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    dc98:	db2a      	blt.n	dcf0 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    dc9a:	f002 fc0b 	bl	104b4 <sys_clock_tick_get_32>
    dc9e:	182c      	adds	r4, r5, r0
    dca0:	f04f 0320 	mov.w	r3, #32
    dca4:	f3ef 8811 	mrs	r8, BASEPRI
    dca8:	f383 8812 	msr	BASEPRI_MAX, r3
    dcac:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    dcb0:	4f11      	ldr	r7, [pc, #68]	; (dcf8 <z_tick_sleep+0x7c>)
    dcb2:	4b12      	ldr	r3, [pc, #72]	; (dcfc <z_tick_sleep+0x80>)
    dcb4:	68b8      	ldr	r0, [r7, #8]
    dcb6:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    dcb8:	f7ff fe44 	bl	d944 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    dcbc:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    dcbe:	4910      	ldr	r1, [pc, #64]	; (dd00 <z_tick_sleep+0x84>)
    dcc0:	462a      	mov	r2, r5
    dcc2:	4633      	mov	r3, r6
    dcc4:	3018      	adds	r0, #24
    dcc6:	f000 f90f 	bl	dee8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    dcca:	68ba      	ldr	r2, [r7, #8]
    dccc:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    dcce:	7b53      	ldrb	r3, [r2, #13]
    dcd0:	f043 0310 	orr.w	r3, r3, #16
    dcd4:	7353      	strb	r3, [r2, #13]
    dcd6:	f7fb fbe7 	bl	94a8 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    dcda:	f002 fbeb 	bl	104b4 <sys_clock_tick_get_32>
    dcde:	1a20      	subs	r0, r4, r0
    dce0:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    dce4:	2801      	cmp	r0, #1
    dce6:	f173 0300 	sbcs.w	r3, r3, #0
    dcea:	dbd0      	blt.n	dc8e <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    dcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    dcf0:	f06f 0401 	mvn.w	r4, #1
    dcf4:	1a24      	subs	r4, r4, r0
    dcf6:	e7d3      	b.n	dca0 <z_tick_sleep+0x24>
    dcf8:	2000ce78 	.word	0x2000ce78
    dcfc:	2000cea4 	.word	0x2000cea4
    dd00:	00010367 	.word	0x00010367

0000dd04 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    dd04:	f1b1 3fff 	cmp.w	r1, #4294967295
    dd08:	bf08      	it	eq
    dd0a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    dd0e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    dd10:	d106      	bne.n	dd20 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    dd12:	4b08      	ldr	r3, [pc, #32]	; (dd34 <z_impl_k_sleep+0x30>)
    dd14:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    dd16:	f7ff ff09 	bl	db2c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    dd1a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    dd1e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    dd20:	f7ff ffac 	bl	dc7c <z_tick_sleep>
    dd24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    dd28:	fb80 0303 	smull	r0, r3, r0, r3
    dd2c:	0bc0      	lsrs	r0, r0, #15
    dd2e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    dd32:	e7f4      	b.n	dd1e <z_impl_k_sleep+0x1a>
    dd34:	2000ce78 	.word	0x2000ce78

0000dd38 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    dd38:	4b01      	ldr	r3, [pc, #4]	; (dd40 <z_impl_z_current_get+0x8>)
    dd3a:	6898      	ldr	r0, [r3, #8]
    dd3c:	4770      	bx	lr
    dd3e:	bf00      	nop
    dd40:	2000ce78 	.word	0x2000ce78

0000dd44 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    dd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd48:	4604      	mov	r4, r0
    dd4a:	f04f 0320 	mov.w	r3, #32
    dd4e:	f3ef 8611 	mrs	r6, BASEPRI
    dd52:	f383 8812 	msr	BASEPRI_MAX, r3
    dd56:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    dd5a:	7b03      	ldrb	r3, [r0, #12]
    dd5c:	07d9      	lsls	r1, r3, #31
    dd5e:	d50b      	bpl.n	dd78 <z_thread_abort+0x34>
	__asm__ volatile(
    dd60:	f386 8811 	msr	BASEPRI, r6
    dd64:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    dd68:	4040      	eors	r0, r0
    dd6a:	f380 8811 	msr	BASEPRI, r0
    dd6e:	f04f 0004 	mov.w	r0, #4
    dd72:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    dd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    dd78:	7b43      	ldrb	r3, [r0, #13]
    dd7a:	071a      	lsls	r2, r3, #28
    dd7c:	d504      	bpl.n	dd88 <z_thread_abort+0x44>
    dd7e:	f386 8811 	msr	BASEPRI, r6
    dd82:	f3bf 8f6f 	isb	sy
    dd86:	e7f5      	b.n	dd74 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    dd88:	f023 0220 	bic.w	r2, r3, #32
    dd8c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    dd90:	09d2      	lsrs	r2, r2, #7
    dd92:	d120      	bne.n	ddd6 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    dd94:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    dd96:	68a3      	ldr	r3, [r4, #8]
    dd98:	b113      	cbz	r3, dda0 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    dd9a:	4620      	mov	r0, r4
    dd9c:	f002 fa7f 	bl	1029e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    dda0:	f104 0018 	add.w	r0, r4, #24
    dda4:	f002 fb60 	bl	10468 <z_abort_timeout>
    dda8:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    ddac:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    ddb0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ddb2:	42bd      	cmp	r5, r7
    ddb4:	d000      	beq.n	ddb8 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    ddb6:	b9b5      	cbnz	r5, dde6 <z_thread_abort+0xa2>
		update_cache(1);
    ddb8:	2001      	movs	r0, #1
    ddba:	f7ff fd37 	bl	d82c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    ddbe:	4b10      	ldr	r3, [pc, #64]	; (de00 <z_thread_abort+0xbc>)
    ddc0:	689b      	ldr	r3, [r3, #8]
    ddc2:	42a3      	cmp	r3, r4
    ddc4:	d1db      	bne.n	dd7e <z_thread_abort+0x3a>
    ddc6:	f3ef 8305 	mrs	r3, IPSR
    ddca:	2b00      	cmp	r3, #0
    ddcc:	d1d7      	bne.n	dd7e <z_thread_abort+0x3a>
    ddce:	4630      	mov	r0, r6
    ddd0:	f7fb fb6a 	bl	94a8 <arch_swap>
	return ret;
    ddd4:	e7d3      	b.n	dd7e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ddd6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    ddda:	f043 0308 	orr.w	r3, r3, #8
    ddde:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    dde0:	f002 fa55 	bl	1028e <sys_dlist_remove>
}
    dde4:	e7d7      	b.n	dd96 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    dde6:	4628      	mov	r0, r5
    dde8:	f002 fa59 	bl	1029e <unpend_thread_no_timeout>
    ddec:	f105 0018 	add.w	r0, r5, #24
    ddf0:	f002 fb3a 	bl	10468 <z_abort_timeout>
		ready_thread(thread);
    ddf4:	4628      	mov	r0, r5
    ddf6:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    ddfa:	f7ff fd6f 	bl	d8dc <ready_thread>
    ddfe:	e7d7      	b.n	ddb0 <z_thread_abort+0x6c>
    de00:	2000ce78 	.word	0x2000ce78

0000de04 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    de04:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    de06:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    de0a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    de0c:	e9cd 6700 	strd	r6, r7, [sp]
    de10:	f7ff fdf8 	bl	da04 <z_pend_curr>

	if (data != NULL) {
    de14:	b11c      	cbz	r4, de1e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    de16:	4b03      	ldr	r3, [pc, #12]	; (de24 <z_sched_wait+0x20>)
    de18:	689b      	ldr	r3, [r3, #8]
    de1a:	695b      	ldr	r3, [r3, #20]
    de1c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    de1e:	b002      	add	sp, #8
    de20:	bdd0      	pop	{r4, r6, r7, pc}
    de22:	bf00      	nop
    de24:	2000ce78 	.word	0x2000ce78

0000de28 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    de28:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    de2a:	4806      	ldr	r0, [pc, #24]	; (de44 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    de2c:	4a06      	ldr	r2, [pc, #24]	; (de48 <z_data_copy+0x20>)
    de2e:	4907      	ldr	r1, [pc, #28]	; (de4c <z_data_copy+0x24>)
    de30:	1a12      	subs	r2, r2, r0
    de32:	f002 f8d8 	bl	ffe6 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    de36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    de3a:	4a05      	ldr	r2, [pc, #20]	; (de50 <z_data_copy+0x28>)
    de3c:	4905      	ldr	r1, [pc, #20]	; (de54 <z_data_copy+0x2c>)
    de3e:	4806      	ldr	r0, [pc, #24]	; (de58 <z_data_copy+0x30>)
    de40:	f002 b8d1 	b.w	ffe6 <z_early_memcpy>
    de44:	2000c580 	.word	0x2000c580
    de48:	2000c70c 	.word	0x2000c70c
    de4c:	0001163c 	.word	0x0001163c
    de50:	00000000 	.word	0x00000000
    de54:	00011624 	.word	0x00011624
    de58:	2000c580 	.word	0x2000c580

0000de5c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    de5c:	4b03      	ldr	r3, [pc, #12]	; (de6c <elapsed+0x10>)
    de5e:	681b      	ldr	r3, [r3, #0]
    de60:	b90b      	cbnz	r3, de66 <elapsed+0xa>
    de62:	f7fc bbed 	b.w	a640 <sys_clock_elapsed>
}
    de66:	2000      	movs	r0, #0
    de68:	4770      	bx	lr
    de6a:	bf00      	nop
    de6c:	2000ceb0 	.word	0x2000ceb0

0000de70 <next_timeout>:

static int32_t next_timeout(void)
{
    de70:	b510      	push	{r4, lr}
	return list->head == list;
    de72:	4b0e      	ldr	r3, [pc, #56]	; (deac <next_timeout+0x3c>)
    de74:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    de76:	429c      	cmp	r4, r3
    de78:	d104      	bne.n	de84 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    de7a:	f7ff ffef 	bl	de5c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    de7e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    de82:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    de84:	f7ff ffea 	bl	de5c <elapsed>
	if ((to == NULL) ||
    de88:	2c00      	cmp	r4, #0
    de8a:	d0f8      	beq.n	de7e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    de8c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    de90:	1a1b      	subs	r3, r3, r0
    de92:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    de96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    de9a:	f172 0100 	sbcs.w	r1, r2, #0
    de9e:	daee      	bge.n	de7e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    dea0:	2a00      	cmp	r2, #0
    dea2:	bfac      	ite	ge
    dea4:	4618      	movge	r0, r3
    dea6:	2000      	movlt	r0, #0
	return ret;
    dea8:	e7eb      	b.n	de82 <next_timeout+0x12>
    deaa:	bf00      	nop
    deac:	2000c62c 	.word	0x2000c62c

0000deb0 <remove_timeout>:
{
    deb0:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    deb2:	b170      	cbz	r0, ded2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    deb4:	4b0b      	ldr	r3, [pc, #44]	; (dee4 <remove_timeout+0x34>)
    deb6:	685b      	ldr	r3, [r3, #4]
    deb8:	4298      	cmp	r0, r3
    deba:	d00a      	beq.n	ded2 <remove_timeout+0x22>
    debc:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    debe:	b143      	cbz	r3, ded2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    dec0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    dec4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    dec8:	1912      	adds	r2, r2, r4
    deca:	eb41 0105 	adc.w	r1, r1, r5
    dece:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    ded2:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    ded6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    ded8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    deda:	2300      	movs	r3, #0
	node->prev = NULL;
    dedc:	e9c0 3300 	strd	r3, r3, [r0]
}
    dee0:	bd30      	pop	{r4, r5, pc}
    dee2:	bf00      	nop
    dee4:	2000c62c 	.word	0x2000c62c

0000dee8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    dee8:	f1b3 3fff 	cmp.w	r3, #4294967295
    deec:	bf08      	it	eq
    deee:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    def2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    def4:	4604      	mov	r4, r0
    def6:	461d      	mov	r5, r3
    def8:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    defa:	d05c      	beq.n	dfb6 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    defc:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    defe:	f04f 0320 	mov.w	r3, #32
    df02:	f3ef 8711 	mrs	r7, BASEPRI
    df06:	f383 8812 	msr	BASEPRI_MAX, r3
    df0a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    df0e:	3201      	adds	r2, #1
    df10:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    df14:	da24      	bge.n	df60 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    df16:	f06f 0301 	mvn.w	r3, #1
    df1a:	492c      	ldr	r1, [pc, #176]	; (dfcc <z_add_timeout+0xe4>)
    df1c:	e9d1 2000 	ldrd	r2, r0, [r1]
    df20:	1a9b      	subs	r3, r3, r2
    df22:	f04f 32ff 	mov.w	r2, #4294967295
    df26:	eb62 0000 	sbc.w	r0, r2, r0
    df2a:	1b9e      	subs	r6, r3, r6
    df2c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    df30:	2e01      	cmp	r6, #1
    df32:	f170 0300 	sbcs.w	r3, r0, #0
    df36:	da01      	bge.n	df3c <z_add_timeout+0x54>
    df38:	2601      	movs	r6, #1
    df3a:	2000      	movs	r0, #0
    df3c:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    df40:	4e23      	ldr	r6, [pc, #140]	; (dfd0 <z_add_timeout+0xe8>)
    df42:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    df46:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    df48:	45b4      	cmp	ip, r6
    df4a:	bf08      	it	eq
    df4c:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    df50:	f1bc 0f00 	cmp.w	ip, #0
    df54:	d10d      	bne.n	df72 <z_add_timeout+0x8a>
	node->prev = tail;
    df56:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    df5a:	602c      	str	r4, [r5, #0]
	list->tail = node;
    df5c:	6074      	str	r4, [r6, #4]
}
    df5e:	e01c      	b.n	df9a <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    df60:	f7ff ff7c 	bl	de5c <elapsed>
    df64:	3601      	adds	r6, #1
    df66:	f145 0500 	adc.w	r5, r5, #0
    df6a:	1836      	adds	r6, r6, r0
    df6c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    df70:	e7e4      	b.n	df3c <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    df72:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    df76:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    df7a:	4293      	cmp	r3, r2
    df7c:	eb71 0e00 	sbcs.w	lr, r1, r0
    df80:	da1a      	bge.n	dfb8 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    df82:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    df84:	f8dc 3004 	ldr.w	r3, [ip, #4]
    df88:	eb60 0001 	sbc.w	r0, r0, r1
    df8c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    df90:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    df94:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    df96:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    df9a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    df9c:	42b3      	cmp	r3, r6
    df9e:	d006      	beq.n	dfae <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    dfa0:	429c      	cmp	r4, r3
    dfa2:	d104      	bne.n	dfae <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    dfa4:	f7ff ff64 	bl	de70 <next_timeout>
    dfa8:	2100      	movs	r1, #0
    dfaa:	f7fc fb17 	bl	a5dc <sys_clock_set_timeout>
	__asm__ volatile(
    dfae:	f387 8811 	msr	BASEPRI, r7
    dfb2:	f3bf 8f6f 	isb	sy
		}
	}
}
    dfb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    dfb8:	1a9b      	subs	r3, r3, r2
    dfba:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    dfbe:	45ac      	cmp	ip, r5
    dfc0:	e9c4 3104 	strd	r3, r1, [r4, #16]
    dfc4:	d0c7      	beq.n	df56 <z_add_timeout+0x6e>
    dfc6:	f8dc c000 	ldr.w	ip, [ip]
    dfca:	e7c1      	b.n	df50 <z_add_timeout+0x68>
    dfcc:	2000c848 	.word	0x2000c848
    dfd0:	2000c62c 	.word	0x2000c62c

0000dfd4 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    dfd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    dfd8:	f04f 0320 	mov.w	r3, #32
    dfdc:	f3ef 8c11 	mrs	ip, BASEPRI
    dfe0:	f383 8812 	msr	BASEPRI_MAX, r3
    dfe4:	f3bf 8f6f 	isb	sy
	return list->head == list;
    dfe8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; e09c <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    dfec:	f8df 90b0 	ldr.w	r9, [pc, #176]	; e0a0 <sys_clock_announce+0xcc>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
    dff0:	2400      	movs	r4, #0
	announce_remaining = ticks;
    dff2:	f8c9 0000 	str.w	r0, [r9]
    dff6:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    dffa:	2500      	movs	r5, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    dffc:	4550      	cmp	r0, sl
    dffe:	bf08      	it	eq
    e000:	2000      	moveq	r0, #0
		curr_tick += dt;
    e002:	4f28      	ldr	r7, [pc, #160]	; (e0a4 <sys_clock_announce+0xd0>)
    e004:	46e0      	mov	r8, ip
    e006:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    e00a:	f8d9 3000 	ldr.w	r3, [r9]
    e00e:	b380      	cbz	r0, e072 <sys_clock_announce+0x9e>
    e010:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    e014:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    e018:	42b3      	cmp	r3, r6
    e01a:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    e01e:	da05      	bge.n	e02c <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    e020:	1af6      	subs	r6, r6, r3
    e022:	eb6c 040e 	sbc.w	r4, ip, lr
    e026:	e9c0 6404 	strd	r6, r4, [r0, #16]
    e02a:	e022      	b.n	e072 <sys_clock_announce+0x9e>
		curr_tick += dt;
    e02c:	18b2      	adds	r2, r6, r2
    e02e:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    e032:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    e036:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    e03a:	f7ff ff39 	bl	deb0 <remove_timeout>
	__asm__ volatile(
    e03e:	f388 8811 	msr	BASEPRI, r8
    e042:	f3bf 8f6f 	isb	sy
		t->fn(t);
    e046:	6883      	ldr	r3, [r0, #8]
    e048:	4798      	blx	r3
	__asm__ volatile(
    e04a:	f04f 0320 	mov.w	r3, #32
    e04e:	f3ef 8811 	mrs	r8, BASEPRI
    e052:	f383 8812 	msr	BASEPRI_MAX, r3
    e056:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    e05a:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    e05e:	f8da 0000 	ldr.w	r0, [sl]
    e062:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e064:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    e066:	46c4      	mov	ip, r8
    e068:	f8c9 3000 	str.w	r3, [r9]
    e06c:	d1ca      	bne.n	e004 <sys_clock_announce+0x30>
		curr_tick += dt;
    e06e:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    e072:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    e074:	189a      	adds	r2, r3, r2
    e076:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
    e07a:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    e07e:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    e082:	f7ff fef5 	bl	de70 <next_timeout>
    e086:	4621      	mov	r1, r4
    e088:	f7fc faa8 	bl	a5dc <sys_clock_set_timeout>
	__asm__ volatile(
    e08c:	f388 8811 	msr	BASEPRI, r8
    e090:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    e094:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    e098:	f7ff bc84 	b.w	d9a4 <z_time_slice>
    e09c:	2000c62c 	.word	0x2000c62c
    e0a0:	2000ceb0 	.word	0x2000ceb0
    e0a4:	2000c848 	.word	0x2000c848

0000e0a8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    e0a8:	b510      	push	{r4, lr}
	__asm__ volatile(
    e0aa:	f04f 0320 	mov.w	r3, #32
    e0ae:	f3ef 8411 	mrs	r4, BASEPRI
    e0b2:	f383 8812 	msr	BASEPRI_MAX, r3
    e0b6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    e0ba:	f7ff fecf 	bl	de5c <elapsed>
    e0be:	4603      	mov	r3, r0
    e0c0:	4a05      	ldr	r2, [pc, #20]	; (e0d8 <sys_clock_tick_get+0x30>)
    e0c2:	e9d2 0100 	ldrd	r0, r1, [r2]
    e0c6:	1818      	adds	r0, r3, r0
    e0c8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    e0cc:	f384 8811 	msr	BASEPRI, r4
    e0d0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    e0d4:	bd10      	pop	{r4, pc}
    e0d6:	bf00      	nop
    e0d8:	2000c848 	.word	0x2000c848

0000e0dc <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
    e0dc:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    e0de:	4601      	mov	r1, r0
    e0e0:	4801      	ldr	r0, [pc, #4]	; (e0e8 <k_aligned_alloc+0xc>)
    e0e2:	f002 ba13 	b.w	1050c <z_heap_aligned_alloc>
    e0e6:	bf00      	nop
    e0e8:	2000c6ac 	.word	0x2000c6ac

0000e0ec <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    e0ec:	4b01      	ldr	r3, [pc, #4]	; (e0f4 <k_thread_system_pool_assign+0x8>)
    e0ee:	6703      	str	r3, [r0, #112]	; 0x70
}
    e0f0:	4770      	bx	lr
    e0f2:	bf00      	nop
    e0f4:	2000c6ac 	.word	0x2000c6ac

0000e0f8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    e0f8:	b538      	push	{r3, r4, r5, lr}
    e0fa:	4604      	mov	r4, r0
    e0fc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    e0fe:	f001 fff0 	bl	100e2 <k_is_in_isr>
    e102:	b920      	cbnz	r0, e10e <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    e104:	4b06      	ldr	r3, [pc, #24]	; (e120 <z_thread_aligned_alloc+0x28>)
    e106:	689b      	ldr	r3, [r3, #8]
    e108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
    e10a:	b90b      	cbnz	r3, e110 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
    e10c:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
    e10e:	4b05      	ldr	r3, [pc, #20]	; (e124 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
    e110:	462a      	mov	r2, r5
    e112:	4621      	mov	r1, r4
    e114:	4618      	mov	r0, r3
}
    e116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
    e11a:	f002 b9f7 	b.w	1050c <z_heap_aligned_alloc>
    e11e:	bf00      	nop
    e120:	2000ce78 	.word	0x2000ce78
    e124:	2000c6ac 	.word	0x2000c6ac

0000e128 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    e128:	4801      	ldr	r0, [pc, #4]	; (e130 <boot_banner+0x8>)
    e12a:	f000 bfcd 	b.w	f0c8 <printk>
    e12e:	bf00      	nop
    e130:	00011497 	.word	0x00011497

0000e134 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    e134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
    e136:	2400      	movs	r4, #0
    e138:	4b08      	ldr	r3, [pc, #32]	; (e15c <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    e13a:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
    e13e:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
    e140:	ab02      	add	r3, sp, #8
    e142:	9300      	str	r3, [sp, #0]
    e144:	4906      	ldr	r1, [pc, #24]	; (e160 <k_sys_work_q_init+0x2c>)
    e146:	f04f 33ff 	mov.w	r3, #4294967295
    e14a:	4806      	ldr	r0, [pc, #24]	; (e164 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    e14c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    e150:	f7ff fade 	bl	d710 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    e154:	4620      	mov	r0, r4
    e156:	b004      	add	sp, #16
    e158:	bd10      	pop	{r4, pc}
    e15a:	bf00      	nop
    e15c:	000114c5 	.word	0x000114c5
    e160:	2000e318 	.word	0x2000e318
    e164:	2000c850 	.word	0x2000c850

0000e168 <_free_r>:
    e168:	b538      	push	{r3, r4, r5, lr}
    e16a:	4605      	mov	r5, r0
    e16c:	2900      	cmp	r1, #0
    e16e:	d041      	beq.n	e1f4 <_free_r+0x8c>
    e170:	f851 3c04 	ldr.w	r3, [r1, #-4]
    e174:	1f0c      	subs	r4, r1, #4
    e176:	2b00      	cmp	r3, #0
    e178:	bfb8      	it	lt
    e17a:	18e4      	addlt	r4, r4, r3
    e17c:	f000 fa86 	bl	e68c <__malloc_lock>
    e180:	4a1d      	ldr	r2, [pc, #116]	; (e1f8 <_free_r+0x90>)
    e182:	6813      	ldr	r3, [r2, #0]
    e184:	b933      	cbnz	r3, e194 <_free_r+0x2c>
    e186:	6063      	str	r3, [r4, #4]
    e188:	6014      	str	r4, [r2, #0]
    e18a:	4628      	mov	r0, r5
    e18c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e190:	f000 ba82 	b.w	e698 <__malloc_unlock>
    e194:	42a3      	cmp	r3, r4
    e196:	d908      	bls.n	e1aa <_free_r+0x42>
    e198:	6820      	ldr	r0, [r4, #0]
    e19a:	1821      	adds	r1, r4, r0
    e19c:	428b      	cmp	r3, r1
    e19e:	bf01      	itttt	eq
    e1a0:	6819      	ldreq	r1, [r3, #0]
    e1a2:	685b      	ldreq	r3, [r3, #4]
    e1a4:	1809      	addeq	r1, r1, r0
    e1a6:	6021      	streq	r1, [r4, #0]
    e1a8:	e7ed      	b.n	e186 <_free_r+0x1e>
    e1aa:	461a      	mov	r2, r3
    e1ac:	685b      	ldr	r3, [r3, #4]
    e1ae:	b10b      	cbz	r3, e1b4 <_free_r+0x4c>
    e1b0:	42a3      	cmp	r3, r4
    e1b2:	d9fa      	bls.n	e1aa <_free_r+0x42>
    e1b4:	6811      	ldr	r1, [r2, #0]
    e1b6:	1850      	adds	r0, r2, r1
    e1b8:	42a0      	cmp	r0, r4
    e1ba:	d10b      	bne.n	e1d4 <_free_r+0x6c>
    e1bc:	6820      	ldr	r0, [r4, #0]
    e1be:	4401      	add	r1, r0
    e1c0:	1850      	adds	r0, r2, r1
    e1c2:	6011      	str	r1, [r2, #0]
    e1c4:	4283      	cmp	r3, r0
    e1c6:	d1e0      	bne.n	e18a <_free_r+0x22>
    e1c8:	6818      	ldr	r0, [r3, #0]
    e1ca:	685b      	ldr	r3, [r3, #4]
    e1cc:	4408      	add	r0, r1
    e1ce:	6053      	str	r3, [r2, #4]
    e1d0:	6010      	str	r0, [r2, #0]
    e1d2:	e7da      	b.n	e18a <_free_r+0x22>
    e1d4:	d902      	bls.n	e1dc <_free_r+0x74>
    e1d6:	230c      	movs	r3, #12
    e1d8:	602b      	str	r3, [r5, #0]
    e1da:	e7d6      	b.n	e18a <_free_r+0x22>
    e1dc:	6820      	ldr	r0, [r4, #0]
    e1de:	1821      	adds	r1, r4, r0
    e1e0:	428b      	cmp	r3, r1
    e1e2:	bf02      	ittt	eq
    e1e4:	6819      	ldreq	r1, [r3, #0]
    e1e6:	685b      	ldreq	r3, [r3, #4]
    e1e8:	1809      	addeq	r1, r1, r0
    e1ea:	6063      	str	r3, [r4, #4]
    e1ec:	bf08      	it	eq
    e1ee:	6021      	streq	r1, [r4, #0]
    e1f0:	6054      	str	r4, [r2, #4]
    e1f2:	e7ca      	b.n	e18a <_free_r+0x22>
    e1f4:	bd38      	pop	{r3, r4, r5, pc}
    e1f6:	bf00      	nop
    e1f8:	2000ceb8 	.word	0x2000ceb8

0000e1fc <_malloc_r>:
    e1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e1fe:	1ccd      	adds	r5, r1, #3
    e200:	4606      	mov	r6, r0
    e202:	f025 0503 	bic.w	r5, r5, #3
    e206:	3508      	adds	r5, #8
    e208:	2d0c      	cmp	r5, #12
    e20a:	bf38      	it	cc
    e20c:	250c      	movcc	r5, #12
    e20e:	2d00      	cmp	r5, #0
    e210:	db01      	blt.n	e216 <_malloc_r+0x1a>
    e212:	42a9      	cmp	r1, r5
    e214:	d903      	bls.n	e21e <_malloc_r+0x22>
    e216:	230c      	movs	r3, #12
    e218:	6033      	str	r3, [r6, #0]
    e21a:	2000      	movs	r0, #0
    e21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e21e:	f000 fa35 	bl	e68c <__malloc_lock>
    e222:	4921      	ldr	r1, [pc, #132]	; (e2a8 <_malloc_r+0xac>)
    e224:	680a      	ldr	r2, [r1, #0]
    e226:	4614      	mov	r4, r2
    e228:	b99c      	cbnz	r4, e252 <_malloc_r+0x56>
    e22a:	4f20      	ldr	r7, [pc, #128]	; (e2ac <_malloc_r+0xb0>)
    e22c:	683b      	ldr	r3, [r7, #0]
    e22e:	b923      	cbnz	r3, e23a <_malloc_r+0x3e>
    e230:	4621      	mov	r1, r4
    e232:	4630      	mov	r0, r6
    e234:	f000 f83c 	bl	e2b0 <_sbrk_r>
    e238:	6038      	str	r0, [r7, #0]
    e23a:	4629      	mov	r1, r5
    e23c:	4630      	mov	r0, r6
    e23e:	f000 f837 	bl	e2b0 <_sbrk_r>
    e242:	1c43      	adds	r3, r0, #1
    e244:	d123      	bne.n	e28e <_malloc_r+0x92>
    e246:	230c      	movs	r3, #12
    e248:	4630      	mov	r0, r6
    e24a:	6033      	str	r3, [r6, #0]
    e24c:	f000 fa24 	bl	e698 <__malloc_unlock>
    e250:	e7e3      	b.n	e21a <_malloc_r+0x1e>
    e252:	6823      	ldr	r3, [r4, #0]
    e254:	1b5b      	subs	r3, r3, r5
    e256:	d417      	bmi.n	e288 <_malloc_r+0x8c>
    e258:	2b0b      	cmp	r3, #11
    e25a:	d903      	bls.n	e264 <_malloc_r+0x68>
    e25c:	6023      	str	r3, [r4, #0]
    e25e:	441c      	add	r4, r3
    e260:	6025      	str	r5, [r4, #0]
    e262:	e004      	b.n	e26e <_malloc_r+0x72>
    e264:	6863      	ldr	r3, [r4, #4]
    e266:	42a2      	cmp	r2, r4
    e268:	bf0c      	ite	eq
    e26a:	600b      	streq	r3, [r1, #0]
    e26c:	6053      	strne	r3, [r2, #4]
    e26e:	4630      	mov	r0, r6
    e270:	f000 fa12 	bl	e698 <__malloc_unlock>
    e274:	f104 000b 	add.w	r0, r4, #11
    e278:	1d23      	adds	r3, r4, #4
    e27a:	f020 0007 	bic.w	r0, r0, #7
    e27e:	1ac2      	subs	r2, r0, r3
    e280:	bf1c      	itt	ne
    e282:	1a1b      	subne	r3, r3, r0
    e284:	50a3      	strne	r3, [r4, r2]
    e286:	e7c9      	b.n	e21c <_malloc_r+0x20>
    e288:	4622      	mov	r2, r4
    e28a:	6864      	ldr	r4, [r4, #4]
    e28c:	e7cc      	b.n	e228 <_malloc_r+0x2c>
    e28e:	1cc4      	adds	r4, r0, #3
    e290:	f024 0403 	bic.w	r4, r4, #3
    e294:	42a0      	cmp	r0, r4
    e296:	d0e3      	beq.n	e260 <_malloc_r+0x64>
    e298:	1a21      	subs	r1, r4, r0
    e29a:	4630      	mov	r0, r6
    e29c:	f000 f808 	bl	e2b0 <_sbrk_r>
    e2a0:	3001      	adds	r0, #1
    e2a2:	d1dd      	bne.n	e260 <_malloc_r+0x64>
    e2a4:	e7cf      	b.n	e246 <_malloc_r+0x4a>
    e2a6:	bf00      	nop
    e2a8:	2000ceb8 	.word	0x2000ceb8
    e2ac:	2000ceb4 	.word	0x2000ceb4

0000e2b0 <_sbrk_r>:
    e2b0:	b538      	push	{r3, r4, r5, lr}
    e2b2:	2300      	movs	r3, #0
    e2b4:	4d05      	ldr	r5, [pc, #20]	; (e2cc <_sbrk_r+0x1c>)
    e2b6:	4604      	mov	r4, r0
    e2b8:	4608      	mov	r0, r1
    e2ba:	602b      	str	r3, [r5, #0]
    e2bc:	f7fb fd16 	bl	9cec <_sbrk>
    e2c0:	1c43      	adds	r3, r0, #1
    e2c2:	d102      	bne.n	e2ca <_sbrk_r+0x1a>
    e2c4:	682b      	ldr	r3, [r5, #0]
    e2c6:	b103      	cbz	r3, e2ca <_sbrk_r+0x1a>
    e2c8:	6023      	str	r3, [r4, #0]
    e2ca:	bd38      	pop	{r3, r4, r5, pc}
    e2cc:	2000cebc 	.word	0x2000cebc

0000e2d0 <_strtol_l.constprop.0>:
    e2d0:	2b24      	cmp	r3, #36	; 0x24
    e2d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e2d6:	4686      	mov	lr, r0
    e2d8:	4690      	mov	r8, r2
    e2da:	d801      	bhi.n	e2e0 <_strtol_l.constprop.0+0x10>
    e2dc:	2b01      	cmp	r3, #1
    e2de:	d106      	bne.n	e2ee <_strtol_l.constprop.0+0x1e>
    e2e0:	f001 fa35 	bl	f74e <__errno>
    e2e4:	2316      	movs	r3, #22
    e2e6:	6003      	str	r3, [r0, #0]
    e2e8:	2000      	movs	r0, #0
    e2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e2ee:	460d      	mov	r5, r1
    e2f0:	4835      	ldr	r0, [pc, #212]	; (e3c8 <_strtol_l.constprop.0+0xf8>)
    e2f2:	462a      	mov	r2, r5
    e2f4:	f815 4b01 	ldrb.w	r4, [r5], #1
    e2f8:	5d06      	ldrb	r6, [r0, r4]
    e2fa:	f016 0608 	ands.w	r6, r6, #8
    e2fe:	d1f8      	bne.n	e2f2 <_strtol_l.constprop.0+0x22>
    e300:	2c2d      	cmp	r4, #45	; 0x2d
    e302:	d124      	bne.n	e34e <_strtol_l.constprop.0+0x7e>
    e304:	782c      	ldrb	r4, [r5, #0]
    e306:	2601      	movs	r6, #1
    e308:	1c95      	adds	r5, r2, #2
    e30a:	bb2b      	cbnz	r3, e358 <_strtol_l.constprop.0+0x88>
    e30c:	2c30      	cmp	r4, #48	; 0x30
    e30e:	d030      	beq.n	e372 <_strtol_l.constprop.0+0xa2>
    e310:	230a      	movs	r3, #10
    e312:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
    e316:	2200      	movs	r2, #0
    e318:	f10c 3cff 	add.w	ip, ip, #4294967295
    e31c:	4610      	mov	r0, r2
    e31e:	fbbc f9f3 	udiv	r9, ip, r3
    e322:	fb03 ca19 	mls	sl, r3, r9, ip
    e326:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
    e32a:	2f09      	cmp	r7, #9
    e32c:	d828      	bhi.n	e380 <_strtol_l.constprop.0+0xb0>
    e32e:	463c      	mov	r4, r7
    e330:	42a3      	cmp	r3, r4
    e332:	dd34      	ble.n	e39e <_strtol_l.constprop.0+0xce>
    e334:	1c57      	adds	r7, r2, #1
    e336:	d007      	beq.n	e348 <_strtol_l.constprop.0+0x78>
    e338:	4581      	cmp	r9, r0
    e33a:	d32d      	bcc.n	e398 <_strtol_l.constprop.0+0xc8>
    e33c:	d101      	bne.n	e342 <_strtol_l.constprop.0+0x72>
    e33e:	45a2      	cmp	sl, r4
    e340:	db2a      	blt.n	e398 <_strtol_l.constprop.0+0xc8>
    e342:	fb00 4003 	mla	r0, r0, r3, r4
    e346:	2201      	movs	r2, #1
    e348:	f815 4b01 	ldrb.w	r4, [r5], #1
    e34c:	e7eb      	b.n	e326 <_strtol_l.constprop.0+0x56>
    e34e:	2c2b      	cmp	r4, #43	; 0x2b
    e350:	bf04      	itt	eq
    e352:	782c      	ldrbeq	r4, [r5, #0]
    e354:	1c95      	addeq	r5, r2, #2
    e356:	e7d8      	b.n	e30a <_strtol_l.constprop.0+0x3a>
    e358:	2b10      	cmp	r3, #16
    e35a:	d1da      	bne.n	e312 <_strtol_l.constprop.0+0x42>
    e35c:	2c30      	cmp	r4, #48	; 0x30
    e35e:	d1d8      	bne.n	e312 <_strtol_l.constprop.0+0x42>
    e360:	782a      	ldrb	r2, [r5, #0]
    e362:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    e366:	2a58      	cmp	r2, #88	; 0x58
    e368:	d1d3      	bne.n	e312 <_strtol_l.constprop.0+0x42>
    e36a:	786c      	ldrb	r4, [r5, #1]
    e36c:	2310      	movs	r3, #16
    e36e:	3502      	adds	r5, #2
    e370:	e7cf      	b.n	e312 <_strtol_l.constprop.0+0x42>
    e372:	782b      	ldrb	r3, [r5, #0]
    e374:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    e378:	2b58      	cmp	r3, #88	; 0x58
    e37a:	d0f6      	beq.n	e36a <_strtol_l.constprop.0+0x9a>
    e37c:	2308      	movs	r3, #8
    e37e:	e7c8      	b.n	e312 <_strtol_l.constprop.0+0x42>
    e380:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
    e384:	2f19      	cmp	r7, #25
    e386:	d801      	bhi.n	e38c <_strtol_l.constprop.0+0xbc>
    e388:	3c37      	subs	r4, #55	; 0x37
    e38a:	e7d1      	b.n	e330 <_strtol_l.constprop.0+0x60>
    e38c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
    e390:	2f19      	cmp	r7, #25
    e392:	d804      	bhi.n	e39e <_strtol_l.constprop.0+0xce>
    e394:	3c57      	subs	r4, #87	; 0x57
    e396:	e7cb      	b.n	e330 <_strtol_l.constprop.0+0x60>
    e398:	f04f 32ff 	mov.w	r2, #4294967295
    e39c:	e7d4      	b.n	e348 <_strtol_l.constprop.0+0x78>
    e39e:	1c53      	adds	r3, r2, #1
    e3a0:	d108      	bne.n	e3b4 <_strtol_l.constprop.0+0xe4>
    e3a2:	2322      	movs	r3, #34	; 0x22
    e3a4:	4660      	mov	r0, ip
    e3a6:	f8ce 3000 	str.w	r3, [lr]
    e3aa:	f1b8 0f00 	cmp.w	r8, #0
    e3ae:	d09c      	beq.n	e2ea <_strtol_l.constprop.0+0x1a>
    e3b0:	1e69      	subs	r1, r5, #1
    e3b2:	e006      	b.n	e3c2 <_strtol_l.constprop.0+0xf2>
    e3b4:	b106      	cbz	r6, e3b8 <_strtol_l.constprop.0+0xe8>
    e3b6:	4240      	negs	r0, r0
    e3b8:	f1b8 0f00 	cmp.w	r8, #0
    e3bc:	d095      	beq.n	e2ea <_strtol_l.constprop.0+0x1a>
    e3be:	2a00      	cmp	r2, #0
    e3c0:	d1f6      	bne.n	e3b0 <_strtol_l.constprop.0+0xe0>
    e3c2:	f8c8 1000 	str.w	r1, [r8]
    e3c6:	e790      	b.n	e2ea <_strtol_l.constprop.0+0x1a>
    e3c8:	000114cf 	.word	0x000114cf

0000e3cc <strtol>:
    e3cc:	4613      	mov	r3, r2
    e3ce:	460a      	mov	r2, r1
    e3d0:	4601      	mov	r1, r0
    e3d2:	4802      	ldr	r0, [pc, #8]	; (e3dc <strtol+0x10>)
    e3d4:	6800      	ldr	r0, [r0, #0]
    e3d6:	f7ff bf7b 	b.w	e2d0 <_strtol_l.constprop.0>
    e3da:	bf00      	nop
    e3dc:	2000c634 	.word	0x2000c634

0000e3e0 <_strtoll_l.constprop.0>:
    e3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3e4:	4690      	mov	r8, r2
    e3e6:	b085      	sub	sp, #20
    e3e8:	4689      	mov	r9, r1
    e3ea:	461e      	mov	r6, r3
    e3ec:	460d      	mov	r5, r1
    e3ee:	4a45      	ldr	r2, [pc, #276]	; (e504 <_strtoll_l.constprop.0+0x124>)
    e3f0:	9002      	str	r0, [sp, #8]
    e3f2:	462b      	mov	r3, r5
    e3f4:	f815 4b01 	ldrb.w	r4, [r5], #1
    e3f8:	5d17      	ldrb	r7, [r2, r4]
    e3fa:	f017 0708 	ands.w	r7, r7, #8
    e3fe:	d1f8      	bne.n	e3f2 <_strtoll_l.constprop.0+0x12>
    e400:	2c2d      	cmp	r4, #45	; 0x2d
    e402:	d141      	bne.n	e488 <_strtoll_l.constprop.0+0xa8>
    e404:	782c      	ldrb	r4, [r5, #0]
    e406:	2701      	movs	r7, #1
    e408:	1c9d      	adds	r5, r3, #2
    e40a:	2e00      	cmp	r6, #0
    e40c:	d141      	bne.n	e492 <_strtoll_l.constprop.0+0xb2>
    e40e:	2c30      	cmp	r4, #48	; 0x30
    e410:	d04c      	beq.n	e4ac <_strtoll_l.constprop.0+0xcc>
    e412:	260a      	movs	r6, #10
    e414:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
    e418:	f107 3bff 	add.w	fp, r7, #4294967295
    e41c:	17f3      	asrs	r3, r6, #31
    e41e:	4632      	mov	r2, r6
    e420:	f10a 3aff 	add.w	sl, sl, #4294967295
    e424:	4658      	mov	r0, fp
    e426:	9303      	str	r3, [sp, #12]
    e428:	4651      	mov	r1, sl
    e42a:	f7f9 fe8b 	bl	8144 <__aeabi_uldivmod>
    e42e:	9201      	str	r2, [sp, #4]
    e430:	2200      	movs	r2, #0
    e432:	468e      	mov	lr, r1
    e434:	4684      	mov	ip, r0
    e436:	4611      	mov	r1, r2
    e438:	4610      	mov	r0, r2
    e43a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    e43e:	2b09      	cmp	r3, #9
    e440:	d905      	bls.n	e44e <_strtoll_l.constprop.0+0x6e>
    e442:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    e446:	2b19      	cmp	r3, #25
    e448:	d837      	bhi.n	e4ba <_strtoll_l.constprop.0+0xda>
    e44a:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
    e44e:	429e      	cmp	r6, r3
    e450:	dd3d      	ble.n	e4ce <_strtoll_l.constprop.0+0xee>
    e452:	1c54      	adds	r4, r2, #1
    e454:	d015      	beq.n	e482 <_strtoll_l.constprop.0+0xa2>
    e456:	4584      	cmp	ip, r0
    e458:	eb7e 0201 	sbcs.w	r2, lr, r1
    e45c:	d334      	bcc.n	e4c8 <_strtoll_l.constprop.0+0xe8>
    e45e:	458e      	cmp	lr, r1
    e460:	bf08      	it	eq
    e462:	4584      	cmpeq	ip, r0
    e464:	d102      	bne.n	e46c <_strtoll_l.constprop.0+0x8c>
    e466:	9a01      	ldr	r2, [sp, #4]
    e468:	429a      	cmp	r2, r3
    e46a:	db2d      	blt.n	e4c8 <_strtoll_l.constprop.0+0xe8>
    e46c:	9a03      	ldr	r2, [sp, #12]
    e46e:	4371      	muls	r1, r6
    e470:	fb00 1102 	mla	r1, r0, r2, r1
    e474:	fba6 0200 	umull	r0, r2, r6, r0
    e478:	440a      	add	r2, r1
    e47a:	1818      	adds	r0, r3, r0
    e47c:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
    e480:	2201      	movs	r2, #1
    e482:	f815 4b01 	ldrb.w	r4, [r5], #1
    e486:	e7d8      	b.n	e43a <_strtoll_l.constprop.0+0x5a>
    e488:	2c2b      	cmp	r4, #43	; 0x2b
    e48a:	bf04      	itt	eq
    e48c:	782c      	ldrbeq	r4, [r5, #0]
    e48e:	1c9d      	addeq	r5, r3, #2
    e490:	e7bb      	b.n	e40a <_strtoll_l.constprop.0+0x2a>
    e492:	2e10      	cmp	r6, #16
    e494:	d1be      	bne.n	e414 <_strtoll_l.constprop.0+0x34>
    e496:	2c30      	cmp	r4, #48	; 0x30
    e498:	d1bc      	bne.n	e414 <_strtoll_l.constprop.0+0x34>
    e49a:	782b      	ldrb	r3, [r5, #0]
    e49c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    e4a0:	2b58      	cmp	r3, #88	; 0x58
    e4a2:	d1b7      	bne.n	e414 <_strtoll_l.constprop.0+0x34>
    e4a4:	786c      	ldrb	r4, [r5, #1]
    e4a6:	2610      	movs	r6, #16
    e4a8:	3502      	adds	r5, #2
    e4aa:	e7b3      	b.n	e414 <_strtoll_l.constprop.0+0x34>
    e4ac:	782b      	ldrb	r3, [r5, #0]
    e4ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    e4b2:	2b58      	cmp	r3, #88	; 0x58
    e4b4:	d0f6      	beq.n	e4a4 <_strtoll_l.constprop.0+0xc4>
    e4b6:	2608      	movs	r6, #8
    e4b8:	e7ac      	b.n	e414 <_strtoll_l.constprop.0+0x34>
    e4ba:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    e4be:	2b19      	cmp	r3, #25
    e4c0:	d805      	bhi.n	e4ce <_strtoll_l.constprop.0+0xee>
    e4c2:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
    e4c6:	e7c2      	b.n	e44e <_strtoll_l.constprop.0+0x6e>
    e4c8:	f04f 32ff 	mov.w	r2, #4294967295
    e4cc:	e7d9      	b.n	e482 <_strtoll_l.constprop.0+0xa2>
    e4ce:	1c53      	adds	r3, r2, #1
    e4d0:	d10a      	bne.n	e4e8 <_strtoll_l.constprop.0+0x108>
    e4d2:	2322      	movs	r3, #34	; 0x22
    e4d4:	9a02      	ldr	r2, [sp, #8]
    e4d6:	4658      	mov	r0, fp
    e4d8:	4651      	mov	r1, sl
    e4da:	6013      	str	r3, [r2, #0]
    e4dc:	f1b8 0f00 	cmp.w	r8, #0
    e4e0:	d10a      	bne.n	e4f8 <_strtoll_l.constprop.0+0x118>
    e4e2:	b005      	add	sp, #20
    e4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e4e8:	b117      	cbz	r7, e4f0 <_strtoll_l.constprop.0+0x110>
    e4ea:	4240      	negs	r0, r0
    e4ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e4f0:	f1b8 0f00 	cmp.w	r8, #0
    e4f4:	d0f5      	beq.n	e4e2 <_strtoll_l.constprop.0+0x102>
    e4f6:	b10a      	cbz	r2, e4fc <_strtoll_l.constprop.0+0x11c>
    e4f8:	f105 39ff 	add.w	r9, r5, #4294967295
    e4fc:	f8c8 9000 	str.w	r9, [r8]
    e500:	e7ef      	b.n	e4e2 <_strtoll_l.constprop.0+0x102>
    e502:	bf00      	nop
    e504:	000114cf 	.word	0x000114cf

0000e508 <strtoll>:
    e508:	4613      	mov	r3, r2
    e50a:	460a      	mov	r2, r1
    e50c:	4601      	mov	r1, r0
    e50e:	4802      	ldr	r0, [pc, #8]	; (e518 <strtoll+0x10>)
    e510:	6800      	ldr	r0, [r0, #0]
    e512:	f7ff bf65 	b.w	e3e0 <_strtoll_l.constprop.0>
    e516:	bf00      	nop
    e518:	2000c634 	.word	0x2000c634

0000e51c <_strtoul_l.constprop.0>:
    e51c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e520:	4686      	mov	lr, r0
    e522:	460d      	mov	r5, r1
    e524:	4e35      	ldr	r6, [pc, #212]	; (e5fc <_strtoul_l.constprop.0+0xe0>)
    e526:	4628      	mov	r0, r5
    e528:	f815 4b01 	ldrb.w	r4, [r5], #1
    e52c:	5d37      	ldrb	r7, [r6, r4]
    e52e:	f017 0708 	ands.w	r7, r7, #8
    e532:	d1f8      	bne.n	e526 <_strtoul_l.constprop.0+0xa>
    e534:	2c2d      	cmp	r4, #45	; 0x2d
    e536:	d126      	bne.n	e586 <_strtoul_l.constprop.0+0x6a>
    e538:	782c      	ldrb	r4, [r5, #0]
    e53a:	2701      	movs	r7, #1
    e53c:	1c85      	adds	r5, r0, #2
    e53e:	bb3b      	cbnz	r3, e590 <_strtoul_l.constprop.0+0x74>
    e540:	2c30      	cmp	r4, #48	; 0x30
    e542:	d032      	beq.n	e5aa <_strtoul_l.constprop.0+0x8e>
    e544:	230a      	movs	r3, #10
    e546:	f04f 38ff 	mov.w	r8, #4294967295
    e54a:	2600      	movs	r6, #0
    e54c:	fbb8 f8f3 	udiv	r8, r8, r3
    e550:	fb03 f908 	mul.w	r9, r3, r8
    e554:	4630      	mov	r0, r6
    e556:	ea6f 0909 	mvn.w	r9, r9
    e55a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
    e55e:	f1bc 0f09 	cmp.w	ip, #9
    e562:	d829      	bhi.n	e5b8 <_strtoul_l.constprop.0+0x9c>
    e564:	4664      	mov	r4, ip
    e566:	42a3      	cmp	r3, r4
    e568:	dd37      	ble.n	e5da <_strtoul_l.constprop.0+0xbe>
    e56a:	f1b6 3fff 	cmp.w	r6, #4294967295
    e56e:	d007      	beq.n	e580 <_strtoul_l.constprop.0+0x64>
    e570:	4580      	cmp	r8, r0
    e572:	d32f      	bcc.n	e5d4 <_strtoul_l.constprop.0+0xb8>
    e574:	d101      	bne.n	e57a <_strtoul_l.constprop.0+0x5e>
    e576:	45a1      	cmp	r9, r4
    e578:	db2c      	blt.n	e5d4 <_strtoul_l.constprop.0+0xb8>
    e57a:	fb00 4003 	mla	r0, r0, r3, r4
    e57e:	2601      	movs	r6, #1
    e580:	f815 4b01 	ldrb.w	r4, [r5], #1
    e584:	e7e9      	b.n	e55a <_strtoul_l.constprop.0+0x3e>
    e586:	2c2b      	cmp	r4, #43	; 0x2b
    e588:	bf04      	itt	eq
    e58a:	782c      	ldrbeq	r4, [r5, #0]
    e58c:	1c85      	addeq	r5, r0, #2
    e58e:	e7d6      	b.n	e53e <_strtoul_l.constprop.0+0x22>
    e590:	2b10      	cmp	r3, #16
    e592:	d1d8      	bne.n	e546 <_strtoul_l.constprop.0+0x2a>
    e594:	2c30      	cmp	r4, #48	; 0x30
    e596:	d1d6      	bne.n	e546 <_strtoul_l.constprop.0+0x2a>
    e598:	7828      	ldrb	r0, [r5, #0]
    e59a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    e59e:	2858      	cmp	r0, #88	; 0x58
    e5a0:	d1d1      	bne.n	e546 <_strtoul_l.constprop.0+0x2a>
    e5a2:	786c      	ldrb	r4, [r5, #1]
    e5a4:	2310      	movs	r3, #16
    e5a6:	3502      	adds	r5, #2
    e5a8:	e7cd      	b.n	e546 <_strtoul_l.constprop.0+0x2a>
    e5aa:	782b      	ldrb	r3, [r5, #0]
    e5ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    e5b0:	2b58      	cmp	r3, #88	; 0x58
    e5b2:	d0f6      	beq.n	e5a2 <_strtoul_l.constprop.0+0x86>
    e5b4:	2308      	movs	r3, #8
    e5b6:	e7c6      	b.n	e546 <_strtoul_l.constprop.0+0x2a>
    e5b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
    e5bc:	f1bc 0f19 	cmp.w	ip, #25
    e5c0:	d801      	bhi.n	e5c6 <_strtoul_l.constprop.0+0xaa>
    e5c2:	3c37      	subs	r4, #55	; 0x37
    e5c4:	e7cf      	b.n	e566 <_strtoul_l.constprop.0+0x4a>
    e5c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
    e5ca:	f1bc 0f19 	cmp.w	ip, #25
    e5ce:	d804      	bhi.n	e5da <_strtoul_l.constprop.0+0xbe>
    e5d0:	3c57      	subs	r4, #87	; 0x57
    e5d2:	e7c8      	b.n	e566 <_strtoul_l.constprop.0+0x4a>
    e5d4:	f04f 36ff 	mov.w	r6, #4294967295
    e5d8:	e7d2      	b.n	e580 <_strtoul_l.constprop.0+0x64>
    e5da:	1c73      	adds	r3, r6, #1
    e5dc:	d106      	bne.n	e5ec <_strtoul_l.constprop.0+0xd0>
    e5de:	2322      	movs	r3, #34	; 0x22
    e5e0:	4630      	mov	r0, r6
    e5e2:	f8ce 3000 	str.w	r3, [lr]
    e5e6:	b932      	cbnz	r2, e5f6 <_strtoul_l.constprop.0+0xda>
    e5e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e5ec:	b107      	cbz	r7, e5f0 <_strtoul_l.constprop.0+0xd4>
    e5ee:	4240      	negs	r0, r0
    e5f0:	2a00      	cmp	r2, #0
    e5f2:	d0f9      	beq.n	e5e8 <_strtoul_l.constprop.0+0xcc>
    e5f4:	b106      	cbz	r6, e5f8 <_strtoul_l.constprop.0+0xdc>
    e5f6:	1e69      	subs	r1, r5, #1
    e5f8:	6011      	str	r1, [r2, #0]
    e5fa:	e7f5      	b.n	e5e8 <_strtoul_l.constprop.0+0xcc>
    e5fc:	000114cf 	.word	0x000114cf

0000e600 <strtoul>:
    e600:	4613      	mov	r3, r2
    e602:	460a      	mov	r2, r1
    e604:	4601      	mov	r1, r0
    e606:	4802      	ldr	r0, [pc, #8]	; (e610 <strtoul+0x10>)
    e608:	6800      	ldr	r0, [r0, #0]
    e60a:	f7ff bf87 	b.w	e51c <_strtoul_l.constprop.0>
    e60e:	bf00      	nop
    e610:	2000c634 	.word	0x2000c634

0000e614 <vsniprintf>:
    e614:	b507      	push	{r0, r1, r2, lr}
    e616:	9300      	str	r3, [sp, #0]
    e618:	4613      	mov	r3, r2
    e61a:	460a      	mov	r2, r1
    e61c:	4601      	mov	r1, r0
    e61e:	4803      	ldr	r0, [pc, #12]	; (e62c <vsniprintf+0x18>)
    e620:	6800      	ldr	r0, [r0, #0]
    e622:	f001 fffa 	bl	1061a <_vsniprintf_r>
    e626:	b003      	add	sp, #12
    e628:	f85d fb04 	ldr.w	pc, [sp], #4
    e62c:	2000c634 	.word	0x2000c634

0000e630 <_vsiscanf_r>:
    e630:	b570      	push	{r4, r5, r6, lr}
    e632:	461e      	mov	r6, r3
    e634:	b09a      	sub	sp, #104	; 0x68
    e636:	f44f 7301 	mov.w	r3, #516	; 0x204
    e63a:	4604      	mov	r4, r0
    e63c:	4608      	mov	r0, r1
    e63e:	4615      	mov	r5, r2
    e640:	f8ad 300c 	strh.w	r3, [sp, #12]
    e644:	9100      	str	r1, [sp, #0]
    e646:	9104      	str	r1, [sp, #16]
    e648:	f7f9 fee4 	bl	8414 <strlen>
    e64c:	4b09      	ldr	r3, [pc, #36]	; (e674 <_vsiscanf_r+0x44>)
    e64e:	462a      	mov	r2, r5
    e650:	4669      	mov	r1, sp
    e652:	9001      	str	r0, [sp, #4]
    e654:	9309      	str	r3, [sp, #36]	; 0x24
    e656:	2300      	movs	r3, #0
    e658:	9005      	str	r0, [sp, #20]
    e65a:	4620      	mov	r0, r4
    e65c:	930d      	str	r3, [sp, #52]	; 0x34
    e65e:	9312      	str	r3, [sp, #72]	; 0x48
    e660:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e664:	f8ad 300e 	strh.w	r3, [sp, #14]
    e668:	4633      	mov	r3, r6
    e66a:	f000 f917 	bl	e89c <__ssvfiscanf_r>
    e66e:	b01a      	add	sp, #104	; 0x68
    e670:	bd70      	pop	{r4, r5, r6, pc}
    e672:	bf00      	nop
    e674:	0001092d 	.word	0x0001092d

0000e678 <vsiscanf>:
    e678:	4613      	mov	r3, r2
    e67a:	460a      	mov	r2, r1
    e67c:	4601      	mov	r1, r0
    e67e:	4802      	ldr	r0, [pc, #8]	; (e688 <vsiscanf+0x10>)
    e680:	6800      	ldr	r0, [r0, #0]
    e682:	f7ff bfd5 	b.w	e630 <_vsiscanf_r>
    e686:	bf00      	nop
    e688:	2000c634 	.word	0x2000c634

0000e68c <__malloc_lock>:
    e68c:	4801      	ldr	r0, [pc, #4]	; (e694 <__malloc_lock+0x8>)
    e68e:	f001 b856 	b.w	f73e <__retarget_lock_acquire_recursive>
    e692:	bf00      	nop
    e694:	2000c6d4 	.word	0x2000c6d4

0000e698 <__malloc_unlock>:
    e698:	4801      	ldr	r0, [pc, #4]	; (e6a0 <__malloc_unlock+0x8>)
    e69a:	f001 b856 	b.w	f74a <__retarget_lock_release_recursive>
    e69e:	bf00      	nop
    e6a0:	2000c6d4 	.word	0x2000c6d4

0000e6a4 <_svfiprintf_r>:
    e6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6a8:	4698      	mov	r8, r3
    e6aa:	898b      	ldrh	r3, [r1, #12]
    e6ac:	b09d      	sub	sp, #116	; 0x74
    e6ae:	4607      	mov	r7, r0
    e6b0:	061b      	lsls	r3, r3, #24
    e6b2:	460d      	mov	r5, r1
    e6b4:	4614      	mov	r4, r2
    e6b6:	d510      	bpl.n	e6da <_svfiprintf_r+0x36>
    e6b8:	690b      	ldr	r3, [r1, #16]
    e6ba:	b973      	cbnz	r3, e6da <_svfiprintf_r+0x36>
    e6bc:	2140      	movs	r1, #64	; 0x40
    e6be:	f7ff fd9d 	bl	e1fc <_malloc_r>
    e6c2:	6028      	str	r0, [r5, #0]
    e6c4:	6128      	str	r0, [r5, #16]
    e6c6:	b930      	cbnz	r0, e6d6 <_svfiprintf_r+0x32>
    e6c8:	230c      	movs	r3, #12
    e6ca:	603b      	str	r3, [r7, #0]
    e6cc:	f04f 30ff 	mov.w	r0, #4294967295
    e6d0:	b01d      	add	sp, #116	; 0x74
    e6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e6d6:	2340      	movs	r3, #64	; 0x40
    e6d8:	616b      	str	r3, [r5, #20]
    e6da:	2300      	movs	r3, #0
    e6dc:	f8cd 800c 	str.w	r8, [sp, #12]
    e6e0:	f04f 0901 	mov.w	r9, #1
    e6e4:	f8df 81a0 	ldr.w	r8, [pc, #416]	; e888 <_svfiprintf_r+0x1e4>
    e6e8:	9309      	str	r3, [sp, #36]	; 0x24
    e6ea:	2320      	movs	r3, #32
    e6ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    e6f0:	2330      	movs	r3, #48	; 0x30
    e6f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    e6f6:	4623      	mov	r3, r4
    e6f8:	469a      	mov	sl, r3
    e6fa:	f813 2b01 	ldrb.w	r2, [r3], #1
    e6fe:	b10a      	cbz	r2, e704 <_svfiprintf_r+0x60>
    e700:	2a25      	cmp	r2, #37	; 0x25
    e702:	d1f9      	bne.n	e6f8 <_svfiprintf_r+0x54>
    e704:	ebba 0b04 	subs.w	fp, sl, r4
    e708:	d00b      	beq.n	e722 <_svfiprintf_r+0x7e>
    e70a:	465b      	mov	r3, fp
    e70c:	4622      	mov	r2, r4
    e70e:	4629      	mov	r1, r5
    e710:	4638      	mov	r0, r7
    e712:	f001 ffad 	bl	10670 <__ssputs_r>
    e716:	3001      	adds	r0, #1
    e718:	f000 80a7 	beq.w	e86a <_svfiprintf_r+0x1c6>
    e71c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e71e:	445a      	add	r2, fp
    e720:	9209      	str	r2, [sp, #36]	; 0x24
    e722:	f89a 3000 	ldrb.w	r3, [sl]
    e726:	2b00      	cmp	r3, #0
    e728:	f000 809f 	beq.w	e86a <_svfiprintf_r+0x1c6>
    e72c:	2300      	movs	r3, #0
    e72e:	f04f 32ff 	mov.w	r2, #4294967295
    e732:	f10a 0a01 	add.w	sl, sl, #1
    e736:	9304      	str	r3, [sp, #16]
    e738:	9307      	str	r3, [sp, #28]
    e73a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    e73e:	931a      	str	r3, [sp, #104]	; 0x68
    e740:	e9cd 2305 	strd	r2, r3, [sp, #20]
    e744:	4654      	mov	r4, sl
    e746:	2205      	movs	r2, #5
    e748:	484f      	ldr	r0, [pc, #316]	; (e888 <_svfiprintf_r+0x1e4>)
    e74a:	f814 1b01 	ldrb.w	r1, [r4], #1
    e74e:	f002 f926 	bl	1099e <memchr>
    e752:	9a04      	ldr	r2, [sp, #16]
    e754:	b9d8      	cbnz	r0, e78e <_svfiprintf_r+0xea>
    e756:	06d0      	lsls	r0, r2, #27
    e758:	bf44      	itt	mi
    e75a:	2320      	movmi	r3, #32
    e75c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    e760:	0711      	lsls	r1, r2, #28
    e762:	bf44      	itt	mi
    e764:	232b      	movmi	r3, #43	; 0x2b
    e766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    e76a:	f89a 3000 	ldrb.w	r3, [sl]
    e76e:	2b2a      	cmp	r3, #42	; 0x2a
    e770:	d015      	beq.n	e79e <_svfiprintf_r+0xfa>
    e772:	9a07      	ldr	r2, [sp, #28]
    e774:	4654      	mov	r4, sl
    e776:	2000      	movs	r0, #0
    e778:	f04f 0c0a 	mov.w	ip, #10
    e77c:	4621      	mov	r1, r4
    e77e:	f811 3b01 	ldrb.w	r3, [r1], #1
    e782:	3b30      	subs	r3, #48	; 0x30
    e784:	2b09      	cmp	r3, #9
    e786:	d94b      	bls.n	e820 <_svfiprintf_r+0x17c>
    e788:	b1b0      	cbz	r0, e7b8 <_svfiprintf_r+0x114>
    e78a:	9207      	str	r2, [sp, #28]
    e78c:	e014      	b.n	e7b8 <_svfiprintf_r+0x114>
    e78e:	eba0 0308 	sub.w	r3, r0, r8
    e792:	46a2      	mov	sl, r4
    e794:	fa09 f303 	lsl.w	r3, r9, r3
    e798:	4313      	orrs	r3, r2
    e79a:	9304      	str	r3, [sp, #16]
    e79c:	e7d2      	b.n	e744 <_svfiprintf_r+0xa0>
    e79e:	9b03      	ldr	r3, [sp, #12]
    e7a0:	1d19      	adds	r1, r3, #4
    e7a2:	681b      	ldr	r3, [r3, #0]
    e7a4:	2b00      	cmp	r3, #0
    e7a6:	9103      	str	r1, [sp, #12]
    e7a8:	bfbb      	ittet	lt
    e7aa:	425b      	neglt	r3, r3
    e7ac:	f042 0202 	orrlt.w	r2, r2, #2
    e7b0:	9307      	strge	r3, [sp, #28]
    e7b2:	9307      	strlt	r3, [sp, #28]
    e7b4:	bfb8      	it	lt
    e7b6:	9204      	strlt	r2, [sp, #16]
    e7b8:	7823      	ldrb	r3, [r4, #0]
    e7ba:	2b2e      	cmp	r3, #46	; 0x2e
    e7bc:	d10a      	bne.n	e7d4 <_svfiprintf_r+0x130>
    e7be:	7863      	ldrb	r3, [r4, #1]
    e7c0:	2b2a      	cmp	r3, #42	; 0x2a
    e7c2:	d132      	bne.n	e82a <_svfiprintf_r+0x186>
    e7c4:	9b03      	ldr	r3, [sp, #12]
    e7c6:	3402      	adds	r4, #2
    e7c8:	1d1a      	adds	r2, r3, #4
    e7ca:	681b      	ldr	r3, [r3, #0]
    e7cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
    e7d0:	9203      	str	r2, [sp, #12]
    e7d2:	9305      	str	r3, [sp, #20]
    e7d4:	f8df a0b4 	ldr.w	sl, [pc, #180]	; e88c <_svfiprintf_r+0x1e8>
    e7d8:	2203      	movs	r2, #3
    e7da:	7821      	ldrb	r1, [r4, #0]
    e7dc:	4650      	mov	r0, sl
    e7de:	f002 f8de 	bl	1099e <memchr>
    e7e2:	b138      	cbz	r0, e7f4 <_svfiprintf_r+0x150>
    e7e4:	eba0 000a 	sub.w	r0, r0, sl
    e7e8:	2240      	movs	r2, #64	; 0x40
    e7ea:	9b04      	ldr	r3, [sp, #16]
    e7ec:	3401      	adds	r4, #1
    e7ee:	4082      	lsls	r2, r0
    e7f0:	4313      	orrs	r3, r2
    e7f2:	9304      	str	r3, [sp, #16]
    e7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
    e7f8:	2206      	movs	r2, #6
    e7fa:	4825      	ldr	r0, [pc, #148]	; (e890 <_svfiprintf_r+0x1ec>)
    e7fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    e800:	f002 f8cd 	bl	1099e <memchr>
    e804:	2800      	cmp	r0, #0
    e806:	d036      	beq.n	e876 <_svfiprintf_r+0x1d2>
    e808:	4b22      	ldr	r3, [pc, #136]	; (e894 <_svfiprintf_r+0x1f0>)
    e80a:	bb1b      	cbnz	r3, e854 <_svfiprintf_r+0x1b0>
    e80c:	9b03      	ldr	r3, [sp, #12]
    e80e:	3307      	adds	r3, #7
    e810:	f023 0307 	bic.w	r3, r3, #7
    e814:	3308      	adds	r3, #8
    e816:	9303      	str	r3, [sp, #12]
    e818:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e81a:	4433      	add	r3, r6
    e81c:	9309      	str	r3, [sp, #36]	; 0x24
    e81e:	e76a      	b.n	e6f6 <_svfiprintf_r+0x52>
    e820:	fb0c 3202 	mla	r2, ip, r2, r3
    e824:	460c      	mov	r4, r1
    e826:	2001      	movs	r0, #1
    e828:	e7a8      	b.n	e77c <_svfiprintf_r+0xd8>
    e82a:	2300      	movs	r3, #0
    e82c:	3401      	adds	r4, #1
    e82e:	f04f 0c0a 	mov.w	ip, #10
    e832:	4619      	mov	r1, r3
    e834:	9305      	str	r3, [sp, #20]
    e836:	4620      	mov	r0, r4
    e838:	f810 2b01 	ldrb.w	r2, [r0], #1
    e83c:	3a30      	subs	r2, #48	; 0x30
    e83e:	2a09      	cmp	r2, #9
    e840:	d903      	bls.n	e84a <_svfiprintf_r+0x1a6>
    e842:	2b00      	cmp	r3, #0
    e844:	d0c6      	beq.n	e7d4 <_svfiprintf_r+0x130>
    e846:	9105      	str	r1, [sp, #20]
    e848:	e7c4      	b.n	e7d4 <_svfiprintf_r+0x130>
    e84a:	fb0c 2101 	mla	r1, ip, r1, r2
    e84e:	4604      	mov	r4, r0
    e850:	2301      	movs	r3, #1
    e852:	e7f0      	b.n	e836 <_svfiprintf_r+0x192>
    e854:	ab03      	add	r3, sp, #12
    e856:	462a      	mov	r2, r5
    e858:	a904      	add	r1, sp, #16
    e85a:	4638      	mov	r0, r7
    e85c:	9300      	str	r3, [sp, #0]
    e85e:	4b0e      	ldr	r3, [pc, #56]	; (e898 <_svfiprintf_r+0x1f4>)
    e860:	f3af 8000 	nop.w
    e864:	1c42      	adds	r2, r0, #1
    e866:	4606      	mov	r6, r0
    e868:	d1d6      	bne.n	e818 <_svfiprintf_r+0x174>
    e86a:	89ab      	ldrh	r3, [r5, #12]
    e86c:	065b      	lsls	r3, r3, #25
    e86e:	f53f af2d 	bmi.w	e6cc <_svfiprintf_r+0x28>
    e872:	9809      	ldr	r0, [sp, #36]	; 0x24
    e874:	e72c      	b.n	e6d0 <_svfiprintf_r+0x2c>
    e876:	ab03      	add	r3, sp, #12
    e878:	462a      	mov	r2, r5
    e87a:	a904      	add	r1, sp, #16
    e87c:	4638      	mov	r0, r7
    e87e:	9300      	str	r3, [sp, #0]
    e880:	4b05      	ldr	r3, [pc, #20]	; (e898 <_svfiprintf_r+0x1f4>)
    e882:	f000 f983 	bl	eb8c <_printf_i>
    e886:	e7ed      	b.n	e864 <_svfiprintf_r+0x1c0>
    e888:	000115cf 	.word	0x000115cf
    e88c:	000115d5 	.word	0x000115d5
    e890:	000115d9 	.word	0x000115d9
    e894:	00000000 	.word	0x00000000
    e898:	00010671 	.word	0x00010671

0000e89c <__ssvfiscanf_r>:
    e89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e8a0:	460c      	mov	r4, r1
    e8a2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
    e8a6:	2100      	movs	r1, #0
    e8a8:	4606      	mov	r6, r0
    e8aa:	f10d 0804 	add.w	r8, sp, #4
    e8ae:	4fa7      	ldr	r7, [pc, #668]	; (eb4c <__ssvfiscanf_r+0x2b0>)
    e8b0:	9300      	str	r3, [sp, #0]
    e8b2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
    e8b6:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
    e8ba:	49a5      	ldr	r1, [pc, #660]	; (eb50 <__ssvfiscanf_r+0x2b4>)
    e8bc:	91a0      	str	r1, [sp, #640]	; 0x280
    e8be:	49a5      	ldr	r1, [pc, #660]	; (eb54 <__ssvfiscanf_r+0x2b8>)
    e8c0:	91a1      	str	r1, [sp, #644]	; 0x284
    e8c2:	7813      	ldrb	r3, [r2, #0]
    e8c4:	2b00      	cmp	r3, #0
    e8c6:	f000 815c 	beq.w	eb82 <__ssvfiscanf_r+0x2e6>
    e8ca:	5cf9      	ldrb	r1, [r7, r3]
    e8cc:	1c55      	adds	r5, r2, #1
    e8ce:	f011 0108 	ands.w	r1, r1, #8
    e8d2:	d019      	beq.n	e908 <__ssvfiscanf_r+0x6c>
    e8d4:	6863      	ldr	r3, [r4, #4]
    e8d6:	2b00      	cmp	r3, #0
    e8d8:	dd0f      	ble.n	e8fa <__ssvfiscanf_r+0x5e>
    e8da:	6823      	ldr	r3, [r4, #0]
    e8dc:	781a      	ldrb	r2, [r3, #0]
    e8de:	5cba      	ldrb	r2, [r7, r2]
    e8e0:	0712      	lsls	r2, r2, #28
    e8e2:	d401      	bmi.n	e8e8 <__ssvfiscanf_r+0x4c>
    e8e4:	462a      	mov	r2, r5
    e8e6:	e7ec      	b.n	e8c2 <__ssvfiscanf_r+0x26>
    e8e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
    e8ea:	3301      	adds	r3, #1
    e8ec:	3201      	adds	r2, #1
    e8ee:	6023      	str	r3, [r4, #0]
    e8f0:	9245      	str	r2, [sp, #276]	; 0x114
    e8f2:	6862      	ldr	r2, [r4, #4]
    e8f4:	3a01      	subs	r2, #1
    e8f6:	6062      	str	r2, [r4, #4]
    e8f8:	e7ec      	b.n	e8d4 <__ssvfiscanf_r+0x38>
    e8fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
    e8fc:	4621      	mov	r1, r4
    e8fe:	4630      	mov	r0, r6
    e900:	4798      	blx	r3
    e902:	2800      	cmp	r0, #0
    e904:	d0e9      	beq.n	e8da <__ssvfiscanf_r+0x3e>
    e906:	e7ed      	b.n	e8e4 <__ssvfiscanf_r+0x48>
    e908:	2b25      	cmp	r3, #37	; 0x25
    e90a:	d012      	beq.n	e932 <__ssvfiscanf_r+0x96>
    e90c:	4699      	mov	r9, r3
    e90e:	6863      	ldr	r3, [r4, #4]
    e910:	2b00      	cmp	r3, #0
    e912:	f340 8094 	ble.w	ea3e <__ssvfiscanf_r+0x1a2>
    e916:	6822      	ldr	r2, [r4, #0]
    e918:	7813      	ldrb	r3, [r2, #0]
    e91a:	454b      	cmp	r3, r9
    e91c:	f040 8131 	bne.w	eb82 <__ssvfiscanf_r+0x2e6>
    e920:	6863      	ldr	r3, [r4, #4]
    e922:	3201      	adds	r2, #1
    e924:	3b01      	subs	r3, #1
    e926:	6022      	str	r2, [r4, #0]
    e928:	6063      	str	r3, [r4, #4]
    e92a:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e92c:	3301      	adds	r3, #1
    e92e:	9345      	str	r3, [sp, #276]	; 0x114
    e930:	e7d8      	b.n	e8e4 <__ssvfiscanf_r+0x48>
    e932:	9141      	str	r1, [sp, #260]	; 0x104
    e934:	9143      	str	r1, [sp, #268]	; 0x10c
    e936:	7853      	ldrb	r3, [r2, #1]
    e938:	2b2a      	cmp	r3, #42	; 0x2a
    e93a:	bf04      	itt	eq
    e93c:	2310      	moveq	r3, #16
    e93e:	1c95      	addeq	r5, r2, #2
    e940:	f04f 020a 	mov.w	r2, #10
    e944:	bf08      	it	eq
    e946:	9341      	streq	r3, [sp, #260]	; 0x104
    e948:	46a9      	mov	r9, r5
    e94a:	f819 1b01 	ldrb.w	r1, [r9], #1
    e94e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    e952:	2b09      	cmp	r3, #9
    e954:	d91e      	bls.n	e994 <__ssvfiscanf_r+0xf8>
    e956:	f8df a200 	ldr.w	sl, [pc, #512]	; eb58 <__ssvfiscanf_r+0x2bc>
    e95a:	2203      	movs	r2, #3
    e95c:	4650      	mov	r0, sl
    e95e:	f002 f81e 	bl	1099e <memchr>
    e962:	b138      	cbz	r0, e974 <__ssvfiscanf_r+0xd8>
    e964:	eba0 000a 	sub.w	r0, r0, sl
    e968:	2301      	movs	r3, #1
    e96a:	9a41      	ldr	r2, [sp, #260]	; 0x104
    e96c:	464d      	mov	r5, r9
    e96e:	4083      	lsls	r3, r0
    e970:	4313      	orrs	r3, r2
    e972:	9341      	str	r3, [sp, #260]	; 0x104
    e974:	f815 3b01 	ldrb.w	r3, [r5], #1
    e978:	2b78      	cmp	r3, #120	; 0x78
    e97a:	d806      	bhi.n	e98a <__ssvfiscanf_r+0xee>
    e97c:	2b57      	cmp	r3, #87	; 0x57
    e97e:	d810      	bhi.n	e9a2 <__ssvfiscanf_r+0x106>
    e980:	2b25      	cmp	r3, #37	; 0x25
    e982:	d0c3      	beq.n	e90c <__ssvfiscanf_r+0x70>
    e984:	d856      	bhi.n	ea34 <__ssvfiscanf_r+0x198>
    e986:	2b00      	cmp	r3, #0
    e988:	d064      	beq.n	ea54 <__ssvfiscanf_r+0x1b8>
    e98a:	2303      	movs	r3, #3
    e98c:	9347      	str	r3, [sp, #284]	; 0x11c
    e98e:	230a      	movs	r3, #10
    e990:	9342      	str	r3, [sp, #264]	; 0x108
    e992:	e06a      	b.n	ea6a <__ssvfiscanf_r+0x1ce>
    e994:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    e996:	464d      	mov	r5, r9
    e998:	fb02 1103 	mla	r1, r2, r3, r1
    e99c:	3930      	subs	r1, #48	; 0x30
    e99e:	9143      	str	r1, [sp, #268]	; 0x10c
    e9a0:	e7d2      	b.n	e948 <__ssvfiscanf_r+0xac>
    e9a2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
    e9a6:	2a20      	cmp	r2, #32
    e9a8:	d8ef      	bhi.n	e98a <__ssvfiscanf_r+0xee>
    e9aa:	a101      	add	r1, pc, #4	; (adr r1, e9b0 <__ssvfiscanf_r+0x114>)
    e9ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    e9b0:	0000ea9f 	.word	0x0000ea9f
    e9b4:	0000e98b 	.word	0x0000e98b
    e9b8:	0000e98b 	.word	0x0000e98b
    e9bc:	0000eac1 	.word	0x0000eac1
    e9c0:	0000e98b 	.word	0x0000e98b
    e9c4:	0000e98b 	.word	0x0000e98b
    e9c8:	0000e98b 	.word	0x0000e98b
    e9cc:	0000e98b 	.word	0x0000e98b
    e9d0:	0000e98b 	.word	0x0000e98b
    e9d4:	0000e98b 	.word	0x0000e98b
    e9d8:	0000e98b 	.word	0x0000e98b
    e9dc:	0000ead7 	.word	0x0000ead7
    e9e0:	0000eabd 	.word	0x0000eabd
    e9e4:	0000ea3b 	.word	0x0000ea3b
    e9e8:	0000ea3b 	.word	0x0000ea3b
    e9ec:	0000ea3b 	.word	0x0000ea3b
    e9f0:	0000e98b 	.word	0x0000e98b
    e9f4:	0000eab1 	.word	0x0000eab1
    e9f8:	0000e98b 	.word	0x0000e98b
    e9fc:	0000e98b 	.word	0x0000e98b
    ea00:	0000e98b 	.word	0x0000e98b
    ea04:	0000e98b 	.word	0x0000e98b
    ea08:	0000eae7 	.word	0x0000eae7
    ea0c:	0000eab9 	.word	0x0000eab9
    ea10:	0000ea5b 	.word	0x0000ea5b
    ea14:	0000e98b 	.word	0x0000e98b
    ea18:	0000e98b 	.word	0x0000e98b
    ea1c:	0000eae3 	.word	0x0000eae3
    ea20:	0000e98b 	.word	0x0000e98b
    ea24:	0000eabd 	.word	0x0000eabd
    ea28:	0000e98b 	.word	0x0000e98b
    ea2c:	0000e98b 	.word	0x0000e98b
    ea30:	0000ea9f 	.word	0x0000ea9f
    ea34:	3b45      	subs	r3, #69	; 0x45
    ea36:	2b02      	cmp	r3, #2
    ea38:	d8a7      	bhi.n	e98a <__ssvfiscanf_r+0xee>
    ea3a:	2305      	movs	r3, #5
    ea3c:	e014      	b.n	ea68 <__ssvfiscanf_r+0x1cc>
    ea3e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
    ea40:	4621      	mov	r1, r4
    ea42:	4630      	mov	r0, r6
    ea44:	4798      	blx	r3
    ea46:	2800      	cmp	r0, #0
    ea48:	f43f af65 	beq.w	e916 <__ssvfiscanf_r+0x7a>
    ea4c:	9844      	ldr	r0, [sp, #272]	; 0x110
    ea4e:	2800      	cmp	r0, #0
    ea50:	f040 808f 	bne.w	eb72 <__ssvfiscanf_r+0x2d6>
    ea54:	f04f 30ff 	mov.w	r0, #4294967295
    ea58:	e08f      	b.n	eb7a <__ssvfiscanf_r+0x2de>
    ea5a:	9b41      	ldr	r3, [sp, #260]	; 0x104
    ea5c:	f443 7308 	orr.w	r3, r3, #544	; 0x220
    ea60:	9341      	str	r3, [sp, #260]	; 0x104
    ea62:	2310      	movs	r3, #16
    ea64:	9342      	str	r3, [sp, #264]	; 0x108
    ea66:	2304      	movs	r3, #4
    ea68:	9347      	str	r3, [sp, #284]	; 0x11c
    ea6a:	6863      	ldr	r3, [r4, #4]
    ea6c:	2b00      	cmp	r3, #0
    ea6e:	dd4a      	ble.n	eb06 <__ssvfiscanf_r+0x26a>
    ea70:	9b41      	ldr	r3, [sp, #260]	; 0x104
    ea72:	0659      	lsls	r1, r3, #25
    ea74:	d404      	bmi.n	ea80 <__ssvfiscanf_r+0x1e4>
    ea76:	6823      	ldr	r3, [r4, #0]
    ea78:	781a      	ldrb	r2, [r3, #0]
    ea7a:	5cba      	ldrb	r2, [r7, r2]
    ea7c:	0712      	lsls	r2, r2, #28
    ea7e:	d449      	bmi.n	eb14 <__ssvfiscanf_r+0x278>
    ea80:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    ea82:	2b02      	cmp	r3, #2
    ea84:	dc58      	bgt.n	eb38 <__ssvfiscanf_r+0x29c>
    ea86:	466b      	mov	r3, sp
    ea88:	4622      	mov	r2, r4
    ea8a:	a941      	add	r1, sp, #260	; 0x104
    ea8c:	4630      	mov	r0, r6
    ea8e:	f000 f9ab 	bl	ede8 <_scanf_chars>
    ea92:	2801      	cmp	r0, #1
    ea94:	d075      	beq.n	eb82 <__ssvfiscanf_r+0x2e6>
    ea96:	2802      	cmp	r0, #2
    ea98:	f47f af24 	bne.w	e8e4 <__ssvfiscanf_r+0x48>
    ea9c:	e7d6      	b.n	ea4c <__ssvfiscanf_r+0x1b0>
    ea9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
    eaa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    eaa4:	9241      	str	r2, [sp, #260]	; 0x104
    eaa6:	2210      	movs	r2, #16
    eaa8:	2b6e      	cmp	r3, #110	; 0x6e
    eaaa:	9242      	str	r2, [sp, #264]	; 0x108
    eaac:	d902      	bls.n	eab4 <__ssvfiscanf_r+0x218>
    eaae:	e7da      	b.n	ea66 <__ssvfiscanf_r+0x1ca>
    eab0:	2300      	movs	r3, #0
    eab2:	9342      	str	r3, [sp, #264]	; 0x108
    eab4:	2303      	movs	r3, #3
    eab6:	e7d7      	b.n	ea68 <__ssvfiscanf_r+0x1cc>
    eab8:	2308      	movs	r3, #8
    eaba:	e7d3      	b.n	ea64 <__ssvfiscanf_r+0x1c8>
    eabc:	220a      	movs	r2, #10
    eabe:	e7f3      	b.n	eaa8 <__ssvfiscanf_r+0x20c>
    eac0:	4629      	mov	r1, r5
    eac2:	4640      	mov	r0, r8
    eac4:	f001 fef9 	bl	108ba <__sccl>
    eac8:	9b41      	ldr	r3, [sp, #260]	; 0x104
    eaca:	4605      	mov	r5, r0
    eacc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ead0:	9341      	str	r3, [sp, #260]	; 0x104
    ead2:	2301      	movs	r3, #1
    ead4:	e7c8      	b.n	ea68 <__ssvfiscanf_r+0x1cc>
    ead6:	9b41      	ldr	r3, [sp, #260]	; 0x104
    ead8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    eadc:	9341      	str	r3, [sp, #260]	; 0x104
    eade:	2300      	movs	r3, #0
    eae0:	e7c2      	b.n	ea68 <__ssvfiscanf_r+0x1cc>
    eae2:	2302      	movs	r3, #2
    eae4:	e7c0      	b.n	ea68 <__ssvfiscanf_r+0x1cc>
    eae6:	9841      	ldr	r0, [sp, #260]	; 0x104
    eae8:	06c3      	lsls	r3, r0, #27
    eaea:	f53f aefb 	bmi.w	e8e4 <__ssvfiscanf_r+0x48>
    eaee:	9b00      	ldr	r3, [sp, #0]
    eaf0:	f010 0f01 	tst.w	r0, #1
    eaf4:	9a45      	ldr	r2, [sp, #276]	; 0x114
    eaf6:	f103 0104 	add.w	r1, r3, #4
    eafa:	9100      	str	r1, [sp, #0]
    eafc:	681b      	ldr	r3, [r3, #0]
    eafe:	bf14      	ite	ne
    eb00:	801a      	strhne	r2, [r3, #0]
    eb02:	601a      	streq	r2, [r3, #0]
    eb04:	e6ee      	b.n	e8e4 <__ssvfiscanf_r+0x48>
    eb06:	9ba1      	ldr	r3, [sp, #644]	; 0x284
    eb08:	4621      	mov	r1, r4
    eb0a:	4630      	mov	r0, r6
    eb0c:	4798      	blx	r3
    eb0e:	2800      	cmp	r0, #0
    eb10:	d0ae      	beq.n	ea70 <__ssvfiscanf_r+0x1d4>
    eb12:	e79b      	b.n	ea4c <__ssvfiscanf_r+0x1b0>
    eb14:	9a45      	ldr	r2, [sp, #276]	; 0x114
    eb16:	3201      	adds	r2, #1
    eb18:	9245      	str	r2, [sp, #276]	; 0x114
    eb1a:	6862      	ldr	r2, [r4, #4]
    eb1c:	3a01      	subs	r2, #1
    eb1e:	2a00      	cmp	r2, #0
    eb20:	6062      	str	r2, [r4, #4]
    eb22:	dd02      	ble.n	eb2a <__ssvfiscanf_r+0x28e>
    eb24:	3301      	adds	r3, #1
    eb26:	6023      	str	r3, [r4, #0]
    eb28:	e7a5      	b.n	ea76 <__ssvfiscanf_r+0x1da>
    eb2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
    eb2c:	4621      	mov	r1, r4
    eb2e:	4630      	mov	r0, r6
    eb30:	4798      	blx	r3
    eb32:	2800      	cmp	r0, #0
    eb34:	d09f      	beq.n	ea76 <__ssvfiscanf_r+0x1da>
    eb36:	e789      	b.n	ea4c <__ssvfiscanf_r+0x1b0>
    eb38:	2b04      	cmp	r3, #4
    eb3a:	dc0f      	bgt.n	eb5c <__ssvfiscanf_r+0x2c0>
    eb3c:	466b      	mov	r3, sp
    eb3e:	4622      	mov	r2, r4
    eb40:	a941      	add	r1, sp, #260	; 0x104
    eb42:	4630      	mov	r0, r6
    eb44:	f000 f9aa 	bl	ee9c <_scanf_i>
    eb48:	e7a3      	b.n	ea92 <__ssvfiscanf_r+0x1f6>
    eb4a:	bf00      	nop
    eb4c:	000114cf 	.word	0x000114cf
    eb50:	00010727 	.word	0x00010727
    eb54:	0001079d 	.word	0x0001079d
    eb58:	000115d5 	.word	0x000115d5
    eb5c:	4b0a      	ldr	r3, [pc, #40]	; (eb88 <__ssvfiscanf_r+0x2ec>)
    eb5e:	2b00      	cmp	r3, #0
    eb60:	f43f aec0 	beq.w	e8e4 <__ssvfiscanf_r+0x48>
    eb64:	466b      	mov	r3, sp
    eb66:	4622      	mov	r2, r4
    eb68:	a941      	add	r1, sp, #260	; 0x104
    eb6a:	4630      	mov	r0, r6
    eb6c:	f3af 8000 	nop.w
    eb70:	e78f      	b.n	ea92 <__ssvfiscanf_r+0x1f6>
    eb72:	89a3      	ldrh	r3, [r4, #12]
    eb74:	065b      	lsls	r3, r3, #25
    eb76:	f53f af6d 	bmi.w	ea54 <__ssvfiscanf_r+0x1b8>
    eb7a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
    eb7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eb82:	9844      	ldr	r0, [sp, #272]	; 0x110
    eb84:	e7f9      	b.n	eb7a <__ssvfiscanf_r+0x2de>
    eb86:	bf00      	nop
    eb88:	00000000 	.word	0x00000000

0000eb8c <_printf_i>:
    eb8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    eb90:	7e0f      	ldrb	r7, [r1, #24]
    eb92:	4691      	mov	r9, r2
    eb94:	4680      	mov	r8, r0
    eb96:	460c      	mov	r4, r1
    eb98:	2f78      	cmp	r7, #120	; 0x78
    eb9a:	469a      	mov	sl, r3
    eb9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    eb9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
    eba2:	d807      	bhi.n	ebb4 <_printf_i+0x28>
    eba4:	2f62      	cmp	r7, #98	; 0x62
    eba6:	d80a      	bhi.n	ebbe <_printf_i+0x32>
    eba8:	2f00      	cmp	r7, #0
    ebaa:	f000 80e0 	beq.w	ed6e <_printf_i+0x1e2>
    ebae:	2f58      	cmp	r7, #88	; 0x58
    ebb0:	f000 80bb 	beq.w	ed2a <_printf_i+0x19e>
    ebb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
    ebb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    ebbc:	e03a      	b.n	ec34 <_printf_i+0xa8>
    ebbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    ebc2:	2b15      	cmp	r3, #21
    ebc4:	d8f6      	bhi.n	ebb4 <_printf_i+0x28>
    ebc6:	a101      	add	r1, pc, #4	; (adr r1, ebcc <_printf_i+0x40>)
    ebc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    ebcc:	0000ec25 	.word	0x0000ec25
    ebd0:	0000ec39 	.word	0x0000ec39
    ebd4:	0000ebb5 	.word	0x0000ebb5
    ebd8:	0000ebb5 	.word	0x0000ebb5
    ebdc:	0000ebb5 	.word	0x0000ebb5
    ebe0:	0000ebb5 	.word	0x0000ebb5
    ebe4:	0000ec39 	.word	0x0000ec39
    ebe8:	0000ebb5 	.word	0x0000ebb5
    ebec:	0000ebb5 	.word	0x0000ebb5
    ebf0:	0000ebb5 	.word	0x0000ebb5
    ebf4:	0000ebb5 	.word	0x0000ebb5
    ebf8:	0000ed55 	.word	0x0000ed55
    ebfc:	0000ecc9 	.word	0x0000ecc9
    ec00:	0000ed0b 	.word	0x0000ed0b
    ec04:	0000ebb5 	.word	0x0000ebb5
    ec08:	0000ebb5 	.word	0x0000ebb5
    ec0c:	0000ed77 	.word	0x0000ed77
    ec10:	0000ebb5 	.word	0x0000ebb5
    ec14:	0000ecc9 	.word	0x0000ecc9
    ec18:	0000ebb5 	.word	0x0000ebb5
    ec1c:	0000ebb5 	.word	0x0000ebb5
    ec20:	0000ed13 	.word	0x0000ed13
    ec24:	682b      	ldr	r3, [r5, #0]
    ec26:	f104 0642 	add.w	r6, r4, #66	; 0x42
    ec2a:	1d1a      	adds	r2, r3, #4
    ec2c:	681b      	ldr	r3, [r3, #0]
    ec2e:	602a      	str	r2, [r5, #0]
    ec30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    ec34:	2301      	movs	r3, #1
    ec36:	e0ab      	b.n	ed90 <_printf_i+0x204>
    ec38:	6823      	ldr	r3, [r4, #0]
    ec3a:	6829      	ldr	r1, [r5, #0]
    ec3c:	061f      	lsls	r7, r3, #24
    ec3e:	f101 0004 	add.w	r0, r1, #4
    ec42:	6028      	str	r0, [r5, #0]
    ec44:	d501      	bpl.n	ec4a <_printf_i+0xbe>
    ec46:	680d      	ldr	r5, [r1, #0]
    ec48:	e003      	b.n	ec52 <_printf_i+0xc6>
    ec4a:	065e      	lsls	r6, r3, #25
    ec4c:	d5fb      	bpl.n	ec46 <_printf_i+0xba>
    ec4e:	f9b1 5000 	ldrsh.w	r5, [r1]
    ec52:	2d00      	cmp	r5, #0
    ec54:	6861      	ldr	r1, [r4, #4]
    ec56:	da7a      	bge.n	ed4e <_printf_i+0x1c2>
    ec58:	202d      	movs	r0, #45	; 0x2d
    ec5a:	2900      	cmp	r1, #0
    ec5c:	60a1      	str	r1, [r4, #8]
    ec5e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    ec62:	da2d      	bge.n	ecc0 <_printf_i+0x134>
    ec64:	426d      	negs	r5, r5
    ec66:	485e      	ldr	r0, [pc, #376]	; (ede0 <_printf_i+0x254>)
    ec68:	230a      	movs	r3, #10
    ec6a:	4616      	mov	r6, r2
    ec6c:	fbb5 f1f3 	udiv	r1, r5, r3
    ec70:	fb03 5711 	mls	r7, r3, r1, r5
    ec74:	5dc7      	ldrb	r7, [r0, r7]
    ec76:	f806 7d01 	strb.w	r7, [r6, #-1]!
    ec7a:	462f      	mov	r7, r5
    ec7c:	460d      	mov	r5, r1
    ec7e:	42bb      	cmp	r3, r7
    ec80:	d9f4      	bls.n	ec6c <_printf_i+0xe0>
    ec82:	2b08      	cmp	r3, #8
    ec84:	d10b      	bne.n	ec9e <_printf_i+0x112>
    ec86:	6823      	ldr	r3, [r4, #0]
    ec88:	07df      	lsls	r7, r3, #31
    ec8a:	d508      	bpl.n	ec9e <_printf_i+0x112>
    ec8c:	6923      	ldr	r3, [r4, #16]
    ec8e:	6861      	ldr	r1, [r4, #4]
    ec90:	4299      	cmp	r1, r3
    ec92:	bfde      	ittt	le
    ec94:	2330      	movle	r3, #48	; 0x30
    ec96:	f806 3c01 	strble.w	r3, [r6, #-1]
    ec9a:	f106 36ff 	addle.w	r6, r6, #4294967295
    ec9e:	1b92      	subs	r2, r2, r6
    eca0:	6122      	str	r2, [r4, #16]
    eca2:	464b      	mov	r3, r9
    eca4:	aa03      	add	r2, sp, #12
    eca6:	4621      	mov	r1, r4
    eca8:	4640      	mov	r0, r8
    ecaa:	f8cd a000 	str.w	sl, [sp]
    ecae:	f001 fd92 	bl	107d6 <_printf_common>
    ecb2:	3001      	adds	r0, #1
    ecb4:	d171      	bne.n	ed9a <_printf_i+0x20e>
    ecb6:	f04f 30ff 	mov.w	r0, #4294967295
    ecba:	b004      	add	sp, #16
    ecbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ecc0:	f023 0304 	bic.w	r3, r3, #4
    ecc4:	6023      	str	r3, [r4, #0]
    ecc6:	e7cd      	b.n	ec64 <_printf_i+0xd8>
    ecc8:	682b      	ldr	r3, [r5, #0]
    ecca:	6820      	ldr	r0, [r4, #0]
    eccc:	1d19      	adds	r1, r3, #4
    ecce:	6029      	str	r1, [r5, #0]
    ecd0:	0605      	lsls	r5, r0, #24
    ecd2:	d501      	bpl.n	ecd8 <_printf_i+0x14c>
    ecd4:	681d      	ldr	r5, [r3, #0]
    ecd6:	e002      	b.n	ecde <_printf_i+0x152>
    ecd8:	0641      	lsls	r1, r0, #25
    ecda:	d5fb      	bpl.n	ecd4 <_printf_i+0x148>
    ecdc:	881d      	ldrh	r5, [r3, #0]
    ecde:	2f6f      	cmp	r7, #111	; 0x6f
    ece0:	483f      	ldr	r0, [pc, #252]	; (ede0 <_printf_i+0x254>)
    ece2:	bf14      	ite	ne
    ece4:	230a      	movne	r3, #10
    ece6:	2308      	moveq	r3, #8
    ece8:	2100      	movs	r1, #0
    ecea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    ecee:	6866      	ldr	r6, [r4, #4]
    ecf0:	2e00      	cmp	r6, #0
    ecf2:	60a6      	str	r6, [r4, #8]
    ecf4:	dbb9      	blt.n	ec6a <_printf_i+0xde>
    ecf6:	6821      	ldr	r1, [r4, #0]
    ecf8:	f021 0104 	bic.w	r1, r1, #4
    ecfc:	6021      	str	r1, [r4, #0]
    ecfe:	2d00      	cmp	r5, #0
    ed00:	d1b3      	bne.n	ec6a <_printf_i+0xde>
    ed02:	2e00      	cmp	r6, #0
    ed04:	d1b1      	bne.n	ec6a <_printf_i+0xde>
    ed06:	4616      	mov	r6, r2
    ed08:	e7bb      	b.n	ec82 <_printf_i+0xf6>
    ed0a:	6823      	ldr	r3, [r4, #0]
    ed0c:	f043 0320 	orr.w	r3, r3, #32
    ed10:	6023      	str	r3, [r4, #0]
    ed12:	2778      	movs	r7, #120	; 0x78
    ed14:	4833      	ldr	r0, [pc, #204]	; (ede4 <_printf_i+0x258>)
    ed16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
    ed1a:	6829      	ldr	r1, [r5, #0]
    ed1c:	6823      	ldr	r3, [r4, #0]
    ed1e:	1d0e      	adds	r6, r1, #4
    ed20:	602e      	str	r6, [r5, #0]
    ed22:	061e      	lsls	r6, r3, #24
    ed24:	d503      	bpl.n	ed2e <_printf_i+0x1a2>
    ed26:	680d      	ldr	r5, [r1, #0]
    ed28:	e004      	b.n	ed34 <_printf_i+0x1a8>
    ed2a:	482d      	ldr	r0, [pc, #180]	; (ede0 <_printf_i+0x254>)
    ed2c:	e7f3      	b.n	ed16 <_printf_i+0x18a>
    ed2e:	065d      	lsls	r5, r3, #25
    ed30:	d5f9      	bpl.n	ed26 <_printf_i+0x19a>
    ed32:	880d      	ldrh	r5, [r1, #0]
    ed34:	07d9      	lsls	r1, r3, #31
    ed36:	bf44      	itt	mi
    ed38:	f043 0320 	orrmi.w	r3, r3, #32
    ed3c:	6023      	strmi	r3, [r4, #0]
    ed3e:	b10d      	cbz	r5, ed44 <_printf_i+0x1b8>
    ed40:	2310      	movs	r3, #16
    ed42:	e7d1      	b.n	ece8 <_printf_i+0x15c>
    ed44:	6823      	ldr	r3, [r4, #0]
    ed46:	f023 0320 	bic.w	r3, r3, #32
    ed4a:	6023      	str	r3, [r4, #0]
    ed4c:	e7f8      	b.n	ed40 <_printf_i+0x1b4>
    ed4e:	4824      	ldr	r0, [pc, #144]	; (ede0 <_printf_i+0x254>)
    ed50:	230a      	movs	r3, #10
    ed52:	e7cc      	b.n	ecee <_printf_i+0x162>
    ed54:	682b      	ldr	r3, [r5, #0]
    ed56:	6826      	ldr	r6, [r4, #0]
    ed58:	1d18      	adds	r0, r3, #4
    ed5a:	6961      	ldr	r1, [r4, #20]
    ed5c:	6028      	str	r0, [r5, #0]
    ed5e:	0635      	lsls	r5, r6, #24
    ed60:	681b      	ldr	r3, [r3, #0]
    ed62:	d501      	bpl.n	ed68 <_printf_i+0x1dc>
    ed64:	6019      	str	r1, [r3, #0]
    ed66:	e002      	b.n	ed6e <_printf_i+0x1e2>
    ed68:	0670      	lsls	r0, r6, #25
    ed6a:	d5fb      	bpl.n	ed64 <_printf_i+0x1d8>
    ed6c:	8019      	strh	r1, [r3, #0]
    ed6e:	2300      	movs	r3, #0
    ed70:	4616      	mov	r6, r2
    ed72:	6123      	str	r3, [r4, #16]
    ed74:	e795      	b.n	eca2 <_printf_i+0x116>
    ed76:	682b      	ldr	r3, [r5, #0]
    ed78:	2100      	movs	r1, #0
    ed7a:	1d1a      	adds	r2, r3, #4
    ed7c:	602a      	str	r2, [r5, #0]
    ed7e:	681e      	ldr	r6, [r3, #0]
    ed80:	6862      	ldr	r2, [r4, #4]
    ed82:	4630      	mov	r0, r6
    ed84:	f001 fe0b 	bl	1099e <memchr>
    ed88:	b108      	cbz	r0, ed8e <_printf_i+0x202>
    ed8a:	1b80      	subs	r0, r0, r6
    ed8c:	6060      	str	r0, [r4, #4]
    ed8e:	6863      	ldr	r3, [r4, #4]
    ed90:	6123      	str	r3, [r4, #16]
    ed92:	2300      	movs	r3, #0
    ed94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    ed98:	e783      	b.n	eca2 <_printf_i+0x116>
    ed9a:	6923      	ldr	r3, [r4, #16]
    ed9c:	4632      	mov	r2, r6
    ed9e:	4649      	mov	r1, r9
    eda0:	4640      	mov	r0, r8
    eda2:	47d0      	blx	sl
    eda4:	3001      	adds	r0, #1
    eda6:	d086      	beq.n	ecb6 <_printf_i+0x12a>
    eda8:	6823      	ldr	r3, [r4, #0]
    edaa:	079b      	lsls	r3, r3, #30
    edac:	d414      	bmi.n	edd8 <_printf_i+0x24c>
    edae:	68e0      	ldr	r0, [r4, #12]
    edb0:	9b03      	ldr	r3, [sp, #12]
    edb2:	4298      	cmp	r0, r3
    edb4:	bfb8      	it	lt
    edb6:	4618      	movlt	r0, r3
    edb8:	e77f      	b.n	ecba <_printf_i+0x12e>
    edba:	2301      	movs	r3, #1
    edbc:	4632      	mov	r2, r6
    edbe:	4649      	mov	r1, r9
    edc0:	4640      	mov	r0, r8
    edc2:	47d0      	blx	sl
    edc4:	3001      	adds	r0, #1
    edc6:	f43f af76 	beq.w	ecb6 <_printf_i+0x12a>
    edca:	3501      	adds	r5, #1
    edcc:	68e3      	ldr	r3, [r4, #12]
    edce:	9903      	ldr	r1, [sp, #12]
    edd0:	1a5b      	subs	r3, r3, r1
    edd2:	42ab      	cmp	r3, r5
    edd4:	dcf1      	bgt.n	edba <_printf_i+0x22e>
    edd6:	e7ea      	b.n	edae <_printf_i+0x222>
    edd8:	2500      	movs	r5, #0
    edda:	f104 0619 	add.w	r6, r4, #25
    edde:	e7f5      	b.n	edcc <_printf_i+0x240>
    ede0:	000115e0 	.word	0x000115e0
    ede4:	000115f1 	.word	0x000115f1

0000ede8 <_scanf_chars>:
    ede8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    edec:	4615      	mov	r5, r2
    edee:	688a      	ldr	r2, [r1, #8]
    edf0:	4680      	mov	r8, r0
    edf2:	460c      	mov	r4, r1
    edf4:	b932      	cbnz	r2, ee04 <_scanf_chars+0x1c>
    edf6:	698a      	ldr	r2, [r1, #24]
    edf8:	2a00      	cmp	r2, #0
    edfa:	bf14      	ite	ne
    edfc:	f04f 32ff 	movne.w	r2, #4294967295
    ee00:	2201      	moveq	r2, #1
    ee02:	608a      	str	r2, [r1, #8]
    ee04:	6822      	ldr	r2, [r4, #0]
    ee06:	2700      	movs	r7, #0
    ee08:	f8df 908c 	ldr.w	r9, [pc, #140]	; ee98 <_scanf_chars+0xb0>
    ee0c:	06d1      	lsls	r1, r2, #27
    ee0e:	bf5f      	itttt	pl
    ee10:	681a      	ldrpl	r2, [r3, #0]
    ee12:	1d11      	addpl	r1, r2, #4
    ee14:	6019      	strpl	r1, [r3, #0]
    ee16:	6816      	ldrpl	r6, [r2, #0]
    ee18:	69a0      	ldr	r0, [r4, #24]
    ee1a:	b188      	cbz	r0, ee40 <_scanf_chars+0x58>
    ee1c:	2801      	cmp	r0, #1
    ee1e:	d107      	bne.n	ee30 <_scanf_chars+0x48>
    ee20:	682b      	ldr	r3, [r5, #0]
    ee22:	781a      	ldrb	r2, [r3, #0]
    ee24:	6963      	ldr	r3, [r4, #20]
    ee26:	5c9b      	ldrb	r3, [r3, r2]
    ee28:	b953      	cbnz	r3, ee40 <_scanf_chars+0x58>
    ee2a:	2f00      	cmp	r7, #0
    ee2c:	d031      	beq.n	ee92 <_scanf_chars+0xaa>
    ee2e:	e022      	b.n	ee76 <_scanf_chars+0x8e>
    ee30:	2802      	cmp	r0, #2
    ee32:	d120      	bne.n	ee76 <_scanf_chars+0x8e>
    ee34:	682b      	ldr	r3, [r5, #0]
    ee36:	781b      	ldrb	r3, [r3, #0]
    ee38:	f819 3003 	ldrb.w	r3, [r9, r3]
    ee3c:	071b      	lsls	r3, r3, #28
    ee3e:	d41a      	bmi.n	ee76 <_scanf_chars+0x8e>
    ee40:	6823      	ldr	r3, [r4, #0]
    ee42:	3701      	adds	r7, #1
    ee44:	06da      	lsls	r2, r3, #27
    ee46:	bf5e      	ittt	pl
    ee48:	682b      	ldrpl	r3, [r5, #0]
    ee4a:	781b      	ldrbpl	r3, [r3, #0]
    ee4c:	f806 3b01 	strbpl.w	r3, [r6], #1
    ee50:	682a      	ldr	r2, [r5, #0]
    ee52:	686b      	ldr	r3, [r5, #4]
    ee54:	3201      	adds	r2, #1
    ee56:	3b01      	subs	r3, #1
    ee58:	602a      	str	r2, [r5, #0]
    ee5a:	68a2      	ldr	r2, [r4, #8]
    ee5c:	606b      	str	r3, [r5, #4]
    ee5e:	3a01      	subs	r2, #1
    ee60:	60a2      	str	r2, [r4, #8]
    ee62:	b142      	cbz	r2, ee76 <_scanf_chars+0x8e>
    ee64:	2b00      	cmp	r3, #0
    ee66:	dcd7      	bgt.n	ee18 <_scanf_chars+0x30>
    ee68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    ee6c:	4629      	mov	r1, r5
    ee6e:	4640      	mov	r0, r8
    ee70:	4798      	blx	r3
    ee72:	2800      	cmp	r0, #0
    ee74:	d0d0      	beq.n	ee18 <_scanf_chars+0x30>
    ee76:	6823      	ldr	r3, [r4, #0]
    ee78:	f013 0310 	ands.w	r3, r3, #16
    ee7c:	d105      	bne.n	ee8a <_scanf_chars+0xa2>
    ee7e:	68e2      	ldr	r2, [r4, #12]
    ee80:	3201      	adds	r2, #1
    ee82:	60e2      	str	r2, [r4, #12]
    ee84:	69a2      	ldr	r2, [r4, #24]
    ee86:	b102      	cbz	r2, ee8a <_scanf_chars+0xa2>
    ee88:	7033      	strb	r3, [r6, #0]
    ee8a:	6923      	ldr	r3, [r4, #16]
    ee8c:	2000      	movs	r0, #0
    ee8e:	443b      	add	r3, r7
    ee90:	6123      	str	r3, [r4, #16]
    ee92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ee96:	bf00      	nop
    ee98:	000114cf 	.word	0x000114cf

0000ee9c <_scanf_i>:
    ee9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eea0:	4698      	mov	r8, r3
    eea2:	b087      	sub	sp, #28
    eea4:	4b78      	ldr	r3, [pc, #480]	; (f088 <_scanf_i+0x1ec>)
    eea6:	460c      	mov	r4, r1
    eea8:	4682      	mov	sl, r0
    eeaa:	4616      	mov	r6, r2
    eeac:	4627      	mov	r7, r4
    eeae:	f04f 0b00 	mov.w	fp, #0
    eeb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    eeb6:	ab03      	add	r3, sp, #12
    eeb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    eebc:	4b73      	ldr	r3, [pc, #460]	; (f08c <_scanf_i+0x1f0>)
    eebe:	69a1      	ldr	r1, [r4, #24]
    eec0:	4a73      	ldr	r2, [pc, #460]	; (f090 <_scanf_i+0x1f4>)
    eec2:	2903      	cmp	r1, #3
    eec4:	bf08      	it	eq
    eec6:	461a      	moveq	r2, r3
    eec8:	68a3      	ldr	r3, [r4, #8]
    eeca:	9201      	str	r2, [sp, #4]
    eecc:	1e5a      	subs	r2, r3, #1
    eece:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
    eed2:	bf89      	itett	hi
    eed4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    eed8:	f04f 0900 	movls.w	r9, #0
    eedc:	eb03 0905 	addhi.w	r9, r3, r5
    eee0:	f240 135d 	movwhi	r3, #349	; 0x15d
    eee4:	bf88      	it	hi
    eee6:	60a3      	strhi	r3, [r4, #8]
    eee8:	f857 3b1c 	ldr.w	r3, [r7], #28
    eeec:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    eef0:	463d      	mov	r5, r7
    eef2:	6023      	str	r3, [r4, #0]
    eef4:	6831      	ldr	r1, [r6, #0]
    eef6:	ab03      	add	r3, sp, #12
    eef8:	2202      	movs	r2, #2
    eefa:	7809      	ldrb	r1, [r1, #0]
    eefc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
    ef00:	f001 fd4d 	bl	1099e <memchr>
    ef04:	2800      	cmp	r0, #0
    ef06:	d040      	beq.n	ef8a <_scanf_i+0xee>
    ef08:	f1bb 0f01 	cmp.w	fp, #1
    ef0c:	d112      	bne.n	ef34 <_scanf_i+0x98>
    ef0e:	6862      	ldr	r2, [r4, #4]
    ef10:	b92a      	cbnz	r2, ef1e <_scanf_i+0x82>
    ef12:	6822      	ldr	r2, [r4, #0]
    ef14:	2108      	movs	r1, #8
    ef16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    ef1a:	6061      	str	r1, [r4, #4]
    ef1c:	6022      	str	r2, [r4, #0]
    ef1e:	6822      	ldr	r2, [r4, #0]
    ef20:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    ef24:	6022      	str	r2, [r4, #0]
    ef26:	68a2      	ldr	r2, [r4, #8]
    ef28:	1e51      	subs	r1, r2, #1
    ef2a:	60a1      	str	r1, [r4, #8]
    ef2c:	b9da      	cbnz	r2, ef66 <_scanf_i+0xca>
    ef2e:	f04f 0b02 	mov.w	fp, #2
    ef32:	e7df      	b.n	eef4 <_scanf_i+0x58>
    ef34:	f1bb 0f02 	cmp.w	fp, #2
    ef38:	d006      	beq.n	ef48 <_scanf_i+0xac>
    ef3a:	68a2      	ldr	r2, [r4, #8]
    ef3c:	1e51      	subs	r1, r2, #1
    ef3e:	60a1      	str	r1, [r4, #8]
    ef40:	b98a      	cbnz	r2, ef66 <_scanf_i+0xca>
    ef42:	f04f 0b01 	mov.w	fp, #1
    ef46:	e7d5      	b.n	eef4 <_scanf_i+0x58>
    ef48:	6822      	ldr	r2, [r4, #0]
    ef4a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    ef4e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    ef52:	d11f      	bne.n	ef94 <_scanf_i+0xf8>
    ef54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    ef58:	2110      	movs	r1, #16
    ef5a:	6022      	str	r2, [r4, #0]
    ef5c:	68a2      	ldr	r2, [r4, #8]
    ef5e:	6061      	str	r1, [r4, #4]
    ef60:	1e51      	subs	r1, r2, #1
    ef62:	60a1      	str	r1, [r4, #8]
    ef64:	b1b2      	cbz	r2, ef94 <_scanf_i+0xf8>
    ef66:	6832      	ldr	r2, [r6, #0]
    ef68:	1c51      	adds	r1, r2, #1
    ef6a:	6031      	str	r1, [r6, #0]
    ef6c:	7812      	ldrb	r2, [r2, #0]
    ef6e:	f805 2b01 	strb.w	r2, [r5], #1
    ef72:	6872      	ldr	r2, [r6, #4]
    ef74:	3a01      	subs	r2, #1
    ef76:	2a00      	cmp	r2, #0
    ef78:	6072      	str	r2, [r6, #4]
    ef7a:	dc06      	bgt.n	ef8a <_scanf_i+0xee>
    ef7c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
    ef80:	4631      	mov	r1, r6
    ef82:	4650      	mov	r0, sl
    ef84:	4790      	blx	r2
    ef86:	2800      	cmp	r0, #0
    ef88:	d174      	bne.n	f074 <_scanf_i+0x1d8>
    ef8a:	f10b 0b01 	add.w	fp, fp, #1
    ef8e:	f1bb 0f03 	cmp.w	fp, #3
    ef92:	d1af      	bne.n	eef4 <_scanf_i+0x58>
    ef94:	6863      	ldr	r3, [r4, #4]
    ef96:	b90b      	cbnz	r3, ef9c <_scanf_i+0x100>
    ef98:	230a      	movs	r3, #10
    ef9a:	6063      	str	r3, [r4, #4]
    ef9c:	6863      	ldr	r3, [r4, #4]
    ef9e:	f04f 0b00 	mov.w	fp, #0
    efa2:	493c      	ldr	r1, [pc, #240]	; (f094 <_scanf_i+0x1f8>)
    efa4:	6960      	ldr	r0, [r4, #20]
    efa6:	1ac9      	subs	r1, r1, r3
    efa8:	f001 fc87 	bl	108ba <__sccl>
    efac:	68a3      	ldr	r3, [r4, #8]
    efae:	6822      	ldr	r2, [r4, #0]
    efb0:	b373      	cbz	r3, f010 <_scanf_i+0x174>
    efb2:	6831      	ldr	r1, [r6, #0]
    efb4:	6960      	ldr	r0, [r4, #20]
    efb6:	f891 c000 	ldrb.w	ip, [r1]
    efba:	f810 000c 	ldrb.w	r0, [r0, ip]
    efbe:	b338      	cbz	r0, f010 <_scanf_i+0x174>
    efc0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
    efc4:	d116      	bne.n	eff4 <_scanf_i+0x158>
    efc6:	0510      	lsls	r0, r2, #20
    efc8:	d514      	bpl.n	eff4 <_scanf_i+0x158>
    efca:	f10b 0b01 	add.w	fp, fp, #1
    efce:	f1b9 0f00 	cmp.w	r9, #0
    efd2:	d003      	beq.n	efdc <_scanf_i+0x140>
    efd4:	3301      	adds	r3, #1
    efd6:	f109 39ff 	add.w	r9, r9, #4294967295
    efda:	60a3      	str	r3, [r4, #8]
    efdc:	6873      	ldr	r3, [r6, #4]
    efde:	3b01      	subs	r3, #1
    efe0:	2b00      	cmp	r3, #0
    efe2:	6073      	str	r3, [r6, #4]
    efe4:	dd0d      	ble.n	f002 <_scanf_i+0x166>
    efe6:	6833      	ldr	r3, [r6, #0]
    efe8:	3301      	adds	r3, #1
    efea:	6033      	str	r3, [r6, #0]
    efec:	68a3      	ldr	r3, [r4, #8]
    efee:	3b01      	subs	r3, #1
    eff0:	60a3      	str	r3, [r4, #8]
    eff2:	e7db      	b.n	efac <_scanf_i+0x110>
    eff4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    eff8:	6022      	str	r2, [r4, #0]
    effa:	780b      	ldrb	r3, [r1, #0]
    effc:	f805 3b01 	strb.w	r3, [r5], #1
    f000:	e7ec      	b.n	efdc <_scanf_i+0x140>
    f002:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    f006:	4631      	mov	r1, r6
    f008:	4650      	mov	r0, sl
    f00a:	4798      	blx	r3
    f00c:	2800      	cmp	r0, #0
    f00e:	d0ed      	beq.n	efec <_scanf_i+0x150>
    f010:	6823      	ldr	r3, [r4, #0]
    f012:	05d9      	lsls	r1, r3, #23
    f014:	d50d      	bpl.n	f032 <_scanf_i+0x196>
    f016:	42bd      	cmp	r5, r7
    f018:	d909      	bls.n	f02e <_scanf_i+0x192>
    f01a:	f105 39ff 	add.w	r9, r5, #4294967295
    f01e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    f022:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    f026:	4632      	mov	r2, r6
    f028:	464d      	mov	r5, r9
    f02a:	4650      	mov	r0, sl
    f02c:	4798      	blx	r3
    f02e:	42bd      	cmp	r5, r7
    f030:	d028      	beq.n	f084 <_scanf_i+0x1e8>
    f032:	6822      	ldr	r2, [r4, #0]
    f034:	f012 0210 	ands.w	r2, r2, #16
    f038:	d113      	bne.n	f062 <_scanf_i+0x1c6>
    f03a:	702a      	strb	r2, [r5, #0]
    f03c:	4639      	mov	r1, r7
    f03e:	6863      	ldr	r3, [r4, #4]
    f040:	4650      	mov	r0, sl
    f042:	9e01      	ldr	r6, [sp, #4]
    f044:	47b0      	blx	r6
    f046:	f8d8 3000 	ldr.w	r3, [r8]
    f04a:	6821      	ldr	r1, [r4, #0]
    f04c:	1d1a      	adds	r2, r3, #4
    f04e:	f011 0f20 	tst.w	r1, #32
    f052:	f8c8 2000 	str.w	r2, [r8]
    f056:	681b      	ldr	r3, [r3, #0]
    f058:	d00f      	beq.n	f07a <_scanf_i+0x1de>
    f05a:	6018      	str	r0, [r3, #0]
    f05c:	68e3      	ldr	r3, [r4, #12]
    f05e:	3301      	adds	r3, #1
    f060:	60e3      	str	r3, [r4, #12]
    f062:	1bed      	subs	r5, r5, r7
    f064:	6923      	ldr	r3, [r4, #16]
    f066:	2000      	movs	r0, #0
    f068:	445d      	add	r5, fp
    f06a:	442b      	add	r3, r5
    f06c:	6123      	str	r3, [r4, #16]
    f06e:	b007      	add	sp, #28
    f070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f074:	f04f 0b00 	mov.w	fp, #0
    f078:	e7ca      	b.n	f010 <_scanf_i+0x174>
    f07a:	07ca      	lsls	r2, r1, #31
    f07c:	bf4c      	ite	mi
    f07e:	8018      	strhmi	r0, [r3, #0]
    f080:	6018      	strpl	r0, [r3, #0]
    f082:	e7eb      	b.n	f05c <_scanf_i+0x1c0>
    f084:	2001      	movs	r0, #1
    f086:	e7f2      	b.n	f06e <_scanf_i+0x1d2>
    f088:	00010dbc 	.word	0x00010dbc
    f08c:	00010613 	.word	0x00010613
    f090:	00010617 	.word	0x00010617
    f094:	00011612 	.word	0x00011612

0000f098 <gpio_pin_configure_dt>:
{
    f098:	4603      	mov	r3, r0
    f09a:	b470      	push	{r4, r5, r6}
    f09c:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
    f09e:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    f0a0:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    f0a2:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
    f0a4:	4322      	orrs	r2, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
    f0a6:	2401      	movs	r4, #1
	struct gpio_driver_data *data =
    f0a8:	6905      	ldr	r5, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    f0aa:	408c      	lsls	r4, r1
    f0ac:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    f0ae:	f012 0f01 	tst.w	r2, #1
	const struct gpio_driver_api *api =
    f0b2:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    f0b4:	bf14      	ite	ne
    f0b6:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    f0b8:	43a3      	biceq	r3, r4
    f0ba:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
    f0bc:	6833      	ldr	r3, [r6, #0]
}
    f0be:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
    f0c0:	4718      	bx	r3

0000f0c2 <button_pressed>:
}
    f0c2:	4770      	bx	lr

0000f0c4 <arch_printk_char_out>:
}
    f0c4:	2000      	movs	r0, #0
    f0c6:	4770      	bx	lr

0000f0c8 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    f0c8:	b40f      	push	{r0, r1, r2, r3}
    f0ca:	b507      	push	{r0, r1, r2, lr}
    f0cc:	a904      	add	r1, sp, #16
    f0ce:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    f0d2:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    f0d4:	f7f9 fa3a 	bl	854c <vprintk>

	va_end(ap);
}
    f0d8:	b003      	add	sp, #12
    f0da:	f85d eb04 	ldr.w	lr, [sp], #4
    f0de:	b004      	add	sp, #16
    f0e0:	4770      	bx	lr

0000f0e2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    f0e2:	4604      	mov	r4, r0
    f0e4:	b508      	push	{r3, lr}
    f0e6:	4608      	mov	r0, r1
    f0e8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    f0ea:	461a      	mov	r2, r3
    f0ec:	47a0      	blx	r4
	return z_impl_z_current_get();
    f0ee:	f7fe fe23 	bl	dd38 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    f0f2:	f7fa fc67 	bl	99c4 <z_impl_k_thread_abort>

0000f0f6 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    f0f6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    f0fa:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    f0fc:	0840      	lsrs	r0, r0, #1
    f0fe:	4770      	bx	lr

0000f100 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    f100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f102:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    f104:	f7ff fff7 	bl	f0f6 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    f108:	fab0 f080 	clz	r0, r0
    f10c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    f110:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
    f114:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
    f118:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
    f11a:	1d17      	adds	r7, r2, #4
{
    f11c:	460c      	mov	r4, r1
    f11e:	3206      	adds	r2, #6
    f120:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    f122:	b956      	cbnz	r6, f13a <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    f124:	2101      	movs	r1, #1
    f126:	fa01 f000 	lsl.w	r0, r1, r0
    f12a:	68d9      	ldr	r1, [r3, #12]
    f12c:	4301      	orrs	r1, r0
    f12e:	60d9      	str	r1, [r3, #12]
		b->next = c;
    f130:	f8cc 4010 	str.w	r4, [ip, #16]
    f134:	53dd      	strh	r5, [r3, r7]
    f136:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    f138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    f13a:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    f13c:	3104      	adds	r1, #4
    f13e:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    f140:	53d8      	strh	r0, [r3, r7]
    f142:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    f146:	529e      	strh	r6, [r3, r2]
    f148:	80c5      	strh	r5, [r0, #6]
    f14a:	525d      	strh	r5, [r3, r1]
    f14c:	e7f4      	b.n	f138 <free_list_add+0x38>

0000f14e <free_list_remove_bidx>:
{
    f14e:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    f150:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    f154:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    f156:	4299      	cmp	r1, r3
    f158:	f102 0104 	add.w	r1, r2, #4
    f15c:	d10a      	bne.n	f174 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    f15e:	2301      	movs	r3, #1
    f160:	fa03 f202 	lsl.w	r2, r3, r2
    f164:	68c3      	ldr	r3, [r0, #12]
    f166:	ea23 0302 	bic.w	r3, r3, r2
    f16a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    f16c:	2300      	movs	r3, #0
    f16e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    f172:	bd10      	pop	{r4, pc}
    f174:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    f176:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    f17a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    f17e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    f182:	80cb      	strh	r3, [r1, #6]
    f184:	8082      	strh	r2, [r0, #4]
}
    f186:	e7f4      	b.n	f172 <free_list_remove_bidx+0x24>

0000f188 <free_list_remove>:
{
    f188:	b508      	push	{r3, lr}
    f18a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    f18c:	f7ff ffb3 	bl	f0f6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    f190:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    f194:	4618      	mov	r0, r3
}
    f196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    f19a:	f1c2 021f 	rsb	r2, r2, #31
    f19e:	f7ff bfd6 	b.w	f14e <free_list_remove_bidx>

0000f1a2 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    f1a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f1a6:	fab1 f581 	clz	r5, r1
    f1aa:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    f1ae:	eb00 0889 	add.w	r8, r0, r9, lsl #2
    f1b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    f1b6:	4603      	mov	r3, r0
    f1b8:	460e      	mov	r6, r1
	if (b->next) {
    f1ba:	b1c2      	cbz	r2, f1ee <alloc_chunk+0x4c>
    f1bc:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    f1be:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    f1c2:	4618      	mov	r0, r3
    f1c4:	4621      	mov	r1, r4
    f1c6:	f7ff ff96 	bl	f0f6 <chunk_size>
    f1ca:	42b0      	cmp	r0, r6
    f1cc:	d306      	bcc.n	f1dc <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    f1ce:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    f1d0:	4618      	mov	r0, r3
    f1d2:	f7ff ffbc 	bl	f14e <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    f1d6:	4620      	mov	r0, r4
    f1d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    f1dc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    f1e0:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
    f1e2:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
    f1e4:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    f1e8:	d001      	beq.n	f1ee <alloc_chunk+0x4c>
    f1ea:	4282      	cmp	r2, r0
    f1ec:	d1e7      	bne.n	f1be <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    f1ee:	f04f 34ff 	mov.w	r4, #4294967295
    f1f2:	f1c5 0220 	rsb	r2, r5, #32
    f1f6:	4094      	lsls	r4, r2
    f1f8:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    f1fa:	4014      	ands	r4, r2
    f1fc:	d0eb      	beq.n	f1d6 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    f1fe:	fa94 f2a4 	rbit	r2, r4
    f202:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    f206:	1d11      	adds	r1, r2, #4
    f208:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    f20c:	4621      	mov	r1, r4
    f20e:	e7df      	b.n	f1d0 <alloc_chunk+0x2e>

0000f210 <merge_chunks>:
{
    f210:	b538      	push	{r3, r4, r5, lr}
    f212:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    f214:	f7ff ff6f 	bl	f0f6 <chunk_size>
{
    f218:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    f21a:	4604      	mov	r4, r0
    f21c:	4611      	mov	r1, r2
    f21e:	4618      	mov	r0, r3
    f220:	f7ff ff69 	bl	f0f6 <chunk_size>
    f224:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    f226:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    f228:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    f22c:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    f22e:	4618      	mov	r0, r3
    f230:	f7ff ff61 	bl	f0f6 <chunk_size>
	void *cmem = &buf[c];
    f234:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    f236:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    f23a:	bd38      	pop	{r3, r4, r5, pc}

0000f23c <split_chunks>:
{
    f23c:	b538      	push	{r3, r4, r5, lr}
    f23e:	460c      	mov	r4, r1
    f240:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    f242:	f7ff ff58 	bl	f0f6 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
    f246:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    f248:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
    f24a:	4405      	add	r5, r0
    f24c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    f250:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    f252:	8060      	strh	r0, [r4, #2]
    f254:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    f258:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    f25a:	8044      	strh	r4, [r0, #2]
    f25c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    f260:	4618      	mov	r0, r3
    f262:	4611      	mov	r1, r2
    f264:	f7ff ff47 	bl	f0f6 <chunk_size>
	void *cmem = &buf[c];
    f268:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    f26a:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    f26e:	bd38      	pop	{r3, r4, r5, pc}

0000f270 <free_chunk>:
{
    f270:	b538      	push	{r3, r4, r5, lr}
    f272:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    f274:	f7ff ff3f 	bl	f0f6 <chunk_size>
    f278:	460c      	mov	r4, r1
    f27a:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    f27c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    f280:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    f282:	07da      	lsls	r2, r3, #31
    f284:	d40a      	bmi.n	f29c <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    f286:	4628      	mov	r0, r5
    f288:	f7ff ff7e 	bl	f188 <free_list_remove>
	return c + chunk_size(h, c);
    f28c:	4621      	mov	r1, r4
    f28e:	4628      	mov	r0, r5
    f290:	f7ff ff31 	bl	f0f6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    f294:	1822      	adds	r2, r4, r0
    f296:	4628      	mov	r0, r5
    f298:	f7ff ffba 	bl	f210 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    f29c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    f2a0:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    f2a2:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    f2a6:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    f2a8:	07db      	lsls	r3, r3, #31
    f2aa:	d40c      	bmi.n	f2c6 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    f2ac:	4628      	mov	r0, r5
    f2ae:	f7ff ff6b 	bl	f188 <free_list_remove>
		return ((uint16_t *)cmem)[f];
    f2b2:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    f2b6:	4622      	mov	r2, r4
    f2b8:	1a61      	subs	r1, r4, r1
    f2ba:	4628      	mov	r0, r5
    f2bc:	f7ff ffa8 	bl	f210 <merge_chunks>
    f2c0:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    f2c4:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    f2c6:	4621      	mov	r1, r4
    f2c8:	4628      	mov	r0, r5
}
    f2ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    f2ce:	f7ff bf17 	b.w	f100 <free_list_add>

0000f2d2 <sys_heap_free>:
	if (mem == NULL) {
    f2d2:	b161      	cbz	r1, f2ee <sys_heap_free+0x1c>
    f2d4:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    f2d6:	3904      	subs	r1, #4
    f2d8:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    f2da:	f021 0307 	bic.w	r3, r1, #7
    f2de:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    f2e0:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
    f2e2:	08c9      	lsrs	r1, r1, #3
    f2e4:	f022 0201 	bic.w	r2, r2, #1
    f2e8:	805a      	strh	r2, [r3, #2]
    f2ea:	f7ff bfc1 	b.w	f270 <free_chunk>
}
    f2ee:	4770      	bx	lr

0000f2f0 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    f2f0:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    f2f2:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    f2f4:	b909      	cbnz	r1, f2fa <sys_heap_alloc+0xa>
		return NULL;
    f2f6:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    f2f8:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    f2fa:	68ab      	ldr	r3, [r5, #8]
    f2fc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    f300:	d9f9      	bls.n	f2f6 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    f302:	310b      	adds	r1, #11
    f304:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    f306:	4621      	mov	r1, r4
    f308:	4628      	mov	r0, r5
    f30a:	f7ff ff4a 	bl	f1a2 <alloc_chunk>
	if (c == 0U) {
    f30e:	4606      	mov	r6, r0
    f310:	2800      	cmp	r0, #0
    f312:	d0f0      	beq.n	f2f6 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    f314:	4601      	mov	r1, r0
    f316:	4628      	mov	r0, r5
    f318:	f7ff feed 	bl	f0f6 <chunk_size>
    f31c:	42a0      	cmp	r0, r4
    f31e:	d907      	bls.n	f330 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    f320:	4628      	mov	r0, r5
    f322:	1932      	adds	r2, r6, r4
    f324:	f7ff ff8a 	bl	f23c <split_chunks>
		free_list_add(h, c + chunk_sz);
    f328:	4611      	mov	r1, r2
    f32a:	4628      	mov	r0, r5
    f32c:	f7ff fee8 	bl	f100 <free_list_add>
	void *cmem = &buf[c];
    f330:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    f334:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    f336:	8853      	ldrh	r3, [r2, #2]
    f338:	3004      	adds	r0, #4
    f33a:	f043 0301 	orr.w	r3, r3, #1
    f33e:	8053      	strh	r3, [r2, #2]
	return mem;
    f340:	e7da      	b.n	f2f8 <sys_heap_alloc+0x8>

0000f342 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    f342:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f346:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    f34a:	ea19 0901 	ands.w	r9, r9, r1
{
    f34e:	460f      	mov	r7, r1
    f350:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    f352:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    f354:	d00c      	beq.n	f370 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
    f356:	424b      	negs	r3, r1
    f358:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    f35a:	2b04      	cmp	r3, #4
    f35c:	461a      	mov	r2, r3
    f35e:	464f      	mov	r7, r9
    f360:	bf28      	it	cs
    f362:	2204      	movcs	r2, #4
	rew = align & -align;
    f364:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    f366:	b964      	cbnz	r4, f382 <sys_heap_aligned_alloc+0x40>
		return NULL;
    f368:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    f36a:	4628      	mov	r0, r5
    f36c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    f370:	2904      	cmp	r1, #4
    f372:	d804      	bhi.n	f37e <sys_heap_aligned_alloc+0x3c>
}
    f374:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    f378:	4611      	mov	r1, r2
    f37a:	f7ff bfb9 	b.w	f2f0 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
    f37e:	2204      	movs	r2, #4
    f380:	e7f1      	b.n	f366 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
    f382:	68b3      	ldr	r3, [r6, #8]
    f384:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    f388:	d9ee      	bls.n	f368 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    f38a:	f104 010b 	add.w	r1, r4, #11
    f38e:	4439      	add	r1, r7
    f390:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    f392:	4630      	mov	r0, r6
    f394:	08c9      	lsrs	r1, r1, #3
    f396:	f7ff ff04 	bl	f1a2 <alloc_chunk>
	if (c0 == 0) {
    f39a:	4680      	mov	r8, r0
    f39c:	2800      	cmp	r0, #0
    f39e:	d0e3      	beq.n	f368 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    f3a0:	f109 0504 	add.w	r5, r9, #4
    f3a4:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    f3a8:	1e7b      	subs	r3, r7, #1
    f3aa:	4435      	add	r5, r6
    f3ac:	441d      	add	r5, r3
    f3ae:	427f      	negs	r7, r7
    f3b0:	403d      	ands	r5, r7
    f3b2:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    f3b6:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    f3b8:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    f3ba:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    f3bc:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    f3be:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    f3c2:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    f3c4:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    f3c8:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    f3cc:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    f3d0:	d208      	bcs.n	f3e4 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
    f3d2:	4601      	mov	r1, r0
    f3d4:	463a      	mov	r2, r7
    f3d6:	4630      	mov	r0, r6
    f3d8:	f7ff ff30 	bl	f23c <split_chunks>
		free_list_add(h, c0);
    f3dc:	4641      	mov	r1, r8
    f3de:	4630      	mov	r0, r6
    f3e0:	f7ff fe8e 	bl	f100 <free_list_add>
	return c + chunk_size(h, c);
    f3e4:	4639      	mov	r1, r7
    f3e6:	4630      	mov	r0, r6
    f3e8:	f7ff fe85 	bl	f0f6 <chunk_size>
    f3ec:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    f3ee:	4284      	cmp	r4, r0
    f3f0:	d207      	bcs.n	f402 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
    f3f2:	4630      	mov	r0, r6
    f3f4:	4622      	mov	r2, r4
    f3f6:	f7ff ff21 	bl	f23c <split_chunks>
		free_list_add(h, c_end);
    f3fa:	4621      	mov	r1, r4
    f3fc:	4630      	mov	r0, r6
    f3fe:	f7ff fe7f 	bl	f100 <free_list_add>
	void *cmem = &buf[c];
    f402:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    f406:	8873      	ldrh	r3, [r6, #2]
    f408:	f043 0301 	orr.w	r3, r3, #1
    f40c:	8073      	strh	r3, [r6, #2]
    f40e:	e7ac      	b.n	f36a <sys_heap_aligned_alloc+0x28>

0000f410 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    f410:	3a04      	subs	r2, #4
{
    f412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    f416:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    f418:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    f41a:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    f41e:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    f422:	1b0e      	subs	r6, r1, r4
    f424:	08f7      	lsrs	r7, r6, #3
	return 31 - __builtin_clz(usable_sz);
    f426:	fab7 f287 	clz	r2, r7
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    f42a:	f04f 0800 	mov.w	r8, #0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    f42e:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
    f432:	00ad      	lsls	r5, r5, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    f434:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    f436:	f1c2 0220 	rsb	r2, r2, #32
    f43a:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
    f43c:	6004      	str	r4, [r0, #0]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    f43e:	4641      	mov	r1, r8
	h->end_chunk = heap_sz;
    f440:	60a7      	str	r7, [r4, #8]
	h->avail_buckets = 0;
    f442:	f8c4 800c 	str.w	r8, [r4, #12]
		h->buckets[i].next = 0;
    f446:	0092      	lsls	r2, r2, #2
    f448:	f104 0010 	add.w	r0, r4, #16
    f44c:	f001 f88a 	bl	10564 <memset>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    f450:	006b      	lsls	r3, r5, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    f452:	f043 0301 	orr.w	r3, r3, #1
    f456:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    f458:	1b7b      	subs	r3, r7, r5
		((uint16_t *)cmem)[f] = val;
    f45a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    f45e:	0059      	lsls	r1, r3, #1
		((uint16_t *)cmem)[f] = val;
    f460:	f8a4 8000 	strh.w	r8, [r4]
    f464:	8051      	strh	r1, [r2, #2]
    f466:	19a2      	adds	r2, r4, r6
    f468:	f824 5035 	strh.w	r5, [r4, r5, lsl #3]
    f46c:	f8a2 8002 	strh.w	r8, [r2, #2]
    f470:	53a3      	strh	r3, [r4, r6]
	void *cmem = &buf[c];
    f472:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    f476:	885a      	ldrh	r2, [r3, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    f478:	4629      	mov	r1, r5
    f47a:	f042 0201 	orr.w	r2, r2, #1
    f47e:	805a      	strh	r2, [r3, #2]
    f480:	4620      	mov	r0, r4
}
    f482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    f486:	f7ff be3b 	b.w	f100 <free_list_add>

0000f48a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f48a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    f48c:	f013 0307 	ands.w	r3, r3, #7
    f490:	d105      	bne.n	f49e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    f492:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    f494:	2b00      	cmp	r3, #0
    f496:	bf0c      	ite	eq
    f498:	2000      	moveq	r0, #0
    f49a:	2003      	movne	r0, #3
    f49c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    f49e:	2b02      	cmp	r3, #2
    f4a0:	d105      	bne.n	f4ae <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    f4a2:	8b40      	ldrh	r0, [r0, #26]
    f4a4:	fab0 f080 	clz	r0, r0
    f4a8:	0940      	lsrs	r0, r0, #5
    f4aa:	0080      	lsls	r0, r0, #2
    f4ac:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    f4ae:	2b01      	cmp	r3, #1
    f4b0:	d105      	bne.n	f4be <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    f4b2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    f4b4:	2b00      	cmp	r3, #0
    f4b6:	bf0c      	ite	eq
    f4b8:	2000      	moveq	r0, #0
    f4ba:	2005      	movne	r0, #5
    f4bc:	4770      	bx	lr
	int evt = EVT_NOP;
    f4be:	2000      	movs	r0, #0
}
    f4c0:	4770      	bx	lr

0000f4c2 <validate_args>:
{
    f4c2:	b510      	push	{r4, lr}
    f4c4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    f4c6:	b100      	cbz	r0, f4ca <validate_args+0x8>
    f4c8:	b911      	cbnz	r1, f4d0 <validate_args+0xe>
		return -EINVAL;
    f4ca:	f06f 0015 	mvn.w	r0, #21
}
    f4ce:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    f4d0:	1d08      	adds	r0, r1, #4
    f4d2:	f000 f895 	bl	f600 <sys_notify_validate>
	if ((rv == 0)
    f4d6:	2800      	cmp	r0, #0
    f4d8:	d1f9      	bne.n	f4ce <validate_args+0xc>
	    && ((cli->notify.flags
    f4da:	68a3      	ldr	r3, [r4, #8]
    f4dc:	2b03      	cmp	r3, #3
    f4de:	d9f6      	bls.n	f4ce <validate_args+0xc>
    f4e0:	e7f3      	b.n	f4ca <validate_args+0x8>

0000f4e2 <notify_one>:
{
    f4e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f4e6:	460d      	mov	r5, r1
    f4e8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    f4ea:	4619      	mov	r1, r3
    f4ec:	1d28      	adds	r0, r5, #4
{
    f4ee:	4690      	mov	r8, r2
    f4f0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    f4f2:	f000 f896 	bl	f622 <sys_notify_finalize>
	if (cb) {
    f4f6:	4604      	mov	r4, r0
    f4f8:	b138      	cbz	r0, f50a <notify_one+0x28>
		cb(mgr, cli, state, res);
    f4fa:	4633      	mov	r3, r6
    f4fc:	4642      	mov	r2, r8
    f4fe:	4629      	mov	r1, r5
    f500:	4638      	mov	r0, r7
    f502:	46a4      	mov	ip, r4
}
    f504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    f508:	4760      	bx	ip
}
    f50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f50e <transition_complete>:
{
    f50e:	b410      	push	{r4}
	__asm__ volatile(
    f510:	f04f 0420 	mov.w	r4, #32
    f514:	f3ef 8211 	mrs	r2, BASEPRI
    f518:	f384 8812 	msr	BASEPRI_MAX, r4
    f51c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    f520:	6141      	str	r1, [r0, #20]
}
    f522:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    f524:	2101      	movs	r1, #1
    f526:	f7f9 b81f 	b.w	8568 <process_event>

0000f52a <onoff_manager_init>:
{
    f52a:	b538      	push	{r3, r4, r5, lr}
    f52c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    f52e:	4605      	mov	r5, r0
    f530:	b158      	cbz	r0, f54a <onoff_manager_init+0x20>
	    || (transitions == NULL)
    f532:	b151      	cbz	r1, f54a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    f534:	680b      	ldr	r3, [r1, #0]
    f536:	b143      	cbz	r3, f54a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    f538:	684b      	ldr	r3, [r1, #4]
    f53a:	b133      	cbz	r3, f54a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    f53c:	221c      	movs	r2, #28
    f53e:	2100      	movs	r1, #0
    f540:	f001 f810 	bl	10564 <memset>
	return 0;
    f544:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    f546:	612c      	str	r4, [r5, #16]
}
    f548:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    f54a:	f06f 0015 	mvn.w	r0, #21
    f54e:	e7fb      	b.n	f548 <onoff_manager_init+0x1e>

0000f550 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    f550:	b570      	push	{r4, r5, r6, lr}
    f552:	4605      	mov	r5, r0
    f554:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    f556:	f7ff ffb4 	bl	f4c2 <validate_args>

	if (rv < 0) {
    f55a:	1e04      	subs	r4, r0, #0
    f55c:	db15      	blt.n	f58a <onoff_request+0x3a>
    f55e:	f04f 0320 	mov.w	r3, #32
    f562:	f3ef 8211 	mrs	r2, BASEPRI
    f566:	f383 8812 	msr	BASEPRI_MAX, r3
    f56a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    f56e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f572:	8b6b      	ldrh	r3, [r5, #26]
    f574:	8b2c      	ldrh	r4, [r5, #24]
    f576:	428b      	cmp	r3, r1
    f578:	f004 0407 	and.w	r4, r4, #7
    f57c:	d107      	bne.n	f58e <onoff_request+0x3e>
	__asm__ volatile(
    f57e:	f382 8811 	msr	BASEPRI, r2
    f582:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    f586:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    f58a:	4620      	mov	r0, r4
    f58c:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    f58e:	2c02      	cmp	r4, #2
    f590:	d10c      	bne.n	f5ac <onoff_request+0x5c>
		mgr->refs += 1U;
    f592:	3301      	adds	r3, #1
    f594:	836b      	strh	r3, [r5, #26]
    f596:	f382 8811 	msr	BASEPRI, r2
    f59a:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    f59e:	2300      	movs	r3, #0
    f5a0:	4622      	mov	r2, r4
    f5a2:	4631      	mov	r1, r6
    f5a4:	4628      	mov	r0, r5
    f5a6:	f7ff ff9c 	bl	f4e2 <notify_one>
    f5aa:	e7ee      	b.n	f58a <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    f5ac:	2c06      	cmp	r4, #6
    f5ae:	d814      	bhi.n	f5da <onoff_request+0x8a>
    f5b0:	e8df f004 	tbb	[pc, r4]
    f5b4:	13131304 	.word	0x13131304
    f5b8:	1a04      	.short	0x1a04
    f5ba:	04          	.byte	0x04
    f5bb:	00          	.byte	0x00
	parent->next = child;
    f5bc:	2300      	movs	r3, #0
    f5be:	6033      	str	r3, [r6, #0]
	return list->tail;
    f5c0:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    f5c2:	b93b      	cbnz	r3, f5d4 <onoff_request+0x84>
	list->head = node;
    f5c4:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    f5c8:	b9ac      	cbnz	r4, f5f6 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    f5ca:	2102      	movs	r1, #2
    f5cc:	4628      	mov	r0, r5
    f5ce:	f7f8 ffcb 	bl	8568 <process_event>
    f5d2:	e7da      	b.n	f58a <onoff_request+0x3a>
	parent->next = child;
    f5d4:	601e      	str	r6, [r3, #0]
	list->tail = node;
    f5d6:	606e      	str	r6, [r5, #4]
}
    f5d8:	e7f6      	b.n	f5c8 <onoff_request+0x78>
    f5da:	f382 8811 	msr	BASEPRI, r2
    f5de:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    f5e2:	f06f 0404 	mvn.w	r4, #4
    f5e6:	e7d0      	b.n	f58a <onoff_request+0x3a>
    f5e8:	f382 8811 	msr	BASEPRI, r2
    f5ec:	f3bf 8f6f 	isb	sy
    f5f0:	f06f 0485 	mvn.w	r4, #133	; 0x85
    f5f4:	e7c9      	b.n	f58a <onoff_request+0x3a>
    f5f6:	f382 8811 	msr	BASEPRI, r2
    f5fa:	f3bf 8f6f 	isb	sy
		if (notify) {
    f5fe:	e7c4      	b.n	f58a <onoff_request+0x3a>

0000f600 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    f600:	4603      	mov	r3, r0
    f602:	b158      	cbz	r0, f61c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    f604:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    f606:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    f60a:	2a01      	cmp	r2, #1
    f60c:	d003      	beq.n	f616 <sys_notify_validate+0x16>
    f60e:	2a03      	cmp	r2, #3
    f610:	d104      	bne.n	f61c <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    f612:	6802      	ldr	r2, [r0, #0]
    f614:	b112      	cbz	r2, f61c <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    f616:	2000      	movs	r0, #0
    f618:	6098      	str	r0, [r3, #8]
    f61a:	4770      	bx	lr
    f61c:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    f620:	4770      	bx	lr

0000f622 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    f622:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    f624:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    f626:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    f62a:	2a03      	cmp	r2, #3
    f62c:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    f630:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    f632:	bf14      	ite	ne
    f634:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    f636:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    f638:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    f63a:	4770      	bx	lr

0000f63c <outs>:
{
    f63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f640:	4607      	mov	r7, r0
    f642:	4688      	mov	r8, r1
    f644:	4615      	mov	r5, r2
    f646:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    f648:	4614      	mov	r4, r2
    f64a:	42b4      	cmp	r4, r6
    f64c:	d305      	bcc.n	f65a <outs+0x1e>
    f64e:	b10e      	cbz	r6, f654 <outs+0x18>
	return (int)count;
    f650:	1b60      	subs	r0, r4, r5
    f652:	e008      	b.n	f666 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    f654:	7823      	ldrb	r3, [r4, #0]
    f656:	2b00      	cmp	r3, #0
    f658:	d0fa      	beq.n	f650 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    f65a:	4641      	mov	r1, r8
    f65c:	f814 0b01 	ldrb.w	r0, [r4], #1
    f660:	47b8      	blx	r7
		if (rc < 0) {
    f662:	2800      	cmp	r0, #0
    f664:	daf1      	bge.n	f64a <outs+0xe>
}
    f666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f66a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    f66a:	4770      	bx	lr

0000f66c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    f66c:	2806      	cmp	r0, #6
    f66e:	d108      	bne.n	f682 <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    f670:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f674:	2201      	movs	r2, #1
    f676:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    f67a:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
    f67e:	bf20      	wfe
    while (true)
    f680:	e7fd      	b.n	f67e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    f682:	4770      	bx	lr

0000f684 <pm_state_exit_post_ops>:
    f684:	2300      	movs	r3, #0
    f686:	f383 8811 	msr	BASEPRI, r3
    f68a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    f68e:	4770      	bx	lr

0000f690 <pm_device_is_busy>:
	return false;
}

bool pm_device_is_busy(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
    f690:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
    f692:	b120      	cbz	r0, f69e <pm_device_is_busy+0xe>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f694:	3004      	adds	r0, #4
    f696:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f69a:	f000 0001 	and.w	r0, r0, #1
		return false;
	}

	return atomic_test_bit(&pm->flags, PM_DEVICE_FLAG_BUSY);
}
    f69e:	4770      	bx	lr

0000f6a0 <pm_device_wakeup_is_enabled>:
	return atomic_cas(&pm->flags, flags, new_flags);
}

bool pm_device_wakeup_is_enabled(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
    f6a0:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
    f6a2:	b120      	cbz	r0, f6ae <pm_device_wakeup_is_enabled+0xe>
    f6a4:	3004      	adds	r0, #4
    f6a6:	e8d0 0faf 	lda	r0, [r0]
    f6aa:	f3c0 1000 	ubfx	r0, r0, #4, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
			       PM_DEVICE_FLAG_WS_ENABLED);
}
    f6ae:	4770      	bx	lr

0000f6b0 <pm_device_state_is_locked>:
	}
}

bool pm_device_state_is_locked(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
    f6b0:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
    f6b2:	b120      	cbz	r0, f6be <pm_device_state_is_locked+0xe>
    f6b4:	3004      	adds	r0, #4
    f6b6:	e8d0 0faf 	lda	r0, [r0]
    f6ba:	f3c0 1080 	ubfx	r0, r0, #6, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
			       PM_DEVICE_FLAG_STATE_LOCKED);
}
    f6be:	4770      	bx	lr

0000f6c0 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    f6c0:	f000 bc74 	b.w	ffac <z_fatal_error>

0000f6c4 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    f6c4:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    f6c6:	6800      	ldr	r0, [r0, #0]
    f6c8:	f000 bc70 	b.w	ffac <z_fatal_error>

0000f6cc <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    f6cc:	2100      	movs	r1, #0
    f6ce:	2001      	movs	r0, #1
    f6d0:	f7ff bff6 	b.w	f6c0 <z_arm_fatal_error>

0000f6d4 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    f6d4:	b508      	push	{r3, lr}
	handler();
    f6d6:	f7f9 fec7 	bl	9468 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    f6da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    f6de:	f7f9 bf8f 	b.w	9600 <z_arm_exc_exit>

0000f6e2 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    f6e2:	6e43      	ldr	r3, [r0, #100]	; 0x64
    f6e4:	f383 880b 	msr	PSPLIM, r3
}
    f6e8:	4770      	bx	lr

0000f6ea <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
    f6ea:	4770      	bx	lr

0000f6ec <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
    f6ec:	4770      	bx	lr

0000f6ee <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    f6ee:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    f6f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    f6f6:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    f6f8:	bf08      	it	eq
    f6fa:	f06f 0015 	mvneq.w	r0, #21
    f6fe:	4770      	bx	lr

0000f700 <mpu_configure_region>:
{
    f700:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
    f702:	890a      	ldrh	r2, [r1, #8]
    f704:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
    f706:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
    f708:	684d      	ldr	r5, [r1, #4]
    f70a:	f002 021f 	and.w	r2, r2, #31
    f70e:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
    f712:	9300      	str	r3, [sp, #0]
    f714:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    f718:	f023 031f 	bic.w	r3, r3, #31
    f71c:	1e6a      	subs	r2, r5, #1
    f71e:	4413      	add	r3, r2
    f720:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    f724:	280f      	cmp	r0, #15
    f726:	9303      	str	r3, [sp, #12]
    f728:	d804      	bhi.n	f734 <mpu_configure_region+0x34>
	region_init(index, region_conf);
    f72a:	4669      	mov	r1, sp
    f72c:	f7fa f97c 	bl	9a28 <region_init>
}
    f730:	b004      	add	sp, #16
    f732:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    f734:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
    f738:	e7fa      	b.n	f730 <mpu_configure_region+0x30>

0000f73a <malloc_prepare>:
}
    f73a:	2000      	movs	r0, #0
    f73c:	4770      	bx	lr

0000f73e <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
    f73e:	f04f 32ff 	mov.w	r2, #4294967295
    f742:	f04f 33ff 	mov.w	r3, #4294967295
    f746:	f7fd bdb5 	b.w	d2b4 <z_impl_k_mutex_lock>

0000f74a <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
    f74a:	f7fd be2d 	b.w	d3a8 <z_impl_k_mutex_unlock>

0000f74e <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    f74e:	f7fd bbd7 	b.w	cf00 <z_impl_z_errno>

0000f752 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    f752:	220c      	movs	r2, #12
    f754:	6903      	ldr	r3, [r0, #16]
    f756:	b2c9      	uxtb	r1, r1
    f758:	fb01 3302 	mla	r3, r1, r2, r3
    f75c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    f75e:	f000 0007 	and.w	r0, r0, #7
    f762:	4770      	bx	lr

0000f764 <set_on_state>:
	__asm__ volatile(
    f764:	f04f 0320 	mov.w	r3, #32
    f768:	f3ef 8211 	mrs	r2, BASEPRI
    f76c:	f383 8812 	msr	BASEPRI_MAX, r3
    f770:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    f774:	6803      	ldr	r3, [r0, #0]
    f776:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f77a:	f043 0302 	orr.w	r3, r3, #2
    f77e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    f780:	f382 8811 	msr	BASEPRI, r2
    f784:	f3bf 8f6f 	isb	sy
}
    f788:	4770      	bx	lr

0000f78a <stop>:
{
    f78a:	b570      	push	{r4, r5, r6, lr}
    f78c:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    f78e:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    f790:	f04f 0420 	mov.w	r4, #32
    f794:	f3ef 8511 	mrs	r5, BASEPRI
    f798:	f384 8812 	msr	BASEPRI_MAX, r4
    f79c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    f7a0:	260c      	movs	r6, #12
    f7a2:	fb06 3401 	mla	r4, r6, r1, r3
    f7a6:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    f7a8:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    f7ac:	d008      	beq.n	f7c0 <stop+0x36>
    f7ae:	42a2      	cmp	r2, r4
    f7b0:	d006      	beq.n	f7c0 <stop+0x36>
	__asm__ volatile(
    f7b2:	f385 8811 	msr	BASEPRI, r5
    f7b6:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    f7ba:	f04f 30ff 	mov.w	r0, #4294967295
}
    f7be:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    f7c0:	2201      	movs	r2, #1
    f7c2:	fb06 3301 	mla	r3, r6, r1, r3
    f7c6:	641a      	str	r2, [r3, #64]	; 0x40
    f7c8:	f385 8811 	msr	BASEPRI, r5
    f7cc:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    f7d0:	6843      	ldr	r3, [r0, #4]
    f7d2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    f7d6:	685b      	ldr	r3, [r3, #4]
    f7d8:	4798      	blx	r3
	return 0;
    f7da:	2000      	movs	r0, #0
    f7dc:	e7ef      	b.n	f7be <stop+0x34>

0000f7de <api_stop>:
	return stop(dev, subsys, CTX_API);
    f7de:	2280      	movs	r2, #128	; 0x80
    f7e0:	f7ff bfd3 	b.w	f78a <stop>

0000f7e4 <async_start>:
{
    f7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f7e6:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    f7e8:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    f7ea:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    f7ec:	f04f 0520 	mov.w	r5, #32
    f7f0:	f3ef 8611 	mrs	r6, BASEPRI
    f7f4:	f385 8812 	msr	BASEPRI_MAX, r5
    f7f8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    f7fc:	250c      	movs	r5, #12
    f7fe:	fb05 4401 	mla	r4, r5, r1, r4
    f802:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    f804:	f005 0c07 	and.w	ip, r5, #7
    f808:	f1bc 0f01 	cmp.w	ip, #1
    f80c:	d10c      	bne.n	f828 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    f80e:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    f810:	f386 8811 	msr	BASEPRI, r6
    f814:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    f818:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    f81c:	6843      	ldr	r3, [r0, #4]
    f81e:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    f822:	4798      	blx	r3
	return 0;
    f824:	2000      	movs	r0, #0
}
    f826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    f828:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    f82c:	42af      	cmp	r7, r5
    f82e:	f386 8811 	msr	BASEPRI, r6
    f832:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    f836:	bf0c      	ite	eq
    f838:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    f83c:	f04f 30ff 	movne.w	r0, #4294967295
    f840:	e7f1      	b.n	f826 <async_start+0x42>

0000f842 <api_start>:
{
    f842:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    f844:	2480      	movs	r4, #128	; 0x80
    f846:	9400      	str	r4, [sp, #0]
    f848:	f7ff ffcc 	bl	f7e4 <async_start>
}
    f84c:	b002      	add	sp, #8
    f84e:	bd10      	pop	{r4, pc}

0000f850 <onoff_started_callback>:
{
    f850:	b410      	push	{r4}
	notify(mgr, 0);
    f852:	241c      	movs	r4, #28
	return &data->mgr[type];
    f854:	6900      	ldr	r0, [r0, #16]
    f856:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    f858:	fb03 0004 	mla	r0, r3, r4, r0
    f85c:	2100      	movs	r1, #0
}
    f85e:	bc10      	pop	{r4}
	notify(mgr, 0);
    f860:	4710      	bx	r2

0000f862 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    f862:	2000      	movs	r0, #0
    f864:	f7fb bd68 	b.w	b338 <nrfx_clock_start>

0000f868 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    f868:	2000      	movs	r0, #0
    f86a:	f000 b9ad 	b.w	fbc8 <nrfx_clock_stop>

0000f86e <blocking_start_callback>:
{
    f86e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    f870:	f7fd be0a 	b.w	d488 <z_impl_k_sem_give>

0000f874 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
    f874:	4608      	mov	r0, r1
    f876:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
    f878:	4611      	mov	r1, r2
    f87a:	f7fb fc6b 	bl	b154 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
    f87e:	2800      	cmp	r0, #0
	}

	return 0;
}
    f880:	bf18      	it	ne
    f882:	f06f 0004 	mvnne.w	r0, #4
    f886:	bd08      	pop	{r3, pc}

0000f888 <entropy_psa_crypto_rng_init>:
{
    f888:	b508      	push	{r3, lr}
	status = psa_crypto_init();
    f88a:	f000 f997 	bl	fbbc <psa_crypto_init>
		return -EIO;
    f88e:	2800      	cmp	r0, #0
}
    f890:	bf18      	it	ne
    f892:	f06f 0004 	mvnne.w	r0, #4
    f896:	bd08      	pop	{r3, pc}

0000f898 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f898:	6843      	ldr	r3, [r0, #4]
}
    f89a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f89c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    f89e:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    f8a0:	600b      	str	r3, [r1, #0]
}
    f8a2:	4770      	bx	lr

0000f8a4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f8a4:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    f8a6:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f8aa:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    f8ac:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    f8b0:	6098      	str	r0, [r3, #8]
}
    f8b2:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    f8b4:	60d9      	str	r1, [r3, #12]
    f8b6:	4770      	bx	lr

0000f8b8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f8b8:	6843      	ldr	r3, [r0, #4]
}
    f8ba:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f8bc:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    f8be:	6099      	str	r1, [r3, #8]
}
    f8c0:	4770      	bx	lr

0000f8c2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f8c2:	6843      	ldr	r3, [r0, #4]
}
    f8c4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f8c6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    f8c8:	60d9      	str	r1, [r3, #12]
}
    f8ca:	4770      	bx	lr

0000f8cc <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f8cc:	6843      	ldr	r3, [r0, #4]
    f8ce:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    f8d0:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    f8d2:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    f8d6:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    f8d8:	6090      	str	r0, [r2, #8]
}
    f8da:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    f8dc:	60d3      	str	r3, [r2, #12]
    f8de:	4770      	bx	lr

0000f8e0 <gpio_nrfx_manage_callback>:
{
    f8e0:	b510      	push	{r4, lr}
	return port->data;
    f8e2:	6903      	ldr	r3, [r0, #16]
	return list->head;
    f8e4:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    f8e6:	b1f8      	cbz	r0, f928 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f8e8:	4288      	cmp	r0, r1
    f8ea:	d119      	bne.n	f920 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    f8ec:	689c      	ldr	r4, [r3, #8]
	return node->next;
    f8ee:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    f8f0:	42a1      	cmp	r1, r4
	list->head = node;
    f8f2:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    f8f4:	d100      	bne.n	f8f8 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    f8f6:	6098      	str	r0, [r3, #8]
	parent->next = child;
    f8f8:	2000      	movs	r0, #0
    f8fa:	6008      	str	r0, [r1, #0]
	if (set) {
    f8fc:	b12a      	cbz	r2, f90a <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    f8fe:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    f900:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    f902:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    f904:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    f906:	b902      	cbnz	r2, f90a <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    f908:	6099      	str	r1, [r3, #8]
	return 0;
    f90a:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    f90c:	e010      	b.n	f930 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f90e:	4281      	cmp	r1, r0
    f910:	d106      	bne.n	f920 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    f912:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    f914:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    f916:	6898      	ldr	r0, [r3, #8]
    f918:	4281      	cmp	r1, r0
    f91a:	d1ed      	bne.n	f8f8 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    f91c:	609c      	str	r4, [r3, #8]
}
    f91e:	e7eb      	b.n	f8f8 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    f920:	4604      	mov	r4, r0
    f922:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f924:	2800      	cmp	r0, #0
    f926:	d1f2      	bne.n	f90e <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    f928:	2a00      	cmp	r2, #0
    f92a:	d1e8      	bne.n	f8fe <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    f92c:	f06f 0015 	mvn.w	r0, #21
}
    f930:	bd10      	pop	{r4, pc}

0000f932 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    f932:	4770      	bx	lr

0000f934 <event_clear>:
    f934:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    f936:	f100 0350 	add.w	r3, r0, #80	; 0x50
    f93a:	009b      	lsls	r3, r3, #2
    f93c:	b29b      	uxth	r3, r3
    f93e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f942:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
    f946:	601a      	str	r2, [r3, #0]
    f948:	681b      	ldr	r3, [r3, #0]
}
    f94a:	4770      	bx	lr

0000f94c <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
    f94c:	f000 bdb8 	b.w	104c0 <z_impl_k_busy_wait>

0000f950 <nrf_modem_os_sleep>:
{
    f950:	b538      	push	{r3, r4, r5, lr}
	if (timeout == NRF_MODEM_OS_NO_WAIT || timeout == NRF_MODEM_OS_FOREVER) {
    f952:	1e43      	subs	r3, r0, #1
    f954:	3303      	adds	r3, #3
{
    f956:	4604      	mov	r4, r0
	if (timeout == NRF_MODEM_OS_NO_WAIT || timeout == NRF_MODEM_OS_FOREVER) {
    f958:	d80f      	bhi.n	f97a <nrf_modem_os_sleep+0x2a>
    f95a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    f95e:	f240 30e7 	movw	r0, #999	; 0x3e7
    f962:	2100      	movs	r1, #0
    f964:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f968:	2300      	movs	r3, #0
    f96a:	fbe4 0105 	umlal	r0, r1, r4, r5
    f96e:	f7f8 fbe9 	bl	8144 <__aeabi_uldivmod>
}
    f972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
    f976:	f7fe b9c5 	b.w	dd04 <z_impl_k_sleep>
    f97a:	f06f 0015 	mvn.w	r0, #21
    f97e:	bd38      	pop	{r3, r4, r5, pc}

0000f980 <nrf_modem_os_errno_set>:
{
    f980:	b510      	push	{r4, lr}
    f982:	4604      	mov	r4, r0
	errno = err_code;
    f984:	f7ff fee3 	bl	f74e <__errno>
    f988:	6004      	str	r4, [r0, #0]
}
    f98a:	bd10      	pop	{r4, pc}

0000f98c <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
    f98c:	f000 bba9 	b.w	100e2 <k_is_in_isr>

0000f990 <nrf_modem_os_sem_give>:
	z_impl_k_sem_give(sem);
    f990:	f7fd bd7a 	b.w	d488 <z_impl_k_sem_give>

0000f994 <nrf_modem_os_sem_take>:
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
    f994:	1c4b      	adds	r3, r1, #1
{
    f996:	b570      	push	{r4, r5, r6, lr}
    f998:	4605      	mov	r5, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
    f99a:	d017      	beq.n	f9cc <nrf_modem_os_sem_take+0x38>
    f99c:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
    f9a0:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    f9a4:	f240 30e7 	movw	r0, #999	; 0x3e7
    f9a8:	2100      	movs	r1, #0
    f9aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f9ae:	2300      	movs	r3, #0
    f9b0:	fbc4 0106 	smlal	r0, r1, r4, r6
    f9b4:	f7f8 fbc6 	bl	8144 <__aeabi_uldivmod>
    f9b8:	4602      	mov	r2, r0
    f9ba:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    f9bc:	4628      	mov	r0, r5
    f9be:	f7fd fd83 	bl	d4c8 <z_impl_k_sem_take>
		return -NRF_EAGAIN;
    f9c2:	2800      	cmp	r0, #0
}
    f9c4:	bf18      	it	ne
    f9c6:	f06f 000a 	mvnne.w	r0, #10
    f9ca:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
    f9cc:	f04f 32ff 	mov.w	r2, #4294967295
    f9d0:	4613      	mov	r3, r2
    f9d2:	e7f3      	b.n	f9bc <nrf_modem_os_sem_take+0x28>

0000f9d4 <nrf_modem_fault_handler>:
		fault->reason, fault->program_counter);
#endif
#if CONFIG_NRF_MODEM_LIB_ON_FAULT_RESET_MODEM
	k_sem_give(&fault_sem);
#endif
}
    f9d4:	4770      	bx	lr

0000f9d6 <is_notification>:
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
    f9d6:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
    f9da:	b2db      	uxtb	r3, r3
    f9dc:	2b08      	cmp	r3, #8
    f9de:	bf9d      	ittte	ls
    f9e0:	f240 1005 	movwls	r0, #261	; 0x105
    f9e4:	40d8      	lsrls	r0, r3
    f9e6:	f000 0001 	andls.w	r0, r0, #1
{
    f9ea:	2000      	movhi	r0, #0
}
    f9ec:	4770      	bx	lr

0000f9ee <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
    f9ee:	280d      	cmp	r0, #13
    f9f0:	d004      	beq.n	f9fc <is_lfcr+0xe>
    f9f2:	f1a0 030a 	sub.w	r3, r0, #10
    f9f6:	4258      	negs	r0, r3
    f9f8:	4158      	adcs	r0, r3
    f9fa:	4770      	bx	lr
		return true;
    f9fc:	2001      	movs	r0, #1
}
    f9fe:	4770      	bx	lr

0000fa00 <skip_command_prefix>:
{
    fa00:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
    fa02:	6801      	ldr	r1, [r0, #0]
{
    fa04:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
    fa06:	1c8b      	adds	r3, r1, #2
    fa08:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
    fa0a:	788c      	ldrb	r4, [r1, #2]
    fa0c:	4620      	mov	r0, r4
    fa0e:	f7ff ffee 	bl	f9ee <is_lfcr>
    fa12:	b910      	cbnz	r0, fa1a <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
    fa14:	b10c      	cbz	r4, fa1a <skip_command_prefix+0x1a>
	(*cmd)++;
    fa16:	3103      	adds	r1, #3
    fa18:	6011      	str	r1, [r2, #0]
}
    fa1a:	bd10      	pop	{r4, pc}

0000fa1c <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
    fa1c:	6803      	ldr	r3, [r0, #0]
    fa1e:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
    fa20:	bf86      	itte	hi
    fa22:	6840      	ldrhi	r0, [r0, #4]
    fa24:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
		return NULL;
    fa28:	2000      	movls	r0, #0
}
    fa2a:	4770      	bx	lr

0000fa2c <at_param_clear>:
{
    fa2c:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
    fa2e:	7803      	ldrb	r3, [r0, #0]
{
    fa30:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
    fa32:	3b02      	subs	r3, #2
    fa34:	2b01      	cmp	r3, #1
    fa36:	d802      	bhi.n	fa3e <at_param_clear+0x12>
		k_free(param->value.str_val);
    fa38:	6880      	ldr	r0, [r0, #8]
    fa3a:	f000 fd7a 	bl	10532 <k_free>
	param->value.int_val = 0;
    fa3e:	2200      	movs	r2, #0
    fa40:	2300      	movs	r3, #0
    fa42:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
    fa46:	bd10      	pop	{r4, pc}

0000fa48 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
    fa48:	b570      	push	{r4, r5, r6, lr}
	if (list == NULL || list->params == NULL) {
    fa4a:	4604      	mov	r4, r0
    fa4c:	b128      	cbz	r0, fa5a <at_params_list_clear+0x12>
    fa4e:	6843      	ldr	r3, [r0, #4]
    fa50:	b11b      	cbz	r3, fa5a <at_params_list_clear+0x12>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
    fa52:	2500      	movs	r5, #0
    fa54:	6823      	ldr	r3, [r4, #0]
    fa56:	429d      	cmp	r5, r3
    fa58:	d300      	bcc.n	fa5c <at_params_list_clear+0x14>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
    fa5a:	bd70      	pop	{r4, r5, r6, pc}
		at_param_clear(&params[i]);
    fa5c:	6866      	ldr	r6, [r4, #4]
    fa5e:	eb06 1605 	add.w	r6, r6, r5, lsl #4
    fa62:	4630      	mov	r0, r6
    fa64:	f7ff ffe2 	bl	fa2c <at_param_clear>
__ssp_bos_icheck3(memset, void *, int)
    fa68:	2210      	movs	r2, #16
    fa6a:	2100      	movs	r1, #0
    fa6c:	4630      	mov	r0, r6
    fa6e:	f000 fd79 	bl	10564 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
    fa72:	3501      	adds	r5, #1
    fa74:	e7ee      	b.n	fa54 <at_params_list_clear+0xc>

0000fa76 <at_params_empty_put>:
	k_free(list->params);
	list->params = NULL;
}

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
    fa76:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
    fa78:	b178      	cbz	r0, fa9a <at_params_empty_put+0x24>
    fa7a:	6843      	ldr	r3, [r0, #4]
    fa7c:	b16b      	cbz	r3, fa9a <at_params_empty_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
    fa7e:	f7ff ffcd 	bl	fa1c <at_params_get>

	if (param == NULL) {
    fa82:	4604      	mov	r4, r0
    fa84:	b148      	cbz	r0, fa9a <at_params_empty_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
    fa86:	f7ff ffd1 	bl	fa2c <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
    fa8a:	2304      	movs	r3, #4
	param->value.int_val = 0;
    fa8c:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
    fa8e:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
    fa90:	2300      	movs	r3, #0

	return 0;
    fa92:	2000      	movs	r0, #0
	param->value.int_val = 0;
    fa94:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
    fa98:	bd10      	pop	{r4, pc}
		return -EINVAL;
    fa9a:	f06f 0015 	mvn.w	r0, #21
    fa9e:	e7fb      	b.n	fa98 <at_params_empty_put+0x22>

0000faa0 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
    faa0:	b570      	push	{r4, r5, r6, lr}
    faa2:	4616      	mov	r6, r2
    faa4:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
    faa6:	b168      	cbz	r0, fac4 <at_params_int_put+0x24>
    faa8:	6843      	ldr	r3, [r0, #4]
    faaa:	b15b      	cbz	r3, fac4 <at_params_int_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
    faac:	f7ff ffb6 	bl	fa1c <at_params_get>

	if (param == NULL) {
    fab0:	4604      	mov	r4, r0
    fab2:	b138      	cbz	r0, fac4 <at_params_int_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
    fab4:	f7ff ffba 	bl	fa2c <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
    fab8:	2301      	movs	r3, #1
	param->value.int_val = value;
	return 0;
    faba:	2000      	movs	r0, #0
	param->value.int_val = value;
    fabc:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
    fac0:	7023      	strb	r3, [r4, #0]
}
    fac2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    fac4:	f06f 0015 	mvn.w	r0, #21
    fac8:	e7fb      	b.n	fac2 <at_params_int_put+0x22>

0000faca <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
    faca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    facc:	4617      	mov	r7, r2
    face:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
    fad0:	b1c0      	cbz	r0, fb04 <at_params_string_put+0x3a>
    fad2:	6843      	ldr	r3, [r0, #4]
    fad4:	b1b3      	cbz	r3, fb04 <at_params_string_put+0x3a>
    fad6:	b1aa      	cbz	r2, fb04 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
    fad8:	f7ff ffa0 	bl	fa1c <at_params_get>

	if (param == NULL) {
    fadc:	4604      	mov	r4, r0
    fade:	b188      	cbz	r0, fb04 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
    fae0:	1c68      	adds	r0, r5, #1
    fae2:	f000 fd2d 	bl	10540 <k_malloc>

	if (param_value == NULL) {
    fae6:	4606      	mov	r6, r0
    fae8:	b178      	cbz	r0, fb0a <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    faea:	462a      	mov	r2, r5
    faec:	4639      	mov	r1, r7
    faee:	f000 fd2c 	bl	1054a <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
    faf2:	4620      	mov	r0, r4
    faf4:	f7ff ff9a 	bl	fa2c <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
    faf8:	2302      	movs	r3, #2
	param->value.str_val = param_value;

	return 0;
    fafa:	2000      	movs	r0, #0
	param->size = str_len;
    fafc:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
    fafe:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
    fb00:	60a6      	str	r6, [r4, #8]
}
    fb02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
    fb04:	f06f 0015 	mvn.w	r0, #21
    fb08:	e7fb      	b.n	fb02 <at_params_string_put+0x38>
		return -ENOMEM;
    fb0a:	f06f 000b 	mvn.w	r0, #11
    fb0e:	e7f8      	b.n	fb02 <at_params_string_put+0x38>

0000fb10 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
    fb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb12:	4617      	mov	r7, r2
    fb14:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
    fb16:	b1c0      	cbz	r0, fb4a <at_params_array_put+0x3a>
    fb18:	6843      	ldr	r3, [r0, #4]
    fb1a:	b1b3      	cbz	r3, fb4a <at_params_array_put+0x3a>
    fb1c:	b1aa      	cbz	r2, fb4a <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
    fb1e:	f7ff ff7d 	bl	fa1c <at_params_get>

	if (param == NULL) {
    fb22:	4604      	mov	r4, r0
    fb24:	b188      	cbz	r0, fb4a <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
    fb26:	4628      	mov	r0, r5
    fb28:	f000 fd0a 	bl	10540 <k_malloc>

	if (param_value == NULL) {
    fb2c:	4606      	mov	r6, r0
    fb2e:	b178      	cbz	r0, fb50 <at_params_array_put+0x40>
    fb30:	462a      	mov	r2, r5
    fb32:	4639      	mov	r1, r7
    fb34:	f000 fd09 	bl	1054a <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
    fb38:	4620      	mov	r0, r4
    fb3a:	f7ff ff77 	bl	fa2c <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
    fb3e:	2303      	movs	r3, #3
	param->value.array_val = param_value;

	return 0;
    fb40:	2000      	movs	r0, #0
	param->size = array_len;
    fb42:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
    fb44:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
    fb46:	60a6      	str	r6, [r4, #8]
}
    fb48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
    fb4a:	f06f 0015 	mvn.w	r0, #21
    fb4e:	e7fb      	b.n	fb48 <at_params_array_put+0x38>
		return -ENOMEM;
    fb50:	f06f 000b 	mvn.w	r0, #11
    fb54:	e7f8      	b.n	fb48 <at_params_array_put+0x38>

0000fb56 <at_params_unsigned_short_get>:
	return 0;
}

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
    fb56:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
    fb58:	b190      	cbz	r0, fb80 <at_params_unsigned_short_get+0x2a>
    fb5a:	6843      	ldr	r3, [r0, #4]
    fb5c:	b183      	cbz	r3, fb80 <at_params_unsigned_short_get+0x2a>
    fb5e:	b17a      	cbz	r2, fb80 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
    fb60:	f7ff ff5c 	bl	fa1c <at_params_get>

	if (param == NULL) {
    fb64:	b160      	cbz	r0, fb80 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
    fb66:	7803      	ldrb	r3, [r0, #0]
    fb68:	2b01      	cmp	r3, #1
    fb6a:	d109      	bne.n	fb80 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
    fb6c:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
    fb70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    fb74:	f171 0100 	sbcs.w	r1, r1, #0
    fb78:	d202      	bcs.n	fb80 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
    fb7a:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
    fb7c:	8013      	strh	r3, [r2, #0]
}
    fb7e:	bd08      	pop	{r3, pc}
		return -EINVAL;
    fb80:	f06f 0015 	mvn.w	r0, #21
    fb84:	e7fb      	b.n	fb7e <at_params_unsigned_short_get+0x28>

0000fb86 <at_params_valid_count_get>:
	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
    fb86:	4602      	mov	r2, r0
{
    fb88:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
    fb8a:	b170      	cbz	r0, fbaa <at_params_valid_count_get+0x24>
    fb8c:	6840      	ldr	r0, [r0, #4]
    fb8e:	b160      	cbz	r0, fbaa <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
    fb90:	6811      	ldr	r1, [r2, #0]
    fb92:	b119      	cbz	r1, fb9c <at_params_valid_count_get+0x16>
    fb94:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
    fb96:	b108      	cbz	r0, fb9c <at_params_valid_count_get+0x16>
    fb98:	7803      	ldrb	r3, [r0, #0]
    fb9a:	b90b      	cbnz	r3, fba0 <at_params_valid_count_get+0x1a>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
    fb9c:	4608      	mov	r0, r1
    fb9e:	bd08      	pop	{r3, pc}
		param = at_params_get(list, valid_i);
    fba0:	4610      	mov	r0, r2
		valid_i += 1;
    fba2:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
    fba4:	f7ff ff3a 	bl	fa1c <at_params_get>
    fba8:	e7f5      	b.n	fb96 <at_params_valid_count_get+0x10>
		return -EINVAL;
    fbaa:	f06f 0115 	mvn.w	r1, #21
    fbae:	e7f5      	b.n	fb9c <at_params_valid_count_get+0x16>

0000fbb0 <k_sys_fatal_error_handler>:

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    fbb0:	2000      	movs	r0, #0
{
    fbb2:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
    fbb4:	f7f9 febc 	bl	9930 <sys_arch_reboot>

0000fbb8 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
    fbb8:	2000      	movs	r0, #0
    fbba:	4770      	bx	lr

0000fbbc <psa_crypto_init>:
}
    fbbc:	2000      	movs	r0, #0
    fbbe:	4770      	bx	lr

0000fbc0 <SystemInit>:
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
    fbc0:	4770      	bx	lr

0000fbc2 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    fbc2:	4700      	bx	r0

0000fbc4 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    fbc4:	f000 bc7c 	b.w	104c0 <z_impl_k_busy_wait>

0000fbc8 <nrfx_clock_stop>:
    clock_stop(domain);
    fbc8:	f7fb bb38 	b.w	b23c <clock_stop>

0000fbcc <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    fbcc:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    fbce:	f7fb fffb 	bl	bbc8 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    fbd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    fbd6:	f7fb bbef 	b.w	b3b8 <nrfx_clock_irq_handler>

0000fbda <ipc_bootloader_shutdown>:
    fbda:	f7fb bf97 	b.w	bb0c <nrfx_ipc_uninit>

0000fbde <rpc_handle_ctrl_message>:
    fbde:	2902      	cmp	r1, #2
    fbe0:	b510      	push	{r4, lr}
    fbe2:	4604      	mov	r4, r0
    fbe4:	d005      	beq.n	fbf2 <rpc_handle_ctrl_message+0x14>
    fbe6:	2904      	cmp	r1, #4
    fbe8:	d001      	beq.n	fbee <rpc_handle_ctrl_message+0x10>
    fbea:	2901      	cmp	r1, #1
    fbec:	d107      	bne.n	fbfe <rpc_handle_ctrl_message+0x20>
    fbee:	2000      	movs	r0, #0
    fbf0:	bd10      	pop	{r4, pc}
    fbf2:	6880      	ldr	r0, [r0, #8]
    fbf4:	2800      	cmp	r0, #0
    fbf6:	d0fa      	beq.n	fbee <rpc_handle_ctrl_message+0x10>
    fbf8:	f7fa feb2 	bl	a960 <nrf_modem_os_shm_tx_free>
    fbfc:	e7f7      	b.n	fbee <rpc_handle_ctrl_message+0x10>
    fbfe:	6880      	ldr	r0, [r0, #8]
    fc00:	b108      	cbz	r0, fc06 <rpc_handle_ctrl_message+0x28>
    fc02:	f7fa fead 	bl	a960 <nrf_modem_os_shm_tx_free>
    fc06:	4620      	mov	r0, r4
    fc08:	f7fc f82e 	bl	bc68 <rpc_transport_msg_rx_free>
    fc0c:	e7ef      	b.n	fbee <rpc_handle_ctrl_message+0x10>

0000fc0e <rpc_init>:
    fc0e:	f7fc b81f 	b.w	bc50 <rpc_transport_init>

0000fc12 <rpc_shutdown>:
    fc12:	b508      	push	{r3, lr}
    fc14:	f7fd f8de 	bl	cdd4 <nrf_modem_state_is_fault>
    fc18:	b908      	cbnz	r0, fc1e <rpc_shutdown+0xc>
    fc1a:	f7fc f837 	bl	bc8c <rpc_transport_request_shutdown>
    fc1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    fc22:	f7fc b839 	b.w	bc98 <rpc_transport_shutdown>

0000fc26 <rpc_list_preambles_init>:
    fc26:	2200      	movs	r2, #0
    fc28:	b510      	push	{r4, lr}
    fc2a:	6804      	ldr	r4, [r0, #0]
    fc2c:	4294      	cmp	r4, r2
    fc2e:	d100      	bne.n	fc32 <rpc_list_preambles_init+0xc>
    fc30:	bd10      	pop	{r4, pc}
    fc32:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    fc36:	684b      	ldr	r3, [r1, #4]
    fc38:	3201      	adds	r2, #1
    fc3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    fc3e:	f043 0303 	orr.w	r3, r3, #3
    fc42:	604b      	str	r3, [r1, #4]
    fc44:	e7f2      	b.n	fc2c <rpc_list_preambles_init+0x6>

0000fc46 <rpc_transport_ipc_data_rx_resume>:
    fc46:	2004      	movs	r0, #4
    fc48:	f7fb bf8e 	b.w	bb68 <nrfx_ipc_receive_event_enable>

0000fc4c <rpc_transport_ipc_data_rx_suspend>:
    fc4c:	2004      	movs	r0, #4
    fc4e:	f7fb bf93 	b.w	bb78 <nrfx_ipc_receive_event_disable>

0000fc52 <rpc_transport_ipc_shutdown>:
    fc52:	f7fb bf5b 	b.w	bb0c <nrfx_ipc_uninit>

0000fc56 <rpc_transport_ipc_msg_alloc>:
    fc56:	b538      	push	{r3, r4, r5, lr}
    fc58:	4604      	mov	r4, r0
    fc5a:	2500      	movs	r5, #0
    fc5c:	1d03      	adds	r3, r0, #4
    fc5e:	6822      	ldr	r2, [r4, #0]
    fc60:	42aa      	cmp	r2, r5
    fc62:	d801      	bhi.n	fc68 <rpc_transport_ipc_msg_alloc+0x12>
    fc64:	2300      	movs	r3, #0
    fc66:	e019      	b.n	fc9c <rpc_transport_ipc_msg_alloc+0x46>
    fc68:	f04f 0200 	mov.w	r2, #0
    fc6c:	e8d3 0fcf 	ldaexb	r0, [r3]
    fc70:	2803      	cmp	r0, #3
    fc72:	d104      	bne.n	fc7e <rpc_transport_ipc_msg_alloc+0x28>
    fc74:	e8c3 2fcc 	stlexb	ip, r2, [r3]
    fc78:	f1bc 0f00 	cmp.w	ip, #0
    fc7c:	d1f6      	bne.n	fc6c <rpc_transport_ipc_msg_alloc+0x16>
    fc7e:	d002      	beq.n	fc86 <rpc_transport_ipc_msg_alloc+0x30>
    fc80:	3308      	adds	r3, #8
    fc82:	3501      	adds	r5, #1
    fc84:	e7eb      	b.n	fc5e <rpc_transport_ipc_msg_alloc+0x8>
    fc86:	eb01 1385 	add.w	r3, r1, r5, lsl #6
    fc8a:	4618      	mov	r0, r3
    fc8c:	2240      	movs	r2, #64	; 0x40
    fc8e:	2100      	movs	r1, #0
    fc90:	f000 fc68 	bl	10564 <memset>
    fc94:	4603      	mov	r3, r0
    fc96:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    fc9a:	60a0      	str	r0, [r4, #8]
    fc9c:	4618      	mov	r0, r3
    fc9e:	bd38      	pop	{r3, r4, r5, pc}

0000fca0 <rpc_client_msg_from_rpc_msg_get>:
    fca0:	3008      	adds	r0, #8
    fca2:	4770      	bx	lr

0000fca4 <rpc_client_msg_alloc>:
    fca4:	b538      	push	{r3, r4, r5, lr}
    fca6:	4605      	mov	r5, r0
    fca8:	b920      	cbnz	r0, fcb4 <rpc_client_msg_alloc+0x10>
    fcaa:	f7fb ffd7 	bl	bc5c <rpc_transport_msg_alloc>
    fcae:	b980      	cbnz	r0, fcd2 <rpc_client_msg_alloc+0x2e>
    fcb0:	2000      	movs	r0, #0
    fcb2:	bd38      	pop	{r3, r4, r5, pc}
    fcb4:	f7fa fe4c 	bl	a950 <nrf_modem_os_shm_tx_alloc>
    fcb8:	4604      	mov	r4, r0
    fcba:	2800      	cmp	r0, #0
    fcbc:	d0f8      	beq.n	fcb0 <rpc_client_msg_alloc+0xc>
    fcbe:	f7fb ffcd 	bl	bc5c <rpc_transport_msg_alloc>
    fcc2:	b938      	cbnz	r0, fcd4 <rpc_client_msg_alloc+0x30>
    fcc4:	4620      	mov	r0, r4
    fcc6:	f7fa fe4b 	bl	a960 <nrf_modem_os_shm_tx_free>
    fcca:	2001      	movs	r0, #1
    fccc:	f7fa fe16 	bl	a8fc <nrf_modem_os_event_notify>
    fcd0:	e7ee      	b.n	fcb0 <rpc_client_msg_alloc+0xc>
    fcd2:	462c      	mov	r4, r5
    fcd4:	60c5      	str	r5, [r0, #12]
    fcd6:	f840 4f08 	str.w	r4, [r0, #8]!
    fcda:	e7ea      	b.n	fcb2 <rpc_client_msg_alloc+0xe>

0000fcdc <rpc_client_msg_send>:
    fcdc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    fce0:	4610      	mov	r0, r2
    fce2:	f840 1d08 	str.w	r1, [r0, #-8]!
    fce6:	f7fb bfcb 	b.w	bc80 <rpc_transport_msg_send>

0000fcea <rpc_client_msg_rx_free>:
    fcea:	3808      	subs	r0, #8
    fcec:	f7fb bfbc 	b.w	bc68 <rpc_transport_msg_rx_free>

0000fcf0 <rpc_client_msg_data_rx_free>:
    fcf0:	f7fb bfc0 	b.w	bc74 <rpc_transport_msg_data_rx_free>

0000fcf4 <rpc_client_msg_data_tx_alloc>:
    fcf4:	f7fa be2c 	b.w	a950 <nrf_modem_os_shm_tx_alloc>

0000fcf8 <rpc_client_msg_data_tx_free>:
    fcf8:	b508      	push	{r3, lr}
    fcfa:	f7fa fe31 	bl	a960 <nrf_modem_os_shm_tx_free>
    fcfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    fd02:	2001      	movs	r0, #1
    fd04:	f7fa bdfa 	b.w	a8fc <nrf_modem_os_event_notify>

0000fd08 <sockaddr_init>:
    fd08:	2904      	cmp	r1, #4
    fd0a:	b570      	push	{r4, r5, r6, lr}
    fd0c:	4605      	mov	r5, r0
    fd0e:	4616      	mov	r6, r2
    fd10:	d003      	beq.n	fd1a <sockaddr_init+0x12>
    fd12:	2910      	cmp	r1, #16
    fd14:	d015      	beq.n	fd42 <sockaddr_init+0x3a>
    fd16:	2400      	movs	r4, #0
    fd18:	e011      	b.n	fd3e <sockaddr_init+0x36>
    fd1a:	2010      	movs	r0, #16
    fd1c:	f7fa fe0a 	bl	a934 <nrf_modem_os_alloc>
    fd20:	4604      	mov	r4, r0
    fd22:	2800      	cmp	r0, #0
    fd24:	d0f7      	beq.n	fd16 <sockaddr_init+0xe>
    fd26:	220f      	movs	r2, #15
    fd28:	2100      	movs	r1, #0
    fd2a:	3001      	adds	r0, #1
    fd2c:	f000 fc1a 	bl	10564 <memset>
    fd30:	2310      	movs	r3, #16
    fd32:	7023      	strb	r3, [r4, #0]
    fd34:	2301      	movs	r3, #1
    fd36:	8126      	strh	r6, [r4, #8]
    fd38:	6063      	str	r3, [r4, #4]
    fd3a:	682b      	ldr	r3, [r5, #0]
    fd3c:	60e3      	str	r3, [r4, #12]
    fd3e:	4620      	mov	r0, r4
    fd40:	bd70      	pop	{r4, r5, r6, pc}
    fd42:	2024      	movs	r0, #36	; 0x24
    fd44:	f7fa fdf6 	bl	a934 <nrf_modem_os_alloc>
    fd48:	4604      	mov	r4, r0
    fd4a:	2800      	cmp	r0, #0
    fd4c:	d0e3      	beq.n	fd16 <sockaddr_init+0xe>
    fd4e:	2223      	movs	r2, #35	; 0x23
    fd50:	2100      	movs	r1, #0
    fd52:	3001      	adds	r0, #1
    fd54:	f000 fc06 	bl	10564 <memset>
    fd58:	2324      	movs	r3, #36	; 0x24
    fd5a:	7023      	strb	r3, [r4, #0]
    fd5c:	2302      	movs	r3, #2
    fd5e:	4628      	mov	r0, r5
    fd60:	6063      	str	r3, [r4, #4]
    fd62:	8126      	strh	r6, [r4, #8]
    fd64:	f104 0310 	add.w	r3, r4, #16
    fd68:	f105 0210 	add.w	r2, r5, #16
    fd6c:	f850 1b04 	ldr.w	r1, [r0], #4
    fd70:	4290      	cmp	r0, r2
    fd72:	f843 1b04 	str.w	r1, [r3], #4
    fd76:	d1f9      	bne.n	fd6c <sockaddr_init+0x64>
    fd78:	e7e1      	b.n	fd3e <sockaddr_init+0x36>

0000fd7a <sock_pollcb>:
    fd7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    fd7c:	2500      	movs	r5, #0
    fd7e:	6803      	ldr	r3, [r0, #0]
    fd80:	4604      	mov	r4, r0
    fd82:	9300      	str	r3, [sp, #0]
    fd84:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    fd86:	4668      	mov	r0, sp
    fd88:	f8ad 5006 	strh.w	r5, [sp, #6]
    fd8c:	f8ad 3004 	strh.w	r3, [sp, #4]
    fd90:	f000 f89e 	bl	fed0 <nrf_poll_one>
    fd94:	b138      	cbz	r0, fda6 <sock_pollcb+0x2c>
    fd96:	6b63      	ldr	r3, [r4, #52]	; 0x34
    fd98:	4668      	mov	r0, sp
    fd9a:	4798      	blx	r3
    fd9c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    fda0:	b10b      	cbz	r3, fda6 <sock_pollcb+0x2c>
    fda2:	6365      	str	r5, [r4, #52]	; 0x34
    fda4:	63a5      	str	r5, [r4, #56]	; 0x38
    fda6:	b003      	add	sp, #12
    fda8:	bd30      	pop	{r4, r5, pc}

0000fdaa <sock_pkt_append>:
    fdaa:	2300      	movs	r3, #0
    fdac:	600b      	str	r3, [r1, #0]
    fdae:	6883      	ldr	r3, [r0, #8]
    fdb0:	b913      	cbnz	r3, fdb8 <sock_pkt_append+0xe>
    fdb2:	e9c0 1101 	strd	r1, r1, [r0, #4]
    fdb6:	4770      	bx	lr
    fdb8:	6019      	str	r1, [r3, #0]
    fdba:	6081      	str	r1, [r0, #8]
    fdbc:	4770      	bx	lr

0000fdbe <sock_is_stream>:
    fdbe:	6900      	ldr	r0, [r0, #16]
    fdc0:	1e43      	subs	r3, r0, #1
    fdc2:	4258      	negs	r0, r3
    fdc4:	4158      	adcs	r0, r3
    fdc6:	4770      	bx	lr

0000fdc8 <sock_is_datagram>:
    fdc8:	6900      	ldr	r0, [r0, #16]
    fdca:	1e83      	subs	r3, r0, #2
    fdcc:	4258      	negs	r0, r3
    fdce:	4158      	adcs	r0, r3
    fdd0:	4770      	bx	lr

0000fdd2 <sock_proto_is_secure>:
    fdd2:	6940      	ldr	r0, [r0, #20]
    fdd4:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
    fdd8:	d005      	beq.n	fde6 <sock_proto_is_secure+0x14>
    fdda:	f240 1311 	movw	r3, #273	; 0x111
    fdde:	1ac3      	subs	r3, r0, r3
    fde0:	4258      	negs	r0, r3
    fde2:	4158      	adcs	r0, r3
    fde4:	4770      	bx	lr
    fde6:	2001      	movs	r0, #1
    fde8:	4770      	bx	lr

0000fdea <sock_is_attaching>:
    fdea:	7f00      	ldrb	r0, [r0, #28]
    fdec:	f3c0 1000 	ubfx	r0, r0, #4, #1
    fdf0:	4770      	bx	lr

0000fdf2 <sock_is_nonblock>:
    fdf2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    fdf4:	f000 0001 	and.w	r0, r0, #1
    fdf8:	4770      	bx	lr

0000fdfa <sock_is_local_closed>:
    fdfa:	7f00      	ldrb	r0, [r0, #28]
    fdfc:	f3c0 0040 	ubfx	r0, r0, #1, #1
    fe00:	4770      	bx	lr

0000fe02 <sock_is_eof>:
    fe02:	6903      	ldr	r3, [r0, #16]
    fe04:	2b01      	cmp	r3, #1
    fe06:	d105      	bne.n	fe14 <sock_is_eof+0x12>
    fe08:	6980      	ldr	r0, [r0, #24]
    fe0a:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
    fe0e:	4258      	negs	r0, r3
    fe10:	4158      	adcs	r0, r3
    fe12:	4770      	bx	lr
    fe14:	2000      	movs	r0, #0
    fe16:	4770      	bx	lr

0000fe18 <sock_has_stream_error>:
    fe18:	7f00      	ldrb	r0, [r0, #28]
    fe1a:	09c0      	lsrs	r0, r0, #7
    fe1c:	4770      	bx	lr

0000fe1e <sock_has_error>:
    fe1e:	6983      	ldr	r3, [r0, #24]
    fe20:	f033 0380 	bics.w	r3, r3, #128	; 0x80
    fe24:	bf14      	ite	ne
    fe26:	2001      	movne	r0, #1
    fe28:	2000      	moveq	r0, #0
    fe2a:	4770      	bx	lr

0000fe2c <sock_has_pollcb>:
    fe2c:	6b40      	ldr	r0, [r0, #52]	; 0x34
    fe2e:	3800      	subs	r0, #0
    fe30:	bf18      	it	ne
    fe32:	2001      	movne	r0, #1
    fe34:	4770      	bx	lr

0000fe36 <sock_can_read>:
    fe36:	6840      	ldr	r0, [r0, #4]
    fe38:	3800      	subs	r0, #0
    fe3a:	bf18      	it	ne
    fe3c:	2001      	movne	r0, #1
    fe3e:	4770      	bx	lr

0000fe40 <sock_can_accept>:
    fe40:	7f40      	ldrb	r0, [r0, #29]
    fe42:	3800      	subs	r0, #0
    fe44:	bf18      	it	ne
    fe46:	2001      	movne	r0, #1
    fe48:	4770      	bx	lr

0000fe4a <sock_can_send>:
    fe4a:	b510      	push	{r4, lr}
    fe4c:	4602      	mov	r2, r0
    fe4e:	6904      	ldr	r4, [r0, #16]
    fe50:	f7ff ffbf 	bl	fdd2 <sock_proto_is_secure>
    fe54:	2c01      	cmp	r4, #1
    fe56:	4601      	mov	r1, r0
    fe58:	7f13      	ldrb	r3, [r2, #28]
    fe5a:	d103      	bne.n	fe64 <sock_can_send+0x1a>
    fe5c:	071c      	lsls	r4, r3, #28
    fe5e:	f3c3 00c0 	ubfx	r0, r3, #3, #1
    fe62:	d50b      	bpl.n	fe7c <sock_can_send+0x32>
    fe64:	b931      	cbnz	r1, fe74 <sock_can_send+0x2a>
    fe66:	07d9      	lsls	r1, r3, #31
    fe68:	d40b      	bmi.n	fe82 <sock_can_send+0x38>
    fe6a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fe6e:	f1c3 0001 	rsb	r0, r3, #1
    fe72:	e003      	b.n	fe7c <sock_can_send+0x32>
    fe74:	069a      	lsls	r2, r3, #26
    fe76:	f3c3 1040 	ubfx	r0, r3, #5, #1
    fe7a:	d4f4      	bmi.n	fe66 <sock_can_send+0x1c>
    fe7c:	f000 0001 	and.w	r0, r0, #1
    fe80:	bd10      	pop	{r4, pc}
    fe82:	2000      	movs	r0, #0
    fe84:	e7fa      	b.n	fe7c <sock_can_send+0x32>

0000fe86 <pkt_free>:
    fe86:	b510      	push	{r4, lr}
    fe88:	4604      	mov	r4, r0
    fe8a:	6840      	ldr	r0, [r0, #4]
    fe8c:	f7ff ff30 	bl	fcf0 <rpc_client_msg_data_rx_free>
    fe90:	68e0      	ldr	r0, [r4, #12]
    fe92:	b108      	cbz	r0, fe98 <pkt_free+0x12>
    fe94:	f7fa fd56 	bl	a944 <nrf_modem_os_free>
    fe98:	4620      	mov	r0, r4
    fe9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe9e:	f7fa bd51 	b.w	a944 <nrf_modem_os_free>

0000fea2 <pkt_flush>:
    fea2:	b510      	push	{r4, lr}
    fea4:	4604      	mov	r4, r0
    fea6:	6820      	ldr	r0, [r4, #0]
    fea8:	b900      	cbnz	r0, feac <pkt_flush+0xa>
    feaa:	bd10      	pop	{r4, pc}
    feac:	6862      	ldr	r2, [r4, #4]
    feae:	6803      	ldr	r3, [r0, #0]
    feb0:	4290      	cmp	r0, r2
    feb2:	6023      	str	r3, [r4, #0]
    feb4:	bf08      	it	eq
    feb6:	6063      	streq	r3, [r4, #4]
    feb8:	f7ff ffe5 	bl	fe86 <pkt_free>
    febc:	e7f3      	b.n	fea6 <pkt_flush+0x4>

0000febe <on_conf_dnssrv_res>:
    febe:	f000 b852 	b.w	ff66 <res_forward>

0000fec2 <on_getifaddrs_res>:
    fec2:	f000 b850 	b.w	ff66 <res_forward>

0000fec6 <rpc_ip_deinit>:
    fec6:	b508      	push	{r3, lr}
    fec8:	f7fc fb80 	bl	c5cc <sock_shutdown>
    fecc:	2000      	movs	r0, #0
    fece:	bd08      	pop	{r3, pc}

0000fed0 <nrf_poll_one>:
    fed0:	b538      	push	{r3, r4, r5, lr}
    fed2:	4604      	mov	r4, r0
    fed4:	6800      	ldr	r0, [r0, #0]
    fed6:	f7fc fb51 	bl	c57c <sock_find>
    feda:	4605      	mov	r5, r0
    fedc:	b928      	cbnz	r0, feea <nrf_poll_one+0x1a>
    fede:	2001      	movs	r0, #1
    fee0:	88e3      	ldrh	r3, [r4, #6]
    fee2:	f043 0320 	orr.w	r3, r3, #32
    fee6:	80e3      	strh	r3, [r4, #6]
    fee8:	bd38      	pop	{r3, r4, r5, pc}
    feea:	f7ff ff86 	bl	fdfa <sock_is_local_closed>
    feee:	2800      	cmp	r0, #0
    fef0:	d1f5      	bne.n	fede <nrf_poll_one+0xe>
    fef2:	4628      	mov	r0, r5
    fef4:	f7ff ff93 	bl	fe1e <sock_has_error>
    fef8:	b1f8      	cbz	r0, ff3a <nrf_poll_one+0x6a>
    fefa:	88e3      	ldrh	r3, [r4, #6]
    fefc:	f043 0308 	orr.w	r3, r3, #8
    ff00:	80e3      	strh	r3, [r4, #6]
    ff02:	88a3      	ldrh	r3, [r4, #4]
    ff04:	07da      	lsls	r2, r3, #31
    ff06:	d507      	bpl.n	ff18 <nrf_poll_one+0x48>
    ff08:	4628      	mov	r0, r5
    ff0a:	f7ff ff94 	bl	fe36 <sock_can_read>
    ff0e:	b1e8      	cbz	r0, ff4c <nrf_poll_one+0x7c>
    ff10:	88e3      	ldrh	r3, [r4, #6]
    ff12:	f043 0301 	orr.w	r3, r3, #1
    ff16:	80e3      	strh	r3, [r4, #6]
    ff18:	88a3      	ldrh	r3, [r4, #4]
    ff1a:	075b      	lsls	r3, r3, #29
    ff1c:	d507      	bpl.n	ff2e <nrf_poll_one+0x5e>
    ff1e:	4628      	mov	r0, r5
    ff20:	f7ff ff93 	bl	fe4a <sock_can_send>
    ff24:	b118      	cbz	r0, ff2e <nrf_poll_one+0x5e>
    ff26:	88e3      	ldrh	r3, [r4, #6]
    ff28:	f043 0304 	orr.w	r3, r3, #4
    ff2c:	80e3      	strh	r3, [r4, #6]
    ff2e:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
    ff32:	3800      	subs	r0, #0
    ff34:	bf18      	it	ne
    ff36:	2001      	movne	r0, #1
    ff38:	e7d6      	b.n	fee8 <nrf_poll_one+0x18>
    ff3a:	4628      	mov	r0, r5
    ff3c:	f7ff ff61 	bl	fe02 <sock_is_eof>
    ff40:	2800      	cmp	r0, #0
    ff42:	d0de      	beq.n	ff02 <nrf_poll_one+0x32>
    ff44:	88e3      	ldrh	r3, [r4, #6]
    ff46:	f043 0310 	orr.w	r3, r3, #16
    ff4a:	e7d9      	b.n	ff00 <nrf_poll_one+0x30>
    ff4c:	4628      	mov	r0, r5
    ff4e:	f7ff ff77 	bl	fe40 <sock_can_accept>
    ff52:	2800      	cmp	r0, #0
    ff54:	d1dc      	bne.n	ff10 <nrf_poll_one+0x40>
    ff56:	4628      	mov	r0, r5
    ff58:	f7ff ff53 	bl	fe02 <sock_is_eof>
    ff5c:	2800      	cmp	r0, #0
    ff5e:	d1d7      	bne.n	ff10 <nrf_poll_one+0x40>
    ff60:	e7da      	b.n	ff18 <nrf_poll_one+0x48>

0000ff62 <res_cookie_get>:
    ff62:	68c0      	ldr	r0, [r0, #12]
    ff64:	4770      	bx	lr

0000ff66 <res_forward>:
    ff66:	68c3      	ldr	r3, [r0, #12]
    ff68:	6018      	str	r0, [r3, #0]
    ff6a:	2001      	movs	r0, #1
    ff6c:	4770      	bx	lr

0000ff6e <rpc_dfu_event_handler>:
    ff6e:	b510      	push	{r4, lr}
    ff70:	4604      	mov	r4, r0
    ff72:	6800      	ldr	r0, [r0, #0]
    ff74:	b108      	cbz	r0, ff7a <rpc_dfu_event_handler+0xc>
    ff76:	f7ff febb 	bl	fcf0 <rpc_client_msg_data_rx_free>
    ff7a:	68e0      	ldr	r0, [r4, #12]
    ff7c:	b108      	cbz	r0, ff82 <rpc_dfu_event_handler+0x14>
    ff7e:	6004      	str	r4, [r0, #0]
    ff80:	2001      	movs	r0, #1
    ff82:	bd10      	pop	{r4, pc}

0000ff84 <rpc_at_deinit>:
    ff84:	2000      	movs	r0, #0
    ff86:	4770      	bx	lr

0000ff88 <rpc_delta_dfu_deinit>:
    ff88:	2000      	movs	r0, #0
    ff8a:	4770      	bx	lr

0000ff8c <rpc_delta_dfu_init>:
    ff8c:	2000      	movs	r0, #0
    ff8e:	4770      	bx	lr

0000ff90 <nrf_modem_is_initialized>:
    ff90:	f7fc bf18 	b.w	cdc4 <nrf_modem_state_is_initialized>

0000ff94 <z_device_state_init>:
}
    ff94:	4770      	bx	lr

0000ff96 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    ff96:	b140      	cbz	r0, ffaa <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    ff98:	68c3      	ldr	r3, [r0, #12]
    ff9a:	7858      	ldrb	r0, [r3, #1]
    ff9c:	f010 0001 	ands.w	r0, r0, #1
    ffa0:	bf1e      	ittt	ne
    ffa2:	7818      	ldrbne	r0, [r3, #0]
    ffa4:	fab0 f080 	clzne	r0, r0
    ffa8:	0940      	lsrne	r0, r0, #5
}
    ffaa:	4770      	bx	lr

0000ffac <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    ffac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ffae:	4605      	mov	r5, r0
    ffb0:	460e      	mov	r6, r1
	__asm__ volatile(
    ffb2:	f04f 0320 	mov.w	r3, #32
    ffb6:	f3ef 8711 	mrs	r7, BASEPRI
    ffba:	f383 8812 	msr	BASEPRI_MAX, r3
    ffbe:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    ffc2:	f7fd feb9 	bl	dd38 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    ffc6:	4631      	mov	r1, r6
    ffc8:	4604      	mov	r4, r0
    ffca:	4628      	mov	r0, r5
    ffcc:	f7ff fdf0 	bl	fbb0 <k_sys_fatal_error_handler>
	__asm__ volatile(
    ffd0:	f387 8811 	msr	BASEPRI, r7
    ffd4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    ffd8:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    ffda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ffde:	f7f9 bcf1 	b.w	99c4 <z_impl_k_thread_abort>

0000ffe2 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
    ffe2:	f000 babf 	b.w	10564 <memset>

0000ffe6 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ffe6:	f000 bab0 	b.w	1054a <memcpy>

0000ffea <k_heap_init>:
{
    ffea:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    ffec:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    fff0:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    fff4:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    fff6:	f7ff ba0b 	b.w	f410 <sys_heap_init>

0000fffa <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    fffa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fffe:	b085      	sub	sp, #20
   10000:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   10004:	4607      	mov	r7, r0
   10006:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   10008:	4650      	mov	r0, sl
   1000a:	4621      	mov	r1, r4
{
   1000c:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1000e:	f000 fa5b 	bl	104c8 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   10012:	f1b4 3fff 	cmp.w	r4, #4294967295
   10016:	bf08      	it	eq
   10018:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1001c:	4605      	mov	r5, r0
   1001e:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   10020:	bf04      	itt	eq
   10022:	f04f 35ff 	moveq.w	r5, #4294967295
   10026:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1002a:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   1002e:	f04f 0320 	mov.w	r3, #32
   10032:	f3ef 8411 	mrs	r4, BASEPRI
   10036:	f383 8812 	msr	BASEPRI_MAX, r3
   1003a:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1003e:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   10042:	464a      	mov	r2, r9
   10044:	4641      	mov	r1, r8
   10046:	4638      	mov	r0, r7
   10048:	f7ff f97b 	bl	f342 <sys_heap_aligned_alloc>
   1004c:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   1004e:	f7fe f82b 	bl	e0a8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   10052:	9b03      	ldr	r3, [sp, #12]
   10054:	b13b      	cbz	r3, 10066 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   10056:	f384 8811 	msr	BASEPRI, r4
   1005a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1005e:	4618      	mov	r0, r3
   10060:	b005      	add	sp, #20
   10062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   10066:	1a28      	subs	r0, r5, r0
   10068:	eb66 0101 	sbc.w	r1, r6, r1
   1006c:	2801      	cmp	r0, #1
   1006e:	f171 0200 	sbcs.w	r2, r1, #0
   10072:	dbf0      	blt.n	10056 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   10074:	e9cd 0100 	strd	r0, r1, [sp]
   10078:	465a      	mov	r2, fp
   1007a:	4621      	mov	r1, r4
   1007c:	4650      	mov	r0, sl
   1007e:	f7fd fcc1 	bl	da04 <z_pend_curr>
	__asm__ volatile(
   10082:	f04f 0320 	mov.w	r3, #32
   10086:	f3ef 8411 	mrs	r4, BASEPRI
   1008a:	f383 8812 	msr	BASEPRI_MAX, r3
   1008e:	f3bf 8f6f 	isb	sy
	return k;
   10092:	e7d6      	b.n	10042 <k_heap_aligned_alloc+0x48>

00010094 <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   10094:	b507      	push	{r0, r1, r2, lr}
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   10096:	e9cd 2300 	strd	r2, r3, [sp]
   1009a:	460a      	mov	r2, r1
   1009c:	2104      	movs	r1, #4
   1009e:	f7ff ffac 	bl	fffa <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   100a2:	b003      	add	sp, #12
   100a4:	f85d fb04 	ldr.w	pc, [sp], #4

000100a8 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   100a8:	b538      	push	{r3, r4, r5, lr}
   100aa:	4604      	mov	r4, r0
   100ac:	f04f 0320 	mov.w	r3, #32
   100b0:	f3ef 8511 	mrs	r5, BASEPRI
   100b4:	f383 8812 	msr	BASEPRI_MAX, r3
   100b8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   100bc:	f7ff f909 	bl	f2d2 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   100c0:	f104 000c 	add.w	r0, r4, #12
   100c4:	f000 f99d 	bl	10402 <z_unpend_all>
   100c8:	b130      	cbz	r0, 100d8 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   100ca:	4629      	mov	r1, r5
   100cc:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   100d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   100d4:	f7fd bcfa 	b.w	dacc <z_reschedule>
	__asm__ volatile(
   100d8:	f385 8811 	msr	BASEPRI, r5
   100dc:	f3bf 8f6f 	isb	sy
}
   100e0:	bd38      	pop	{r3, r4, r5, pc}

000100e2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   100e2:	f3ef 8005 	mrs	r0, IPSR
}
   100e6:	3800      	subs	r0, #0
   100e8:	bf18      	it	ne
   100ea:	2001      	movne	r0, #1
   100ec:	4770      	bx	lr

000100ee <z_impl_k_thread_name_set>:
}
   100ee:	f06f 0057 	mvn.w	r0, #87	; 0x57
   100f2:	4770      	bx	lr

000100f4 <z_impl_k_thread_start>:
	z_sched_start(thread);
   100f4:	f7fd bcfc 	b.w	daf0 <z_sched_start>

000100f8 <z_pm_save_idle_exit>:
{
   100f8:	b508      	push	{r3, lr}
	pm_system_resume();
   100fa:	f7f8 ffb3 	bl	9064 <pm_system_resume>
}
   100fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   10102:	f7ff bc16 	b.w	f932 <sys_clock_idle_exit>

00010106 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   10106:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1010a:	428b      	cmp	r3, r1
   1010c:	d001      	beq.n	10112 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1010e:	f7fd bc97 	b.w	da40 <z_set_prio>
}
   10112:	2000      	movs	r0, #0
   10114:	4770      	bx	lr

00010116 <queue_insert>:
{
   10116:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1011a:	4699      	mov	r9, r3
   1011c:	4604      	mov	r4, r0
   1011e:	460d      	mov	r5, r1
   10120:	4690      	mov	r8, r2
   10122:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   10126:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1012a:	f04f 0220 	mov.w	r2, #32
   1012e:	f3ef 8711 	mrs	r7, BASEPRI
   10132:	f382 8812 	msr	BASEPRI_MAX, r2
   10136:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1013a:	b103      	cbz	r3, 1013e <queue_insert+0x28>
	return list->tail;
   1013c:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1013e:	4630      	mov	r0, r6
   10140:	f000 f915 	bl	1036e <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   10144:	b158      	cbz	r0, 1015e <queue_insert+0x48>
   10146:	2300      	movs	r3, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   10148:	f8c0 8014 	str.w	r8, [r0, #20]
   1014c:	6783      	str	r3, [r0, #120]	; 0x78
	z_ready_thread(thread);
   1014e:	f000 f8d8 	bl	10302 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   10152:	4630      	mov	r0, r6
   10154:	4639      	mov	r1, r7
   10156:	f7fd fcb9 	bl	dacc <z_reschedule>
		return 0;
   1015a:	2000      	movs	r0, #0
   1015c:	e00c      	b.n	10178 <queue_insert+0x62>
	if (alloc) {
   1015e:	f1b9 0f00 	cmp.w	r9, #0
   10162:	d01c      	beq.n	1019e <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   10164:	2108      	movs	r1, #8
   10166:	f7fd ffc7 	bl	e0f8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1016a:	b938      	cbnz	r0, 1017c <queue_insert+0x66>
	__asm__ volatile(
   1016c:	f387 8811 	msr	BASEPRI, r7
   10170:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   10174:	f06f 000b 	mvn.w	r0, #11
}
   10178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1017c:	2201      	movs	r2, #1
		anode->data = data;
   1017e:	f8c0 8004 	str.w	r8, [r0, #4]
   10182:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   10184:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   10186:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1018a:	b965      	cbnz	r5, 101a6 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1018c:	6822      	ldr	r2, [r4, #0]
   1018e:	430a      	orrs	r2, r1
   10190:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   10192:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   10194:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   10196:	2a00      	cmp	r2, #0
   10198:	d1db      	bne.n	10152 <queue_insert+0x3c>
	list->tail = node;
   1019a:	6060      	str	r0, [r4, #4]
}
   1019c:	e7d9      	b.n	10152 <queue_insert+0x3c>
}
   1019e:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   101a0:	f8c8 9000 	str.w	r9, [r8]
}
   101a4:	e7ee      	b.n	10184 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   101a6:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   101a8:	2a03      	cmp	r2, #3
   101aa:	d80b      	bhi.n	101c4 <queue_insert+0xae>
	parent->next_and_flags = cur_flags | (unative_t)child;
   101ac:	6001      	str	r1, [r0, #0]
	return list->tail;
   101ae:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   101b0:	b911      	cbnz	r1, 101b8 <queue_insert+0xa2>
	list->head = node;
   101b2:	e9c4 0000 	strd	r0, r0, [r4]
}
   101b6:	e7cc      	b.n	10152 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   101b8:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   101ba:	f002 0203 	and.w	r2, r2, #3
   101be:	4302      	orrs	r2, r0
   101c0:	600a      	str	r2, [r1, #0]
   101c2:	e7ea      	b.n	1019a <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   101c4:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   101c8:	430a      	orrs	r2, r1
   101ca:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   101cc:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   101ce:	f002 0203 	and.w	r2, r2, #3
   101d2:	ea40 0302 	orr.w	r3, r0, r2
   101d6:	602b      	str	r3, [r5, #0]
}
   101d8:	e7bb      	b.n	10152 <queue_insert+0x3c>

000101da <z_queue_node_peek>:
{
   101da:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   101dc:	4604      	mov	r4, r0
   101de:	b130      	cbz	r0, 101ee <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   101e0:	6802      	ldr	r2, [r0, #0]
   101e2:	0793      	lsls	r3, r2, #30
   101e4:	d003      	beq.n	101ee <z_queue_node_peek+0x14>
		ret = anode->data;
   101e6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   101e8:	b109      	cbz	r1, 101ee <z_queue_node_peek+0x14>
			k_free(anode);
   101ea:	f000 f9a2 	bl	10532 <k_free>
}
   101ee:	4620      	mov	r0, r4
   101f0:	bd10      	pop	{r4, pc}

000101f2 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   101f2:	2301      	movs	r3, #1
{
   101f4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   101f6:	9300      	str	r3, [sp, #0]
   101f8:	2300      	movs	r3, #0
{
   101fa:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   101fc:	4619      	mov	r1, r3
   101fe:	f7ff ff8a 	bl	10116 <queue_insert>
}
   10202:	b003      	add	sp, #12
   10204:	f85d fb04 	ldr.w	pc, [sp], #4

00010208 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   10208:	b13a      	cbz	r2, 1021a <z_impl_k_sem_init+0x12>
   1020a:	428a      	cmp	r2, r1
   1020c:	d305      	bcc.n	1021a <z_impl_k_sem_init+0x12>
	sem->limit = limit;
   1020e:	e9c0 1202 	strd	r1, r2, [r0, #8]
   10212:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
   10216:	2000      	movs	r0, #0
   10218:	4770      	bx	lr
		return -EINVAL;
   1021a:	f06f 0015 	mvn.w	r0, #21
}
   1021e:	4770      	bx	lr

00010220 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   10220:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   10222:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   10224:	408b      	lsls	r3, r1
   10226:	ea22 0303 	bic.w	r3, r2, r3
   1022a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1022c:	fa22 f001 	lsr.w	r0, r2, r1
}
   10230:	f000 0001 	and.w	r0, r0, #1
   10234:	4770      	bx	lr

00010236 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   10236:	b120      	cbz	r0, 10242 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   10238:	2200      	movs	r2, #0
   1023a:	3088      	adds	r0, #136	; 0x88
   1023c:	4611      	mov	r1, r2
   1023e:	f000 b8f0 	b.w	10422 <z_sched_wake>
}
   10242:	4770      	bx	lr

00010244 <z_work_submit_to_queue>:
{
   10244:	b513      	push	{r0, r1, r4, lr}
   10246:	9001      	str	r0, [sp, #4]
   10248:	4608      	mov	r0, r1
	__asm__ volatile(
   1024a:	f04f 0320 	mov.w	r3, #32
   1024e:	f3ef 8411 	mrs	r4, BASEPRI
   10252:	f383 8812 	msr	BASEPRI_MAX, r3
   10256:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1025a:	a901      	add	r1, sp, #4
   1025c:	f7fd f9f8 	bl	d650 <submit_to_queue_locked>
	__asm__ volatile(
   10260:	f384 8811 	msr	BASEPRI, r4
   10264:	f3bf 8f6f 	isb	sy
}
   10268:	b002      	add	sp, #8
   1026a:	bd10      	pop	{r4, pc}

0001026c <k_work_submit_to_queue>:
{
   1026c:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   1026e:	f7ff ffe9 	bl	10244 <z_work_submit_to_queue>
	if (ret > 0) {
   10272:	1e04      	subs	r4, r0, #0
   10274:	dd09      	ble.n	1028a <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   10276:	f04f 0320 	mov.w	r3, #32
   1027a:	f3ef 8011 	mrs	r0, BASEPRI
   1027e:	f383 8812 	msr	BASEPRI_MAX, r3
   10282:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   10286:	f000 f8a6 	bl	103d6 <z_reschedule_irqlock>
}
   1028a:	4620      	mov	r0, r4
   1028c:	bd10      	pop	{r4, pc}

0001028e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1028e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   10292:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   10294:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   10296:	2300      	movs	r3, #0
	node->prev = NULL;
   10298:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
   1029c:	4770      	bx	lr

0001029e <unpend_thread_no_timeout>:
{
   1029e:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   102a0:	f7ff fff5 	bl	1028e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   102a4:	7b43      	ldrb	r3, [r0, #13]
   102a6:	f023 0302 	bic.w	r3, r3, #2
   102aa:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   102ac:	2300      	movs	r3, #0
   102ae:	6083      	str	r3, [r0, #8]
}
   102b0:	bd08      	pop	{r3, pc}

000102b2 <add_to_waitq_locked>:
{
   102b2:	b538      	push	{r3, r4, r5, lr}
   102b4:	4604      	mov	r4, r0
   102b6:	460d      	mov	r5, r1
	unready_thread(thread);
   102b8:	f7fd fb44 	bl	d944 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   102bc:	7b63      	ldrb	r3, [r4, #13]
   102be:	f043 0302 	orr.w	r3, r3, #2
   102c2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   102c4:	b1e5      	cbz	r5, 10300 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   102c6:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   102c8:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   102ca:	429d      	cmp	r5, r3
   102cc:	d109      	bne.n	102e2 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   102ce:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   102d0:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   102d4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   102d6:	606c      	str	r4, [r5, #4]
}
   102d8:	e012      	b.n	10300 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   102da:	686a      	ldr	r2, [r5, #4]
   102dc:	4293      	cmp	r3, r2
   102de:	d0f6      	beq.n	102ce <add_to_waitq_locked+0x1c>
   102e0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   102e2:	2b00      	cmp	r3, #0
   102e4:	d0f3      	beq.n	102ce <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   102e6:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   102ea:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   102ee:	428a      	cmp	r2, r1
   102f0:	d0f3      	beq.n	102da <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   102f2:	4291      	cmp	r1, r2
   102f4:	ddf1      	ble.n	102da <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   102f6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   102f8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   102fc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   102fe:	605c      	str	r4, [r3, #4]
}
   10300:	bd38      	pop	{r3, r4, r5, pc}

00010302 <z_ready_thread>:
{
   10302:	b510      	push	{r4, lr}
   10304:	f04f 0320 	mov.w	r3, #32
   10308:	f3ef 8411 	mrs	r4, BASEPRI
   1030c:	f383 8812 	msr	BASEPRI_MAX, r3
   10310:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   10314:	f7fd fae2 	bl	d8dc <ready_thread>
	__asm__ volatile(
   10318:	f384 8811 	msr	BASEPRI, r4
   1031c:	f3bf 8f6f 	isb	sy
}
   10320:	bd10      	pop	{r4, pc}

00010322 <z_sched_wake_thread>:
{
   10322:	b538      	push	{r3, r4, r5, lr}
   10324:	4604      	mov	r4, r0
	__asm__ volatile(
   10326:	f04f 0320 	mov.w	r3, #32
   1032a:	f3ef 8511 	mrs	r5, BASEPRI
   1032e:	f383 8812 	msr	BASEPRI_MAX, r3
   10332:	f3bf 8f6f 	isb	sy
		if (!killed) {
   10336:	7b43      	ldrb	r3, [r0, #13]
   10338:	f013 0f28 	tst.w	r3, #40	; 0x28
   1033c:	d10b      	bne.n	10356 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   1033e:	6883      	ldr	r3, [r0, #8]
   10340:	b10b      	cbz	r3, 10346 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   10342:	f7ff ffac 	bl	1029e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10346:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   10348:	b951      	cbnz	r1, 10360 <z_sched_wake_thread+0x3e>
   1034a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
   1034e:	4620      	mov	r0, r4
   10350:	7363      	strb	r3, [r4, #13]
   10352:	f7fd fac3 	bl	d8dc <ready_thread>
	__asm__ volatile(
   10356:	f385 8811 	msr	BASEPRI, r5
   1035a:	f3bf 8f6f 	isb	sy
}
   1035e:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   10360:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   10364:	e7f3      	b.n	1034e <z_sched_wake_thread+0x2c>

00010366 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   10366:	2101      	movs	r1, #1
   10368:	3818      	subs	r0, #24
   1036a:	f7ff bfda 	b.w	10322 <z_sched_wake_thread>

0001036e <z_unpend_first_thread>:
{
   1036e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   10370:	f04f 0320 	mov.w	r3, #32
   10374:	f3ef 8511 	mrs	r5, BASEPRI
   10378:	f383 8812 	msr	BASEPRI_MAX, r3
   1037c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   10380:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10382:	42a0      	cmp	r0, r4
   10384:	d00d      	beq.n	103a2 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   10386:	b134      	cbz	r4, 10396 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   10388:	4620      	mov	r0, r4
   1038a:	f7ff ff88 	bl	1029e <unpend_thread_no_timeout>
   1038e:	f104 0018 	add.w	r0, r4, #24
   10392:	f000 f869 	bl	10468 <z_abort_timeout>
	__asm__ volatile(
   10396:	f385 8811 	msr	BASEPRI, r5
   1039a:	f3bf 8f6f 	isb	sy
}
   1039e:	4620      	mov	r0, r4
   103a0:	bd38      	pop	{r3, r4, r5, pc}
   103a2:	2400      	movs	r4, #0
   103a4:	e7f7      	b.n	10396 <z_unpend_first_thread+0x28>

000103a6 <z_unpend_thread>:
{
   103a6:	4601      	mov	r1, r0
   103a8:	b510      	push	{r4, lr}
	__asm__ volatile(
   103aa:	f04f 0320 	mov.w	r3, #32
   103ae:	f3ef 8411 	mrs	r4, BASEPRI
   103b2:	f383 8812 	msr	BASEPRI_MAX, r3
   103b6:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   103ba:	6883      	ldr	r3, [r0, #8]
   103bc:	b10b      	cbz	r3, 103c2 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   103be:	f7ff ff6e 	bl	1029e <unpend_thread_no_timeout>
	__asm__ volatile(
   103c2:	f384 8811 	msr	BASEPRI, r4
   103c6:	f3bf 8f6f 	isb	sy
}
   103ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   103ce:	f101 0018 	add.w	r0, r1, #24
   103d2:	f000 b849 	b.w	10468 <z_abort_timeout>

000103d6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   103d6:	4603      	mov	r3, r0
   103d8:	b920      	cbnz	r0, 103e4 <z_reschedule_irqlock+0xe>
   103da:	f3ef 8205 	mrs	r2, IPSR
   103de:	b90a      	cbnz	r2, 103e4 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   103e0:	f7f9 b862 	b.w	94a8 <arch_swap>
   103e4:	f383 8811 	msr	BASEPRI, r3
   103e8:	f3bf 8f6f 	isb	sy
}
   103ec:	4770      	bx	lr

000103ee <z_reschedule_unlocked>:
	__asm__ volatile(
   103ee:	f04f 0320 	mov.w	r3, #32
   103f2:	f3ef 8011 	mrs	r0, BASEPRI
   103f6:	f383 8812 	msr	BASEPRI_MAX, r3
   103fa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   103fe:	f7ff bfea 	b.w	103d6 <z_reschedule_irqlock>

00010402 <z_unpend_all>:
{
   10402:	b538      	push	{r3, r4, r5, lr}
   10404:	4605      	mov	r5, r0
	int need_sched = 0;
   10406:	2000      	movs	r0, #0
	return list->head == list;
   10408:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1040a:	42a5      	cmp	r5, r4
   1040c:	d000      	beq.n	10410 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1040e:	b904      	cbnz	r4, 10412 <z_unpend_all+0x10>
}
   10410:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   10412:	4620      	mov	r0, r4
   10414:	f7ff ffc7 	bl	103a6 <z_unpend_thread>
		z_ready_thread(thread);
   10418:	4620      	mov	r0, r4
   1041a:	f7ff ff72 	bl	10302 <z_ready_thread>
		need_sched = 1;
   1041e:	2001      	movs	r0, #1
   10420:	e7f2      	b.n	10408 <z_unpend_all+0x6>

00010422 <z_sched_wake>:
{
   10422:	b538      	push	{r3, r4, r5, lr}
   10424:	f04f 0320 	mov.w	r3, #32
   10428:	f3ef 8511 	mrs	r5, BASEPRI
   1042c:	f383 8812 	msr	BASEPRI_MAX, r3
   10430:	f3bf 8f6f 	isb	sy
	return list->head == list;
   10434:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10436:	42a0      	cmp	r0, r4
   10438:	d012      	beq.n	10460 <z_sched_wake+0x3e>
		if (thread != NULL) {
   1043a:	b19c      	cbz	r4, 10464 <z_sched_wake+0x42>
   1043c:	67a1      	str	r1, [r4, #120]	; 0x78
	thread->base.swap_data = data;
   1043e:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   10440:	4620      	mov	r0, r4
   10442:	f7ff ff2c 	bl	1029e <unpend_thread_no_timeout>
   10446:	f104 0018 	add.w	r0, r4, #24
   1044a:	f000 f80d 	bl	10468 <z_abort_timeout>
			ready_thread(thread);
   1044e:	4620      	mov	r0, r4
   10450:	f7fd fa44 	bl	d8dc <ready_thread>
			ret = true;
   10454:	2001      	movs	r0, #1
	__asm__ volatile(
   10456:	f385 8811 	msr	BASEPRI, r5
   1045a:	f3bf 8f6f 	isb	sy
}
   1045e:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   10460:	2000      	movs	r0, #0
   10462:	e7f8      	b.n	10456 <z_sched_wake+0x34>
   10464:	4620      	mov	r0, r4
   10466:	e7f6      	b.n	10456 <z_sched_wake+0x34>

00010468 <z_abort_timeout>:
{
   10468:	b510      	push	{r4, lr}
	__asm__ volatile(
   1046a:	f04f 0220 	mov.w	r2, #32
   1046e:	f3ef 8411 	mrs	r4, BASEPRI
   10472:	f382 8812 	msr	BASEPRI_MAX, r2
   10476:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1047a:	6803      	ldr	r3, [r0, #0]
   1047c:	b13b      	cbz	r3, 1048e <z_abort_timeout+0x26>
			remove_timeout(to);
   1047e:	f7fd fd17 	bl	deb0 <remove_timeout>
			ret = 0;
   10482:	2000      	movs	r0, #0
	__asm__ volatile(
   10484:	f384 8811 	msr	BASEPRI, r4
   10488:	f3bf 8f6f 	isb	sy
}
   1048c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1048e:	f06f 0015 	mvn.w	r0, #21
   10492:	e7f7      	b.n	10484 <z_abort_timeout+0x1c>

00010494 <z_get_next_timeout_expiry>:
{
   10494:	b510      	push	{r4, lr}
	__asm__ volatile(
   10496:	f04f 0320 	mov.w	r3, #32
   1049a:	f3ef 8411 	mrs	r4, BASEPRI
   1049e:	f383 8812 	msr	BASEPRI_MAX, r3
   104a2:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   104a6:	f7fd fce3 	bl	de70 <next_timeout>
	__asm__ volatile(
   104aa:	f384 8811 	msr	BASEPRI, r4
   104ae:	f3bf 8f6f 	isb	sy
}
   104b2:	bd10      	pop	{r4, pc}

000104b4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   104b4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   104b6:	f7fd fdf7 	bl	e0a8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   104ba:	bd08      	pop	{r3, pc}

000104bc <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   104bc:	f7fd bdf4 	b.w	e0a8 <sys_clock_tick_get>

000104c0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   104c0:	b108      	cbz	r0, 104c6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   104c2:	f7f8 bd7f 	b.w	8fc4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   104c6:	4770      	bx	lr

000104c8 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   104c8:	f1b1 3fff 	cmp.w	r1, #4294967295
   104cc:	bf08      	it	eq
   104ce:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   104d2:	b538      	push	{r3, r4, r5, lr}
   104d4:	460c      	mov	r4, r1
   104d6:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   104d8:	d014      	beq.n	10504 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   104da:	4308      	orrs	r0, r1
   104dc:	d103      	bne.n	104e6 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   104de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   104e2:	f7fd bde1 	b.w	e0a8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   104e6:	f06f 0001 	mvn.w	r0, #1
   104ea:	f04f 33ff 	mov.w	r3, #4294967295
   104ee:	1b40      	subs	r0, r0, r5
   104f0:	eb63 0101 	sbc.w	r1, r3, r1
   104f4:	2900      	cmp	r1, #0
   104f6:	da04      	bge.n	10502 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   104f8:	f7fd fdd6 	bl	e0a8 <sys_clock_tick_get>
   104fc:	1940      	adds	r0, r0, r5
   104fe:	eb41 0104 	adc.w	r1, r1, r4
}
   10502:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   10504:	f04f 30ff 	mov.w	r0, #4294967295
   10508:	4601      	mov	r1, r0
   1050a:	e7fa      	b.n	10502 <sys_clock_timeout_end_calc+0x3a>

0001050c <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1050c:	3204      	adds	r2, #4
{
   1050e:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   10510:	4604      	mov	r4, r0
   10512:	d208      	bcs.n	10526 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   10514:	2600      	movs	r6, #0
   10516:	2700      	movs	r7, #0
   10518:	f041 0104 	orr.w	r1, r1, #4
   1051c:	e9cd 6700 	strd	r6, r7, [sp]
   10520:	f7ff fd6b 	bl	fffa <k_heap_aligned_alloc>
	if (mem == NULL) {
   10524:	b910      	cbnz	r0, 1052c <z_heap_aligned_alloc+0x20>
		return NULL;
   10526:	2000      	movs	r0, #0
}
   10528:	b002      	add	sp, #8
   1052a:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   1052c:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   10530:	e7fa      	b.n	10528 <z_heap_aligned_alloc+0x1c>

00010532 <k_free>:
	if (ptr != NULL) {
   10532:	b120      	cbz	r0, 1053e <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   10534:	1f01      	subs	r1, r0, #4
   10536:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1053a:	f7ff bdb5 	b.w	100a8 <k_heap_free>
}
   1053e:	4770      	bx	lr

00010540 <k_malloc>:
{
   10540:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   10542:	2004      	movs	r0, #4
   10544:	f7fd bdca 	b.w	e0dc <k_aligned_alloc>

00010548 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   10548:	4770      	bx	lr

0001054a <memcpy>:
   1054a:	440a      	add	r2, r1
   1054c:	1e43      	subs	r3, r0, #1
   1054e:	4291      	cmp	r1, r2
   10550:	d100      	bne.n	10554 <memcpy+0xa>
   10552:	4770      	bx	lr
   10554:	b510      	push	{r4, lr}
   10556:	f811 4b01 	ldrb.w	r4, [r1], #1
   1055a:	4291      	cmp	r1, r2
   1055c:	f803 4f01 	strb.w	r4, [r3, #1]!
   10560:	d1f9      	bne.n	10556 <memcpy+0xc>
   10562:	bd10      	pop	{r4, pc}

00010564 <memset>:
   10564:	4402      	add	r2, r0
   10566:	4603      	mov	r3, r0
   10568:	4293      	cmp	r3, r2
   1056a:	d100      	bne.n	1056e <memset+0xa>
   1056c:	4770      	bx	lr
   1056e:	f803 1b01 	strb.w	r1, [r3], #1
   10572:	e7f9      	b.n	10568 <memset+0x4>

00010574 <strcpy>:
   10574:	4603      	mov	r3, r0
   10576:	f811 2b01 	ldrb.w	r2, [r1], #1
   1057a:	f803 2b01 	strb.w	r2, [r3], #1
   1057e:	2a00      	cmp	r2, #0
   10580:	d1f9      	bne.n	10576 <strcpy+0x2>
   10582:	4770      	bx	lr

00010584 <strncmp>:
   10584:	b510      	push	{r4, lr}
   10586:	b16a      	cbz	r2, 105a4 <strncmp+0x20>
   10588:	3901      	subs	r1, #1
   1058a:	1884      	adds	r4, r0, r2
   1058c:	f810 2b01 	ldrb.w	r2, [r0], #1
   10590:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   10594:	429a      	cmp	r2, r3
   10596:	d103      	bne.n	105a0 <strncmp+0x1c>
   10598:	42a0      	cmp	r0, r4
   1059a:	d001      	beq.n	105a0 <strncmp+0x1c>
   1059c:	2a00      	cmp	r2, #0
   1059e:	d1f5      	bne.n	1058c <strncmp+0x8>
   105a0:	1ad0      	subs	r0, r2, r3
   105a2:	bd10      	pop	{r4, pc}
   105a4:	4610      	mov	r0, r2
   105a6:	e7fc      	b.n	105a2 <strncmp+0x1e>

000105a8 <strncpy>:
   105a8:	3901      	subs	r1, #1
   105aa:	4603      	mov	r3, r0
   105ac:	b510      	push	{r4, lr}
   105ae:	b132      	cbz	r2, 105be <strncpy+0x16>
   105b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   105b4:	3a01      	subs	r2, #1
   105b6:	f803 4b01 	strb.w	r4, [r3], #1
   105ba:	2c00      	cmp	r4, #0
   105bc:	d1f7      	bne.n	105ae <strncpy+0x6>
   105be:	441a      	add	r2, r3
   105c0:	2100      	movs	r1, #0
   105c2:	4293      	cmp	r3, r2
   105c4:	d100      	bne.n	105c8 <strncpy+0x20>
   105c6:	bd10      	pop	{r4, pc}
   105c8:	f803 1b01 	strb.w	r1, [r3], #1
   105cc:	e7f9      	b.n	105c2 <strncpy+0x1a>

000105ce <strnlen>:
   105ce:	4602      	mov	r2, r0
   105d0:	4401      	add	r1, r0
   105d2:	b510      	push	{r4, lr}
   105d4:	428a      	cmp	r2, r1
   105d6:	4613      	mov	r3, r2
   105d8:	d003      	beq.n	105e2 <strnlen+0x14>
   105da:	781c      	ldrb	r4, [r3, #0]
   105dc:	3201      	adds	r2, #1
   105de:	2c00      	cmp	r4, #0
   105e0:	d1f8      	bne.n	105d4 <strnlen+0x6>
   105e2:	1a18      	subs	r0, r3, r0
   105e4:	bd10      	pop	{r4, pc}

000105e6 <strstr>:
   105e6:	780a      	ldrb	r2, [r1, #0]
   105e8:	b570      	push	{r4, r5, r6, lr}
   105ea:	b96a      	cbnz	r2, 10608 <strstr+0x22>
   105ec:	bd70      	pop	{r4, r5, r6, pc}
   105ee:	429a      	cmp	r2, r3
   105f0:	d109      	bne.n	10606 <strstr+0x20>
   105f2:	460c      	mov	r4, r1
   105f4:	4605      	mov	r5, r0
   105f6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   105fa:	2b00      	cmp	r3, #0
   105fc:	d0f6      	beq.n	105ec <strstr+0x6>
   105fe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   10602:	429e      	cmp	r6, r3
   10604:	d0f7      	beq.n	105f6 <strstr+0x10>
   10606:	3001      	adds	r0, #1
   10608:	7803      	ldrb	r3, [r0, #0]
   1060a:	2b00      	cmp	r3, #0
   1060c:	d1ef      	bne.n	105ee <strstr+0x8>
   1060e:	4618      	mov	r0, r3
   10610:	e7ec      	b.n	105ec <strstr+0x6>

00010612 <_strtol_r>:
   10612:	f7fd be5d 	b.w	e2d0 <_strtol_l.constprop.0>

00010616 <_strtoul_r>:
   10616:	f7fd bf81 	b.w	e51c <_strtoul_l.constprop.0>

0001061a <_vsniprintf_r>:
   1061a:	b530      	push	{r4, r5, lr}
   1061c:	4614      	mov	r4, r2
   1061e:	b09b      	sub	sp, #108	; 0x6c
   10620:	4605      	mov	r5, r0
   10622:	461a      	mov	r2, r3
   10624:	2c00      	cmp	r4, #0
   10626:	da05      	bge.n	10634 <_vsniprintf_r+0x1a>
   10628:	238b      	movs	r3, #139	; 0x8b
   1062a:	6003      	str	r3, [r0, #0]
   1062c:	f04f 30ff 	mov.w	r0, #4294967295
   10630:	b01b      	add	sp, #108	; 0x6c
   10632:	bd30      	pop	{r4, r5, pc}
   10634:	f44f 7302 	mov.w	r3, #520	; 0x208
   10638:	9100      	str	r1, [sp, #0]
   1063a:	9104      	str	r1, [sp, #16]
   1063c:	4669      	mov	r1, sp
   1063e:	f8ad 300c 	strh.w	r3, [sp, #12]
   10642:	bf14      	ite	ne
   10644:	f104 33ff 	addne.w	r3, r4, #4294967295
   10648:	4623      	moveq	r3, r4
   1064a:	9302      	str	r3, [sp, #8]
   1064c:	9305      	str	r3, [sp, #20]
   1064e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10652:	f8ad 300e 	strh.w	r3, [sp, #14]
   10656:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   10658:	f7fe f824 	bl	e6a4 <_svfiprintf_r>
   1065c:	1c43      	adds	r3, r0, #1
   1065e:	bfbc      	itt	lt
   10660:	238b      	movlt	r3, #139	; 0x8b
   10662:	602b      	strlt	r3, [r5, #0]
   10664:	2c00      	cmp	r4, #0
   10666:	d0e3      	beq.n	10630 <_vsniprintf_r+0x16>
   10668:	9b00      	ldr	r3, [sp, #0]
   1066a:	2200      	movs	r2, #0
   1066c:	701a      	strb	r2, [r3, #0]
   1066e:	e7df      	b.n	10630 <_vsniprintf_r+0x16>

00010670 <__ssputs_r>:
   10670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10674:	461f      	mov	r7, r3
   10676:	688e      	ldr	r6, [r1, #8]
   10678:	4682      	mov	sl, r0
   1067a:	460c      	mov	r4, r1
   1067c:	42be      	cmp	r6, r7
   1067e:	4690      	mov	r8, r2
   10680:	680b      	ldr	r3, [r1, #0]
   10682:	d82d      	bhi.n	106e0 <__ssputs_r+0x70>
   10684:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   10688:	f412 6f90 	tst.w	r2, #1152	; 0x480
   1068c:	d026      	beq.n	106dc <__ssputs_r+0x6c>
   1068e:	6965      	ldr	r5, [r4, #20]
   10690:	6909      	ldr	r1, [r1, #16]
   10692:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   10696:	eba3 0901 	sub.w	r9, r3, r1
   1069a:	1c7b      	adds	r3, r7, #1
   1069c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   106a0:	444b      	add	r3, r9
   106a2:	106d      	asrs	r5, r5, #1
   106a4:	429d      	cmp	r5, r3
   106a6:	bf38      	it	cc
   106a8:	461d      	movcc	r5, r3
   106aa:	0553      	lsls	r3, r2, #21
   106ac:	d527      	bpl.n	106fe <__ssputs_r+0x8e>
   106ae:	4629      	mov	r1, r5
   106b0:	f7fd fda4 	bl	e1fc <_malloc_r>
   106b4:	4606      	mov	r6, r0
   106b6:	b360      	cbz	r0, 10712 <__ssputs_r+0xa2>
   106b8:	464a      	mov	r2, r9
   106ba:	6921      	ldr	r1, [r4, #16]
   106bc:	f7ff ff45 	bl	1054a <memcpy>
   106c0:	89a3      	ldrh	r3, [r4, #12]
   106c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   106c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   106ca:	81a3      	strh	r3, [r4, #12]
   106cc:	6126      	str	r6, [r4, #16]
   106ce:	444e      	add	r6, r9
   106d0:	6165      	str	r5, [r4, #20]
   106d2:	eba5 0509 	sub.w	r5, r5, r9
   106d6:	6026      	str	r6, [r4, #0]
   106d8:	463e      	mov	r6, r7
   106da:	60a5      	str	r5, [r4, #8]
   106dc:	42be      	cmp	r6, r7
   106de:	d900      	bls.n	106e2 <__ssputs_r+0x72>
   106e0:	463e      	mov	r6, r7
   106e2:	4632      	mov	r2, r6
   106e4:	4641      	mov	r1, r8
   106e6:	6820      	ldr	r0, [r4, #0]
   106e8:	f000 f967 	bl	109ba <memmove>
   106ec:	68a3      	ldr	r3, [r4, #8]
   106ee:	2000      	movs	r0, #0
   106f0:	1b9b      	subs	r3, r3, r6
   106f2:	60a3      	str	r3, [r4, #8]
   106f4:	6823      	ldr	r3, [r4, #0]
   106f6:	4433      	add	r3, r6
   106f8:	6023      	str	r3, [r4, #0]
   106fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   106fe:	462a      	mov	r2, r5
   10700:	f000 f975 	bl	109ee <_realloc_r>
   10704:	4606      	mov	r6, r0
   10706:	2800      	cmp	r0, #0
   10708:	d1e0      	bne.n	106cc <__ssputs_r+0x5c>
   1070a:	6921      	ldr	r1, [r4, #16]
   1070c:	4650      	mov	r0, sl
   1070e:	f7fd fd2b 	bl	e168 <_free_r>
   10712:	230c      	movs	r3, #12
   10714:	f04f 30ff 	mov.w	r0, #4294967295
   10718:	f8ca 3000 	str.w	r3, [sl]
   1071c:	89a3      	ldrh	r3, [r4, #12]
   1071e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10722:	81a3      	strh	r3, [r4, #12]
   10724:	e7e9      	b.n	106fa <__ssputs_r+0x8a>

00010726 <_sungetc_r>:
   10726:	b538      	push	{r3, r4, r5, lr}
   10728:	1c4b      	adds	r3, r1, #1
   1072a:	4614      	mov	r4, r2
   1072c:	d103      	bne.n	10736 <_sungetc_r+0x10>
   1072e:	f04f 35ff 	mov.w	r5, #4294967295
   10732:	4628      	mov	r0, r5
   10734:	bd38      	pop	{r3, r4, r5, pc}
   10736:	8993      	ldrh	r3, [r2, #12]
   10738:	b2cd      	uxtb	r5, r1
   1073a:	f023 0320 	bic.w	r3, r3, #32
   1073e:	8193      	strh	r3, [r2, #12]
   10740:	6853      	ldr	r3, [r2, #4]
   10742:	6b52      	ldr	r2, [r2, #52]	; 0x34
   10744:	b18a      	cbz	r2, 1076a <_sungetc_r+0x44>
   10746:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   10748:	429a      	cmp	r2, r3
   1074a:	dd08      	ble.n	1075e <_sungetc_r+0x38>
   1074c:	6823      	ldr	r3, [r4, #0]
   1074e:	1e5a      	subs	r2, r3, #1
   10750:	6022      	str	r2, [r4, #0]
   10752:	f803 5c01 	strb.w	r5, [r3, #-1]
   10756:	6863      	ldr	r3, [r4, #4]
   10758:	3301      	adds	r3, #1
   1075a:	6063      	str	r3, [r4, #4]
   1075c:	e7e9      	b.n	10732 <_sungetc_r+0xc>
   1075e:	4621      	mov	r1, r4
   10760:	f000 f8e6 	bl	10930 <__submore>
   10764:	2800      	cmp	r0, #0
   10766:	d0f1      	beq.n	1074c <_sungetc_r+0x26>
   10768:	e7e1      	b.n	1072e <_sungetc_r+0x8>
   1076a:	6921      	ldr	r1, [r4, #16]
   1076c:	6822      	ldr	r2, [r4, #0]
   1076e:	b141      	cbz	r1, 10782 <_sungetc_r+0x5c>
   10770:	4291      	cmp	r1, r2
   10772:	d206      	bcs.n	10782 <_sungetc_r+0x5c>
   10774:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   10778:	42a9      	cmp	r1, r5
   1077a:	d102      	bne.n	10782 <_sungetc_r+0x5c>
   1077c:	3a01      	subs	r2, #1
   1077e:	6022      	str	r2, [r4, #0]
   10780:	e7ea      	b.n	10758 <_sungetc_r+0x32>
   10782:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
   10786:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1078a:	6363      	str	r3, [r4, #52]	; 0x34
   1078c:	2303      	movs	r3, #3
   1078e:	63a3      	str	r3, [r4, #56]	; 0x38
   10790:	4623      	mov	r3, r4
   10792:	f803 5f46 	strb.w	r5, [r3, #70]!
   10796:	6023      	str	r3, [r4, #0]
   10798:	2301      	movs	r3, #1
   1079a:	e7de      	b.n	1075a <_sungetc_r+0x34>

0001079c <__ssrefill_r>:
   1079c:	b510      	push	{r4, lr}
   1079e:	460c      	mov	r4, r1
   107a0:	6b49      	ldr	r1, [r1, #52]	; 0x34
   107a2:	b169      	cbz	r1, 107c0 <__ssrefill_r+0x24>
   107a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   107a8:	4299      	cmp	r1, r3
   107aa:	d001      	beq.n	107b0 <__ssrefill_r+0x14>
   107ac:	f7fd fcdc 	bl	e168 <_free_r>
   107b0:	2000      	movs	r0, #0
   107b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   107b4:	6360      	str	r0, [r4, #52]	; 0x34
   107b6:	6063      	str	r3, [r4, #4]
   107b8:	b113      	cbz	r3, 107c0 <__ssrefill_r+0x24>
   107ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   107bc:	6023      	str	r3, [r4, #0]
   107be:	bd10      	pop	{r4, pc}
   107c0:	6923      	ldr	r3, [r4, #16]
   107c2:	f04f 30ff 	mov.w	r0, #4294967295
   107c6:	6023      	str	r3, [r4, #0]
   107c8:	2300      	movs	r3, #0
   107ca:	6063      	str	r3, [r4, #4]
   107cc:	89a3      	ldrh	r3, [r4, #12]
   107ce:	f043 0320 	orr.w	r3, r3, #32
   107d2:	81a3      	strh	r3, [r4, #12]
   107d4:	e7f3      	b.n	107be <__ssrefill_r+0x22>

000107d6 <_printf_common>:
   107d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   107da:	4616      	mov	r6, r2
   107dc:	4698      	mov	r8, r3
   107de:	688a      	ldr	r2, [r1, #8]
   107e0:	4607      	mov	r7, r0
   107e2:	690b      	ldr	r3, [r1, #16]
   107e4:	460c      	mov	r4, r1
   107e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
   107ea:	4293      	cmp	r3, r2
   107ec:	bfb8      	it	lt
   107ee:	4613      	movlt	r3, r2
   107f0:	6033      	str	r3, [r6, #0]
   107f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   107f6:	b10a      	cbz	r2, 107fc <_printf_common+0x26>
   107f8:	3301      	adds	r3, #1
   107fa:	6033      	str	r3, [r6, #0]
   107fc:	6823      	ldr	r3, [r4, #0]
   107fe:	0699      	lsls	r1, r3, #26
   10800:	bf42      	ittt	mi
   10802:	6833      	ldrmi	r3, [r6, #0]
   10804:	3302      	addmi	r3, #2
   10806:	6033      	strmi	r3, [r6, #0]
   10808:	6825      	ldr	r5, [r4, #0]
   1080a:	f015 0506 	ands.w	r5, r5, #6
   1080e:	d106      	bne.n	1081e <_printf_common+0x48>
   10810:	f104 0a19 	add.w	sl, r4, #25
   10814:	68e3      	ldr	r3, [r4, #12]
   10816:	6832      	ldr	r2, [r6, #0]
   10818:	1a9b      	subs	r3, r3, r2
   1081a:	42ab      	cmp	r3, r5
   1081c:	dc2b      	bgt.n	10876 <_printf_common+0xa0>
   1081e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   10822:	6822      	ldr	r2, [r4, #0]
   10824:	3b00      	subs	r3, #0
   10826:	bf18      	it	ne
   10828:	2301      	movne	r3, #1
   1082a:	0692      	lsls	r2, r2, #26
   1082c:	d430      	bmi.n	10890 <_printf_common+0xba>
   1082e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   10832:	4641      	mov	r1, r8
   10834:	4638      	mov	r0, r7
   10836:	47c8      	blx	r9
   10838:	3001      	adds	r0, #1
   1083a:	d023      	beq.n	10884 <_printf_common+0xae>
   1083c:	6823      	ldr	r3, [r4, #0]
   1083e:	341a      	adds	r4, #26
   10840:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   10844:	f003 0306 	and.w	r3, r3, #6
   10848:	2b04      	cmp	r3, #4
   1084a:	bf0a      	itet	eq
   1084c:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   10850:	2500      	movne	r5, #0
   10852:	6833      	ldreq	r3, [r6, #0]
   10854:	f04f 0600 	mov.w	r6, #0
   10858:	bf08      	it	eq
   1085a:	1aed      	subeq	r5, r5, r3
   1085c:	f854 3c12 	ldr.w	r3, [r4, #-18]
   10860:	bf08      	it	eq
   10862:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   10866:	4293      	cmp	r3, r2
   10868:	bfc4      	itt	gt
   1086a:	1a9b      	subgt	r3, r3, r2
   1086c:	18ed      	addgt	r5, r5, r3
   1086e:	42b5      	cmp	r5, r6
   10870:	d11a      	bne.n	108a8 <_printf_common+0xd2>
   10872:	2000      	movs	r0, #0
   10874:	e008      	b.n	10888 <_printf_common+0xb2>
   10876:	2301      	movs	r3, #1
   10878:	4652      	mov	r2, sl
   1087a:	4641      	mov	r1, r8
   1087c:	4638      	mov	r0, r7
   1087e:	47c8      	blx	r9
   10880:	3001      	adds	r0, #1
   10882:	d103      	bne.n	1088c <_printf_common+0xb6>
   10884:	f04f 30ff 	mov.w	r0, #4294967295
   10888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1088c:	3501      	adds	r5, #1
   1088e:	e7c1      	b.n	10814 <_printf_common+0x3e>
   10890:	18e1      	adds	r1, r4, r3
   10892:	1c5a      	adds	r2, r3, #1
   10894:	2030      	movs	r0, #48	; 0x30
   10896:	3302      	adds	r3, #2
   10898:	4422      	add	r2, r4
   1089a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   1089e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   108a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   108a6:	e7c2      	b.n	1082e <_printf_common+0x58>
   108a8:	2301      	movs	r3, #1
   108aa:	4622      	mov	r2, r4
   108ac:	4641      	mov	r1, r8
   108ae:	4638      	mov	r0, r7
   108b0:	47c8      	blx	r9
   108b2:	3001      	adds	r0, #1
   108b4:	d0e6      	beq.n	10884 <_printf_common+0xae>
   108b6:	3601      	adds	r6, #1
   108b8:	e7d9      	b.n	1086e <_printf_common+0x98>

000108ba <__sccl>:
   108ba:	b570      	push	{r4, r5, r6, lr}
   108bc:	780b      	ldrb	r3, [r1, #0]
   108be:	4604      	mov	r4, r0
   108c0:	3801      	subs	r0, #1
   108c2:	2b5e      	cmp	r3, #94	; 0x5e
   108c4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   108c8:	bf13      	iteet	ne
   108ca:	1c4a      	addne	r2, r1, #1
   108cc:	1c8a      	addeq	r2, r1, #2
   108ce:	784b      	ldrbeq	r3, [r1, #1]
   108d0:	2100      	movne	r1, #0
   108d2:	bf08      	it	eq
   108d4:	2101      	moveq	r1, #1
   108d6:	f800 1f01 	strb.w	r1, [r0, #1]!
   108da:	42a8      	cmp	r0, r5
   108dc:	d1fb      	bne.n	108d6 <__sccl+0x1c>
   108de:	b90b      	cbnz	r3, 108e4 <__sccl+0x2a>
   108e0:	1e50      	subs	r0, r2, #1
   108e2:	bd70      	pop	{r4, r5, r6, pc}
   108e4:	f081 0101 	eor.w	r1, r1, #1
   108e8:	4610      	mov	r0, r2
   108ea:	54e1      	strb	r1, [r4, r3]
   108ec:	4602      	mov	r2, r0
   108ee:	f812 5b01 	ldrb.w	r5, [r2], #1
   108f2:	2d2d      	cmp	r5, #45	; 0x2d
   108f4:	d005      	beq.n	10902 <__sccl+0x48>
   108f6:	2d5d      	cmp	r5, #93	; 0x5d
   108f8:	d016      	beq.n	10928 <__sccl+0x6e>
   108fa:	2d00      	cmp	r5, #0
   108fc:	d0f1      	beq.n	108e2 <__sccl+0x28>
   108fe:	462b      	mov	r3, r5
   10900:	e7f2      	b.n	108e8 <__sccl+0x2e>
   10902:	7846      	ldrb	r6, [r0, #1]
   10904:	2e5d      	cmp	r6, #93	; 0x5d
   10906:	d0fa      	beq.n	108fe <__sccl+0x44>
   10908:	42b3      	cmp	r3, r6
   1090a:	dcf8      	bgt.n	108fe <__sccl+0x44>
   1090c:	3002      	adds	r0, #2
   1090e:	461a      	mov	r2, r3
   10910:	3201      	adds	r2, #1
   10912:	4296      	cmp	r6, r2
   10914:	54a1      	strb	r1, [r4, r2]
   10916:	dcfb      	bgt.n	10910 <__sccl+0x56>
   10918:	1af2      	subs	r2, r6, r3
   1091a:	1c5d      	adds	r5, r3, #1
   1091c:	3a01      	subs	r2, #1
   1091e:	42b3      	cmp	r3, r6
   10920:	bfa8      	it	ge
   10922:	2200      	movge	r2, #0
   10924:	18ab      	adds	r3, r5, r2
   10926:	e7e1      	b.n	108ec <__sccl+0x32>
   10928:	4610      	mov	r0, r2
   1092a:	e7da      	b.n	108e2 <__sccl+0x28>

0001092c <__seofread>:
   1092c:	2000      	movs	r0, #0
   1092e:	4770      	bx	lr

00010930 <__submore>:
   10930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10934:	460c      	mov	r4, r1
   10936:	6b49      	ldr	r1, [r1, #52]	; 0x34
   10938:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1093c:	4299      	cmp	r1, r3
   1093e:	d11a      	bne.n	10976 <__submore+0x46>
   10940:	f44f 6180 	mov.w	r1, #1024	; 0x400
   10944:	f7fd fc5a 	bl	e1fc <_malloc_r>
   10948:	b918      	cbnz	r0, 10952 <__submore+0x22>
   1094a:	f04f 30ff 	mov.w	r0, #4294967295
   1094e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10952:	f44f 6380 	mov.w	r3, #1024	; 0x400
   10956:	6360      	str	r0, [r4, #52]	; 0x34
   10958:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   1095c:	63a3      	str	r3, [r4, #56]	; 0x38
   1095e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   10962:	7083      	strb	r3, [r0, #2]
   10964:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   10968:	7043      	strb	r3, [r0, #1]
   1096a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1096e:	7003      	strb	r3, [r0, #0]
   10970:	6020      	str	r0, [r4, #0]
   10972:	2000      	movs	r0, #0
   10974:	e7eb      	b.n	1094e <__submore+0x1e>
   10976:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   10978:	0077      	lsls	r7, r6, #1
   1097a:	463a      	mov	r2, r7
   1097c:	f000 f837 	bl	109ee <_realloc_r>
   10980:	4605      	mov	r5, r0
   10982:	2800      	cmp	r0, #0
   10984:	d0e1      	beq.n	1094a <__submore+0x1a>
   10986:	eb00 0806 	add.w	r8, r0, r6
   1098a:	4601      	mov	r1, r0
   1098c:	4632      	mov	r2, r6
   1098e:	4640      	mov	r0, r8
   10990:	f7ff fddb 	bl	1054a <memcpy>
   10994:	f8c4 8000 	str.w	r8, [r4]
   10998:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   1099c:	e7e9      	b.n	10972 <__submore+0x42>

0001099e <memchr>:
   1099e:	b2c9      	uxtb	r1, r1
   109a0:	4603      	mov	r3, r0
   109a2:	4402      	add	r2, r0
   109a4:	b510      	push	{r4, lr}
   109a6:	4293      	cmp	r3, r2
   109a8:	4618      	mov	r0, r3
   109aa:	d101      	bne.n	109b0 <memchr+0x12>
   109ac:	2000      	movs	r0, #0
   109ae:	e003      	b.n	109b8 <memchr+0x1a>
   109b0:	7804      	ldrb	r4, [r0, #0]
   109b2:	3301      	adds	r3, #1
   109b4:	428c      	cmp	r4, r1
   109b6:	d1f6      	bne.n	109a6 <memchr+0x8>
   109b8:	bd10      	pop	{r4, pc}

000109ba <memmove>:
   109ba:	4288      	cmp	r0, r1
   109bc:	b510      	push	{r4, lr}
   109be:	eb01 0402 	add.w	r4, r1, r2
   109c2:	d902      	bls.n	109ca <memmove+0x10>
   109c4:	4284      	cmp	r4, r0
   109c6:	4623      	mov	r3, r4
   109c8:	d807      	bhi.n	109da <memmove+0x20>
   109ca:	1e43      	subs	r3, r0, #1
   109cc:	42a1      	cmp	r1, r4
   109ce:	d008      	beq.n	109e2 <memmove+0x28>
   109d0:	f811 2b01 	ldrb.w	r2, [r1], #1
   109d4:	f803 2f01 	strb.w	r2, [r3, #1]!
   109d8:	e7f8      	b.n	109cc <memmove+0x12>
   109da:	4402      	add	r2, r0
   109dc:	4601      	mov	r1, r0
   109de:	428a      	cmp	r2, r1
   109e0:	d100      	bne.n	109e4 <memmove+0x2a>
   109e2:	bd10      	pop	{r4, pc}
   109e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   109e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
   109ec:	e7f7      	b.n	109de <memmove+0x24>

000109ee <_realloc_r>:
   109ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   109f0:	4607      	mov	r7, r0
   109f2:	4615      	mov	r5, r2
   109f4:	460c      	mov	r4, r1
   109f6:	b921      	cbnz	r1, 10a02 <_realloc_r+0x14>
   109f8:	4611      	mov	r1, r2
   109fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   109fe:	f7fd bbfd 	b.w	e1fc <_malloc_r>
   10a02:	b922      	cbnz	r2, 10a0e <_realloc_r+0x20>
   10a04:	f7fd fbb0 	bl	e168 <_free_r>
   10a08:	2400      	movs	r4, #0
   10a0a:	4620      	mov	r0, r4
   10a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a0e:	f000 f813 	bl	10a38 <_malloc_usable_size_r>
   10a12:	42a8      	cmp	r0, r5
   10a14:	d2f9      	bcs.n	10a0a <_realloc_r+0x1c>
   10a16:	4629      	mov	r1, r5
   10a18:	4638      	mov	r0, r7
   10a1a:	f7fd fbef 	bl	e1fc <_malloc_r>
   10a1e:	4606      	mov	r6, r0
   10a20:	2800      	cmp	r0, #0
   10a22:	d0f1      	beq.n	10a08 <_realloc_r+0x1a>
   10a24:	4621      	mov	r1, r4
   10a26:	462a      	mov	r2, r5
   10a28:	f7ff fd8f 	bl	1054a <memcpy>
   10a2c:	4621      	mov	r1, r4
   10a2e:	4638      	mov	r0, r7
   10a30:	4634      	mov	r4, r6
   10a32:	f7fd fb99 	bl	e168 <_free_r>
   10a36:	e7e8      	b.n	10a0a <_realloc_r+0x1c>

00010a38 <_malloc_usable_size_r>:
   10a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
   10a3c:	1f18      	subs	r0, r3, #4
   10a3e:	2b00      	cmp	r3, #0
   10a40:	bfbc      	itt	lt
   10a42:	580b      	ldrlt	r3, [r1, r0]
   10a44:	18c0      	addlt	r0, r0, r3
   10a46:	4770      	bx	lr
