
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	30 db 00 20 a9 97 00 00 b7 e1 00 00 7d 97 00 00     0.. ........}...
    8010:	7d 97 00 00 7d 97 00 00 7d 97 00 00 7d 97 00 00     }...}...}...}...
	...
    802c:	15 94 00 00 7d 97 00 00 00 00 00 00 b5 93 00 00     ....}...........
    803c:	7d 97 00 00                                         }...

00008040 <_irq_vector_table>:
    8040:	99 94 00 00 99 94 00 00 99 94 00 00 99 94 00 00     ................
    8050:	99 94 00 00 99 94 00 00 99 94 00 00 99 94 00 00     ................
    8060:	99 94 00 00 99 94 00 00 99 94 00 00 99 94 00 00     ................
    8070:	99 94 00 00 99 94 00 00 99 94 00 00 99 94 00 00     ................
    8080:	99 94 00 00 99 94 00 00 99 94 00 00 99 94 00 00     ................
    8090:	99 94 00 00 99 94 00 00 99 94 00 00 99 94 00 00     ................
    80a0:	99 94 00 00 99 94 00 00 99 94 00 00 99 94 00 00     ................
    80b0:	99 94 00 00 99 94 00 00 99 94 00 00 99 94 00 00     ................
    80c0:	99 94 00 00 99 94 00 00 99 94 00 00 99 94 00 00     ................
    80d0:	99 94 00 00 99 94 00 00 99 94 00 00 99 94 00 00     ................
    80e0:	99 94 00 00 99 94 00 00 99 94 00 00 99 94 00 00     ................
    80f0:	99 94 00 00 99 94 00 00 99 94 00 00 99 94 00 00     ................
    8100:	99 94 00 00 99 94 00 00 99 94 00 00 99 94 00 00     ................
    8110:	99 94 00 00 99 94 00 00 99 94 00 00 99 94 00 00     ................
    8120:	99 94 00 00 99 94 00 00 99 94 00 00 99 94 00 00     ................
    8130:	99 94 00 00 99 94 00 00 99 94 00 00 99 94 00 00     ................
    8140:	99 94 00 00                                         ....

Disassembly of section text:

00008144 <__aeabi_uldivmod>:
    8144:	b953      	cbnz	r3, 815c <__aeabi_uldivmod+0x18>
    8146:	b94a      	cbnz	r2, 815c <__aeabi_uldivmod+0x18>
    8148:	2900      	cmp	r1, #0
    814a:	bf08      	it	eq
    814c:	2800      	cmpeq	r0, #0
    814e:	bf1c      	itt	ne
    8150:	f04f 31ff 	movne.w	r1, #4294967295
    8154:	f04f 30ff 	movne.w	r0, #4294967295
    8158:	f000 b80c 	b.w	8174 <__aeabi_idiv0>
    815c:	f1ad 0c08 	sub.w	ip, sp, #8
    8160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8164:	f000 f808 	bl	8178 <__udivmoddi4>
    8168:	f8dd e004 	ldr.w	lr, [sp, #4]
    816c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8170:	b004      	add	sp, #16
    8172:	4770      	bx	lr

00008174 <__aeabi_idiv0>:
    8174:	4770      	bx	lr
    8176:	bf00      	nop

00008178 <__udivmoddi4>:
    8178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    817c:	4686      	mov	lr, r0
    817e:	468c      	mov	ip, r1
    8180:	4608      	mov	r0, r1
    8182:	9e08      	ldr	r6, [sp, #32]
    8184:	4615      	mov	r5, r2
    8186:	4674      	mov	r4, lr
    8188:	4619      	mov	r1, r3
    818a:	2b00      	cmp	r3, #0
    818c:	f040 80c1 	bne.w	8312 <__udivmoddi4+0x19a>
    8190:	4285      	cmp	r5, r0
    8192:	fab2 f282 	clz	r2, r2
    8196:	d945      	bls.n	8224 <__udivmoddi4+0xac>
    8198:	b14a      	cbz	r2, 81ae <__udivmoddi4+0x36>
    819a:	f1c2 0320 	rsb	r3, r2, #32
    819e:	fa00 fc02 	lsl.w	ip, r0, r2
    81a2:	4095      	lsls	r5, r2
    81a4:	4094      	lsls	r4, r2
    81a6:	fa2e f303 	lsr.w	r3, lr, r3
    81aa:	ea43 0c0c 	orr.w	ip, r3, ip
    81ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    81b2:	b2a8      	uxth	r0, r5
    81b4:	0c23      	lsrs	r3, r4, #16
    81b6:	fbbc f8fe 	udiv	r8, ip, lr
    81ba:	fb0e cc18 	mls	ip, lr, r8, ip
    81be:	fb08 f900 	mul.w	r9, r8, r0
    81c2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    81c6:	4599      	cmp	r9, r3
    81c8:	d928      	bls.n	821c <__udivmoddi4+0xa4>
    81ca:	18eb      	adds	r3, r5, r3
    81cc:	f108 37ff 	add.w	r7, r8, #4294967295
    81d0:	d204      	bcs.n	81dc <__udivmoddi4+0x64>
    81d2:	4599      	cmp	r9, r3
    81d4:	d902      	bls.n	81dc <__udivmoddi4+0x64>
    81d6:	f1a8 0702 	sub.w	r7, r8, #2
    81da:	442b      	add	r3, r5
    81dc:	eba3 0309 	sub.w	r3, r3, r9
    81e0:	b2a4      	uxth	r4, r4
    81e2:	fbb3 fcfe 	udiv	ip, r3, lr
    81e6:	fb0e 331c 	mls	r3, lr, ip, r3
    81ea:	fb0c f000 	mul.w	r0, ip, r0
    81ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    81f2:	42a0      	cmp	r0, r4
    81f4:	d914      	bls.n	8220 <__udivmoddi4+0xa8>
    81f6:	192c      	adds	r4, r5, r4
    81f8:	f10c 33ff 	add.w	r3, ip, #4294967295
    81fc:	d204      	bcs.n	8208 <__udivmoddi4+0x90>
    81fe:	42a0      	cmp	r0, r4
    8200:	d902      	bls.n	8208 <__udivmoddi4+0x90>
    8202:	f1ac 0302 	sub.w	r3, ip, #2
    8206:	442c      	add	r4, r5
    8208:	1a24      	subs	r4, r4, r0
    820a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    820e:	b11e      	cbz	r6, 8218 <__udivmoddi4+0xa0>
    8210:	40d4      	lsrs	r4, r2
    8212:	2300      	movs	r3, #0
    8214:	6034      	str	r4, [r6, #0]
    8216:	6073      	str	r3, [r6, #4]
    8218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    821c:	4647      	mov	r7, r8
    821e:	e7dd      	b.n	81dc <__udivmoddi4+0x64>
    8220:	4663      	mov	r3, ip
    8222:	e7f1      	b.n	8208 <__udivmoddi4+0x90>
    8224:	bb92      	cbnz	r2, 828c <__udivmoddi4+0x114>
    8226:	1b43      	subs	r3, r0, r5
    8228:	2101      	movs	r1, #1
    822a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    822e:	b2af      	uxth	r7, r5
    8230:	0c20      	lsrs	r0, r4, #16
    8232:	fbb3 fcfe 	udiv	ip, r3, lr
    8236:	fb0e 331c 	mls	r3, lr, ip, r3
    823a:	fb0c f807 	mul.w	r8, ip, r7
    823e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8242:	4598      	cmp	r8, r3
    8244:	d961      	bls.n	830a <__udivmoddi4+0x192>
    8246:	18eb      	adds	r3, r5, r3
    8248:	f10c 30ff 	add.w	r0, ip, #4294967295
    824c:	d204      	bcs.n	8258 <__udivmoddi4+0xe0>
    824e:	4598      	cmp	r8, r3
    8250:	d902      	bls.n	8258 <__udivmoddi4+0xe0>
    8252:	f1ac 0002 	sub.w	r0, ip, #2
    8256:	442b      	add	r3, r5
    8258:	eba3 0308 	sub.w	r3, r3, r8
    825c:	b2a4      	uxth	r4, r4
    825e:	fbb3 fcfe 	udiv	ip, r3, lr
    8262:	fb0e 331c 	mls	r3, lr, ip, r3
    8266:	fb0c f707 	mul.w	r7, ip, r7
    826a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    826e:	42a7      	cmp	r7, r4
    8270:	d94d      	bls.n	830e <__udivmoddi4+0x196>
    8272:	192c      	adds	r4, r5, r4
    8274:	f10c 33ff 	add.w	r3, ip, #4294967295
    8278:	d204      	bcs.n	8284 <__udivmoddi4+0x10c>
    827a:	42a7      	cmp	r7, r4
    827c:	d902      	bls.n	8284 <__udivmoddi4+0x10c>
    827e:	f1ac 0302 	sub.w	r3, ip, #2
    8282:	442c      	add	r4, r5
    8284:	1be4      	subs	r4, r4, r7
    8286:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    828a:	e7c0      	b.n	820e <__udivmoddi4+0x96>
    828c:	f1c2 0320 	rsb	r3, r2, #32
    8290:	4095      	lsls	r5, r2
    8292:	4094      	lsls	r4, r2
    8294:	fa20 f103 	lsr.w	r1, r0, r3
    8298:	fa2e f303 	lsr.w	r3, lr, r3
    829c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    82a0:	4090      	lsls	r0, r2
    82a2:	b2af      	uxth	r7, r5
    82a4:	4303      	orrs	r3, r0
    82a6:	fbb1 fcfe 	udiv	ip, r1, lr
    82aa:	fb0e 101c 	mls	r0, lr, ip, r1
    82ae:	0c19      	lsrs	r1, r3, #16
    82b0:	fb0c f807 	mul.w	r8, ip, r7
    82b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    82b8:	4588      	cmp	r8, r1
    82ba:	d922      	bls.n	8302 <__udivmoddi4+0x18a>
    82bc:	1869      	adds	r1, r5, r1
    82be:	f10c 30ff 	add.w	r0, ip, #4294967295
    82c2:	d204      	bcs.n	82ce <__udivmoddi4+0x156>
    82c4:	4588      	cmp	r8, r1
    82c6:	d902      	bls.n	82ce <__udivmoddi4+0x156>
    82c8:	f1ac 0002 	sub.w	r0, ip, #2
    82cc:	4429      	add	r1, r5
    82ce:	eba1 0108 	sub.w	r1, r1, r8
    82d2:	b29b      	uxth	r3, r3
    82d4:	fbb1 fcfe 	udiv	ip, r1, lr
    82d8:	fb0e 111c 	mls	r1, lr, ip, r1
    82dc:	fb0c f707 	mul.w	r7, ip, r7
    82e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    82e4:	429f      	cmp	r7, r3
    82e6:	d90e      	bls.n	8306 <__udivmoddi4+0x18e>
    82e8:	18eb      	adds	r3, r5, r3
    82ea:	f10c 31ff 	add.w	r1, ip, #4294967295
    82ee:	d204      	bcs.n	82fa <__udivmoddi4+0x182>
    82f0:	429f      	cmp	r7, r3
    82f2:	d902      	bls.n	82fa <__udivmoddi4+0x182>
    82f4:	f1ac 0102 	sub.w	r1, ip, #2
    82f8:	442b      	add	r3, r5
    82fa:	1bdb      	subs	r3, r3, r7
    82fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8300:	e793      	b.n	822a <__udivmoddi4+0xb2>
    8302:	4660      	mov	r0, ip
    8304:	e7e3      	b.n	82ce <__udivmoddi4+0x156>
    8306:	4661      	mov	r1, ip
    8308:	e7f7      	b.n	82fa <__udivmoddi4+0x182>
    830a:	4660      	mov	r0, ip
    830c:	e7a4      	b.n	8258 <__udivmoddi4+0xe0>
    830e:	4663      	mov	r3, ip
    8310:	e7b8      	b.n	8284 <__udivmoddi4+0x10c>
    8312:	4283      	cmp	r3, r0
    8314:	d906      	bls.n	8324 <__udivmoddi4+0x1ac>
    8316:	b916      	cbnz	r6, 831e <__udivmoddi4+0x1a6>
    8318:	2100      	movs	r1, #0
    831a:	4608      	mov	r0, r1
    831c:	e77c      	b.n	8218 <__udivmoddi4+0xa0>
    831e:	e9c6 e000 	strd	lr, r0, [r6]
    8322:	e7f9      	b.n	8318 <__udivmoddi4+0x1a0>
    8324:	fab3 f783 	clz	r7, r3
    8328:	b98f      	cbnz	r7, 834e <__udivmoddi4+0x1d6>
    832a:	4283      	cmp	r3, r0
    832c:	d301      	bcc.n	8332 <__udivmoddi4+0x1ba>
    832e:	4572      	cmp	r2, lr
    8330:	d808      	bhi.n	8344 <__udivmoddi4+0x1cc>
    8332:	ebbe 0402 	subs.w	r4, lr, r2
    8336:	eb60 0303 	sbc.w	r3, r0, r3
    833a:	2001      	movs	r0, #1
    833c:	469c      	mov	ip, r3
    833e:	b91e      	cbnz	r6, 8348 <__udivmoddi4+0x1d0>
    8340:	2100      	movs	r1, #0
    8342:	e769      	b.n	8218 <__udivmoddi4+0xa0>
    8344:	4638      	mov	r0, r7
    8346:	e7fa      	b.n	833e <__udivmoddi4+0x1c6>
    8348:	e9c6 4c00 	strd	r4, ip, [r6]
    834c:	e7f8      	b.n	8340 <__udivmoddi4+0x1c8>
    834e:	f1c7 0c20 	rsb	ip, r7, #32
    8352:	40bb      	lsls	r3, r7
    8354:	fa0e f507 	lsl.w	r5, lr, r7
    8358:	fa22 f40c 	lsr.w	r4, r2, ip
    835c:	fa2e f10c 	lsr.w	r1, lr, ip
    8360:	40ba      	lsls	r2, r7
    8362:	431c      	orrs	r4, r3
    8364:	fa20 f30c 	lsr.w	r3, r0, ip
    8368:	40b8      	lsls	r0, r7
    836a:	ea4f 4914 	mov.w	r9, r4, lsr #16
    836e:	4301      	orrs	r1, r0
    8370:	fa1f fe84 	uxth.w	lr, r4
    8374:	fbb3 f8f9 	udiv	r8, r3, r9
    8378:	fb09 3018 	mls	r0, r9, r8, r3
    837c:	0c0b      	lsrs	r3, r1, #16
    837e:	fb08 fa0e 	mul.w	sl, r8, lr
    8382:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    8386:	459a      	cmp	sl, r3
    8388:	d940      	bls.n	840c <__udivmoddi4+0x294>
    838a:	18e3      	adds	r3, r4, r3
    838c:	f108 30ff 	add.w	r0, r8, #4294967295
    8390:	d204      	bcs.n	839c <__udivmoddi4+0x224>
    8392:	459a      	cmp	sl, r3
    8394:	d902      	bls.n	839c <__udivmoddi4+0x224>
    8396:	f1a8 0002 	sub.w	r0, r8, #2
    839a:	4423      	add	r3, r4
    839c:	eba3 030a 	sub.w	r3, r3, sl
    83a0:	b289      	uxth	r1, r1
    83a2:	fbb3 f8f9 	udiv	r8, r3, r9
    83a6:	fb09 3318 	mls	r3, r9, r8, r3
    83aa:	fb08 fe0e 	mul.w	lr, r8, lr
    83ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    83b2:	458e      	cmp	lr, r1
    83b4:	d92c      	bls.n	8410 <__udivmoddi4+0x298>
    83b6:	1861      	adds	r1, r4, r1
    83b8:	f108 33ff 	add.w	r3, r8, #4294967295
    83bc:	d204      	bcs.n	83c8 <__udivmoddi4+0x250>
    83be:	458e      	cmp	lr, r1
    83c0:	d902      	bls.n	83c8 <__udivmoddi4+0x250>
    83c2:	f1a8 0302 	sub.w	r3, r8, #2
    83c6:	4421      	add	r1, r4
    83c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    83cc:	eba1 010e 	sub.w	r1, r1, lr
    83d0:	fba0 9802 	umull	r9, r8, r0, r2
    83d4:	4541      	cmp	r1, r8
    83d6:	46ce      	mov	lr, r9
    83d8:	4643      	mov	r3, r8
    83da:	d302      	bcc.n	83e2 <__udivmoddi4+0x26a>
    83dc:	d106      	bne.n	83ec <__udivmoddi4+0x274>
    83de:	454d      	cmp	r5, r9
    83e0:	d204      	bcs.n	83ec <__udivmoddi4+0x274>
    83e2:	3801      	subs	r0, #1
    83e4:	ebb9 0e02 	subs.w	lr, r9, r2
    83e8:	eb68 0304 	sbc.w	r3, r8, r4
    83ec:	2e00      	cmp	r6, #0
    83ee:	d0a7      	beq.n	8340 <__udivmoddi4+0x1c8>
    83f0:	ebb5 020e 	subs.w	r2, r5, lr
    83f4:	eb61 0103 	sbc.w	r1, r1, r3
    83f8:	fa01 fc0c 	lsl.w	ip, r1, ip
    83fc:	fa22 f307 	lsr.w	r3, r2, r7
    8400:	40f9      	lsrs	r1, r7
    8402:	ea4c 0303 	orr.w	r3, ip, r3
    8406:	e9c6 3100 	strd	r3, r1, [r6]
    840a:	e799      	b.n	8340 <__udivmoddi4+0x1c8>
    840c:	4640      	mov	r0, r8
    840e:	e7c5      	b.n	839c <__udivmoddi4+0x224>
    8410:	4643      	mov	r3, r8
    8412:	e7d9      	b.n	83c8 <__udivmoddi4+0x250>

00008414 <strlen>:
    8414:	4603      	mov	r3, r0
    8416:	f813 2b01 	ldrb.w	r2, [r3], #1
    841a:	2a00      	cmp	r2, #0
    841c:	d1fb      	bne.n	8416 <strlen+0x2>
    841e:	1a18      	subs	r0, r3, r0
    8420:	3801      	subs	r0, #1
    8422:	4770      	bx	lr

00008424 <button_pressed>:
static struct gpio_dt_spec led = GPIO_DT_SPEC_GET_OR(DT_ALIAS(led0), gpios,
						     {0});

void button_pressed(const struct device *dev, struct gpio_callback *cb,
		    uint32_t pins)
{
    8424:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    8426:	f006 f884 	bl	e532 <sys_clock_cycle_get_32>
	printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
}
    842a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    842e:	4601      	mov	r1, r0
	printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
    8430:	4801      	ldr	r0, [pc, #4]	; (8438 <button_pressed+0x14>)
    8432:	f005 bbd2 	b.w	dbda <printk>
    8436:	bf00      	nop
    8438:	0000f6b4 	.word	0x0000f6b4

0000843c <main>:

int main(void)
{
    843c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    843e:	4d49      	ldr	r5, [pc, #292]	; (8564 <main+0x128>)
    8440:	4628      	mov	r0, r5
    8442:	f006 fa5d 	bl	e900 <z_device_is_ready>
	int ret;

	if (!gpio_is_ready_dt(&button)) {
    8446:	b930      	cbnz	r0, 8456 <main+0x1a>
		printk("Error: button device %s is not ready\n",
    8448:	6829      	ldr	r1, [r5, #0]
    844a:	4847      	ldr	r0, [pc, #284]	; (8568 <main+0x12c>)
    844c:	f005 fbc5 	bl	dbda <printk>
			}
			k_msleep(SLEEP_TIME_MS);
		}
	}
	return 0;
}
    8450:	2000      	movs	r0, #0
    8452:	b003      	add	sp, #12
    8454:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = gpio_pin_configure_dt(&button, GPIO_INPUT);
    8456:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    845a:	4844      	ldr	r0, [pc, #272]	; (856c <main+0x130>)
    845c:	f005 fba6 	bl	dbac <gpio_pin_configure_dt>
	if (ret != 0) {
    8460:	4601      	mov	r1, r0
    8462:	b128      	cbz	r0, 8470 <main+0x34>
		printk("Error %d: failed to configure %s pin %d\n",
    8464:	2306      	movs	r3, #6
    8466:	682a      	ldr	r2, [r5, #0]
    8468:	4841      	ldr	r0, [pc, #260]	; (8570 <main+0x134>)
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
    846a:	f005 fbb6 	bl	dbda <printk>
		return 0;
    846e:	e7ef      	b.n	8450 <main+0x14>

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    8470:	692b      	ldr	r3, [r5, #16]
	const struct gpio_driver_api *api =
    8472:	68ae      	ldr	r6, [r5, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    8474:	681b      	ldr	r3, [r3, #0]
					     GPIO_INT_ENABLE_DISABLE_ONLY));
#else
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));
#endif /* CONFIG_GPIO_ENABLE_DISABLE_INTERRUPT */

	return api->pin_interrupt_configure(port, pin, mode, trig);
    8476:	2106      	movs	r1, #6
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    8478:	f013 0f40 	tst.w	r3, #64	; 0x40
	return api->pin_interrupt_configure(port, pin, mode, trig);
    847c:	69b4      	ldr	r4, [r6, #24]
    847e:	bf14      	ite	ne
    8480:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
    8484:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
    8488:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    848c:	4628      	mov	r0, r5
    848e:	47a0      	blx	r4
			ret, button.port->name, button.pin);
    8490:	682c      	ldr	r4, [r5, #0]
	if (ret != 0) {
    8492:	4601      	mov	r1, r0
    8494:	b118      	cbz	r0, 849e <main+0x62>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
    8496:	2306      	movs	r3, #6
    8498:	4622      	mov	r2, r4
    849a:	4836      	ldr	r0, [pc, #216]	; (8574 <main+0x138>)
    849c:	e7e5      	b.n	846a <main+0x2e>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    849e:	4936      	ldr	r1, [pc, #216]	; (8578 <main+0x13c>)
    84a0:	4b36      	ldr	r3, [pc, #216]	; (857c <main+0x140>)
    84a2:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    84a4:	2340      	movs	r3, #64	; 0x40
    84a6:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    84a8:	69f3      	ldr	r3, [r6, #28]
    84aa:	b113      	cbz	r3, 84b2 <main+0x76>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    84ac:	2201      	movs	r2, #1
    84ae:	4628      	mov	r0, r5
    84b0:	4798      	blx	r3
	printk("Set up button at %s pin %d\n", button.port->name, button.pin);
    84b2:	4621      	mov	r1, r4
	if (led.port && !device_is_ready(led.port)) {
    84b4:	4c32      	ldr	r4, [pc, #200]	; (8580 <main+0x144>)
	printk("Set up button at %s pin %d\n", button.port->name, button.pin);
    84b6:	4833      	ldr	r0, [pc, #204]	; (8584 <main+0x148>)
    84b8:	2206      	movs	r2, #6
    84ba:	f005 fb8e 	bl	dbda <printk>
	if (led.port && !device_is_ready(led.port)) {
    84be:	6820      	ldr	r0, [r4, #0]
    84c0:	b150      	cbz	r0, 84d8 <main+0x9c>
    84c2:	f006 fa1d 	bl	e900 <z_device_is_ready>
		       ret, led.port->name);
    84c6:	6823      	ldr	r3, [r4, #0]
	if (led.port && !device_is_ready(led.port)) {
    84c8:	4606      	mov	r6, r0
    84ca:	bb08      	cbnz	r0, 8510 <main+0xd4>
		printk("Error %d: LED device %s is not ready; ignoring it\n",
    84cc:	4601      	mov	r1, r0
    84ce:	681a      	ldr	r2, [r3, #0]
    84d0:	482d      	ldr	r0, [pc, #180]	; (8588 <main+0x14c>)
    84d2:	f005 fb82 	bl	dbda <printk>
		led.port = NULL;
    84d6:	6026      	str	r6, [r4, #0]
	printk("Press the button\n");
    84d8:	482c      	ldr	r0, [pc, #176]	; (858c <main+0x150>)
    84da:	f005 fb7e 	bl	dbda <printk>
	if (led.port) {
    84de:	6823      	ldr	r3, [r4, #0]
    84e0:	2b00      	cmp	r3, #0
    84e2:	d0b5      	beq.n	8450 <main+0x14>
	const struct gpio_driver_data *const data =
    84e4:	692e      	ldr	r6, [r5, #16]
	return api->port_get_raw(port, value);
    84e6:	4f1f      	ldr	r7, [pc, #124]	; (8564 <main+0x128>)
    84e8:	68ab      	ldr	r3, [r5, #8]
    84ea:	4638      	mov	r0, r7
    84ec:	685b      	ldr	r3, [r3, #4]
    84ee:	a901      	add	r1, sp, #4
    84f0:	4798      	blx	r3
	if (ret == 0) {
    84f2:	1e03      	subs	r3, r0, #0
    84f4:	d025      	beq.n	8542 <main+0x106>
			if (val >= 0) {
    84f6:	db2f      	blt.n	8558 <main+0x11c>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    84f8:	2101      	movs	r1, #1
    84fa:	7922      	ldrb	r2, [r4, #4]
	return gpio_pin_set(spec->port, spec->pin, value);
    84fc:	6820      	ldr	r0, [r4, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    84fe:	4091      	lsls	r1, r2
    8500:	6902      	ldr	r2, [r0, #16]
    8502:	6812      	ldr	r2, [r2, #0]
    8504:	4211      	tst	r1, r2
    8506:	d022      	beq.n	854e <main+0x112>
	if (value != 0)	{
    8508:	b31b      	cbz	r3, 8552 <main+0x116>
	return api->port_clear_bits_raw(port, pins);
    850a:	6883      	ldr	r3, [r0, #8]
    850c:	691b      	ldr	r3, [r3, #16]
    850e:	e022      	b.n	8556 <main+0x11a>
	if (led.port) {
    8510:	2b00      	cmp	r3, #0
    8512:	d0e1      	beq.n	84d8 <main+0x9c>
		ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT);
    8514:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    8518:	4620      	mov	r0, r4
    851a:	f005 fb47 	bl	dbac <gpio_pin_configure_dt>
		if (ret != 0) {
    851e:	7923      	ldrb	r3, [r4, #4]
    8520:	4601      	mov	r1, r0
    8522:	b138      	cbz	r0, 8534 <main+0xf8>
			       ret, led.port->name, led.pin);
    8524:	6822      	ldr	r2, [r4, #0]
			printk("Error %d: failed to configure LED device %s pin %d\n",
    8526:	481a      	ldr	r0, [pc, #104]	; (8590 <main+0x154>)
    8528:	6812      	ldr	r2, [r2, #0]
    852a:	f005 fb56 	bl	dbda <printk>
			led.port = NULL;
    852e:	2300      	movs	r3, #0
    8530:	6023      	str	r3, [r4, #0]
    8532:	e7d1      	b.n	84d8 <main+0x9c>
			printk("Set up LED at %s pin %d\n", led.port->name, led.pin);
    8534:	6821      	ldr	r1, [r4, #0]
    8536:	461a      	mov	r2, r3
    8538:	6809      	ldr	r1, [r1, #0]
    853a:	4816      	ldr	r0, [pc, #88]	; (8594 <main+0x158>)
    853c:	f005 fb4d 	bl	dbda <printk>
    8540:	e7ca      	b.n	84d8 <main+0x9c>
		*value ^= data->invert;
    8542:	6832      	ldr	r2, [r6, #0]
    8544:	9b01      	ldr	r3, [sp, #4]
    8546:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    8548:	f3c3 1380 	ubfx	r3, r3, #6, #1
			if (val >= 0) {
    854c:	e7d4      	b.n	84f8 <main+0xbc>
	if (value != 0)	{
    854e:	2b00      	cmp	r3, #0
    8550:	d0db      	beq.n	850a <main+0xce>
	return api->port_set_bits_raw(port, pins);
    8552:	6883      	ldr	r3, [r0, #8]
    8554:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    8556:	4798      	blx	r3
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    8558:	2100      	movs	r1, #0
    855a:	2021      	movs	r0, #33	; 0x21
    855c:	f004 fdc0 	bl	d0e0 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    8560:	e7c2      	b.n	84e8 <main+0xac>
    8562:	bf00      	nop
    8564:	0000f070 	.word	0x0000f070
    8568:	0000f6ca 	.word	0x0000f6ca
    856c:	0000f358 	.word	0x0000f358
    8570:	0000f6f0 	.word	0x0000f6f0
    8574:	0000f719 	.word	0x0000f719
    8578:	2000c830 	.word	0x2000c830
    857c:	00008425 	.word	0x00008425
    8580:	2000c580 	.word	0x2000c580
    8584:	0000f74f 	.word	0x0000f74f
    8588:	0000f76b 	.word	0x0000f76b
    858c:	0000f7eb 	.word	0x0000f7eb
    8590:	0000f79e 	.word	0x0000f79e
    8594:	0000f7d2 	.word	0x0000f7d2

00008598 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    8598:	4b01      	ldr	r3, [pc, #4]	; (85a0 <char_out+0x8>)
    859a:	681b      	ldr	r3, [r3, #0]
    859c:	4718      	bx	r3
    859e:	bf00      	nop
    85a0:	2000c588 	.word	0x2000c588

000085a4 <__printk_hook_install>:
	_char_out = fn;
    85a4:	4b01      	ldr	r3, [pc, #4]	; (85ac <__printk_hook_install+0x8>)
    85a6:	6018      	str	r0, [r3, #0]
}
    85a8:	4770      	bx	lr
    85aa:	bf00      	nop
    85ac:	2000c588 	.word	0x2000c588

000085b0 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    85b0:	b507      	push	{r0, r1, r2, lr}
    85b2:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    85b4:	2100      	movs	r1, #0
    85b6:	4602      	mov	r2, r0
    85b8:	9100      	str	r1, [sp, #0]
    85ba:	4803      	ldr	r0, [pc, #12]	; (85c8 <vprintk+0x18>)
    85bc:	f000 f976 	bl	88ac <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    85c0:	b003      	add	sp, #12
    85c2:	f85d fb04 	ldr.w	pc, [sp], #4
    85c6:	bf00      	nop
    85c8:	00008599 	.word	0x00008599

000085cc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    85cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    85d0:	8b05      	ldrh	r5, [r0, #24]
{
    85d2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    85d4:	0728      	lsls	r0, r5, #28
{
    85d6:	4690      	mov	r8, r2
	if (processing) {
    85d8:	d411      	bmi.n	85fe <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    85da:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    85dc:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    85e0:	f040 80cd 	bne.w	877e <process_event+0x1b2>
			evt = process_recheck(mgr);
    85e4:	4620      	mov	r0, r4
    85e6:	f005 fcd9 	bl	df9c <process_recheck>
		}

		if (evt == EVT_NOP) {
    85ea:	b178      	cbz	r0, 860c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    85ec:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    85ee:	8b21      	ldrh	r1, [r4, #24]
    85f0:	2804      	cmp	r0, #4
    85f2:	d811      	bhi.n	8618 <process_event+0x4c>
    85f4:	e8df f000 	tbb	[pc, r0]
    85f8:	856d10c3 	.word	0x856d10c3
    85fc:	95          	.byte	0x95
    85fd:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    85fe:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    8600:	bf0c      	ite	eq
    8602:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8606:	f045 0520 	orrne.w	r5, r5, #32
    860a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    860c:	f388 8811 	msr	BASEPRI, r8
    8610:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    8614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8618:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    861c:	45aa      	cmp	sl, r5
    861e:	f000 80a6 	beq.w	876e <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    8622:	2700      	movs	r7, #0
    8624:	46b9      	mov	r9, r7
    8626:	463e      	mov	r6, r7
    8628:	68a3      	ldr	r3, [r4, #8]
    862a:	2b00      	cmp	r3, #0
    862c:	f000 80bd 	beq.w	87aa <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    8630:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    8634:	8321      	strh	r1, [r4, #24]
    8636:	f388 8811 	msr	BASEPRI, r8
    863a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    863e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    8640:	2900      	cmp	r1, #0
    8642:	f000 80bb 	beq.w	87bc <process_event+0x1f0>
	return node->next;
    8646:	680d      	ldr	r5, [r1, #0]
    8648:	2900      	cmp	r1, #0
    864a:	f000 80b7 	beq.w	87bc <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    864e:	4633      	mov	r3, r6
    8650:	4652      	mov	r2, sl
    8652:	4620      	mov	r0, r4
    8654:	f8d1 8004 	ldr.w	r8, [r1, #4]
    8658:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    865a:	2d00      	cmp	r5, #0
    865c:	d076      	beq.n	874c <process_event+0x180>
    865e:	682b      	ldr	r3, [r5, #0]
    8660:	4629      	mov	r1, r5
    8662:	461d      	mov	r5, r3
    8664:	e7f0      	b.n	8648 <process_event+0x7c>
    8666:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    866a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    866c:	2a01      	cmp	r2, #1
    866e:	d81b      	bhi.n	86a8 <process_event+0xdc>
	list->head = NULL;
    8670:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8672:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    8676:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    8678:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    867a:	b289      	uxth	r1, r1
	list->tail = NULL;
    867c:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    8680:	d109      	bne.n	8696 <process_event+0xca>
    8682:	463b      	mov	r3, r7
    8684:	e003      	b.n	868e <process_event+0xc2>
				mgr->refs += 1U;
    8686:	8b62      	ldrh	r2, [r4, #26]
    8688:	3201      	adds	r2, #1
    868a:	8362      	strh	r2, [r4, #26]
	return node->next;
    868c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    868e:	2b00      	cmp	r3, #0
    8690:	d1f9      	bne.n	8686 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8692:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    8696:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    8698:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    869a:	f005 fc7f 	bl	df9c <process_recheck>
    869e:	2800      	cmp	r0, #0
    86a0:	d07b      	beq.n	879a <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    86a2:	f041 0120 	orr.w	r1, r1, #32
    86a6:	e077      	b.n	8798 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    86a8:	2b04      	cmp	r3, #4
    86aa:	d10a      	bne.n	86c2 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    86ac:	f021 0107 	bic.w	r1, r1, #7
    86b0:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    86b2:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    86b4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    86b6:	f005 fc71 	bl	df9c <process_recheck>
    86ba:	b110      	cbz	r0, 86c2 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    86bc:	f041 0120 	orr.w	r1, r1, #32
    86c0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    86c2:	8b21      	ldrh	r1, [r4, #24]
    86c4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    86c8:	45aa      	cmp	sl, r5
    86ca:	d050      	beq.n	876e <process_event+0x1a2>
    86cc:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    86ce:	46b9      	mov	r9, r7
    86d0:	e7aa      	b.n	8628 <process_event+0x5c>
			transit = mgr->transitions->start;
    86d2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    86d4:	f021 0107 	bic.w	r1, r1, #7
    86d8:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    86dc:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    86de:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    86e2:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    86e4:	d12d      	bne.n	8742 <process_event+0x176>
		    || (transit != NULL)) {
    86e6:	f1b9 0f00 	cmp.w	r9, #0
    86ea:	d040      	beq.n	876e <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    86ec:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    86f0:	8321      	strh	r1, [r4, #24]
    86f2:	f388 8811 	msr	BASEPRI, r8
    86f6:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    86fa:	4620      	mov	r0, r4
    86fc:	4939      	ldr	r1, [pc, #228]	; (87e4 <process_event+0x218>)
    86fe:	47c8      	blx	r9
    8700:	e029      	b.n	8756 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8702:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    8706:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8708:	f041 0104 	orr.w	r1, r1, #4
    870c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    870e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    8710:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    8714:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    8716:	d0e6      	beq.n	86e6 <process_event+0x11a>
    8718:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    871a:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    871e:	463e      	mov	r6, r7
    8720:	e782      	b.n	8628 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8722:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    8726:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8728:	f041 0105 	orr.w	r1, r1, #5
    872c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    872e:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    8730:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    8734:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    8736:	d0d6      	beq.n	86e6 <process_event+0x11a>
    8738:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    873a:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    873e:	463e      	mov	r6, r7
    8740:	e772      	b.n	8628 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    8742:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8744:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    8748:	463e      	mov	r6, r7
    874a:	e76d      	b.n	8628 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    874c:	462b      	mov	r3, r5
    874e:	e787      	b.n	8660 <process_event+0x94>
			if (transit != NULL) {
    8750:	f1b9 0f00 	cmp.w	r9, #0
    8754:	d1d1      	bne.n	86fa <process_event+0x12e>
	__asm__ volatile(
    8756:	f04f 0320 	mov.w	r3, #32
    875a:	f3ef 8811 	mrs	r8, BASEPRI
    875e:	f383 8812 	msr	BASEPRI_MAX, r3
    8762:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    8766:	8b23      	ldrh	r3, [r4, #24]
    8768:	f023 0308 	bic.w	r3, r3, #8
    876c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    876e:	8b25      	ldrh	r5, [r4, #24]
    8770:	06ea      	lsls	r2, r5, #27
    8772:	d52e      	bpl.n	87d2 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    8774:	f025 0310 	bic.w	r3, r5, #16
    8778:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    877a:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    877e:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8780:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    8782:	2e00      	cmp	r6, #0
    8784:	f6bf af6f 	bge.w	8666 <process_event+0x9a>
	list->head = NULL;
    8788:	2300      	movs	r3, #0
		*clients = mgr->clients;
    878a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    878c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8790:	f021 0107 	bic.w	r1, r1, #7
    8794:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8798:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    879a:	8b21      	ldrh	r1, [r4, #24]
    879c:	f04f 0900 	mov.w	r9, #0
    87a0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    87a4:	45aa      	cmp	sl, r5
    87a6:	f47f af3f 	bne.w	8628 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    87aa:	2f00      	cmp	r7, #0
    87ac:	d09b      	beq.n	86e6 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    87ae:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    87b2:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    87b4:	f388 8811 	msr	BASEPRI, r8
    87b8:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    87bc:	2f00      	cmp	r7, #0
    87be:	d0c7      	beq.n	8750 <process_event+0x184>
	return node->next;
    87c0:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    87c2:	4639      	mov	r1, r7
    87c4:	4633      	mov	r3, r6
    87c6:	4652      	mov	r2, sl
    87c8:	4620      	mov	r0, r4
    87ca:	f005 fc13 	bl	dff4 <notify_one>
	list->head = node;
    87ce:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    87d0:	e7f4      	b.n	87bc <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    87d2:	06ab      	lsls	r3, r5, #26
    87d4:	f57f af1a 	bpl.w	860c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    87d8:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    87dc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    87de:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    87e2:	e6ff      	b.n	85e4 <process_event+0x18>
    87e4:	0000e021 	.word	0x0000e021

000087e8 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    87e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    87ea:	4602      	mov	r2, r0
    87ec:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp) != 0) {
		val = 10U * val + *sp++ - '0';
    87ee:	270a      	movs	r7, #10
	size_t val = 0;
    87f0:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp) != 0) {
    87f2:	4e07      	ldr	r6, [pc, #28]	; (8810 <extract_decimal+0x28>)
    87f4:	460b      	mov	r3, r1
    87f6:	781c      	ldrb	r4, [r3, #0]
    87f8:	3101      	adds	r1, #1
    87fa:	5d35      	ldrb	r5, [r6, r4]
    87fc:	076d      	lsls	r5, r5, #29
    87fe:	d401      	bmi.n	8804 <extract_decimal+0x1c>
	}
	*str = sp;
    8800:	6013      	str	r3, [r2, #0]
	return val;
}
    8802:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    8804:	fb07 4300 	mla	r3, r7, r0, r4
    8808:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    880c:	e7f2      	b.n	87f4 <extract_decimal+0xc>
    880e:	bf00      	nop
    8810:	0000f950 	.word	0x0000f950

00008814 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    8814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8818:	4615      	mov	r5, r2
    881a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    881c:	78d3      	ldrb	r3, [r2, #3]
    881e:	4a22      	ldr	r2, [pc, #136]	; (88a8 <encode_uint+0x94>)
	switch (specifier) {
    8820:	2b6f      	cmp	r3, #111	; 0x6f
    8822:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    8826:	4680      	mov	r8, r0
    8828:	460f      	mov	r7, r1
    882a:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    882e:	d029      	beq.n	8884 <encode_uint+0x70>
    8830:	d824      	bhi.n	887c <encode_uint+0x68>
		return 10;
    8832:	2b58      	cmp	r3, #88	; 0x58
    8834:	bf0c      	ite	eq
    8836:	2610      	moveq	r6, #16
    8838:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    883a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    883e:	4632      	mov	r2, r6
    8840:	2300      	movs	r3, #0
    8842:	4640      	mov	r0, r8
    8844:	4639      	mov	r1, r7
    8846:	f7ff fc7d 	bl	8144 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    884a:	2a09      	cmp	r2, #9
    884c:	b2d4      	uxtb	r4, r2
    884e:	d81e      	bhi.n	888e <encode_uint+0x7a>
    8850:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    8852:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8854:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    8856:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    885a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    885e:	d301      	bcc.n	8864 <encode_uint+0x50>
    8860:	45d1      	cmp	r9, sl
    8862:	d811      	bhi.n	8888 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    8864:	782b      	ldrb	r3, [r5, #0]
    8866:	069b      	lsls	r3, r3, #26
    8868:	d505      	bpl.n	8876 <encode_uint+0x62>
		if (radix == 8) {
    886a:	2e08      	cmp	r6, #8
    886c:	d115      	bne.n	889a <encode_uint+0x86>
			conv->altform_0 = true;
    886e:	78ab      	ldrb	r3, [r5, #2]
    8870:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    8874:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    8876:	4648      	mov	r0, r9
    8878:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    887c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    8880:	2b70      	cmp	r3, #112	; 0x70
    8882:	e7d7      	b.n	8834 <encode_uint+0x20>
	switch (specifier) {
    8884:	2608      	movs	r6, #8
    8886:	e7d8      	b.n	883a <encode_uint+0x26>
		value /= radix;
    8888:	4680      	mov	r8, r0
    888a:	460f      	mov	r7, r1
    888c:	e7d7      	b.n	883e <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    888e:	f1bb 0f01 	cmp.w	fp, #1
    8892:	bf0c      	ite	eq
    8894:	3437      	addeq	r4, #55	; 0x37
    8896:	3457      	addne	r4, #87	; 0x57
    8898:	e7db      	b.n	8852 <encode_uint+0x3e>
		} else if (radix == 16) {
    889a:	2e10      	cmp	r6, #16
    889c:	d1eb      	bne.n	8876 <encode_uint+0x62>
			conv->altform_0c = true;
    889e:	78ab      	ldrb	r3, [r5, #2]
    88a0:	f043 0310 	orr.w	r3, r3, #16
    88a4:	e7e6      	b.n	8874 <encode_uint+0x60>
    88a6:	bf00      	nop
    88a8:	0000f950 	.word	0x0000f950

000088ac <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    88ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88b0:	468a      	mov	sl, r1
    88b2:	4616      	mov	r6, r2
    88b4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    88b6:	2500      	movs	r5, #0
{
    88b8:	b097      	sub	sp, #92	; 0x5c
    88ba:	9003      	str	r0, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    88bc:	7830      	ldrb	r0, [r6, #0]
    88be:	b908      	cbnz	r0, 88c4 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    88c0:	4628      	mov	r0, r5
    88c2:	e34a      	b.n	8f5a <z_cbvprintf_impl+0x6ae>
			OUTC(*fp++);
    88c4:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    88c6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    88c8:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    88ca:	d007      	beq.n	88dc <z_cbvprintf_impl+0x30>
			OUTC('%');
    88cc:	4651      	mov	r1, sl
    88ce:	9b03      	ldr	r3, [sp, #12]
    88d0:	4798      	blx	r3
    88d2:	2800      	cmp	r0, #0
    88d4:	f2c0 8341 	blt.w	8f5a <z_cbvprintf_impl+0x6ae>
    88d8:	3501      	adds	r5, #1
		if (bps == NULL) {
    88da:	e1f0      	b.n	8cbe <z_cbvprintf_impl+0x412>
		} state = {
    88dc:	2218      	movs	r2, #24
    88de:	2100      	movs	r1, #0
    88e0:	a810      	add	r0, sp, #64	; 0x40
    88e2:	f006 f9fe 	bl	ece2 <memset>
	if (*sp == '%') {
    88e6:	7873      	ldrb	r3, [r6, #1]
    88e8:	2b25      	cmp	r3, #37	; 0x25
    88ea:	f000 80a3 	beq.w	8a34 <z_cbvprintf_impl+0x188>
    88ee:	2300      	movs	r3, #0
    88f0:	4698      	mov	r8, r3
    88f2:	469e      	mov	lr, r3
    88f4:	469c      	mov	ip, r3
    88f6:	4618      	mov	r0, r3
    88f8:	1c71      	adds	r1, r6, #1
    88fa:	460f      	mov	r7, r1
		switch (*sp) {
    88fc:	f811 2b01 	ldrb.w	r2, [r1], #1
    8900:	2a2b      	cmp	r2, #43	; 0x2b
    8902:	f000 80c6 	beq.w	8a92 <z_cbvprintf_impl+0x1e6>
    8906:	f200 80bd 	bhi.w	8a84 <z_cbvprintf_impl+0x1d8>
    890a:	2a20      	cmp	r2, #32
    890c:	f000 80c4 	beq.w	8a98 <z_cbvprintf_impl+0x1ec>
    8910:	2a23      	cmp	r2, #35	; 0x23
    8912:	f000 80c4 	beq.w	8a9e <z_cbvprintf_impl+0x1f2>
    8916:	b12b      	cbz	r3, 8924 <z_cbvprintf_impl+0x78>
    8918:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    891c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8920:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    8924:	f1b8 0f00 	cmp.w	r8, #0
    8928:	d005      	beq.n	8936 <z_cbvprintf_impl+0x8a>
    892a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    892e:	f043 0320 	orr.w	r3, r3, #32
    8932:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    8936:	f1be 0f00 	cmp.w	lr, #0
    893a:	d005      	beq.n	8948 <z_cbvprintf_impl+0x9c>
    893c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8940:	f043 0310 	orr.w	r3, r3, #16
    8944:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    8948:	f1bc 0f00 	cmp.w	ip, #0
    894c:	d005      	beq.n	895a <z_cbvprintf_impl+0xae>
    894e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8952:	f043 0308 	orr.w	r3, r3, #8
    8956:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    895a:	b128      	cbz	r0, 8968 <z_cbvprintf_impl+0xbc>
    895c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8960:	f043 0304 	orr.w	r3, r3, #4
    8964:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    8968:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    896c:	f003 0144 	and.w	r1, r3, #68	; 0x44
    8970:	2944      	cmp	r1, #68	; 0x44
    8972:	d103      	bne.n	897c <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
    8974:	f36f 1386 	bfc	r3, #6, #1
    8978:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    897c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    8980:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    8982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8986:	9709      	str	r7, [sp, #36]	; 0x24
    8988:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    898c:	f040 808c 	bne.w	8aa8 <z_cbvprintf_impl+0x1fc>
		conv->width_star = true;
    8990:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    8994:	f043 0301 	orr.w	r3, r3, #1
    8998:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    899c:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
    899e:	781a      	ldrb	r2, [r3, #0]
    89a0:	2a2e      	cmp	r2, #46	; 0x2e
    89a2:	bf0c      	ite	eq
    89a4:	2101      	moveq	r1, #1
    89a6:	2100      	movne	r1, #0
    89a8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    89ac:	f361 0241 	bfi	r2, r1, #1, #1
    89b0:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    89b4:	d10c      	bne.n	89d0 <z_cbvprintf_impl+0x124>
	++sp;
    89b6:	1c5a      	adds	r2, r3, #1
    89b8:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    89ba:	785a      	ldrb	r2, [r3, #1]
    89bc:	2a2a      	cmp	r2, #42	; 0x2a
    89be:	f040 8083 	bne.w	8ac8 <z_cbvprintf_impl+0x21c>
		conv->prec_star = true;
    89c2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    89c6:	3302      	adds	r3, #2
		conv->prec_star = true;
    89c8:	f042 0204 	orr.w	r2, r2, #4
    89cc:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    89d0:	781a      	ldrb	r2, [r3, #0]
    89d2:	2a6c      	cmp	r2, #108	; 0x6c
    89d4:	f000 80a4 	beq.w	8b20 <z_cbvprintf_impl+0x274>
    89d8:	f200 8086 	bhi.w	8ae8 <z_cbvprintf_impl+0x23c>
    89dc:	2a68      	cmp	r2, #104	; 0x68
    89de:	f000 808c 	beq.w	8afa <z_cbvprintf_impl+0x24e>
    89e2:	2a6a      	cmp	r2, #106	; 0x6a
    89e4:	f000 80a5 	beq.w	8b32 <z_cbvprintf_impl+0x286>
    89e8:	2a4c      	cmp	r2, #76	; 0x4c
    89ea:	f000 80aa 	beq.w	8b42 <z_cbvprintf_impl+0x296>
	conv->specifier = *sp++;
    89ee:	461a      	mov	r2, r3
    89f0:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    89f4:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    89f6:	9204      	str	r2, [sp, #16]
    89f8:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    89fc:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    8a00:	f200 8117 	bhi.w	8c32 <z_cbvprintf_impl+0x386>
    8a04:	2b6d      	cmp	r3, #109	; 0x6d
    8a06:	f200 80a9 	bhi.w	8b5c <z_cbvprintf_impl+0x2b0>
    8a0a:	2b69      	cmp	r3, #105	; 0x69
    8a0c:	f200 8111 	bhi.w	8c32 <z_cbvprintf_impl+0x386>
    8a10:	2b57      	cmp	r3, #87	; 0x57
    8a12:	f200 80be 	bhi.w	8b92 <z_cbvprintf_impl+0x2e6>
    8a16:	2b41      	cmp	r3, #65	; 0x41
    8a18:	d003      	beq.n	8a22 <z_cbvprintf_impl+0x176>
    8a1a:	3b45      	subs	r3, #69	; 0x45
    8a1c:	2b02      	cmp	r3, #2
    8a1e:	f200 8108 	bhi.w	8c32 <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_FP;
    8a22:	2204      	movs	r2, #4
    8a24:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    8a28:	f362 0302 	bfi	r3, r2, #0, #3
    8a2c:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    8a30:	2301      	movs	r3, #1
			break;
    8a32:	e0ca      	b.n	8bca <z_cbvprintf_impl+0x31e>
		conv->specifier = *sp++;
    8a34:	1cb2      	adds	r2, r6, #2
    8a36:	9204      	str	r2, [sp, #16]
    8a38:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    8a3c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    8a40:	07d9      	lsls	r1, r3, #31
    8a42:	f140 80fd 	bpl.w	8c40 <z_cbvprintf_impl+0x394>
			width = va_arg(ap, int);
    8a46:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    8a4a:	f1b8 0f00 	cmp.w	r8, #0
    8a4e:	da07      	bge.n	8a60 <z_cbvprintf_impl+0x1b4>
				conv->flag_dash = true;
    8a50:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    8a54:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    8a58:	f042 0204 	orr.w	r2, r2, #4
    8a5c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    8a60:	075a      	lsls	r2, r3, #29
    8a62:	f140 80f6 	bpl.w	8c52 <z_cbvprintf_impl+0x3a6>
			int arg = va_arg(ap, int);
    8a66:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    8a6a:	f1bb 0f00 	cmp.w	fp, #0
    8a6e:	f280 80f5 	bge.w	8c5c <z_cbvprintf_impl+0x3b0>
				conv->prec_present = false;
    8a72:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    8a76:	f36f 0341 	bfc	r3, #1, #1
    8a7a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    8a7e:	f04f 3bff 	mov.w	fp, #4294967295
    8a82:	e0eb      	b.n	8c5c <z_cbvprintf_impl+0x3b0>
		switch (*sp) {
    8a84:	2a2d      	cmp	r2, #45	; 0x2d
    8a86:	d00d      	beq.n	8aa4 <z_cbvprintf_impl+0x1f8>
    8a88:	2a30      	cmp	r2, #48	; 0x30
    8a8a:	f47f af44 	bne.w	8916 <z_cbvprintf_impl+0x6a>
    8a8e:	2301      	movs	r3, #1
	} while (loop);
    8a90:	e733      	b.n	88fa <z_cbvprintf_impl+0x4e>
		switch (*sp) {
    8a92:	f04f 0c01 	mov.w	ip, #1
    8a96:	e730      	b.n	88fa <z_cbvprintf_impl+0x4e>
    8a98:	f04f 0e01 	mov.w	lr, #1
    8a9c:	e72d      	b.n	88fa <z_cbvprintf_impl+0x4e>
    8a9e:	f04f 0801 	mov.w	r8, #1
    8aa2:	e72a      	b.n	88fa <z_cbvprintf_impl+0x4e>
    8aa4:	2001      	movs	r0, #1
    8aa6:	e728      	b.n	88fa <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
    8aa8:	a809      	add	r0, sp, #36	; 0x24
    8aaa:	f7ff fe9d 	bl	87e8 <extract_decimal>
	if (sp != wp) {
    8aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8ab0:	42bb      	cmp	r3, r7
    8ab2:	f43f af74 	beq.w	899e <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
    8ab6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    8aba:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    8abc:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    8abe:	f360 0241 	bfi	r2, r0, #1, #1
    8ac2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    8ac6:	e76a      	b.n	899e <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
    8ac8:	a809      	add	r0, sp, #36	; 0x24
    8aca:	f7ff fe8d 	bl	87e8 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    8ace:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    8ad2:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    8ad4:	f3c3 0240 	ubfx	r2, r3, #1, #1
    8ad8:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    8adc:	f362 0341 	bfi	r3, r2, #1, #1
    8ae0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    8ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8ae6:	e773      	b.n	89d0 <z_cbvprintf_impl+0x124>
	switch (*sp) {
    8ae8:	2a74      	cmp	r2, #116	; 0x74
    8aea:	d026      	beq.n	8b3a <z_cbvprintf_impl+0x28e>
    8aec:	2a7a      	cmp	r2, #122	; 0x7a
    8aee:	f47f af7e 	bne.w	89ee <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
    8af2:	2106      	movs	r1, #6
    8af4:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    8af8:	e00c      	b.n	8b14 <z_cbvprintf_impl+0x268>
		if (*++sp == 'h') {
    8afa:	785a      	ldrb	r2, [r3, #1]
    8afc:	2a68      	cmp	r2, #104	; 0x68
    8afe:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    8b02:	d106      	bne.n	8b12 <z_cbvprintf_impl+0x266>
			conv->length_mod = LENGTH_HH;
    8b04:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    8b06:	f361 02c6 	bfi	r2, r1, #3, #4
    8b0a:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    8b0e:	3302      	adds	r3, #2
    8b10:	e76d      	b.n	89ee <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
    8b12:	2102      	movs	r1, #2
    8b14:	f361 02c6 	bfi	r2, r1, #3, #4
    8b18:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    8b1c:	3301      	adds	r3, #1
    8b1e:	e766      	b.n	89ee <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
    8b20:	785a      	ldrb	r2, [r3, #1]
    8b22:	2a6c      	cmp	r2, #108	; 0x6c
    8b24:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    8b28:	d101      	bne.n	8b2e <z_cbvprintf_impl+0x282>
			conv->length_mod = LENGTH_LL;
    8b2a:	2104      	movs	r1, #4
    8b2c:	e7eb      	b.n	8b06 <z_cbvprintf_impl+0x25a>
			conv->length_mod = LENGTH_L;
    8b2e:	2103      	movs	r1, #3
    8b30:	e7f0      	b.n	8b14 <z_cbvprintf_impl+0x268>
		conv->length_mod = LENGTH_J;
    8b32:	2105      	movs	r1, #5
    8b34:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    8b38:	e7ec      	b.n	8b14 <z_cbvprintf_impl+0x268>
		conv->length_mod = LENGTH_T;
    8b3a:	2107      	movs	r1, #7
    8b3c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    8b40:	e7e8      	b.n	8b14 <z_cbvprintf_impl+0x268>
		conv->unsupported = true;
    8b42:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    8b46:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    8b4a:	f022 0202 	bic.w	r2, r2, #2
    8b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    8b52:	f042 0202 	orr.w	r2, r2, #2
    8b56:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    8b5a:	e7df      	b.n	8b1c <z_cbvprintf_impl+0x270>
	switch (conv->specifier) {
    8b5c:	3b6e      	subs	r3, #110	; 0x6e
    8b5e:	b2d9      	uxtb	r1, r3
    8b60:	2301      	movs	r3, #1
    8b62:	408b      	lsls	r3, r1
    8b64:	f240 4182 	movw	r1, #1154	; 0x482
    8b68:	420b      	tst	r3, r1
    8b6a:	d138      	bne.n	8bde <z_cbvprintf_impl+0x332>
    8b6c:	f013 0f24 	tst.w	r3, #36	; 0x24
    8b70:	d152      	bne.n	8c18 <z_cbvprintf_impl+0x36c>
    8b72:	07df      	lsls	r7, r3, #31
    8b74:	d55d      	bpl.n	8c32 <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_PTR;
    8b76:	2103      	movs	r1, #3
    8b78:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    8b7c:	f361 0302 	bfi	r3, r1, #0, #3
    8b80:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    8b84:	f002 0378 	and.w	r3, r2, #120	; 0x78
    8b88:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
    8b8c:	4243      	negs	r3, r0
    8b8e:	4143      	adcs	r3, r0
    8b90:	e01b      	b.n	8bca <z_cbvprintf_impl+0x31e>
    8b92:	2001      	movs	r0, #1
	switch (conv->specifier) {
    8b94:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    8b98:	b2c9      	uxtb	r1, r1
    8b9a:	fa00 f101 	lsl.w	r1, r0, r1
    8b9e:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    8ba2:	f47f af3e 	bne.w	8a22 <z_cbvprintf_impl+0x176>
    8ba6:	f640 0701 	movw	r7, #2049	; 0x801
    8baa:	4239      	tst	r1, r7
    8bac:	d11d      	bne.n	8bea <z_cbvprintf_impl+0x33e>
    8bae:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    8bb2:	d03e      	beq.n	8c32 <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_SINT;
    8bb4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    8bb8:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    8bbc:	f002 0278 	and.w	r2, r2, #120	; 0x78
    8bc0:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    8bc2:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    8bc6:	d034      	beq.n	8c32 <z_cbvprintf_impl+0x386>
	bool unsupported = false;
    8bc8:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    8bca:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    8bce:	f3c2 0140 	ubfx	r1, r2, #1, #1
    8bd2:	430b      	orrs	r3, r1
    8bd4:	f363 0241 	bfi	r2, r3, #1, #1
    8bd8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    8bdc:	e72e      	b.n	8a3c <z_cbvprintf_impl+0x190>
		conv->specifier_cat = SPECIFIER_UINT;
    8bde:	2102      	movs	r1, #2
    8be0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    8be4:	f361 0302 	bfi	r3, r1, #0, #3
    8be8:	e7e8      	b.n	8bbc <z_cbvprintf_impl+0x310>
    8bea:	2002      	movs	r0, #2
    8bec:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    8bf0:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    8bf4:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    8bf8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    8bfa:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    8bfe:	bf02      	ittt	eq
    8c00:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    8c04:	f041 0101 	orreq.w	r1, r1, #1
    8c08:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    8c0c:	2b63      	cmp	r3, #99	; 0x63
    8c0e:	d1db      	bne.n	8bc8 <z_cbvprintf_impl+0x31c>
			unsupported = (conv->length_mod != LENGTH_NONE);
    8c10:	1e13      	subs	r3, r2, #0
    8c12:	bf18      	it	ne
    8c14:	2301      	movne	r3, #1
    8c16:	e7d8      	b.n	8bca <z_cbvprintf_impl+0x31e>
		conv->specifier_cat = SPECIFIER_PTR;
    8c18:	2103      	movs	r1, #3
    8c1a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    8c1e:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    8c22:	f361 0302 	bfi	r3, r1, #0, #3
    8c26:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    8c2a:	bf14      	ite	ne
    8c2c:	2301      	movne	r3, #1
    8c2e:	2300      	moveq	r3, #0
    8c30:	e7cb      	b.n	8bca <z_cbvprintf_impl+0x31e>
		conv->invalid = true;
    8c32:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8c36:	f043 0301 	orr.w	r3, r3, #1
    8c3a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    8c3e:	e7c3      	b.n	8bc8 <z_cbvprintf_impl+0x31c>
		} else if (conv->width_present) {
    8c40:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    8c44:	2a00      	cmp	r2, #0
		int width = -1;
    8c46:	bfac      	ite	ge
    8c48:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
    8c4c:	f8dd 804c 	ldrlt.w	r8, [sp, #76]	; 0x4c
    8c50:	e706      	b.n	8a60 <z_cbvprintf_impl+0x1b4>
		} else if (conv->prec_present) {
    8c52:	079f      	lsls	r7, r3, #30
    8c54:	f57f af13 	bpl.w	8a7e <z_cbvprintf_impl+0x1d2>
			precision = conv->prec_value;
    8c58:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    8c5c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    8c5e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    8c62:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    8c66:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    8c6a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    8c6e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    8c70:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    8c74:	d133      	bne.n	8cde <z_cbvprintf_impl+0x432>
			switch (length_mod) {
    8c76:	1ecb      	subs	r3, r1, #3
    8c78:	2b04      	cmp	r3, #4
    8c7a:	d804      	bhi.n	8c86 <z_cbvprintf_impl+0x3da>
    8c7c:	e8df f003 	tbb	[pc, r3]
    8c80:	21464621 	.word	0x21464621
    8c84:	21          	.byte	0x21
    8c85:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    8c86:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    8c88:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    8c8a:	ea4f 72e3 	mov.w	r2, r3, asr #31
    8c8e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    8c92:	d11c      	bne.n	8cce <z_cbvprintf_impl+0x422>
				value->sint = (signed char)value->sint;
    8c94:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    8c98:	17da      	asrs	r2, r3, #31
    8c9a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    8c9e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    8ca0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8ca4:	f013 0703 	ands.w	r7, r3, #3
    8ca8:	d050      	beq.n	8d4c <z_cbvprintf_impl+0x4a0>
			OUTS(sp, fp);
    8caa:	4632      	mov	r2, r6
    8cac:	4651      	mov	r1, sl
    8cae:	9b04      	ldr	r3, [sp, #16]
    8cb0:	9803      	ldr	r0, [sp, #12]
    8cb2:	f005 fa4c 	bl	e14e <outs>
    8cb6:	2800      	cmp	r0, #0
    8cb8:	f2c0 814f 	blt.w	8f5a <z_cbvprintf_impl+0x6ae>
    8cbc:	4405      	add	r5, r0
			continue;
    8cbe:	9e04      	ldr	r6, [sp, #16]
    8cc0:	e5fc      	b.n	88bc <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    8cc2:	f854 3b04 	ldr.w	r3, [r4], #4
    8cc6:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    8cc8:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    8ccc:	e7e8      	b.n	8ca0 <z_cbvprintf_impl+0x3f4>
			} else if (length_mod == LENGTH_H) {
    8cce:	2902      	cmp	r1, #2
    8cd0:	d1e5      	bne.n	8c9e <z_cbvprintf_impl+0x3f2>
				value->sint = (short)value->sint;
    8cd2:	b21a      	sxth	r2, r3
    8cd4:	f343 33c0 	sbfx	r3, r3, #15, #1
    8cd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    8cdc:	e7df      	b.n	8c9e <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_UINT) {
    8cde:	2b02      	cmp	r3, #2
    8ce0:	d124      	bne.n	8d2c <z_cbvprintf_impl+0x480>
			switch (length_mod) {
    8ce2:	1ecb      	subs	r3, r1, #3
    8ce4:	2b04      	cmp	r3, #4
    8ce6:	d804      	bhi.n	8cf2 <z_cbvprintf_impl+0x446>
    8ce8:	e8df f003 	tbb	[pc, r3]
    8cec:	18101018 	.word	0x18101018
    8cf0:	18          	.byte	0x18
    8cf1:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    8cf2:	2901      	cmp	r1, #1
    8cf4:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    8cf8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    8cfc:	d014      	beq.n	8d28 <z_cbvprintf_impl+0x47c>
			} else if (length_mod == LENGTH_H) {
    8cfe:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    8d00:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    8d04:	d1cc      	bne.n	8ca0 <z_cbvprintf_impl+0x3f4>
				value->uint = (unsigned short)value->uint;
    8d06:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    8d08:	9310      	str	r3, [sp, #64]	; 0x40
    8d0a:	e7c9      	b.n	8ca0 <z_cbvprintf_impl+0x3f4>
					(uint_value_type)va_arg(ap,
    8d0c:	3407      	adds	r4, #7
    8d0e:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    8d12:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    8d16:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    8d1a:	e7c1      	b.n	8ca0 <z_cbvprintf_impl+0x3f4>
					(uint_value_type)va_arg(ap, size_t);
    8d1c:	f854 3b04 	ldr.w	r3, [r4], #4
    8d20:	9310      	str	r3, [sp, #64]	; 0x40
    8d22:	2300      	movs	r3, #0
    8d24:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    8d26:	e7bb      	b.n	8ca0 <z_cbvprintf_impl+0x3f4>
				value->uint = (unsigned char)value->uint;
    8d28:	b2db      	uxtb	r3, r3
    8d2a:	e7cd      	b.n	8cc8 <z_cbvprintf_impl+0x41c>
		} else if (specifier_cat == SPECIFIER_FP) {
    8d2c:	2b04      	cmp	r3, #4
    8d2e:	d108      	bne.n	8d42 <z_cbvprintf_impl+0x496>
					(sint_value_type)va_arg(ap, long long);
    8d30:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    8d32:	f024 0407 	bic.w	r4, r4, #7
    8d36:	e9d4 2300 	ldrd	r2, r3, [r4]
    8d3a:	3408      	adds	r4, #8
    8d3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    8d40:	e7ae      	b.n	8ca0 <z_cbvprintf_impl+0x3f4>
		} else if (specifier_cat == SPECIFIER_PTR) {
    8d42:	2b03      	cmp	r3, #3
    8d44:	d1ac      	bne.n	8ca0 <z_cbvprintf_impl+0x3f4>
			value->ptr = va_arg(ap, void *);
    8d46:	f854 3b04 	ldr.w	r3, [r4], #4
    8d4a:	e7dd      	b.n	8d08 <z_cbvprintf_impl+0x45c>
		switch (conv->specifier) {
    8d4c:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    8d50:	2878      	cmp	r0, #120	; 0x78
    8d52:	d8b4      	bhi.n	8cbe <z_cbvprintf_impl+0x412>
    8d54:	2862      	cmp	r0, #98	; 0x62
    8d56:	d81d      	bhi.n	8d94 <z_cbvprintf_impl+0x4e8>
    8d58:	2825      	cmp	r0, #37	; 0x25
    8d5a:	f43f adb7 	beq.w	88cc <z_cbvprintf_impl+0x20>
    8d5e:	2858      	cmp	r0, #88	; 0x58
    8d60:	d1ad      	bne.n	8cbe <z_cbvprintf_impl+0x412>
			bps = encode_uint(value->uint, conv, buf, bpe);
    8d62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    8d66:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    8d6a:	9300      	str	r3, [sp, #0]
    8d6c:	aa12      	add	r2, sp, #72	; 0x48
    8d6e:	ab0a      	add	r3, sp, #40	; 0x28
    8d70:	f7ff fd50 	bl	8814 <encode_uint>
			if (precision >= 0) {
    8d74:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    8d78:	4681      	mov	r9, r0
			if (precision >= 0) {
    8d7a:	f280 8098 	bge.w	8eae <z_cbvprintf_impl+0x602>
		if (bps == NULL) {
    8d7e:	f1b9 0f00 	cmp.w	r9, #0
    8d82:	d09c      	beq.n	8cbe <z_cbvprintf_impl+0x412>
		size_t nj_len = (bpe - bps);
    8d84:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
    8d88:	eba6 0309 	sub.w	r3, r6, r9
		if (sign != 0) {
    8d8c:	2f00      	cmp	r7, #0
    8d8e:	d050      	beq.n	8e32 <z_cbvprintf_impl+0x586>
			nj_len += 1U;
    8d90:	3301      	adds	r3, #1
    8d92:	e04e      	b.n	8e32 <z_cbvprintf_impl+0x586>
		switch (conv->specifier) {
    8d94:	3863      	subs	r0, #99	; 0x63
    8d96:	2815      	cmp	r0, #21
    8d98:	d891      	bhi.n	8cbe <z_cbvprintf_impl+0x412>
    8d9a:	a201      	add	r2, pc, #4	; (adr r2, 8da0 <z_cbvprintf_impl+0x4f4>)
    8d9c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    8da0:	00008e21 	.word	0x00008e21
    8da4:	00008e85 	.word	0x00008e85
    8da8:	00008cbf 	.word	0x00008cbf
    8dac:	00008cbf 	.word	0x00008cbf
    8db0:	00008cbf 	.word	0x00008cbf
    8db4:	00008cbf 	.word	0x00008cbf
    8db8:	00008e85 	.word	0x00008e85
    8dbc:	00008cbf 	.word	0x00008cbf
    8dc0:	00008cbf 	.word	0x00008cbf
    8dc4:	00008cbf 	.word	0x00008cbf
    8dc8:	00008cbf 	.word	0x00008cbf
    8dcc:	00008f0f 	.word	0x00008f0f
    8dd0:	00008ea9 	.word	0x00008ea9
    8dd4:	00008ed1 	.word	0x00008ed1
    8dd8:	00008cbf 	.word	0x00008cbf
    8ddc:	00008cbf 	.word	0x00008cbf
    8de0:	00008df9 	.word	0x00008df9
    8de4:	00008cbf 	.word	0x00008cbf
    8de8:	00008ea9 	.word	0x00008ea9
    8dec:	00008cbf 	.word	0x00008cbf
    8df0:	00008cbf 	.word	0x00008cbf
    8df4:	00008ea9 	.word	0x00008ea9
			if (precision >= 0) {
    8df8:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    8dfc:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
			if (precision >= 0) {
    8e00:	db0a      	blt.n	8e18 <z_cbvprintf_impl+0x56c>
				len = strnlen(bps, precision);
    8e02:	4659      	mov	r1, fp
    8e04:	4648      	mov	r0, r9
    8e06:	f005 ff87 	bl	ed18 <strnlen>
		if (bps == NULL) {
    8e0a:	f1b9 0f00 	cmp.w	r9, #0
    8e0e:	f43f af56 	beq.w	8cbe <z_cbvprintf_impl+0x412>
			bpe = bps + len;
    8e12:	eb09 0600 	add.w	r6, r9, r0
    8e16:	e076      	b.n	8f06 <z_cbvprintf_impl+0x65a>
				len = strlen(bps);
    8e18:	4648      	mov	r0, r9
    8e1a:	f7ff fafb 	bl	8414 <strlen>
    8e1e:	e7f8      	b.n	8e12 <z_cbvprintf_impl+0x566>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    8e20:	9b10      	ldr	r3, [sp, #64]	; 0x40
		char sign = 0;
    8e22:	2700      	movs	r7, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    8e24:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		size_t nj_len = (bpe - bps);
    8e28:	2301      	movs	r3, #1
			bpe = buf + 1;
    8e2a:	f10d 0629 	add.w	r6, sp, #41	; 0x29
			bps = buf;
    8e2e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
		if (conv->altform_0c) {
    8e32:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    8e36:	f011 0210 	ands.w	r2, r1, #16
    8e3a:	9206      	str	r2, [sp, #24]
    8e3c:	f000 8081 	beq.w	8f42 <z_cbvprintf_impl+0x696>
			nj_len += 2U;
    8e40:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    8e42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8e44:	4413      	add	r3, r2
    8e46:	9205      	str	r2, [sp, #20]
		if (conv->pad_fp) {
    8e48:	064a      	lsls	r2, r1, #25
			nj_len += conv->pad0_pre_exp;
    8e4a:	bf44      	itt	mi
    8e4c:	9914      	ldrmi	r1, [sp, #80]	; 0x50
    8e4e:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    8e50:	f1b8 0f00 	cmp.w	r8, #0
    8e54:	f340 808e 	ble.w	8f74 <z_cbvprintf_impl+0x6c8>
			width -= (int)nj_len;
    8e58:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    8e5c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8e60:	0758      	lsls	r0, r3, #29
    8e62:	f3c3 0b80 	ubfx	fp, r3, #2, #1
    8e66:	f100 8085 	bmi.w	8f74 <z_cbvprintf_impl+0x6c8>
				if (conv->flag_zero) {
    8e6a:	0659      	lsls	r1, r3, #25
    8e6c:	d578      	bpl.n	8f60 <z_cbvprintf_impl+0x6b4>
					if (sign != 0) {
    8e6e:	b13f      	cbz	r7, 8e80 <z_cbvprintf_impl+0x5d4>
						OUTC(sign);
    8e70:	4651      	mov	r1, sl
    8e72:	4638      	mov	r0, r7
    8e74:	9b03      	ldr	r3, [sp, #12]
    8e76:	4798      	blx	r3
    8e78:	2800      	cmp	r0, #0
    8e7a:	db6e      	blt.n	8f5a <z_cbvprintf_impl+0x6ae>
    8e7c:	465f      	mov	r7, fp
    8e7e:	3501      	adds	r5, #1
					pad = '0';
    8e80:	2330      	movs	r3, #48	; 0x30
    8e82:	e06e      	b.n	8f62 <z_cbvprintf_impl+0x6b6>
			if (conv->flag_plus) {
    8e84:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    8e86:	bf5a      	itte	pl
    8e88:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    8e8c:	015f      	lslpl	r7, r3, #5
				sign = '+';
    8e8e:	272b      	movmi	r7, #43	; 0x2b
			sint = value->sint;
    8e90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    8e94:	2b00      	cmp	r3, #0
    8e96:	f6bf af64 	bge.w	8d62 <z_cbvprintf_impl+0x4b6>
				value->uint = (uint_value_type)-sint;
    8e9a:	4252      	negs	r2, r2
    8e9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    8ea0:	272d      	movs	r7, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    8ea2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    8ea6:	e75c      	b.n	8d62 <z_cbvprintf_impl+0x4b6>
		switch (conv->specifier) {
    8ea8:	2700      	movs	r7, #0
    8eaa:	e75a      	b.n	8d62 <z_cbvprintf_impl+0x4b6>
		char sign = 0;
    8eac:	2700      	movs	r7, #0
				conv->flag_zero = false;
    8eae:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    8eb2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    8eb6:	eba3 0309 	sub.w	r3, r3, r9
				conv->flag_zero = false;
    8eba:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    8ebe:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    8ec0:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    8ec4:	f67f af5b 	bls.w	8d7e <z_cbvprintf_impl+0x4d2>
					conv->pad0_value = precision - (int)len;
    8ec8:	ebab 0303 	sub.w	r3, fp, r3
    8ecc:	9313      	str	r3, [sp, #76]	; 0x4c
    8ece:	e756      	b.n	8d7e <z_cbvprintf_impl+0x4d2>
			if (value->ptr != NULL) {
    8ed0:	9810      	ldr	r0, [sp, #64]	; 0x40
    8ed2:	b380      	cbz	r0, 8f36 <z_cbvprintf_impl+0x68a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    8ed4:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
    8ed8:	ab0a      	add	r3, sp, #40	; 0x28
    8eda:	2100      	movs	r1, #0
    8edc:	9600      	str	r6, [sp, #0]
    8ede:	aa12      	add	r2, sp, #72	; 0x48
    8ee0:	f7ff fc98 	bl	8814 <encode_uint>
				conv->altform_0c = true;
    8ee4:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    8ee8:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    8eec:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    8ef0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    8ef4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    8ef8:	4681      	mov	r9, r0
				conv->altform_0c = true;
    8efa:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    8efe:	dad5      	bge.n	8eac <z_cbvprintf_impl+0x600>
		if (bps == NULL) {
    8f00:	2800      	cmp	r0, #0
    8f02:	f43f aedc 	beq.w	8cbe <z_cbvprintf_impl+0x412>
		char sign = 0;
    8f06:	2700      	movs	r7, #0
		size_t nj_len = (bpe - bps);
    8f08:	eba6 0309 	sub.w	r3, r6, r9
		if (sign != 0) {
    8f0c:	e791      	b.n	8e32 <z_cbvprintf_impl+0x586>
				store_count(conv, value->ptr, count);
    8f0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    8f10:	2907      	cmp	r1, #7
    8f12:	f63f aed4 	bhi.w	8cbe <z_cbvprintf_impl+0x412>
    8f16:	e8df f001 	tbb	[pc, r1]
    8f1a:	040c      	.short	0x040c
    8f1c:	08080c06 	.word	0x08080c06
    8f20:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    8f22:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    8f24:	e6cb      	b.n	8cbe <z_cbvprintf_impl+0x412>
		*(short *)dp = (short)count;
    8f26:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    8f28:	e6c9      	b.n	8cbe <z_cbvprintf_impl+0x412>
		*(intmax_t *)dp = (intmax_t)count;
    8f2a:	17ea      	asrs	r2, r5, #31
    8f2c:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    8f30:	e6c5      	b.n	8cbe <z_cbvprintf_impl+0x412>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    8f32:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    8f34:	e6c3      	b.n	8cbe <z_cbvprintf_impl+0x412>
			bpe = bps + 5;
    8f36:	4e31      	ldr	r6, [pc, #196]	; (8ffc <z_cbvprintf_impl+0x750>)
		char sign = 0;
    8f38:	4607      	mov	r7, r0
		size_t nj_len = (bpe - bps);
    8f3a:	2305      	movs	r3, #5
    8f3c:	f1a6 0905 	sub.w	r9, r6, #5
    8f40:	e777      	b.n	8e32 <z_cbvprintf_impl+0x586>
		} else if (conv->altform_0) {
    8f42:	0708      	lsls	r0, r1, #28
			nj_len += 1U;
    8f44:	bf48      	it	mi
    8f46:	3301      	addmi	r3, #1
    8f48:	e77b      	b.n	8e42 <z_cbvprintf_impl+0x596>
					OUTC(pad);
    8f4a:	4618      	mov	r0, r3
    8f4c:	9307      	str	r3, [sp, #28]
    8f4e:	4651      	mov	r1, sl
    8f50:	9b03      	ldr	r3, [sp, #12]
    8f52:	4798      	blx	r3
    8f54:	2800      	cmp	r0, #0
    8f56:	9b07      	ldr	r3, [sp, #28]
    8f58:	da04      	bge.n	8f64 <z_cbvprintf_impl+0x6b8>
#undef OUTS
#undef OUTC
}
    8f5a:	b017      	add	sp, #92	; 0x5c
    8f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    8f60:	2320      	movs	r3, #32
					pad = '0';
    8f62:	46c3      	mov	fp, r8
				while (width-- > 0) {
    8f64:	4659      	mov	r1, fp
    8f66:	2900      	cmp	r1, #0
    8f68:	f10b 3bff 	add.w	fp, fp, #4294967295
    8f6c:	dced      	bgt.n	8f4a <z_cbvprintf_impl+0x69e>
    8f6e:	4445      	add	r5, r8
    8f70:	46d8      	mov	r8, fp
    8f72:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    8f74:	b137      	cbz	r7, 8f84 <z_cbvprintf_impl+0x6d8>
			OUTC(sign);
    8f76:	4651      	mov	r1, sl
    8f78:	4638      	mov	r0, r7
    8f7a:	9b03      	ldr	r3, [sp, #12]
    8f7c:	4798      	blx	r3
    8f7e:	2800      	cmp	r0, #0
    8f80:	dbeb      	blt.n	8f5a <z_cbvprintf_impl+0x6ae>
    8f82:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    8f84:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    8f88:	06da      	lsls	r2, r3, #27
    8f8a:	d401      	bmi.n	8f90 <z_cbvprintf_impl+0x6e4>
    8f8c:	071b      	lsls	r3, r3, #28
    8f8e:	d506      	bpl.n	8f9e <z_cbvprintf_impl+0x6f2>
				OUTC('0');
    8f90:	4651      	mov	r1, sl
    8f92:	2030      	movs	r0, #48	; 0x30
    8f94:	9b03      	ldr	r3, [sp, #12]
    8f96:	4798      	blx	r3
    8f98:	2800      	cmp	r0, #0
    8f9a:	dbde      	blt.n	8f5a <z_cbvprintf_impl+0x6ae>
    8f9c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    8f9e:	9b06      	ldr	r3, [sp, #24]
    8fa0:	b13b      	cbz	r3, 8fb2 <z_cbvprintf_impl+0x706>
				OUTC(conv->specifier);
    8fa2:	4651      	mov	r1, sl
    8fa4:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    8fa8:	9b03      	ldr	r3, [sp, #12]
    8faa:	4798      	blx	r3
    8fac:	2800      	cmp	r0, #0
    8fae:	dbd4      	blt.n	8f5a <z_cbvprintf_impl+0x6ae>
    8fb0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    8fb2:	9f05      	ldr	r7, [sp, #20]
    8fb4:	442f      	add	r7, r5
    8fb6:	e006      	b.n	8fc6 <z_cbvprintf_impl+0x71a>
				OUTC('0');
    8fb8:	4651      	mov	r1, sl
    8fba:	2030      	movs	r0, #48	; 0x30
    8fbc:	9b03      	ldr	r3, [sp, #12]
    8fbe:	4798      	blx	r3
    8fc0:	2800      	cmp	r0, #0
    8fc2:	dbca      	blt.n	8f5a <z_cbvprintf_impl+0x6ae>
    8fc4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    8fc6:	1b7b      	subs	r3, r7, r5
    8fc8:	2b00      	cmp	r3, #0
    8fca:	dcf5      	bgt.n	8fb8 <z_cbvprintf_impl+0x70c>
			OUTS(bps, bpe);
    8fcc:	4633      	mov	r3, r6
    8fce:	464a      	mov	r2, r9
    8fd0:	4651      	mov	r1, sl
    8fd2:	9803      	ldr	r0, [sp, #12]
    8fd4:	f005 f8bb 	bl	e14e <outs>
    8fd8:	2800      	cmp	r0, #0
    8fda:	dbbe      	blt.n	8f5a <z_cbvprintf_impl+0x6ae>
    8fdc:	4405      	add	r5, r0
		while (width > 0) {
    8fde:	44a8      	add	r8, r5
    8fe0:	eba8 0305 	sub.w	r3, r8, r5
    8fe4:	2b00      	cmp	r3, #0
    8fe6:	f77f ae6a 	ble.w	8cbe <z_cbvprintf_impl+0x412>
			OUTC(' ');
    8fea:	4651      	mov	r1, sl
    8fec:	2020      	movs	r0, #32
    8fee:	9b03      	ldr	r3, [sp, #12]
    8ff0:	4798      	blx	r3
    8ff2:	2800      	cmp	r0, #0
    8ff4:	dbb1      	blt.n	8f5a <z_cbvprintf_impl+0x6ae>
    8ff6:	3501      	adds	r5, #1
			--width;
    8ff8:	e7f2      	b.n	8fe0 <z_cbvprintf_impl+0x734>
    8ffa:	bf00      	nop
    8ffc:	0000f813 	.word	0x0000f813

00009000 <nordicsemi_nrf91_init>:
	__asm__ volatile(
    9000:	f04f 0220 	mov.w	r2, #32
    9004:	f3ef 8311 	mrs	r3, BASEPRI
    9008:	f382 8812 	msr	BASEPRI_MAX, r2
    900c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    9010:	2101      	movs	r1, #1
    9012:	4a04      	ldr	r2, [pc, #16]	; (9024 <nordicsemi_nrf91_init+0x24>)
    9014:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    9018:	f383 8811 	msr	BASEPRI, r3
    901c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    9020:	2000      	movs	r0, #0
    9022:	4770      	bx	lr
    9024:	40039000 	.word	0x40039000

00009028 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    9028:	b120      	cbz	r0, 9034 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    902a:	4b03      	ldr	r3, [pc, #12]	; (9038 <arch_busy_wait+0x10>)
    902c:	0180      	lsls	r0, r0, #6
    902e:	f043 0301 	orr.w	r3, r3, #1
    9032:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    9034:	4770      	bx	lr
    9036:	bf00      	nop
    9038:	0000f350 	.word	0x0000f350

0000903c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    903c:	f005 bab1 	b.w	e5a2 <SystemInit>

00009040 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    9040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9044:	4605      	mov	r5, r0
	__asm__ volatile(
    9046:	f04f 0320 	mov.w	r3, #32
    904a:	f3ef 8611 	mrs	r6, BASEPRI
    904e:	f383 8812 	msr	BASEPRI_MAX, r3
    9052:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    9056:	f04f 090c 	mov.w	r9, #12
	return list->head;
    905a:	4b0d      	ldr	r3, [pc, #52]	; (9090 <pm_state_notify+0x50>)
    905c:	4f0d      	ldr	r7, [pc, #52]	; (9094 <pm_state_notify+0x54>)
    905e:	681c      	ldr	r4, [r3, #0]
    9060:	f8df 8034 	ldr.w	r8, [pc, #52]	; 9098 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    9064:	b92c      	cbnz	r4, 9072 <pm_state_notify+0x32>
	__asm__ volatile(
    9066:	f386 8811 	msr	BASEPRI, r6
    906a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    906e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    9072:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    9076:	2d00      	cmp	r5, #0
    9078:	bf18      	it	ne
    907a:	4613      	movne	r3, r2
		if (callback) {
    907c:	b12b      	cbz	r3, 908a <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    907e:	f898 2010 	ldrb.w	r2, [r8, #16]
    9082:	fb09 f202 	mul.w	r2, r9, r2
    9086:	5cb8      	ldrb	r0, [r7, r2]
    9088:	4798      	blx	r3
	return node->next;
    908a:	6824      	ldr	r4, [r4, #0]
    908c:	e7ea      	b.n	9064 <pm_state_notify+0x24>
    908e:	bf00      	nop
    9090:	2000c854 	.word	0x2000c854
    9094:	2000c848 	.word	0x2000c848
    9098:	2000cd98 	.word	0x2000cd98

0000909c <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    909c:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    909e:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    90a0:	4b16      	ldr	r3, [pc, #88]	; (90fc <pm_system_resume+0x60>)
    90a2:	7c1c      	ldrb	r4, [r3, #16]
    90a4:	f004 031f 	and.w	r3, r4, #31
    90a8:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    90aa:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    90ac:	4b14      	ldr	r3, [pc, #80]	; (9100 <pm_system_resume+0x64>)
    90ae:	0961      	lsrs	r1, r4, #5
    90b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    90b4:	e8d3 1fef 	ldaex	r1, [r3]
    90b8:	ea01 0500 	and.w	r5, r1, r0
    90bc:	e8c3 5fe6 	stlex	r6, r5, [r3]
    90c0:	2e00      	cmp	r6, #0
    90c2:	d1f7      	bne.n	90b4 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    90c4:	420a      	tst	r2, r1
    90c6:	d013      	beq.n	90f0 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    90c8:	4b0e      	ldr	r3, [pc, #56]	; (9104 <pm_system_resume+0x68>)
    90ca:	4d0f      	ldr	r5, [pc, #60]	; (9108 <pm_system_resume+0x6c>)
    90cc:	b18b      	cbz	r3, 90f2 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    90ce:	230c      	movs	r3, #12
    90d0:	4363      	muls	r3, r4
    90d2:	18ea      	adds	r2, r5, r3
    90d4:	7851      	ldrb	r1, [r2, #1]
    90d6:	5ce8      	ldrb	r0, [r5, r3]
    90d8:	f005 f85d 	bl	e196 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    90dc:	2000      	movs	r0, #0
    90de:	f7ff ffaf 	bl	9040 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    90e2:	230c      	movs	r3, #12
    90e4:	435c      	muls	r4, r3
    90e6:	2300      	movs	r3, #0
    90e8:	192a      	adds	r2, r5, r4
    90ea:	512b      	str	r3, [r5, r4]
    90ec:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    90f0:	bd70      	pop	{r4, r5, r6, pc}
    90f2:	f383 8811 	msr	BASEPRI, r3
    90f6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    90fa:	e7ef      	b.n	90dc <pm_system_resume+0x40>
    90fc:	2000cd98 	.word	0x2000cd98
    9100:	2000c85c 	.word	0x2000c85c
    9104:	0000e197 	.word	0x0000e197
    9108:	2000c848 	.word	0x2000c848

0000910c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    910c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    9110:	4b32      	ldr	r3, [pc, #200]	; (91dc <pm_system_suspend+0xd0>)
{
    9112:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    9114:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    9116:	f04f 0320 	mov.w	r3, #32
    911a:	f3ef 8811 	mrs	r8, BASEPRI
    911e:	f383 8812 	msr	BASEPRI_MAX, r3
    9122:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    9126:	240c      	movs	r4, #12
    9128:	436c      	muls	r4, r5
    912a:	4b2d      	ldr	r3, [pc, #180]	; (91e0 <pm_system_suspend+0xd4>)
    912c:	4e2d      	ldr	r6, [pc, #180]	; (91e4 <pm_system_suspend+0xd8>)
    912e:	5d19      	ldrb	r1, [r3, r4]
    9130:	191a      	adds	r2, r3, r4
    9132:	2900      	cmp	r1, #0
    9134:	d047      	beq.n	91c6 <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    9136:	ca07      	ldmia	r2, {r0, r1, r2}
    9138:	eb06 0c04 	add.w	ip, r6, r4
    913c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    9140:	2200      	movs	r2, #0
    9142:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    9144:	f388 8811 	msr	BASEPRI, r8
    9148:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    914c:	230c      	movs	r3, #12
    914e:	436b      	muls	r3, r5
    9150:	5cf0      	ldrb	r0, [r6, r3]
    9152:	18f2      	adds	r2, r6, r3
    9154:	b3a8      	cbz	r0, 91c2 <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    9156:	1c7b      	adds	r3, r7, #1
    9158:	d010      	beq.n	917c <pm_system_suspend+0x70>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    915a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    915e:	2100      	movs	r1, #0
    9160:	f8d2 c008 	ldr.w	ip, [r2, #8]
    9164:	4c20      	ldr	r4, [pc, #128]	; (91e8 <pm_system_suspend+0xdc>)
    9166:	2300      	movs	r3, #0
    9168:	fbec 4100 	umlal	r4, r1, ip, r0
    916c:	4a1f      	ldr	r2, [pc, #124]	; (91ec <pm_system_suspend+0xe0>)
    916e:	4620      	mov	r0, r4
    9170:	f7fe ffe8 	bl	8144 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    9174:	2101      	movs	r1, #1
    9176:	1a38      	subs	r0, r7, r0
    9178:	f001 fbde 	bl	a938 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    917c:	f003 fef6 	bl	cf6c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    9180:	2001      	movs	r0, #1
    9182:	f7ff ff5d 	bl	9040 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9186:	4b1a      	ldr	r3, [pc, #104]	; (91f0 <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9188:	096a      	lsrs	r2, r5, #5
    918a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    918e:	2201      	movs	r2, #1
    9190:	f005 011f 	and.w	r1, r5, #31
    9194:	408a      	lsls	r2, r1
    9196:	e8d3 0fef 	ldaex	r0, [r3]
    919a:	4310      	orrs	r0, r2
    919c:	e8c3 0fe1 	stlex	r1, r0, [r3]
    91a0:	2900      	cmp	r1, #0
    91a2:	d1f8      	bne.n	9196 <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
    91a4:	4b13      	ldr	r3, [pc, #76]	; (91f4 <pm_system_suspend+0xe8>)
    91a6:	b13b      	cbz	r3, 91b8 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
    91a8:	230c      	movs	r3, #12
    91aa:	fb03 f005 	mul.w	r0, r3, r5
    91ae:	1833      	adds	r3, r6, r0
    91b0:	7859      	ldrb	r1, [r3, #1]
    91b2:	5c30      	ldrb	r0, [r6, r0]
    91b4:	f004 ffe3 	bl	e17e <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    91b8:	f7ff ff70 	bl	909c <pm_system_resume>
	k_sched_unlock();
    91bc:	f003 feea 	bl	cf94 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    91c0:	2001      	movs	r0, #1
}
    91c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    91c6:	4601      	mov	r1, r0
    91c8:	4628      	mov	r0, r5
    91ca:	f000 f815 	bl	91f8 <pm_policy_next_state>
		if (info != NULL) {
    91ce:	2800      	cmp	r0, #0
    91d0:	d0b8      	beq.n	9144 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    91d2:	c807      	ldmia	r0, {r0, r1, r2}
    91d4:	4434      	add	r4, r6
    91d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    91da:	e7b3      	b.n	9144 <pm_system_suspend+0x38>
    91dc:	2000cd98 	.word	0x2000cd98
    91e0:	2000c83c 	.word	0x2000c83c
    91e4:	2000c848 	.word	0x2000c848
    91e8:	000f423f 	.word	0x000f423f
    91ec:	000f4240 	.word	0x000f4240
    91f0:	2000c85c 	.word	0x2000c85c
    91f4:	0000e17f 	.word	0x0000e17f

000091f8 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    91f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    91fc:	b085      	sub	sp, #20
    91fe:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    9200:	a903      	add	r1, sp, #12
    9202:	f000 f843 	bl	928c <pm_state_cpu_get_all>
    9206:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    920a:	4604      	mov	r4, r0
    920c:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    9210:	4b1b      	ldr	r3, [pc, #108]	; (9280 <pm_policy_next_state+0x88>)
    9212:	9d03      	ldr	r5, [sp, #12]
    9214:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    9218:	1e43      	subs	r3, r0, #1
    921a:	b21b      	sxth	r3, r3
    921c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9220:	f8df 8060 	ldr.w	r8, [pc, #96]	; 9284 <pm_policy_next_state+0x8c>
    9224:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    9228:	b924      	cbnz	r4, 9234 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    922a:	46a1      	mov	r9, r4
}
    922c:	4648      	mov	r0, r9
    922e:	b005      	add	sp, #20
    9230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9234:	46c4      	mov	ip, r8
    9236:	4659      	mov	r1, fp
    9238:	6868      	ldr	r0, [r5, #4]
    923a:	2300      	movs	r3, #0
    923c:	fbe0 c107 	umlal	ip, r1, r0, r7
    9240:	4a11      	ldr	r2, [pc, #68]	; (9288 <pm_policy_next_state+0x90>)
    9242:	4660      	mov	r0, ip
    9244:	f7fe ff7e 	bl	8144 <__aeabi_uldivmod>
    9248:	46c4      	mov	ip, r8
    924a:	4659      	mov	r1, fp
    924c:	9001      	str	r0, [sp, #4]
    924e:	68a8      	ldr	r0, [r5, #8]
    9250:	2300      	movs	r3, #0
    9252:	fbe0 c107 	umlal	ip, r1, r0, r7
    9256:	4a0c      	ldr	r2, [pc, #48]	; (9288 <pm_policy_next_state+0x90>)
    9258:	4660      	mov	r0, ip
    925a:	f7fe ff73 	bl	8144 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    925e:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    9262:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    9264:	d001      	beq.n	926a <pm_policy_next_state+0x72>
    9266:	4582      	cmp	sl, r0
    9268:	d905      	bls.n	9276 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    926a:	1c73      	adds	r3, r6, #1
    926c:	d0de      	beq.n	922c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    926e:	9b01      	ldr	r3, [sp, #4]
    9270:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    9272:	42b0      	cmp	r0, r6
    9274:	d9da      	bls.n	922c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    9276:	3c01      	subs	r4, #1
    9278:	b2a4      	uxth	r4, r4
    927a:	3d0c      	subs	r5, #12
    927c:	e7d4      	b.n	9228 <pm_policy_next_state+0x30>
    927e:	bf00      	nop
    9280:	2000c58c 	.word	0x2000c58c
    9284:	000f423f 	.word	0x000f423f
    9288:	000f4240 	.word	0x000f4240

0000928c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    928c:	b908      	cbnz	r0, 9292 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    928e:	4b02      	ldr	r3, [pc, #8]	; (9298 <pm_state_cpu_get_all+0xc>)
    9290:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    9292:	2000      	movs	r0, #0
    9294:	4770      	bx	lr
    9296:	bf00      	nop
    9298:	0000f360 	.word	0x0000f360

0000929c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    929c:	4901      	ldr	r1, [pc, #4]	; (92a4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    929e:	2210      	movs	r2, #16
	str	r2, [r1]
    92a0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    92a2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    92a4:	e000ed10 	.word	0xe000ed10

000092a8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    92a8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    92aa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    92ac:	f380 8811 	msr	BASEPRI, r0
	isb
    92b0:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    92b4:	f3bf 8f4f 	dsb	sy
    92b8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    92ba:	b662      	cpsie	i
	isb
    92bc:	f3bf 8f6f 	isb	sy

	bx	lr
    92c0:	4770      	bx	lr
    92c2:	bf00      	nop

000092c4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    92c4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    92c6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    92c8:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    92cc:	f3bf 8f4f 	dsb	sy
    92d0:	bf20      	wfe

	msr	BASEPRI, r0
    92d2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    92d6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    92d8:	4770      	bx	lr
    92da:	bf00      	nop

000092dc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    92dc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    92de:	2800      	cmp	r0, #0
    92e0:	db07      	blt.n	92f2 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    92e2:	2301      	movs	r3, #1
    92e4:	0941      	lsrs	r1, r0, #5
    92e6:	4a03      	ldr	r2, [pc, #12]	; (92f4 <arch_irq_enable+0x18>)
    92e8:	f000 001f 	and.w	r0, r0, #31
    92ec:	4083      	lsls	r3, r0
    92ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    92f2:	4770      	bx	lr
    92f4:	e000e100 	.word	0xe000e100

000092f8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    92f8:	4b05      	ldr	r3, [pc, #20]	; (9310 <arch_irq_is_enabled+0x18>)
    92fa:	0942      	lsrs	r2, r0, #5
    92fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    9300:	2301      	movs	r3, #1
    9302:	f000 001f 	and.w	r0, r0, #31
    9306:	fa03 f000 	lsl.w	r0, r3, r0
}
    930a:	4010      	ands	r0, r2
    930c:	4770      	bx	lr
    930e:	bf00      	nop
    9310:	e000e100 	.word	0xe000e100

00009314 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    9314:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    9316:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    9318:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    931c:	bfac      	ite	ge
    931e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9322:	4b06      	ldrlt	r3, [pc, #24]	; (933c <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9324:	ea4f 1141 	mov.w	r1, r1, lsl #5
    9328:	b2c9      	uxtb	r1, r1
    932a:	bfab      	itete	ge
    932c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9330:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9334:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9338:	5419      	strblt	r1, [r3, r0]
}
    933a:	4770      	bx	lr
    933c:	e000ed14 	.word	0xe000ed14

00009340 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    9340:	bf30      	wfi
    b z_SysNmiOnReset
    9342:	f7ff bffd 	b.w	9340 <z_SysNmiOnReset>
    9346:	bf00      	nop

00009348 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    9348:	4a0b      	ldr	r2, [pc, #44]	; (9378 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    934a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    934c:	4b0b      	ldr	r3, [pc, #44]	; (937c <z_arm_prep_c+0x34>)
    934e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    9352:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    9354:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9358:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    935c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    9360:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    9364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    9368:	f003 f990 	bl	c68c <z_bss_zero>
	z_data_copy();
    936c:	f003 ff38 	bl	d1e0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    9370:	f000 fa0e 	bl	9790 <z_arm_interrupt_init>
	z_cstart();
    9374:	f003 f9ca 	bl	c70c <z_cstart>
    9378:	00008000 	.word	0x00008000
    937c:	e000ed00 	.word	0xe000ed00

00009380 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    9380:	4a09      	ldr	r2, [pc, #36]	; (93a8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    9382:	490a      	ldr	r1, [pc, #40]	; (93ac <arch_swap+0x2c>)
	_current->arch.basepri = key;
    9384:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    9386:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    9388:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    938a:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    938c:	4908      	ldr	r1, [pc, #32]	; (93b0 <arch_swap+0x30>)
    938e:	684b      	ldr	r3, [r1, #4]
    9390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    9394:	604b      	str	r3, [r1, #4]
    9396:	2300      	movs	r3, #0
    9398:	f383 8811 	msr	BASEPRI, r3
    939c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    93a0:	6893      	ldr	r3, [r2, #8]
}
    93a2:	6f98      	ldr	r0, [r3, #120]	; 0x78
    93a4:	4770      	bx	lr
    93a6:	bf00      	nop
    93a8:	2000cd98 	.word	0x2000cd98
    93ac:	0000f638 	.word	0x0000f638
    93b0:	e000ed00 	.word	0xe000ed00

000093b4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    93b4:	4915      	ldr	r1, [pc, #84]	; (940c <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    93b6:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    93b8:	f882 e07d 	strb.w	lr, [r2, #125]	; 0x7d
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    93bc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    93c0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    93c2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    93c6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    93ca:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    93cc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    93d0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    93d4:	4f0e      	ldr	r7, [pc, #56]	; (9410 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    93d6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    93da:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    93dc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    93de:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    93e0:	f992 e07d 	ldrsb.w	lr, [r2, #125]	; 0x7d

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    93e4:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    93e6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    93e8:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    93ea:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    93ee:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    93f2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    93f6:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    93fa:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    93fe:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    9400:	f004 fee0 	bl	e1c4 <configure_builtin_stack_guard>
    pop {r2, lr}
    9404:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    9408:	4770      	bx	lr
    940a:	0000      	.short	0x0000
    ldr r1, =_kernel
    940c:	2000cd98 	.word	0x2000cd98
    ldr v4, =_SCS_ICSR
    9410:	e000ed04 	.word	0xe000ed04

00009414 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    9414:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    9418:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    941a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    941e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    9422:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    9424:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    9428:	2902      	cmp	r1, #2
    beq _oops
    942a:	d0ff      	beq.n	942c <_oops>

0000942c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    942c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    942e:	f004 feba 	bl	e1a6 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    9432:	bd01      	pop	{r0, pc}

00009434 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    9434:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    9438:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    943a:	490c      	ldr	r1, [pc, #48]	; (946c <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
    943c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    9440:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    9442:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    9446:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    944a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    944c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    9450:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    9454:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    9458:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    945c:	2300      	movs	r3, #0
    945e:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    9460:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    9464:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    9466:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    9468:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    946a:	4770      	bx	lr
    946c:	0000dbf5 	.word	0x0000dbf5

00009470 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    9470:	4b08      	ldr	r3, [pc, #32]	; (9494 <arch_switch_to_main_thread+0x24>)
    9472:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    9474:	6e43      	ldr	r3, [r0, #100]	; 0x64
    9476:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    947a:	4610      	mov	r0, r2
    947c:	f381 8809 	msr	PSP, r1
    9480:	2100      	movs	r1, #0
    9482:	b663      	cpsie	if
    9484:	f381 8811 	msr	BASEPRI, r1
    9488:	f3bf 8f6f 	isb	sy
    948c:	2200      	movs	r2, #0
    948e:	2300      	movs	r3, #0
    9490:	f004 fbb0 	bl	dbf4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    9494:	2000cd98 	.word	0x2000cd98

00009498 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    9498:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    949a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    949c:	4a0b      	ldr	r2, [pc, #44]	; (94cc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    949e:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    94a0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    94a2:	bf1e      	ittt	ne
	movne	r1, #0
    94a4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    94a6:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    94a8:	f005 fad6 	blne	ea58 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    94ac:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    94ae:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    94b2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    94b6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    94ba:	4905      	ldr	r1, [pc, #20]	; (94d0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    94bc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    94be:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    94c0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    94c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    94c6:	4903      	ldr	r1, [pc, #12]	; (94d4 <_isr_wrapper+0x3c>)
	bx r1
    94c8:	4708      	bx	r1
    94ca:	0000      	.short	0x0000
	ldr r2, =_kernel
    94cc:	2000cd98 	.word	0x2000cd98
	ldr r1, =_sw_isr_table
    94d0:	0000f0b8 	.word	0x0000f0b8
	ldr r1, =z_arm_int_exit
    94d4:	000094d9 	.word	0x000094d9

000094d8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    94d8:	4b04      	ldr	r3, [pc, #16]	; (94ec <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    94da:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    94dc:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    94de:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    94e0:	d003      	beq.n	94ea <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    94e2:	4903      	ldr	r1, [pc, #12]	; (94f0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    94e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    94e8:	600a      	str	r2, [r1, #0]

000094ea <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    94ea:	4770      	bx	lr
	ldr r3, =_kernel
    94ec:	2000cd98 	.word	0x2000cd98
	ldr r1, =_SCS_ICSR
    94f0:	e000ed04 	.word	0xe000ed04

000094f4 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    94f4:	4b15      	ldr	r3, [pc, #84]	; (954c <usage_fault.constprop.0+0x58>)
    94f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    94f8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    94fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    94fe:	bf14      	ite	ne
    9500:	201e      	movne	r0, #30
    9502:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    9504:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    9508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    950a:	bf18      	it	ne
    950c:	201f      	movne	r0, #31
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    950e:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    9512:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
    9514:	bf18      	it	ne
    9516:	2002      	movne	r0, #2
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    9518:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    951c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    951e:	bf18      	it	ne
    9520:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    9522:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    9526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    9528:	bf18      	it	ne
    952a:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    952c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    9530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    9532:	bf18      	it	ne
    9534:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    9536:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    953a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	return reason;
}
    953c:	bf18      	it	ne
    953e:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    9540:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    9544:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    9548:	629a      	str	r2, [r3, #40]	; 0x28
}
    954a:	4770      	bx	lr
    954c:	e000ed00 	.word	0xe000ed00

00009550 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    9550:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    9552:	4b19      	ldr	r3, [pc, #100]	; (95b8 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    9554:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    9556:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    9558:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    955a:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    955e:	bf14      	ite	ne
    9560:	2017      	movne	r0, #23
    9562:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    9564:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    9568:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    956a:	bf18      	it	ne
    956c:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    956e:	05a4      	lsls	r4, r4, #22
    9570:	d509      	bpl.n	9586 <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    9572:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    9574:	6a98      	ldr	r0, [r3, #40]	; 0x28
    9576:	0400      	lsls	r0, r0, #16
    9578:	d504      	bpl.n	9584 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    957a:	b11a      	cbz	r2, 9584 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    957c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    957e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    9582:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    9584:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    9586:	4b0c      	ldr	r3, [pc, #48]	; (95b8 <bus_fault.constprop.0+0x68>)
    9588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    958a:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    958e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    9590:	bf18      	it	ne
    9592:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    9594:	05d2      	lsls	r2, r2, #23
    9596:	d40c      	bmi.n	95b2 <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    9598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    959a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    959e:	bf18      	it	ne
    95a0:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    95a2:	4a05      	ldr	r2, [pc, #20]	; (95b8 <bus_fault.constprop.0+0x68>)
    95a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    95a6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    95aa:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    95ac:	2300      	movs	r3, #0
    95ae:	700b      	strb	r3, [r1, #0]
}
    95b0:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    95b2:	201b      	movs	r0, #27
    95b4:	e7f5      	b.n	95a2 <bus_fault.constprop.0+0x52>
    95b6:	bf00      	nop
    95b8:	e000ed00 	.word	0xe000ed00

000095bc <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    95bc:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    95be:	4b1c      	ldr	r3, [pc, #112]	; (9630 <mem_manage_fault.constprop.0+0x74>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    95c0:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    95c2:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    95c4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    95c6:	f010 0f10 	tst.w	r0, #16
    95ca:	bf14      	ite	ne
    95cc:	2011      	movne	r0, #17
    95ce:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    95d0:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    95d4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    95d6:	bf18      	it	ne
    95d8:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    95da:	07a4      	lsls	r4, r4, #30
    95dc:	d509      	bpl.n	95f2 <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
    95de:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    95e0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    95e2:	0600      	lsls	r0, r0, #24
    95e4:	d504      	bpl.n	95f0 <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    95e6:	b11a      	cbz	r2, 95f0 <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    95e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    95ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    95ee:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    95f0:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    95f2:	4b0f      	ldr	r3, [pc, #60]	; (9630 <mem_manage_fault.constprop.0+0x74>)
    95f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    95f6:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    95fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    95fc:	bf18      	it	ne
    95fe:	2014      	movne	r0, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    9600:	f012 0f20 	tst.w	r2, #32
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    9604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    9606:	bf18      	it	ne
    9608:	2015      	movne	r0, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    960a:	06d4      	lsls	r4, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    960c:	bf58      	it	pl
    960e:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    9610:	4b07      	ldr	r3, [pc, #28]	; (9630 <mem_manage_fault.constprop.0+0x74>)
    9612:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9614:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    9616:	bf42      	ittt	mi
    9618:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    961a:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    961e:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    9620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9622:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    9626:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    9628:	2300      	movs	r3, #0
    962a:	700b      	strb	r3, [r1, #0]
}
    962c:	bd10      	pop	{r4, pc}
    962e:	bf00      	nop
    9630:	e000ed00 	.word	0xe000ed00

00009634 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    9634:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    9636:	4b4a      	ldr	r3, [pc, #296]	; (9760 <z_arm_fault+0x12c>)
{
    9638:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    963a:	685b      	ldr	r3, [r3, #4]
    963c:	2500      	movs	r5, #0
{
    963e:	b08b      	sub	sp, #44	; 0x2c
    9640:	f3c3 0308 	ubfx	r3, r3, #0, #9
    9644:	f385 8811 	msr	BASEPRI, r5
    9648:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    964c:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    9650:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    9654:	d116      	bne.n	9684 <z_arm_fault+0x50>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    9656:	07d6      	lsls	r6, r2, #31
    9658:	d414      	bmi.n	9684 <z_arm_fault+0x50>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    965a:	0655      	lsls	r5, r2, #25
    965c:	d403      	bmi.n	9666 <z_arm_fault+0x32>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    965e:	0710      	lsls	r0, r2, #28
    9660:	d404      	bmi.n	966c <z_arm_fault+0x38>
			*nested_exc = true;
    9662:	2501      	movs	r5, #1
    9664:	e004      	b.n	9670 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    9666:	f012 0204 	ands.w	r2, r2, #4
    966a:	d000      	beq.n	966e <z_arm_fault+0x3a>
			ptr_esf = (z_arch_esf_t *)psp;
    966c:	460c      	mov	r4, r1
	*nested_exc = false;
    966e:	2500      	movs	r5, #0
	*recoverable = false;
    9670:	2200      	movs	r2, #0
	switch (fault) {
    9672:	3b03      	subs	r3, #3
	*recoverable = false;
    9674:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    9678:	2b03      	cmp	r3, #3
    967a:	d805      	bhi.n	9688 <z_arm_fault+0x54>
    967c:	e8df f003 	tbb	[pc, r3]
    9680:	5f666224 	.word	0x5f666224
		return NULL;
    9684:	462c      	mov	r4, r5
    9686:	e7f3      	b.n	9670 <z_arm_fault+0x3c>
    9688:	2300      	movs	r3, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    968a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    968e:	b9ca      	cbnz	r2, 96c4 <z_arm_fault+0x90>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    9690:	ae02      	add	r6, sp, #8
    9692:	f104 0720 	add.w	r7, r4, #32
    9696:	4632      	mov	r2, r6
    9698:	6820      	ldr	r0, [r4, #0]
    969a:	6861      	ldr	r1, [r4, #4]
    969c:	3408      	adds	r4, #8
    969e:	c203      	stmia	r2!, {r0, r1}
    96a0:	42bc      	cmp	r4, r7
    96a2:	4616      	mov	r6, r2
    96a4:	d1f7      	bne.n	9696 <z_arm_fault+0x62>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    96a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    96a8:	2d00      	cmp	r5, #0
    96aa:	d053      	beq.n	9754 <z_arm_fault+0x120>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    96ac:	f3c2 0108 	ubfx	r1, r2, #0, #9
    96b0:	b921      	cbnz	r1, 96bc <z_arm_fault+0x88>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    96b2:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    96b6:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    96ba:	9209      	str	r2, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    96bc:	4618      	mov	r0, r3
    96be:	a902      	add	r1, sp, #8
    96c0:	f004 fd6f 	bl	e1a2 <z_arm_fatal_error>
}
    96c4:	b00b      	add	sp, #44	; 0x2c
    96c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    96c8:	4b25      	ldr	r3, [pc, #148]	; (9760 <z_arm_fault+0x12c>)
    96ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    96cc:	0791      	lsls	r1, r2, #30
    96ce:	d4db      	bmi.n	9688 <z_arm_fault+0x54>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    96d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    96d2:	2a00      	cmp	r2, #0
    96d4:	dbd8      	blt.n	9688 <z_arm_fault+0x54>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    96d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    96d8:	0052      	lsls	r2, r2, #1
    96da:	d5d5      	bpl.n	9688 <z_arm_fault+0x54>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    96dc:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    96de:	69a1      	ldr	r1, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    96e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    96e4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    96e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    96ea:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    96ee:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    96f0:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    96f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    96f8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    96fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    96fe:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    9702:	f64d 7202 	movw	r2, #57090	; 0xdf02
    9706:	4291      	cmp	r1, r2
    9708:	d101      	bne.n	970e <z_arm_fault+0xda>
			reason = esf->basic.r0;
    970a:	6823      	ldr	r3, [r4, #0]
    970c:	e7bd      	b.n	968a <z_arm_fault+0x56>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    970e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9710:	b2d2      	uxtb	r2, r2
    9712:	b132      	cbz	r2, 9722 <z_arm_fault+0xee>
			reason = mem_manage_fault(esf, 1, recoverable);
    9714:	2001      	movs	r0, #1
    9716:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    971a:	f7ff ff4f 	bl	95bc <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
    971e:	4603      	mov	r3, r0
		break;
    9720:	e7b3      	b.n	968a <z_arm_fault+0x56>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    9722:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9724:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    9728:	d005      	beq.n	9736 <z_arm_fault+0x102>
			reason = bus_fault(esf, 1, recoverable);
    972a:	2001      	movs	r0, #1
    972c:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    9730:	f7ff ff0e 	bl	9550 <bus_fault.constprop.0>
    9734:	e7f3      	b.n	971e <z_arm_fault+0xea>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    9736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    973c:	d3a4      	bcc.n	9688 <z_arm_fault+0x54>
		reason = usage_fault(esf);
    973e:	f7ff fed9 	bl	94f4 <usage_fault.constprop.0>
    9742:	e7ec      	b.n	971e <z_arm_fault+0xea>
		reason = mem_manage_fault(esf, 0, recoverable);
    9744:	2000      	movs	r0, #0
    9746:	f10d 0107 	add.w	r1, sp, #7
    974a:	e7e6      	b.n	971a <z_arm_fault+0xe6>
		reason = bus_fault(esf, 0, recoverable);
    974c:	2000      	movs	r0, #0
    974e:	f10d 0107 	add.w	r1, sp, #7
    9752:	e7ed      	b.n	9730 <z_arm_fault+0xfc>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    9754:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
    9758:	f022 0201 	bic.w	r2, r2, #1
    975c:	e7ad      	b.n	96ba <z_arm_fault+0x86>
    975e:	bf00      	nop
    9760:	e000ed00 	.word	0xe000ed00

00009764 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    9764:	4b04      	ldr	r3, [pc, #16]	; (9778 <z_arm_fault_init+0x14>)
    9766:	695a      	ldr	r2, [r3, #20]
    9768:	f042 0210 	orr.w	r2, r2, #16
    976c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    976e:	695a      	ldr	r2, [r3, #20]
    9770:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    9774:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    9776:	4770      	bx	lr
    9778:	e000ed00 	.word	0xe000ed00

0000977c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    977c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    9780:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    9784:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    9786:	4672      	mov	r2, lr
	bl z_arm_fault
    9788:	f7ff ff54 	bl	9634 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    978c:	bd01      	pop	{r0, pc}
    978e:	bf00      	nop

00009790 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    9790:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9792:	2120      	movs	r1, #32
    9794:	4803      	ldr	r0, [pc, #12]	; (97a4 <z_arm_interrupt_init+0x14>)
    9796:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    9798:	3301      	adds	r3, #1
    979a:	2b41      	cmp	r3, #65	; 0x41
    979c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    97a0:	d1f9      	bne.n	9796 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    97a2:	4770      	bx	lr
    97a4:	e000e100 	.word	0xe000e100

000097a8 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    97a8:	2000      	movs	r0, #0
    msr CONTROL, r0
    97aa:	f380 8814 	msr	CONTROL, r0
    isb
    97ae:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    97b2:	2000      	movs	r0, #0
    msr MSPLIM, r0
    97b4:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    97b8:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    97bc:	f7ff fc3e 	bl	903c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    97c0:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    97c2:	490e      	ldr	r1, [pc, #56]	; (97fc <__start+0x54>)
    str r0, [r1]
    97c4:	6008      	str	r0, [r1, #0]
    dsb
    97c6:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    97ca:	480d      	ldr	r0, [pc, #52]	; (9800 <__start+0x58>)
    msr msp, r0
    97cc:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    97d0:	f000 f83e 	bl	9850 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    97d4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    97d6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    97da:	480a      	ldr	r0, [pc, #40]	; (9804 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    97dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    97e0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    97e2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    97e6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    97ea:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    97ec:	4308      	orrs	r0, r1
    msr CONTROL, r0
    97ee:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    97f2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    97f6:	f7ff fda7 	bl	9348 <z_arm_prep_c>
    97fa:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    97fc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    9800:	2000db30 	.word	0x2000db30
    ldr r0, =z_interrupt_stacks
    9804:	2000cdf0 	.word	0x2000cdf0

00009808 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    9808:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    980c:	4905      	ldr	r1, [pc, #20]	; (9824 <sys_arch_reboot+0x1c>)
    980e:	4b06      	ldr	r3, [pc, #24]	; (9828 <sys_arch_reboot+0x20>)
    9810:	68ca      	ldr	r2, [r1, #12]
    9812:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    9816:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    9818:	60cb      	str	r3, [r1, #12]
    981a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    981e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    9820:	e7fd      	b.n	981e <sys_arch_reboot+0x16>
    9822:	bf00      	nop
    9824:	e000ed00 	.word	0xe000ed00
    9828:	05fa0004 	.word	0x05fa0004

0000982c <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    982c:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    982e:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    9830:	4906      	ldr	r1, [pc, #24]	; (984c <z_arm_clear_arm_mpu_config+0x20>)
    9832:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    9836:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    983a:	4293      	cmp	r3, r2
    983c:	db00      	blt.n	9840 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    983e:	4770      	bx	lr
  mpu->RNR = rnr;
    9840:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    9844:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    9848:	3301      	adds	r3, #1
    984a:	e7f6      	b.n	983a <z_arm_clear_arm_mpu_config+0xe>
    984c:	e000ed00 	.word	0xe000ed00

00009850 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    9850:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    9852:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    9854:	2400      	movs	r4, #0
    9856:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    985a:	f7ff ffe7 	bl	982c <z_arm_clear_arm_mpu_config>
    985e:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    9860:	f04f 30ff 	mov.w	r0, #4294967295
    9864:	4a0c      	ldr	r2, [pc, #48]	; (9898 <z_arm_init_arch_hw_at_boot+0x48>)
    9866:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    986a:	3301      	adds	r3, #1
    986c:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    986e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    9872:	d1f8      	bne.n	9866 <z_arm_init_arch_hw_at_boot+0x16>
    9874:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    9876:	f04f 30ff 	mov.w	r0, #4294967295
    987a:	4a07      	ldr	r2, [pc, #28]	; (9898 <z_arm_init_arch_hw_at_boot+0x48>)
    987c:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    9880:	3301      	adds	r3, #1
    9882:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    9884:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    9888:	d1f8      	bne.n	987c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    988a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    988c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9890:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    9894:	bd10      	pop	{r4, pc}
    9896:	bf00      	nop
    9898:	e000e100 	.word	0xe000e100

0000989c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    989c:	4b08      	ldr	r3, [pc, #32]	; (98c0 <z_impl_k_thread_abort+0x24>)
    989e:	689b      	ldr	r3, [r3, #8]
    98a0:	4283      	cmp	r3, r0
    98a2:	d10b      	bne.n	98bc <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    98a4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    98a8:	b143      	cbz	r3, 98bc <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    98aa:	4b06      	ldr	r3, [pc, #24]	; (98c4 <z_impl_k_thread_abort+0x28>)
    98ac:	685a      	ldr	r2, [r3, #4]
    98ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    98b2:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    98b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    98b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    98ba:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    98bc:	f003 bc30 	b.w	d120 <z_thread_abort>
    98c0:	2000cd98 	.word	0x2000cd98
    98c4:	e000ed00 	.word	0xe000ed00

000098c8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    98c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    98ca:	4c09      	ldr	r4, [pc, #36]	; (98f0 <z_arm_configure_static_mpu_regions+0x28>)
    98cc:	4a09      	ldr	r2, [pc, #36]	; (98f4 <z_arm_configure_static_mpu_regions+0x2c>)
    98ce:	4623      	mov	r3, r4
    98d0:	2101      	movs	r1, #1
    98d2:	4809      	ldr	r0, [pc, #36]	; (98f8 <z_arm_configure_static_mpu_regions+0x30>)
    98d4:	f000 f8ea 	bl	9aac <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    98d8:	2300      	movs	r3, #0
    98da:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    98dc:	4b07      	ldr	r3, [pc, #28]	; (98fc <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    98de:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    98e0:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    98e2:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    98e4:	9301      	str	r3, [sp, #4]
    98e6:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    98e8:	f000 f8ea 	bl	9ac0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    98ec:	b004      	add	sp, #16
    98ee:	bd10      	pop	{r4, pc}
    98f0:	20040000 	.word	0x20040000
    98f4:	2000c580 	.word	0x2000c580
    98f8:	0000f360 	.word	0x0000f360
    98fc:	2000c6f0 	.word	0x2000c6f0

00009900 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    9900:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    9902:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    9904:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    9906:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    990a:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    990e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    9910:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    9912:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    9914:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    9918:	4905      	ldr	r1, [pc, #20]	; (9930 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    991a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    991e:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    9922:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    9926:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    992a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    992e:	bd10      	pop	{r4, pc}
    9930:	e000ed00 	.word	0xe000ed00

00009934 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    9934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9938:	460f      	mov	r7, r1
    993a:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    993c:	4606      	mov	r6, r0
    993e:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    9942:	4d4e      	ldr	r5, [pc, #312]	; (9a7c <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    9944:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    9946:	45b8      	cmp	r8, r7
    9948:	f280 8094 	bge.w	9a74 <mpu_configure_regions_and_partition.constprop.0+0x140>
		if (regions[i].size == 0U) {
    994c:	f8d6 9004 	ldr.w	r9, [r6, #4]
    9950:	f1b9 0f00 	cmp.w	r9, #0
    9954:	d036      	beq.n	99c4 <mpu_configure_regions_and_partition.constprop.0+0x90>
		&&
    9956:	f1b9 0f1f 	cmp.w	r9, #31
    995a:	f240 8089 	bls.w	9a70 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		&&
    995e:	f019 0f1f 	tst.w	r9, #31
    9962:	f040 8085 	bne.w	9a70 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		((part->start &
    9966:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    996a:	f01a 0f1f 	tst.w	sl, #31
    996e:	d17f      	bne.n	9a70 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    9970:	4650      	mov	r0, sl
    9972:	f004 fc2d 	bl	e1d0 <arm_cmse_mpu_region_get>
    9976:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    9978:	eb09 000a 	add.w	r0, r9, sl
    997c:	3801      	subs	r0, #1
    997e:	f004 fc27 	bl	e1d0 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    9982:	4583      	cmp	fp, r0
    9984:	d174      	bne.n	9a70 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
    9986:	f11b 0f16 	cmn.w	fp, #22
    998a:	d071      	beq.n	9a70 <mpu_configure_regions_and_partition.constprop.0+0x13c>
    998c:	455c      	cmp	r4, fp
    998e:	dd6f      	ble.n	9a70 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    9990:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    9994:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    9998:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    999c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    99a0:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    99a4:	f043 0a1f 	orr.w	sl, r3, #31
		 * The new memory region is to be placed inside the underlying
		 * region, possibly splitting the underlying region into two.
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    99a8:	e9d6 3200 	ldrd	r3, r2, [r6]
    99ac:	441a      	add	r2, r3

		if ((regions[i].start == u_reg_base) &&
    99ae:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    99b0:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    99b4:	d11e      	bne.n	99f4 <mpu_configure_regions_and_partition.constprop.0+0xc0>
    99b6:	45ca      	cmp	sl, r9
    99b8:	d108      	bne.n	99cc <mpu_configure_regions_and_partition.constprop.0+0x98>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    99ba:	4631      	mov	r1, r6
    99bc:	fa5f f08b 	uxtb.w	r0, fp
    99c0:	f004 fc0f 	bl	e1e2 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    99c4:	f108 0801 	add.w	r8, r8, #1
    99c8:	360c      	adds	r6, #12
    99ca:	e7bc      	b.n	9946 <mpu_configure_regions_and_partition.constprop.0+0x12>
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    99cc:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    99ce:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    99d2:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    99d6:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    99da:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    99de:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    99e0:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    99e4:	b2e0      	uxtb	r0, r4
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    99e6:	f004 fbfc 	bl	e1e2 <mpu_configure_region>

			if (reg_index == -EINVAL) {
    99ea:	f110 0f16 	cmn.w	r0, #22
    99ee:	d03f      	beq.n	9a70 <mpu_configure_regions_and_partition.constprop.0+0x13c>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    99f0:	1c44      	adds	r4, r0, #1
    99f2:	e7e7      	b.n	99c4 <mpu_configure_regions_and_partition.constprop.0+0x90>
	MPU->RNR = rnr;
    99f4:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    99f8:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    99fc:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    99fe:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    9a02:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    9a06:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    9a08:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
    9a0a:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    9a0c:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    9a0e:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    9a12:	d0e8      	beq.n	99e6 <mpu_configure_regions_and_partition.constprop.0+0xb2>
				mpu_configure_region(reg_index, &regions[i]);
    9a14:	f004 fbe5 	bl	e1e2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    9a18:	f110 0f16 	cmn.w	r0, #22
    9a1c:	d028      	beq.n	9a70 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    9a1e:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    9a22:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    9a26:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    9a2a:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = mpu_get_rbar() &
    9a2e:	f362 0304 	bfi	r3, r2, #0, #5
    9a32:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
    9a36:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    9a3a:	f89d 2008 	ldrb.w	r2, [sp, #8]
    9a3e:	085b      	lsrs	r3, r3, #1
    9a40:	f363 1247 	bfi	r2, r3, #5, #3
    9a44:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    9a48:	e9d6 3200 	ldrd	r3, r2, [r6]
    9a4c:	4413      	add	r3, r2
    9a4e:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    9a50:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    9a54:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    9a56:	4453      	add	r3, sl
    9a58:	eba3 0309 	sub.w	r3, r3, r9
    9a5c:	b2c8      	uxtb	r0, r1
    9a5e:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    9a62:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    9a64:	9303      	str	r3, [sp, #12]
    9a66:	d803      	bhi.n	9a70 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    9a68:	4669      	mov	r1, sp
    9a6a:	f7ff ff49 	bl	9900 <region_init>
    9a6e:	e7bf      	b.n	99f0 <mpu_configure_regions_and_partition.constprop.0+0xbc>
			return -EINVAL;
    9a70:	f06f 0415 	mvn.w	r4, #21
		}
	}

	return reg_index;
}
    9a74:	4620      	mov	r0, r4
    9a76:	b005      	add	sp, #20
    9a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a7c:	e000ed00 	.word	0xe000ed00

00009a80 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    9a80:	2205      	movs	r2, #5
    9a82:	4b04      	ldr	r3, [pc, #16]	; (9a94 <arm_core_mpu_enable+0x14>)
    9a84:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    9a88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9a8c:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    9a90:	4770      	bx	lr
    9a92:	bf00      	nop
    9a94:	e000ed00 	.word	0xe000ed00

00009a98 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    9a98:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    9a9c:	2200      	movs	r2, #0
    9a9e:	4b02      	ldr	r3, [pc, #8]	; (9aa8 <arm_core_mpu_disable+0x10>)
    9aa0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    9aa4:	4770      	bx	lr
    9aa6:	bf00      	nop
    9aa8:	e000ed00 	.word	0xe000ed00

00009aac <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    9aac:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    9aae:	4c03      	ldr	r4, [pc, #12]	; (9abc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    9ab0:	7822      	ldrb	r2, [r4, #0]
    9ab2:	f7ff ff3f 	bl	9934 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    9ab6:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    9ab8:	bd10      	pop	{r4, pc}
    9aba:	bf00      	nop
    9abc:	2000cddc 	.word	0x2000cddc

00009ac0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    9ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ac4:	4d29      	ldr	r5, [pc, #164]	; (9b6c <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    9ac6:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    9ac8:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    9aca:	f04f 0800 	mov.w	r8, #0
    9ace:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    9ad0:	4f27      	ldr	r7, [pc, #156]	; (9b70 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    9ad2:	45d0      	cmp	r8, sl
    9ad4:	da1b      	bge.n	9b0e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    9ad6:	f8d6 9004 	ldr.w	r9, [r6, #4]
    9ada:	f1b9 0f00 	cmp.w	r9, #0
    9ade:	d03f      	beq.n	9b60 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    9ae0:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    9ae2:	4608      	mov	r0, r1
    9ae4:	9101      	str	r1, [sp, #4]
    9ae6:	f004 fb73 	bl	e1d0 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    9aea:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    9aec:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    9aee:	eb09 0001 	add.w	r0, r9, r1
    9af2:	3801      	subs	r0, #1
    9af4:	f004 fb6c 	bl	e1d0 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    9af8:	4284      	cmp	r4, r0
    9afa:	f04f 0214 	mov.w	r2, #20
    9afe:	4b1d      	ldr	r3, [pc, #116]	; (9b74 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    9b00:	d008      	beq.n	9b14 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    9b02:	fb02 f308 	mul.w	r3, r2, r8
    9b06:	f06f 0215 	mvn.w	r2, #21
    9b0a:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    9b0e:	b003      	add	sp, #12
    9b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    9b14:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    9b18:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    9b1a:	d0f8      	beq.n	9b0e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    9b1c:	7819      	ldrb	r1, [r3, #0]
    9b1e:	42a1      	cmp	r1, r4
    9b20:	ddf5      	ble.n	9b0e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    9b22:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    9b26:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    9b2a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    9b2e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    9b32:	f100 0108 	add.w	r1, r0, #8
    9b36:	7b00      	ldrb	r0, [r0, #12]
    9b38:	f364 0004 	bfi	r0, r4, #0, #5
    9b3c:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    9b3e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    9b42:	790c      	ldrb	r4, [r1, #4]
    9b44:	0840      	lsrs	r0, r0, #1
    9b46:	f360 1447 	bfi	r4, r0, #5, #3
    9b4a:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    9b4c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    9b50:	f021 011f 	bic.w	r1, r1, #31
    9b54:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    9b56:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    9b5a:	f021 011f 	bic.w	r1, r1, #31
    9b5e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    9b60:	f108 0801 	add.w	r8, r8, #1
    9b64:	3514      	adds	r5, #20
    9b66:	360c      	adds	r6, #12
    9b68:	e7b3      	b.n	9ad2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    9b6a:	bf00      	nop
    9b6c:	2000c860 	.word	0x2000c860
    9b70:	e000ed00 	.word	0xe000ed00
    9b74:	2000cddc 	.word	0x2000cddc

00009b78 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    9b78:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    9b7a:	4d0e      	ldr	r5, [pc, #56]	; (9bb4 <z_arm_mpu_init+0x3c>)
    9b7c:	682c      	ldr	r4, [r5, #0]
    9b7e:	2c10      	cmp	r4, #16
    9b80:	d815      	bhi.n	9bae <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    9b82:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    9b84:	f7ff ff88 	bl	9a98 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    9b88:	4b0b      	ldr	r3, [pc, #44]	; (9bb8 <z_arm_mpu_init+0x40>)
    9b8a:	4a0c      	ldr	r2, [pc, #48]	; (9bbc <z_arm_mpu_init+0x44>)
    9b8c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    9b90:	4284      	cmp	r4, r0
    9b92:	d105      	bne.n	9ba0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    9b94:	4b0a      	ldr	r3, [pc, #40]	; (9bc0 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    9b96:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    9b98:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    9b9a:	f7ff ff71 	bl	9a80 <arm_core_mpu_enable>
}
    9b9e:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    9ba0:	6869      	ldr	r1, [r5, #4]
    9ba2:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    9ba6:	f7ff feab 	bl	9900 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    9baa:	3001      	adds	r0, #1
    9bac:	e7f0      	b.n	9b90 <z_arm_mpu_init+0x18>
		return -1;
    9bae:	f04f 30ff 	mov.w	r0, #4294967295
    9bb2:	e7f4      	b.n	9b9e <z_arm_mpu_init+0x26>
    9bb4:	0000f36c 	.word	0x0000f36c
    9bb8:	e000ed00 	.word	0xe000ed00
    9bbc:	0044ffaa 	.word	0x0044ffaa
    9bc0:	2000cddc 	.word	0x2000cddc

00009bc4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    9bc4:	4b01      	ldr	r3, [pc, #4]	; (9bcc <__stdout_hook_install+0x8>)
    9bc6:	6018      	str	r0, [r3, #0]
}
    9bc8:	4770      	bx	lr
    9bca:	bf00      	nop
    9bcc:	2000c590 	.word	0x2000c590

00009bd0 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    9bd0:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    9bd2:	4c07      	ldr	r4, [pc, #28]	; (9bf0 <_sbrk+0x20>)
    9bd4:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    9bd6:	18c2      	adds	r2, r0, r3
    9bd8:	4806      	ldr	r0, [pc, #24]	; (9bf4 <_sbrk+0x24>)
    9bda:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    9bde:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    9be2:	428a      	cmp	r2, r1
		heap_sz += count;
    9be4:	bf36      	itet	cc
    9be6:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    9be8:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
    9bec:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
    9bee:	bd10      	pop	{r4, pc}
    9bf0:	2000c874 	.word	0x2000c874
    9bf4:	2000dd30 	.word	0x2000dd30

00009bf8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    9bf8:	4b08      	ldr	r3, [pc, #32]	; (9c1c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    9bfa:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    9bfc:	1ac3      	subs	r3, r0, r3
{
    9bfe:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    9c00:	4907      	ldr	r1, [pc, #28]	; (9c20 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    9c02:	109b      	asrs	r3, r3, #2
{
    9c04:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    9c06:	4359      	muls	r1, r3
    9c08:	2240      	movs	r2, #64	; 0x40
    9c0a:	4806      	ldr	r0, [pc, #24]	; (9c24 <onoff_stop+0x2c>)
    9c0c:	f004 fb31 	bl	e272 <stop>
	notify(mgr, res);
    9c10:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    9c12:	4601      	mov	r1, r0
	notify(mgr, res);
    9c14:	4620      	mov	r0, r4
}
    9c16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    9c1a:	4718      	bx	r3
    9c1c:	2000c88c 	.word	0x2000c88c
    9c20:	b6db6db7 	.word	0xb6db6db7
    9c24:	0000f058 	.word	0x0000f058

00009c28 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9c28:	2340      	movs	r3, #64	; 0x40
{
    9c2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    9c2c:	4c0b      	ldr	r4, [pc, #44]	; (9c5c <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9c2e:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    9c30:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9c32:	460b      	mov	r3, r1
{
    9c34:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9c36:	490a      	ldr	r1, [pc, #40]	; (9c60 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    9c38:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9c3a:	4361      	muls	r1, r4
{
    9c3c:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9c3e:	4a09      	ldr	r2, [pc, #36]	; (9c64 <onoff_start+0x3c>)
    9c40:	4809      	ldr	r0, [pc, #36]	; (9c68 <onoff_start+0x40>)
    9c42:	f004 fb43 	bl	e2cc <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    9c46:	1e01      	subs	r1, r0, #0
    9c48:	da05      	bge.n	9c56 <onoff_start+0x2e>
		notify(mgr, err);
    9c4a:	4630      	mov	r0, r6
    9c4c:	462b      	mov	r3, r5
	}
}
    9c4e:	b002      	add	sp, #8
    9c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    9c54:	4718      	bx	r3
}
    9c56:	b002      	add	sp, #8
    9c58:	bd70      	pop	{r4, r5, r6, pc}
    9c5a:	bf00      	nop
    9c5c:	2000c88c 	.word	0x2000c88c
    9c60:	b6db6db7 	.word	0xb6db6db7
    9c64:	0000e339 	.word	0x0000e339
    9c68:	0000f058 	.word	0x0000f058

00009c6c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    9c6c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    9c6e:	2200      	movs	r2, #0
    9c70:	2101      	movs	r1, #1
{
    9c72:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    9c74:	2005      	movs	r0, #5
    9c76:	f7ff fb4d 	bl	9314 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    9c7a:	480f      	ldr	r0, [pc, #60]	; (9cb8 <clk_init+0x4c>)
    9c7c:	f001 f8f4 	bl	ae68 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    9c80:	4b0e      	ldr	r3, [pc, #56]	; (9cbc <clk_init+0x50>)
    9c82:	4298      	cmp	r0, r3
    9c84:	d115      	bne.n	9cb2 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    9c86:	f001 f8ff 	bl	ae88 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    9c8a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    9c8c:	490c      	ldr	r1, [pc, #48]	; (9cc0 <clk_init+0x54>)
    9c8e:	4630      	mov	r0, r6
    9c90:	f004 f9d4 	bl	e03c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    9c94:	2800      	cmp	r0, #0
    9c96:	db0b      	blt.n	9cb0 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    9c98:	2501      	movs	r5, #1
    9c9a:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    9c9c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    9c9e:	4908      	ldr	r1, [pc, #32]	; (9cc0 <clk_init+0x54>)
    9ca0:	f104 001c 	add.w	r0, r4, #28
    9ca4:	f004 f9ca 	bl	e03c <onoff_manager_init>
		if (err < 0) {
    9ca8:	2800      	cmp	r0, #0
    9caa:	db01      	blt.n	9cb0 <clk_init+0x44>
	}

	return 0;
    9cac:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    9cae:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    9cb0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    9cb2:	f06f 0004 	mvn.w	r0, #4
    9cb6:	e7fb      	b.n	9cb0 <clk_init+0x44>
    9cb8:	00009cf9 	.word	0x00009cf9
    9cbc:	0bad0000 	.word	0x0bad0000
    9cc0:	0000f394 	.word	0x0000f394

00009cc4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    9cc4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    9cc6:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    9cc8:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    9cca:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    9ccc:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    9cce:	4808      	ldr	r0, [pc, #32]	; (9cf0 <clkstarted_handle.constprop.0+0x2c>)
    9cd0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    9cd2:	3340      	adds	r3, #64	; 0x40
    9cd4:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    9cd6:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    9cda:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    9cdc:	f004 fab6 	bl	e24c <set_on_state>
	if (callback) {
    9ce0:	b12d      	cbz	r5, 9cee <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    9ce2:	4632      	mov	r2, r6
    9ce4:	462b      	mov	r3, r5
}
    9ce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    9cea:	4802      	ldr	r0, [pc, #8]	; (9cf4 <clkstarted_handle.constprop.0+0x30>)
    9cec:	4718      	bx	r3
}
    9cee:	bd70      	pop	{r4, r5, r6, pc}
    9cf0:	2000c88c 	.word	0x2000c88c
    9cf4:	0000f058 	.word	0x0000f058

00009cf8 <clock_event_handler>:
	switch (event) {
    9cf8:	b110      	cbz	r0, 9d00 <clock_event_handler+0x8>
    9cfa:	2801      	cmp	r0, #1
    9cfc:	d004      	beq.n	9d08 <clock_event_handler+0x10>
    9cfe:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    9d00:	4b03      	ldr	r3, [pc, #12]	; (9d10 <clock_event_handler+0x18>)
    9d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9d04:	075b      	lsls	r3, r3, #29
    9d06:	d101      	bne.n	9d0c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    9d08:	f7ff bfdc 	b.w	9cc4 <clkstarted_handle.constprop.0>
}
    9d0c:	4770      	bx	lr
    9d0e:	bf00      	nop
    9d10:	2000c88c 	.word	0x2000c88c

00009d14 <generic_hfclk_start>:
{
    9d14:	b508      	push	{r3, lr}
	__asm__ volatile(
    9d16:	f04f 0320 	mov.w	r3, #32
    9d1a:	f3ef 8111 	mrs	r1, BASEPRI
    9d1e:	f383 8812 	msr	BASEPRI_MAX, r3
    9d22:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    9d26:	4a11      	ldr	r2, [pc, #68]	; (9d6c <generic_hfclk_start+0x58>)
    9d28:	6813      	ldr	r3, [r2, #0]
    9d2a:	f043 0002 	orr.w	r0, r3, #2
    9d2e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    9d30:	07da      	lsls	r2, r3, #31
    9d32:	d408      	bmi.n	9d46 <generic_hfclk_start+0x32>
	__asm__ volatile(
    9d34:	f381 8811 	msr	BASEPRI, r1
    9d38:	f3bf 8f6f 	isb	sy
}
    9d3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    9d40:	2001      	movs	r0, #1
    9d42:	f001 b8b1 	b.w	aea8 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    9d46:	4b0a      	ldr	r3, [pc, #40]	; (9d70 <generic_hfclk_start+0x5c>)
    9d48:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    9d4c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    9d50:	07d3      	lsls	r3, r2, #31
    9d52:	d5ef      	bpl.n	9d34 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    9d54:	4807      	ldr	r0, [pc, #28]	; (9d74 <generic_hfclk_start+0x60>)
    9d56:	f004 fa79 	bl	e24c <set_on_state>
    9d5a:	f381 8811 	msr	BASEPRI, r1
    9d5e:	f3bf 8f6f 	isb	sy
}
    9d62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    9d66:	2000      	movs	r0, #0
    9d68:	f7ff bfac 	b.w	9cc4 <clkstarted_handle.constprop.0>
    9d6c:	2000c8dc 	.word	0x2000c8dc
    9d70:	40005000 	.word	0x40005000
    9d74:	2000c8cc 	.word	0x2000c8cc

00009d78 <api_blocking_start>:
{
    9d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    9d7a:	2200      	movs	r2, #0
    9d7c:	2301      	movs	r3, #1
    9d7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    9d82:	466b      	mov	r3, sp
    9d84:	4a08      	ldr	r2, [pc, #32]	; (9da8 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    9d86:	f8cd d000 	str.w	sp, [sp]
    9d8a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    9d8e:	f004 facc 	bl	e32a <api_start>
	if (err < 0) {
    9d92:	2800      	cmp	r0, #0
    9d94:	db05      	blt.n	9da2 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    9d96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9d9a:	2300      	movs	r3, #0
    9d9c:	4668      	mov	r0, sp
    9d9e:	f002 feb5 	bl	cb0c <z_impl_k_sem_take>
}
    9da2:	b005      	add	sp, #20
    9da4:	f85d fb04 	ldr.w	pc, [sp], #4
    9da8:	0000e357 	.word	0x0000e357

00009dac <generic_hfclk_stop>:
{
    9dac:	b510      	push	{r4, lr}
	__asm__ volatile(
    9dae:	f04f 0320 	mov.w	r3, #32
    9db2:	f3ef 8411 	mrs	r4, BASEPRI
    9db6:	f383 8812 	msr	BASEPRI_MAX, r3
    9dba:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    9dbe:	4a07      	ldr	r2, [pc, #28]	; (9ddc <generic_hfclk_stop+0x30>)
    9dc0:	6813      	ldr	r3, [r2, #0]
    9dc2:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    9dc6:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    9dc8:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    9dca:	d402      	bmi.n	9dd2 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    9dcc:	2001      	movs	r0, #1
    9dce:	f004 fbec 	bl	e5aa <nrfx_clock_stop>
	__asm__ volatile(
    9dd2:	f384 8811 	msr	BASEPRI, r4
    9dd6:	f3bf 8f6f 	isb	sy
}
    9dda:	bd10      	pop	{r4, pc}
    9ddc:	2000c8dc 	.word	0x2000c8dc

00009de0 <z_nrf_clock_control_lf_on>:
{
    9de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9de4:	2201      	movs	r2, #1
    9de6:	4607      	mov	r7, r0
    9de8:	4935      	ldr	r1, [pc, #212]	; (9ec0 <z_nrf_clock_control_lf_on+0xe0>)
    9dea:	e8d1 3fef 	ldaex	r3, [r1]
    9dee:	e8c1 2fe0 	stlex	r0, r2, [r1]
    9df2:	2800      	cmp	r0, #0
    9df4:	d1f9      	bne.n	9dea <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    9df6:	b933      	cbnz	r3, 9e06 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    9df8:	4932      	ldr	r1, [pc, #200]	; (9ec4 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
    9dfa:	4833      	ldr	r0, [pc, #204]	; (9ec8 <z_nrf_clock_control_lf_on+0xe8>)
    9dfc:	604b      	str	r3, [r1, #4]
    9dfe:	60cb      	str	r3, [r1, #12]
    9e00:	608a      	str	r2, [r1, #8]
    9e02:	f004 f92e 	bl	e062 <onoff_request>
	switch (start_mode) {
    9e06:	1e7b      	subs	r3, r7, #1
    9e08:	2b01      	cmp	r3, #1
    9e0a:	d828      	bhi.n	9e5e <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    9e0c:	2f01      	cmp	r7, #1
    9e0e:	d106      	bne.n	9e1e <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    9e10:	4b2e      	ldr	r3, [pc, #184]	; (9ecc <z_nrf_clock_control_lf_on+0xec>)
    9e12:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    9e16:	f003 0303 	and.w	r3, r3, #3
    9e1a:	2b02      	cmp	r3, #2
    9e1c:	d01f      	beq.n	9e5e <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    9e1e:	f004 fe15 	bl	ea4c <k_is_in_isr>
    9e22:	4605      	mov	r5, r0
    9e24:	b9e8      	cbnz	r0, 9e62 <z_nrf_clock_control_lf_on+0x82>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    9e26:	4b2a      	ldr	r3, [pc, #168]	; (9ed0 <z_nrf_clock_control_lf_on+0xf0>)
    9e28:	781b      	ldrb	r3, [r3, #0]
    9e2a:	b1d3      	cbz	r3, 9e62 <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
    9e2c:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    9e2e:	4606      	mov	r6, r0
    9e30:	4b26      	ldr	r3, [pc, #152]	; (9ecc <z_nrf_clock_control_lf_on+0xec>)
    9e32:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9e36:	4c25      	ldr	r4, [pc, #148]	; (9ecc <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9e38:	f8df 8098 	ldr.w	r8, [pc, #152]	; 9ed4 <z_nrf_clock_control_lf_on+0xf4>
    9e3c:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9e40:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    9e44:	03d2      	lsls	r2, r2, #15
    9e46:	d516      	bpl.n	9e76 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    9e48:	f003 0303 	and.w	r3, r3, #3
    9e4c:	2b02      	cmp	r3, #2
    9e4e:	d001      	beq.n	9e54 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    9e50:	2f01      	cmp	r7, #1
    9e52:	d110      	bne.n	9e76 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
    9e54:	b375      	cbz	r5, 9eb4 <z_nrf_clock_control_lf_on+0xd4>
    9e56:	f386 8811 	msr	BASEPRI, r6
    9e5a:	f3bf 8f6f 	isb	sy
}
    9e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    9e62:	f04f 0320 	mov.w	r3, #32
    9e66:	f3ef 8611 	mrs	r6, BASEPRI
    9e6a:	f383 8812 	msr	BASEPRI_MAX, r3
    9e6e:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    9e72:	2501      	movs	r5, #1
    9e74:	e7df      	b.n	9e36 <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    9e76:	b1c5      	cbz	r5, 9eaa <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    9e78:	4630      	mov	r0, r6
    9e7a:	f7ff fa23 	bl	92c4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    9e7e:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    9e82:	b2db      	uxtb	r3, r3
    9e84:	2b01      	cmp	r3, #1
    9e86:	d1d9      	bne.n	9e3c <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9e88:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    9e8c:	2a00      	cmp	r2, #0
    9e8e:	d0d5      	beq.n	9e3c <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9e90:	2200      	movs	r2, #0
    9e92:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    9e96:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    9e9a:	2202      	movs	r2, #2
    9e9c:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    9ea0:	2220      	movs	r2, #32
    9ea2:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9ea6:	60a3      	str	r3, [r4, #8]
}
    9ea8:	e7c8      	b.n	9e3c <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
    9eaa:	2100      	movs	r1, #0
    9eac:	2021      	movs	r0, #33	; 0x21
    9eae:	f003 f917 	bl	d0e0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    9eb2:	e7e4      	b.n	9e7e <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
    9eb4:	2202      	movs	r2, #2
    9eb6:	4b05      	ldr	r3, [pc, #20]	; (9ecc <z_nrf_clock_control_lf_on+0xec>)
    9eb8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    9ebc:	e7cf      	b.n	9e5e <z_nrf_clock_control_lf_on+0x7e>
    9ebe:	bf00      	nop
    9ec0:	2000c888 	.word	0x2000c888
    9ec4:	2000c878 	.word	0x2000c878
    9ec8:	2000c8a8 	.word	0x2000c8a8
    9ecc:	40005000 	.word	0x40005000
    9ed0:	2000cdeb 	.word	0x2000cdeb
    9ed4:	e000e100 	.word	0xe000e100

00009ed8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    9ed8:	b508      	push	{r3, lr}
    9eda:	4807      	ldr	r0, [pc, #28]	; (9ef8 <uart_console_init+0x20>)
    9edc:	f004 fd10 	bl	e900 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    9ee0:	b138      	cbz	r0, 9ef2 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    9ee2:	4806      	ldr	r0, [pc, #24]	; (9efc <uart_console_init+0x24>)
    9ee4:	f7ff fe6e 	bl	9bc4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    9ee8:	4804      	ldr	r0, [pc, #16]	; (9efc <uart_console_init+0x24>)
    9eea:	f7fe fb5b 	bl	85a4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    9eee:	2000      	movs	r0, #0
}
    9ef0:	bd08      	pop	{r3, pc}
		return -ENODEV;
    9ef2:	f06f 0012 	mvn.w	r0, #18
    9ef6:	e7fb      	b.n	9ef0 <uart_console_init+0x18>
    9ef8:	0000f0a0 	.word	0x0000f0a0
    9efc:	00009f01 	.word	0x00009f01

00009f00 <console_out>:
	if ('\n' == c) {
    9f00:	280a      	cmp	r0, #10
{
    9f02:	b538      	push	{r3, r4, r5, lr}
    9f04:	4604      	mov	r4, r0
    9f06:	4d07      	ldr	r5, [pc, #28]	; (9f24 <console_out+0x24>)
	if ('\n' == c) {
    9f08:	d104      	bne.n	9f14 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    9f0a:	68ab      	ldr	r3, [r5, #8]
    9f0c:	210d      	movs	r1, #13
    9f0e:	4628      	mov	r0, r5
    9f10:	685b      	ldr	r3, [r3, #4]
    9f12:	4798      	blx	r3
    9f14:	68ab      	ldr	r3, [r5, #8]
    9f16:	4803      	ldr	r0, [pc, #12]	; (9f24 <console_out+0x24>)
    9f18:	685b      	ldr	r3, [r3, #4]
    9f1a:	b2e1      	uxtb	r1, r4
    9f1c:	4798      	blx	r3
}
    9f1e:	4620      	mov	r0, r4
    9f20:	bd38      	pop	{r3, r4, r5, pc}
    9f22:	bf00      	nop
    9f24:	0000f0a0 	.word	0x0000f0a0

00009f28 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    9f28:	b530      	push	{r4, r5, lr}
	return port->config;
    9f2a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    9f2c:	f001 041f 	and.w	r4, r1, #31
    9f30:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    9f32:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    9f36:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    9f38:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    9f3c:	d105      	bne.n	9f4a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    9f3e:	4620      	mov	r0, r4
    9f40:	f001 fa76 	bl	b430 <nrfx_gpiote_trigger_disable>

		return 0;
    9f44:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    9f46:	b005      	add	sp, #20
    9f48:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    9f4a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    9f4c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    9f50:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    9f54:	d114      	bne.n	9f80 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    9f56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    9f5a:	bf0c      	ite	eq
    9f5c:	2304      	moveq	r3, #4
    9f5e:	2305      	movne	r3, #5
    9f60:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    9f64:	2300      	movs	r3, #0
    9f66:	4620      	mov	r0, r4
    9f68:	4619      	mov	r1, r3
    9f6a:	aa02      	add	r2, sp, #8
    9f6c:	f001 f896 	bl	b09c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    9f70:	4b1c      	ldr	r3, [pc, #112]	; (9fe4 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    9f72:	4298      	cmp	r0, r3
    9f74:	d133      	bne.n	9fde <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    9f76:	2101      	movs	r1, #1
    9f78:	4620      	mov	r0, r4
    9f7a:	f001 fa15 	bl	b3a8 <nrfx_gpiote_trigger_enable>
	return 0;
    9f7e:	e7e1      	b.n	9f44 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    9f80:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    9f84:	d020      	beq.n	9fc8 <gpio_nrfx_pin_interrupt_configure+0xa0>
    9f86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    9f8a:	bf14      	ite	ne
    9f8c:	2301      	movne	r3, #1
    9f8e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    9f90:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    9f94:	6883      	ldr	r3, [r0, #8]
    9f96:	40cb      	lsrs	r3, r1
    9f98:	07d9      	lsls	r1, r3, #31
    9f9a:	d4e3      	bmi.n	9f64 <gpio_nrfx_pin_interrupt_configure+0x3c>
    9f9c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    9fa0:	d1e0      	bne.n	9f64 <gpio_nrfx_pin_interrupt_configure+0x3c>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    9fa2:	4a11      	ldr	r2, [pc, #68]	; (9fe8 <gpio_nrfx_pin_interrupt_configure+0xc0>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    9fa4:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    9fa8:	3380      	adds	r3, #128	; 0x80
    9faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    9fae:	07db      	lsls	r3, r3, #31
    9fb0:	d4d8      	bmi.n	9f64 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    9fb2:	f10d 0507 	add.w	r5, sp, #7
    9fb6:	4629      	mov	r1, r5
    9fb8:	4620      	mov	r0, r4
    9fba:	f001 f9a1 	bl	b300 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    9fbe:	4b0b      	ldr	r3, [pc, #44]	; (9fec <gpio_nrfx_pin_interrupt_configure+0xc4>)
    9fc0:	4298      	cmp	r0, r3
    9fc2:	d003      	beq.n	9fcc <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
    9fc4:	9503      	str	r5, [sp, #12]
    9fc6:	e7cd      	b.n	9f64 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    9fc8:	2303      	movs	r3, #3
    9fca:	e7e1      	b.n	9f90 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    9fcc:	4628      	mov	r0, r5
    9fce:	f001 f9e5 	bl	b39c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    9fd2:	4b04      	ldr	r3, [pc, #16]	; (9fe4 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    9fd4:	4298      	cmp	r0, r3
    9fd6:	d0f5      	beq.n	9fc4 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
    9fd8:	f06f 000b 	mvn.w	r0, #11
    9fdc:	e7b3      	b.n	9f46 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    9fde:	f06f 0015 	mvn.w	r0, #21
    9fe2:	e7b0      	b.n	9f46 <gpio_nrfx_pin_interrupt_configure+0x1e>
    9fe4:	0bad0000 	.word	0x0bad0000
    9fe8:	40842500 	.word	0x40842500
    9fec:	0bad0004 	.word	0x0bad0004

00009ff0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    9ff0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    9ff2:	f001 f9c3 	bl	b37c <nrfx_gpiote_is_init>
    9ff6:	4604      	mov	r4, r0
    9ff8:	b968      	cbnz	r0, a016 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    9ffa:	f001 f997 	bl	b32c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    9ffe:	4b08      	ldr	r3, [pc, #32]	; (a020 <gpio_nrfx_init+0x30>)
    a000:	4298      	cmp	r0, r3
    a002:	d10a      	bne.n	a01a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    a004:	4621      	mov	r1, r4
    a006:	4807      	ldr	r0, [pc, #28]	; (a024 <gpio_nrfx_init+0x34>)
    a008:	f001 f974 	bl	b2f4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    a00c:	4622      	mov	r2, r4
    a00e:	2105      	movs	r1, #5
    a010:	2031      	movs	r0, #49	; 0x31
    a012:	f7ff f97f 	bl	9314 <z_arm_irq_priority_set>
		return 0;
    a016:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    a018:	bd10      	pop	{r4, pc}
		return -EIO;
    a01a:	f06f 0004 	mvn.w	r0, #4
    a01e:	e7fb      	b.n	a018 <gpio_nrfx_init+0x28>
    a020:	0bad0000 	.word	0x0bad0000
    a024:	0000a029 	.word	0x0000a029

0000a028 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    a028:	0943      	lsrs	r3, r0, #5
{
    a02a:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    a02c:	d107      	bne.n	a03e <nrfx_gpio_handler+0x16>
	return list->head;
    a02e:	4b0b      	ldr	r3, [pc, #44]	; (a05c <nrfx_gpio_handler+0x34>)
    a030:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    a032:	b121      	cbz	r1, a03e <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    a034:	2501      	movs	r5, #1
	return node->next;
    a036:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    a038:	4e09      	ldr	r6, [pc, #36]	; (a060 <nrfx_gpio_handler+0x38>)
    a03a:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    a03c:	b901      	cbnz	r1, a040 <nrfx_gpio_handler+0x18>
}
    a03e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    a040:	688a      	ldr	r2, [r1, #8]
    a042:	402a      	ands	r2, r5
    a044:	d002      	beq.n	a04c <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    a046:	4630      	mov	r0, r6
    a048:	684b      	ldr	r3, [r1, #4]
    a04a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    a04c:	b11c      	cbz	r4, a056 <nrfx_gpio_handler+0x2e>
    a04e:	6823      	ldr	r3, [r4, #0]
    a050:	4621      	mov	r1, r4
    a052:	461c      	mov	r4, r3
    a054:	e7f2      	b.n	a03c <nrfx_gpio_handler+0x14>
    a056:	4623      	mov	r3, r4
    a058:	e7fa      	b.n	a050 <nrfx_gpio_handler+0x28>
    a05a:	bf00      	nop
    a05c:	2000c8e0 	.word	0x2000c8e0
    a060:	0000f070 	.word	0x0000f070

0000a064 <gpio_nrfx_pin_configure>:
{
    a064:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    a068:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    a06a:	f001 051f 	and.w	r5, r1, #31
    a06e:	7b3b      	ldrb	r3, [r7, #12]
{
    a070:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    a072:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    a076:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    a078:	4628      	mov	r0, r5
    a07a:	f10d 0103 	add.w	r1, sp, #3
    a07e:	f001 f93f 	bl	b300 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    a082:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    a086:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    a088:	d10b      	bne.n	a0a2 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    a08a:	4628      	mov	r0, r5
    a08c:	f001 f9f8 	bl	b480 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    a090:	4b3c      	ldr	r3, [pc, #240]	; (a184 <gpio_nrfx_pin_configure+0x120>)
    a092:	4598      	cmp	r8, r3
    a094:	d103      	bne.n	a09e <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    a096:	f89d 0003 	ldrb.w	r0, [sp, #3]
    a09a:	f001 f979 	bl	b390 <nrfx_gpiote_channel_free>
		return 0;
    a09e:	2000      	movs	r0, #0
    a0a0:	e00c      	b.n	a0bc <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    a0a2:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    a0a4:	4628      	mov	r0, r5
    a0a6:	4619      	mov	r1, r3
    a0a8:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    a0aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    a0ae:	f000 fff5 	bl	b09c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    a0b2:	4b34      	ldr	r3, [pc, #208]	; (a184 <gpio_nrfx_pin_configure+0x120>)
    a0b4:	4298      	cmp	r0, r3
    a0b6:	d004      	beq.n	a0c2 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    a0b8:	f06f 0015 	mvn.w	r0, #21
}
    a0bc:	b004      	add	sp, #16
    a0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    a0c2:	4580      	cmp	r8, r0
    a0c4:	d103      	bne.n	a0ce <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    a0c6:	f89d 0003 	ldrb.w	r0, [sp, #3]
    a0ca:	f001 f961 	bl	b390 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    a0ce:	03a3      	lsls	r3, r4, #14
    a0d0:	d549      	bpl.n	a166 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    a0d2:	f240 3306 	movw	r3, #774	; 0x306
    a0d6:	4023      	ands	r3, r4
    a0d8:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    a0dc:	d019      	beq.n	a112 <gpio_nrfx_pin_configure+0xae>
    a0de:	d80c      	bhi.n	a0fa <gpio_nrfx_pin_configure+0x96>
    a0e0:	2b06      	cmp	r3, #6
    a0e2:	d017      	beq.n	a114 <gpio_nrfx_pin_configure+0xb0>
    a0e4:	d804      	bhi.n	a0f0 <gpio_nrfx_pin_configure+0x8c>
    a0e6:	b1ab      	cbz	r3, a114 <gpio_nrfx_pin_configure+0xb0>
    a0e8:	2b02      	cmp	r3, #2
    a0ea:	d1e5      	bne.n	a0b8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    a0ec:	2304      	movs	r3, #4
    a0ee:	e011      	b.n	a114 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    a0f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a0f4:	d1e0      	bne.n	a0b8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    a0f6:	2301      	movs	r3, #1
    a0f8:	e00c      	b.n	a114 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    a0fa:	f240 2202 	movw	r2, #514	; 0x202
    a0fe:	4293      	cmp	r3, r2
    a100:	d026      	beq.n	a150 <gpio_nrfx_pin_configure+0xec>
    a102:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    a106:	d025      	beq.n	a154 <gpio_nrfx_pin_configure+0xf0>
    a108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a10c:	d1d4      	bne.n	a0b8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    a10e:	2302      	movs	r3, #2
    a110:	e000      	b.n	a114 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    a112:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    a114:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    a118:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    a11c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    a120:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    a122:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    a126:	bf4c      	ite	mi
    a128:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    a12a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    a12e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    a130:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    a134:	d510      	bpl.n	a158 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    a136:	2301      	movs	r3, #1
    a138:	687a      	ldr	r2, [r7, #4]
    a13a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    a13c:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    a13e:	2200      	movs	r2, #0
    a140:	4628      	mov	r0, r5
    a142:	a901      	add	r1, sp, #4
    a144:	f001 f856 	bl	b1f4 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    a148:	4b0e      	ldr	r3, [pc, #56]	; (a184 <gpio_nrfx_pin_configure+0x120>)
    a14a:	4298      	cmp	r0, r3
    a14c:	d0a7      	beq.n	a09e <gpio_nrfx_pin_configure+0x3a>
    a14e:	e7b3      	b.n	a0b8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    a150:	2305      	movs	r3, #5
    a152:	e7df      	b.n	a114 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    a154:	2303      	movs	r3, #3
    a156:	e7dd      	b.n	a114 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    a158:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    a15a:	bf41      	itttt	mi
    a15c:	2301      	movmi	r3, #1
    a15e:	687a      	ldrmi	r2, [r7, #4]
    a160:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    a162:	60d3      	strmi	r3, [r2, #12]
}
    a164:	e7eb      	b.n	a13e <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    a166:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    a168:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    a16c:	bf4c      	ite	mi
    a16e:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    a170:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    a174:	461a      	mov	r2, r3
    a176:	4628      	mov	r0, r5
    a178:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    a17a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    a17e:	f000 ff8d 	bl	b09c <nrfx_gpiote_input_configure>
    a182:	e7e1      	b.n	a148 <gpio_nrfx_pin_configure+0xe4>
    a184:	0bad0000 	.word	0x0bad0000

0000a188 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    a188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a18c:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
    a18e:	4e3f      	ldr	r6, [pc, #252]	; (a28c <pinctrl_configure_pins+0x104>)
    a190:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    a194:	4281      	cmp	r1, r0
    a196:	d102      	bne.n	a19e <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    a198:	2000      	movs	r0, #0
}
    a19a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    a19e:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    a1a0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    a1a4:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
    a1a8:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    a1aa:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    a1ae:	bf08      	it	eq
    a1b0:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    a1b4:	2d19      	cmp	r5, #25
    a1b6:	d866      	bhi.n	a286 <pinctrl_configure_pins+0xfe>
    a1b8:	e8df f005 	tbb	[pc, r5]
    a1bc:	1e1b160d 	.word	0x1e1b160d
    a1c0:	651e2d21 	.word	0x651e2d21
    a1c4:	31656565 	.word	0x31656565
    a1c8:	65656551 	.word	0x65656551
    a1cc:	65656565 	.word	0x65656565
    a1d0:	5c546565 	.word	0x5c546565
    a1d4:	625f      	.short	0x625f
			NRF_PSEL_UART(reg, TXD) = pin;
    a1d6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    a1da:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a1de:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
    a1e2:	60b5      	str	r5, [r6, #8]
}
    a1e4:	2501      	movs	r5, #1
    a1e6:	e002      	b.n	a1ee <pinctrl_configure_pins+0x66>
			NRF_PSEL_UART(reg, RXD) = pin;
    a1e8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    a1ec:	2500      	movs	r5, #0
    a1ee:	46ac      	mov	ip, r5
    a1f0:	e01c      	b.n	a22c <pinctrl_configure_pins+0xa4>
			NRF_PSEL_UART(reg, RTS) = pin;
    a1f2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    a1f6:	e7f0      	b.n	a1da <pinctrl_configure_pins+0x52>
			NRF_PSEL_UART(reg, CTS) = pin;
    a1f8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    a1fc:	e7f6      	b.n	a1ec <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    a1fe:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    a200:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    a204:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    a208:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    a20c:	f8c6 c00c 	str.w	ip, [r6, #12]
}
    a210:	f04f 0c01 	mov.w	ip, #1
    a214:	e00a      	b.n	a22c <pinctrl_configure_pins+0xa4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    a216:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    a21a:	2501      	movs	r5, #1
    a21c:	e7f2      	b.n	a204 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    a21e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    a222:	2c00      	cmp	r4, #0
    a224:	d1e2      	bne.n	a1ec <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    a226:	2500      	movs	r5, #0
				drive = NRF_DRIVE_S0D1;
    a228:	2406      	movs	r4, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    a22a:	46ac      	mov	ip, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    a22c:	f850 eb04 	ldr.w	lr, [r0], #4
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    a230:	0224      	lsls	r4, r4, #8
    a232:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    a236:	f1b8 0f00 	cmp.w	r8, #0
    a23a:	bf1c      	itt	ne
    a23c:	f04f 0c00 	movne.w	ip, #0
    a240:	2501      	movne	r5, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    a242:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
    a246:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    *p_pin = pin_number & 0x1F;
    a24a:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    a24e:	ea44 040c 	orr.w	r4, r4, ip
    a252:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    a256:	3380      	adds	r3, #128	; 0x80
    a258:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    a25c:	e79a      	b.n	a194 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    a25e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    a262:	e7de      	b.n	a222 <pinctrl_configure_pins+0x9a>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    a264:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    a268:	6805      	ldr	r5, [r0, #0]
    a26a:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
    a26e:	2d00      	cmp	r5, #0
    a270:	d0d3      	beq.n	a21a <pinctrl_configure_pins+0x92>
    a272:	e7b2      	b.n	a1da <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    a274:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    a278:	e7f6      	b.n	a268 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    a27a:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    a27e:	e7f3      	b.n	a268 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    a280:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    a284:	e7f0      	b.n	a268 <pinctrl_configure_pins+0xe0>
		switch (NRF_GET_FUN(pins[i])) {
    a286:	f06f 0085 	mvn.w	r0, #133	; 0x85
    a28a:	e786      	b.n	a19a <pinctrl_configure_pins+0x12>
    a28c:	40842500 	.word	0x40842500

0000a290 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    a290:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    a292:	794b      	ldrb	r3, [r1, #5]
    a294:	2b01      	cmp	r3, #1
    a296:	d026      	beq.n	a2e6 <uarte_nrfx_configure+0x56>
    a298:	2b03      	cmp	r3, #3
    a29a:	d121      	bne.n	a2e0 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    a29c:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    a29e:	798b      	ldrb	r3, [r1, #6]
    a2a0:	2b03      	cmp	r3, #3
    a2a2:	d11d      	bne.n	a2e0 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    a2a4:	79ce      	ldrb	r6, [r1, #7]
    a2a6:	b10e      	cbz	r6, a2ac <uarte_nrfx_configure+0x1c>
    a2a8:	2e01      	cmp	r6, #1
    a2aa:	d119      	bne.n	a2e0 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    a2ac:	790a      	ldrb	r2, [r1, #4]
    a2ae:	b112      	cbz	r2, a2b6 <uarte_nrfx_configure+0x26>
    a2b0:	2a02      	cmp	r2, #2
    a2b2:	d115      	bne.n	a2e0 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    a2b4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    a2b6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    a2b8:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    a2ba:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    a2be:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    a2c0:	d067      	beq.n	a392 <uarte_nrfx_configure+0x102>
    a2c2:	d82d      	bhi.n	a320 <uarte_nrfx_configure+0x90>
    a2c4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    a2c8:	d066      	beq.n	a398 <uarte_nrfx_configure+0x108>
    a2ca:	d816      	bhi.n	a2fa <uarte_nrfx_configure+0x6a>
    a2cc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    a2d0:	d064      	beq.n	a39c <uarte_nrfx_configure+0x10c>
    a2d2:	d80a      	bhi.n	a2ea <uarte_nrfx_configure+0x5a>
    a2d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    a2d8:	d063      	beq.n	a3a2 <uarte_nrfx_configure+0x112>
    a2da:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    a2de:	d063      	beq.n	a3a8 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    a2e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    a2e4:	e054      	b.n	a390 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    a2e6:	2500      	movs	r5, #0
    a2e8:	e7d9      	b.n	a29e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    a2ea:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    a2ee:	d05e      	beq.n	a3ae <uarte_nrfx_configure+0x11e>
    a2f0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    a2f4:	d1f4      	bne.n	a2e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    a2f6:	4b38      	ldr	r3, [pc, #224]	; (a3d8 <uarte_nrfx_configure+0x148>)
    a2f8:	e03c      	b.n	a374 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a2fa:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    a2fe:	d059      	beq.n	a3b4 <uarte_nrfx_configure+0x124>
    a300:	d807      	bhi.n	a312 <uarte_nrfx_configure+0x82>
    a302:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    a306:	d057      	beq.n	a3b8 <uarte_nrfx_configure+0x128>
    a308:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    a30c:	d1e8      	bne.n	a2e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    a30e:	4b33      	ldr	r3, [pc, #204]	; (a3dc <uarte_nrfx_configure+0x14c>)
    a310:	e030      	b.n	a374 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a312:	f647 2412 	movw	r4, #31250	; 0x7a12
    a316:	42a3      	cmp	r3, r4
    a318:	d1e2      	bne.n	a2e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    a31a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    a31e:	e029      	b.n	a374 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a320:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    a324:	d04a      	beq.n	a3bc <uarte_nrfx_configure+0x12c>
    a326:	d813      	bhi.n	a350 <uarte_nrfx_configure+0xc0>
    a328:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    a32c:	d049      	beq.n	a3c2 <uarte_nrfx_configure+0x132>
    a32e:	d809      	bhi.n	a344 <uarte_nrfx_configure+0xb4>
    a330:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    a334:	42a3      	cmp	r3, r4
    a336:	d046      	beq.n	a3c6 <uarte_nrfx_configure+0x136>
    a338:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    a33c:	d1d0      	bne.n	a2e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    a33e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    a342:	e017      	b.n	a374 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a344:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    a348:	d1ca      	bne.n	a2e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    a34a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    a34e:	e011      	b.n	a374 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a350:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    a354:	d03a      	beq.n	a3cc <uarte_nrfx_configure+0x13c>
    a356:	d808      	bhi.n	a36a <uarte_nrfx_configure+0xda>
    a358:	4c21      	ldr	r4, [pc, #132]	; (a3e0 <uarte_nrfx_configure+0x150>)
    a35a:	42a3      	cmp	r3, r4
    a35c:	d039      	beq.n	a3d2 <uarte_nrfx_configure+0x142>
    a35e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    a362:	d1bd      	bne.n	a2e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    a364:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    a368:	e004      	b.n	a374 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a36a:	4c1e      	ldr	r4, [pc, #120]	; (a3e4 <uarte_nrfx_configure+0x154>)
    a36c:	42a3      	cmp	r3, r4
    a36e:	d1b7      	bne.n	a2e0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    a370:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    a374:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    a376:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    a37a:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    a37c:	4335      	orrs	r5, r6
    a37e:	681b      	ldr	r3, [r3, #0]
    a380:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    a382:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    a386:	1d23      	adds	r3, r4, #4
    a388:	c903      	ldmia	r1, {r0, r1}
    a38a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    a38e:	2000      	movs	r0, #0
}
    a390:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    a392:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    a396:	e7ed      	b.n	a374 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    a398:	4b13      	ldr	r3, [pc, #76]	; (a3e8 <uarte_nrfx_configure+0x158>)
    a39a:	e7eb      	b.n	a374 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    a39c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    a3a0:	e7e8      	b.n	a374 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    a3a2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    a3a6:	e7e5      	b.n	a374 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a3a8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    a3ac:	e7e2      	b.n	a374 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    a3ae:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    a3b2:	e7df      	b.n	a374 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    a3b4:	4b0d      	ldr	r3, [pc, #52]	; (a3ec <uarte_nrfx_configure+0x15c>)
    a3b6:	e7dd      	b.n	a374 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    a3b8:	4b0d      	ldr	r3, [pc, #52]	; (a3f0 <uarte_nrfx_configure+0x160>)
    a3ba:	e7db      	b.n	a374 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    a3bc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    a3c0:	e7d8      	b.n	a374 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    a3c2:	4b0c      	ldr	r3, [pc, #48]	; (a3f4 <uarte_nrfx_configure+0x164>)
    a3c4:	e7d6      	b.n	a374 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    a3c6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    a3ca:	e7d3      	b.n	a374 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    a3cc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    a3d0:	e7d0      	b.n	a374 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    a3d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    a3d6:	e7cd      	b.n	a374 <uarte_nrfx_configure+0xe4>
    a3d8:	0013b000 	.word	0x0013b000
    a3dc:	004ea000 	.word	0x004ea000
    a3e0:	0003d090 	.word	0x0003d090
    a3e4:	000f4240 	.word	0x000f4240
    a3e8:	00275000 	.word	0x00275000
    a3ec:	0075c000 	.word	0x0075c000
    a3f0:	003af000 	.word	0x003af000
    a3f4:	013a9000 	.word	0x013a9000

0000a3f8 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    a3f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a3fc:	4680      	mov	r8, r0
    a3fe:	2200      	movs	r2, #0
    a400:	2101      	movs	r1, #1
    a402:	2008      	movs	r0, #8
    a404:	f7fe ff86 	bl	9314 <z_arm_irq_priority_set>
    a408:	2008      	movs	r0, #8
    a40a:	f7fe ff67 	bl	92dc <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    a40e:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    a410:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    a414:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    a418:	683c      	ldr	r4, [r7, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    a41a:	aa01      	add	r2, sp, #4
    a41c:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    a420:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    a424:	f8d7 900c 	ldr.w	r9, [r7, #12]
    a428:	4648      	mov	r0, r9
    a42a:	f003 fff6 	bl	e41a <pinctrl_lookup_state>
	if (ret < 0) {
    a42e:	1e05      	subs	r5, r0, #0
    a430:	db4d      	blt.n	a4ce <uarte_0_init+0xd6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    a432:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    a434:	f8d9 2000 	ldr.w	r2, [r9]
    a438:	7919      	ldrb	r1, [r3, #4]
    a43a:	6818      	ldr	r0, [r3, #0]
    a43c:	f7ff fea4 	bl	a188 <pinctrl_configure_pins>
	if (err < 0) {
    a440:	1e05      	subs	r5, r0, #0
    a442:	db44      	blt.n	a4ce <uarte_0_init+0xd6>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    a444:	4640      	mov	r0, r8
    a446:	1d31      	adds	r1, r6, #4
    a448:	f7ff ff22 	bl	a290 <uarte_nrfx_configure>
	if (err) {
    a44c:	4605      	mov	r5, r0
    a44e:	2800      	cmp	r0, #0
    a450:	d13d      	bne.n	a4ce <uarte_0_init+0xd6>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    a452:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    a454:	0799      	lsls	r1, r3, #30
    a456:	d513      	bpl.n	a480 <uarte_0_init+0x88>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    a458:	f106 0018 	add.w	r0, r6, #24
    a45c:	f000 fd98 	bl	af90 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    a460:	4b1e      	ldr	r3, [pc, #120]	; (a4dc <uarte_0_init+0xe4>)
    a462:	4298      	cmp	r0, r3
    a464:	d137      	bne.n	a4d6 <uarte_0_init+0xde>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    a466:	7e33      	ldrb	r3, [r6, #24]
    a468:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a46c:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    a470:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    a474:	2301      	movs	r3, #1
    a476:	7e32      	ldrb	r2, [r6, #24]
    a478:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    a47a:	4a19      	ldr	r2, [pc, #100]	; (a4e0 <uarte_0_init+0xe8>)
    a47c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    a480:	2308      	movs	r3, #8
    a482:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    a486:	7a3b      	ldrb	r3, [r7, #8]
    a488:	b953      	cbnz	r3, a4a0 <uarte_0_init+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a48a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    a48e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    a492:	6973      	ldr	r3, [r6, #20]
    a494:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    a498:	2301      	movs	r3, #1
    a49a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a49e:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    a4a0:	687b      	ldr	r3, [r7, #4]
    a4a2:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    a4a4:	bf5c      	itt	pl
    a4a6:	f44f 7380 	movpl.w	r3, #256	; 0x100
    a4aa:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a4ae:	687b      	ldr	r3, [r7, #4]
    a4b0:	06db      	lsls	r3, r3, #27
    a4b2:	bf44      	itt	mi
    a4b4:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    a4b8:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a4bc:	6933      	ldr	r3, [r6, #16]
    a4be:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a4c2:	2300      	movs	r3, #0
    a4c4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a4c8:	2301      	movs	r3, #1
    a4ca:	60a3      	str	r3, [r4, #8]
    a4cc:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    a4ce:	4628      	mov	r0, r5
    a4d0:	b003      	add	sp, #12
    a4d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    a4d6:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    a4da:	e7f8      	b.n	a4ce <uarte_0_init+0xd6>
    a4dc:	0bad0000 	.word	0x0bad0000
    a4e0:	40017000 	.word	0x40017000

0000a4e4 <uarte_nrfx_poll_out>:
{
    a4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a4e6:	4604      	mov	r4, r0
    a4e8:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    a4ea:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    a4ec:	f004 faae 	bl	ea4c <k_is_in_isr>
    a4f0:	b9b0      	cbnz	r0, a520 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    a4f2:	4b2e      	ldr	r3, [pc, #184]	; (a5ac <uarte_nrfx_poll_out+0xc8>)
    a4f4:	781b      	ldrb	r3, [r3, #0]
    a4f6:	b19b      	cbz	r3, a520 <uarte_nrfx_poll_out+0x3c>
{
    a4f8:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    a4fa:	6860      	ldr	r0, [r4, #4]
    a4fc:	f003 ffc3 	bl	e486 <is_tx_ready.isra.0>
    a500:	bb00      	cbnz	r0, a544 <uarte_nrfx_poll_out+0x60>
    a502:	2001      	movs	r0, #1
    a504:	f004 f84f 	bl	e5a6 <nrfx_busy_wait>
    a508:	3e01      	subs	r6, #1
    a50a:	d1f6      	bne.n	a4fa <uarte_nrfx_poll_out+0x16>
    a50c:	2100      	movs	r1, #0
    a50e:	2021      	movs	r0, #33	; 0x21
    a510:	f002 fde6 	bl	d0e0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    a514:	e7f0      	b.n	a4f8 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    a516:	f386 8811 	msr	BASEPRI, r6
    a51a:	f3bf 8f6f 	isb	sy
}
    a51e:	e7f5      	b.n	a50c <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    a520:	f04f 0320 	mov.w	r3, #32
    a524:	f3ef 8611 	mrs	r6, BASEPRI
    a528:	f383 8812 	msr	BASEPRI_MAX, r3
    a52c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    a530:	6860      	ldr	r0, [r4, #4]
    a532:	4631      	mov	r1, r6
    a534:	f003 ffa7 	bl	e486 <is_tx_ready.isra.0>
    a538:	b990      	cbnz	r0, a560 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    a53a:	f386 8811 	msr	BASEPRI, r6
    a53e:	f3bf 8f6f 	isb	sy
}
    a542:	e7ed      	b.n	a520 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    a544:	f04f 0320 	mov.w	r3, #32
    a548:	f3ef 8611 	mrs	r6, BASEPRI
    a54c:	f383 8812 	msr	BASEPRI_MAX, r3
    a550:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    a554:	6860      	ldr	r0, [r4, #4]
    a556:	4631      	mov	r1, r6
    a558:	f003 ff95 	bl	e486 <is_tx_ready.isra.0>
    a55c:	2800      	cmp	r0, #0
    a55e:	d0da      	beq.n	a516 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    a560:	693b      	ldr	r3, [r7, #16]
    a562:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    a564:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a566:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    a568:	6813      	ldr	r3, [r2, #0]
    a56a:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a56e:	2001      	movs	r0, #1
    a570:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a574:	2000      	movs	r0, #0
    a576:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    a57a:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    a57e:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a582:	6852      	ldr	r2, [r2, #4]
    a584:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    a588:	06d2      	lsls	r2, r2, #27
    a58a:	d508      	bpl.n	a59e <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    a58c:	2008      	movs	r0, #8
	return config->uarte_regs;
    a58e:	6862      	ldr	r2, [r4, #4]
    a590:	6812      	ldr	r2, [r2, #0]
    a592:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    a596:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    a59a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a59e:	2201      	movs	r2, #1
    a5a0:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    a5a2:	f381 8811 	msr	BASEPRI, r1
    a5a6:	f3bf 8f6f 	isb	sy
}
    a5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a5ac:	2000cdeb 	.word	0x2000cdeb

0000a5b0 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    a5b0:	2301      	movs	r3, #1
    a5b2:	4083      	lsls	r3, r0
{
    a5b4:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    a5b6:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a5b8:	4a0b      	ldr	r2, [pc, #44]	; (a5e8 <compare_int_lock+0x38>)
    a5ba:	e8d2 1fef 	ldaex	r1, [r2]
    a5be:	ea01 0504 	and.w	r5, r1, r4
    a5c2:	e8c2 5fe6 	stlex	r6, r5, [r2]
    a5c6:	2e00      	cmp	r6, #0
    a5c8:	d1f7      	bne.n	a5ba <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a5ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    a5ce:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    a5d0:	4806      	ldr	r0, [pc, #24]	; (a5ec <compare_int_lock+0x3c>)
    a5d2:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    a5d6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a5da:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    a5de:	420b      	tst	r3, r1
}
    a5e0:	bf14      	ite	ne
    a5e2:	2001      	movne	r0, #1
    a5e4:	2000      	moveq	r0, #0
    a5e6:	bd70      	pop	{r4, r5, r6, pc}
    a5e8:	2000c8f0 	.word	0x2000c8f0
    a5ec:	40015000 	.word	0x40015000

0000a5f0 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    a5f0:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    a5f2:	490e      	ldr	r1, [pc, #56]	; (a62c <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    a5f4:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    a5f8:	e9d1 3400 	ldrd	r3, r4, [r1]
    a5fc:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    a5fe:	18c3      	adds	r3, r0, r3
    a600:	f144 0400 	adc.w	r4, r4, #0
    a604:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    a608:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    a60c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    a610:	d209      	bcs.n	a626 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    a612:	4b07      	ldr	r3, [pc, #28]	; (a630 <sys_clock_timeout_handler+0x40>)
    a614:	681b      	ldr	r3, [r3, #0]
    a616:	0a1a      	lsrs	r2, r3, #8
    a618:	061b      	lsls	r3, r3, #24
    a61a:	199c      	adds	r4, r3, r6
    a61c:	4b05      	ldr	r3, [pc, #20]	; (a634 <sys_clock_timeout_handler+0x44>)
    a61e:	f142 0500 	adc.w	r5, r2, #0
    a622:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    a626:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    a628:	f002 beb0 	b.w	d38c <sys_clock_announce>
    a62c:	2000c700 	.word	0x2000c700
    a630:	2000c8f4 	.word	0x2000c8f4
    a634:	2000c708 	.word	0x2000c708

0000a638 <compare_int_unlock>:
	if (key) {
    a638:	b1d9      	cbz	r1, a672 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    a63a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a63c:	4a0d      	ldr	r2, [pc, #52]	; (a674 <compare_int_unlock+0x3c>)
    a63e:	4083      	lsls	r3, r0
    a640:	e8d2 cfef 	ldaex	ip, [r2]
    a644:	ea4c 0c03 	orr.w	ip, ip, r3
    a648:	e8c2 cfe1 	stlex	r1, ip, [r2]
    a64c:	2900      	cmp	r1, #0
    a64e:	d1f7      	bne.n	a640 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    a654:	4a08      	ldr	r2, [pc, #32]	; (a678 <compare_int_unlock+0x40>)
    a656:	4083      	lsls	r3, r0
    a658:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a65c:	4b07      	ldr	r3, [pc, #28]	; (a67c <compare_int_unlock+0x44>)
    a65e:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    a662:	40c3      	lsrs	r3, r0
    a664:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a666:	bf42      	ittt	mi
    a668:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    a66c:	4b04      	ldrmi	r3, [pc, #16]	; (a680 <compare_int_unlock+0x48>)
    a66e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    a672:	4770      	bx	lr
    a674:	2000c8f0 	.word	0x2000c8f0
    a678:	40015000 	.word	0x40015000
    a67c:	2000c8ec 	.word	0x2000c8ec
    a680:	e000e100 	.word	0xe000e100

0000a684 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    a684:	4b0d      	ldr	r3, [pc, #52]	; (a6bc <z_nrf_rtc_timer_read+0x38>)
    a686:	6818      	ldr	r0, [r3, #0]
    a688:	0a01      	lsrs	r1, r0, #8
    a68a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    a68c:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    a690:	4b0b      	ldr	r3, [pc, #44]	; (a6c0 <z_nrf_rtc_timer_read+0x3c>)
    a692:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    a696:	1818      	adds	r0, r3, r0
    a698:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    a69c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    a6a0:	d20a      	bcs.n	a6b8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    a6a2:	4b08      	ldr	r3, [pc, #32]	; (a6c4 <z_nrf_rtc_timer_read+0x40>)
    a6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    a6a8:	4290      	cmp	r0, r2
    a6aa:	eb71 0303 	sbcs.w	r3, r1, r3
    a6ae:	d203      	bcs.n	a6b8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    a6b0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    a6b4:	f141 0100 	adc.w	r1, r1, #0
}
    a6b8:	4770      	bx	lr
    a6ba:	bf00      	nop
    a6bc:	2000c8f4 	.word	0x2000c8f4
    a6c0:	40015000 	.word	0x40015000
    a6c4:	2000c708 	.word	0x2000c708

0000a6c8 <compare_set>:
{
    a6c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6cc:	4616      	mov	r6, r2
    a6ce:	461f      	mov	r7, r3
    a6d0:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    a6d2:	f7ff ff6d 	bl	a5b0 <compare_int_lock>
    a6d6:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    a6d8:	f7ff ffd4 	bl	a684 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    a6dc:	42b0      	cmp	r0, r6
    a6de:	eb71 0307 	sbcs.w	r3, r1, r7
    a6e2:	d250      	bcs.n	a786 <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    a6e4:	4b38      	ldr	r3, [pc, #224]	; (a7c8 <compare_set+0x100>)
    a6e6:	1a30      	subs	r0, r6, r0
    a6e8:	eb67 0101 	sbc.w	r1, r7, r1
    a6ec:	4298      	cmp	r0, r3
    a6ee:	f171 0100 	sbcs.w	r1, r1, #0
    a6f2:	d265      	bcs.n	a7c0 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
    a6f4:	4b35      	ldr	r3, [pc, #212]	; (a7cc <compare_set+0x104>)
    a6f6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    a6fa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    a6fe:	429f      	cmp	r7, r3
    a700:	bf08      	it	eq
    a702:	4296      	cmpeq	r6, r2
    a704:	d049      	beq.n	a79a <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a706:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    a70a:	4931      	ldr	r1, [pc, #196]	; (a7d0 <compare_set+0x108>)
    a70c:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
    a710:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    a712:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    a716:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    a71a:	f003 fefe 	bl	e51a <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    a71e:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
    a722:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    a724:	f104 0550 	add.w	r5, r4, #80	; 0x50
    a728:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a72a:	b2ad      	uxth	r5, r5
    a72c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    a730:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    a734:	4a27      	ldr	r2, [pc, #156]	; (a7d4 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a736:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
    p_reg->CC[ch] = cc_val;
    a73a:	9301      	str	r3, [sp, #4]
    a73c:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    a740:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    a744:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
    a748:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    a74c:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    a750:	eba0 0008 	sub.w	r0, r0, r8
    a754:	3803      	subs	r0, #3
    a756:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    a75a:	4290      	cmp	r0, r2
    a75c:	d91d      	bls.n	a79a <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a75e:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    a760:	b160      	cbz	r0, a77c <compare_set+0xb4>
     return p_reg->COUNTER;
    a762:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    a766:	eba8 000b 	sub.w	r0, r8, fp
    a76a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    a76e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a772:	d912      	bls.n	a79a <compare_set+0xd2>
					event_clear(chan);
    a774:	4620      	mov	r0, r4
    a776:	f003 fed0 	bl	e51a <event_clear>
    a77a:	4a16      	ldr	r2, [pc, #88]	; (a7d4 <compare_set+0x10c>)
			cc_val = now + cc_inc;
    a77c:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
    a780:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    a784:	e7da      	b.n	a73c <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    a786:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a788:	4a13      	ldr	r2, [pc, #76]	; (a7d8 <compare_set+0x110>)
    a78a:	40a3      	lsls	r3, r4
    a78c:	e8d2 0fef 	ldaex	r0, [r2]
    a790:	4318      	orrs	r0, r3
    a792:	e8c2 0fe1 	stlex	r1, r0, [r2]
    a796:	2900      	cmp	r1, #0
    a798:	d1f8      	bne.n	a78c <compare_set+0xc4>
	return ret;
    a79a:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
    a79c:	490b      	ldr	r1, [pc, #44]	; (a7cc <compare_set+0x104>)
	cc_data[chan].callback = handler;
    a79e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    a7a0:	0123      	lsls	r3, r4, #4
    a7a2:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
    a7a6:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    a7a8:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
    a7ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a7ae:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    a7b0:	4620      	mov	r0, r4
    a7b2:	9900      	ldr	r1, [sp, #0]
    a7b4:	f7ff ff40 	bl	a638 <compare_int_unlock>
}
    a7b8:	4628      	mov	r0, r5
    a7ba:	b003      	add	sp, #12
    a7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    a7c0:	f06f 0515 	mvn.w	r5, #21
    a7c4:	e7f4      	b.n	a7b0 <compare_set+0xe8>
    a7c6:	bf00      	nop
    a7c8:	00800001 	.word	0x00800001
    a7cc:	2000c6f0 	.word	0x2000c6f0
    a7d0:	40015000 	.word	0x40015000
    a7d4:	007ffffd 	.word	0x007ffffd
    a7d8:	2000c8ec 	.word	0x2000c8ec

0000a7dc <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    a7dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    a7de:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    a7e0:	f04f 30ff 	mov.w	r0, #4294967295
    a7e4:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->INTENCLR = mask;
    a7e8:	4c18      	ldr	r4, [pc, #96]	; (a84c <sys_clock_driver_init+0x70>)
    a7ea:	4b19      	ldr	r3, [pc, #100]	; (a850 <sys_clock_driver_init+0x74>)
    p_reg->INTENSET = mask;
    a7ec:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
    a7ee:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    a7f2:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    a7f6:	4b17      	ldr	r3, [pc, #92]	; (a854 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    a7f8:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    a7fc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    a800:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a804:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    a808:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    a80c:	4b12      	ldr	r3, [pc, #72]	; (a858 <sys_clock_driver_init+0x7c>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    a80e:	2101      	movs	r1, #1
    a810:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    a814:	2015      	movs	r0, #21
    a816:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    a81a:	462a      	mov	r2, r5
    a81c:	f7fe fd7a 	bl	9314 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    a820:	2015      	movs	r0, #21
    a822:	f7fe fd5b 	bl	92dc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    a826:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    a828:	4a0c      	ldr	r2, [pc, #48]	; (a85c <sys_clock_driver_init+0x80>)
    a82a:	60a3      	str	r3, [r4, #8]
    a82c:	6023      	str	r3, [r4, #0]
    a82e:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    a830:	4b0b      	ldr	r3, [pc, #44]	; (a860 <sys_clock_driver_init+0x84>)
    a832:	4a0c      	ldr	r2, [pc, #48]	; (a864 <sys_clock_driver_init+0x88>)
    a834:	9300      	str	r3, [sp, #0]
    a836:	4628      	mov	r0, r5
    a838:	2300      	movs	r3, #0
    a83a:	9501      	str	r5, [sp, #4]
    a83c:	f7ff ff44 	bl	a6c8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    a840:	4630      	mov	r0, r6
    a842:	f7ff facd 	bl	9de0 <z_nrf_clock_control_lf_on>

	return 0;
}
    a846:	4628      	mov	r0, r5
    a848:	b002      	add	sp, #8
    a84a:	bd70      	pop	{r4, r5, r6, pc}
    a84c:	40015000 	.word	0x40015000
    a850:	000f0003 	.word	0x000f0003
    a854:	2000c6f0 	.word	0x2000c6f0
    a858:	e000e100 	.word	0xe000e100
    a85c:	2000c8f0 	.word	0x2000c8f0
    a860:	0000a5f1 	.word	0x0000a5f1
    a864:	007fffff 	.word	0x007fffff

0000a868 <rtc_nrf_isr>:
{
    a868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    a86c:	4b2e      	ldr	r3, [pc, #184]	; (a928 <rtc_nrf_isr+0xc0>)
    a86e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    a872:	0790      	lsls	r0, r2, #30
    a874:	d50b      	bpl.n	a88e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a876:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    a87a:	b142      	cbz	r2, a88e <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a87c:	2200      	movs	r2, #0
    a87e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    a882:	4a2a      	ldr	r2, [pc, #168]	; (a92c <rtc_nrf_isr+0xc4>)
    a884:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    a888:	6813      	ldr	r3, [r2, #0]
    a88a:	3301      	adds	r3, #1
    a88c:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    a88e:	4a26      	ldr	r2, [pc, #152]	; (a928 <rtc_nrf_isr+0xc0>)
    a890:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    a894:	03d9      	lsls	r1, r3, #15
    a896:	d527      	bpl.n	a8e8 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a898:	4b25      	ldr	r3, [pc, #148]	; (a930 <rtc_nrf_isr+0xc8>)
    a89a:	e8d3 1fef 	ldaex	r1, [r3]
    a89e:	f021 0001 	bic.w	r0, r1, #1
    a8a2:	e8c3 0fe4 	stlex	r4, r0, [r3]
    a8a6:	2c00      	cmp	r4, #0
    a8a8:	d1f7      	bne.n	a89a <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    a8aa:	07cb      	lsls	r3, r1, #31
    a8ac:	d402      	bmi.n	a8b4 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a8ae:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    a8b2:	b1cb      	cbz	r3, a8e8 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a8b4:	2500      	movs	r5, #0
    a8b6:	4c1c      	ldr	r4, [pc, #112]	; (a928 <rtc_nrf_isr+0xc0>)
    a8b8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    a8bc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    a8c0:	f7ff fee0 	bl	a684 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    a8c4:	f04f 0320 	mov.w	r3, #32
    a8c8:	f3ef 8211 	mrs	r2, BASEPRI
    a8cc:	f383 8812 	msr	BASEPRI_MAX, r3
    a8d0:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    a8d4:	4b17      	ldr	r3, [pc, #92]	; (a934 <rtc_nrf_isr+0xcc>)
    a8d6:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    a8da:	42b0      	cmp	r0, r6
    a8dc:	41b9      	sbcs	r1, r7
    a8de:	d206      	bcs.n	a8ee <rtc_nrf_isr+0x86>
	__asm__ volatile(
    a8e0:	f382 8811 	msr	BASEPRI, r2
    a8e4:	f3bf 8f6f 	isb	sy
}
    a8e8:	b003      	add	sp, #12
    a8ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    a8ee:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
    a8f2:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    a8f6:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
    a8fa:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    a8fc:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    a900:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    a904:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a908:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    a90c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    a910:	f382 8811 	msr	BASEPRI, r2
    a914:	f3bf 8f6f 	isb	sy
		if (handler) {
    a918:	2900      	cmp	r1, #0
    a91a:	d0e5      	beq.n	a8e8 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
    a91c:	9000      	str	r0, [sp, #0]
    a91e:	4632      	mov	r2, r6
    a920:	463b      	mov	r3, r7
    a922:	4628      	mov	r0, r5
    a924:	4788      	blx	r1
    a926:	e7df      	b.n	a8e8 <rtc_nrf_isr+0x80>
    a928:	40015000 	.word	0x40015000
    a92c:	2000c8f4 	.word	0x2000c8f4
    a930:	2000c8ec 	.word	0x2000c8ec
    a934:	2000c6f0 	.word	0x2000c6f0

0000a938 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    a938:	1c43      	adds	r3, r0, #1
{
    a93a:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    a93c:	d021      	beq.n	a982 <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    a93e:	2801      	cmp	r0, #1
    a940:	dd21      	ble.n	a986 <sys_clock_set_timeout+0x4e>
    a942:	4a12      	ldr	r2, [pc, #72]	; (a98c <sys_clock_set_timeout+0x54>)
    a944:	4b12      	ldr	r3, [pc, #72]	; (a990 <sys_clock_set_timeout+0x58>)
    a946:	4290      	cmp	r0, r2
    a948:	bfd4      	ite	le
    a94a:	4604      	movle	r4, r0
    a94c:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    a94e:	f7ff fe99 	bl	a684 <z_nrf_rtc_timer_read>
    a952:	4b10      	ldr	r3, [pc, #64]	; (a994 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    a954:	490e      	ldr	r1, [pc, #56]	; (a990 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    a956:	e9d3 2300 	ldrd	r2, r3, [r3]
    a95a:	1a80      	subs	r0, r0, r2
		cyc = 0;
    a95c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a960:	bf28      	it	cs
    a962:	2400      	movcs	r4, #0
	cyc += unannounced;
    a964:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    a966:	428c      	cmp	r4, r1
    a968:	bf28      	it	cs
    a96a:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    a96c:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    a96e:	490a      	ldr	r1, [pc, #40]	; (a998 <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
    a970:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    a972:	9001      	str	r0, [sp, #4]
    a974:	9100      	str	r1, [sp, #0]
    a976:	f143 0300 	adc.w	r3, r3, #0
    a97a:	f7ff fea5 	bl	a6c8 <compare_set>
}
    a97e:	b002      	add	sp, #8
    a980:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    a982:	4c03      	ldr	r4, [pc, #12]	; (a990 <sys_clock_set_timeout+0x58>)
    a984:	e7e3      	b.n	a94e <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    a986:	2401      	movs	r4, #1
    a988:	e7e1      	b.n	a94e <sys_clock_set_timeout+0x16>
    a98a:	bf00      	nop
    a98c:	007ffffe 	.word	0x007ffffe
    a990:	007fffff 	.word	0x007fffff
    a994:	2000c700 	.word	0x2000c700
    a998:	0000a5f1 	.word	0x0000a5f1

0000a99c <sys_clock_elapsed>:
{
    a99c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    a99e:	f7ff fe71 	bl	a684 <z_nrf_rtc_timer_read>
    a9a2:	4b02      	ldr	r3, [pc, #8]	; (a9ac <sys_clock_elapsed+0x10>)
    a9a4:	681b      	ldr	r3, [r3, #0]
}
    a9a6:	1ac0      	subs	r0, r0, r3
    a9a8:	bd08      	pop	{r3, pc}
    a9aa:	bf00      	nop
    a9ac:	2000c700 	.word	0x2000c700

0000a9b0 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
    a9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
    a9b2:	4b0f      	ldr	r3, [pc, #60]	; (a9f0 <thread_monitor_entry_get+0x40>)
{
    a9b4:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
    a9b6:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
    a9b8:	4b0e      	ldr	r3, [pc, #56]	; (a9f4 <thread_monitor_entry_get+0x44>)
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    a9ba:	250b      	movs	r5, #11
	int entry_age, oldest_entry_age = 0;
    a9bc:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
    a9be:	4618      	mov	r0, r3
    a9c0:	461f      	mov	r7, r3
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    a9c2:	42b8      	cmp	r0, r7
    a9c4:	d301      	bcc.n	a9ca <thread_monitor_entry_get+0x1a>
    a9c6:	3d01      	subs	r5, #1
    a9c8:	d104      	bne.n	a9d4 <thread_monitor_entry_get+0x24>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
    a9ca:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
    a9cc:	3a01      	subs	r2, #1
	new_entry->id = id;
    a9ce:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
    a9d0:	605a      	str	r2, [r3, #4]
}
    a9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (entry->id == id) {
    a9d4:	6804      	ldr	r4, [r0, #0]
    a9d6:	428c      	cmp	r4, r1
    a9d8:	d0fb      	beq.n	a9d2 <thread_monitor_entry_get+0x22>
		} else if (entry->id == 0) {
    a9da:	b13c      	cbz	r4, a9ec <thread_monitor_entry_get+0x3c>
		entry_age = rpc_event_cnt - entry->cnt;
    a9dc:	6844      	ldr	r4, [r0, #4]
    a9de:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
    a9e0:	42a6      	cmp	r6, r4
    a9e2:	bfbc      	itt	lt
    a9e4:	4603      	movlt	r3, r0
    a9e6:	4626      	movlt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    a9e8:	3008      	adds	r0, #8
    a9ea:	e7ea      	b.n	a9c2 <thread_monitor_entry_get+0x12>
    a9ec:	4603      	mov	r3, r0
    a9ee:	e7ec      	b.n	a9ca <thread_monitor_entry_get+0x1a>
    a9f0:	2000c968 	.word	0x2000c968
    a9f4:	2000c974 	.word	0x2000c974

0000a9f8 <on_init>:
	list->head = NULL;
    a9f8:	2000      	movs	r0, #0
    a9fa:	4b05      	ldr	r3, [pc, #20]	; (aa10 <on_init+0x18>)
	list->tail = NULL;
    a9fc:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    aa00:	4b04      	ldr	r3, [pc, #16]	; (aa14 <on_init+0x1c>)
    aa02:	e8d3 2fef 	ldaex	r2, [r3]
    aa06:	e8c3 0fe1 	stlex	r1, r0, [r3]
    aa0a:	2900      	cmp	r1, #0
    aa0c:	d1f9      	bne.n	aa02 <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
    aa0e:	4770      	bx	lr
    aa10:	2000c96c 	.word	0x2000c96c
    aa14:	2000c968 	.word	0x2000c968

0000aa18 <nrf_modem_os_timedwait>:
{
    aa18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aa1c:	b086      	sub	sp, #24
    aa1e:	4605      	mov	r5, r0
    aa20:	460e      	mov	r6, r1
	if (!nrf_modem_is_initialized()) {
    aa22:	f003 ff6a 	bl	e8fa <nrf_modem_is_initialized>
    aa26:	b920      	cbnz	r0, aa32 <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
    aa28:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
    aa2c:	b006      	add	sp, #24
    aa2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
    aa32:	f004 f920 	bl	ec76 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
    aa36:	6833      	ldr	r3, [r6, #0]
    aa38:	4604      	mov	r4, r0
    aa3a:	2b00      	cmp	r3, #0
    aa3c:	460f      	mov	r7, r1
    aa3e:	d104      	bne.n	aa4a <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
    aa40:	f002 facc 	bl	cfdc <z_impl_k_yield>
		return -NRF_EAGAIN;
    aa44:	f06f 000a 	mvn.w	r0, #10
    aa48:	e7f0      	b.n	aa2c <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
    aa4a:	bfbc      	itt	lt
    aa4c:	f04f 33ff 	movlt.w	r3, #4294967295
    aa50:	6033      	strlt	r3, [r6, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    aa52:	2201      	movs	r2, #1
    aa54:	2100      	movs	r1, #0
    aa56:	a801      	add	r0, sp, #4
    aa58:	f004 f80d 	bl	ea76 <z_impl_k_sem_init>
    aa5c:	46e8      	mov	r8, sp
	thread->context = context;
    aa5e:	9505      	str	r5, [sp, #20]
	__asm__ volatile(
    aa60:	f04f 0320 	mov.w	r3, #32
    aa64:	f3ef 8a11 	mrs	sl, BASEPRI
    aa68:	f383 8812 	msr	BASEPRI_MAX, r3
    aa6c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    aa70:	f002 fb50 	bl	d114 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    aa74:	f7ff ff9c 	bl	a9b0 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
    aa78:	f8df 9118 	ldr.w	r9, [pc, #280]	; ab94 <nrf_modem_os_timedwait+0x17c>
    aa7c:	6842      	ldr	r2, [r0, #4]
    aa7e:	f8d9 3000 	ldr.w	r3, [r9]
    aa82:	429a      	cmp	r2, r3
    aa84:	d16d      	bne.n	ab62 <nrf_modem_os_timedwait+0x14a>
	parent->next = child;
    aa86:	2300      	movs	r3, #0
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    aa88:	4d43      	ldr	r5, [pc, #268]	; (ab98 <nrf_modem_os_timedwait+0x180>)
	parent->next = child;
    aa8a:	9300      	str	r3, [sp, #0]
	return list->tail;
    aa8c:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    aa8e:	2b00      	cmp	r3, #0
    aa90:	d16e      	bne.n	ab70 <nrf_modem_os_timedwait+0x158>
	list->head = node;
    aa92:	e9c5 8800 	strd	r8, r8, [r5]
	__asm__ volatile(
    aa96:	f38a 8811 	msr	BASEPRI, sl
    aa9a:	f3bf 8f6f 	isb	sy
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
    aa9e:	6833      	ldr	r3, [r6, #0]
    aaa0:	1c5a      	adds	r2, r3, #1
    aaa2:	d06a      	beq.n	ab7a <nrf_modem_os_timedwait+0x162>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    aaa4:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    aaa8:	f240 30e7 	movw	r0, #999	; 0x3e7
    aaac:	2100      	movs	r1, #0
    aaae:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
    aab2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    aab6:	2300      	movs	r3, #0
    aab8:	fbcc 010e 	smlal	r0, r1, ip, lr
    aabc:	f7fd fb42 	bl	8144 <__aeabi_uldivmod>
    aac0:	4602      	mov	r2, r0
    aac2:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    aac4:	a801      	add	r0, sp, #4
    aac6:	f002 f821 	bl	cb0c <z_impl_k_sem_take>
	__asm__ volatile(
    aaca:	f04f 0320 	mov.w	r3, #32
    aace:	f3ef 8a11 	mrs	sl, BASEPRI
    aad2:	f383 8812 	msr	BASEPRI_MAX, r3
    aad6:	f3bf 8f6f 	isb	sy
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    aada:	2200      	movs	r2, #0
	return list->head;
    aadc:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    aade:	b15b      	cbz	r3, aaf8 <nrf_modem_os_timedwait+0xe0>
    aae0:	4543      	cmp	r3, r8
    aae2:	d154      	bne.n	ab8e <nrf_modem_os_timedwait+0x176>
	return node->next;
    aae4:	9900      	ldr	r1, [sp, #0]
Z_GENLIST_REMOVE(slist, snode)
    aae6:	2a00      	cmp	r2, #0
    aae8:	d14b      	bne.n	ab82 <nrf_modem_os_timedwait+0x16a>
    aaea:	686a      	ldr	r2, [r5, #4]
	list->head = node;
    aaec:	6029      	str	r1, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
    aaee:	429a      	cmp	r2, r3
    aaf0:	d100      	bne.n	aaf4 <nrf_modem_os_timedwait+0xdc>
	list->tail = node;
    aaf2:	6069      	str	r1, [r5, #4]
	parent->next = child;
    aaf4:	2300      	movs	r3, #0
    aaf6:	9300      	str	r3, [sp, #0]
	return z_impl_z_current_get();
    aaf8:	f002 fb0c 	bl	d114 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    aafc:	f7ff ff58 	bl	a9b0 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
    ab00:	f8d9 3000 	ldr.w	r3, [r9]
    ab04:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
    ab06:	f38a 8811 	msr	BASEPRI, sl
    ab0a:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
    ab0e:	f003 fef4 	bl	e8fa <nrf_modem_is_initialized>
    ab12:	2800      	cmp	r0, #0
    ab14:	d088      	beq.n	aa28 <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
    ab16:	6835      	ldr	r5, [r6, #0]
    ab18:	1c6b      	adds	r3, r5, #1
    ab1a:	d027      	beq.n	ab6c <nrf_modem_os_timedwait+0x154>
	return z_impl_k_uptime_ticks();
    ab1c:	f004 f8ab 	bl	ec76 <z_impl_k_uptime_ticks>
    ab20:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
    ab24:	fba0 320e 	umull	r3, r2, r0, lr
    ab28:	fb0e 2101 	mla	r1, lr, r1, r2
    ab2c:	fba4 420e 	umull	r4, r2, r4, lr
    ab30:	fb0e 2207 	mla	r2, lr, r7, r2
    ab34:	0bdb      	lsrs	r3, r3, #15
    ab36:	0be4      	lsrs	r4, r4, #15
    ab38:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    ab3c:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
	delta = uptime - *reftime;
    ab40:	1b1b      	subs	r3, r3, r4
    ab42:	ea4f 31d1 	mov.w	r1, r1, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
    ab46:	ea4f 7ce5 	mov.w	ip, r5, asr #31
    ab4a:	eb61 31d2 	sbc.w	r1, r1, r2, lsr #15
    ab4e:	1aed      	subs	r5, r5, r3
    ab50:	eb6c 0c01 	sbc.w	ip, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
    ab54:	f1bc 0f00 	cmp.w	ip, #0
    ab58:	bfb8      	it	lt
    ab5a:	2500      	movlt	r5, #0
    ab5c:	6035      	str	r5, [r6, #0]
	if (*timeout == 0) {
    ab5e:	b92d      	cbnz	r5, ab6c <nrf_modem_os_timedwait+0x154>
    ab60:	e770      	b.n	aa44 <nrf_modem_os_timedwait+0x2c>
	entry->cnt = rpc_event_cnt;
    ab62:	6043      	str	r3, [r0, #4]
    ab64:	f38a 8811 	msr	BASEPRI, sl
    ab68:	f3bf 8f6f 	isb	sy
		return 0;
    ab6c:	2000      	movs	r0, #0
    ab6e:	e75d      	b.n	aa2c <nrf_modem_os_timedwait+0x14>
    ab70:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
    ab74:	f8c5 8004 	str.w	r8, [r5, #4]
    ab78:	e78d      	b.n	aa96 <nrf_modem_os_timedwait+0x7e>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
    ab7a:	f04f 32ff 	mov.w	r2, #4294967295
    ab7e:	4613      	mov	r3, r2
    ab80:	e7a0      	b.n	aac4 <nrf_modem_os_timedwait+0xac>
	parent->next = child;
    ab82:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    ab84:	6869      	ldr	r1, [r5, #4]
    ab86:	4299      	cmp	r1, r3
	list->tail = node;
    ab88:	bf08      	it	eq
    ab8a:	606a      	streq	r2, [r5, #4]
}
    ab8c:	e7b2      	b.n	aaf4 <nrf_modem_os_timedwait+0xdc>
	return node->next;
    ab8e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ab90:	681b      	ldr	r3, [r3, #0]
    ab92:	e7a4      	b.n	aade <nrf_modem_os_timedwait+0xc6>
    ab94:	2000c968 	.word	0x2000c968
    ab98:	2000c96c 	.word	0x2000c96c

0000ab9c <nrf_modem_os_sem_init>:
{
    ab9c:	b470      	push	{r4, r5, r6}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
    ab9e:	6804      	ldr	r4, [r0, #0]
    aba0:	4b09      	ldr	r3, [pc, #36]	; (abc8 <nrf_modem_os_sem_init+0x2c>)
    aba2:	b12c      	cbz	r4, abb0 <nrf_modem_os_sem_init+0x14>
    aba4:	429c      	cmp	r4, r3
    aba6:	d303      	bcc.n	abb0 <nrf_modem_os_sem_init+0x14>
    aba8:	f103 0570 	add.w	r5, r3, #112	; 0x70
    abac:	42ac      	cmp	r4, r5
    abae:	d306      	bcc.n	abbe <nrf_modem_os_sem_init+0x22>
	*sem = &nrf_modem_os_sems[used++];
    abb0:	4d06      	ldr	r5, [pc, #24]	; (abcc <nrf_modem_os_sem_init+0x30>)
    abb2:	782c      	ldrb	r4, [r5, #0]
    abb4:	1c66      	adds	r6, r4, #1
    abb6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    abba:	702e      	strb	r6, [r5, #0]
    abbc:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
    abbe:	6800      	ldr	r0, [r0, #0]
}
    abc0:	bc70      	pop	{r4, r5, r6}
	return z_impl_k_sem_init(sem, initial_count, limit);
    abc2:	f003 bf58 	b.w	ea76 <z_impl_k_sem_init>
    abc6:	bf00      	nop
    abc8:	2000c8f8 	.word	0x2000c8f8
    abcc:	2000cddf 	.word	0x2000cddf

0000abd0 <nrf_modem_os_event_notify>:
{
    abd0:	b538      	push	{r3, r4, r5, lr}
    abd2:	4605      	mov	r5, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    abd4:	4b0a      	ldr	r3, [pc, #40]	; (ac00 <nrf_modem_os_event_notify+0x30>)
    abd6:	e8d3 1fef 	ldaex	r1, [r3]
    abda:	3101      	adds	r1, #1
    abdc:	e8c3 1fe2 	stlex	r2, r1, [r3]
    abe0:	2a00      	cmp	r2, #0
    abe2:	d1f8      	bne.n	abd6 <nrf_modem_os_event_notify+0x6>
	return list->head;
    abe4:	4b07      	ldr	r3, [pc, #28]	; (ac04 <nrf_modem_os_event_notify+0x34>)
    abe6:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    abe8:	b904      	cbnz	r4, abec <nrf_modem_os_event_notify+0x1c>
}
    abea:	bd38      	pop	{r3, r4, r5, pc}
		if ((thread->context == context) || (context == 0)) {
    abec:	6963      	ldr	r3, [r4, #20]
    abee:	42ab      	cmp	r3, r5
    abf0:	d000      	beq.n	abf4 <nrf_modem_os_event_notify+0x24>
    abf2:	b915      	cbnz	r5, abfa <nrf_modem_os_event_notify+0x2a>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    abf4:	1d20      	adds	r0, r4, #4
    abf6:	f001 ff69 	bl	cacc <z_impl_k_sem_give>
	return node->next;
    abfa:	6824      	ldr	r4, [r4, #0]
    abfc:	e7f4      	b.n	abe8 <nrf_modem_os_event_notify+0x18>
    abfe:	bf00      	nop
    ac00:	2000c968 	.word	0x2000c968
    ac04:	2000c96c 	.word	0x2000c96c

0000ac08 <nrf_modem_os_alloc>:
{
    ac08:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
    ac0a:	2200      	movs	r2, #0
    ac0c:	2300      	movs	r3, #0
    ac0e:	4801      	ldr	r0, [pc, #4]	; (ac14 <nrf_modem_os_alloc+0xc>)
    ac10:	f003 bef5 	b.w	e9fe <k_heap_alloc>
    ac14:	2000c9c4 	.word	0x2000c9c4

0000ac18 <nrf_modem_os_free>:
{
    ac18:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_heap, mem);
    ac1a:	4801      	ldr	r0, [pc, #4]	; (ac20 <nrf_modem_os_free+0x8>)
    ac1c:	f003 bef9 	b.w	ea12 <k_heap_free>
    ac20:	2000c9c4 	.word	0x2000c9c4

0000ac24 <nrf_modem_os_shm_tx_alloc>:
{
    ac24:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
    ac26:	2200      	movs	r2, #0
    ac28:	2300      	movs	r3, #0
    ac2a:	4801      	ldr	r0, [pc, #4]	; (ac30 <nrf_modem_os_shm_tx_alloc+0xc>)
    ac2c:	f003 bee7 	b.w	e9fe <k_heap_alloc>
    ac30:	2000c9d8 	.word	0x2000c9d8

0000ac34 <nrf_modem_os_shm_tx_free>:
{
    ac34:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
    ac36:	4801      	ldr	r0, [pc, #4]	; (ac3c <nrf_modem_os_shm_tx_free+0x8>)
    ac38:	f003 beeb 	b.w	ea12 <k_heap_free>
    ac3c:	2000c9d8 	.word	0x2000c9d8

0000ac40 <on_modem_lib_init>:
LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
{
    ac40:	b508      	push	{r3, lr}
	int err;

	if (ret != 0) {
    ac42:	b948      	cbnz	r0, ac58 <on_modem_lib_init+0x18>
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
    ac44:	4905      	ldr	r1, [pc, #20]	; (ac5c <on_modem_lib_init+0x1c>)
    ac46:	4806      	ldr	r0, [pc, #24]	; (ac60 <on_modem_lib_init+0x20>)
    ac48:	f001 f904 	bl	be54 <nrf_modem_at_printf>
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		if (err) {
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
		}
	}
}
    ac4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
    ac50:	4904      	ldr	r1, [pc, #16]	; (ac64 <on_modem_lib_init+0x24>)
    ac52:	4803      	ldr	r0, [pc, #12]	; (ac60 <on_modem_lib_init+0x20>)
    ac54:	f001 b8fe 	b.w	be54 <nrf_modem_at_printf>
}
    ac58:	bd08      	pop	{r3, pc}
    ac5a:	bf00      	nop
    ac5c:	0000f88b 	.word	0x0000f88b
    ac60:	0000f8aa 	.word	0x0000f8aa
    ac64:	0000f8ad 	.word	0x0000f8ad

0000ac68 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
    ac68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac6c:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
    ac6e:	4b15      	ldr	r3, [pc, #84]	; (acc4 <tfm_ns_interface_dispatch+0x5c>)
    ac70:	4604      	mov	r4, r0
    ac72:	f893 8000 	ldrb.w	r8, [r3]
    ac76:	460d      	mov	r5, r1
    ac78:	4616      	mov	r6, r2
    ac7a:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();
	int tfm_ns_saved_prio;

	if (!is_pre_kernel) {
    ac7c:	f1b8 0f00 	cmp.w	r8, #0
    ac80:	d115      	bne.n	acae <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
    ac82:	4668      	mov	r0, sp
    ac84:	f003 faa2 	bl	e1cc <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
    ac88:	463a      	mov	r2, r7
    ac8a:	4631      	mov	r1, r6
    ac8c:	4628      	mov	r0, r5
    ac8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    ac90:	47a0      	blx	r4
    ac92:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
    ac94:	4668      	mov	r0, sp
    ac96:	f003 fa9a 	bl	e1ce <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
    ac9a:	f1b8 0f00 	cmp.w	r8, #0
    ac9e:	d002      	beq.n	aca6 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
    aca0:	4809      	ldr	r0, [pc, #36]	; (acc8 <tfm_ns_interface_dispatch+0x60>)
    aca2:	f001 fed7 	bl	ca54 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
    aca6:	4620      	mov	r0, r4
    aca8:	b022      	add	sp, #136	; 0x88
    acaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
    acae:	f04f 32ff 	mov.w	r2, #4294967295
    acb2:	f04f 33ff 	mov.w	r3, #4294967295
    acb6:	4804      	ldr	r0, [pc, #16]	; (acc8 <tfm_ns_interface_dispatch+0x60>)
    acb8:	f001 fe52 	bl	c960 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
    acbc:	2800      	cmp	r0, #0
    acbe:	d0e0      	beq.n	ac82 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
    acc0:	241f      	movs	r4, #31
    acc2:	e7f0      	b.n	aca6 <tfm_ns_interface_dispatch+0x3e>
    acc4:	2000cdeb 	.word	0x2000cdeb
    acc8:	2000c6d8 	.word	0x2000c6d8

0000accc <psa_generate_random>:
    return API_DISPATCH_NO_OUTVEC(in_vec);
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
    accc:	b570      	push	{r4, r5, r6, lr}
    struct tfm_crypto_pack_iovec iov = {
    acce:	2630      	movs	r6, #48	; 0x30
{
    acd0:	b092      	sub	sp, #72	; 0x48
    struct tfm_crypto_pack_iovec iov = {
    acd2:	ab06      	add	r3, sp, #24
{
    acd4:	4605      	mov	r5, r0
    acd6:	460c      	mov	r4, r1
    struct tfm_crypto_pack_iovec iov = {
    acd8:	4632      	mov	r2, r6
    acda:	2100      	movs	r1, #0
    acdc:	4618      	mov	r0, r3
    acde:	f004 f800 	bl	ece2 <memset>

    psa_invec in_vec[] = {
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
    ace2:	e9cd 5404 	strd	r5, r4, [sp, #16]
    psa_invec in_vec[] = {
    ace6:	e9cd 0602 	strd	r0, r6, [sp, #8]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
    acea:	b154      	cbz	r4, ad02 <psa_generate_random+0x36>
        return PSA_SUCCESS;
    }

    return API_DISPATCH(in_vec, out_vec);
    acec:	2301      	movs	r3, #1
    acee:	aa04      	add	r2, sp, #16
    acf0:	9200      	str	r2, [sp, #0]
    acf2:	2100      	movs	r1, #0
    acf4:	4804      	ldr	r0, [pc, #16]	; (ad08 <psa_generate_random+0x3c>)
    acf6:	9301      	str	r3, [sp, #4]
    acf8:	aa02      	add	r2, sp, #8
    acfa:	f000 f807 	bl	ad0c <psa_call>
}
    acfe:	b012      	add	sp, #72	; 0x48
    ad00:	bd70      	pop	{r4, r5, r6, pc}
        return PSA_SUCCESS;
    ad02:	4620      	mov	r0, r4
    ad04:	e7fb      	b.n	acfe <psa_generate_random+0x32>
    ad06:	bf00      	nop
    ad08:	40000100 	.word	0x40000100

0000ad0c <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
    ad0c:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
    ad0e:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
    ad12:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
    ad16:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
    ad18:	d20d      	bcs.n	ad36 <psa_call+0x2a>
        (type < INT16_MIN) ||
    ad1a:	ea43 0504 	orr.w	r5, r3, r4
    ad1e:	2dff      	cmp	r5, #255	; 0xff
    ad20:	d809      	bhi.n	ad36 <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
    ad22:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
    ad26:	4613      	mov	r3, r2
    ad28:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
    ad2c:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
    ad2e:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
    ad30:	4803      	ldr	r0, [pc, #12]	; (ad40 <psa_call+0x34>)
    ad32:	f7ff bf99 	b.w	ac68 <tfm_ns_interface_dispatch>
}
    ad36:	f06f 0080 	mvn.w	r0, #128	; 0x80
    ad3a:	bc30      	pop	{r4, r5}
    ad3c:	4770      	bx	lr
    ad3e:	bf00      	nop
    ad40:	00007c11 	.word	0x00007c11

0000ad44 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    ad44:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    ad46:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    ad48:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    ad4a:	fab2 f382 	clz	r3, r2
    ad4e:	f1c3 031f 	rsb	r3, r3, #31
    ad52:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    ad54:	fa05 f403 	lsl.w	r4, r5, r3
    ad58:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    ad5c:	e8d0 6fef 	ldaex	r6, [r0]
    ad60:	4296      	cmp	r6, r2
    ad62:	d104      	bne.n	ad6e <nrfx_flag32_alloc+0x2a>
    ad64:	e8c0 4fec 	stlex	ip, r4, [r0]
    ad68:	f1bc 0f00 	cmp.w	ip, #0
    ad6c:	d1f6      	bne.n	ad5c <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    ad6e:	d1eb      	bne.n	ad48 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    ad70:	4801      	ldr	r0, [pc, #4]	; (ad78 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    ad72:	700b      	strb	r3, [r1, #0]
}
    ad74:	bd70      	pop	{r4, r5, r6, pc}
    ad76:	bf00      	nop
    ad78:	0bad0000 	.word	0x0bad0000

0000ad7c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    ad7c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    ad7e:	6803      	ldr	r3, [r0, #0]
    ad80:	40cb      	lsrs	r3, r1
    ad82:	07db      	lsls	r3, r3, #31
    ad84:	d410      	bmi.n	ada8 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    ad86:	2301      	movs	r3, #1
    ad88:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    ad8a:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    ad8c:	ea43 0102 	orr.w	r1, r3, r2
    ad90:	e8d0 4fef 	ldaex	r4, [r0]
    ad94:	4294      	cmp	r4, r2
    ad96:	d104      	bne.n	ada2 <nrfx_flag32_free+0x26>
    ad98:	e8c0 1fec 	stlex	ip, r1, [r0]
    ad9c:	f1bc 0f00 	cmp.w	ip, #0
    ada0:	d1f6      	bne.n	ad90 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    ada2:	d1f2      	bne.n	ad8a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    ada4:	4801      	ldr	r0, [pc, #4]	; (adac <nrfx_flag32_free+0x30>)
}
    ada6:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    ada8:	4801      	ldr	r0, [pc, #4]	; (adb0 <nrfx_flag32_free+0x34>)
    adaa:	e7fc      	b.n	ada6 <nrfx_flag32_free+0x2a>
    adac:	0bad0000 	.word	0x0bad0000
    adb0:	0bad0004 	.word	0x0bad0004

0000adb4 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    adb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    adb6:	4604      	mov	r4, r0
    adb8:	b118      	cbz	r0, adc2 <clock_stop+0xe>
    adba:	2801      	cmp	r0, #1
    adbc:	d01e      	beq.n	adfc <clock_stop+0x48>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    adbe:	b003      	add	sp, #12
    adc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    adc2:	2202      	movs	r2, #2
    adc4:	4b27      	ldr	r3, [pc, #156]	; (ae64 <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    adc6:	4607      	mov	r7, r0
    adc8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    adcc:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    add0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    add4:	2201      	movs	r2, #1
    add6:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    add8:	2301      	movs	r3, #1
    adda:	f242 7510 	movw	r5, #10000	; 0x2710
    adde:	4e21      	ldr	r6, [pc, #132]	; (ae64 <clock_stop+0xb0>)
    ade0:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    ade4:	b1b4      	cbz	r4, ae14 <clock_stop+0x60>
    ade6:	2c01      	cmp	r4, #1
    ade8:	d1e9      	bne.n	adbe <clock_stop+0xa>
            if (p_clk_src != NULL)
    adea:	b387      	cbz	r7, ae4e <clock_stop+0x9a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    adec:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    adf0:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    adf4:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    adf6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    adfa:	e013      	b.n	ae24 <clock_stop+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    adfc:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    adfe:	4b19      	ldr	r3, [pc, #100]	; (ae64 <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    ae00:	f10d 0707 	add.w	r7, sp, #7
    ae04:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ae08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    ae0c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ae10:	6058      	str	r0, [r3, #4]
    ae12:	e7e1      	b.n	add8 <clock_stop+0x24>
            if (p_clk_src != NULL)
    ae14:	b18f      	cbz	r7, ae3a <clock_stop+0x86>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    ae16:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    ae1a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    ae1e:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ae20:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    ae24:	03da      	lsls	r2, r3, #15
    ae26:	d5ca      	bpl.n	adbe <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    ae28:	f89d 0007 	ldrb.w	r0, [sp, #7]
    ae2c:	2801      	cmp	r0, #1
    ae2e:	d1c6      	bne.n	adbe <clock_stop+0xa>
    ae30:	f003 fbb9 	bl	e5a6 <nrfx_busy_wait>
    ae34:	3d01      	subs	r5, #1
    ae36:	d1d5      	bne.n	ade4 <clock_stop+0x30>
    ae38:	e7c1      	b.n	adbe <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ae3a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    ae3e:	03d9      	lsls	r1, r3, #15
    ae40:	d5bd      	bpl.n	adbe <clock_stop+0xa>
    ae42:	2001      	movs	r0, #1
    ae44:	f003 fbaf 	bl	e5a6 <nrfx_busy_wait>
    ae48:	3d01      	subs	r5, #1
    ae4a:	d1f6      	bne.n	ae3a <clock_stop+0x86>
    ae4c:	e7b7      	b.n	adbe <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    ae4e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    ae52:	03db      	lsls	r3, r3, #15
    ae54:	d5b3      	bpl.n	adbe <clock_stop+0xa>
    ae56:	2001      	movs	r0, #1
    ae58:	f003 fba5 	bl	e5a6 <nrfx_busy_wait>
    ae5c:	3d01      	subs	r5, #1
    ae5e:	d1f6      	bne.n	ae4e <clock_stop+0x9a>
    ae60:	e7ad      	b.n	adbe <clock_stop+0xa>
    ae62:	bf00      	nop
    ae64:	40005000 	.word	0x40005000

0000ae68 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    ae68:	4b04      	ldr	r3, [pc, #16]	; (ae7c <nrfx_clock_init+0x14>)
    ae6a:	791a      	ldrb	r2, [r3, #4]
    ae6c:	b922      	cbnz	r2, ae78 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    ae6e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    ae70:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    ae72:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    ae74:	4802      	ldr	r0, [pc, #8]	; (ae80 <nrfx_clock_init+0x18>)
    ae76:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    ae78:	4802      	ldr	r0, [pc, #8]	; (ae84 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    ae7a:	4770      	bx	lr
    ae7c:	2000c9ec 	.word	0x2000c9ec
    ae80:	0bad0000 	.word	0x0bad0000
    ae84:	0bad000c 	.word	0x0bad000c

0000ae88 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    ae88:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    ae8a:	2005      	movs	r0, #5
    ae8c:	f7fe fa34 	bl	92f8 <arch_irq_is_enabled>
    ae90:	b910      	cbnz	r0, ae98 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    ae92:	2005      	movs	r0, #5
    ae94:	f7fe fa22 	bl	92dc <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    ae98:	2201      	movs	r2, #1
    ae9a:	4b02      	ldr	r3, [pc, #8]	; (aea4 <nrfx_clock_enable+0x1c>)
    ae9c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    aea0:	bd08      	pop	{r3, pc}
    aea2:	bf00      	nop
    aea4:	40005000 	.word	0x40005000

0000aea8 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    aea8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    aeaa:	b110      	cbz	r0, aeb2 <nrfx_clock_start+0xa>
    aeac:	2801      	cmp	r0, #1
    aeae:	d02e      	beq.n	af0e <nrfx_clock_start+0x66>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    aeb0:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    aeb2:	4a1c      	ldr	r2, [pc, #112]	; (af24 <nrfx_clock_start+0x7c>)
    aeb4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    aeb8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    aebc:	03c9      	lsls	r1, r1, #15
    aebe:	d40e      	bmi.n	aede <nrfx_clock_start+0x36>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    aec0:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    aec4:	07db      	lsls	r3, r3, #31
    aec6:	d513      	bpl.n	aef0 <nrfx_clock_start+0x48>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    aec8:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    aecc:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    aed0:	3b01      	subs	r3, #1
    aed2:	2b01      	cmp	r3, #1
    aed4:	d809      	bhi.n	aeea <nrfx_clock_start+0x42>
    p_reg->INTENSET = mask;
    aed6:	2302      	movs	r3, #2
    aed8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    aedc:	e7e8      	b.n	aeb0 <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    aede:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    aee2:	2b02      	cmp	r3, #2
    aee4:	d005      	beq.n	aef2 <nrfx_clock_start+0x4a>
    aee6:	2b01      	cmp	r3, #1
    aee8:	d002      	beq.n	aef0 <nrfx_clock_start+0x48>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    aeea:	2000      	movs	r0, #0
    aeec:	f7ff ff62 	bl	adb4 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    aef0:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    aef2:	4a0c      	ldr	r2, [pc, #48]	; (af24 <nrfx_clock_start+0x7c>)
    aef4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aef8:	2300      	movs	r3, #0
    aefa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    aefe:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    af02:	2302      	movs	r3, #2
    af04:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    af08:	2301      	movs	r3, #1
    af0a:	6093      	str	r3, [r2, #8]
}
    af0c:	e7d0      	b.n	aeb0 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    af0e:	2200      	movs	r2, #0
    af10:	4b04      	ldr	r3, [pc, #16]	; (af24 <nrfx_clock_start+0x7c>)
    af12:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    af16:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    af1a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    af1e:	6018      	str	r0, [r3, #0]
}
    af20:	e7c6      	b.n	aeb0 <nrfx_clock_start+0x8>
    af22:	bf00      	nop
    af24:	40005000 	.word	0x40005000

0000af28 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    af28:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    af2a:	4b17      	ldr	r3, [pc, #92]	; (af88 <nrfx_power_clock_irq_handler+0x60>)
    af2c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    af30:	b152      	cbz	r2, af48 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    af32:	2000      	movs	r0, #0
    af34:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    af38:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    af3c:	2201      	movs	r2, #1
    af3e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    af42:	4b12      	ldr	r3, [pc, #72]	; (af8c <nrfx_power_clock_irq_handler+0x64>)
    af44:	681b      	ldr	r3, [r3, #0]
    af46:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    af48:	4b0f      	ldr	r3, [pc, #60]	; (af88 <nrfx_power_clock_irq_handler+0x60>)
    af4a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    af4e:	b18a      	cbz	r2, af74 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    af50:	2200      	movs	r2, #0
    af52:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    af56:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    af5a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    af5e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    af62:	f002 0203 	and.w	r2, r2, #3
    af66:	2a01      	cmp	r2, #1
    af68:	f04f 0102 	mov.w	r1, #2
    af6c:	d103      	bne.n	af76 <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    af6e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    af72:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    af74:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    af76:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    af7a:	4b04      	ldr	r3, [pc, #16]	; (af8c <nrfx_power_clock_irq_handler+0x64>)
    af7c:	2001      	movs	r0, #1
}
    af7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    af82:	681b      	ldr	r3, [r3, #0]
    af84:	4718      	bx	r3
    af86:	bf00      	nop
    af88:	40005000 	.word	0x40005000
    af8c:	2000c9ec 	.word	0x2000c9ec

0000af90 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    af90:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    af92:	4801      	ldr	r0, [pc, #4]	; (af98 <nrfx_dppi_channel_alloc+0x8>)
    af94:	f7ff bed6 	b.w	ad44 <nrfx_flag32_alloc>
    af98:	2000c5b0 	.word	0x2000c5b0

0000af9c <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
    af9c:	4a06      	ldr	r2, [pc, #24]	; (afb8 <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
    af9e:	f000 001f 	and.w	r0, r0, #31
    afa2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    afa6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    cnf &= ~to_update;
    afaa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    afae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    afb2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    afb6:	4770      	bx	lr
    afb8:	40842500 	.word	0x40842500

0000afbc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    afbc:	4b03      	ldr	r3, [pc, #12]	; (afcc <pin_in_use_by_te+0x10>)
    afbe:	3008      	adds	r0, #8
    afc0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    afc4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    afc8:	4770      	bx	lr
    afca:	bf00      	nop
    afcc:	2000c5b4 	.word	0x2000c5b4

0000afd0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    afd0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    afd2:	4c0d      	ldr	r4, [pc, #52]	; (b008 <call_handler+0x38>)
    afd4:	f100 0308 	add.w	r3, r0, #8
    afd8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    afdc:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    afde:	05da      	lsls	r2, r3, #23
{
    afe0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    afe2:	d507      	bpl.n	aff4 <call_handler+0x24>
    afe4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    afe8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    afec:	6852      	ldr	r2, [r2, #4]
    afee:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    aff2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    aff4:	68a3      	ldr	r3, [r4, #8]
    aff6:	b12b      	cbz	r3, b004 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    aff8:	4631      	mov	r1, r6
    affa:	4628      	mov	r0, r5
    affc:	68e2      	ldr	r2, [r4, #12]
    }
}
    affe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    b002:	4718      	bx	r3
}
    b004:	bd70      	pop	{r4, r5, r6, pc}
    b006:	bf00      	nop
    b008:	2000c5b4 	.word	0x2000c5b4

0000b00c <release_handler>:
{
    b00c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    b00e:	4a12      	ldr	r2, [pc, #72]	; (b058 <release_handler+0x4c>)
    b010:	3008      	adds	r0, #8
    b012:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    b016:	05d9      	lsls	r1, r3, #23
    b018:	d51b      	bpl.n	b052 <release_handler+0x46>
    b01a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    b01e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    b022:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    b026:	2000      	movs	r0, #0
    b028:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    b02c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    b030:	f413 7f80 	tst.w	r3, #256	; 0x100
    b034:	d003      	beq.n	b03e <release_handler+0x32>
    b036:	f3c3 2343 	ubfx	r3, r3, #9, #4
    b03a:	4299      	cmp	r1, r3
    b03c:	d009      	beq.n	b052 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    b03e:	3001      	adds	r0, #1
    b040:	2820      	cmp	r0, #32
    b042:	d1f3      	bne.n	b02c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    b044:	2300      	movs	r3, #0
    b046:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    b04a:	4804      	ldr	r0, [pc, #16]	; (b05c <release_handler+0x50>)
}
    b04c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    b04e:	f7ff be95 	b.w	ad7c <nrfx_flag32_free>
}
    b052:	bc10      	pop	{r4}
    b054:	4770      	bx	lr
    b056:	bf00      	nop
    b058:	2000c5b4 	.word	0x2000c5b4
    b05c:	2000c608 	.word	0x2000c608

0000b060 <pin_handler_trigger_uninit>:
{
    b060:	b538      	push	{r3, r4, r5, lr}
    b062:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    b064:	f7ff ffaa 	bl	afbc <pin_in_use_by_te>
    b068:	4c0b      	ldr	r4, [pc, #44]	; (b098 <pin_handler_trigger_uninit+0x38>)
    b06a:	f102 0508 	add.w	r5, r2, #8
    b06e:	b160      	cbz	r0, b08a <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    b070:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b072:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    b076:	0b5b      	lsrs	r3, r3, #13
    b078:	009b      	lsls	r3, r3, #2
    b07a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b07e:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    b082:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
    b086:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    b08a:	4610      	mov	r0, r2
    b08c:	f7ff ffbe 	bl	b00c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    b090:	2300      	movs	r3, #0
    b092:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    b096:	bd38      	pop	{r3, r4, r5, pc}
    b098:	2000c5b4 	.word	0x2000c5b4

0000b09c <nrfx_gpiote_input_configure>:
{
    b09c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b0a0:	4604      	mov	r4, r0
    b0a2:	461d      	mov	r5, r3
    if (p_input_config)
    b0a4:	b309      	cbz	r1, b0ea <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b0a6:	4f4e      	ldr	r7, [pc, #312]	; (b1e0 <nrfx_gpiote_input_configure+0x144>)
    b0a8:	f100 0808 	add.w	r8, r0, #8
    b0ac:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    b0b0:	07b3      	lsls	r3, r6, #30
    b0b2:	d506      	bpl.n	b0c2 <nrfx_gpiote_input_configure+0x26>
    b0b4:	f7ff ff82 	bl	afbc <pin_in_use_by_te>
    b0b8:	b118      	cbz	r0, b0c2 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    b0ba:	484a      	ldr	r0, [pc, #296]	; (b1e4 <nrfx_gpiote_input_configure+0x148>)
}
    b0bc:	b002      	add	sp, #8
    b0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b0c2:	4849      	ldr	r0, [pc, #292]	; (b1e8 <nrfx_gpiote_input_configure+0x14c>)
    *p_pin = pin_number & 0x1F;
    b0c4:	f004 031f 	and.w	r3, r4, #31
    b0c8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b0cc:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    b0d0:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    b0d2:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    b0d6:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    b0da:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    b0de:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
    b0e2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    b0e6:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
    b0ea:	b19a      	cbz	r2, b114 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b0ec:	4e3c      	ldr	r6, [pc, #240]	; (b1e0 <nrfx_gpiote_input_configure+0x144>)
    b0ee:	f104 0708 	add.w	r7, r4, #8
    b0f2:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    b0f6:	7813      	ldrb	r3, [r2, #0]
        if (pin_is_output(pin))
    b0f8:	f011 0f02 	tst.w	r1, #2
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    b0fc:	6850      	ldr	r0, [r2, #4]
        if (pin_is_output(pin))
    b0fe:	d00c      	beq.n	b11a <nrfx_gpiote_input_configure+0x7e>
            if (use_evt)
    b100:	2800      	cmp	r0, #0
    b102:	d1da      	bne.n	b0ba <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    b104:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
    b108:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    b10c:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
    b110:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    b114:	bbd5      	cbnz	r5, b18c <nrfx_gpiote_input_configure+0xf0>
        err = NRFX_SUCCESS;
    b116:	4835      	ldr	r0, [pc, #212]	; (b1ec <nrfx_gpiote_input_configure+0x150>)
    b118:	e7d0      	b.n	b0bc <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    b11a:	f021 0120 	bic.w	r1, r1, #32
    b11e:	04c9      	lsls	r1, r1, #19
    b120:	0cc9      	lsrs	r1, r1, #19
    b122:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    b126:	2800      	cmp	r0, #0
    b128:	d0ec      	beq.n	b104 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    b12a:	2b03      	cmp	r3, #3
    b12c:	d8c5      	bhi.n	b0ba <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    b12e:	6852      	ldr	r2, [r2, #4]
    b130:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    b134:	4662      	mov	r2, ip
    b136:	0092      	lsls	r2, r2, #2
    b138:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    b13c:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    b140:	b923      	cbnz	r3, b14c <nrfx_gpiote_input_configure+0xb0>
    p_reg->CONFIG[idx] = 0;
    b142:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    b146:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
    b14a:	e7db      	b.n	b104 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    b14c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    b150:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    b154:	f020 0003 	bic.w	r0, r0, #3
    b158:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    b15c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    b160:	f041 0120 	orr.w	r1, r1, #32
    b164:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    b168:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    b16c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b170:	0220      	lsls	r0, r4, #8
    b172:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    b176:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    b17a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    b17e:	ea40 000e 	orr.w	r0, r0, lr
    b182:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    b186:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    b18a:	e7bb      	b.n	b104 <nrfx_gpiote_input_configure+0x68>
    release_handler(pin);
    b18c:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    b18e:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    b192:	f7ff ff3b 	bl	b00c <release_handler>
    if (!handler)
    b196:	2e00      	cmp	r6, #0
    b198:	d0bd      	beq.n	b116 <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    b19a:	4d11      	ldr	r5, [pc, #68]	; (b1e0 <nrfx_gpiote_input_configure+0x144>)
    b19c:	e9d5 2300 	ldrd	r2, r3, [r5]
    b1a0:	4296      	cmp	r6, r2
    b1a2:	d101      	bne.n	b1a8 <nrfx_gpiote_input_configure+0x10c>
    b1a4:	429f      	cmp	r7, r3
    b1a6:	d018      	beq.n	b1da <nrfx_gpiote_input_configure+0x13e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    b1a8:	4811      	ldr	r0, [pc, #68]	; (b1f0 <nrfx_gpiote_input_configure+0x154>)
    b1aa:	f10d 0107 	add.w	r1, sp, #7
    b1ae:	f7ff fdc9 	bl	ad44 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    b1b2:	4b0e      	ldr	r3, [pc, #56]	; (b1ec <nrfx_gpiote_input_configure+0x150>)
    b1b4:	4298      	cmp	r0, r3
    b1b6:	d181      	bne.n	b0bc <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    b1b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
    b1bc:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    b1c0:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    b1c2:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    b1c4:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    b1c8:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    b1cc:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    b1d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b1d4:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    b1d8:	e79d      	b.n	b116 <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    b1da:	2200      	movs	r2, #0
    b1dc:	e7ee      	b.n	b1bc <nrfx_gpiote_input_configure+0x120>
    b1de:	bf00      	nop
    b1e0:	2000c5b4 	.word	0x2000c5b4
    b1e4:	0bad0004 	.word	0x0bad0004
    b1e8:	40842500 	.word	0x40842500
    b1ec:	0bad0000 	.word	0x0bad0000
    b1f0:	2000c608 	.word	0x2000c608

0000b1f4 <nrfx_gpiote_output_configure>:
{
    b1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b1f6:	4604      	mov	r4, r0
    if (p_config)
    b1f8:	b379      	cbz	r1, b25a <nrfx_gpiote_output_configure+0x66>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b1fa:	4e3a      	ldr	r6, [pc, #232]	; (b2e4 <nrfx_gpiote_output_configure+0xf0>)
    b1fc:	f100 0708 	add.w	r7, r0, #8
    b200:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    b204:	07ab      	lsls	r3, r5, #30
    b206:	d404      	bmi.n	b212 <nrfx_gpiote_output_configure+0x1e>
    b208:	f7ff fed8 	bl	afbc <pin_in_use_by_te>
    b20c:	b108      	cbz	r0, b212 <nrfx_gpiote_output_configure+0x1e>
{
    b20e:	4836      	ldr	r0, [pc, #216]	; (b2e8 <nrfx_gpiote_output_configure+0xf4>)
}
    b210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    b212:	f015 0f1c 	tst.w	r5, #28
    b216:	784b      	ldrb	r3, [r1, #1]
    b218:	d122      	bne.n	b260 <nrfx_gpiote_output_configure+0x6c>
    *p_pin = pin_number & 0x1F;
    b21a:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b21e:	f8df c0cc 	ldr.w	ip, [pc, #204]	; b2ec <nrfx_gpiote_output_configure+0xf8>
    b222:	f100 0e80 	add.w	lr, r0, #128	; 0x80
    b226:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    b22a:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    b22e:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    b230:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    b234:	7809      	ldrb	r1, [r1, #0]
    b236:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    cnf &= ~to_update;
    b23a:	f02c 0c07 	bic.w	ip, ip, #7
    b23e:	ea43 030c 	orr.w	r3, r3, ip
    b242:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    b246:	4929      	ldr	r1, [pc, #164]	; (b2ec <nrfx_gpiote_output_configure+0xf8>)
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    b248:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
    b24c:	3080      	adds	r0, #128	; 0x80
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    b24e:	f045 0503 	orr.w	r5, r5, #3
    b252:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    b256:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    b25a:	b922      	cbnz	r2, b266 <nrfx_gpiote_output_configure+0x72>
    return NRFX_SUCCESS;
    b25c:	4824      	ldr	r0, [pc, #144]	; (b2f0 <nrfx_gpiote_output_configure+0xfc>)
    b25e:	e7d7      	b.n	b210 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    b260:	2b01      	cmp	r3, #1
    b262:	d1da      	bne.n	b21a <nrfx_gpiote_output_configure+0x26>
    b264:	e7d3      	b.n	b20e <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b266:	4e1f      	ldr	r6, [pc, #124]	; (b2e4 <nrfx_gpiote_output_configure+0xf0>)
    b268:	f104 0708 	add.w	r7, r4, #8
    b26c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    b270:	0783      	lsls	r3, r0, #30
    b272:	d5cc      	bpl.n	b20e <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    b274:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    b278:	2300      	movs	r3, #0
    b27a:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    b27c:	f020 0020 	bic.w	r0, r0, #32
    b280:	0089      	lsls	r1, r1, #2
    b282:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b286:	04c0      	lsls	r0, r0, #19
    b288:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
    b28c:	0cc0      	lsrs	r0, r0, #19
    b28e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    b292:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    b296:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    b29a:	7855      	ldrb	r5, [r2, #1]
    b29c:	2d00      	cmp	r5, #0
    b29e:	d0dd      	beq.n	b25c <nrfx_gpiote_output_configure+0x68>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    b2a0:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    b2a4:	7892      	ldrb	r2, [r2, #2]
    b2a6:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    b2aa:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    b2ae:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b2b2:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    b2b6:	0223      	lsls	r3, r4, #8
    b2b8:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    b2bc:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b2be:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    b2c2:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    b2c6:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b2c8:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    b2ca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    b2ce:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b2d2:	4313      	orrs	r3, r2
    b2d4:	f040 0020 	orr.w	r0, r0, #32
    b2d8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    b2dc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    b2e0:	e7bc      	b.n	b25c <nrfx_gpiote_output_configure+0x68>
    b2e2:	bf00      	nop
    b2e4:	2000c5b4 	.word	0x2000c5b4
    b2e8:	0bad0004 	.word	0x0bad0004
    b2ec:	40842500 	.word	0x40842500
    b2f0:	0bad0000 	.word	0x0bad0000

0000b2f4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    b2f4:	4b01      	ldr	r3, [pc, #4]	; (b2fc <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    b2f6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    b2fa:	4770      	bx	lr
    b2fc:	2000c5b4 	.word	0x2000c5b4

0000b300 <nrfx_gpiote_channel_get>:
{
    b300:	b508      	push	{r3, lr}
    b302:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    b304:	f7ff fe5a 	bl	afbc <pin_in_use_by_te>
    b308:	b138      	cbz	r0, b31a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b30a:	4b05      	ldr	r3, [pc, #20]	; (b320 <nrfx_gpiote_channel_get+0x20>)
    b30c:	3208      	adds	r2, #8
    b30e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    b312:	4804      	ldr	r0, [pc, #16]	; (b324 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b314:	0b5b      	lsrs	r3, r3, #13
    b316:	700b      	strb	r3, [r1, #0]
}
    b318:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    b31a:	4803      	ldr	r0, [pc, #12]	; (b328 <nrfx_gpiote_channel_get+0x28>)
    b31c:	e7fc      	b.n	b318 <nrfx_gpiote_channel_get+0x18>
    b31e:	bf00      	nop
    b320:	2000c5b4 	.word	0x2000c5b4
    b324:	0bad0000 	.word	0x0bad0000
    b328:	0bad0004 	.word	0x0bad0004

0000b32c <nrfx_gpiote_init>:
{
    b32c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    b32e:	4c0f      	ldr	r4, [pc, #60]	; (b36c <nrfx_gpiote_init+0x40>)
    b330:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    b334:	b9bd      	cbnz	r5, b366 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    b336:	2240      	movs	r2, #64	; 0x40
    b338:	4629      	mov	r1, r5
    b33a:	f104 0010 	add.w	r0, r4, #16
    b33e:	f003 fcd0 	bl	ece2 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    b342:	2031      	movs	r0, #49	; 0x31
    b344:	f7fd ffca 	bl	92dc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b348:	4b09      	ldr	r3, [pc, #36]	; (b370 <nrfx_gpiote_init+0x44>)
    return err_code;
    b34a:	480a      	ldr	r0, [pc, #40]	; (b374 <nrfx_gpiote_init+0x48>)
    b34c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    b350:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    b354:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    b358:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    b35c:	2301      	movs	r3, #1
    b35e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    b362:	6563      	str	r3, [r4, #84]	; 0x54
}
    b364:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    b366:	4804      	ldr	r0, [pc, #16]	; (b378 <nrfx_gpiote_init+0x4c>)
    b368:	e7fc      	b.n	b364 <nrfx_gpiote_init+0x38>
    b36a:	bf00      	nop
    b36c:	2000c5b4 	.word	0x2000c5b4
    b370:	40031000 	.word	0x40031000
    b374:	0bad0000 	.word	0x0bad0000
    b378:	0bad0005 	.word	0x0bad0005

0000b37c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    b37c:	4b03      	ldr	r3, [pc, #12]	; (b38c <nrfx_gpiote_is_init+0x10>)
    b37e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    b382:	3800      	subs	r0, #0
    b384:	bf18      	it	ne
    b386:	2001      	movne	r0, #1
    b388:	4770      	bx	lr
    b38a:	bf00      	nop
    b38c:	2000c5b4 	.word	0x2000c5b4

0000b390 <nrfx_gpiote_channel_free>:
{
    b390:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    b392:	4801      	ldr	r0, [pc, #4]	; (b398 <nrfx_gpiote_channel_free+0x8>)
    b394:	f7ff bcf2 	b.w	ad7c <nrfx_flag32_free>
    b398:	2000c604 	.word	0x2000c604

0000b39c <nrfx_gpiote_channel_alloc>:
{
    b39c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    b39e:	4801      	ldr	r0, [pc, #4]	; (b3a4 <nrfx_gpiote_channel_alloc+0x8>)
    b3a0:	f7ff bcd0 	b.w	ad44 <nrfx_flag32_alloc>
    b3a4:	2000c604 	.word	0x2000c604

0000b3a8 <nrfx_gpiote_trigger_enable>:
{
    b3a8:	4602      	mov	r2, r0
    b3aa:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b3ac:	f7ff fe06 	bl	afbc <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b3b0:	4b1b      	ldr	r3, [pc, #108]	; (b420 <nrfx_gpiote_trigger_enable+0x78>)
    b3b2:	f102 0408 	add.w	r4, r2, #8
    b3b6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b3ba:	b1c8      	cbz	r0, b3f0 <nrfx_gpiote_trigger_enable+0x48>
    b3bc:	f013 0402 	ands.w	r4, r3, #2
    b3c0:	d116      	bne.n	b3f0 <nrfx_gpiote_trigger_enable+0x48>
    return ((uint32_t)p_reg + event);
    b3c2:	4818      	ldr	r0, [pc, #96]	; (b424 <nrfx_gpiote_trigger_enable+0x7c>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b3c4:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    b3c6:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b3c8:	5084      	str	r4, [r0, r2]
    b3ca:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    b3cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    b3d0:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    b3d4:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    b3d8:	f040 0001 	orr.w	r0, r0, #1
    b3dc:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    b3e0:	b129      	cbz	r1, b3ee <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    b3e2:	2201      	movs	r2, #1
    b3e4:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    b3e8:	4a0f      	ldr	r2, [pc, #60]	; (b428 <nrfx_gpiote_trigger_enable+0x80>)
    b3ea:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    b3ee:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    b3f0:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    b3f4:	2b04      	cmp	r3, #4
    b3f6:	d00e      	beq.n	b416 <nrfx_gpiote_trigger_enable+0x6e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    b3f8:	2b05      	cmp	r3, #5
    b3fa:	d00e      	beq.n	b41a <nrfx_gpiote_trigger_enable+0x72>
    return p_reg->IN;
    b3fc:	4b0b      	ldr	r3, [pc, #44]	; (b42c <nrfx_gpiote_trigger_enable+0x84>)
    b3fe:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
    b400:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    b404:	40d9      	lsrs	r1, r3
    b406:	f001 0101 	and.w	r1, r1, #1
    b40a:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    b40c:	4610      	mov	r0, r2
}
    b40e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    b412:	f7ff bdc3 	b.w	af9c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    b416:	2103      	movs	r1, #3
    b418:	e7f8      	b.n	b40c <nrfx_gpiote_trigger_enable+0x64>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    b41a:	2102      	movs	r1, #2
    b41c:	e7f6      	b.n	b40c <nrfx_gpiote_trigger_enable+0x64>
    b41e:	bf00      	nop
    b420:	2000c5b4 	.word	0x2000c5b4
    b424:	40031100 	.word	0x40031100
    b428:	40031000 	.word	0x40031000
    b42c:	40842500 	.word	0x40842500

0000b430 <nrfx_gpiote_trigger_disable>:
{
    b430:	b508      	push	{r3, lr}
    b432:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b434:	f7ff fdc2 	bl	afbc <pin_in_use_by_te>
    b438:	b1c0      	cbz	r0, b46c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b43a:	4b0f      	ldr	r3, [pc, #60]	; (b478 <nrfx_gpiote_trigger_disable+0x48>)
    b43c:	f102 0108 	add.w	r1, r2, #8
    b440:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b444:	0799      	lsls	r1, r3, #30
    b446:	d411      	bmi.n	b46c <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    b448:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b44a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    b44c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    b44e:	490b      	ldr	r1, [pc, #44]	; (b47c <nrfx_gpiote_trigger_disable+0x4c>)
    b450:	009b      	lsls	r3, r3, #2
    b452:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b456:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    b45a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    b45e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    b462:	f022 0203 	bic.w	r2, r2, #3
    b466:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    b46a:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    b46c:	2100      	movs	r1, #0
}
    b46e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    b472:	4610      	mov	r0, r2
    b474:	f7ff bd92 	b.w	af9c <nrf_gpio_cfg_sense_set>
    b478:	2000c5b4 	.word	0x2000c5b4
    b47c:	40031000 	.word	0x40031000

0000b480 <nrfx_gpiote_pin_uninit>:
{
    b480:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    b482:	4b0c      	ldr	r3, [pc, #48]	; (b4b4 <nrfx_gpiote_pin_uninit+0x34>)
    b484:	f100 0208 	add.w	r2, r0, #8
    b488:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    b48c:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    b48e:	07db      	lsls	r3, r3, #31
    b490:	d50d      	bpl.n	b4ae <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
    b492:	f7ff ffcd 	bl	b430 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    b496:	4620      	mov	r0, r4
    b498:	f7ff fde2 	bl	b060 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    b49c:	2202      	movs	r2, #2
    b49e:	4b06      	ldr	r3, [pc, #24]	; (b4b8 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
    b4a0:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    b4a4:	3480      	adds	r4, #128	; 0x80
    b4a6:	4805      	ldr	r0, [pc, #20]	; (b4bc <nrfx_gpiote_pin_uninit+0x3c>)
    b4a8:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
    b4ac:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    b4ae:	4804      	ldr	r0, [pc, #16]	; (b4c0 <nrfx_gpiote_pin_uninit+0x40>)
    b4b0:	e7fc      	b.n	b4ac <nrfx_gpiote_pin_uninit+0x2c>
    b4b2:	bf00      	nop
    b4b4:	2000c5b4 	.word	0x2000c5b4
    b4b8:	40842500 	.word	0x40842500
    b4bc:	0bad0000 	.word	0x0bad0000
    b4c0:	0bad0004 	.word	0x0bad0004

0000b4c4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    b4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    b4c8:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    b4ca:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b4cc:	462c      	mov	r4, r5
{
    b4ce:	4b4d      	ldr	r3, [pc, #308]	; (b604 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    b4d0:	484d      	ldr	r0, [pc, #308]	; (b608 <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    b4d2:	494e      	ldr	r1, [pc, #312]	; (b60c <nrfx_gpiote_irq_handler+0x148>)
{
    b4d4:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b4d6:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    b4d8:	b136      	cbz	r6, b4e8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    b4da:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    b4de:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b4e0:	bf1e      	ittt	ne
    b4e2:	601c      	strne	r4, [r3, #0]
    b4e4:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    b4e6:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    b4e8:	3304      	adds	r3, #4
    b4ea:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    b4ec:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    b4f0:	d1f1      	bne.n	b4d6 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b4f2:	4f45      	ldr	r7, [pc, #276]	; (b608 <nrfx_gpiote_irq_handler+0x144>)
    b4f4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    b4f8:	b193      	cbz	r3, b520 <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
    b4fa:	4e45      	ldr	r6, [pc, #276]	; (b610 <nrfx_gpiote_irq_handler+0x14c>)
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    b4fc:	f10d 090c 	add.w	r9, sp, #12
    b500:	6a33      	ldr	r3, [r6, #32]
    b502:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    b504:	6233      	str	r3, [r6, #32]
    b506:	f04f 0a01 	mov.w	sl, #1
            while (latch[i])
    b50a:	9803      	ldr	r0, [sp, #12]
    b50c:	b970      	cbnz	r0, b52c <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b50e:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
    b512:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    b516:	6a33      	ldr	r3, [r6, #32]
    b518:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    b51a:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
    b51c:	2b00      	cmp	r3, #0
    b51e:	d1f2      	bne.n	b506 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    b520:	2401      	movs	r4, #1
    while (mask)
    b522:	2d00      	cmp	r5, #0
    b524:	d156      	bne.n	b5d4 <nrfx_gpiote_irq_handler+0x110>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    b526:	b005      	add	sp, #20
    b528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    b52c:	fa90 fba0 	rbit	fp, r0
    b530:	fabb fb8b 	clz	fp, fp
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    b534:	4a37      	ldr	r2, [pc, #220]	; (b614 <nrfx_gpiote_irq_handler+0x150>)
    b536:	f10b 0308 	add.w	r3, fp, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    b53a:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
    b53e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    b542:	f00b 0407 	and.w	r4, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    b546:	f819 300c 	ldrb.w	r3, [r9, ip]
    b54a:	fa0a f404 	lsl.w	r4, sl, r4
    b54e:	ea23 0304 	bic.w	r3, r3, r4
    b552:	f809 300c 	strb.w	r3, [r9, ip]
    b556:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    b55a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    b55e:	f3c1 0282 	ubfx	r2, r1, #2, #3
    if (is_level(trigger))
    b562:	06c9      	lsls	r1, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    b564:	4690      	mov	r8, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    b566:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
    b56a:	d518      	bpl.n	b59e <nrfx_gpiote_irq_handler+0xda>
        call_handler(pin, trigger);
    b56c:	4611      	mov	r1, r2
    b56e:	4658      	mov	r0, fp
    b570:	9301      	str	r3, [sp, #4]
    b572:	f7ff fd2d 	bl	afd0 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    b576:	9b01      	ldr	r3, [sp, #4]
    b578:	b2e4      	uxtb	r4, r4
    b57a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
    b57e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    b582:	429c      	cmp	r4, r3
    b584:	d107      	bne.n	b596 <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    b586:	2100      	movs	r1, #0
    b588:	4658      	mov	r0, fp
    b58a:	f7ff fd07 	bl	af9c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    b58e:	4621      	mov	r1, r4
    b590:	4658      	mov	r0, fp
    b592:	f7ff fd03 	bl	af9c <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    b596:	fa0a f00b 	lsl.w	r0, sl, fp
    b59a:	6230      	str	r0, [r6, #32]
}
    b59c:	e7b5      	b.n	b50a <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    b59e:	2c02      	cmp	r4, #2
    b5a0:	d10c      	bne.n	b5bc <nrfx_gpiote_irq_handler+0xf8>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    b5a2:	2103      	movs	r1, #3
    b5a4:	4658      	mov	r0, fp
    b5a6:	f7ff fcf9 	bl	af9c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    b5aa:	f008 0305 	and.w	r3, r8, #5
    b5ae:	2b01      	cmp	r3, #1
    b5b0:	d1f1      	bne.n	b596 <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
    b5b2:	4641      	mov	r1, r8
    b5b4:	4658      	mov	r0, fp
    b5b6:	f7ff fd0b 	bl	afd0 <call_handler>
    b5ba:	e7ec      	b.n	b596 <nrfx_gpiote_irq_handler+0xd2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    b5bc:	2102      	movs	r1, #2
    b5be:	4658      	mov	r0, fp
    b5c0:	9201      	str	r2, [sp, #4]
    b5c2:	f7ff fceb 	bl	af9c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    b5c6:	9a01      	ldr	r2, [sp, #4]
    b5c8:	2a03      	cmp	r2, #3
    b5ca:	d0f2      	beq.n	b5b2 <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    b5cc:	2c03      	cmp	r4, #3
    b5ce:	d1e2      	bne.n	b596 <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    b5d0:	428a      	cmp	r2, r1
    b5d2:	e7ed      	b.n	b5b0 <nrfx_gpiote_irq_handler+0xec>
        uint32_t ch = NRF_CTZ(mask);
    b5d4:	fa95 f3a5 	rbit	r3, r5
    b5d8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    b5dc:	fa04 f203 	lsl.w	r2, r4, r3
    b5e0:	009b      	lsls	r3, r3, #2
    b5e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b5e6:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    b5ea:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    b5ee:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    b5f2:	f3c0 2004 	ubfx	r0, r0, #8, #5
    b5f6:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    b5fa:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    b5fe:	f7ff fce7 	bl	afd0 <call_handler>
    b602:	e78e      	b.n	b522 <nrfx_gpiote_irq_handler+0x5e>
    b604:	40031100 	.word	0x40031100
    b608:	40031000 	.word	0x40031000
    b60c:	40031120 	.word	0x40031120
    b610:	40842500 	.word	0x40842500
    b614:	2000c5b4 	.word	0x2000c5b4

0000b618 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    b618:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    b61a:	4c08      	ldr	r4, [pc, #32]	; (b63c <nrfx_ipc_init+0x24>)
{
    b61c:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    b61e:	7923      	ldrb	r3, [r4, #4]
{
    b620:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    b622:	b943      	cbnz	r3, b636 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
    b624:	202a      	movs	r0, #42	; 0x2a
    b626:	f7fd fe59 	bl	92dc <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    b62a:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
    b62c:	4804      	ldr	r0, [pc, #16]	; (b640 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    b62e:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
    b630:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
    b632:	60a5      	str	r5, [r4, #8]
}
    b634:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    b636:	4803      	ldr	r0, [pc, #12]	; (b644 <nrfx_ipc_init+0x2c>)
    b638:	e7fc      	b.n	b634 <nrfx_ipc_init+0x1c>
    b63a:	bf00      	nop
    b63c:	2000c9f4 	.word	0x2000c9f4
    b640:	0bad0000 	.word	0x0bad0000
    b644:	0bad000c 	.word	0x0bad000c

0000b648 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    b648:	2300      	movs	r3, #0
{
    b64a:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
    b64c:	4a0d      	ldr	r2, [pc, #52]	; (b684 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
    b64e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    b652:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
    b656:	3301      	adds	r3, #1
    b658:	2b08      	cmp	r3, #8
    b65a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
    b65e:	d1f6      	bne.n	b64e <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
    b660:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
    b662:	4a08      	ldr	r2, [pc, #32]	; (b684 <nrfx_ipc_config_load+0x3c>)
    b664:	f100 011c 	add.w	r1, r0, #28
    b668:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
    b66c:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
    b670:	3301      	adds	r3, #1
    b672:	2b08      	cmp	r3, #8
    b674:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    b678:	d1f6      	bne.n	b668 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
    b67a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
    b67c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    b680:	bd30      	pop	{r4, r5, pc}
    b682:	bf00      	nop
    b684:	4002a000 	.word	0x4002a000

0000b688 <nrfx_ipc_uninit>:
    p_reg->SEND_CNF[index] = channels_mask;
    b688:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    b68a:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->SEND_CNF[index] = channels_mask;
    b68e:	4a13      	ldr	r2, [pc, #76]	; (b6dc <nrfx_ipc_uninit+0x54>)
    b690:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    b694:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
    b698:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    b69c:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    b6a0:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    b6a4:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    b6a8:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    b6ac:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
    b6b0:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
    b6b4:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
    b6b8:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
    b6bc:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
    b6c0:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
    b6c4:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
    b6c8:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
    b6cc:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
    b6d0:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
    b6d4:	4a02      	ldr	r2, [pc, #8]	; (b6e0 <nrfx_ipc_uninit+0x58>)
    b6d6:	7113      	strb	r3, [r2, #4]
}
    b6d8:	4770      	bx	lr
    b6da:	bf00      	nop
    b6dc:	4002a000 	.word	0x4002a000
    b6e0:	2000c9f4 	.word	0x2000c9f4

0000b6e4 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
    b6e4:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
    b6e6:	4a02      	ldr	r2, [pc, #8]	; (b6f0 <nrfx_ipc_receive_event_enable+0xc>)
    b6e8:	4083      	lsls	r3, r0
    b6ea:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    b6ee:	4770      	bx	lr
    b6f0:	4002a000 	.word	0x4002a000

0000b6f4 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
    b6f4:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
    b6f6:	4a02      	ldr	r2, [pc, #8]	; (b700 <nrfx_ipc_receive_event_disable+0xc>)
    b6f8:	4083      	lsls	r3, r0
    b6fa:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    b6fe:	4770      	bx	lr
    b700:	4002a000 	.word	0x4002a000

0000b704 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    b704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
    b706:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b708:	2700      	movs	r7, #0
    return p_reg->INTPEND;
    b70a:	4b0b      	ldr	r3, [pc, #44]	; (b738 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
    b70c:	4d0b      	ldr	r5, [pc, #44]	; (b73c <nrfx_ipc_irq_handler+0x38>)
    b70e:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
    b712:	b904      	cbnz	r4, b716 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
    b714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
    b716:	fa94 f0a4 	rbit	r0, r4
    b71a:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
    b71e:	fa06 f300 	lsl.w	r3, r6, r0
    b722:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b726:	4b06      	ldr	r3, [pc, #24]	; (b740 <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    b728:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b72a:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
    b72c:	682b      	ldr	r3, [r5, #0]
    b72e:	2b00      	cmp	r3, #0
    b730:	d0ef      	beq.n	b712 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
    b732:	68a9      	ldr	r1, [r5, #8]
    b734:	4798      	blx	r3
    b736:	e7ec      	b.n	b712 <nrfx_ipc_irq_handler+0xe>
    b738:	4002a000 	.word	0x4002a000
    b73c:	2000c9f4 	.word	0x2000c9f4
    b740:	4002a100 	.word	0x4002a100

0000b744 <rpc_handle_data_message>:
    b744:	b570      	push	{r4, r5, r6, lr}
    b746:	6803      	ldr	r3, [r0, #0]
    b748:	4604      	mov	r4, r0
    b74a:	3b03      	subs	r3, #3
    b74c:	b2db      	uxtb	r3, r3
    b74e:	2b04      	cmp	r3, #4
    b750:	d803      	bhi.n	b75a <rpc_handle_data_message+0x16>
    b752:	4a09      	ldr	r2, [pc, #36]	; (b778 <rpc_handle_data_message+0x34>)
    b754:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    b758:	b92d      	cbnz	r5, b766 <rpc_handle_data_message+0x22>
    b75a:	68a0      	ldr	r0, [r4, #8]
    b75c:	b108      	cbz	r0, b762 <rpc_handle_data_message+0x1e>
    b75e:	f000 f819 	bl	b794 <rpc_transport_msg_data_rx_free>
    b762:	2000      	movs	r0, #0
    b764:	bd70      	pop	{r4, r5, r6, pc}
    b766:	f002 ff77 	bl	e658 <rpc_client_msg_from_rpc_msg_get>
    b76a:	6821      	ldr	r1, [r4, #0]
    b76c:	462b      	mov	r3, r5
    b76e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b772:	0c09      	lsrs	r1, r1, #16
    b774:	4718      	bx	r3
    b776:	bf00      	nop
    b778:	0000f450 	.word	0x0000f450

0000b77c <rpc_transport_msg_alloc>:
    b77c:	4b01      	ldr	r3, [pc, #4]	; (b784 <rpc_transport_msg_alloc+0x8>)
    b77e:	681b      	ldr	r3, [r3, #0]
    b780:	4718      	bx	r3
    b782:	bf00      	nop
    b784:	2000c610 	.word	0x2000c610

0000b788 <rpc_transport_msg_rx_free>:
    b788:	4b01      	ldr	r3, [pc, #4]	; (b790 <rpc_transport_msg_rx_free+0x8>)
    b78a:	68db      	ldr	r3, [r3, #12]
    b78c:	4718      	bx	r3
    b78e:	bf00      	nop
    b790:	2000c610 	.word	0x2000c610

0000b794 <rpc_transport_msg_data_rx_free>:
    b794:	4b01      	ldr	r3, [pc, #4]	; (b79c <rpc_transport_msg_data_rx_free+0x8>)
    b796:	695b      	ldr	r3, [r3, #20]
    b798:	4718      	bx	r3
    b79a:	bf00      	nop
    b79c:	2000c610 	.word	0x2000c610

0000b7a0 <rpc_transport_msg_send>:
    b7a0:	4b01      	ldr	r3, [pc, #4]	; (b7a8 <rpc_transport_msg_send+0x8>)
    b7a2:	689b      	ldr	r3, [r3, #8]
    b7a4:	4718      	bx	r3
    b7a6:	bf00      	nop
    b7a8:	2000c610 	.word	0x2000c610

0000b7ac <rpc_transport_ipc_msg_data_tx_size>:
    b7ac:	4b01      	ldr	r3, [pc, #4]	; (b7b4 <rpc_transport_ipc_msg_data_tx_size+0x8>)
    b7ae:	681b      	ldr	r3, [r3, #0]
    b7b0:	68d8      	ldr	r0, [r3, #12]
    b7b2:	4770      	bx	lr
    b7b4:	2000ca00 	.word	0x2000ca00

0000b7b8 <rpc_transport_ipc_msg_rx_free>:
    b7b8:	2300      	movs	r3, #0
    b7ba:	b530      	push	{r4, r5, lr}
    b7bc:	4910      	ldr	r1, [pc, #64]	; (b800 <rpc_transport_ipc_msg_rx_free+0x48>)
    b7be:	680a      	ldr	r2, [r1, #0]
    b7c0:	6814      	ldr	r4, [r2, #0]
    b7c2:	42a3      	cmp	r3, r4
    b7c4:	d10b      	bne.n	b7de <rpc_transport_ipc_msg_rx_free+0x26>
    b7c6:	2300      	movs	r3, #0
    b7c8:	684a      	ldr	r2, [r1, #4]
    b7ca:	6811      	ldr	r1, [r2, #0]
    b7cc:	428b      	cmp	r3, r1
    b7ce:	d015      	beq.n	b7fc <rpc_transport_ipc_msg_rx_free+0x44>
    b7d0:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
    b7d4:	68a4      	ldr	r4, [r4, #8]
    b7d6:	42a0      	cmp	r0, r4
    b7d8:	d008      	beq.n	b7ec <rpc_transport_ipc_msg_rx_free+0x34>
    b7da:	3301      	adds	r3, #1
    b7dc:	e7f6      	b.n	b7cc <rpc_transport_ipc_msg_rx_free+0x14>
    b7de:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
    b7e2:	68ad      	ldr	r5, [r5, #8]
    b7e4:	42a8      	cmp	r0, r5
    b7e6:	d001      	beq.n	b7ec <rpc_transport_ipc_msg_rx_free+0x34>
    b7e8:	3301      	adds	r3, #1
    b7ea:	e7ea      	b.n	b7c2 <rpc_transport_ipc_msg_rx_free+0xa>
    b7ec:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    b7f0:	6853      	ldr	r3, [r2, #4]
    b7f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b7f6:	f043 0303 	orr.w	r3, r3, #3
    b7fa:	6053      	str	r3, [r2, #4]
    b7fc:	bd30      	pop	{r4, r5, pc}
    b7fe:	bf00      	nop
    b800:	2000ca20 	.word	0x2000ca20

0000b804 <rpc_transport_ipc_msg_tx_free>:
    b804:	2200      	movs	r2, #0
    b806:	b530      	push	{r4, r5, lr}
    b808:	4b0b      	ldr	r3, [pc, #44]	; (b838 <rpc_transport_ipc_msg_tx_free+0x34>)
    b80a:	6819      	ldr	r1, [r3, #0]
    b80c:	680c      	ldr	r4, [r1, #0]
    b80e:	4294      	cmp	r4, r2
    b810:	d00f      	beq.n	b832 <rpc_transport_ipc_msg_tx_free+0x2e>
    b812:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    b816:	689d      	ldr	r5, [r3, #8]
    b818:	42a8      	cmp	r0, r5
    b81a:	d10b      	bne.n	b834 <rpc_transport_ipc_msg_tx_free+0x30>
    b81c:	f04f 0203 	mov.w	r2, #3
    b820:	3304      	adds	r3, #4
    b822:	e8d3 1fcf 	ldaexb	r1, [r3]
    b826:	2900      	cmp	r1, #0
    b828:	d103      	bne.n	b832 <rpc_transport_ipc_msg_tx_free+0x2e>
    b82a:	e8c3 2fc0 	stlexb	r0, r2, [r3]
    b82e:	2800      	cmp	r0, #0
    b830:	d1f7      	bne.n	b822 <rpc_transport_ipc_msg_tx_free+0x1e>
    b832:	bd30      	pop	{r4, r5, pc}
    b834:	3201      	adds	r2, #1
    b836:	e7ea      	b.n	b80e <rpc_transport_ipc_msg_tx_free+0xa>
    b838:	2000ca18 	.word	0x2000ca18

0000b83c <handle_modem_rpc_msg>:
    b83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b840:	2500      	movs	r5, #0
    b842:	4606      	mov	r6, r0
    b844:	460f      	mov	r7, r1
    b846:	4628      	mov	r0, r5
    b848:	f8df 8064 	ldr.w	r8, [pc, #100]	; b8b0 <handle_modem_rpc_msg+0x74>
    b84c:	6833      	ldr	r3, [r6, #0]
    b84e:	42ab      	cmp	r3, r5
    b850:	d801      	bhi.n	b856 <handle_modem_rpc_msg+0x1a>
    b852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b856:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
    b85a:	6863      	ldr	r3, [r4, #4]
    b85c:	b2db      	uxtb	r3, r3
    b85e:	2b01      	cmp	r3, #1
    b860:	d117      	bne.n	b892 <handle_modem_rpc_msg+0x56>
    b862:	6862      	ldr	r2, [r4, #4]
    b864:	f8b8 3000 	ldrh.w	r3, [r8]
    b868:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
    b86c:	d111      	bne.n	b892 <handle_modem_rpc_msg+0x56>
    b86e:	2f02      	cmp	r7, #2
    b870:	68a0      	ldr	r0, [r4, #8]
    b872:	d110      	bne.n	b896 <handle_modem_rpc_msg+0x5a>
    b874:	f7ff ff66 	bl	b744 <rpc_handle_data_message>
    b878:	b990      	cbnz	r0, b8a0 <handle_modem_rpc_msg+0x64>
    b87a:	6863      	ldr	r3, [r4, #4]
    b87c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b880:	f043 0303 	orr.w	r3, r3, #3
    b884:	6063      	str	r3, [r4, #4]
    b886:	2001      	movs	r0, #1
    b888:	f8b8 3000 	ldrh.w	r3, [r8]
    b88c:	3301      	adds	r3, #1
    b88e:	f8a8 3000 	strh.w	r3, [r8]
    b892:	3501      	adds	r5, #1
    b894:	e7da      	b.n	b84c <handle_modem_rpc_msg+0x10>
    b896:	6801      	ldr	r1, [r0, #0]
    b898:	0c09      	lsrs	r1, r1, #16
    b89a:	f002 fe88 	bl	e5ae <rpc_handle_ctrl_message>
    b89e:	e7eb      	b.n	b878 <handle_modem_rpc_msg+0x3c>
    b8a0:	2801      	cmp	r0, #1
    b8a2:	d1f0      	bne.n	b886 <handle_modem_rpc_msg+0x4a>
    b8a4:	6863      	ldr	r3, [r4, #4]
    b8a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b8aa:	f043 0302 	orr.w	r3, r3, #2
    b8ae:	e7e9      	b.n	b884 <handle_modem_rpc_msg+0x48>
    b8b0:	2000cdd8 	.word	0x2000cdd8

0000b8b4 <rpc_message_handler>:
    b8b4:	b538      	push	{r3, r4, r5, lr}
    b8b6:	4d07      	ldr	r5, [pc, #28]	; (b8d4 <rpc_message_handler+0x20>)
    b8b8:	2101      	movs	r1, #1
    b8ba:	6828      	ldr	r0, [r5, #0]
    b8bc:	f7ff ffbe 	bl	b83c <handle_modem_rpc_msg>
    b8c0:	2102      	movs	r1, #2
    b8c2:	4604      	mov	r4, r0
    b8c4:	6868      	ldr	r0, [r5, #4]
    b8c6:	f7ff ffb9 	bl	b83c <handle_modem_rpc_msg>
    b8ca:	2800      	cmp	r0, #0
    b8cc:	d1f4      	bne.n	b8b8 <rpc_message_handler+0x4>
    b8ce:	2c00      	cmp	r4, #0
    b8d0:	d1f2      	bne.n	b8b8 <rpc_message_handler+0x4>
    b8d2:	bd38      	pop	{r3, r4, r5, pc}
    b8d4:	2000ca20 	.word	0x2000ca20

0000b8d8 <ipc_irq_handler>:
    b8d8:	b570      	push	{r4, r5, r6, lr}
    b8da:	2807      	cmp	r0, #7
    b8dc:	d868      	bhi.n	b9b0 <ipc_irq_handler+0xd8>
    b8de:	e8df f000 	tbb	[pc, r0]
    b8e2:	670b      	.short	0x670b
    b8e4:	674b674f 	.word	0x674b674f
    b8e8:	0440      	.short	0x0440
    b8ea:	f000 fe27 	bl	c53c <ipc_trace_handler>
    b8ee:	2003      	movs	r0, #3
    b8f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b8f4:	f7ff b96c 	b.w	abd0 <nrf_modem_os_event_notify>
    b8f8:	2003      	movs	r0, #3
    b8fa:	4b2e      	ldr	r3, [pc, #184]	; (b9b4 <ipc_irq_handler+0xdc>)
    b8fc:	f8d3 4614 	ldr.w	r4, [r3, #1556]	; 0x614
    b900:	f8d3 6618 	ldr.w	r6, [r3, #1560]	; 0x618
    b904:	4b2c      	ldr	r3, [pc, #176]	; (b9b8 <ipc_irq_handler+0xe0>)
    b906:	781d      	ldrb	r5, [r3, #0]
    b908:	7018      	strb	r0, [r3, #0]
    b90a:	f000 fded 	bl	c4e8 <nrf_modem_state_set>
    b90e:	4b2b      	ldr	r3, [pc, #172]	; (b9bc <ipc_irq_handler+0xe4>)
    b910:	b2ed      	uxtb	r5, r5
    b912:	6818      	ldr	r0, [r3, #0]
    b914:	f002 fe1b 	bl	e54e <nrf_modem_os_sem_give>
    b918:	2d01      	cmp	r5, #1
    b91a:	d11c      	bne.n	b956 <ipc_irq_handler+0x7e>
    b91c:	4b28      	ldr	r3, [pc, #160]	; (b9c0 <ipc_irq_handler+0xe8>)
    b91e:	429c      	cmp	r4, r3
    b920:	d010      	beq.n	b944 <ipc_irq_handler+0x6c>
    b922:	d809      	bhi.n	b938 <ipc_irq_handler+0x60>
    b924:	3b02      	subs	r3, #2
    b926:	429c      	cmp	r4, r3
    b928:	d00f      	beq.n	b94a <ipc_irq_handler+0x72>
    b92a:	3301      	adds	r3, #1
    b92c:	429c      	cmp	r4, r3
    b92e:	d00f      	beq.n	b950 <ipc_irq_handler+0x78>
    b930:	4b24      	ldr	r3, [pc, #144]	; (b9c4 <ipc_irq_handler+0xec>)
    b932:	601c      	str	r4, [r3, #0]
    b934:	2000      	movs	r0, #0
    b936:	e7db      	b.n	b8f0 <ipc_irq_handler+0x18>
    b938:	4b23      	ldr	r3, [pc, #140]	; (b9c8 <ipc_irq_handler+0xf0>)
    b93a:	429c      	cmp	r4, r3
    b93c:	d1f8      	bne.n	b930 <ipc_irq_handler+0x58>
    b93e:	f06f 040c 	mvn.w	r4, #12
    b942:	e7f5      	b.n	b930 <ipc_irq_handler+0x58>
    b944:	f06f 040b 	mvn.w	r4, #11
    b948:	e7f2      	b.n	b930 <ipc_irq_handler+0x58>
    b94a:	f06f 0415 	mvn.w	r4, #21
    b94e:	e7ef      	b.n	b930 <ipc_irq_handler+0x58>
    b950:	f06f 0485 	mvn.w	r4, #133	; 0x85
    b954:	e7ec      	b.n	b930 <ipc_irq_handler+0x58>
    b956:	4631      	mov	r1, r6
    b958:	f3c4 000b 	ubfx	r0, r4, #0, #12
    b95c:	f000 fdb8 	bl	c4d0 <nrf_modem_fault_handler_internal>
    b960:	e7e8      	b.n	b934 <ipc_irq_handler+0x5c>
    b962:	2202      	movs	r2, #2
    b964:	4b14      	ldr	r3, [pc, #80]	; (b9b8 <ipc_irq_handler+0xe0>)
    b966:	2000      	movs	r0, #0
    b968:	701a      	strb	r2, [r3, #0]
    b96a:	f000 fdbd 	bl	c4e8 <nrf_modem_state_set>
    b96e:	4b13      	ldr	r3, [pc, #76]	; (b9bc <ipc_irq_handler+0xe4>)
    b970:	6818      	ldr	r0, [r3, #0]
    b972:	f002 fdec 	bl	e54e <nrf_modem_os_sem_give>
    b976:	e7dd      	b.n	b934 <ipc_irq_handler+0x5c>
    b978:	f7ff ff9c 	bl	b8b4 <rpc_message_handler>
    b97c:	2002      	movs	r0, #2
    b97e:	e7b7      	b.n	b8f0 <ipc_irq_handler+0x18>
    b980:	4b0d      	ldr	r3, [pc, #52]	; (b9b8 <ipc_irq_handler+0xe0>)
    b982:	781a      	ldrb	r2, [r3, #0]
    b984:	2a01      	cmp	r2, #1
    b986:	b2d0      	uxtb	r0, r2
    b988:	d10e      	bne.n	b9a8 <ipc_irq_handler+0xd0>
    b98a:	4a10      	ldr	r2, [pc, #64]	; (b9cc <ipc_irq_handler+0xf4>)
    b98c:	6811      	ldr	r1, [r2, #0]
    b98e:	4a10      	ldr	r2, [pc, #64]	; (b9d0 <ipc_irq_handler+0xf8>)
    b990:	688c      	ldr	r4, [r1, #8]
    b992:	6054      	str	r4, [r2, #4]
    b994:	6849      	ldr	r1, [r1, #4]
    b996:	6011      	str	r1, [r2, #0]
    b998:	2200      	movs	r2, #0
    b99a:	701a      	strb	r2, [r3, #0]
    b99c:	f000 fda4 	bl	c4e8 <nrf_modem_state_set>
    b9a0:	4b06      	ldr	r3, [pc, #24]	; (b9bc <ipc_irq_handler+0xe4>)
    b9a2:	6818      	ldr	r0, [r3, #0]
    b9a4:	f002 fdd3 	bl	e54e <nrf_modem_os_sem_give>
    b9a8:	f7ff ff84 	bl	b8b4 <rpc_message_handler>
    b9ac:	2001      	movs	r0, #1
    b9ae:	e79f      	b.n	b8f0 <ipc_irq_handler+0x18>
    b9b0:	bd70      	pop	{r4, r5, r6, pc}
    b9b2:	bf00      	nop
    b9b4:	4002a000 	.word	0x4002a000
    b9b8:	2000cde1 	.word	0x2000cde1
    b9bc:	2000ca08 	.word	0x2000ca08
    b9c0:	00010022 	.word	0x00010022
    b9c4:	2000ca1c 	.word	0x2000ca1c
    b9c8:	00013032 	.word	0x00013032
    b9cc:	2000ca04 	.word	0x2000ca04
    b9d0:	2000ca20 	.word	0x2000ca20

0000b9d4 <rpc_transport_ipc_data_msg_send>:
    b9d4:	b570      	push	{r4, r5, r6, lr}
    b9d6:	4b16      	ldr	r3, [pc, #88]	; (ba30 <rpc_transport_ipc_data_msg_send+0x5c>)
    b9d8:	6842      	ldr	r2, [r0, #4]
    b9da:	681b      	ldr	r3, [r3, #0]
    b9dc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    b9e0:	f042 0202 	orr.w	r2, r2, #2
    b9e4:	1ac3      	subs	r3, r0, r3
    b9e6:	6042      	str	r2, [r0, #4]
    b9e8:	4812      	ldr	r0, [pc, #72]	; (ba34 <rpc_transport_ipc_data_msg_send+0x60>)
    b9ea:	4a13      	ldr	r2, [pc, #76]	; (ba38 <rpc_transport_ipc_data_msg_send+0x64>)
    b9ec:	6801      	ldr	r1, [r0, #0]
    b9ee:	f3c3 1389 	ubfx	r3, r3, #6, #10
    b9f2:	e8d2 4fdf 	ldaexh	r4, [r2]
    b9f6:	1c65      	adds	r5, r4, #1
    b9f8:	e8c2 5fd6 	stlexh	r6, r5, [r2]
    b9fc:	2e00      	cmp	r6, #0
    b9fe:	d1f8      	bne.n	b9f2 <rpc_transport_ipc_data_msg_send+0x1e>
    ba00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    ba04:	684a      	ldr	r2, [r1, #4]
    ba06:	b292      	uxth	r2, r2
    ba08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    ba0c:	604a      	str	r2, [r1, #4]
    ba0e:	6802      	ldr	r2, [r0, #0]
    ba10:	2003      	movs	r0, #3
    ba12:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    ba16:	6853      	ldr	r3, [r2, #4]
    ba18:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    ba1c:	f043 0301 	orr.w	r3, r3, #1
    ba20:	6053      	str	r3, [r2, #4]
    ba22:	f002 fd8a 	bl	e53a <nrf_modem_os_busywait>
    ba26:	2201      	movs	r2, #1
    ba28:	4b04      	ldr	r3, [pc, #16]	; (ba3c <rpc_transport_ipc_data_msg_send+0x68>)
    ba2a:	60da      	str	r2, [r3, #12]
    ba2c:	bd70      	pop	{r4, r5, r6, pc}
    ba2e:	bf00      	nop
    ba30:	2000ca10 	.word	0x2000ca10
    ba34:	2000ca18 	.word	0x2000ca18
    ba38:	2000cdda 	.word	0x2000cdda
    ba3c:	4002a000 	.word	0x4002a000

0000ba40 <rpc_transport_ipc_ctrl_msg_alloc>:
    ba40:	230a      	movs	r3, #10
    ba42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ba44:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    ba48:	4e0c      	ldr	r6, [pc, #48]	; (ba7c <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
    ba4a:	4f0d      	ldr	r7, [pc, #52]	; (ba80 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
    ba4c:	9301      	str	r3, [sp, #4]
    ba4e:	6831      	ldr	r1, [r6, #0]
    ba50:	6838      	ldr	r0, [r7, #0]
    ba52:	f002 fddc 	bl	e60e <rpc_transport_ipc_msg_alloc>
    ba56:	4604      	mov	r4, r0
    ba58:	b940      	cbnz	r0, ba6c <rpc_transport_ipc_ctrl_msg_alloc+0x2c>
    ba5a:	f002 fd76 	bl	e54a <nrf_modem_os_is_in_isr>
    ba5e:	b940      	cbnz	r0, ba72 <rpc_transport_ipc_ctrl_msg_alloc+0x32>
    ba60:	2001      	movs	r0, #1
    ba62:	a901      	add	r1, sp, #4
    ba64:	f7fe ffd8 	bl	aa18 <nrf_modem_os_timedwait>
    ba68:	306e      	adds	r0, #110	; 0x6e
    ba6a:	d1f0      	bne.n	ba4e <rpc_transport_ipc_ctrl_msg_alloc+0xe>
    ba6c:	4620      	mov	r0, r4
    ba6e:	b003      	add	sp, #12
    ba70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ba72:	9801      	ldr	r0, [sp, #4]
    ba74:	4368      	muls	r0, r5
    ba76:	f002 fd60 	bl	e53a <nrf_modem_os_busywait>
    ba7a:	e7e8      	b.n	ba4e <rpc_transport_ipc_ctrl_msg_alloc+0xe>
    ba7c:	2000ca0c 	.word	0x2000ca0c
    ba80:	2000ca14 	.word	0x2000ca14

0000ba84 <rpc_transport_ipc_data_msg_alloc>:
    ba84:	4b05      	ldr	r3, [pc, #20]	; (ba9c <rpc_transport_ipc_data_msg_alloc+0x18>)
    ba86:	781b      	ldrb	r3, [r3, #0]
    ba88:	b92b      	cbnz	r3, ba96 <rpc_transport_ipc_data_msg_alloc+0x12>
    ba8a:	4b05      	ldr	r3, [pc, #20]	; (baa0 <rpc_transport_ipc_data_msg_alloc+0x1c>)
    ba8c:	6819      	ldr	r1, [r3, #0]
    ba8e:	4b05      	ldr	r3, [pc, #20]	; (baa4 <rpc_transport_ipc_data_msg_alloc+0x20>)
    ba90:	6818      	ldr	r0, [r3, #0]
    ba92:	f002 bdbc 	b.w	e60e <rpc_transport_ipc_msg_alloc>
    ba96:	2000      	movs	r0, #0
    ba98:	4770      	bx	lr
    ba9a:	bf00      	nop
    ba9c:	2000cde0 	.word	0x2000cde0
    baa0:	2000ca10 	.word	0x2000ca10
    baa4:	2000ca18 	.word	0x2000ca18

0000baa8 <rpc_transport_ipc_init>:
    baa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    baac:	b095      	sub	sp, #84	; 0x54
    baae:	2238      	movs	r2, #56	; 0x38
    bab0:	2100      	movs	r1, #0
    bab2:	4606      	mov	r6, r0
    bab4:	a803      	add	r0, sp, #12
    bab6:	f003 f914 	bl	ece2 <memset>
    baba:	2302      	movs	r3, #2
    babc:	9304      	str	r3, [sp, #16]
    babe:	2308      	movs	r3, #8
    bac0:	9306      	str	r3, [sp, #24]
    bac2:	2320      	movs	r3, #32
    bac4:	9308      	str	r3, [sp, #32]
    bac6:	2304      	movs	r3, #4
    bac8:	930d      	str	r3, [sp, #52]	; 0x34
    baca:	2310      	movs	r3, #16
    bacc:	2540      	movs	r5, #64	; 0x40
    bace:	930f      	str	r3, [sp, #60]	; 0x3c
    bad0:	2380      	movs	r3, #128	; 0x80
    bad2:	2201      	movs	r2, #1
    bad4:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
    bad8:	23d5      	movs	r3, #213	; 0xd5
    bada:	2100      	movs	r1, #0
    badc:	4855      	ldr	r0, [pc, #340]	; (bc34 <rpc_transport_ipc_init+0x18c>)
    bade:	920b      	str	r2, [sp, #44]	; 0x2c
    bae0:	9313      	str	r3, [sp, #76]	; 0x4c
    bae2:	f7ff f85b 	bl	ab9c <nrf_modem_os_sem_init>
    bae6:	4605      	mov	r5, r0
    bae8:	2800      	cmp	r0, #0
    baea:	f040 809f 	bne.w	bc2c <rpc_transport_ipc_init+0x184>
    baee:	4602      	mov	r2, r0
    baf0:	4951      	ldr	r1, [pc, #324]	; (bc38 <rpc_transport_ipc_init+0x190>)
    baf2:	7930      	ldrb	r0, [r6, #4]
    baf4:	f7ff fd90 	bl	b618 <nrfx_ipc_init>
    baf8:	a803      	add	r0, sp, #12
    bafa:	f7ff fda5 	bl	b648 <nrfx_ipc_config_load>
    bafe:	6834      	ldr	r4, [r6, #0]
    bb00:	6862      	ldr	r2, [r4, #4]
    bb02:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
    bb06:	f040 8089 	bne.w	bc1c <rpc_transport_ipc_init+0x174>
    bb0a:	6961      	ldr	r1, [r4, #20]
    bb0c:	68e3      	ldr	r3, [r4, #12]
    bb0e:	440b      	add	r3, r1
    bb10:	69e1      	ldr	r1, [r4, #28]
    bb12:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
    bb16:	440b      	add	r3, r1
    bb18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    bb1c:	d87e      	bhi.n	bc1c <rpc_transport_ipc_init+0x174>
    bb1e:	6820      	ldr	r0, [r4, #0]
    bb20:	4629      	mov	r1, r5
    bb22:	f003 f8de 	bl	ece2 <memset>
    bb26:	6833      	ldr	r3, [r6, #0]
    bb28:	681c      	ldr	r4, [r3, #0]
    bb2a:	f8d3 901c 	ldr.w	r9, [r3, #28]
    bb2e:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
    bb32:	9201      	str	r2, [sp, #4]
    bb34:	f104 0760 	add.w	r7, r4, #96	; 0x60
    bb38:	4a40      	ldr	r2, [pc, #256]	; (bc3c <rpc_transport_ipc_init+0x194>)
    bb3a:	f104 08a4 	add.w	r8, r4, #164	; 0xa4
    bb3e:	f104 0b20 	add.w	fp, r4, #32
    bb42:	f1b9 0f00 	cmp.w	r9, #0
    bb46:	d15c      	bne.n	bc02 <rpc_transport_ipc_init+0x15a>
    bb48:	f8c2 b000 	str.w	fp, [r2]
    bb4c:	2500      	movs	r5, #0
    bb4e:	f04f 0a01 	mov.w	sl, #1
    bb52:	7025      	strb	r5, [r4, #0]
    bb54:	7065      	strb	r5, [r4, #1]
    bb56:	f884 a002 	strb.w	sl, [r4, #2]
    bb5a:	70e5      	strb	r5, [r4, #3]
    bb5c:	6833      	ldr	r3, [r6, #0]
    bb5e:	4640      	mov	r0, r8
    bb60:	691b      	ldr	r3, [r3, #16]
    bb62:	6063      	str	r3, [r4, #4]
    bb64:	6833      	ldr	r3, [r6, #0]
    bb66:	695b      	ldr	r3, [r3, #20]
    bb68:	f8c4 b014 	str.w	fp, [r4, #20]
    bb6c:	60a3      	str	r3, [r4, #8]
    bb6e:	4b34      	ldr	r3, [pc, #208]	; (bc40 <rpc_transport_ipc_init+0x198>)
    bb70:	f8c4 9018 	str.w	r9, [r4, #24]
    bb74:	f8c3 8000 	str.w	r8, [r3]
    bb78:	4b32      	ldr	r3, [pc, #200]	; (bc44 <rpc_transport_ipc_init+0x19c>)
    bb7a:	60e7      	str	r7, [r4, #12]
    bb7c:	601f      	str	r7, [r3, #0]
    bb7e:	2308      	movs	r3, #8
    bb80:	f8c4 8010 	str.w	r8, [r4, #16]
    bb84:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
    bb88:	f888 5001 	strb.w	r5, [r8, #1]
    bb8c:	f888 5002 	strb.w	r5, [r8, #2]
    bb90:	f888 5003 	strb.w	r5, [r8, #3]
    bb94:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    bb98:	707d      	strb	r5, [r7, #1]
    bb9a:	70bd      	strb	r5, [r7, #2]
    bb9c:	70fd      	strb	r5, [r7, #3]
    bb9e:	f002 fd1e 	bl	e5de <rpc_list_preambles_init>
    bba2:	4638      	mov	r0, r7
    bba4:	f002 fd1b 	bl	e5de <rpc_list_preambles_init>
    bba8:	4b27      	ldr	r3, [pc, #156]	; (bc48 <rpc_transport_ipc_init+0x1a0>)
    bbaa:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
    bbae:	601a      	str	r2, [r3, #0]
    bbb0:	4b26      	ldr	r3, [pc, #152]	; (bc4c <rpc_transport_ipc_init+0x1a4>)
    bbb2:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
    bbb6:	601a      	str	r2, [r3, #0]
    bbb8:	6831      	ldr	r1, [r6, #0]
    bbba:	4b25      	ldr	r3, [pc, #148]	; (bc50 <rpc_transport_ipc_init+0x1a8>)
    bbbc:	6019      	str	r1, [r3, #0]
    bbbe:	4b25      	ldr	r3, [pc, #148]	; (bc54 <rpc_transport_ipc_init+0x1ac>)
    bbc0:	4925      	ldr	r1, [pc, #148]	; (bc58 <rpc_transport_ipc_init+0x1b0>)
    bbc2:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
    bbc6:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
    bbca:	4b24      	ldr	r3, [pc, #144]	; (bc5c <rpc_transport_ipc_init+0x1b4>)
    bbcc:	4c24      	ldr	r4, [pc, #144]	; (bc60 <rpc_transport_ipc_init+0x1b8>)
    bbce:	801d      	strh	r5, [r3, #0]
    bbd0:	4b24      	ldr	r3, [pc, #144]	; (bc64 <rpc_transport_ipc_init+0x1bc>)
    bbd2:	6025      	str	r5, [r4, #0]
    bbd4:	801d      	strh	r5, [r3, #0]
    bbd6:	4b24      	ldr	r3, [pc, #144]	; (bc68 <rpc_transport_ipc_init+0x1c0>)
    bbd8:	f883 a000 	strb.w	sl, [r3]
    bbdc:	4b23      	ldr	r3, [pc, #140]	; (bc6c <rpc_transport_ipc_init+0x1c4>)
    bbde:	9502      	str	r5, [sp, #8]
    bbe0:	611d      	str	r5, [r3, #16]
    bbe2:	691b      	ldr	r3, [r3, #16]
    bbe4:	9302      	str	r3, [sp, #8]
    bbe6:	9b02      	ldr	r3, [sp, #8]
    bbe8:	4b12      	ldr	r3, [pc, #72]	; (bc34 <rpc_transport_ipc_init+0x18c>)
    bbea:	6818      	ldr	r0, [r3, #0]
    bbec:	f002 fcb1 	bl	e552 <nrf_modem_os_sem_take>
    bbf0:	b9c8      	cbnz	r0, bc26 <rpc_transport_ipc_init+0x17e>
    bbf2:	6824      	ldr	r4, [r4, #0]
    bbf4:	b9a4      	cbnz	r4, bc20 <rpc_transport_ipc_init+0x178>
    bbf6:	4b1e      	ldr	r3, [pc, #120]	; (bc70 <rpc_transport_ipc_init+0x1c8>)
    bbf8:	701c      	strb	r4, [r3, #0]
    bbfa:	4620      	mov	r0, r4
    bbfc:	b015      	add	sp, #84	; 0x54
    bbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc02:	699b      	ldr	r3, [r3, #24]
    bc04:	f104 0940 	add.w	r9, r4, #64	; 0x40
    bc08:	6463      	str	r3, [r4, #68]	; 0x44
    bc0a:	6833      	ldr	r3, [r6, #0]
    bc0c:	4648      	mov	r0, r9
    bc0e:	69db      	ldr	r3, [r3, #28]
    bc10:	f8c2 b000 	str.w	fp, [r2]
    bc14:	6423      	str	r3, [r4, #64]	; 0x40
    bc16:	f000 fc75 	bl	c504 <ipc_trace_init>
    bc1a:	e797      	b.n	bb4c <rpc_transport_ipc_init+0xa4>
    bc1c:	f06f 0415 	mvn.w	r4, #21
    bc20:	f7ff fd32 	bl	b688 <nrfx_ipc_uninit>
    bc24:	e7e9      	b.n	bbfa <rpc_transport_ipc_init+0x152>
    bc26:	f06f 0473 	mvn.w	r4, #115	; 0x73
    bc2a:	e7f9      	b.n	bc20 <rpc_transport_ipc_init+0x178>
    bc2c:	f06f 042d 	mvn.w	r4, #45	; 0x2d
    bc30:	e7e3      	b.n	bbfa <rpc_transport_ipc_init+0x152>
    bc32:	bf00      	nop
    bc34:	2000ca08 	.word	0x2000ca08
    bc38:	0000b8d9 	.word	0x0000b8d9
    bc3c:	2000ca04 	.word	0x2000ca04
    bc40:	2000ca18 	.word	0x2000ca18
    bc44:	2000ca14 	.word	0x2000ca14
    bc48:	2000ca10 	.word	0x2000ca10
    bc4c:	2000ca0c 	.word	0x2000ca0c
    bc50:	2000ca00 	.word	0x2000ca00
    bc54:	4002a000 	.word	0x4002a000
    bc58:	000249f0 	.word	0x000249f0
    bc5c:	2000cdda 	.word	0x2000cdda
    bc60:	2000ca1c 	.word	0x2000ca1c
    bc64:	2000cdd8 	.word	0x2000cdd8
    bc68:	2000cde1 	.word	0x2000cde1
    bc6c:	40005600 	.word	0x40005600
    bc70:	2000cde0 	.word	0x2000cde0

0000bc74 <rpc_transport_ipc_ctrl_msg_send>:
    bc74:	b570      	push	{r4, r5, r6, lr}
    bc76:	4b16      	ldr	r3, [pc, #88]	; (bcd0 <rpc_transport_ipc_ctrl_msg_send+0x5c>)
    bc78:	6842      	ldr	r2, [r0, #4]
    bc7a:	681b      	ldr	r3, [r3, #0]
    bc7c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    bc80:	f042 0201 	orr.w	r2, r2, #1
    bc84:	1ac3      	subs	r3, r0, r3
    bc86:	6042      	str	r2, [r0, #4]
    bc88:	4812      	ldr	r0, [pc, #72]	; (bcd4 <rpc_transport_ipc_ctrl_msg_send+0x60>)
    bc8a:	4a13      	ldr	r2, [pc, #76]	; (bcd8 <rpc_transport_ipc_ctrl_msg_send+0x64>)
    bc8c:	6801      	ldr	r1, [r0, #0]
    bc8e:	f3c3 1389 	ubfx	r3, r3, #6, #10
    bc92:	e8d2 4fdf 	ldaexh	r4, [r2]
    bc96:	1c65      	adds	r5, r4, #1
    bc98:	e8c2 5fd6 	stlexh	r6, r5, [r2]
    bc9c:	2e00      	cmp	r6, #0
    bc9e:	d1f8      	bne.n	bc92 <rpc_transport_ipc_ctrl_msg_send+0x1e>
    bca0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    bca4:	684a      	ldr	r2, [r1, #4]
    bca6:	b292      	uxth	r2, r2
    bca8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    bcac:	604a      	str	r2, [r1, #4]
    bcae:	6802      	ldr	r2, [r0, #0]
    bcb0:	2003      	movs	r0, #3
    bcb2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    bcb6:	6853      	ldr	r3, [r2, #4]
    bcb8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    bcbc:	f043 0301 	orr.w	r3, r3, #1
    bcc0:	6053      	str	r3, [r2, #4]
    bcc2:	f002 fc3a 	bl	e53a <nrf_modem_os_busywait>
    bcc6:	2201      	movs	r2, #1
    bcc8:	4b04      	ldr	r3, [pc, #16]	; (bcdc <rpc_transport_ipc_ctrl_msg_send+0x68>)
    bcca:	605a      	str	r2, [r3, #4]
    bccc:	bd70      	pop	{r4, r5, r6, pc}
    bcce:	bf00      	nop
    bcd0:	2000ca0c 	.word	0x2000ca0c
    bcd4:	2000ca14 	.word	0x2000ca14
    bcd8:	2000cdda 	.word	0x2000cdda
    bcdc:	4002a000 	.word	0x4002a000

0000bce0 <rpc_transport_ipc_request_shutdown>:
    bce0:	b510      	push	{r4, lr}
    bce2:	f7ff fead 	bl	ba40 <rpc_transport_ipc_ctrl_msg_alloc>
    bce6:	2401      	movs	r4, #1
    bce8:	2200      	movs	r2, #0
    bcea:	2103      	movs	r1, #3
    bcec:	7004      	strb	r4, [r0, #0]
    bcee:	7081      	strb	r1, [r0, #2]
    bcf0:	7042      	strb	r2, [r0, #1]
    bcf2:	70c2      	strb	r2, [r0, #3]
    bcf4:	f7ff ffbe 	bl	bc74 <rpc_transport_ipc_ctrl_msg_send>
    bcf8:	4b05      	ldr	r3, [pc, #20]	; (bd10 <rpc_transport_ipc_request_shutdown+0x30>)
    bcfa:	701c      	strb	r4, [r3, #0]
    bcfc:	f002 fc82 	bl	e604 <rpc_transport_ipc_data_rx_suspend>
    bd00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bd04:	4b03      	ldr	r3, [pc, #12]	; (bd14 <rpc_transport_ipc_request_shutdown+0x34>)
    bd06:	f247 5130 	movw	r1, #30000	; 0x7530
    bd0a:	6818      	ldr	r0, [r3, #0]
    bd0c:	f002 bc21 	b.w	e552 <nrf_modem_os_sem_take>
    bd10:	2000cde0 	.word	0x2000cde0
    bd14:	2000ca08 	.word	0x2000ca08

0000bd18 <rpc_transport_ipc_msg_data_rx_free>:
    bd18:	b510      	push	{r4, lr}
    bd1a:	4b0a      	ldr	r3, [pc, #40]	; (bd44 <rpc_transport_ipc_msg_data_rx_free+0x2c>)
    bd1c:	4604      	mov	r4, r0
    bd1e:	781b      	ldrb	r3, [r3, #0]
    bd20:	2b03      	cmp	r3, #3
    bd22:	d00e      	beq.n	bd42 <rpc_transport_ipc_msg_data_rx_free+0x2a>
    bd24:	f7ff fe8c 	bl	ba40 <rpc_transport_ipc_ctrl_msg_alloc>
    bd28:	b158      	cbz	r0, bd42 <rpc_transport_ipc_msg_data_rx_free+0x2a>
    bd2a:	2101      	movs	r1, #1
    bd2c:	2200      	movs	r2, #0
    bd2e:	7001      	strb	r1, [r0, #0]
    bd30:	2102      	movs	r1, #2
    bd32:	6084      	str	r4, [r0, #8]
    bd34:	7042      	strb	r2, [r0, #1]
    bd36:	7081      	strb	r1, [r0, #2]
    bd38:	70c2      	strb	r2, [r0, #3]
    bd3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bd3e:	f7ff bf99 	b.w	bc74 <rpc_transport_ipc_ctrl_msg_send>
    bd42:	bd10      	pop	{r4, pc}
    bd44:	2000cde1 	.word	0x2000cde1

0000bd48 <at_cmd_send>:
    bd48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    bd4c:	4605      	mov	r5, r0
    bd4e:	2000      	movs	r0, #0
    bd50:	4617      	mov	r7, r2
    bd52:	4688      	mov	r8, r1
    bd54:	461e      	mov	r6, r3
    bd56:	f002 fc81 	bl	e65c <rpc_client_msg_alloc>
    bd5a:	4602      	mov	r2, r0
    bd5c:	b940      	cbnz	r0, bd70 <at_cmd_send+0x28>
    bd5e:	b115      	cbz	r5, bd66 <at_cmd_send+0x1e>
    bd60:	4628      	mov	r0, r5
    bd62:	f002 fca5 	bl	e6b0 <rpc_client_msg_data_tx_free>
    bd66:	f06f 000b 	mvn.w	r0, #11
    bd6a:	b002      	add	sp, #8
    bd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd70:	f06f 0358 	mvn.w	r3, #88	; 0x58
    bd74:	2400      	movs	r4, #0
    bd76:	7303      	strb	r3, [r0, #12]
    bd78:	2304      	movs	r3, #4
    bd7a:	6005      	str	r5, [r0, #0]
    bd7c:	4d0e      	ldr	r5, [pc, #56]	; (bdb8 <at_cmd_send+0x70>)
    bd7e:	7203      	strb	r3, [r0, #8]
    bd80:	7344      	strb	r4, [r0, #13]
    bd82:	7384      	strb	r4, [r0, #14]
    bd84:	73c4      	strb	r4, [r0, #15]
    bd86:	7244      	strb	r4, [r0, #9]
    bd88:	7284      	strb	r4, [r0, #10]
    bd8a:	72c4      	strb	r4, [r0, #11]
    bd8c:	f8c0 8004 	str.w	r8, [r0, #4]
    bd90:	4639      	mov	r1, r7
    bd92:	2003      	movs	r0, #3
    bd94:	702c      	strb	r4, [r5, #0]
    bd96:	f002 fc7d 	bl	e694 <rpc_client_msg_send>
    bd9a:	f04f 33ff 	mov.w	r3, #4294967295
    bd9e:	9301      	str	r3, [sp, #4]
    bda0:	782b      	ldrb	r3, [r5, #0]
    bda2:	42b3      	cmp	r3, r6
    bda4:	d101      	bne.n	bdaa <at_cmd_send+0x62>
    bda6:	2000      	movs	r0, #0
    bda8:	e7df      	b.n	bd6a <at_cmd_send+0x22>
    bdaa:	2002      	movs	r0, #2
    bdac:	a901      	add	r1, sp, #4
    bdae:	f7fe fe33 	bl	aa18 <nrf_modem_os_timedwait>
    bdb2:	2800      	cmp	r0, #0
    bdb4:	d0f4      	beq.n	bda0 <at_cmd_send+0x58>
    bdb6:	e7d8      	b.n	bd6a <at_cmd_send+0x22>
    bdb8:	2000cde2 	.word	0x2000cde2

0000bdbc <at_response_match>:
    bdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bdbe:	4605      	mov	r5, r0
    bdc0:	2400      	movs	r4, #0
    bdc2:	4f0f      	ldr	r7, [pc, #60]	; (be00 <at_response_match+0x44>)
    bdc4:	f857 6b04 	ldr.w	r6, [r7], #4
    bdc8:	4628      	mov	r0, r5
    bdca:	4631      	mov	r1, r6
    bdcc:	f002 ffb0 	bl	ed30 <strstr>
    bdd0:	b928      	cbnz	r0, bdde <at_response_match+0x22>
    bdd2:	3401      	adds	r4, #1
    bdd4:	2c04      	cmp	r4, #4
    bdd6:	d1f5      	bne.n	bdc4 <at_response_match+0x8>
    bdd8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    bddc:	e00d      	b.n	bdfa <at_response_match+0x3e>
    bdde:	b16c      	cbz	r4, bdfc <at_response_match+0x40>
    bde0:	1ea3      	subs	r3, r4, #2
    bde2:	2b01      	cmp	r3, #1
    bde4:	d8f8      	bhi.n	bdd8 <at_response_match+0x1c>
    bde6:	4630      	mov	r0, r6
    bde8:	f7fc fb14 	bl	8414 <strlen>
    bdec:	220a      	movs	r2, #10
    bdee:	2100      	movs	r1, #0
    bdf0:	4428      	add	r0, r5
    bdf2:	f001 fc8d 	bl	d710 <strtol>
    bdf6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
    bdfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bdfc:	4620      	mov	r0, r4
    bdfe:	e7fc      	b.n	bdfa <at_response_match+0x3e>
    be00:	0000f464 	.word	0x0000f464

0000be04 <at_vsprintf>:
    be04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    be08:	2500      	movs	r5, #0
    be0a:	4681      	mov	r9, r0
    be0c:	460f      	mov	r7, r1
    be0e:	4810      	ldr	r0, [pc, #64]	; (be50 <at_vsprintf+0x4c>)
    be10:	4629      	mov	r1, r5
    be12:	4690      	mov	r8, r2
    be14:	461e      	mov	r6, r3
    be16:	9301      	str	r3, [sp, #4]
    be18:	f001 fc84 	bl	d724 <vsniprintf>
    be1c:	1e04      	subs	r4, r0, #0
    be1e:	db11      	blt.n	be44 <at_vsprintf+0x40>
    be20:	3401      	adds	r4, #1
    be22:	4620      	mov	r0, r4
    be24:	f002 fc42 	bl	e6ac <rpc_client_msg_data_tx_alloc>
    be28:	f8c9 0000 	str.w	r0, [r9]
    be2c:	b168      	cbz	r0, be4a <at_vsprintf+0x46>
    be2e:	4633      	mov	r3, r6
    be30:	4642      	mov	r2, r8
    be32:	4621      	mov	r1, r4
    be34:	9601      	str	r6, [sp, #4]
    be36:	f001 fc75 	bl	d724 <vsniprintf>
    be3a:	4628      	mov	r0, r5
    be3c:	603c      	str	r4, [r7, #0]
    be3e:	b003      	add	sp, #12
    be40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    be44:	f06f 0015 	mvn.w	r0, #21
    be48:	e7f9      	b.n	be3e <at_vsprintf+0x3a>
    be4a:	f06f 000b 	mvn.w	r0, #11
    be4e:	e7f6      	b.n	be3e <at_vsprintf+0x3a>
    be50:	0000f340 	.word	0x0000f340

0000be54 <nrf_modem_at_printf>:
    be54:	b40f      	push	{r0, r1, r2, r3}
    be56:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    be58:	9c08      	ldr	r4, [sp, #32]
    be5a:	f000 fb4b 	bl	c4f4 <nrf_modem_state_is_initialized>
    be5e:	2800      	cmp	r0, #0
    be60:	d039      	beq.n	bed6 <nrf_modem_at_printf+0x82>
    be62:	2c00      	cmp	r4, #0
    be64:	d03a      	beq.n	bedc <nrf_modem_at_printf+0x88>
    be66:	4622      	mov	r2, r4
    be68:	ab09      	add	r3, sp, #36	; 0x24
    be6a:	a903      	add	r1, sp, #12
    be6c:	a802      	add	r0, sp, #8
    be6e:	9301      	str	r3, [sp, #4]
    be70:	f7ff ffc8 	bl	be04 <at_vsprintf>
    be74:	4604      	mov	r4, r0
    be76:	b960      	cbnz	r0, be92 <nrf_modem_at_printf+0x3e>
    be78:	4e1a      	ldr	r6, [pc, #104]	; (bee4 <nrf_modem_at_printf+0x90>)
    be7a:	f04f 31ff 	mov.w	r1, #4294967295
    be7e:	6830      	ldr	r0, [r6, #0]
    be80:	f002 fb67 	bl	e552 <nrf_modem_os_sem_take>
    be84:	4603      	mov	r3, r0
    be86:	9802      	ldr	r0, [sp, #8]
    be88:	b14b      	cbz	r3, be9e <nrf_modem_at_printf+0x4a>
    be8a:	f002 fc11 	bl	e6b0 <rpc_client_msg_data_tx_free>
    be8e:	f06f 040a 	mvn.w	r4, #10
    be92:	4620      	mov	r0, r4
    be94:	b004      	add	sp, #16
    be96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    be9a:	b004      	add	sp, #16
    be9c:	4770      	bx	lr
    be9e:	2302      	movs	r3, #2
    bea0:	2201      	movs	r2, #1
    bea2:	9903      	ldr	r1, [sp, #12]
    bea4:	f7ff ff50 	bl	bd48 <at_cmd_send>
    bea8:	4604      	mov	r4, r0
    beaa:	b118      	cbz	r0, beb4 <nrf_modem_at_printf+0x60>
    beac:	6830      	ldr	r0, [r6, #0]
    beae:	f002 fb4e 	bl	e54e <nrf_modem_os_sem_give>
    beb2:	e7ee      	b.n	be92 <nrf_modem_at_printf+0x3e>
    beb4:	4d0c      	ldr	r5, [pc, #48]	; (bee8 <nrf_modem_at_printf+0x94>)
    beb6:	682b      	ldr	r3, [r5, #0]
    beb8:	6818      	ldr	r0, [r3, #0]
    beba:	f7ff ff7f 	bl	bdbc <at_response_match>
    bebe:	4604      	mov	r4, r0
    bec0:	6830      	ldr	r0, [r6, #0]
    bec2:	f002 fb44 	bl	e54e <nrf_modem_os_sem_give>
    bec6:	682b      	ldr	r3, [r5, #0]
    bec8:	6818      	ldr	r0, [r3, #0]
    beca:	f002 fbed 	bl	e6a8 <rpc_client_msg_data_rx_free>
    bece:	6828      	ldr	r0, [r5, #0]
    bed0:	f002 fbe7 	bl	e6a2 <rpc_client_msg_rx_free>
    bed4:	e7dd      	b.n	be92 <nrf_modem_at_printf+0x3e>
    bed6:	f04f 34ff 	mov.w	r4, #4294967295
    beda:	e7da      	b.n	be92 <nrf_modem_at_printf+0x3e>
    bedc:	f06f 040d 	mvn.w	r4, #13
    bee0:	e7d7      	b.n	be92 <nrf_modem_at_printf+0x3e>
    bee2:	bf00      	nop
    bee4:	2000ca34 	.word	0x2000ca34
    bee8:	2000ca30 	.word	0x2000ca30

0000beec <rpc_at_event_handler>:
    beec:	b538      	push	{r3, r4, r5, lr}
    beee:	68c3      	ldr	r3, [r0, #12]
    bef0:	4604      	mov	r4, r0
    bef2:	2ba7      	cmp	r3, #167	; 0xa7
    bef4:	d003      	beq.n	befe <rpc_at_event_handler+0x12>
    bef6:	6820      	ldr	r0, [r4, #0]
    bef8:	f002 fbd6 	bl	e6a8 <rpc_client_msg_data_rx_free>
    befc:	e008      	b.n	bf10 <rpc_at_event_handler+0x24>
    befe:	2903      	cmp	r1, #3
    bf00:	d008      	beq.n	bf14 <rpc_at_event_handler+0x28>
    bf02:	2904      	cmp	r1, #4
    bf04:	d021      	beq.n	bf4a <rpc_at_event_handler+0x5e>
    bf06:	2902      	cmp	r1, #2
    bf08:	bf02      	ittt	eq
    bf0a:	2201      	moveq	r2, #1
    bf0c:	4b12      	ldreq	r3, [pc, #72]	; (bf58 <rpc_at_event_handler+0x6c>)
    bf0e:	701a      	strbeq	r2, [r3, #0]
    bf10:	2000      	movs	r0, #0
    bf12:	bd38      	pop	{r3, r4, r5, pc}
    bf14:	4d11      	ldr	r5, [pc, #68]	; (bf5c <rpc_at_event_handler+0x70>)
    bf16:	682b      	ldr	r3, [r5, #0]
    bf18:	b13b      	cbz	r3, bf2a <rpc_at_event_handler+0x3e>
    bf1a:	6800      	ldr	r0, [r0, #0]
    bf1c:	4798      	blx	r3
    bf1e:	2300      	movs	r3, #0
    bf20:	6820      	ldr	r0, [r4, #0]
    bf22:	602b      	str	r3, [r5, #0]
    bf24:	f002 fbc0 	bl	e6a8 <rpc_client_msg_data_rx_free>
    bf28:	e006      	b.n	bf38 <rpc_at_event_handler+0x4c>
    bf2a:	4b0b      	ldr	r3, [pc, #44]	; (bf58 <rpc_at_event_handler+0x6c>)
    bf2c:	781a      	ldrb	r2, [r3, #0]
    bf2e:	2a02      	cmp	r2, #2
    bf30:	d105      	bne.n	bf3e <rpc_at_event_handler+0x52>
    bf32:	6800      	ldr	r0, [r0, #0]
    bf34:	2800      	cmp	r0, #0
    bf36:	d1f5      	bne.n	bf24 <rpc_at_event_handler+0x38>
    bf38:	2000      	movs	r0, #0
    bf3a:	b2c0      	uxtb	r0, r0
    bf3c:	e7e9      	b.n	bf12 <rpc_at_event_handler+0x26>
    bf3e:	4a08      	ldr	r2, [pc, #32]	; (bf60 <rpc_at_event_handler+0x74>)
    bf40:	6010      	str	r0, [r2, #0]
    bf42:	2202      	movs	r2, #2
    bf44:	2001      	movs	r0, #1
    bf46:	701a      	strb	r2, [r3, #0]
    bf48:	e7f7      	b.n	bf3a <rpc_at_event_handler+0x4e>
    bf4a:	4b06      	ldr	r3, [pc, #24]	; (bf64 <rpc_at_event_handler+0x78>)
    bf4c:	681b      	ldr	r3, [r3, #0]
    bf4e:	2b00      	cmp	r3, #0
    bf50:	d0d1      	beq.n	bef6 <rpc_at_event_handler+0xa>
    bf52:	6800      	ldr	r0, [r0, #0]
    bf54:	4798      	blx	r3
    bf56:	e7ce      	b.n	bef6 <rpc_at_event_handler+0xa>
    bf58:	2000cde2 	.word	0x2000cde2
    bf5c:	2000ca28 	.word	0x2000ca28
    bf60:	2000ca30 	.word	0x2000ca30
    bf64:	2000ca2c 	.word	0x2000ca2c

0000bf68 <sock_find>:
    bf68:	b530      	push	{r4, r5, lr}
    bf6a:	4602      	mov	r2, r0
    bf6c:	2300      	movs	r3, #0
    bf6e:	2564      	movs	r5, #100	; 0x64
    bf70:	4905      	ldr	r1, [pc, #20]	; (bf88 <sock_find+0x20>)
    bf72:	fb05 f403 	mul.w	r4, r5, r3
    bf76:	1860      	adds	r0, r4, r1
    bf78:	590c      	ldr	r4, [r1, r4]
    bf7a:	4294      	cmp	r4, r2
    bf7c:	d003      	beq.n	bf86 <sock_find+0x1e>
    bf7e:	3301      	adds	r3, #1
    bf80:	2b08      	cmp	r3, #8
    bf82:	d1f6      	bne.n	bf72 <sock_find+0xa>
    bf84:	2000      	movs	r0, #0
    bf86:	bd30      	pop	{r4, r5, pc}
    bf88:	2000ca38 	.word	0x2000ca38

0000bf8c <sock_flow_control_set>:
    bf8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bf90:	1e02      	subs	r2, r0, #0
    bf92:	4c10      	ldr	r4, [pc, #64]	; (bfd4 <sock_flow_control_set+0x48>)
    bf94:	bf18      	it	ne
    bf96:	2201      	movne	r2, #1
    bf98:	4606      	mov	r6, r0
    bf9a:	2500      	movs	r5, #0
    bf9c:	46a0      	mov	r8, r4
    bf9e:	f04f 0964 	mov.w	r9, #100	; 0x64
    bfa2:	4b0d      	ldr	r3, [pc, #52]	; (bfd8 <sock_flow_control_set+0x4c>)
    bfa4:	4f0d      	ldr	r7, [pc, #52]	; (bfdc <sock_flow_control_set+0x50>)
    bfa6:	701a      	strb	r2, [r3, #0]
    bfa8:	6823      	ldr	r3, [r4, #0]
    bfaa:	42bb      	cmp	r3, r7
    bfac:	d00a      	beq.n	bfc4 <sock_flow_control_set+0x38>
    bfae:	fb09 8305 	mla	r3, r9, r5, r8
    bfb2:	7f1a      	ldrb	r2, [r3, #28]
    bfb4:	f366 1286 	bfi	r2, r6, #6, #1
    bfb8:	771a      	strb	r2, [r3, #28]
    bfba:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bfbc:	b113      	cbz	r3, bfc4 <sock_flow_control_set+0x38>
    bfbe:	4620      	mov	r0, r4
    bfc0:	f002 fbb7 	bl	e732 <sock_pollcb>
    bfc4:	3501      	adds	r5, #1
    bfc6:	2d08      	cmp	r5, #8
    bfc8:	f104 0464 	add.w	r4, r4, #100	; 0x64
    bfcc:	d1ec      	bne.n	bfa8 <sock_flow_control_set+0x1c>
    bfce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bfd2:	bf00      	nop
    bfd4:	2000ca38 	.word	0x2000ca38
    bfd8:	2000cde3 	.word	0x2000cde3
    bfdc:	1badf11e 	.word	0x1badf11e

0000bfe0 <on_getaddrinfo_res>:
    bfe0:	2301      	movs	r3, #1
    bfe2:	4a03      	ldr	r2, [pc, #12]	; (bff0 <on_getaddrinfo_res+0x10>)
    bfe4:	7013      	strb	r3, [r2, #0]
    bfe6:	4a03      	ldr	r2, [pc, #12]	; (bff4 <on_getaddrinfo_res+0x14>)
    bfe8:	6010      	str	r0, [r2, #0]
    bfea:	4618      	mov	r0, r3
    bfec:	4770      	bx	lr
    bfee:	bf00      	nop
    bff0:	2000cde4 	.word	0x2000cde4
    bff4:	2000cd58 	.word	0x2000cd58

0000bff8 <rpc_ip_event_handler>:
    bff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bffa:	f248 030f 	movw	r3, #32783	; 0x800f
    bffe:	4299      	cmp	r1, r3
    c000:	4606      	mov	r6, r0
    c002:	460d      	mov	r5, r1
    c004:	d03b      	beq.n	c07e <rpc_ip_event_handler+0x86>
    c006:	d822      	bhi.n	c04e <rpc_ip_event_handler+0x56>
    c008:	f248 030d 	movw	r3, #32781	; 0x800d
    c00c:	4299      	cmp	r1, r3
    c00e:	d02f      	beq.n	c070 <rpc_ip_event_handler+0x78>
    c010:	f248 030e 	movw	r3, #32782	; 0x800e
    c014:	4299      	cmp	r1, r3
    c016:	d02f      	beq.n	c078 <rpc_ip_event_handler+0x80>
    c018:	6900      	ldr	r0, [r0, #16]
    c01a:	f7ff ffa5 	bl	bf68 <sock_find>
    c01e:	4604      	mov	r4, r0
    c020:	b308      	cbz	r0, c066 <rpc_ip_event_handler+0x6e>
    c022:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    c026:	d91e      	bls.n	c066 <rpc_ip_event_handler+0x6e>
    c028:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
    c02c:	3d01      	subs	r5, #1
    c02e:	2d0b      	cmp	r5, #11
    c030:	d819      	bhi.n	c066 <rpc_ip_event_handler+0x6e>
    c032:	e8df f015 	tbh	[pc, r5, lsl #1]
    c036:	0090      	.short	0x0090
    c038:	009400b3 	.word	0x009400b3
    c03c:	00940094 	.word	0x00940094
    c040:	00ee00ee 	.word	0x00ee00ee
    c044:	00990094 	.word	0x00990094
    c048:	00180018 	.word	0x00180018
    c04c:	00d2      	.short	0x00d2
    c04e:	f249 0304 	movw	r3, #36868	; 0x9004
    c052:	4299      	cmp	r1, r3
    c054:	d016      	beq.n	c084 <rpc_ip_event_handler+0x8c>
    c056:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
    c05a:	d924      	bls.n	c0a6 <rpc_ip_event_handler+0xae>
    c05c:	68c0      	ldr	r0, [r0, #12]
    c05e:	f7ff ff83 	bl	bf68 <sock_find>
    c062:	4604      	mov	r4, r0
    c064:	bb70      	cbnz	r0, c0c4 <rpc_ip_event_handler+0xcc>
    c066:	6830      	ldr	r0, [r6, #0]
    c068:	b1b0      	cbz	r0, c098 <rpc_ip_event_handler+0xa0>
    c06a:	f002 fb1d 	bl	e6a8 <rpc_client_msg_data_rx_free>
    c06e:	e013      	b.n	c098 <rpc_ip_event_handler+0xa0>
    c070:	f7ff ffb6 	bl	bfe0 <on_getaddrinfo_res>
    c074:	b2c0      	uxtb	r0, r0
    c076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c078:	f002 fbe3 	bl	e842 <on_getifaddrs_res>
    c07c:	e7fa      	b.n	c074 <rpc_ip_event_handler+0x7c>
    c07e:	f002 fbde 	bl	e83e <on_conf_dnssrv_res>
    c082:	e7f7      	b.n	c074 <rpc_ip_event_handler+0x7c>
    c084:	6903      	ldr	r3, [r0, #16]
    c086:	2b03      	cmp	r3, #3
    c088:	d806      	bhi.n	c098 <rpc_ip_event_handler+0xa0>
    c08a:	e8df f003 	tbb	[pc, r3]
    c08e:	0a02      	.short	0x0a02
    c090:	0702      	.short	0x0702
    c092:	2000      	movs	r0, #0
    c094:	f7ff ff7a 	bl	bf8c <sock_flow_control_set>
    c098:	2000      	movs	r0, #0
    c09a:	e7ec      	b.n	c076 <rpc_ip_event_handler+0x7e>
    c09c:	2201      	movs	r2, #1
    c09e:	4b65      	ldr	r3, [pc, #404]	; (c234 <rpc_ip_event_handler+0x23c>)
    c0a0:	701a      	strb	r2, [r3, #0]
    c0a2:	2001      	movs	r0, #1
    c0a4:	e7f6      	b.n	c094 <rpc_ip_event_handler+0x9c>
    c0a6:	6900      	ldr	r0, [r0, #16]
    c0a8:	f7ff ff5e 	bl	bf68 <sock_find>
    c0ac:	4604      	mov	r4, r0
    c0ae:	2800      	cmp	r0, #0
    c0b0:	d0d9      	beq.n	c066 <rpc_ip_event_handler+0x6e>
    c0b2:	f248 0381 	movw	r3, #32897	; 0x8081
    c0b6:	429d      	cmp	r5, r3
    c0b8:	d1d5      	bne.n	c066 <rpc_ip_event_handler+0x6e>
    c0ba:	4601      	mov	r1, r0
    c0bc:	4630      	mov	r0, r6
    c0be:	f000 f8bb 	bl	c238 <on_tls_attach_res>
    c0c2:	e04f      	b.n	c164 <rpc_ip_event_handler+0x16c>
    c0c4:	f249 0302 	movw	r3, #36866	; 0x9002
    c0c8:	429d      	cmp	r5, r3
    c0ca:	f000 809e 	beq.w	c20a <rpc_ip_event_handler+0x212>
    c0ce:	d835      	bhi.n	c13c <rpc_ip_event_handler+0x144>
    c0d0:	f002 fb7e 	bl	e7d0 <sock_has_stream_error>
    c0d4:	4607      	mov	r7, r0
    c0d6:	b9e0      	cbnz	r0, c112 <rpc_ip_event_handler+0x11a>
    c0d8:	2010      	movs	r0, #16
    c0da:	f7fe fd95 	bl	ac08 <nrf_modem_os_alloc>
    c0de:	4605      	mov	r5, r0
    c0e0:	b1b8      	cbz	r0, c112 <rpc_ip_event_handler+0x11a>
    c0e2:	4639      	mov	r1, r7
    c0e4:	2210      	movs	r2, #16
    c0e6:	f002 fdfc 	bl	ece2 <memset>
    c0ea:	6833      	ldr	r3, [r6, #0]
    c0ec:	606b      	str	r3, [r5, #4]
    c0ee:	6873      	ldr	r3, [r6, #4]
    c0f0:	812b      	strh	r3, [r5, #8]
    c0f2:	8a71      	ldrh	r1, [r6, #18]
    c0f4:	2900      	cmp	r1, #0
    c0f6:	f000 8097 	beq.w	c228 <rpc_ip_event_handler+0x230>
    c0fa:	8a32      	ldrh	r2, [r6, #16]
    c0fc:	f106 0014 	add.w	r0, r6, #20
    c100:	f002 fade 	bl	e6c0 <sockaddr_init>
    c104:	60e8      	str	r0, [r5, #12]
    c106:	2800      	cmp	r0, #0
    c108:	f040 808e 	bne.w	c228 <rpc_ip_event_handler+0x230>
    c10c:	4628      	mov	r0, r5
    c10e:	f7fe fd83 	bl	ac18 <nrf_modem_os_free>
    c112:	6830      	ldr	r0, [r6, #0]
    c114:	f002 fac8 	bl	e6a8 <rpc_client_msg_data_rx_free>
    c118:	4620      	mov	r0, r4
    c11a:	f002 fb2c 	bl	e776 <sock_is_stream>
    c11e:	b148      	cbz	r0, c134 <rpc_ip_event_handler+0x13c>
    c120:	4620      	mov	r0, r4
    c122:	f002 fb55 	bl	e7d0 <sock_has_stream_error>
    c126:	b928      	cbnz	r0, c134 <rpc_ip_event_handler+0x13c>
    c128:	230c      	movs	r3, #12
    c12a:	61a3      	str	r3, [r4, #24]
    c12c:	7f23      	ldrb	r3, [r4, #28]
    c12e:	f063 037e 	orn	r3, r3, #126	; 0x7e
    c132:	7723      	strb	r3, [r4, #28]
    c134:	4620      	mov	r0, r4
    c136:	f002 fb23 	bl	e780 <sock_is_datagram>
    c13a:	e025      	b.n	c188 <rpc_ip_event_handler+0x190>
    c13c:	f249 0303 	movw	r3, #36867	; 0x9003
    c140:	429d      	cmp	r5, r3
    c142:	d018      	beq.n	c176 <rpc_ip_event_handler+0x17e>
    c144:	f249 0382 	movw	r3, #36994	; 0x9082
    c148:	429d      	cmp	r5, r3
    c14a:	d18c      	bne.n	c066 <rpc_ip_event_handler+0x6e>
    c14c:	4601      	mov	r1, r0
    c14e:	4630      	mov	r0, r6
    c150:	f000 f886 	bl	c260 <on_tls_handshake_ntf>
    c154:	e006      	b.n	c164 <rpc_ip_event_handler+0x16c>
    c156:	6973      	ldr	r3, [r6, #20]
    c158:	b90b      	cbnz	r3, c15e <rpc_ip_event_handler+0x166>
    c15a:	69b3      	ldr	r3, [r6, #24]
    c15c:	6003      	str	r3, [r0, #0]
    c15e:	4630      	mov	r0, r6
    c160:	f002 fbbc 	bl	e8dc <res_forward>
    c164:	4605      	mov	r5, r0
    c166:	e010      	b.n	c18a <rpc_ip_event_handler+0x192>
    c168:	7f03      	ldrb	r3, [r0, #28]
    c16a:	f023 0303 	bic.w	r3, r3, #3
    c16e:	f043 0303 	orr.w	r3, r3, #3
    c172:	7703      	strb	r3, [r0, #28]
    c174:	e7f3      	b.n	c15e <rpc_ip_event_handler+0x166>
    c176:	7f03      	ldrb	r3, [r0, #28]
    c178:	f043 0301 	orr.w	r3, r3, #1
    c17c:	7703      	strb	r3, [r0, #28]
    c17e:	6930      	ldr	r0, [r6, #16]
    c180:	2869      	cmp	r0, #105	; 0x69
    c182:	d112      	bne.n	c1aa <rpc_ip_event_handler+0x1b2>
    c184:	2368      	movs	r3, #104	; 0x68
    c186:	61a3      	str	r3, [r4, #24]
    c188:	2500      	movs	r5, #0
    c18a:	4620      	mov	r0, r4
    c18c:	f002 fb2a 	bl	e7e4 <sock_has_pollcb>
    c190:	b110      	cbz	r0, c198 <rpc_ip_event_handler+0x1a0>
    c192:	4620      	mov	r0, r4
    c194:	f002 facd 	bl	e732 <sock_pollcb>
    c198:	b2e8      	uxtb	r0, r5
    c19a:	e76c      	b.n	c076 <rpc_ip_event_handler+0x7e>
    c19c:	7f03      	ldrb	r3, [r0, #28]
    c19e:	68f5      	ldr	r5, [r6, #12]
    c1a0:	f36f 0382 	bfc	r3, #2, #1
    c1a4:	7703      	strb	r3, [r0, #28]
    c1a6:	6970      	ldr	r0, [r6, #20]
    c1a8:	b118      	cbz	r0, c1b2 <rpc_ip_event_handler+0x1ba>
    c1aa:	f000 f8eb 	bl	c384 <rpc_error_to_nrf_errno>
    c1ae:	61a0      	str	r0, [r4, #24]
    c1b0:	e7ea      	b.n	c188 <rpc_ip_event_handler+0x190>
    c1b2:	4620      	mov	r0, r4
    c1b4:	f002 fae9 	bl	e78a <sock_proto_is_secure>
    c1b8:	b918      	cbnz	r0, c1c2 <rpc_ip_event_handler+0x1ca>
    c1ba:	7f23      	ldrb	r3, [r4, #28]
    c1bc:	f043 0308 	orr.w	r3, r3, #8
    c1c0:	7723      	strb	r3, [r4, #28]
    c1c2:	4620      	mov	r0, r4
    c1c4:	f002 fae1 	bl	e78a <sock_proto_is_secure>
    c1c8:	2800      	cmp	r0, #0
    c1ca:	d0cb      	beq.n	c164 <rpc_ip_event_handler+0x16c>
    c1cc:	2d00      	cmp	r5, #0
    c1ce:	d0dc      	beq.n	c18a <rpc_ip_event_handler+0x192>
    c1d0:	2100      	movs	r1, #0
    c1d2:	4620      	mov	r0, r4
    c1d4:	f000 f85e 	bl	c294 <tls_attach>
    c1d8:	e7d6      	b.n	c188 <rpc_ip_event_handler+0x190>
    c1da:	7f43      	ldrb	r3, [r0, #29]
    c1dc:	3b01      	subs	r3, #1
    c1de:	7743      	strb	r3, [r0, #29]
    c1e0:	6973      	ldr	r3, [r6, #20]
    c1e2:	2b00      	cmp	r3, #0
    c1e4:	d1bb      	bne.n	c15e <rpc_ip_event_handler+0x166>
    c1e6:	4630      	mov	r0, r6
    c1e8:	f002 fb76 	bl	e8d8 <res_cookie_get>
    c1ec:	69b2      	ldr	r2, [r6, #24]
    c1ee:	6843      	ldr	r3, [r0, #4]
    c1f0:	601a      	str	r2, [r3, #0]
    c1f2:	6842      	ldr	r2, [r0, #4]
    c1f4:	7f13      	ldrb	r3, [r2, #28]
    c1f6:	f043 0308 	orr.w	r3, r3, #8
    c1fa:	7713      	strb	r3, [r2, #28]
    c1fc:	6843      	ldr	r3, [r0, #4]
    c1fe:	6922      	ldr	r2, [r4, #16]
    c200:	611a      	str	r2, [r3, #16]
    c202:	6843      	ldr	r3, [r0, #4]
    c204:	6962      	ldr	r2, [r4, #20]
    c206:	615a      	str	r2, [r3, #20]
    c208:	e7a9      	b.n	c15e <rpc_ip_event_handler+0x166>
    c20a:	7f43      	ldrb	r3, [r0, #29]
    c20c:	3301      	adds	r3, #1
    c20e:	7743      	strb	r3, [r0, #29]
    c210:	e7ba      	b.n	c188 <rpc_ip_event_handler+0x190>
    c212:	4630      	mov	r0, r6
    c214:	f002 fb60 	bl	e8d8 <res_cookie_get>
    c218:	6973      	ldr	r3, [r6, #20]
    c21a:	b913      	cbnz	r3, c222 <rpc_ip_event_handler+0x22a>
    c21c:	69b3      	ldr	r3, [r6, #24]
    c21e:	6043      	str	r3, [r0, #4]
    c220:	e79d      	b.n	c15e <rpc_ip_event_handler+0x166>
    c222:	f04f 33ff 	mov.w	r3, #4294967295
    c226:	e7fa      	b.n	c21e <rpc_ip_event_handler+0x226>
    c228:	4629      	mov	r1, r5
    c22a:	4620      	mov	r0, r4
    c22c:	f002 fa99 	bl	e762 <sock_pkt_append>
    c230:	e7aa      	b.n	c188 <rpc_ip_event_handler+0x190>
    c232:	bf00      	nop
    c234:	2000cde5 	.word	0x2000cde5

0000c238 <on_tls_attach_res>:
    c238:	b510      	push	{r4, lr}
    c23a:	6943      	ldr	r3, [r0, #20]
    c23c:	460c      	mov	r4, r1
    c23e:	b15b      	cbz	r3, c258 <on_tls_attach_res+0x20>
    c240:	7f0b      	ldrb	r3, [r1, #28]
    c242:	f36f 1304 	bfc	r3, #4, #1
    c246:	770b      	strb	r3, [r1, #28]
    c248:	6940      	ldr	r0, [r0, #20]
    c24a:	f000 f89b 	bl	c384 <rpc_error_to_nrf_errno>
    c24e:	4b03      	ldr	r3, [pc, #12]	; (c25c <on_tls_attach_res+0x24>)
    c250:	61a0      	str	r0, [r4, #24]
    c252:	6818      	ldr	r0, [r3, #0]
    c254:	f002 f97b 	bl	e54e <nrf_modem_os_sem_give>
    c258:	2000      	movs	r0, #0
    c25a:	bd10      	pop	{r4, pc}
    c25c:	2000cd5c 	.word	0x2000cd5c

0000c260 <on_tls_handshake_ntf>:
    c260:	b510      	push	{r4, lr}
    c262:	7f0b      	ldrb	r3, [r1, #28]
    c264:	460c      	mov	r4, r1
    c266:	f36f 1304 	bfc	r3, #4, #1
    c26a:	770b      	strb	r3, [r1, #28]
    c26c:	6900      	ldr	r0, [r0, #16]
    c26e:	b958      	cbnz	r0, c288 <on_tls_handshake_ntf+0x28>
    c270:	b2db      	uxtb	r3, r3
    c272:	f023 0328 	bic.w	r3, r3, #40	; 0x28
    c276:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    c27a:	770b      	strb	r3, [r1, #28]
    c27c:	4b04      	ldr	r3, [pc, #16]	; (c290 <on_tls_handshake_ntf+0x30>)
    c27e:	6818      	ldr	r0, [r3, #0]
    c280:	f002 f965 	bl	e54e <nrf_modem_os_sem_give>
    c284:	2000      	movs	r0, #0
    c286:	bd10      	pop	{r4, pc}
    c288:	f000 f87c 	bl	c384 <rpc_error_to_nrf_errno>
    c28c:	61a0      	str	r0, [r4, #24]
    c28e:	e7f5      	b.n	c27c <on_tls_handshake_ntf+0x1c>
    c290:	2000cd5c 	.word	0x2000cd5c

0000c294 <tls_attach>:
    c294:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c298:	f8df 80e4 	ldr.w	r8, [pc, #228]	; c380 <tls_attach+0xec>
    c29c:	4605      	mov	r5, r0
    c29e:	f8d8 0000 	ldr.w	r0, [r8]
    c2a2:	9101      	str	r1, [sp, #4]
    c2a4:	f002 f955 	bl	e552 <nrf_modem_os_sem_take>
    c2a8:	4607      	mov	r7, r0
    c2aa:	b150      	cbz	r0, c2c2 <tls_attach+0x2e>
    c2ac:	9b01      	ldr	r3, [sp, #4]
    c2ae:	2b00      	cmp	r3, #0
    c2b0:	d163      	bne.n	c37a <tls_attach+0xe6>
    c2b2:	2310      	movs	r3, #16
    c2b4:	61ab      	str	r3, [r5, #24]
    c2b6:	f04f 37ff 	mov.w	r7, #4294967295
    c2ba:	4638      	mov	r0, r7
    c2bc:	b002      	add	sp, #8
    c2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c2c2:	6c28      	ldr	r0, [r5, #64]	; 0x40
    c2c4:	b1a8      	cbz	r0, c2f2 <tls_attach+0x5e>
    c2c6:	f7fc f8a5 	bl	8414 <strlen>
    c2ca:	1c46      	adds	r6, r0, #1
    c2cc:	4630      	mov	r0, r6
    c2ce:	f002 f9c5 	bl	e65c <rpc_client_msg_alloc>
    c2d2:	4604      	mov	r4, r0
    c2d4:	b978      	cbnz	r0, c2f6 <tls_attach+0x62>
    c2d6:	4628      	mov	r0, r5
    c2d8:	f002 fa67 	bl	e7aa <sock_is_nonblock>
    c2dc:	b108      	cbz	r0, c2e2 <tls_attach+0x4e>
    c2de:	2369      	movs	r3, #105	; 0x69
    c2e0:	61ab      	str	r3, [r5, #24]
    c2e2:	f8d8 0000 	ldr.w	r0, [r8]
    c2e6:	f002 f932 	bl	e54e <nrf_modem_os_sem_give>
    c2ea:	2069      	movs	r0, #105	; 0x69
    c2ec:	f002 f927 	bl	e53e <nrf_modem_os_errno_set>
    c2f0:	e7e1      	b.n	c2b6 <tls_attach+0x22>
    c2f2:	463e      	mov	r6, r7
    c2f4:	e7ea      	b.n	c2cc <tls_attach+0x38>
    c2f6:	682b      	ldr	r3, [r5, #0]
    c2f8:	2204      	movs	r2, #4
    c2fa:	6103      	str	r3, [r0, #16]
    c2fc:	2300      	movs	r3, #0
    c2fe:	7202      	strb	r2, [r0, #8]
    c300:	7243      	strb	r3, [r0, #9]
    c302:	7283      	strb	r3, [r0, #10]
    c304:	72c3      	strb	r3, [r0, #11]
    c306:	f895 2047 	ldrb.w	r2, [r5, #71]	; 0x47
    c30a:	f105 0144 	add.w	r1, r5, #68	; 0x44
    c30e:	3201      	adds	r2, #1
    c310:	0092      	lsls	r2, r2, #2
    c312:	6082      	str	r2, [r0, #8]
    c314:	3014      	adds	r0, #20
    c316:	f002 fcd7 	bl	ecc8 <memcpy>
    c31a:	b1e6      	cbz	r6, c356 <tls_attach+0xc2>
    c31c:	4632      	mov	r2, r6
    c31e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    c320:	6820      	ldr	r0, [r4, #0]
    c322:	f002 fce6 	bl	ecf2 <strncpy>
    c326:	6066      	str	r6, [r4, #4]
    c328:	7f2b      	ldrb	r3, [r5, #28]
    c32a:	2004      	movs	r0, #4
    c32c:	f043 0310 	orr.w	r3, r3, #16
    c330:	4622      	mov	r2, r4
    c332:	f247 0181 	movw	r1, #28801	; 0x7081
    c336:	772b      	strb	r3, [r5, #28]
    c338:	f002 f9ac 	bl	e694 <rpc_client_msg_send>
    c33c:	4628      	mov	r0, r5
    c33e:	f002 fa34 	bl	e7aa <sock_is_nonblock>
    c342:	2800      	cmp	r0, #0
    c344:	d1b9      	bne.n	c2ba <tls_attach+0x26>
    c346:	4628      	mov	r0, r5
    c348:	f002 fa2b 	bl	e7a2 <sock_is_attaching>
    c34c:	b940      	cbnz	r0, c360 <tls_attach+0xcc>
    c34e:	69a8      	ldr	r0, [r5, #24]
    c350:	2800      	cmp	r0, #0
    c352:	d0b2      	beq.n	c2ba <tls_attach+0x26>
    c354:	e7ca      	b.n	c2ec <tls_attach+0x58>
    c356:	7026      	strb	r6, [r4, #0]
    c358:	7066      	strb	r6, [r4, #1]
    c35a:	70a6      	strb	r6, [r4, #2]
    c35c:	70e6      	strb	r6, [r4, #3]
    c35e:	e7e2      	b.n	c326 <tls_attach+0x92>
    c360:	2002      	movs	r0, #2
    c362:	a901      	add	r1, sp, #4
    c364:	f7fe fb58 	bl	aa18 <nrf_modem_os_timedwait>
    c368:	f110 0f0b 	cmn.w	r0, #11
    c36c:	d005      	beq.n	c37a <tls_attach+0xe6>
    c36e:	2800      	cmp	r0, #0
    c370:	d0e9      	beq.n	c346 <tls_attach+0xb2>
    c372:	2800      	cmp	r0, #0
    c374:	bfb8      	it	lt
    c376:	4240      	neglt	r0, r0
    c378:	e7b8      	b.n	c2ec <tls_attach+0x58>
    c37a:	2074      	movs	r0, #116	; 0x74
    c37c:	e7b6      	b.n	c2ec <tls_attach+0x58>
    c37e:	bf00      	nop
    c380:	2000cd5c 	.word	0x2000cd5c

0000c384 <rpc_error_to_nrf_errno>:
    c384:	2870      	cmp	r0, #112	; 0x70
    c386:	bf9a      	itte	ls
    c388:	4b02      	ldrls	r3, [pc, #8]	; (c394 <rpc_error_to_nrf_errno+0x10>)
    c38a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    c38e:	4802      	ldrhi	r0, [pc, #8]	; (c398 <rpc_error_to_nrf_errno+0x14>)
    c390:	4770      	bx	lr
    c392:	bf00      	nop
    c394:	0000f474 	.word	0x0000f474
    c398:	baadbaad 	.word	0xbaadbaad

0000c39c <rpc_gnss_event_handler>:
    c39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c39e:	6804      	ldr	r4, [r0, #0]
    c3a0:	4606      	mov	r6, r0
    c3a2:	b13c      	cbz	r4, c3b4 <rpc_gnss_event_handler+0x18>
    c3a4:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
    c3a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    c3ac:	d104      	bne.n	c3b8 <rpc_gnss_event_handler+0x1c>
    c3ae:	4b41      	ldr	r3, [pc, #260]	; (c4b4 <rpc_gnss_event_handler+0x118>)
    c3b0:	e9c3 1400 	strd	r1, r4, [r3]
    c3b4:	2000      	movs	r0, #0
    c3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c3b8:	4d3f      	ldr	r5, [pc, #252]	; (c4b8 <rpc_gnss_event_handler+0x11c>)
    c3ba:	682b      	ldr	r3, [r5, #0]
    c3bc:	2b00      	cmp	r3, #0
    c3be:	d06f      	beq.n	c4a0 <rpc_gnss_event_handler+0x104>
    c3c0:	f244 0204 	movw	r2, #16388	; 0x4004
    c3c4:	4291      	cmp	r1, r2
    c3c6:	d80b      	bhi.n	c3e0 <rpc_gnss_event_handler+0x44>
    c3c8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    c3cc:	d968      	bls.n	c4a0 <rpc_gnss_event_handler+0x104>
    c3ce:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
    c3d2:	3902      	subs	r1, #2
    c3d4:	2902      	cmp	r1, #2
    c3d6:	d82a      	bhi.n	c42e <rpc_gnss_event_handler+0x92>
    c3d8:	e8df f001 	tbb	[pc, r1]
    c3dc:	5047      	.short	0x5047
    c3de:	59          	.byte	0x59
    c3df:	00          	.byte	0x00
    c3e0:	f244 1301 	movw	r3, #16641	; 0x4101
    c3e4:	4299      	cmp	r1, r3
    c3e6:	d02e      	beq.n	c446 <rpc_gnss_event_handler+0xaa>
    c3e8:	f244 2301 	movw	r3, #16897	; 0x4201
    c3ec:	4299      	cmp	r1, r3
    c3ee:	d157      	bne.n	c4a0 <rpc_gnss_event_handler+0x104>
    c3f0:	4e32      	ldr	r6, [pc, #200]	; (c4bc <rpc_gnss_event_handler+0x120>)
    c3f2:	6830      	ldr	r0, [r6, #0]
    c3f4:	b108      	cbz	r0, c3fa <rpc_gnss_event_handler+0x5e>
    c3f6:	f002 f957 	bl	e6a8 <rpc_client_msg_data_rx_free>
    c3fa:	2202      	movs	r2, #2
    c3fc:	4b30      	ldr	r3, [pc, #192]	; (c4c0 <rpc_gnss_event_handler+0x124>)
    c3fe:	6034      	str	r4, [r6, #0]
    c400:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
    c404:	701a      	strb	r2, [r3, #0]
    c406:	4e2f      	ldr	r6, [pc, #188]	; (c4c4 <rpc_gnss_event_handler+0x128>)
    c408:	f014 0708 	ands.w	r7, r4, #8
    c40c:	682b      	ldr	r3, [r5, #0]
    c40e:	7832      	ldrb	r2, [r6, #0]
    c410:	d025      	beq.n	c45e <rpc_gnss_event_handler+0xc2>
    c412:	b91a      	cbnz	r2, c41c <rpc_gnss_event_handler+0x80>
    c414:	2005      	movs	r0, #5
    c416:	4798      	blx	r3
    c418:	2301      	movs	r3, #1
    c41a:	7033      	strb	r3, [r6, #0]
    c41c:	07e3      	lsls	r3, r4, #31
    c41e:	d502      	bpl.n	c426 <rpc_gnss_event_handler+0x8a>
    c420:	2002      	movs	r0, #2
    c422:	682b      	ldr	r3, [r5, #0]
    c424:	4798      	blx	r3
    c426:	2001      	movs	r0, #1
    c428:	682b      	ldr	r3, [r5, #0]
    c42a:	4798      	blx	r3
    c42c:	e7c2      	b.n	c3b4 <rpc_gnss_event_handler+0x18>
    c42e:	4e23      	ldr	r6, [pc, #140]	; (c4bc <rpc_gnss_event_handler+0x120>)
    c430:	6830      	ldr	r0, [r6, #0]
    c432:	b108      	cbz	r0, c438 <rpc_gnss_event_handler+0x9c>
    c434:	f002 f938 	bl	e6a8 <rpc_client_msg_data_rx_free>
    c438:	2200      	movs	r2, #0
    c43a:	4b21      	ldr	r3, [pc, #132]	; (c4c0 <rpc_gnss_event_handler+0x124>)
    c43c:	6034      	str	r4, [r6, #0]
    c43e:	701a      	strb	r2, [r3, #0]
    c440:	f894 403d 	ldrb.w	r4, [r4, #61]	; 0x3d
    c444:	e7df      	b.n	c406 <rpc_gnss_event_handler+0x6a>
    c446:	4e1d      	ldr	r6, [pc, #116]	; (c4bc <rpc_gnss_event_handler+0x120>)
    c448:	6830      	ldr	r0, [r6, #0]
    c44a:	b108      	cbz	r0, c450 <rpc_gnss_event_handler+0xb4>
    c44c:	f002 f92c 	bl	e6a8 <rpc_client_msg_data_rx_free>
    c450:	2201      	movs	r2, #1
    c452:	4b1b      	ldr	r3, [pc, #108]	; (c4c0 <rpc_gnss_event_handler+0x124>)
    c454:	6034      	str	r4, [r6, #0]
    c456:	701a      	strb	r2, [r3, #0]
    c458:	f894 4041 	ldrb.w	r4, [r4, #65]	; 0x41
    c45c:	e7d3      	b.n	c406 <rpc_gnss_event_handler+0x6a>
    c45e:	2a00      	cmp	r2, #0
    c460:	d0dc      	beq.n	c41c <rpc_gnss_event_handler+0x80>
    c462:	2006      	movs	r0, #6
    c464:	4798      	blx	r3
    c466:	7037      	strb	r7, [r6, #0]
    c468:	e7d8      	b.n	c41c <rpc_gnss_event_handler+0x80>
    c46a:	4e17      	ldr	r6, [pc, #92]	; (c4c8 <rpc_gnss_event_handler+0x12c>)
    c46c:	6830      	ldr	r0, [r6, #0]
    c46e:	b108      	cbz	r0, c474 <rpc_gnss_event_handler+0xd8>
    c470:	f002 f91a 	bl	e6a8 <rpc_client_msg_data_rx_free>
    c474:	2003      	movs	r0, #3
    c476:	682b      	ldr	r3, [r5, #0]
    c478:	6034      	str	r4, [r6, #0]
    c47a:	e7d6      	b.n	c42a <rpc_gnss_event_handler+0x8e>
    c47c:	4e13      	ldr	r6, [pc, #76]	; (c4cc <rpc_gnss_event_handler+0x130>)
    c47e:	6830      	ldr	r0, [r6, #0]
    c480:	b108      	cbz	r0, c486 <rpc_gnss_event_handler+0xea>
    c482:	f002 f911 	bl	e6a8 <rpc_client_msg_data_rx_free>
    c486:	2004      	movs	r0, #4
    c488:	682b      	ldr	r3, [r5, #0]
    c48a:	6034      	str	r4, [r6, #0]
    c48c:	e7cd      	b.n	c42a <rpc_gnss_event_handler+0x8e>
    c48e:	7822      	ldrb	r2, [r4, #0]
    c490:	2a03      	cmp	r2, #3
    c492:	d805      	bhi.n	c4a0 <rpc_gnss_event_handler+0x104>
    c494:	e8df f002 	tbb	[pc, r2]
    c498:	0c0a0802 	.word	0x0c0a0802
    c49c:	2007      	movs	r0, #7
    c49e:	4798      	blx	r3
    c4a0:	6830      	ldr	r0, [r6, #0]
    c4a2:	f002 f901 	bl	e6a8 <rpc_client_msg_data_rx_free>
    c4a6:	e785      	b.n	c3b4 <rpc_gnss_event_handler+0x18>
    c4a8:	2008      	movs	r0, #8
    c4aa:	e7f8      	b.n	c49e <rpc_gnss_event_handler+0x102>
    c4ac:	2009      	movs	r0, #9
    c4ae:	e7f6      	b.n	c49e <rpc_gnss_event_handler+0x102>
    c4b0:	200a      	movs	r0, #10
    c4b2:	e7f4      	b.n	c49e <rpc_gnss_event_handler+0x102>
    c4b4:	2000cd70 	.word	0x2000cd70
    c4b8:	2000cd60 	.word	0x2000cd60
    c4bc:	2000cd6c 	.word	0x2000cd6c
    c4c0:	2000cde6 	.word	0x2000cde6
    c4c4:	2000cde7 	.word	0x2000cde7
    c4c8:	2000cd68 	.word	0x2000cd68
    c4cc:	2000cd64 	.word	0x2000cd64

0000c4d0 <nrf_modem_fault_handler_internal>:
    c4d0:	b507      	push	{r0, r1, r2, lr}
    c4d2:	4b04      	ldr	r3, [pc, #16]	; (c4e4 <nrf_modem_fault_handler_internal+0x14>)
    c4d4:	e9cd 0100 	strd	r0, r1, [sp]
    c4d8:	681b      	ldr	r3, [r3, #0]
    c4da:	4668      	mov	r0, sp
    c4dc:	4798      	blx	r3
    c4de:	b003      	add	sp, #12
    c4e0:	f85d fb04 	ldr.w	pc, [sp], #4
    c4e4:	2000cd78 	.word	0x2000cd78

0000c4e8 <nrf_modem_state_set>:
    c4e8:	4b01      	ldr	r3, [pc, #4]	; (c4f0 <nrf_modem_state_set+0x8>)
    c4ea:	7018      	strb	r0, [r3, #0]
    c4ec:	4770      	bx	lr
    c4ee:	bf00      	nop
    c4f0:	2000cde8 	.word	0x2000cde8

0000c4f4 <nrf_modem_state_is_initialized>:
    c4f4:	4b02      	ldr	r3, [pc, #8]	; (c500 <nrf_modem_state_is_initialized+0xc>)
    c4f6:	7818      	ldrb	r0, [r3, #0]
    c4f8:	1e43      	subs	r3, r0, #1
    c4fa:	4258      	negs	r0, r3
    c4fc:	4158      	adcs	r0, r3
    c4fe:	4770      	bx	lr
    c500:	2000cde8 	.word	0x2000cde8

0000c504 <ipc_trace_init>:
    c504:	2100      	movs	r1, #0
    c506:	4b07      	ldr	r3, [pc, #28]	; (c524 <ipc_trace_init+0x20>)
    c508:	2201      	movs	r2, #1
    c50a:	7019      	strb	r1, [r3, #0]
    c50c:	4b06      	ldr	r3, [pc, #24]	; (c528 <ipc_trace_init+0x24>)
    c50e:	7019      	strb	r1, [r3, #0]
    c510:	4b06      	ldr	r3, [pc, #24]	; (c52c <ipc_trace_init+0x28>)
    c512:	6019      	str	r1, [r3, #0]
    c514:	4b06      	ldr	r3, [pc, #24]	; (c530 <ipc_trace_init+0x2c>)
    c516:	6019      	str	r1, [r3, #0]
    c518:	4b06      	ldr	r3, [pc, #24]	; (c534 <ipc_trace_init+0x30>)
    c51a:	6018      	str	r0, [r3, #0]
    c51c:	4806      	ldr	r0, [pc, #24]	; (c538 <ipc_trace_init+0x34>)
    c51e:	f7fe bb3d 	b.w	ab9c <nrf_modem_os_sem_init>
    c522:	bf00      	nop
    c524:	2000cde9 	.word	0x2000cde9
    c528:	2000cdea 	.word	0x2000cdea
    c52c:	2000cd80 	.word	0x2000cd80
    c530:	2000cd84 	.word	0x2000cd84
    c534:	2000cd94 	.word	0x2000cd94
    c538:	2000cd7c 	.word	0x2000cd7c

0000c53c <ipc_trace_handler>:
    c53c:	b470      	push	{r4, r5, r6}
    c53e:	4b2d      	ldr	r3, [pc, #180]	; (c5f4 <ipc_trace_handler+0xb8>)
    c540:	681b      	ldr	r3, [r3, #0]
    c542:	6919      	ldr	r1, [r3, #16]
    c544:	6958      	ldr	r0, [r3, #20]
    c546:	7c1a      	ldrb	r2, [r3, #16]
    c548:	2200      	movs	r2, #0
    c54a:	741a      	strb	r2, [r3, #16]
    c54c:	7c5c      	ldrb	r4, [r3, #17]
    c54e:	745a      	strb	r2, [r3, #17]
    c550:	7c9c      	ldrb	r4, [r3, #18]
    c552:	749a      	strb	r2, [r3, #18]
    c554:	7cdc      	ldrb	r4, [r3, #19]
    c556:	74da      	strb	r2, [r3, #19]
    c558:	7d1c      	ldrb	r4, [r3, #20]
    c55a:	751a      	strb	r2, [r3, #20]
    c55c:	7d5c      	ldrb	r4, [r3, #21]
    c55e:	755a      	strb	r2, [r3, #21]
    c560:	7d9c      	ldrb	r4, [r3, #22]
    c562:	2903      	cmp	r1, #3
    c564:	759a      	strb	r2, [r3, #22]
    c566:	7ddc      	ldrb	r4, [r3, #23]
    c568:	75da      	strb	r2, [r3, #23]
    c56a:	d029      	beq.n	c5c0 <ipc_trace_handler+0x84>
    c56c:	2904      	cmp	r1, #4
    c56e:	d033      	beq.n	c5d8 <ipc_trace_handler+0x9c>
    c570:	2901      	cmp	r1, #1
    c572:	d12f      	bne.n	c5d4 <ipc_trace_handler+0x98>
    c574:	6885      	ldr	r5, [r0, #8]
    c576:	4e20      	ldr	r6, [pc, #128]	; (c5f8 <ipc_trace_handler+0xbc>)
    c578:	4295      	cmp	r5, r2
    c57a:	d110      	bne.n	c59e <ipc_trace_handler+0x62>
    c57c:	2101      	movs	r1, #1
    c57e:	7a1a      	ldrb	r2, [r3, #8]
    c580:	2200      	movs	r2, #0
    c582:	7219      	strb	r1, [r3, #8]
    c584:	7a59      	ldrb	r1, [r3, #9]
    c586:	725a      	strb	r2, [r3, #9]
    c588:	7a99      	ldrb	r1, [r3, #10]
    c58a:	729a      	strb	r2, [r3, #10]
    c58c:	7ada      	ldrb	r2, [r3, #11]
    c58e:	f06f 025f 	mvn.w	r2, #95	; 0x5f
    c592:	72da      	strb	r2, [r3, #11]
    c594:	4b19      	ldr	r3, [pc, #100]	; (c5fc <ipc_trace_handler+0xc0>)
    c596:	bc70      	pop	{r4, r5, r6}
    c598:	6818      	ldr	r0, [r3, #0]
    c59a:	f001 bfd8 	b.w	e54e <nrf_modem_os_sem_give>
    c59e:	1c91      	adds	r1, r2, #2
    c5a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    c5a4:	684c      	ldr	r4, [r1, #4]
    c5a6:	7821      	ldrb	r1, [r4, #0]
    c5a8:	2962      	cmp	r1, #98	; 0x62
    c5aa:	d007      	beq.n	c5bc <ipc_trace_handler+0x80>
    c5ac:	3963      	subs	r1, #99	; 0x63
    c5ae:	bf18      	it	ne
    c5b0:	2101      	movne	r1, #1
    c5b2:	0049      	lsls	r1, r1, #1
    c5b4:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
    c5b8:	3201      	adds	r2, #1
    c5ba:	e7dd      	b.n	c578 <ipc_trace_handler+0x3c>
    c5bc:	2101      	movs	r1, #1
    c5be:	e7f9      	b.n	c5b4 <ipc_trace_handler+0x78>
    c5c0:	7a18      	ldrb	r0, [r3, #8]
    c5c2:	7219      	strb	r1, [r3, #8]
    c5c4:	7a59      	ldrb	r1, [r3, #9]
    c5c6:	725a      	strb	r2, [r3, #9]
    c5c8:	7a99      	ldrb	r1, [r3, #10]
    c5ca:	729a      	strb	r2, [r3, #10]
    c5cc:	7ada      	ldrb	r2, [r3, #11]
    c5ce:	f06f 025f 	mvn.w	r2, #95	; 0x5f
    c5d2:	72da      	strb	r2, [r3, #11]
    c5d4:	bc70      	pop	{r4, r5, r6}
    c5d6:	4770      	bx	lr
    c5d8:	7a18      	ldrb	r0, [r3, #8]
    c5da:	7219      	strb	r1, [r3, #8]
    c5dc:	7a59      	ldrb	r1, [r3, #9]
    c5de:	725a      	strb	r2, [r3, #9]
    c5e0:	7a99      	ldrb	r1, [r3, #10]
    c5e2:	729a      	strb	r2, [r3, #10]
    c5e4:	7ada      	ldrb	r2, [r3, #11]
    c5e6:	f06f 025f 	mvn.w	r2, #95	; 0x5f
    c5ea:	72da      	strb	r2, [r3, #11]
    c5ec:	2201      	movs	r2, #1
    c5ee:	4b04      	ldr	r3, [pc, #16]	; (c600 <ipc_trace_handler+0xc4>)
    c5f0:	701a      	strb	r2, [r3, #0]
    c5f2:	e7ef      	b.n	c5d4 <ipc_trace_handler+0x98>
    c5f4:	2000cd94 	.word	0x2000cd94
    c5f8:	2000cd88 	.word	0x2000cd88
    c5fc:	2000cd7c 	.word	0x2000cd7c
    c600:	2000cdea 	.word	0x2000cdea

0000c604 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    c604:	4b01      	ldr	r3, [pc, #4]	; (c60c <z_impl_z_errno+0x8>)
    c606:	6898      	ldr	r0, [r3, #8]
}
    c608:	3060      	adds	r0, #96	; 0x60
    c60a:	4770      	bx	lr
    c60c:	2000cd98 	.word	0x2000cd98

0000c610 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    c610:	4b10      	ldr	r3, [pc, #64]	; (c654 <z_sys_init_run_level+0x44>)
{
    c612:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    c614:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    c618:	3001      	adds	r0, #1
    c61a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    c61e:	42a6      	cmp	r6, r4
    c620:	d800      	bhi.n	c624 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    c622:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    c624:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    c628:	b18d      	cbz	r5, c64e <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    c62a:	4628      	mov	r0, r5
    c62c:	4798      	blx	r3
			if (rc != 0) {
    c62e:	b138      	cbz	r0, c640 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    c630:	2800      	cmp	r0, #0
    c632:	bfb8      	it	lt
    c634:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    c636:	28ff      	cmp	r0, #255	; 0xff
    c638:	bfa8      	it	ge
    c63a:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    c63c:	68eb      	ldr	r3, [r5, #12]
    c63e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    c640:	68ea      	ldr	r2, [r5, #12]
    c642:	7853      	ldrb	r3, [r2, #1]
    c644:	f043 0301 	orr.w	r3, r3, #1
    c648:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    c64a:	3408      	adds	r4, #8
    c64c:	e7e7      	b.n	c61e <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    c64e:	4798      	blx	r3
    c650:	e7fb      	b.n	c64a <z_sys_init_run_level+0x3a>
    c652:	bf00      	nop
    c654:	0000f63c 	.word	0x0000f63c

0000c658 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    c658:	2201      	movs	r2, #1
{
    c65a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    c65c:	4b09      	ldr	r3, [pc, #36]	; (c684 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    c65e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    c660:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    c662:	f7ff ffd5 	bl	c610 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    c666:	f000 ff1b 	bl	d4a0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    c66a:	2004      	movs	r0, #4
    c66c:	f7ff ffd0 	bl	c610 <z_sys_init_run_level>

	z_init_static_threads();
    c670:	f000 f8fe 	bl	c870 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    c674:	f7fb fee2 	bl	843c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    c678:	4a03      	ldr	r2, [pc, #12]	; (c688 <bg_thread_main+0x30>)
    c67a:	7b13      	ldrb	r3, [r2, #12]
    c67c:	f023 0301 	bic.w	r3, r3, #1
    c680:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    c682:	bd08      	pop	{r3, pc}
    c684:	2000cdeb 	.word	0x2000cdeb
    c688:	2000c790 	.word	0x2000c790

0000c68c <z_bss_zero>:
{
    c68c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    c68e:	4803      	ldr	r0, [pc, #12]	; (c69c <z_bss_zero+0x10>)
    c690:	4a03      	ldr	r2, [pc, #12]	; (c6a0 <z_bss_zero+0x14>)
    c692:	2100      	movs	r1, #0
    c694:	1a12      	subs	r2, r2, r0
    c696:	f002 f959 	bl	e94c <z_early_memset>
}
    c69a:	bd08      	pop	{r3, pc}
    c69c:	2000c6f0 	.word	0x2000c6f0
    c6a0:	2000cdf0 	.word	0x2000cdf0

0000c6a4 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    c6a4:	2300      	movs	r3, #0
    c6a6:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    c6a8:	b570      	push	{r4, r5, r6, lr}
    c6aa:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    c6ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
    c6b0:	220f      	movs	r2, #15
    c6b2:	9301      	str	r3, [sp, #4]
    c6b4:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    c6b8:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
    c6ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    c6be:	4d0e      	ldr	r5, [pc, #56]	; (c6f8 <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
    c6c0:	4e0e      	ldr	r6, [pc, #56]	; (c6fc <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    c6c2:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
    c6c6:	490e      	ldr	r1, [pc, #56]	; (c700 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    c6c8:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    c6cc:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    c6ce:	fb02 1100 	mla	r1, r2, r0, r1
    c6d2:	4b0c      	ldr	r3, [pc, #48]	; (c704 <z_init_cpu+0x60>)
    c6d4:	4630      	mov	r0, r6
    c6d6:	9500      	str	r5, [sp, #0]
    c6d8:	f000 f89a 	bl	c810 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c6dc:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    c6de:	742c      	strb	r4, [r5, #16]
    c6e0:	f023 0304 	bic.w	r3, r3, #4
    c6e4:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    c6e6:	4b08      	ldr	r3, [pc, #32]	; (c708 <z_init_cpu+0x64>)
    c6e8:	3401      	adds	r4, #1
    c6ea:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    c6ee:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    c6f0:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    c6f2:	b006      	add	sp, #24
    c6f4:	bd70      	pop	{r4, r5, r6, pc}
    c6f6:	bf00      	nop
    c6f8:	2000cd98 	.word	0x2000cd98
    c6fc:	2000c710 	.word	0x2000c710
    c700:	2000d5f0 	.word	0x2000d5f0
    c704:	0000c929 	.word	0x0000c929
    c708:	2000cdf0 	.word	0x2000cdf0

0000c70c <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    c70c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    c70e:	2000      	movs	r0, #0
{
    c710:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    c712:	f7ff ff7d 	bl	c610 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    c716:	4b2e      	ldr	r3, [pc, #184]	; (c7d0 <z_cstart+0xc4>)
	uint32_t msp =
    c718:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    c71c:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    c720:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c724:	2400      	movs	r4, #0
    c726:	23e0      	movs	r3, #224	; 0xe0
    c728:	4d2a      	ldr	r5, [pc, #168]	; (c7d4 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    c72a:	4e2b      	ldr	r6, [pc, #172]	; (c7d8 <z_cstart+0xcc>)
    c72c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    c730:	77ec      	strb	r4, [r5, #31]
    c732:	762c      	strb	r4, [r5, #24]
    c734:	766c      	strb	r4, [r5, #25]
    c736:	76ac      	strb	r4, [r5, #26]
    c738:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    c73c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    c73e:	4f27      	ldr	r7, [pc, #156]	; (c7dc <z_cstart+0xd0>)
    c740:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    c744:	626b      	str	r3, [r5, #36]	; 0x24
    c746:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    c74a:	f7fd f80b 	bl	9764 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    c74e:	f7fc fda5 	bl	929c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    c752:	f04f 33ff 	mov.w	r3, #4294967295
    c756:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    c758:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    c75a:	f7fd fa0d 	bl	9b78 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    c75e:	f7fd f8b3 	bl	98c8 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    c762:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    c766:	ad06      	add	r5, sp, #24
    c768:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    c76a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    c76e:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
    c772:	f000 fe8f 	bl	d494 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    c776:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    c778:	f002 f8c1 	bl	e8fe <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    c77c:	2001      	movs	r0, #1
    c77e:	f7ff ff47 	bl	c610 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    c782:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    c784:	4d16      	ldr	r5, [pc, #88]	; (c7e0 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    c786:	f7ff ff43 	bl	c610 <z_sys_init_run_level>
	z_sched_init();
    c78a:	f000 fc1f 	bl	cfcc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    c78e:	4b15      	ldr	r3, [pc, #84]	; (c7e4 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    c790:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    c792:	9305      	str	r3, [sp, #20]
    c794:	2301      	movs	r3, #1
    c796:	4914      	ldr	r1, [pc, #80]	; (c7e8 <z_cstart+0xdc>)
    c798:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c79c:	e9cd 4303 	strd	r4, r3, [sp, #12]
    c7a0:	4628      	mov	r0, r5
    c7a2:	463b      	mov	r3, r7
    c7a4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    c7a8:	9400      	str	r4, [sp, #0]
    c7aa:	f000 f831 	bl	c810 <z_setup_new_thread>
    c7ae:	4606      	mov	r6, r0
    c7b0:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    c7b2:	4628      	mov	r0, r5
    c7b4:	f022 0204 	bic.w	r2, r2, #4
    c7b8:	736a      	strb	r2, [r5, #13]
    c7ba:	f002 f9a2 	bl	eb02 <z_ready_thread>
	z_init_cpu(0);
    c7be:	4620      	mov	r0, r4
    c7c0:	f7ff ff70 	bl	c6a4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    c7c4:	463a      	mov	r2, r7
    c7c6:	4631      	mov	r1, r6
    c7c8:	4628      	mov	r0, r5
    c7ca:	f7fc fe51 	bl	9470 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    c7ce:	bf00      	nop
    c7d0:	2000cdf0 	.word	0x2000cdf0
    c7d4:	e000ed00 	.word	0xe000ed00
    c7d8:	2000cd98 	.word	0x2000cd98
    c7dc:	0000c659 	.word	0x0000c659
    c7e0:	2000c790 	.word	0x2000c790
    c7e4:	0000f919 	.word	0x0000f919
    c7e8:	2000d730 	.word	0x2000d730

0000c7ec <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    c7ec:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    c7ee:	4c06      	ldr	r4, [pc, #24]	; (c808 <statics_init+0x1c>)
    c7f0:	4d06      	ldr	r5, [pc, #24]	; (c80c <statics_init+0x20>)
    c7f2:	42ac      	cmp	r4, r5
    c7f4:	d301      	bcc.n	c7fa <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    c7f6:	2000      	movs	r0, #0
    c7f8:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    c7fa:	4620      	mov	r0, r4
    c7fc:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    c800:	f002 f8a8 	bl	e954 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    c804:	3414      	adds	r4, #20
    c806:	e7f4      	b.n	c7f2 <statics_init+0x6>
    c808:	2000c6b0 	.word	0x2000c6b0
    c80c:	2000c6c4 	.word	0x2000c6c4

0000c810 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    c810:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    c814:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    c816:	f100 0558 	add.w	r5, r0, #88	; 0x58
    c81a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    c81c:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    c81e:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    c822:	2500      	movs	r5, #0
{
    c824:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    c826:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    c828:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    c82a:	e9c0 5506 	strd	r5, r5, [r0, #24]
    c82e:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    c830:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    c832:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    c834:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    c838:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    c83c:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    c83e:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    c840:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    c842:	9202      	str	r2, [sp, #8]
    c844:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    c846:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    c84a:	9201      	str	r2, [sp, #4]
    c84c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c84e:	9200      	str	r2, [sp, #0]
    c850:	4642      	mov	r2, r8
    c852:	f7fc fdef 	bl	9434 <arch_new_thread>
	if (!_current) {
    c856:	4b05      	ldr	r3, [pc, #20]	; (c86c <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    c858:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    c85a:	689b      	ldr	r3, [r3, #8]
    c85c:	b103      	cbz	r3, c860 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    c85e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    c860:	4640      	mov	r0, r8
    c862:	6723      	str	r3, [r4, #112]	; 0x70
    c864:	b004      	add	sp, #16
    c866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c86a:	bf00      	nop
    c86c:	2000cd98 	.word	0x2000cd98

0000c870 <z_init_static_threads>:
{
    c870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c874:	4c29      	ldr	r4, [pc, #164]	; (c91c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    c876:	4d2a      	ldr	r5, [pc, #168]	; (c920 <z_init_static_threads+0xb0>)
{
    c878:	b087      	sub	sp, #28
    c87a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    c87c:	42ae      	cmp	r6, r5
    c87e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    c882:	d30f      	bcc.n	c8a4 <z_init_static_threads+0x34>
	k_sched_lock();
    c884:	f000 fb72 	bl	cf6c <k_sched_lock>
    c888:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    c88c:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    c890:	4c22      	ldr	r4, [pc, #136]	; (c91c <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    c892:	f8df 9090 	ldr.w	r9, [pc, #144]	; c924 <z_init_static_threads+0xb4>
    c896:	42ac      	cmp	r4, r5
    c898:	d320      	bcc.n	c8dc <z_init_static_threads+0x6c>
}
    c89a:	b007      	add	sp, #28
    c89c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    c8a0:	f000 bb78 	b.w	cf94 <k_sched_unlock>
		z_setup_new_thread(
    c8a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
    c8a8:	9305      	str	r3, [sp, #20]
    c8aa:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    c8ae:	9304      	str	r3, [sp, #16]
    c8b0:	f854 3c10 	ldr.w	r3, [r4, #-16]
    c8b4:	9303      	str	r3, [sp, #12]
    c8b6:	f854 3c14 	ldr.w	r3, [r4, #-20]
    c8ba:	9302      	str	r3, [sp, #8]
    c8bc:	f854 3c18 	ldr.w	r3, [r4, #-24]
    c8c0:	9301      	str	r3, [sp, #4]
    c8c2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    c8c6:	9300      	str	r3, [sp, #0]
    c8c8:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    c8cc:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    c8d0:	f7ff ff9e 	bl	c810 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    c8d4:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    c8d8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    c8da:	e7ce      	b.n	c87a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    c8dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c8de:	1c5a      	adds	r2, r3, #1
    c8e0:	d00d      	beq.n	c8fe <z_init_static_threads+0x8e>
    c8e2:	2100      	movs	r1, #0
    c8e4:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    c8e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    c8ea:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    c8ee:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    c8f2:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    c8f6:	d104      	bne.n	c902 <z_init_static_threads+0x92>
	z_sched_start(thread);
    c8f8:	4640      	mov	r0, r8
    c8fa:	f000 fae7 	bl	cecc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    c8fe:	342c      	adds	r4, #44	; 0x2c
    c900:	e7c9      	b.n	c896 <z_init_static_threads+0x26>
    c902:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c906:	2300      	movs	r3, #0
    c908:	f7fb fc1c 	bl	8144 <__aeabi_uldivmod>
    c90c:	4602      	mov	r2, r0
    c90e:	460b      	mov	r3, r1
    c910:	f108 0018 	add.w	r0, r8, #24
    c914:	4649      	mov	r1, r9
    c916:	f000 fcc3 	bl	d2a0 <z_add_timeout>
    c91a:	e7f0      	b.n	c8fe <z_init_static_threads+0x8e>
    c91c:	0000f2c0 	.word	0x0000f2c0
    c920:	0000f2c0 	.word	0x0000f2c0
    c924:	0000eb67 	.word	0x0000eb67

0000c928 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    c928:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    c92a:	4c0b      	ldr	r4, [pc, #44]	; (c958 <idle+0x30>)
    c92c:	4d0b      	ldr	r5, [pc, #44]	; (c95c <idle+0x34>)
	__asm__ volatile(
    c92e:	f04f 0220 	mov.w	r2, #32
    c932:	f3ef 8311 	mrs	r3, BASEPRI
    c936:	f382 8812 	msr	BASEPRI_MAX, r2
    c93a:	f3bf 8f6f 	isb	sy
    c93e:	f002 f986 	bl	ec4e <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    c942:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    c944:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    c946:	b913      	cbnz	r3, c94e <idle+0x26>
	arch_cpu_idle();
    c948:	f7fc fcae 	bl	92a8 <arch_cpu_idle>
}
    c94c:	e7ef      	b.n	c92e <idle+0x6>
    c94e:	f7fc fbdd 	bl	910c <pm_system_suspend>
    c952:	2800      	cmp	r0, #0
    c954:	d1eb      	bne.n	c92e <idle+0x6>
    c956:	e7f7      	b.n	c948 <idle+0x20>
    c958:	2000cd98 	.word	0x2000cd98
    c95c:	2000cdeb 	.word	0x2000cdeb

0000c960 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    c960:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c964:	4604      	mov	r4, r0
    c966:	4617      	mov	r7, r2
    c968:	461e      	mov	r6, r3
    c96a:	f04f 0320 	mov.w	r3, #32
    c96e:	f3ef 8811 	mrs	r8, BASEPRI
    c972:	f383 8812 	msr	BASEPRI_MAX, r3
    c976:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    c97a:	68c3      	ldr	r3, [r0, #12]
    c97c:	4a33      	ldr	r2, [pc, #204]	; (ca4c <z_impl_k_mutex_lock+0xec>)
    c97e:	b17b      	cbz	r3, c9a0 <z_impl_k_mutex_lock+0x40>
    c980:	6880      	ldr	r0, [r0, #8]
    c982:	6891      	ldr	r1, [r2, #8]
    c984:	4288      	cmp	r0, r1
    c986:	d019      	beq.n	c9bc <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    c988:	ea57 0306 	orrs.w	r3, r7, r6
    c98c:	d118      	bne.n	c9c0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    c98e:	f388 8811 	msr	BASEPRI, r8
    c992:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    c996:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    c99a:	b002      	add	sp, #8
    c99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    c9a0:	6891      	ldr	r1, [r2, #8]
    c9a2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    c9a6:	3301      	adds	r3, #1
    c9a8:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    c9aa:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    c9ac:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    c9ae:	60a3      	str	r3, [r4, #8]
    c9b0:	f388 8811 	msr	BASEPRI, r8
    c9b4:	f3bf 8f6f 	isb	sy
		return 0;
    c9b8:	2000      	movs	r0, #0
    c9ba:	e7ee      	b.n	c99a <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    c9bc:	6921      	ldr	r1, [r4, #16]
    c9be:	e7f2      	b.n	c9a6 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    c9c0:	f991 100e 	ldrsb.w	r1, [r1, #14]
    c9c4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    c9c8:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    c9cc:	4299      	cmp	r1, r3
    c9ce:	bfa8      	it	ge
    c9d0:	4619      	movge	r1, r3
    c9d2:	4291      	cmp	r1, r2
    c9d4:	bfb8      	it	lt
    c9d6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    c9d8:	428b      	cmp	r3, r1
    c9da:	dd2e      	ble.n	ca3a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    c9dc:	f002 f843 	bl	ea66 <adjust_owner_prio.isra.0>
    c9e0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    c9e2:	4622      	mov	r2, r4
    c9e4:	4641      	mov	r1, r8
    c9e6:	e9cd 7600 	strd	r7, r6, [sp]
    c9ea:	4819      	ldr	r0, [pc, #100]	; (ca50 <z_impl_k_mutex_lock+0xf0>)
    c9ec:	f000 f9f8 	bl	cde0 <z_pend_curr>
	if (got_mutex == 0) {
    c9f0:	2800      	cmp	r0, #0
    c9f2:	d0e1      	beq.n	c9b8 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    c9f4:	f04f 0320 	mov.w	r3, #32
    c9f8:	f3ef 8611 	mrs	r6, BASEPRI
    c9fc:	f383 8812 	msr	BASEPRI_MAX, r3
    ca00:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    ca04:	68a0      	ldr	r0, [r4, #8]
    ca06:	b1d0      	cbz	r0, ca3e <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    ca08:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    ca0a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ca0c:	429c      	cmp	r4, r3
    ca0e:	d00a      	beq.n	ca26 <z_impl_k_mutex_lock+0xc6>
    ca10:	b14b      	cbz	r3, ca26 <z_impl_k_mutex_lock+0xc6>
    ca12:	f993 300e 	ldrsb.w	r3, [r3, #14]
    ca16:	4299      	cmp	r1, r3
    ca18:	bfa8      	it	ge
    ca1a:	4619      	movge	r1, r3
    ca1c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    ca20:	4299      	cmp	r1, r3
    ca22:	bfb8      	it	lt
    ca24:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    ca26:	f002 f81e 	bl	ea66 <adjust_owner_prio.isra.0>
    ca2a:	b140      	cbz	r0, ca3e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    ca2c:	4631      	mov	r1, r6
    ca2e:	4808      	ldr	r0, [pc, #32]	; (ca50 <z_impl_k_mutex_lock+0xf0>)
    ca30:	f000 fa3a 	bl	cea8 <z_reschedule>
	return -EAGAIN;
    ca34:	f06f 000a 	mvn.w	r0, #10
    ca38:	e7af      	b.n	c99a <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    ca3a:	2500      	movs	r5, #0
    ca3c:	e7d1      	b.n	c9e2 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    ca3e:	2d00      	cmp	r5, #0
    ca40:	d1f4      	bne.n	ca2c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    ca42:	f386 8811 	msr	BASEPRI, r6
    ca46:	f3bf 8f6f 	isb	sy
    ca4a:	e7f3      	b.n	ca34 <z_impl_k_mutex_lock+0xd4>
    ca4c:	2000cd98 	.word	0x2000cd98
    ca50:	2000cdec 	.word	0x2000cdec

0000ca54 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    ca54:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    ca56:	6883      	ldr	r3, [r0, #8]
{
    ca58:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    ca5a:	b36b      	cbz	r3, cab8 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    ca5c:	4a19      	ldr	r2, [pc, #100]	; (cac4 <z_impl_k_mutex_unlock+0x70>)
    ca5e:	6892      	ldr	r2, [r2, #8]
    ca60:	4293      	cmp	r3, r2
    ca62:	d12c      	bne.n	cabe <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    ca64:	68c3      	ldr	r3, [r0, #12]
    ca66:	2b01      	cmp	r3, #1
    ca68:	d903      	bls.n	ca72 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    ca6a:	3b01      	subs	r3, #1
    ca6c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    ca6e:	2000      	movs	r0, #0
}
    ca70:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    ca72:	f04f 0320 	mov.w	r3, #32
    ca76:	f3ef 8511 	mrs	r5, BASEPRI
    ca7a:	f383 8812 	msr	BASEPRI_MAX, r3
    ca7e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    ca82:	6901      	ldr	r1, [r0, #16]
    ca84:	6880      	ldr	r0, [r0, #8]
    ca86:	f001 ffee 	bl	ea66 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    ca8a:	4620      	mov	r0, r4
    ca8c:	f002 f86f 	bl	eb6e <z_unpend_first_thread>
	mutex->owner = new_owner;
    ca90:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    ca92:	b158      	cbz	r0, caac <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    ca94:	f990 200e 	ldrsb.w	r2, [r0, #14]
    ca98:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    ca9a:	2200      	movs	r2, #0
    ca9c:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    ca9e:	f002 f830 	bl	eb02 <z_ready_thread>
		z_reschedule(&lock, key);
    caa2:	4629      	mov	r1, r5
    caa4:	4808      	ldr	r0, [pc, #32]	; (cac8 <z_impl_k_mutex_unlock+0x74>)
    caa6:	f000 f9ff 	bl	cea8 <z_reschedule>
    caaa:	e7e0      	b.n	ca6e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    caac:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    caae:	f385 8811 	msr	BASEPRI, r5
    cab2:	f3bf 8f6f 	isb	sy
    cab6:	e7da      	b.n	ca6e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    cab8:	f06f 0015 	mvn.w	r0, #21
    cabc:	e7d8      	b.n	ca70 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    cabe:	f04f 30ff 	mov.w	r0, #4294967295
    cac2:	e7d5      	b.n	ca70 <z_impl_k_mutex_unlock+0x1c>
    cac4:	2000cd98 	.word	0x2000cd98
    cac8:	2000cdec 	.word	0x2000cdec

0000cacc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    cacc:	b538      	push	{r3, r4, r5, lr}
    cace:	4604      	mov	r4, r0
	__asm__ volatile(
    cad0:	f04f 0320 	mov.w	r3, #32
    cad4:	f3ef 8511 	mrs	r5, BASEPRI
    cad8:	f383 8812 	msr	BASEPRI_MAX, r3
    cadc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    cae0:	f002 f845 	bl	eb6e <z_unpend_first_thread>

	if (thread != NULL) {
    cae4:	b148      	cbz	r0, cafa <z_impl_k_sem_give+0x2e>
    cae6:	2200      	movs	r2, #0
    cae8:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    caea:	f002 f80a 	bl	eb02 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    caee:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    caf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    caf4:	4804      	ldr	r0, [pc, #16]	; (cb08 <z_impl_k_sem_give+0x3c>)
    caf6:	f000 b9d7 	b.w	cea8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    cafa:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    cafe:	429a      	cmp	r2, r3
    cb00:	bf18      	it	ne
    cb02:	3301      	addne	r3, #1
    cb04:	60a3      	str	r3, [r4, #8]
}
    cb06:	e7f2      	b.n	caee <z_impl_k_sem_give+0x22>
    cb08:	2000cdec 	.word	0x2000cdec

0000cb0c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    cb0c:	b513      	push	{r0, r1, r4, lr}
    cb0e:	f04f 0420 	mov.w	r4, #32
    cb12:	f3ef 8111 	mrs	r1, BASEPRI
    cb16:	f384 8812 	msr	BASEPRI_MAX, r4
    cb1a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    cb1e:	6884      	ldr	r4, [r0, #8]
    cb20:	b144      	cbz	r4, cb34 <z_impl_k_sem_take+0x28>
		sem->count--;
    cb22:	3c01      	subs	r4, #1
    cb24:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    cb26:	f381 8811 	msr	BASEPRI, r1
    cb2a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    cb2e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    cb30:	b002      	add	sp, #8
    cb32:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    cb34:	ea52 0403 	orrs.w	r4, r2, r3
    cb38:	d106      	bne.n	cb48 <z_impl_k_sem_take+0x3c>
    cb3a:	f381 8811 	msr	BASEPRI, r1
    cb3e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    cb42:	f06f 000f 	mvn.w	r0, #15
    cb46:	e7f3      	b.n	cb30 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    cb48:	e9cd 2300 	strd	r2, r3, [sp]
    cb4c:	4602      	mov	r2, r0
    cb4e:	4802      	ldr	r0, [pc, #8]	; (cb58 <z_impl_k_sem_take+0x4c>)
    cb50:	f000 f946 	bl	cde0 <z_pend_curr>
	return ret;
    cb54:	e7ec      	b.n	cb30 <z_impl_k_sem_take+0x24>
    cb56:	bf00      	nop
    cb58:	2000cdec 	.word	0x2000cdec

0000cb5c <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    cb5c:	89c3      	ldrh	r3, [r0, #14]
    cb5e:	2b7f      	cmp	r3, #127	; 0x7f
    cb60:	d812      	bhi.n	cb88 <sliceable+0x2c>
	int ret = slice_ticks;
    cb62:	4b0a      	ldr	r3, [pc, #40]	; (cb8c <sliceable+0x30>)
    cb64:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    cb66:	b163      	cbz	r3, cb82 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    cb68:	4b09      	ldr	r3, [pc, #36]	; (cb90 <sliceable+0x34>)
    cb6a:	f990 200e 	ldrsb.w	r2, [r0, #14]
    cb6e:	681b      	ldr	r3, [r3, #0]
    cb70:	429a      	cmp	r2, r3
    cb72:	db09      	blt.n	cb88 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    cb74:	7b43      	ldrb	r3, [r0, #13]
    cb76:	06db      	lsls	r3, r3, #27
    cb78:	d106      	bne.n	cb88 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    cb7a:	4b06      	ldr	r3, [pc, #24]	; (cb94 <sliceable+0x38>)
    cb7c:	1ac3      	subs	r3, r0, r3
    cb7e:	bf18      	it	ne
    cb80:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    cb82:	f003 0001 	and.w	r0, r3, #1
    cb86:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    cb88:	2300      	movs	r3, #0
    cb8a:	e7fa      	b.n	cb82 <sliceable+0x26>
    cb8c:	2000cdc4 	.word	0x2000cdc4
    cb90:	2000cdc0 	.word	0x2000cdc0
    cb94:	2000c710 	.word	0x2000c710

0000cb98 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
    cb98:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    cb9a:	4b04      	ldr	r3, [pc, #16]	; (cbac <slice_timeout+0x14>)
    cb9c:	1ac0      	subs	r0, r0, r3
    cb9e:	4b04      	ldr	r3, [pc, #16]	; (cbb0 <slice_timeout+0x18>)
    cba0:	10c0      	asrs	r0, r0, #3
    cba2:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
    cba4:	4b03      	ldr	r3, [pc, #12]	; (cbb4 <slice_timeout+0x1c>)
    cba6:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    cba8:	4770      	bx	lr
    cbaa:	bf00      	nop
    cbac:	2000c810 	.word	0x2000c810
    cbb0:	aaaaaaab 	.word	0xaaaaaaab
    cbb4:	2000cdec 	.word	0x2000cdec

0000cbb8 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    cbb8:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    cbba:	4b0e      	ldr	r3, [pc, #56]	; (cbf4 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    cbbc:	4c0e      	ldr	r4, [pc, #56]	; (cbf8 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    cbbe:	7c1e      	ldrb	r6, [r3, #16]
{
    cbc0:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    cbc2:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    cbc6:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    cbca:	4620      	mov	r0, r4
    cbcc:	f002 f829 	bl	ec22 <z_abort_timeout>
	slice_expired[cpu] = false;
    cbd0:	2200      	movs	r2, #0
    cbd2:	4b0a      	ldr	r3, [pc, #40]	; (cbfc <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
    cbd4:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    cbd6:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    cbd8:	f7ff ffc0 	bl	cb5c <sliceable>
    cbdc:	b148      	cbz	r0, cbf2 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    cbde:	4b08      	ldr	r3, [pc, #32]	; (cc00 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    cbe0:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
    cbe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
    cbe6:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    cbe8:	4906      	ldr	r1, [pc, #24]	; (cc04 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    cbea:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    cbec:	17d3      	asrs	r3, r2, #31
    cbee:	f000 bb57 	b.w	d2a0 <z_add_timeout>
}
    cbf2:	bd70      	pop	{r4, r5, r6, pc}
    cbf4:	2000cd98 	.word	0x2000cd98
    cbf8:	2000c810 	.word	0x2000c810
    cbfc:	2000cdec 	.word	0x2000cdec
    cc00:	2000cdc4 	.word	0x2000cdc4
    cc04:	0000cb99 	.word	0x0000cb99

0000cc08 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    cc08:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    cc0a:	4d0d      	ldr	r5, [pc, #52]	; (cc40 <update_cache+0x38>)
    cc0c:	462b      	mov	r3, r5
    cc0e:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cc12:	429c      	cmp	r4, r3
    cc14:	d000      	beq.n	cc18 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    cc16:	b904      	cbnz	r4, cc1a <update_cache+0x12>
    cc18:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    cc1a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    cc1c:	b938      	cbnz	r0, cc2e <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    cc1e:	7b5a      	ldrb	r2, [r3, #13]
    cc20:	06d2      	lsls	r2, r2, #27
    cc22:	d104      	bne.n	cc2e <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    cc24:	69a2      	ldr	r2, [r4, #24]
    cc26:	b912      	cbnz	r2, cc2e <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    cc28:	89da      	ldrh	r2, [r3, #14]
    cc2a:	2a7f      	cmp	r2, #127	; 0x7f
    cc2c:	d805      	bhi.n	cc3a <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    cc2e:	429c      	cmp	r4, r3
    cc30:	d002      	beq.n	cc38 <update_cache+0x30>
			z_reset_time_slice(thread);
    cc32:	4620      	mov	r0, r4
    cc34:	f7ff ffc0 	bl	cbb8 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    cc38:	4623      	mov	r3, r4
    cc3a:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    cc3c:	bd38      	pop	{r3, r4, r5, pc}
    cc3e:	bf00      	nop
    cc40:	2000cd98 	.word	0x2000cd98

0000cc44 <move_thread_to_end_of_prio_q>:
{
    cc44:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    cc46:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    cc4a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    cc4c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    cc4e:	7b43      	ldrb	r3, [r0, #13]
    cc50:	da04      	bge.n	cc5c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    cc52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    cc56:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    cc58:	f001 ff19 	bl	ea8e <sys_dlist_remove>
	return list->head == list;
    cc5c:	4a15      	ldr	r2, [pc, #84]	; (ccb4 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
    cc5e:	7b4b      	ldrb	r3, [r1, #13]
    cc60:	4610      	mov	r0, r2
    cc62:	f063 037f 	orn	r3, r3, #127	; 0x7f
    cc66:	734b      	strb	r3, [r1, #13]
    cc68:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    cc6c:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cc6e:	4283      	cmp	r3, r0
    cc70:	bf08      	it	eq
    cc72:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    cc74:	b923      	cbnz	r3, cc80 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    cc76:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    cc7a:	6021      	str	r1, [r4, #0]
	list->tail = node;
    cc7c:	6211      	str	r1, [r2, #32]
}
    cc7e:	e00c      	b.n	cc9a <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    cc80:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    cc84:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    cc88:	42b5      	cmp	r5, r6
    cc8a:	d00e      	beq.n	ccaa <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    cc8c:	42ae      	cmp	r6, r5
    cc8e:	dd0c      	ble.n	ccaa <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    cc90:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    cc92:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    cc96:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    cc98:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    cc9a:	6890      	ldr	r0, [r2, #8]
}
    cc9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    cca0:	1a43      	subs	r3, r0, r1
    cca2:	4258      	negs	r0, r3
    cca4:	4158      	adcs	r0, r3
    cca6:	f7ff bfaf 	b.w	cc08 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    ccaa:	429c      	cmp	r4, r3
    ccac:	d0e3      	beq.n	cc76 <move_thread_to_end_of_prio_q+0x32>
    ccae:	681b      	ldr	r3, [r3, #0]
    ccb0:	e7e0      	b.n	cc74 <move_thread_to_end_of_prio_q+0x30>
    ccb2:	bf00      	nop
    ccb4:	2000cd98 	.word	0x2000cd98

0000ccb8 <ready_thread>:
{
    ccb8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    ccba:	f990 300d 	ldrsb.w	r3, [r0, #13]
    ccbe:	7b42      	ldrb	r2, [r0, #13]
    ccc0:	2b00      	cmp	r3, #0
    ccc2:	db29      	blt.n	cd18 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    ccc4:	06d3      	lsls	r3, r2, #27
    ccc6:	d127      	bne.n	cd18 <ready_thread+0x60>
	return node->next != NULL;
    ccc8:	6983      	ldr	r3, [r0, #24]
    ccca:	bb2b      	cbnz	r3, cd18 <ready_thread+0x60>
	return list->head == list;
    cccc:	4913      	ldr	r1, [pc, #76]	; (cd1c <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    ccce:	f062 027f 	orn	r2, r2, #127	; 0x7f
    ccd2:	7342      	strb	r2, [r0, #13]
    ccd4:	460a      	mov	r2, r1
    ccd6:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ccda:	4294      	cmp	r4, r2
    ccdc:	bf18      	it	ne
    ccde:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    cce0:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    cce2:	b923      	cbnz	r3, ccee <ready_thread+0x36>
	node->prev = tail;
    cce4:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    cce8:	6020      	str	r0, [r4, #0]
	list->tail = node;
    ccea:	6208      	str	r0, [r1, #32]
}
    ccec:	e00c      	b.n	cd08 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    ccee:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    ccf2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    ccf6:	42b5      	cmp	r5, r6
    ccf8:	d00a      	beq.n	cd10 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    ccfa:	42ae      	cmp	r6, r5
    ccfc:	dd08      	ble.n	cd10 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    ccfe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    cd00:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    cd04:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    cd06:	6058      	str	r0, [r3, #4]
		update_cache(0);
    cd08:	2000      	movs	r0, #0
}
    cd0a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    cd0c:	f7ff bf7c 	b.w	cc08 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    cd10:	42a3      	cmp	r3, r4
    cd12:	d0e7      	beq.n	cce4 <ready_thread+0x2c>
    cd14:	681b      	ldr	r3, [r3, #0]
    cd16:	e7e4      	b.n	cce2 <ready_thread+0x2a>
}
    cd18:	bc70      	pop	{r4, r5, r6}
    cd1a:	4770      	bx	lr
    cd1c:	2000cd98 	.word	0x2000cd98

0000cd20 <unready_thread>:
{
    cd20:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    cd22:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    cd26:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    cd28:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    cd2a:	7b43      	ldrb	r3, [r0, #13]
    cd2c:	da04      	bge.n	cd38 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    cd2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    cd32:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    cd34:	f001 feab 	bl	ea8e <sys_dlist_remove>
	update_cache(thread == _current);
    cd38:	4b04      	ldr	r3, [pc, #16]	; (cd4c <unready_thread+0x2c>)
    cd3a:	6898      	ldr	r0, [r3, #8]
    cd3c:	1a43      	subs	r3, r0, r1
    cd3e:	4258      	negs	r0, r3
    cd40:	4158      	adcs	r0, r3
}
    cd42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    cd46:	f7ff bf5f 	b.w	cc08 <update_cache>
    cd4a:	bf00      	nop
    cd4c:	2000cd98 	.word	0x2000cd98

0000cd50 <pend_locked>:
{
    cd50:	b570      	push	{r4, r5, r6, lr}
    cd52:	4615      	mov	r5, r2
    cd54:	461c      	mov	r4, r3
    cd56:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    cd58:	f001 feab 	bl	eab2 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    cd5c:	f1b4 3fff 	cmp.w	r4, #4294967295
    cd60:	bf08      	it	eq
    cd62:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    cd66:	d008      	beq.n	cd7a <pend_locked+0x2a>
    cd68:	462a      	mov	r2, r5
    cd6a:	4623      	mov	r3, r4
    cd6c:	f106 0018 	add.w	r0, r6, #24
    cd70:	4902      	ldr	r1, [pc, #8]	; (cd7c <pend_locked+0x2c>)
}
    cd72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cd76:	f000 ba93 	b.w	d2a0 <z_add_timeout>
    cd7a:	bd70      	pop	{r4, r5, r6, pc}
    cd7c:	0000eb67 	.word	0x0000eb67

0000cd80 <z_time_slice>:
{
    cd80:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    cd82:	f04f 0320 	mov.w	r3, #32
    cd86:	f3ef 8511 	mrs	r5, BASEPRI
    cd8a:	f383 8812 	msr	BASEPRI_MAX, r3
    cd8e:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    cd92:	4b10      	ldr	r3, [pc, #64]	; (cdd4 <z_time_slice+0x54>)
	if (pending_current == curr) {
    cd94:	4a10      	ldr	r2, [pc, #64]	; (cdd8 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    cd96:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    cd98:	6810      	ldr	r0, [r2, #0]
    cd9a:	42a0      	cmp	r0, r4
    cd9c:	d106      	bne.n	cdac <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    cd9e:	f7ff ff0b 	bl	cbb8 <z_reset_time_slice>
	__asm__ volatile(
    cda2:	f385 8811 	msr	BASEPRI, r5
    cda6:	f3bf 8f6f 	isb	sy
}
    cdaa:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    cdac:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    cdae:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    cdb0:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    cdb2:	4a0a      	ldr	r2, [pc, #40]	; (cddc <z_time_slice+0x5c>)
    cdb4:	5cd3      	ldrb	r3, [r2, r3]
    cdb6:	2b00      	cmp	r3, #0
    cdb8:	d0f3      	beq.n	cda2 <z_time_slice+0x22>
    cdba:	4620      	mov	r0, r4
    cdbc:	f7ff fece 	bl	cb5c <sliceable>
    cdc0:	2800      	cmp	r0, #0
    cdc2:	d0ee      	beq.n	cda2 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    cdc4:	7b63      	ldrb	r3, [r4, #13]
    cdc6:	06db      	lsls	r3, r3, #27
    cdc8:	d102      	bne.n	cdd0 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    cdca:	4620      	mov	r0, r4
    cdcc:	f7ff ff3a 	bl	cc44 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    cdd0:	4620      	mov	r0, r4
    cdd2:	e7e4      	b.n	cd9e <z_time_slice+0x1e>
    cdd4:	2000cd98 	.word	0x2000cd98
    cdd8:	2000cdbc 	.word	0x2000cdbc
    cddc:	2000cdec 	.word	0x2000cdec

0000cde0 <z_pend_curr>:
{
    cde0:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    cde2:	480c      	ldr	r0, [pc, #48]	; (ce14 <z_pend_curr+0x34>)
    cde4:	4d0c      	ldr	r5, [pc, #48]	; (ce18 <z_pend_curr+0x38>)
    cde6:	6886      	ldr	r6, [r0, #8]
{
    cde8:	460c      	mov	r4, r1
	pending_current = _current;
    cdea:	602e      	str	r6, [r5, #0]
{
    cdec:	4611      	mov	r1, r2
    cdee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    cdf2:	f04f 0620 	mov.w	r6, #32
    cdf6:	f3ef 8511 	mrs	r5, BASEPRI
    cdfa:	f386 8812 	msr	BASEPRI_MAX, r6
    cdfe:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    ce02:	6880      	ldr	r0, [r0, #8]
    ce04:	f7ff ffa4 	bl	cd50 <pend_locked>
	ret = arch_swap(key);
    ce08:	4620      	mov	r0, r4
}
    ce0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ce0e:	f7fc bab7 	b.w	9380 <arch_swap>
    ce12:	bf00      	nop
    ce14:	2000cd98 	.word	0x2000cd98
    ce18:	2000cdbc 	.word	0x2000cdbc

0000ce1c <z_set_prio>:
{
    ce1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ce1e:	4604      	mov	r4, r0
    ce20:	f04f 0320 	mov.w	r3, #32
    ce24:	f3ef 8611 	mrs	r6, BASEPRI
    ce28:	f383 8812 	msr	BASEPRI_MAX, r3
    ce2c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    ce30:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    ce32:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    ce34:	06da      	lsls	r2, r3, #27
    ce36:	d119      	bne.n	ce6c <z_set_prio+0x50>
	return node->next != NULL;
    ce38:	6985      	ldr	r5, [r0, #24]
    ce3a:	b9bd      	cbnz	r5, ce6c <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ce3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ce40:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    ce42:	f001 fe24 	bl	ea8e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    ce46:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    ce48:	4a16      	ldr	r2, [pc, #88]	; (cea4 <z_set_prio+0x88>)
    ce4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ce4e:	7343      	strb	r3, [r0, #13]
    ce50:	4613      	mov	r3, r2
				thread->base.prio = prio;
    ce52:	7381      	strb	r1, [r0, #14]
    ce54:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ce58:	4298      	cmp	r0, r3
    ce5a:	bf18      	it	ne
    ce5c:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    ce5e:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ce60:	b95d      	cbnz	r5, ce7a <z_set_prio+0x5e>
	node->prev = tail;
    ce62:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    ce66:	6004      	str	r4, [r0, #0]
	list->tail = node;
    ce68:	6214      	str	r4, [r2, #32]
}
    ce6a:	e011      	b.n	ce90 <z_set_prio+0x74>
    ce6c:	2000      	movs	r0, #0
			thread->base.prio = prio;
    ce6e:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    ce70:	f386 8811 	msr	BASEPRI, r6
    ce74:	f3bf 8f6f 	isb	sy
}
    ce78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    ce7a:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    ce7e:	42b9      	cmp	r1, r7
    ce80:	d00b      	beq.n	ce9a <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    ce82:	428f      	cmp	r7, r1
    ce84:	dd09      	ble.n	ce9a <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    ce86:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    ce88:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    ce8c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    ce8e:	606c      	str	r4, [r5, #4]
			update_cache(1);
    ce90:	2001      	movs	r0, #1
    ce92:	f7ff feb9 	bl	cc08 <update_cache>
    ce96:	2001      	movs	r0, #1
    ce98:	e7ea      	b.n	ce70 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    ce9a:	42a8      	cmp	r0, r5
    ce9c:	d0e1      	beq.n	ce62 <z_set_prio+0x46>
    ce9e:	682d      	ldr	r5, [r5, #0]
    cea0:	e7de      	b.n	ce60 <z_set_prio+0x44>
    cea2:	bf00      	nop
    cea4:	2000cd98 	.word	0x2000cd98

0000cea8 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    cea8:	b949      	cbnz	r1, cebe <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    ceaa:	f3ef 8005 	mrs	r0, IPSR
    ceae:	b930      	cbnz	r0, cebe <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    ceb0:	4b05      	ldr	r3, [pc, #20]	; (cec8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    ceb2:	699a      	ldr	r2, [r3, #24]
    ceb4:	689b      	ldr	r3, [r3, #8]
    ceb6:	429a      	cmp	r2, r3
    ceb8:	d001      	beq.n	cebe <z_reschedule+0x16>
    ceba:	f7fc ba61 	b.w	9380 <arch_swap>
    cebe:	f381 8811 	msr	BASEPRI, r1
    cec2:	f3bf 8f6f 	isb	sy
}
    cec6:	4770      	bx	lr
    cec8:	2000cd98 	.word	0x2000cd98

0000cecc <z_sched_start>:
{
    cecc:	b510      	push	{r4, lr}
	__asm__ volatile(
    cece:	f04f 0220 	mov.w	r2, #32
    ced2:	f3ef 8411 	mrs	r4, BASEPRI
    ced6:	f382 8812 	msr	BASEPRI_MAX, r2
    ceda:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    cede:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    cee0:	0751      	lsls	r1, r2, #29
    cee2:	d404      	bmi.n	ceee <z_sched_start+0x22>
	__asm__ volatile(
    cee4:	f384 8811 	msr	BASEPRI, r4
    cee8:	f3bf 8f6f 	isb	sy
}
    ceec:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ceee:	f022 0204 	bic.w	r2, r2, #4
    cef2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    cef4:	f7ff fee0 	bl	ccb8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    cef8:	4621      	mov	r1, r4
}
    cefa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    cefe:	4801      	ldr	r0, [pc, #4]	; (cf04 <z_sched_start+0x38>)
    cf00:	f7ff bfd2 	b.w	cea8 <z_reschedule>
    cf04:	2000cded 	.word	0x2000cded

0000cf08 <z_impl_k_thread_suspend>:
{
    cf08:	b570      	push	{r4, r5, r6, lr}
    cf0a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    cf0c:	3018      	adds	r0, #24
    cf0e:	f001 fe88 	bl	ec22 <z_abort_timeout>
	__asm__ volatile(
    cf12:	f04f 0320 	mov.w	r3, #32
    cf16:	f3ef 8611 	mrs	r6, BASEPRI
    cf1a:	f383 8812 	msr	BASEPRI_MAX, r3
    cf1e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    cf22:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    cf26:	7b63      	ldrb	r3, [r4, #13]
    cf28:	2a00      	cmp	r2, #0
    cf2a:	da05      	bge.n	cf38 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    cf2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    cf30:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    cf32:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    cf34:	f001 fdab 	bl	ea8e <sys_dlist_remove>
		update_cache(thread == _current);
    cf38:	4d0b      	ldr	r5, [pc, #44]	; (cf68 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    cf3a:	7b63      	ldrb	r3, [r4, #13]
    cf3c:	68a8      	ldr	r0, [r5, #8]
    cf3e:	f043 0310 	orr.w	r3, r3, #16
    cf42:	7363      	strb	r3, [r4, #13]
    cf44:	1b03      	subs	r3, r0, r4
    cf46:	4258      	negs	r0, r3
    cf48:	4158      	adcs	r0, r3
    cf4a:	f7ff fe5d 	bl	cc08 <update_cache>
	__asm__ volatile(
    cf4e:	f386 8811 	msr	BASEPRI, r6
    cf52:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    cf56:	68ab      	ldr	r3, [r5, #8]
    cf58:	42a3      	cmp	r3, r4
    cf5a:	d103      	bne.n	cf64 <z_impl_k_thread_suspend+0x5c>
}
    cf5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    cf60:	f001 be45 	b.w	ebee <z_reschedule_unlocked>
}
    cf64:	bd70      	pop	{r4, r5, r6, pc}
    cf66:	bf00      	nop
    cf68:	2000cd98 	.word	0x2000cd98

0000cf6c <k_sched_lock>:
	__asm__ volatile(
    cf6c:	f04f 0320 	mov.w	r3, #32
    cf70:	f3ef 8111 	mrs	r1, BASEPRI
    cf74:	f383 8812 	msr	BASEPRI_MAX, r3
    cf78:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    cf7c:	4b04      	ldr	r3, [pc, #16]	; (cf90 <k_sched_lock+0x24>)
    cf7e:	689a      	ldr	r2, [r3, #8]
    cf80:	7bd3      	ldrb	r3, [r2, #15]
    cf82:	3b01      	subs	r3, #1
    cf84:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    cf86:	f381 8811 	msr	BASEPRI, r1
    cf8a:	f3bf 8f6f 	isb	sy
}
    cf8e:	4770      	bx	lr
    cf90:	2000cd98 	.word	0x2000cd98

0000cf94 <k_sched_unlock>:
{
    cf94:	b510      	push	{r4, lr}
	__asm__ volatile(
    cf96:	f04f 0320 	mov.w	r3, #32
    cf9a:	f3ef 8411 	mrs	r4, BASEPRI
    cf9e:	f383 8812 	msr	BASEPRI_MAX, r3
    cfa2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    cfa6:	4b08      	ldr	r3, [pc, #32]	; (cfc8 <k_sched_unlock+0x34>)
		update_cache(0);
    cfa8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    cfaa:	689a      	ldr	r2, [r3, #8]
    cfac:	7bd3      	ldrb	r3, [r2, #15]
    cfae:	3301      	adds	r3, #1
    cfb0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    cfb2:	f7ff fe29 	bl	cc08 <update_cache>
	__asm__ volatile(
    cfb6:	f384 8811 	msr	BASEPRI, r4
    cfba:	f3bf 8f6f 	isb	sy
}
    cfbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    cfc2:	f001 be14 	b.w	ebee <z_reschedule_unlocked>
    cfc6:	bf00      	nop
    cfc8:	2000cd98 	.word	0x2000cd98

0000cfcc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    cfcc:	4b02      	ldr	r3, [pc, #8]	; (cfd8 <z_sched_init+0xc>)
    cfce:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    cfd2:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    cfd6:	4770      	bx	lr
    cfd8:	2000cd98 	.word	0x2000cd98

0000cfdc <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    cfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    cfde:	f04f 0320 	mov.w	r3, #32
    cfe2:	f3ef 8511 	mrs	r5, BASEPRI
    cfe6:	f383 8812 	msr	BASEPRI_MAX, r3
    cfea:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    cfee:	4919      	ldr	r1, [pc, #100]	; (d054 <z_impl_k_yield+0x78>)
    cff0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    cff2:	7b43      	ldrb	r3, [r0, #13]
    cff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    cff8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    cffa:	f001 fd48 	bl	ea8e <sys_dlist_remove>
	return list->head == list;
    cffe:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    d000:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    d002:	7b5a      	ldrb	r2, [r3, #13]
    d004:	f062 027f 	orn	r2, r2, #127	; 0x7f
    d008:	735a      	strb	r2, [r3, #13]
    d00a:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    d00e:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d010:	4282      	cmp	r2, r0
    d012:	bf08      	it	eq
    d014:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d016:	b922      	cbnz	r2, d022 <z_impl_k_yield+0x46>
	node->prev = tail;
    d018:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    d01c:	6023      	str	r3, [r4, #0]
	list->tail = node;
    d01e:	620b      	str	r3, [r1, #32]
}
    d020:	e00c      	b.n	d03c <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    d022:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    d026:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    d02a:	42be      	cmp	r6, r7
    d02c:	d00e      	beq.n	d04c <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    d02e:	42b7      	cmp	r7, r6
    d030:	dd0c      	ble.n	d04c <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    d032:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    d034:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    d038:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    d03a:	6053      	str	r3, [r2, #4]
	update_cache(1);
    d03c:	2001      	movs	r0, #1
    d03e:	f7ff fde3 	bl	cc08 <update_cache>
    d042:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    d044:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d048:	f7fc b99a 	b.w	9380 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    d04c:	42a2      	cmp	r2, r4
    d04e:	d0e3      	beq.n	d018 <z_impl_k_yield+0x3c>
    d050:	6812      	ldr	r2, [r2, #0]
    d052:	e7e0      	b.n	d016 <z_impl_k_yield+0x3a>
    d054:	2000cd98 	.word	0x2000cd98

0000d058 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    d058:	ea50 0301 	orrs.w	r3, r0, r1
{
    d05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d060:	4605      	mov	r5, r0
    d062:	460e      	mov	r6, r1
	if (ticks == 0) {
    d064:	d103      	bne.n	d06e <z_tick_sleep+0x16>
	z_impl_k_yield();
    d066:	f7ff ffb9 	bl	cfdc <z_impl_k_yield>
		k_yield();
		return 0;
    d06a:	2000      	movs	r0, #0
    d06c:	e02c      	b.n	d0c8 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    d06e:	1c83      	adds	r3, r0, #2
    d070:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    d074:	db2a      	blt.n	d0cc <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    d076:	f001 fdfa 	bl	ec6e <sys_clock_tick_get_32>
    d07a:	182c      	adds	r4, r5, r0
    d07c:	f04f 0320 	mov.w	r3, #32
    d080:	f3ef 8811 	mrs	r8, BASEPRI
    d084:	f383 8812 	msr	BASEPRI_MAX, r3
    d088:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    d08c:	4f11      	ldr	r7, [pc, #68]	; (d0d4 <z_tick_sleep+0x7c>)
    d08e:	4b12      	ldr	r3, [pc, #72]	; (d0d8 <z_tick_sleep+0x80>)
    d090:	68b8      	ldr	r0, [r7, #8]
    d092:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    d094:	f7ff fe44 	bl	cd20 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    d098:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    d09a:	4910      	ldr	r1, [pc, #64]	; (d0dc <z_tick_sleep+0x84>)
    d09c:	462a      	mov	r2, r5
    d09e:	4633      	mov	r3, r6
    d0a0:	3018      	adds	r0, #24
    d0a2:	f000 f8fd 	bl	d2a0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    d0a6:	68ba      	ldr	r2, [r7, #8]
    d0a8:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    d0aa:	7b53      	ldrb	r3, [r2, #13]
    d0ac:	f043 0310 	orr.w	r3, r3, #16
    d0b0:	7353      	strb	r3, [r2, #13]
    d0b2:	f7fc f965 	bl	9380 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    d0b6:	f001 fdda 	bl	ec6e <sys_clock_tick_get_32>
    d0ba:	1a20      	subs	r0, r4, r0
    d0bc:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    d0c0:	2801      	cmp	r0, #1
    d0c2:	f173 0300 	sbcs.w	r3, r3, #0
    d0c6:	dbd0      	blt.n	d06a <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    d0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    d0cc:	f06f 0401 	mvn.w	r4, #1
    d0d0:	1a24      	subs	r4, r4, r0
    d0d2:	e7d3      	b.n	d07c <z_tick_sleep+0x24>
    d0d4:	2000cd98 	.word	0x2000cd98
    d0d8:	2000cdbc 	.word	0x2000cdbc
    d0dc:	0000eb67 	.word	0x0000eb67

0000d0e0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d0e0:	f1b1 3fff 	cmp.w	r1, #4294967295
    d0e4:	bf08      	it	eq
    d0e6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    d0ea:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d0ec:	d106      	bne.n	d0fc <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    d0ee:	4b08      	ldr	r3, [pc, #32]	; (d110 <z_impl_k_sleep+0x30>)
    d0f0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    d0f2:	f7ff ff09 	bl	cf08 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    d0f6:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    d0fa:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    d0fc:	f7ff ffac 	bl	d058 <z_tick_sleep>
    d100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d104:	fb80 0303 	smull	r0, r3, r0, r3
    d108:	0bc0      	lsrs	r0, r0, #15
    d10a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    d10e:	e7f4      	b.n	d0fa <z_impl_k_sleep+0x1a>
    d110:	2000cd98 	.word	0x2000cd98

0000d114 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    d114:	4b01      	ldr	r3, [pc, #4]	; (d11c <z_impl_z_current_get+0x8>)
    d116:	6898      	ldr	r0, [r3, #8]
    d118:	4770      	bx	lr
    d11a:	bf00      	nop
    d11c:	2000cd98 	.word	0x2000cd98

0000d120 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    d120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d124:	4604      	mov	r4, r0
    d126:	f04f 0320 	mov.w	r3, #32
    d12a:	f3ef 8611 	mrs	r6, BASEPRI
    d12e:	f383 8812 	msr	BASEPRI_MAX, r3
    d132:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    d136:	7b03      	ldrb	r3, [r0, #12]
    d138:	07d9      	lsls	r1, r3, #31
    d13a:	d50b      	bpl.n	d154 <z_thread_abort+0x34>
	__asm__ volatile(
    d13c:	f386 8811 	msr	BASEPRI, r6
    d140:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    d144:	4040      	eors	r0, r0
    d146:	f380 8811 	msr	BASEPRI, r0
    d14a:	f04f 0004 	mov.w	r0, #4
    d14e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    d150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    d154:	7b43      	ldrb	r3, [r0, #13]
    d156:	071a      	lsls	r2, r3, #28
    d158:	d504      	bpl.n	d164 <z_thread_abort+0x44>
    d15a:	f386 8811 	msr	BASEPRI, r6
    d15e:	f3bf 8f6f 	isb	sy
    d162:	e7f5      	b.n	d150 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    d164:	f023 0220 	bic.w	r2, r3, #32
    d168:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    d16c:	09d2      	lsrs	r2, r2, #7
    d16e:	d120      	bne.n	d1b2 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    d170:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    d172:	68a3      	ldr	r3, [r4, #8]
    d174:	b113      	cbz	r3, d17c <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    d176:	4620      	mov	r0, r4
    d178:	f001 fc91 	bl	ea9e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    d17c:	f104 0018 	add.w	r0, r4, #24
    d180:	f001 fd4f 	bl	ec22 <z_abort_timeout>
    d184:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    d188:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    d18c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d18e:	42bd      	cmp	r5, r7
    d190:	d000      	beq.n	d194 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    d192:	b9b5      	cbnz	r5, d1c2 <z_thread_abort+0xa2>
		update_cache(1);
    d194:	2001      	movs	r0, #1
    d196:	f7ff fd37 	bl	cc08 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    d19a:	4b10      	ldr	r3, [pc, #64]	; (d1dc <z_thread_abort+0xbc>)
    d19c:	689b      	ldr	r3, [r3, #8]
    d19e:	42a3      	cmp	r3, r4
    d1a0:	d1db      	bne.n	d15a <z_thread_abort+0x3a>
    d1a2:	f3ef 8305 	mrs	r3, IPSR
    d1a6:	2b00      	cmp	r3, #0
    d1a8:	d1d7      	bne.n	d15a <z_thread_abort+0x3a>
    d1aa:	4630      	mov	r0, r6
    d1ac:	f7fc f8e8 	bl	9380 <arch_swap>
	return ret;
    d1b0:	e7d3      	b.n	d15a <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d1b2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    d1b6:	f043 0308 	orr.w	r3, r3, #8
    d1ba:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    d1bc:	f001 fc67 	bl	ea8e <sys_dlist_remove>
}
    d1c0:	e7d7      	b.n	d172 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    d1c2:	4628      	mov	r0, r5
    d1c4:	f001 fc6b 	bl	ea9e <unpend_thread_no_timeout>
    d1c8:	f105 0018 	add.w	r0, r5, #24
    d1cc:	f001 fd29 	bl	ec22 <z_abort_timeout>
		ready_thread(thread);
    d1d0:	4628      	mov	r0, r5
    d1d2:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    d1d6:	f7ff fd6f 	bl	ccb8 <ready_thread>
    d1da:	e7d7      	b.n	d18c <z_thread_abort+0x6c>
    d1dc:	2000cd98 	.word	0x2000cd98

0000d1e0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    d1e0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    d1e2:	4806      	ldr	r0, [pc, #24]	; (d1fc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    d1e4:	4a06      	ldr	r2, [pc, #24]	; (d200 <z_data_copy+0x20>)
    d1e6:	4907      	ldr	r1, [pc, #28]	; (d204 <z_data_copy+0x24>)
    d1e8:	1a12      	subs	r2, r2, r0
    d1ea:	f001 fbb1 	bl	e950 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    d1ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    d1f2:	4a05      	ldr	r2, [pc, #20]	; (d208 <z_data_copy+0x28>)
    d1f4:	4905      	ldr	r1, [pc, #20]	; (d20c <z_data_copy+0x2c>)
    d1f6:	4806      	ldr	r0, [pc, #24]	; (d210 <z_data_copy+0x30>)
    d1f8:	f001 bbaa 	b.w	e950 <z_early_memcpy>
    d1fc:	2000c580 	.word	0x2000c580
    d200:	2000c6ec 	.word	0x2000c6ec
    d204:	0000faa4 	.word	0x0000faa4
    d208:	00000000 	.word	0x00000000
    d20c:	0000fa8c 	.word	0x0000fa8c
    d210:	2000c580 	.word	0x2000c580

0000d214 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    d214:	4b03      	ldr	r3, [pc, #12]	; (d224 <elapsed+0x10>)
    d216:	681b      	ldr	r3, [r3, #0]
    d218:	b90b      	cbnz	r3, d21e <elapsed+0xa>
    d21a:	f7fd bbbf 	b.w	a99c <sys_clock_elapsed>
}
    d21e:	2000      	movs	r0, #0
    d220:	4770      	bx	lr
    d222:	bf00      	nop
    d224:	2000cdc8 	.word	0x2000cdc8

0000d228 <next_timeout>:

static int32_t next_timeout(void)
{
    d228:	b510      	push	{r4, lr}
	return list->head == list;
    d22a:	4b0e      	ldr	r3, [pc, #56]	; (d264 <next_timeout+0x3c>)
    d22c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d22e:	429c      	cmp	r4, r3
    d230:	d104      	bne.n	d23c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    d232:	f7ff ffef 	bl	d214 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    d236:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    d23a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    d23c:	f7ff ffea 	bl	d214 <elapsed>
	if ((to == NULL) ||
    d240:	2c00      	cmp	r4, #0
    d242:	d0f8      	beq.n	d236 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    d244:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    d248:	1a1b      	subs	r3, r3, r0
    d24a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    d24e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    d252:	f172 0100 	sbcs.w	r1, r2, #0
    d256:	daee      	bge.n	d236 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    d258:	2a00      	cmp	r2, #0
    d25a:	bfac      	ite	ge
    d25c:	4618      	movge	r0, r3
    d25e:	2000      	movlt	r0, #0
	return ret;
    d260:	e7eb      	b.n	d23a <next_timeout+0x12>
    d262:	bf00      	nop
    d264:	2000c63c 	.word	0x2000c63c

0000d268 <remove_timeout>:
{
    d268:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    d26a:	b170      	cbz	r0, d28a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    d26c:	4b0b      	ldr	r3, [pc, #44]	; (d29c <remove_timeout+0x34>)
    d26e:	685b      	ldr	r3, [r3, #4]
    d270:	4298      	cmp	r0, r3
    d272:	d00a      	beq.n	d28a <remove_timeout+0x22>
    d274:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    d276:	b143      	cbz	r3, d28a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    d278:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    d27c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    d280:	1912      	adds	r2, r2, r4
    d282:	eb41 0105 	adc.w	r1, r1, r5
    d286:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    d28a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    d28e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    d290:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    d292:	2300      	movs	r3, #0
	node->prev = NULL;
    d294:	e9c0 3300 	strd	r3, r3, [r0]
}
    d298:	bd30      	pop	{r4, r5, pc}
    d29a:	bf00      	nop
    d29c:	2000c63c 	.word	0x2000c63c

0000d2a0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d2a0:	f1b3 3fff 	cmp.w	r3, #4294967295
    d2a4:	bf08      	it	eq
    d2a6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    d2aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d2ac:	4604      	mov	r4, r0
    d2ae:	461d      	mov	r5, r3
    d2b0:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d2b2:	d05c      	beq.n	d36e <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    d2b4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    d2b6:	f04f 0320 	mov.w	r3, #32
    d2ba:	f3ef 8711 	mrs	r7, BASEPRI
    d2be:	f383 8812 	msr	BASEPRI_MAX, r3
    d2c2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    d2c6:	3201      	adds	r2, #1
    d2c8:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    d2cc:	da24      	bge.n	d318 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    d2ce:	f06f 0301 	mvn.w	r3, #1
    d2d2:	492c      	ldr	r1, [pc, #176]	; (d384 <z_add_timeout+0xe4>)
    d2d4:	e9d1 2000 	ldrd	r2, r0, [r1]
    d2d8:	1a9b      	subs	r3, r3, r2
    d2da:	f04f 32ff 	mov.w	r2, #4294967295
    d2de:	eb62 0000 	sbc.w	r0, r2, r0
    d2e2:	1b9e      	subs	r6, r3, r6
    d2e4:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    d2e8:	2e01      	cmp	r6, #1
    d2ea:	f170 0300 	sbcs.w	r3, r0, #0
    d2ee:	da01      	bge.n	d2f4 <z_add_timeout+0x54>
    d2f0:	2601      	movs	r6, #1
    d2f2:	2000      	movs	r0, #0
    d2f4:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    d2f8:	4e23      	ldr	r6, [pc, #140]	; (d388 <z_add_timeout+0xe8>)
    d2fa:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    d2fe:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d300:	45b4      	cmp	ip, r6
    d302:	bf08      	it	eq
    d304:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    d308:	f1bc 0f00 	cmp.w	ip, #0
    d30c:	d10d      	bne.n	d32a <z_add_timeout+0x8a>
	node->prev = tail;
    d30e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    d312:	602c      	str	r4, [r5, #0]
	list->tail = node;
    d314:	6074      	str	r4, [r6, #4]
}
    d316:	e01c      	b.n	d352 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    d318:	f7ff ff7c 	bl	d214 <elapsed>
    d31c:	3601      	adds	r6, #1
    d31e:	f145 0500 	adc.w	r5, r5, #0
    d322:	1836      	adds	r6, r6, r0
    d324:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    d328:	e7e4      	b.n	d2f4 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    d32a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    d32e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    d332:	4293      	cmp	r3, r2
    d334:	eb71 0e00 	sbcs.w	lr, r1, r0
    d338:	da1a      	bge.n	d370 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    d33a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    d33c:	f8dc 3004 	ldr.w	r3, [ip, #4]
    d340:	eb60 0001 	sbc.w	r0, r0, r1
    d344:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    d348:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    d34c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    d34e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    d352:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d354:	42b3      	cmp	r3, r6
    d356:	d006      	beq.n	d366 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    d358:	429c      	cmp	r4, r3
    d35a:	d104      	bne.n	d366 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    d35c:	f7ff ff64 	bl	d228 <next_timeout>
    d360:	2100      	movs	r1, #0
    d362:	f7fd fae9 	bl	a938 <sys_clock_set_timeout>
	__asm__ volatile(
    d366:	f387 8811 	msr	BASEPRI, r7
    d36a:	f3bf 8f6f 	isb	sy
		}
	}
}
    d36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    d370:	1a9b      	subs	r3, r3, r2
    d372:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    d376:	45ac      	cmp	ip, r5
    d378:	e9c4 3104 	strd	r3, r1, [r4, #16]
    d37c:	d0c7      	beq.n	d30e <z_add_timeout+0x6e>
    d37e:	f8dc c000 	ldr.w	ip, [ip]
    d382:	e7c1      	b.n	d308 <z_add_timeout+0x68>
    d384:	2000c828 	.word	0x2000c828
    d388:	2000c63c 	.word	0x2000c63c

0000d38c <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    d38c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    d390:	f04f 0320 	mov.w	r3, #32
    d394:	f3ef 8c11 	mrs	ip, BASEPRI
    d398:	f383 8812 	msr	BASEPRI_MAX, r3
    d39c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    d3a0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; d454 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    d3a4:	f8df 90b0 	ldr.w	r9, [pc, #176]	; d458 <sys_clock_announce+0xcc>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
    d3a8:	2400      	movs	r4, #0
	announce_remaining = ticks;
    d3aa:	f8c9 0000 	str.w	r0, [r9]
    d3ae:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    d3b2:	2500      	movs	r5, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d3b4:	4550      	cmp	r0, sl
    d3b6:	bf08      	it	eq
    d3b8:	2000      	moveq	r0, #0
		curr_tick += dt;
    d3ba:	4f28      	ldr	r7, [pc, #160]	; (d45c <sys_clock_announce+0xd0>)
    d3bc:	46e0      	mov	r8, ip
    d3be:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    d3c2:	f8d9 3000 	ldr.w	r3, [r9]
    d3c6:	b380      	cbz	r0, d42a <sys_clock_announce+0x9e>
    d3c8:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    d3cc:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    d3d0:	42b3      	cmp	r3, r6
    d3d2:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    d3d6:	da05      	bge.n	d3e4 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    d3d8:	1af6      	subs	r6, r6, r3
    d3da:	eb6c 040e 	sbc.w	r4, ip, lr
    d3de:	e9c0 6404 	strd	r6, r4, [r0, #16]
    d3e2:	e022      	b.n	d42a <sys_clock_announce+0x9e>
		curr_tick += dt;
    d3e4:	18b2      	adds	r2, r6, r2
    d3e6:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    d3ea:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    d3ee:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    d3f2:	f7ff ff39 	bl	d268 <remove_timeout>
	__asm__ volatile(
    d3f6:	f388 8811 	msr	BASEPRI, r8
    d3fa:	f3bf 8f6f 	isb	sy
		t->fn(t);
    d3fe:	6883      	ldr	r3, [r0, #8]
    d400:	4798      	blx	r3
	__asm__ volatile(
    d402:	f04f 0320 	mov.w	r3, #32
    d406:	f3ef 8811 	mrs	r8, BASEPRI
    d40a:	f383 8812 	msr	BASEPRI_MAX, r3
    d40e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    d412:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    d416:	f8da 0000 	ldr.w	r0, [sl]
    d41a:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d41c:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    d41e:	46c4      	mov	ip, r8
    d420:	f8c9 3000 	str.w	r3, [r9]
    d424:	d1ca      	bne.n	d3bc <sys_clock_announce+0x30>
		curr_tick += dt;
    d426:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    d42a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    d42c:	189a      	adds	r2, r3, r2
    d42e:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
    d432:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    d436:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    d43a:	f7ff fef5 	bl	d228 <next_timeout>
    d43e:	4621      	mov	r1, r4
    d440:	f7fd fa7a 	bl	a938 <sys_clock_set_timeout>
	__asm__ volatile(
    d444:	f388 8811 	msr	BASEPRI, r8
    d448:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    d44c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    d450:	f7ff bc96 	b.w	cd80 <z_time_slice>
    d454:	2000c63c 	.word	0x2000c63c
    d458:	2000cdc8 	.word	0x2000cdc8
    d45c:	2000c828 	.word	0x2000c828

0000d460 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    d460:	b510      	push	{r4, lr}
	__asm__ volatile(
    d462:	f04f 0320 	mov.w	r3, #32
    d466:	f3ef 8411 	mrs	r4, BASEPRI
    d46a:	f383 8812 	msr	BASEPRI_MAX, r3
    d46e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    d472:	f7ff fecf 	bl	d214 <elapsed>
    d476:	4603      	mov	r3, r0
    d478:	4a05      	ldr	r2, [pc, #20]	; (d490 <sys_clock_tick_get+0x30>)
    d47a:	e9d2 0100 	ldrd	r0, r1, [r2]
    d47e:	1818      	adds	r0, r3, r0
    d480:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    d484:	f384 8811 	msr	BASEPRI, r4
    d488:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    d48c:	bd10      	pop	{r4, pc}
    d48e:	bf00      	nop
    d490:	2000c828 	.word	0x2000c828

0000d494 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    d494:	4b01      	ldr	r3, [pc, #4]	; (d49c <k_thread_system_pool_assign+0x8>)
    d496:	6703      	str	r3, [r0, #112]	; 0x70
}
    d498:	4770      	bx	lr
    d49a:	bf00      	nop
    d49c:	2000c6b0 	.word	0x2000c6b0

0000d4a0 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    d4a0:	4801      	ldr	r0, [pc, #4]	; (d4a8 <boot_banner+0x8>)
    d4a2:	f000 bb9a 	b.w	dbda <printk>
    d4a6:	bf00      	nop
    d4a8:	0000f921 	.word	0x0000f921

0000d4ac <_free_r>:
    d4ac:	b538      	push	{r3, r4, r5, lr}
    d4ae:	4605      	mov	r5, r0
    d4b0:	2900      	cmp	r1, #0
    d4b2:	d041      	beq.n	d538 <_free_r+0x8c>
    d4b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
    d4b8:	1f0c      	subs	r4, r1, #4
    d4ba:	2b00      	cmp	r3, #0
    d4bc:	bfb8      	it	lt
    d4be:	18e4      	addlt	r4, r4, r3
    d4c0:	f000 f93e 	bl	d740 <__malloc_lock>
    d4c4:	4a1d      	ldr	r2, [pc, #116]	; (d53c <_free_r+0x90>)
    d4c6:	6813      	ldr	r3, [r2, #0]
    d4c8:	b933      	cbnz	r3, d4d8 <_free_r+0x2c>
    d4ca:	6063      	str	r3, [r4, #4]
    d4cc:	6014      	str	r4, [r2, #0]
    d4ce:	4628      	mov	r0, r5
    d4d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d4d4:	f000 b93a 	b.w	d74c <__malloc_unlock>
    d4d8:	42a3      	cmp	r3, r4
    d4da:	d908      	bls.n	d4ee <_free_r+0x42>
    d4dc:	6820      	ldr	r0, [r4, #0]
    d4de:	1821      	adds	r1, r4, r0
    d4e0:	428b      	cmp	r3, r1
    d4e2:	bf01      	itttt	eq
    d4e4:	6819      	ldreq	r1, [r3, #0]
    d4e6:	685b      	ldreq	r3, [r3, #4]
    d4e8:	1809      	addeq	r1, r1, r0
    d4ea:	6021      	streq	r1, [r4, #0]
    d4ec:	e7ed      	b.n	d4ca <_free_r+0x1e>
    d4ee:	461a      	mov	r2, r3
    d4f0:	685b      	ldr	r3, [r3, #4]
    d4f2:	b10b      	cbz	r3, d4f8 <_free_r+0x4c>
    d4f4:	42a3      	cmp	r3, r4
    d4f6:	d9fa      	bls.n	d4ee <_free_r+0x42>
    d4f8:	6811      	ldr	r1, [r2, #0]
    d4fa:	1850      	adds	r0, r2, r1
    d4fc:	42a0      	cmp	r0, r4
    d4fe:	d10b      	bne.n	d518 <_free_r+0x6c>
    d500:	6820      	ldr	r0, [r4, #0]
    d502:	4401      	add	r1, r0
    d504:	1850      	adds	r0, r2, r1
    d506:	6011      	str	r1, [r2, #0]
    d508:	4283      	cmp	r3, r0
    d50a:	d1e0      	bne.n	d4ce <_free_r+0x22>
    d50c:	6818      	ldr	r0, [r3, #0]
    d50e:	685b      	ldr	r3, [r3, #4]
    d510:	4408      	add	r0, r1
    d512:	6053      	str	r3, [r2, #4]
    d514:	6010      	str	r0, [r2, #0]
    d516:	e7da      	b.n	d4ce <_free_r+0x22>
    d518:	d902      	bls.n	d520 <_free_r+0x74>
    d51a:	230c      	movs	r3, #12
    d51c:	602b      	str	r3, [r5, #0]
    d51e:	e7d6      	b.n	d4ce <_free_r+0x22>
    d520:	6820      	ldr	r0, [r4, #0]
    d522:	1821      	adds	r1, r4, r0
    d524:	428b      	cmp	r3, r1
    d526:	bf02      	ittt	eq
    d528:	6819      	ldreq	r1, [r3, #0]
    d52a:	685b      	ldreq	r3, [r3, #4]
    d52c:	1809      	addeq	r1, r1, r0
    d52e:	6063      	str	r3, [r4, #4]
    d530:	bf08      	it	eq
    d532:	6021      	streq	r1, [r4, #0]
    d534:	6054      	str	r4, [r2, #4]
    d536:	e7ca      	b.n	d4ce <_free_r+0x22>
    d538:	bd38      	pop	{r3, r4, r5, pc}
    d53a:	bf00      	nop
    d53c:	2000cdd0 	.word	0x2000cdd0

0000d540 <_malloc_r>:
    d540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d542:	1ccd      	adds	r5, r1, #3
    d544:	4606      	mov	r6, r0
    d546:	f025 0503 	bic.w	r5, r5, #3
    d54a:	3508      	adds	r5, #8
    d54c:	2d0c      	cmp	r5, #12
    d54e:	bf38      	it	cc
    d550:	250c      	movcc	r5, #12
    d552:	2d00      	cmp	r5, #0
    d554:	db01      	blt.n	d55a <_malloc_r+0x1a>
    d556:	42a9      	cmp	r1, r5
    d558:	d903      	bls.n	d562 <_malloc_r+0x22>
    d55a:	230c      	movs	r3, #12
    d55c:	6033      	str	r3, [r6, #0]
    d55e:	2000      	movs	r0, #0
    d560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d562:	f000 f8ed 	bl	d740 <__malloc_lock>
    d566:	4921      	ldr	r1, [pc, #132]	; (d5ec <_malloc_r+0xac>)
    d568:	680a      	ldr	r2, [r1, #0]
    d56a:	4614      	mov	r4, r2
    d56c:	b99c      	cbnz	r4, d596 <_malloc_r+0x56>
    d56e:	4f20      	ldr	r7, [pc, #128]	; (d5f0 <_malloc_r+0xb0>)
    d570:	683b      	ldr	r3, [r7, #0]
    d572:	b923      	cbnz	r3, d57e <_malloc_r+0x3e>
    d574:	4621      	mov	r1, r4
    d576:	4630      	mov	r0, r6
    d578:	f000 f83c 	bl	d5f4 <_sbrk_r>
    d57c:	6038      	str	r0, [r7, #0]
    d57e:	4629      	mov	r1, r5
    d580:	4630      	mov	r0, r6
    d582:	f000 f837 	bl	d5f4 <_sbrk_r>
    d586:	1c43      	adds	r3, r0, #1
    d588:	d123      	bne.n	d5d2 <_malloc_r+0x92>
    d58a:	230c      	movs	r3, #12
    d58c:	4630      	mov	r0, r6
    d58e:	6033      	str	r3, [r6, #0]
    d590:	f000 f8dc 	bl	d74c <__malloc_unlock>
    d594:	e7e3      	b.n	d55e <_malloc_r+0x1e>
    d596:	6823      	ldr	r3, [r4, #0]
    d598:	1b5b      	subs	r3, r3, r5
    d59a:	d417      	bmi.n	d5cc <_malloc_r+0x8c>
    d59c:	2b0b      	cmp	r3, #11
    d59e:	d903      	bls.n	d5a8 <_malloc_r+0x68>
    d5a0:	6023      	str	r3, [r4, #0]
    d5a2:	441c      	add	r4, r3
    d5a4:	6025      	str	r5, [r4, #0]
    d5a6:	e004      	b.n	d5b2 <_malloc_r+0x72>
    d5a8:	6863      	ldr	r3, [r4, #4]
    d5aa:	42a2      	cmp	r2, r4
    d5ac:	bf0c      	ite	eq
    d5ae:	600b      	streq	r3, [r1, #0]
    d5b0:	6053      	strne	r3, [r2, #4]
    d5b2:	4630      	mov	r0, r6
    d5b4:	f000 f8ca 	bl	d74c <__malloc_unlock>
    d5b8:	f104 000b 	add.w	r0, r4, #11
    d5bc:	1d23      	adds	r3, r4, #4
    d5be:	f020 0007 	bic.w	r0, r0, #7
    d5c2:	1ac2      	subs	r2, r0, r3
    d5c4:	bf1c      	itt	ne
    d5c6:	1a1b      	subne	r3, r3, r0
    d5c8:	50a3      	strne	r3, [r4, r2]
    d5ca:	e7c9      	b.n	d560 <_malloc_r+0x20>
    d5cc:	4622      	mov	r2, r4
    d5ce:	6864      	ldr	r4, [r4, #4]
    d5d0:	e7cc      	b.n	d56c <_malloc_r+0x2c>
    d5d2:	1cc4      	adds	r4, r0, #3
    d5d4:	f024 0403 	bic.w	r4, r4, #3
    d5d8:	42a0      	cmp	r0, r4
    d5da:	d0e3      	beq.n	d5a4 <_malloc_r+0x64>
    d5dc:	1a21      	subs	r1, r4, r0
    d5de:	4630      	mov	r0, r6
    d5e0:	f000 f808 	bl	d5f4 <_sbrk_r>
    d5e4:	3001      	adds	r0, #1
    d5e6:	d1dd      	bne.n	d5a4 <_malloc_r+0x64>
    d5e8:	e7cf      	b.n	d58a <_malloc_r+0x4a>
    d5ea:	bf00      	nop
    d5ec:	2000cdd0 	.word	0x2000cdd0
    d5f0:	2000cdcc 	.word	0x2000cdcc

0000d5f4 <_sbrk_r>:
    d5f4:	b538      	push	{r3, r4, r5, lr}
    d5f6:	2300      	movs	r3, #0
    d5f8:	4d05      	ldr	r5, [pc, #20]	; (d610 <_sbrk_r+0x1c>)
    d5fa:	4604      	mov	r4, r0
    d5fc:	4608      	mov	r0, r1
    d5fe:	602b      	str	r3, [r5, #0]
    d600:	f7fc fae6 	bl	9bd0 <_sbrk>
    d604:	1c43      	adds	r3, r0, #1
    d606:	d102      	bne.n	d60e <_sbrk_r+0x1a>
    d608:	682b      	ldr	r3, [r5, #0]
    d60a:	b103      	cbz	r3, d60e <_sbrk_r+0x1a>
    d60c:	6023      	str	r3, [r4, #0]
    d60e:	bd38      	pop	{r3, r4, r5, pc}
    d610:	2000cdd4 	.word	0x2000cdd4

0000d614 <_strtol_l.constprop.0>:
    d614:	2b24      	cmp	r3, #36	; 0x24
    d616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d61a:	4686      	mov	lr, r0
    d61c:	4690      	mov	r8, r2
    d61e:	d801      	bhi.n	d624 <_strtol_l.constprop.0+0x10>
    d620:	2b01      	cmp	r3, #1
    d622:	d106      	bne.n	d632 <_strtol_l.constprop.0+0x1e>
    d624:	f000 fe07 	bl	e236 <__errno>
    d628:	2316      	movs	r3, #22
    d62a:	6003      	str	r3, [r0, #0]
    d62c:	2000      	movs	r0, #0
    d62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d632:	460d      	mov	r5, r1
    d634:	4835      	ldr	r0, [pc, #212]	; (d70c <_strtol_l.constprop.0+0xf8>)
    d636:	462a      	mov	r2, r5
    d638:	f815 4b01 	ldrb.w	r4, [r5], #1
    d63c:	5d06      	ldrb	r6, [r0, r4]
    d63e:	f016 0608 	ands.w	r6, r6, #8
    d642:	d1f8      	bne.n	d636 <_strtol_l.constprop.0+0x22>
    d644:	2c2d      	cmp	r4, #45	; 0x2d
    d646:	d124      	bne.n	d692 <_strtol_l.constprop.0+0x7e>
    d648:	782c      	ldrb	r4, [r5, #0]
    d64a:	2601      	movs	r6, #1
    d64c:	1c95      	adds	r5, r2, #2
    d64e:	bb2b      	cbnz	r3, d69c <_strtol_l.constprop.0+0x88>
    d650:	2c30      	cmp	r4, #48	; 0x30
    d652:	d030      	beq.n	d6b6 <_strtol_l.constprop.0+0xa2>
    d654:	230a      	movs	r3, #10
    d656:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
    d65a:	2200      	movs	r2, #0
    d65c:	f10c 3cff 	add.w	ip, ip, #4294967295
    d660:	4610      	mov	r0, r2
    d662:	fbbc f9f3 	udiv	r9, ip, r3
    d666:	fb03 ca19 	mls	sl, r3, r9, ip
    d66a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
    d66e:	2f09      	cmp	r7, #9
    d670:	d828      	bhi.n	d6c4 <_strtol_l.constprop.0+0xb0>
    d672:	463c      	mov	r4, r7
    d674:	42a3      	cmp	r3, r4
    d676:	dd34      	ble.n	d6e2 <_strtol_l.constprop.0+0xce>
    d678:	1c57      	adds	r7, r2, #1
    d67a:	d007      	beq.n	d68c <_strtol_l.constprop.0+0x78>
    d67c:	4581      	cmp	r9, r0
    d67e:	d32d      	bcc.n	d6dc <_strtol_l.constprop.0+0xc8>
    d680:	d101      	bne.n	d686 <_strtol_l.constprop.0+0x72>
    d682:	45a2      	cmp	sl, r4
    d684:	db2a      	blt.n	d6dc <_strtol_l.constprop.0+0xc8>
    d686:	fb00 4003 	mla	r0, r0, r3, r4
    d68a:	2201      	movs	r2, #1
    d68c:	f815 4b01 	ldrb.w	r4, [r5], #1
    d690:	e7eb      	b.n	d66a <_strtol_l.constprop.0+0x56>
    d692:	2c2b      	cmp	r4, #43	; 0x2b
    d694:	bf04      	itt	eq
    d696:	782c      	ldrbeq	r4, [r5, #0]
    d698:	1c95      	addeq	r5, r2, #2
    d69a:	e7d8      	b.n	d64e <_strtol_l.constprop.0+0x3a>
    d69c:	2b10      	cmp	r3, #16
    d69e:	d1da      	bne.n	d656 <_strtol_l.constprop.0+0x42>
    d6a0:	2c30      	cmp	r4, #48	; 0x30
    d6a2:	d1d8      	bne.n	d656 <_strtol_l.constprop.0+0x42>
    d6a4:	782a      	ldrb	r2, [r5, #0]
    d6a6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    d6aa:	2a58      	cmp	r2, #88	; 0x58
    d6ac:	d1d3      	bne.n	d656 <_strtol_l.constprop.0+0x42>
    d6ae:	786c      	ldrb	r4, [r5, #1]
    d6b0:	2310      	movs	r3, #16
    d6b2:	3502      	adds	r5, #2
    d6b4:	e7cf      	b.n	d656 <_strtol_l.constprop.0+0x42>
    d6b6:	782b      	ldrb	r3, [r5, #0]
    d6b8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    d6bc:	2b58      	cmp	r3, #88	; 0x58
    d6be:	d0f6      	beq.n	d6ae <_strtol_l.constprop.0+0x9a>
    d6c0:	2308      	movs	r3, #8
    d6c2:	e7c8      	b.n	d656 <_strtol_l.constprop.0+0x42>
    d6c4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
    d6c8:	2f19      	cmp	r7, #25
    d6ca:	d801      	bhi.n	d6d0 <_strtol_l.constprop.0+0xbc>
    d6cc:	3c37      	subs	r4, #55	; 0x37
    d6ce:	e7d1      	b.n	d674 <_strtol_l.constprop.0+0x60>
    d6d0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
    d6d4:	2f19      	cmp	r7, #25
    d6d6:	d804      	bhi.n	d6e2 <_strtol_l.constprop.0+0xce>
    d6d8:	3c57      	subs	r4, #87	; 0x57
    d6da:	e7cb      	b.n	d674 <_strtol_l.constprop.0+0x60>
    d6dc:	f04f 32ff 	mov.w	r2, #4294967295
    d6e0:	e7d4      	b.n	d68c <_strtol_l.constprop.0+0x78>
    d6e2:	1c53      	adds	r3, r2, #1
    d6e4:	d108      	bne.n	d6f8 <_strtol_l.constprop.0+0xe4>
    d6e6:	2322      	movs	r3, #34	; 0x22
    d6e8:	4660      	mov	r0, ip
    d6ea:	f8ce 3000 	str.w	r3, [lr]
    d6ee:	f1b8 0f00 	cmp.w	r8, #0
    d6f2:	d09c      	beq.n	d62e <_strtol_l.constprop.0+0x1a>
    d6f4:	1e69      	subs	r1, r5, #1
    d6f6:	e006      	b.n	d706 <_strtol_l.constprop.0+0xf2>
    d6f8:	b106      	cbz	r6, d6fc <_strtol_l.constprop.0+0xe8>
    d6fa:	4240      	negs	r0, r0
    d6fc:	f1b8 0f00 	cmp.w	r8, #0
    d700:	d095      	beq.n	d62e <_strtol_l.constprop.0+0x1a>
    d702:	2a00      	cmp	r2, #0
    d704:	d1f6      	bne.n	d6f4 <_strtol_l.constprop.0+0xe0>
    d706:	f8c8 1000 	str.w	r1, [r8]
    d70a:	e790      	b.n	d62e <_strtol_l.constprop.0+0x1a>
    d70c:	0000f950 	.word	0x0000f950

0000d710 <strtol>:
    d710:	4613      	mov	r3, r2
    d712:	460a      	mov	r2, r1
    d714:	4601      	mov	r1, r0
    d716:	4802      	ldr	r0, [pc, #8]	; (d720 <strtol+0x10>)
    d718:	6800      	ldr	r0, [r0, #0]
    d71a:	f7ff bf7b 	b.w	d614 <_strtol_l.constprop.0>
    d71e:	bf00      	nop
    d720:	2000c644 	.word	0x2000c644

0000d724 <vsniprintf>:
    d724:	b507      	push	{r0, r1, r2, lr}
    d726:	9300      	str	r3, [sp, #0]
    d728:	4613      	mov	r3, r2
    d72a:	460a      	mov	r2, r1
    d72c:	4601      	mov	r1, r0
    d72e:	4803      	ldr	r0, [pc, #12]	; (d73c <vsniprintf+0x18>)
    d730:	6800      	ldr	r0, [r0, #0]
    d732:	f001 fb13 	bl	ed5c <_vsniprintf_r>
    d736:	b003      	add	sp, #12
    d738:	f85d fb04 	ldr.w	pc, [sp], #4
    d73c:	2000c644 	.word	0x2000c644

0000d740 <__malloc_lock>:
    d740:	4801      	ldr	r0, [pc, #4]	; (d748 <__malloc_lock+0x8>)
    d742:	f000 bd70 	b.w	e226 <__retarget_lock_acquire_recursive>
    d746:	bf00      	nop
    d748:	2000c6c4 	.word	0x2000c6c4

0000d74c <__malloc_unlock>:
    d74c:	4801      	ldr	r0, [pc, #4]	; (d754 <__malloc_unlock+0x8>)
    d74e:	f000 bd70 	b.w	e232 <__retarget_lock_release_recursive>
    d752:	bf00      	nop
    d754:	2000c6c4 	.word	0x2000c6c4

0000d758 <_svfiprintf_r>:
    d758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d75c:	4698      	mov	r8, r3
    d75e:	898b      	ldrh	r3, [r1, #12]
    d760:	b09d      	sub	sp, #116	; 0x74
    d762:	4607      	mov	r7, r0
    d764:	061b      	lsls	r3, r3, #24
    d766:	460d      	mov	r5, r1
    d768:	4614      	mov	r4, r2
    d76a:	d510      	bpl.n	d78e <_svfiprintf_r+0x36>
    d76c:	690b      	ldr	r3, [r1, #16]
    d76e:	b973      	cbnz	r3, d78e <_svfiprintf_r+0x36>
    d770:	2140      	movs	r1, #64	; 0x40
    d772:	f7ff fee5 	bl	d540 <_malloc_r>
    d776:	6028      	str	r0, [r5, #0]
    d778:	6128      	str	r0, [r5, #16]
    d77a:	b930      	cbnz	r0, d78a <_svfiprintf_r+0x32>
    d77c:	230c      	movs	r3, #12
    d77e:	603b      	str	r3, [r7, #0]
    d780:	f04f 30ff 	mov.w	r0, #4294967295
    d784:	b01d      	add	sp, #116	; 0x74
    d786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d78a:	2340      	movs	r3, #64	; 0x40
    d78c:	616b      	str	r3, [r5, #20]
    d78e:	2300      	movs	r3, #0
    d790:	f8cd 800c 	str.w	r8, [sp, #12]
    d794:	f04f 0901 	mov.w	r9, #1
    d798:	f8df 81a0 	ldr.w	r8, [pc, #416]	; d93c <_svfiprintf_r+0x1e4>
    d79c:	9309      	str	r3, [sp, #36]	; 0x24
    d79e:	2320      	movs	r3, #32
    d7a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    d7a4:	2330      	movs	r3, #48	; 0x30
    d7a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    d7aa:	4623      	mov	r3, r4
    d7ac:	469a      	mov	sl, r3
    d7ae:	f813 2b01 	ldrb.w	r2, [r3], #1
    d7b2:	b10a      	cbz	r2, d7b8 <_svfiprintf_r+0x60>
    d7b4:	2a25      	cmp	r2, #37	; 0x25
    d7b6:	d1f9      	bne.n	d7ac <_svfiprintf_r+0x54>
    d7b8:	ebba 0b04 	subs.w	fp, sl, r4
    d7bc:	d00b      	beq.n	d7d6 <_svfiprintf_r+0x7e>
    d7be:	465b      	mov	r3, fp
    d7c0:	4622      	mov	r2, r4
    d7c2:	4629      	mov	r1, r5
    d7c4:	4638      	mov	r0, r7
    d7c6:	f001 faf4 	bl	edb2 <__ssputs_r>
    d7ca:	3001      	adds	r0, #1
    d7cc:	f000 80a7 	beq.w	d91e <_svfiprintf_r+0x1c6>
    d7d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d7d2:	445a      	add	r2, fp
    d7d4:	9209      	str	r2, [sp, #36]	; 0x24
    d7d6:	f89a 3000 	ldrb.w	r3, [sl]
    d7da:	2b00      	cmp	r3, #0
    d7dc:	f000 809f 	beq.w	d91e <_svfiprintf_r+0x1c6>
    d7e0:	2300      	movs	r3, #0
    d7e2:	f04f 32ff 	mov.w	r2, #4294967295
    d7e6:	f10a 0a01 	add.w	sl, sl, #1
    d7ea:	9304      	str	r3, [sp, #16]
    d7ec:	9307      	str	r3, [sp, #28]
    d7ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    d7f2:	931a      	str	r3, [sp, #104]	; 0x68
    d7f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
    d7f8:	4654      	mov	r4, sl
    d7fa:	2205      	movs	r2, #5
    d7fc:	484f      	ldr	r0, [pc, #316]	; (d93c <_svfiprintf_r+0x1e4>)
    d7fe:	f814 1b01 	ldrb.w	r1, [r4], #1
    d802:	f001 fba3 	bl	ef4c <memchr>
    d806:	9a04      	ldr	r2, [sp, #16]
    d808:	b9d8      	cbnz	r0, d842 <_svfiprintf_r+0xea>
    d80a:	06d0      	lsls	r0, r2, #27
    d80c:	bf44      	itt	mi
    d80e:	2320      	movmi	r3, #32
    d810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    d814:	0711      	lsls	r1, r2, #28
    d816:	bf44      	itt	mi
    d818:	232b      	movmi	r3, #43	; 0x2b
    d81a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    d81e:	f89a 3000 	ldrb.w	r3, [sl]
    d822:	2b2a      	cmp	r3, #42	; 0x2a
    d824:	d015      	beq.n	d852 <_svfiprintf_r+0xfa>
    d826:	9a07      	ldr	r2, [sp, #28]
    d828:	4654      	mov	r4, sl
    d82a:	2000      	movs	r0, #0
    d82c:	f04f 0c0a 	mov.w	ip, #10
    d830:	4621      	mov	r1, r4
    d832:	f811 3b01 	ldrb.w	r3, [r1], #1
    d836:	3b30      	subs	r3, #48	; 0x30
    d838:	2b09      	cmp	r3, #9
    d83a:	d94b      	bls.n	d8d4 <_svfiprintf_r+0x17c>
    d83c:	b1b0      	cbz	r0, d86c <_svfiprintf_r+0x114>
    d83e:	9207      	str	r2, [sp, #28]
    d840:	e014      	b.n	d86c <_svfiprintf_r+0x114>
    d842:	eba0 0308 	sub.w	r3, r0, r8
    d846:	46a2      	mov	sl, r4
    d848:	fa09 f303 	lsl.w	r3, r9, r3
    d84c:	4313      	orrs	r3, r2
    d84e:	9304      	str	r3, [sp, #16]
    d850:	e7d2      	b.n	d7f8 <_svfiprintf_r+0xa0>
    d852:	9b03      	ldr	r3, [sp, #12]
    d854:	1d19      	adds	r1, r3, #4
    d856:	681b      	ldr	r3, [r3, #0]
    d858:	2b00      	cmp	r3, #0
    d85a:	9103      	str	r1, [sp, #12]
    d85c:	bfbb      	ittet	lt
    d85e:	425b      	neglt	r3, r3
    d860:	f042 0202 	orrlt.w	r2, r2, #2
    d864:	9307      	strge	r3, [sp, #28]
    d866:	9307      	strlt	r3, [sp, #28]
    d868:	bfb8      	it	lt
    d86a:	9204      	strlt	r2, [sp, #16]
    d86c:	7823      	ldrb	r3, [r4, #0]
    d86e:	2b2e      	cmp	r3, #46	; 0x2e
    d870:	d10a      	bne.n	d888 <_svfiprintf_r+0x130>
    d872:	7863      	ldrb	r3, [r4, #1]
    d874:	2b2a      	cmp	r3, #42	; 0x2a
    d876:	d132      	bne.n	d8de <_svfiprintf_r+0x186>
    d878:	9b03      	ldr	r3, [sp, #12]
    d87a:	3402      	adds	r4, #2
    d87c:	1d1a      	adds	r2, r3, #4
    d87e:	681b      	ldr	r3, [r3, #0]
    d880:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
    d884:	9203      	str	r2, [sp, #12]
    d886:	9305      	str	r3, [sp, #20]
    d888:	f8df a0b4 	ldr.w	sl, [pc, #180]	; d940 <_svfiprintf_r+0x1e8>
    d88c:	2203      	movs	r2, #3
    d88e:	7821      	ldrb	r1, [r4, #0]
    d890:	4650      	mov	r0, sl
    d892:	f001 fb5b 	bl	ef4c <memchr>
    d896:	b138      	cbz	r0, d8a8 <_svfiprintf_r+0x150>
    d898:	eba0 000a 	sub.w	r0, r0, sl
    d89c:	2240      	movs	r2, #64	; 0x40
    d89e:	9b04      	ldr	r3, [sp, #16]
    d8a0:	3401      	adds	r4, #1
    d8a2:	4082      	lsls	r2, r0
    d8a4:	4313      	orrs	r3, r2
    d8a6:	9304      	str	r3, [sp, #16]
    d8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
    d8ac:	2206      	movs	r2, #6
    d8ae:	4825      	ldr	r0, [pc, #148]	; (d944 <_svfiprintf_r+0x1ec>)
    d8b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    d8b4:	f001 fb4a 	bl	ef4c <memchr>
    d8b8:	2800      	cmp	r0, #0
    d8ba:	d036      	beq.n	d92a <_svfiprintf_r+0x1d2>
    d8bc:	4b22      	ldr	r3, [pc, #136]	; (d948 <_svfiprintf_r+0x1f0>)
    d8be:	bb1b      	cbnz	r3, d908 <_svfiprintf_r+0x1b0>
    d8c0:	9b03      	ldr	r3, [sp, #12]
    d8c2:	3307      	adds	r3, #7
    d8c4:	f023 0307 	bic.w	r3, r3, #7
    d8c8:	3308      	adds	r3, #8
    d8ca:	9303      	str	r3, [sp, #12]
    d8cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d8ce:	4433      	add	r3, r6
    d8d0:	9309      	str	r3, [sp, #36]	; 0x24
    d8d2:	e76a      	b.n	d7aa <_svfiprintf_r+0x52>
    d8d4:	fb0c 3202 	mla	r2, ip, r2, r3
    d8d8:	460c      	mov	r4, r1
    d8da:	2001      	movs	r0, #1
    d8dc:	e7a8      	b.n	d830 <_svfiprintf_r+0xd8>
    d8de:	2300      	movs	r3, #0
    d8e0:	3401      	adds	r4, #1
    d8e2:	f04f 0c0a 	mov.w	ip, #10
    d8e6:	4619      	mov	r1, r3
    d8e8:	9305      	str	r3, [sp, #20]
    d8ea:	4620      	mov	r0, r4
    d8ec:	f810 2b01 	ldrb.w	r2, [r0], #1
    d8f0:	3a30      	subs	r2, #48	; 0x30
    d8f2:	2a09      	cmp	r2, #9
    d8f4:	d903      	bls.n	d8fe <_svfiprintf_r+0x1a6>
    d8f6:	2b00      	cmp	r3, #0
    d8f8:	d0c6      	beq.n	d888 <_svfiprintf_r+0x130>
    d8fa:	9105      	str	r1, [sp, #20]
    d8fc:	e7c4      	b.n	d888 <_svfiprintf_r+0x130>
    d8fe:	fb0c 2101 	mla	r1, ip, r1, r2
    d902:	4604      	mov	r4, r0
    d904:	2301      	movs	r3, #1
    d906:	e7f0      	b.n	d8ea <_svfiprintf_r+0x192>
    d908:	ab03      	add	r3, sp, #12
    d90a:	462a      	mov	r2, r5
    d90c:	a904      	add	r1, sp, #16
    d90e:	4638      	mov	r0, r7
    d910:	9300      	str	r3, [sp, #0]
    d912:	4b0e      	ldr	r3, [pc, #56]	; (d94c <_svfiprintf_r+0x1f4>)
    d914:	f3af 8000 	nop.w
    d918:	1c42      	adds	r2, r0, #1
    d91a:	4606      	mov	r6, r0
    d91c:	d1d6      	bne.n	d8cc <_svfiprintf_r+0x174>
    d91e:	89ab      	ldrh	r3, [r5, #12]
    d920:	065b      	lsls	r3, r3, #25
    d922:	f53f af2d 	bmi.w	d780 <_svfiprintf_r+0x28>
    d926:	9809      	ldr	r0, [sp, #36]	; 0x24
    d928:	e72c      	b.n	d784 <_svfiprintf_r+0x2c>
    d92a:	ab03      	add	r3, sp, #12
    d92c:	462a      	mov	r2, r5
    d92e:	a904      	add	r1, sp, #16
    d930:	4638      	mov	r0, r7
    d932:	9300      	str	r3, [sp, #0]
    d934:	4b05      	ldr	r3, [pc, #20]	; (d94c <_svfiprintf_r+0x1f4>)
    d936:	f000 f80b 	bl	d950 <_printf_i>
    d93a:	e7ed      	b.n	d918 <_svfiprintf_r+0x1c0>
    d93c:	0000fa50 	.word	0x0000fa50
    d940:	0000fa56 	.word	0x0000fa56
    d944:	0000fa5a 	.word	0x0000fa5a
    d948:	00000000 	.word	0x00000000
    d94c:	0000edb3 	.word	0x0000edb3

0000d950 <_printf_i>:
    d950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    d954:	7e0f      	ldrb	r7, [r1, #24]
    d956:	4691      	mov	r9, r2
    d958:	4680      	mov	r8, r0
    d95a:	460c      	mov	r4, r1
    d95c:	2f78      	cmp	r7, #120	; 0x78
    d95e:	469a      	mov	sl, r3
    d960:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    d962:	f101 0243 	add.w	r2, r1, #67	; 0x43
    d966:	d807      	bhi.n	d978 <_printf_i+0x28>
    d968:	2f62      	cmp	r7, #98	; 0x62
    d96a:	d80a      	bhi.n	d982 <_printf_i+0x32>
    d96c:	2f00      	cmp	r7, #0
    d96e:	f000 80e0 	beq.w	db32 <_printf_i+0x1e2>
    d972:	2f58      	cmp	r7, #88	; 0x58
    d974:	f000 80bb 	beq.w	daee <_printf_i+0x19e>
    d978:	f104 0642 	add.w	r6, r4, #66	; 0x42
    d97c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    d980:	e03a      	b.n	d9f8 <_printf_i+0xa8>
    d982:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    d986:	2b15      	cmp	r3, #21
    d988:	d8f6      	bhi.n	d978 <_printf_i+0x28>
    d98a:	a101      	add	r1, pc, #4	; (adr r1, d990 <_printf_i+0x40>)
    d98c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    d990:	0000d9e9 	.word	0x0000d9e9
    d994:	0000d9fd 	.word	0x0000d9fd
    d998:	0000d979 	.word	0x0000d979
    d99c:	0000d979 	.word	0x0000d979
    d9a0:	0000d979 	.word	0x0000d979
    d9a4:	0000d979 	.word	0x0000d979
    d9a8:	0000d9fd 	.word	0x0000d9fd
    d9ac:	0000d979 	.word	0x0000d979
    d9b0:	0000d979 	.word	0x0000d979
    d9b4:	0000d979 	.word	0x0000d979
    d9b8:	0000d979 	.word	0x0000d979
    d9bc:	0000db19 	.word	0x0000db19
    d9c0:	0000da8d 	.word	0x0000da8d
    d9c4:	0000dacf 	.word	0x0000dacf
    d9c8:	0000d979 	.word	0x0000d979
    d9cc:	0000d979 	.word	0x0000d979
    d9d0:	0000db3b 	.word	0x0000db3b
    d9d4:	0000d979 	.word	0x0000d979
    d9d8:	0000da8d 	.word	0x0000da8d
    d9dc:	0000d979 	.word	0x0000d979
    d9e0:	0000d979 	.word	0x0000d979
    d9e4:	0000dad7 	.word	0x0000dad7
    d9e8:	682b      	ldr	r3, [r5, #0]
    d9ea:	f104 0642 	add.w	r6, r4, #66	; 0x42
    d9ee:	1d1a      	adds	r2, r3, #4
    d9f0:	681b      	ldr	r3, [r3, #0]
    d9f2:	602a      	str	r2, [r5, #0]
    d9f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    d9f8:	2301      	movs	r3, #1
    d9fa:	e0ab      	b.n	db54 <_printf_i+0x204>
    d9fc:	6823      	ldr	r3, [r4, #0]
    d9fe:	6829      	ldr	r1, [r5, #0]
    da00:	061f      	lsls	r7, r3, #24
    da02:	f101 0004 	add.w	r0, r1, #4
    da06:	6028      	str	r0, [r5, #0]
    da08:	d501      	bpl.n	da0e <_printf_i+0xbe>
    da0a:	680d      	ldr	r5, [r1, #0]
    da0c:	e003      	b.n	da16 <_printf_i+0xc6>
    da0e:	065e      	lsls	r6, r3, #25
    da10:	d5fb      	bpl.n	da0a <_printf_i+0xba>
    da12:	f9b1 5000 	ldrsh.w	r5, [r1]
    da16:	2d00      	cmp	r5, #0
    da18:	6861      	ldr	r1, [r4, #4]
    da1a:	da7a      	bge.n	db12 <_printf_i+0x1c2>
    da1c:	202d      	movs	r0, #45	; 0x2d
    da1e:	2900      	cmp	r1, #0
    da20:	60a1      	str	r1, [r4, #8]
    da22:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    da26:	da2d      	bge.n	da84 <_printf_i+0x134>
    da28:	426d      	negs	r5, r5
    da2a:	485e      	ldr	r0, [pc, #376]	; (dba4 <_printf_i+0x254>)
    da2c:	230a      	movs	r3, #10
    da2e:	4616      	mov	r6, r2
    da30:	fbb5 f1f3 	udiv	r1, r5, r3
    da34:	fb03 5711 	mls	r7, r3, r1, r5
    da38:	5dc7      	ldrb	r7, [r0, r7]
    da3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
    da3e:	462f      	mov	r7, r5
    da40:	460d      	mov	r5, r1
    da42:	42bb      	cmp	r3, r7
    da44:	d9f4      	bls.n	da30 <_printf_i+0xe0>
    da46:	2b08      	cmp	r3, #8
    da48:	d10b      	bne.n	da62 <_printf_i+0x112>
    da4a:	6823      	ldr	r3, [r4, #0]
    da4c:	07df      	lsls	r7, r3, #31
    da4e:	d508      	bpl.n	da62 <_printf_i+0x112>
    da50:	6923      	ldr	r3, [r4, #16]
    da52:	6861      	ldr	r1, [r4, #4]
    da54:	4299      	cmp	r1, r3
    da56:	bfde      	ittt	le
    da58:	2330      	movle	r3, #48	; 0x30
    da5a:	f806 3c01 	strble.w	r3, [r6, #-1]
    da5e:	f106 36ff 	addle.w	r6, r6, #4294967295
    da62:	1b92      	subs	r2, r2, r6
    da64:	6122      	str	r2, [r4, #16]
    da66:	464b      	mov	r3, r9
    da68:	aa03      	add	r2, sp, #12
    da6a:	4621      	mov	r1, r4
    da6c:	4640      	mov	r0, r8
    da6e:	f8cd a000 	str.w	sl, [sp]
    da72:	f001 f9f9 	bl	ee68 <_printf_common>
    da76:	3001      	adds	r0, #1
    da78:	d171      	bne.n	db5e <_printf_i+0x20e>
    da7a:	f04f 30ff 	mov.w	r0, #4294967295
    da7e:	b004      	add	sp, #16
    da80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    da84:	f023 0304 	bic.w	r3, r3, #4
    da88:	6023      	str	r3, [r4, #0]
    da8a:	e7cd      	b.n	da28 <_printf_i+0xd8>
    da8c:	682b      	ldr	r3, [r5, #0]
    da8e:	6820      	ldr	r0, [r4, #0]
    da90:	1d19      	adds	r1, r3, #4
    da92:	6029      	str	r1, [r5, #0]
    da94:	0605      	lsls	r5, r0, #24
    da96:	d501      	bpl.n	da9c <_printf_i+0x14c>
    da98:	681d      	ldr	r5, [r3, #0]
    da9a:	e002      	b.n	daa2 <_printf_i+0x152>
    da9c:	0641      	lsls	r1, r0, #25
    da9e:	d5fb      	bpl.n	da98 <_printf_i+0x148>
    daa0:	881d      	ldrh	r5, [r3, #0]
    daa2:	2f6f      	cmp	r7, #111	; 0x6f
    daa4:	483f      	ldr	r0, [pc, #252]	; (dba4 <_printf_i+0x254>)
    daa6:	bf14      	ite	ne
    daa8:	230a      	movne	r3, #10
    daaa:	2308      	moveq	r3, #8
    daac:	2100      	movs	r1, #0
    daae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    dab2:	6866      	ldr	r6, [r4, #4]
    dab4:	2e00      	cmp	r6, #0
    dab6:	60a6      	str	r6, [r4, #8]
    dab8:	dbb9      	blt.n	da2e <_printf_i+0xde>
    daba:	6821      	ldr	r1, [r4, #0]
    dabc:	f021 0104 	bic.w	r1, r1, #4
    dac0:	6021      	str	r1, [r4, #0]
    dac2:	2d00      	cmp	r5, #0
    dac4:	d1b3      	bne.n	da2e <_printf_i+0xde>
    dac6:	2e00      	cmp	r6, #0
    dac8:	d1b1      	bne.n	da2e <_printf_i+0xde>
    daca:	4616      	mov	r6, r2
    dacc:	e7bb      	b.n	da46 <_printf_i+0xf6>
    dace:	6823      	ldr	r3, [r4, #0]
    dad0:	f043 0320 	orr.w	r3, r3, #32
    dad4:	6023      	str	r3, [r4, #0]
    dad6:	2778      	movs	r7, #120	; 0x78
    dad8:	4833      	ldr	r0, [pc, #204]	; (dba8 <_printf_i+0x258>)
    dada:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
    dade:	6829      	ldr	r1, [r5, #0]
    dae0:	6823      	ldr	r3, [r4, #0]
    dae2:	1d0e      	adds	r6, r1, #4
    dae4:	602e      	str	r6, [r5, #0]
    dae6:	061e      	lsls	r6, r3, #24
    dae8:	d503      	bpl.n	daf2 <_printf_i+0x1a2>
    daea:	680d      	ldr	r5, [r1, #0]
    daec:	e004      	b.n	daf8 <_printf_i+0x1a8>
    daee:	482d      	ldr	r0, [pc, #180]	; (dba4 <_printf_i+0x254>)
    daf0:	e7f3      	b.n	dada <_printf_i+0x18a>
    daf2:	065d      	lsls	r5, r3, #25
    daf4:	d5f9      	bpl.n	daea <_printf_i+0x19a>
    daf6:	880d      	ldrh	r5, [r1, #0]
    daf8:	07d9      	lsls	r1, r3, #31
    dafa:	bf44      	itt	mi
    dafc:	f043 0320 	orrmi.w	r3, r3, #32
    db00:	6023      	strmi	r3, [r4, #0]
    db02:	b10d      	cbz	r5, db08 <_printf_i+0x1b8>
    db04:	2310      	movs	r3, #16
    db06:	e7d1      	b.n	daac <_printf_i+0x15c>
    db08:	6823      	ldr	r3, [r4, #0]
    db0a:	f023 0320 	bic.w	r3, r3, #32
    db0e:	6023      	str	r3, [r4, #0]
    db10:	e7f8      	b.n	db04 <_printf_i+0x1b4>
    db12:	4824      	ldr	r0, [pc, #144]	; (dba4 <_printf_i+0x254>)
    db14:	230a      	movs	r3, #10
    db16:	e7cc      	b.n	dab2 <_printf_i+0x162>
    db18:	682b      	ldr	r3, [r5, #0]
    db1a:	6826      	ldr	r6, [r4, #0]
    db1c:	1d18      	adds	r0, r3, #4
    db1e:	6961      	ldr	r1, [r4, #20]
    db20:	6028      	str	r0, [r5, #0]
    db22:	0635      	lsls	r5, r6, #24
    db24:	681b      	ldr	r3, [r3, #0]
    db26:	d501      	bpl.n	db2c <_printf_i+0x1dc>
    db28:	6019      	str	r1, [r3, #0]
    db2a:	e002      	b.n	db32 <_printf_i+0x1e2>
    db2c:	0670      	lsls	r0, r6, #25
    db2e:	d5fb      	bpl.n	db28 <_printf_i+0x1d8>
    db30:	8019      	strh	r1, [r3, #0]
    db32:	2300      	movs	r3, #0
    db34:	4616      	mov	r6, r2
    db36:	6123      	str	r3, [r4, #16]
    db38:	e795      	b.n	da66 <_printf_i+0x116>
    db3a:	682b      	ldr	r3, [r5, #0]
    db3c:	2100      	movs	r1, #0
    db3e:	1d1a      	adds	r2, r3, #4
    db40:	602a      	str	r2, [r5, #0]
    db42:	681e      	ldr	r6, [r3, #0]
    db44:	6862      	ldr	r2, [r4, #4]
    db46:	4630      	mov	r0, r6
    db48:	f001 fa00 	bl	ef4c <memchr>
    db4c:	b108      	cbz	r0, db52 <_printf_i+0x202>
    db4e:	1b80      	subs	r0, r0, r6
    db50:	6060      	str	r0, [r4, #4]
    db52:	6863      	ldr	r3, [r4, #4]
    db54:	6123      	str	r3, [r4, #16]
    db56:	2300      	movs	r3, #0
    db58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    db5c:	e783      	b.n	da66 <_printf_i+0x116>
    db5e:	6923      	ldr	r3, [r4, #16]
    db60:	4632      	mov	r2, r6
    db62:	4649      	mov	r1, r9
    db64:	4640      	mov	r0, r8
    db66:	47d0      	blx	sl
    db68:	3001      	adds	r0, #1
    db6a:	d086      	beq.n	da7a <_printf_i+0x12a>
    db6c:	6823      	ldr	r3, [r4, #0]
    db6e:	079b      	lsls	r3, r3, #30
    db70:	d414      	bmi.n	db9c <_printf_i+0x24c>
    db72:	68e0      	ldr	r0, [r4, #12]
    db74:	9b03      	ldr	r3, [sp, #12]
    db76:	4298      	cmp	r0, r3
    db78:	bfb8      	it	lt
    db7a:	4618      	movlt	r0, r3
    db7c:	e77f      	b.n	da7e <_printf_i+0x12e>
    db7e:	2301      	movs	r3, #1
    db80:	4632      	mov	r2, r6
    db82:	4649      	mov	r1, r9
    db84:	4640      	mov	r0, r8
    db86:	47d0      	blx	sl
    db88:	3001      	adds	r0, #1
    db8a:	f43f af76 	beq.w	da7a <_printf_i+0x12a>
    db8e:	3501      	adds	r5, #1
    db90:	68e3      	ldr	r3, [r4, #12]
    db92:	9903      	ldr	r1, [sp, #12]
    db94:	1a5b      	subs	r3, r3, r1
    db96:	42ab      	cmp	r3, r5
    db98:	dcf1      	bgt.n	db7e <_printf_i+0x22e>
    db9a:	e7ea      	b.n	db72 <_printf_i+0x222>
    db9c:	2500      	movs	r5, #0
    db9e:	f104 0619 	add.w	r6, r4, #25
    dba2:	e7f5      	b.n	db90 <_printf_i+0x240>
    dba4:	0000fa61 	.word	0x0000fa61
    dba8:	0000fa72 	.word	0x0000fa72

0000dbac <gpio_pin_configure_dt>:
{
    dbac:	4603      	mov	r3, r0
    dbae:	b470      	push	{r4, r5, r6}
    dbb0:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
    dbb2:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    dbb4:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    dbb6:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
    dbb8:	4322      	orrs	r2, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
    dbba:	2401      	movs	r4, #1
	struct gpio_driver_data *data =
    dbbc:	6905      	ldr	r5, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    dbbe:	408c      	lsls	r4, r1
    dbc0:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    dbc2:	f012 0f01 	tst.w	r2, #1
	const struct gpio_driver_api *api =
    dbc6:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    dbc8:	bf14      	ite	ne
    dbca:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    dbcc:	43a3      	biceq	r3, r4
    dbce:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
    dbd0:	6833      	ldr	r3, [r6, #0]
}
    dbd2:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
    dbd4:	4718      	bx	r3

0000dbd6 <arch_printk_char_out>:
}
    dbd6:	2000      	movs	r0, #0
    dbd8:	4770      	bx	lr

0000dbda <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    dbda:	b40f      	push	{r0, r1, r2, r3}
    dbdc:	b507      	push	{r0, r1, r2, lr}
    dbde:	a904      	add	r1, sp, #16
    dbe0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    dbe4:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    dbe6:	f7fa fce3 	bl	85b0 <vprintk>

	va_end(ap);
}
    dbea:	b003      	add	sp, #12
    dbec:	f85d eb04 	ldr.w	lr, [sp], #4
    dbf0:	b004      	add	sp, #16
    dbf2:	4770      	bx	lr

0000dbf4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    dbf4:	4604      	mov	r4, r0
    dbf6:	b508      	push	{r3, lr}
    dbf8:	4608      	mov	r0, r1
    dbfa:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    dbfc:	461a      	mov	r2, r3
    dbfe:	47a0      	blx	r4
	return z_impl_z_current_get();
    dc00:	f7ff fa88 	bl	d114 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    dc04:	f7fb fe4a 	bl	989c <z_impl_k_thread_abort>

0000dc08 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    dc08:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    dc0c:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    dc0e:	0840      	lsrs	r0, r0, #1
    dc10:	4770      	bx	lr

0000dc12 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    dc12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc14:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    dc16:	f7ff fff7 	bl	dc08 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    dc1a:	fab0 f080 	clz	r0, r0
    dc1e:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    dc22:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
    dc26:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
    dc2a:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
    dc2c:	1d17      	adds	r7, r2, #4
{
    dc2e:	460c      	mov	r4, r1
    dc30:	3206      	adds	r2, #6
    dc32:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    dc34:	b956      	cbnz	r6, dc4c <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    dc36:	2101      	movs	r1, #1
    dc38:	fa01 f000 	lsl.w	r0, r1, r0
    dc3c:	68d9      	ldr	r1, [r3, #12]
    dc3e:	4301      	orrs	r1, r0
    dc40:	60d9      	str	r1, [r3, #12]
		b->next = c;
    dc42:	f8cc 4010 	str.w	r4, [ip, #16]
    dc46:	53dd      	strh	r5, [r3, r7]
    dc48:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    dc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    dc4c:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    dc4e:	3104      	adds	r1, #4
    dc50:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    dc52:	53d8      	strh	r0, [r3, r7]
    dc54:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    dc58:	529e      	strh	r6, [r3, r2]
    dc5a:	80c5      	strh	r5, [r0, #6]
    dc5c:	525d      	strh	r5, [r3, r1]
    dc5e:	e7f4      	b.n	dc4a <free_list_add+0x38>

0000dc60 <free_list_remove_bidx>:
{
    dc60:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    dc62:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    dc66:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    dc68:	4299      	cmp	r1, r3
    dc6a:	f102 0104 	add.w	r1, r2, #4
    dc6e:	d10a      	bne.n	dc86 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    dc70:	2301      	movs	r3, #1
    dc72:	fa03 f202 	lsl.w	r2, r3, r2
    dc76:	68c3      	ldr	r3, [r0, #12]
    dc78:	ea23 0302 	bic.w	r3, r3, r2
    dc7c:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    dc7e:	2300      	movs	r3, #0
    dc80:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    dc84:	bd10      	pop	{r4, pc}
    dc86:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    dc88:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    dc8c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    dc90:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    dc94:	80cb      	strh	r3, [r1, #6]
    dc96:	8082      	strh	r2, [r0, #4]
}
    dc98:	e7f4      	b.n	dc84 <free_list_remove_bidx+0x24>

0000dc9a <free_list_remove>:
{
    dc9a:	b508      	push	{r3, lr}
    dc9c:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    dc9e:	f7ff ffb3 	bl	dc08 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    dca2:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    dca6:	4618      	mov	r0, r3
}
    dca8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    dcac:	f1c2 021f 	rsb	r2, r2, #31
    dcb0:	f7ff bfd6 	b.w	dc60 <free_list_remove_bidx>

0000dcb4 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    dcb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dcb8:	fab1 f581 	clz	r5, r1
    dcbc:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    dcc0:	eb00 0889 	add.w	r8, r0, r9, lsl #2
    dcc4:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    dcc8:	4603      	mov	r3, r0
    dcca:	460e      	mov	r6, r1
	if (b->next) {
    dccc:	b1c2      	cbz	r2, dd00 <alloc_chunk+0x4c>
    dcce:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    dcd0:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    dcd4:	4618      	mov	r0, r3
    dcd6:	4621      	mov	r1, r4
    dcd8:	f7ff ff96 	bl	dc08 <chunk_size>
    dcdc:	42b0      	cmp	r0, r6
    dcde:	d306      	bcc.n	dcee <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    dce0:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    dce2:	4618      	mov	r0, r3
    dce4:	f7ff ffbc 	bl	dc60 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    dce8:	4620      	mov	r0, r4
    dcea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    dcee:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    dcf2:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
    dcf4:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
    dcf6:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    dcfa:	d001      	beq.n	dd00 <alloc_chunk+0x4c>
    dcfc:	4282      	cmp	r2, r0
    dcfe:	d1e7      	bne.n	dcd0 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    dd00:	f04f 34ff 	mov.w	r4, #4294967295
    dd04:	f1c5 0220 	rsb	r2, r5, #32
    dd08:	4094      	lsls	r4, r2
    dd0a:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    dd0c:	4014      	ands	r4, r2
    dd0e:	d0eb      	beq.n	dce8 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    dd10:	fa94 f2a4 	rbit	r2, r4
    dd14:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    dd18:	1d11      	adds	r1, r2, #4
    dd1a:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    dd1e:	4621      	mov	r1, r4
    dd20:	e7df      	b.n	dce2 <alloc_chunk+0x2e>

0000dd22 <merge_chunks>:
{
    dd22:	b538      	push	{r3, r4, r5, lr}
    dd24:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    dd26:	f7ff ff6f 	bl	dc08 <chunk_size>
{
    dd2a:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    dd2c:	4604      	mov	r4, r0
    dd2e:	4611      	mov	r1, r2
    dd30:	4618      	mov	r0, r3
    dd32:	f7ff ff69 	bl	dc08 <chunk_size>
    dd36:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    dd38:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    dd3a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    dd3e:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    dd40:	4618      	mov	r0, r3
    dd42:	f7ff ff61 	bl	dc08 <chunk_size>
	void *cmem = &buf[c];
    dd46:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    dd48:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    dd4c:	bd38      	pop	{r3, r4, r5, pc}

0000dd4e <split_chunks>:
{
    dd4e:	b538      	push	{r3, r4, r5, lr}
    dd50:	460c      	mov	r4, r1
    dd52:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    dd54:	f7ff ff58 	bl	dc08 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
    dd58:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    dd5a:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
    dd5c:	4405      	add	r5, r0
    dd5e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    dd62:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    dd64:	8060      	strh	r0, [r4, #2]
    dd66:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    dd6a:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    dd6c:	8044      	strh	r4, [r0, #2]
    dd6e:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    dd72:	4618      	mov	r0, r3
    dd74:	4611      	mov	r1, r2
    dd76:	f7ff ff47 	bl	dc08 <chunk_size>
	void *cmem = &buf[c];
    dd7a:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    dd7c:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    dd80:	bd38      	pop	{r3, r4, r5, pc}

0000dd82 <free_chunk>:
{
    dd82:	b538      	push	{r3, r4, r5, lr}
    dd84:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    dd86:	f7ff ff3f 	bl	dc08 <chunk_size>
    dd8a:	460c      	mov	r4, r1
    dd8c:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    dd8e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    dd92:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    dd94:	07da      	lsls	r2, r3, #31
    dd96:	d40a      	bmi.n	ddae <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    dd98:	4628      	mov	r0, r5
    dd9a:	f7ff ff7e 	bl	dc9a <free_list_remove>
	return c + chunk_size(h, c);
    dd9e:	4621      	mov	r1, r4
    dda0:	4628      	mov	r0, r5
    dda2:	f7ff ff31 	bl	dc08 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    dda6:	1822      	adds	r2, r4, r0
    dda8:	4628      	mov	r0, r5
    ddaa:	f7ff ffba 	bl	dd22 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    ddae:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    ddb2:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    ddb4:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    ddb8:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    ddba:	07db      	lsls	r3, r3, #31
    ddbc:	d40c      	bmi.n	ddd8 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    ddbe:	4628      	mov	r0, r5
    ddc0:	f7ff ff6b 	bl	dc9a <free_list_remove>
		return ((uint16_t *)cmem)[f];
    ddc4:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    ddc8:	4622      	mov	r2, r4
    ddca:	1a61      	subs	r1, r4, r1
    ddcc:	4628      	mov	r0, r5
    ddce:	f7ff ffa8 	bl	dd22 <merge_chunks>
    ddd2:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    ddd6:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    ddd8:	4621      	mov	r1, r4
    ddda:	4628      	mov	r0, r5
}
    dddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    dde0:	f7ff bf17 	b.w	dc12 <free_list_add>

0000dde4 <sys_heap_free>:
	if (mem == NULL) {
    dde4:	b161      	cbz	r1, de00 <sys_heap_free+0x1c>
    dde6:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    dde8:	3904      	subs	r1, #4
    ddea:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    ddec:	f021 0307 	bic.w	r3, r1, #7
    ddf0:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    ddf2:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
    ddf4:	08c9      	lsrs	r1, r1, #3
    ddf6:	f022 0201 	bic.w	r2, r2, #1
    ddfa:	805a      	strh	r2, [r3, #2]
    ddfc:	f7ff bfc1 	b.w	dd82 <free_chunk>
}
    de00:	4770      	bx	lr

0000de02 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    de02:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    de04:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    de06:	b909      	cbnz	r1, de0c <sys_heap_alloc+0xa>
		return NULL;
    de08:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    de0a:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    de0c:	68ab      	ldr	r3, [r5, #8]
    de0e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    de12:	d9f9      	bls.n	de08 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    de14:	310b      	adds	r1, #11
    de16:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    de18:	4621      	mov	r1, r4
    de1a:	4628      	mov	r0, r5
    de1c:	f7ff ff4a 	bl	dcb4 <alloc_chunk>
	if (c == 0U) {
    de20:	4606      	mov	r6, r0
    de22:	2800      	cmp	r0, #0
    de24:	d0f0      	beq.n	de08 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    de26:	4601      	mov	r1, r0
    de28:	4628      	mov	r0, r5
    de2a:	f7ff feed 	bl	dc08 <chunk_size>
    de2e:	42a0      	cmp	r0, r4
    de30:	d907      	bls.n	de42 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    de32:	4628      	mov	r0, r5
    de34:	1932      	adds	r2, r6, r4
    de36:	f7ff ff8a 	bl	dd4e <split_chunks>
		free_list_add(h, c + chunk_sz);
    de3a:	4611      	mov	r1, r2
    de3c:	4628      	mov	r0, r5
    de3e:	f7ff fee8 	bl	dc12 <free_list_add>
	void *cmem = &buf[c];
    de42:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    de46:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    de48:	8853      	ldrh	r3, [r2, #2]
    de4a:	3004      	adds	r0, #4
    de4c:	f043 0301 	orr.w	r3, r3, #1
    de50:	8053      	strh	r3, [r2, #2]
	return mem;
    de52:	e7da      	b.n	de0a <sys_heap_alloc+0x8>

0000de54 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    de54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    de58:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    de5c:	ea19 0901 	ands.w	r9, r9, r1
{
    de60:	460f      	mov	r7, r1
    de62:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    de64:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    de66:	d00c      	beq.n	de82 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
    de68:	424b      	negs	r3, r1
    de6a:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    de6c:	2b04      	cmp	r3, #4
    de6e:	461a      	mov	r2, r3
    de70:	464f      	mov	r7, r9
    de72:	bf28      	it	cs
    de74:	2204      	movcs	r2, #4
	rew = align & -align;
    de76:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    de78:	b964      	cbnz	r4, de94 <sys_heap_aligned_alloc+0x40>
		return NULL;
    de7a:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    de7c:	4628      	mov	r0, r5
    de7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    de82:	2904      	cmp	r1, #4
    de84:	d804      	bhi.n	de90 <sys_heap_aligned_alloc+0x3c>
}
    de86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    de8a:	4611      	mov	r1, r2
    de8c:	f7ff bfb9 	b.w	de02 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
    de90:	2204      	movs	r2, #4
    de92:	e7f1      	b.n	de78 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
    de94:	68b3      	ldr	r3, [r6, #8]
    de96:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    de9a:	d9ee      	bls.n	de7a <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    de9c:	f104 010b 	add.w	r1, r4, #11
    dea0:	4439      	add	r1, r7
    dea2:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    dea4:	4630      	mov	r0, r6
    dea6:	08c9      	lsrs	r1, r1, #3
    dea8:	f7ff ff04 	bl	dcb4 <alloc_chunk>
	if (c0 == 0) {
    deac:	4680      	mov	r8, r0
    deae:	2800      	cmp	r0, #0
    deb0:	d0e3      	beq.n	de7a <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    deb2:	f109 0504 	add.w	r5, r9, #4
    deb6:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    deba:	1e7b      	subs	r3, r7, #1
    debc:	4435      	add	r5, r6
    debe:	441d      	add	r5, r3
    dec0:	427f      	negs	r7, r7
    dec2:	403d      	ands	r5, r7
    dec4:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    dec8:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    deca:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    decc:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    dece:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ded0:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    ded4:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    ded6:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    deda:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    dede:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    dee2:	d208      	bcs.n	def6 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
    dee4:	4601      	mov	r1, r0
    dee6:	463a      	mov	r2, r7
    dee8:	4630      	mov	r0, r6
    deea:	f7ff ff30 	bl	dd4e <split_chunks>
		free_list_add(h, c0);
    deee:	4641      	mov	r1, r8
    def0:	4630      	mov	r0, r6
    def2:	f7ff fe8e 	bl	dc12 <free_list_add>
	return c + chunk_size(h, c);
    def6:	4639      	mov	r1, r7
    def8:	4630      	mov	r0, r6
    defa:	f7ff fe85 	bl	dc08 <chunk_size>
    defe:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    df00:	4284      	cmp	r4, r0
    df02:	d207      	bcs.n	df14 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
    df04:	4630      	mov	r0, r6
    df06:	4622      	mov	r2, r4
    df08:	f7ff ff21 	bl	dd4e <split_chunks>
		free_list_add(h, c_end);
    df0c:	4621      	mov	r1, r4
    df0e:	4630      	mov	r0, r6
    df10:	f7ff fe7f 	bl	dc12 <free_list_add>
	void *cmem = &buf[c];
    df14:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    df18:	8873      	ldrh	r3, [r6, #2]
    df1a:	f043 0301 	orr.w	r3, r3, #1
    df1e:	8073      	strh	r3, [r6, #2]
    df20:	e7ac      	b.n	de7c <sys_heap_aligned_alloc+0x28>

0000df22 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    df22:	3a04      	subs	r2, #4
{
    df24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    df28:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    df2a:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    df2c:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    df30:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    df34:	1b0e      	subs	r6, r1, r4
    df36:	08f7      	lsrs	r7, r6, #3
	return 31 - __builtin_clz(usable_sz);
    df38:	fab7 f287 	clz	r2, r7
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    df3c:	f04f 0800 	mov.w	r8, #0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    df40:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
    df44:	00ad      	lsls	r5, r5, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    df46:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    df48:	f1c2 0220 	rsb	r2, r2, #32
    df4c:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
    df4e:	6004      	str	r4, [r0, #0]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    df50:	4641      	mov	r1, r8
	h->end_chunk = heap_sz;
    df52:	60a7      	str	r7, [r4, #8]
	h->avail_buckets = 0;
    df54:	f8c4 800c 	str.w	r8, [r4, #12]
		h->buckets[i].next = 0;
    df58:	0092      	lsls	r2, r2, #2
    df5a:	f104 0010 	add.w	r0, r4, #16
    df5e:	f000 fec0 	bl	ece2 <memset>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    df62:	006b      	lsls	r3, r5, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    df64:	f043 0301 	orr.w	r3, r3, #1
    df68:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    df6a:	1b7b      	subs	r3, r7, r5
		((uint16_t *)cmem)[f] = val;
    df6c:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    df70:	0059      	lsls	r1, r3, #1
		((uint16_t *)cmem)[f] = val;
    df72:	f8a4 8000 	strh.w	r8, [r4]
    df76:	8051      	strh	r1, [r2, #2]
    df78:	19a2      	adds	r2, r4, r6
    df7a:	f824 5035 	strh.w	r5, [r4, r5, lsl #3]
    df7e:	f8a2 8002 	strh.w	r8, [r2, #2]
    df82:	53a3      	strh	r3, [r4, r6]
	void *cmem = &buf[c];
    df84:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    df88:	885a      	ldrh	r2, [r3, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    df8a:	4629      	mov	r1, r5
    df8c:	f042 0201 	orr.w	r2, r2, #1
    df90:	805a      	strh	r2, [r3, #2]
    df92:	4620      	mov	r0, r4
}
    df94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    df98:	f7ff be3b 	b.w	dc12 <free_list_add>

0000df9c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    df9c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    df9e:	f013 0307 	ands.w	r3, r3, #7
    dfa2:	d105      	bne.n	dfb0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    dfa4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    dfa6:	2b00      	cmp	r3, #0
    dfa8:	bf0c      	ite	eq
    dfaa:	2000      	moveq	r0, #0
    dfac:	2003      	movne	r0, #3
    dfae:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    dfb0:	2b02      	cmp	r3, #2
    dfb2:	d105      	bne.n	dfc0 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    dfb4:	8b40      	ldrh	r0, [r0, #26]
    dfb6:	fab0 f080 	clz	r0, r0
    dfba:	0940      	lsrs	r0, r0, #5
    dfbc:	0080      	lsls	r0, r0, #2
    dfbe:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    dfc0:	2b01      	cmp	r3, #1
    dfc2:	d105      	bne.n	dfd0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    dfc4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    dfc6:	2b00      	cmp	r3, #0
    dfc8:	bf0c      	ite	eq
    dfca:	2000      	moveq	r0, #0
    dfcc:	2005      	movne	r0, #5
    dfce:	4770      	bx	lr
	int evt = EVT_NOP;
    dfd0:	2000      	movs	r0, #0
}
    dfd2:	4770      	bx	lr

0000dfd4 <validate_args>:
{
    dfd4:	b510      	push	{r4, lr}
    dfd6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    dfd8:	b100      	cbz	r0, dfdc <validate_args+0x8>
    dfda:	b911      	cbnz	r1, dfe2 <validate_args+0xe>
		return -EINVAL;
    dfdc:	f06f 0015 	mvn.w	r0, #21
}
    dfe0:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    dfe2:	1d08      	adds	r0, r1, #4
    dfe4:	f000 f895 	bl	e112 <sys_notify_validate>
	if ((rv == 0)
    dfe8:	2800      	cmp	r0, #0
    dfea:	d1f9      	bne.n	dfe0 <validate_args+0xc>
	    && ((cli->notify.flags
    dfec:	68a3      	ldr	r3, [r4, #8]
    dfee:	2b03      	cmp	r3, #3
    dff0:	d9f6      	bls.n	dfe0 <validate_args+0xc>
    dff2:	e7f3      	b.n	dfdc <validate_args+0x8>

0000dff4 <notify_one>:
{
    dff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dff8:	460d      	mov	r5, r1
    dffa:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    dffc:	4619      	mov	r1, r3
    dffe:	1d28      	adds	r0, r5, #4
{
    e000:	4690      	mov	r8, r2
    e002:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    e004:	f000 f896 	bl	e134 <sys_notify_finalize>
	if (cb) {
    e008:	4604      	mov	r4, r0
    e00a:	b138      	cbz	r0, e01c <notify_one+0x28>
		cb(mgr, cli, state, res);
    e00c:	4633      	mov	r3, r6
    e00e:	4642      	mov	r2, r8
    e010:	4629      	mov	r1, r5
    e012:	4638      	mov	r0, r7
    e014:	46a4      	mov	ip, r4
}
    e016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    e01a:	4760      	bx	ip
}
    e01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e020 <transition_complete>:
{
    e020:	b410      	push	{r4}
	__asm__ volatile(
    e022:	f04f 0420 	mov.w	r4, #32
    e026:	f3ef 8211 	mrs	r2, BASEPRI
    e02a:	f384 8812 	msr	BASEPRI_MAX, r4
    e02e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    e032:	6141      	str	r1, [r0, #20]
}
    e034:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    e036:	2101      	movs	r1, #1
    e038:	f7fa bac8 	b.w	85cc <process_event>

0000e03c <onoff_manager_init>:
{
    e03c:	b538      	push	{r3, r4, r5, lr}
    e03e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    e040:	4605      	mov	r5, r0
    e042:	b158      	cbz	r0, e05c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    e044:	b151      	cbz	r1, e05c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    e046:	680b      	ldr	r3, [r1, #0]
    e048:	b143      	cbz	r3, e05c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    e04a:	684b      	ldr	r3, [r1, #4]
    e04c:	b133      	cbz	r3, e05c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    e04e:	221c      	movs	r2, #28
    e050:	2100      	movs	r1, #0
    e052:	f000 fe46 	bl	ece2 <memset>
	return 0;
    e056:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    e058:	612c      	str	r4, [r5, #16]
}
    e05a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    e05c:	f06f 0015 	mvn.w	r0, #21
    e060:	e7fb      	b.n	e05a <onoff_manager_init+0x1e>

0000e062 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    e062:	b570      	push	{r4, r5, r6, lr}
    e064:	4605      	mov	r5, r0
    e066:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    e068:	f7ff ffb4 	bl	dfd4 <validate_args>

	if (rv < 0) {
    e06c:	1e04      	subs	r4, r0, #0
    e06e:	db15      	blt.n	e09c <onoff_request+0x3a>
    e070:	f04f 0320 	mov.w	r3, #32
    e074:	f3ef 8211 	mrs	r2, BASEPRI
    e078:	f383 8812 	msr	BASEPRI_MAX, r3
    e07c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    e080:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e084:	8b6b      	ldrh	r3, [r5, #26]
    e086:	8b2c      	ldrh	r4, [r5, #24]
    e088:	428b      	cmp	r3, r1
    e08a:	f004 0407 	and.w	r4, r4, #7
    e08e:	d107      	bne.n	e0a0 <onoff_request+0x3e>
	__asm__ volatile(
    e090:	f382 8811 	msr	BASEPRI, r2
    e094:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    e098:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    e09c:	4620      	mov	r0, r4
    e09e:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    e0a0:	2c02      	cmp	r4, #2
    e0a2:	d10c      	bne.n	e0be <onoff_request+0x5c>
		mgr->refs += 1U;
    e0a4:	3301      	adds	r3, #1
    e0a6:	836b      	strh	r3, [r5, #26]
    e0a8:	f382 8811 	msr	BASEPRI, r2
    e0ac:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    e0b0:	2300      	movs	r3, #0
    e0b2:	4622      	mov	r2, r4
    e0b4:	4631      	mov	r1, r6
    e0b6:	4628      	mov	r0, r5
    e0b8:	f7ff ff9c 	bl	dff4 <notify_one>
    e0bc:	e7ee      	b.n	e09c <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    e0be:	2c06      	cmp	r4, #6
    e0c0:	d814      	bhi.n	e0ec <onoff_request+0x8a>
    e0c2:	e8df f004 	tbb	[pc, r4]
    e0c6:	1304      	.short	0x1304
    e0c8:	1a041313 	.word	0x1a041313
    e0cc:	04          	.byte	0x04
    e0cd:	00          	.byte	0x00
	parent->next = child;
    e0ce:	2300      	movs	r3, #0
    e0d0:	6033      	str	r3, [r6, #0]
	return list->tail;
    e0d2:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    e0d4:	b93b      	cbnz	r3, e0e6 <onoff_request+0x84>
	list->head = node;
    e0d6:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    e0da:	b9ac      	cbnz	r4, e108 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    e0dc:	2102      	movs	r1, #2
    e0de:	4628      	mov	r0, r5
    e0e0:	f7fa fa74 	bl	85cc <process_event>
    e0e4:	e7da      	b.n	e09c <onoff_request+0x3a>
	parent->next = child;
    e0e6:	601e      	str	r6, [r3, #0]
	list->tail = node;
    e0e8:	606e      	str	r6, [r5, #4]
}
    e0ea:	e7f6      	b.n	e0da <onoff_request+0x78>
    e0ec:	f382 8811 	msr	BASEPRI, r2
    e0f0:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    e0f4:	f06f 0404 	mvn.w	r4, #4
    e0f8:	e7d0      	b.n	e09c <onoff_request+0x3a>
    e0fa:	f382 8811 	msr	BASEPRI, r2
    e0fe:	f3bf 8f6f 	isb	sy
    e102:	f06f 0485 	mvn.w	r4, #133	; 0x85
    e106:	e7c9      	b.n	e09c <onoff_request+0x3a>
    e108:	f382 8811 	msr	BASEPRI, r2
    e10c:	f3bf 8f6f 	isb	sy
		if (notify) {
    e110:	e7c4      	b.n	e09c <onoff_request+0x3a>

0000e112 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    e112:	4603      	mov	r3, r0
    e114:	b158      	cbz	r0, e12e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    e116:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    e118:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    e11c:	2a01      	cmp	r2, #1
    e11e:	d003      	beq.n	e128 <sys_notify_validate+0x16>
    e120:	2a03      	cmp	r2, #3
    e122:	d104      	bne.n	e12e <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    e124:	6802      	ldr	r2, [r0, #0]
    e126:	b112      	cbz	r2, e12e <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    e128:	2000      	movs	r0, #0
    e12a:	6098      	str	r0, [r3, #8]
    e12c:	4770      	bx	lr
    e12e:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    e132:	4770      	bx	lr

0000e134 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    e134:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    e136:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    e138:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    e13c:	2a03      	cmp	r2, #3
    e13e:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    e142:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    e144:	bf14      	ite	ne
    e146:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    e148:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    e14a:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    e14c:	4770      	bx	lr

0000e14e <outs>:
{
    e14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e152:	4607      	mov	r7, r0
    e154:	4688      	mov	r8, r1
    e156:	4615      	mov	r5, r2
    e158:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    e15a:	4614      	mov	r4, r2
    e15c:	42b4      	cmp	r4, r6
    e15e:	d305      	bcc.n	e16c <outs+0x1e>
    e160:	b10e      	cbz	r6, e166 <outs+0x18>
	return (int)count;
    e162:	1b60      	subs	r0, r4, r5
    e164:	e008      	b.n	e178 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    e166:	7823      	ldrb	r3, [r4, #0]
    e168:	2b00      	cmp	r3, #0
    e16a:	d0fa      	beq.n	e162 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    e16c:	4641      	mov	r1, r8
    e16e:	f814 0b01 	ldrb.w	r0, [r4], #1
    e172:	47b8      	blx	r7
		if (rc < 0) {
    e174:	2800      	cmp	r0, #0
    e176:	daf1      	bge.n	e15c <outs+0xe>
}
    e178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e17c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    e17c:	4770      	bx	lr

0000e17e <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    e17e:	2806      	cmp	r0, #6
    e180:	d108      	bne.n	e194 <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    e182:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e186:	2201      	movs	r2, #1
    e188:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    e18c:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
    e190:	bf20      	wfe
    while (true)
    e192:	e7fd      	b.n	e190 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    e194:	4770      	bx	lr

0000e196 <pm_state_exit_post_ops>:
    e196:	2300      	movs	r3, #0
    e198:	f383 8811 	msr	BASEPRI, r3
    e19c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    e1a0:	4770      	bx	lr

0000e1a2 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    e1a2:	f000 bbb8 	b.w	e916 <z_fatal_error>

0000e1a6 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    e1a6:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    e1a8:	6800      	ldr	r0, [r0, #0]
    e1aa:	f000 bbb4 	b.w	e916 <z_fatal_error>

0000e1ae <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    e1ae:	2100      	movs	r1, #0
    e1b0:	2001      	movs	r0, #1
    e1b2:	f7ff bff6 	b.w	e1a2 <z_arm_fatal_error>

0000e1b6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    e1b6:	b508      	push	{r3, lr}
	handler();
    e1b8:	f7fb f8c2 	bl	9340 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    e1bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    e1c0:	f7fb b98a 	b.w	94d8 <z_arm_exc_exit>

0000e1c4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    e1c4:	6e43      	ldr	r3, [r0, #100]	; 0x64
    e1c6:	f383 880b 	msr	PSPLIM, r3
}
    e1ca:	4770      	bx	lr

0000e1cc <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
    e1cc:	4770      	bx	lr

0000e1ce <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
    e1ce:	4770      	bx	lr

0000e1d0 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    e1d0:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    e1d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    e1d8:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    e1da:	bf08      	it	eq
    e1dc:	f06f 0015 	mvneq.w	r0, #21
    e1e0:	4770      	bx	lr

0000e1e2 <mpu_configure_region>:
{
    e1e2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
    e1e4:	890a      	ldrh	r2, [r1, #8]
    e1e6:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
    e1e8:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
    e1ea:	684d      	ldr	r5, [r1, #4]
    e1ec:	f002 021f 	and.w	r2, r2, #31
    e1f0:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
    e1f4:	9300      	str	r3, [sp, #0]
    e1f6:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e1fa:	f023 031f 	bic.w	r3, r3, #31
    e1fe:	1e6a      	subs	r2, r5, #1
    e200:	4413      	add	r3, r2
    e202:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e206:	280f      	cmp	r0, #15
    e208:	9303      	str	r3, [sp, #12]
    e20a:	d804      	bhi.n	e216 <mpu_configure_region+0x34>
	region_init(index, region_conf);
    e20c:	4669      	mov	r1, sp
    e20e:	f7fb fb77 	bl	9900 <region_init>
}
    e212:	b004      	add	sp, #16
    e214:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    e216:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
    e21a:	e7fa      	b.n	e212 <mpu_configure_region+0x30>

0000e21c <malloc_prepare>:
}
    e21c:	2000      	movs	r0, #0
    e21e:	4770      	bx	lr

0000e220 <_stdout_hook_default>:
}
    e220:	f04f 30ff 	mov.w	r0, #4294967295
    e224:	4770      	bx	lr

0000e226 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
    e226:	f04f 32ff 	mov.w	r2, #4294967295
    e22a:	f04f 33ff 	mov.w	r3, #4294967295
    e22e:	f7fe bb97 	b.w	c960 <z_impl_k_mutex_lock>

0000e232 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
    e232:	f7fe bc0f 	b.w	ca54 <z_impl_k_mutex_unlock>

0000e236 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    e236:	f7fe b9e5 	b.w	c604 <z_impl_z_errno>

0000e23a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    e23a:	220c      	movs	r2, #12
    e23c:	6903      	ldr	r3, [r0, #16]
    e23e:	b2c9      	uxtb	r1, r1
    e240:	fb01 3302 	mla	r3, r1, r2, r3
    e244:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    e246:	f000 0007 	and.w	r0, r0, #7
    e24a:	4770      	bx	lr

0000e24c <set_on_state>:
	__asm__ volatile(
    e24c:	f04f 0320 	mov.w	r3, #32
    e250:	f3ef 8211 	mrs	r2, BASEPRI
    e254:	f383 8812 	msr	BASEPRI_MAX, r3
    e258:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    e25c:	6803      	ldr	r3, [r0, #0]
    e25e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e262:	f043 0302 	orr.w	r3, r3, #2
    e266:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    e268:	f382 8811 	msr	BASEPRI, r2
    e26c:	f3bf 8f6f 	isb	sy
}
    e270:	4770      	bx	lr

0000e272 <stop>:
{
    e272:	b570      	push	{r4, r5, r6, lr}
    e274:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    e276:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    e278:	f04f 0420 	mov.w	r4, #32
    e27c:	f3ef 8511 	mrs	r5, BASEPRI
    e280:	f384 8812 	msr	BASEPRI_MAX, r4
    e284:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    e288:	260c      	movs	r6, #12
    e28a:	fb06 3401 	mla	r4, r6, r1, r3
    e28e:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    e290:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    e294:	d008      	beq.n	e2a8 <stop+0x36>
    e296:	42a2      	cmp	r2, r4
    e298:	d006      	beq.n	e2a8 <stop+0x36>
	__asm__ volatile(
    e29a:	f385 8811 	msr	BASEPRI, r5
    e29e:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    e2a2:	f04f 30ff 	mov.w	r0, #4294967295
}
    e2a6:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    e2a8:	2201      	movs	r2, #1
    e2aa:	fb06 3301 	mla	r3, r6, r1, r3
    e2ae:	641a      	str	r2, [r3, #64]	; 0x40
    e2b0:	f385 8811 	msr	BASEPRI, r5
    e2b4:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    e2b8:	6843      	ldr	r3, [r0, #4]
    e2ba:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    e2be:	685b      	ldr	r3, [r3, #4]
    e2c0:	4798      	blx	r3
	return 0;
    e2c2:	2000      	movs	r0, #0
    e2c4:	e7ef      	b.n	e2a6 <stop+0x34>

0000e2c6 <api_stop>:
	return stop(dev, subsys, CTX_API);
    e2c6:	2280      	movs	r2, #128	; 0x80
    e2c8:	f7ff bfd3 	b.w	e272 <stop>

0000e2cc <async_start>:
{
    e2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2ce:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    e2d0:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    e2d2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    e2d4:	f04f 0520 	mov.w	r5, #32
    e2d8:	f3ef 8611 	mrs	r6, BASEPRI
    e2dc:	f385 8812 	msr	BASEPRI_MAX, r5
    e2e0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    e2e4:	250c      	movs	r5, #12
    e2e6:	fb05 4401 	mla	r4, r5, r1, r4
    e2ea:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    e2ec:	f005 0c07 	and.w	ip, r5, #7
    e2f0:	f1bc 0f01 	cmp.w	ip, #1
    e2f4:	d10c      	bne.n	e310 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    e2f6:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    e2f8:	f386 8811 	msr	BASEPRI, r6
    e2fc:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    e300:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    e304:	6843      	ldr	r3, [r0, #4]
    e306:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    e30a:	4798      	blx	r3
	return 0;
    e30c:	2000      	movs	r0, #0
}
    e30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    e310:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    e314:	42af      	cmp	r7, r5
    e316:	f386 8811 	msr	BASEPRI, r6
    e31a:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    e31e:	bf0c      	ite	eq
    e320:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    e324:	f04f 30ff 	movne.w	r0, #4294967295
    e328:	e7f1      	b.n	e30e <async_start+0x42>

0000e32a <api_start>:
{
    e32a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    e32c:	2480      	movs	r4, #128	; 0x80
    e32e:	9400      	str	r4, [sp, #0]
    e330:	f7ff ffcc 	bl	e2cc <async_start>
}
    e334:	b002      	add	sp, #8
    e336:	bd10      	pop	{r4, pc}

0000e338 <onoff_started_callback>:
{
    e338:	b410      	push	{r4}
	notify(mgr, 0);
    e33a:	241c      	movs	r4, #28
	return &data->mgr[type];
    e33c:	6900      	ldr	r0, [r0, #16]
    e33e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    e340:	fb03 0004 	mla	r0, r3, r4, r0
    e344:	2100      	movs	r1, #0
}
    e346:	bc10      	pop	{r4}
	notify(mgr, 0);
    e348:	4710      	bx	r2

0000e34a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    e34a:	2000      	movs	r0, #0
    e34c:	f7fc bdac 	b.w	aea8 <nrfx_clock_start>

0000e350 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    e350:	2000      	movs	r0, #0
    e352:	f000 b92a 	b.w	e5aa <nrfx_clock_stop>

0000e356 <blocking_start_callback>:
{
    e356:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    e358:	f7fe bbb8 	b.w	cacc <z_impl_k_sem_give>

0000e35c <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
    e35c:	4608      	mov	r0, r1
    e35e:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
    e360:	4611      	mov	r1, r2
    e362:	f7fc fcb3 	bl	accc <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
    e366:	2800      	cmp	r0, #0
	}

	return 0;
}
    e368:	bf18      	it	ne
    e36a:	f06f 0004 	mvnne.w	r0, #4
    e36e:	bd08      	pop	{r3, pc}

0000e370 <entropy_psa_crypto_rng_init>:
{
    e370:	b508      	push	{r3, lr}
	status = psa_crypto_init();
    e372:	f000 f914 	bl	e59e <psa_crypto_init>
		return -EIO;
    e376:	2800      	cmp	r0, #0
}
    e378:	bf18      	it	ne
    e37a:	f06f 0004 	mvnne.w	r0, #4
    e37e:	bd08      	pop	{r3, pc}

0000e380 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e380:	6843      	ldr	r3, [r0, #4]
}
    e382:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e384:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    e386:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    e388:	600b      	str	r3, [r1, #0]
}
    e38a:	4770      	bx	lr

0000e38c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e38c:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    e38e:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e392:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    e394:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    e398:	6098      	str	r0, [r3, #8]
}
    e39a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    e39c:	60d9      	str	r1, [r3, #12]
    e39e:	4770      	bx	lr

0000e3a0 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e3a0:	6843      	ldr	r3, [r0, #4]
}
    e3a2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e3a4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    e3a6:	6099      	str	r1, [r3, #8]
}
    e3a8:	4770      	bx	lr

0000e3aa <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e3aa:	6843      	ldr	r3, [r0, #4]
}
    e3ac:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e3ae:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    e3b0:	60d9      	str	r1, [r3, #12]
}
    e3b2:	4770      	bx	lr

0000e3b4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e3b4:	6843      	ldr	r3, [r0, #4]
    e3b6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    e3b8:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    e3ba:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    e3be:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    e3c0:	6090      	str	r0, [r2, #8]
}
    e3c2:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    e3c4:	60d3      	str	r3, [r2, #12]
    e3c6:	4770      	bx	lr

0000e3c8 <gpio_nrfx_manage_callback>:
{
    e3c8:	b510      	push	{r4, lr}
	return port->data;
    e3ca:	6903      	ldr	r3, [r0, #16]
	return list->head;
    e3cc:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    e3ce:	b1f8      	cbz	r0, e410 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e3d0:	4288      	cmp	r0, r1
    e3d2:	d119      	bne.n	e408 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    e3d4:	689c      	ldr	r4, [r3, #8]
	return node->next;
    e3d6:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    e3d8:	42a1      	cmp	r1, r4
	list->head = node;
    e3da:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    e3dc:	d100      	bne.n	e3e0 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    e3de:	6098      	str	r0, [r3, #8]
	parent->next = child;
    e3e0:	2000      	movs	r0, #0
    e3e2:	6008      	str	r0, [r1, #0]
	if (set) {
    e3e4:	b12a      	cbz	r2, e3f2 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    e3e6:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    e3e8:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    e3ea:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    e3ec:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    e3ee:	b902      	cbnz	r2, e3f2 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    e3f0:	6099      	str	r1, [r3, #8]
	return 0;
    e3f2:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    e3f4:	e010      	b.n	e418 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e3f6:	4281      	cmp	r1, r0
    e3f8:	d106      	bne.n	e408 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    e3fa:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    e3fc:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    e3fe:	6898      	ldr	r0, [r3, #8]
    e400:	4281      	cmp	r1, r0
    e402:	d1ed      	bne.n	e3e0 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    e404:	609c      	str	r4, [r3, #8]
}
    e406:	e7eb      	b.n	e3e0 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    e408:	4604      	mov	r4, r0
    e40a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e40c:	2800      	cmp	r0, #0
    e40e:	d1f2      	bne.n	e3f6 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    e410:	2a00      	cmp	r2, #0
    e412:	d1e8      	bne.n	e3e6 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    e414:	f06f 0015 	mvn.w	r0, #21
}
    e418:	bd10      	pop	{r4, pc}

0000e41a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    e41a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    e41c:	6843      	ldr	r3, [r0, #4]
    e41e:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    e420:	7a05      	ldrb	r5, [r0, #8]
    e422:	6844      	ldr	r4, [r0, #4]
    e424:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    e428:	42a3      	cmp	r3, r4
    e42a:	d302      	bcc.n	e432 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    e42c:	f06f 0001 	mvn.w	r0, #1
}
    e430:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    e432:	795c      	ldrb	r4, [r3, #5]
    e434:	428c      	cmp	r4, r1
    e436:	d001      	beq.n	e43c <pinctrl_lookup_state+0x22>
		(*state)++;
    e438:	3308      	adds	r3, #8
    e43a:	e7f0      	b.n	e41e <pinctrl_lookup_state+0x4>
			return 0;
    e43c:	2000      	movs	r0, #0
    e43e:	e7f7      	b.n	e430 <pinctrl_lookup_state+0x16>

0000e440 <uarte_nrfx_config_get>:
{
    e440:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
    e442:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
    e444:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    e448:	e883 0003 	stmia.w	r3, {r0, r1}
}
    e44c:	2000      	movs	r0, #0
    e44e:	4770      	bx	lr

0000e450 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    e450:	6843      	ldr	r3, [r0, #4]
    e452:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    e454:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    e458:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    e45c:	4770      	bx	lr

0000e45e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    e45e:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    e460:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    e462:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e464:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    e468:	b150      	cbz	r0, e480 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e46a:	2000      	movs	r0, #0
	*c = *data->rx_data;
    e46c:	6952      	ldr	r2, [r2, #20]
    e46e:	7812      	ldrb	r2, [r2, #0]
    e470:	700a      	strb	r2, [r1, #0]
    e472:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    e476:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e47a:	2201      	movs	r2, #1
    e47c:	601a      	str	r2, [r3, #0]
	return 0;
    e47e:	4770      	bx	lr
		return -1;
    e480:	f04f 30ff 	mov.w	r0, #4294967295
}
    e484:	4770      	bx	lr

0000e486 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    e486:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    e488:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e48a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    e48e:	b940      	cbnz	r0, e4a2 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    e490:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    e492:	079b      	lsls	r3, r3, #30
    e494:	d406      	bmi.n	e4a4 <is_tx_ready.isra.0+0x1e>
    e496:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    e49a:	3800      	subs	r0, #0
    e49c:	bf18      	it	ne
    e49e:	2001      	movne	r0, #1
    e4a0:	4770      	bx	lr
    e4a2:	2001      	movs	r0, #1
}
    e4a4:	4770      	bx	lr

0000e4a6 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    e4a6:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    e4a8:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    e4aa:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    e4ae:	05c9      	lsls	r1, r1, #23
    e4b0:	d518      	bpl.n	e4e4 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e4b2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    e4b6:	b1a9      	cbz	r1, e4e4 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    e4b8:	f04f 0020 	mov.w	r0, #32
    e4bc:	f3ef 8111 	mrs	r1, BASEPRI
    e4c0:	f380 8812 	msr	BASEPRI_MAX, r0
    e4c4:	f3bf 8f6f 	isb	sy
    e4c8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    e4cc:	b130      	cbz	r0, e4dc <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e4ce:	2000      	movs	r0, #0
    e4d0:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    e4d4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e4d8:	2001      	movs	r0, #1
    e4da:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    e4dc:	f381 8811 	msr	BASEPRI, r1
    e4e0:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    e4e4:	6852      	ldr	r2, [r2, #4]
    e4e6:	06d2      	lsls	r2, r2, #27
    e4e8:	d515      	bpl.n	e516 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    e4ea:	f04f 0120 	mov.w	r1, #32
    e4ee:	f3ef 8211 	mrs	r2, BASEPRI
    e4f2:	f381 8812 	msr	BASEPRI_MAX, r1
    e4f6:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e4fa:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    e4fe:	b111      	cbz	r1, e506 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    e500:	2100      	movs	r1, #0
    e502:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    e506:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    e50a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    e50e:	f382 8811 	msr	BASEPRI, r2
    e512:	f3bf 8f6f 	isb	sy
}
    e516:	4770      	bx	lr

0000e518 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    e518:	4770      	bx	lr

0000e51a <event_clear>:
    e51a:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    e51c:	f100 0350 	add.w	r3, r0, #80	; 0x50
    e520:	009b      	lsls	r3, r3, #2
    e522:	b29b      	uxth	r3, r3
    e524:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e528:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
    e52c:	601a      	str	r2, [r3, #0]
    e52e:	681b      	ldr	r3, [r3, #0]
}
    e530:	4770      	bx	lr

0000e532 <sys_clock_cycle_get_32>:
{
    e532:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    e534:	f7fc f8a6 	bl	a684 <z_nrf_rtc_timer_read>
}
    e538:	bd08      	pop	{r3, pc}

0000e53a <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
    e53a:	f000 bb9e 	b.w	ec7a <z_impl_k_busy_wait>

0000e53e <nrf_modem_os_errno_set>:
{
    e53e:	b510      	push	{r4, lr}
    e540:	4604      	mov	r4, r0
	errno = err_code;
    e542:	f7ff fe78 	bl	e236 <__errno>
    e546:	6004      	str	r4, [r0, #0]
}
    e548:	bd10      	pop	{r4, pc}

0000e54a <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
    e54a:	f000 ba7f 	b.w	ea4c <k_is_in_isr>

0000e54e <nrf_modem_os_sem_give>:
	z_impl_k_sem_give(sem);
    e54e:	f7fe babd 	b.w	cacc <z_impl_k_sem_give>

0000e552 <nrf_modem_os_sem_take>:
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
    e552:	1c4b      	adds	r3, r1, #1
{
    e554:	b570      	push	{r4, r5, r6, lr}
    e556:	4605      	mov	r5, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
    e558:	d017      	beq.n	e58a <nrf_modem_os_sem_take+0x38>
    e55a:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
    e55e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    e562:	f240 30e7 	movw	r0, #999	; 0x3e7
    e566:	2100      	movs	r1, #0
    e568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e56c:	2300      	movs	r3, #0
    e56e:	fbc4 0106 	smlal	r0, r1, r4, r6
    e572:	f7f9 fde7 	bl	8144 <__aeabi_uldivmod>
    e576:	4602      	mov	r2, r0
    e578:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    e57a:	4628      	mov	r0, r5
    e57c:	f7fe fac6 	bl	cb0c <z_impl_k_sem_take>
		return -NRF_EAGAIN;
    e580:	2800      	cmp	r0, #0
}
    e582:	bf18      	it	ne
    e584:	f06f 000a 	mvnne.w	r0, #10
    e588:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
    e58a:	f04f 32ff 	mov.w	r2, #4294967295
    e58e:	4613      	mov	r3, r2
    e590:	e7f3      	b.n	e57a <nrf_modem_os_sem_take+0x28>

0000e592 <k_sys_fatal_error_handler>:

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    e592:	2000      	movs	r0, #0
{
    e594:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
    e596:	f7fb f937 	bl	9808 <sys_arch_reboot>

0000e59a <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
    e59a:	2000      	movs	r0, #0
    e59c:	4770      	bx	lr

0000e59e <psa_crypto_init>:
}
    e59e:	2000      	movs	r0, #0
    e5a0:	4770      	bx	lr

0000e5a2 <SystemInit>:
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
    e5a2:	4770      	bx	lr

0000e5a4 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    e5a4:	4700      	bx	r0

0000e5a6 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    e5a6:	f000 bb68 	b.w	ec7a <z_impl_k_busy_wait>

0000e5aa <nrfx_clock_stop>:
    clock_stop(domain);
    e5aa:	f7fc bc03 	b.w	adb4 <clock_stop>

0000e5ae <rpc_handle_ctrl_message>:
    e5ae:	2902      	cmp	r1, #2
    e5b0:	b510      	push	{r4, lr}
    e5b2:	4604      	mov	r4, r0
    e5b4:	d005      	beq.n	e5c2 <rpc_handle_ctrl_message+0x14>
    e5b6:	2904      	cmp	r1, #4
    e5b8:	d001      	beq.n	e5be <rpc_handle_ctrl_message+0x10>
    e5ba:	2901      	cmp	r1, #1
    e5bc:	d107      	bne.n	e5ce <rpc_handle_ctrl_message+0x20>
    e5be:	2000      	movs	r0, #0
    e5c0:	bd10      	pop	{r4, pc}
    e5c2:	6880      	ldr	r0, [r0, #8]
    e5c4:	2800      	cmp	r0, #0
    e5c6:	d0fa      	beq.n	e5be <rpc_handle_ctrl_message+0x10>
    e5c8:	f7fc fb34 	bl	ac34 <nrf_modem_os_shm_tx_free>
    e5cc:	e7f7      	b.n	e5be <rpc_handle_ctrl_message+0x10>
    e5ce:	6880      	ldr	r0, [r0, #8]
    e5d0:	b108      	cbz	r0, e5d6 <rpc_handle_ctrl_message+0x28>
    e5d2:	f7fc fb2f 	bl	ac34 <nrf_modem_os_shm_tx_free>
    e5d6:	4620      	mov	r0, r4
    e5d8:	f7fd f8d6 	bl	b788 <rpc_transport_msg_rx_free>
    e5dc:	e7ef      	b.n	e5be <rpc_handle_ctrl_message+0x10>

0000e5de <rpc_list_preambles_init>:
    e5de:	2200      	movs	r2, #0
    e5e0:	b510      	push	{r4, lr}
    e5e2:	6804      	ldr	r4, [r0, #0]
    e5e4:	4294      	cmp	r4, r2
    e5e6:	d100      	bne.n	e5ea <rpc_list_preambles_init+0xc>
    e5e8:	bd10      	pop	{r4, pc}
    e5ea:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    e5ee:	684b      	ldr	r3, [r1, #4]
    e5f0:	3201      	adds	r2, #1
    e5f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    e5f6:	f043 0303 	orr.w	r3, r3, #3
    e5fa:	604b      	str	r3, [r1, #4]
    e5fc:	e7f2      	b.n	e5e4 <rpc_list_preambles_init+0x6>

0000e5fe <rpc_transport_ipc_data_rx_resume>:
    e5fe:	2004      	movs	r0, #4
    e600:	f7fd b870 	b.w	b6e4 <nrfx_ipc_receive_event_enable>

0000e604 <rpc_transport_ipc_data_rx_suspend>:
    e604:	2004      	movs	r0, #4
    e606:	f7fd b875 	b.w	b6f4 <nrfx_ipc_receive_event_disable>

0000e60a <rpc_transport_ipc_shutdown>:
    e60a:	f7fd b83d 	b.w	b688 <nrfx_ipc_uninit>

0000e60e <rpc_transport_ipc_msg_alloc>:
    e60e:	b538      	push	{r3, r4, r5, lr}
    e610:	4604      	mov	r4, r0
    e612:	2500      	movs	r5, #0
    e614:	1d03      	adds	r3, r0, #4
    e616:	6822      	ldr	r2, [r4, #0]
    e618:	42aa      	cmp	r2, r5
    e61a:	d801      	bhi.n	e620 <rpc_transport_ipc_msg_alloc+0x12>
    e61c:	2300      	movs	r3, #0
    e61e:	e019      	b.n	e654 <rpc_transport_ipc_msg_alloc+0x46>
    e620:	f04f 0200 	mov.w	r2, #0
    e624:	e8d3 0fcf 	ldaexb	r0, [r3]
    e628:	2803      	cmp	r0, #3
    e62a:	d104      	bne.n	e636 <rpc_transport_ipc_msg_alloc+0x28>
    e62c:	e8c3 2fcc 	stlexb	ip, r2, [r3]
    e630:	f1bc 0f00 	cmp.w	ip, #0
    e634:	d1f6      	bne.n	e624 <rpc_transport_ipc_msg_alloc+0x16>
    e636:	d002      	beq.n	e63e <rpc_transport_ipc_msg_alloc+0x30>
    e638:	3308      	adds	r3, #8
    e63a:	3501      	adds	r5, #1
    e63c:	e7eb      	b.n	e616 <rpc_transport_ipc_msg_alloc+0x8>
    e63e:	eb01 1385 	add.w	r3, r1, r5, lsl #6
    e642:	4618      	mov	r0, r3
    e644:	2240      	movs	r2, #64	; 0x40
    e646:	2100      	movs	r1, #0
    e648:	f000 fb4b 	bl	ece2 <memset>
    e64c:	4603      	mov	r3, r0
    e64e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    e652:	60a0      	str	r0, [r4, #8]
    e654:	4618      	mov	r0, r3
    e656:	bd38      	pop	{r3, r4, r5, pc}

0000e658 <rpc_client_msg_from_rpc_msg_get>:
    e658:	3008      	adds	r0, #8
    e65a:	4770      	bx	lr

0000e65c <rpc_client_msg_alloc>:
    e65c:	b538      	push	{r3, r4, r5, lr}
    e65e:	4605      	mov	r5, r0
    e660:	b920      	cbnz	r0, e66c <rpc_client_msg_alloc+0x10>
    e662:	f7fd f88b 	bl	b77c <rpc_transport_msg_alloc>
    e666:	b980      	cbnz	r0, e68a <rpc_client_msg_alloc+0x2e>
    e668:	2000      	movs	r0, #0
    e66a:	bd38      	pop	{r3, r4, r5, pc}
    e66c:	f7fc fada 	bl	ac24 <nrf_modem_os_shm_tx_alloc>
    e670:	4604      	mov	r4, r0
    e672:	2800      	cmp	r0, #0
    e674:	d0f8      	beq.n	e668 <rpc_client_msg_alloc+0xc>
    e676:	f7fd f881 	bl	b77c <rpc_transport_msg_alloc>
    e67a:	b938      	cbnz	r0, e68c <rpc_client_msg_alloc+0x30>
    e67c:	4620      	mov	r0, r4
    e67e:	f7fc fad9 	bl	ac34 <nrf_modem_os_shm_tx_free>
    e682:	2001      	movs	r0, #1
    e684:	f7fc faa4 	bl	abd0 <nrf_modem_os_event_notify>
    e688:	e7ee      	b.n	e668 <rpc_client_msg_alloc+0xc>
    e68a:	462c      	mov	r4, r5
    e68c:	60c5      	str	r5, [r0, #12]
    e68e:	f840 4f08 	str.w	r4, [r0, #8]!
    e692:	e7ea      	b.n	e66a <rpc_client_msg_alloc+0xe>

0000e694 <rpc_client_msg_send>:
    e694:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    e698:	4610      	mov	r0, r2
    e69a:	f840 1d08 	str.w	r1, [r0, #-8]!
    e69e:	f7fd b87f 	b.w	b7a0 <rpc_transport_msg_send>

0000e6a2 <rpc_client_msg_rx_free>:
    e6a2:	3808      	subs	r0, #8
    e6a4:	f7fd b870 	b.w	b788 <rpc_transport_msg_rx_free>

0000e6a8 <rpc_client_msg_data_rx_free>:
    e6a8:	f7fd b874 	b.w	b794 <rpc_transport_msg_data_rx_free>

0000e6ac <rpc_client_msg_data_tx_alloc>:
    e6ac:	f7fc baba 	b.w	ac24 <nrf_modem_os_shm_tx_alloc>

0000e6b0 <rpc_client_msg_data_tx_free>:
    e6b0:	b508      	push	{r3, lr}
    e6b2:	f7fc fabf 	bl	ac34 <nrf_modem_os_shm_tx_free>
    e6b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e6ba:	2001      	movs	r0, #1
    e6bc:	f7fc ba88 	b.w	abd0 <nrf_modem_os_event_notify>

0000e6c0 <sockaddr_init>:
    e6c0:	2904      	cmp	r1, #4
    e6c2:	b570      	push	{r4, r5, r6, lr}
    e6c4:	4605      	mov	r5, r0
    e6c6:	4616      	mov	r6, r2
    e6c8:	d003      	beq.n	e6d2 <sockaddr_init+0x12>
    e6ca:	2910      	cmp	r1, #16
    e6cc:	d015      	beq.n	e6fa <sockaddr_init+0x3a>
    e6ce:	2400      	movs	r4, #0
    e6d0:	e011      	b.n	e6f6 <sockaddr_init+0x36>
    e6d2:	2010      	movs	r0, #16
    e6d4:	f7fc fa98 	bl	ac08 <nrf_modem_os_alloc>
    e6d8:	4604      	mov	r4, r0
    e6da:	2800      	cmp	r0, #0
    e6dc:	d0f7      	beq.n	e6ce <sockaddr_init+0xe>
    e6de:	220f      	movs	r2, #15
    e6e0:	2100      	movs	r1, #0
    e6e2:	3001      	adds	r0, #1
    e6e4:	f000 fafd 	bl	ece2 <memset>
    e6e8:	2310      	movs	r3, #16
    e6ea:	7023      	strb	r3, [r4, #0]
    e6ec:	2301      	movs	r3, #1
    e6ee:	8126      	strh	r6, [r4, #8]
    e6f0:	6063      	str	r3, [r4, #4]
    e6f2:	682b      	ldr	r3, [r5, #0]
    e6f4:	60e3      	str	r3, [r4, #12]
    e6f6:	4620      	mov	r0, r4
    e6f8:	bd70      	pop	{r4, r5, r6, pc}
    e6fa:	2024      	movs	r0, #36	; 0x24
    e6fc:	f7fc fa84 	bl	ac08 <nrf_modem_os_alloc>
    e700:	4604      	mov	r4, r0
    e702:	2800      	cmp	r0, #0
    e704:	d0e3      	beq.n	e6ce <sockaddr_init+0xe>
    e706:	2223      	movs	r2, #35	; 0x23
    e708:	2100      	movs	r1, #0
    e70a:	3001      	adds	r0, #1
    e70c:	f000 fae9 	bl	ece2 <memset>
    e710:	2324      	movs	r3, #36	; 0x24
    e712:	7023      	strb	r3, [r4, #0]
    e714:	2302      	movs	r3, #2
    e716:	4628      	mov	r0, r5
    e718:	6063      	str	r3, [r4, #4]
    e71a:	8126      	strh	r6, [r4, #8]
    e71c:	f104 0310 	add.w	r3, r4, #16
    e720:	f105 0210 	add.w	r2, r5, #16
    e724:	f850 1b04 	ldr.w	r1, [r0], #4
    e728:	4290      	cmp	r0, r2
    e72a:	f843 1b04 	str.w	r1, [r3], #4
    e72e:	d1f9      	bne.n	e724 <sockaddr_init+0x64>
    e730:	e7e1      	b.n	e6f6 <sockaddr_init+0x36>

0000e732 <sock_pollcb>:
    e732:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e734:	2500      	movs	r5, #0
    e736:	6803      	ldr	r3, [r0, #0]
    e738:	4604      	mov	r4, r0
    e73a:	9300      	str	r3, [sp, #0]
    e73c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    e73e:	4668      	mov	r0, sp
    e740:	f8ad 5006 	strh.w	r5, [sp, #6]
    e744:	f8ad 3004 	strh.w	r3, [sp, #4]
    e748:	f000 f87d 	bl	e846 <nrf_poll_one>
    e74c:	b138      	cbz	r0, e75e <sock_pollcb+0x2c>
    e74e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e750:	4668      	mov	r0, sp
    e752:	4798      	blx	r3
    e754:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    e758:	b10b      	cbz	r3, e75e <sock_pollcb+0x2c>
    e75a:	6365      	str	r5, [r4, #52]	; 0x34
    e75c:	63a5      	str	r5, [r4, #56]	; 0x38
    e75e:	b003      	add	sp, #12
    e760:	bd30      	pop	{r4, r5, pc}

0000e762 <sock_pkt_append>:
    e762:	2300      	movs	r3, #0
    e764:	600b      	str	r3, [r1, #0]
    e766:	6883      	ldr	r3, [r0, #8]
    e768:	b913      	cbnz	r3, e770 <sock_pkt_append+0xe>
    e76a:	e9c0 1101 	strd	r1, r1, [r0, #4]
    e76e:	4770      	bx	lr
    e770:	6019      	str	r1, [r3, #0]
    e772:	6081      	str	r1, [r0, #8]
    e774:	4770      	bx	lr

0000e776 <sock_is_stream>:
    e776:	6900      	ldr	r0, [r0, #16]
    e778:	1e43      	subs	r3, r0, #1
    e77a:	4258      	negs	r0, r3
    e77c:	4158      	adcs	r0, r3
    e77e:	4770      	bx	lr

0000e780 <sock_is_datagram>:
    e780:	6900      	ldr	r0, [r0, #16]
    e782:	1e83      	subs	r3, r0, #2
    e784:	4258      	negs	r0, r3
    e786:	4158      	adcs	r0, r3
    e788:	4770      	bx	lr

0000e78a <sock_proto_is_secure>:
    e78a:	6940      	ldr	r0, [r0, #20]
    e78c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
    e790:	d005      	beq.n	e79e <sock_proto_is_secure+0x14>
    e792:	f240 1311 	movw	r3, #273	; 0x111
    e796:	1ac3      	subs	r3, r0, r3
    e798:	4258      	negs	r0, r3
    e79a:	4158      	adcs	r0, r3
    e79c:	4770      	bx	lr
    e79e:	2001      	movs	r0, #1
    e7a0:	4770      	bx	lr

0000e7a2 <sock_is_attaching>:
    e7a2:	7f00      	ldrb	r0, [r0, #28]
    e7a4:	f3c0 1000 	ubfx	r0, r0, #4, #1
    e7a8:	4770      	bx	lr

0000e7aa <sock_is_nonblock>:
    e7aa:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    e7ac:	f000 0001 	and.w	r0, r0, #1
    e7b0:	4770      	bx	lr

0000e7b2 <sock_is_local_closed>:
    e7b2:	7f00      	ldrb	r0, [r0, #28]
    e7b4:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e7b8:	4770      	bx	lr

0000e7ba <sock_is_eof>:
    e7ba:	6903      	ldr	r3, [r0, #16]
    e7bc:	2b01      	cmp	r3, #1
    e7be:	d105      	bne.n	e7cc <sock_is_eof+0x12>
    e7c0:	6980      	ldr	r0, [r0, #24]
    e7c2:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
    e7c6:	4258      	negs	r0, r3
    e7c8:	4158      	adcs	r0, r3
    e7ca:	4770      	bx	lr
    e7cc:	2000      	movs	r0, #0
    e7ce:	4770      	bx	lr

0000e7d0 <sock_has_stream_error>:
    e7d0:	7f00      	ldrb	r0, [r0, #28]
    e7d2:	09c0      	lsrs	r0, r0, #7
    e7d4:	4770      	bx	lr

0000e7d6 <sock_has_error>:
    e7d6:	6983      	ldr	r3, [r0, #24]
    e7d8:	f033 0380 	bics.w	r3, r3, #128	; 0x80
    e7dc:	bf14      	ite	ne
    e7de:	2001      	movne	r0, #1
    e7e0:	2000      	moveq	r0, #0
    e7e2:	4770      	bx	lr

0000e7e4 <sock_has_pollcb>:
    e7e4:	6b40      	ldr	r0, [r0, #52]	; 0x34
    e7e6:	3800      	subs	r0, #0
    e7e8:	bf18      	it	ne
    e7ea:	2001      	movne	r0, #1
    e7ec:	4770      	bx	lr

0000e7ee <sock_can_read>:
    e7ee:	6840      	ldr	r0, [r0, #4]
    e7f0:	3800      	subs	r0, #0
    e7f2:	bf18      	it	ne
    e7f4:	2001      	movne	r0, #1
    e7f6:	4770      	bx	lr

0000e7f8 <sock_can_accept>:
    e7f8:	7f40      	ldrb	r0, [r0, #29]
    e7fa:	3800      	subs	r0, #0
    e7fc:	bf18      	it	ne
    e7fe:	2001      	movne	r0, #1
    e800:	4770      	bx	lr

0000e802 <sock_can_send>:
    e802:	b510      	push	{r4, lr}
    e804:	4602      	mov	r2, r0
    e806:	6904      	ldr	r4, [r0, #16]
    e808:	f7ff ffbf 	bl	e78a <sock_proto_is_secure>
    e80c:	2c01      	cmp	r4, #1
    e80e:	4601      	mov	r1, r0
    e810:	7f13      	ldrb	r3, [r2, #28]
    e812:	d103      	bne.n	e81c <sock_can_send+0x1a>
    e814:	071c      	lsls	r4, r3, #28
    e816:	f3c3 00c0 	ubfx	r0, r3, #3, #1
    e81a:	d50b      	bpl.n	e834 <sock_can_send+0x32>
    e81c:	b931      	cbnz	r1, e82c <sock_can_send+0x2a>
    e81e:	07d9      	lsls	r1, r3, #31
    e820:	d40b      	bmi.n	e83a <sock_can_send+0x38>
    e822:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e826:	f1c3 0001 	rsb	r0, r3, #1
    e82a:	e003      	b.n	e834 <sock_can_send+0x32>
    e82c:	069a      	lsls	r2, r3, #26
    e82e:	f3c3 1040 	ubfx	r0, r3, #5, #1
    e832:	d4f4      	bmi.n	e81e <sock_can_send+0x1c>
    e834:	f000 0001 	and.w	r0, r0, #1
    e838:	bd10      	pop	{r4, pc}
    e83a:	2000      	movs	r0, #0
    e83c:	e7fa      	b.n	e834 <sock_can_send+0x32>

0000e83e <on_conf_dnssrv_res>:
    e83e:	f000 b84d 	b.w	e8dc <res_forward>

0000e842 <on_getifaddrs_res>:
    e842:	f000 b84b 	b.w	e8dc <res_forward>

0000e846 <nrf_poll_one>:
    e846:	b538      	push	{r3, r4, r5, lr}
    e848:	4604      	mov	r4, r0
    e84a:	6800      	ldr	r0, [r0, #0]
    e84c:	f7fd fb8c 	bl	bf68 <sock_find>
    e850:	4605      	mov	r5, r0
    e852:	b928      	cbnz	r0, e860 <nrf_poll_one+0x1a>
    e854:	2001      	movs	r0, #1
    e856:	88e3      	ldrh	r3, [r4, #6]
    e858:	f043 0320 	orr.w	r3, r3, #32
    e85c:	80e3      	strh	r3, [r4, #6]
    e85e:	bd38      	pop	{r3, r4, r5, pc}
    e860:	f7ff ffa7 	bl	e7b2 <sock_is_local_closed>
    e864:	2800      	cmp	r0, #0
    e866:	d1f5      	bne.n	e854 <nrf_poll_one+0xe>
    e868:	4628      	mov	r0, r5
    e86a:	f7ff ffb4 	bl	e7d6 <sock_has_error>
    e86e:	b1f8      	cbz	r0, e8b0 <nrf_poll_one+0x6a>
    e870:	88e3      	ldrh	r3, [r4, #6]
    e872:	f043 0308 	orr.w	r3, r3, #8
    e876:	80e3      	strh	r3, [r4, #6]
    e878:	88a3      	ldrh	r3, [r4, #4]
    e87a:	07da      	lsls	r2, r3, #31
    e87c:	d507      	bpl.n	e88e <nrf_poll_one+0x48>
    e87e:	4628      	mov	r0, r5
    e880:	f7ff ffb5 	bl	e7ee <sock_can_read>
    e884:	b1e8      	cbz	r0, e8c2 <nrf_poll_one+0x7c>
    e886:	88e3      	ldrh	r3, [r4, #6]
    e888:	f043 0301 	orr.w	r3, r3, #1
    e88c:	80e3      	strh	r3, [r4, #6]
    e88e:	88a3      	ldrh	r3, [r4, #4]
    e890:	075b      	lsls	r3, r3, #29
    e892:	d507      	bpl.n	e8a4 <nrf_poll_one+0x5e>
    e894:	4628      	mov	r0, r5
    e896:	f7ff ffb4 	bl	e802 <sock_can_send>
    e89a:	b118      	cbz	r0, e8a4 <nrf_poll_one+0x5e>
    e89c:	88e3      	ldrh	r3, [r4, #6]
    e89e:	f043 0304 	orr.w	r3, r3, #4
    e8a2:	80e3      	strh	r3, [r4, #6]
    e8a4:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
    e8a8:	3800      	subs	r0, #0
    e8aa:	bf18      	it	ne
    e8ac:	2001      	movne	r0, #1
    e8ae:	e7d6      	b.n	e85e <nrf_poll_one+0x18>
    e8b0:	4628      	mov	r0, r5
    e8b2:	f7ff ff82 	bl	e7ba <sock_is_eof>
    e8b6:	2800      	cmp	r0, #0
    e8b8:	d0de      	beq.n	e878 <nrf_poll_one+0x32>
    e8ba:	88e3      	ldrh	r3, [r4, #6]
    e8bc:	f043 0310 	orr.w	r3, r3, #16
    e8c0:	e7d9      	b.n	e876 <nrf_poll_one+0x30>
    e8c2:	4628      	mov	r0, r5
    e8c4:	f7ff ff98 	bl	e7f8 <sock_can_accept>
    e8c8:	2800      	cmp	r0, #0
    e8ca:	d1dc      	bne.n	e886 <nrf_poll_one+0x40>
    e8cc:	4628      	mov	r0, r5
    e8ce:	f7ff ff74 	bl	e7ba <sock_is_eof>
    e8d2:	2800      	cmp	r0, #0
    e8d4:	d1d7      	bne.n	e886 <nrf_poll_one+0x40>
    e8d6:	e7da      	b.n	e88e <nrf_poll_one+0x48>

0000e8d8 <res_cookie_get>:
    e8d8:	68c0      	ldr	r0, [r0, #12]
    e8da:	4770      	bx	lr

0000e8dc <res_forward>:
    e8dc:	68c3      	ldr	r3, [r0, #12]
    e8de:	6018      	str	r0, [r3, #0]
    e8e0:	2001      	movs	r0, #1
    e8e2:	4770      	bx	lr

0000e8e4 <rpc_dfu_event_handler>:
    e8e4:	b510      	push	{r4, lr}
    e8e6:	4604      	mov	r4, r0
    e8e8:	6800      	ldr	r0, [r0, #0]
    e8ea:	b108      	cbz	r0, e8f0 <rpc_dfu_event_handler+0xc>
    e8ec:	f7ff fedc 	bl	e6a8 <rpc_client_msg_data_rx_free>
    e8f0:	68e0      	ldr	r0, [r4, #12]
    e8f2:	b108      	cbz	r0, e8f8 <rpc_dfu_event_handler+0x14>
    e8f4:	6004      	str	r4, [r0, #0]
    e8f6:	2001      	movs	r0, #1
    e8f8:	bd10      	pop	{r4, pc}

0000e8fa <nrf_modem_is_initialized>:
    e8fa:	f7fd bdfb 	b.w	c4f4 <nrf_modem_state_is_initialized>

0000e8fe <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    e8fe:	4770      	bx	lr

0000e900 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    e900:	b140      	cbz	r0, e914 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    e902:	68c3      	ldr	r3, [r0, #12]
    e904:	7858      	ldrb	r0, [r3, #1]
    e906:	f010 0001 	ands.w	r0, r0, #1
    e90a:	bf1e      	ittt	ne
    e90c:	7818      	ldrbne	r0, [r3, #0]
    e90e:	fab0 f080 	clzne	r0, r0
    e912:	0940      	lsrne	r0, r0, #5
}
    e914:	4770      	bx	lr

0000e916 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    e916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e918:	4605      	mov	r5, r0
    e91a:	460e      	mov	r6, r1
	__asm__ volatile(
    e91c:	f04f 0320 	mov.w	r3, #32
    e920:	f3ef 8711 	mrs	r7, BASEPRI
    e924:	f383 8812 	msr	BASEPRI_MAX, r3
    e928:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    e92c:	f7fe fbf2 	bl	d114 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    e930:	4631      	mov	r1, r6
    e932:	4604      	mov	r4, r0
    e934:	4628      	mov	r0, r5
    e936:	f7ff fe2c 	bl	e592 <k_sys_fatal_error_handler>
	__asm__ volatile(
    e93a:	f387 8811 	msr	BASEPRI, r7
    e93e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    e942:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    e944:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e948:	f7fa bfa8 	b.w	989c <z_impl_k_thread_abort>

0000e94c <z_early_memset>:

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    e94c:	f000 b9c9 	b.w	ece2 <memset>

0000e950 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    e950:	f000 b9ba 	b.w	ecc8 <memcpy>

0000e954 <k_heap_init>:
{
    e954:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    e956:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    e95a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    e95e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    e960:	f7ff badf 	b.w	df22 <sys_heap_init>

0000e964 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    e964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e968:	b085      	sub	sp, #20
    e96a:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
    e96e:	4607      	mov	r7, r0
    e970:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e972:	4650      	mov	r0, sl
    e974:	4621      	mov	r1, r4
{
    e976:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e978:	f000 f983 	bl	ec82 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    e97c:	f1b4 3fff 	cmp.w	r4, #4294967295
    e980:	bf08      	it	eq
    e982:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e986:	4605      	mov	r5, r0
    e988:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    e98a:	bf04      	itt	eq
    e98c:	f04f 35ff 	moveq.w	r5, #4294967295
    e990:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
    e994:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
    e998:	f04f 0320 	mov.w	r3, #32
    e99c:	f3ef 8411 	mrs	r4, BASEPRI
    e9a0:	f383 8812 	msr	BASEPRI_MAX, r3
    e9a4:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    e9a8:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    e9ac:	464a      	mov	r2, r9
    e9ae:	4641      	mov	r1, r8
    e9b0:	4638      	mov	r0, r7
    e9b2:	f7ff fa4f 	bl	de54 <sys_heap_aligned_alloc>
    e9b6:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    e9b8:	f7fe fd52 	bl	d460 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    e9bc:	9b03      	ldr	r3, [sp, #12]
    e9be:	b13b      	cbz	r3, e9d0 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
    e9c0:	f384 8811 	msr	BASEPRI, r4
    e9c4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    e9c8:	4618      	mov	r0, r3
    e9ca:	b005      	add	sp, #20
    e9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    e9d0:	1a28      	subs	r0, r5, r0
    e9d2:	eb66 0101 	sbc.w	r1, r6, r1
    e9d6:	2801      	cmp	r0, #1
    e9d8:	f171 0200 	sbcs.w	r2, r1, #0
    e9dc:	dbf0      	blt.n	e9c0 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    e9de:	e9cd 0100 	strd	r0, r1, [sp]
    e9e2:	465a      	mov	r2, fp
    e9e4:	4621      	mov	r1, r4
    e9e6:	4650      	mov	r0, sl
    e9e8:	f7fe f9fa 	bl	cde0 <z_pend_curr>
	__asm__ volatile(
    e9ec:	f04f 0320 	mov.w	r3, #32
    e9f0:	f3ef 8411 	mrs	r4, BASEPRI
    e9f4:	f383 8812 	msr	BASEPRI_MAX, r3
    e9f8:	f3bf 8f6f 	isb	sy
	return k;
    e9fc:	e7d6      	b.n	e9ac <k_heap_aligned_alloc+0x48>

0000e9fe <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
    e9fe:	b507      	push	{r0, r1, r2, lr}
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
    ea00:	e9cd 2300 	strd	r2, r3, [sp]
    ea04:	460a      	mov	r2, r1
    ea06:	2104      	movs	r1, #4
    ea08:	f7ff ffac 	bl	e964 <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
    ea0c:	b003      	add	sp, #12
    ea0e:	f85d fb04 	ldr.w	pc, [sp], #4

0000ea12 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
    ea12:	b538      	push	{r3, r4, r5, lr}
    ea14:	4604      	mov	r4, r0
    ea16:	f04f 0320 	mov.w	r3, #32
    ea1a:	f3ef 8511 	mrs	r5, BASEPRI
    ea1e:	f383 8812 	msr	BASEPRI_MAX, r3
    ea22:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    ea26:	f7ff f9dd 	bl	dde4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    ea2a:	f104 000c 	add.w	r0, r4, #12
    ea2e:	f000 f8e8 	bl	ec02 <z_unpend_all>
    ea32:	b130      	cbz	r0, ea42 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    ea34:	4629      	mov	r1, r5
    ea36:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    ea3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    ea3e:	f7fe ba33 	b.w	cea8 <z_reschedule>
	__asm__ volatile(
    ea42:	f385 8811 	msr	BASEPRI, r5
    ea46:	f3bf 8f6f 	isb	sy
}
    ea4a:	bd38      	pop	{r3, r4, r5, pc}

0000ea4c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    ea4c:	f3ef 8005 	mrs	r0, IPSR
}
    ea50:	3800      	subs	r0, #0
    ea52:	bf18      	it	ne
    ea54:	2001      	movne	r0, #1
    ea56:	4770      	bx	lr

0000ea58 <z_pm_save_idle_exit>:
{
    ea58:	b508      	push	{r3, lr}
	pm_system_resume();
    ea5a:	f7fa fb1f 	bl	909c <pm_system_resume>
}
    ea5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    ea62:	f7ff bd59 	b.w	e518 <sys_clock_idle_exit>

0000ea66 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    ea66:	f990 300e 	ldrsb.w	r3, [r0, #14]
    ea6a:	428b      	cmp	r3, r1
    ea6c:	d001      	beq.n	ea72 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    ea6e:	f7fe b9d5 	b.w	ce1c <z_set_prio>
}
    ea72:	2000      	movs	r0, #0
    ea74:	4770      	bx	lr

0000ea76 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    ea76:	b13a      	cbz	r2, ea88 <z_impl_k_sem_init+0x12>
    ea78:	428a      	cmp	r2, r1
    ea7a:	d305      	bcc.n	ea88 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    ea7c:	e9c0 1202 	strd	r1, r2, [r0, #8]
    ea80:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    ea84:	2000      	movs	r0, #0
    ea86:	4770      	bx	lr
		return -EINVAL;
    ea88:	f06f 0015 	mvn.w	r0, #21
}
    ea8c:	4770      	bx	lr

0000ea8e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    ea8e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    ea92:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    ea94:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    ea96:	2300      	movs	r3, #0
	node->prev = NULL;
    ea98:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    ea9c:	4770      	bx	lr

0000ea9e <unpend_thread_no_timeout>:
{
    ea9e:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    eaa0:	f7ff fff5 	bl	ea8e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    eaa4:	7b43      	ldrb	r3, [r0, #13]
    eaa6:	f023 0302 	bic.w	r3, r3, #2
    eaaa:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    eaac:	2300      	movs	r3, #0
    eaae:	6083      	str	r3, [r0, #8]
}
    eab0:	bd08      	pop	{r3, pc}

0000eab2 <add_to_waitq_locked>:
{
    eab2:	b538      	push	{r3, r4, r5, lr}
    eab4:	4604      	mov	r4, r0
    eab6:	460d      	mov	r5, r1
	unready_thread(thread);
    eab8:	f7fe f932 	bl	cd20 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    eabc:	7b63      	ldrb	r3, [r4, #13]
    eabe:	f043 0302 	orr.w	r3, r3, #2
    eac2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    eac4:	b1e5      	cbz	r5, eb00 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    eac6:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    eac8:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    eaca:	429d      	cmp	r5, r3
    eacc:	d109      	bne.n	eae2 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    eace:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    ead0:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    ead4:	601c      	str	r4, [r3, #0]
	list->tail = node;
    ead6:	606c      	str	r4, [r5, #4]
}
    ead8:	e012      	b.n	eb00 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    eada:	686a      	ldr	r2, [r5, #4]
    eadc:	4293      	cmp	r3, r2
    eade:	d0f6      	beq.n	eace <add_to_waitq_locked+0x1c>
    eae0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    eae2:	2b00      	cmp	r3, #0
    eae4:	d0f3      	beq.n	eace <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    eae6:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    eaea:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    eaee:	428a      	cmp	r2, r1
    eaf0:	d0f3      	beq.n	eada <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    eaf2:	4291      	cmp	r1, r2
    eaf4:	ddf1      	ble.n	eada <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    eaf6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    eaf8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    eafc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    eafe:	605c      	str	r4, [r3, #4]
}
    eb00:	bd38      	pop	{r3, r4, r5, pc}

0000eb02 <z_ready_thread>:
{
    eb02:	b510      	push	{r4, lr}
	__asm__ volatile(
    eb04:	f04f 0320 	mov.w	r3, #32
    eb08:	f3ef 8411 	mrs	r4, BASEPRI
    eb0c:	f383 8812 	msr	BASEPRI_MAX, r3
    eb10:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    eb14:	f7fe f8d0 	bl	ccb8 <ready_thread>
	__asm__ volatile(
    eb18:	f384 8811 	msr	BASEPRI, r4
    eb1c:	f3bf 8f6f 	isb	sy
}
    eb20:	bd10      	pop	{r4, pc}

0000eb22 <z_sched_wake_thread>:
{
    eb22:	b538      	push	{r3, r4, r5, lr}
    eb24:	4604      	mov	r4, r0
	__asm__ volatile(
    eb26:	f04f 0320 	mov.w	r3, #32
    eb2a:	f3ef 8511 	mrs	r5, BASEPRI
    eb2e:	f383 8812 	msr	BASEPRI_MAX, r3
    eb32:	f3bf 8f6f 	isb	sy
		if (!killed) {
    eb36:	7b43      	ldrb	r3, [r0, #13]
    eb38:	f013 0f28 	tst.w	r3, #40	; 0x28
    eb3c:	d10b      	bne.n	eb56 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    eb3e:	6883      	ldr	r3, [r0, #8]
    eb40:	b10b      	cbz	r3, eb46 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    eb42:	f7ff ffac 	bl	ea9e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    eb46:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    eb48:	b951      	cbnz	r1, eb60 <z_sched_wake_thread+0x3e>
    eb4a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
    eb4e:	4620      	mov	r0, r4
    eb50:	7363      	strb	r3, [r4, #13]
    eb52:	f7fe f8b1 	bl	ccb8 <ready_thread>
	__asm__ volatile(
    eb56:	f385 8811 	msr	BASEPRI, r5
    eb5a:	f3bf 8f6f 	isb	sy
}
    eb5e:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    eb60:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    eb64:	e7f3      	b.n	eb4e <z_sched_wake_thread+0x2c>

0000eb66 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    eb66:	2101      	movs	r1, #1
    eb68:	3818      	subs	r0, #24
    eb6a:	f7ff bfda 	b.w	eb22 <z_sched_wake_thread>

0000eb6e <z_unpend_first_thread>:
{
    eb6e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    eb70:	f04f 0320 	mov.w	r3, #32
    eb74:	f3ef 8511 	mrs	r5, BASEPRI
    eb78:	f383 8812 	msr	BASEPRI_MAX, r3
    eb7c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    eb80:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    eb82:	42a0      	cmp	r0, r4
    eb84:	d00d      	beq.n	eba2 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    eb86:	b134      	cbz	r4, eb96 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    eb88:	4620      	mov	r0, r4
    eb8a:	f7ff ff88 	bl	ea9e <unpend_thread_no_timeout>
    eb8e:	f104 0018 	add.w	r0, r4, #24
    eb92:	f000 f846 	bl	ec22 <z_abort_timeout>
	__asm__ volatile(
    eb96:	f385 8811 	msr	BASEPRI, r5
    eb9a:	f3bf 8f6f 	isb	sy
}
    eb9e:	4620      	mov	r0, r4
    eba0:	bd38      	pop	{r3, r4, r5, pc}
    eba2:	2400      	movs	r4, #0
    eba4:	e7f7      	b.n	eb96 <z_unpend_first_thread+0x28>

0000eba6 <z_unpend_thread>:
{
    eba6:	4601      	mov	r1, r0
    eba8:	b510      	push	{r4, lr}
	__asm__ volatile(
    ebaa:	f04f 0320 	mov.w	r3, #32
    ebae:	f3ef 8411 	mrs	r4, BASEPRI
    ebb2:	f383 8812 	msr	BASEPRI_MAX, r3
    ebb6:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    ebba:	6883      	ldr	r3, [r0, #8]
    ebbc:	b10b      	cbz	r3, ebc2 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
    ebbe:	f7ff ff6e 	bl	ea9e <unpend_thread_no_timeout>
	__asm__ volatile(
    ebc2:	f384 8811 	msr	BASEPRI, r4
    ebc6:	f3bf 8f6f 	isb	sy
}
    ebca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ebce:	f101 0018 	add.w	r0, r1, #24
    ebd2:	f000 b826 	b.w	ec22 <z_abort_timeout>

0000ebd6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    ebd6:	4603      	mov	r3, r0
    ebd8:	b920      	cbnz	r0, ebe4 <z_reschedule_irqlock+0xe>
    ebda:	f3ef 8205 	mrs	r2, IPSR
    ebde:	b90a      	cbnz	r2, ebe4 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    ebe0:	f7fa bbce 	b.w	9380 <arch_swap>
    ebe4:	f383 8811 	msr	BASEPRI, r3
    ebe8:	f3bf 8f6f 	isb	sy
}
    ebec:	4770      	bx	lr

0000ebee <z_reschedule_unlocked>:
	__asm__ volatile(
    ebee:	f04f 0320 	mov.w	r3, #32
    ebf2:	f3ef 8011 	mrs	r0, BASEPRI
    ebf6:	f383 8812 	msr	BASEPRI_MAX, r3
    ebfa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    ebfe:	f7ff bfea 	b.w	ebd6 <z_reschedule_irqlock>

0000ec02 <z_unpend_all>:
{
    ec02:	b538      	push	{r3, r4, r5, lr}
    ec04:	4605      	mov	r5, r0
	int need_sched = 0;
    ec06:	2000      	movs	r0, #0
	return list->head == list;
    ec08:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ec0a:	42a5      	cmp	r5, r4
    ec0c:	d000      	beq.n	ec10 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    ec0e:	b904      	cbnz	r4, ec12 <z_unpend_all+0x10>
}
    ec10:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    ec12:	4620      	mov	r0, r4
    ec14:	f7ff ffc7 	bl	eba6 <z_unpend_thread>
		z_ready_thread(thread);
    ec18:	4620      	mov	r0, r4
    ec1a:	f7ff ff72 	bl	eb02 <z_ready_thread>
		need_sched = 1;
    ec1e:	2001      	movs	r0, #1
    ec20:	e7f2      	b.n	ec08 <z_unpend_all+0x6>

0000ec22 <z_abort_timeout>:
{
    ec22:	b510      	push	{r4, lr}
    ec24:	f04f 0220 	mov.w	r2, #32
    ec28:	f3ef 8411 	mrs	r4, BASEPRI
    ec2c:	f382 8812 	msr	BASEPRI_MAX, r2
    ec30:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    ec34:	6803      	ldr	r3, [r0, #0]
    ec36:	b13b      	cbz	r3, ec48 <z_abort_timeout+0x26>
			remove_timeout(to);
    ec38:	f7fe fb16 	bl	d268 <remove_timeout>
			ret = 0;
    ec3c:	2000      	movs	r0, #0
	__asm__ volatile(
    ec3e:	f384 8811 	msr	BASEPRI, r4
    ec42:	f3bf 8f6f 	isb	sy
}
    ec46:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    ec48:	f06f 0015 	mvn.w	r0, #21
    ec4c:	e7f7      	b.n	ec3e <z_abort_timeout+0x1c>

0000ec4e <z_get_next_timeout_expiry>:
{
    ec4e:	b510      	push	{r4, lr}
	__asm__ volatile(
    ec50:	f04f 0320 	mov.w	r3, #32
    ec54:	f3ef 8411 	mrs	r4, BASEPRI
    ec58:	f383 8812 	msr	BASEPRI_MAX, r3
    ec5c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    ec60:	f7fe fae2 	bl	d228 <next_timeout>
	__asm__ volatile(
    ec64:	f384 8811 	msr	BASEPRI, r4
    ec68:	f3bf 8f6f 	isb	sy
}
    ec6c:	bd10      	pop	{r4, pc}

0000ec6e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    ec6e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    ec70:	f7fe fbf6 	bl	d460 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    ec74:	bd08      	pop	{r3, pc}

0000ec76 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    ec76:	f7fe bbf3 	b.w	d460 <sys_clock_tick_get>

0000ec7a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    ec7a:	b108      	cbz	r0, ec80 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    ec7c:	f7fa b9d4 	b.w	9028 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    ec80:	4770      	bx	lr

0000ec82 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ec82:	f1b1 3fff 	cmp.w	r1, #4294967295
    ec86:	bf08      	it	eq
    ec88:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    ec8c:	b538      	push	{r3, r4, r5, lr}
    ec8e:	460c      	mov	r4, r1
    ec90:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ec92:	d014      	beq.n	ecbe <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    ec94:	4308      	orrs	r0, r1
    ec96:	d103      	bne.n	eca0 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    ec98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    ec9c:	f7fe bbe0 	b.w	d460 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    eca0:	f06f 0001 	mvn.w	r0, #1
    eca4:	f04f 33ff 	mov.w	r3, #4294967295
    eca8:	1b40      	subs	r0, r0, r5
    ecaa:	eb63 0101 	sbc.w	r1, r3, r1
    ecae:	2900      	cmp	r1, #0
    ecb0:	da04      	bge.n	ecbc <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    ecb2:	f7fe fbd5 	bl	d460 <sys_clock_tick_get>
    ecb6:	1940      	adds	r0, r0, r5
    ecb8:	eb41 0104 	adc.w	r1, r1, r4
}
    ecbc:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    ecbe:	f04f 30ff 	mov.w	r0, #4294967295
    ecc2:	4601      	mov	r1, r0
    ecc4:	e7fa      	b.n	ecbc <sys_clock_timeout_end_calc+0x3a>

0000ecc6 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    ecc6:	4770      	bx	lr

0000ecc8 <memcpy>:
    ecc8:	440a      	add	r2, r1
    ecca:	1e43      	subs	r3, r0, #1
    eccc:	4291      	cmp	r1, r2
    ecce:	d100      	bne.n	ecd2 <memcpy+0xa>
    ecd0:	4770      	bx	lr
    ecd2:	b510      	push	{r4, lr}
    ecd4:	f811 4b01 	ldrb.w	r4, [r1], #1
    ecd8:	4291      	cmp	r1, r2
    ecda:	f803 4f01 	strb.w	r4, [r3, #1]!
    ecde:	d1f9      	bne.n	ecd4 <memcpy+0xc>
    ece0:	bd10      	pop	{r4, pc}

0000ece2 <memset>:
    ece2:	4402      	add	r2, r0
    ece4:	4603      	mov	r3, r0
    ece6:	4293      	cmp	r3, r2
    ece8:	d100      	bne.n	ecec <memset+0xa>
    ecea:	4770      	bx	lr
    ecec:	f803 1b01 	strb.w	r1, [r3], #1
    ecf0:	e7f9      	b.n	ece6 <memset+0x4>

0000ecf2 <strncpy>:
    ecf2:	3901      	subs	r1, #1
    ecf4:	4603      	mov	r3, r0
    ecf6:	b510      	push	{r4, lr}
    ecf8:	b132      	cbz	r2, ed08 <strncpy+0x16>
    ecfa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    ecfe:	3a01      	subs	r2, #1
    ed00:	f803 4b01 	strb.w	r4, [r3], #1
    ed04:	2c00      	cmp	r4, #0
    ed06:	d1f7      	bne.n	ecf8 <strncpy+0x6>
    ed08:	441a      	add	r2, r3
    ed0a:	2100      	movs	r1, #0
    ed0c:	4293      	cmp	r3, r2
    ed0e:	d100      	bne.n	ed12 <strncpy+0x20>
    ed10:	bd10      	pop	{r4, pc}
    ed12:	f803 1b01 	strb.w	r1, [r3], #1
    ed16:	e7f9      	b.n	ed0c <strncpy+0x1a>

0000ed18 <strnlen>:
    ed18:	4602      	mov	r2, r0
    ed1a:	4401      	add	r1, r0
    ed1c:	b510      	push	{r4, lr}
    ed1e:	428a      	cmp	r2, r1
    ed20:	4613      	mov	r3, r2
    ed22:	d003      	beq.n	ed2c <strnlen+0x14>
    ed24:	781c      	ldrb	r4, [r3, #0]
    ed26:	3201      	adds	r2, #1
    ed28:	2c00      	cmp	r4, #0
    ed2a:	d1f8      	bne.n	ed1e <strnlen+0x6>
    ed2c:	1a18      	subs	r0, r3, r0
    ed2e:	bd10      	pop	{r4, pc}

0000ed30 <strstr>:
    ed30:	780a      	ldrb	r2, [r1, #0]
    ed32:	b570      	push	{r4, r5, r6, lr}
    ed34:	b96a      	cbnz	r2, ed52 <strstr+0x22>
    ed36:	bd70      	pop	{r4, r5, r6, pc}
    ed38:	429a      	cmp	r2, r3
    ed3a:	d109      	bne.n	ed50 <strstr+0x20>
    ed3c:	460c      	mov	r4, r1
    ed3e:	4605      	mov	r5, r0
    ed40:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    ed44:	2b00      	cmp	r3, #0
    ed46:	d0f6      	beq.n	ed36 <strstr+0x6>
    ed48:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    ed4c:	429e      	cmp	r6, r3
    ed4e:	d0f7      	beq.n	ed40 <strstr+0x10>
    ed50:	3001      	adds	r0, #1
    ed52:	7803      	ldrb	r3, [r0, #0]
    ed54:	2b00      	cmp	r3, #0
    ed56:	d1ef      	bne.n	ed38 <strstr+0x8>
    ed58:	4618      	mov	r0, r3
    ed5a:	e7ec      	b.n	ed36 <strstr+0x6>

0000ed5c <_vsniprintf_r>:
    ed5c:	b530      	push	{r4, r5, lr}
    ed5e:	4614      	mov	r4, r2
    ed60:	b09b      	sub	sp, #108	; 0x6c
    ed62:	4605      	mov	r5, r0
    ed64:	461a      	mov	r2, r3
    ed66:	2c00      	cmp	r4, #0
    ed68:	da05      	bge.n	ed76 <_vsniprintf_r+0x1a>
    ed6a:	238b      	movs	r3, #139	; 0x8b
    ed6c:	6003      	str	r3, [r0, #0]
    ed6e:	f04f 30ff 	mov.w	r0, #4294967295
    ed72:	b01b      	add	sp, #108	; 0x6c
    ed74:	bd30      	pop	{r4, r5, pc}
    ed76:	f44f 7302 	mov.w	r3, #520	; 0x208
    ed7a:	9100      	str	r1, [sp, #0]
    ed7c:	9104      	str	r1, [sp, #16]
    ed7e:	4669      	mov	r1, sp
    ed80:	f8ad 300c 	strh.w	r3, [sp, #12]
    ed84:	bf14      	ite	ne
    ed86:	f104 33ff 	addne.w	r3, r4, #4294967295
    ed8a:	4623      	moveq	r3, r4
    ed8c:	9302      	str	r3, [sp, #8]
    ed8e:	9305      	str	r3, [sp, #20]
    ed90:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ed94:	f8ad 300e 	strh.w	r3, [sp, #14]
    ed98:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    ed9a:	f7fe fcdd 	bl	d758 <_svfiprintf_r>
    ed9e:	1c43      	adds	r3, r0, #1
    eda0:	bfbc      	itt	lt
    eda2:	238b      	movlt	r3, #139	; 0x8b
    eda4:	602b      	strlt	r3, [r5, #0]
    eda6:	2c00      	cmp	r4, #0
    eda8:	d0e3      	beq.n	ed72 <_vsniprintf_r+0x16>
    edaa:	9b00      	ldr	r3, [sp, #0]
    edac:	2200      	movs	r2, #0
    edae:	701a      	strb	r2, [r3, #0]
    edb0:	e7df      	b.n	ed72 <_vsniprintf_r+0x16>

0000edb2 <__ssputs_r>:
    edb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    edb6:	461f      	mov	r7, r3
    edb8:	688e      	ldr	r6, [r1, #8]
    edba:	4682      	mov	sl, r0
    edbc:	460c      	mov	r4, r1
    edbe:	42be      	cmp	r6, r7
    edc0:	4690      	mov	r8, r2
    edc2:	680b      	ldr	r3, [r1, #0]
    edc4:	d82d      	bhi.n	ee22 <__ssputs_r+0x70>
    edc6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    edca:	f412 6f90 	tst.w	r2, #1152	; 0x480
    edce:	d026      	beq.n	ee1e <__ssputs_r+0x6c>
    edd0:	6965      	ldr	r5, [r4, #20]
    edd2:	6909      	ldr	r1, [r1, #16]
    edd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    edd8:	eba3 0901 	sub.w	r9, r3, r1
    eddc:	1c7b      	adds	r3, r7, #1
    edde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
    ede2:	444b      	add	r3, r9
    ede4:	106d      	asrs	r5, r5, #1
    ede6:	429d      	cmp	r5, r3
    ede8:	bf38      	it	cc
    edea:	461d      	movcc	r5, r3
    edec:	0553      	lsls	r3, r2, #21
    edee:	d527      	bpl.n	ee40 <__ssputs_r+0x8e>
    edf0:	4629      	mov	r1, r5
    edf2:	f7fe fba5 	bl	d540 <_malloc_r>
    edf6:	4606      	mov	r6, r0
    edf8:	b360      	cbz	r0, ee54 <__ssputs_r+0xa2>
    edfa:	464a      	mov	r2, r9
    edfc:	6921      	ldr	r1, [r4, #16]
    edfe:	f7ff ff63 	bl	ecc8 <memcpy>
    ee02:	89a3      	ldrh	r3, [r4, #12]
    ee04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    ee08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ee0c:	81a3      	strh	r3, [r4, #12]
    ee0e:	6126      	str	r6, [r4, #16]
    ee10:	444e      	add	r6, r9
    ee12:	6165      	str	r5, [r4, #20]
    ee14:	eba5 0509 	sub.w	r5, r5, r9
    ee18:	6026      	str	r6, [r4, #0]
    ee1a:	463e      	mov	r6, r7
    ee1c:	60a5      	str	r5, [r4, #8]
    ee1e:	42be      	cmp	r6, r7
    ee20:	d900      	bls.n	ee24 <__ssputs_r+0x72>
    ee22:	463e      	mov	r6, r7
    ee24:	4632      	mov	r2, r6
    ee26:	4641      	mov	r1, r8
    ee28:	6820      	ldr	r0, [r4, #0]
    ee2a:	f000 f89d 	bl	ef68 <memmove>
    ee2e:	68a3      	ldr	r3, [r4, #8]
    ee30:	2000      	movs	r0, #0
    ee32:	1b9b      	subs	r3, r3, r6
    ee34:	60a3      	str	r3, [r4, #8]
    ee36:	6823      	ldr	r3, [r4, #0]
    ee38:	4433      	add	r3, r6
    ee3a:	6023      	str	r3, [r4, #0]
    ee3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ee40:	462a      	mov	r2, r5
    ee42:	f000 f8ab 	bl	ef9c <_realloc_r>
    ee46:	4606      	mov	r6, r0
    ee48:	2800      	cmp	r0, #0
    ee4a:	d1e0      	bne.n	ee0e <__ssputs_r+0x5c>
    ee4c:	6921      	ldr	r1, [r4, #16]
    ee4e:	4650      	mov	r0, sl
    ee50:	f7fe fb2c 	bl	d4ac <_free_r>
    ee54:	230c      	movs	r3, #12
    ee56:	f04f 30ff 	mov.w	r0, #4294967295
    ee5a:	f8ca 3000 	str.w	r3, [sl]
    ee5e:	89a3      	ldrh	r3, [r4, #12]
    ee60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ee64:	81a3      	strh	r3, [r4, #12]
    ee66:	e7e9      	b.n	ee3c <__ssputs_r+0x8a>

0000ee68 <_printf_common>:
    ee68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ee6c:	4616      	mov	r6, r2
    ee6e:	4698      	mov	r8, r3
    ee70:	688a      	ldr	r2, [r1, #8]
    ee72:	4607      	mov	r7, r0
    ee74:	690b      	ldr	r3, [r1, #16]
    ee76:	460c      	mov	r4, r1
    ee78:	f8dd 9020 	ldr.w	r9, [sp, #32]
    ee7c:	4293      	cmp	r3, r2
    ee7e:	bfb8      	it	lt
    ee80:	4613      	movlt	r3, r2
    ee82:	6033      	str	r3, [r6, #0]
    ee84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    ee88:	b10a      	cbz	r2, ee8e <_printf_common+0x26>
    ee8a:	3301      	adds	r3, #1
    ee8c:	6033      	str	r3, [r6, #0]
    ee8e:	6823      	ldr	r3, [r4, #0]
    ee90:	0699      	lsls	r1, r3, #26
    ee92:	bf42      	ittt	mi
    ee94:	6833      	ldrmi	r3, [r6, #0]
    ee96:	3302      	addmi	r3, #2
    ee98:	6033      	strmi	r3, [r6, #0]
    ee9a:	6825      	ldr	r5, [r4, #0]
    ee9c:	f015 0506 	ands.w	r5, r5, #6
    eea0:	d106      	bne.n	eeb0 <_printf_common+0x48>
    eea2:	f104 0a19 	add.w	sl, r4, #25
    eea6:	68e3      	ldr	r3, [r4, #12]
    eea8:	6832      	ldr	r2, [r6, #0]
    eeaa:	1a9b      	subs	r3, r3, r2
    eeac:	42ab      	cmp	r3, r5
    eeae:	dc2b      	bgt.n	ef08 <_printf_common+0xa0>
    eeb0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    eeb4:	6822      	ldr	r2, [r4, #0]
    eeb6:	3b00      	subs	r3, #0
    eeb8:	bf18      	it	ne
    eeba:	2301      	movne	r3, #1
    eebc:	0692      	lsls	r2, r2, #26
    eebe:	d430      	bmi.n	ef22 <_printf_common+0xba>
    eec0:	f104 0243 	add.w	r2, r4, #67	; 0x43
    eec4:	4641      	mov	r1, r8
    eec6:	4638      	mov	r0, r7
    eec8:	47c8      	blx	r9
    eeca:	3001      	adds	r0, #1
    eecc:	d023      	beq.n	ef16 <_printf_common+0xae>
    eece:	6823      	ldr	r3, [r4, #0]
    eed0:	341a      	adds	r4, #26
    eed2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
    eed6:	f003 0306 	and.w	r3, r3, #6
    eeda:	2b04      	cmp	r3, #4
    eedc:	bf0a      	itet	eq
    eede:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
    eee2:	2500      	movne	r5, #0
    eee4:	6833      	ldreq	r3, [r6, #0]
    eee6:	f04f 0600 	mov.w	r6, #0
    eeea:	bf08      	it	eq
    eeec:	1aed      	subeq	r5, r5, r3
    eeee:	f854 3c12 	ldr.w	r3, [r4, #-18]
    eef2:	bf08      	it	eq
    eef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    eef8:	4293      	cmp	r3, r2
    eefa:	bfc4      	itt	gt
    eefc:	1a9b      	subgt	r3, r3, r2
    eefe:	18ed      	addgt	r5, r5, r3
    ef00:	42b5      	cmp	r5, r6
    ef02:	d11a      	bne.n	ef3a <_printf_common+0xd2>
    ef04:	2000      	movs	r0, #0
    ef06:	e008      	b.n	ef1a <_printf_common+0xb2>
    ef08:	2301      	movs	r3, #1
    ef0a:	4652      	mov	r2, sl
    ef0c:	4641      	mov	r1, r8
    ef0e:	4638      	mov	r0, r7
    ef10:	47c8      	blx	r9
    ef12:	3001      	adds	r0, #1
    ef14:	d103      	bne.n	ef1e <_printf_common+0xb6>
    ef16:	f04f 30ff 	mov.w	r0, #4294967295
    ef1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ef1e:	3501      	adds	r5, #1
    ef20:	e7c1      	b.n	eea6 <_printf_common+0x3e>
    ef22:	18e1      	adds	r1, r4, r3
    ef24:	1c5a      	adds	r2, r3, #1
    ef26:	2030      	movs	r0, #48	; 0x30
    ef28:	3302      	adds	r3, #2
    ef2a:	4422      	add	r2, r4
    ef2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    ef30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    ef34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    ef38:	e7c2      	b.n	eec0 <_printf_common+0x58>
    ef3a:	2301      	movs	r3, #1
    ef3c:	4622      	mov	r2, r4
    ef3e:	4641      	mov	r1, r8
    ef40:	4638      	mov	r0, r7
    ef42:	47c8      	blx	r9
    ef44:	3001      	adds	r0, #1
    ef46:	d0e6      	beq.n	ef16 <_printf_common+0xae>
    ef48:	3601      	adds	r6, #1
    ef4a:	e7d9      	b.n	ef00 <_printf_common+0x98>

0000ef4c <memchr>:
    ef4c:	b2c9      	uxtb	r1, r1
    ef4e:	4603      	mov	r3, r0
    ef50:	4402      	add	r2, r0
    ef52:	b510      	push	{r4, lr}
    ef54:	4293      	cmp	r3, r2
    ef56:	4618      	mov	r0, r3
    ef58:	d101      	bne.n	ef5e <memchr+0x12>
    ef5a:	2000      	movs	r0, #0
    ef5c:	e003      	b.n	ef66 <memchr+0x1a>
    ef5e:	7804      	ldrb	r4, [r0, #0]
    ef60:	3301      	adds	r3, #1
    ef62:	428c      	cmp	r4, r1
    ef64:	d1f6      	bne.n	ef54 <memchr+0x8>
    ef66:	bd10      	pop	{r4, pc}

0000ef68 <memmove>:
    ef68:	4288      	cmp	r0, r1
    ef6a:	b510      	push	{r4, lr}
    ef6c:	eb01 0402 	add.w	r4, r1, r2
    ef70:	d902      	bls.n	ef78 <memmove+0x10>
    ef72:	4284      	cmp	r4, r0
    ef74:	4623      	mov	r3, r4
    ef76:	d807      	bhi.n	ef88 <memmove+0x20>
    ef78:	1e43      	subs	r3, r0, #1
    ef7a:	42a1      	cmp	r1, r4
    ef7c:	d008      	beq.n	ef90 <memmove+0x28>
    ef7e:	f811 2b01 	ldrb.w	r2, [r1], #1
    ef82:	f803 2f01 	strb.w	r2, [r3, #1]!
    ef86:	e7f8      	b.n	ef7a <memmove+0x12>
    ef88:	4402      	add	r2, r0
    ef8a:	4601      	mov	r1, r0
    ef8c:	428a      	cmp	r2, r1
    ef8e:	d100      	bne.n	ef92 <memmove+0x2a>
    ef90:	bd10      	pop	{r4, pc}
    ef92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    ef96:	f802 4d01 	strb.w	r4, [r2, #-1]!
    ef9a:	e7f7      	b.n	ef8c <memmove+0x24>

0000ef9c <_realloc_r>:
    ef9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef9e:	4607      	mov	r7, r0
    efa0:	4615      	mov	r5, r2
    efa2:	460c      	mov	r4, r1
    efa4:	b921      	cbnz	r1, efb0 <_realloc_r+0x14>
    efa6:	4611      	mov	r1, r2
    efa8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    efac:	f7fe bac8 	b.w	d540 <_malloc_r>
    efb0:	b922      	cbnz	r2, efbc <_realloc_r+0x20>
    efb2:	f7fe fa7b 	bl	d4ac <_free_r>
    efb6:	2400      	movs	r4, #0
    efb8:	4620      	mov	r0, r4
    efba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    efbc:	f000 f813 	bl	efe6 <_malloc_usable_size_r>
    efc0:	42a8      	cmp	r0, r5
    efc2:	d2f9      	bcs.n	efb8 <_realloc_r+0x1c>
    efc4:	4629      	mov	r1, r5
    efc6:	4638      	mov	r0, r7
    efc8:	f7fe faba 	bl	d540 <_malloc_r>
    efcc:	4606      	mov	r6, r0
    efce:	2800      	cmp	r0, #0
    efd0:	d0f1      	beq.n	efb6 <_realloc_r+0x1a>
    efd2:	4621      	mov	r1, r4
    efd4:	462a      	mov	r2, r5
    efd6:	f7ff fe77 	bl	ecc8 <memcpy>
    efda:	4621      	mov	r1, r4
    efdc:	4638      	mov	r0, r7
    efde:	4634      	mov	r4, r6
    efe0:	f7fe fa64 	bl	d4ac <_free_r>
    efe4:	e7e8      	b.n	efb8 <_realloc_r+0x1c>

0000efe6 <_malloc_usable_size_r>:
    efe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
    efea:	1f18      	subs	r0, r3, #4
    efec:	2b00      	cmp	r3, #0
    efee:	bfbc      	itt	lt
    eff0:	580b      	ldrlt	r3, [r1, r0]
    eff2:	18c0      	addlt	r0, r0, r3
    eff4:	4770      	bx	lr
	...
