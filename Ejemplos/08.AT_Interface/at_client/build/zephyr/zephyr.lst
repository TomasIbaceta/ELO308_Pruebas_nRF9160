
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	38 01 01 20 b1 a0 00 00 21 2a 01 00 85 a0 00 00     8.. ....!*......
    8010:	85 a0 00 00 85 a0 00 00 85 a0 00 00 85 a0 00 00     ................
	...
    802c:	75 9c 00 00 85 a0 00 00 00 00 00 00 15 9c 00 00     u...............
    803c:	85 a0 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	fd 9c 00 00 fd 9c 00 00 fd 9c 00 00 fd 9c 00 00     ................
    8050:	fd 9c 00 00 fd 9c 00 00 fd 9c 00 00 fd 9c 00 00     ................
    8060:	fd 9c 00 00 fd 9c 00 00 fd 9c 00 00 fd 9c 00 00     ................
    8070:	fd 9c 00 00 fd 9c 00 00 fd 9c 00 00 fd 9c 00 00     ................
    8080:	fd 9c 00 00 fd 9c 00 00 fd 9c 00 00 fd 9c 00 00     ................
    8090:	fd 9c 00 00 fd 9c 00 00 fd 9c 00 00 fd 9c 00 00     ................
    80a0:	fd 9c 00 00 fd 9c 00 00 fd 9c 00 00 fd 9c 00 00     ................
    80b0:	fd 9c 00 00 fd 9c 00 00 fd 9c 00 00 fd 9c 00 00     ................
    80c0:	fd 9c 00 00 fd 9c 00 00 fd 9c 00 00 fd 9c 00 00     ................
    80d0:	fd 9c 00 00 fd 9c 00 00 fd 9c 00 00 fd 9c 00 00     ................
    80e0:	fd 9c 00 00 fd 9c 00 00 fd 9c 00 00 fd 9c 00 00     ................
    80f0:	fd 9c 00 00 fd 9c 00 00 fd 9c 00 00 fd 9c 00 00     ................
    8100:	fd 9c 00 00 fd 9c 00 00 fd 9c 00 00 fd 9c 00 00     ................
    8110:	fd 9c 00 00 fd 9c 00 00 fd 9c 00 00 fd 9c 00 00     ................
    8120:	fd 9c 00 00 fd 9c 00 00 fd 9c 00 00 fd 9c 00 00     ................
    8130:	fd 9c 00 00 fd 9c 00 00 fd 9c 00 00 fd 9c 00 00     ................
    8140:	fd 9c 00 00                                         ....

Disassembly of section text:

00008144 <__aeabi_uldivmod>:
    8144:	b953      	cbnz	r3, 815c <__aeabi_uldivmod+0x18>
    8146:	b94a      	cbnz	r2, 815c <__aeabi_uldivmod+0x18>
    8148:	2900      	cmp	r1, #0
    814a:	bf08      	it	eq
    814c:	2800      	cmpeq	r0, #0
    814e:	bf1c      	itt	ne
    8150:	f04f 31ff 	movne.w	r1, #4294967295
    8154:	f04f 30ff 	movne.w	r0, #4294967295
    8158:	f000 b80c 	b.w	8174 <__aeabi_idiv0>
    815c:	f1ad 0c08 	sub.w	ip, sp, #8
    8160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8164:	f000 f808 	bl	8178 <__udivmoddi4>
    8168:	f8dd e004 	ldr.w	lr, [sp, #4]
    816c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8170:	b004      	add	sp, #16
    8172:	4770      	bx	lr

00008174 <__aeabi_idiv0>:
    8174:	4770      	bx	lr
    8176:	bf00      	nop

00008178 <__udivmoddi4>:
    8178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    817c:	4686      	mov	lr, r0
    817e:	468c      	mov	ip, r1
    8180:	4608      	mov	r0, r1
    8182:	9e08      	ldr	r6, [sp, #32]
    8184:	4615      	mov	r5, r2
    8186:	4674      	mov	r4, lr
    8188:	4619      	mov	r1, r3
    818a:	2b00      	cmp	r3, #0
    818c:	f040 80c1 	bne.w	8312 <__udivmoddi4+0x19a>
    8190:	4285      	cmp	r5, r0
    8192:	fab2 f282 	clz	r2, r2
    8196:	d945      	bls.n	8224 <__udivmoddi4+0xac>
    8198:	b14a      	cbz	r2, 81ae <__udivmoddi4+0x36>
    819a:	f1c2 0320 	rsb	r3, r2, #32
    819e:	fa00 fc02 	lsl.w	ip, r0, r2
    81a2:	4095      	lsls	r5, r2
    81a4:	4094      	lsls	r4, r2
    81a6:	fa2e f303 	lsr.w	r3, lr, r3
    81aa:	ea43 0c0c 	orr.w	ip, r3, ip
    81ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    81b2:	b2a8      	uxth	r0, r5
    81b4:	0c23      	lsrs	r3, r4, #16
    81b6:	fbbc f8fe 	udiv	r8, ip, lr
    81ba:	fb0e cc18 	mls	ip, lr, r8, ip
    81be:	fb08 f900 	mul.w	r9, r8, r0
    81c2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    81c6:	4599      	cmp	r9, r3
    81c8:	d928      	bls.n	821c <__udivmoddi4+0xa4>
    81ca:	18eb      	adds	r3, r5, r3
    81cc:	f108 37ff 	add.w	r7, r8, #4294967295
    81d0:	d204      	bcs.n	81dc <__udivmoddi4+0x64>
    81d2:	4599      	cmp	r9, r3
    81d4:	d902      	bls.n	81dc <__udivmoddi4+0x64>
    81d6:	f1a8 0702 	sub.w	r7, r8, #2
    81da:	442b      	add	r3, r5
    81dc:	eba3 0309 	sub.w	r3, r3, r9
    81e0:	b2a4      	uxth	r4, r4
    81e2:	fbb3 fcfe 	udiv	ip, r3, lr
    81e6:	fb0e 331c 	mls	r3, lr, ip, r3
    81ea:	fb0c f000 	mul.w	r0, ip, r0
    81ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    81f2:	42a0      	cmp	r0, r4
    81f4:	d914      	bls.n	8220 <__udivmoddi4+0xa8>
    81f6:	192c      	adds	r4, r5, r4
    81f8:	f10c 33ff 	add.w	r3, ip, #4294967295
    81fc:	d204      	bcs.n	8208 <__udivmoddi4+0x90>
    81fe:	42a0      	cmp	r0, r4
    8200:	d902      	bls.n	8208 <__udivmoddi4+0x90>
    8202:	f1ac 0302 	sub.w	r3, ip, #2
    8206:	442c      	add	r4, r5
    8208:	1a24      	subs	r4, r4, r0
    820a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    820e:	b11e      	cbz	r6, 8218 <__udivmoddi4+0xa0>
    8210:	40d4      	lsrs	r4, r2
    8212:	2300      	movs	r3, #0
    8214:	6034      	str	r4, [r6, #0]
    8216:	6073      	str	r3, [r6, #4]
    8218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    821c:	4647      	mov	r7, r8
    821e:	e7dd      	b.n	81dc <__udivmoddi4+0x64>
    8220:	4663      	mov	r3, ip
    8222:	e7f1      	b.n	8208 <__udivmoddi4+0x90>
    8224:	bb92      	cbnz	r2, 828c <__udivmoddi4+0x114>
    8226:	1b43      	subs	r3, r0, r5
    8228:	2101      	movs	r1, #1
    822a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    822e:	b2af      	uxth	r7, r5
    8230:	0c20      	lsrs	r0, r4, #16
    8232:	fbb3 fcfe 	udiv	ip, r3, lr
    8236:	fb0e 331c 	mls	r3, lr, ip, r3
    823a:	fb0c f807 	mul.w	r8, ip, r7
    823e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8242:	4598      	cmp	r8, r3
    8244:	d961      	bls.n	830a <__udivmoddi4+0x192>
    8246:	18eb      	adds	r3, r5, r3
    8248:	f10c 30ff 	add.w	r0, ip, #4294967295
    824c:	d204      	bcs.n	8258 <__udivmoddi4+0xe0>
    824e:	4598      	cmp	r8, r3
    8250:	d902      	bls.n	8258 <__udivmoddi4+0xe0>
    8252:	f1ac 0002 	sub.w	r0, ip, #2
    8256:	442b      	add	r3, r5
    8258:	eba3 0308 	sub.w	r3, r3, r8
    825c:	b2a4      	uxth	r4, r4
    825e:	fbb3 fcfe 	udiv	ip, r3, lr
    8262:	fb0e 331c 	mls	r3, lr, ip, r3
    8266:	fb0c f707 	mul.w	r7, ip, r7
    826a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    826e:	42a7      	cmp	r7, r4
    8270:	d94d      	bls.n	830e <__udivmoddi4+0x196>
    8272:	192c      	adds	r4, r5, r4
    8274:	f10c 33ff 	add.w	r3, ip, #4294967295
    8278:	d204      	bcs.n	8284 <__udivmoddi4+0x10c>
    827a:	42a7      	cmp	r7, r4
    827c:	d902      	bls.n	8284 <__udivmoddi4+0x10c>
    827e:	f1ac 0302 	sub.w	r3, ip, #2
    8282:	442c      	add	r4, r5
    8284:	1be4      	subs	r4, r4, r7
    8286:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    828a:	e7c0      	b.n	820e <__udivmoddi4+0x96>
    828c:	f1c2 0320 	rsb	r3, r2, #32
    8290:	4095      	lsls	r5, r2
    8292:	4094      	lsls	r4, r2
    8294:	fa20 f103 	lsr.w	r1, r0, r3
    8298:	fa2e f303 	lsr.w	r3, lr, r3
    829c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    82a0:	4090      	lsls	r0, r2
    82a2:	b2af      	uxth	r7, r5
    82a4:	4303      	orrs	r3, r0
    82a6:	fbb1 fcfe 	udiv	ip, r1, lr
    82aa:	fb0e 101c 	mls	r0, lr, ip, r1
    82ae:	0c19      	lsrs	r1, r3, #16
    82b0:	fb0c f807 	mul.w	r8, ip, r7
    82b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    82b8:	4588      	cmp	r8, r1
    82ba:	d922      	bls.n	8302 <__udivmoddi4+0x18a>
    82bc:	1869      	adds	r1, r5, r1
    82be:	f10c 30ff 	add.w	r0, ip, #4294967295
    82c2:	d204      	bcs.n	82ce <__udivmoddi4+0x156>
    82c4:	4588      	cmp	r8, r1
    82c6:	d902      	bls.n	82ce <__udivmoddi4+0x156>
    82c8:	f1ac 0002 	sub.w	r0, ip, #2
    82cc:	4429      	add	r1, r5
    82ce:	eba1 0108 	sub.w	r1, r1, r8
    82d2:	b29b      	uxth	r3, r3
    82d4:	fbb1 fcfe 	udiv	ip, r1, lr
    82d8:	fb0e 111c 	mls	r1, lr, ip, r1
    82dc:	fb0c f707 	mul.w	r7, ip, r7
    82e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    82e4:	429f      	cmp	r7, r3
    82e6:	d90e      	bls.n	8306 <__udivmoddi4+0x18e>
    82e8:	18eb      	adds	r3, r5, r3
    82ea:	f10c 31ff 	add.w	r1, ip, #4294967295
    82ee:	d204      	bcs.n	82fa <__udivmoddi4+0x182>
    82f0:	429f      	cmp	r7, r3
    82f2:	d902      	bls.n	82fa <__udivmoddi4+0x182>
    82f4:	f1ac 0102 	sub.w	r1, ip, #2
    82f8:	442b      	add	r3, r5
    82fa:	1bdb      	subs	r3, r3, r7
    82fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8300:	e793      	b.n	822a <__udivmoddi4+0xb2>
    8302:	4660      	mov	r0, ip
    8304:	e7e3      	b.n	82ce <__udivmoddi4+0x156>
    8306:	4661      	mov	r1, ip
    8308:	e7f7      	b.n	82fa <__udivmoddi4+0x182>
    830a:	4660      	mov	r0, ip
    830c:	e7a4      	b.n	8258 <__udivmoddi4+0xe0>
    830e:	4663      	mov	r3, ip
    8310:	e7b8      	b.n	8284 <__udivmoddi4+0x10c>
    8312:	4283      	cmp	r3, r0
    8314:	d906      	bls.n	8324 <__udivmoddi4+0x1ac>
    8316:	b916      	cbnz	r6, 831e <__udivmoddi4+0x1a6>
    8318:	2100      	movs	r1, #0
    831a:	4608      	mov	r0, r1
    831c:	e77c      	b.n	8218 <__udivmoddi4+0xa0>
    831e:	e9c6 e000 	strd	lr, r0, [r6]
    8322:	e7f9      	b.n	8318 <__udivmoddi4+0x1a0>
    8324:	fab3 f783 	clz	r7, r3
    8328:	b98f      	cbnz	r7, 834e <__udivmoddi4+0x1d6>
    832a:	4283      	cmp	r3, r0
    832c:	d301      	bcc.n	8332 <__udivmoddi4+0x1ba>
    832e:	4572      	cmp	r2, lr
    8330:	d808      	bhi.n	8344 <__udivmoddi4+0x1cc>
    8332:	ebbe 0402 	subs.w	r4, lr, r2
    8336:	eb60 0303 	sbc.w	r3, r0, r3
    833a:	2001      	movs	r0, #1
    833c:	469c      	mov	ip, r3
    833e:	b91e      	cbnz	r6, 8348 <__udivmoddi4+0x1d0>
    8340:	2100      	movs	r1, #0
    8342:	e769      	b.n	8218 <__udivmoddi4+0xa0>
    8344:	4638      	mov	r0, r7
    8346:	e7fa      	b.n	833e <__udivmoddi4+0x1c6>
    8348:	e9c6 4c00 	strd	r4, ip, [r6]
    834c:	e7f8      	b.n	8340 <__udivmoddi4+0x1c8>
    834e:	f1c7 0c20 	rsb	ip, r7, #32
    8352:	40bb      	lsls	r3, r7
    8354:	fa0e f507 	lsl.w	r5, lr, r7
    8358:	fa22 f40c 	lsr.w	r4, r2, ip
    835c:	fa2e f10c 	lsr.w	r1, lr, ip
    8360:	40ba      	lsls	r2, r7
    8362:	431c      	orrs	r4, r3
    8364:	fa20 f30c 	lsr.w	r3, r0, ip
    8368:	40b8      	lsls	r0, r7
    836a:	ea4f 4914 	mov.w	r9, r4, lsr #16
    836e:	4301      	orrs	r1, r0
    8370:	fa1f fe84 	uxth.w	lr, r4
    8374:	fbb3 f8f9 	udiv	r8, r3, r9
    8378:	fb09 3018 	mls	r0, r9, r8, r3
    837c:	0c0b      	lsrs	r3, r1, #16
    837e:	fb08 fa0e 	mul.w	sl, r8, lr
    8382:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    8386:	459a      	cmp	sl, r3
    8388:	d940      	bls.n	840c <__udivmoddi4+0x294>
    838a:	18e3      	adds	r3, r4, r3
    838c:	f108 30ff 	add.w	r0, r8, #4294967295
    8390:	d204      	bcs.n	839c <__udivmoddi4+0x224>
    8392:	459a      	cmp	sl, r3
    8394:	d902      	bls.n	839c <__udivmoddi4+0x224>
    8396:	f1a8 0002 	sub.w	r0, r8, #2
    839a:	4423      	add	r3, r4
    839c:	eba3 030a 	sub.w	r3, r3, sl
    83a0:	b289      	uxth	r1, r1
    83a2:	fbb3 f8f9 	udiv	r8, r3, r9
    83a6:	fb09 3318 	mls	r3, r9, r8, r3
    83aa:	fb08 fe0e 	mul.w	lr, r8, lr
    83ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    83b2:	458e      	cmp	lr, r1
    83b4:	d92c      	bls.n	8410 <__udivmoddi4+0x298>
    83b6:	1861      	adds	r1, r4, r1
    83b8:	f108 33ff 	add.w	r3, r8, #4294967295
    83bc:	d204      	bcs.n	83c8 <__udivmoddi4+0x250>
    83be:	458e      	cmp	lr, r1
    83c0:	d902      	bls.n	83c8 <__udivmoddi4+0x250>
    83c2:	f1a8 0302 	sub.w	r3, r8, #2
    83c6:	4421      	add	r1, r4
    83c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    83cc:	eba1 010e 	sub.w	r1, r1, lr
    83d0:	fba0 9802 	umull	r9, r8, r0, r2
    83d4:	4541      	cmp	r1, r8
    83d6:	46ce      	mov	lr, r9
    83d8:	4643      	mov	r3, r8
    83da:	d302      	bcc.n	83e2 <__udivmoddi4+0x26a>
    83dc:	d106      	bne.n	83ec <__udivmoddi4+0x274>
    83de:	454d      	cmp	r5, r9
    83e0:	d204      	bcs.n	83ec <__udivmoddi4+0x274>
    83e2:	3801      	subs	r0, #1
    83e4:	ebb9 0e02 	subs.w	lr, r9, r2
    83e8:	eb68 0304 	sbc.w	r3, r8, r4
    83ec:	2e00      	cmp	r6, #0
    83ee:	d0a7      	beq.n	8340 <__udivmoddi4+0x1c8>
    83f0:	ebb5 020e 	subs.w	r2, r5, lr
    83f4:	eb61 0103 	sbc.w	r1, r1, r3
    83f8:	fa01 fc0c 	lsl.w	ip, r1, ip
    83fc:	fa22 f307 	lsr.w	r3, r2, r7
    8400:	40f9      	lsrs	r1, r7
    8402:	ea4c 0303 	orr.w	r3, ip, r3
    8406:	e9c6 3100 	strd	r3, r1, [r6]
    840a:	e799      	b.n	8340 <__udivmoddi4+0x1c8>
    840c:	4640      	mov	r0, r8
    840e:	e7c5      	b.n	839c <__udivmoddi4+0x224>
    8410:	4643      	mov	r3, r8
    8412:	e7d9      	b.n	83c8 <__udivmoddi4+0x250>

00008414 <strlen>:
    8414:	4603      	mov	r3, r0
    8416:	f813 2b01 	ldrb.w	r2, [r3], #1
    841a:	2a00      	cmp	r2, #0
    841c:	d1fb      	bne.n	8416 <strlen+0x2>
    841e:	1a18      	subs	r0, r3, r0
    8420:	3801      	subs	r0, #1
    8422:	4770      	bx	lr

00008424 <enable_xtal>:
#include <zephyr/drivers/clock_control.h>
#include <zephyr/drivers/clock_control/nrf_clock_control.h>

/* To strictly comply with UART timing, enable external XTAL oscillator */
void enable_xtal(void)
{
    8424:	b508      	push	{r3, lr}
	struct onoff_manager *clk_mgr;
	static struct onoff_client cli = {};

	clk_mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    8426:	2000      	movs	r0, #0
    8428:	f002 fbd6 	bl	abd8 <z_nrf_clock_control_get_onoff>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    842c:	2300      	movs	r3, #0
    842e:	4904      	ldr	r1, [pc, #16]	; (8440 <enable_xtal+0x1c>)
    8430:	604b      	str	r3, [r1, #4]
    8432:	60cb      	str	r3, [r1, #12]
    8434:	2301      	movs	r3, #1
    8436:	608b      	str	r3, [r1, #8]
	sys_notify_init_spinwait(&cli.notify);
	(void)onoff_request(clk_mgr, &cli);
}
    8438:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)onoff_request(clk_mgr, &cli);
    843c:	f000 bc4a 	b.w	8cd4 <onoff_request>
    8440:	2000ca98 	.word	0x2000ca98

00008444 <myModem_SendCommandPrintResponse>:
 * 
 * @param command the AT command to be sent, for example: myModem_SendCommandPrintResponse("AT+CGMI");
 * you could format strings, or use pointer to char, just make sure that you're sending a proper string instead
 * of a simple character array.
 */
void myModem_SendCommandPrintResponse(char* command){
    8444:	b510      	push	{r4, lr}
    8446:	b090      	sub	sp, #64	; 0x40
    8448:	4604      	mov	r4, r0
	int err;
	char response[64];

	err = nrf_modem_at_cmd(response, sizeof(response), command); //Request Manufacture information
    844a:	4602      	mov	r2, r0
    844c:	2140      	movs	r1, #64	; 0x40
    844e:	4668      	mov	r0, sp
    8450:	f005 fc3c 	bl	dccc <nrf_modem_at_cmd>
	if (err) {
    8454:	b128      	cbz	r0, 8462 <myModem_SendCommandPrintResponse+0x1e>
		printk("Error! my_readModemResponse\n error line: %s\n", command);
    8456:	4621      	mov	r1, r4
    8458:	4805      	ldr	r0, [pc, #20]	; (8470 <myModem_SendCommandPrintResponse+0x2c>)
    845a:	f00a f902 	bl	12662 <printk>
	}

	/* buffer contains the whole response */
	printk("Command: %s\nModem response: %s\n", command, response);
	return;
}
    845e:	b010      	add	sp, #64	; 0x40
    8460:	bd10      	pop	{r4, pc}
	printk("Command: %s\nModem response: %s\n", command, response);
    8462:	466a      	mov	r2, sp
    8464:	4621      	mov	r1, r4
    8466:	4803      	ldr	r0, [pc, #12]	; (8474 <myModem_SendCommandPrintResponse+0x30>)
    8468:	f00a f8fb 	bl	12662 <printk>
	return;
    846c:	e7f7      	b.n	845e <myModem_SendCommandPrintResponse+0x1a>
    846e:	bf00      	nop
    8470:	000151c7 	.word	0x000151c7
    8474:	000151f4 	.word	0x000151f4

00008478 <main>:

int main(void)
{
    8478:	b508      	push	{r3, lr}
	int err;

	printk("The AT host sample started - 1\n");
    847a:	4819      	ldr	r0, [pc, #100]	; (84e0 <main+0x68>)
    847c:	f00a f8f1 	bl	12662 <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    8480:	2100      	movs	r1, #0
    8482:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    8486:	f008 ff7b 	bl	11380 <z_impl_k_sleep>
	k_msleep(2000);
	printk("The AT host sample started - 2\n");
    848a:	4816      	ldr	r0, [pc, #88]	; (84e4 <main+0x6c>)
    848c:	f00a f8e9 	bl	12662 <printk>

	err = nrf_modem_lib_init();
    8490:	f003 f9aa 	bl	b7e8 <nrf_modem_lib_init>
	if (err) {
    8494:	4601      	mov	r1, r0
    8496:	b120      	cbz	r0, 84a2 <main+0x2a>
		printk("Modem library initialization failed, error: %d\n", err);
    8498:	4813      	ldr	r0, [pc, #76]	; (84e8 <main+0x70>)
    849a:	f00a f8e2 	bl	12662 <printk>
	



	return 0;
}
    849e:	2000      	movs	r0, #0
    84a0:	bd08      	pop	{r3, pc}
	enable_xtal();
    84a2:	f7ff ffbf 	bl	8424 <enable_xtal>
	printk("Ready\n");
    84a6:	4811      	ldr	r0, [pc, #68]	; (84ec <main+0x74>)
    84a8:	f00a f8db 	bl	12662 <printk>
	printk("modem init our check OK\n");
    84ac:	4810      	ldr	r0, [pc, #64]	; (84f0 <main+0x78>)
    84ae:	f00a f8d8 	bl	12662 <printk>
	printk("MyCommand Test 1:\n");
    84b2:	4810      	ldr	r0, [pc, #64]	; (84f4 <main+0x7c>)
    84b4:	f00a f8d5 	bl	12662 <printk>
	myModem_SendCommandPrintResponse("AT+CGMI");
    84b8:	480f      	ldr	r0, [pc, #60]	; (84f8 <main+0x80>)
    84ba:	f7ff ffc3 	bl	8444 <myModem_SendCommandPrintResponse>
	printk("MyCommand Test 4:\n");
    84be:	480f      	ldr	r0, [pc, #60]	; (84fc <main+0x84>)
    84c0:	f00a f8cf 	bl	12662 <printk>
	myModem_SendCommandPrintResponse("AT%%XCOEX0?"); //This syntax works.
    84c4:	480e      	ldr	r0, [pc, #56]	; (8500 <main+0x88>)
    84c6:	f7ff ffbd 	bl	8444 <myModem_SendCommandPrintResponse>
	printk("MyCommand Test 5:\n");
    84ca:	480e      	ldr	r0, [pc, #56]	; (8504 <main+0x8c>)
    84cc:	f00a f8c9 	bl	12662 <printk>
	myModem_SendCommandPrintResponse("AT%%XMAGPIO?");
    84d0:	480d      	ldr	r0, [pc, #52]	; (8508 <main+0x90>)
    84d2:	f7ff ffb7 	bl	8444 <myModem_SendCommandPrintResponse>
	myModem_SendCommandPrintResponse("AT+CGMR");
    84d6:	480d      	ldr	r0, [pc, #52]	; (850c <main+0x94>)
    84d8:	f7ff ffb4 	bl	8444 <myModem_SendCommandPrintResponse>
	return 0;
    84dc:	e7df      	b.n	849e <main+0x26>
    84de:	bf00      	nop
    84e0:	00015214 	.word	0x00015214
    84e4:	00015234 	.word	0x00015234
    84e8:	00015254 	.word	0x00015254
    84ec:	00015284 	.word	0x00015284
    84f0:	0001528b 	.word	0x0001528b
    84f4:	000152a4 	.word	0x000152a4
    84f8:	000151ac 	.word	0x000151ac
    84fc:	000152b7 	.word	0x000152b7
    8500:	000152ca 	.word	0x000152ca
    8504:	000152d6 	.word	0x000152d6
    8508:	000152e9 	.word	0x000152e9
    850c:	000152f6 	.word	0x000152f6

00008510 <z_reserve_fd>:

	return entry->obj;
}

int z_reserve_fd(void)
{
    8510:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    8512:	2400      	movs	r4, #0
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    8514:	f04f 33ff 	mov.w	r3, #4294967295
    8518:	f04f 32ff 	mov.w	r2, #4294967295
    851c:	4814      	ldr	r0, [pc, #80]	; (8570 <z_reserve_fd+0x60>)
    851e:	f007 fa05 	bl	f92c <z_impl_k_mutex_lock>
    8522:	4b14      	ldr	r3, [pc, #80]	; (8574 <z_reserve_fd+0x64>)
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8524:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
    8528:	b17a      	cbz	r2, 854a <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    852a:	3401      	adds	r4, #1
    852c:	2c04      	cmp	r4, #4
    852e:	f103 0320 	add.w	r3, r3, #32
    8532:	d1f7      	bne.n	8524 <z_reserve_fd+0x14>
	errno = ENFILE;
    8534:	f00a faaa 	bl	12a8c <__errno>
    8538:	2317      	movs	r3, #23
	return -1;
    853a:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
    853e:	6003      	str	r3, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    8540:	480b      	ldr	r0, [pc, #44]	; (8570 <z_reserve_fd+0x60>)
    8542:	f007 fac3 	bl	facc <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
    8546:	4620      	mov	r0, r4
    8548:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    854a:	e8d3 0fef 	ldaex	r0, [r3]
    854e:	3001      	adds	r0, #1
    8550:	e8c3 0fe1 	stlex	r1, r0, [r3]
    8554:	2900      	cmp	r1, #0
    8556:	d1f8      	bne.n	854a <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
    8558:	4807      	ldr	r0, [pc, #28]	; (8578 <z_reserve_fd+0x68>)
    855a:	0163      	lsls	r3, r4, #5
    855c:	eb00 1144 	add.w	r1, r0, r4, lsl #5
    8560:	50c2      	str	r2, [r0, r3]
		fdtable[fd].vtable = NULL;
    8562:	604a      	str	r2, [r1, #4]
		k_mutex_init(&fdtable[fd].lock);
    8564:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
    8566:	4418      	add	r0, r3
    8568:	f00b febf 	bl	142ea <z_impl_k_mutex_init>
    856c:	e7e8      	b.n	8540 <z_reserve_fd+0x30>
    856e:	bf00      	nop
    8570:	2000c740 	.word	0x2000c740
    8574:	2000cab0 	.word	0x2000cab0
    8578:	2000caa8 	.word	0x2000caa8

0000857c <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
    857c:	b410      	push	{r4}
    857e:	4604      	mov	r4, r0
    8580:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
    8582:	4b09      	ldr	r3, [pc, #36]	; (85a8 <z_finalize_fd+0x2c>)
    8584:	0162      	lsls	r2, r4, #5
    8586:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    858a:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
    858c:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
    858e:	b140      	cbz	r0, 85a2 <z_finalize_fd+0x26>
    8590:	68c4      	ldr	r4, [r0, #12]
    8592:	b134      	cbz	r4, 85a2 <z_finalize_fd+0x26>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
    8594:	320c      	adds	r2, #12
    8596:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
    8598:	bc10      	pop	{r4}
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
    859a:	f240 1205 	movw	r2, #261	; 0x105
    859e:	f00a b84f 	b.w	12640 <z_fdtable_call_ioctl.constprop.0>
}
    85a2:	bc10      	pop	{r4}
    85a4:	4770      	bx	lr
    85a6:	bf00      	nop
    85a8:	2000caa8 	.word	0x2000caa8

000085ac <z_free_fd>:

void z_free_fd(int fd)
{
    85ac:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
    85ae:	490d      	ldr	r1, [pc, #52]	; (85e4 <z_free_fd+0x38>)
    85b0:	0140      	lsls	r0, r0, #5
    85b2:	f100 0308 	add.w	r3, r0, #8
    85b6:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    85b8:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
    85bc:	b182      	cbz	r2, 85e0 <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
    85be:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    85c0:	e8d3 5fef 	ldaex	r5, [r3]
    85c4:	4295      	cmp	r5, r2
    85c6:	d104      	bne.n	85d2 <z_free_fd+0x26>
    85c8:	e8c3 4fec 	stlex	ip, r4, [r3]
    85cc:	f1bc 0f00 	cmp.w	ip, #0
    85d0:	d1f6      	bne.n	85c0 <z_free_fd+0x14>
    85d2:	d1f1      	bne.n	85b8 <z_free_fd+0xc>
	if (old_rc != 1) {
    85d4:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
    85d6:	bf01      	itttt	eq
    85d8:	2300      	moveq	r3, #0
    85da:	180a      	addeq	r2, r1, r0
    85dc:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
    85de:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
    85e0:	bd30      	pop	{r4, r5, pc}
    85e2:	bf00      	nop
    85e4:	2000caa8 	.word	0x2000caa8

000085e8 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    85e8:	4b01      	ldr	r3, [pc, #4]	; (85f0 <char_out+0x8>)
    85ea:	681b      	ldr	r3, [r3, #0]
    85ec:	4718      	bx	r3
    85ee:	bf00      	nop
    85f0:	2000c580 	.word	0x2000c580

000085f4 <__printk_hook_install>:
	_char_out = fn;
    85f4:	4b01      	ldr	r3, [pc, #4]	; (85fc <__printk_hook_install+0x8>)
    85f6:	6018      	str	r0, [r3, #0]
}
    85f8:	4770      	bx	lr
    85fa:	bf00      	nop
    85fc:	2000c580 	.word	0x2000c580

00008600 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    8600:	b507      	push	{r0, r1, r2, lr}
    8602:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    8604:	2100      	movs	r1, #0
    8606:	4602      	mov	r2, r0
    8608:	9100      	str	r1, [sp, #0]
    860a:	4803      	ldr	r0, [pc, #12]	; (8618 <vprintk+0x18>)
    860c:	f000 fc88 	bl	8f20 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    8610:	b003      	add	sp, #12
    8612:	f85d fb04 	ldr.w	pc, [sp], #4
    8616:	bf00      	nop
    8618:	000085e9 	.word	0x000085e9

0000861c <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    861c:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    861e:	460c      	mov	r4, r1
    8620:	2900      	cmp	r1, #0
    8622:	d034      	beq.n	868e <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    8624:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    8626:	1f0b      	subs	r3, r1, #4
    8628:	1a9b      	subs	r3, r3, r2
    862a:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    862c:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    8630:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    8632:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    8634:	07e8      	lsls	r0, r5, #31
    8636:	d40d      	bmi.n	8654 <sys_heap_free+0x38>
    8638:	23af      	movs	r3, #175	; 0xaf
    863a:	4a15      	ldr	r2, [pc, #84]	; (8690 <sys_heap_free+0x74>)
    863c:	4915      	ldr	r1, [pc, #84]	; (8694 <sys_heap_free+0x78>)
    863e:	4816      	ldr	r0, [pc, #88]	; (8698 <sys_heap_free+0x7c>)
    8640:	f00a f9c4 	bl	129cc <assert_print>
    8644:	4621      	mov	r1, r4
    8646:	4815      	ldr	r0, [pc, #84]	; (869c <sys_heap_free+0x80>)
    8648:	f00a f9c0 	bl	129cc <assert_print>
    864c:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    864e:	4810      	ldr	r0, [pc, #64]	; (8690 <sys_heap_free+0x74>)
    8650:	f00a f9b5 	bl	129be <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    8654:	4610      	mov	r0, r2
    8656:	f00a f81b 	bl	12690 <chunk_size>
    865a:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
    865c:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    8660:	1b80      	subs	r0, r0, r6
    8662:	4281      	cmp	r1, r0
    8664:	d00b      	beq.n	867e <sys_heap_free+0x62>
    8666:	23b7      	movs	r3, #183	; 0xb7
    8668:	4a09      	ldr	r2, [pc, #36]	; (8690 <sys_heap_free+0x74>)
    866a:	490d      	ldr	r1, [pc, #52]	; (86a0 <sys_heap_free+0x84>)
    866c:	480a      	ldr	r0, [pc, #40]	; (8698 <sys_heap_free+0x7c>)
    866e:	f00a f9ad 	bl	129cc <assert_print>
    8672:	4621      	mov	r1, r4
    8674:	480b      	ldr	r0, [pc, #44]	; (86a4 <sys_heap_free+0x88>)
    8676:	f00a f9a9 	bl	129cc <assert_print>
    867a:	21b7      	movs	r1, #183	; 0xb7
    867c:	e7e7      	b.n	864e <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    867e:	f025 0501 	bic.w	r5, r5, #1
    8682:	805d      	strh	r5, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    8684:	4610      	mov	r0, r2
}
    8686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    868a:	f00a b8be 	b.w	1280a <free_chunk>
}
    868e:	bd70      	pop	{r4, r5, r6, pc}
    8690:	0001530f 	.word	0x0001530f
    8694:	00015330 	.word	0x00015330
    8698:	00015341 	.word	0x00015341
    869c:	0001535e 	.word	0x0001535e
    86a0:	00015396 	.word	0x00015396
    86a4:	000153bc 	.word	0x000153bc

000086a8 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    86a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    86ac:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    86ae:	400b      	ands	r3, r1
{
    86b0:	460f      	mov	r7, r1
    86b2:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    86b4:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    86b6:	d010      	beq.n	86da <sys_heap_aligned_alloc+0x32>
	rew = align & -align;
    86b8:	f1c1 0900 	rsb	r9, r1, #0
    86bc:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    86c0:	464a      	mov	r2, r9
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    86c2:	1e59      	subs	r1, r3, #1
		gap = MIN(rew, chunk_header_bytes(h));
    86c4:	2a04      	cmp	r2, #4
    86c6:	bf28      	it	cs
    86c8:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    86ca:	4219      	tst	r1, r3
    86cc:	d10c      	bne.n	86e8 <sys_heap_aligned_alloc+0x40>
    86ce:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    86d0:	b9e4      	cbnz	r4, 870c <sys_heap_aligned_alloc+0x64>
		return NULL;
    86d2:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    86d4:	4628      	mov	r0, r5
    86d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    86da:	2904      	cmp	r1, #4
    86dc:	d813      	bhi.n	8706 <sys_heap_aligned_alloc+0x5e>
}
    86de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    86e2:	4611      	mov	r1, r2
    86e4:	f00a b8c2 	b.w	1286c <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    86e8:	492c      	ldr	r1, [pc, #176]	; (879c <sys_heap_aligned_alloc+0xf4>)
    86ea:	f44f 73a2 	mov.w	r3, #324	; 0x144
    86ee:	4a2c      	ldr	r2, [pc, #176]	; (87a0 <sys_heap_aligned_alloc+0xf8>)
    86f0:	482c      	ldr	r0, [pc, #176]	; (87a4 <sys_heap_aligned_alloc+0xfc>)
    86f2:	f00a f96b 	bl	129cc <assert_print>
    86f6:	482c      	ldr	r0, [pc, #176]	; (87a8 <sys_heap_aligned_alloc+0x100>)
    86f8:	f00a f968 	bl	129cc <assert_print>
    86fc:	f44f 71a2 	mov.w	r1, #324	; 0x144
    8700:	4827      	ldr	r0, [pc, #156]	; (87a0 <sys_heap_aligned_alloc+0xf8>)
    8702:	f00a f95c 	bl	129be <assert_post_action>
		rew = 0;
    8706:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
    8708:	2204      	movs	r2, #4
    870a:	e7e1      	b.n	86d0 <sys_heap_aligned_alloc+0x28>
	if (bytes == 0 || size_too_big(h, bytes)) {
    870c:	68b3      	ldr	r3, [r6, #8]
    870e:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    8712:	d9de      	bls.n	86d2 <sys_heap_aligned_alloc+0x2a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    8714:	f104 010b 	add.w	r1, r4, #11
    8718:	4439      	add	r1, r7
    871a:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    871c:	4630      	mov	r0, r6
    871e:	08c9      	lsrs	r1, r1, #3
    8720:	f00a f80c 	bl	1273c <alloc_chunk>
	if (c0 == 0) {
    8724:	4680      	mov	r8, r0
    8726:	2800      	cmp	r0, #0
    8728:	d0d3      	beq.n	86d2 <sys_heap_aligned_alloc+0x2a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    872a:	f109 0504 	add.w	r5, r9, #4
    872e:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    8732:	1e7b      	subs	r3, r7, #1
    8734:	4435      	add	r5, r6
    8736:	441d      	add	r5, r3
    8738:	427f      	negs	r7, r7
    873a:	403d      	ands	r5, r7
    873c:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    8740:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    8742:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    8744:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    8746:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    8748:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    874c:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    874e:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    8752:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    8756:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    875a:	d208      	bcs.n	876e <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
    875c:	4601      	mov	r1, r0
    875e:	463a      	mov	r2, r7
    8760:	4630      	mov	r0, r6
    8762:	f00a f838 	bl	127d6 <split_chunks>
		free_list_add(h, c0);
    8766:	4641      	mov	r1, r8
    8768:	4630      	mov	r0, r6
    876a:	f009 ff96 	bl	1269a <free_list_add>
	return c + chunk_size(h, c);
    876e:	4639      	mov	r1, r7
    8770:	4630      	mov	r0, r6
    8772:	f009 ff8d 	bl	12690 <chunk_size>
    8776:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    8778:	4284      	cmp	r4, r0
    877a:	d207      	bcs.n	878c <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
    877c:	4630      	mov	r0, r6
    877e:	4622      	mov	r2, r4
    8780:	f00a f829 	bl	127d6 <split_chunks>
		free_list_add(h, c_end);
    8784:	4621      	mov	r1, r4
    8786:	4630      	mov	r0, r6
    8788:	f009 ff87 	bl	1269a <free_list_add>
	void *cmem = &buf[c];
    878c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    8790:	8873      	ldrh	r3, [r6, #2]
    8792:	f043 0301 	orr.w	r3, r3, #1
    8796:	8073      	strh	r3, [r6, #2]
    8798:	e79c      	b.n	86d4 <sys_heap_aligned_alloc+0x2c>
    879a:	bf00      	nop
    879c:	000153f8 	.word	0x000153f8
    87a0:	0001530f 	.word	0x0001530f
    87a4:	00015341 	.word	0x00015341
    87a8:	00015413 	.word	0x00015413

000087ac <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    87ac:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    87b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    87b4:	d30e      	bcc.n	87d4 <sys_heap_init+0x28>
    87b6:	493c      	ldr	r1, [pc, #240]	; (88a8 <sys_heap_init+0xfc>)
    87b8:	f240 13eb 	movw	r3, #491	; 0x1eb
    87bc:	4a3b      	ldr	r2, [pc, #236]	; (88ac <sys_heap_init+0x100>)
    87be:	483c      	ldr	r0, [pc, #240]	; (88b0 <sys_heap_init+0x104>)
    87c0:	f00a f904 	bl	129cc <assert_print>
    87c4:	483b      	ldr	r0, [pc, #236]	; (88b4 <sys_heap_init+0x108>)
    87c6:	f00a f901 	bl	129cc <assert_print>
    87ca:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    87ce:	4837      	ldr	r0, [pc, #220]	; (88ac <sys_heap_init+0x100>)
    87d0:	f00a f8f5 	bl	129be <assert_post_action>
    87d4:	2a04      	cmp	r2, #4
    87d6:	d80c      	bhi.n	87f2 <sys_heap_init+0x46>
    87d8:	4937      	ldr	r1, [pc, #220]	; (88b8 <sys_heap_init+0x10c>)
    87da:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    87de:	4a33      	ldr	r2, [pc, #204]	; (88ac <sys_heap_init+0x100>)
    87e0:	4833      	ldr	r0, [pc, #204]	; (88b0 <sys_heap_init+0x104>)
    87e2:	f00a f8f3 	bl	129cc <assert_print>
    87e6:	4835      	ldr	r0, [pc, #212]	; (88bc <sys_heap_init+0x110>)
    87e8:	f00a f8f0 	bl	129cc <assert_print>
    87ec:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    87f0:	e7ed      	b.n	87ce <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
    87f2:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    87f4:	1dcd      	adds	r5, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    87f6:	188e      	adds	r6, r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    87f8:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    87fc:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    8800:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    8802:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    8804:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    8808:	d80c      	bhi.n	8824 <sys_heap_init+0x78>
    880a:	492d      	ldr	r1, [pc, #180]	; (88c0 <sys_heap_init+0x114>)
    880c:	f240 13fb 	movw	r3, #507	; 0x1fb
    8810:	4a26      	ldr	r2, [pc, #152]	; (88ac <sys_heap_init+0x100>)
    8812:	4827      	ldr	r0, [pc, #156]	; (88b0 <sys_heap_init+0x104>)
    8814:	f00a f8da 	bl	129cc <assert_print>
    8818:	4828      	ldr	r0, [pc, #160]	; (88bc <sys_heap_init+0x110>)
    881a:	f00a f8d7 	bl	129cc <assert_print>
    881e:	f240 11fb 	movw	r1, #507	; 0x1fb
    8822:	e7d4      	b.n	87ce <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    8824:	fab7 f487 	clz	r4, r7

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    8828:	f04f 0800 	mov.w	r8, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    882c:	f1c4 0220 	rsb	r2, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    8830:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
    8834:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    8836:	3407      	adds	r4, #7
    8838:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    883a:	1c63      	adds	r3, r4, #1
    883c:	42bb      	cmp	r3, r7
	heap->heap = h;
    883e:	6005      	str	r5, [r0, #0]
	h->end_chunk = heap_sz;
    8840:	60af      	str	r7, [r5, #8]
	h->avail_buckets = 0;
    8842:	f8c5 800c 	str.w	r8, [r5, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    8846:	d90c      	bls.n	8862 <sys_heap_init+0xb6>
    8848:	491e      	ldr	r1, [pc, #120]	; (88c4 <sys_heap_init+0x118>)
    884a:	f44f 7303 	mov.w	r3, #524	; 0x20c
    884e:	4a17      	ldr	r2, [pc, #92]	; (88ac <sys_heap_init+0x100>)
    8850:	4817      	ldr	r0, [pc, #92]	; (88b0 <sys_heap_init+0x104>)
    8852:	f00a f8bb 	bl	129cc <assert_print>
    8856:	4819      	ldr	r0, [pc, #100]	; (88bc <sys_heap_init+0x110>)
    8858:	f00a f8b8 	bl	129cc <assert_print>
    885c:	f44f 7103 	mov.w	r1, #524	; 0x20c
    8860:	e7b5      	b.n	87ce <sys_heap_init+0x22>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    8862:	4641      	mov	r1, r8
    8864:	0092      	lsls	r2, r2, #2
    8866:	f105 0010 	add.w	r0, r5, #16
    886a:	f00b fe8e 	bl	1458a <memset>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    886e:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    8870:	f043 0301 	orr.w	r3, r3, #1
    8874:	806b      	strh	r3, [r5, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    8876:	1b3b      	subs	r3, r7, r4
		((uint16_t *)cmem)[f] = val;
    8878:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    887c:	0059      	lsls	r1, r3, #1
		((uint16_t *)cmem)[f] = val;
    887e:	f8a5 8000 	strh.w	r8, [r5]
    8882:	8051      	strh	r1, [r2, #2]
    8884:	19aa      	adds	r2, r5, r6
    8886:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
    888a:	f8a2 8002 	strh.w	r8, [r2, #2]
    888e:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
    8890:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    8894:	885a      	ldrh	r2, [r3, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    8896:	4621      	mov	r1, r4
    8898:	f042 0201 	orr.w	r2, r2, #1
    889c:	805a      	strh	r2, [r3, #2]
    889e:	4628      	mov	r0, r5
}
    88a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    88a4:	f009 bef9 	b.w	1269a <free_list_add>
    88a8:	00015430 	.word	0x00015430
    88ac:	0001530f 	.word	0x0001530f
    88b0:	00015341 	.word	0x00015341
    88b4:	00015446 	.word	0x00015446
    88b8:	0001545d 	.word	0x0001545d
    88bc:	0001547e 	.word	0x0001547e
    88c0:	00015497 	.word	0x00015497
    88c4:	000154c0 	.word	0x000154c0

000088c8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    88c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88cc:	4604      	mov	r4, r0
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    88ce:	8ba3      	ldrh	r3, [r4, #28]
{
    88d0:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    88d2:	0719      	lsls	r1, r3, #28
{
    88d4:	4615      	mov	r5, r2
	if (processing) {
    88d6:	d412      	bmi.n	88fe <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    88d8:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    88da:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    88de:	d164      	bne.n	89aa <process_event+0xe2>
			evt = process_recheck(mgr);
    88e0:	4620      	mov	r0, r4
    88e2:	f009 ffec 	bl	128be <process_recheck>
		}

		if (evt == EVT_NOP) {
    88e6:	b188      	cbz	r0, 890c <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    88e8:	3801      	subs	r0, #1
    88ea:	2804      	cmp	r0, #4
    88ec:	f200 8134 	bhi.w	8b58 <process_event+0x290>
    88f0:	e8df f010 	tbh	[pc, r0, lsl #1]
    88f4:	0132005b 	.word	0x0132005b
    88f8:	00d10081 	.word	0x00d10081
    88fc:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
    88fe:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    8900:	bf0c      	ite	eq
    8902:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8906:	f043 0120 	orrne.w	r1, r3, #32
    890a:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    890c:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    890e:	4620      	mov	r0, r4
    8910:	f006 ffc4 	bl	f89c <z_spin_unlock_valid>
    8914:	2800      	cmp	r0, #0
    8916:	f040 819b 	bne.w	8c50 <process_event+0x388>
    891a:	4998      	ldr	r1, [pc, #608]	; (8b7c <process_event+0x2b4>)
    891c:	23c2      	movs	r3, #194	; 0xc2
    891e:	4a98      	ldr	r2, [pc, #608]	; (8b80 <process_event+0x2b8>)
    8920:	4898      	ldr	r0, [pc, #608]	; (8b84 <process_event+0x2bc>)
    8922:	f00a f853 	bl	129cc <assert_print>
    8926:	4621      	mov	r1, r4
    8928:	e0b0      	b.n	8a8c <process_event+0x1c4>
    892a:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    892e:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    8930:	2801      	cmp	r0, #1
    8932:	d81e      	bhi.n	8972 <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    8934:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    8936:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    8938:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    893a:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    893e:	d114      	bne.n	896a <process_event+0xa2>
		*clients = mgr->clients;
    8940:	463a      	mov	r2, r7
    8942:	e003      	b.n	894c <process_event+0x84>
				mgr->refs += 1U;
    8944:	8be0      	ldrh	r0, [r4, #30]
    8946:	3001      	adds	r0, #1
    8948:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    894a:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    894c:	2a00      	cmp	r2, #0
    894e:	d1f9      	bne.n	8944 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8950:	f023 0307 	bic.w	r3, r3, #7
    8954:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    8958:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    895a:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    895c:	f009 ffaf 	bl	128be <process_recheck>
    8960:	b390      	cbz	r0, 89c8 <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8962:	f042 0220 	orr.w	r2, r2, #32
    8966:	83a2      	strh	r2, [r4, #28]
    8968:	e02e      	b.n	89c8 <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    896a:	f023 0307 	bic.w	r3, r3, #7
    896e:	b29a      	uxth	r2, r3
}
    8970:	e7f2      	b.n	8958 <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
    8972:	2a04      	cmp	r2, #4
    8974:	d133      	bne.n	89de <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8976:	f023 0307 	bic.w	r3, r3, #7
    897a:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    897c:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    897e:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    8980:	f009 ff9d 	bl	128be <process_recheck>
    8984:	b110      	cbz	r0, 898c <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8986:	f042 0220 	orr.w	r2, r2, #32
    898a:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    898c:	8ba3      	ldrh	r3, [r4, #28]
    898e:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    8992:	4589      	cmp	r9, r1
    8994:	f040 80ea 	bne.w	8b6c <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    8998:	8ba1      	ldrh	r1, [r4, #28]
    899a:	06ca      	lsls	r2, r1, #27
    899c:	f140 814f 	bpl.w	8c3e <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    89a0:	f021 0310 	bic.w	r3, r1, #16
    89a4:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    89a6:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    89aa:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    89ae:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    89b0:	f1b8 0f00 	cmp.w	r8, #0
    89b4:	dab9      	bge.n	892a <process_event+0x62>
	list->head = NULL;
    89b6:	2200      	movs	r2, #0
		*clients = mgr->clients;
    89b8:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    89ba:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    89be:	e9c4 2200 	strd	r2, r2, [r4]
    89c2:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    89c6:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    89c8:	8ba3      	ldrh	r3, [r4, #28]
    89ca:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    89ce:	4589      	cmp	r9, r1
    89d0:	f040 80cd 	bne.w	8b6e <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
    89d4:	2f00      	cmp	r7, #0
    89d6:	d0df      	beq.n	8998 <process_event+0xd0>
    89d8:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    89da:	46b2      	mov	sl, r6
    89dc:	e044      	b.n	8a68 <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
    89de:	496a      	ldr	r1, [pc, #424]	; (8b88 <process_event+0x2c0>)
    89e0:	f240 131b 	movw	r3, #283	; 0x11b
    89e4:	4a69      	ldr	r2, [pc, #420]	; (8b8c <process_event+0x2c4>)
    89e6:	4867      	ldr	r0, [pc, #412]	; (8b84 <process_event+0x2bc>)
    89e8:	f009 fff0 	bl	129cc <assert_print>
    89ec:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    89f0:	4866      	ldr	r0, [pc, #408]	; (8b8c <process_event+0x2c4>)
    89f2:	f009 ffe4 	bl	129be <assert_post_action>
    89f6:	b149      	cbz	r1, 8a0c <process_event+0x144>
    89f8:	4965      	ldr	r1, [pc, #404]	; (8b90 <process_event+0x2c8>)
    89fa:	f44f 73ab 	mov.w	r3, #342	; 0x156
    89fe:	4a63      	ldr	r2, [pc, #396]	; (8b8c <process_event+0x2c4>)
    8a00:	4860      	ldr	r0, [pc, #384]	; (8b84 <process_event+0x2bc>)
    8a02:	f009 ffe3 	bl	129cc <assert_print>
    8a06:	f44f 71ab 	mov.w	r1, #342	; 0x156
    8a0a:	e7f1      	b.n	89f0 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    8a0c:	6823      	ldr	r3, [r4, #0]
    8a0e:	b94b      	cbnz	r3, 8a24 <process_event+0x15c>
    8a10:	4960      	ldr	r1, [pc, #384]	; (8b94 <process_event+0x2cc>)
    8a12:	f240 1357 	movw	r3, #343	; 0x157
    8a16:	4a5d      	ldr	r2, [pc, #372]	; (8b8c <process_event+0x2c4>)
    8a18:	485a      	ldr	r0, [pc, #360]	; (8b84 <process_event+0x2bc>)
    8a1a:	f009 ffd7 	bl	129cc <assert_print>
    8a1e:	f240 1157 	movw	r1, #343	; 0x157
    8a22:	e7e5      	b.n	89f0 <process_event+0x128>
			transit = mgr->transitions->start;
    8a24:	6923      	ldr	r3, [r4, #16]
    8a26:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    8a28:	b94e      	cbnz	r6, 8a3e <process_event+0x176>
    8a2a:	495b      	ldr	r1, [pc, #364]	; (8b98 <process_event+0x2d0>)
    8a2c:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    8a30:	4a56      	ldr	r2, [pc, #344]	; (8b8c <process_event+0x2c4>)
    8a32:	4854      	ldr	r0, [pc, #336]	; (8b84 <process_event+0x2bc>)
    8a34:	f009 ffca 	bl	129cc <assert_print>
    8a38:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    8a3c:	e7d8      	b.n	89f0 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    8a3e:	460f      	mov	r7, r1
		res = 0;
    8a40:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8a42:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8a46:	8ba3      	ldrh	r3, [r4, #28]
    8a48:	f023 0307 	bic.w	r3, r3, #7
    8a4c:	f043 0306 	orr.w	r3, r3, #6
    8a50:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    8a52:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    8a54:	68a2      	ldr	r2, [r4, #8]
    8a56:	2a00      	cmp	r2, #0
    8a58:	f040 808b 	bne.w	8b72 <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
    8a5c:	2f00      	cmp	r7, #0
    8a5e:	f040 808b 	bne.w	8b78 <process_event+0x2b0>
		    || (transit != NULL)) {
    8a62:	2e00      	cmp	r6, #0
    8a64:	d098      	beq.n	8998 <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8a66:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    8a68:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    8a6c:	f104 0b14 	add.w	fp, r4, #20
    8a70:	4658      	mov	r0, fp
			mgr->flags = flags;
    8a72:	83a3      	strh	r3, [r4, #28]
    8a74:	f006 ff12 	bl	f89c <z_spin_unlock_valid>
    8a78:	2800      	cmp	r0, #0
    8a7a:	f040 8097 	bne.w	8bac <process_event+0x2e4>
    8a7e:	493f      	ldr	r1, [pc, #252]	; (8b7c <process_event+0x2b4>)
    8a80:	23c2      	movs	r3, #194	; 0xc2
    8a82:	4a3f      	ldr	r2, [pc, #252]	; (8b80 <process_event+0x2b8>)
    8a84:	483f      	ldr	r0, [pc, #252]	; (8b84 <process_event+0x2bc>)
    8a86:	f009 ffa1 	bl	129cc <assert_print>
    8a8a:	4659      	mov	r1, fp
    8a8c:	4843      	ldr	r0, [pc, #268]	; (8b9c <process_event+0x2d4>)
    8a8e:	f009 ff9d 	bl	129cc <assert_print>
    8a92:	21c2      	movs	r1, #194	; 0xc2
    8a94:	e0ae      	b.n	8bf4 <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    8a96:	2902      	cmp	r1, #2
    8a98:	d009      	beq.n	8aae <process_event+0x1e6>
    8a9a:	4941      	ldr	r1, [pc, #260]	; (8ba0 <process_event+0x2d8>)
    8a9c:	f240 135d 	movw	r3, #349	; 0x15d
    8aa0:	4a3a      	ldr	r2, [pc, #232]	; (8b8c <process_event+0x2c4>)
    8aa2:	4838      	ldr	r0, [pc, #224]	; (8b84 <process_event+0x2bc>)
    8aa4:	f009 ff92 	bl	129cc <assert_print>
    8aa8:	f240 115d 	movw	r1, #349	; 0x15d
    8aac:	e7a0      	b.n	89f0 <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
    8aae:	8be7      	ldrh	r7, [r4, #30]
    8ab0:	b14f      	cbz	r7, 8ac6 <process_event+0x1fe>
    8ab2:	493c      	ldr	r1, [pc, #240]	; (8ba4 <process_event+0x2dc>)
    8ab4:	f44f 73af 	mov.w	r3, #350	; 0x15e
    8ab8:	4a34      	ldr	r2, [pc, #208]	; (8b8c <process_event+0x2c4>)
    8aba:	4832      	ldr	r0, [pc, #200]	; (8b84 <process_event+0x2bc>)
    8abc:	f009 ff86 	bl	129cc <assert_print>
    8ac0:	f44f 71af 	mov.w	r1, #350	; 0x15e
    8ac4:	e794      	b.n	89f0 <process_event+0x128>
			transit = mgr->transitions->stop;
    8ac6:	6923      	ldr	r3, [r4, #16]
    8ac8:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    8aca:	b94e      	cbnz	r6, 8ae0 <process_event+0x218>
    8acc:	4932      	ldr	r1, [pc, #200]	; (8b98 <process_event+0x2d0>)
    8ace:	f240 1361 	movw	r3, #353	; 0x161
    8ad2:	4a2e      	ldr	r2, [pc, #184]	; (8b8c <process_event+0x2c4>)
    8ad4:	482b      	ldr	r0, [pc, #172]	; (8b84 <process_event+0x2bc>)
    8ad6:	f009 ff79 	bl	129cc <assert_print>
    8ada:	f240 1161 	movw	r1, #353	; 0x161
    8ade:	e787      	b.n	89f0 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8ae0:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    8ae2:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8ae4:	f023 0307 	bic.w	r3, r3, #7
    8ae8:	f043 0304 	orr.w	r3, r3, #4
    8aec:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8aee:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    8af2:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8af4:	e7ae      	b.n	8a54 <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    8af6:	2901      	cmp	r1, #1
    8af8:	d009      	beq.n	8b0e <process_event+0x246>
    8afa:	492b      	ldr	r1, [pc, #172]	; (8ba8 <process_event+0x2e0>)
    8afc:	f44f 73b2 	mov.w	r3, #356	; 0x164
    8b00:	4a22      	ldr	r2, [pc, #136]	; (8b8c <process_event+0x2c4>)
    8b02:	4820      	ldr	r0, [pc, #128]	; (8b84 <process_event+0x2bc>)
    8b04:	f009 ff62 	bl	129cc <assert_print>
    8b08:	f44f 71b2 	mov.w	r1, #356	; 0x164
    8b0c:	e770      	b.n	89f0 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    8b0e:	6823      	ldr	r3, [r4, #0]
    8b10:	b94b      	cbnz	r3, 8b26 <process_event+0x25e>
    8b12:	4920      	ldr	r1, [pc, #128]	; (8b94 <process_event+0x2cc>)
    8b14:	f240 1365 	movw	r3, #357	; 0x165
    8b18:	4a1c      	ldr	r2, [pc, #112]	; (8b8c <process_event+0x2c4>)
    8b1a:	481a      	ldr	r0, [pc, #104]	; (8b84 <process_event+0x2bc>)
    8b1c:	f009 ff56 	bl	129cc <assert_print>
    8b20:	f240 1165 	movw	r1, #357	; 0x165
    8b24:	e764      	b.n	89f0 <process_event+0x128>
			transit = mgr->transitions->reset;
    8b26:	6923      	ldr	r3, [r4, #16]
    8b28:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    8b2a:	b94e      	cbnz	r6, 8b40 <process_event+0x278>
    8b2c:	491a      	ldr	r1, [pc, #104]	; (8b98 <process_event+0x2d0>)
    8b2e:	f44f 73b4 	mov.w	r3, #360	; 0x168
    8b32:	4a16      	ldr	r2, [pc, #88]	; (8b8c <process_event+0x2c4>)
    8b34:	4813      	ldr	r0, [pc, #76]	; (8b84 <process_event+0x2bc>)
    8b36:	f009 ff49 	bl	129cc <assert_print>
    8b3a:	f44f 71b4 	mov.w	r1, #360	; 0x168
    8b3e:	e757      	b.n	89f0 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    8b40:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8b42:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    8b44:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8b46:	f023 0307 	bic.w	r3, r3, #7
    8b4a:	f043 0305 	orr.w	r3, r3, #5
    8b4e:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8b50:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    8b54:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8b56:	e77d      	b.n	8a54 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    8b58:	490b      	ldr	r1, [pc, #44]	; (8b88 <process_event+0x2c0>)
    8b5a:	f240 136b 	movw	r3, #363	; 0x16b
    8b5e:	4a0b      	ldr	r2, [pc, #44]	; (8b8c <process_event+0x2c4>)
    8b60:	4808      	ldr	r0, [pc, #32]	; (8b84 <process_event+0x2bc>)
    8b62:	f009 ff33 	bl	129cc <assert_print>
    8b66:	f240 116b 	movw	r1, #363	; 0x16b
    8b6a:	e741      	b.n	89f0 <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
    8b6c:	2700      	movs	r7, #0
    8b6e:	2600      	movs	r6, #0
    8b70:	e770      	b.n	8a54 <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8b72:	f04f 0a01 	mov.w	sl, #1
    8b76:	e777      	b.n	8a68 <process_event+0x1a0>
    8b78:	4692      	mov	sl, r2
    8b7a:	e775      	b.n	8a68 <process_event+0x1a0>
    8b7c:	000155bb 	.word	0x000155bb
    8b80:	0001558e 	.word	0x0001558e
    8b84:	00015341 	.word	0x00015341
    8b88:	00016f1f 	.word	0x00016f1f
    8b8c:	000154eb 	.word	0x000154eb
    8b90:	0001550d 	.word	0x0001550d
    8b94:	00015519 	.word	0x00015519
    8b98:	0001553c 	.word	0x0001553c
    8b9c:	000155d2 	.word	0x000155d2
    8ba0:	00015553 	.word	0x00015553
    8ba4:	00015569 	.word	0x00015569
    8ba8:	00015578 	.word	0x00015578
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    8bac:	f385 8811 	msr	BASEPRI, r5
    8bb0:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    8bb4:	f1ba 0f00 	cmp.w	sl, #0
    8bb8:	d11e      	bne.n	8bf8 <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
    8bba:	2f00      	cmp	r7, #0
    8bbc:	d12f      	bne.n	8c1e <process_event+0x356>
			if (transit != NULL) {
    8bbe:	b116      	cbz	r6, 8bc6 <process_event+0x2fe>
				transit(mgr, transition_complete);
    8bc0:	4620      	mov	r0, r4
    8bc2:	4926      	ldr	r1, [pc, #152]	; (8c5c <process_event+0x394>)
    8bc4:	47b0      	blx	r6
	__asm__ volatile(
    8bc6:	f04f 0320 	mov.w	r3, #32
    8bca:	f3ef 8511 	mrs	r5, BASEPRI
    8bce:	f383 8812 	msr	BASEPRI_MAX, r3
    8bd2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8bd6:	4658      	mov	r0, fp
    8bd8:	f006 fe52 	bl	f880 <z_spin_lock_valid>
    8bdc:	bb38      	cbnz	r0, 8c2e <process_event+0x366>
    8bde:	2394      	movs	r3, #148	; 0x94
    8be0:	4a1f      	ldr	r2, [pc, #124]	; (8c60 <process_event+0x398>)
    8be2:	4920      	ldr	r1, [pc, #128]	; (8c64 <process_event+0x39c>)
    8be4:	4820      	ldr	r0, [pc, #128]	; (8c68 <process_event+0x3a0>)
    8be6:	f009 fef1 	bl	129cc <assert_print>
    8bea:	4659      	mov	r1, fp
    8bec:	481f      	ldr	r0, [pc, #124]	; (8c6c <process_event+0x3a4>)
    8bee:	f009 feed 	bl	129cc <assert_print>
    8bf2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8bf4:	481a      	ldr	r0, [pc, #104]	; (8c60 <process_event+0x398>)
    8bf6:	e6fc      	b.n	89f2 <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    8bf8:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    8bfa:	2900      	cmp	r1, #0
    8bfc:	d0dd      	beq.n	8bba <process_event+0x2f2>
	return node->next;
    8bfe:	680d      	ldr	r5, [r1, #0]
    8c00:	2900      	cmp	r1, #0
    8c02:	d0da      	beq.n	8bba <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
    8c04:	4643      	mov	r3, r8
    8c06:	464a      	mov	r2, r9
    8c08:	4620      	mov	r0, r4
    8c0a:	f8d1 a004 	ldr.w	sl, [r1, #4]
    8c0e:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    8c10:	b11d      	cbz	r5, 8c1a <process_event+0x352>
    8c12:	682b      	ldr	r3, [r5, #0]
    8c14:	4629      	mov	r1, r5
    8c16:	461d      	mov	r5, r3
    8c18:	e7f2      	b.n	8c00 <process_event+0x338>
    8c1a:	462b      	mov	r3, r5
    8c1c:	e7fa      	b.n	8c14 <process_event+0x34c>
    8c1e:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    8c20:	4643      	mov	r3, r8
    8c22:	464a      	mov	r2, r9
    8c24:	4620      	mov	r0, r4
    8c26:	683f      	ldr	r7, [r7, #0]
    8c28:	f009 fe75 	bl	12916 <notify_one>
    8c2c:	e7c5      	b.n	8bba <process_event+0x2f2>
	z_spin_lock_set_owner(l);
    8c2e:	4658      	mov	r0, fp
    8c30:	f006 fe42 	bl	f8b8 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    8c34:	8ba3      	ldrh	r3, [r4, #28]
    8c36:	f023 0308 	bic.w	r3, r3, #8
    8c3a:	83a3      	strh	r3, [r4, #28]
    8c3c:	e6ac      	b.n	8998 <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    8c3e:	068b      	lsls	r3, r1, #26
    8c40:	f57f ae64 	bpl.w	890c <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    8c44:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    8c48:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    8c4a:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    8c4e:	e647      	b.n	88e0 <process_event+0x18>
	__asm__ volatile(
    8c50:	f385 8811 	msr	BASEPRI, r5
    8c54:	f3bf 8f6f 	isb	sy
}
    8c58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c5c:	00008c71 	.word	0x00008c71
    8c60:	0001558e 	.word	0x0001558e
    8c64:	000155e7 	.word	0x000155e7
    8c68:	00015341 	.word	0x00015341
    8c6c:	000155fc 	.word	0x000155fc

00008c70 <transition_complete>:
{
    8c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c72:	4604      	mov	r4, r0
    8c74:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    8c76:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    8c7a:	f04f 0320 	mov.w	r3, #32
    8c7e:	f3ef 8711 	mrs	r7, BASEPRI
    8c82:	f383 8812 	msr	BASEPRI_MAX, r3
    8c86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8c8a:	4630      	mov	r0, r6
    8c8c:	f006 fdf8 	bl	f880 <z_spin_lock_valid>
    8c90:	b968      	cbnz	r0, 8cae <transition_complete+0x3e>
    8c92:	2394      	movs	r3, #148	; 0x94
    8c94:	4a0b      	ldr	r2, [pc, #44]	; (8cc4 <transition_complete+0x54>)
    8c96:	490c      	ldr	r1, [pc, #48]	; (8cc8 <transition_complete+0x58>)
    8c98:	480c      	ldr	r0, [pc, #48]	; (8ccc <transition_complete+0x5c>)
    8c9a:	f009 fe97 	bl	129cc <assert_print>
    8c9e:	4631      	mov	r1, r6
    8ca0:	480b      	ldr	r0, [pc, #44]	; (8cd0 <transition_complete+0x60>)
    8ca2:	f009 fe93 	bl	129cc <assert_print>
    8ca6:	2194      	movs	r1, #148	; 0x94
    8ca8:	4806      	ldr	r0, [pc, #24]	; (8cc4 <transition_complete+0x54>)
    8caa:	f009 fe88 	bl	129be <assert_post_action>
	z_spin_lock_set_owner(l);
    8cae:	4630      	mov	r0, r6
    8cb0:	f006 fe02 	bl	f8b8 <z_spin_lock_set_owner>
	mgr->last_res = res;
    8cb4:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    8cb6:	463a      	mov	r2, r7
    8cb8:	4620      	mov	r0, r4
}
    8cba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    8cbe:	2101      	movs	r1, #1
    8cc0:	f7ff be02 	b.w	88c8 <process_event>
    8cc4:	0001558e 	.word	0x0001558e
    8cc8:	000155e7 	.word	0x000155e7
    8ccc:	00015341 	.word	0x00015341
    8cd0:	000155fc 	.word	0x000155fc

00008cd4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    8cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8cd8:	4604      	mov	r4, r0
    8cda:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    8cdc:	f009 fe0b 	bl	128f6 <validate_args>

	if (rv < 0) {
    8ce0:	1e05      	subs	r5, r0, #0
    8ce2:	db67      	blt.n	8db4 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    8ce4:	f104 0914 	add.w	r9, r4, #20
    8ce8:	f04f 0320 	mov.w	r3, #32
    8cec:	f3ef 8a11 	mrs	sl, BASEPRI
    8cf0:	f383 8812 	msr	BASEPRI_MAX, r3
    8cf4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8cf8:	4648      	mov	r0, r9
    8cfa:	f006 fdc1 	bl	f880 <z_spin_lock_valid>
    8cfe:	4680      	mov	r8, r0
    8d00:	b960      	cbnz	r0, 8d1c <onoff_request+0x48>
    8d02:	2394      	movs	r3, #148	; 0x94
    8d04:	4a37      	ldr	r2, [pc, #220]	; (8de4 <onoff_request+0x110>)
    8d06:	4938      	ldr	r1, [pc, #224]	; (8de8 <onoff_request+0x114>)
    8d08:	4838      	ldr	r0, [pc, #224]	; (8dec <onoff_request+0x118>)
    8d0a:	f009 fe5f 	bl	129cc <assert_print>
    8d0e:	4649      	mov	r1, r9
    8d10:	4837      	ldr	r0, [pc, #220]	; (8df0 <onoff_request+0x11c>)
    8d12:	f009 fe5b 	bl	129cc <assert_print>
    8d16:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8d18:	4832      	ldr	r0, [pc, #200]	; (8de4 <onoff_request+0x110>)
    8d1a:	e040      	b.n	8d9e <onoff_request+0xca>
	z_spin_lock_set_owner(l);
    8d1c:	4648      	mov	r0, r9
    8d1e:	f006 fdcb 	bl	f8b8 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    8d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8d26:	8be3      	ldrh	r3, [r4, #30]
    8d28:	8ba6      	ldrh	r6, [r4, #28]
    8d2a:	4293      	cmp	r3, r2
    8d2c:	f006 0607 	and.w	r6, r6, #7
    8d30:	d043      	beq.n	8dba <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    8d32:	2e02      	cmp	r6, #2
    8d34:	d113      	bne.n	8d5e <onoff_request+0x8a>
	rv = state;
    8d36:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    8d38:	3301      	adds	r3, #1
    8d3a:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8d3c:	4648      	mov	r0, r9
    8d3e:	f006 fdad 	bl	f89c <z_spin_unlock_valid>
    8d42:	2800      	cmp	r0, #0
    8d44:	d13f      	bne.n	8dc6 <onoff_request+0xf2>
    8d46:	23c2      	movs	r3, #194	; 0xc2
    8d48:	4a26      	ldr	r2, [pc, #152]	; (8de4 <onoff_request+0x110>)
    8d4a:	492a      	ldr	r1, [pc, #168]	; (8df4 <onoff_request+0x120>)
    8d4c:	4827      	ldr	r0, [pc, #156]	; (8dec <onoff_request+0x118>)
    8d4e:	f009 fe3d 	bl	129cc <assert_print>
    8d52:	4649      	mov	r1, r9
    8d54:	4828      	ldr	r0, [pc, #160]	; (8df8 <onoff_request+0x124>)
    8d56:	f009 fe39 	bl	129cc <assert_print>
    8d5a:	21c2      	movs	r1, #194	; 0xc2
    8d5c:	e7dc      	b.n	8d18 <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
    8d5e:	2e06      	cmp	r6, #6
    8d60:	d813      	bhi.n	8d8a <onoff_request+0xb6>
    8d62:	e8df f006 	tbb	[pc, r6]
    8d66:	2d09      	.short	0x2d09
    8d68:	04091212 	.word	0x04091212
    8d6c:	09          	.byte	0x09
    8d6d:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    8d6e:	f06f 0585 	mvn.w	r5, #133	; 0x85
    8d72:	f04f 0800 	mov.w	r8, #0
    8d76:	e7e1      	b.n	8d3c <onoff_request+0x68>
	parent->next = child;
    8d78:	2300      	movs	r3, #0
    8d7a:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    8d7c:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    8d7e:	b983      	cbnz	r3, 8da2 <onoff_request+0xce>
	list->head = node;
    8d80:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    8d84:	b186      	cbz	r6, 8da8 <onoff_request+0xd4>
	rv = state;
    8d86:	4635      	mov	r5, r6
    8d88:	e7f3      	b.n	8d72 <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    8d8a:	491c      	ldr	r1, [pc, #112]	; (8dfc <onoff_request+0x128>)
    8d8c:	4817      	ldr	r0, [pc, #92]	; (8dec <onoff_request+0x118>)
    8d8e:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    8d92:	4a1b      	ldr	r2, [pc, #108]	; (8e00 <onoff_request+0x12c>)
    8d94:	f009 fe1a 	bl	129cc <assert_print>
    8d98:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    8d9c:	4818      	ldr	r0, [pc, #96]	; (8e00 <onoff_request+0x12c>)
    8d9e:	f009 fe0e 	bl	129be <assert_post_action>
	parent->next = child;
    8da2:	601f      	str	r7, [r3, #0]
	list->tail = node;
    8da4:	6067      	str	r7, [r4, #4]
}
    8da6:	e7ed      	b.n	8d84 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
    8da8:	4652      	mov	r2, sl
    8daa:	2102      	movs	r1, #2
    8dac:	4620      	mov	r0, r4
    8dae:	f7ff fd8b 	bl	88c8 <process_event>
    8db2:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    8db4:	4628      	mov	r0, r5
    8db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    8dba:	f06f 050a 	mvn.w	r5, #10
    8dbe:	e7d8      	b.n	8d72 <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
    8dc0:	f06f 0504 	mvn.w	r5, #4
    8dc4:	e7d5      	b.n	8d72 <onoff_request+0x9e>
	__asm__ volatile(
    8dc6:	f38a 8811 	msr	BASEPRI, sl
    8dca:	f3bf 8f6f 	isb	sy
		if (notify) {
    8dce:	f1b8 0f00 	cmp.w	r8, #0
    8dd2:	d0ef      	beq.n	8db4 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
    8dd4:	2300      	movs	r3, #0
    8dd6:	4632      	mov	r2, r6
    8dd8:	4639      	mov	r1, r7
    8dda:	4620      	mov	r0, r4
    8ddc:	f009 fd9b 	bl	12916 <notify_one>
    8de0:	e7e8      	b.n	8db4 <onoff_request+0xe0>
    8de2:	bf00      	nop
    8de4:	0001558e 	.word	0x0001558e
    8de8:	000155e7 	.word	0x000155e7
    8dec:	00015341 	.word	0x00015341
    8df0:	000155fc 	.word	0x000155fc
    8df4:	000155bb 	.word	0x000155bb
    8df8:	000155d2 	.word	0x000155d2
    8dfc:	00015578 	.word	0x00015578
    8e00:	000154eb 	.word	0x000154eb

00008e04 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    8e04:	b508      	push	{r3, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8e06:	6842      	ldr	r2, [r0, #4]
    8e08:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    8e0a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    8e0e:	2a02      	cmp	r2, #2
	notify->result = res;
    8e10:	6081      	str	r1, [r0, #8]
	switch (method) {
    8e12:	d00a      	beq.n	8e2a <sys_notify_finalize+0x26>
    8e14:	2a03      	cmp	r2, #3
    8e16:	f04f 0100 	mov.w	r1, #0
    8e1a:	d003      	beq.n	8e24 <sys_notify_finalize+0x20>
    8e1c:	2a01      	cmp	r2, #1
    8e1e:	d10a      	bne.n	8e36 <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    8e20:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    8e22:	e006      	b.n	8e32 <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    8e24:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    8e26:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    8e28:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    8e2a:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    8e2c:	2200      	movs	r2, #0
    8e2e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    8e30:	b958      	cbnz	r0, 8e4a <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
    8e32:	2000      	movs	r0, #0
    8e34:	e7f8      	b.n	8e28 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    8e36:	4906      	ldr	r1, [pc, #24]	; (8e50 <sys_notify_finalize+0x4c>)
    8e38:	4806      	ldr	r0, [pc, #24]	; (8e54 <sys_notify_finalize+0x50>)
    8e3a:	2345      	movs	r3, #69	; 0x45
    8e3c:	4a06      	ldr	r2, [pc, #24]	; (8e58 <sys_notify_finalize+0x54>)
    8e3e:	f009 fdc5 	bl	129cc <assert_print>
    8e42:	2145      	movs	r1, #69	; 0x45
    8e44:	4804      	ldr	r0, [pc, #16]	; (8e58 <sys_notify_finalize+0x54>)
    8e46:	f009 fdba 	bl	129be <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    8e4a:	f008 fefb 	bl	11c44 <z_impl_k_poll_signal_raise>
    8e4e:	e7f0      	b.n	8e32 <sys_notify_finalize+0x2e>
    8e50:	00016f1f 	.word	0x00016f1f
    8e54:	00015341 	.word	0x00015341
    8e58:	00015614 	.word	0x00015614

00008e5c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    8e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e5e:	4602      	mov	r2, r0
    8e60:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp) != 0) {
		val = 10U * val + *sp++ - '0';
    8e62:	270a      	movs	r7, #10
	size_t val = 0;
    8e64:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp) != 0) {
    8e66:	4e07      	ldr	r6, [pc, #28]	; (8e84 <extract_decimal+0x28>)
    8e68:	460b      	mov	r3, r1
    8e6a:	781c      	ldrb	r4, [r3, #0]
    8e6c:	3101      	adds	r1, #1
    8e6e:	5d35      	ldrb	r5, [r6, r4]
    8e70:	076d      	lsls	r5, r5, #29
    8e72:	d401      	bmi.n	8e78 <extract_decimal+0x1c>
	}
	*str = sp;
    8e74:	6013      	str	r3, [r2, #0]
	return val;
}
    8e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    8e78:	fb07 4300 	mla	r3, r7, r0, r4
    8e7c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    8e80:	e7f2      	b.n	8e68 <extract_decimal+0xc>
    8e82:	bf00      	nop
    8e84:	00016f86 	.word	0x00016f86

00008e88 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    8e88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e8c:	4615      	mov	r5, r2
    8e8e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    8e90:	78d3      	ldrb	r3, [r2, #3]
    8e92:	4a22      	ldr	r2, [pc, #136]	; (8f1c <encode_uint+0x94>)
	switch (specifier) {
    8e94:	2b6f      	cmp	r3, #111	; 0x6f
    8e96:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    8e9a:	4680      	mov	r8, r0
    8e9c:	460f      	mov	r7, r1
    8e9e:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    8ea2:	d029      	beq.n	8ef8 <encode_uint+0x70>
    8ea4:	d824      	bhi.n	8ef0 <encode_uint+0x68>
		return 10;
    8ea6:	2b58      	cmp	r3, #88	; 0x58
    8ea8:	bf0c      	ite	eq
    8eaa:	2610      	moveq	r6, #16
    8eac:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    8eae:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    8eb2:	4632      	mov	r2, r6
    8eb4:	2300      	movs	r3, #0
    8eb6:	4640      	mov	r0, r8
    8eb8:	4639      	mov	r1, r7
    8eba:	f7ff f943 	bl	8144 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    8ebe:	2a09      	cmp	r2, #9
    8ec0:	b2d4      	uxtb	r4, r2
    8ec2:	d81e      	bhi.n	8f02 <encode_uint+0x7a>
    8ec4:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    8ec6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8ec8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    8eca:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8ece:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    8ed2:	d301      	bcc.n	8ed8 <encode_uint+0x50>
    8ed4:	45d1      	cmp	r9, sl
    8ed6:	d811      	bhi.n	8efc <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    8ed8:	782b      	ldrb	r3, [r5, #0]
    8eda:	069b      	lsls	r3, r3, #26
    8edc:	d505      	bpl.n	8eea <encode_uint+0x62>
		if (radix == 8) {
    8ede:	2e08      	cmp	r6, #8
    8ee0:	d115      	bne.n	8f0e <encode_uint+0x86>
			conv->altform_0 = true;
    8ee2:	78ab      	ldrb	r3, [r5, #2]
    8ee4:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    8ee8:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    8eea:	4648      	mov	r0, r9
    8eec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    8ef0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    8ef4:	2b70      	cmp	r3, #112	; 0x70
    8ef6:	e7d7      	b.n	8ea8 <encode_uint+0x20>
	switch (specifier) {
    8ef8:	2608      	movs	r6, #8
    8efa:	e7d8      	b.n	8eae <encode_uint+0x26>
		value /= radix;
    8efc:	4680      	mov	r8, r0
    8efe:	460f      	mov	r7, r1
    8f00:	e7d7      	b.n	8eb2 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8f02:	f1bb 0f01 	cmp.w	fp, #1
    8f06:	bf0c      	ite	eq
    8f08:	3437      	addeq	r4, #55	; 0x37
    8f0a:	3457      	addne	r4, #87	; 0x57
    8f0c:	e7db      	b.n	8ec6 <encode_uint+0x3e>
		} else if (radix == 16) {
    8f0e:	2e10      	cmp	r6, #16
    8f10:	d1eb      	bne.n	8eea <encode_uint+0x62>
			conv->altform_0c = true;
    8f12:	78ab      	ldrb	r3, [r5, #2]
    8f14:	f043 0310 	orr.w	r3, r3, #16
    8f18:	e7e6      	b.n	8ee8 <encode_uint+0x60>
    8f1a:	bf00      	nop
    8f1c:	00016f86 	.word	0x00016f86

00008f20 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    8f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f24:	468a      	mov	sl, r1
    8f26:	4616      	mov	r6, r2
    8f28:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    8f2a:	2500      	movs	r5, #0
{
    8f2c:	b097      	sub	sp, #92	; 0x5c
    8f2e:	9003      	str	r0, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    8f30:	7830      	ldrb	r0, [r6, #0]
    8f32:	b908      	cbnz	r0, 8f38 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    8f34:	4628      	mov	r0, r5
    8f36:	e34a      	b.n	95ce <z_cbvprintf_impl+0x6ae>
			OUTC(*fp++);
    8f38:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    8f3a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    8f3c:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    8f3e:	d007      	beq.n	8f50 <z_cbvprintf_impl+0x30>
			OUTC('%');
    8f40:	4651      	mov	r1, sl
    8f42:	9b03      	ldr	r3, [sp, #12]
    8f44:	4798      	blx	r3
    8f46:	2800      	cmp	r0, #0
    8f48:	f2c0 8341 	blt.w	95ce <z_cbvprintf_impl+0x6ae>
    8f4c:	3501      	adds	r5, #1
		if (bps == NULL) {
    8f4e:	e1f0      	b.n	9332 <z_cbvprintf_impl+0x412>
		} state = {
    8f50:	2218      	movs	r2, #24
    8f52:	2100      	movs	r1, #0
    8f54:	a810      	add	r0, sp, #64	; 0x40
    8f56:	f00b fb18 	bl	1458a <memset>
	if (*sp == '%') {
    8f5a:	7873      	ldrb	r3, [r6, #1]
    8f5c:	2b25      	cmp	r3, #37	; 0x25
    8f5e:	f000 80a3 	beq.w	90a8 <z_cbvprintf_impl+0x188>
    8f62:	2300      	movs	r3, #0
    8f64:	4698      	mov	r8, r3
    8f66:	469e      	mov	lr, r3
    8f68:	469c      	mov	ip, r3
    8f6a:	4618      	mov	r0, r3
    8f6c:	1c71      	adds	r1, r6, #1
    8f6e:	460f      	mov	r7, r1
		switch (*sp) {
    8f70:	f811 2b01 	ldrb.w	r2, [r1], #1
    8f74:	2a2b      	cmp	r2, #43	; 0x2b
    8f76:	f000 80c6 	beq.w	9106 <z_cbvprintf_impl+0x1e6>
    8f7a:	f200 80bd 	bhi.w	90f8 <z_cbvprintf_impl+0x1d8>
    8f7e:	2a20      	cmp	r2, #32
    8f80:	f000 80c4 	beq.w	910c <z_cbvprintf_impl+0x1ec>
    8f84:	2a23      	cmp	r2, #35	; 0x23
    8f86:	f000 80c4 	beq.w	9112 <z_cbvprintf_impl+0x1f2>
    8f8a:	b12b      	cbz	r3, 8f98 <z_cbvprintf_impl+0x78>
    8f8c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8f94:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    8f98:	f1b8 0f00 	cmp.w	r8, #0
    8f9c:	d005      	beq.n	8faa <z_cbvprintf_impl+0x8a>
    8f9e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8fa2:	f043 0320 	orr.w	r3, r3, #32
    8fa6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    8faa:	f1be 0f00 	cmp.w	lr, #0
    8fae:	d005      	beq.n	8fbc <z_cbvprintf_impl+0x9c>
    8fb0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8fb4:	f043 0310 	orr.w	r3, r3, #16
    8fb8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    8fbc:	f1bc 0f00 	cmp.w	ip, #0
    8fc0:	d005      	beq.n	8fce <z_cbvprintf_impl+0xae>
    8fc2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8fc6:	f043 0308 	orr.w	r3, r3, #8
    8fca:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    8fce:	b128      	cbz	r0, 8fdc <z_cbvprintf_impl+0xbc>
    8fd0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8fd4:	f043 0304 	orr.w	r3, r3, #4
    8fd8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    8fdc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8fe0:	f003 0144 	and.w	r1, r3, #68	; 0x44
    8fe4:	2944      	cmp	r1, #68	; 0x44
    8fe6:	d103      	bne.n	8ff0 <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
    8fe8:	f36f 1386 	bfc	r3, #6, #1
    8fec:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    8ff0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    8ff4:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    8ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8ffa:	9709      	str	r7, [sp, #36]	; 0x24
    8ffc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    9000:	f040 808c 	bne.w	911c <z_cbvprintf_impl+0x1fc>
		conv->width_star = true;
    9004:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    9008:	f043 0301 	orr.w	r3, r3, #1
    900c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    9010:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
    9012:	781a      	ldrb	r2, [r3, #0]
    9014:	2a2e      	cmp	r2, #46	; 0x2e
    9016:	bf0c      	ite	eq
    9018:	2101      	moveq	r1, #1
    901a:	2100      	movne	r1, #0
    901c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    9020:	f361 0241 	bfi	r2, r1, #1, #1
    9024:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    9028:	d10c      	bne.n	9044 <z_cbvprintf_impl+0x124>
	++sp;
    902a:	1c5a      	adds	r2, r3, #1
    902c:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    902e:	785a      	ldrb	r2, [r3, #1]
    9030:	2a2a      	cmp	r2, #42	; 0x2a
    9032:	f040 8083 	bne.w	913c <z_cbvprintf_impl+0x21c>
		conv->prec_star = true;
    9036:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    903a:	3302      	adds	r3, #2
		conv->prec_star = true;
    903c:	f042 0204 	orr.w	r2, r2, #4
    9040:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    9044:	781a      	ldrb	r2, [r3, #0]
    9046:	2a6c      	cmp	r2, #108	; 0x6c
    9048:	f000 80a4 	beq.w	9194 <z_cbvprintf_impl+0x274>
    904c:	f200 8086 	bhi.w	915c <z_cbvprintf_impl+0x23c>
    9050:	2a68      	cmp	r2, #104	; 0x68
    9052:	f000 808c 	beq.w	916e <z_cbvprintf_impl+0x24e>
    9056:	2a6a      	cmp	r2, #106	; 0x6a
    9058:	f000 80a5 	beq.w	91a6 <z_cbvprintf_impl+0x286>
    905c:	2a4c      	cmp	r2, #76	; 0x4c
    905e:	f000 80aa 	beq.w	91b6 <z_cbvprintf_impl+0x296>
	conv->specifier = *sp++;
    9062:	461a      	mov	r2, r3
    9064:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    9068:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    906a:	9204      	str	r2, [sp, #16]
    906c:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    9070:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    9074:	f200 8117 	bhi.w	92a6 <z_cbvprintf_impl+0x386>
    9078:	2b6d      	cmp	r3, #109	; 0x6d
    907a:	f200 80a9 	bhi.w	91d0 <z_cbvprintf_impl+0x2b0>
    907e:	2b69      	cmp	r3, #105	; 0x69
    9080:	f200 8111 	bhi.w	92a6 <z_cbvprintf_impl+0x386>
    9084:	2b57      	cmp	r3, #87	; 0x57
    9086:	f200 80be 	bhi.w	9206 <z_cbvprintf_impl+0x2e6>
    908a:	2b41      	cmp	r3, #65	; 0x41
    908c:	d003      	beq.n	9096 <z_cbvprintf_impl+0x176>
    908e:	3b45      	subs	r3, #69	; 0x45
    9090:	2b02      	cmp	r3, #2
    9092:	f200 8108 	bhi.w	92a6 <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_FP;
    9096:	2204      	movs	r2, #4
    9098:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    909c:	f362 0302 	bfi	r3, r2, #0, #3
    90a0:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    90a4:	2301      	movs	r3, #1
			break;
    90a6:	e0ca      	b.n	923e <z_cbvprintf_impl+0x31e>
		conv->specifier = *sp++;
    90a8:	1cb2      	adds	r2, r6, #2
    90aa:	9204      	str	r2, [sp, #16]
    90ac:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    90b0:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    90b4:	07d9      	lsls	r1, r3, #31
    90b6:	f140 80fd 	bpl.w	92b4 <z_cbvprintf_impl+0x394>
			width = va_arg(ap, int);
    90ba:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    90be:	f1b8 0f00 	cmp.w	r8, #0
    90c2:	da07      	bge.n	90d4 <z_cbvprintf_impl+0x1b4>
				conv->flag_dash = true;
    90c4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    90c8:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    90cc:	f042 0204 	orr.w	r2, r2, #4
    90d0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    90d4:	075a      	lsls	r2, r3, #29
    90d6:	f140 80f6 	bpl.w	92c6 <z_cbvprintf_impl+0x3a6>
			int arg = va_arg(ap, int);
    90da:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    90de:	f1bb 0f00 	cmp.w	fp, #0
    90e2:	f280 80f5 	bge.w	92d0 <z_cbvprintf_impl+0x3b0>
				conv->prec_present = false;
    90e6:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    90ea:	f36f 0341 	bfc	r3, #1, #1
    90ee:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    90f2:	f04f 3bff 	mov.w	fp, #4294967295
    90f6:	e0eb      	b.n	92d0 <z_cbvprintf_impl+0x3b0>
		switch (*sp) {
    90f8:	2a2d      	cmp	r2, #45	; 0x2d
    90fa:	d00d      	beq.n	9118 <z_cbvprintf_impl+0x1f8>
    90fc:	2a30      	cmp	r2, #48	; 0x30
    90fe:	f47f af44 	bne.w	8f8a <z_cbvprintf_impl+0x6a>
    9102:	2301      	movs	r3, #1
	} while (loop);
    9104:	e733      	b.n	8f6e <z_cbvprintf_impl+0x4e>
		switch (*sp) {
    9106:	f04f 0c01 	mov.w	ip, #1
    910a:	e730      	b.n	8f6e <z_cbvprintf_impl+0x4e>
    910c:	f04f 0e01 	mov.w	lr, #1
    9110:	e72d      	b.n	8f6e <z_cbvprintf_impl+0x4e>
    9112:	f04f 0801 	mov.w	r8, #1
    9116:	e72a      	b.n	8f6e <z_cbvprintf_impl+0x4e>
    9118:	2001      	movs	r0, #1
    911a:	e728      	b.n	8f6e <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
    911c:	a809      	add	r0, sp, #36	; 0x24
    911e:	f7ff fe9d 	bl	8e5c <extract_decimal>
	if (sp != wp) {
    9122:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9124:	42bb      	cmp	r3, r7
    9126:	f43f af74 	beq.w	9012 <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
    912a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    912e:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    9130:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    9132:	f360 0241 	bfi	r2, r0, #1, #1
    9136:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    913a:	e76a      	b.n	9012 <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
    913c:	a809      	add	r0, sp, #36	; 0x24
    913e:	f7ff fe8d 	bl	8e5c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    9142:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    9146:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    9148:	f3c3 0240 	ubfx	r2, r3, #1, #1
    914c:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    9150:	f362 0341 	bfi	r3, r2, #1, #1
    9154:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    9158:	9b09      	ldr	r3, [sp, #36]	; 0x24
    915a:	e773      	b.n	9044 <z_cbvprintf_impl+0x124>
	switch (*sp) {
    915c:	2a74      	cmp	r2, #116	; 0x74
    915e:	d026      	beq.n	91ae <z_cbvprintf_impl+0x28e>
    9160:	2a7a      	cmp	r2, #122	; 0x7a
    9162:	f47f af7e 	bne.w	9062 <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
    9166:	2106      	movs	r1, #6
    9168:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    916c:	e00c      	b.n	9188 <z_cbvprintf_impl+0x268>
		if (*++sp == 'h') {
    916e:	785a      	ldrb	r2, [r3, #1]
    9170:	2a68      	cmp	r2, #104	; 0x68
    9172:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    9176:	d106      	bne.n	9186 <z_cbvprintf_impl+0x266>
			conv->length_mod = LENGTH_HH;
    9178:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    917a:	f361 02c6 	bfi	r2, r1, #3, #4
    917e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    9182:	3302      	adds	r3, #2
    9184:	e76d      	b.n	9062 <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
    9186:	2102      	movs	r1, #2
    9188:	f361 02c6 	bfi	r2, r1, #3, #4
    918c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    9190:	3301      	adds	r3, #1
    9192:	e766      	b.n	9062 <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
    9194:	785a      	ldrb	r2, [r3, #1]
    9196:	2a6c      	cmp	r2, #108	; 0x6c
    9198:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    919c:	d101      	bne.n	91a2 <z_cbvprintf_impl+0x282>
			conv->length_mod = LENGTH_LL;
    919e:	2104      	movs	r1, #4
    91a0:	e7eb      	b.n	917a <z_cbvprintf_impl+0x25a>
			conv->length_mod = LENGTH_L;
    91a2:	2103      	movs	r1, #3
    91a4:	e7f0      	b.n	9188 <z_cbvprintf_impl+0x268>
		conv->length_mod = LENGTH_J;
    91a6:	2105      	movs	r1, #5
    91a8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    91ac:	e7ec      	b.n	9188 <z_cbvprintf_impl+0x268>
		conv->length_mod = LENGTH_T;
    91ae:	2107      	movs	r1, #7
    91b0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    91b4:	e7e8      	b.n	9188 <z_cbvprintf_impl+0x268>
		conv->unsupported = true;
    91b6:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    91ba:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    91be:	f022 0202 	bic.w	r2, r2, #2
    91c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    91c6:	f042 0202 	orr.w	r2, r2, #2
    91ca:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    91ce:	e7df      	b.n	9190 <z_cbvprintf_impl+0x270>
	switch (conv->specifier) {
    91d0:	3b6e      	subs	r3, #110	; 0x6e
    91d2:	b2d9      	uxtb	r1, r3
    91d4:	2301      	movs	r3, #1
    91d6:	408b      	lsls	r3, r1
    91d8:	f240 4182 	movw	r1, #1154	; 0x482
    91dc:	420b      	tst	r3, r1
    91de:	d138      	bne.n	9252 <z_cbvprintf_impl+0x332>
    91e0:	f013 0f24 	tst.w	r3, #36	; 0x24
    91e4:	d152      	bne.n	928c <z_cbvprintf_impl+0x36c>
    91e6:	07df      	lsls	r7, r3, #31
    91e8:	d55d      	bpl.n	92a6 <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_PTR;
    91ea:	2103      	movs	r1, #3
    91ec:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    91f0:	f361 0302 	bfi	r3, r1, #0, #3
    91f4:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    91f8:	f002 0378 	and.w	r3, r2, #120	; 0x78
    91fc:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
    9200:	4243      	negs	r3, r0
    9202:	4143      	adcs	r3, r0
    9204:	e01b      	b.n	923e <z_cbvprintf_impl+0x31e>
    9206:	2001      	movs	r0, #1
	switch (conv->specifier) {
    9208:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    920c:	b2c9      	uxtb	r1, r1
    920e:	fa00 f101 	lsl.w	r1, r0, r1
    9212:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    9216:	f47f af3e 	bne.w	9096 <z_cbvprintf_impl+0x176>
    921a:	f640 0701 	movw	r7, #2049	; 0x801
    921e:	4239      	tst	r1, r7
    9220:	d11d      	bne.n	925e <z_cbvprintf_impl+0x33e>
    9222:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    9226:	d03e      	beq.n	92a6 <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_SINT;
    9228:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    922c:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    9230:	f002 0278 	and.w	r2, r2, #120	; 0x78
    9234:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    9236:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    923a:	d034      	beq.n	92a6 <z_cbvprintf_impl+0x386>
	bool unsupported = false;
    923c:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    923e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    9242:	f3c2 0140 	ubfx	r1, r2, #1, #1
    9246:	430b      	orrs	r3, r1
    9248:	f363 0241 	bfi	r2, r3, #1, #1
    924c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    9250:	e72e      	b.n	90b0 <z_cbvprintf_impl+0x190>
		conv->specifier_cat = SPECIFIER_UINT;
    9252:	2102      	movs	r1, #2
    9254:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    9258:	f361 0302 	bfi	r3, r1, #0, #3
    925c:	e7e8      	b.n	9230 <z_cbvprintf_impl+0x310>
    925e:	2002      	movs	r0, #2
    9260:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    9264:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    9268:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    926c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    926e:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    9272:	bf02      	ittt	eq
    9274:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    9278:	f041 0101 	orreq.w	r1, r1, #1
    927c:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    9280:	2b63      	cmp	r3, #99	; 0x63
    9282:	d1db      	bne.n	923c <z_cbvprintf_impl+0x31c>
			unsupported = (conv->length_mod != LENGTH_NONE);
    9284:	1e13      	subs	r3, r2, #0
    9286:	bf18      	it	ne
    9288:	2301      	movne	r3, #1
    928a:	e7d8      	b.n	923e <z_cbvprintf_impl+0x31e>
		conv->specifier_cat = SPECIFIER_PTR;
    928c:	2103      	movs	r1, #3
    928e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    9292:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    9296:	f361 0302 	bfi	r3, r1, #0, #3
    929a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    929e:	bf14      	ite	ne
    92a0:	2301      	movne	r3, #1
    92a2:	2300      	moveq	r3, #0
    92a4:	e7cb      	b.n	923e <z_cbvprintf_impl+0x31e>
		conv->invalid = true;
    92a6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    92aa:	f043 0301 	orr.w	r3, r3, #1
    92ae:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    92b2:	e7c3      	b.n	923c <z_cbvprintf_impl+0x31c>
		} else if (conv->width_present) {
    92b4:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    92b8:	2a00      	cmp	r2, #0
		int width = -1;
    92ba:	bfac      	ite	ge
    92bc:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
    92c0:	f8dd 804c 	ldrlt.w	r8, [sp, #76]	; 0x4c
    92c4:	e706      	b.n	90d4 <z_cbvprintf_impl+0x1b4>
		} else if (conv->prec_present) {
    92c6:	079f      	lsls	r7, r3, #30
    92c8:	f57f af13 	bpl.w	90f2 <z_cbvprintf_impl+0x1d2>
			precision = conv->prec_value;
    92cc:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    92d0:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    92d2:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    92d6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    92da:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    92de:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    92e2:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    92e4:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    92e8:	d133      	bne.n	9352 <z_cbvprintf_impl+0x432>
			switch (length_mod) {
    92ea:	1ecb      	subs	r3, r1, #3
    92ec:	2b04      	cmp	r3, #4
    92ee:	d804      	bhi.n	92fa <z_cbvprintf_impl+0x3da>
    92f0:	e8df f003 	tbb	[pc, r3]
    92f4:	21464621 	.word	0x21464621
    92f8:	21          	.byte	0x21
    92f9:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    92fa:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    92fc:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    92fe:	ea4f 72e3 	mov.w	r2, r3, asr #31
    9302:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    9306:	d11c      	bne.n	9342 <z_cbvprintf_impl+0x422>
				value->sint = (signed char)value->sint;
    9308:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    930c:	17da      	asrs	r2, r3, #31
    930e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    9312:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    9314:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    9318:	f013 0703 	ands.w	r7, r3, #3
    931c:	d050      	beq.n	93c0 <z_cbvprintf_impl+0x4a0>
			OUTS(sp, fp);
    931e:	4632      	mov	r2, r6
    9320:	4651      	mov	r1, sl
    9322:	9b04      	ldr	r3, [sp, #16]
    9324:	9803      	ldr	r0, [sp, #12]
    9326:	f009 fb33 	bl	12990 <outs>
    932a:	2800      	cmp	r0, #0
    932c:	f2c0 814f 	blt.w	95ce <z_cbvprintf_impl+0x6ae>
    9330:	4405      	add	r5, r0
			continue;
    9332:	9e04      	ldr	r6, [sp, #16]
    9334:	e5fc      	b.n	8f30 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    9336:	f854 3b04 	ldr.w	r3, [r4], #4
    933a:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    933c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    9340:	e7e8      	b.n	9314 <z_cbvprintf_impl+0x3f4>
			} else if (length_mod == LENGTH_H) {
    9342:	2902      	cmp	r1, #2
    9344:	d1e5      	bne.n	9312 <z_cbvprintf_impl+0x3f2>
				value->sint = (short)value->sint;
    9346:	b21a      	sxth	r2, r3
    9348:	f343 33c0 	sbfx	r3, r3, #15, #1
    934c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    9350:	e7df      	b.n	9312 <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_UINT) {
    9352:	2b02      	cmp	r3, #2
    9354:	d124      	bne.n	93a0 <z_cbvprintf_impl+0x480>
			switch (length_mod) {
    9356:	1ecb      	subs	r3, r1, #3
    9358:	2b04      	cmp	r3, #4
    935a:	d804      	bhi.n	9366 <z_cbvprintf_impl+0x446>
    935c:	e8df f003 	tbb	[pc, r3]
    9360:	18101018 	.word	0x18101018
    9364:	18          	.byte	0x18
    9365:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    9366:	2901      	cmp	r1, #1
    9368:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    936c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    9370:	d014      	beq.n	939c <z_cbvprintf_impl+0x47c>
			} else if (length_mod == LENGTH_H) {
    9372:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    9374:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    9378:	d1cc      	bne.n	9314 <z_cbvprintf_impl+0x3f4>
				value->uint = (unsigned short)value->uint;
    937a:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    937c:	9310      	str	r3, [sp, #64]	; 0x40
    937e:	e7c9      	b.n	9314 <z_cbvprintf_impl+0x3f4>
					(uint_value_type)va_arg(ap,
    9380:	3407      	adds	r4, #7
    9382:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    9386:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    938a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    938e:	e7c1      	b.n	9314 <z_cbvprintf_impl+0x3f4>
					(uint_value_type)va_arg(ap, size_t);
    9390:	f854 3b04 	ldr.w	r3, [r4], #4
    9394:	9310      	str	r3, [sp, #64]	; 0x40
    9396:	2300      	movs	r3, #0
    9398:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    939a:	e7bb      	b.n	9314 <z_cbvprintf_impl+0x3f4>
				value->uint = (unsigned char)value->uint;
    939c:	b2db      	uxtb	r3, r3
    939e:	e7cd      	b.n	933c <z_cbvprintf_impl+0x41c>
		} else if (specifier_cat == SPECIFIER_FP) {
    93a0:	2b04      	cmp	r3, #4
    93a2:	d108      	bne.n	93b6 <z_cbvprintf_impl+0x496>
					(sint_value_type)va_arg(ap, long long);
    93a4:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    93a6:	f024 0407 	bic.w	r4, r4, #7
    93aa:	e9d4 2300 	ldrd	r2, r3, [r4]
    93ae:	3408      	adds	r4, #8
    93b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    93b4:	e7ae      	b.n	9314 <z_cbvprintf_impl+0x3f4>
		} else if (specifier_cat == SPECIFIER_PTR) {
    93b6:	2b03      	cmp	r3, #3
    93b8:	d1ac      	bne.n	9314 <z_cbvprintf_impl+0x3f4>
			value->ptr = va_arg(ap, void *);
    93ba:	f854 3b04 	ldr.w	r3, [r4], #4
    93be:	e7dd      	b.n	937c <z_cbvprintf_impl+0x45c>
		switch (conv->specifier) {
    93c0:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    93c4:	2878      	cmp	r0, #120	; 0x78
    93c6:	d8b4      	bhi.n	9332 <z_cbvprintf_impl+0x412>
    93c8:	2862      	cmp	r0, #98	; 0x62
    93ca:	d81d      	bhi.n	9408 <z_cbvprintf_impl+0x4e8>
    93cc:	2825      	cmp	r0, #37	; 0x25
    93ce:	f43f adb7 	beq.w	8f40 <z_cbvprintf_impl+0x20>
    93d2:	2858      	cmp	r0, #88	; 0x58
    93d4:	d1ad      	bne.n	9332 <z_cbvprintf_impl+0x412>
			bps = encode_uint(value->uint, conv, buf, bpe);
    93d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    93da:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    93de:	9300      	str	r3, [sp, #0]
    93e0:	aa12      	add	r2, sp, #72	; 0x48
    93e2:	ab0a      	add	r3, sp, #40	; 0x28
    93e4:	f7ff fd50 	bl	8e88 <encode_uint>
			if (precision >= 0) {
    93e8:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    93ec:	4681      	mov	r9, r0
			if (precision >= 0) {
    93ee:	f280 8098 	bge.w	9522 <z_cbvprintf_impl+0x602>
		if (bps == NULL) {
    93f2:	f1b9 0f00 	cmp.w	r9, #0
    93f6:	d09c      	beq.n	9332 <z_cbvprintf_impl+0x412>
		size_t nj_len = (bpe - bps);
    93f8:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
    93fc:	eba6 0309 	sub.w	r3, r6, r9
		if (sign != 0) {
    9400:	2f00      	cmp	r7, #0
    9402:	d050      	beq.n	94a6 <z_cbvprintf_impl+0x586>
			nj_len += 1U;
    9404:	3301      	adds	r3, #1
    9406:	e04e      	b.n	94a6 <z_cbvprintf_impl+0x586>
		switch (conv->specifier) {
    9408:	3863      	subs	r0, #99	; 0x63
    940a:	2815      	cmp	r0, #21
    940c:	d891      	bhi.n	9332 <z_cbvprintf_impl+0x412>
    940e:	a201      	add	r2, pc, #4	; (adr r2, 9414 <z_cbvprintf_impl+0x4f4>)
    9410:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    9414:	00009495 	.word	0x00009495
    9418:	000094f9 	.word	0x000094f9
    941c:	00009333 	.word	0x00009333
    9420:	00009333 	.word	0x00009333
    9424:	00009333 	.word	0x00009333
    9428:	00009333 	.word	0x00009333
    942c:	000094f9 	.word	0x000094f9
    9430:	00009333 	.word	0x00009333
    9434:	00009333 	.word	0x00009333
    9438:	00009333 	.word	0x00009333
    943c:	00009333 	.word	0x00009333
    9440:	00009583 	.word	0x00009583
    9444:	0000951d 	.word	0x0000951d
    9448:	00009545 	.word	0x00009545
    944c:	00009333 	.word	0x00009333
    9450:	00009333 	.word	0x00009333
    9454:	0000946d 	.word	0x0000946d
    9458:	00009333 	.word	0x00009333
    945c:	0000951d 	.word	0x0000951d
    9460:	00009333 	.word	0x00009333
    9464:	00009333 	.word	0x00009333
    9468:	0000951d 	.word	0x0000951d
			if (precision >= 0) {
    946c:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    9470:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
			if (precision >= 0) {
    9474:	db0a      	blt.n	948c <z_cbvprintf_impl+0x56c>
				len = strnlen(bps, precision);
    9476:	4659      	mov	r1, fp
    9478:	4648      	mov	r0, r9
    947a:	f00b f8b6 	bl	145ea <strnlen>
		if (bps == NULL) {
    947e:	f1b9 0f00 	cmp.w	r9, #0
    9482:	f43f af56 	beq.w	9332 <z_cbvprintf_impl+0x412>
			bpe = bps + len;
    9486:	eb09 0600 	add.w	r6, r9, r0
    948a:	e076      	b.n	957a <z_cbvprintf_impl+0x65a>
				len = strlen(bps);
    948c:	4648      	mov	r0, r9
    948e:	f7fe ffc1 	bl	8414 <strlen>
    9492:	e7f8      	b.n	9486 <z_cbvprintf_impl+0x566>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    9494:	9b10      	ldr	r3, [sp, #64]	; 0x40
		char sign = 0;
    9496:	2700      	movs	r7, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    9498:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		size_t nj_len = (bpe - bps);
    949c:	2301      	movs	r3, #1
			bpe = buf + 1;
    949e:	f10d 0629 	add.w	r6, sp, #41	; 0x29
			bps = buf;
    94a2:	f10d 0928 	add.w	r9, sp, #40	; 0x28
		if (conv->altform_0c) {
    94a6:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    94aa:	f011 0210 	ands.w	r2, r1, #16
    94ae:	9206      	str	r2, [sp, #24]
    94b0:	f000 8081 	beq.w	95b6 <z_cbvprintf_impl+0x696>
			nj_len += 2U;
    94b4:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    94b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    94b8:	4413      	add	r3, r2
    94ba:	9205      	str	r2, [sp, #20]
		if (conv->pad_fp) {
    94bc:	064a      	lsls	r2, r1, #25
			nj_len += conv->pad0_pre_exp;
    94be:	bf44      	itt	mi
    94c0:	9914      	ldrmi	r1, [sp, #80]	; 0x50
    94c2:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    94c4:	f1b8 0f00 	cmp.w	r8, #0
    94c8:	f340 808e 	ble.w	95e8 <z_cbvprintf_impl+0x6c8>
			width -= (int)nj_len;
    94cc:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    94d0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    94d4:	0758      	lsls	r0, r3, #29
    94d6:	f3c3 0b80 	ubfx	fp, r3, #2, #1
    94da:	f100 8085 	bmi.w	95e8 <z_cbvprintf_impl+0x6c8>
				if (conv->flag_zero) {
    94de:	0659      	lsls	r1, r3, #25
    94e0:	d578      	bpl.n	95d4 <z_cbvprintf_impl+0x6b4>
					if (sign != 0) {
    94e2:	b13f      	cbz	r7, 94f4 <z_cbvprintf_impl+0x5d4>
						OUTC(sign);
    94e4:	4651      	mov	r1, sl
    94e6:	4638      	mov	r0, r7
    94e8:	9b03      	ldr	r3, [sp, #12]
    94ea:	4798      	blx	r3
    94ec:	2800      	cmp	r0, #0
    94ee:	db6e      	blt.n	95ce <z_cbvprintf_impl+0x6ae>
    94f0:	465f      	mov	r7, fp
    94f2:	3501      	adds	r5, #1
					pad = '0';
    94f4:	2330      	movs	r3, #48	; 0x30
    94f6:	e06e      	b.n	95d6 <z_cbvprintf_impl+0x6b6>
			if (conv->flag_plus) {
    94f8:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    94fa:	bf5a      	itte	pl
    94fc:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    9500:	015f      	lslpl	r7, r3, #5
				sign = '+';
    9502:	272b      	movmi	r7, #43	; 0x2b
			sint = value->sint;
    9504:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    9508:	2b00      	cmp	r3, #0
    950a:	f6bf af64 	bge.w	93d6 <z_cbvprintf_impl+0x4b6>
				value->uint = (uint_value_type)-sint;
    950e:	4252      	negs	r2, r2
    9510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    9514:	272d      	movs	r7, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    9516:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    951a:	e75c      	b.n	93d6 <z_cbvprintf_impl+0x4b6>
		switch (conv->specifier) {
    951c:	2700      	movs	r7, #0
    951e:	e75a      	b.n	93d6 <z_cbvprintf_impl+0x4b6>
		char sign = 0;
    9520:	2700      	movs	r7, #0
				conv->flag_zero = false;
    9522:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    9526:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    952a:	eba3 0309 	sub.w	r3, r3, r9
				conv->flag_zero = false;
    952e:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    9532:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    9534:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    9538:	f67f af5b 	bls.w	93f2 <z_cbvprintf_impl+0x4d2>
					conv->pad0_value = precision - (int)len;
    953c:	ebab 0303 	sub.w	r3, fp, r3
    9540:	9313      	str	r3, [sp, #76]	; 0x4c
    9542:	e756      	b.n	93f2 <z_cbvprintf_impl+0x4d2>
			if (value->ptr != NULL) {
    9544:	9810      	ldr	r0, [sp, #64]	; 0x40
    9546:	b380      	cbz	r0, 95aa <z_cbvprintf_impl+0x68a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    9548:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
    954c:	ab0a      	add	r3, sp, #40	; 0x28
    954e:	2100      	movs	r1, #0
    9550:	9600      	str	r6, [sp, #0]
    9552:	aa12      	add	r2, sp, #72	; 0x48
    9554:	f7ff fc98 	bl	8e88 <encode_uint>
				conv->altform_0c = true;
    9558:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    955c:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    9560:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    9564:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    9568:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    956c:	4681      	mov	r9, r0
				conv->altform_0c = true;
    956e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    9572:	dad5      	bge.n	9520 <z_cbvprintf_impl+0x600>
		if (bps == NULL) {
    9574:	2800      	cmp	r0, #0
    9576:	f43f aedc 	beq.w	9332 <z_cbvprintf_impl+0x412>
		char sign = 0;
    957a:	2700      	movs	r7, #0
		size_t nj_len = (bpe - bps);
    957c:	eba6 0309 	sub.w	r3, r6, r9
		if (sign != 0) {
    9580:	e791      	b.n	94a6 <z_cbvprintf_impl+0x586>
				store_count(conv, value->ptr, count);
    9582:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    9584:	2907      	cmp	r1, #7
    9586:	f63f aed4 	bhi.w	9332 <z_cbvprintf_impl+0x412>
    958a:	e8df f001 	tbb	[pc, r1]
    958e:	040c      	.short	0x040c
    9590:	08080c06 	.word	0x08080c06
    9594:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    9596:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    9598:	e6cb      	b.n	9332 <z_cbvprintf_impl+0x412>
		*(short *)dp = (short)count;
    959a:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    959c:	e6c9      	b.n	9332 <z_cbvprintf_impl+0x412>
		*(intmax_t *)dp = (intmax_t)count;
    959e:	17ea      	asrs	r2, r5, #31
    95a0:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    95a4:	e6c5      	b.n	9332 <z_cbvprintf_impl+0x412>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    95a6:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    95a8:	e6c3      	b.n	9332 <z_cbvprintf_impl+0x412>
			bpe = bps + 5;
    95aa:	4e31      	ldr	r6, [pc, #196]	; (9670 <z_cbvprintf_impl+0x750>)
		char sign = 0;
    95ac:	4607      	mov	r7, r0
		size_t nj_len = (bpe - bps);
    95ae:	2305      	movs	r3, #5
    95b0:	f1a6 0905 	sub.w	r9, r6, #5
    95b4:	e777      	b.n	94a6 <z_cbvprintf_impl+0x586>
		} else if (conv->altform_0) {
    95b6:	0708      	lsls	r0, r1, #28
			nj_len += 1U;
    95b8:	bf48      	it	mi
    95ba:	3301      	addmi	r3, #1
    95bc:	e77b      	b.n	94b6 <z_cbvprintf_impl+0x596>
					OUTC(pad);
    95be:	4618      	mov	r0, r3
    95c0:	9307      	str	r3, [sp, #28]
    95c2:	4651      	mov	r1, sl
    95c4:	9b03      	ldr	r3, [sp, #12]
    95c6:	4798      	blx	r3
    95c8:	2800      	cmp	r0, #0
    95ca:	9b07      	ldr	r3, [sp, #28]
    95cc:	da04      	bge.n	95d8 <z_cbvprintf_impl+0x6b8>
#undef OUTS
#undef OUTC
}
    95ce:	b017      	add	sp, #92	; 0x5c
    95d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    95d4:	2320      	movs	r3, #32
					pad = '0';
    95d6:	46c3      	mov	fp, r8
				while (width-- > 0) {
    95d8:	4659      	mov	r1, fp
    95da:	2900      	cmp	r1, #0
    95dc:	f10b 3bff 	add.w	fp, fp, #4294967295
    95e0:	dced      	bgt.n	95be <z_cbvprintf_impl+0x69e>
    95e2:	4445      	add	r5, r8
    95e4:	46d8      	mov	r8, fp
    95e6:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    95e8:	b137      	cbz	r7, 95f8 <z_cbvprintf_impl+0x6d8>
			OUTC(sign);
    95ea:	4651      	mov	r1, sl
    95ec:	4638      	mov	r0, r7
    95ee:	9b03      	ldr	r3, [sp, #12]
    95f0:	4798      	blx	r3
    95f2:	2800      	cmp	r0, #0
    95f4:	dbeb      	blt.n	95ce <z_cbvprintf_impl+0x6ae>
    95f6:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    95f8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    95fc:	06da      	lsls	r2, r3, #27
    95fe:	d401      	bmi.n	9604 <z_cbvprintf_impl+0x6e4>
    9600:	071b      	lsls	r3, r3, #28
    9602:	d506      	bpl.n	9612 <z_cbvprintf_impl+0x6f2>
				OUTC('0');
    9604:	4651      	mov	r1, sl
    9606:	2030      	movs	r0, #48	; 0x30
    9608:	9b03      	ldr	r3, [sp, #12]
    960a:	4798      	blx	r3
    960c:	2800      	cmp	r0, #0
    960e:	dbde      	blt.n	95ce <z_cbvprintf_impl+0x6ae>
    9610:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    9612:	9b06      	ldr	r3, [sp, #24]
    9614:	b13b      	cbz	r3, 9626 <z_cbvprintf_impl+0x706>
				OUTC(conv->specifier);
    9616:	4651      	mov	r1, sl
    9618:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    961c:	9b03      	ldr	r3, [sp, #12]
    961e:	4798      	blx	r3
    9620:	2800      	cmp	r0, #0
    9622:	dbd4      	blt.n	95ce <z_cbvprintf_impl+0x6ae>
    9624:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    9626:	9f05      	ldr	r7, [sp, #20]
    9628:	442f      	add	r7, r5
    962a:	e006      	b.n	963a <z_cbvprintf_impl+0x71a>
				OUTC('0');
    962c:	4651      	mov	r1, sl
    962e:	2030      	movs	r0, #48	; 0x30
    9630:	9b03      	ldr	r3, [sp, #12]
    9632:	4798      	blx	r3
    9634:	2800      	cmp	r0, #0
    9636:	dbca      	blt.n	95ce <z_cbvprintf_impl+0x6ae>
    9638:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    963a:	1b7b      	subs	r3, r7, r5
    963c:	2b00      	cmp	r3, #0
    963e:	dcf5      	bgt.n	962c <z_cbvprintf_impl+0x70c>
			OUTS(bps, bpe);
    9640:	4633      	mov	r3, r6
    9642:	464a      	mov	r2, r9
    9644:	4651      	mov	r1, sl
    9646:	9803      	ldr	r0, [sp, #12]
    9648:	f009 f9a2 	bl	12990 <outs>
    964c:	2800      	cmp	r0, #0
    964e:	dbbe      	blt.n	95ce <z_cbvprintf_impl+0x6ae>
    9650:	4405      	add	r5, r0
		while (width > 0) {
    9652:	44a8      	add	r8, r5
    9654:	eba8 0305 	sub.w	r3, r8, r5
    9658:	2b00      	cmp	r3, #0
    965a:	f77f ae6a 	ble.w	9332 <z_cbvprintf_impl+0x412>
			OUTC(' ');
    965e:	4651      	mov	r1, sl
    9660:	2020      	movs	r0, #32
    9662:	9b03      	ldr	r3, [sp, #12]
    9664:	4798      	blx	r3
    9666:	2800      	cmp	r0, #0
    9668:	dbb1      	blt.n	95ce <z_cbvprintf_impl+0x6ae>
    966a:	3501      	adds	r5, #1
			--width;
    966c:	e7f2      	b.n	9654 <z_cbvprintf_impl+0x734>
    966e:	bf00      	nop
    9670:	0001563c 	.word	0x0001563c

00009674 <nordicsemi_nrf91_init>:
	__asm__ volatile(
    9674:	f04f 0220 	mov.w	r2, #32
    9678:	f3ef 8311 	mrs	r3, BASEPRI
    967c:	f382 8812 	msr	BASEPRI_MAX, r2
    9680:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    9684:	2101      	movs	r1, #1
    9686:	4a04      	ldr	r2, [pc, #16]	; (9698 <nordicsemi_nrf91_init+0x24>)
    9688:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    968c:	f383 8811 	msr	BASEPRI, r3
    9690:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    9694:	2000      	movs	r0, #0
    9696:	4770      	bx	lr
    9698:	40039000 	.word	0x40039000

0000969c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    969c:	b120      	cbz	r0, 96a8 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    969e:	4b03      	ldr	r3, [pc, #12]	; (96ac <arch_busy_wait+0x10>)
    96a0:	0180      	lsls	r0, r0, #6
    96a2:	f043 0301 	orr.w	r3, r3, #1
    96a6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    96a8:	4770      	bx	lr
    96aa:	bf00      	nop
    96ac:	00014cd0 	.word	0x00014cd0

000096b0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    96b0:	f009 bec1 	b.w	13436 <SystemInit>

000096b4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    96b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    96b8:	4605      	mov	r5, r0
	__asm__ volatile(
    96ba:	f04f 0320 	mov.w	r3, #32
    96be:	f3ef 8611 	mrs	r6, BASEPRI
    96c2:	f383 8812 	msr	BASEPRI_MAX, r3
    96c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    96ca:	4820      	ldr	r0, [pc, #128]	; (974c <pm_state_notify+0x98>)
    96cc:	f006 f8d8 	bl	f880 <z_spin_lock_valid>
    96d0:	b968      	cbnz	r0, 96ee <pm_state_notify+0x3a>
    96d2:	2394      	movs	r3, #148	; 0x94
    96d4:	4a1e      	ldr	r2, [pc, #120]	; (9750 <pm_state_notify+0x9c>)
    96d6:	491f      	ldr	r1, [pc, #124]	; (9754 <pm_state_notify+0xa0>)
    96d8:	481f      	ldr	r0, [pc, #124]	; (9758 <pm_state_notify+0xa4>)
    96da:	f009 f977 	bl	129cc <assert_print>
    96de:	491b      	ldr	r1, [pc, #108]	; (974c <pm_state_notify+0x98>)
    96e0:	481e      	ldr	r0, [pc, #120]	; (975c <pm_state_notify+0xa8>)
    96e2:	f009 f973 	bl	129cc <assert_print>
    96e6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    96e8:	4819      	ldr	r0, [pc, #100]	; (9750 <pm_state_notify+0x9c>)
    96ea:	f009 f968 	bl	129be <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    96ee:	f04f 090c 	mov.w	r9, #12
	z_spin_lock_set_owner(l);
    96f2:	4816      	ldr	r0, [pc, #88]	; (974c <pm_state_notify+0x98>)
    96f4:	f006 f8e0 	bl	f8b8 <z_spin_lock_set_owner>
	return list->head;
    96f8:	4b19      	ldr	r3, [pc, #100]	; (9760 <pm_state_notify+0xac>)
    96fa:	4f1a      	ldr	r7, [pc, #104]	; (9764 <pm_state_notify+0xb0>)
    96fc:	681c      	ldr	r4, [r3, #0]
    96fe:	f8df 8068 	ldr.w	r8, [pc, #104]	; 9768 <pm_state_notify+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    9702:	b97c      	cbnz	r4, 9724 <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9704:	4811      	ldr	r0, [pc, #68]	; (974c <pm_state_notify+0x98>)
    9706:	f006 f8c9 	bl	f89c <z_spin_unlock_valid>
    970a:	b9c8      	cbnz	r0, 9740 <pm_state_notify+0x8c>
    970c:	23c2      	movs	r3, #194	; 0xc2
    970e:	4a10      	ldr	r2, [pc, #64]	; (9750 <pm_state_notify+0x9c>)
    9710:	4916      	ldr	r1, [pc, #88]	; (976c <pm_state_notify+0xb8>)
    9712:	4811      	ldr	r0, [pc, #68]	; (9758 <pm_state_notify+0xa4>)
    9714:	f009 f95a 	bl	129cc <assert_print>
    9718:	490c      	ldr	r1, [pc, #48]	; (974c <pm_state_notify+0x98>)
    971a:	4815      	ldr	r0, [pc, #84]	; (9770 <pm_state_notify+0xbc>)
    971c:	f009 f956 	bl	129cc <assert_print>
    9720:	21c2      	movs	r1, #194	; 0xc2
    9722:	e7e1      	b.n	96e8 <pm_state_notify+0x34>
			callback = notifier->state_exit;
    9724:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    9728:	2d00      	cmp	r5, #0
    972a:	bf18      	it	ne
    972c:	4613      	movne	r3, r2
		if (callback) {
    972e:	b12b      	cbz	r3, 973c <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    9730:	f898 2010 	ldrb.w	r2, [r8, #16]
    9734:	fb09 f202 	mul.w	r2, r9, r2
    9738:	5cb8      	ldrb	r0, [r7, r2]
    973a:	4798      	blx	r3
	return node->next;
    973c:	6824      	ldr	r4, [r4, #0]
    973e:	e7e0      	b.n	9702 <pm_state_notify+0x4e>
	__asm__ volatile(
    9740:	f386 8811 	msr	BASEPRI, r6
    9744:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    9748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    974c:	2000cb28 	.word	0x2000cb28
    9750:	0001558e 	.word	0x0001558e
    9754:	000155e7 	.word	0x000155e7
    9758:	00015341 	.word	0x00015341
    975c:	000155fc 	.word	0x000155fc
    9760:	2000cb48 	.word	0x2000cb48
    9764:	2000cb3c 	.word	0x2000cb3c
    9768:	2000d1d4 	.word	0x2000d1d4
    976c:	000155bb 	.word	0x000155bb
    9770:	000155d2 	.word	0x000155d2

00009774 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    9774:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    9776:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    9778:	4b16      	ldr	r3, [pc, #88]	; (97d4 <pm_system_resume+0x60>)
    977a:	7c1c      	ldrb	r4, [r3, #16]
    977c:	f004 031f 	and.w	r3, r4, #31
    9780:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9782:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9784:	4b14      	ldr	r3, [pc, #80]	; (97d8 <pm_system_resume+0x64>)
    9786:	0961      	lsrs	r1, r4, #5
    9788:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    978c:	e8d3 1fef 	ldaex	r1, [r3]
    9790:	ea01 0500 	and.w	r5, r1, r0
    9794:	e8c3 5fe6 	stlex	r6, r5, [r3]
    9798:	2e00      	cmp	r6, #0
    979a:	d1f7      	bne.n	978c <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    979c:	420a      	tst	r2, r1
    979e:	d013      	beq.n	97c8 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    97a0:	4b0e      	ldr	r3, [pc, #56]	; (97dc <pm_system_resume+0x68>)
    97a2:	4d0f      	ldr	r5, [pc, #60]	; (97e0 <pm_system_resume+0x6c>)
    97a4:	b18b      	cbz	r3, 97ca <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    97a6:	230c      	movs	r3, #12
    97a8:	4363      	muls	r3, r4
    97aa:	18ea      	adds	r2, r5, r3
    97ac:	7851      	ldrb	r1, [r2, #1]
    97ae:	5ce8      	ldrb	r0, [r5, r3]
    97b0:	f009 f926 	bl	12a00 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    97b4:	2000      	movs	r0, #0
    97b6:	f7ff ff7d 	bl	96b4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    97ba:	230c      	movs	r3, #12
    97bc:	435c      	muls	r4, r3
    97be:	2300      	movs	r3, #0
    97c0:	192a      	adds	r2, r5, r4
    97c2:	512b      	str	r3, [r5, r4]
    97c4:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    97c8:	bd70      	pop	{r4, r5, r6, pc}
    97ca:	f383 8811 	msr	BASEPRI, r3
    97ce:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    97d2:	e7ef      	b.n	97b4 <pm_system_resume+0x40>
    97d4:	2000d1d4 	.word	0x2000d1d4
    97d8:	2000cb50 	.word	0x2000cb50
    97dc:	00012a01 	.word	0x00012a01
    97e0:	2000cb3c 	.word	0x2000cb3c

000097e4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    97e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    97e8:	4b45      	ldr	r3, [pc, #276]	; (9900 <pm_system_suspend+0x11c>)
{
    97ea:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    97ec:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    97ee:	f04f 0320 	mov.w	r3, #32
    97f2:	f3ef 8811 	mrs	r8, BASEPRI
    97f6:	f383 8812 	msr	BASEPRI_MAX, r3
    97fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    97fe:	4841      	ldr	r0, [pc, #260]	; (9904 <pm_system_suspend+0x120>)
    9800:	f006 f83e 	bl	f880 <z_spin_lock_valid>
    9804:	b968      	cbnz	r0, 9822 <pm_system_suspend+0x3e>
    9806:	2394      	movs	r3, #148	; 0x94
    9808:	4a3f      	ldr	r2, [pc, #252]	; (9908 <pm_system_suspend+0x124>)
    980a:	4940      	ldr	r1, [pc, #256]	; (990c <pm_system_suspend+0x128>)
    980c:	4840      	ldr	r0, [pc, #256]	; (9910 <pm_system_suspend+0x12c>)
    980e:	f009 f8dd 	bl	129cc <assert_print>
    9812:	493c      	ldr	r1, [pc, #240]	; (9904 <pm_system_suspend+0x120>)
    9814:	483f      	ldr	r0, [pc, #252]	; (9914 <pm_system_suspend+0x130>)
    9816:	f009 f8d9 	bl	129cc <assert_print>
    981a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    981c:	483a      	ldr	r0, [pc, #232]	; (9908 <pm_system_suspend+0x124>)
    981e:	f009 f8ce 	bl	129be <assert_post_action>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    9822:	240c      	movs	r4, #12
    9824:	436c      	muls	r4, r5
	z_spin_lock_set_owner(l);
    9826:	4837      	ldr	r0, [pc, #220]	; (9904 <pm_system_suspend+0x120>)
    9828:	f006 f846 	bl	f8b8 <z_spin_lock_set_owner>
    982c:	4b3a      	ldr	r3, [pc, #232]	; (9918 <pm_system_suspend+0x134>)
    982e:	4e3b      	ldr	r6, [pc, #236]	; (991c <pm_system_suspend+0x138>)
    9830:	5d19      	ldrb	r1, [r3, r4]
    9832:	191a      	adds	r2, r3, r4
    9834:	b1b9      	cbz	r1, 9866 <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    9836:	ca07      	ldmia	r2, {r0, r1, r2}
    9838:	eb06 0c04 	add.w	ip, r6, r4
    983c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    9840:	2200      	movs	r2, #0
    9842:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9844:	482f      	ldr	r0, [pc, #188]	; (9904 <pm_system_suspend+0x120>)
    9846:	f006 f829 	bl	f89c <z_spin_unlock_valid>
    984a:	4604      	mov	r4, r0
    984c:	b9b0      	cbnz	r0, 987c <pm_system_suspend+0x98>
    984e:	23c2      	movs	r3, #194	; 0xc2
    9850:	4a2d      	ldr	r2, [pc, #180]	; (9908 <pm_system_suspend+0x124>)
    9852:	4933      	ldr	r1, [pc, #204]	; (9920 <pm_system_suspend+0x13c>)
    9854:	482e      	ldr	r0, [pc, #184]	; (9910 <pm_system_suspend+0x12c>)
    9856:	f009 f8b9 	bl	129cc <assert_print>
    985a:	492a      	ldr	r1, [pc, #168]	; (9904 <pm_system_suspend+0x120>)
    985c:	4831      	ldr	r0, [pc, #196]	; (9924 <pm_system_suspend+0x140>)
    985e:	f009 f8b5 	bl	129cc <assert_print>
    9862:	21c2      	movs	r1, #194	; 0xc2
    9864:	e7da      	b.n	981c <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    9866:	4639      	mov	r1, r7
    9868:	4628      	mov	r0, r5
    986a:	f000 f865 	bl	9938 <pm_policy_next_state>
		if (info != NULL) {
    986e:	2800      	cmp	r0, #0
    9870:	d0e8      	beq.n	9844 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
    9872:	c807      	ldmia	r0, {r0, r1, r2}
    9874:	4434      	add	r4, r6
    9876:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    987a:	e7e3      	b.n	9844 <pm_system_suspend+0x60>
	__asm__ volatile(
    987c:	f388 8811 	msr	BASEPRI, r8
    9880:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    9884:	230c      	movs	r3, #12
    9886:	436b      	muls	r3, r5
    9888:	18f2      	adds	r2, r6, r3
    988a:	5cf3      	ldrb	r3, [r6, r3]
    988c:	b3ab      	cbz	r3, 98fa <pm_system_suspend+0x116>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    988e:	1c7b      	adds	r3, r7, #1
    9890:	d00f      	beq.n	98b2 <pm_system_suspend+0xce>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    9892:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    9896:	2100      	movs	r1, #0
    9898:	f8d2 e008 	ldr.w	lr, [r2, #8]
    989c:	4822      	ldr	r0, [pc, #136]	; (9928 <pm_system_suspend+0x144>)
    989e:	2300      	movs	r3, #0
    98a0:	fbee 010c 	umlal	r0, r1, lr, ip
    98a4:	4a21      	ldr	r2, [pc, #132]	; (992c <pm_system_suspend+0x148>)
    98a6:	f7fe fc4d 	bl	8144 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    98aa:	2101      	movs	r1, #1
    98ac:	1a38      	subs	r0, r7, r0
    98ae:	f001 ff65 	bl	b77c <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    98b2:	f006 ff77 	bl	107a4 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    98b6:	2001      	movs	r0, #1
    98b8:	f7ff fefc 	bl	96b4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    98bc:	4b1c      	ldr	r3, [pc, #112]	; (9930 <pm_system_suspend+0x14c>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    98be:	096a      	lsrs	r2, r5, #5
    98c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    98c4:	2201      	movs	r2, #1
    98c6:	f005 011f 	and.w	r1, r5, #31
    98ca:	408a      	lsls	r2, r1
    98cc:	e8d3 0fef 	ldaex	r0, [r3]
    98d0:	4310      	orrs	r0, r2
    98d2:	e8c3 0fe1 	stlex	r1, r0, [r3]
    98d6:	2900      	cmp	r1, #0
    98d8:	d1f8      	bne.n	98cc <pm_system_suspend+0xe8>
	if (pm_state_set != NULL) {
    98da:	4b16      	ldr	r3, [pc, #88]	; (9934 <pm_system_suspend+0x150>)
    98dc:	b133      	cbz	r3, 98ec <pm_system_suspend+0x108>
		pm_state_set(info->state, info->substate_id);
    98de:	230c      	movs	r3, #12
    98e0:	436b      	muls	r3, r5
    98e2:	18f2      	adds	r2, r6, r3
    98e4:	7851      	ldrb	r1, [r2, #1]
    98e6:	5cf0      	ldrb	r0, [r6, r3]
    98e8:	f009 f87e 	bl	129e8 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    98ec:	f7ff ff42 	bl	9774 <pm_system_resume>
	k_sched_unlock();
    98f0:	f006 ffc4 	bl	1087c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
    98f4:	4620      	mov	r0, r4
    98f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    98fa:	461c      	mov	r4, r3
    98fc:	e7fa      	b.n	98f4 <pm_system_suspend+0x110>
    98fe:	bf00      	nop
    9900:	2000d1d4 	.word	0x2000d1d4
    9904:	2000cb2c 	.word	0x2000cb2c
    9908:	0001558e 	.word	0x0001558e
    990c:	000155e7 	.word	0x000155e7
    9910:	00015341 	.word	0x00015341
    9914:	000155fc 	.word	0x000155fc
    9918:	2000cb30 	.word	0x2000cb30
    991c:	2000cb3c 	.word	0x2000cb3c
    9920:	000155bb 	.word	0x000155bb
    9924:	000155d2 	.word	0x000155d2
    9928:	000f423f 	.word	0x000f423f
    992c:	000f4240 	.word	0x000f4240
    9930:	2000cb50 	.word	0x2000cb50
    9934:	000129e9 	.word	0x000129e9

00009938 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    9938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    993c:	b085      	sub	sp, #20
    993e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    9940:	a903      	add	r1, sp, #12
    9942:	f000 f843 	bl	99cc <pm_state_cpu_get_all>
    9946:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    994a:	4604      	mov	r4, r0
    994c:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    9950:	4b1b      	ldr	r3, [pc, #108]	; (99c0 <pm_policy_next_state+0x88>)
    9952:	9d03      	ldr	r5, [sp, #12]
    9954:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    9958:	1e43      	subs	r3, r0, #1
    995a:	b21b      	sxth	r3, r3
    995c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9960:	f8df 8060 	ldr.w	r8, [pc, #96]	; 99c4 <pm_policy_next_state+0x8c>
    9964:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    9968:	b924      	cbnz	r4, 9974 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    996a:	46a1      	mov	r9, r4
}
    996c:	4648      	mov	r0, r9
    996e:	b005      	add	sp, #20
    9970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9974:	46c4      	mov	ip, r8
    9976:	4659      	mov	r1, fp
    9978:	6868      	ldr	r0, [r5, #4]
    997a:	2300      	movs	r3, #0
    997c:	fbe0 c107 	umlal	ip, r1, r0, r7
    9980:	4a11      	ldr	r2, [pc, #68]	; (99c8 <pm_policy_next_state+0x90>)
    9982:	4660      	mov	r0, ip
    9984:	f7fe fbde 	bl	8144 <__aeabi_uldivmod>
    9988:	46c4      	mov	ip, r8
    998a:	4659      	mov	r1, fp
    998c:	9001      	str	r0, [sp, #4]
    998e:	68a8      	ldr	r0, [r5, #8]
    9990:	2300      	movs	r3, #0
    9992:	fbe0 c107 	umlal	ip, r1, r0, r7
    9996:	4a0c      	ldr	r2, [pc, #48]	; (99c8 <pm_policy_next_state+0x90>)
    9998:	4660      	mov	r0, ip
    999a:	f7fe fbd3 	bl	8144 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    999e:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    99a2:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    99a4:	d001      	beq.n	99aa <pm_policy_next_state+0x72>
    99a6:	4582      	cmp	sl, r0
    99a8:	d905      	bls.n	99b6 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    99aa:	1c73      	adds	r3, r6, #1
    99ac:	d0de      	beq.n	996c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    99ae:	9b01      	ldr	r3, [sp, #4]
    99b0:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    99b2:	42b0      	cmp	r0, r6
    99b4:	d9da      	bls.n	996c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    99b6:	3c01      	subs	r4, #1
    99b8:	b2a4      	uxth	r4, r4
    99ba:	3d0c      	subs	r5, #12
    99bc:	e7d4      	b.n	9968 <pm_policy_next_state+0x30>
    99be:	bf00      	nop
    99c0:	2000c584 	.word	0x2000c584
    99c4:	000f423f 	.word	0x000f423f
    99c8:	000f4240 	.word	0x000f4240

000099cc <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    99cc:	b908      	cbnz	r0, 99d2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    99ce:	4b02      	ldr	r3, [pc, #8]	; (99d8 <pm_state_cpu_get_all+0xc>)
    99d0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    99d2:	2000      	movs	r0, #0
    99d4:	4770      	bx	lr
    99d6:	bf00      	nop
    99d8:	00014cd8 	.word	0x00014cd8

000099dc <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
    99dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99e0:	4605      	mov	r5, r0
    99e2:	460e      	mov	r6, r1
    99e4:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    99e6:	4c1d      	ldr	r4, [pc, #116]	; (9a5c <z_impl_zsock_socket+0x80>)
    99e8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 9a60 <z_impl_zsock_socket+0x84>
    99ec:	4544      	cmp	r4, r8
    99ee:	d92b      	bls.n	9a48 <z_impl_zsock_socket+0x6c>
    99f0:	491c      	ldr	r1, [pc, #112]	; (9a64 <z_impl_zsock_socket+0x88>)
    99f2:	23dd      	movs	r3, #221	; 0xdd
    99f4:	4a1c      	ldr	r2, [pc, #112]	; (9a68 <z_impl_zsock_socket+0x8c>)
    99f6:	481d      	ldr	r0, [pc, #116]	; (9a6c <z_impl_zsock_socket+0x90>)
    99f8:	f008 ffe8 	bl	129cc <assert_print>
    99fc:	481c      	ldr	r0, [pc, #112]	; (9a70 <z_impl_zsock_socket+0x94>)
    99fe:	f008 ffe5 	bl	129cc <assert_print>
    9a02:	21dd      	movs	r1, #221	; 0xdd
    9a04:	e00f      	b.n	9a26 <z_impl_zsock_socket+0x4a>
		if (sock_family->family != family &&
    9a06:	6823      	ldr	r3, [r4, #0]
    9a08:	42ab      	cmp	r3, r5
    9a0a:	d000      	beq.n	9a0e <z_impl_zsock_socket+0x32>
    9a0c:	b9d3      	cbnz	r3, 9a44 <z_impl_zsock_socket+0x68>
		    sock_family->family != AF_UNSPEC) {
			continue;
		}

		NET_ASSERT(sock_family->is_supported);
    9a0e:	68a3      	ldr	r3, [r4, #8]
    9a10:	b963      	cbnz	r3, 9a2c <z_impl_zsock_socket+0x50>
    9a12:	4918      	ldr	r1, [pc, #96]	; (9a74 <z_impl_zsock_socket+0x98>)
    9a14:	23e3      	movs	r3, #227	; 0xe3
    9a16:	4a14      	ldr	r2, [pc, #80]	; (9a68 <z_impl_zsock_socket+0x8c>)
    9a18:	4814      	ldr	r0, [pc, #80]	; (9a6c <z_impl_zsock_socket+0x90>)
    9a1a:	f008 ffd7 	bl	129cc <assert_print>
    9a1e:	4816      	ldr	r0, [pc, #88]	; (9a78 <z_impl_zsock_socket+0x9c>)
    9a20:	f008 ffd4 	bl	129cc <assert_print>
    9a24:	21e3      	movs	r1, #227	; 0xe3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    9a26:	4810      	ldr	r0, [pc, #64]	; (9a68 <z_impl_zsock_socket+0x8c>)
    9a28:	f008 ffc9 	bl	129be <assert_post_action>

		if (!sock_family->is_supported(family, type, proto)) {
    9a2c:	463a      	mov	r2, r7
    9a2e:	4631      	mov	r1, r6
    9a30:	4628      	mov	r0, r5
    9a32:	4798      	blx	r3
    9a34:	b130      	cbz	r0, 9a44 <z_impl_zsock_socket+0x68>
			continue;
		}

		return sock_family->handler(family, type, proto);
    9a36:	463a      	mov	r2, r7
    9a38:	4631      	mov	r1, r6
    9a3a:	4628      	mov	r0, r5
    9a3c:	68e3      	ldr	r3, [r4, #12]
	}

	errno = EAFNOSUPPORT;
	return -1;
}
    9a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sock_family->handler(family, type, proto);
    9a42:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    9a44:	3410      	adds	r4, #16
    9a46:	e7d1      	b.n	99ec <z_impl_zsock_socket+0x10>
    9a48:	d3dd      	bcc.n	9a06 <z_impl_zsock_socket+0x2a>
	errno = EAFNOSUPPORT;
    9a4a:	f009 f81f 	bl	12a8c <__errno>
    9a4e:	236a      	movs	r3, #106	; 0x6a
    9a50:	6003      	str	r3, [r0, #0]
}
    9a52:	f04f 30ff 	mov.w	r0, #4294967295
    9a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a5a:	bf00      	nop
    9a5c:	00014bd4 	.word	0x00014bd4
    9a60:	00014be4 	.word	0x00014be4
    9a64:	00015737 	.word	0x00015737
    9a68:	000156e9 	.word	0x000156e9
    9a6c:	00015341 	.word	0x00015341
    9a70:	00015764 	.word	0x00015764
    9a74:	0001571d 	.word	0x0001571d
    9a78:	000156e6 	.word	0x000156e6

00009a7c <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
    9a7c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(ops);
    9a7e:	b948      	cbnz	r0, 9a94 <socket_offload_dns_register+0x18>
    9a80:	490b      	ldr	r1, [pc, #44]	; (9ab0 <socket_offload_dns_register+0x34>)
    9a82:	2313      	movs	r3, #19
    9a84:	4a0b      	ldr	r2, [pc, #44]	; (9ab4 <socket_offload_dns_register+0x38>)
    9a86:	480c      	ldr	r0, [pc, #48]	; (9ab8 <socket_offload_dns_register+0x3c>)
    9a88:	f008 ffa0 	bl	129cc <assert_print>
    9a8c:	2113      	movs	r1, #19
	__ASSERT_NO_MSG(dns_offload == NULL);
    9a8e:	4809      	ldr	r0, [pc, #36]	; (9ab4 <socket_offload_dns_register+0x38>)
    9a90:	f008 ff95 	bl	129be <assert_post_action>
    9a94:	4b09      	ldr	r3, [pc, #36]	; (9abc <socket_offload_dns_register+0x40>)
    9a96:	681a      	ldr	r2, [r3, #0]
    9a98:	b13a      	cbz	r2, 9aaa <socket_offload_dns_register+0x2e>
    9a9a:	4909      	ldr	r1, [pc, #36]	; (9ac0 <socket_offload_dns_register+0x44>)
    9a9c:	2314      	movs	r3, #20
    9a9e:	4a05      	ldr	r2, [pc, #20]	; (9ab4 <socket_offload_dns_register+0x38>)
    9aa0:	4805      	ldr	r0, [pc, #20]	; (9ab8 <socket_offload_dns_register+0x3c>)
    9aa2:	f008 ff93 	bl	129cc <assert_print>
    9aa6:	2114      	movs	r1, #20
    9aa8:	e7f1      	b.n	9a8e <socket_offload_dns_register+0x12>

	dns_offload = ops;
    9aaa:	6018      	str	r0, [r3, #0]
}
    9aac:	bd08      	pop	{r3, pc}
    9aae:	bf00      	nop
    9ab0:	000157c7 	.word	0x000157c7
    9ab4:	0001578c 	.word	0x0001578c
    9ab8:	00015341 	.word	0x00015341
    9abc:	2000cb54 	.word	0x2000cb54
    9ac0:	000157cb 	.word	0x000157cb

00009ac4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    9ac4:	4901      	ldr	r1, [pc, #4]	; (9acc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    9ac6:	2210      	movs	r2, #16
	str	r2, [r1]
    9ac8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    9aca:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    9acc:	e000ed10 	.word	0xe000ed10

00009ad0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    9ad0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    9ad2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    9ad4:	f380 8811 	msr	BASEPRI, r0
	isb
    9ad8:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    9adc:	f3bf 8f4f 	dsb	sy
    9ae0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    9ae2:	b662      	cpsie	i
	isb
    9ae4:	f3bf 8f6f 	isb	sy

	bx	lr
    9ae8:	4770      	bx	lr
    9aea:	bf00      	nop

00009aec <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    9aec:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    9aee:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    9af0:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    9af4:	f3bf 8f4f 	dsb	sy
    9af8:	bf20      	wfe

	msr	BASEPRI, r0
    9afa:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    9afe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    9b00:	4770      	bx	lr
    9b02:	bf00      	nop

00009b04 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    9b04:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    9b06:	2800      	cmp	r0, #0
    9b08:	db07      	blt.n	9b1a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9b0a:	2301      	movs	r3, #1
    9b0c:	0941      	lsrs	r1, r0, #5
    9b0e:	4a03      	ldr	r2, [pc, #12]	; (9b1c <arch_irq_enable+0x18>)
    9b10:	f000 001f 	and.w	r0, r0, #31
    9b14:	4083      	lsls	r3, r0
    9b16:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    9b1a:	4770      	bx	lr
    9b1c:	e000e100 	.word	0xe000e100

00009b20 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    9b20:	4b05      	ldr	r3, [pc, #20]	; (9b38 <arch_irq_is_enabled+0x18>)
    9b22:	0942      	lsrs	r2, r0, #5
    9b24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    9b28:	2301      	movs	r3, #1
    9b2a:	f000 001f 	and.w	r0, r0, #31
    9b2e:	fa03 f000 	lsl.w	r0, r3, r0
}
    9b32:	4010      	ands	r0, r2
    9b34:	4770      	bx	lr
    9b36:	bf00      	nop
    9b38:	e000e100 	.word	0xe000e100

00009b3c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    9b3c:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
    9b3e:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    9b40:	2b07      	cmp	r3, #7
{
    9b42:	4604      	mov	r4, r0
    9b44:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    9b46:	d90f      	bls.n	9b68 <z_arm_irq_priority_set+0x2c>
    9b48:	235b      	movs	r3, #91	; 0x5b
    9b4a:	4a10      	ldr	r2, [pc, #64]	; (9b8c <z_arm_irq_priority_set+0x50>)
    9b4c:	4910      	ldr	r1, [pc, #64]	; (9b90 <z_arm_irq_priority_set+0x54>)
    9b4e:	4811      	ldr	r0, [pc, #68]	; (9b94 <z_arm_irq_priority_set+0x58>)
    9b50:	f008 ff3c 	bl	129cc <assert_print>
    9b54:	4629      	mov	r1, r5
    9b56:	4810      	ldr	r0, [pc, #64]	; (9b98 <z_arm_irq_priority_set+0x5c>)
    9b58:	2307      	movs	r3, #7
    9b5a:	4622      	mov	r2, r4
    9b5c:	f008 ff36 	bl	129cc <assert_print>
    9b60:	215b      	movs	r1, #91	; 0x5b
    9b62:	480a      	ldr	r0, [pc, #40]	; (9b8c <z_arm_irq_priority_set+0x50>)
    9b64:	f008 ff2b 	bl	129be <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    9b68:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    9b6a:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9b6c:	bfac      	ite	ge
    9b6e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9b72:	4a0a      	ldrlt	r2, [pc, #40]	; (9b9c <z_arm_irq_priority_set+0x60>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9b74:	ea4f 1343 	mov.w	r3, r3, lsl #5
    9b78:	b2db      	uxtb	r3, r3
    9b7a:	bfab      	itete	ge
    9b7c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9b80:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9b84:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9b88:	5413      	strblt	r3, [r2, r0]
}
    9b8a:	bd38      	pop	{r3, r4, r5, pc}
    9b8c:	000157f9 	.word	0x000157f9
    9b90:	0001582f 	.word	0x0001582f
    9b94:	00015341 	.word	0x00015341
    9b98:	0001584a 	.word	0x0001584a
    9b9c:	e000ed14 	.word	0xe000ed14

00009ba0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    9ba0:	bf30      	wfi
    b z_SysNmiOnReset
    9ba2:	f7ff bffd 	b.w	9ba0 <z_SysNmiOnReset>
    9ba6:	bf00      	nop

00009ba8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    9ba8:	4a0b      	ldr	r2, [pc, #44]	; (9bd8 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    9baa:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    9bac:	4b0b      	ldr	r3, [pc, #44]	; (9bdc <z_arm_prep_c+0x34>)
    9bae:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    9bb2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    9bb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9bb8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    9bbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    9bc0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    9bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    9bc8:	f005 fb72 	bl	f2b0 <z_bss_zero>
	z_data_copy();
    9bcc:	f007 fd4a 	bl	11664 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    9bd0:	f000 fa62 	bl	a098 <z_arm_interrupt_init>
	z_cstart();
    9bd4:	f005 fbac 	bl	f330 <z_cstart>
    9bd8:	00008000 	.word	0x00008000
    9bdc:	e000ed00 	.word	0xe000ed00

00009be0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    9be0:	4a09      	ldr	r2, [pc, #36]	; (9c08 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    9be2:	490a      	ldr	r1, [pc, #40]	; (9c0c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    9be4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    9be6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    9be8:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    9bea:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    9bec:	4908      	ldr	r1, [pc, #32]	; (9c10 <arch_swap+0x30>)
    9bee:	684b      	ldr	r3, [r1, #4]
    9bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    9bf4:	604b      	str	r3, [r1, #4]
    9bf6:	2300      	movs	r3, #0
    9bf8:	f383 8811 	msr	BASEPRI, r3
    9bfc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    9c00:	6893      	ldr	r3, [r2, #8]
}
    9c02:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    9c04:	4770      	bx	lr
    9c06:	bf00      	nop
    9c08:	2000d1d4 	.word	0x2000d1d4
    9c0c:	00015130 	.word	0x00015130
    9c10:	e000ed00 	.word	0xe000ed00

00009c14 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    9c14:	4915      	ldr	r1, [pc, #84]	; (9c6c <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    9c16:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    9c18:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    9c1c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    9c20:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    9c22:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    9c26:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    9c2a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    9c2c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    9c30:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    9c34:	4f0e      	ldr	r7, [pc, #56]	; (9c70 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    9c36:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    9c3a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    9c3c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    9c3e:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    9c40:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    9c44:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    9c46:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    9c48:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    9c4a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    9c4e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    9c52:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    9c56:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    9c5a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    9c5e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    9c60:	f008 fee5 	bl	12a2e <configure_builtin_stack_guard>
    pop {r2, lr}
    9c64:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    9c68:	4770      	bx	lr
    9c6a:	0000      	.short	0x0000
    ldr r1, =_kernel
    9c6c:	2000d1d4 	.word	0x2000d1d4
    ldr v4, =_SCS_ICSR
    9c70:	e000ed04 	.word	0xe000ed04

00009c74 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    9c74:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    9c78:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    9c7a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    9c7e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    9c82:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    9c84:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    9c88:	2902      	cmp	r1, #2
    beq _oops
    9c8a:	d0ff      	beq.n	9c8c <_oops>

00009c8c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    9c8c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    9c8e:	f008 febf 	bl	12a10 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    9c92:	bd01      	pop	{r0, pc}

00009c94 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    9c94:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    9c98:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    9c9a:	490d      	ldr	r1, [pc, #52]	; (9cd0 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
    9c9c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    9ca0:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    9ca2:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    9ca6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    9caa:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    9cac:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    9cb0:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    9cb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    9cb8:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    9cbc:	2300      	movs	r3, #0
    9cbe:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    9cc0:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    9cc4:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    9cc6:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    9cc8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    9ccc:	4770      	bx	lr
    9cce:	bf00      	nop
    9cd0:	0001267d 	.word	0x0001267d

00009cd4 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    9cd4:	4b08      	ldr	r3, [pc, #32]	; (9cf8 <arch_switch_to_main_thread+0x24>)
    9cd6:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    9cd8:	6e83      	ldr	r3, [r0, #104]	; 0x68
    9cda:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    9cde:	4610      	mov	r0, r2
    9ce0:	f381 8809 	msr	PSP, r1
    9ce4:	2100      	movs	r1, #0
    9ce6:	b663      	cpsie	if
    9ce8:	f381 8811 	msr	BASEPRI, r1
    9cec:	f3bf 8f6f 	isb	sy
    9cf0:	2200      	movs	r2, #0
    9cf2:	2300      	movs	r3, #0
    9cf4:	f008 fcc2 	bl	1267c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    9cf8:	2000d1d4 	.word	0x2000d1d4

00009cfc <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    9cfc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    9cfe:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    9d00:	4a0b      	ldr	r2, [pc, #44]	; (9d30 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    9d02:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    9d04:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    9d06:	bf1e      	ittt	ne
	movne	r1, #0
    9d08:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    9d0a:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    9d0c:	f00a fade 	blne	142cc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    9d10:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    9d12:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    9d16:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    9d1a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    9d1e:	4905      	ldr	r1, [pc, #20]	; (9d34 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    9d20:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    9d22:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    9d24:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    9d26:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    9d2a:	4903      	ldr	r1, [pc, #12]	; (9d38 <_isr_wrapper+0x3c>)
	bx r1
    9d2c:	4708      	bx	r1
    9d2e:	0000      	.short	0x0000
	ldr r2, =_kernel
    9d30:	2000d1d4 	.word	0x2000d1d4
	ldr r1, =_sw_isr_table
    9d34:	000149ac 	.word	0x000149ac
	ldr r1, =z_arm_int_exit
    9d38:	00009d3d 	.word	0x00009d3d

00009d3c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    9d3c:	4b04      	ldr	r3, [pc, #16]	; (9d50 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    9d3e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    9d40:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    9d42:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    9d44:	d003      	beq.n	9d4e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    9d46:	4903      	ldr	r1, [pc, #12]	; (9d54 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    9d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    9d4c:	600a      	str	r2, [r1, #0]

00009d4e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    9d4e:	4770      	bx	lr
	ldr r3, =_kernel
    9d50:	2000d1d4 	.word	0x2000d1d4
	ldr r1, =_SCS_ICSR
    9d54:	e000ed04 	.word	0xe000ed04

00009d58 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    9d58:	4b15      	ldr	r3, [pc, #84]	; (9db0 <usage_fault.constprop.0+0x58>)
    9d5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    9d5c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    9d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    9d62:	bf14      	ite	ne
    9d64:	201e      	movne	r0, #30
    9d66:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    9d68:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    9d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    9d6e:	bf18      	it	ne
    9d70:	201f      	movne	r0, #31
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    9d72:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    9d76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
    9d78:	bf18      	it	ne
    9d7a:	2002      	movne	r0, #2
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    9d7c:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    9d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    9d82:	bf18      	it	ne
    9d84:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    9d86:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    9d8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    9d8c:	bf18      	it	ne
    9d8e:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    9d90:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    9d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    9d96:	bf18      	it	ne
    9d98:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    9d9a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    9d9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	return reason;
}
    9da0:	bf18      	it	ne
    9da2:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    9da4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    9da8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    9dac:	629a      	str	r2, [r3, #40]	; 0x28
}
    9dae:	4770      	bx	lr
    9db0:	e000ed00 	.word	0xe000ed00

00009db4 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    9db4:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    9db6:	4b19      	ldr	r3, [pc, #100]	; (9e1c <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    9db8:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    9dba:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    9dbc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    9dbe:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    9dc2:	bf14      	ite	ne
    9dc4:	2017      	movne	r0, #23
    9dc6:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    9dc8:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    9dcc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    9dce:	bf18      	it	ne
    9dd0:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    9dd2:	05a4      	lsls	r4, r4, #22
    9dd4:	d509      	bpl.n	9dea <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    9dd6:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    9dd8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    9dda:	0400      	lsls	r0, r0, #16
    9ddc:	d504      	bpl.n	9de8 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    9dde:	b11a      	cbz	r2, 9de8 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    9de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9de2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    9de6:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    9de8:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    9dea:	4b0c      	ldr	r3, [pc, #48]	; (9e1c <bus_fault.constprop.0+0x68>)
    9dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    9dee:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    9df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    9df4:	bf18      	it	ne
    9df6:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    9df8:	05d2      	lsls	r2, r2, #23
    9dfa:	d40c      	bmi.n	9e16 <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    9dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    9dfe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    9e02:	bf18      	it	ne
    9e04:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    9e06:	4a05      	ldr	r2, [pc, #20]	; (9e1c <bus_fault.constprop.0+0x68>)
    9e08:	6a93      	ldr	r3, [r2, #40]	; 0x28
    9e0a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    9e0e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    9e10:	2300      	movs	r3, #0
    9e12:	700b      	strb	r3, [r1, #0]
}
    9e14:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    9e16:	201b      	movs	r0, #27
    9e18:	e7f5      	b.n	9e06 <bus_fault.constprop.0+0x52>
    9e1a:	bf00      	nop
    9e1c:	e000ed00 	.word	0xe000ed00

00009e20 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    9e20:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    9e22:	4b26      	ldr	r3, [pc, #152]	; (9ebc <mem_manage_fault.constprop.0+0x9c>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    9e24:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    9e26:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    9e28:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    9e2a:	f010 0f10 	tst.w	r0, #16
    9e2e:	bf14      	ite	ne
    9e30:	2011      	movne	r0, #17
    9e32:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    9e34:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    9e38:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    9e3a:	bf18      	it	ne
    9e3c:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    9e3e:	07a4      	lsls	r4, r4, #30
    9e40:	d509      	bpl.n	9e56 <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
    9e42:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    9e44:	6a98      	ldr	r0, [r3, #40]	; 0x28
    9e46:	0600      	lsls	r0, r0, #24
    9e48:	d504      	bpl.n	9e54 <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    9e4a:	b11a      	cbz	r2, 9e54 <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    9e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9e4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    9e52:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    9e54:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    9e56:	4b19      	ldr	r3, [pc, #100]	; (9ebc <mem_manage_fault.constprop.0+0x9c>)
    9e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    9e5a:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    9e5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    9e60:	bf18      	it	ne
    9e62:	2014      	movne	r0, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    9e64:	f012 0f20 	tst.w	r2, #32
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    9e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    9e6a:	bf18      	it	ne
    9e6c:	2015      	movne	r0, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    9e6e:	06d2      	lsls	r2, r2, #27
    9e70:	d402      	bmi.n	9e78 <mem_manage_fault.constprop.0+0x58>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    9e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    9e74:	079b      	lsls	r3, r3, #30
    9e76:	d512      	bpl.n	9e9e <mem_manage_fault.constprop.0+0x7e>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    9e78:	4b10      	ldr	r3, [pc, #64]	; (9ebc <mem_manage_fault.constprop.0+0x9c>)
    9e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9e7c:	06dc      	lsls	r4, r3, #27
    9e7e:	d50e      	bpl.n	9e9e <mem_manage_fault.constprop.0+0x7e>
    9e80:	490f      	ldr	r1, [pc, #60]	; (9ec0 <mem_manage_fault.constprop.0+0xa0>)
    9e82:	f240 1361 	movw	r3, #353	; 0x161
    9e86:	4a0f      	ldr	r2, [pc, #60]	; (9ec4 <mem_manage_fault.constprop.0+0xa4>)
    9e88:	480f      	ldr	r0, [pc, #60]	; (9ec8 <mem_manage_fault.constprop.0+0xa8>)
    9e8a:	f008 fd9f 	bl	129cc <assert_print>
    9e8e:	480f      	ldr	r0, [pc, #60]	; (9ecc <mem_manage_fault.constprop.0+0xac>)
    9e90:	f008 fd9c 	bl	129cc <assert_print>
    9e94:	f240 1161 	movw	r1, #353	; 0x161
    9e98:	480a      	ldr	r0, [pc, #40]	; (9ec4 <mem_manage_fault.constprop.0+0xa4>)
    9e9a:	f008 fd90 	bl	129be <assert_post_action>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    9e9e:	4b07      	ldr	r3, [pc, #28]	; (9ebc <mem_manage_fault.constprop.0+0x9c>)
    9ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9ea2:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    9ea4:	bf42      	ittt	mi
    9ea6:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    9ea8:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    9eac:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    9eae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9eb0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    9eb4:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    9eb6:	2300      	movs	r3, #0
    9eb8:	700b      	strb	r3, [r1, #0]
}
    9eba:	bd10      	pop	{r4, pc}
    9ebc:	e000ed00 	.word	0xe000ed00
    9ec0:	000158c4 	.word	0x000158c4
    9ec4:	0001588a 	.word	0x0001588a
    9ec8:	00015341 	.word	0x00015341
    9ecc:	0001590e 	.word	0x0001590e

00009ed0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    9ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    9ed2:	4b5e      	ldr	r3, [pc, #376]	; (a04c <z_arm_fault+0x17c>)
{
    9ed4:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    9ed6:	685d      	ldr	r5, [r3, #4]
{
    9ed8:	b08b      	sub	sp, #44	; 0x2c
    9eda:	2300      	movs	r3, #0
    9edc:	f3c5 0508 	ubfx	r5, r5, #0, #9
    9ee0:	f383 8811 	msr	BASEPRI, r3
    9ee4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    9ee8:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    9eec:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    9ef0:	d10d      	bne.n	9f0e <z_arm_fault+0x3e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    9ef2:	f012 0301 	ands.w	r3, r2, #1
    9ef6:	d10a      	bne.n	9f0e <z_arm_fault+0x3e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    9ef8:	0656      	lsls	r6, r2, #25
    9efa:	d403      	bmi.n	9f04 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    9efc:	0710      	lsls	r0, r2, #28
    9efe:	d403      	bmi.n	9f08 <z_arm_fault+0x38>
			*nested_exc = true;
    9f00:	2601      	movs	r6, #1
    9f02:	e003      	b.n	9f0c <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    9f04:	0752      	lsls	r2, r2, #29
    9f06:	d500      	bpl.n	9f0a <z_arm_fault+0x3a>
			ptr_esf = (z_arch_esf_t *)psp;
    9f08:	460c      	mov	r4, r1
	*nested_exc = false;
    9f0a:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    9f0c:	b974      	cbnz	r4, 9f2c <z_arm_fault+0x5c>
    9f0e:	4950      	ldr	r1, [pc, #320]	; (a050 <z_arm_fault+0x180>)
    9f10:	f240 433e 	movw	r3, #1086	; 0x43e
    9f14:	4a4f      	ldr	r2, [pc, #316]	; (a054 <z_arm_fault+0x184>)
    9f16:	4850      	ldr	r0, [pc, #320]	; (a058 <z_arm_fault+0x188>)
    9f18:	f008 fd58 	bl	129cc <assert_print>
    9f1c:	484f      	ldr	r0, [pc, #316]	; (a05c <z_arm_fault+0x18c>)
    9f1e:	f008 fd55 	bl	129cc <assert_print>
    9f22:	f240 413e 	movw	r1, #1086	; 0x43e
			__ASSERT(0,
    9f26:	484b      	ldr	r0, [pc, #300]	; (a054 <z_arm_fault+0x184>)
    9f28:	f008 fd49 	bl	129be <assert_post_action>
	*recoverable = false;
    9f2c:	2200      	movs	r2, #0
    9f2e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    9f32:	1eea      	subs	r2, r5, #3
    9f34:	2a03      	cmp	r2, #3
    9f36:	d830      	bhi.n	9f9a <z_arm_fault+0xca>
    9f38:	e8df f002 	tbb	[pc, r2]
    9f3c:	5c7d7902 	.word	0x5c7d7902
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    9f40:	4a42      	ldr	r2, [pc, #264]	; (a04c <z_arm_fault+0x17c>)
    9f42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    9f44:	f011 0102 	ands.w	r1, r1, #2
    9f48:	d127      	bne.n	9f9a <z_arm_fault+0xca>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    9f4a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    9f4c:	2b00      	cmp	r3, #0
    9f4e:	db76      	blt.n	a03e <z_arm_fault+0x16e>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    9f50:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    9f52:	005b      	lsls	r3, r3, #1
    9f54:	d55e      	bpl.n	a014 <z_arm_fault+0x144>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    9f56:	6953      	ldr	r3, [r2, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    9f58:	69a1      	ldr	r1, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    9f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9f5e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    9f60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9f64:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    9f68:	6953      	ldr	r3, [r2, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    9f6a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    9f6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9f72:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    9f74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9f78:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    9f7c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    9f80:	4299      	cmp	r1, r3
    9f82:	d009      	beq.n	9f98 <z_arm_fault+0xc8>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    9f84:	6a93      	ldr	r3, [r2, #40]	; 0x28
    9f86:	b2db      	uxtb	r3, r3
    9f88:	b333      	cbz	r3, 9fd8 <z_arm_fault+0x108>
			reason = mem_manage_fault(esf, 1, recoverable);
    9f8a:	2001      	movs	r0, #1
    9f8c:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    9f90:	f7ff ff46 	bl	9e20 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
    9f94:	4603      	mov	r3, r0
		break;
    9f96:	e000      	b.n	9f9a <z_arm_fault+0xca>
			reason = esf->basic.r0;
    9f98:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    9f9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    9f9e:	b9ca      	cbnz	r2, 9fd4 <z_arm_fault+0x104>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    9fa0:	ad02      	add	r5, sp, #8
    9fa2:	f104 0720 	add.w	r7, r4, #32
    9fa6:	462a      	mov	r2, r5
    9fa8:	6820      	ldr	r0, [r4, #0]
    9faa:	6861      	ldr	r1, [r4, #4]
    9fac:	3408      	adds	r4, #8
    9fae:	c203      	stmia	r2!, {r0, r1}
    9fb0:	42bc      	cmp	r4, r7
    9fb2:	4615      	mov	r5, r2
    9fb4:	d1f7      	bne.n	9fa6 <z_arm_fault+0xd6>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    9fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9fb8:	2e00      	cmp	r6, #0
    9fba:	d042      	beq.n	a042 <z_arm_fault+0x172>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    9fbc:	f3c2 0108 	ubfx	r1, r2, #0, #9
    9fc0:	b921      	cbnz	r1, 9fcc <z_arm_fault+0xfc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    9fc2:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    9fc6:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    9fca:	9209      	str	r2, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    9fcc:	4618      	mov	r0, r3
    9fce:	a902      	add	r1, sp, #8
    9fd0:	f008 fd1c 	bl	12a0c <z_arm_fatal_error>
}
    9fd4:	b00b      	add	sp, #44	; 0x2c
    9fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    9fd8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    9fda:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    9fde:	d005      	beq.n	9fec <z_arm_fault+0x11c>
			reason = bus_fault(esf, 1, recoverable);
    9fe0:	2001      	movs	r0, #1
    9fe2:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    9fe6:	f7ff fee5 	bl	9db4 <bus_fault.constprop.0>
    9fea:	e7d3      	b.n	9f94 <z_arm_fault+0xc4>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    9fec:	6a93      	ldr	r3, [r2, #40]	; 0x28
    9fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    9ff2:	d302      	bcc.n	9ffa <z_arm_fault+0x12a>
		reason = usage_fault(esf);
    9ff4:	f7ff feb0 	bl	9d58 <usage_fault.constprop.0>
    9ff8:	e7cc      	b.n	9f94 <z_arm_fault+0xc4>
			__ASSERT(0,
    9ffa:	4919      	ldr	r1, [pc, #100]	; (a060 <z_arm_fault+0x190>)
    9ffc:	f44f 7344 	mov.w	r3, #784	; 0x310
    a000:	4a14      	ldr	r2, [pc, #80]	; (a054 <z_arm_fault+0x184>)
    a002:	4815      	ldr	r0, [pc, #84]	; (a058 <z_arm_fault+0x188>)
    a004:	f008 fce2 	bl	129cc <assert_print>
    a008:	4816      	ldr	r0, [pc, #88]	; (a064 <z_arm_fault+0x194>)
    a00a:	f008 fcdf 	bl	129cc <assert_print>
    a00e:	f44f 7144 	mov.w	r1, #784	; 0x310
    a012:	e788      	b.n	9f26 <z_arm_fault+0x56>
		__ASSERT(0,
    a014:	4912      	ldr	r1, [pc, #72]	; (a060 <z_arm_fault+0x190>)
    a016:	f44f 7345 	mov.w	r3, #788	; 0x314
    a01a:	4a0e      	ldr	r2, [pc, #56]	; (a054 <z_arm_fault+0x184>)
    a01c:	480e      	ldr	r0, [pc, #56]	; (a058 <z_arm_fault+0x188>)
    a01e:	f008 fcd5 	bl	129cc <assert_print>
    a022:	4811      	ldr	r0, [pc, #68]	; (a068 <z_arm_fault+0x198>)
    a024:	f008 fcd2 	bl	129cc <assert_print>
    a028:	f44f 7145 	mov.w	r1, #788	; 0x314
    a02c:	e77b      	b.n	9f26 <z_arm_fault+0x56>
		reason = mem_manage_fault(esf, 0, recoverable);
    a02e:	2000      	movs	r0, #0
    a030:	f10d 0107 	add.w	r1, sp, #7
    a034:	e7ac      	b.n	9f90 <z_arm_fault+0xc0>
		reason = bus_fault(esf, 0, recoverable);
    a036:	2000      	movs	r0, #0
    a038:	f10d 0107 	add.w	r1, sp, #7
    a03c:	e7d3      	b.n	9fe6 <z_arm_fault+0x116>
    a03e:	460b      	mov	r3, r1
    a040:	e7ab      	b.n	9f9a <z_arm_fault+0xca>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    a042:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
    a046:	f022 0201 	bic.w	r2, r2, #1
    a04a:	e7be      	b.n	9fca <z_arm_fault+0xfa>
    a04c:	e000ed00 	.word	0xe000ed00
    a050:	00015972 	.word	0x00015972
    a054:	0001588a 	.word	0x0001588a
    a058:	00015341 	.word	0x00015341
    a05c:	00015985 	.word	0x00015985
    a060:	00016f1f 	.word	0x00016f1f
    a064:	000159c3 	.word	0x000159c3
    a068:	000159e7 	.word	0x000159e7

0000a06c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    a06c:	4b04      	ldr	r3, [pc, #16]	; (a080 <z_arm_fault_init+0x14>)
    a06e:	695a      	ldr	r2, [r3, #20]
    a070:	f042 0210 	orr.w	r2, r2, #16
    a074:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    a076:	695a      	ldr	r2, [r3, #20]
    a078:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    a07c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    a07e:	4770      	bx	lr
    a080:	e000ed00 	.word	0xe000ed00

0000a084 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    a084:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    a088:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    a08c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    a08e:	4672      	mov	r2, lr
	bl z_arm_fault
    a090:	f7ff ff1e 	bl	9ed0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    a094:	bd01      	pop	{r0, pc}
    a096:	bf00      	nop

0000a098 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    a098:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a09a:	2120      	movs	r1, #32
    a09c:	4803      	ldr	r0, [pc, #12]	; (a0ac <z_arm_interrupt_init+0x14>)
    a09e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    a0a0:	3301      	adds	r3, #1
    a0a2:	2b41      	cmp	r3, #65	; 0x41
    a0a4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    a0a8:	d1f9      	bne.n	a09e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    a0aa:	4770      	bx	lr
    a0ac:	e000e100 	.word	0xe000e100

0000a0b0 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    a0b0:	2000      	movs	r0, #0
    msr CONTROL, r0
    a0b2:	f380 8814 	msr	CONTROL, r0
    isb
    a0b6:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    a0ba:	2000      	movs	r0, #0
    msr MSPLIM, r0
    a0bc:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    a0c0:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    a0c4:	f7ff faf4 	bl	96b0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    a0c8:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    a0ca:	490e      	ldr	r1, [pc, #56]	; (a104 <__start+0x54>)
    str r0, [r1]
    a0cc:	6008      	str	r0, [r1, #0]
    dsb
    a0ce:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    a0d2:	480d      	ldr	r0, [pc, #52]	; (a108 <__start+0x58>)
    msr msp, r0
    a0d4:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    a0d8:	f000 f83e 	bl	a158 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    a0dc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    a0de:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    a0e2:	480a      	ldr	r0, [pc, #40]	; (a10c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    a0e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    a0e8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    a0ea:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    a0ee:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    a0f2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    a0f4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    a0f6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    a0fa:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    a0fe:	f7ff fd53 	bl	9ba8 <z_arm_prep_c>
    a102:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    a104:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    a108:	20010138 	.word	0x20010138
    ldr r0, =z_interrupt_stacks
    a10c:	2000ebf8 	.word	0x2000ebf8

0000a110 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    a110:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    a114:	4905      	ldr	r1, [pc, #20]	; (a12c <sys_arch_reboot+0x1c>)
    a116:	4b06      	ldr	r3, [pc, #24]	; (a130 <sys_arch_reboot+0x20>)
    a118:	68ca      	ldr	r2, [r1, #12]
    a11a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    a11e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    a120:	60cb      	str	r3, [r1, #12]
    a122:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    a126:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    a128:	e7fd      	b.n	a126 <sys_arch_reboot+0x16>
    a12a:	bf00      	nop
    a12c:	e000ed00 	.word	0xe000ed00
    a130:	05fa0004 	.word	0x05fa0004

0000a134 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    a134:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    a136:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    a138:	4906      	ldr	r1, [pc, #24]	; (a154 <z_arm_clear_arm_mpu_config+0x20>)
    a13a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    a13e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    a142:	4293      	cmp	r3, r2
    a144:	db00      	blt.n	a148 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    a146:	4770      	bx	lr
  mpu->RNR = rnr;
    a148:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    a14c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    a150:	3301      	adds	r3, #1
    a152:	e7f6      	b.n	a142 <z_arm_clear_arm_mpu_config+0xe>
    a154:	e000ed00 	.word	0xe000ed00

0000a158 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    a158:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    a15a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    a15c:	2400      	movs	r4, #0
    a15e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    a162:	f7ff ffe7 	bl	a134 <z_arm_clear_arm_mpu_config>
    a166:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    a168:	f04f 30ff 	mov.w	r0, #4294967295
    a16c:	4a0c      	ldr	r2, [pc, #48]	; (a1a0 <z_arm_init_arch_hw_at_boot+0x48>)
    a16e:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    a172:	3301      	adds	r3, #1
    a174:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    a176:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    a17a:	d1f8      	bne.n	a16e <z_arm_init_arch_hw_at_boot+0x16>
    a17c:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    a17e:	f04f 30ff 	mov.w	r0, #4294967295
    a182:	4a07      	ldr	r2, [pc, #28]	; (a1a0 <z_arm_init_arch_hw_at_boot+0x48>)
    a184:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    a188:	3301      	adds	r3, #1
    a18a:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    a18c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    a190:	d1f8      	bne.n	a184 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    a192:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    a194:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a198:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    a19c:	bd10      	pop	{r4, pc}
    a19e:	bf00      	nop
    a1a0:	e000e100 	.word	0xe000e100

0000a1a4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    a1a4:	4b08      	ldr	r3, [pc, #32]	; (a1c8 <z_impl_k_thread_abort+0x24>)
    a1a6:	689b      	ldr	r3, [r3, #8]
    a1a8:	4283      	cmp	r3, r0
    a1aa:	d10b      	bne.n	a1c4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a1ac:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    a1b0:	b143      	cbz	r3, a1c4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    a1b2:	4b06      	ldr	r3, [pc, #24]	; (a1cc <z_impl_k_thread_abort+0x28>)
    a1b4:	685a      	ldr	r2, [r3, #4]
    a1b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    a1ba:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    a1bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a1be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    a1c2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    a1c4:	f007 b916 	b.w	113f4 <z_thread_abort>
    a1c8:	2000d1d4 	.word	0x2000d1d4
    a1cc:	e000ed00 	.word	0xe000ed00

0000a1d0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    a1d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    a1d2:	4c09      	ldr	r4, [pc, #36]	; (a1f8 <z_arm_configure_static_mpu_regions+0x28>)
    a1d4:	4a09      	ldr	r2, [pc, #36]	; (a1fc <z_arm_configure_static_mpu_regions+0x2c>)
    a1d6:	4623      	mov	r3, r4
    a1d8:	2101      	movs	r1, #1
    a1da:	4809      	ldr	r0, [pc, #36]	; (a200 <z_arm_configure_static_mpu_regions+0x30>)
    a1dc:	f000 f8ea 	bl	a3b4 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    a1e0:	2300      	movs	r3, #0
    a1e2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    a1e4:	4b07      	ldr	r3, [pc, #28]	; (a204 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    a1e6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    a1e8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    a1ea:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    a1ec:	9301      	str	r3, [sp, #4]
    a1ee:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    a1f0:	f000 f904 	bl	a3fc <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    a1f4:	b004      	add	sp, #16
    a1f6:	bd10      	pop	{r4, pc}
    a1f8:	20040000 	.word	0x20040000
    a1fc:	2000c580 	.word	0x2000c580
    a200:	00014cd8 	.word	0x00014cd8
    a204:	2000c7f8 	.word	0x2000c7f8

0000a208 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    a208:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    a20a:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    a20c:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    a20e:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    a212:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    a216:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    a218:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    a21a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    a21c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    a220:	4905      	ldr	r1, [pc, #20]	; (a238 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    a222:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    a226:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    a22a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    a22e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    a232:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    a236:	bd10      	pop	{r4, pc}
    a238:	e000ed00 	.word	0xe000ed00

0000a23c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    a23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a240:	460f      	mov	r7, r1
    a242:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    a244:	4606      	mov	r6, r0
    a246:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    a24a:	4d4e      	ldr	r5, [pc, #312]	; (a384 <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    a24c:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    a24e:	45b8      	cmp	r8, r7
    a250:	f280 8094 	bge.w	a37c <mpu_configure_regions_and_partition.constprop.0+0x140>
		if (regions[i].size == 0U) {
    a254:	f8d6 9004 	ldr.w	r9, [r6, #4]
    a258:	f1b9 0f00 	cmp.w	r9, #0
    a25c:	d036      	beq.n	a2cc <mpu_configure_regions_and_partition.constprop.0+0x90>
		&&
    a25e:	f1b9 0f1f 	cmp.w	r9, #31
    a262:	f240 8089 	bls.w	a378 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		&&
    a266:	f019 0f1f 	tst.w	r9, #31
    a26a:	f040 8085 	bne.w	a378 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		((part->start &
    a26e:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    a272:	f01a 0f1f 	tst.w	sl, #31
    a276:	d17f      	bne.n	a378 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    a278:	4650      	mov	r0, sl
    a27a:	f008 fbde 	bl	12a3a <arm_cmse_mpu_region_get>
    a27e:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    a280:	eb09 000a 	add.w	r0, r9, sl
    a284:	3801      	subs	r0, #1
    a286:	f008 fbd8 	bl	12a3a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    a28a:	4583      	cmp	fp, r0
    a28c:	d174      	bne.n	a378 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
    a28e:	f11b 0f16 	cmn.w	fp, #22
    a292:	d071      	beq.n	a378 <mpu_configure_regions_and_partition.constprop.0+0x13c>
    a294:	455c      	cmp	r4, fp
    a296:	dd6f      	ble.n	a378 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    a298:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    a29c:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    a2a0:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    a2a4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    a2a8:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    a2ac:	f043 0a1f 	orr.w	sl, r3, #31
		 * The new memory region is to be placed inside the underlying
		 * region, possibly splitting the underlying region into two.
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    a2b0:	e9d6 3200 	ldrd	r3, r2, [r6]
    a2b4:	441a      	add	r2, r3

		if ((regions[i].start == u_reg_base) &&
    a2b6:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    a2b8:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    a2bc:	d11e      	bne.n	a2fc <mpu_configure_regions_and_partition.constprop.0+0xc0>
    a2be:	45ca      	cmp	sl, r9
    a2c0:	d108      	bne.n	a2d4 <mpu_configure_regions_and_partition.constprop.0+0x98>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    a2c2:	4631      	mov	r1, r6
    a2c4:	fa5f f08b 	uxtb.w	r0, fp
    a2c8:	f008 fbc0 	bl	12a4c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    a2cc:	f108 0801 	add.w	r8, r8, #1
    a2d0:	360c      	adds	r6, #12
    a2d2:	e7bc      	b.n	a24e <mpu_configure_regions_and_partition.constprop.0+0x12>
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    a2d4:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    a2d6:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    a2da:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    a2de:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    a2e2:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    a2e6:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    a2e8:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    a2ec:	b2e0      	uxtb	r0, r4
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    a2ee:	f008 fbad 	bl	12a4c <mpu_configure_region>

			if (reg_index == -EINVAL) {
    a2f2:	f110 0f16 	cmn.w	r0, #22
    a2f6:	d03f      	beq.n	a378 <mpu_configure_regions_and_partition.constprop.0+0x13c>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    a2f8:	1c44      	adds	r4, r0, #1
    a2fa:	e7e7      	b.n	a2cc <mpu_configure_regions_and_partition.constprop.0+0x90>
	MPU->RNR = rnr;
    a2fc:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    a300:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    a304:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    a306:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    a30a:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    a30e:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    a310:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
    a312:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    a314:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    a316:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    a31a:	d0e8      	beq.n	a2ee <mpu_configure_regions_and_partition.constprop.0+0xb2>
				mpu_configure_region(reg_index, &regions[i]);
    a31c:	f008 fb96 	bl	12a4c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    a320:	f110 0f16 	cmn.w	r0, #22
    a324:	d028      	beq.n	a378 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    a326:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    a32a:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    a32e:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    a332:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = mpu_get_rbar() &
    a336:	f362 0304 	bfi	r3, r2, #0, #5
    a33a:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
    a33e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    a342:	f89d 2008 	ldrb.w	r2, [sp, #8]
    a346:	085b      	lsrs	r3, r3, #1
    a348:	f363 1247 	bfi	r2, r3, #5, #3
    a34c:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    a350:	e9d6 3200 	ldrd	r3, r2, [r6]
    a354:	4413      	add	r3, r2
    a356:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    a358:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    a35c:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    a35e:	4453      	add	r3, sl
    a360:	eba3 0309 	sub.w	r3, r3, r9
    a364:	b2c8      	uxtb	r0, r1
    a366:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    a36a:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    a36c:	9303      	str	r3, [sp, #12]
    a36e:	d803      	bhi.n	a378 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    a370:	4669      	mov	r1, sp
    a372:	f7ff ff49 	bl	a208 <region_init>
    a376:	e7bf      	b.n	a2f8 <mpu_configure_regions_and_partition.constprop.0+0xbc>
			return -EINVAL;
    a378:	f06f 0415 	mvn.w	r4, #21
		}
	}

	return reg_index;
}
    a37c:	4620      	mov	r0, r4
    a37e:	b005      	add	sp, #20
    a380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a384:	e000ed00 	.word	0xe000ed00

0000a388 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    a388:	2205      	movs	r2, #5
    a38a:	4b04      	ldr	r3, [pc, #16]	; (a39c <arm_core_mpu_enable+0x14>)
    a38c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    a390:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a394:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    a398:	4770      	bx	lr
    a39a:	bf00      	nop
    a39c:	e000ed00 	.word	0xe000ed00

0000a3a0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    a3a0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    a3a4:	2200      	movs	r2, #0
    a3a6:	4b02      	ldr	r3, [pc, #8]	; (a3b0 <arm_core_mpu_disable+0x10>)
    a3a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    a3ac:	4770      	bx	lr
    a3ae:	bf00      	nop
    a3b0:	e000ed00 	.word	0xe000ed00

0000a3b4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    a3b4:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    a3b6:	4d0c      	ldr	r5, [pc, #48]	; (a3e8 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    a3b8:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    a3ba:	782a      	ldrb	r2, [r5, #0]
    a3bc:	f7ff ff3e 	bl	a23c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    a3c0:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    a3c2:	3016      	adds	r0, #22
    a3c4:	d10f      	bne.n	a3e6 <arm_core_mpu_configure_static_mpu_regions+0x32>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    a3c6:	f44f 738d 	mov.w	r3, #282	; 0x11a
    a3ca:	4a08      	ldr	r2, [pc, #32]	; (a3ec <arm_core_mpu_configure_static_mpu_regions+0x38>)
    a3cc:	4908      	ldr	r1, [pc, #32]	; (a3f0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    a3ce:	4809      	ldr	r0, [pc, #36]	; (a3f4 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    a3d0:	f008 fafc 	bl	129cc <assert_print>
    a3d4:	4621      	mov	r1, r4
    a3d6:	4808      	ldr	r0, [pc, #32]	; (a3f8 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    a3d8:	f008 faf8 	bl	129cc <assert_print>
    a3dc:	f44f 718d 	mov.w	r1, #282	; 0x11a
    a3e0:	4802      	ldr	r0, [pc, #8]	; (a3ec <arm_core_mpu_configure_static_mpu_regions+0x38>)
    a3e2:	f008 faec 	bl	129be <assert_post_action>
			regions_num);
	}
}
    a3e6:	bd38      	pop	{r3, r4, r5, pc}
    a3e8:	2000d23a 	.word	0x2000d23a
    a3ec:	00015a1b 	.word	0x00015a1b
    a3f0:	00016f1f 	.word	0x00016f1f
    a3f4:	00015341 	.word	0x00015341
    a3f8:	00015a52 	.word	0x00015a52

0000a3fc <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    a3fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a400:	4e31      	ldr	r6, [pc, #196]	; (a4c8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    a402:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    a404:	4605      	mov	r5, r0
    a406:	f04f 0800 	mov.w	r8, #0
    a40a:	46b3      	mov	fp, r6
	MPU->RNR = rnr;
    a40c:	4f2f      	ldr	r7, [pc, #188]	; (a4cc <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    a40e:	45c8      	cmp	r8, r9
    a410:	db02      	blt.n	a418 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    a412:	b003      	add	sp, #12
    a414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    a418:	f8d5 a004 	ldr.w	sl, [r5, #4]
    a41c:	f1ba 0f00 	cmp.w	sl, #0
    a420:	d04c      	beq.n	a4bc <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    a422:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    a424:	4608      	mov	r0, r1
    a426:	9101      	str	r1, [sp, #4]
    a428:	f008 fb07 	bl	12a3a <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    a42c:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    a42e:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    a430:	eb0a 0001 	add.w	r0, sl, r1
    a434:	3801      	subs	r0, #1
    a436:	f008 fb00 	bl	12a3a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    a43a:	4284      	cmp	r4, r0
    a43c:	f04f 0214 	mov.w	r2, #20
    a440:	4b23      	ldr	r3, [pc, #140]	; (a4d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    a442:	d015      	beq.n	a470 <arm_core_mpu_mark_areas_for_dynamic_regions+0x74>
		dyn_reg_info[i].index =
    a444:	fb02 f308 	mul.w	r3, r2, r8
    a448:	f06f 0215 	mvn.w	r2, #21
    a44c:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    a450:	f44f 7395 	mov.w	r3, #298	; 0x12a
    a454:	4a1f      	ldr	r2, [pc, #124]	; (a4d4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    a456:	4920      	ldr	r1, [pc, #128]	; (a4d8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
    a458:	4820      	ldr	r0, [pc, #128]	; (a4dc <arm_core_mpu_mark_areas_for_dynamic_regions+0xe0>)
    a45a:	f008 fab7 	bl	129cc <assert_print>
    a45e:	4649      	mov	r1, r9
    a460:	481f      	ldr	r0, [pc, #124]	; (a4e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe4>)
    a462:	f008 fab3 	bl	129cc <assert_print>
    a466:	f44f 7195 	mov.w	r1, #298	; 0x12a
    a46a:	481a      	ldr	r0, [pc, #104]	; (a4d4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    a46c:	f008 faa7 	bl	129be <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    a470:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    a474:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    a476:	d0eb      	beq.n	a450 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    a478:	7819      	ldrb	r1, [r3, #0]
    a47a:	42a1      	cmp	r1, r4
    a47c:	dde8      	ble.n	a450 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = mpu_get_rbar() &
    a47e:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    a482:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    a486:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    a48a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    a48e:	f100 0108 	add.w	r1, r0, #8
    a492:	7b00      	ldrb	r0, [r0, #12]
    a494:	f364 0004 	bfi	r0, r4, #0, #5
    a498:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    a49a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    a49e:	790c      	ldrb	r4, [r1, #4]
    a4a0:	0840      	lsrs	r0, r0, #1
    a4a2:	f360 1447 	bfi	r4, r0, #5, #3
    a4a6:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    a4a8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    a4ac:	f021 011f 	bic.w	r1, r1, #31
    a4b0:	6071      	str	r1, [r6, #4]
	return MPU->RLAR;
    a4b2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    a4b6:	f021 011f 	bic.w	r1, r1, #31
    a4ba:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    a4bc:	f108 0801 	add.w	r8, r8, #1
    a4c0:	3614      	adds	r6, #20
    a4c2:	350c      	adds	r5, #12
    a4c4:	e7a3      	b.n	a40e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    a4c6:	bf00      	nop
    a4c8:	2000cb58 	.word	0x2000cb58
    a4cc:	e000ed00 	.word	0xe000ed00
    a4d0:	2000d23a 	.word	0x2000d23a
    a4d4:	00015a1b 	.word	0x00015a1b
    a4d8:	00016f1f 	.word	0x00016f1f
    a4dc:	00015341 	.word	0x00015341
    a4e0:	00015a7e 	.word	0x00015a7e

0000a4e4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    a4e4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    a4e6:	4d1f      	ldr	r5, [pc, #124]	; (a564 <z_arm_mpu_init+0x80>)
    a4e8:	682c      	ldr	r4, [r5, #0]
    a4ea:	2c10      	cmp	r4, #16
    a4ec:	d910      	bls.n	a510 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    a4ee:	f240 1351 	movw	r3, #337	; 0x151
    a4f2:	4a1d      	ldr	r2, [pc, #116]	; (a568 <z_arm_mpu_init+0x84>)
    a4f4:	491d      	ldr	r1, [pc, #116]	; (a56c <z_arm_mpu_init+0x88>)
    a4f6:	481e      	ldr	r0, [pc, #120]	; (a570 <z_arm_mpu_init+0x8c>)
    a4f8:	f008 fa68 	bl	129cc <assert_print>
    a4fc:	4621      	mov	r1, r4
    a4fe:	2210      	movs	r2, #16
    a500:	481c      	ldr	r0, [pc, #112]	; (a574 <z_arm_mpu_init+0x90>)
    a502:	f008 fa63 	bl	129cc <assert_print>
    a506:	f240 1151 	movw	r1, #337	; 0x151
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
    a50a:	4817      	ldr	r0, [pc, #92]	; (a568 <z_arm_mpu_init+0x84>)
    a50c:	f008 fa57 	bl	129be <assert_post_action>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    a510:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    a512:	f7ff ff45 	bl	a3a0 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    a516:	4b18      	ldr	r3, [pc, #96]	; (a578 <z_arm_mpu_init+0x94>)
    a518:	4a18      	ldr	r2, [pc, #96]	; (a57c <z_arm_mpu_init+0x98>)
    a51a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    a51e:	4284      	cmp	r4, r0
    a520:	d117      	bne.n	a552 <z_arm_mpu_init+0x6e>
	static_regions_num = mpu_config.num_regions;
    a522:	4b17      	ldr	r3, [pc, #92]	; (a580 <z_arm_mpu_init+0x9c>)
    a524:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    a526:	f7ff ff2f 	bl	a388 <arm_core_mpu_enable>
	__ASSERT(
    a52a:	4b13      	ldr	r3, [pc, #76]	; (a578 <z_arm_mpu_init+0x94>)
    a52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    a530:	f3c3 2307 	ubfx	r3, r3, #8, #8
    a534:	2b10      	cmp	r3, #16
    a536:	d013      	beq.n	a560 <z_arm_mpu_init+0x7c>
    a538:	4912      	ldr	r1, [pc, #72]	; (a584 <z_arm_mpu_init+0xa0>)
    a53a:	f240 13bb 	movw	r3, #443	; 0x1bb
    a53e:	4a0a      	ldr	r2, [pc, #40]	; (a568 <z_arm_mpu_init+0x84>)
    a540:	480b      	ldr	r0, [pc, #44]	; (a570 <z_arm_mpu_init+0x8c>)
    a542:	f008 fa43 	bl	129cc <assert_print>
    a546:	4810      	ldr	r0, [pc, #64]	; (a588 <z_arm_mpu_init+0xa4>)
    a548:	f008 fa40 	bl	129cc <assert_print>
    a54c:	f240 11bb 	movw	r1, #443	; 0x1bb
    a550:	e7db      	b.n	a50a <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    a552:	6869      	ldr	r1, [r5, #4]
    a554:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    a558:	f7ff fe56 	bl	a208 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    a55c:	3001      	adds	r0, #1
    a55e:	e7de      	b.n	a51e <z_arm_mpu_init+0x3a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    a560:	2000      	movs	r0, #0
    a562:	bd38      	pop	{r3, r4, r5, pc}
    a564:	00014ce4 	.word	0x00014ce4
    a568:	00015a1b 	.word	0x00015a1b
    a56c:	00016f1f 	.word	0x00016f1f
    a570:	00015341 	.word	0x00015341
    a574:	00015aad 	.word	0x00015aad
    a578:	e000ed00 	.word	0xe000ed00
    a57c:	0044ffaa 	.word	0x0044ffaa
    a580:	2000d23a 	.word	0x2000d23a
    a584:	00015ae1 	.word	0x00015ae1
    a588:	00015b32 	.word	0x00015b32

0000a58c <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(void)
{
    a58c:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    a58e:	4b0b      	ldr	r3, [pc, #44]	; (a5bc <malloc_prepare+0x30>)
    a590:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    a594:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    a598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    a59c:	d20c      	bcs.n	a5b8 <malloc_prepare+0x2c>
    a59e:	4908      	ldr	r1, [pc, #32]	; (a5c0 <malloc_prepare+0x34>)
    a5a0:	2380      	movs	r3, #128	; 0x80
    a5a2:	4a08      	ldr	r2, [pc, #32]	; (a5c4 <malloc_prepare+0x38>)
    a5a4:	4808      	ldr	r0, [pc, #32]	; (a5c8 <malloc_prepare+0x3c>)
    a5a6:	f008 fa11 	bl	129cc <assert_print>
    a5aa:	4808      	ldr	r0, [pc, #32]	; (a5cc <malloc_prepare+0x40>)
    a5ac:	f008 fa0e 	bl	129cc <assert_print>
    a5b0:	2180      	movs	r1, #128	; 0x80
    a5b2:	4804      	ldr	r0, [pc, #16]	; (a5c4 <malloc_prepare+0x38>)
    a5b4:	f008 fa03 	bl	129be <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    a5b8:	2000      	movs	r0, #0
    a5ba:	bd08      	pop	{r3, pc}
    a5bc:	20014538 	.word	0x20014538
    a5c0:	00015b83 	.word	0x00015b83
    a5c4:	00015b53 	.word	0x00015b53
    a5c8:	00015341 	.word	0x00015341
    a5cc:	00015bca 	.word	0x00015bca

0000a5d0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    a5d0:	4b01      	ldr	r3, [pc, #4]	; (a5d8 <__stdout_hook_install+0x8>)
    a5d2:	6018      	str	r0, [r3, #0]
}
    a5d4:	4770      	bx	lr
    a5d6:	bf00      	nop
    a5d8:	2000c588 	.word	0x2000c588

0000a5dc <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    a5dc:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    a5de:	4c07      	ldr	r4, [pc, #28]	; (a5fc <_sbrk+0x20>)
    a5e0:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    a5e2:	18c2      	adds	r2, r0, r3
    a5e4:	4806      	ldr	r0, [pc, #24]	; (a600 <_sbrk+0x24>)
    a5e6:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    a5ea:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    a5ee:	428a      	cmp	r2, r1
		heap_sz += count;
    a5f0:	bf36      	itet	cc
    a5f2:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    a5f4:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
    a5f8:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
    a5fa:	bd10      	pop	{r4, pc}
    a5fc:	2000cb6c 	.word	0x2000cb6c
    a600:	20014538 	.word	0x20014538

0000a604 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
    a604:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
    a606:	b958      	cbnz	r0, a620 <__retarget_lock_acquire_recursive+0x1c>
    a608:	4909      	ldr	r1, [pc, #36]	; (a630 <__retarget_lock_acquire_recursive+0x2c>)
    a60a:	480a      	ldr	r0, [pc, #40]	; (a634 <__retarget_lock_acquire_recursive+0x30>)
    a60c:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    a610:	4a09      	ldr	r2, [pc, #36]	; (a638 <__retarget_lock_acquire_recursive+0x34>)
    a612:	f008 f9db 	bl	129cc <assert_print>
    a616:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    a61a:	4807      	ldr	r0, [pc, #28]	; (a638 <__retarget_lock_acquire_recursive+0x34>)
    a61c:	f008 f9cf 	bl	129be <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
    a620:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
    a624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a628:	f04f 33ff 	mov.w	r3, #4294967295
    a62c:	f005 b97e 	b.w	f92c <z_impl_k_mutex_lock>
    a630:	00015c52 	.word	0x00015c52
    a634:	00015341 	.word	0x00015341
    a638:	00015b53 	.word	0x00015b53

0000a63c <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
    a63c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
    a63e:	b958      	cbnz	r0, a658 <__retarget_lock_release_recursive+0x1c>
    a640:	4907      	ldr	r1, [pc, #28]	; (a660 <__retarget_lock_release_recursive+0x24>)
    a642:	4808      	ldr	r0, [pc, #32]	; (a664 <__retarget_lock_release_recursive+0x28>)
    a644:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
    a648:	4a07      	ldr	r2, [pc, #28]	; (a668 <__retarget_lock_release_recursive+0x2c>)
    a64a:	f008 f9bf 	bl	129cc <assert_print>
    a64e:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
    a652:	4805      	ldr	r0, [pc, #20]	; (a668 <__retarget_lock_release_recursive+0x2c>)
    a654:	f008 f9b3 	bl	129be <assert_post_action>
	k_mutex_unlock((struct k_mutex *)lock);
}
    a658:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_mutex_unlock(mutex);
    a65c:	f005 ba36 	b.w	facc <z_impl_k_mutex_unlock>
    a660:	00015c52 	.word	0x00015c52
    a664:	00015341 	.word	0x00015341
    a668:	00015b53 	.word	0x00015b53

0000a66c <net_if_flag_set>:
 * @param iface Pointer to network interface
 * @param value Flag value
 */
static inline void net_if_flag_set(struct net_if *iface,
				   enum net_if_flag value)
{
    a66c:	b508      	push	{r3, lr}
	NET_ASSERT(iface);
    a66e:	b970      	cbnz	r0, a68e <net_if_flag_set+0x22>
    a670:	490d      	ldr	r1, [pc, #52]	; (a6a8 <net_if_flag_set+0x3c>)
    a672:	f44f 7307 	mov.w	r3, #540	; 0x21c
    a676:	4a0d      	ldr	r2, [pc, #52]	; (a6ac <net_if_flag_set+0x40>)
    a678:	480d      	ldr	r0, [pc, #52]	; (a6b0 <net_if_flag_set+0x44>)
    a67a:	f008 f9a7 	bl	129cc <assert_print>
    a67e:	480d      	ldr	r0, [pc, #52]	; (a6b4 <net_if_flag_set+0x48>)
    a680:	f008 f9a4 	bl	129cc <assert_print>
    a684:	f44f 7107 	mov.w	r1, #540	; 0x21c
    a688:	4808      	ldr	r0, [pc, #32]	; (a6ac <net_if_flag_set+0x40>)
    a68a:	f008 f998 	bl	129be <assert_post_action>
    a68e:	2201      	movs	r2, #1
    a690:	6803      	ldr	r3, [r0, #0]
    a692:	fa02 f101 	lsl.w	r1, r2, r1
    a696:	330c      	adds	r3, #12
    a698:	e8d3 0fef 	ldaex	r0, [r3]
    a69c:	4308      	orrs	r0, r1
    a69e:	e8c3 0fe2 	stlex	r2, r0, [r3]
    a6a2:	2a00      	cmp	r2, #0
    a6a4:	d1f8      	bne.n	a698 <net_if_flag_set+0x2c>

	atomic_set_bit(iface->if_dev->flags, value);
}
    a6a6:	bd08      	pop	{r3, pc}
    a6a8:	00015ce6 	.word	0x00015ce6
    a6ac:	00015cec 	.word	0x00015cec
    a6b0:	00015341 	.word	0x00015341
    a6b4:	000156e6 	.word	0x000156e6

0000a6b8 <net_if_flag_clear>:
 * @param iface Pointer to network interface
 * @param value Flag value
 */
static inline void net_if_flag_clear(struct net_if *iface,
				     enum net_if_flag value)
{
    a6b8:	b508      	push	{r3, lr}
	NET_ASSERT(iface);
    a6ba:	b970      	cbnz	r0, a6da <net_if_flag_clear+0x22>
    a6bc:	490e      	ldr	r1, [pc, #56]	; (a6f8 <net_if_flag_clear+0x40>)
    a6be:	f240 233a 	movw	r3, #570	; 0x23a
    a6c2:	4a0e      	ldr	r2, [pc, #56]	; (a6fc <net_if_flag_clear+0x44>)
    a6c4:	480e      	ldr	r0, [pc, #56]	; (a700 <net_if_flag_clear+0x48>)
    a6c6:	f008 f981 	bl	129cc <assert_print>
    a6ca:	480e      	ldr	r0, [pc, #56]	; (a704 <net_if_flag_clear+0x4c>)
    a6cc:	f008 f97e 	bl	129cc <assert_print>
    a6d0:	f240 213a 	movw	r1, #570	; 0x23a
    a6d4:	4809      	ldr	r0, [pc, #36]	; (a6fc <net_if_flag_clear+0x44>)
    a6d6:	f008 f972 	bl	129be <assert_post_action>
	atomic_val_t mask = ATOMIC_MASK(bit);
    a6da:	2301      	movs	r3, #1
    a6dc:	fa03 f101 	lsl.w	r1, r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a6e0:	43c9      	mvns	r1, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a6e2:	6802      	ldr	r2, [r0, #0]
    a6e4:	f102 030c 	add.w	r3, r2, #12
    a6e8:	e8d3 0fef 	ldaex	r0, [r3]
    a6ec:	4008      	ands	r0, r1
    a6ee:	e8c3 0fe2 	stlex	r2, r0, [r3]
    a6f2:	2a00      	cmp	r2, #0
    a6f4:	d1f8      	bne.n	a6e8 <net_if_flag_clear+0x30>

	atomic_clear_bit(iface->if_dev->flags, value);
}
    a6f6:	bd08      	pop	{r3, pc}
    a6f8:	00015ce6 	.word	0x00015ce6
    a6fc:	00015cec 	.word	0x00015cec
    a700:	00015341 	.word	0x00015341
    a704:	000156e6 	.word	0x000156e6

0000a708 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
    a708:	4602      	mov	r2, r0
    a70a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    a70c:	4801      	ldr	r0, [pc, #4]	; (a714 <k_mutex_lock.constprop.0.isra.0+0xc>)
    a70e:	f005 b90d 	b.w	f92c <z_impl_k_mutex_lock>
    a712:	bf00      	nop
    a714:	2000c768 	.word	0x2000c768

0000a718 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    a718:	4801      	ldr	r0, [pc, #4]	; (a720 <k_mutex_unlock.constprop.0.isra.0+0x8>)
    a71a:	f005 b9d7 	b.w	facc <z_impl_k_mutex_unlock>
    a71e:	bf00      	nop
    a720:	2000c768 	.word	0x2000c768

0000a724 <update_operational_state>:
	return "";
#endif /* CONFIG_NET_IF_LOG_LEVEL >= LOG_LEVEL_DBG */
}

static void update_operational_state(struct net_if *iface)
{
    a724:	b510      	push	{r4, lr}
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
    a726:	6803      	ldr	r3, [r0, #0]
 */
static inline bool net_if_is_admin_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_UP);
    a728:	2100      	movs	r1, #0
{
    a72a:	4604      	mov	r4, r0
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
    a72c:	f893 2020 	ldrb.w	r2, [r3, #32]
    a730:	f008 f9c3 	bl	12aba <net_if_flag_is_set>
	enum net_if_oper_state new_state = NET_IF_OPER_UNKNOWN;

	if (!net_if_is_admin_up(iface)) {
    a734:	b978      	cbnz	r0, a756 <update_operational_state+0x32>
		iface->if_dev->oper_state = oper_state;
    a736:	2102      	movs	r1, #2
    a738:	6823      	ldr	r3, [r4, #0]
    a73a:	f883 1020 	strb.w	r1, [r3, #32]
	return iface->if_dev->oper_state;
    a73e:	6823      	ldr	r3, [r4, #0]
	}

	new_state = NET_IF_OPER_UP;

exit:
	if (net_if_oper_state_set(iface, new_state) != new_state) {
    a740:	f893 3020 	ldrb.w	r3, [r3, #32]
    a744:	428b      	cmp	r3, r1
    a746:	d13e      	bne.n	a7c6 <update_operational_state+0xa2>
	if (net_if_oper_state(iface) == NET_IF_OPER_UP) {
		if (prev_state != NET_IF_OPER_UP) {
			notify_iface_up(iface);
		}
	} else {
		if (prev_state == NET_IF_OPER_UP) {
    a748:	2a06      	cmp	r2, #6
    a74a:	d13c      	bne.n	a7c6 <update_operational_state+0xa2>
	net_if_flag_clear(iface, NET_IF_RUNNING);
    a74c:	2108      	movs	r1, #8
    a74e:	4620      	mov	r0, r4
    a750:	f7ff ffb2 	bl	a6b8 <net_if_flag_clear>
	return (iface->if_dev->socket_offload != NULL);
    a754:	e02f      	b.n	a7b6 <update_operational_state+0x92>
 */
static inline bool net_if_is_carrier_ok(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_LOWER_UP);
    a756:	2109      	movs	r1, #9
    a758:	4620      	mov	r0, r4
    a75a:	f008 f9ae 	bl	12aba <net_if_flag_is_set>
	if (!net_if_is_carrier_ok(iface)) {
    a75e:	2800      	cmp	r0, #0
    a760:	d0e9      	beq.n	a736 <update_operational_state+0x12>
 */
static inline bool net_if_is_dormant(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_DORMANT);
    a762:	210a      	movs	r1, #10
    a764:	4620      	mov	r0, r4
    a766:	f008 f9a8 	bl	12aba <net_if_flag_is_set>
		iface->if_dev->oper_state = oper_state;
    a76a:	6823      	ldr	r3, [r4, #0]
    a76c:	f1c0 0006 	rsb	r0, r0, #6
    a770:	b2c0      	uxtb	r0, r0
    a772:	f883 0020 	strb.w	r0, [r3, #32]
	return iface->if_dev->oper_state;
    a776:	6823      	ldr	r3, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
    a778:	f893 1020 	ldrb.w	r1, [r3, #32]
    a77c:	4281      	cmp	r1, r0
    a77e:	d122      	bne.n	a7c6 <update_operational_state+0xa2>
	if (net_if_oper_state(iface) == NET_IF_OPER_UP) {
    a780:	2906      	cmp	r1, #6
    a782:	d1e1      	bne.n	a748 <update_operational_state+0x24>
		if (prev_state != NET_IF_OPER_UP) {
    a784:	2a06      	cmp	r2, #6
    a786:	d01e      	beq.n	a7c6 <update_operational_state+0xa2>
		if (!is_iface_offloaded(iface)) {
    a788:	69da      	ldr	r2, [r3, #28]
    a78a:	b982      	cbnz	r2, a7ae <update_operational_state+0x8a>
			NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
    a78c:	691b      	ldr	r3, [r3, #16]
    a78e:	b973      	cbnz	r3, a7ae <update_operational_state+0x8a>
    a790:	490d      	ldr	r1, [pc, #52]	; (a7c8 <update_operational_state+0xa4>)
    a792:	f44f 637e 	mov.w	r3, #4064	; 0xfe0
    a796:	4a0d      	ldr	r2, [pc, #52]	; (a7cc <update_operational_state+0xa8>)
    a798:	480d      	ldr	r0, [pc, #52]	; (a7d0 <update_operational_state+0xac>)
    a79a:	f008 f917 	bl	129cc <assert_print>
    a79e:	480d      	ldr	r0, [pc, #52]	; (a7d4 <update_operational_state+0xb0>)
    a7a0:	f008 f914 	bl	129cc <assert_print>
    a7a4:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
    a7a8:	4808      	ldr	r0, [pc, #32]	; (a7cc <update_operational_state+0xa8>)
    a7aa:	f008 f908 	bl	129be <assert_post_action>
	net_if_flag_set(iface, NET_IF_RUNNING);
    a7ae:	2108      	movs	r1, #8
    a7b0:	4620      	mov	r0, r4
    a7b2:	f7ff ff5b 	bl	a66c <net_if_flag_set>
	return (iface->if_dev->socket_offload != NULL);
    a7b6:	6823      	ldr	r3, [r4, #0]
	if (!is_iface_offloaded(iface) &&
    a7b8:	69db      	ldr	r3, [r3, #28]
    a7ba:	b923      	cbnz	r3, a7c6 <update_operational_state+0xa2>
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
    a7bc:	4620      	mov	r0, r4
			notify_iface_down(iface);
		}
	}
}
    a7be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
    a7c2:	f008 b983 	b.w	12acc <l2_flags_get.isra.0>
}
    a7c6:	bd10      	pop	{r4, pc}
    a7c8:	00015d1b 	.word	0x00015d1b
    a7cc:	00015cbc 	.word	0x00015cbc
    a7d0:	00015341 	.word	0x00015341
    a7d4:	000156e6 	.word	0x000156e6

0000a7d8 <net_if_flag_test_and_set>:
{
    a7d8:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
    a7da:	b970      	cbnz	r0, a7fa <net_if_flag_test_and_set+0x22>
    a7dc:	4910      	ldr	r1, [pc, #64]	; (a820 <net_if_flag_test_and_set+0x48>)
    a7de:	f44f 730b 	mov.w	r3, #556	; 0x22c
    a7e2:	4a10      	ldr	r2, [pc, #64]	; (a824 <net_if_flag_test_and_set+0x4c>)
    a7e4:	4810      	ldr	r0, [pc, #64]	; (a828 <net_if_flag_test_and_set+0x50>)
    a7e6:	f008 f8f1 	bl	129cc <assert_print>
    a7ea:	4810      	ldr	r0, [pc, #64]	; (a82c <net_if_flag_test_and_set+0x54>)
    a7ec:	f008 f8ee 	bl	129cc <assert_print>
    a7f0:	f44f 710b 	mov.w	r1, #556	; 0x22c
    a7f4:	480b      	ldr	r0, [pc, #44]	; (a824 <net_if_flag_test_and_set+0x4c>)
    a7f6:	f008 f8e2 	bl	129be <assert_post_action>
	atomic_val_t mask = ATOMIC_MASK(bit);
    a7fa:	2301      	movs	r3, #1
    a7fc:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a800:	6803      	ldr	r3, [r0, #0]
    a802:	330c      	adds	r3, #12
    a804:	e8d3 2fef 	ldaex	r2, [r3]
    a808:	ea42 0001 	orr.w	r0, r2, r1
    a80c:	e8c3 0fe4 	stlex	r4, r0, [r3]
    a810:	2c00      	cmp	r4, #0
    a812:	d1f7      	bne.n	a804 <net_if_flag_test_and_set+0x2c>
	return (old & mask) != 0;
    a814:	4211      	tst	r1, r2
}
    a816:	bf14      	ite	ne
    a818:	2001      	movne	r0, #1
    a81a:	2000      	moveq	r0, #0
    a81c:	bd10      	pop	{r4, pc}
    a81e:	bf00      	nop
    a820:	00015ce6 	.word	0x00015ce6
    a824:	00015cec 	.word	0x00015cec
    a828:	00015341 	.word	0x00015341
    a82c:	000156e6 	.word	0x000156e6

0000a830 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
    a830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
    a832:	f04f 30ff 	mov.w	r0, #4294967295
    a836:	f04f 31ff 	mov.w	r1, #4294967295
    a83a:	f7ff ff65 	bl	a708 <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
    a83e:	4c15      	ldr	r4, [pc, #84]	; (a894 <net_if_init+0x64>)
    a840:	4f15      	ldr	r7, [pc, #84]	; (a898 <net_if_init+0x68>)
    a842:	42bc      	cmp	r4, r7
    a844:	4625      	mov	r5, r4
    a846:	d91f      	bls.n	a888 <net_if_init+0x58>
    a848:	4914      	ldr	r1, [pc, #80]	; (a89c <net_if_init+0x6c>)
    a84a:	f241 13ad 	movw	r3, #4525	; 0x11ad
    a84e:	4a14      	ldr	r2, [pc, #80]	; (a8a0 <net_if_init+0x70>)
    a850:	4814      	ldr	r0, [pc, #80]	; (a8a4 <net_if_init+0x74>)
    a852:	f008 f8bb 	bl	129cc <assert_print>
    a856:	4814      	ldr	r0, [pc, #80]	; (a8a8 <net_if_init+0x78>)
    a858:	f008 f8b8 	bl	129cc <assert_print>
    a85c:	f241 11ad 	movw	r1, #4525	; 0x11ad
    a860:	480f      	ldr	r0, [pc, #60]	; (a8a0 <net_if_init+0x70>)
    a862:	f008 f8ac 	bl	129be <assert_post_action>
	return iface->if_dev->dev;
    a866:	682b      	ldr	r3, [r5, #0]
    a868:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
    a86a:	681b      	ldr	r3, [r3, #0]
    a86c:	689e      	ldr	r6, [r3, #8]
	if (!api || !api->init) {
    a86e:	2e00      	cmp	r6, #0
    a870:	d0e7      	beq.n	a842 <net_if_init+0x12>
    a872:	6833      	ldr	r3, [r6, #0]
    a874:	2b00      	cmp	r3, #0
    a876:	d0e4      	beq.n	a842 <net_if_init+0x12>
	net_if_flag_test_and_set(iface, NET_IF_LOWER_UP);
    a878:	2109      	movs	r1, #9
    a87a:	4628      	mov	r0, r5
    a87c:	f7ff ffac 	bl	a7d8 <net_if_flag_test_and_set>
	api->init(iface);
    a880:	4628      	mov	r0, r5
    a882:	6833      	ldr	r3, [r6, #0]
    a884:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
    a886:	e7dc      	b.n	a842 <net_if_init+0x12>
    a888:	d3ed      	bcc.n	a866 <net_if_init+0x36>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
    a88a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
    a88e:	f7ff bf43 	b.w	a718 <k_mutex_unlock.constprop.0.isra.0>
    a892:	bf00      	nop
    a894:	2000c7c0 	.word	0x2000c7c0
    a898:	2000c7c4 	.word	0x2000c7c4
    a89c:	00015d4c 	.word	0x00015d4c
    a8a0:	00015cbc 	.word	0x00015cbc
    a8a4:	00015341 	.word	0x00015341
    a8a8:	00015764 	.word	0x00015764

0000a8ac <net_if_post_init>:

void net_if_post_init(void)
{
    a8ac:	b538      	push	{r3, r4, r5, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
    a8ae:	4c0f      	ldr	r4, [pc, #60]	; (a8ec <net_if_post_init+0x40>)
    a8b0:	4d0f      	ldr	r5, [pc, #60]	; (a8f0 <net_if_post_init+0x44>)
    a8b2:	42ac      	cmp	r4, r5
    a8b4:	d918      	bls.n	a8e8 <net_if_post_init+0x3c>
    a8b6:	490f      	ldr	r1, [pc, #60]	; (a8f4 <net_if_post_init+0x48>)
    a8b8:	f241 13df 	movw	r3, #4575	; 0x11df
    a8bc:	4a0e      	ldr	r2, [pc, #56]	; (a8f8 <net_if_post_init+0x4c>)
    a8be:	480f      	ldr	r0, [pc, #60]	; (a8fc <net_if_post_init+0x50>)
    a8c0:	f008 f884 	bl	129cc <assert_print>
    a8c4:	480e      	ldr	r0, [pc, #56]	; (a900 <net_if_post_init+0x54>)
    a8c6:	f008 f881 	bl	129cc <assert_print>
    a8ca:	f241 11df 	movw	r1, #4575	; 0x11df
    a8ce:	480a      	ldr	r0, [pc, #40]	; (a8f8 <net_if_post_init+0x4c>)
    a8d0:	f008 f875 	bl	129be <assert_post_action>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
    a8d4:	2103      	movs	r1, #3
    a8d6:	4620      	mov	r0, r4
    a8d8:	f008 f8ef 	bl	12aba <net_if_flag_is_set>
    a8dc:	b910      	cbnz	r0, a8e4 <net_if_post_init+0x38>
			net_if_up(iface);
    a8de:	4620      	mov	r0, r4
    a8e0:	f008 f900 	bl	12ae4 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
    a8e4:	3404      	adds	r4, #4
    a8e6:	e7e4      	b.n	a8b2 <net_if_post_init+0x6>
    a8e8:	d3f4      	bcc.n	a8d4 <net_if_post_init+0x28>
		}
	}
}
    a8ea:	bd38      	pop	{r3, r4, r5, pc}
    a8ec:	2000c7c0 	.word	0x2000c7c0
    a8f0:	2000c7c4 	.word	0x2000c7c4
    a8f4:	00015d4c 	.word	0x00015d4c
    a8f8:	00015cbc 	.word	0x00015cbc
    a8fc:	00015341 	.word	0x00015341
    a900:	00015764 	.word	0x00015764

0000a904 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    a904:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    a906:	2340      	movs	r3, #64	; 0x40
{
    a908:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    a90a:	490a      	ldr	r1, [pc, #40]	; (a934 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    a90c:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    a90e:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    a910:	1149      	asrs	r1, r1, #5
{
    a912:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    a914:	4623      	mov	r3, r4
    a916:	4a08      	ldr	r2, [pc, #32]	; (a938 <onoff_start+0x34>)
    a918:	4808      	ldr	r0, [pc, #32]	; (a93c <onoff_start+0x38>)
    a91a:	f008 f91d 	bl	12b58 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    a91e:	1e01      	subs	r1, r0, #0
    a920:	da05      	bge.n	a92e <onoff_start+0x2a>
		notify(mgr, err);
    a922:	4628      	mov	r0, r5
    a924:	4623      	mov	r3, r4
	}
}
    a926:	b003      	add	sp, #12
    a928:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    a92c:	4718      	bx	r3
}
    a92e:	b003      	add	sp, #12
    a930:	bd30      	pop	{r4, r5, pc}
    a932:	bf00      	nop
    a934:	2000cb84 	.word	0x2000cb84
    a938:	00012bc5 	.word	0x00012bc5
    a93c:	00014934 	.word	0x00014934

0000a940 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    a940:	b2c9      	uxtb	r1, r1
    a942:	2901      	cmp	r1, #1
{
    a944:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    a946:	d909      	bls.n	a95c <get_status+0x1c>
    a948:	4908      	ldr	r1, [pc, #32]	; (a96c <get_status+0x2c>)
    a94a:	4809      	ldr	r0, [pc, #36]	; (a970 <get_status+0x30>)
    a94c:	237a      	movs	r3, #122	; 0x7a
    a94e:	4a09      	ldr	r2, [pc, #36]	; (a974 <get_status+0x34>)
    a950:	f008 f83c 	bl	129cc <assert_print>
    a954:	217a      	movs	r1, #122	; 0x7a
    a956:	4807      	ldr	r0, [pc, #28]	; (a974 <get_status+0x34>)
    a958:	f008 f831 	bl	129be <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    a95c:	220c      	movs	r2, #12
    a95e:	6903      	ldr	r3, [r0, #16]
    a960:	fb01 3302 	mla	r3, r1, r2, r3
    a964:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
    a966:	f000 0007 	and.w	r0, r0, #7
    a96a:	bd08      	pop	{r3, pc}
    a96c:	00015de0 	.word	0x00015de0
    a970:	00015341 	.word	0x00015341
    a974:	00015da3 	.word	0x00015da3

0000a978 <stop>:
{
    a978:	b570      	push	{r4, r5, r6, lr}
    a97a:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    a97c:	2901      	cmp	r1, #1
	struct nrf_clock_control_data *data = dev->data;
    a97e:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    a980:	d90b      	bls.n	a99a <stop+0x22>
    a982:	4919      	ldr	r1, [pc, #100]	; (a9e8 <stop+0x70>)
    a984:	4819      	ldr	r0, [pc, #100]	; (a9ec <stop+0x74>)
    a986:	f240 135d 	movw	r3, #349	; 0x15d
    a98a:	4a19      	ldr	r2, [pc, #100]	; (a9f0 <stop+0x78>)
    a98c:	f008 f81e 	bl	129cc <assert_print>
    a990:	f240 115d 	movw	r1, #349	; 0x15d
    a994:	4816      	ldr	r0, [pc, #88]	; (a9f0 <stop+0x78>)
    a996:	f008 f812 	bl	129be <assert_post_action>
	__asm__ volatile(
    a99a:	f04f 0420 	mov.w	r4, #32
    a99e:	f3ef 8511 	mrs	r5, BASEPRI
    a9a2:	f384 8812 	msr	BASEPRI_MAX, r4
    a9a6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    a9aa:	260c      	movs	r6, #12
    a9ac:	fb06 3401 	mla	r4, r6, r1, r3
    a9b0:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    a9b2:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    a9b6:	d008      	beq.n	a9ca <stop+0x52>
    a9b8:	42a2      	cmp	r2, r4
    a9ba:	d006      	beq.n	a9ca <stop+0x52>
	__asm__ volatile(
    a9bc:	f385 8811 	msr	BASEPRI, r5
    a9c0:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    a9c4:	f04f 30ff 	mov.w	r0, #4294967295
}
    a9c8:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    a9ca:	2201      	movs	r2, #1
    a9cc:	fb06 3301 	mla	r3, r6, r1, r3
    a9d0:	649a      	str	r2, [r3, #72]	; 0x48
    a9d2:	f385 8811 	msr	BASEPRI, r5
    a9d6:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    a9da:	6843      	ldr	r3, [r0, #4]
    a9dc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    a9e0:	685b      	ldr	r3, [r3, #4]
    a9e2:	4798      	blx	r3
	return 0;
    a9e4:	2000      	movs	r0, #0
    a9e6:	e7ef      	b.n	a9c8 <stop+0x50>
    a9e8:	00015de0 	.word	0x00015de0
    a9ec:	00015341 	.word	0x00015341
    a9f0:	00015da3 	.word	0x00015da3

0000a9f4 <onoff_stop>:
{
    a9f4:	b570      	push	{r4, r5, r6, lr}
    a9f6:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    a9f8:	4906      	ldr	r1, [pc, #24]	; (aa14 <onoff_stop+0x20>)
{
    a9fa:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    a9fc:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    a9fe:	1149      	asrs	r1, r1, #5
    aa00:	2240      	movs	r2, #64	; 0x40
    aa02:	4805      	ldr	r0, [pc, #20]	; (aa18 <onoff_stop+0x24>)
    aa04:	f7ff ffb8 	bl	a978 <stop>
	notify(mgr, res);
    aa08:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    aa0a:	4601      	mov	r1, r0
	notify(mgr, res);
    aa0c:	4620      	mov	r0, r4
}
    aa0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    aa12:	4718      	bx	r3
    aa14:	2000cb84 	.word	0x2000cb84
    aa18:	00014934 	.word	0x00014934

0000aa1c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    aa1c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    aa1e:	2200      	movs	r2, #0
    aa20:	2101      	movs	r1, #1
{
    aa22:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    aa24:	2005      	movs	r0, #5
    aa26:	f7ff f889 	bl	9b3c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    aa2a:	480f      	ldr	r0, [pc, #60]	; (aa68 <clk_init+0x4c>)
    aa2c:	f001 ff8a 	bl	c944 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    aa30:	4b0e      	ldr	r3, [pc, #56]	; (aa6c <clk_init+0x50>)
    aa32:	4298      	cmp	r0, r3
    aa34:	d115      	bne.n	aa62 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    aa36:	f001 ffa9 	bl	c98c <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    aa3a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    aa3c:	490c      	ldr	r1, [pc, #48]	; (aa70 <clk_init+0x54>)
    aa3e:	4630      	mov	r0, r6
    aa40:	f007 ff7f 	bl	12942 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    aa44:	2800      	cmp	r0, #0
    aa46:	db0b      	blt.n	aa60 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    aa48:	2501      	movs	r5, #1
    aa4a:	64b5      	str	r5, [r6, #72]	; 0x48
	struct nrf_clock_control_data *data = dev->data;
    aa4c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    aa4e:	4908      	ldr	r1, [pc, #32]	; (aa70 <clk_init+0x54>)
    aa50:	f104 0020 	add.w	r0, r4, #32
    aa54:	f007 ff75 	bl	12942 <onoff_manager_init>
		if (err < 0) {
    aa58:	2800      	cmp	r0, #0
    aa5a:	db01      	blt.n	aa60 <clk_init+0x44>
	}

	return 0;
    aa5c:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    aa5e:	6565      	str	r5, [r4, #84]	; 0x54
}
    aa60:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    aa62:	f06f 0004 	mvn.w	r0, #4
    aa66:	e7fb      	b.n	aa60 <clk_init+0x44>
    aa68:	0000aaa9 	.word	0x0000aaa9
    aa6c:	0bad0000 	.word	0x0bad0000
    aa70:	00014d0c 	.word	0x00014d0c

0000aa74 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    aa74:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    aa76:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    aa78:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    aa7a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    aa7c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    aa7e:	4808      	ldr	r0, [pc, #32]	; (aaa0 <clkstarted_handle.constprop.0+0x2c>)
    aa80:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    aa82:	3348      	adds	r3, #72	; 0x48
    aa84:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    aa86:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    aa8a:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    aa8c:	f008 f851 	bl	12b32 <set_on_state>
	if (callback) {
    aa90:	b12d      	cbz	r5, aa9e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    aa92:	4632      	mov	r2, r6
    aa94:	462b      	mov	r3, r5
}
    aa96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    aa9a:	4802      	ldr	r0, [pc, #8]	; (aaa4 <clkstarted_handle.constprop.0+0x30>)
    aa9c:	4718      	bx	r3
}
    aa9e:	bd70      	pop	{r4, r5, r6, pc}
    aaa0:	2000cb84 	.word	0x2000cb84
    aaa4:	00014934 	.word	0x00014934

0000aaa8 <clock_event_handler>:
	switch (event) {
    aaa8:	2801      	cmp	r0, #1
{
    aaaa:	b508      	push	{r3, lr}
	switch (event) {
    aaac:	d006      	beq.n	aabc <clock_event_handler+0x14>
    aaae:	2803      	cmp	r0, #3
    aab0:	d008      	beq.n	aac4 <clock_event_handler+0x1c>
    aab2:	b998      	cbnz	r0, aadc <clock_event_handler+0x34>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    aab4:	4b0f      	ldr	r3, [pc, #60]	; (aaf4 <clock_event_handler+0x4c>)
    aab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    aab8:	075b      	lsls	r3, r3, #29
    aaba:	d119      	bne.n	aaf0 <clock_event_handler+0x48>
}
    aabc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    aac0:	f7ff bfd8 	b.w	aa74 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    aac4:	490c      	ldr	r1, [pc, #48]	; (aaf8 <clock_event_handler+0x50>)
    aac6:	f240 236e 	movw	r3, #622	; 0x26e
    aaca:	4a0c      	ldr	r2, [pc, #48]	; (aafc <clock_event_handler+0x54>)
    aacc:	480c      	ldr	r0, [pc, #48]	; (ab00 <clock_event_handler+0x58>)
    aace:	f007 ff7d 	bl	129cc <assert_print>
    aad2:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
    aad6:	4809      	ldr	r0, [pc, #36]	; (aafc <clock_event_handler+0x54>)
    aad8:	f007 ff71 	bl	129be <assert_post_action>
    aadc:	4906      	ldr	r1, [pc, #24]	; (aaf8 <clock_event_handler+0x50>)
    aade:	f240 2372 	movw	r3, #626	; 0x272
    aae2:	4a06      	ldr	r2, [pc, #24]	; (aafc <clock_event_handler+0x54>)
    aae4:	4806      	ldr	r0, [pc, #24]	; (ab00 <clock_event_handler+0x58>)
    aae6:	f007 ff71 	bl	129cc <assert_print>
    aaea:	f240 2172 	movw	r1, #626	; 0x272
    aaee:	e7f2      	b.n	aad6 <clock_event_handler+0x2e>
}
    aaf0:	bd08      	pop	{r3, pc}
    aaf2:	bf00      	nop
    aaf4:	2000cb84 	.word	0x2000cb84
    aaf8:	00016f1f 	.word	0x00016f1f
    aafc:	00015da3 	.word	0x00015da3
    ab00:	00015341 	.word	0x00015341

0000ab04 <generic_hfclk_start>:
{
    ab04:	b508      	push	{r3, lr}
	__asm__ volatile(
    ab06:	f04f 0320 	mov.w	r3, #32
    ab0a:	f3ef 8111 	mrs	r1, BASEPRI
    ab0e:	f383 8812 	msr	BASEPRI_MAX, r3
    ab12:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    ab16:	4a11      	ldr	r2, [pc, #68]	; (ab5c <generic_hfclk_start+0x58>)
    ab18:	6813      	ldr	r3, [r2, #0]
    ab1a:	f043 0002 	orr.w	r0, r3, #2
    ab1e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    ab20:	07da      	lsls	r2, r3, #31
    ab22:	d408      	bmi.n	ab36 <generic_hfclk_start+0x32>
	__asm__ volatile(
    ab24:	f381 8811 	msr	BASEPRI, r1
    ab28:	f3bf 8f6f 	isb	sy
}
    ab2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    ab30:	2001      	movs	r0, #1
    ab32:	f001 bf51 	b.w	c9d8 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    ab36:	4b0a      	ldr	r3, [pc, #40]	; (ab60 <generic_hfclk_start+0x5c>)
    ab38:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    ab3c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    ab40:	07d3      	lsls	r3, r2, #31
    ab42:	d5ef      	bpl.n	ab24 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    ab44:	4807      	ldr	r0, [pc, #28]	; (ab64 <generic_hfclk_start+0x60>)
    ab46:	f007 fff4 	bl	12b32 <set_on_state>
    ab4a:	f381 8811 	msr	BASEPRI, r1
    ab4e:	f3bf 8f6f 	isb	sy
}
    ab52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    ab56:	2000      	movs	r0, #0
    ab58:	f7ff bf8c 	b.w	aa74 <clkstarted_handle.constprop.0>
    ab5c:	2000cbdc 	.word	0x2000cbdc
    ab60:	40005000 	.word	0x40005000
    ab64:	2000cbcc 	.word	0x2000cbcc

0000ab68 <api_blocking_start>:
{
    ab68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    ab6a:	2200      	movs	r2, #0
    ab6c:	2301      	movs	r3, #1
    ab6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    ab72:	ab04      	add	r3, sp, #16
    ab74:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    ab78:	4a09      	ldr	r2, [pc, #36]	; (aba0 <api_blocking_start+0x38>)
    ab7a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    ab7c:	f8cd d000 	str.w	sp, [sp]
    ab80:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    ab84:	f008 f817 	bl	12bb6 <api_start>
	if (err < 0) {
    ab88:	2800      	cmp	r0, #0
    ab8a:	db05      	blt.n	ab98 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    ab8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    ab90:	2300      	movs	r3, #0
    ab92:	4668      	mov	r0, sp
    ab94:	f005 f970 	bl	fe78 <z_impl_k_sem_take>
}
    ab98:	b007      	add	sp, #28
    ab9a:	f85d fb04 	ldr.w	pc, [sp], #4
    ab9e:	bf00      	nop
    aba0:	00012bdd 	.word	0x00012bdd

0000aba4 <generic_hfclk_stop>:
{
    aba4:	b510      	push	{r4, lr}
	__asm__ volatile(
    aba6:	f04f 0320 	mov.w	r3, #32
    abaa:	f3ef 8411 	mrs	r4, BASEPRI
    abae:	f383 8812 	msr	BASEPRI_MAX, r3
    abb2:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    abb6:	4a07      	ldr	r2, [pc, #28]	; (abd4 <generic_hfclk_stop+0x30>)
    abb8:	6813      	ldr	r3, [r2, #0]
    abba:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    abbe:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    abc0:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    abc2:	d402      	bmi.n	abca <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    abc4:	2001      	movs	r0, #1
    abc6:	f001 ff69 	bl	ca9c <nrfx_clock_stop>
	__asm__ volatile(
    abca:	f384 8811 	msr	BASEPRI, r4
    abce:	f3bf 8f6f 	isb	sy
}
    abd2:	bd10      	pop	{r4, pc}
    abd4:	2000cbdc 	.word	0x2000cbdc

0000abd8 <z_nrf_clock_control_get_onoff>:
}
    abd8:	4b02      	ldr	r3, [pc, #8]	; (abe4 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    abda:	b2c0      	uxtb	r0, r0
}
    abdc:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    abe0:	4770      	bx	lr
    abe2:	bf00      	nop
    abe4:	2000cb84 	.word	0x2000cb84

0000abe8 <z_nrf_clock_control_lf_on>:
{
    abe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    abec:	2201      	movs	r2, #1
    abee:	4606      	mov	r6, r0
    abf0:	4941      	ldr	r1, [pc, #260]	; (acf8 <z_nrf_clock_control_lf_on+0x110>)
    abf2:	e8d1 3fef 	ldaex	r3, [r1]
    abf6:	e8c1 2fe0 	stlex	r0, r2, [r1]
    abfa:	2800      	cmp	r0, #0
    abfc:	d1f9      	bne.n	abf2 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    abfe:	b9a3      	cbnz	r3, ac2a <z_nrf_clock_control_lf_on+0x42>
	*notify = (struct sys_notify){
    ac00:	493e      	ldr	r1, [pc, #248]	; (acfc <z_nrf_clock_control_lf_on+0x114>)
		err = onoff_request(mgr, &cli);
    ac02:	483f      	ldr	r0, [pc, #252]	; (ad00 <z_nrf_clock_control_lf_on+0x118>)
    ac04:	604b      	str	r3, [r1, #4]
    ac06:	60cb      	str	r3, [r1, #12]
    ac08:	608a      	str	r2, [r1, #8]
    ac0a:	f7fe f863 	bl	8cd4 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    ac0e:	2800      	cmp	r0, #0
    ac10:	da0b      	bge.n	ac2a <z_nrf_clock_control_lf_on+0x42>
    ac12:	493c      	ldr	r1, [pc, #240]	; (ad04 <z_nrf_clock_control_lf_on+0x11c>)
    ac14:	f44f 730c 	mov.w	r3, #560	; 0x230
    ac18:	4a3b      	ldr	r2, [pc, #236]	; (ad08 <z_nrf_clock_control_lf_on+0x120>)
    ac1a:	483c      	ldr	r0, [pc, #240]	; (ad0c <z_nrf_clock_control_lf_on+0x124>)
    ac1c:	f007 fed6 	bl	129cc <assert_print>
    ac20:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
    ac24:	4838      	ldr	r0, [pc, #224]	; (ad08 <z_nrf_clock_control_lf_on+0x120>)
    ac26:	f007 feca 	bl	129be <assert_post_action>
	switch (start_mode) {
    ac2a:	b35e      	cbz	r6, ac84 <z_nrf_clock_control_lf_on+0x9c>
    ac2c:	1e73      	subs	r3, r6, #1
    ac2e:	2b01      	cmp	r3, #1
    ac30:	d858      	bhi.n	ace4 <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    ac32:	2e01      	cmp	r6, #1
    ac34:	d106      	bne.n	ac44 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    ac36:	4b36      	ldr	r3, [pc, #216]	; (ad10 <z_nrf_clock_control_lf_on+0x128>)
    ac38:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    ac3c:	f003 0303 	and.w	r3, r3, #3
    ac40:	2b02      	cmp	r3, #2
    ac42:	d01f      	beq.n	ac84 <z_nrf_clock_control_lf_on+0x9c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    ac44:	f009 fb37 	bl	142b6 <k_is_in_isr>
    ac48:	4605      	mov	r5, r0
    ac4a:	b9e8      	cbnz	r0, ac88 <z_nrf_clock_control_lf_on+0xa0>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    ac4c:	4b31      	ldr	r3, [pc, #196]	; (ad14 <z_nrf_clock_control_lf_on+0x12c>)
    ac4e:	781b      	ldrb	r3, [r3, #0]
    ac50:	b1d3      	cbz	r3, ac88 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENCLR = mask;
    ac52:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    ac54:	4607      	mov	r7, r0
    ac56:	4b2e      	ldr	r3, [pc, #184]	; (ad10 <z_nrf_clock_control_lf_on+0x128>)
    ac58:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    ac5c:	4c2c      	ldr	r4, [pc, #176]	; (ad10 <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ac5e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ad18 <z_nrf_clock_control_lf_on+0x130>
    ac62:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ac66:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    ac6a:	03d2      	lsls	r2, r2, #15
    ac6c:	d516      	bpl.n	ac9c <z_nrf_clock_control_lf_on+0xb4>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    ac6e:	f003 0303 	and.w	r3, r3, #3
    ac72:	2b02      	cmp	r3, #2
    ac74:	d001      	beq.n	ac7a <z_nrf_clock_control_lf_on+0x92>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    ac76:	2e01      	cmp	r6, #1
    ac78:	d110      	bne.n	ac9c <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
    ac7a:	b375      	cbz	r5, acda <z_nrf_clock_control_lf_on+0xf2>
    ac7c:	f387 8811 	msr	BASEPRI, r7
    ac80:	f3bf 8f6f 	isb	sy
}
    ac84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    ac88:	f04f 0320 	mov.w	r3, #32
    ac8c:	f3ef 8711 	mrs	r7, BASEPRI
    ac90:	f383 8812 	msr	BASEPRI_MAX, r3
    ac94:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    ac98:	2501      	movs	r5, #1
    ac9a:	e7df      	b.n	ac5c <z_nrf_clock_control_lf_on+0x74>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    ac9c:	b1c5      	cbz	r5, acd0 <z_nrf_clock_control_lf_on+0xe8>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    ac9e:	4638      	mov	r0, r7
    aca0:	f7fe ff24 	bl	9aec <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    aca4:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    aca8:	b2db      	uxtb	r3, r3
    acaa:	2b01      	cmp	r3, #1
    acac:	d1d9      	bne.n	ac62 <z_nrf_clock_control_lf_on+0x7a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    acae:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    acb2:	2a00      	cmp	r2, #0
    acb4:	d0d5      	beq.n	ac62 <z_nrf_clock_control_lf_on+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    acb6:	2200      	movs	r2, #0
    acb8:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    acbc:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    acc0:	2202      	movs	r2, #2
    acc2:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    acc6:	2220      	movs	r2, #32
    acc8:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    accc:	60a3      	str	r3, [r4, #8]
}
    acce:	e7c8      	b.n	ac62 <z_nrf_clock_control_lf_on+0x7a>
	return z_impl_k_sleep(timeout);
    acd0:	2100      	movs	r1, #0
    acd2:	2021      	movs	r0, #33	; 0x21
    acd4:	f006 fb54 	bl	11380 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    acd8:	e7e4      	b.n	aca4 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
    acda:	2202      	movs	r2, #2
    acdc:	4b0c      	ldr	r3, [pc, #48]	; (ad10 <z_nrf_clock_control_lf_on+0x128>)
    acde:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    ace2:	e7cf      	b.n	ac84 <z_nrf_clock_control_lf_on+0x9c>
		__ASSERT_NO_MSG(false);
    ace4:	490d      	ldr	r1, [pc, #52]	; (ad1c <z_nrf_clock_control_lf_on+0x134>)
    ace6:	f240 2342 	movw	r3, #578	; 0x242
    acea:	4a07      	ldr	r2, [pc, #28]	; (ad08 <z_nrf_clock_control_lf_on+0x120>)
    acec:	4807      	ldr	r0, [pc, #28]	; (ad0c <z_nrf_clock_control_lf_on+0x124>)
    acee:	f007 fe6d 	bl	129cc <assert_print>
    acf2:	f240 2142 	movw	r1, #578	; 0x242
    acf6:	e795      	b.n	ac24 <z_nrf_clock_control_lf_on+0x3c>
    acf8:	2000cb80 	.word	0x2000cb80
    acfc:	2000cb70 	.word	0x2000cb70
    ad00:	2000cba4 	.word	0x2000cba4
    ad04:	00015e04 	.word	0x00015e04
    ad08:	00015da3 	.word	0x00015da3
    ad0c:	00015341 	.word	0x00015341
    ad10:	40005000 	.word	0x40005000
    ad14:	2000e6f0 	.word	0x2000e6f0
    ad18:	e000e100 	.word	0xe000e100
    ad1c:	00016f1f 	.word	0x00016f1f

0000ad20 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    ad20:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    ad22:	4807      	ldr	r0, [pc, #28]	; (ad40 <uart_console_init+0x20>)
    ad24:	f009 faa6 	bl	14274 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    ad28:	b138      	cbz	r0, ad3a <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    ad2a:	4806      	ldr	r0, [pc, #24]	; (ad44 <uart_console_init+0x24>)
    ad2c:	f7ff fc50 	bl	a5d0 <__stdout_hook_install>
	__printk_hook_install(console_out);
    ad30:	4804      	ldr	r0, [pc, #16]	; (ad44 <uart_console_init+0x24>)
    ad32:	f7fd fc5f 	bl	85f4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    ad36:	2000      	movs	r0, #0
}
    ad38:	bd08      	pop	{r3, pc}
		return -ENODEV;
    ad3a:	f06f 0012 	mvn.w	r0, #18
    ad3e:	e7fb      	b.n	ad38 <uart_console_init+0x18>
    ad40:	0001497c 	.word	0x0001497c
    ad44:	0000ad49 	.word	0x0000ad49

0000ad48 <console_out>:
	if ('\n' == c) {
    ad48:	280a      	cmp	r0, #10
{
    ad4a:	b538      	push	{r3, r4, r5, lr}
    ad4c:	4604      	mov	r4, r0
    ad4e:	4d07      	ldr	r5, [pc, #28]	; (ad6c <console_out+0x24>)
	if ('\n' == c) {
    ad50:	d104      	bne.n	ad5c <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    ad52:	68ab      	ldr	r3, [r5, #8]
    ad54:	210d      	movs	r1, #13
    ad56:	4628      	mov	r0, r5
    ad58:	685b      	ldr	r3, [r3, #4]
    ad5a:	4798      	blx	r3
    ad5c:	68ab      	ldr	r3, [r5, #8]
    ad5e:	4803      	ldr	r0, [pc, #12]	; (ad6c <console_out+0x24>)
    ad60:	685b      	ldr	r3, [r3, #4]
    ad62:	b2e1      	uxtb	r1, r4
    ad64:	4798      	blx	r3
}
    ad66:	4620      	mov	r0, r4
    ad68:	bd38      	pop	{r3, r4, r5, pc}
    ad6a:	bf00      	nop
    ad6c:	0001497c 	.word	0x0001497c

0000ad70 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    ad70:	b510      	push	{r4, lr}
	return port->data;
    ad72:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    ad74:	b961      	cbnz	r1, ad90 <gpio_nrfx_manage_callback+0x20>
    ad76:	4920      	ldr	r1, [pc, #128]	; (adf8 <gpio_nrfx_manage_callback+0x88>)
    ad78:	232a      	movs	r3, #42	; 0x2a
    ad7a:	4a20      	ldr	r2, [pc, #128]	; (adfc <gpio_nrfx_manage_callback+0x8c>)
    ad7c:	4820      	ldr	r0, [pc, #128]	; (ae00 <gpio_nrfx_manage_callback+0x90>)
    ad7e:	f007 fe25 	bl	129cc <assert_print>
    ad82:	4820      	ldr	r0, [pc, #128]	; (ae04 <gpio_nrfx_manage_callback+0x94>)
    ad84:	f007 fe22 	bl	129cc <assert_print>
    ad88:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
    ad8a:	481c      	ldr	r0, [pc, #112]	; (adfc <gpio_nrfx_manage_callback+0x8c>)
    ad8c:	f007 fe17 	bl	129be <assert_post_action>
    ad90:	6848      	ldr	r0, [r1, #4]
    ad92:	b950      	cbnz	r0, adaa <gpio_nrfx_manage_callback+0x3a>
    ad94:	491c      	ldr	r1, [pc, #112]	; (ae08 <gpio_nrfx_manage_callback+0x98>)
    ad96:	232b      	movs	r3, #43	; 0x2b
    ad98:	4a18      	ldr	r2, [pc, #96]	; (adfc <gpio_nrfx_manage_callback+0x8c>)
    ad9a:	4819      	ldr	r0, [pc, #100]	; (ae00 <gpio_nrfx_manage_callback+0x90>)
    ad9c:	f007 fe16 	bl	129cc <assert_print>
    ada0:	481a      	ldr	r0, [pc, #104]	; (ae0c <gpio_nrfx_manage_callback+0x9c>)
    ada2:	f007 fe13 	bl	129cc <assert_print>
    ada6:	212b      	movs	r1, #43	; 0x2b
    ada8:	e7ef      	b.n	ad8a <gpio_nrfx_manage_callback+0x1a>
	return list->head;
    adaa:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
    adac:	b1f8      	cbz	r0, adee <gpio_nrfx_manage_callback+0x7e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    adae:	4288      	cmp	r0, r1
    adb0:	d119      	bne.n	ade6 <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
    adb2:	689c      	ldr	r4, [r3, #8]
	return node->next;
    adb4:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    adb6:	42a1      	cmp	r1, r4
	list->head = node;
    adb8:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    adba:	d100      	bne.n	adbe <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
    adbc:	6098      	str	r0, [r3, #8]
	parent->next = child;
    adbe:	2000      	movs	r0, #0
    adc0:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
    adc2:	b12a      	cbz	r2, add0 <gpio_nrfx_manage_callback+0x60>
	return list->head;
    adc4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    adc6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    adc8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    adca:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    adcc:	b902      	cbnz	r2, add0 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    adce:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    add0:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    add2:	e010      	b.n	adf6 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    add4:	4281      	cmp	r1, r0
    add6:	d106      	bne.n	ade6 <gpio_nrfx_manage_callback+0x76>
	return node->next;
    add8:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    adda:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    addc:	6898      	ldr	r0, [r3, #8]
    adde:	4281      	cmp	r1, r0
    ade0:	d1ed      	bne.n	adbe <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
    ade2:	609c      	str	r4, [r3, #8]
}
    ade4:	e7eb      	b.n	adbe <gpio_nrfx_manage_callback+0x4e>
	return node->next;
    ade6:	4604      	mov	r4, r0
    ade8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    adea:	2800      	cmp	r0, #0
    adec:	d1f2      	bne.n	add4 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    adee:	2a00      	cmp	r2, #0
    adf0:	d1e8      	bne.n	adc4 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
    adf2:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
    adf6:	bd10      	pop	{r4, pc}
    adf8:	00015e6a 	.word	0x00015e6a
    adfc:	00015e2e 	.word	0x00015e2e
    ae00:	00015341 	.word	0x00015341
    ae04:	00015e73 	.word	0x00015e73
    ae08:	00015e82 	.word	0x00015e82
    ae0c:	00015e94 	.word	0x00015e94

0000ae10 <gpio_nrfx_pin_interrupt_configure>:
{
    ae10:	b530      	push	{r4, r5, lr}
	return port->config;
    ae12:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    ae14:	f001 041f 	and.w	r4, r1, #31
    ae18:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
    ae1a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    ae1e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    ae20:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    ae24:	d105      	bne.n	ae32 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    ae26:	4620      	mov	r0, r4
    ae28:	f002 f94c 	bl	d0c4 <nrfx_gpiote_trigger_disable>
		return 0;
    ae2c:	2000      	movs	r0, #0
}
    ae2e:	b005      	add	sp, #20
    ae30:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    ae32:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    ae34:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    ae38:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    ae3c:	d114      	bne.n	ae68 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    ae3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    ae42:	bf0c      	ite	eq
    ae44:	2304      	moveq	r3, #4
    ae46:	2305      	movne	r3, #5
    ae48:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    ae4c:	2300      	movs	r3, #0
    ae4e:	4620      	mov	r0, r4
    ae50:	4619      	mov	r1, r3
    ae52:	aa02      	add	r2, sp, #8
    ae54:	f001 ff40 	bl	ccd8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    ae58:	4b26      	ldr	r3, [pc, #152]	; (aef4 <gpio_nrfx_pin_interrupt_configure+0xe4>)
    ae5a:	4298      	cmp	r0, r3
    ae5c:	d146      	bne.n	aeec <gpio_nrfx_pin_interrupt_configure+0xdc>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    ae5e:	2101      	movs	r1, #1
    ae60:	4620      	mov	r0, r4
    ae62:	f002 f8c5 	bl	cff0 <nrfx_gpiote_trigger_enable>
	return 0;
    ae66:	e7e1      	b.n	ae2c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    ae68:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    ae6c:	d022      	beq.n	aeb4 <gpio_nrfx_pin_interrupt_configure+0xa4>
    ae6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    ae72:	bf14      	ite	ne
    ae74:	2301      	movne	r3, #1
    ae76:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    ae78:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    ae7c:	6883      	ldr	r3, [r0, #8]
    ae7e:	40cb      	lsrs	r3, r1
    ae80:	07d9      	lsls	r1, r3, #31
    ae82:	d4e3      	bmi.n	ae4c <gpio_nrfx_pin_interrupt_configure+0x3c>
    ae84:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    ae88:	d1e0      	bne.n	ae4c <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    ae8a:	0963      	lsrs	r3, r4, #5
    ae8c:	d106      	bne.n	ae9c <gpio_nrfx_pin_interrupt_configure+0x8c>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
    ae8e:	f04f 32ff 	mov.w	r2, #4294967295
    pin_number &= 0x1F;
    ae92:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    ae96:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    ae98:	07d2      	lsls	r2, r2, #31
    ae9a:	d40d      	bmi.n	aeb8 <gpio_nrfx_pin_interrupt_configure+0xa8>
    ae9c:	4916      	ldr	r1, [pc, #88]	; (aef8 <gpio_nrfx_pin_interrupt_configure+0xe8>)
    ae9e:	4817      	ldr	r0, [pc, #92]	; (aefc <gpio_nrfx_pin_interrupt_configure+0xec>)
    aea0:	f240 2347 	movw	r3, #583	; 0x247
    aea4:	4a16      	ldr	r2, [pc, #88]	; (af00 <gpio_nrfx_pin_interrupt_configure+0xf0>)
    aea6:	f007 fd91 	bl	129cc <assert_print>
    aeaa:	f240 2147 	movw	r1, #583	; 0x247
    aeae:	4814      	ldr	r0, [pc, #80]	; (af00 <gpio_nrfx_pin_interrupt_configure+0xf0>)
    aeb0:	f007 fd85 	bl	129be <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    aeb4:	2303      	movs	r3, #3
    aeb6:	e7df      	b.n	ae78 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    aeb8:	4a12      	ldr	r2, [pc, #72]	; (af04 <gpio_nrfx_pin_interrupt_configure+0xf4>)
    aeba:	3380      	adds	r3, #128	; 0x80
    aebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    aec0:	07db      	lsls	r3, r3, #31
    aec2:	d4c3      	bmi.n	ae4c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    aec4:	f10d 0507 	add.w	r5, sp, #7
    aec8:	4629      	mov	r1, r5
    aeca:	4620      	mov	r0, r4
    aecc:	f002 f82a 	bl	cf24 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    aed0:	4b0d      	ldr	r3, [pc, #52]	; (af08 <gpio_nrfx_pin_interrupt_configure+0xf8>)
    aed2:	4298      	cmp	r0, r3
    aed4:	d001      	beq.n	aeda <gpio_nrfx_pin_interrupt_configure+0xca>
		trigger_config.p_in_channel = &ch;
    aed6:	9503      	str	r5, [sp, #12]
    aed8:	e7b8      	b.n	ae4c <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
    aeda:	4628      	mov	r0, r5
    aedc:	f002 f882 	bl	cfe4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    aee0:	4b04      	ldr	r3, [pc, #16]	; (aef4 <gpio_nrfx_pin_interrupt_configure+0xe4>)
    aee2:	4298      	cmp	r0, r3
    aee4:	d0f7      	beq.n	aed6 <gpio_nrfx_pin_interrupt_configure+0xc6>
				return -ENOMEM;
    aee6:	f06f 000b 	mvn.w	r0, #11
    aeea:	e7a0      	b.n	ae2e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    aeec:	f06f 0015 	mvn.w	r0, #21
    aef0:	e79d      	b.n	ae2e <gpio_nrfx_pin_interrupt_configure+0x1e>
    aef2:	bf00      	nop
    aef4:	0bad0000 	.word	0x0bad0000
    aef8:	00015ede 	.word	0x00015ede
    aefc:	00015341 	.word	0x00015341
    af00:	00015eab 	.word	0x00015eab
    af04:	40842500 	.word	0x40842500
    af08:	0bad0004 	.word	0x0bad0004

0000af0c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    af0c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    af0e:	f002 f859 	bl	cfc4 <nrfx_gpiote_is_init>
    af12:	4604      	mov	r4, r0
    af14:	b968      	cbnz	r0, af32 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    af16:	f002 f82d 	bl	cf74 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    af1a:	4b08      	ldr	r3, [pc, #32]	; (af3c <gpio_nrfx_init+0x30>)
    af1c:	4298      	cmp	r0, r3
    af1e:	d10a      	bne.n	af36 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    af20:	4621      	mov	r1, r4
    af22:	4807      	ldr	r0, [pc, #28]	; (af40 <gpio_nrfx_init+0x34>)
    af24:	f001 fff8 	bl	cf18 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    af28:	4622      	mov	r2, r4
    af2a:	2105      	movs	r1, #5
    af2c:	2031      	movs	r0, #49	; 0x31
    af2e:	f7fe fe05 	bl	9b3c <z_arm_irq_priority_set>
		return 0;
    af32:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    af34:	bd10      	pop	{r4, pc}
		return -EIO;
    af36:	f06f 0004 	mvn.w	r0, #4
    af3a:	e7fb      	b.n	af34 <gpio_nrfx_init+0x28>
    af3c:	0bad0000 	.word	0x0bad0000
    af40:	0000af45 	.word	0x0000af45

0000af44 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    af44:	0943      	lsrs	r3, r0, #5
{
    af46:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    af48:	d107      	bne.n	af5a <nrfx_gpio_handler+0x16>
	return list->head;
    af4a:	4b12      	ldr	r3, [pc, #72]	; (af94 <nrfx_gpio_handler+0x50>)
    af4c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    af4e:	b121      	cbz	r1, af5a <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    af50:	2501      	movs	r5, #1
	return node->next;
    af52:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    af54:	4e10      	ldr	r6, [pc, #64]	; (af98 <nrfx_gpio_handler+0x54>)
    af56:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    af58:	b901      	cbnz	r1, af5c <nrfx_gpio_handler+0x18>
}
    af5a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    af5c:	688a      	ldr	r2, [r1, #8]
    af5e:	402a      	ands	r2, r5
    af60:	d010      	beq.n	af84 <nrfx_gpio_handler+0x40>
			__ASSERT(cb->handler, "No callback handler!");
    af62:	684b      	ldr	r3, [r1, #4]
    af64:	b963      	cbnz	r3, af80 <nrfx_gpio_handler+0x3c>
    af66:	490d      	ldr	r1, [pc, #52]	; (af9c <nrfx_gpio_handler+0x58>)
    af68:	234d      	movs	r3, #77	; 0x4d
    af6a:	4a0d      	ldr	r2, [pc, #52]	; (afa0 <nrfx_gpio_handler+0x5c>)
    af6c:	480d      	ldr	r0, [pc, #52]	; (afa4 <nrfx_gpio_handler+0x60>)
    af6e:	f007 fd2d 	bl	129cc <assert_print>
    af72:	480d      	ldr	r0, [pc, #52]	; (afa8 <nrfx_gpio_handler+0x64>)
    af74:	f007 fd2a 	bl	129cc <assert_print>
    af78:	214d      	movs	r1, #77	; 0x4d
    af7a:	4809      	ldr	r0, [pc, #36]	; (afa0 <nrfx_gpio_handler+0x5c>)
    af7c:	f007 fd1f 	bl	129be <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    af80:	4630      	mov	r0, r6
    af82:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    af84:	b11c      	cbz	r4, af8e <nrfx_gpio_handler+0x4a>
    af86:	6823      	ldr	r3, [r4, #0]
    af88:	4621      	mov	r1, r4
    af8a:	461c      	mov	r4, r3
    af8c:	e7e4      	b.n	af58 <nrfx_gpio_handler+0x14>
    af8e:	4623      	mov	r3, r4
    af90:	e7fa      	b.n	af88 <nrfx_gpio_handler+0x44>
    af92:	bf00      	nop
    af94:	2000cbe0 	.word	0x2000cbe0
    af98:	0001494c 	.word	0x0001494c
    af9c:	00015f01 	.word	0x00015f01
    afa0:	00015e2e 	.word	0x00015e2e
    afa4:	00015341 	.word	0x00015341
    afa8:	00015e94 	.word	0x00015e94

0000afac <gpio_nrfx_pin_configure>:
{
    afac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    afb0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    afb4:	f001 051f 	and.w	r5, r1, #31
    afb8:	f898 300c 	ldrb.w	r3, [r8, #12]
{
    afbc:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    afbe:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    afc2:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    afc4:	4628      	mov	r0, r5
    afc6:	f10d 0103 	add.w	r1, sp, #3
    afca:	f001 ffab 	bl	cf24 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    afce:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    afd2:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    afd4:	d115      	bne.n	b002 <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    afd6:	4628      	mov	r0, r5
    afd8:	f002 f89e 	bl	d118 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    afdc:	4b48      	ldr	r3, [pc, #288]	; (b100 <gpio_nrfx_pin_configure+0x154>)
    afde:	429e      	cmp	r6, r3
    afe0:	d170      	bne.n	b0c4 <gpio_nrfx_pin_configure+0x118>
			err = nrfx_gpiote_channel_free(ch);
    afe2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    afe6:	f001 fff7 	bl	cfd8 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    afea:	42b0      	cmp	r0, r6
    afec:	d06a      	beq.n	b0c4 <gpio_nrfx_pin_configure+0x118>
    afee:	4945      	ldr	r1, [pc, #276]	; (b104 <gpio_nrfx_pin_configure+0x158>)
    aff0:	236a      	movs	r3, #106	; 0x6a
    aff2:	4a45      	ldr	r2, [pc, #276]	; (b108 <gpio_nrfx_pin_configure+0x15c>)
    aff4:	4845      	ldr	r0, [pc, #276]	; (b10c <gpio_nrfx_pin_configure+0x160>)
    aff6:	f007 fce9 	bl	129cc <assert_print>
    affa:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    affc:	4842      	ldr	r0, [pc, #264]	; (b108 <gpio_nrfx_pin_configure+0x15c>)
    affe:	f007 fcde 	bl	129be <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
    b002:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    b004:	4628      	mov	r0, r5
    b006:	4619      	mov	r1, r3
    b008:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    b00a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    b00e:	f001 fe63 	bl	ccd8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    b012:	4b3b      	ldr	r3, [pc, #236]	; (b100 <gpio_nrfx_pin_configure+0x154>)
    b014:	4298      	cmp	r0, r3
    b016:	d004      	beq.n	b022 <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
    b018:	f06f 0015 	mvn.w	r0, #21
}
    b01c:	b004      	add	sp, #16
    b01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    b022:	4286      	cmp	r6, r0
    b024:	d10d      	bne.n	b042 <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
    b026:	f89d 0003 	ldrb.w	r0, [sp, #3]
    b02a:	f001 ffd5 	bl	cfd8 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    b02e:	42b0      	cmp	r0, r6
    b030:	d007      	beq.n	b042 <gpio_nrfx_pin_configure+0x96>
    b032:	4934      	ldr	r1, [pc, #208]	; (b104 <gpio_nrfx_pin_configure+0x158>)
    b034:	237c      	movs	r3, #124	; 0x7c
    b036:	4a34      	ldr	r2, [pc, #208]	; (b108 <gpio_nrfx_pin_configure+0x15c>)
    b038:	4834      	ldr	r0, [pc, #208]	; (b10c <gpio_nrfx_pin_configure+0x160>)
    b03a:	f007 fcc7 	bl	129cc <assert_print>
    b03e:	217c      	movs	r1, #124	; 0x7c
    b040:	e7dc      	b.n	affc <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
    b042:	03a6      	lsls	r6, r4, #14
    b044:	d54c      	bpl.n	b0e0 <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    b046:	f240 3306 	movw	r3, #774	; 0x306
    b04a:	4023      	ands	r3, r4
    b04c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    b050:	d019      	beq.n	b086 <gpio_nrfx_pin_configure+0xda>
    b052:	d80c      	bhi.n	b06e <gpio_nrfx_pin_configure+0xc2>
    b054:	2b06      	cmp	r3, #6
    b056:	d017      	beq.n	b088 <gpio_nrfx_pin_configure+0xdc>
    b058:	d804      	bhi.n	b064 <gpio_nrfx_pin_configure+0xb8>
    b05a:	b1ab      	cbz	r3, b088 <gpio_nrfx_pin_configure+0xdc>
    b05c:	2b02      	cmp	r3, #2
    b05e:	d1db      	bne.n	b018 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
    b060:	2304      	movs	r3, #4
    b062:	e011      	b.n	b088 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    b064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b068:	d1d6      	bne.n	b018 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
    b06a:	2301      	movs	r3, #1
    b06c:	e00c      	b.n	b088 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    b06e:	f240 2202 	movw	r2, #514	; 0x202
    b072:	4293      	cmp	r3, r2
    b074:	d028      	beq.n	b0c8 <gpio_nrfx_pin_configure+0x11c>
    b076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    b07a:	d027      	beq.n	b0cc <gpio_nrfx_pin_configure+0x120>
    b07c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    b080:	d1ca      	bne.n	b018 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
    b082:	2302      	movs	r3, #2
    b084:	e000      	b.n	b088 <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
    b086:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    b088:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    b08c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    b090:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    b094:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    b096:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    b09a:	bf4c      	ite	mi
    b09c:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    b09e:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    b0a2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    b0a4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    b0a8:	d512      	bpl.n	b0d0 <gpio_nrfx_pin_configure+0x124>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    b0aa:	2301      	movs	r3, #1
    b0ac:	f8d8 2004 	ldr.w	r2, [r8, #4]
    b0b0:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
    b0b2:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    b0b4:	2200      	movs	r2, #0
    b0b6:	4628      	mov	r0, r5
    b0b8:	a901      	add	r1, sp, #4
    b0ba:	f001 feb5 	bl	ce28 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    b0be:	4b10      	ldr	r3, [pc, #64]	; (b100 <gpio_nrfx_pin_configure+0x154>)
    b0c0:	4298      	cmp	r0, r3
    b0c2:	d1a9      	bne.n	b018 <gpio_nrfx_pin_configure+0x6c>
    b0c4:	2000      	movs	r0, #0
    b0c6:	e7a9      	b.n	b01c <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
    b0c8:	2305      	movs	r3, #5
    b0ca:	e7dd      	b.n	b088 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    b0cc:	2303      	movs	r3, #3
    b0ce:	e7db      	b.n	b088 <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    b0d0:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    b0d2:	bf41      	itttt	mi
    b0d4:	2301      	movmi	r3, #1
    b0d6:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
    b0da:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
    b0dc:	60d3      	strmi	r3, [r2, #12]
}
    b0de:	e7e9      	b.n	b0b4 <gpio_nrfx_pin_configure+0x108>
	if (flags & GPIO_PULL_UP) {
    b0e0:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    b0e2:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    b0e6:	bf4c      	ite	mi
    b0e8:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    b0ea:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    b0ee:	461a      	mov	r2, r3
    b0f0:	4628      	mov	r0, r5
    b0f2:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    b0f4:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    b0f8:	f001 fdee 	bl	ccd8 <nrfx_gpiote_input_configure>
    b0fc:	e7df      	b.n	b0be <gpio_nrfx_pin_configure+0x112>
    b0fe:	bf00      	nop
    b100:	0bad0000 	.word	0x0bad0000
    b104:	00015f39 	.word	0x00015f39
    b108:	00015f0d 	.word	0x00015f0d
    b10c:	00015341 	.word	0x00015341

0000b110 <nrf_gpio_pin_port_decode>:
{
    b110:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    b112:	6802      	ldr	r2, [r0, #0]
    switch (port)
    b114:	0953      	lsrs	r3, r2, #5
    b116:	d104      	bne.n	b122 <nrf_gpio_pin_port_decode+0x12>
    return (mask & (1UL << pin_number)) ? true : false;
    b118:	f04f 33ff 	mov.w	r3, #4294967295
    b11c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    b11e:	07db      	lsls	r3, r3, #31
    b120:	d40b      	bmi.n	b13a <nrf_gpio_pin_port_decode+0x2a>
    b122:	4907      	ldr	r1, [pc, #28]	; (b140 <nrf_gpio_pin_port_decode+0x30>)
    b124:	4807      	ldr	r0, [pc, #28]	; (b144 <nrf_gpio_pin_port_decode+0x34>)
    b126:	f240 2347 	movw	r3, #583	; 0x247
    b12a:	4a07      	ldr	r2, [pc, #28]	; (b148 <nrf_gpio_pin_port_decode+0x38>)
    b12c:	f007 fc4e 	bl	129cc <assert_print>
    b130:	f240 2147 	movw	r1, #583	; 0x247
    b134:	4804      	ldr	r0, [pc, #16]	; (b148 <nrf_gpio_pin_port_decode+0x38>)
    b136:	f007 fc42 	bl	129be <assert_post_action>
}
    b13a:	4804      	ldr	r0, [pc, #16]	; (b14c <nrf_gpio_pin_port_decode+0x3c>)
    b13c:	bd08      	pop	{r3, pc}
    b13e:	bf00      	nop
    b140:	00015ede 	.word	0x00015ede
    b144:	00015341 	.word	0x00015341
    b148:	00015eab 	.word	0x00015eab
    b14c:	40842500 	.word	0x40842500

0000b150 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    b150:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    b152:	794b      	ldrb	r3, [r1, #5]
    b154:	2b01      	cmp	r3, #1
    b156:	d026      	beq.n	b1a6 <uarte_nrfx_configure+0x56>
    b158:	2b03      	cmp	r3, #3
    b15a:	d121      	bne.n	b1a0 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    b15c:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    b15e:	798b      	ldrb	r3, [r1, #6]
    b160:	2b03      	cmp	r3, #3
    b162:	d11d      	bne.n	b1a0 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    b164:	79ce      	ldrb	r6, [r1, #7]
    b166:	b10e      	cbz	r6, b16c <uarte_nrfx_configure+0x1c>
    b168:	2e01      	cmp	r6, #1
    b16a:	d119      	bne.n	b1a0 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    b16c:	790a      	ldrb	r2, [r1, #4]
    b16e:	b112      	cbz	r2, b176 <uarte_nrfx_configure+0x26>
    b170:	2a02      	cmp	r2, #2
    b172:	d115      	bne.n	b1a0 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    b174:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    b176:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    b178:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    b17a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    b17e:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    b180:	d067      	beq.n	b252 <uarte_nrfx_configure+0x102>
    b182:	d82d      	bhi.n	b1e0 <uarte_nrfx_configure+0x90>
    b184:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    b188:	d066      	beq.n	b258 <uarte_nrfx_configure+0x108>
    b18a:	d816      	bhi.n	b1ba <uarte_nrfx_configure+0x6a>
    b18c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    b190:	d064      	beq.n	b25c <uarte_nrfx_configure+0x10c>
    b192:	d80a      	bhi.n	b1aa <uarte_nrfx_configure+0x5a>
    b194:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    b198:	d063      	beq.n	b262 <uarte_nrfx_configure+0x112>
    b19a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    b19e:	d063      	beq.n	b268 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    b1a0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    b1a4:	e054      	b.n	b250 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    b1a6:	2500      	movs	r5, #0
    b1a8:	e7d9      	b.n	b15e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    b1aa:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    b1ae:	d05e      	beq.n	b26e <uarte_nrfx_configure+0x11e>
    b1b0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    b1b4:	d1f4      	bne.n	b1a0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    b1b6:	4b38      	ldr	r3, [pc, #224]	; (b298 <uarte_nrfx_configure+0x148>)
    b1b8:	e03c      	b.n	b234 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    b1ba:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    b1be:	d059      	beq.n	b274 <uarte_nrfx_configure+0x124>
    b1c0:	d807      	bhi.n	b1d2 <uarte_nrfx_configure+0x82>
    b1c2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    b1c6:	d057      	beq.n	b278 <uarte_nrfx_configure+0x128>
    b1c8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    b1cc:	d1e8      	bne.n	b1a0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    b1ce:	4b33      	ldr	r3, [pc, #204]	; (b29c <uarte_nrfx_configure+0x14c>)
    b1d0:	e030      	b.n	b234 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    b1d2:	f647 2412 	movw	r4, #31250	; 0x7a12
    b1d6:	42a3      	cmp	r3, r4
    b1d8:	d1e2      	bne.n	b1a0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    b1da:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    b1de:	e029      	b.n	b234 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    b1e0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    b1e4:	d04a      	beq.n	b27c <uarte_nrfx_configure+0x12c>
    b1e6:	d813      	bhi.n	b210 <uarte_nrfx_configure+0xc0>
    b1e8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    b1ec:	d049      	beq.n	b282 <uarte_nrfx_configure+0x132>
    b1ee:	d809      	bhi.n	b204 <uarte_nrfx_configure+0xb4>
    b1f0:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    b1f4:	42a3      	cmp	r3, r4
    b1f6:	d046      	beq.n	b286 <uarte_nrfx_configure+0x136>
    b1f8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    b1fc:	d1d0      	bne.n	b1a0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    b1fe:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    b202:	e017      	b.n	b234 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    b204:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    b208:	d1ca      	bne.n	b1a0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    b20a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    b20e:	e011      	b.n	b234 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    b210:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    b214:	d03a      	beq.n	b28c <uarte_nrfx_configure+0x13c>
    b216:	d808      	bhi.n	b22a <uarte_nrfx_configure+0xda>
    b218:	4c21      	ldr	r4, [pc, #132]	; (b2a0 <uarte_nrfx_configure+0x150>)
    b21a:	42a3      	cmp	r3, r4
    b21c:	d039      	beq.n	b292 <uarte_nrfx_configure+0x142>
    b21e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    b222:	d1bd      	bne.n	b1a0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    b224:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    b228:	e004      	b.n	b234 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    b22a:	4c1e      	ldr	r4, [pc, #120]	; (b2a4 <uarte_nrfx_configure+0x154>)
    b22c:	42a3      	cmp	r3, r4
    b22e:	d1b7      	bne.n	b1a0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    b230:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    b234:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    b236:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    b23a:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    b23c:	4335      	orrs	r5, r6
    b23e:	681b      	ldr	r3, [r3, #0]
    b240:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    b242:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    b246:	1d23      	adds	r3, r4, #4
    b248:	c903      	ldmia	r1, {r0, r1}
    b24a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    b24e:	2000      	movs	r0, #0
}
    b250:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    b252:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    b256:	e7ed      	b.n	b234 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    b258:	4b13      	ldr	r3, [pc, #76]	; (b2a8 <uarte_nrfx_configure+0x158>)
    b25a:	e7eb      	b.n	b234 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    b25c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    b260:	e7e8      	b.n	b234 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    b262:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    b266:	e7e5      	b.n	b234 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    b268:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    b26c:	e7e2      	b.n	b234 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    b26e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    b272:	e7df      	b.n	b234 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    b274:	4b0d      	ldr	r3, [pc, #52]	; (b2ac <uarte_nrfx_configure+0x15c>)
    b276:	e7dd      	b.n	b234 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    b278:	4b0d      	ldr	r3, [pc, #52]	; (b2b0 <uarte_nrfx_configure+0x160>)
    b27a:	e7db      	b.n	b234 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    b27c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    b280:	e7d8      	b.n	b234 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    b282:	4b0c      	ldr	r3, [pc, #48]	; (b2b4 <uarte_nrfx_configure+0x164>)
    b284:	e7d6      	b.n	b234 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    b286:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    b28a:	e7d3      	b.n	b234 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    b28c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    b290:	e7d0      	b.n	b234 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    b292:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    b296:	e7cd      	b.n	b234 <uarte_nrfx_configure+0xe4>
    b298:	0013b000 	.word	0x0013b000
    b29c:	004ea000 	.word	0x004ea000
    b2a0:	0003d090 	.word	0x0003d090
    b2a4:	000f4240 	.word	0x000f4240
    b2a8:	00275000 	.word	0x00275000
    b2ac:	0075c000 	.word	0x0075c000
    b2b0:	003af000 	.word	0x003af000
    b2b4:	013a9000 	.word	0x013a9000

0000b2b8 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    b2b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    b2bc:	4680      	mov	r8, r0
    b2be:	2200      	movs	r2, #0
    b2c0:	2101      	movs	r1, #1
    b2c2:	2008      	movs	r0, #8
    b2c4:	f7fe fc3a 	bl	9b3c <z_arm_irq_priority_set>
    b2c8:	2008      	movs	r0, #8
    b2ca:	f7fe fc1b 	bl	9b04 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    b2ce:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    b2d0:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    b2d4:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    b2d8:	683c      	ldr	r4, [r7, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    b2da:	aa01      	add	r2, sp, #4
    b2dc:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    b2e0:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    b2e4:	f8d7 900c 	ldr.w	r9, [r7, #12]
    b2e8:	4648      	mov	r0, r9
    b2ea:	f007 fcb3 	bl	12c54 <pinctrl_lookup_state>
	if (ret < 0) {
    b2ee:	1e05      	subs	r5, r0, #0
    b2f0:	db5c      	blt.n	b3ac <uarte_0_init+0xf4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    b2f2:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    b2f4:	f8d9 2000 	ldr.w	r2, [r9]
    b2f8:	7919      	ldrb	r1, [r3, #4]
    b2fa:	6818      	ldr	r0, [r3, #0]
    b2fc:	f007 fcbd 	bl	12c7a <pinctrl_configure_pins>
	if (err < 0) {
    b300:	1e05      	subs	r5, r0, #0
    b302:	db53      	blt.n	b3ac <uarte_0_init+0xf4>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    b304:	4640      	mov	r0, r8
    b306:	1d31      	adds	r1, r6, #4
    b308:	f7ff ff22 	bl	b150 <uarte_nrfx_configure>
	if (err) {
    b30c:	4605      	mov	r5, r0
    b30e:	2800      	cmp	r0, #0
    b310:	d14c      	bne.n	b3ac <uarte_0_init+0xf4>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    b312:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    b314:	0799      	lsls	r1, r3, #30
    b316:	d522      	bpl.n	b35e <uarte_0_init+0xa6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    b318:	f106 001c 	add.w	r0, r6, #28
    b31c:	f001 fc0e 	bl	cb3c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    b320:	4b26      	ldr	r3, [pc, #152]	; (b3bc <uarte_0_init+0x104>)
    b322:	4298      	cmp	r0, r3
    b324:	d146      	bne.n	b3b4 <uarte_0_init+0xfc>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    b326:	7f33      	ldrb	r3, [r6, #28]
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    b328:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    b32c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b330:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    NRFX_ASSERT(tep);
    b334:	d10b      	bne.n	b34e <uarte_0_init+0x96>
    b336:	4922      	ldr	r1, [pc, #136]	; (b3c0 <uarte_0_init+0x108>)
    b338:	4822      	ldr	r0, [pc, #136]	; (b3c4 <uarte_0_init+0x10c>)
    b33a:	f240 234e 	movw	r3, #590	; 0x24e
    b33e:	4a22      	ldr	r2, [pc, #136]	; (b3c8 <uarte_0_init+0x110>)
    b340:	f007 fb44 	bl	129cc <assert_print>
    b344:	f240 214e 	movw	r1, #590	; 0x24e
    b348:	481f      	ldr	r0, [pc, #124]	; (b3c8 <uarte_0_init+0x110>)
    b34a:	f007 fb38 	bl	129be <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    b34e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    b352:	2301      	movs	r3, #1
    b354:	7f32      	ldrb	r2, [r6, #28]
    b356:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    b358:	4a1c      	ldr	r2, [pc, #112]	; (b3cc <uarte_0_init+0x114>)
    b35a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    b35e:	2308      	movs	r3, #8
    b360:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    b364:	7a3b      	ldrb	r3, [r7, #8]
    b366:	b953      	cbnz	r3, b37e <uarte_0_init+0xc6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b368:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    b36c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    b370:	69b3      	ldr	r3, [r6, #24]
    b372:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    b376:	2301      	movs	r3, #1
    b378:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b37c:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    b37e:	687b      	ldr	r3, [r7, #4]
    b380:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    b382:	bf5c      	itt	pl
    b384:	f44f 7380 	movpl.w	r3, #256	; 0x100
    b388:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b38c:	687b      	ldr	r3, [r7, #4]
    b38e:	06db      	lsls	r3, r3, #27
    b390:	bf44      	itt	mi
    b392:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    b396:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b39a:	6973      	ldr	r3, [r6, #20]
    b39c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b3a0:	2300      	movs	r3, #0
    b3a2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b3a6:	2301      	movs	r3, #1
    b3a8:	60a3      	str	r3, [r4, #8]
    b3aa:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    b3ac:	4628      	mov	r0, r5
    b3ae:	b003      	add	sp, #12
    b3b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    b3b4:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    b3b8:	e7f8      	b.n	b3ac <uarte_0_init+0xf4>
    b3ba:	bf00      	nop
    b3bc:	0bad0000 	.word	0x0bad0000
    b3c0:	00015f91 	.word	0x00015f91
    b3c4:	00015341 	.word	0x00015341
    b3c8:	00015f59 	.word	0x00015f59
    b3cc:	40017000 	.word	0x40017000

0000b3d0 <uarte_nrfx_poll_out>:
{
    b3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3d2:	4604      	mov	r4, r0
    b3d4:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    b3d6:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    b3d8:	f008 ff6d 	bl	142b6 <k_is_in_isr>
    b3dc:	b9b0      	cbnz	r0, b40c <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    b3de:	4b21      	ldr	r3, [pc, #132]	; (b464 <uarte_nrfx_poll_out+0x94>)
    b3e0:	781b      	ldrb	r3, [r3, #0]
    b3e2:	b19b      	cbz	r3, b40c <uarte_nrfx_poll_out+0x3c>
{
    b3e4:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    b3e6:	6860      	ldr	r0, [r4, #4]
    b3e8:	f007 fdaa 	bl	12f40 <is_tx_ready.isra.0>
    b3ec:	bb00      	cbnz	r0, b430 <uarte_nrfx_poll_out+0x60>
    b3ee:	2001      	movs	r0, #1
    b3f0:	f008 f823 	bl	1343a <nrfx_busy_wait>
    b3f4:	3e01      	subs	r6, #1
    b3f6:	d1f6      	bne.n	b3e6 <uarte_nrfx_poll_out+0x16>
    b3f8:	2100      	movs	r1, #0
    b3fa:	2021      	movs	r0, #33	; 0x21
    b3fc:	f005 ffc0 	bl	11380 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    b400:	e7f0      	b.n	b3e4 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    b402:	f381 8811 	msr	BASEPRI, r1
    b406:	f3bf 8f6f 	isb	sy
}
    b40a:	e7f5      	b.n	b3f8 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    b40c:	f04f 0320 	mov.w	r3, #32
    b410:	f3ef 8111 	mrs	r1, BASEPRI
    b414:	f383 8812 	msr	BASEPRI_MAX, r3
    b418:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    b41c:	6860      	ldr	r0, [r4, #4]
    b41e:	460e      	mov	r6, r1
    b420:	f007 fd8e 	bl	12f40 <is_tx_ready.isra.0>
    b424:	b990      	cbnz	r0, b44c <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    b426:	f381 8811 	msr	BASEPRI, r1
    b42a:	f3bf 8f6f 	isb	sy
}
    b42e:	e7ed      	b.n	b40c <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    b430:	f04f 0320 	mov.w	r3, #32
    b434:	f3ef 8111 	mrs	r1, BASEPRI
    b438:	f383 8812 	msr	BASEPRI_MAX, r3
    b43c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    b440:	6860      	ldr	r0, [r4, #4]
    b442:	460e      	mov	r6, r1
    b444:	f007 fd7c 	bl	12f40 <is_tx_ready.isra.0>
    b448:	2800      	cmp	r0, #0
    b44a:	d0da      	beq.n	b402 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    b44c:	697b      	ldr	r3, [r7, #20]
	tx_start(dev, data->char_out, 1);
    b44e:	2201      	movs	r2, #1
	*data->char_out = c;
    b450:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
    b452:	4620      	mov	r0, r4
    b454:	6979      	ldr	r1, [r7, #20]
    b456:	f007 fcb3 	bl	12dc0 <tx_start>
	__asm__ volatile(
    b45a:	f386 8811 	msr	BASEPRI, r6
    b45e:	f3bf 8f6f 	isb	sy
}
    b462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b464:	2000e6f0 	.word	0x2000e6f0

0000b468 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    b468:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    b46a:	490e      	ldr	r1, [pc, #56]	; (b4a4 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    b46c:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    b470:	e9d1 3400 	ldrd	r3, r4, [r1]
    b474:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    b476:	18c3      	adds	r3, r0, r3
    b478:	f144 0400 	adc.w	r4, r4, #0
    b47c:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    b480:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    b484:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    b488:	d209      	bcs.n	b49e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    b48a:	4b07      	ldr	r3, [pc, #28]	; (b4a8 <sys_clock_timeout_handler+0x40>)
    b48c:	681b      	ldr	r3, [r3, #0]
    b48e:	0a1a      	lsrs	r2, r3, #8
    b490:	061b      	lsls	r3, r3, #24
    b492:	199c      	adds	r4, r3, r6
    b494:	4b05      	ldr	r3, [pc, #20]	; (b4ac <sys_clock_timeout_handler+0x44>)
    b496:	f142 0500 	adc.w	r5, r2, #0
    b49a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    b49e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    b4a0:	f006 ba92 	b.w	119c8 <sys_clock_announce>
    b4a4:	2000c808 	.word	0x2000c808
    b4a8:	2000cbf4 	.word	0x2000cbf4
    b4ac:	2000c810 	.word	0x2000c810

0000b4b0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    b4b0:	4b0d      	ldr	r3, [pc, #52]	; (b4e8 <z_nrf_rtc_timer_read+0x38>)
    b4b2:	6818      	ldr	r0, [r3, #0]
    b4b4:	0a01      	lsrs	r1, r0, #8
    b4b6:	0600      	lsls	r0, r0, #24
    b4b8:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    b4bc:	4b0b      	ldr	r3, [pc, #44]	; (b4ec <z_nrf_rtc_timer_read+0x3c>)
    b4be:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    b4c2:	1818      	adds	r0, r3, r0
    b4c4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    b4c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    b4cc:	d20a      	bcs.n	b4e4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    b4ce:	4b08      	ldr	r3, [pc, #32]	; (b4f0 <z_nrf_rtc_timer_read+0x40>)
    b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    b4d4:	4290      	cmp	r0, r2
    b4d6:	eb71 0303 	sbcs.w	r3, r1, r3
    b4da:	d203      	bcs.n	b4e4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    b4dc:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    b4e0:	f141 0100 	adc.w	r1, r1, #0
}
    b4e4:	4770      	bx	lr
    b4e6:	bf00      	nop
    b4e8:	2000cbf4 	.word	0x2000cbf4
    b4ec:	40015000 	.word	0x40015000
    b4f0:	2000c810 	.word	0x2000c810

0000b4f4 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    b4f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    b4f8:	4b2e      	ldr	r3, [pc, #184]	; (b5b4 <rtc_nrf_isr+0xc0>)
    b4fa:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    b4fe:	0790      	lsls	r0, r2, #30
    b500:	d50b      	bpl.n	b51a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b502:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    b506:	b142      	cbz	r2, b51a <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    b508:	2200      	movs	r2, #0
    b50a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    b50e:	4a2a      	ldr	r2, [pc, #168]	; (b5b8 <rtc_nrf_isr+0xc4>)
    b510:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    b514:	6813      	ldr	r3, [r2, #0]
    b516:	3301      	adds	r3, #1
    b518:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    b51a:	4a26      	ldr	r2, [pc, #152]	; (b5b4 <rtc_nrf_isr+0xc0>)
    b51c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    b520:	03d9      	lsls	r1, r3, #15
    b522:	d527      	bpl.n	b574 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b524:	4b25      	ldr	r3, [pc, #148]	; (b5bc <rtc_nrf_isr+0xc8>)
    b526:	e8d3 1fef 	ldaex	r1, [r3]
    b52a:	f021 0001 	bic.w	r0, r1, #1
    b52e:	e8c3 0fe4 	stlex	r4, r0, [r3]
    b532:	2c00      	cmp	r4, #0
    b534:	d1f7      	bne.n	b526 <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    b536:	07cb      	lsls	r3, r1, #31
    b538:	d402      	bmi.n	b540 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b53a:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    b53e:	b1cb      	cbz	r3, b574 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    b540:	2500      	movs	r5, #0
    b542:	4c1c      	ldr	r4, [pc, #112]	; (b5b4 <rtc_nrf_isr+0xc0>)
    b544:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    b548:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    b54c:	f7ff ffb0 	bl	b4b0 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    b550:	f04f 0320 	mov.w	r3, #32
    b554:	f3ef 8211 	mrs	r2, BASEPRI
    b558:	f383 8812 	msr	BASEPRI_MAX, r3
    b55c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    b560:	4b17      	ldr	r3, [pc, #92]	; (b5c0 <rtc_nrf_isr+0xcc>)
    b562:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    b566:	42b0      	cmp	r0, r6
    b568:	41b9      	sbcs	r1, r7
    b56a:	d206      	bcs.n	b57a <rtc_nrf_isr+0x86>
	__asm__ volatile(
    b56c:	f382 8811 	msr	BASEPRI, r2
    b570:	f3bf 8f6f 	isb	sy
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
    b574:	b003      	add	sp, #12
    b576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    b57a:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
    b57e:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    b582:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
    b586:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    b588:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    b58c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    b590:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    b594:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    b598:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    b59c:	f382 8811 	msr	BASEPRI, r2
    b5a0:	f3bf 8f6f 	isb	sy
		if (handler) {
    b5a4:	2900      	cmp	r1, #0
    b5a6:	d0e5      	beq.n	b574 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
    b5a8:	9000      	str	r0, [sp, #0]
    b5aa:	4632      	mov	r2, r6
    b5ac:	463b      	mov	r3, r7
    b5ae:	4628      	mov	r0, r5
    b5b0:	4788      	blx	r1
    b5b2:	e7df      	b.n	b574 <rtc_nrf_isr+0x80>
    b5b4:	40015000 	.word	0x40015000
    b5b8:	2000cbf4 	.word	0x2000cbf4
    b5bc:	2000cbec 	.word	0x2000cbec
    b5c0:	2000c7f8 	.word	0x2000c7f8

0000b5c4 <compare_set.constprop.0.isra.0>:
static int compare_set(int32_t chan, uint64_t target_time,
    b5c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b5c8:	4604      	mov	r4, r0
    b5ca:	460d      	mov	r5, r1
    b5cc:	4f43      	ldr	r7, [pc, #268]	; (b6dc <compare_set.constprop.0.isra.0+0x118>)
    b5ce:	e8d7 8fef 	ldaex	r8, [r7]
    b5d2:	f028 0301 	bic.w	r3, r8, #1
    b5d6:	e8c7 3fe2 	stlex	r2, r3, [r7]
    b5da:	2a00      	cmp	r2, #0
    b5dc:	d1f7      	bne.n	b5ce <compare_set.constprop.0.isra.0+0xa>
    p_reg->INTENCLR = mask;
    b5de:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    b5e2:	4e3f      	ldr	r6, [pc, #252]	; (b6e0 <compare_set.constprop.0.isra.0+0x11c>)
    b5e4:	f8c6 9308 	str.w	r9, [r6, #776]	; 0x308
    b5e8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b5ec:	f3bf 8f6f 	isb	sy
	uint64_t curr_time = z_nrf_rtc_timer_read();
    b5f0:	f7ff ff5e 	bl	b4b0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    b5f4:	42a0      	cmp	r0, r4
    b5f6:	eb71 0305 	sbcs.w	r3, r1, r5
	return prev & BIT(chan);
    b5fa:	f008 0801 	and.w	r8, r8, #1
	if (curr_time < target_time) {
    b5fe:	d240      	bcs.n	b682 <compare_set.constprop.0.isra.0+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    b600:	4b38      	ldr	r3, [pc, #224]	; (b6e4 <compare_set.constprop.0.isra.0+0x120>)
    b602:	1a20      	subs	r0, r4, r0
    b604:	eb65 0101 	sbc.w	r1, r5, r1
    b608:	4298      	cmp	r0, r3
    b60a:	f171 0100 	sbcs.w	r1, r1, #0
    b60e:	d248      	bcs.n	b6a2 <compare_set.constprop.0.isra.0+0xde>
		if (target_time != cc_data[chan].target_time) {
    b610:	4b35      	ldr	r3, [pc, #212]	; (b6e8 <compare_set.constprop.0.isra.0+0x124>)
    b612:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    b616:	429d      	cmp	r5, r3
    b618:	bf08      	it	eq
    b61a:	4294      	cmpeq	r4, r2
    b61c:	d03a      	beq.n	b694 <compare_set.constprop.0.isra.0+0xd0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    b61e:	f04f 0c00 	mov.w	ip, #0
	return absolute_time & COUNTER_MAX;
    b622:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
	uint32_t cc_val = req_cc;
    b626:	4683      	mov	fp, r0
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    b628:	2103      	movs	r1, #3
	return (a - b) & COUNTER_MAX;
    b62a:	f06f 0e02 	mvn.w	lr, #2
    p_reg->EVTENCLR = mask;
    b62e:	f8c6 9348 	str.w	r9, [r6, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    b632:	f8c6 c140 	str.w	ip, [r6, #320]	; 0x140
    b636:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    b63a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; b6ec <compare_set.constprop.0.isra.0+0x128>
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    b63e:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    b642:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    p_reg->EVTENSET = mask;
    b646:	f8c6 9344 	str.w	r9, [r6, #836]	; 0x344
     return p_reg->COUNTER;
    b64a:	f8d6 2504 	ldr.w	r2, [r6, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    b64e:	ebae 0302 	sub.w	r3, lr, r2
    b652:	445b      	add	r3, fp
    b654:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    b658:	4553      	cmp	r3, sl
    b65a:	d91b      	bls.n	b694 <compare_set.constprop.0.isra.0+0xd0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b65c:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
			if (event_check(chan)) {
    b660:	b15b      	cbz	r3, b67a <compare_set.constprop.0.isra.0+0xb6>
     return p_reg->COUNTER;
    b662:	f8d6 2504 	ldr.w	r2, [r6, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    b666:	1a13      	subs	r3, r2, r0
    b668:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    b66c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    b670:	d910      	bls.n	b694 <compare_set.constprop.0.isra.0+0xd0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    b672:	f8c6 c140 	str.w	ip, [r6, #320]	; 0x140
    b676:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
			cc_val = now + cc_inc;
    b67a:	eb01 0b02 	add.w	fp, r1, r2
			cc_inc++;
    b67e:	3101      	adds	r1, #1
	for (;;) {
    b680:	e7dd      	b.n	b63e <compare_set.constprop.0.isra.0+0x7a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b682:	4b1b      	ldr	r3, [pc, #108]	; (b6f0 <compare_set.constprop.0.isra.0+0x12c>)
    b684:	e8d3 1fef 	ldaex	r1, [r3]
    b688:	f041 0101 	orr.w	r1, r1, #1
    b68c:	e8c3 1fe2 	stlex	r2, r1, [r3]
    b690:	2a00      	cmp	r2, #0
    b692:	d1f7      	bne.n	b684 <compare_set.constprop.0.isra.0+0xc0>
	cc_data[chan].target_time = target_time;
    b694:	4b14      	ldr	r3, [pc, #80]	; (b6e8 <compare_set.constprop.0.isra.0+0x124>)
	cc_data[chan].callback = handler;
    b696:	4a17      	ldr	r2, [pc, #92]	; (b6f4 <compare_set.constprop.0.isra.0+0x130>)
	cc_data[chan].target_time = target_time;
    b698:	e9c3 4502 	strd	r4, r5, [r3, #8]
	cc_data[chan].callback = handler;
    b69c:	601a      	str	r2, [r3, #0]
	cc_data[chan].user_context = user_data;
    b69e:	2200      	movs	r2, #0
    b6a0:	605a      	str	r2, [r3, #4]
	if (key) {
    b6a2:	f1b8 0f00 	cmp.w	r8, #0
    b6a6:	d016      	beq.n	b6d6 <compare_set.constprop.0.isra.0+0x112>
    b6a8:	e8d7 3fef 	ldaex	r3, [r7]
    b6ac:	f043 0301 	orr.w	r3, r3, #1
    b6b0:	e8c7 3fe2 	stlex	r2, r3, [r7]
    b6b4:	2a00      	cmp	r2, #0
    b6b6:	d1f7      	bne.n	b6a8 <compare_set.constprop.0.isra.0+0xe4>
    p_reg->INTENSET = mask;
    b6b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b6bc:	4b08      	ldr	r3, [pc, #32]	; (b6e0 <compare_set.constprop.0.isra.0+0x11c>)
    b6be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b6c2:	4b0b      	ldr	r3, [pc, #44]	; (b6f0 <compare_set.constprop.0.isra.0+0x12c>)
    b6c4:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    b6c8:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b6ca:	bf42      	ittt	mi
    b6cc:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    b6d0:	4b09      	ldrmi	r3, [pc, #36]	; (b6f8 <compare_set.constprop.0.isra.0+0x134>)
    b6d2:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    b6d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b6da:	bf00      	nop
    b6dc:	2000cbf0 	.word	0x2000cbf0
    b6e0:	40015000 	.word	0x40015000
    b6e4:	00800001 	.word	0x00800001
    b6e8:	2000c7f8 	.word	0x2000c7f8
    b6ec:	007ffffd 	.word	0x007ffffd
    b6f0:	2000cbec 	.word	0x2000cbec
    b6f4:	0000b469 	.word	0x0000b469
    b6f8:	e000e100 	.word	0xe000e100

0000b6fc <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    b6fc:	b570      	push	{r4, r5, r6, lr}
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    b6fe:	f04f 30ff 	mov.w	r0, #4294967295
    p_reg->PRESCALER = val;
    b702:	2500      	movs	r5, #0
    b704:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->INTENCLR = mask;
    b708:	4c16      	ldr	r4, [pc, #88]	; (b764 <sys_clock_driver_init+0x68>)
    b70a:	4b17      	ldr	r3, [pc, #92]	; (b768 <sys_clock_driver_init+0x6c>)
    p_reg->INTENSET = mask;
    b70c:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
    b70e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    b712:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    b716:	4b15      	ldr	r3, [pc, #84]	; (b76c <sys_clock_driver_init+0x70>)
    p_reg->PRESCALER = val;
    b718:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    b71c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    b720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b724:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    b728:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    b72c:	4b10      	ldr	r3, [pc, #64]	; (b770 <sys_clock_driver_init+0x74>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    b72e:	2101      	movs	r1, #1
    b730:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    b734:	2015      	movs	r0, #21
    b736:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    b73a:	462a      	mov	r2, r5
    b73c:	f7fe f9fe 	bl	9b3c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    b740:	2015      	movs	r0, #21
    b742:	f7fe f9df 	bl	9b04 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    b746:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    b748:	4a0a      	ldr	r2, [pc, #40]	; (b774 <sys_clock_driver_init+0x78>)
    b74a:	60a3      	str	r3, [r4, #8]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    b74c:	2100      	movs	r1, #0
    b74e:	6023      	str	r3, [r4, #0]
    b750:	4809      	ldr	r0, [pc, #36]	; (b778 <sys_clock_driver_init+0x7c>)
	int_mask = BIT_MASK(CHAN_COUNT);
    b752:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    b754:	f7ff ff36 	bl	b5c4 <compare_set.constprop.0.isra.0>

	z_nrf_clock_control_lf_on(mode);
    b758:	4630      	mov	r0, r6
    b75a:	f7ff fa45 	bl	abe8 <z_nrf_clock_control_lf_on>

	return 0;
}
    b75e:	4628      	mov	r0, r5
    b760:	bd70      	pop	{r4, r5, r6, pc}
    b762:	bf00      	nop
    b764:	40015000 	.word	0x40015000
    b768:	000f0003 	.word	0x000f0003
    b76c:	2000c7f8 	.word	0x2000c7f8
    b770:	e000e100 	.word	0xe000e100
    b774:	2000cbf0 	.word	0x2000cbf0
    b778:	007fffff 	.word	0x007fffff

0000b77c <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    b77c:	1c43      	adds	r3, r0, #1
{
    b77e:	b510      	push	{r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    b780:	d01d      	beq.n	b7be <sys_clock_set_timeout+0x42>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    b782:	2801      	cmp	r0, #1
    b784:	dd1d      	ble.n	b7c2 <sys_clock_set_timeout+0x46>
    b786:	4a10      	ldr	r2, [pc, #64]	; (b7c8 <sys_clock_set_timeout+0x4c>)
    b788:	4b10      	ldr	r3, [pc, #64]	; (b7cc <sys_clock_set_timeout+0x50>)
    b78a:	4290      	cmp	r0, r2
    b78c:	bfd4      	ite	le
    b78e:	4604      	movle	r4, r0
    b790:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    b792:	f7ff fe8d 	bl	b4b0 <z_nrf_rtc_timer_read>
    b796:	4a0e      	ldr	r2, [pc, #56]	; (b7d0 <sys_clock_set_timeout+0x54>)
    b798:	e9d2 3100 	ldrd	r3, r1, [r2]
    b79c:	1ac0      	subs	r0, r0, r3
		cyc = 0;
    b79e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b7a2:	bf28      	it	cs
    b7a4:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
    b7a6:	4a09      	ldr	r2, [pc, #36]	; (b7cc <sys_clock_set_timeout+0x50>)
	cyc += unannounced;
    b7a8:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    b7aa:	4294      	cmp	r4, r2
    b7ac:	bf28      	it	cs
    b7ae:	4614      	movcs	r4, r2
	uint64_t target_time = cyc + last_count;
    b7b0:	18e0      	adds	r0, r4, r3
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    b7b2:	f141 0100 	adc.w	r1, r1, #0
}
    b7b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    b7ba:	f7ff bf03 	b.w	b5c4 <compare_set.constprop.0.isra.0>
		cyc = MAX_TICKS * CYC_PER_TICK;
    b7be:	4c03      	ldr	r4, [pc, #12]	; (b7cc <sys_clock_set_timeout+0x50>)
    b7c0:	e7e7      	b.n	b792 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    b7c2:	2401      	movs	r4, #1
    b7c4:	e7e5      	b.n	b792 <sys_clock_set_timeout+0x16>
    b7c6:	bf00      	nop
    b7c8:	007ffffe 	.word	0x007ffffe
    b7cc:	007fffff 	.word	0x007fffff
    b7d0:	2000c808 	.word	0x2000c808

0000b7d4 <sys_clock_elapsed>:
{
    b7d4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    b7d6:	f7ff fe6b 	bl	b4b0 <z_nrf_rtc_timer_read>
    b7da:	4b02      	ldr	r3, [pc, #8]	; (b7e4 <sys_clock_elapsed+0x10>)
    b7dc:	681b      	ldr	r3, [r3, #0]
}
    b7de:	1ac0      	subs	r0, r0, r3
    b7e0:	bd08      	pop	{r3, pc}
    b7e2:	bf00      	nop
    b7e4:	2000c808 	.word	0x2000c808

0000b7e8 <nrf_modem_lib_init>:

	return rc;
}

int nrf_modem_lib_init(void)
{
    b7e8:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(NRF_MODEM_IPC_IRQ, CONFIG_NRF_MODEM_LIB_IPC_IRQ_PRIO,
    b7ea:	2200      	movs	r2, #0
    b7ec:	2101      	movs	r1, #1
    b7ee:	202a      	movs	r0, #42	; 0x2a
    b7f0:	f7fe f9a4 	bl	9b3c <z_arm_irq_priority_set>
	rc = nrf_modem_init(&init_params);
    b7f4:	480e      	ldr	r0, [pc, #56]	; (b830 <nrf_modem_lib_init+0x48>)
    b7f6:	f003 fbff 	bl	eff8 <nrf_modem_init>
    b7fa:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
    b7fc:	4c0d      	ldr	r4, [pc, #52]	; (b834 <nrf_modem_lib_init+0x4c>)
    b7fe:	4e0e      	ldr	r6, [pc, #56]	; (b838 <nrf_modem_lib_init+0x50>)
    b800:	42b4      	cmp	r4, r6
    b802:	d912      	bls.n	b82a <nrf_modem_lib_init+0x42>
    b804:	490d      	ldr	r1, [pc, #52]	; (b83c <nrf_modem_lib_init+0x54>)
    b806:	2380      	movs	r3, #128	; 0x80
    b808:	4a0d      	ldr	r2, [pc, #52]	; (b840 <nrf_modem_lib_init+0x58>)
    b80a:	480e      	ldr	r0, [pc, #56]	; (b844 <nrf_modem_lib_init+0x5c>)
    b80c:	f007 f8de 	bl	129cc <assert_print>
    b810:	480d      	ldr	r0, [pc, #52]	; (b848 <nrf_modem_lib_init+0x60>)
    b812:	f007 f8db 	bl	129cc <assert_print>
    b816:	2180      	movs	r1, #128	; 0x80
    b818:	4809      	ldr	r0, [pc, #36]	; (b840 <nrf_modem_lib_init+0x58>)
    b81a:	f007 f8d0 	bl	129be <assert_post_action>
		e->callback(rc, e->context);
    b81e:	e9d4 3100 	ldrd	r3, r1, [r4]
    b822:	4628      	mov	r0, r5
    b824:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
    b826:	3408      	adds	r4, #8
    b828:	e7ea      	b.n	b800 <nrf_modem_lib_init+0x18>
    b82a:	d3f8      	bcc.n	b81e <nrf_modem_lib_init+0x36>
	return _nrf_modem_lib_init();
}
    b82c:	4628      	mov	r0, r5
    b82e:	bd70      	pop	{r4, r5, r6, pc}
    b830:	00014e00 	.word	0x00014e00
    b834:	000170bc 	.word	0x000170bc
    b838:	000170c4 	.word	0x000170c4
    b83c:	00015fe1 	.word	0x00015fe1
    b840:	00015faf 	.word	0x00015faf
    b844:	00015341 	.word	0x00015341
    b848:	00015764 	.word	0x00015764

0000b84c <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
    b84c:	b5f0      	push	{r4, r5, r6, r7, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
    b84e:	4b0f      	ldr	r3, [pc, #60]	; (b88c <thread_monitor_entry_get+0x40>)
{
    b850:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
    b852:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
    b854:	4b0e      	ldr	r3, [pc, #56]	; (b890 <thread_monitor_entry_get+0x44>)
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    b856:	250b      	movs	r5, #11
	int entry_age, oldest_entry_age = 0;
    b858:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
    b85a:	4618      	mov	r0, r3
    b85c:	461f      	mov	r7, r3
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    b85e:	42b8      	cmp	r0, r7
    b860:	d301      	bcc.n	b866 <thread_monitor_entry_get+0x1a>
    b862:	3d01      	subs	r5, #1
    b864:	d104      	bne.n	b870 <thread_monitor_entry_get+0x24>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
    b866:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
    b868:	3a01      	subs	r2, #1
	new_entry->id = id;
    b86a:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
    b86c:	605a      	str	r2, [r3, #4]
}
    b86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (entry->id == id) {
    b870:	6804      	ldr	r4, [r0, #0]
    b872:	428c      	cmp	r4, r1
    b874:	d0fb      	beq.n	b86e <thread_monitor_entry_get+0x22>
		} else if (entry->id == 0) {
    b876:	b13c      	cbz	r4, b888 <thread_monitor_entry_get+0x3c>
		entry_age = rpc_event_cnt - entry->cnt;
    b878:	6844      	ldr	r4, [r0, #4]
    b87a:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
    b87c:	42a6      	cmp	r6, r4
    b87e:	bfbc      	itt	lt
    b880:	4603      	movlt	r3, r0
    b882:	4626      	movlt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    b884:	3008      	adds	r0, #8
    b886:	e7ea      	b.n	b85e <thread_monitor_entry_get+0x12>
    b888:	4603      	mov	r3, r0
    b88a:	e7ec      	b.n	b866 <thread_monitor_entry_get+0x1a>
    b88c:	2000cca0 	.word	0x2000cca0
    b890:	2000ccac 	.word	0x2000ccac

0000b894 <on_init>:
	list->head = NULL;
    b894:	2000      	movs	r0, #0
    b896:	4b05      	ldr	r3, [pc, #20]	; (b8ac <on_init+0x18>)
	list->tail = NULL;
    b898:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b89c:	4b04      	ldr	r3, [pc, #16]	; (b8b0 <on_init+0x1c>)
    b89e:	e8d3 2fef 	ldaex	r2, [r3]
    b8a2:	e8c3 0fe1 	stlex	r1, r0, [r3]
    b8a6:	2900      	cmp	r1, #0
    b8a8:	d1f9      	bne.n	b89e <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
    b8aa:	4770      	bx	lr
    b8ac:	2000cca4 	.word	0x2000cca4
    b8b0:	2000cca0 	.word	0x2000cca0

0000b8b4 <nrf_modem_os_timedwait>:
{
    b8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b8b8:	b088      	sub	sp, #32
    b8ba:	4605      	mov	r5, r0
    b8bc:	460e      	mov	r6, r1
	if (!nrf_modem_is_initialized()) {
    b8be:	f008 fcd6 	bl	1426e <nrf_modem_is_initialized>
    b8c2:	b920      	cbnz	r0, b8ce <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
    b8c4:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
    b8c8:	b008      	add	sp, #32
    b8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
    b8ce:	f008 fd8b 	bl	143e8 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
    b8d2:	6833      	ldr	r3, [r6, #0]
    b8d4:	4604      	mov	r4, r0
    b8d6:	2b00      	cmp	r3, #0
    b8d8:	460f      	mov	r7, r1
    b8da:	d104      	bne.n	b8e6 <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
    b8dc:	f005 fc16 	bl	1110c <z_impl_k_yield>
		return -NRF_EAGAIN;
    b8e0:	f06f 000a 	mvn.w	r0, #10
    b8e4:	e7f0      	b.n	b8c8 <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
    b8e6:	bfbc      	itt	lt
    b8e8:	f04f 33ff 	movlt.w	r3, #4294967295
    b8ec:	6033      	strlt	r3, [r6, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    b8ee:	2201      	movs	r2, #1
    b8f0:	2100      	movs	r1, #0
    b8f2:	a801      	add	r0, sp, #4
    b8f4:	f008 fd17 	bl	14326 <z_impl_k_sem_init>
    b8f8:	46e8      	mov	r8, sp
	thread->context = context;
    b8fa:	9507      	str	r5, [sp, #28]
	__asm__ volatile(
    b8fc:	f04f 0320 	mov.w	r3, #32
    b900:	f3ef 8a11 	mrs	sl, BASEPRI
    b904:	f383 8812 	msr	BASEPRI_MAX, r3
    b908:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    b90c:	f005 fd6c 	bl	113e8 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    b910:	f7ff ff9c 	bl	b84c <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
    b914:	f8df 9118 	ldr.w	r9, [pc, #280]	; ba30 <nrf_modem_os_timedwait+0x17c>
    b918:	6842      	ldr	r2, [r0, #4]
    b91a:	f8d9 3000 	ldr.w	r3, [r9]
    b91e:	429a      	cmp	r2, r3
    b920:	d16d      	bne.n	b9fe <nrf_modem_os_timedwait+0x14a>
	parent->next = child;
    b922:	2300      	movs	r3, #0
	return list->tail;
    b924:	4d43      	ldr	r5, [pc, #268]	; (ba34 <nrf_modem_os_timedwait+0x180>)
	parent->next = child;
    b926:	9300      	str	r3, [sp, #0]
	return list->tail;
    b928:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    b92a:	2b00      	cmp	r3, #0
    b92c:	d16e      	bne.n	ba0c <nrf_modem_os_timedwait+0x158>
	list->head = node;
    b92e:	e9c5 8800 	strd	r8, r8, [r5]
	__asm__ volatile(
    b932:	f38a 8811 	msr	BASEPRI, sl
    b936:	f3bf 8f6f 	isb	sy
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
    b93a:	6833      	ldr	r3, [r6, #0]
    b93c:	1c5a      	adds	r2, r3, #1
    b93e:	d06a      	beq.n	ba16 <nrf_modem_os_timedwait+0x162>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    b940:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    b944:	f240 30e7 	movw	r0, #999	; 0x3e7
    b948:	2100      	movs	r1, #0
    b94a:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
    b94e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b952:	2300      	movs	r3, #0
    b954:	fbcc 010e 	smlal	r0, r1, ip, lr
    b958:	f7fc fbf4 	bl	8144 <__aeabi_uldivmod>
    b95c:	4602      	mov	r2, r0
    b95e:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    b960:	a801      	add	r0, sp, #4
    b962:	f004 fa89 	bl	fe78 <z_impl_k_sem_take>
	__asm__ volatile(
    b966:	f04f 0320 	mov.w	r3, #32
    b96a:	f3ef 8a11 	mrs	sl, BASEPRI
    b96e:	f383 8812 	msr	BASEPRI_MAX, r3
    b972:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b976:	2200      	movs	r2, #0
	return list->head;
    b978:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b97a:	b15b      	cbz	r3, b994 <nrf_modem_os_timedwait+0xe0>
    b97c:	4543      	cmp	r3, r8
    b97e:	d154      	bne.n	ba2a <nrf_modem_os_timedwait+0x176>
	return node->next;
    b980:	9900      	ldr	r1, [sp, #0]
Z_GENLIST_REMOVE(slist, snode)
    b982:	2a00      	cmp	r2, #0
    b984:	d14b      	bne.n	ba1e <nrf_modem_os_timedwait+0x16a>
    b986:	686a      	ldr	r2, [r5, #4]
	list->head = node;
    b988:	6029      	str	r1, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
    b98a:	429a      	cmp	r2, r3
    b98c:	d100      	bne.n	b990 <nrf_modem_os_timedwait+0xdc>
	list->tail = node;
    b98e:	6069      	str	r1, [r5, #4]
	parent->next = child;
    b990:	2300      	movs	r3, #0
    b992:	9300      	str	r3, [sp, #0]
	return z_impl_z_current_get();
    b994:	f005 fd28 	bl	113e8 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    b998:	f7ff ff58 	bl	b84c <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
    b99c:	f8d9 3000 	ldr.w	r3, [r9]
    b9a0:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
    b9a2:	f38a 8811 	msr	BASEPRI, sl
    b9a6:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
    b9aa:	f008 fc60 	bl	1426e <nrf_modem_is_initialized>
    b9ae:	2800      	cmp	r0, #0
    b9b0:	d088      	beq.n	b8c4 <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
    b9b2:	6835      	ldr	r5, [r6, #0]
    b9b4:	1c6b      	adds	r3, r5, #1
    b9b6:	d027      	beq.n	ba08 <nrf_modem_os_timedwait+0x154>
	return z_impl_k_uptime_ticks();
    b9b8:	f008 fd16 	bl	143e8 <z_impl_k_uptime_ticks>
    b9bc:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
    b9c0:	fba0 320e 	umull	r3, r2, r0, lr
    b9c4:	fb0e 2101 	mla	r1, lr, r1, r2
    b9c8:	fba4 420e 	umull	r4, r2, r4, lr
    b9cc:	fb0e 2207 	mla	r2, lr, r7, r2
    b9d0:	0bdb      	lsrs	r3, r3, #15
    b9d2:	0be4      	lsrs	r4, r4, #15
    b9d4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    b9d8:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
	delta = uptime - *reftime;
    b9dc:	1b1b      	subs	r3, r3, r4
    b9de:	ea4f 31d1 	mov.w	r1, r1, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
    b9e2:	ea4f 7ce5 	mov.w	ip, r5, asr #31
    b9e6:	eb61 31d2 	sbc.w	r1, r1, r2, lsr #15
    b9ea:	1aed      	subs	r5, r5, r3
    b9ec:	eb6c 0c01 	sbc.w	ip, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
    b9f0:	f1bc 0f00 	cmp.w	ip, #0
    b9f4:	bfb8      	it	lt
    b9f6:	2500      	movlt	r5, #0
    b9f8:	6035      	str	r5, [r6, #0]
	if (*timeout == 0) {
    b9fa:	b92d      	cbnz	r5, ba08 <nrf_modem_os_timedwait+0x154>
    b9fc:	e770      	b.n	b8e0 <nrf_modem_os_timedwait+0x2c>
	entry->cnt = rpc_event_cnt;
    b9fe:	6043      	str	r3, [r0, #4]
    ba00:	f38a 8811 	msr	BASEPRI, sl
    ba04:	f3bf 8f6f 	isb	sy
		return 0;
    ba08:	2000      	movs	r0, #0
    ba0a:	e75d      	b.n	b8c8 <nrf_modem_os_timedwait+0x14>
    ba0c:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
    ba10:	f8c5 8004 	str.w	r8, [r5, #4]
    ba14:	e78d      	b.n	b932 <nrf_modem_os_timedwait+0x7e>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
    ba16:	f04f 32ff 	mov.w	r2, #4294967295
    ba1a:	4613      	mov	r3, r2
    ba1c:	e7a0      	b.n	b960 <nrf_modem_os_timedwait+0xac>
	parent->next = child;
    ba1e:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    ba20:	6869      	ldr	r1, [r5, #4]
    ba22:	4299      	cmp	r1, r3
	list->tail = node;
    ba24:	bf08      	it	eq
    ba26:	606a      	streq	r2, [r5, #4]
}
    ba28:	e7b2      	b.n	b990 <nrf_modem_os_timedwait+0xdc>
	return node->next;
    ba2a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ba2c:	681b      	ldr	r3, [r3, #0]
    ba2e:	e7a4      	b.n	b97a <nrf_modem_os_timedwait+0xc6>
    ba30:	2000cca0 	.word	0x2000cca0
    ba34:	2000cca4 	.word	0x2000cca4

0000ba38 <nrf_modem_os_errno_set>:
{
    ba38:	b510      	push	{r4, lr}
	__ASSERT(err_code > 0, "Tried to set negative error code, %d", err_code);
    ba3a:	1e04      	subs	r4, r0, #0
    ba3c:	dc0d      	bgt.n	ba5a <nrf_modem_os_errno_set+0x22>
    ba3e:	23df      	movs	r3, #223	; 0xdf
    ba40:	4a08      	ldr	r2, [pc, #32]	; (ba64 <nrf_modem_os_errno_set+0x2c>)
    ba42:	4909      	ldr	r1, [pc, #36]	; (ba68 <nrf_modem_os_errno_set+0x30>)
    ba44:	4809      	ldr	r0, [pc, #36]	; (ba6c <nrf_modem_os_errno_set+0x34>)
    ba46:	f006 ffc1 	bl	129cc <assert_print>
    ba4a:	4621      	mov	r1, r4
    ba4c:	4808      	ldr	r0, [pc, #32]	; (ba70 <nrf_modem_os_errno_set+0x38>)
    ba4e:	f006 ffbd 	bl	129cc <assert_print>
    ba52:	21df      	movs	r1, #223	; 0xdf
    ba54:	4803      	ldr	r0, [pc, #12]	; (ba64 <nrf_modem_os_errno_set+0x2c>)
    ba56:	f006 ffb2 	bl	129be <assert_post_action>
	errno = err_code;
    ba5a:	f007 f817 	bl	12a8c <__errno>
    ba5e:	6004      	str	r4, [r0, #0]
}
    ba60:	bd10      	pop	{r4, pc}
    ba62:	bf00      	nop
    ba64:	00016006 	.word	0x00016006
    ba68:	00016037 	.word	0x00016037
    ba6c:	00015341 	.word	0x00015341
    ba70:	00016044 	.word	0x00016044

0000ba74 <nrf_modem_os_sem_init>:
{
    ba74:	b570      	push	{r4, r5, r6, lr}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
    ba76:	6803      	ldr	r3, [r0, #0]
    ba78:	4c12      	ldr	r4, [pc, #72]	; (bac4 <nrf_modem_os_sem_init+0x50>)
    ba7a:	b12b      	cbz	r3, ba88 <nrf_modem_os_sem_init+0x14>
    ba7c:	42a3      	cmp	r3, r4
    ba7e:	d303      	bcc.n	ba88 <nrf_modem_os_sem_init+0x14>
    ba80:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
    ba84:	42ab      	cmp	r3, r5
    ba86:	d317      	bcc.n	bab8 <nrf_modem_os_sem_init+0x44>
	__ASSERT(used < NRF_MODEM_OS_NUM_SEM_REQUIRED,
    ba88:	4d0f      	ldr	r5, [pc, #60]	; (bac8 <nrf_modem_os_sem_init+0x54>)
    ba8a:	782b      	ldrb	r3, [r5, #0]
    ba8c:	2b06      	cmp	r3, #6
    ba8e:	d90c      	bls.n	baaa <nrf_modem_os_sem_init+0x36>
    ba90:	490e      	ldr	r1, [pc, #56]	; (bacc <nrf_modem_os_sem_init+0x58>)
    ba92:	23f3      	movs	r3, #243	; 0xf3
    ba94:	4a0e      	ldr	r2, [pc, #56]	; (bad0 <nrf_modem_os_sem_init+0x5c>)
    ba96:	480f      	ldr	r0, [pc, #60]	; (bad4 <nrf_modem_os_sem_init+0x60>)
    ba98:	f006 ff98 	bl	129cc <assert_print>
    ba9c:	480e      	ldr	r0, [pc, #56]	; (bad8 <nrf_modem_os_sem_init+0x64>)
    ba9e:	f006 ff95 	bl	129cc <assert_print>
    baa2:	21f3      	movs	r1, #243	; 0xf3
    baa4:	480a      	ldr	r0, [pc, #40]	; (bad0 <nrf_modem_os_sem_init+0x5c>)
    baa6:	f006 ff8a 	bl	129be <assert_post_action>
	*sem = &nrf_modem_os_sems[used++];
    baaa:	1c5e      	adds	r6, r3, #1
    baac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    bab0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    bab4:	702e      	strb	r6, [r5, #0]
    bab6:	6004      	str	r4, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
    bab8:	6800      	ldr	r0, [r0, #0]
}
    baba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    babe:	f008 bc32 	b.w	14326 <z_impl_k_sem_init>
    bac2:	bf00      	nop
    bac4:	2000cbf8 	.word	0x2000cbf8
    bac8:	2000d25d 	.word	0x2000d25d
    bacc:	0001606b 	.word	0x0001606b
    bad0:	00016006 	.word	0x00016006
    bad4:	00015341 	.word	0x00015341
    bad8:	00016074 	.word	0x00016074

0000badc <nrf_modem_os_sem_give>:
{
    badc:	b508      	push	{r3, lr}
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
    bade:	b128      	cbz	r0, baec <nrf_modem_os_sem_give+0x10>
    bae0:	4a0b      	ldr	r2, [pc, #44]	; (bb10 <nrf_modem_os_sem_give+0x34>)
    bae2:	4290      	cmp	r0, r2
    bae4:	d302      	bcc.n	baec <nrf_modem_os_sem_give+0x10>
    bae6:	32a8      	adds	r2, #168	; 0xa8
    bae8:	4290      	cmp	r0, r2
    baea:	d30c      	bcc.n	bb06 <nrf_modem_os_sem_give+0x2a>
    baec:	4909      	ldr	r1, [pc, #36]	; (bb14 <nrf_modem_os_sem_give+0x38>)
    baee:	23fe      	movs	r3, #254	; 0xfe
    baf0:	4a09      	ldr	r2, [pc, #36]	; (bb18 <nrf_modem_os_sem_give+0x3c>)
    baf2:	480a      	ldr	r0, [pc, #40]	; (bb1c <nrf_modem_os_sem_give+0x40>)
    baf4:	f006 ff6a 	bl	129cc <assert_print>
    baf8:	4809      	ldr	r0, [pc, #36]	; (bb20 <nrf_modem_os_sem_give+0x44>)
    bafa:	f006 ff67 	bl	129cc <assert_print>
    bafe:	21fe      	movs	r1, #254	; 0xfe
    bb00:	4805      	ldr	r0, [pc, #20]	; (bb18 <nrf_modem_os_sem_give+0x3c>)
    bb02:	f006 ff5c 	bl	129be <assert_post_action>
}
    bb06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_impl_k_sem_give(sem);
    bb0a:	f004 b971 	b.w	fdf0 <z_impl_k_sem_give>
    bb0e:	bf00      	nop
    bb10:	2000cbf8 	.word	0x2000cbf8
    bb14:	0001609a 	.word	0x0001609a
    bb18:	00016006 	.word	0x00016006
    bb1c:	00015341 	.word	0x00015341
    bb20:	00016220 	.word	0x00016220

0000bb24 <nrf_modem_os_sem_take>:
{
    bb24:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
    bb26:	4605      	mov	r5, r0
    bb28:	b128      	cbz	r0, bb36 <nrf_modem_os_sem_take+0x12>
    bb2a:	4b19      	ldr	r3, [pc, #100]	; (bb90 <nrf_modem_os_sem_take+0x6c>)
    bb2c:	4298      	cmp	r0, r3
    bb2e:	d302      	bcc.n	bb36 <nrf_modem_os_sem_take+0x12>
    bb30:	33a8      	adds	r3, #168	; 0xa8
    bb32:	4298      	cmp	r0, r3
    bb34:	d30e      	bcc.n	bb54 <nrf_modem_os_sem_take+0x30>
    bb36:	4917      	ldr	r1, [pc, #92]	; (bb94 <nrf_modem_os_sem_take+0x70>)
    bb38:	f44f 7384 	mov.w	r3, #264	; 0x108
    bb3c:	4a16      	ldr	r2, [pc, #88]	; (bb98 <nrf_modem_os_sem_take+0x74>)
    bb3e:	4817      	ldr	r0, [pc, #92]	; (bb9c <nrf_modem_os_sem_take+0x78>)
    bb40:	f006 ff44 	bl	129cc <assert_print>
    bb44:	4816      	ldr	r0, [pc, #88]	; (bba0 <nrf_modem_os_sem_take+0x7c>)
    bb46:	f006 ff41 	bl	129cc <assert_print>
    bb4a:	f44f 7184 	mov.w	r1, #264	; 0x108
    bb4e:	4812      	ldr	r0, [pc, #72]	; (bb98 <nrf_modem_os_sem_take+0x74>)
    bb50:	f006 ff35 	bl	129be <assert_post_action>
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
    bb54:	1c4b      	adds	r3, r1, #1
    bb56:	d017      	beq.n	bb88 <nrf_modem_os_sem_take+0x64>
    bb58:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
    bb5c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    bb60:	f240 30e7 	movw	r0, #999	; 0x3e7
    bb64:	2100      	movs	r1, #0
    bb66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bb6a:	2300      	movs	r3, #0
    bb6c:	fbc4 0106 	smlal	r0, r1, r4, r6
    bb70:	f7fc fae8 	bl	8144 <__aeabi_uldivmod>
    bb74:	4602      	mov	r2, r0
    bb76:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    bb78:	4628      	mov	r0, r5
    bb7a:	f004 f97d 	bl	fe78 <z_impl_k_sem_take>
		return -NRF_EAGAIN;
    bb7e:	2800      	cmp	r0, #0
}
    bb80:	bf18      	it	ne
    bb82:	f06f 000a 	mvnne.w	r0, #10
    bb86:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
    bb88:	f04f 32ff 	mov.w	r2, #4294967295
    bb8c:	4613      	mov	r3, r2
    bb8e:	e7f3      	b.n	bb78 <nrf_modem_os_sem_take+0x54>
    bb90:	2000cbf8 	.word	0x2000cbf8
    bb94:	0001609a 	.word	0x0001609a
    bb98:	00016006 	.word	0x00016006
    bb9c:	00015341 	.word	0x00015341
    bba0:	00016220 	.word	0x00016220

0000bba4 <nrf_modem_os_event_notify>:
{
    bba4:	b538      	push	{r3, r4, r5, lr}
    bba6:	4605      	mov	r5, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    bba8:	4b0a      	ldr	r3, [pc, #40]	; (bbd4 <nrf_modem_os_event_notify+0x30>)
    bbaa:	e8d3 1fef 	ldaex	r1, [r3]
    bbae:	3101      	adds	r1, #1
    bbb0:	e8c3 1fe2 	stlex	r2, r1, [r3]
    bbb4:	2a00      	cmp	r2, #0
    bbb6:	d1f8      	bne.n	bbaa <nrf_modem_os_event_notify+0x6>
	return list->head;
    bbb8:	4b07      	ldr	r3, [pc, #28]	; (bbd8 <nrf_modem_os_event_notify+0x34>)
    bbba:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    bbbc:	b904      	cbnz	r4, bbc0 <nrf_modem_os_event_notify+0x1c>
}
    bbbe:	bd38      	pop	{r3, r4, r5, pc}
		if ((thread->context == context) || (context == 0)) {
    bbc0:	69e3      	ldr	r3, [r4, #28]
    bbc2:	42ab      	cmp	r3, r5
    bbc4:	d000      	beq.n	bbc8 <nrf_modem_os_event_notify+0x24>
    bbc6:	b915      	cbnz	r5, bbce <nrf_modem_os_event_notify+0x2a>
	z_impl_k_sem_give(sem);
    bbc8:	1d20      	adds	r0, r4, #4
    bbca:	f004 f911 	bl	fdf0 <z_impl_k_sem_give>
	return node->next;
    bbce:	6824      	ldr	r4, [r4, #0]
    bbd0:	e7f4      	b.n	bbbc <nrf_modem_os_event_notify+0x18>
    bbd2:	bf00      	nop
    bbd4:	2000cca0 	.word	0x2000cca0
    bbd8:	2000cca4 	.word	0x2000cca4

0000bbdc <nrf_modem_os_alloc>:
{
    bbdc:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
    bbde:	2200      	movs	r2, #0
    bbe0:	2300      	movs	r3, #0
    bbe2:	4801      	ldr	r0, [pc, #4]	; (bbe8 <nrf_modem_os_alloc+0xc>)
    bbe4:	f008 bb5d 	b.w	142a2 <k_heap_alloc>
    bbe8:	2000ccfc 	.word	0x2000ccfc

0000bbec <nrf_modem_os_free>:
{
    bbec:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_heap, mem);
    bbee:	4801      	ldr	r0, [pc, #4]	; (bbf4 <nrf_modem_os_free+0x8>)
    bbf0:	f003 bcd6 	b.w	f5a0 <k_heap_free>
    bbf4:	2000ccfc 	.word	0x2000ccfc

0000bbf8 <nrf_modem_os_shm_tx_alloc>:
{
    bbf8:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
    bbfa:	2200      	movs	r2, #0
    bbfc:	2300      	movs	r3, #0
    bbfe:	4801      	ldr	r0, [pc, #4]	; (bc04 <nrf_modem_os_shm_tx_alloc+0xc>)
    bc00:	f008 bb4f 	b.w	142a2 <k_heap_alloc>
    bc04:	2000cd14 	.word	0x2000cd14

0000bc08 <nrf_modem_os_shm_tx_free>:
{
    bc08:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
    bc0a:	4801      	ldr	r0, [pc, #4]	; (bc10 <nrf_modem_os_shm_tx_free+0x8>)
    bc0c:	f003 bcc8 	b.w	f5a0 <k_heap_free>
    bc10:	2000cd14 	.word	0x2000cd14

0000bc14 <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
    bc14:	b508      	push	{r3, lr}
	/* Initialize heaps */
	k_heap_init(&nrf_modem_lib_heap, library_heap_buf, sizeof(library_heap_buf));
    bc16:	f44f 6280 	mov.w	r2, #1024	; 0x400
    bc1a:	4906      	ldr	r1, [pc, #24]	; (bc34 <nrf_modem_os_init+0x20>)
    bc1c:	4806      	ldr	r0, [pc, #24]	; (bc38 <nrf_modem_os_init+0x24>)
    bc1e:	f008 fb38 	bl	14292 <k_heap_init>
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
		    CONFIG_NRF_MODEM_LIB_SHMEM_TX_SIZE);
}
    bc22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
    bc26:	f44f 5202 	mov.w	r2, #8320	; 0x2080
    bc2a:	4904      	ldr	r1, [pc, #16]	; (bc3c <nrf_modem_os_init+0x28>)
    bc2c:	4804      	ldr	r0, [pc, #16]	; (bc40 <nrf_modem_os_init+0x2c>)
    bc2e:	f008 bb30 	b.w	14292 <k_heap_init>
    bc32:	bf00      	nop
    bc34:	2000d25e 	.word	0x2000d25e
    bc38:	2000ccfc 	.word	0x2000ccfc
    bc3c:	200084e8 	.word	0x200084e8
    bc40:	2000cd14 	.word	0x2000cd14

0000bc44 <nrf_modem_os_shutdown>:

void nrf_modem_os_shutdown(void)
{
    bc44:	b510      	push	{r4, lr}
	return list->head;
    bc46:	4b04      	ldr	r3, [pc, #16]	; (bc58 <nrf_modem_os_shutdown+0x14>)
    bc48:	681c      	ldr	r4, [r3, #0]
	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    bc4a:	b904      	cbnz	r4, bc4e <nrf_modem_os_shutdown+0xa>
		k_sem_give(&thread->sem);
	}
}
    bc4c:	bd10      	pop	{r4, pc}
    bc4e:	1d20      	adds	r0, r4, #4
    bc50:	f004 f8ce 	bl	fdf0 <z_impl_k_sem_give>
	return node->next;
    bc54:	6824      	ldr	r4, [r4, #0]
    bc56:	e7f8      	b.n	bc4a <nrf_modem_os_shutdown+0x6>
    bc58:	2000cca4 	.word	0x2000cca4

0000bc5c <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
    bc5c:	2801      	cmp	r0, #1
    bc5e:	d01e      	beq.n	bc9e <z_to_nrf_optname+0x42>
    bc60:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
    bc64:	d123      	bne.n	bcae <z_to_nrf_optname+0x52>
	case SOL_TLS:
		switch (z_in_optname) {
    bc66:	1e4b      	subs	r3, r1, #1
    bc68:	2b14      	cmp	r3, #20
    bc6a:	d820      	bhi.n	bcae <z_to_nrf_optname+0x52>
    bc6c:	e8df f003 	tbb	[pc, r3]
    bc70:	0c0c0c0c 	.word	0x0c0c0c0c
    bc74:	1f1f0c0c 	.word	0x1f1f0c0c
    bc78:	0c1f1f1f 	.word	0x0c1f1f1f
    bc7c:	1f1f0c0c 	.word	0x1f1f0c0c
    bc80:	13110f0b 	.word	0x13110f0b
    bc84:	15          	.byte	0x15
    bc85:	00          	.byte	0x00
		case TLS_CIPHERSUITE_USED:
			*nrf_out_optname = NRF_SO_SEC_CIPHERSUITE_USED;
			break;
		case TLS_DTLS_CID:
			*nrf_out_optname = NRF_SO_SEC_DTLS_CID;
			break;
    bc86:	210f      	movs	r1, #15
	int retval = 0;
    bc88:	2000      	movs	r0, #0
		switch (z_in_optname) {
		case SO_ERROR:
			*nrf_out_optname = NRF_SO_ERROR;
			break;
		case SO_RCVTIMEO:
			*nrf_out_optname = NRF_SO_RCVTIMEO;
    bc8a:	6011      	str	r1, [r2, #0]
    bc8c:	4770      	bx	lr
			break;
    bc8e:	2110      	movs	r1, #16
    bc90:	e7fa      	b.n	bc88 <z_to_nrf_optname+0x2c>
			break;
    bc92:	2111      	movs	r1, #17
    bc94:	e7f8      	b.n	bc88 <z_to_nrf_optname+0x2c>
			break;
    bc96:	2112      	movs	r1, #18
    bc98:	e7f6      	b.n	bc88 <z_to_nrf_optname+0x2c>
			break;
    bc9a:	2113      	movs	r1, #19
    bc9c:	e7f4      	b.n	bc88 <z_to_nrf_optname+0x2c>
		switch (z_in_optname) {
    bc9e:	2937      	cmp	r1, #55	; 0x37
    bca0:	dc05      	bgt.n	bcae <z_to_nrf_optname+0x52>
    bca2:	2913      	cmp	r1, #19
    bca4:	dc06      	bgt.n	bcb4 <z_to_nrf_optname+0x58>
    bca6:	2902      	cmp	r1, #2
    bca8:	d0ee      	beq.n	bc88 <z_to_nrf_optname+0x2c>
    bcaa:	2904      	cmp	r1, #4
    bcac:	d0ec      	beq.n	bc88 <z_to_nrf_optname+0x2c>
    bcae:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
    bcb2:	4770      	bx	lr
    bcb4:	f1a1 0314 	sub.w	r3, r1, #20
    bcb8:	2b23      	cmp	r3, #35	; 0x23
    bcba:	d8f8      	bhi.n	bcae <z_to_nrf_optname+0x52>
    bcbc:	a001      	add	r0, pc, #4	; (adr r0, bcc4 <z_to_nrf_optname+0x68>)
    bcbe:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    bcc2:	bf00      	nop
    bcc4:	0000bc89 	.word	0x0000bc89
    bcc8:	0000bc89 	.word	0x0000bc89
    bccc:	0000bcaf 	.word	0x0000bcaf
    bcd0:	0000bcaf 	.word	0x0000bcaf
    bcd4:	0000bcaf 	.word	0x0000bcaf
    bcd8:	0000bc89 	.word	0x0000bc89
    bcdc:	0000bcaf 	.word	0x0000bcaf
    bce0:	0000bcaf 	.word	0x0000bcaf
    bce4:	0000bcaf 	.word	0x0000bcaf
    bce8:	0000bcaf 	.word	0x0000bcaf
    bcec:	0000bc89 	.word	0x0000bc89
    bcf0:	0000bc89 	.word	0x0000bc89
    bcf4:	0000bc89 	.word	0x0000bc89
    bcf8:	0000bcaf 	.word	0x0000bcaf
    bcfc:	0000bcaf 	.word	0x0000bcaf
    bd00:	0000bcaf 	.word	0x0000bcaf
    bd04:	0000bcaf 	.word	0x0000bcaf
    bd08:	0000bcaf 	.word	0x0000bcaf
    bd0c:	0000bcaf 	.word	0x0000bcaf
    bd10:	0000bcaf 	.word	0x0000bcaf
    bd14:	0000bcaf 	.word	0x0000bcaf
    bd18:	0000bcaf 	.word	0x0000bcaf
    bd1c:	0000bcaf 	.word	0x0000bcaf
    bd20:	0000bcaf 	.word	0x0000bcaf
    bd24:	0000bcaf 	.word	0x0000bcaf
    bd28:	0000bcaf 	.word	0x0000bcaf
    bd2c:	0000bcaf 	.word	0x0000bcaf
    bd30:	0000bcaf 	.word	0x0000bcaf
    bd34:	0000bcaf 	.word	0x0000bcaf
    bd38:	0000bcaf 	.word	0x0000bcaf
    bd3c:	0000bc89 	.word	0x0000bc89
    bd40:	0000bc89 	.word	0x0000bc89
    bd44:	0000bc89 	.word	0x0000bc89
    bd48:	0000bc89 	.word	0x0000bc89
    bd4c:	0000bc89 	.word	0x0000bc89
    bd50:	0000bc89 	.word	0x0000bc89

0000bd54 <nrf91_socket_offload_init>:
static int nrf91_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
    bd54:	f04f 32ff 	mov.w	r2, #4294967295
    bd58:	4b06      	ldr	r3, [pc, #24]	; (bd74 <nrf91_socket_offload_init+0x20>)
	}

	return 0;
}
    bd5a:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
    bd5c:	601a      	str	r2, [r3, #0]
    bd5e:	619a      	str	r2, [r3, #24]
    bd60:	631a      	str	r2, [r3, #48]	; 0x30
    bd62:	649a      	str	r2, [r3, #72]	; 0x48
    bd64:	661a      	str	r2, [r3, #96]	; 0x60
    bd66:	679a      	str	r2, [r3, #120]	; 0x78
    bd68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    bd6c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
    bd70:	4770      	bx	lr
    bd72:	bf00      	nop
    bd74:	2000cd30 	.word	0x2000cd30

0000bd78 <nrf91_socket_is_supported>:
	if (offload_disabled) {
    bd78:	490b      	ldr	r1, [pc, #44]	; (bda8 <nrf91_socket_is_supported+0x30>)
{
    bd7a:	4603      	mov	r3, r0
	if (offload_disabled) {
    bd7c:	7808      	ldrb	r0, [r1, #0]
    bd7e:	b980      	cbnz	r0, bda2 <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
    bd80:	490a      	ldr	r1, [pc, #40]	; (bdac <nrf91_socket_is_supported+0x34>)
    bd82:	7809      	ldrb	r1, [r1, #0]
    bd84:	b139      	cbz	r1, bd96 <nrf91_socket_is_supported+0x1e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
    bd86:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
    bd8a:	2902      	cmp	r1, #2
    bd8c:	d90a      	bls.n	bda4 <nrf91_socket_is_supported+0x2c>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
    bd8e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
    bd92:	2a01      	cmp	r2, #1
    bd94:	d906      	bls.n	bda4 <nrf91_socket_is_supported+0x2c>
	return (family == AF_PACKET) || (family == AF_INET) || (family == AF_INET6);
    bd96:	3b01      	subs	r3, #1
    bd98:	2b02      	cmp	r3, #2
    bd9a:	bf8c      	ite	hi
    bd9c:	2000      	movhi	r0, #0
    bd9e:	2001      	movls	r0, #1
	return af_is_supported(family);
    bda0:	4770      	bx	lr
		return false;
    bda2:	2000      	movs	r0, #0
}
    bda4:	4770      	bx	lr
    bda6:	bf00      	nop
    bda8:	2000d6df 	.word	0x2000d6df
    bdac:	2000d6de 	.word	0x2000d6de

0000bdb0 <pollcb>:
{
    bdb0:	b470      	push	{r4, r5, r6}
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
    bdb2:	2300      	movs	r3, #0
    bdb4:	2518      	movs	r5, #24
	ctx = find_ctx(pollfd->fd);
    bdb6:	6801      	ldr	r1, [r0, #0]
		if (offload_ctx[i].nrf_fd == fd) {
    bdb8:	4c08      	ldr	r4, [pc, #32]	; (bddc <pollcb+0x2c>)
    bdba:	fb05 f203 	mul.w	r2, r5, r3
    bdbe:	58a6      	ldr	r6, [r4, r2]
    bdc0:	42b1      	cmp	r1, r6
    bdc2:	d106      	bne.n	bdd2 <pollcb+0x22>
	k_poll_signal_raise(&ctx->poll, pollfd->revents);
    bdc4:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
    bdc8:	3208      	adds	r2, #8
	return z_impl_k_poll_signal_raise(sig, result);
    bdca:	18a0      	adds	r0, r4, r2
}
    bdcc:	bc70      	pop	{r4, r5, r6}
    bdce:	f005 bf39 	b.w	11c44 <z_impl_k_poll_signal_raise>
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
    bdd2:	3301      	adds	r3, #1
    bdd4:	2b08      	cmp	r3, #8
    bdd6:	d1f0      	bne.n	bdba <pollcb+0xa>
}
    bdd8:	bc70      	pop	{r4, r5, r6}
    bdda:	4770      	bx	lr
    bddc:	2000cd30 	.word	0x2000cd30

0000bde0 <nrf91_socket_offload_getaddrinfo>:
{
    bde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bde4:	4614      	mov	r4, r2
    bde6:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
    bde8:	2100      	movs	r1, #0
{
    bdea:	b08b      	sub	sp, #44	; 0x2c
    bdec:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
    bdee:	2220      	movs	r2, #32
    bdf0:	a802      	add	r0, sp, #8
{
    bdf2:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
    bdf4:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
    bdf6:	f008 fbc8 	bl	1458a <memset>
	if (hints != NULL) {
    bdfa:	b15c      	cbz	r4, be14 <nrf91_socket_offload_getaddrinfo+0x34>
	nrf_out->ai_flags = z_in->ai_flags;
    bdfc:	6863      	ldr	r3, [r4, #4]
    bdfe:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_in->ai_socktype;
    be00:	68e3      	ldr	r3, [r4, #12]
    be02:	9304      	str	r3, [sp, #16]
	nrf_out->ai_family = z_in->ai_family;
    be04:	68a3      	ldr	r3, [r4, #8]
    be06:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_in->ai_protocol;
    be08:	6923      	ldr	r3, [r4, #16]
    be0a:	9305      	str	r3, [sp, #20]
	if (z_in->ai_canonname != NULL) {
    be0c:	69e3      	ldr	r3, [r4, #28]
    be0e:	b103      	cbz	r3, be12 <nrf91_socket_offload_getaddrinfo+0x32>
		nrf_out->ai_canonname = z_in->ai_canonname;
    be10:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
    be12:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
    be14:	f04f 32ff 	mov.w	r2, #4294967295
    be18:	f04f 33ff 	mov.w	r3, #4294967295
    be1c:	4834      	ldr	r0, [pc, #208]	; (bef0 <nrf91_socket_offload_getaddrinfo+0x110>)
    be1e:	f007 fa91 	bl	13344 <k_mutex_lock.constprop.0.isra.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
    be22:	4631      	mov	r1, r6
    be24:	4622      	mov	r2, r4
    be26:	4628      	mov	r0, r5
    be28:	ab01      	add	r3, sp, #4
    be2a:	f002 f90d 	bl	e048 <nrf_getaddrinfo>
	if (retval != 0) {
    be2e:	4606      	mov	r6, r0
    be30:	b948      	cbnz	r0, be46 <nrf91_socket_offload_getaddrinfo+0x66>
	struct zsock_addrinfo *latest_z_res = NULL;
    be32:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
    be34:	4681      	mov	r9, r0
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
    be36:	f04f 0a18 	mov.w	sl, #24
	struct nrf_addrinfo *next_nrf_res = nrf_res;
    be3a:	9d01      	ldr	r5, [sp, #4]
	*res = NULL;
    be3c:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
    be3e:	b94d      	cbnz	r5, be54 <nrf91_socket_offload_getaddrinfo+0x74>
	nrf_freeaddrinfo(nrf_res);
    be40:	9801      	ldr	r0, [sp, #4]
    be42:	f007 fd8e 	bl	13962 <nrf_freeaddrinfo>
	k_mutex_unlock(&getaddrinfo_lock);
    be46:	482a      	ldr	r0, [pc, #168]	; (bef0 <nrf91_socket_offload_getaddrinfo+0x110>)
    be48:	f007 fa7e 	bl	13348 <k_mutex_unlock.isra.0>
}
    be4c:	4630      	mov	r0, r6
    be4e:	b00b      	add	sp, #44	; 0x2c
    be50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					k_malloc(sizeof(struct zsock_addrinfo));
    be54:	2050      	movs	r0, #80	; 0x50
    be56:	f008 fb68 	bl	1452a <k_malloc>
		if (next_z_res == NULL) {
    be5a:	4604      	mov	r4, r0
    be5c:	2800      	cmp	r0, #0
    be5e:	d040      	beq.n	bee2 <nrf91_socket_offload_getaddrinfo+0x102>
	z_out->ai_next = NULL;
    be60:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
    be64:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_in->ai_flags;
    be68:	682b      	ldr	r3, [r5, #0]
    be6a:	6043      	str	r3, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
    be6c:	68ab      	ldr	r3, [r5, #8]
    be6e:	60c3      	str	r3, [r0, #12]
	z_out->ai_family = nrf_in->ai_family;
    be70:	686b      	ldr	r3, [r5, #4]
    be72:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_in->ai_protocol;
    be74:	68eb      	ldr	r3, [r5, #12]
    be76:	6103      	str	r3, [r0, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
    be78:	f8d5 b004 	ldr.w	fp, [r5, #4]
    be7c:	f1bb 0f01 	cmp.w	fp, #1
    be80:	d114      	bne.n	beac <nrf91_socket_offload_getaddrinfo+0xcc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
    be82:	2008      	movs	r0, #8
    be84:	f008 fb51 	bl	1452a <k_malloc>
    be88:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
    be8a:	b338      	cbz	r0, bedc <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
    be8c:	2308      	movs	r3, #8
    be8e:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
    be90:	696b      	ldr	r3, [r5, #20]
	ptr->sin_port = nrf_in->sin_port;
    be92:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_family = AF_INET;
    be94:	f8a0 b000 	strh.w	fp, [r0]
	ptr->sin_port = nrf_in->sin_port;
    be98:	8042      	strh	r2, [r0, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
    be9a:	68db      	ldr	r3, [r3, #12]
    be9c:	6043      	str	r3, [r0, #4]
		if (latest_z_res == NULL) {
    be9e:	f1b8 0f00 	cmp.w	r8, #0
    bea2:	d121      	bne.n	bee8 <nrf91_socket_offload_getaddrinfo+0x108>
			*res = next_z_res;
    bea4:	603c      	str	r4, [r7, #0]
					k_malloc(sizeof(struct zsock_addrinfo));
    bea6:	46a0      	mov	r8, r4
		next_nrf_res = next_nrf_res->ai_next;
    bea8:	69ed      	ldr	r5, [r5, #28]
    beaa:	e7c8      	b.n	be3e <nrf91_socket_offload_getaddrinfo+0x5e>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
    beac:	f1bb 0f02 	cmp.w	fp, #2
    beb0:	d009      	beq.n	bec6 <nrf91_socket_offload_getaddrinfo+0xe6>
			k_free(next_z_res);
    beb2:	f008 fb33 	bl	1451c <k_free>
			retval = DNS_EAI_FAMILY;
    beb6:	f06f 0605 	mvn.w	r6, #5
		nrf91_socket_offload_freeaddrinfo(*res);
    beba:	6838      	ldr	r0, [r7, #0]
    bebc:	f007 f977 	bl	131ae <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
    bec0:	2300      	movs	r3, #0
    bec2:	603b      	str	r3, [r7, #0]
    bec4:	e7bc      	b.n	be40 <nrf91_socket_offload_getaddrinfo+0x60>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
    bec6:	2018      	movs	r0, #24
    bec8:	f008 fb2f 	bl	1452a <k_malloc>
    becc:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
    bece:	b128      	cbz	r0, bedc <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
    bed0:	f8c4 a014 	str.w	sl, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
    bed4:	6969      	ldr	r1, [r5, #20]
    bed6:	f007 f977 	bl	131c8 <nrf_to_z_ipv6>
		if (err == -ENOMEM) {
    beda:	e7e0      	b.n	be9e <nrf91_socket_offload_getaddrinfo+0xbe>
			k_free(next_z_res);
    bedc:	4620      	mov	r0, r4
    bede:	f008 fb1d 	bl	1451c <k_free>
					k_malloc(sizeof(struct zsock_addrinfo));
    bee2:	f06f 0609 	mvn.w	r6, #9
    bee6:	e7e8      	b.n	beba <nrf91_socket_offload_getaddrinfo+0xda>
			latest_z_res->ai_next = next_z_res;
    bee8:	f8c8 4000 	str.w	r4, [r8]
    beec:	e7db      	b.n	bea6 <nrf91_socket_offload_getaddrinfo+0xc6>
    beee:	bf00      	nop
    bef0:	2000c754 	.word	0x2000c754

0000bef4 <nrf91_socket_offload_sendmsg>:
{
    bef4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    bef8:	4607      	mov	r7, r0
    befa:	4690      	mov	r8, r2
	if (msg == NULL) {
    befc:	460c      	mov	r4, r1
    befe:	b379      	cbz	r1, bf60 <nrf91_socket_offload_sendmsg+0x6c>
	for (i = 0; i < msg->msg_iovlen; i++) {
    bf00:	2300      	movs	r3, #0
	ssize_t len = 0;
    bf02:	461a      	mov	r2, r3
    bf04:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
    bf06:	4283      	cmp	r3, r0
    bf08:	d134      	bne.n	bf74 <nrf91_socket_offload_sendmsg+0x80>
	if (len <= sizeof(buf)) {
    bf0a:	2a80      	cmp	r2, #128	; 0x80
    bf0c:	d871      	bhi.n	bff2 <nrf91_socket_offload_sendmsg+0xfe>
		for (i = 0; i < msg->msg_iovlen; i++) {
    bf0e:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
    bf10:	f04f 32ff 	mov.w	r2, #4294967295
    bf14:	f04f 33ff 	mov.w	r3, #4294967295
    bf18:	4838      	ldr	r0, [pc, #224]	; (bffc <nrf91_socket_offload_sendmsg+0x108>)
    bf1a:	f007 fa13 	bl	13344 <k_mutex_lock.constprop.0.isra.0>
		len = 0;
    bf1e:	46a9      	mov	r9, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
    bf20:	4e37      	ldr	r6, [pc, #220]	; (c000 <nrf91_socket_offload_sendmsg+0x10c>)
		for (i = 0; i < msg->msg_iovlen; i++) {
    bf22:	68e3      	ldr	r3, [r4, #12]
    bf24:	429d      	cmp	r5, r3
    bf26:	d32c      	bcc.n	bf82 <nrf91_socket_offload_sendmsg+0x8e>
		offset = 0;
    bf28:	2600      	movs	r6, #0
		ret = 0;
    bf2a:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
    bf2c:	f8df a0d0 	ldr.w	sl, [pc, #208]	; c000 <nrf91_socket_offload_sendmsg+0x10c>
		while ((offset < len) && (ret >= 0)) {
    bf30:	45b1      	cmp	r9, r6
    bf32:	dd11      	ble.n	bf58 <nrf91_socket_offload_sendmsg+0x64>
    bf34:	b985      	cbnz	r5, bf58 <nrf91_socket_offload_sendmsg+0x64>
			ret = nrf91_socket_offload_sendto(obj,
    bf36:	6863      	ldr	r3, [r4, #4]
    bf38:	4638      	mov	r0, r7
    bf3a:	9301      	str	r3, [sp, #4]
    bf3c:	6823      	ldr	r3, [r4, #0]
    bf3e:	eba9 0206 	sub.w	r2, r9, r6
    bf42:	9300      	str	r3, [sp, #0]
    bf44:	eb0a 0106 	add.w	r1, sl, r6
    bf48:	4643      	mov	r3, r8
    bf4a:	f007 f96a 	bl	13222 <nrf91_socket_offload_sendto>
			if (ret > 0) {
    bf4e:	1e05      	subs	r5, r0, #0
    bf50:	ddee      	ble.n	bf30 <nrf91_socket_offload_sendmsg+0x3c>
				offset += ret;
    bf52:	442e      	add	r6, r5
		while ((offset < len) && (ret >= 0)) {
    bf54:	45b1      	cmp	r9, r6
    bf56:	dcee      	bgt.n	bf36 <nrf91_socket_offload_sendmsg+0x42>
		k_mutex_unlock(&sendmsg_lock);
    bf58:	4828      	ldr	r0, [pc, #160]	; (bffc <nrf91_socket_offload_sendmsg+0x108>)
    bf5a:	f007 f9f5 	bl	13348 <k_mutex_unlock.isra.0>
		return ret;
    bf5e:	e005      	b.n	bf6c <nrf91_socket_offload_sendmsg+0x78>
		errno = EINVAL;
    bf60:	f006 fd94 	bl	12a8c <__errno>
    bf64:	2316      	movs	r3, #22
		return -1;
    bf66:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
    bf6a:	6003      	str	r3, [r0, #0]
}
    bf6c:	4628      	mov	r0, r5
    bf6e:	b002      	add	sp, #8
    bf70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
    bf74:	68a1      	ldr	r1, [r4, #8]
    bf76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    bf7a:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
    bf7c:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
    bf7e:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
    bf80:	e7c1      	b.n	bf06 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
    bf82:	68a3      	ldr	r3, [r4, #8]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    bf84:	eb06 0009 	add.w	r0, r6, r9
    bf88:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
    bf8c:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
    bf90:	6852      	ldr	r2, [r2, #4]
    bf92:	f008 faed 	bl	14570 <memcpy>
			len += msg->msg_iov[i].iov_len;
    bf96:	68a3      	ldr	r3, [r4, #8]
    bf98:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
    bf9c:	4453      	add	r3, sl
    bf9e:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
    bfa0:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
    bfa2:	4499      	add	r9, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
    bfa4:	e7bd      	b.n	bf22 <nrf91_socket_offload_sendmsg+0x2e>
		if (msg->msg_iov[i].iov_len == 0) {
    bfa6:	68a3      	ldr	r3, [r4, #8]
    bfa8:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
    bfac:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    bfb0:	685b      	ldr	r3, [r3, #4]
    bfb2:	b13b      	cbz	r3, bfc4 <nrf91_socket_offload_sendmsg+0xd0>
		offset = 0;
    bfb4:	f04f 0900 	mov.w	r9, #0
		while (offset < msg->msg_iov[i].iov_len) {
    bfb8:	68a3      	ldr	r3, [r4, #8]
    bfba:	eb03 020a 	add.w	r2, r3, sl
    bfbe:	6852      	ldr	r2, [r2, #4]
    bfc0:	4591      	cmp	r9, r2
    bfc2:	d304      	bcc.n	bfce <nrf91_socket_offload_sendmsg+0xda>
	for (i = 0; i < msg->msg_iovlen; i++) {
    bfc4:	3601      	adds	r6, #1
    bfc6:	68e3      	ldr	r3, [r4, #12]
    bfc8:	429e      	cmp	r6, r3
    bfca:	d3ec      	bcc.n	bfa6 <nrf91_socket_offload_sendmsg+0xb2>
    bfcc:	e7ce      	b.n	bf6c <nrf91_socket_offload_sendmsg+0x78>
			ret = nrf91_socket_offload_sendto(obj,
    bfce:	f853 100a 	ldr.w	r1, [r3, sl]
    bfd2:	6863      	ldr	r3, [r4, #4]
    bfd4:	4449      	add	r1, r9
    bfd6:	9301      	str	r3, [sp, #4]
    bfd8:	6823      	ldr	r3, [r4, #0]
    bfda:	4638      	mov	r0, r7
    bfdc:	9300      	str	r3, [sp, #0]
    bfde:	eba2 0209 	sub.w	r2, r2, r9
    bfe2:	4643      	mov	r3, r8
    bfe4:	f007 f91d 	bl	13222 <nrf91_socket_offload_sendto>
			if (ret < 0) {
    bfe8:	1e01      	subs	r1, r0, #0
    bfea:	db05      	blt.n	bff8 <nrf91_socket_offload_sendmsg+0x104>
			offset += ret;
    bfec:	4489      	add	r9, r1
			len += ret;
    bfee:	440d      	add	r5, r1
    bff0:	e7e2      	b.n	bfb8 <nrf91_socket_offload_sendmsg+0xc4>
	for (i = 0; i < msg->msg_iovlen; i++) {
    bff2:	2600      	movs	r6, #0
	len = 0;
    bff4:	4635      	mov	r5, r6
    bff6:	e7e6      	b.n	bfc6 <nrf91_socket_offload_sendmsg+0xd2>
			ret = nrf91_socket_offload_sendto(obj,
    bff8:	460d      	mov	r5, r1
    bffa:	e7b7      	b.n	bf6c <nrf91_socket_offload_sendmsg+0x78>
    bffc:	2000c77c 	.word	0x2000c77c
    c000:	2000d65e 	.word	0x2000d65e

0000c004 <allocate_ctx>:
	k_mutex_lock(&ctx_lock, K_FOREVER);
    c004:	f04f 32ff 	mov.w	r2, #4294967295
    c008:	f04f 33ff 	mov.w	r3, #4294967295
{
    c00c:	b570      	push	{r4, r5, r6, lr}
    c00e:	4605      	mov	r5, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
    c010:	480b      	ldr	r0, [pc, #44]	; (c040 <allocate_ctx+0x3c>)
    c012:	f007 f997 	bl	13344 <k_mutex_lock.constprop.0.isra.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
    c016:	2300      	movs	r3, #0
    c018:	2018      	movs	r0, #24
		if (offload_ctx[i].nrf_fd == -1) {
    c01a:	4a0a      	ldr	r2, [pc, #40]	; (c044 <allocate_ctx+0x40>)
    c01c:	fb00 f103 	mul.w	r1, r0, r3
    c020:	5856      	ldr	r6, [r2, r1]
    c022:	188c      	adds	r4, r1, r2
    c024:	3601      	adds	r6, #1
    c026:	d105      	bne.n	c034 <allocate_ctx+0x30>
			ctx->nrf_fd = nrf_fd;
    c028:	5055      	str	r5, [r2, r1]
	k_mutex_unlock(&ctx_lock);
    c02a:	4805      	ldr	r0, [pc, #20]	; (c040 <allocate_ctx+0x3c>)
    c02c:	f007 f98c 	bl	13348 <k_mutex_unlock.isra.0>
}
    c030:	4620      	mov	r0, r4
    c032:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
    c034:	3301      	adds	r3, #1
    c036:	2b08      	cmp	r3, #8
    c038:	d1f0      	bne.n	c01c <allocate_ctx+0x18>
	struct nrf_sock_ctx *ctx = NULL;
    c03a:	2400      	movs	r4, #0
    c03c:	e7f5      	b.n	c02a <allocate_ctx+0x26>
    c03e:	bf00      	nop
    c040:	2000c72c 	.word	0x2000c72c
    c044:	2000cd30 	.word	0x2000cd30

0000c048 <release_ctx>:
{
    c048:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
    c04a:	4d09      	ldr	r5, [pc, #36]	; (c070 <release_ctx+0x28>)
{
    c04c:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
    c04e:	f04f 32ff 	mov.w	r2, #4294967295
    c052:	4628      	mov	r0, r5
    c054:	f04f 33ff 	mov.w	r3, #4294967295
    c058:	f007 f974 	bl	13344 <k_mutex_lock.constprop.0.isra.0>
	ctx->lock = NULL;
    c05c:	2300      	movs	r3, #0
    c05e:	f04f 32ff 	mov.w	r2, #4294967295
    c062:	e9c4 2300 	strd	r2, r3, [r4]
	k_mutex_unlock(&ctx_lock);
    c066:	4628      	mov	r0, r5
}
    c068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
    c06c:	f007 b96c 	b.w	13348 <k_mutex_unlock.isra.0>
    c070:	2000c72c 	.word	0x2000c72c

0000c074 <nrf91_socket_offload_accept>:
{
    c074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c078:	b08b      	sub	sp, #44	; 0x2c
    c07a:	4607      	mov	r7, r0
    c07c:	460c      	mov	r4, r1
    c07e:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
    c080:	f7fc fa46 	bl	8510 <z_reserve_fd>
    c084:	4606      	mov	r6, r0
	if (fd < 0) {
    c086:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
    c088:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
    c08a:	db1e      	blt.n	c0ca <nrf91_socket_offload_accept+0x56>
	if ((addr != NULL) && (addrlen != NULL)) {
    c08c:	b304      	cbz	r4, c0d0 <nrf91_socket_offload_accept+0x5c>
    c08e:	b315      	cbz	r5, c0d6 <nrf91_socket_offload_accept+0x62>
		if (*addrlen == sizeof(struct sockaddr_in)) {
    c090:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
    c092:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
    c094:	2b08      	cmp	r3, #8
    c096:	bf14      	ite	ne
    c098:	2324      	movne	r3, #36	; 0x24
    c09a:	2310      	moveq	r3, #16
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
    c09c:	f10d 0904 	add.w	r9, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
    c0a0:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
    c0a2:	4649      	mov	r1, r9
    c0a4:	f007 fddd 	bl	13c62 <nrf_accept>
	if (new_sd < 0) {
    c0a8:	f1b0 0800 	subs.w	r8, r0, #0
    c0ac:	db0a      	blt.n	c0c4 <nrf91_socket_offload_accept+0x50>
	ctx = allocate_ctx(new_sd);
    c0ae:	f7ff ffa9 	bl	c004 <allocate_ctx>
	if (ctx == NULL) {
    c0b2:	4607      	mov	r7, r0
    c0b4:	b990      	cbnz	r0, c0dc <nrf91_socket_offload_accept+0x68>
		errno = ENOMEM;
    c0b6:	f006 fce9 	bl	12a8c <__errno>
    c0ba:	230c      	movs	r3, #12
    c0bc:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
    c0be:	4640      	mov	r0, r8
    c0c0:	f002 fa6a 	bl	e598 <nrf_close>
	z_free_fd(fd);
    c0c4:	4630      	mov	r0, r6
    c0c6:	f7fc fa71 	bl	85ac <z_free_fd>
		return -1;
    c0ca:	f04f 36ff 	mov.w	r6, #4294967295
    c0ce:	e018      	b.n	c102 <nrf91_socket_offload_accept+0x8e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
    c0d0:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
    c0d2:	46a1      	mov	r9, r4
    c0d4:	e7e5      	b.n	c0a2 <nrf91_socket_offload_accept+0x2e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
    c0d6:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
    c0d8:	46a9      	mov	r9, r5
    c0da:	e7e2      	b.n	c0a2 <nrf91_socket_offload_accept+0x2e>
	if ((addr != NULL) && (addrlen != NULL)) {
    c0dc:	b164      	cbz	r4, c0f8 <nrf91_socket_offload_accept+0x84>
    c0de:	b15d      	cbz	r5, c0f8 <nrf91_socket_offload_accept+0x84>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
    c0e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
    c0e4:	2b01      	cmp	r3, #1
    c0e6:	d110      	bne.n	c10a <nrf91_socket_offload_accept+0x96>
			*addrlen = sizeof(struct sockaddr_in);
    c0e8:	2208      	movs	r2, #8
    c0ea:	602a      	str	r2, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
    c0ec:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	ptr->sin_family = AF_INET;
    c0f0:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
    c0f2:	9b04      	ldr	r3, [sp, #16]
	ptr->sin_port = nrf_in->sin_port;
    c0f4:	8062      	strh	r2, [r4, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
    c0f6:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
    c0f8:	4639      	mov	r1, r7
    c0fa:	4630      	mov	r0, r6
    c0fc:	4a0d      	ldr	r2, [pc, #52]	; (c134 <nrf91_socket_offload_accept+0xc0>)
    c0fe:	f7fc fa3d 	bl	857c <z_finalize_fd>
}
    c102:	4630      	mov	r0, r6
    c104:	b00b      	add	sp, #44	; 0x2c
    c106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
    c10a:	2b02      	cmp	r3, #2
    c10c:	d106      	bne.n	c11c <nrf91_socket_offload_accept+0xa8>
			*addrlen = sizeof(struct sockaddr_in6);
    c10e:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
    c110:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
    c112:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
    c114:	a901      	add	r1, sp, #4
    c116:	f007 f857 	bl	131c8 <nrf_to_z_ipv6>
    c11a:	e7ed      	b.n	c0f8 <nrf91_socket_offload_accept+0x84>
			errno = ENOTSUP;
    c11c:	f006 fcb6 	bl	12a8c <__errno>
    c120:	2386      	movs	r3, #134	; 0x86
    c122:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
    c124:	4640      	mov	r0, r8
    c126:	f002 fa37 	bl	e598 <nrf_close>
		release_ctx(ctx);
    c12a:	4638      	mov	r0, r7
    c12c:	f7ff ff8c 	bl	c048 <release_ctx>
    c130:	e7c8      	b.n	c0c4 <nrf91_socket_offload_accept+0x50>
    c132:	bf00      	nop
    c134:	00014e30 	.word	0x00014e30

0000c138 <nrf91_iface_api_init>:
static struct nrf91_iface_data {
	struct net_if *iface;
} nrf91_iface_data;

static void nrf91_iface_api_init(struct net_if *iface)
{
    c138:	b510      	push	{r4, lr}
    c13a:	4604      	mov	r4, r0
	nrf91_iface_data.iface = iface;
    c13c:	4b09      	ldr	r3, [pc, #36]	; (c164 <nrf91_iface_api_init+0x2c>)

	iface->if_dev->socket_offload = nrf91_socket_create;
    c13e:	4a0a      	ldr	r2, [pc, #40]	; (c168 <nrf91_iface_api_init+0x30>)
	nrf91_iface_data.iface = iface;
    c140:	6018      	str	r0, [r3, #0]
	iface->if_dev->socket_offload = nrf91_socket_create;
    c142:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
    c144:	4809      	ldr	r0, [pc, #36]	; (c16c <nrf91_iface_api_init+0x34>)
	iface->if_dev->socket_offload = nrf91_socket_create;
    c146:	61da      	str	r2, [r3, #28]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
    c148:	f7fd fc98 	bl	9a7c <socket_offload_dns_register>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c14c:	6823      	ldr	r3, [r4, #0]
    c14e:	330c      	adds	r3, #12
    c150:	e8d3 1fef 	ldaex	r1, [r3]
    c154:	f041 0108 	orr.w	r1, r1, #8
    c158:	e8c3 1fe2 	stlex	r2, r1, [r3]
    c15c:	2a00      	cmp	r2, #0
    c15e:	d1f7      	bne.n	c150 <nrf91_iface_api_init+0x18>

	if (!IS_ENABLED(CONFIG_NRF_MODEM_LIB_NET_IF_AUTO_START)) {
		net_if_flag_set(iface, NET_IF_NO_AUTO_START);
	}
}
    c160:	bd10      	pop	{r4, pc}
    c162:	bf00      	nop
    c164:	2000cd2c 	.word	0x2000cd2c
    c168:	0000c27d 	.word	0x0000c27d
    c16c:	00014e28 	.word	0x00014e28

0000c170 <nrf91_socket_offload_ioctl>:
{
    c170:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (request) {
    c172:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
	int sd = OBJ_TO_SD(obj);
    c176:	6804      	ldr	r4, [r0, #0]
{
    c178:	b087      	sub	sp, #28
	switch (request) {
    c17a:	2b03      	cmp	r3, #3
    c17c:	d857      	bhi.n	c22e <nrf91_socket_offload_ioctl+0xbe>
    c17e:	e8df f003 	tbb	[pc, r3]
    c182:	4002      	.short	0x4002
    c184:	5377      	.short	0x5377
	struct nrf_modem_pollcb pcb = {
    c186:	2701      	movs	r7, #1
		pev_end = va_arg(args, struct k_poll_event *);
    c188:	e9d2 6101 	ldrd	r6, r1, [r2, #4]
		return nrf91_poll_prepare(obj, pfd, pev, pev_end);
    c18c:	6813      	ldr	r3, [r2, #0]
	struct nrf_modem_pollcb pcb = {
    c18e:	4a3a      	ldr	r2, [pc, #232]	; (c278 <nrf91_socket_offload_ioctl+0x108>)
    c190:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    c194:	9204      	str	r2, [sp, #16]
    c196:	f8ad 3014 	strh.w	r3, [sp, #20]
    c19a:	f88d 7016 	strb.w	r7, [sp, #22]
	if (*pev == pev_end) {
    c19e:	6833      	ldr	r3, [r6, #0]
    c1a0:	4299      	cmp	r1, r3
    c1a2:	d104      	bne.n	c1ae <nrf91_socket_offload_ioctl+0x3e>
		errno = ENOMEM;
    c1a4:	f006 fc72 	bl	12a8c <__errno>
    c1a8:	230c      	movs	r3, #12
		errno = EINVAL;
    c1aa:	6003      	str	r3, [r0, #0]
    c1ac:	e014      	b.n	c1d8 <nrf91_socket_offload_ioctl+0x68>
	k_poll_signal_init(&ctx->poll);
    c1ae:	f100 0508 	add.w	r5, r0, #8
	z_impl_k_poll_signal_init(sig);
    c1b2:	4628      	mov	r0, r5
    c1b4:	f008 f9a8 	bl	14508 <z_impl_k_poll_signal_init>
	k_poll_event_init(*pev, K_POLL_TYPE_SIGNAL, K_POLL_MODE_NOTIFY_ONLY, &ctx->poll);
    c1b8:	462b      	mov	r3, r5
    c1ba:	2200      	movs	r2, #0
    c1bc:	4639      	mov	r1, r7
    c1be:	6830      	ldr	r0, [r6, #0]
    c1c0:	f005 fcfe 	bl	11bc0 <k_poll_event_init>
	err = nrf_setsockopt(fd, NRF_SOL_SOCKET, NRF_SO_POLLCB, &pcb, sizeof(pcb));
    c1c4:	2308      	movs	r3, #8
    c1c6:	4620      	mov	r0, r4
    c1c8:	9300      	str	r3, [sp, #0]
    c1ca:	223c      	movs	r2, #60	; 0x3c
    c1cc:	4639      	mov	r1, r7
    c1ce:	ab04      	add	r3, sp, #16
    c1d0:	f002 fb22 	bl	e818 <nrf_setsockopt>
	if (err) {
    c1d4:	4604      	mov	r4, r0
    c1d6:	b110      	cbz	r0, c1de <nrf91_socket_offload_ioctl+0x6e>
		retval = -1;
    c1d8:	f04f 34ff 	mov.w	r4, #4294967295
		return nrf91_socket_offload_fcntl(sd, request, args);
    c1dc:	e00e      	b.n	c1fc <nrf91_socket_offload_ioctl+0x8c>
	(*pev)++;
    c1de:	6833      	ldr	r3, [r6, #0]
    c1e0:	3314      	adds	r3, #20
    c1e2:	6033      	str	r3, [r6, #0]
	flags = 0;
    c1e4:	e9cd 0002 	strd	r0, r0, [sp, #8]
	z_impl_k_poll_signal_check(sig, signaled, result);
    c1e8:	4628      	mov	r0, r5
    c1ea:	aa02      	add	r2, sp, #8
    c1ec:	a903      	add	r1, sp, #12
    c1ee:	f008 f990 	bl	14512 <z_impl_k_poll_signal_check>
	if (!signaled) {
    c1f2:	9b03      	ldr	r3, [sp, #12]
	return -EALREADY;
    c1f4:	2b00      	cmp	r3, #0
    c1f6:	bf18      	it	ne
    c1f8:	f06f 0477 	mvnne.w	r4, #119	; 0x77
}
    c1fc:	4620      	mov	r0, r4
    c1fe:	b007      	add	sp, #28
    c200:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pev = va_arg(args, struct k_poll_event **);
    c202:	e9d2 4200 	ldrd	r4, r2, [r2]
	(*pev)++;
    c206:	6813      	ldr	r3, [r2, #0]
    c208:	3314      	adds	r3, #20
    c20a:	6013      	str	r3, [r2, #0]
	signaled = 0;
    c20c:	2300      	movs	r3, #0
	flags = 0;
    c20e:	e9cd 3303 	strd	r3, r3, [sp, #12]
    c212:	aa03      	add	r2, sp, #12
    c214:	a904      	add	r1, sp, #16
    c216:	3008      	adds	r0, #8
    c218:	f008 f97b 	bl	14512 <z_impl_k_poll_signal_check>
	if (!signaled) {
    c21c:	9b04      	ldr	r3, [sp, #16]
    c21e:	b10b      	cbz	r3, c224 <nrf91_socket_offload_ioctl+0xb4>
	pfd->revents = flags;
    c220:	9b03      	ldr	r3, [sp, #12]
    c222:	80e3      	strh	r3, [r4, #6]
		return nrf91_poll_update(obj, pfd, pev);
    c224:	2400      	movs	r4, #0
    c226:	e7e9      	b.n	c1fc <nrf91_socket_offload_ioctl+0x8c>
		ctx->lock = va_arg(args, struct k_mutex *);
    c228:	6813      	ldr	r3, [r2, #0]
    c22a:	6043      	str	r3, [r0, #4]
		return 0;
    c22c:	e7fa      	b.n	c224 <nrf91_socket_offload_ioctl+0xb4>
	switch (cmd) {
    c22e:	2903      	cmp	r1, #3
    c230:	d012      	beq.n	c258 <nrf91_socket_offload_ioctl+0xe8>
    c232:	2904      	cmp	r1, #4
    c234:	d118      	bne.n	c268 <nrf91_socket_offload_ioctl+0xf8>
		flags = va_arg(args, int);
    c236:	6815      	ldr	r5, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK) {
    c238:	f435 4380 	bics.w	r3, r5, #16384	; 0x4000
    c23c:	d003      	beq.n	c246 <nrf91_socket_offload_ioctl+0xd6>
			errno = EINVAL;
    c23e:	f006 fc25 	bl	12a8c <__errno>
    c242:	2316      	movs	r3, #22
    c244:	6003      	str	r3, [r0, #0]
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
    c246:	2104      	movs	r1, #4
    c248:	4620      	mov	r0, r4
    c24a:	f3c5 3280 	ubfx	r2, r5, #14, #1
}
    c24e:	b007      	add	sp, #28
    c250:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
    c254:	f007 bf4d 	b.w	140f2 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
    c258:	4620      	mov	r0, r4
    c25a:	2200      	movs	r2, #0
    c25c:	f007 ff49 	bl	140f2 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
    c260:	0384      	lsls	r4, r0, #14
    c262:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
		break;
    c266:	e7c9      	b.n	c1fc <nrf91_socket_offload_ioctl+0x8c>
		errno = EINVAL;
    c268:	f006 fc10 	bl	12a8c <__errno>
    c26c:	2316      	movs	r3, #22
    c26e:	e79c      	b.n	c1aa <nrf91_socket_offload_ioctl+0x3a>
	switch (request) {
    c270:	f06f 045e 	mvn.w	r4, #94	; 0x5e
    c274:	e7c2      	b.n	c1fc <nrf91_socket_offload_ioctl+0x8c>
    c276:	bf00      	nop
    c278:	0000bdb1 	.word	0x0000bdb1

0000c27c <nrf91_socket_create>:
{
    c27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (type & SOCK_NATIVE) {
    c280:	1e0d      	subs	r5, r1, #0
{
    c282:	4607      	mov	r7, r0
    c284:	4690      	mov	r8, r2
	if (type & SOCK_NATIVE) {
    c286:	da12      	bge.n	c2ae <nrf91_socket_create+0x32>
	k_sched_lock();
    c288:	f004 fa8c 	bl	107a4 <k_sched_lock>
	*offload_lock = true;
    c28c:	4e1c      	ldr	r6, [pc, #112]	; (c300 <nrf91_socket_create+0x84>)
    c28e:	2301      	movs	r3, #1
    c290:	7033      	strb	r3, [r6, #0]
		union { uintptr_t x; int val; } parm2 = { .val = proto };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_SOCKET);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_socket(family, type, proto);
    c292:	4642      	mov	r2, r8
    c294:	4638      	mov	r0, r7
    c296:	f025 4140 	bic.w	r1, r5, #3221225472	; 0xc0000000
    c29a:	f7fd fb9f 	bl	99dc <z_impl_zsock_socket>
	*offload_lock = false;
    c29e:	2300      	movs	r3, #0
    c2a0:	7033      	strb	r3, [r6, #0]
    c2a2:	4604      	mov	r4, r0
	k_sched_unlock();
    c2a4:	f004 faea 	bl	1087c <k_sched_unlock>
}
    c2a8:	4620      	mov	r0, r4
    c2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (type & SOCK_NATIVE_TLS) {
    c2ae:	006b      	lsls	r3, r5, #1
    c2b0:	d503      	bpl.n	c2ba <nrf91_socket_create+0x3e>
	k_sched_lock();
    c2b2:	f004 fa77 	bl	107a4 <k_sched_lock>
	*offload_lock = true;
    c2b6:	4e13      	ldr	r6, [pc, #76]	; (c304 <nrf91_socket_create+0x88>)
    c2b8:	e7e9      	b.n	c28e <nrf91_socket_create+0x12>
	fd = z_reserve_fd();
    c2ba:	f7fc f929 	bl	8510 <z_reserve_fd>
	if (fd < 0) {
    c2be:	1e04      	subs	r4, r0, #0
    c2c0:	db09      	blt.n	c2d6 <nrf91_socket_create+0x5a>
	retval = nrf_socket(family, type, proto);
    c2c2:	4629      	mov	r1, r5
    c2c4:	4642      	mov	r2, r8
    c2c6:	4638      	mov	r0, r7
    c2c8:	f007 fb5e 	bl	13988 <nrf_socket>
	if (sd < 0) {
    c2cc:	1e05      	subs	r5, r0, #0
    c2ce:	da05      	bge.n	c2dc <nrf91_socket_create+0x60>
		z_free_fd(fd);
    c2d0:	4620      	mov	r0, r4
    c2d2:	f7fc f96b 	bl	85ac <z_free_fd>
		return -1;
    c2d6:	f04f 34ff 	mov.w	r4, #4294967295
    c2da:	e7e5      	b.n	c2a8 <nrf91_socket_create+0x2c>
	ctx = allocate_ctx(sd);
    c2dc:	f7ff fe92 	bl	c004 <allocate_ctx>
	if (ctx == NULL) {
    c2e0:	4601      	mov	r1, r0
    c2e2:	b938      	cbnz	r0, c2f4 <nrf91_socket_create+0x78>
		errno = ENOMEM;
    c2e4:	f006 fbd2 	bl	12a8c <__errno>
    c2e8:	230c      	movs	r3, #12
    c2ea:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
    c2ec:	4628      	mov	r0, r5
    c2ee:	f002 f953 	bl	e598 <nrf_close>
		z_free_fd(fd);
    c2f2:	e7ed      	b.n	c2d0 <nrf91_socket_create+0x54>
	z_finalize_fd(fd, ctx,
    c2f4:	4620      	mov	r0, r4
    c2f6:	4a04      	ldr	r2, [pc, #16]	; (c308 <nrf91_socket_create+0x8c>)
    c2f8:	f7fc f940 	bl	857c <z_finalize_fd>
	return fd;
    c2fc:	e7d4      	b.n	c2a8 <nrf91_socket_create+0x2c>
    c2fe:	bf00      	nop
    c300:	2000d6df 	.word	0x2000d6df
    c304:	2000d6de 	.word	0x2000d6de
    c308:	00014e30 	.word	0x00014e30

0000c30c <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(void)
{
    c30c:	b508      	push	{r3, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
    c30e:	4802      	ldr	r0, [pc, #8]	; (c318 <at_monitor_sys_init+0xc>)
    c310:	f001 fc8a 	bl	dc28 <nrf_modem_at_notif_handler_set>
	if (err) {
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
	}

	return 0;
}
    c314:	2000      	movs	r0, #0
    c316:	bd08      	pop	{r3, pc}
    c318:	0000c3ad 	.word	0x0000c3ad

0000c31c <at_monitor_task>:
{
    c31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
    c320:	4e1a      	ldr	r6, [pc, #104]	; (c38c <at_monitor_task+0x70>)
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    c322:	4f1b      	ldr	r7, [pc, #108]	; (c390 <at_monitor_task+0x74>)
		k_heap_free(&at_monitor_heap, at_notif);
    c324:	f8df 806c 	ldr.w	r8, [pc, #108]	; c394 <at_monitor_task+0x78>
    c328:	2200      	movs	r2, #0
    c32a:	2300      	movs	r3, #0
    c32c:	4630      	mov	r0, r6
    c32e:	f003 fcf5 	bl	fd1c <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
    c332:	4605      	mov	r5, r0
    c334:	b9f8      	cbnz	r0, c376 <at_monitor_task+0x5a>
}
    c336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return mon->flags.paused;
    c33a:	7a23      	ldrb	r3, [r4, #8]
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
    c33c:	07da      	lsls	r2, r3, #31
    c33e:	d40a      	bmi.n	c356 <at_monitor_task+0x3a>
    c340:	079b      	lsls	r3, r3, #30
    c342:	d408      	bmi.n	c356 <at_monitor_task+0x3a>
    c344:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
    c346:	b119      	cbz	r1, c350 <at_monitor_task+0x34>
    c348:	4648      	mov	r0, r9
    c34a:	f008 f95a 	bl	14602 <strstr>
    c34e:	b110      	cbz	r0, c356 <at_monitor_task+0x3a>
				e->handler(at_notif->data);
    c350:	4648      	mov	r0, r9
    c352:	6863      	ldr	r3, [r4, #4]
    c354:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    c356:	340c      	adds	r4, #12
    c358:	42bc      	cmp	r4, r7
    c35a:	d910      	bls.n	c37e <at_monitor_task+0x62>
    c35c:	490e      	ldr	r1, [pc, #56]	; (c398 <at_monitor_task+0x7c>)
    c35e:	2360      	movs	r3, #96	; 0x60
    c360:	4a0e      	ldr	r2, [pc, #56]	; (c39c <at_monitor_task+0x80>)
    c362:	480f      	ldr	r0, [pc, #60]	; (c3a0 <at_monitor_task+0x84>)
    c364:	f006 fb32 	bl	129cc <assert_print>
    c368:	480e      	ldr	r0, [pc, #56]	; (c3a4 <at_monitor_task+0x88>)
    c36a:	f006 fb2f 	bl	129cc <assert_print>
    c36e:	2160      	movs	r1, #96	; 0x60
    c370:	480a      	ldr	r0, [pc, #40]	; (c39c <at_monitor_task+0x80>)
    c372:	f006 fb24 	bl	129be <assert_post_action>
    c376:	4c0c      	ldr	r4, [pc, #48]	; (c3a8 <at_monitor_task+0x8c>)
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
    c378:	f105 0904 	add.w	r9, r5, #4
    c37c:	e7ec      	b.n	c358 <at_monitor_task+0x3c>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    c37e:	d3dc      	bcc.n	c33a <at_monitor_task+0x1e>
		k_heap_free(&at_monitor_heap, at_notif);
    c380:	4629      	mov	r1, r5
    c382:	4640      	mov	r0, r8
    c384:	f003 f90c 	bl	f5a0 <k_heap_free>
    c388:	e7ce      	b.n	c328 <at_monitor_task+0xc>
    c38a:	bf00      	nop
    c38c:	2000c7a4 	.word	0x2000c7a4
    c390:	2000c6dc 	.word	0x2000c6dc
    c394:	2000c700 	.word	0x2000c700
    c398:	0001627d 	.word	0x0001627d
    c39c:	00016251 	.word	0x00016251
    c3a0:	00015341 	.word	0x00015341
    c3a4:	00015764 	.word	0x00015764
    c3a8:	2000c6d0 	.word	0x2000c6d0

0000c3ac <at_monitor_dispatch>:
{
    c3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(notif != NULL);
    c3b0:	4604      	mov	r4, r0
    c3b2:	bb38      	cbnz	r0, c404 <at_monitor_dispatch+0x58>
    c3b4:	4924      	ldr	r1, [pc, #144]	; (c448 <at_monitor_dispatch+0x9c>)
    c3b6:	2336      	movs	r3, #54	; 0x36
    c3b8:	4a24      	ldr	r2, [pc, #144]	; (c44c <at_monitor_dispatch+0xa0>)
    c3ba:	4825      	ldr	r0, [pc, #148]	; (c450 <at_monitor_dispatch+0xa4>)
    c3bc:	f006 fb06 	bl	129cc <assert_print>
    c3c0:	2136      	movs	r1, #54	; 0x36
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    c3c2:	4822      	ldr	r0, [pc, #136]	; (c44c <at_monitor_dispatch+0xa0>)
    c3c4:	f006 fafb 	bl	129be <assert_post_action>
	return mon->flags.paused;
    c3c8:	7a2f      	ldrb	r7, [r5, #8]
		if (!is_paused(e) && has_match(e, notif)) {
    c3ca:	07fa      	lsls	r2, r7, #31
    c3cc:	d40a      	bmi.n	c3e4 <at_monitor_dispatch+0x38>
    c3ce:	6829      	ldr	r1, [r5, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
    c3d0:	b119      	cbz	r1, c3da <at_monitor_dispatch+0x2e>
    c3d2:	4620      	mov	r0, r4
    c3d4:	f008 f915 	bl	14602 <strstr>
    c3d8:	b120      	cbz	r0, c3e4 <at_monitor_dispatch+0x38>
			if (is_direct(e)) {
    c3da:	07bb      	lsls	r3, r7, #30
    c3dc:	d510      	bpl.n	c400 <at_monitor_dispatch+0x54>
				e->handler(notif);
    c3de:	4620      	mov	r0, r4
    c3e0:	686b      	ldr	r3, [r5, #4]
    c3e2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    c3e4:	350c      	adds	r5, #12
    c3e6:	4545      	cmp	r5, r8
    c3e8:	d911      	bls.n	c40e <at_monitor_dispatch+0x62>
    c3ea:	491a      	ldr	r1, [pc, #104]	; (c454 <at_monitor_dispatch+0xa8>)
    c3ec:	2339      	movs	r3, #57	; 0x39
    c3ee:	4a17      	ldr	r2, [pc, #92]	; (c44c <at_monitor_dispatch+0xa0>)
    c3f0:	4817      	ldr	r0, [pc, #92]	; (c450 <at_monitor_dispatch+0xa4>)
    c3f2:	f006 faeb 	bl	129cc <assert_print>
    c3f6:	4818      	ldr	r0, [pc, #96]	; (c458 <at_monitor_dispatch+0xac>)
    c3f8:	f006 fae8 	bl	129cc <assert_print>
    c3fc:	2139      	movs	r1, #57	; 0x39
    c3fe:	e7e0      	b.n	c3c2 <at_monitor_dispatch+0x16>
				monitored = true;
    c400:	2601      	movs	r6, #1
    c402:	e7ef      	b.n	c3e4 <at_monitor_dispatch+0x38>
	monitored = false;
    c404:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    c406:	4d15      	ldr	r5, [pc, #84]	; (c45c <at_monitor_dispatch+0xb0>)
    c408:	f8df 8054 	ldr.w	r8, [pc, #84]	; c460 <at_monitor_dispatch+0xb4>
    c40c:	e7eb      	b.n	c3e6 <at_monitor_dispatch+0x3a>
    c40e:	d3db      	bcc.n	c3c8 <at_monitor_dispatch+0x1c>
	if (!monitored) {
    c410:	b1be      	cbz	r6, c442 <at_monitor_dispatch+0x96>
	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
    c412:	4620      	mov	r0, r4
    c414:	f7fb fffe 	bl	8414 <strlen>
	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
    c418:	2200      	movs	r2, #0
    c41a:	1d41      	adds	r1, r0, #5
    c41c:	2300      	movs	r3, #0
    c41e:	4811      	ldr	r0, [pc, #68]	; (c464 <at_monitor_dispatch+0xb8>)
    c420:	f007 ff3f 	bl	142a2 <k_heap_alloc>
	if (!at_notif) {
    c424:	4605      	mov	r5, r0
    c426:	b160      	cbz	r0, c442 <at_monitor_dispatch+0x96>
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    c428:	4621      	mov	r1, r4
    c42a:	3004      	adds	r0, #4
    c42c:	f008 f8c2 	bl	145b4 <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
    c430:	4629      	mov	r1, r5
    c432:	480d      	ldr	r0, [pc, #52]	; (c468 <at_monitor_dispatch+0xbc>)
    c434:	f007 ff6c 	bl	14310 <k_queue_append>
}
    c438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_submit(&at_monitor_work);
    c43c:	480b      	ldr	r0, [pc, #44]	; (c46c <at_monitor_dispatch+0xc0>)
    c43e:	f003 bf75 	b.w	1032c <k_work_submit>
}
    c442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c446:	bf00      	nop
    c448:	0001629d 	.word	0x0001629d
    c44c:	00016251 	.word	0x00016251
    c450:	00015341 	.word	0x00015341
    c454:	0001627d 	.word	0x0001627d
    c458:	00015764 	.word	0x00015764
    c45c:	2000c6d0 	.word	0x2000c6d0
    c460:	2000c6dc 	.word	0x2000c6dc
    c464:	2000c700 	.word	0x2000c700
    c468:	2000c7a4 	.word	0x2000c7a4
    c46c:	2000c5c8 	.word	0x2000c5c8

0000c470 <z_impl_uart_irq_rx_enable.constprop.0>:
__syscall void uart_irq_rx_enable(const struct device *dev);

static inline void z_impl_uart_irq_rx_enable(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    c470:	4802      	ldr	r0, [pc, #8]	; (c47c <z_impl_uart_irq_rx_enable.constprop.0+0xc>)
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_enable != NULL) {
    c472:	6883      	ldr	r3, [r0, #8]
    c474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c476:	b103      	cbz	r3, c47a <z_impl_uart_irq_rx_enable.constprop.0+0xa>
		api->irq_rx_enable(dev);
    c478:	4718      	bx	r3
	}
#else
	ARG_UNUSED(dev);
#endif
}
    c47a:	4770      	bx	lr
    c47c:	0001497c 	.word	0x0001497c

0000c480 <write_uart_string>:
static char at_buf[AT_BUF_SIZE]; /* AT command and modem response buffer */
static struct k_work_q at_host_work_q;
static struct k_work cmd_send_work;

static inline void write_uart_string(const char *str)
{
    c480:	b538      	push	{r3, r4, r5, lr}
	api->poll_out(dev, out_char);
    c482:	4d05      	ldr	r5, [pc, #20]	; (c498 <write_uart_string+0x18>)
    c484:	1e44      	subs	r4, r0, #1
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
    c486:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    c48a:	b901      	cbnz	r1, c48e <write_uart_string+0xe>
		uart_poll_out(uart_dev, str[i]);
	}
}
    c48c:	bd38      	pop	{r3, r4, r5, pc}
    c48e:	68ab      	ldr	r3, [r5, #8]
    c490:	4801      	ldr	r0, [pc, #4]	; (c498 <write_uart_string+0x18>)
    c492:	685b      	ldr	r3, [r3, #4]
    c494:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
    c496:	e7f6      	b.n	c486 <write_uart_string+0x6>
    c498:	0001497c 	.word	0x0001497c

0000c49c <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
    c49c:	b510      	push	{r4, lr}
	ARG_UNUSED(work);

    /* Sending through string format rather than raw buffer in case
     * the buffer contains characters that need to be escaped
     */
	err = nrf_modem_at_cmd(at_buf, sizeof(at_buf), "%s", at_buf);
    c49e:	4c09      	ldr	r4, [pc, #36]	; (c4c4 <cmd_send+0x28>)
    c4a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    c4a4:	4623      	mov	r3, r4
    c4a6:	4a08      	ldr	r2, [pc, #32]	; (c4c8 <cmd_send+0x2c>)
    c4a8:	4620      	mov	r0, r4
    c4aa:	f001 fc0f 	bl	dccc <nrf_modem_at_cmd>
	if (err < 0) {
		LOG_ERR("Error while processing AT command: %d", err);
	}

	write_uart_string(at_buf);
    c4ae:	4620      	mov	r0, r4
    c4b0:	f7ff ffe6 	bl	c480 <write_uart_string>

	at_buf_busy = false;
    c4b4:	2200      	movs	r2, #0
    c4b6:	4b05      	ldr	r3, [pc, #20]	; (c4cc <cmd_send+0x30>)
    c4b8:	701a      	strb	r2, [r3, #0]
	uart_irq_rx_enable(uart_dev);
}
    c4ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
    c4be:	f7ff bfd7 	b.w	c470 <z_impl_uart_irq_rx_enable.constprop.0>
    c4c2:	bf00      	nop
    c4c4:	2000d6e1 	.word	0x2000d6e1
    c4c8:	000151c4 	.word	0x000151c4
    c4cc:	2000e6e1 	.word	0x2000e6e1

0000c4d0 <at_host_init>:
	enum term_modes mode = CONFIG_AT_HOST_TERMINATION;


	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
    c4d0:	2201      	movs	r2, #1
{
    c4d2:	b5f0      	push	{r4, r5, r6, r7, lr}
		term_mode = mode;
    c4d4:	4b2b      	ldr	r3, [pc, #172]	; (c584 <at_host_init+0xb4>)
{
    c4d6:	b085      	sub	sp, #20
		term_mode = mode;
    c4d8:	701a      	strb	r2, [r3, #0]
    c4da:	482b      	ldr	r0, [pc, #172]	; (c588 <at_host_init+0xb8>)
    c4dc:	f007 feca 	bl	14274 <z_device_is_ready>
	if (!device_is_ready(uart_dev)) {
    c4e0:	2800      	cmp	r0, #0
    c4e2:	d045      	beq.n	c570 <at_host_init+0xa0>
	return z_impl_k_uptime_ticks();
    c4e4:	f007 ff80 	bl	143e8 <z_impl_k_uptime_ticks>
    c4e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c4ec:	fba0 0302 	umull	r0, r3, r0, r2
    c4f0:	fb02 3301 	mla	r3, r2, r1, r3
	const struct uart_driver_api *api =
    c4f4:	4d24      	ldr	r5, [pc, #144]	; (c588 <at_host_init+0xb8>)
    c4f6:	0bc0      	lsrs	r0, r0, #15
    c4f8:	68ae      	ldr	r6, [r5, #8]
    c4fa:	ea40 4443 	orr.w	r4, r0, r3, lsl #17
	if (api->err_check == NULL) {
    c4fe:	68b3      	ldr	r3, [r6, #8]
    c500:	b1b3      	cbz	r3, c530 <at_host_init+0x60>
	return api->err_check(dev);
    c502:	4628      	mov	r0, r5
    c504:	4798      	blx	r3
		if (err) {
    c506:	4607      	mov	r7, r0
    c508:	b990      	cbnz	r0, c530 <at_host_init+0x60>
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    c50a:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    c50c:	2b00      	cmp	r3, #0
    c50e:	d134      	bne.n	c57a <at_host_init+0xaa>
	if (err) {
		LOG_ERR("UART could not be initialized: %d", err);
		return -EFAULT;
	}

	k_work_init(&cmd_send_work, cmd_send);
    c510:	491e      	ldr	r1, [pc, #120]	; (c58c <at_host_init+0xbc>)
    c512:	481f      	ldr	r0, [pc, #124]	; (c590 <at_host_init+0xc0>)
    c514:	f003 fe8a 	bl	1022c <k_work_init>
	k_work_queue_start(&at_host_work_q, at_host_stack_area,
    c518:	2300      	movs	r3, #0
    c51a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c51e:	9300      	str	r3, [sp, #0]
    c520:	491c      	ldr	r1, [pc, #112]	; (c594 <at_host_init+0xc4>)
    c522:	230a      	movs	r3, #10
    c524:	481c      	ldr	r0, [pc, #112]	; (c598 <at_host_init+0xc8>)
    c526:	f003 ff07 	bl	10338 <k_work_queue_start>
    c52a:	f7ff ffa1 	bl	c470 <z_impl_uart_irq_rx_enable.constprop.0>
}
    c52e:	e021      	b.n	c574 <at_host_init+0xa4>
    c530:	f007 ff5a 	bl	143e8 <z_impl_k_uptime_ticks>
    c534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c538:	fba0 0302 	umull	r0, r3, r0, r2
    c53c:	fb02 3101 	mla	r1, r2, r1, r3
    c540:	0bc3      	lsrs	r3, r0, #15
    c542:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			if (k_uptime_get_32() - start_time >
    c546:	1b1b      	subs	r3, r3, r4
    c548:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    c54c:	d810      	bhi.n	c570 <at_host_init+0xa0>
	if (api->fifo_read == NULL) {
    c54e:	68af      	ldr	r7, [r5, #8]
    c550:	69bb      	ldr	r3, [r7, #24]
    c552:	2b00      	cmp	r3, #0
    c554:	d0fc      	beq.n	c550 <at_host_init+0x80>
	return api->fifo_read(dev, rx_data, size);
    c556:	2201      	movs	r2, #1
    c558:	4628      	mov	r0, r5
    c55a:	f10d 010f 	add.w	r1, sp, #15
    c55e:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
    c560:	2800      	cmp	r0, #0
    c562:	d1f5      	bne.n	c550 <at_host_init+0x80>
	return z_impl_k_sleep(timeout);
    c564:	2100      	movs	r1, #0
    c566:	f44f 70a4 	mov.w	r0, #328	; 0x148
    c56a:	f004 ff09 	bl	11380 <z_impl_k_sleep>
	} while (err);
    c56e:	e7c6      	b.n	c4fe <at_host_init+0x2e>
		return -EFAULT;
    c570:	f06f 070d 	mvn.w	r7, #13
			   K_THREAD_STACK_SIZEOF(at_host_stack_area),
			   CONFIG_AT_HOST_THREAD_PRIO, NULL);
	uart_irq_rx_enable(uart_dev);

	return err;
}
    c574:	4638      	mov	r0, r7
    c576:	b005      	add	sp, #20
    c578:	bdf0      	pop	{r4, r5, r6, r7, pc}
		api->irq_callback_set(dev, cb, user_data);
    c57a:	4602      	mov	r2, r0
    c57c:	4907      	ldr	r1, [pc, #28]	; (c59c <at_host_init+0xcc>)
    c57e:	4802      	ldr	r0, [pc, #8]	; (c588 <at_host_init+0xb8>)
    c580:	4798      	blx	r3
	if (err) {
    c582:	e7c5      	b.n	c510 <at_host_init+0x40>
    c584:	2000e6e2 	.word	0x2000e6e2
    c588:	0001497c 	.word	0x0001497c
    c58c:	0000c49d 	.word	0x0000c49d
    c590:	2000cdf4 	.word	0x2000cdf4
    c594:	2000e7f8 	.word	0x2000e7f8
    c598:	2000c818 	.word	0x2000c818
    c59c:	0000c5a1 	.word	0x0000c5a1

0000c5a0 <isr>:
{
    c5a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c5a2:	4604      	mov	r4, r0
	if (api->irq_update == NULL) {
    c5a4:	6883      	ldr	r3, [r0, #8]
    c5a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c5a8:	b103      	cbz	r3, c5ac <isr+0xc>
	return api->irq_update(dev);
    c5aa:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
    c5ac:	68a3      	ldr	r3, [r4, #8]
    c5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c5b0:	b9c3      	cbnz	r3, c5e4 <isr+0x44>
	while ((!at_buf_busy) &&
    c5b2:	4e45      	ldr	r6, [pc, #276]	; (c6c8 <isr+0x128>)
		if (at_cmd_len > 0) {
    c5b4:	4d45      	ldr	r5, [pc, #276]	; (c6cc <isr+0x12c>)
	while ((!at_buf_busy) &&
    c5b6:	7833      	ldrb	r3, [r6, #0]
    c5b8:	b9c3      	cbnz	r3, c5ec <isr+0x4c>
	if (api->fifo_read == NULL) {
    c5ba:	68a3      	ldr	r3, [r4, #8]
    c5bc:	699b      	ldr	r3, [r3, #24]
    c5be:	b12b      	cbz	r3, c5cc <isr+0x2c>
	return api->fifo_read(dev, rx_data, size);
    c5c0:	2201      	movs	r2, #1
    c5c2:	4620      	mov	r0, r4
    c5c4:	f10d 0107 	add.w	r1, sp, #7
    c5c8:	4798      	blx	r3
    c5ca:	b178      	cbz	r0, c5ec <isr+0x4c>
		uart_rx_handler(character);
    c5cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
	switch (character) {
    c5d0:	2b08      	cmp	r3, #8
    c5d2:	d001      	beq.n	c5d8 <isr+0x38>
    c5d4:	2b7f      	cmp	r3, #127	; 0x7f
    c5d6:	d10b      	bne.n	c5f0 <isr+0x50>
		if (at_cmd_len > 0) {
    c5d8:	682b      	ldr	r3, [r5, #0]
    c5da:	2b00      	cmp	r3, #0
    c5dc:	d0eb      	beq.n	c5b6 <isr+0x16>
			at_cmd_len--;
    c5de:	3b01      	subs	r3, #1
    c5e0:	602b      	str	r3, [r5, #0]
    c5e2:	e7e8      	b.n	c5b6 <isr+0x16>
	return api->irq_rx_ready(dev);
    c5e4:	4620      	mov	r0, r4
    c5e6:	4798      	blx	r3
	if (!uart_irq_rx_ready(dev)) {
    c5e8:	2800      	cmp	r0, #0
    c5ea:	d1e2      	bne.n	c5b2 <isr+0x12>
}
    c5ec:	b003      	add	sp, #12
    c5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!inside_quotes) {
    c5f0:	4837      	ldr	r0, [pc, #220]	; (c6d0 <isr+0x130>)
    c5f2:	7802      	ldrb	r2, [r0, #0]
    c5f4:	2a00      	cmp	r2, #0
    c5f6:	d148      	bne.n	c68a <isr+0xea>
		switch (character) {
    c5f8:	2b0a      	cmp	r3, #10
    c5fa:	d024      	beq.n	c646 <isr+0xa6>
    c5fc:	2b0d      	cmp	r3, #13
    c5fe:	d014      	beq.n	c62a <isr+0x8a>
    c600:	2b00      	cmp	r3, #0
    c602:	d142      	bne.n	c68a <isr+0xea>
			if (term_mode == MODE_NULL_TERM) {
    c604:	4b33      	ldr	r3, [pc, #204]	; (c6d4 <isr+0x134>)
    c606:	781b      	ldrb	r3, [r3, #0]
    c608:	2b00      	cmp	r3, #0
    c60a:	d1d4      	bne.n	c5b6 <isr+0x16>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
    c60c:	2200      	movs	r2, #0
    c60e:	492f      	ldr	r1, [pc, #188]	; (c6cc <isr+0x12c>)
    c610:	4b31      	ldr	r3, [pc, #196]	; (c6d8 <isr+0x138>)
    c612:	680f      	ldr	r7, [r1, #0]
	at_cmd_len = 0;
    c614:	600a      	str	r2, [r1, #0]
    c616:	4619      	mov	r1, r3
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
    c618:	55da      	strb	r2, [r3, r7]
	inside_quotes = false;
    c61a:	7002      	strb	r2, [r0, #0]
		if (*c > ' ') {
    c61c:	f813 2b01 	ldrb.w	r2, [r3], #1
    c620:	2a20      	cmp	r2, #32
    c622:	d842      	bhi.n	c6aa <isr+0x10a>
		} else if (*c == '\0') {
    c624:	2a00      	cmp	r2, #0
    c626:	d1f9      	bne.n	c61c <isr+0x7c>
    c628:	e7c5      	b.n	c5b6 <isr+0x16>
			if (term_mode == MODE_CR) {
    c62a:	4a2a      	ldr	r2, [pc, #168]	; (c6d4 <isr+0x134>)
    c62c:	7812      	ldrb	r2, [r2, #0]
    c62e:	2a01      	cmp	r2, #1
    c630:	d0ec      	beq.n	c60c <isr+0x6c>
		if (at_cmd_len > 0) {
    c632:	4a26      	ldr	r2, [pc, #152]	; (c6cc <isr+0x12c>)
    c634:	6810      	ldr	r0, [r2, #0]
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
    c636:	1c41      	adds	r1, r0, #1
    c638:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    c63c:	d2bb      	bcs.n	c5b6 <isr+0x16>
	at_buf[at_cmd_len] = character;
    c63e:	4f26      	ldr	r7, [pc, #152]	; (c6d8 <isr+0x138>)
	at_cmd_len++;
    c640:	6011      	str	r1, [r2, #0]
	at_buf[at_cmd_len] = character;
    c642:	543b      	strb	r3, [r7, r0]
	if (character == '"') {
    c644:	e7b7      	b.n	c5b6 <isr+0x16>
			if (term_mode == MODE_LF) {
    c646:	4a23      	ldr	r2, [pc, #140]	; (c6d4 <isr+0x134>)
    c648:	7817      	ldrb	r7, [r2, #0]
    c64a:	2f02      	cmp	r7, #2
    c64c:	d0de      	beq.n	c60c <isr+0x6c>
		if (at_cmd_len > 0) {
    c64e:	491f      	ldr	r1, [pc, #124]	; (c6cc <isr+0x12c>)
			if (term_mode == MODE_CR_LF &&
    c650:	2f03      	cmp	r7, #3
		if (at_cmd_len > 0) {
    c652:	680a      	ldr	r2, [r1, #0]
			if (term_mode == MODE_CR_LF &&
    c654:	d113      	bne.n	c67e <isr+0xde>
    c656:	4f20      	ldr	r7, [pc, #128]	; (c6d8 <isr+0x138>)
    c658:	b16a      	cbz	r2, c676 <isr+0xd6>
			    at_buf[at_cmd_len - 1] == '\r') {
    c65a:	eb07 0c02 	add.w	ip, r7, r2
			    at_cmd_len > 0 &&
    c65e:	f81c cc01 	ldrb.w	ip, [ip, #-1]
    c662:	f1bc 0f0d 	cmp.w	ip, #13
    c666:	d0d1      	beq.n	c60c <isr+0x6c>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
    c668:	1c50      	adds	r0, r2, #1
    c66a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    c66e:	d2a2      	bcs.n	c5b6 <isr+0x16>
	at_buf[at_cmd_len] = character;
    c670:	54bb      	strb	r3, [r7, r2]
	at_cmd_len++;
    c672:	6008      	str	r0, [r1, #0]
	if (character == '"') {
    c674:	e79f      	b.n	c5b6 <isr+0x16>
	at_buf[at_cmd_len] = character;
    c676:	703b      	strb	r3, [r7, #0]
	at_cmd_len++;
    c678:	2301      	movs	r3, #1
    c67a:	600b      	str	r3, [r1, #0]
	if (character == '"') {
    c67c:	e79b      	b.n	c5b6 <isr+0x16>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
    c67e:	1c50      	adds	r0, r2, #1
    c680:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    c684:	d297      	bcs.n	c5b6 <isr+0x16>
	at_buf[at_cmd_len] = character;
    c686:	4f14      	ldr	r7, [pc, #80]	; (c6d8 <isr+0x138>)
    c688:	e7f2      	b.n	c670 <isr+0xd0>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
    c68a:	682f      	ldr	r7, [r5, #0]
    c68c:	1c79      	adds	r1, r7, #1
    c68e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    c692:	d290      	bcs.n	c5b6 <isr+0x16>
	at_buf[at_cmd_len] = character;
    c694:	f8df c040 	ldr.w	ip, [pc, #64]	; c6d8 <isr+0x138>
	if (character == '"') {
    c698:	2b22      	cmp	r3, #34	; 0x22
	at_buf[at_cmd_len] = character;
    c69a:	f80c 3007 	strb.w	r3, [ip, r7]
	at_cmd_len++;
    c69e:	6029      	str	r1, [r5, #0]
	if (character == '"') {
    c6a0:	d189      	bne.n	c5b6 <isr+0x16>
	if (!inside_quotes) {
    c6a2:	f082 0201 	eor.w	r2, r2, #1
		inside_quotes = !inside_quotes;
    c6a6:	7002      	strb	r2, [r0, #0]
    c6a8:	e785      	b.n	c5b6 <isr+0x16>
	if (at_buf[0]) {
    c6aa:	780b      	ldrb	r3, [r1, #0]
    c6ac:	2b00      	cmp	r3, #0
    c6ae:	d082      	beq.n	c5b6 <isr+0x16>
	const struct uart_driver_api *api =
    c6b0:	480a      	ldr	r0, [pc, #40]	; (c6dc <isr+0x13c>)
	if (api->irq_rx_disable != NULL) {
    c6b2:	6883      	ldr	r3, [r0, #8]
    c6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c6b6:	b103      	cbz	r3, c6ba <isr+0x11a>
		api->irq_rx_disable(dev);
    c6b8:	4798      	blx	r3
		at_buf_busy = true;
    c6ba:	2301      	movs	r3, #1
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
    c6bc:	4908      	ldr	r1, [pc, #32]	; (c6e0 <isr+0x140>)
    c6be:	4809      	ldr	r0, [pc, #36]	; (c6e4 <isr+0x144>)
		at_buf_busy = true;
    c6c0:	7033      	strb	r3, [r6, #0]
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
    c6c2:	f007 fe52 	bl	1436a <k_work_submit_to_queue>
    c6c6:	e776      	b.n	c5b6 <isr+0x16>
    c6c8:	2000e6e1 	.word	0x2000e6e1
    c6cc:	2000cdf0 	.word	0x2000cdf0
    c6d0:	2000d6e0 	.word	0x2000d6e0
    c6d4:	2000e6e2 	.word	0x2000e6e2
    c6d8:	2000d6e1 	.word	0x2000d6e1
    c6dc:	0001497c 	.word	0x0001497c
    c6e0:	2000cdf4 	.word	0x2000cdf4
    c6e4:	2000c818 	.word	0x2000c818

0000c6e8 <on_modem_lib_init>:
LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
{
    c6e8:	b508      	push	{r3, lr}
	int err;

	if (ret != 0) {
    c6ea:	b948      	cbnz	r0, c700 <on_modem_lib_init+0x18>
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
    c6ec:	4905      	ldr	r1, [pc, #20]	; (c704 <on_modem_lib_init+0x1c>)
    c6ee:	4806      	ldr	r0, [pc, #24]	; (c708 <on_modem_lib_init+0x20>)
    c6f0:	f001 faa0 	bl	dc34 <nrf_modem_at_printf>
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		if (err) {
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
		}
	}
}
    c6f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
    c6f8:	4904      	ldr	r1, [pc, #16]	; (c70c <on_modem_lib_init+0x24>)
    c6fa:	4803      	ldr	r0, [pc, #12]	; (c708 <on_modem_lib_init+0x20>)
    c6fc:	f001 ba9a 	b.w	dc34 <nrf_modem_at_printf>
}
    c700:	bd08      	pop	{r3, pc}
    c702:	bf00      	nop
    c704:	000162d1 	.word	0x000162d1
    c708:	000151c4 	.word	0x000151c4
    c70c:	000162f0 	.word	0x000162f0

0000c710 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
    c710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c714:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
    c716:	4b15      	ldr	r3, [pc, #84]	; (c76c <tfm_ns_interface_dispatch+0x5c>)
    c718:	4604      	mov	r4, r0
    c71a:	f893 8000 	ldrb.w	r8, [r3]
    c71e:	460d      	mov	r5, r1
    c720:	4616      	mov	r6, r2
    c722:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();
	int tfm_ns_saved_prio;

	if (!is_pre_kernel) {
    c724:	f1b8 0f00 	cmp.w	r8, #0
    c728:	d115      	bne.n	c756 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
    c72a:	4668      	mov	r0, sp
    c72c:	f006 f983 	bl	12a36 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
    c730:	463a      	mov	r2, r7
    c732:	4631      	mov	r1, r6
    c734:	4628      	mov	r0, r5
    c736:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    c738:	47a0      	blx	r4
    c73a:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
    c73c:	4668      	mov	r0, sp
    c73e:	f006 f97b 	bl	12a38 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
    c742:	f1b8 0f00 	cmp.w	r8, #0
    c746:	d002      	beq.n	c74e <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
    c748:	4809      	ldr	r0, [pc, #36]	; (c770 <tfm_ns_interface_dispatch+0x60>)
    c74a:	f003 f9bf 	bl	facc <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
    c74e:	4620      	mov	r0, r4
    c750:	b022      	add	sp, #136	; 0x88
    c752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
    c756:	f04f 32ff 	mov.w	r2, #4294967295
    c75a:	f04f 33ff 	mov.w	r3, #4294967295
    c75e:	4804      	ldr	r0, [pc, #16]	; (c770 <tfm_ns_interface_dispatch+0x60>)
    c760:	f003 f8e4 	bl	f92c <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
    c764:	2800      	cmp	r0, #0
    c766:	d0e0      	beq.n	c72a <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
    c768:	241f      	movs	r4, #31
    c76a:	e7f0      	b.n	c74e <tfm_ns_interface_dispatch+0x3e>
    c76c:	2000e6f0 	.word	0x2000e6f0
    c770:	2000c790 	.word	0x2000c790

0000c774 <psa_generate_random>:
    return API_DISPATCH_NO_OUTVEC(in_vec);
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
    c774:	b570      	push	{r4, r5, r6, lr}
    struct tfm_crypto_pack_iovec iov = {
    c776:	2630      	movs	r6, #48	; 0x30
{
    c778:	b092      	sub	sp, #72	; 0x48
    struct tfm_crypto_pack_iovec iov = {
    c77a:	ab06      	add	r3, sp, #24
{
    c77c:	4605      	mov	r5, r0
    c77e:	460c      	mov	r4, r1
    struct tfm_crypto_pack_iovec iov = {
    c780:	4632      	mov	r2, r6
    c782:	2100      	movs	r1, #0
    c784:	4618      	mov	r0, r3
    c786:	f007 ff00 	bl	1458a <memset>

    psa_invec in_vec[] = {
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
    c78a:	e9cd 5404 	strd	r5, r4, [sp, #16]
    psa_invec in_vec[] = {
    c78e:	e9cd 0602 	strd	r0, r6, [sp, #8]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
    c792:	b154      	cbz	r4, c7aa <psa_generate_random+0x36>
        return PSA_SUCCESS;
    }

    return API_DISPATCH(in_vec, out_vec);
    c794:	2301      	movs	r3, #1
    c796:	aa04      	add	r2, sp, #16
    c798:	9200      	str	r2, [sp, #0]
    c79a:	2100      	movs	r1, #0
    c79c:	4804      	ldr	r0, [pc, #16]	; (c7b0 <psa_generate_random+0x3c>)
    c79e:	9301      	str	r3, [sp, #4]
    c7a0:	aa02      	add	r2, sp, #8
    c7a2:	f000 f807 	bl	c7b4 <psa_call>
}
    c7a6:	b012      	add	sp, #72	; 0x48
    c7a8:	bd70      	pop	{r4, r5, r6, pc}
        return PSA_SUCCESS;
    c7aa:	4620      	mov	r0, r4
    c7ac:	e7fb      	b.n	c7a6 <psa_generate_random+0x32>
    c7ae:	bf00      	nop
    c7b0:	40000100 	.word	0x40000100

0000c7b4 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
    c7b4:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
    c7b6:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
    c7ba:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
    c7be:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
    c7c0:	d20d      	bcs.n	c7de <psa_call+0x2a>
        (type < INT16_MIN) ||
    c7c2:	ea43 0504 	orr.w	r5, r3, r4
    c7c6:	2dff      	cmp	r5, #255	; 0xff
    c7c8:	d809      	bhi.n	c7de <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
    c7ca:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
    c7ce:	4613      	mov	r3, r2
    c7d0:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
    c7d4:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
    c7d6:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
    c7d8:	4803      	ldr	r0, [pc, #12]	; (c7e8 <psa_call+0x34>)
    c7da:	f7ff bf99 	b.w	c710 <tfm_ns_interface_dispatch>
}
    c7de:	f06f 0080 	mvn.w	r0, #128	; 0x80
    c7e2:	bc30      	pop	{r4, r5}
    c7e4:	4770      	bx	lr
    c7e6:	bf00      	nop
    c7e8:	00007c11 	.word	0x00007c11

0000c7ec <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    c7ec:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    c7ee:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    c7f0:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    c7f2:	fab2 f382 	clz	r3, r2
    c7f6:	f1c3 031f 	rsb	r3, r3, #31
    c7fa:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    c7fc:	fa05 f403 	lsl.w	r4, r5, r3
    c800:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c804:	e8d0 6fef 	ldaex	r6, [r0]
    c808:	4296      	cmp	r6, r2
    c80a:	d104      	bne.n	c816 <nrfx_flag32_alloc+0x2a>
    c80c:	e8c0 4fec 	stlex	ip, r4, [r0]
    c810:	f1bc 0f00 	cmp.w	ip, #0
    c814:	d1f6      	bne.n	c804 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    c816:	d1eb      	bne.n	c7f0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    c818:	4801      	ldr	r0, [pc, #4]	; (c820 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    c81a:	700b      	strb	r3, [r1, #0]
}
    c81c:	bd70      	pop	{r4, r5, r6, pc}
    c81e:	bf00      	nop
    c820:	0bad0000 	.word	0x0bad0000

0000c824 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    c824:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    c826:	6803      	ldr	r3, [r0, #0]
    c828:	40cb      	lsrs	r3, r1
    c82a:	07db      	lsls	r3, r3, #31
    c82c:	d410      	bmi.n	c850 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    c82e:	2301      	movs	r3, #1
    c830:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    c832:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    c834:	ea43 0102 	orr.w	r1, r3, r2
    c838:	e8d0 4fef 	ldaex	r4, [r0]
    c83c:	4294      	cmp	r4, r2
    c83e:	d104      	bne.n	c84a <nrfx_flag32_free+0x26>
    c840:	e8c0 1fec 	stlex	ip, r1, [r0]
    c844:	f1bc 0f00 	cmp.w	ip, #0
    c848:	d1f6      	bne.n	c838 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    c84a:	d1f2      	bne.n	c832 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    c84c:	4801      	ldr	r0, [pc, #4]	; (c854 <nrfx_flag32_free+0x30>)
}
    c84e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    c850:	4801      	ldr	r0, [pc, #4]	; (c858 <nrfx_flag32_free+0x34>)
    c852:	e7fc      	b.n	c84e <nrfx_flag32_free+0x2a>
    c854:	0bad0000 	.word	0x0bad0000
    c858:	0bad0004 	.word	0x0bad0004

0000c85c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    c85c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c85e:	4b34      	ldr	r3, [pc, #208]	; (c930 <clock_stop+0xd4>)
    switch (domain)
    c860:	4604      	mov	r4, r0
    c862:	b158      	cbz	r0, c87c <clock_stop+0x20>
    c864:	2801      	cmp	r0, #1
    c866:	d027      	beq.n	c8b8 <clock_stop+0x5c>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    c868:	4932      	ldr	r1, [pc, #200]	; (c934 <clock_stop+0xd8>)
    c86a:	4833      	ldr	r0, [pc, #204]	; (c938 <clock_stop+0xdc>)
    c86c:	23d8      	movs	r3, #216	; 0xd8
    c86e:	4a33      	ldr	r2, [pc, #204]	; (c93c <clock_stop+0xe0>)
    c870:	f006 f8ac 	bl	129cc <assert_print>
    c874:	21d8      	movs	r1, #216	; 0xd8
    c876:	4831      	ldr	r0, [pc, #196]	; (c93c <clock_stop+0xe0>)
            NRFX_ASSERT(0);
    c878:	f006 f8a1 	bl	129be <assert_post_action>
    p_reg->INTENCLR = mask;
    c87c:	2202      	movs	r2, #2
    c87e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c882:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    c886:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c88a:	2201      	movs	r2, #1
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    c88c:	4607      	mov	r7, r0
    c88e:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    c890:	2301      	movs	r3, #1
    c892:	f242 7510 	movw	r5, #10000	; 0x2710
    c896:	4e26      	ldr	r6, [pc, #152]	; (c930 <clock_stop+0xd4>)
    c898:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    c89c:	b1bc      	cbz	r4, c8ce <clock_stop+0x72>
    c89e:	2c01      	cmp	r4, #1
    c8a0:	d033      	beq.n	c90a <clock_stop+0xae>
            NRFX_ASSERT(0);
    c8a2:	4924      	ldr	r1, [pc, #144]	; (c934 <clock_stop+0xd8>)
    c8a4:	4824      	ldr	r0, [pc, #144]	; (c938 <clock_stop+0xdc>)
    c8a6:	f240 3347 	movw	r3, #839	; 0x347
    c8aa:	4a25      	ldr	r2, [pc, #148]	; (c940 <clock_stop+0xe4>)
    c8ac:	f006 f88e 	bl	129cc <assert_print>
    c8b0:	f240 3147 	movw	r1, #839	; 0x347
    c8b4:	4822      	ldr	r0, [pc, #136]	; (c940 <clock_stop+0xe4>)
    c8b6:	e7df      	b.n	c878 <clock_stop+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c8b8:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    c8ba:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c8be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    c8c2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    c8c6:	f10d 0707 	add.w	r7, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c8ca:	6058      	str	r0, [r3, #4]
    c8cc:	e7e0      	b.n	c890 <clock_stop+0x34>
            if (p_clk_src != NULL)
    c8ce:	b18f      	cbz	r7, c8f4 <clock_stop+0x98>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    c8d0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    c8d4:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    c8d8:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    c8da:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    c8de:	03da      	lsls	r2, r3, #15
    c8e0:	d511      	bpl.n	c906 <clock_stop+0xaa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    c8e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c8e6:	2801      	cmp	r0, #1
    c8e8:	d10d      	bne.n	c906 <clock_stop+0xaa>
    c8ea:	f006 fda6 	bl	1343a <nrfx_busy_wait>
    c8ee:	3d01      	subs	r5, #1
    c8f0:	d1d4      	bne.n	c89c <clock_stop+0x40>
    c8f2:	e008      	b.n	c906 <clock_stop+0xaa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    c8f4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    c8f8:	03d9      	lsls	r1, r3, #15
    c8fa:	d504      	bpl.n	c906 <clock_stop+0xaa>
    c8fc:	2001      	movs	r0, #1
    c8fe:	f006 fd9c 	bl	1343a <nrfx_busy_wait>
    c902:	3d01      	subs	r5, #1
    c904:	d1f6      	bne.n	c8f4 <clock_stop+0x98>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    c906:	b003      	add	sp, #12
    c908:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (p_clk_src != NULL)
    c90a:	b13f      	cbz	r7, c91c <clock_stop+0xc0>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    c90c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    c910:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    c914:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    c916:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    c91a:	e7e0      	b.n	c8de <clock_stop+0x82>
    c91c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    c920:	03db      	lsls	r3, r3, #15
    c922:	d5f0      	bpl.n	c906 <clock_stop+0xaa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    c924:	2001      	movs	r0, #1
    c926:	f006 fd88 	bl	1343a <nrfx_busy_wait>
    c92a:	3d01      	subs	r5, #1
    c92c:	d1f6      	bne.n	c91c <clock_stop+0xc0>
    c92e:	e7ea      	b.n	c906 <clock_stop+0xaa>
    c930:	40005000 	.word	0x40005000
    c934:	00016f1f 	.word	0x00016f1f
    c938:	00015341 	.word	0x00015341
    c93c:	00016316 	.word	0x00016316
    c940:	00016353 	.word	0x00016353

0000c944 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    c944:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
    c946:	b958      	cbnz	r0, c960 <nrfx_clock_init+0x1c>
    c948:	490a      	ldr	r1, [pc, #40]	; (c974 <nrfx_clock_init+0x30>)
    c94a:	480b      	ldr	r0, [pc, #44]	; (c978 <nrfx_clock_init+0x34>)
    c94c:	f240 1315 	movw	r3, #277	; 0x115
    c950:	4a0a      	ldr	r2, [pc, #40]	; (c97c <nrfx_clock_init+0x38>)
    c952:	f006 f83b 	bl	129cc <assert_print>
    c956:	f240 1115 	movw	r1, #277	; 0x115
    c95a:	4808      	ldr	r0, [pc, #32]	; (c97c <nrfx_clock_init+0x38>)
    c95c:	f006 f82f 	bl	129be <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    c960:	4b07      	ldr	r3, [pc, #28]	; (c980 <nrfx_clock_init+0x3c>)
    c962:	791a      	ldrb	r2, [r3, #4]
    c964:	b922      	cbnz	r2, c970 <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    c966:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    c968:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
    c96a:	4806      	ldr	r0, [pc, #24]	; (c984 <nrfx_clock_init+0x40>)
        m_clock_cb.module_initialized = true;
    c96c:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    c96e:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    c970:	4805      	ldr	r0, [pc, #20]	; (c988 <nrfx_clock_init+0x44>)
    return err_code;
    c972:	e7fc      	b.n	c96e <nrfx_clock_init+0x2a>
    c974:	00016387 	.word	0x00016387
    c978:	00015341 	.word	0x00015341
    c97c:	00016316 	.word	0x00016316
    c980:	2000ce04 	.word	0x2000ce04
    c984:	0bad0000 	.word	0x0bad0000
    c988:	0bad000c 	.word	0x0bad000c

0000c98c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    c98c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    c98e:	4b0d      	ldr	r3, [pc, #52]	; (c9c4 <nrfx_clock_enable+0x38>)
    c990:	791b      	ldrb	r3, [r3, #4]
    c992:	b95b      	cbnz	r3, c9ac <nrfx_clock_enable+0x20>
    c994:	490c      	ldr	r1, [pc, #48]	; (c9c8 <nrfx_clock_enable+0x3c>)
    c996:	480d      	ldr	r0, [pc, #52]	; (c9cc <nrfx_clock_enable+0x40>)
    c998:	f44f 7397 	mov.w	r3, #302	; 0x12e
    c99c:	4a0c      	ldr	r2, [pc, #48]	; (c9d0 <nrfx_clock_enable+0x44>)
    c99e:	f006 f815 	bl	129cc <assert_print>
    c9a2:	f44f 7197 	mov.w	r1, #302	; 0x12e
    c9a6:	480a      	ldr	r0, [pc, #40]	; (c9d0 <nrfx_clock_enable+0x44>)
    c9a8:	f006 f809 	bl	129be <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    c9ac:	2005      	movs	r0, #5
    c9ae:	f7fd f8b7 	bl	9b20 <arch_irq_is_enabled>
    c9b2:	b910      	cbnz	r0, c9ba <nrfx_clock_enable+0x2e>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    c9b4:	2005      	movs	r0, #5
    c9b6:	f7fd f8a5 	bl	9b04 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    c9ba:	2201      	movs	r2, #1
    c9bc:	4b05      	ldr	r3, [pc, #20]	; (c9d4 <nrfx_clock_enable+0x48>)
    c9be:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    c9c2:	bd08      	pop	{r3, pc}
    c9c4:	2000ce04 	.word	0x2000ce04
    c9c8:	00016395 	.word	0x00016395
    c9cc:	00015341 	.word	0x00015341
    c9d0:	00016316 	.word	0x00016316
    c9d4:	40005000 	.word	0x40005000

0000c9d8 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    c9d8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    c9da:	4b2a      	ldr	r3, [pc, #168]	; (ca84 <nrfx_clock_start+0xac>)
    c9dc:	791b      	ldrb	r3, [r3, #4]
    c9de:	b95b      	cbnz	r3, c9f8 <nrfx_clock_start+0x20>
    c9e0:	4929      	ldr	r1, [pc, #164]	; (ca88 <nrfx_clock_start+0xb0>)
    c9e2:	f44f 73b4 	mov.w	r3, #360	; 0x168
    c9e6:	4a29      	ldr	r2, [pc, #164]	; (ca8c <nrfx_clock_start+0xb4>)
    c9e8:	4829      	ldr	r0, [pc, #164]	; (ca90 <nrfx_clock_start+0xb8>)
    c9ea:	f005 ffef 	bl	129cc <assert_print>
    c9ee:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    c9f2:	4826      	ldr	r0, [pc, #152]	; (ca8c <nrfx_clock_start+0xb4>)
    c9f4:	f005 ffe3 	bl	129be <assert_post_action>
    switch (domain)
    c9f8:	4b26      	ldr	r3, [pc, #152]	; (ca94 <nrfx_clock_start+0xbc>)
    c9fa:	b158      	cbz	r0, ca14 <nrfx_clock_start+0x3c>
    c9fc:	2801      	cmp	r0, #1
    c9fe:	d037      	beq.n	ca70 <nrfx_clock_start+0x98>
            NRFX_ASSERT(0);
    ca00:	4925      	ldr	r1, [pc, #148]	; (ca98 <nrfx_clock_start+0xc0>)
    ca02:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    ca06:	4a21      	ldr	r2, [pc, #132]	; (ca8c <nrfx_clock_start+0xb4>)
    ca08:	4821      	ldr	r0, [pc, #132]	; (ca90 <nrfx_clock_start+0xb8>)
    ca0a:	f005 ffdf 	bl	129cc <assert_print>
    ca0e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    ca12:	e7ee      	b.n	c9f2 <nrfx_clock_start+0x1a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    ca14:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ca18:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    ca1c:	03c9      	lsls	r1, r1, #15
    ca1e:	d511      	bpl.n	ca44 <nrfx_clock_start+0x6c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    ca20:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    ca24:	2b02      	cmp	r3, #2
    ca26:	d11c      	bne.n	ca62 <nrfx_clock_start+0x8a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    ca28:	4a1a      	ldr	r2, [pc, #104]	; (ca94 <nrfx_clock_start+0xbc>)
    ca2a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ca2e:	2300      	movs	r3, #0
    ca30:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    ca34:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    ca38:	2302      	movs	r3, #2
    ca3a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ca3e:	2301      	movs	r3, #1
    ca40:	6093      	str	r3, [r2, #8]
}
    ca42:	e00d      	b.n	ca60 <nrfx_clock_start+0x88>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    ca44:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    ca48:	07d2      	lsls	r2, r2, #31
    ca4a:	d50f      	bpl.n	ca6c <nrfx_clock_start+0x94>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    ca4c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
    ca50:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    ca54:	3a01      	subs	r2, #1
    ca56:	2a01      	cmp	r2, #1
    ca58:	d805      	bhi.n	ca66 <nrfx_clock_start+0x8e>
    p_reg->INTENSET = mask;
    ca5a:	2202      	movs	r2, #2
    ca5c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
    ca60:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    ca62:	2b01      	cmp	r3, #1
    ca64:	d002      	beq.n	ca6c <nrfx_clock_start+0x94>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    ca66:	2000      	movs	r0, #0
    ca68:	f7ff fef8 	bl	c85c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    ca6c:	2301      	movs	r3, #1
    ca6e:	e7db      	b.n	ca28 <nrfx_clock_start+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ca70:	2200      	movs	r2, #0
    ca72:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    ca76:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    ca7a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ca7e:	6018      	str	r0, [r3, #0]
}
    ca80:	e7ee      	b.n	ca60 <nrfx_clock_start+0x88>
    ca82:	bf00      	nop
    ca84:	2000ce04 	.word	0x2000ce04
    ca88:	00016395 	.word	0x00016395
    ca8c:	00016316 	.word	0x00016316
    ca90:	00015341 	.word	0x00015341
    ca94:	40005000 	.word	0x40005000
    ca98:	00016f1f 	.word	0x00016f1f

0000ca9c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    ca9c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    ca9e:	4b09      	ldr	r3, [pc, #36]	; (cac4 <nrfx_clock_stop+0x28>)
    caa0:	791b      	ldrb	r3, [r3, #4]
    caa2:	b95b      	cbnz	r3, cabc <nrfx_clock_stop+0x20>
    caa4:	4908      	ldr	r1, [pc, #32]	; (cac8 <nrfx_clock_stop+0x2c>)
    caa6:	4809      	ldr	r0, [pc, #36]	; (cacc <nrfx_clock_stop+0x30>)
    caa8:	f240 13ad 	movw	r3, #429	; 0x1ad
    caac:	4a08      	ldr	r2, [pc, #32]	; (cad0 <nrfx_clock_stop+0x34>)
    caae:	f005 ff8d 	bl	129cc <assert_print>
    cab2:	f240 11ad 	movw	r1, #429	; 0x1ad
    cab6:	4806      	ldr	r0, [pc, #24]	; (cad0 <nrfx_clock_stop+0x34>)
    cab8:	f005 ff81 	bl	129be <assert_post_action>
    clock_stop(domain);
}
    cabc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
    cac0:	f7ff becc 	b.w	c85c <clock_stop>
    cac4:	2000ce04 	.word	0x2000ce04
    cac8:	00016395 	.word	0x00016395
    cacc:	00015341 	.word	0x00015341
    cad0:	00016316 	.word	0x00016316

0000cad4 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    cad4:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    cad6:	4b17      	ldr	r3, [pc, #92]	; (cb34 <nrfx_power_clock_irq_handler+0x60>)
    cad8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    cadc:	b152      	cbz	r2, caf4 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cade:	2000      	movs	r0, #0
    cae0:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    cae4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    cae8:	2201      	movs	r2, #1
    caea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    caee:	4b12      	ldr	r3, [pc, #72]	; (cb38 <nrfx_power_clock_irq_handler+0x64>)
    caf0:	681b      	ldr	r3, [r3, #0]
    caf2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    caf4:	4b0f      	ldr	r3, [pc, #60]	; (cb34 <nrfx_power_clock_irq_handler+0x60>)
    caf6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    cafa:	b18a      	cbz	r2, cb20 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cafc:	2200      	movs	r2, #0
    cafe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    cb02:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    cb06:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    cb0a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    cb0e:	f002 0203 	and.w	r2, r2, #3
    cb12:	2a01      	cmp	r2, #1
    cb14:	f04f 0102 	mov.w	r1, #2
    cb18:	d103      	bne.n	cb22 <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    cb1a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cb1e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    cb20:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    cb22:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    cb26:	4b04      	ldr	r3, [pc, #16]	; (cb38 <nrfx_power_clock_irq_handler+0x64>)
    cb28:	2001      	movs	r0, #1
}
    cb2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    cb2e:	681b      	ldr	r3, [r3, #0]
    cb30:	4718      	bx	r3
    cb32:	bf00      	nop
    cb34:	40005000 	.word	0x40005000
    cb38:	2000ce04 	.word	0x2000ce04

0000cb3c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    cb3c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    cb3e:	4801      	ldr	r0, [pc, #4]	; (cb44 <nrfx_dppi_channel_alloc+0x8>)
    cb40:	f7ff be54 	b.w	c7ec <nrfx_flag32_alloc>
    cb44:	2000c5d8 	.word	0x2000c5d8

0000cb48 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    cb48:	4b03      	ldr	r3, [pc, #12]	; (cb58 <pin_in_use_by_te+0x10>)
    cb4a:	3008      	adds	r0, #8
    cb4c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    cb50:	f3c0 1040 	ubfx	r0, r0, #5, #1
    cb54:	4770      	bx	lr
    cb56:	bf00      	nop
    cb58:	2000c5dc 	.word	0x2000c5dc

0000cb5c <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    cb5c:	4b04      	ldr	r3, [pc, #16]	; (cb70 <pin_has_trigger+0x14>)
    cb5e:	3008      	adds	r0, #8
    cb60:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    cb64:	f010 001c 	ands.w	r0, r0, #28
    cb68:	bf18      	it	ne
    cb6a:	2001      	movne	r0, #1
    cb6c:	4770      	bx	lr
    cb6e:	bf00      	nop
    cb70:	2000c5dc 	.word	0x2000c5dc

0000cb74 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    cb74:	4b03      	ldr	r3, [pc, #12]	; (cb84 <pin_is_output+0x10>)
    cb76:	3008      	adds	r0, #8
    cb78:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    cb7c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    cb80:	4770      	bx	lr
    cb82:	bf00      	nop
    cb84:	2000c5dc 	.word	0x2000c5dc

0000cb88 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    cb88:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    cb8a:	4c0d      	ldr	r4, [pc, #52]	; (cbc0 <call_handler+0x38>)
    cb8c:	f100 0308 	add.w	r3, r0, #8
    cb90:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    cb94:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    cb96:	05da      	lsls	r2, r3, #23
{
    cb98:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    cb9a:	d507      	bpl.n	cbac <call_handler+0x24>
    cb9c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    cba0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    cba4:	6852      	ldr	r2, [r2, #4]
    cba6:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    cbaa:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    cbac:	68a3      	ldr	r3, [r4, #8]
    cbae:	b12b      	cbz	r3, cbbc <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    cbb0:	4631      	mov	r1, r6
    cbb2:	4628      	mov	r0, r5
    cbb4:	68e2      	ldr	r2, [r4, #12]
    }
}
    cbb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    cbba:	4718      	bx	r3
}
    cbbc:	bd70      	pop	{r4, r5, r6, pc}
    cbbe:	bf00      	nop
    cbc0:	2000c5dc 	.word	0x2000c5dc

0000cbc4 <release_handler>:
{
    cbc4:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    cbc6:	4a18      	ldr	r2, [pc, #96]	; (cc28 <release_handler+0x64>)
    cbc8:	3008      	adds	r0, #8
    cbca:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    cbce:	05d9      	lsls	r1, r3, #23
    cbd0:	d51d      	bpl.n	cc0e <release_handler+0x4a>
    cbd2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    cbd6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    cbda:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    cbde:	2000      	movs	r0, #0
    cbe0:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    cbe4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    cbe8:	f413 7f80 	tst.w	r3, #256	; 0x100
    cbec:	d003      	beq.n	cbf6 <release_handler+0x32>
    cbee:	f3c3 2343 	ubfx	r3, r3, #9, #4
    cbf2:	4299      	cmp	r1, r3
    cbf4:	d00b      	beq.n	cc0e <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    cbf6:	3001      	adds	r0, #1
    cbf8:	2820      	cmp	r0, #32
    cbfa:	d1f3      	bne.n	cbe4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    cbfc:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    cbfe:	480b      	ldr	r0, [pc, #44]	; (cc2c <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
    cc00:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    cc04:	f7ff fe0e 	bl	c824 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    cc08:	4b09      	ldr	r3, [pc, #36]	; (cc30 <release_handler+0x6c>)
    cc0a:	4298      	cmp	r0, r3
    cc0c:	d100      	bne.n	cc10 <release_handler+0x4c>
}
    cc0e:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    cc10:	4908      	ldr	r1, [pc, #32]	; (cc34 <release_handler+0x70>)
    cc12:	4809      	ldr	r0, [pc, #36]	; (cc38 <release_handler+0x74>)
    cc14:	f44f 7399 	mov.w	r3, #306	; 0x132
    cc18:	4a08      	ldr	r2, [pc, #32]	; (cc3c <release_handler+0x78>)
    cc1a:	f005 fed7 	bl	129cc <assert_print>
    cc1e:	f44f 7199 	mov.w	r1, #306	; 0x132
    cc22:	4806      	ldr	r0, [pc, #24]	; (cc3c <release_handler+0x78>)
    cc24:	f005 fecb 	bl	129be <assert_post_action>
    cc28:	2000c5dc 	.word	0x2000c5dc
    cc2c:	2000c630 	.word	0x2000c630
    cc30:	0bad0000 	.word	0x0bad0000
    cc34:	00015f39 	.word	0x00015f39
    cc38:	00015341 	.word	0x00015341
    cc3c:	000163c8 	.word	0x000163c8

0000cc40 <pin_handler_trigger_uninit>:
{
    cc40:	b538      	push	{r3, r4, r5, lr}
    cc42:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    cc44:	f7ff ff80 	bl	cb48 <pin_in_use_by_te>
    cc48:	4c0b      	ldr	r4, [pc, #44]	; (cc78 <pin_handler_trigger_uninit+0x38>)
    cc4a:	f102 0508 	add.w	r5, r2, #8
    cc4e:	b160      	cbz	r0, cc6a <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    cc50:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    cc52:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    cc56:	0b5b      	lsrs	r3, r3, #13
    cc58:	009b      	lsls	r3, r3, #2
    cc5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    cc5e:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    cc62:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
    cc66:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    cc6a:	4610      	mov	r0, r2
    cc6c:	f7ff ffaa 	bl	cbc4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    cc70:	2300      	movs	r3, #0
    cc72:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    cc76:	bd38      	pop	{r3, r4, r5, pc}
    cc78:	2000c5dc 	.word	0x2000c5dc

0000cc7c <nrf_gpio_pin_port_decode>:
{
    cc7c:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    cc7e:	6802      	ldr	r2, [r0, #0]
{
    cc80:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    cc82:	4610      	mov	r0, r2
    cc84:	f006 fbdb 	bl	1343e <nrf_gpio_pin_present_check>
    cc88:	b958      	cbnz	r0, cca2 <nrf_gpio_pin_port_decode+0x26>
    cc8a:	490e      	ldr	r1, [pc, #56]	; (ccc4 <nrf_gpio_pin_port_decode+0x48>)
    cc8c:	f240 2347 	movw	r3, #583	; 0x247
    cc90:	4a0d      	ldr	r2, [pc, #52]	; (ccc8 <nrf_gpio_pin_port_decode+0x4c>)
    cc92:	480e      	ldr	r0, [pc, #56]	; (cccc <nrf_gpio_pin_port_decode+0x50>)
    cc94:	f005 fe9a 	bl	129cc <assert_print>
    cc98:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
    cc9c:	480a      	ldr	r0, [pc, #40]	; (ccc8 <nrf_gpio_pin_port_decode+0x4c>)
    cc9e:	f005 fe8e 	bl	129be <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    cca2:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    cca6:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
    cca8:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ccaa:	d009      	beq.n	ccc0 <nrf_gpio_pin_port_decode+0x44>
            NRFX_ASSERT(0);
    ccac:	4908      	ldr	r1, [pc, #32]	; (ccd0 <nrf_gpio_pin_port_decode+0x54>)
    ccae:	f44f 7313 	mov.w	r3, #588	; 0x24c
    ccb2:	4a05      	ldr	r2, [pc, #20]	; (ccc8 <nrf_gpio_pin_port_decode+0x4c>)
    ccb4:	4805      	ldr	r0, [pc, #20]	; (cccc <nrf_gpio_pin_port_decode+0x50>)
    ccb6:	f005 fe89 	bl	129cc <assert_print>
    ccba:	f44f 7113 	mov.w	r1, #588	; 0x24c
    ccbe:	e7ed      	b.n	cc9c <nrf_gpio_pin_port_decode+0x20>
}
    ccc0:	4804      	ldr	r0, [pc, #16]	; (ccd4 <nrf_gpio_pin_port_decode+0x58>)
    ccc2:	bd08      	pop	{r3, pc}
    ccc4:	00015ede 	.word	0x00015ede
    ccc8:	00015eab 	.word	0x00015eab
    cccc:	00015341 	.word	0x00015341
    ccd0:	00016f1f 	.word	0x00016f1f
    ccd4:	40842500 	.word	0x40842500

0000ccd8 <nrfx_gpiote_input_configure>:
{
    ccd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ccda:	4604      	mov	r4, r0
    ccdc:	4617      	mov	r7, r2
    ccde:	461d      	mov	r5, r3
    cce0:	b085      	sub	sp, #20
    if (p_input_config)
    cce2:	b1d9      	cbz	r1, cd1c <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
    cce4:	f006 fbb7 	bl	13456 <pin_is_task_output>
    cce8:	bb00      	cbnz	r0, cd2c <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    ccea:	460b      	mov	r3, r1
    ccec:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    ccf0:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    ccf4:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    ccf8:	f10d 020f 	add.w	r2, sp, #15
    ccfc:	f10d 010e 	add.w	r1, sp, #14
    cd00:	4620      	mov	r0, r4
    cd02:	f006 fbb3 	bl	1346c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    cd06:	4a44      	ldr	r2, [pc, #272]	; (ce18 <nrfx_gpiote_input_configure+0x140>)
    cd08:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    cd0c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    cd10:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    cd14:	f043 0301 	orr.w	r3, r3, #1
    cd18:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    cd1c:	b36f      	cbz	r7, cd7a <nrfx_gpiote_input_configure+0xa2>
        if (pin_is_output(pin))
    cd1e:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    cd20:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    cd22:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
    cd24:	f7ff ff26 	bl	cb74 <pin_is_output>
    cd28:	b110      	cbz	r0, cd30 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
    cd2a:	b1da      	cbz	r2, cd64 <nrfx_gpiote_input_configure+0x8c>
            return NRFX_ERROR_INVALID_PARAM;
    cd2c:	483b      	ldr	r0, [pc, #236]	; (ce1c <nrfx_gpiote_input_configure+0x144>)
    cd2e:	e026      	b.n	cd7e <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    cd30:	4839      	ldr	r0, [pc, #228]	; (ce18 <nrfx_gpiote_input_configure+0x140>)
    cd32:	f104 0c08 	add.w	ip, r4, #8
    cd36:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
    cd3a:	f021 0120 	bic.w	r1, r1, #32
    cd3e:	04c9      	lsls	r1, r1, #19
    cd40:	0cc9      	lsrs	r1, r1, #19
    cd42:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
            if (use_evt)
    cd46:	b16a      	cbz	r2, cd64 <nrfx_gpiote_input_configure+0x8c>
                if (!edge)
    cd48:	2e03      	cmp	r6, #3
    cd4a:	d8ef      	bhi.n	cd2c <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
    cd4c:	687b      	ldr	r3, [r7, #4]
    cd4e:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    cd50:	00ba      	lsls	r2, r7, #2
    cd52:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    cd56:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    cd5a:	b996      	cbnz	r6, cd82 <nrfx_gpiote_input_configure+0xaa>
    p_reg->CONFIG[idx] = 0;
    cd5c:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    cd60:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    cd64:	4a2c      	ldr	r2, [pc, #176]	; (ce18 <nrfx_gpiote_input_configure+0x140>)
    cd66:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    cd6a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    cd6e:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    cd72:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    cd76:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    cd7a:	bb15      	cbnz	r5, cdc2 <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
    cd7c:	4828      	ldr	r0, [pc, #160]	; (ce20 <nrfx_gpiote_input_configure+0x148>)
}
    cd7e:	b005      	add	sp, #20
    cd80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    cd82:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    cd86:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    cd8a:	f023 0303 	bic.w	r3, r3, #3
    cd8e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    cd92:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    cd96:	f041 0120 	orr.w	r1, r1, #32
    cd9a:	f423 3347 	bic.w	r3, r3, #203776	; 0x31c00
    cd9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    cda2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    cda6:	0223      	lsls	r3, r4, #8
    cda8:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    cdac:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    cdb0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    cdb4:	ea43 030e 	orr.w	r3, r3, lr
    cdb8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    cdbc:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
    cdc0:	e7d0      	b.n	cd64 <nrfx_gpiote_input_configure+0x8c>
    release_handler(pin);
    cdc2:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    cdc4:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    cdc8:	f7ff fefc 	bl	cbc4 <release_handler>
    if (!handler)
    cdcc:	2e00      	cmp	r6, #0
    cdce:	d0d5      	beq.n	cd7c <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    cdd0:	4d11      	ldr	r5, [pc, #68]	; (ce18 <nrfx_gpiote_input_configure+0x140>)
    cdd2:	e9d5 2300 	ldrd	r2, r3, [r5]
    cdd6:	4296      	cmp	r6, r2
    cdd8:	d101      	bne.n	cdde <nrfx_gpiote_input_configure+0x106>
    cdda:	429f      	cmp	r7, r3
    cddc:	d019      	beq.n	ce12 <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    cdde:	4811      	ldr	r0, [pc, #68]	; (ce24 <nrfx_gpiote_input_configure+0x14c>)
    cde0:	f10d 010f 	add.w	r1, sp, #15
    cde4:	f7ff fd02 	bl	c7ec <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    cde8:	4b0d      	ldr	r3, [pc, #52]	; (ce20 <nrfx_gpiote_input_configure+0x148>)
    cdea:	4298      	cmp	r0, r3
    cdec:	d1c7      	bne.n	cd7e <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    cdee:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    cdf2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    cdf6:	f104 0008 	add.w	r0, r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    cdfa:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    cdfc:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    ce00:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    ce04:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    ce08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    ce0c:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
    ce10:	e7b4      	b.n	cd7c <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    ce12:	2200      	movs	r2, #0
    ce14:	e7ed      	b.n	cdf2 <nrfx_gpiote_input_configure+0x11a>
    ce16:	bf00      	nop
    ce18:	2000c5dc 	.word	0x2000c5dc
    ce1c:	0bad0004 	.word	0x0bad0004
    ce20:	0bad0000 	.word	0x0bad0000
    ce24:	2000c630 	.word	0x2000c630

0000ce28 <nrfx_gpiote_output_configure>:
{
    ce28:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce2a:	4604      	mov	r4, r0
    ce2c:	4615      	mov	r5, r2
    ce2e:	b085      	sub	sp, #20
    if (p_config)
    ce30:	b321      	cbz	r1, ce7c <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
    ce32:	f7ff fe9f 	bl	cb74 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    ce36:	b920      	cbnz	r0, ce42 <nrfx_gpiote_output_configure+0x1a>
    ce38:	4620      	mov	r0, r4
    ce3a:	f7ff fe85 	bl	cb48 <pin_in_use_by_te>
    ce3e:	2800      	cmp	r0, #0
    ce40:	d161      	bne.n	cf06 <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    ce42:	4620      	mov	r0, r4
    ce44:	f7ff fe8a 	bl	cb5c <pin_has_trigger>
    ce48:	b110      	cbz	r0, ce50 <nrfx_gpiote_output_configure+0x28>
    ce4a:	784b      	ldrb	r3, [r1, #1]
    ce4c:	2b01      	cmp	r3, #1
    ce4e:	d05a      	beq.n	cf06 <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    ce50:	2301      	movs	r3, #1
    ce52:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    ce56:	2300      	movs	r3, #0
    ce58:	1c4a      	adds	r2, r1, #1
    ce5a:	e9cd 1300 	strd	r1, r3, [sp]
    ce5e:	4620      	mov	r0, r4
    ce60:	1c8b      	adds	r3, r1, #2
    ce62:	f10d 010f 	add.w	r1, sp, #15
    ce66:	f006 fb01 	bl	1346c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    ce6a:	4a28      	ldr	r2, [pc, #160]	; (cf0c <nrfx_gpiote_output_configure+0xe4>)
    ce6c:	f104 0108 	add.w	r1, r4, #8
    ce70:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    ce74:	f043 0303 	orr.w	r3, r3, #3
    ce78:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    ce7c:	b915      	cbnz	r5, ce84 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
    ce7e:	4824      	ldr	r0, [pc, #144]	; (cf10 <nrfx_gpiote_output_configure+0xe8>)
}
    ce80:	b005      	add	sp, #20
    ce82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
    ce84:	4620      	mov	r0, r4
    ce86:	f7ff fe75 	bl	cb74 <pin_is_output>
        if (pin_is_input(pin))
    ce8a:	2800      	cmp	r0, #0
    ce8c:	d03b      	beq.n	cf06 <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
    ce8e:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    ce92:	2300      	movs	r3, #0
    ce94:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    ce96:	4e1d      	ldr	r6, [pc, #116]	; (cf0c <nrfx_gpiote_output_configure+0xe4>)
    ce98:	f104 0708 	add.w	r7, r4, #8
    ce9c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    cea0:	0089      	lsls	r1, r1, #2
    cea2:	f020 0020 	bic.w	r0, r0, #32
    cea6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    ceaa:	04c0      	lsls	r0, r0, #19
    ceac:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
    ceb0:	0cc0      	lsrs	r0, r0, #19
    ceb2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    ceb6:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    ceba:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    cebe:	786a      	ldrb	r2, [r5, #1]
    cec0:	2a00      	cmp	r2, #0
    cec2:	d0dc      	beq.n	ce7e <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    cec4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    cec8:	78ad      	ldrb	r5, [r5, #2]
    ceca:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    cece:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    ced2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ced6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    ceda:	0223      	lsls	r3, r4, #8
    cedc:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    cee0:	0412      	lsls	r2, r2, #16
    cee2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    cee6:	ea43 030e 	orr.w	r3, r3, lr
    ceea:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    ceec:	052a      	lsls	r2, r5, #20
    ceee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    cef2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    cef6:	4313      	orrs	r3, r2
    cef8:	f040 0020 	orr.w	r0, r0, #32
    cefc:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    cf00:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    cf04:	e7bb      	b.n	ce7e <nrfx_gpiote_output_configure+0x56>
{
    cf06:	4803      	ldr	r0, [pc, #12]	; (cf14 <nrfx_gpiote_output_configure+0xec>)
    cf08:	e7ba      	b.n	ce80 <nrfx_gpiote_output_configure+0x58>
    cf0a:	bf00      	nop
    cf0c:	2000c5dc 	.word	0x2000c5dc
    cf10:	0bad0000 	.word	0x0bad0000
    cf14:	0bad0004 	.word	0x0bad0004

0000cf18 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    cf18:	4b01      	ldr	r3, [pc, #4]	; (cf20 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    cf1a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    cf1e:	4770      	bx	lr
    cf20:	2000c5dc 	.word	0x2000c5dc

0000cf24 <nrfx_gpiote_channel_get>:
{
    cf24:	4602      	mov	r2, r0
    cf26:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel);
    cf28:	b959      	cbnz	r1, cf42 <nrfx_gpiote_channel_get+0x1e>
    cf2a:	490c      	ldr	r1, [pc, #48]	; (cf5c <nrfx_gpiote_channel_get+0x38>)
    cf2c:	480c      	ldr	r0, [pc, #48]	; (cf60 <nrfx_gpiote_channel_get+0x3c>)
    cf2e:	f240 2335 	movw	r3, #565	; 0x235
    cf32:	4a0c      	ldr	r2, [pc, #48]	; (cf64 <nrfx_gpiote_channel_get+0x40>)
    cf34:	f005 fd4a 	bl	129cc <assert_print>
    cf38:	f240 2135 	movw	r1, #565	; 0x235
    cf3c:	4809      	ldr	r0, [pc, #36]	; (cf64 <nrfx_gpiote_channel_get+0x40>)
    cf3e:	f005 fd3e 	bl	129be <assert_post_action>
    if (pin_in_use_by_te(pin))
    cf42:	f7ff fe01 	bl	cb48 <pin_in_use_by_te>
    cf46:	b138      	cbz	r0, cf58 <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    cf48:	4b07      	ldr	r3, [pc, #28]	; (cf68 <nrfx_gpiote_channel_get+0x44>)
    cf4a:	3208      	adds	r2, #8
    cf4c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    cf50:	4806      	ldr	r0, [pc, #24]	; (cf6c <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    cf52:	0b5b      	lsrs	r3, r3, #13
    cf54:	700b      	strb	r3, [r1, #0]
}
    cf56:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    cf58:	4805      	ldr	r0, [pc, #20]	; (cf70 <nrfx_gpiote_channel_get+0x4c>)
    cf5a:	e7fc      	b.n	cf56 <nrfx_gpiote_channel_get+0x32>
    cf5c:	00016406 	.word	0x00016406
    cf60:	00015341 	.word	0x00015341
    cf64:	000163c8 	.word	0x000163c8
    cf68:	2000c5dc 	.word	0x2000c5dc
    cf6c:	0bad0000 	.word	0x0bad0000
    cf70:	0bad0004 	.word	0x0bad0004

0000cf74 <nrfx_gpiote_init>:
{
    cf74:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    cf76:	4c0f      	ldr	r4, [pc, #60]	; (cfb4 <nrfx_gpiote_init+0x40>)
    cf78:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    cf7c:	b9bd      	cbnz	r5, cfae <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    cf7e:	2240      	movs	r2, #64	; 0x40
    cf80:	4629      	mov	r1, r5
    cf82:	f104 0010 	add.w	r0, r4, #16
    cf86:	f007 fb00 	bl	1458a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    cf8a:	2031      	movs	r0, #49	; 0x31
    cf8c:	f7fc fdba 	bl	9b04 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    cf90:	4b09      	ldr	r3, [pc, #36]	; (cfb8 <nrfx_gpiote_init+0x44>)
    return err_code;
    cf92:	480a      	ldr	r0, [pc, #40]	; (cfbc <nrfx_gpiote_init+0x48>)
    cf94:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    cf98:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    cf9c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    cfa0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    cfa4:	2301      	movs	r3, #1
    cfa6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    cfaa:	6563      	str	r3, [r4, #84]	; 0x54
}
    cfac:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    cfae:	4804      	ldr	r0, [pc, #16]	; (cfc0 <nrfx_gpiote_init+0x4c>)
    cfb0:	e7fc      	b.n	cfac <nrfx_gpiote_init+0x38>
    cfb2:	bf00      	nop
    cfb4:	2000c5dc 	.word	0x2000c5dc
    cfb8:	40031000 	.word	0x40031000
    cfbc:	0bad0000 	.word	0x0bad0000
    cfc0:	0bad0005 	.word	0x0bad0005

0000cfc4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    cfc4:	4b03      	ldr	r3, [pc, #12]	; (cfd4 <nrfx_gpiote_is_init+0x10>)
    cfc6:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    cfca:	3800      	subs	r0, #0
    cfcc:	bf18      	it	ne
    cfce:	2001      	movne	r0, #1
    cfd0:	4770      	bx	lr
    cfd2:	bf00      	nop
    cfd4:	2000c5dc 	.word	0x2000c5dc

0000cfd8 <nrfx_gpiote_channel_free>:
{
    cfd8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    cfda:	4801      	ldr	r0, [pc, #4]	; (cfe0 <nrfx_gpiote_channel_free+0x8>)
    cfdc:	f7ff bc22 	b.w	c824 <nrfx_flag32_free>
    cfe0:	2000c62c 	.word	0x2000c62c

0000cfe4 <nrfx_gpiote_channel_alloc>:
{
    cfe4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    cfe6:	4801      	ldr	r0, [pc, #4]	; (cfec <nrfx_gpiote_channel_alloc+0x8>)
    cfe8:	f7ff bc00 	b.w	c7ec <nrfx_flag32_alloc>
    cfec:	2000c62c 	.word	0x2000c62c

0000cff0 <nrfx_gpiote_trigger_enable>:
{
    cff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    cff2:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
    cff4:	f7ff fdb2 	bl	cb5c <pin_has_trigger>
    cff8:	b958      	cbnz	r0, d012 <nrfx_gpiote_trigger_enable+0x22>
    cffa:	492b      	ldr	r1, [pc, #172]	; (d0a8 <nrfx_gpiote_trigger_enable+0xb8>)
    cffc:	f240 33df 	movw	r3, #991	; 0x3df
    d000:	4a2a      	ldr	r2, [pc, #168]	; (d0ac <nrfx_gpiote_trigger_enable+0xbc>)
    d002:	482b      	ldr	r0, [pc, #172]	; (d0b0 <nrfx_gpiote_trigger_enable+0xc0>)
    d004:	f005 fce2 	bl	129cc <assert_print>
    d008:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
    d00c:	4827      	ldr	r0, [pc, #156]	; (d0ac <nrfx_gpiote_trigger_enable+0xbc>)
    d00e:	f005 fcd6 	bl	129be <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d012:	4620      	mov	r0, r4
    d014:	f7ff fd98 	bl	cb48 <pin_in_use_by_te>
    d018:	4a26      	ldr	r2, [pc, #152]	; (d0b4 <nrfx_gpiote_trigger_enable+0xc4>)
    d01a:	f104 0508 	add.w	r5, r4, #8
    d01e:	b1e0      	cbz	r0, d05a <nrfx_gpiote_trigger_enable+0x6a>
    return !pin_is_output(pin);
    d020:	4620      	mov	r0, r4
    d022:	f7ff fda7 	bl	cb74 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d026:	b9c0      	cbnz	r0, d05a <nrfx_gpiote_trigger_enable+0x6a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d028:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    return ((uint32_t)p_reg + event);
    d02c:	4c22      	ldr	r4, [pc, #136]	; (d0b8 <nrfx_gpiote_trigger_enable+0xc8>)
    d02e:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    d030:	0093      	lsls	r3, r2, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d032:	50e0      	str	r0, [r4, r3]
    d034:	58e0      	ldr	r0, [r4, r3]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    d036:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d03a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    d03e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    d042:	f040 0001 	orr.w	r0, r0, #1
    d046:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
    d04a:	b121      	cbz	r1, d056 <nrfx_gpiote_trigger_enable+0x66>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    d04c:	2301      	movs	r3, #1
    d04e:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
    d050:	4a1a      	ldr	r2, [pc, #104]	; (d0bc <nrfx_gpiote_trigger_enable+0xcc>)
    d052:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    d056:	b003      	add	sp, #12
    d058:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
    d05a:	b949      	cbnz	r1, d070 <nrfx_gpiote_trigger_enable+0x80>
    d05c:	4918      	ldr	r1, [pc, #96]	; (d0c0 <nrfx_gpiote_trigger_enable+0xd0>)
    d05e:	f240 33ee 	movw	r3, #1006	; 0x3ee
    d062:	4a12      	ldr	r2, [pc, #72]	; (d0ac <nrfx_gpiote_trigger_enable+0xbc>)
    d064:	4812      	ldr	r0, [pc, #72]	; (d0b0 <nrfx_gpiote_trigger_enable+0xc0>)
    d066:	f005 fcb1 	bl	129cc <assert_print>
    d06a:	f240 31ee 	movw	r1, #1006	; 0x3ee
    d06e:	e7cd      	b.n	d00c <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d070:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
    d074:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    d078:	2b04      	cmp	r3, #4
    d07a:	d011      	beq.n	d0a0 <nrfx_gpiote_trigger_enable+0xb0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    d07c:	2b05      	cmp	r3, #5
    d07e:	d011      	beq.n	d0a4 <nrfx_gpiote_trigger_enable+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d080:	a801      	add	r0, sp, #4
    d082:	9401      	str	r4, [sp, #4]
    d084:	f7ff fdfa 	bl	cc7c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    d088:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    d08a:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    d08c:	40d9      	lsrs	r1, r3
    d08e:	f001 0101 	and.w	r1, r1, #1
    d092:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    d094:	4620      	mov	r0, r4
}
    d096:	b003      	add	sp, #12
    d098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    d09c:	f006 ba33 	b.w	13506 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    d0a0:	2103      	movs	r1, #3
    d0a2:	e7f7      	b.n	d094 <nrfx_gpiote_trigger_enable+0xa4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    d0a4:	2102      	movs	r1, #2
    d0a6:	e7f5      	b.n	d094 <nrfx_gpiote_trigger_enable+0xa4>
    d0a8:	00016410 	.word	0x00016410
    d0ac:	000163c8 	.word	0x000163c8
    d0b0:	00015341 	.word	0x00015341
    d0b4:	2000c5dc 	.word	0x2000c5dc
    d0b8:	40031100 	.word	0x40031100
    d0bc:	40031000 	.word	0x40031000
    d0c0:	00016425 	.word	0x00016425

0000d0c4 <nrfx_gpiote_trigger_disable>:
{
    d0c4:	b508      	push	{r3, lr}
    d0c6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d0c8:	f7ff fd3e 	bl	cb48 <pin_in_use_by_te>
    d0cc:	b1c8      	cbz	r0, d102 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
    d0ce:	4610      	mov	r0, r2
    d0d0:	f7ff fd50 	bl	cb74 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d0d4:	b9a8      	cbnz	r0, d102 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d0d6:	4b0e      	ldr	r3, [pc, #56]	; (d110 <nrfx_gpiote_trigger_disable+0x4c>)
    d0d8:	3208      	adds	r2, #8
    d0da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    d0de:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d0e0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    d0e2:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    d0e4:	490b      	ldr	r1, [pc, #44]	; (d114 <nrfx_gpiote_trigger_disable+0x50>)
    d0e6:	009b      	lsls	r3, r3, #2
    d0e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d0ec:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    d0f0:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    d0f4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    d0f8:	f022 0203 	bic.w	r2, r2, #3
    d0fc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    d100:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    d102:	2100      	movs	r1, #0
}
    d104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    d108:	4610      	mov	r0, r2
    d10a:	f006 b9fc 	b.w	13506 <nrf_gpio_cfg_sense_set>
    d10e:	bf00      	nop
    d110:	2000c5dc 	.word	0x2000c5dc
    d114:	40031000 	.word	0x40031000

0000d118 <nrfx_gpiote_pin_uninit>:
{
    d118:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    d11a:	4b0d      	ldr	r3, [pc, #52]	; (d150 <nrfx_gpiote_pin_uninit+0x38>)
    d11c:	f100 0208 	add.w	r2, r0, #8
    d120:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    d124:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    d126:	07db      	lsls	r3, r3, #31
    d128:	d510      	bpl.n	d14c <nrfx_gpiote_pin_uninit+0x34>
    nrfx_gpiote_trigger_disable(pin);
    d12a:	f7ff ffcb 	bl	d0c4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    d12e:	4620      	mov	r0, r4
    d130:	f7ff fd86 	bl	cc40 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d134:	a801      	add	r0, sp, #4
    d136:	9401      	str	r4, [sp, #4]
    d138:	f7ff fda0 	bl	cc7c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    d13c:	2202      	movs	r2, #2
    d13e:	9b01      	ldr	r3, [sp, #4]
    d140:	3380      	adds	r3, #128	; 0x80
    d142:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    d146:	4803      	ldr	r0, [pc, #12]	; (d154 <nrfx_gpiote_pin_uninit+0x3c>)
}
    d148:	b002      	add	sp, #8
    d14a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    d14c:	4802      	ldr	r0, [pc, #8]	; (d158 <nrfx_gpiote_pin_uninit+0x40>)
    d14e:	e7fb      	b.n	d148 <nrfx_gpiote_pin_uninit+0x30>
    d150:	2000c5dc 	.word	0x2000c5dc
    d154:	0bad0000 	.word	0x0bad0000
    d158:	0bad0004 	.word	0x0bad0004

0000d15c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    d15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    d160:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    d162:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d164:	462c      	mov	r4, r5
{
    d166:	4b56      	ldr	r3, [pc, #344]	; (d2c0 <nrfx_gpiote_irq_handler+0x164>)
    return p_reg->INTENSET & mask;
    d168:	4856      	ldr	r0, [pc, #344]	; (d2c4 <nrfx_gpiote_irq_handler+0x168>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    d16a:	4957      	ldr	r1, [pc, #348]	; (d2c8 <nrfx_gpiote_irq_handler+0x16c>)
{
    d16c:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d16e:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    d170:	b136      	cbz	r6, d180 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    d172:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    d176:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d178:	bf1e      	ittt	ne
    d17a:	601c      	strne	r4, [r3, #0]
    d17c:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    d17e:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    d180:	3304      	adds	r3, #4
    d182:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    d184:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    d188:	d1f1      	bne.n	d16e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d18a:	f8df 8138 	ldr.w	r8, [pc, #312]	; d2c4 <nrfx_gpiote_irq_handler+0x168>
    d18e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    d192:	b183      	cbz	r3, d1b6 <nrfx_gpiote_irq_handler+0x5a>
        *p_masks = gpio_regs[i]->LATCH;
    d194:	4f4d      	ldr	r7, [pc, #308]	; (d2cc <nrfx_gpiote_irq_handler+0x170>)
    d196:	6a3b      	ldr	r3, [r7, #32]
    d198:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
    d19a:	623b      	str	r3, [r7, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    d19c:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
    d1a0:	9c02      	ldr	r4, [sp, #8]
    d1a2:	b974      	cbnz	r4, d1c2 <nrfx_gpiote_irq_handler+0x66>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d1a4:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    d1a8:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    d1ac:	6a3b      	ldr	r3, [r7, #32]
    d1ae:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
    d1b0:	623b      	str	r3, [r7, #32]
        if (latch[port_idx])
    d1b2:	2b00      	cmp	r3, #0
    d1b4:	d1f2      	bne.n	d19c <nrfx_gpiote_irq_handler+0x40>
        mask &= ~NRFX_BIT(ch);
    d1b6:	2401      	movs	r4, #1
    while (mask)
    d1b8:	2d00      	cmp	r5, #0
    d1ba:	d168      	bne.n	d28e <nrfx_gpiote_irq_handler+0x132>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    d1bc:	b005      	add	sp, #20
    d1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    d1c2:	fa94 f4a4 	rbit	r4, r4
    d1c6:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d1ca:	4a41      	ldr	r2, [pc, #260]	; (d2d0 <nrfx_gpiote_irq_handler+0x174>)
    d1cc:	f104 0308 	add.w	r3, r4, #8
    d1d0:	f832 6013 	ldrh.w	r6, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    d1d4:	08e0      	lsrs	r0, r4, #3
    p_mask8[byte_idx] &= ~(1 << bit);
    d1d6:	ab02      	add	r3, sp, #8
    d1d8:	5c1b      	ldrb	r3, [r3, r0]
    bit = BITMASK_RELBIT_GET(bit);
    d1da:	f004 0107 	and.w	r1, r4, #7
    d1de:	08b2      	lsrs	r2, r6, #2
    p_mask8[byte_idx] &= ~(1 << bit);
    d1e0:	fa09 f101 	lsl.w	r1, r9, r1
    d1e4:	ea23 0301 	bic.w	r3, r3, r1
    d1e8:	9201      	str	r2, [sp, #4]
    d1ea:	aa02      	add	r2, sp, #8
    d1ec:	5413      	strb	r3, [r2, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d1ee:	a803      	add	r0, sp, #12
    d1f0:	9403      	str	r4, [sp, #12]
    d1f2:	f7ff fd43 	bl	cc7c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    d1f6:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
    d1f8:	9a01      	ldr	r2, [sp, #4]
    d1fa:	3380      	adds	r3, #128	; 0x80
    d1fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d200:	f3c6 0b82 	ubfx	fp, r6, #2, #3
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    d204:	f3c3 4a01 	ubfx	sl, r3, #16, #2
    if (is_level(trigger))
    d208:	0753      	lsls	r3, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d20a:	465e      	mov	r6, fp
    if (is_level(trigger))
    d20c:	d522      	bpl.n	d254 <nrfx_gpiote_irq_handler+0xf8>
        call_handler(pin, trigger);
    d20e:	4659      	mov	r1, fp
    d210:	4620      	mov	r0, r4
    d212:	f7ff fcb9 	bl	cb88 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d216:	a803      	add	r0, sp, #12
    d218:	9403      	str	r4, [sp, #12]
    d21a:	f7ff fd2f 	bl	cc7c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    d21e:	9b03      	ldr	r3, [sp, #12]
    d220:	fa5f fa8a 	uxtb.w	sl, sl
    d224:	3380      	adds	r3, #128	; 0x80
    d226:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    d22a:	f3c3 4301 	ubfx	r3, r3, #16, #2
    d22e:	459a      	cmp	sl, r3
    d230:	d107      	bne.n	d242 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    d232:	2100      	movs	r1, #0
    d234:	4620      	mov	r0, r4
    d236:	f006 f966 	bl	13506 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    d23a:	4651      	mov	r1, sl
    d23c:	4620      	mov	r0, r4
    d23e:	f006 f962 	bl	13506 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d242:	a803      	add	r0, sp, #12
    d244:	9403      	str	r4, [sp, #12]
    d246:	f7ff fd19 	bl	cc7c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    d24a:	9b03      	ldr	r3, [sp, #12]
    d24c:	fa09 f303 	lsl.w	r3, r9, r3
    d250:	6203      	str	r3, [r0, #32]
    d252:	e7a5      	b.n	d1a0 <nrfx_gpiote_irq_handler+0x44>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    d254:	f1ba 0f02 	cmp.w	sl, #2
    d258:	d10c      	bne.n	d274 <nrfx_gpiote_irq_handler+0x118>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    d25a:	2103      	movs	r1, #3
    d25c:	4620      	mov	r0, r4
    d25e:	f006 f952 	bl	13506 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    d262:	f00b 0305 	and.w	r3, fp, #5
    d266:	2b01      	cmp	r3, #1
    d268:	d1eb      	bne.n	d242 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    d26a:	4631      	mov	r1, r6
    d26c:	4620      	mov	r0, r4
    d26e:	f7ff fc8b 	bl	cb88 <call_handler>
    d272:	e7e6      	b.n	d242 <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    d274:	2102      	movs	r1, #2
    d276:	4620      	mov	r0, r4
    d278:	f006 f945 	bl	13506 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    d27c:	f1bb 0f03 	cmp.w	fp, #3
    d280:	d0f3      	beq.n	d26a <nrfx_gpiote_irq_handler+0x10e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    d282:	f1ba 0f03 	cmp.w	sl, #3
    d286:	d1dc      	bne.n	d242 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    d288:	f1bb 0f02 	cmp.w	fp, #2
    d28c:	e7ec      	b.n	d268 <nrfx_gpiote_irq_handler+0x10c>
        uint32_t ch = NRF_CTZ(mask);
    d28e:	fa95 f3a5 	rbit	r3, r5
    d292:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    d296:	fa04 f203 	lsl.w	r2, r4, r3
    d29a:	009b      	lsls	r3, r3, #2
    d29c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d2a0:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    d2a4:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    d2a8:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    d2ac:	f3c0 2004 	ubfx	r0, r0, #8, #5
    d2b0:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    d2b4:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    d2b8:	f7ff fc66 	bl	cb88 <call_handler>
    d2bc:	e77c      	b.n	d1b8 <nrfx_gpiote_irq_handler+0x5c>
    d2be:	bf00      	nop
    d2c0:	40031100 	.word	0x40031100
    d2c4:	40031000 	.word	0x40031000
    d2c8:	40031120 	.word	0x40031120
    d2cc:	40842500 	.word	0x40842500
    d2d0:	2000c5dc 	.word	0x2000c5dc

0000d2d4 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    d2d4:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    d2d6:	4c08      	ldr	r4, [pc, #32]	; (d2f8 <nrfx_ipc_init+0x24>)
{
    d2d8:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    d2da:	7923      	ldrb	r3, [r4, #4]
{
    d2dc:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    d2de:	b943      	cbnz	r3, d2f2 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
    d2e0:	202a      	movs	r0, #42	; 0x2a
    d2e2:	f7fc fc0f 	bl	9b04 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    d2e6:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
    d2e8:	4804      	ldr	r0, [pc, #16]	; (d2fc <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    d2ea:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
    d2ec:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
    d2ee:	60a5      	str	r5, [r4, #8]
}
    d2f0:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    d2f2:	4803      	ldr	r0, [pc, #12]	; (d300 <nrfx_ipc_init+0x2c>)
    d2f4:	e7fc      	b.n	d2f0 <nrfx_ipc_init+0x1c>
    d2f6:	bf00      	nop
    d2f8:	2000ce0c 	.word	0x2000ce0c
    d2fc:	0bad0000 	.word	0x0bad0000
    d300:	0bad000c 	.word	0x0bad000c

0000d304 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
    d304:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    d306:	b948      	cbnz	r0, d31c <nrfx_ipc_config_load+0x18>
    d308:	4918      	ldr	r1, [pc, #96]	; (d36c <nrfx_ipc_config_load+0x68>)
    d30a:	2345      	movs	r3, #69	; 0x45
    d30c:	4a18      	ldr	r2, [pc, #96]	; (d370 <nrfx_ipc_config_load+0x6c>)
    d30e:	4819      	ldr	r0, [pc, #100]	; (d374 <nrfx_ipc_config_load+0x70>)
    d310:	f005 fb5c 	bl	129cc <assert_print>
    d314:	2145      	movs	r1, #69	; 0x45
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    d316:	4816      	ldr	r0, [pc, #88]	; (d370 <nrfx_ipc_config_load+0x6c>)
    d318:	f005 fb51 	bl	129be <assert_post_action>
    d31c:	4b16      	ldr	r3, [pc, #88]	; (d378 <nrfx_ipc_config_load+0x74>)
    d31e:	791b      	ldrb	r3, [r3, #4]
    d320:	2b01      	cmp	r3, #1
    d322:	d007      	beq.n	d334 <nrfx_ipc_config_load+0x30>
    d324:	4915      	ldr	r1, [pc, #84]	; (d37c <nrfx_ipc_config_load+0x78>)
    d326:	2346      	movs	r3, #70	; 0x46
    d328:	4a11      	ldr	r2, [pc, #68]	; (d370 <nrfx_ipc_config_load+0x6c>)
    d32a:	4812      	ldr	r0, [pc, #72]	; (d374 <nrfx_ipc_config_load+0x70>)
    d32c:	f005 fb4e 	bl	129cc <assert_print>
    d330:	2146      	movs	r1, #70	; 0x46
    d332:	e7f0      	b.n	d316 <nrfx_ipc_config_load+0x12>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    d334:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
    d336:	4a12      	ldr	r2, [pc, #72]	; (d380 <nrfx_ipc_config_load+0x7c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
    d338:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    d33c:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
    d340:	3301      	adds	r3, #1
    d342:	2b08      	cmp	r3, #8
    d344:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
    d348:	d1f6      	bne.n	d338 <nrfx_ipc_config_load+0x34>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
    d34a:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
    d34c:	4a0c      	ldr	r2, [pc, #48]	; (d380 <nrfx_ipc_config_load+0x7c>)
    d34e:	f100 011c 	add.w	r1, r0, #28
    d352:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
    d356:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
    d35a:	3301      	adds	r3, #1
    d35c:	2b08      	cmp	r3, #8
    d35e:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    d362:	d1f6      	bne.n	d352 <nrfx_ipc_config_load+0x4e>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
    d364:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
    d366:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    d36a:	bd38      	pop	{r3, r4, r5, pc}
    d36c:	00016477 	.word	0x00016477
    d370:	0001643c 	.word	0x0001643c
    d374:	00015341 	.word	0x00015341
    d378:	2000ce0c 	.word	0x2000ce0c
    d37c:	00016480 	.word	0x00016480
    d380:	4002a000 	.word	0x4002a000

0000d384 <nrfx_ipc_uninit>:

void nrfx_ipc_uninit(void)
{
    d384:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    d386:	491b      	ldr	r1, [pc, #108]	; (d3f4 <nrfx_ipc_uninit+0x70>)
    d388:	790b      	ldrb	r3, [r1, #4]
    d38a:	2b01      	cmp	r3, #1
    d38c:	d009      	beq.n	d3a2 <nrfx_ipc_uninit+0x1e>
    d38e:	491a      	ldr	r1, [pc, #104]	; (d3f8 <nrfx_ipc_uninit+0x74>)
    d390:	481a      	ldr	r0, [pc, #104]	; (d3fc <nrfx_ipc_uninit+0x78>)
    d392:	2358      	movs	r3, #88	; 0x58
    d394:	4a1a      	ldr	r2, [pc, #104]	; (d400 <nrfx_ipc_uninit+0x7c>)
    d396:	f005 fb19 	bl	129cc <assert_print>
    d39a:	2158      	movs	r1, #88	; 0x58
    d39c:	4818      	ldr	r0, [pc, #96]	; (d400 <nrfx_ipc_uninit+0x7c>)
    d39e:	f005 fb0e 	bl	129be <assert_post_action>
    p_reg->SEND_CNF[index] = channels_mask;
    d3a2:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    d3a4:	f04f 30ff 	mov.w	r0, #4294967295
    p_reg->SEND_CNF[index] = channels_mask;
    d3a8:	4a16      	ldr	r2, [pc, #88]	; (d404 <nrfx_ipc_uninit+0x80>)
    d3aa:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    d3ae:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
    d3b2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    d3b6:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    d3ba:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    d3be:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    d3c2:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    d3c6:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
    d3ca:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
    d3ce:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
    d3d2:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
    d3d6:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
    d3da:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
    d3de:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
    d3e2:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
    d3e6:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
    d3ea:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
    d3ee:	710b      	strb	r3, [r1, #4]
}
    d3f0:	bd08      	pop	{r3, pc}
    d3f2:	bf00      	nop
    d3f4:	2000ce0c 	.word	0x2000ce0c
    d3f8:	00016480 	.word	0x00016480
    d3fc:	00015341 	.word	0x00015341
    d400:	0001643c 	.word	0x0001643c
    d404:	4002a000 	.word	0x4002a000

0000d408 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    d408:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    d40a:	4b09      	ldr	r3, [pc, #36]	; (d430 <nrfx_ipc_receive_event_enable+0x28>)
    d40c:	791b      	ldrb	r3, [r3, #4]
    d40e:	2b01      	cmp	r3, #1
    d410:	d009      	beq.n	d426 <nrfx_ipc_receive_event_enable+0x1e>
    d412:	4908      	ldr	r1, [pc, #32]	; (d434 <nrfx_ipc_receive_event_enable+0x2c>)
    d414:	4808      	ldr	r0, [pc, #32]	; (d438 <nrfx_ipc_receive_event_enable+0x30>)
    d416:	236b      	movs	r3, #107	; 0x6b
    d418:	4a08      	ldr	r2, [pc, #32]	; (d43c <nrfx_ipc_receive_event_enable+0x34>)
    d41a:	f005 fad7 	bl	129cc <assert_print>
    d41e:	216b      	movs	r1, #107	; 0x6b
    d420:	4806      	ldr	r0, [pc, #24]	; (d43c <nrfx_ipc_receive_event_enable+0x34>)
    d422:	f005 facc 	bl	129be <assert_post_action>
    p_reg->INTENSET = mask;
    d426:	4a06      	ldr	r2, [pc, #24]	; (d440 <nrfx_ipc_receive_event_enable+0x38>)
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
    d428:	4083      	lsls	r3, r0
    d42a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    d42e:	bd08      	pop	{r3, pc}
    d430:	2000ce0c 	.word	0x2000ce0c
    d434:	00016480 	.word	0x00016480
    d438:	00015341 	.word	0x00015341
    d43c:	0001643c 	.word	0x0001643c
    d440:	4002a000 	.word	0x4002a000

0000d444 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    d444:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    d446:	4b09      	ldr	r3, [pc, #36]	; (d46c <nrfx_ipc_receive_event_disable+0x28>)
    d448:	791b      	ldrb	r3, [r3, #4]
    d44a:	2b01      	cmp	r3, #1
    d44c:	d009      	beq.n	d462 <nrfx_ipc_receive_event_disable+0x1e>
    d44e:	4908      	ldr	r1, [pc, #32]	; (d470 <nrfx_ipc_receive_event_disable+0x2c>)
    d450:	4808      	ldr	r0, [pc, #32]	; (d474 <nrfx_ipc_receive_event_disable+0x30>)
    d452:	2371      	movs	r3, #113	; 0x71
    d454:	4a08      	ldr	r2, [pc, #32]	; (d478 <nrfx_ipc_receive_event_disable+0x34>)
    d456:	f005 fab9 	bl	129cc <assert_print>
    d45a:	2171      	movs	r1, #113	; 0x71
    d45c:	4806      	ldr	r0, [pc, #24]	; (d478 <nrfx_ipc_receive_event_disable+0x34>)
    d45e:	f005 faae 	bl	129be <assert_post_action>
    p_reg->INTENCLR = mask;
    d462:	4a06      	ldr	r2, [pc, #24]	; (d47c <nrfx_ipc_receive_event_disable+0x38>)
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
    d464:	4083      	lsls	r3, r0
    d466:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    d46a:	bd08      	pop	{r3, pc}
    d46c:	2000ce0c 	.word	0x2000ce0c
    d470:	00016480 	.word	0x00016480
    d474:	00015341 	.word	0x00015341
    d478:	0001643c 	.word	0x0001643c
    d47c:	4002a000 	.word	0x4002a000

0000d480 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    d480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
    d482:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d484:	2700      	movs	r7, #0
    return p_reg->INTPEND;
    d486:	4b12      	ldr	r3, [pc, #72]	; (d4d0 <nrfx_ipc_irq_handler+0x50>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
    d488:	4d12      	ldr	r5, [pc, #72]	; (d4d4 <nrfx_ipc_irq_handler+0x54>)
    d48a:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
    d48e:	b904      	cbnz	r4, d492 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
    d490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
    d492:	fa94 f0a4 	rbit	r0, r4
    d496:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
    d49a:	fa06 f300 	lsl.w	r3, r6, r0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    d49e:	2807      	cmp	r0, #7
    d4a0:	ea24 0403 	bic.w	r4, r4, r3
    d4a4:	dd0b      	ble.n	d4be <nrfx_ipc_irq_handler+0x3e>
    d4a6:	490c      	ldr	r1, [pc, #48]	; (d4d8 <nrfx_ipc_irq_handler+0x58>)
    d4a8:	480c      	ldr	r0, [pc, #48]	; (d4dc <nrfx_ipc_irq_handler+0x5c>)
    d4aa:	f240 13e7 	movw	r3, #487	; 0x1e7
    d4ae:	4a0c      	ldr	r2, [pc, #48]	; (d4e0 <nrfx_ipc_irq_handler+0x60>)
    d4b0:	f005 fa8c 	bl	129cc <assert_print>
    d4b4:	f240 11e7 	movw	r1, #487	; 0x1e7
    d4b8:	4809      	ldr	r0, [pc, #36]	; (d4e0 <nrfx_ipc_irq_handler+0x60>)
    d4ba:	f005 fa80 	bl	129be <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d4be:	4b09      	ldr	r3, [pc, #36]	; (d4e4 <nrfx_ipc_irq_handler+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    d4c0:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d4c2:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
    d4c4:	682b      	ldr	r3, [r5, #0]
    d4c6:	2b00      	cmp	r3, #0
    d4c8:	d0e1      	beq.n	d48e <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
    d4ca:	68a9      	ldr	r1, [r5, #8]
    d4cc:	4798      	blx	r3
    d4ce:	e7de      	b.n	d48e <nrfx_ipc_irq_handler+0xe>
    d4d0:	4002a000 	.word	0x4002a000
    d4d4:	2000ce0c 	.word	0x2000ce0c
    d4d8:	000164df 	.word	0x000164df
    d4dc:	00015341 	.word	0x00015341
    d4e0:	000164ad 	.word	0x000164ad
    d4e4:	4002a100 	.word	0x4002a100

0000d4e8 <rpc_handle_data_message>:
    d4e8:	b570      	push	{r4, r5, r6, lr}
    d4ea:	6803      	ldr	r3, [r0, #0]
    d4ec:	4604      	mov	r4, r0
    d4ee:	3b03      	subs	r3, #3
    d4f0:	b2db      	uxtb	r3, r3
    d4f2:	2b04      	cmp	r3, #4
    d4f4:	d803      	bhi.n	d4fe <rpc_handle_data_message+0x16>
    d4f6:	4a09      	ldr	r2, [pc, #36]	; (d51c <rpc_handle_data_message+0x34>)
    d4f8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    d4fc:	b92d      	cbnz	r5, d50a <rpc_handle_data_message+0x22>
    d4fe:	68a0      	ldr	r0, [r4, #8]
    d500:	b108      	cbz	r0, d506 <rpc_handle_data_message+0x1e>
    d502:	f000 f825 	bl	d550 <rpc_transport_msg_data_rx_free>
    d506:	2000      	movs	r0, #0
    d508:	bd70      	pop	{r4, r5, r6, pc}
    d50a:	f006 f862 	bl	135d2 <rpc_client_msg_from_rpc_msg_get>
    d50e:	6821      	ldr	r1, [r4, #0]
    d510:	462b      	mov	r3, r5
    d512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d516:	0c09      	lsrs	r1, r1, #16
    d518:	4718      	bx	r3
    d51a:	bf00      	nop
    d51c:	00014e70 	.word	0x00014e70

0000d520 <rpc_transport_init>:
    d520:	4b01      	ldr	r3, [pc, #4]	; (d528 <rpc_transport_init+0x8>)
    d522:	699b      	ldr	r3, [r3, #24]
    d524:	4718      	bx	r3
    d526:	bf00      	nop
    d528:	2000c638 	.word	0x2000c638

0000d52c <rpc_transport_msg_alloc>:
    d52c:	4b01      	ldr	r3, [pc, #4]	; (d534 <rpc_transport_msg_alloc+0x8>)
    d52e:	681b      	ldr	r3, [r3, #0]
    d530:	4718      	bx	r3
    d532:	bf00      	nop
    d534:	2000c638 	.word	0x2000c638

0000d538 <rpc_transport_msg_data_tx_size>:
    d538:	4b01      	ldr	r3, [pc, #4]	; (d540 <rpc_transport_msg_data_tx_size+0x8>)
    d53a:	685b      	ldr	r3, [r3, #4]
    d53c:	4718      	bx	r3
    d53e:	bf00      	nop
    d540:	2000c638 	.word	0x2000c638

0000d544 <rpc_transport_msg_rx_free>:
    d544:	4b01      	ldr	r3, [pc, #4]	; (d54c <rpc_transport_msg_rx_free+0x8>)
    d546:	68db      	ldr	r3, [r3, #12]
    d548:	4718      	bx	r3
    d54a:	bf00      	nop
    d54c:	2000c638 	.word	0x2000c638

0000d550 <rpc_transport_msg_data_rx_free>:
    d550:	4b01      	ldr	r3, [pc, #4]	; (d558 <rpc_transport_msg_data_rx_free+0x8>)
    d552:	695b      	ldr	r3, [r3, #20]
    d554:	4718      	bx	r3
    d556:	bf00      	nop
    d558:	2000c638 	.word	0x2000c638

0000d55c <rpc_transport_msg_send>:
    d55c:	4b01      	ldr	r3, [pc, #4]	; (d564 <rpc_transport_msg_send+0x8>)
    d55e:	689b      	ldr	r3, [r3, #8]
    d560:	4718      	bx	r3
    d562:	bf00      	nop
    d564:	2000c638 	.word	0x2000c638

0000d568 <rpc_transport_data_rx_suspend>:
    d568:	4b01      	ldr	r3, [pc, #4]	; (d570 <rpc_transport_data_rx_suspend+0x8>)
    d56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d56c:	4718      	bx	r3
    d56e:	bf00      	nop
    d570:	2000c638 	.word	0x2000c638

0000d574 <rpc_transport_data_rx_resume>:
    d574:	4b01      	ldr	r3, [pc, #4]	; (d57c <rpc_transport_data_rx_resume+0x8>)
    d576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d578:	4718      	bx	r3
    d57a:	bf00      	nop
    d57c:	2000c638 	.word	0x2000c638

0000d580 <rpc_transport_ipc_msg_data_tx_size>:
    d580:	4b01      	ldr	r3, [pc, #4]	; (d588 <rpc_transport_ipc_msg_data_tx_size+0x8>)
    d582:	681b      	ldr	r3, [r3, #0]
    d584:	68d8      	ldr	r0, [r3, #12]
    d586:	4770      	bx	lr
    d588:	2000ce18 	.word	0x2000ce18

0000d58c <rpc_transport_ipc_msg_rx_free>:
    d58c:	2300      	movs	r3, #0
    d58e:	b530      	push	{r4, r5, lr}
    d590:	4910      	ldr	r1, [pc, #64]	; (d5d4 <rpc_transport_ipc_msg_rx_free+0x48>)
    d592:	680a      	ldr	r2, [r1, #0]
    d594:	6814      	ldr	r4, [r2, #0]
    d596:	42a3      	cmp	r3, r4
    d598:	d10b      	bne.n	d5b2 <rpc_transport_ipc_msg_rx_free+0x26>
    d59a:	2300      	movs	r3, #0
    d59c:	684a      	ldr	r2, [r1, #4]
    d59e:	6811      	ldr	r1, [r2, #0]
    d5a0:	428b      	cmp	r3, r1
    d5a2:	d015      	beq.n	d5d0 <rpc_transport_ipc_msg_rx_free+0x44>
    d5a4:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
    d5a8:	68a4      	ldr	r4, [r4, #8]
    d5aa:	42a0      	cmp	r0, r4
    d5ac:	d008      	beq.n	d5c0 <rpc_transport_ipc_msg_rx_free+0x34>
    d5ae:	3301      	adds	r3, #1
    d5b0:	e7f6      	b.n	d5a0 <rpc_transport_ipc_msg_rx_free+0x14>
    d5b2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
    d5b6:	68ad      	ldr	r5, [r5, #8]
    d5b8:	42a8      	cmp	r0, r5
    d5ba:	d001      	beq.n	d5c0 <rpc_transport_ipc_msg_rx_free+0x34>
    d5bc:	3301      	adds	r3, #1
    d5be:	e7ea      	b.n	d596 <rpc_transport_ipc_msg_rx_free+0xa>
    d5c0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    d5c4:	6853      	ldr	r3, [r2, #4]
    d5c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    d5ca:	f043 0303 	orr.w	r3, r3, #3
    d5ce:	6053      	str	r3, [r2, #4]
    d5d0:	bd30      	pop	{r4, r5, pc}
    d5d2:	bf00      	nop
    d5d4:	2000ce38 	.word	0x2000ce38

0000d5d8 <rpc_transport_ipc_msg_tx_free>:
    d5d8:	2200      	movs	r2, #0
    d5da:	b530      	push	{r4, r5, lr}
    d5dc:	4b0b      	ldr	r3, [pc, #44]	; (d60c <rpc_transport_ipc_msg_tx_free+0x34>)
    d5de:	6819      	ldr	r1, [r3, #0]
    d5e0:	680c      	ldr	r4, [r1, #0]
    d5e2:	4294      	cmp	r4, r2
    d5e4:	d00f      	beq.n	d606 <rpc_transport_ipc_msg_tx_free+0x2e>
    d5e6:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    d5ea:	689d      	ldr	r5, [r3, #8]
    d5ec:	42a8      	cmp	r0, r5
    d5ee:	d10b      	bne.n	d608 <rpc_transport_ipc_msg_tx_free+0x30>
    d5f0:	f04f 0203 	mov.w	r2, #3
    d5f4:	3304      	adds	r3, #4
    d5f6:	e8d3 1fcf 	ldaexb	r1, [r3]
    d5fa:	2900      	cmp	r1, #0
    d5fc:	d103      	bne.n	d606 <rpc_transport_ipc_msg_tx_free+0x2e>
    d5fe:	e8c3 2fc0 	stlexb	r0, r2, [r3]
    d602:	2800      	cmp	r0, #0
    d604:	d1f7      	bne.n	d5f6 <rpc_transport_ipc_msg_tx_free+0x1e>
    d606:	bd30      	pop	{r4, r5, pc}
    d608:	3201      	adds	r2, #1
    d60a:	e7ea      	b.n	d5e2 <rpc_transport_ipc_msg_tx_free+0xa>
    d60c:	2000ce30 	.word	0x2000ce30

0000d610 <handle_modem_rpc_msg>:
    d610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d614:	2500      	movs	r5, #0
    d616:	4606      	mov	r6, r0
    d618:	460f      	mov	r7, r1
    d61a:	4628      	mov	r0, r5
    d61c:	f8df 8064 	ldr.w	r8, [pc, #100]	; d684 <handle_modem_rpc_msg+0x74>
    d620:	6833      	ldr	r3, [r6, #0]
    d622:	42ab      	cmp	r3, r5
    d624:	d801      	bhi.n	d62a <handle_modem_rpc_msg+0x1a>
    d626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d62a:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
    d62e:	6863      	ldr	r3, [r4, #4]
    d630:	b2db      	uxtb	r3, r3
    d632:	2b01      	cmp	r3, #1
    d634:	d117      	bne.n	d666 <handle_modem_rpc_msg+0x56>
    d636:	6862      	ldr	r2, [r4, #4]
    d638:	f8b8 3000 	ldrh.w	r3, [r8]
    d63c:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
    d640:	d111      	bne.n	d666 <handle_modem_rpc_msg+0x56>
    d642:	2f02      	cmp	r7, #2
    d644:	68a0      	ldr	r0, [r4, #8]
    d646:	d110      	bne.n	d66a <handle_modem_rpc_msg+0x5a>
    d648:	f7ff ff4e 	bl	d4e8 <rpc_handle_data_message>
    d64c:	b990      	cbnz	r0, d674 <handle_modem_rpc_msg+0x64>
    d64e:	6863      	ldr	r3, [r4, #4]
    d650:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    d654:	f043 0303 	orr.w	r3, r3, #3
    d658:	6063      	str	r3, [r4, #4]
    d65a:	2001      	movs	r0, #1
    d65c:	f8b8 3000 	ldrh.w	r3, [r8]
    d660:	3301      	adds	r3, #1
    d662:	f8a8 3000 	strh.w	r3, [r8]
    d666:	3501      	adds	r5, #1
    d668:	e7da      	b.n	d620 <handle_modem_rpc_msg+0x10>
    d66a:	6801      	ldr	r1, [r0, #0]
    d66c:	0c09      	lsrs	r1, r1, #16
    d66e:	f005 ff59 	bl	13524 <rpc_handle_ctrl_message>
    d672:	e7eb      	b.n	d64c <handle_modem_rpc_msg+0x3c>
    d674:	2801      	cmp	r0, #1
    d676:	d1f0      	bne.n	d65a <handle_modem_rpc_msg+0x4a>
    d678:	6863      	ldr	r3, [r4, #4]
    d67a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    d67e:	f043 0302 	orr.w	r3, r3, #2
    d682:	e7e9      	b.n	d658 <handle_modem_rpc_msg+0x48>
    d684:	2000d234 	.word	0x2000d234

0000d688 <rpc_message_handler>:
    d688:	b538      	push	{r3, r4, r5, lr}
    d68a:	4d07      	ldr	r5, [pc, #28]	; (d6a8 <rpc_message_handler+0x20>)
    d68c:	2101      	movs	r1, #1
    d68e:	6828      	ldr	r0, [r5, #0]
    d690:	f7ff ffbe 	bl	d610 <handle_modem_rpc_msg>
    d694:	2102      	movs	r1, #2
    d696:	4604      	mov	r4, r0
    d698:	6868      	ldr	r0, [r5, #4]
    d69a:	f7ff ffb9 	bl	d610 <handle_modem_rpc_msg>
    d69e:	2800      	cmp	r0, #0
    d6a0:	d1f4      	bne.n	d68c <rpc_message_handler+0x4>
    d6a2:	2c00      	cmp	r4, #0
    d6a4:	d1f2      	bne.n	d68c <rpc_message_handler+0x4>
    d6a6:	bd38      	pop	{r3, r4, r5, pc}
    d6a8:	2000ce38 	.word	0x2000ce38

0000d6ac <ipc_irq_handler>:
    d6ac:	b570      	push	{r4, r5, r6, lr}
    d6ae:	2807      	cmp	r0, #7
    d6b0:	d868      	bhi.n	d784 <ipc_irq_handler+0xd8>
    d6b2:	e8df f000 	tbb	[pc, r0]
    d6b6:	670b      	.short	0x670b
    d6b8:	674b674f 	.word	0x674b674f
    d6bc:	0440      	.short	0x0440
    d6be:	f001 fd1d 	bl	f0fc <ipc_trace_handler>
    d6c2:	2003      	movs	r0, #3
    d6c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d6c8:	f7fe ba6c 	b.w	bba4 <nrf_modem_os_event_notify>
    d6cc:	2003      	movs	r0, #3
    d6ce:	4b2e      	ldr	r3, [pc, #184]	; (d788 <ipc_irq_handler+0xdc>)
    d6d0:	f8d3 4614 	ldr.w	r4, [r3, #1556]	; 0x614
    d6d4:	f8d3 6618 	ldr.w	r6, [r3, #1560]	; 0x618
    d6d8:	4b2c      	ldr	r3, [pc, #176]	; (d78c <ipc_irq_handler+0xe0>)
    d6da:	781d      	ldrb	r5, [r3, #0]
    d6dc:	7018      	strb	r0, [r3, #0]
    d6de:	f001 fce3 	bl	f0a8 <nrf_modem_state_set>
    d6e2:	4b2b      	ldr	r3, [pc, #172]	; (d790 <ipc_irq_handler+0xe4>)
    d6e4:	b2ed      	uxtb	r5, r5
    d6e6:	6818      	ldr	r0, [r3, #0]
    d6e8:	f7fe f9f8 	bl	badc <nrf_modem_os_sem_give>
    d6ec:	2d01      	cmp	r5, #1
    d6ee:	d11c      	bne.n	d72a <ipc_irq_handler+0x7e>
    d6f0:	4b28      	ldr	r3, [pc, #160]	; (d794 <ipc_irq_handler+0xe8>)
    d6f2:	429c      	cmp	r4, r3
    d6f4:	d010      	beq.n	d718 <ipc_irq_handler+0x6c>
    d6f6:	d809      	bhi.n	d70c <ipc_irq_handler+0x60>
    d6f8:	3b02      	subs	r3, #2
    d6fa:	429c      	cmp	r4, r3
    d6fc:	d00f      	beq.n	d71e <ipc_irq_handler+0x72>
    d6fe:	3301      	adds	r3, #1
    d700:	429c      	cmp	r4, r3
    d702:	d00f      	beq.n	d724 <ipc_irq_handler+0x78>
    d704:	4b24      	ldr	r3, [pc, #144]	; (d798 <ipc_irq_handler+0xec>)
    d706:	601c      	str	r4, [r3, #0]
    d708:	2000      	movs	r0, #0
    d70a:	e7db      	b.n	d6c4 <ipc_irq_handler+0x18>
    d70c:	4b23      	ldr	r3, [pc, #140]	; (d79c <ipc_irq_handler+0xf0>)
    d70e:	429c      	cmp	r4, r3
    d710:	d1f8      	bne.n	d704 <ipc_irq_handler+0x58>
    d712:	f06f 040c 	mvn.w	r4, #12
    d716:	e7f5      	b.n	d704 <ipc_irq_handler+0x58>
    d718:	f06f 040b 	mvn.w	r4, #11
    d71c:	e7f2      	b.n	d704 <ipc_irq_handler+0x58>
    d71e:	f06f 0415 	mvn.w	r4, #21
    d722:	e7ef      	b.n	d704 <ipc_irq_handler+0x58>
    d724:	f06f 0485 	mvn.w	r4, #133	; 0x85
    d728:	e7ec      	b.n	d704 <ipc_irq_handler+0x58>
    d72a:	4631      	mov	r1, r6
    d72c:	f3c4 000b 	ubfx	r0, r4, #0, #12
    d730:	f001 fcae 	bl	f090 <nrf_modem_fault_handler_internal>
    d734:	e7e8      	b.n	d708 <ipc_irq_handler+0x5c>
    d736:	2202      	movs	r2, #2
    d738:	4b14      	ldr	r3, [pc, #80]	; (d78c <ipc_irq_handler+0xe0>)
    d73a:	2000      	movs	r0, #0
    d73c:	701a      	strb	r2, [r3, #0]
    d73e:	f001 fcb3 	bl	f0a8 <nrf_modem_state_set>
    d742:	4b13      	ldr	r3, [pc, #76]	; (d790 <ipc_irq_handler+0xe4>)
    d744:	6818      	ldr	r0, [r3, #0]
    d746:	f7fe f9c9 	bl	badc <nrf_modem_os_sem_give>
    d74a:	e7dd      	b.n	d708 <ipc_irq_handler+0x5c>
    d74c:	f7ff ff9c 	bl	d688 <rpc_message_handler>
    d750:	2002      	movs	r0, #2
    d752:	e7b7      	b.n	d6c4 <ipc_irq_handler+0x18>
    d754:	4b0d      	ldr	r3, [pc, #52]	; (d78c <ipc_irq_handler+0xe0>)
    d756:	781a      	ldrb	r2, [r3, #0]
    d758:	2a01      	cmp	r2, #1
    d75a:	b2d0      	uxtb	r0, r2
    d75c:	d10e      	bne.n	d77c <ipc_irq_handler+0xd0>
    d75e:	4a10      	ldr	r2, [pc, #64]	; (d7a0 <ipc_irq_handler+0xf4>)
    d760:	6811      	ldr	r1, [r2, #0]
    d762:	4a10      	ldr	r2, [pc, #64]	; (d7a4 <ipc_irq_handler+0xf8>)
    d764:	688c      	ldr	r4, [r1, #8]
    d766:	6054      	str	r4, [r2, #4]
    d768:	6849      	ldr	r1, [r1, #4]
    d76a:	6011      	str	r1, [r2, #0]
    d76c:	2200      	movs	r2, #0
    d76e:	701a      	strb	r2, [r3, #0]
    d770:	f001 fc9a 	bl	f0a8 <nrf_modem_state_set>
    d774:	4b06      	ldr	r3, [pc, #24]	; (d790 <ipc_irq_handler+0xe4>)
    d776:	6818      	ldr	r0, [r3, #0]
    d778:	f7fe f9b0 	bl	badc <nrf_modem_os_sem_give>
    d77c:	f7ff ff84 	bl	d688 <rpc_message_handler>
    d780:	2001      	movs	r0, #1
    d782:	e79f      	b.n	d6c4 <ipc_irq_handler+0x18>
    d784:	bd70      	pop	{r4, r5, r6, pc}
    d786:	bf00      	nop
    d788:	4002a000 	.word	0x4002a000
    d78c:	2000e6e4 	.word	0x2000e6e4
    d790:	2000ce20 	.word	0x2000ce20
    d794:	00010022 	.word	0x00010022
    d798:	2000ce34 	.word	0x2000ce34
    d79c:	00013032 	.word	0x00013032
    d7a0:	2000ce1c 	.word	0x2000ce1c
    d7a4:	2000ce38 	.word	0x2000ce38

0000d7a8 <rpc_transport_ipc_data_msg_send>:
    d7a8:	b570      	push	{r4, r5, r6, lr}
    d7aa:	4b16      	ldr	r3, [pc, #88]	; (d804 <rpc_transport_ipc_data_msg_send+0x5c>)
    d7ac:	6842      	ldr	r2, [r0, #4]
    d7ae:	681b      	ldr	r3, [r3, #0]
    d7b0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    d7b4:	f042 0202 	orr.w	r2, r2, #2
    d7b8:	1ac3      	subs	r3, r0, r3
    d7ba:	6042      	str	r2, [r0, #4]
    d7bc:	4812      	ldr	r0, [pc, #72]	; (d808 <rpc_transport_ipc_data_msg_send+0x60>)
    d7be:	4a13      	ldr	r2, [pc, #76]	; (d80c <rpc_transport_ipc_data_msg_send+0x64>)
    d7c0:	6801      	ldr	r1, [r0, #0]
    d7c2:	f3c3 1389 	ubfx	r3, r3, #6, #10
    d7c6:	e8d2 4fdf 	ldaexh	r4, [r2]
    d7ca:	1c65      	adds	r5, r4, #1
    d7cc:	e8c2 5fd6 	stlexh	r6, r5, [r2]
    d7d0:	2e00      	cmp	r6, #0
    d7d2:	d1f8      	bne.n	d7c6 <rpc_transport_ipc_data_msg_send+0x1e>
    d7d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    d7d8:	684a      	ldr	r2, [r1, #4]
    d7da:	b292      	uxth	r2, r2
    d7dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    d7e0:	604a      	str	r2, [r1, #4]
    d7e2:	6802      	ldr	r2, [r0, #0]
    d7e4:	2003      	movs	r0, #3
    d7e6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    d7ea:	6853      	ldr	r3, [r2, #4]
    d7ec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    d7f0:	f043 0301 	orr.w	r3, r3, #1
    d7f4:	6053      	str	r3, [r2, #4]
    d7f6:	f005 fc4c 	bl	13092 <nrf_modem_os_busywait>
    d7fa:	2201      	movs	r2, #1
    d7fc:	4b04      	ldr	r3, [pc, #16]	; (d810 <rpc_transport_ipc_data_msg_send+0x68>)
    d7fe:	60da      	str	r2, [r3, #12]
    d800:	bd70      	pop	{r4, r5, r6, pc}
    d802:	bf00      	nop
    d804:	2000ce28 	.word	0x2000ce28
    d808:	2000ce30 	.word	0x2000ce30
    d80c:	2000d236 	.word	0x2000d236
    d810:	4002a000 	.word	0x4002a000

0000d814 <rpc_transport_ipc_ctrl_msg_alloc>:
    d814:	230a      	movs	r3, #10
    d816:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d818:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    d81c:	4e0c      	ldr	r6, [pc, #48]	; (d850 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
    d81e:	4f0d      	ldr	r7, [pc, #52]	; (d854 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
    d820:	9301      	str	r3, [sp, #4]
    d822:	6831      	ldr	r1, [r6, #0]
    d824:	6838      	ldr	r0, [r7, #0]
    d826:	f005 feaf 	bl	13588 <rpc_transport_ipc_msg_alloc>
    d82a:	4604      	mov	r4, r0
    d82c:	b940      	cbnz	r0, d840 <rpc_transport_ipc_ctrl_msg_alloc+0x2c>
    d82e:	f005 fc32 	bl	13096 <nrf_modem_os_is_in_isr>
    d832:	b940      	cbnz	r0, d846 <rpc_transport_ipc_ctrl_msg_alloc+0x32>
    d834:	2001      	movs	r0, #1
    d836:	a901      	add	r1, sp, #4
    d838:	f7fe f83c 	bl	b8b4 <nrf_modem_os_timedwait>
    d83c:	306e      	adds	r0, #110	; 0x6e
    d83e:	d1f0      	bne.n	d822 <rpc_transport_ipc_ctrl_msg_alloc+0xe>
    d840:	4620      	mov	r0, r4
    d842:	b003      	add	sp, #12
    d844:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d846:	9801      	ldr	r0, [sp, #4]
    d848:	4368      	muls	r0, r5
    d84a:	f005 fc22 	bl	13092 <nrf_modem_os_busywait>
    d84e:	e7e8      	b.n	d822 <rpc_transport_ipc_ctrl_msg_alloc+0xe>
    d850:	2000ce24 	.word	0x2000ce24
    d854:	2000ce2c 	.word	0x2000ce2c

0000d858 <rpc_transport_ipc_data_msg_alloc>:
    d858:	4b05      	ldr	r3, [pc, #20]	; (d870 <rpc_transport_ipc_data_msg_alloc+0x18>)
    d85a:	781b      	ldrb	r3, [r3, #0]
    d85c:	b92b      	cbnz	r3, d86a <rpc_transport_ipc_data_msg_alloc+0x12>
    d85e:	4b05      	ldr	r3, [pc, #20]	; (d874 <rpc_transport_ipc_data_msg_alloc+0x1c>)
    d860:	6819      	ldr	r1, [r3, #0]
    d862:	4b05      	ldr	r3, [pc, #20]	; (d878 <rpc_transport_ipc_data_msg_alloc+0x20>)
    d864:	6818      	ldr	r0, [r3, #0]
    d866:	f005 be8f 	b.w	13588 <rpc_transport_ipc_msg_alloc>
    d86a:	2000      	movs	r0, #0
    d86c:	4770      	bx	lr
    d86e:	bf00      	nop
    d870:	2000e6e3 	.word	0x2000e6e3
    d874:	2000ce28 	.word	0x2000ce28
    d878:	2000ce30 	.word	0x2000ce30

0000d87c <rpc_transport_ipc_init>:
    d87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d880:	b095      	sub	sp, #84	; 0x54
    d882:	2238      	movs	r2, #56	; 0x38
    d884:	2100      	movs	r1, #0
    d886:	4606      	mov	r6, r0
    d888:	a803      	add	r0, sp, #12
    d88a:	f006 fe7e 	bl	1458a <memset>
    d88e:	2302      	movs	r3, #2
    d890:	9304      	str	r3, [sp, #16]
    d892:	2308      	movs	r3, #8
    d894:	9306      	str	r3, [sp, #24]
    d896:	2320      	movs	r3, #32
    d898:	9308      	str	r3, [sp, #32]
    d89a:	2304      	movs	r3, #4
    d89c:	930d      	str	r3, [sp, #52]	; 0x34
    d89e:	2310      	movs	r3, #16
    d8a0:	2540      	movs	r5, #64	; 0x40
    d8a2:	930f      	str	r3, [sp, #60]	; 0x3c
    d8a4:	2380      	movs	r3, #128	; 0x80
    d8a6:	2201      	movs	r2, #1
    d8a8:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
    d8ac:	23d5      	movs	r3, #213	; 0xd5
    d8ae:	2100      	movs	r1, #0
    d8b0:	4855      	ldr	r0, [pc, #340]	; (da08 <rpc_transport_ipc_init+0x18c>)
    d8b2:	920b      	str	r2, [sp, #44]	; 0x2c
    d8b4:	9313      	str	r3, [sp, #76]	; 0x4c
    d8b6:	f7fe f8dd 	bl	ba74 <nrf_modem_os_sem_init>
    d8ba:	4605      	mov	r5, r0
    d8bc:	2800      	cmp	r0, #0
    d8be:	f040 809f 	bne.w	da00 <rpc_transport_ipc_init+0x184>
    d8c2:	4602      	mov	r2, r0
    d8c4:	4951      	ldr	r1, [pc, #324]	; (da0c <rpc_transport_ipc_init+0x190>)
    d8c6:	7930      	ldrb	r0, [r6, #4]
    d8c8:	f7ff fd04 	bl	d2d4 <nrfx_ipc_init>
    d8cc:	a803      	add	r0, sp, #12
    d8ce:	f7ff fd19 	bl	d304 <nrfx_ipc_config_load>
    d8d2:	6834      	ldr	r4, [r6, #0]
    d8d4:	6862      	ldr	r2, [r4, #4]
    d8d6:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
    d8da:	f040 8089 	bne.w	d9f0 <rpc_transport_ipc_init+0x174>
    d8de:	6961      	ldr	r1, [r4, #20]
    d8e0:	68e3      	ldr	r3, [r4, #12]
    d8e2:	440b      	add	r3, r1
    d8e4:	69e1      	ldr	r1, [r4, #28]
    d8e6:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
    d8ea:	440b      	add	r3, r1
    d8ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    d8f0:	d87e      	bhi.n	d9f0 <rpc_transport_ipc_init+0x174>
    d8f2:	6820      	ldr	r0, [r4, #0]
    d8f4:	4629      	mov	r1, r5
    d8f6:	f006 fe48 	bl	1458a <memset>
    d8fa:	6833      	ldr	r3, [r6, #0]
    d8fc:	681c      	ldr	r4, [r3, #0]
    d8fe:	f8d3 901c 	ldr.w	r9, [r3, #28]
    d902:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
    d906:	9201      	str	r2, [sp, #4]
    d908:	f104 0760 	add.w	r7, r4, #96	; 0x60
    d90c:	4a40      	ldr	r2, [pc, #256]	; (da10 <rpc_transport_ipc_init+0x194>)
    d90e:	f104 08a4 	add.w	r8, r4, #164	; 0xa4
    d912:	f104 0b20 	add.w	fp, r4, #32
    d916:	f1b9 0f00 	cmp.w	r9, #0
    d91a:	d15c      	bne.n	d9d6 <rpc_transport_ipc_init+0x15a>
    d91c:	f8c2 b000 	str.w	fp, [r2]
    d920:	2500      	movs	r5, #0
    d922:	f04f 0a01 	mov.w	sl, #1
    d926:	7025      	strb	r5, [r4, #0]
    d928:	7065      	strb	r5, [r4, #1]
    d92a:	f884 a002 	strb.w	sl, [r4, #2]
    d92e:	70e5      	strb	r5, [r4, #3]
    d930:	6833      	ldr	r3, [r6, #0]
    d932:	4640      	mov	r0, r8
    d934:	691b      	ldr	r3, [r3, #16]
    d936:	6063      	str	r3, [r4, #4]
    d938:	6833      	ldr	r3, [r6, #0]
    d93a:	695b      	ldr	r3, [r3, #20]
    d93c:	f8c4 b014 	str.w	fp, [r4, #20]
    d940:	60a3      	str	r3, [r4, #8]
    d942:	4b34      	ldr	r3, [pc, #208]	; (da14 <rpc_transport_ipc_init+0x198>)
    d944:	f8c4 9018 	str.w	r9, [r4, #24]
    d948:	f8c3 8000 	str.w	r8, [r3]
    d94c:	4b32      	ldr	r3, [pc, #200]	; (da18 <rpc_transport_ipc_init+0x19c>)
    d94e:	60e7      	str	r7, [r4, #12]
    d950:	601f      	str	r7, [r3, #0]
    d952:	2308      	movs	r3, #8
    d954:	f8c4 8010 	str.w	r8, [r4, #16]
    d958:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
    d95c:	f888 5001 	strb.w	r5, [r8, #1]
    d960:	f888 5002 	strb.w	r5, [r8, #2]
    d964:	f888 5003 	strb.w	r5, [r8, #3]
    d968:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    d96c:	707d      	strb	r5, [r7, #1]
    d96e:	70bd      	strb	r5, [r7, #2]
    d970:	70fd      	strb	r5, [r7, #3]
    d972:	f005 fdf1 	bl	13558 <rpc_list_preambles_init>
    d976:	4638      	mov	r0, r7
    d978:	f005 fdee 	bl	13558 <rpc_list_preambles_init>
    d97c:	4b27      	ldr	r3, [pc, #156]	; (da1c <rpc_transport_ipc_init+0x1a0>)
    d97e:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
    d982:	601a      	str	r2, [r3, #0]
    d984:	4b26      	ldr	r3, [pc, #152]	; (da20 <rpc_transport_ipc_init+0x1a4>)
    d986:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
    d98a:	601a      	str	r2, [r3, #0]
    d98c:	6831      	ldr	r1, [r6, #0]
    d98e:	4b25      	ldr	r3, [pc, #148]	; (da24 <rpc_transport_ipc_init+0x1a8>)
    d990:	6019      	str	r1, [r3, #0]
    d992:	4b25      	ldr	r3, [pc, #148]	; (da28 <rpc_transport_ipc_init+0x1ac>)
    d994:	4925      	ldr	r1, [pc, #148]	; (da2c <rpc_transport_ipc_init+0x1b0>)
    d996:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
    d99a:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
    d99e:	4b24      	ldr	r3, [pc, #144]	; (da30 <rpc_transport_ipc_init+0x1b4>)
    d9a0:	4c24      	ldr	r4, [pc, #144]	; (da34 <rpc_transport_ipc_init+0x1b8>)
    d9a2:	801d      	strh	r5, [r3, #0]
    d9a4:	4b24      	ldr	r3, [pc, #144]	; (da38 <rpc_transport_ipc_init+0x1bc>)
    d9a6:	6025      	str	r5, [r4, #0]
    d9a8:	801d      	strh	r5, [r3, #0]
    d9aa:	4b24      	ldr	r3, [pc, #144]	; (da3c <rpc_transport_ipc_init+0x1c0>)
    d9ac:	f883 a000 	strb.w	sl, [r3]
    d9b0:	4b23      	ldr	r3, [pc, #140]	; (da40 <rpc_transport_ipc_init+0x1c4>)
    d9b2:	9502      	str	r5, [sp, #8]
    d9b4:	611d      	str	r5, [r3, #16]
    d9b6:	691b      	ldr	r3, [r3, #16]
    d9b8:	9302      	str	r3, [sp, #8]
    d9ba:	9b02      	ldr	r3, [sp, #8]
    d9bc:	4b12      	ldr	r3, [pc, #72]	; (da08 <rpc_transport_ipc_init+0x18c>)
    d9be:	6818      	ldr	r0, [r3, #0]
    d9c0:	f7fe f8b0 	bl	bb24 <nrf_modem_os_sem_take>
    d9c4:	b9c8      	cbnz	r0, d9fa <rpc_transport_ipc_init+0x17e>
    d9c6:	6824      	ldr	r4, [r4, #0]
    d9c8:	b9a4      	cbnz	r4, d9f4 <rpc_transport_ipc_init+0x178>
    d9ca:	4b1e      	ldr	r3, [pc, #120]	; (da44 <rpc_transport_ipc_init+0x1c8>)
    d9cc:	701c      	strb	r4, [r3, #0]
    d9ce:	4620      	mov	r0, r4
    d9d0:	b015      	add	sp, #84	; 0x54
    d9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9d6:	699b      	ldr	r3, [r3, #24]
    d9d8:	f104 0940 	add.w	r9, r4, #64	; 0x40
    d9dc:	6463      	str	r3, [r4, #68]	; 0x44
    d9de:	6833      	ldr	r3, [r6, #0]
    d9e0:	4648      	mov	r0, r9
    d9e2:	69db      	ldr	r3, [r3, #28]
    d9e4:	f8c2 b000 	str.w	fp, [r2]
    d9e8:	6423      	str	r3, [r4, #64]	; 0x40
    d9ea:	f001 fb6b 	bl	f0c4 <ipc_trace_init>
    d9ee:	e797      	b.n	d920 <rpc_transport_ipc_init+0xa4>
    d9f0:	f06f 0415 	mvn.w	r4, #21
    d9f4:	f7ff fcc6 	bl	d384 <nrfx_ipc_uninit>
    d9f8:	e7e9      	b.n	d9ce <rpc_transport_ipc_init+0x152>
    d9fa:	f06f 0473 	mvn.w	r4, #115	; 0x73
    d9fe:	e7f9      	b.n	d9f4 <rpc_transport_ipc_init+0x178>
    da00:	f06f 042d 	mvn.w	r4, #45	; 0x2d
    da04:	e7e3      	b.n	d9ce <rpc_transport_ipc_init+0x152>
    da06:	bf00      	nop
    da08:	2000ce20 	.word	0x2000ce20
    da0c:	0000d6ad 	.word	0x0000d6ad
    da10:	2000ce1c 	.word	0x2000ce1c
    da14:	2000ce30 	.word	0x2000ce30
    da18:	2000ce2c 	.word	0x2000ce2c
    da1c:	2000ce28 	.word	0x2000ce28
    da20:	2000ce24 	.word	0x2000ce24
    da24:	2000ce18 	.word	0x2000ce18
    da28:	4002a000 	.word	0x4002a000
    da2c:	000249f0 	.word	0x000249f0
    da30:	2000d236 	.word	0x2000d236
    da34:	2000ce34 	.word	0x2000ce34
    da38:	2000d234 	.word	0x2000d234
    da3c:	2000e6e4 	.word	0x2000e6e4
    da40:	40005600 	.word	0x40005600
    da44:	2000e6e3 	.word	0x2000e6e3

0000da48 <rpc_transport_ipc_ctrl_msg_send>:
    da48:	b570      	push	{r4, r5, r6, lr}
    da4a:	4b16      	ldr	r3, [pc, #88]	; (daa4 <rpc_transport_ipc_ctrl_msg_send+0x5c>)
    da4c:	6842      	ldr	r2, [r0, #4]
    da4e:	681b      	ldr	r3, [r3, #0]
    da50:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    da54:	f042 0201 	orr.w	r2, r2, #1
    da58:	1ac3      	subs	r3, r0, r3
    da5a:	6042      	str	r2, [r0, #4]
    da5c:	4812      	ldr	r0, [pc, #72]	; (daa8 <rpc_transport_ipc_ctrl_msg_send+0x60>)
    da5e:	4a13      	ldr	r2, [pc, #76]	; (daac <rpc_transport_ipc_ctrl_msg_send+0x64>)
    da60:	6801      	ldr	r1, [r0, #0]
    da62:	f3c3 1389 	ubfx	r3, r3, #6, #10
    da66:	e8d2 4fdf 	ldaexh	r4, [r2]
    da6a:	1c65      	adds	r5, r4, #1
    da6c:	e8c2 5fd6 	stlexh	r6, r5, [r2]
    da70:	2e00      	cmp	r6, #0
    da72:	d1f8      	bne.n	da66 <rpc_transport_ipc_ctrl_msg_send+0x1e>
    da74:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    da78:	684a      	ldr	r2, [r1, #4]
    da7a:	b292      	uxth	r2, r2
    da7c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    da80:	604a      	str	r2, [r1, #4]
    da82:	6802      	ldr	r2, [r0, #0]
    da84:	2003      	movs	r0, #3
    da86:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    da8a:	6853      	ldr	r3, [r2, #4]
    da8c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    da90:	f043 0301 	orr.w	r3, r3, #1
    da94:	6053      	str	r3, [r2, #4]
    da96:	f005 fafc 	bl	13092 <nrf_modem_os_busywait>
    da9a:	2201      	movs	r2, #1
    da9c:	4b04      	ldr	r3, [pc, #16]	; (dab0 <rpc_transport_ipc_ctrl_msg_send+0x68>)
    da9e:	605a      	str	r2, [r3, #4]
    daa0:	bd70      	pop	{r4, r5, r6, pc}
    daa2:	bf00      	nop
    daa4:	2000ce24 	.word	0x2000ce24
    daa8:	2000ce2c 	.word	0x2000ce2c
    daac:	2000d236 	.word	0x2000d236
    dab0:	4002a000 	.word	0x4002a000

0000dab4 <rpc_transport_ipc_request_shutdown>:
    dab4:	b510      	push	{r4, lr}
    dab6:	f7ff fead 	bl	d814 <rpc_transport_ipc_ctrl_msg_alloc>
    daba:	2401      	movs	r4, #1
    dabc:	2200      	movs	r2, #0
    dabe:	2103      	movs	r1, #3
    dac0:	7004      	strb	r4, [r0, #0]
    dac2:	7081      	strb	r1, [r0, #2]
    dac4:	7042      	strb	r2, [r0, #1]
    dac6:	70c2      	strb	r2, [r0, #3]
    dac8:	f7ff ffbe 	bl	da48 <rpc_transport_ipc_ctrl_msg_send>
    dacc:	4b05      	ldr	r3, [pc, #20]	; (dae4 <rpc_transport_ipc_request_shutdown+0x30>)
    dace:	701c      	strb	r4, [r3, #0]
    dad0:	f005 fd55 	bl	1357e <rpc_transport_ipc_data_rx_suspend>
    dad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dad8:	4b03      	ldr	r3, [pc, #12]	; (dae8 <rpc_transport_ipc_request_shutdown+0x34>)
    dada:	f247 5130 	movw	r1, #30000	; 0x7530
    dade:	6818      	ldr	r0, [r3, #0]
    dae0:	f7fe b820 	b.w	bb24 <nrf_modem_os_sem_take>
    dae4:	2000e6e3 	.word	0x2000e6e3
    dae8:	2000ce20 	.word	0x2000ce20

0000daec <rpc_transport_ipc_msg_data_rx_free>:
    daec:	b510      	push	{r4, lr}
    daee:	4b0a      	ldr	r3, [pc, #40]	; (db18 <rpc_transport_ipc_msg_data_rx_free+0x2c>)
    daf0:	4604      	mov	r4, r0
    daf2:	781b      	ldrb	r3, [r3, #0]
    daf4:	2b03      	cmp	r3, #3
    daf6:	d00e      	beq.n	db16 <rpc_transport_ipc_msg_data_rx_free+0x2a>
    daf8:	f7ff fe8c 	bl	d814 <rpc_transport_ipc_ctrl_msg_alloc>
    dafc:	b158      	cbz	r0, db16 <rpc_transport_ipc_msg_data_rx_free+0x2a>
    dafe:	2101      	movs	r1, #1
    db00:	2200      	movs	r2, #0
    db02:	7001      	strb	r1, [r0, #0]
    db04:	2102      	movs	r1, #2
    db06:	6084      	str	r4, [r0, #8]
    db08:	7042      	strb	r2, [r0, #1]
    db0a:	7081      	strb	r1, [r0, #2]
    db0c:	70c2      	strb	r2, [r0, #3]
    db0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    db12:	f7ff bf99 	b.w	da48 <rpc_transport_ipc_ctrl_msg_send>
    db16:	bd10      	pop	{r4, pc}
    db18:	2000e6e4 	.word	0x2000e6e4

0000db1c <at_cmd_send>:
    db1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    db20:	4605      	mov	r5, r0
    db22:	2000      	movs	r0, #0
    db24:	4617      	mov	r7, r2
    db26:	4688      	mov	r8, r1
    db28:	461e      	mov	r6, r3
    db2a:	f005 fd54 	bl	135d6 <rpc_client_msg_alloc>
    db2e:	4602      	mov	r2, r0
    db30:	b940      	cbnz	r0, db44 <at_cmd_send+0x28>
    db32:	b115      	cbz	r5, db3a <at_cmd_send+0x1e>
    db34:	4628      	mov	r0, r5
    db36:	f005 fd7a 	bl	1362e <rpc_client_msg_data_tx_free>
    db3a:	f06f 000b 	mvn.w	r0, #11
    db3e:	b002      	add	sp, #8
    db40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db44:	f06f 0358 	mvn.w	r3, #88	; 0x58
    db48:	2400      	movs	r4, #0
    db4a:	7303      	strb	r3, [r0, #12]
    db4c:	2304      	movs	r3, #4
    db4e:	6005      	str	r5, [r0, #0]
    db50:	4d0e      	ldr	r5, [pc, #56]	; (db8c <at_cmd_send+0x70>)
    db52:	7203      	strb	r3, [r0, #8]
    db54:	7344      	strb	r4, [r0, #13]
    db56:	7384      	strb	r4, [r0, #14]
    db58:	73c4      	strb	r4, [r0, #15]
    db5a:	7244      	strb	r4, [r0, #9]
    db5c:	7284      	strb	r4, [r0, #10]
    db5e:	72c4      	strb	r4, [r0, #11]
    db60:	f8c0 8004 	str.w	r8, [r0, #4]
    db64:	4639      	mov	r1, r7
    db66:	2003      	movs	r0, #3
    db68:	702c      	strb	r4, [r5, #0]
    db6a:	f005 fd50 	bl	1360e <rpc_client_msg_send>
    db6e:	f04f 33ff 	mov.w	r3, #4294967295
    db72:	9301      	str	r3, [sp, #4]
    db74:	782b      	ldrb	r3, [r5, #0]
    db76:	42b3      	cmp	r3, r6
    db78:	d101      	bne.n	db7e <at_cmd_send+0x62>
    db7a:	2000      	movs	r0, #0
    db7c:	e7df      	b.n	db3e <at_cmd_send+0x22>
    db7e:	2002      	movs	r0, #2
    db80:	a901      	add	r1, sp, #4
    db82:	f7fd fe97 	bl	b8b4 <nrf_modem_os_timedwait>
    db86:	2800      	cmp	r0, #0
    db88:	d0f4      	beq.n	db74 <at_cmd_send+0x58>
    db8a:	e7d8      	b.n	db3e <at_cmd_send+0x22>
    db8c:	2000e6e5 	.word	0x2000e6e5

0000db90 <at_response_match>:
    db90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db92:	4605      	mov	r5, r0
    db94:	2400      	movs	r4, #0
    db96:	4f0f      	ldr	r7, [pc, #60]	; (dbd4 <at_response_match+0x44>)
    db98:	f857 6b04 	ldr.w	r6, [r7], #4
    db9c:	4628      	mov	r0, r5
    db9e:	4631      	mov	r1, r6
    dba0:	f006 fd2f 	bl	14602 <strstr>
    dba4:	b928      	cbnz	r0, dbb2 <at_response_match+0x22>
    dba6:	3401      	adds	r4, #1
    dba8:	2c04      	cmp	r4, #4
    dbaa:	d1f5      	bne.n	db98 <at_response_match+0x8>
    dbac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    dbb0:	e00d      	b.n	dbce <at_response_match+0x3e>
    dbb2:	b16c      	cbz	r4, dbd0 <at_response_match+0x40>
    dbb4:	1ea3      	subs	r3, r4, #2
    dbb6:	2b01      	cmp	r3, #1
    dbb8:	d8f8      	bhi.n	dbac <at_response_match+0x1c>
    dbba:	4630      	mov	r0, r6
    dbbc:	f7fa fc2a 	bl	8414 <strlen>
    dbc0:	220a      	movs	r2, #10
    dbc2:	2100      	movs	r1, #0
    dbc4:	4428      	add	r0, r5
    dbc6:	f004 fa71 	bl	120ac <strtol>
    dbca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
    dbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dbd0:	4620      	mov	r0, r4
    dbd2:	e7fc      	b.n	dbce <at_response_match+0x3e>
    dbd4:	00014e84 	.word	0x00014e84

0000dbd8 <at_vsprintf>:
    dbd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    dbdc:	2500      	movs	r5, #0
    dbde:	4681      	mov	r9, r0
    dbe0:	460f      	mov	r7, r1
    dbe2:	4810      	ldr	r0, [pc, #64]	; (dc24 <at_vsprintf+0x4c>)
    dbe4:	4629      	mov	r1, r5
    dbe6:	4690      	mov	r8, r2
    dbe8:	461e      	mov	r6, r3
    dbea:	9301      	str	r3, [sp, #4]
    dbec:	f004 fae4 	bl	121b8 <vsniprintf>
    dbf0:	1e04      	subs	r4, r0, #0
    dbf2:	db11      	blt.n	dc18 <at_vsprintf+0x40>
    dbf4:	3401      	adds	r4, #1
    dbf6:	4620      	mov	r0, r4
    dbf8:	f005 fd17 	bl	1362a <rpc_client_msg_data_tx_alloc>
    dbfc:	f8c9 0000 	str.w	r0, [r9]
    dc00:	b168      	cbz	r0, dc1e <at_vsprintf+0x46>
    dc02:	4633      	mov	r3, r6
    dc04:	4642      	mov	r2, r8
    dc06:	4621      	mov	r1, r4
    dc08:	9601      	str	r6, [sp, #4]
    dc0a:	f004 fad5 	bl	121b8 <vsniprintf>
    dc0e:	4628      	mov	r0, r5
    dc10:	603c      	str	r4, [r7, #0]
    dc12:	b003      	add	sp, #12
    dc14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dc18:	f06f 0015 	mvn.w	r0, #21
    dc1c:	e7f9      	b.n	dc12 <at_vsprintf+0x3a>
    dc1e:	f06f 000b 	mvn.w	r0, #11
    dc22:	e7f6      	b.n	dc12 <at_vsprintf+0x3a>
    dc24:	00014cc0 	.word	0x00014cc0

0000dc28 <nrf_modem_at_notif_handler_set>:
    dc28:	4b01      	ldr	r3, [pc, #4]	; (dc30 <nrf_modem_at_notif_handler_set+0x8>)
    dc2a:	6018      	str	r0, [r3, #0]
    dc2c:	2000      	movs	r0, #0
    dc2e:	4770      	bx	lr
    dc30:	2000ce4c 	.word	0x2000ce4c

0000dc34 <nrf_modem_at_printf>:
    dc34:	b40f      	push	{r0, r1, r2, r3}
    dc36:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    dc38:	9c08      	ldr	r4, [sp, #32]
    dc3a:	f001 fa3b 	bl	f0b4 <nrf_modem_state_is_initialized>
    dc3e:	2800      	cmp	r0, #0
    dc40:	d039      	beq.n	dcb6 <nrf_modem_at_printf+0x82>
    dc42:	2c00      	cmp	r4, #0
    dc44:	d03a      	beq.n	dcbc <nrf_modem_at_printf+0x88>
    dc46:	4622      	mov	r2, r4
    dc48:	ab09      	add	r3, sp, #36	; 0x24
    dc4a:	a903      	add	r1, sp, #12
    dc4c:	a802      	add	r0, sp, #8
    dc4e:	9301      	str	r3, [sp, #4]
    dc50:	f7ff ffc2 	bl	dbd8 <at_vsprintf>
    dc54:	4604      	mov	r4, r0
    dc56:	b960      	cbnz	r0, dc72 <nrf_modem_at_printf+0x3e>
    dc58:	4e1a      	ldr	r6, [pc, #104]	; (dcc4 <nrf_modem_at_printf+0x90>)
    dc5a:	f04f 31ff 	mov.w	r1, #4294967295
    dc5e:	6830      	ldr	r0, [r6, #0]
    dc60:	f7fd ff60 	bl	bb24 <nrf_modem_os_sem_take>
    dc64:	4603      	mov	r3, r0
    dc66:	9802      	ldr	r0, [sp, #8]
    dc68:	b14b      	cbz	r3, dc7e <nrf_modem_at_printf+0x4a>
    dc6a:	f005 fce0 	bl	1362e <rpc_client_msg_data_tx_free>
    dc6e:	f06f 040a 	mvn.w	r4, #10
    dc72:	4620      	mov	r0, r4
    dc74:	b004      	add	sp, #16
    dc76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dc7a:	b004      	add	sp, #16
    dc7c:	4770      	bx	lr
    dc7e:	2302      	movs	r3, #2
    dc80:	2201      	movs	r2, #1
    dc82:	9903      	ldr	r1, [sp, #12]
    dc84:	f7ff ff4a 	bl	db1c <at_cmd_send>
    dc88:	4604      	mov	r4, r0
    dc8a:	b118      	cbz	r0, dc94 <nrf_modem_at_printf+0x60>
    dc8c:	6830      	ldr	r0, [r6, #0]
    dc8e:	f7fd ff25 	bl	badc <nrf_modem_os_sem_give>
    dc92:	e7ee      	b.n	dc72 <nrf_modem_at_printf+0x3e>
    dc94:	4d0c      	ldr	r5, [pc, #48]	; (dcc8 <nrf_modem_at_printf+0x94>)
    dc96:	682b      	ldr	r3, [r5, #0]
    dc98:	6818      	ldr	r0, [r3, #0]
    dc9a:	f7ff ff79 	bl	db90 <at_response_match>
    dc9e:	4604      	mov	r4, r0
    dca0:	6830      	ldr	r0, [r6, #0]
    dca2:	f7fd ff1b 	bl	badc <nrf_modem_os_sem_give>
    dca6:	682b      	ldr	r3, [r5, #0]
    dca8:	6818      	ldr	r0, [r3, #0]
    dcaa:	f005 fcba 	bl	13622 <rpc_client_msg_data_rx_free>
    dcae:	6828      	ldr	r0, [r5, #0]
    dcb0:	f005 fcb4 	bl	1361c <rpc_client_msg_rx_free>
    dcb4:	e7dd      	b.n	dc72 <nrf_modem_at_printf+0x3e>
    dcb6:	f04f 34ff 	mov.w	r4, #4294967295
    dcba:	e7da      	b.n	dc72 <nrf_modem_at_printf+0x3e>
    dcbc:	f06f 040d 	mvn.w	r4, #13
    dcc0:	e7d7      	b.n	dc72 <nrf_modem_at_printf+0x3e>
    dcc2:	bf00      	nop
    dcc4:	2000ce54 	.word	0x2000ce54
    dcc8:	2000ce50 	.word	0x2000ce50

0000dccc <nrf_modem_at_cmd>:
    dccc:	b40c      	push	{r2, r3}
    dcce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dcd2:	b085      	sub	sp, #20
    dcd4:	4606      	mov	r6, r0
    dcd6:	460d      	mov	r5, r1
    dcd8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    dcda:	f001 f9eb 	bl	f0b4 <nrf_modem_state_is_initialized>
    dcde:	2800      	cmp	r0, #0
    dce0:	d076      	beq.n	ddd0 <nrf_modem_at_cmd+0x104>
    dce2:	2e00      	cmp	r6, #0
    dce4:	d077      	beq.n	ddd6 <nrf_modem_at_cmd+0x10a>
    dce6:	2c00      	cmp	r4, #0
    dce8:	d075      	beq.n	ddd6 <nrf_modem_at_cmd+0x10a>
    dcea:	2d00      	cmp	r5, #0
    dcec:	d076      	beq.n	dddc <nrf_modem_at_cmd+0x110>
    dcee:	4622      	mov	r2, r4
    dcf0:	ab0d      	add	r3, sp, #52	; 0x34
    dcf2:	a903      	add	r1, sp, #12
    dcf4:	a802      	add	r0, sp, #8
    dcf6:	9301      	str	r3, [sp, #4]
    dcf8:	f7ff ff6e 	bl	dbd8 <at_vsprintf>
    dcfc:	4604      	mov	r4, r0
    dcfe:	bba0      	cbnz	r0, dd6a <nrf_modem_at_cmd+0x9e>
    dd00:	4b38      	ldr	r3, [pc, #224]	; (dde4 <nrf_modem_at_cmd+0x118>)
    dd02:	9f02      	ldr	r7, [sp, #8]
    dd04:	f8d3 8000 	ldr.w	r8, [r3]
    dd08:	f1b8 0f00 	cmp.w	r8, #0
    dd0c:	d00f      	beq.n	dd2e <nrf_modem_at_cmd+0x62>
    dd0e:	4b36      	ldr	r3, [pc, #216]	; (dde8 <nrf_modem_at_cmd+0x11c>)
    dd10:	f8d3 9000 	ldr.w	r9, [r3]
    dd14:	454c      	cmp	r4, r9
    dd16:	d00a      	beq.n	dd2e <nrf_modem_at_cmd+0x62>
    dd18:	4638      	mov	r0, r7
    dd1a:	f858 1034 	ldr.w	r1, [r8, r4, lsl #3]
    dd1e:	f006 fc70 	bl	14602 <strstr>
    dd22:	b198      	cbz	r0, dd4c <nrf_modem_at_cmd+0x80>
    dd24:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
    dd28:	f8d8 3004 	ldr.w	r3, [r8, #4]
    dd2c:	b983      	cbnz	r3, dd50 <nrf_modem_at_cmd+0x84>
    dd2e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; ddec <nrf_modem_at_cmd+0x120>
    dd32:	f04f 31ff 	mov.w	r1, #4294967295
    dd36:	f8d8 0000 	ldr.w	r0, [r8]
    dd3a:	f7fd fef3 	bl	bb24 <nrf_modem_os_sem_take>
    dd3e:	b1d0      	cbz	r0, dd76 <nrf_modem_at_cmd+0xaa>
    dd40:	4638      	mov	r0, r7
    dd42:	f005 fc74 	bl	1362e <rpc_client_msg_data_tx_free>
    dd46:	f06f 040a 	mvn.w	r4, #10
    dd4a:	e00e      	b.n	dd6a <nrf_modem_at_cmd+0x9e>
    dd4c:	3401      	adds	r4, #1
    dd4e:	e7e1      	b.n	dd14 <nrf_modem_at_cmd+0x48>
    dd50:	463a      	mov	r2, r7
    dd52:	4629      	mov	r1, r5
    dd54:	4630      	mov	r0, r6
    dd56:	4798      	blx	r3
    dd58:	4604      	mov	r4, r0
    dd5a:	b918      	cbnz	r0, dd64 <nrf_modem_at_cmd+0x98>
    dd5c:	4630      	mov	r0, r6
    dd5e:	f7ff ff17 	bl	db90 <at_response_match>
    dd62:	4604      	mov	r4, r0
    dd64:	4638      	mov	r0, r7
    dd66:	f005 fc62 	bl	1362e <rpc_client_msg_data_tx_free>
    dd6a:	4620      	mov	r0, r4
    dd6c:	b005      	add	sp, #20
    dd6e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dd72:	b002      	add	sp, #8
    dd74:	4770      	bx	lr
    dd76:	2302      	movs	r3, #2
    dd78:	2201      	movs	r2, #1
    dd7a:	4638      	mov	r0, r7
    dd7c:	9903      	ldr	r1, [sp, #12]
    dd7e:	f7ff fecd 	bl	db1c <at_cmd_send>
    dd82:	4604      	mov	r4, r0
    dd84:	b120      	cbz	r0, dd90 <nrf_modem_at_cmd+0xc4>
    dd86:	f8d8 0000 	ldr.w	r0, [r8]
    dd8a:	f7fd fea7 	bl	badc <nrf_modem_os_sem_give>
    dd8e:	e7ec      	b.n	dd6a <nrf_modem_at_cmd+0x9e>
    dd90:	4f17      	ldr	r7, [pc, #92]	; (ddf0 <nrf_modem_at_cmd+0x124>)
    dd92:	4630      	mov	r0, r6
    dd94:	683c      	ldr	r4, [r7, #0]
    dd96:	6862      	ldr	r2, [r4, #4]
    dd98:	6821      	ldr	r1, [r4, #0]
    dd9a:	42aa      	cmp	r2, r5
    dd9c:	bf28      	it	cs
    dd9e:	462a      	movcs	r2, r5
    dda0:	f006 fbe6 	bl	14570 <memcpy>
    dda4:	6863      	ldr	r3, [r4, #4]
    dda6:	42ab      	cmp	r3, r5
    dda8:	d80f      	bhi.n	ddca <nrf_modem_at_cmd+0xfe>
    ddaa:	6820      	ldr	r0, [r4, #0]
    ddac:	f7ff fef0 	bl	db90 <at_response_match>
    ddb0:	4604      	mov	r4, r0
    ddb2:	f8d8 0000 	ldr.w	r0, [r8]
    ddb6:	f7fd fe91 	bl	badc <nrf_modem_os_sem_give>
    ddba:	683b      	ldr	r3, [r7, #0]
    ddbc:	6818      	ldr	r0, [r3, #0]
    ddbe:	f005 fc30 	bl	13622 <rpc_client_msg_data_rx_free>
    ddc2:	6838      	ldr	r0, [r7, #0]
    ddc4:	f005 fc2a 	bl	1361c <rpc_client_msg_rx_free>
    ddc8:	e7cf      	b.n	dd6a <nrf_modem_at_cmd+0x9e>
    ddca:	f06f 0406 	mvn.w	r4, #6
    ddce:	e7f0      	b.n	ddb2 <nrf_modem_at_cmd+0xe6>
    ddd0:	f04f 34ff 	mov.w	r4, #4294967295
    ddd4:	e7c9      	b.n	dd6a <nrf_modem_at_cmd+0x9e>
    ddd6:	f06f 040d 	mvn.w	r4, #13
    ddda:	e7c6      	b.n	dd6a <nrf_modem_at_cmd+0x9e>
    dddc:	f06f 0415 	mvn.w	r4, #21
    dde0:	e7c3      	b.n	dd6a <nrf_modem_at_cmd+0x9e>
    dde2:	bf00      	nop
    dde4:	2000ce44 	.word	0x2000ce44
    dde8:	2000ce40 	.word	0x2000ce40
    ddec:	2000ce54 	.word	0x2000ce54
    ddf0:	2000ce50 	.word	0x2000ce50

0000ddf4 <rpc_at_event_handler>:
    ddf4:	b538      	push	{r3, r4, r5, lr}
    ddf6:	68c3      	ldr	r3, [r0, #12]
    ddf8:	4604      	mov	r4, r0
    ddfa:	2ba7      	cmp	r3, #167	; 0xa7
    ddfc:	d003      	beq.n	de06 <rpc_at_event_handler+0x12>
    ddfe:	6820      	ldr	r0, [r4, #0]
    de00:	f005 fc0f 	bl	13622 <rpc_client_msg_data_rx_free>
    de04:	e008      	b.n	de18 <rpc_at_event_handler+0x24>
    de06:	2903      	cmp	r1, #3
    de08:	d008      	beq.n	de1c <rpc_at_event_handler+0x28>
    de0a:	2904      	cmp	r1, #4
    de0c:	d021      	beq.n	de52 <rpc_at_event_handler+0x5e>
    de0e:	2902      	cmp	r1, #2
    de10:	bf02      	ittt	eq
    de12:	2201      	moveq	r2, #1
    de14:	4b12      	ldreq	r3, [pc, #72]	; (de60 <rpc_at_event_handler+0x6c>)
    de16:	701a      	strbeq	r2, [r3, #0]
    de18:	2000      	movs	r0, #0
    de1a:	bd38      	pop	{r3, r4, r5, pc}
    de1c:	4d11      	ldr	r5, [pc, #68]	; (de64 <rpc_at_event_handler+0x70>)
    de1e:	682b      	ldr	r3, [r5, #0]
    de20:	b13b      	cbz	r3, de32 <rpc_at_event_handler+0x3e>
    de22:	6800      	ldr	r0, [r0, #0]
    de24:	4798      	blx	r3
    de26:	2300      	movs	r3, #0
    de28:	6820      	ldr	r0, [r4, #0]
    de2a:	602b      	str	r3, [r5, #0]
    de2c:	f005 fbf9 	bl	13622 <rpc_client_msg_data_rx_free>
    de30:	e006      	b.n	de40 <rpc_at_event_handler+0x4c>
    de32:	4b0b      	ldr	r3, [pc, #44]	; (de60 <rpc_at_event_handler+0x6c>)
    de34:	781a      	ldrb	r2, [r3, #0]
    de36:	2a02      	cmp	r2, #2
    de38:	d105      	bne.n	de46 <rpc_at_event_handler+0x52>
    de3a:	6800      	ldr	r0, [r0, #0]
    de3c:	2800      	cmp	r0, #0
    de3e:	d1f5      	bne.n	de2c <rpc_at_event_handler+0x38>
    de40:	2000      	movs	r0, #0
    de42:	b2c0      	uxtb	r0, r0
    de44:	e7e9      	b.n	de1a <rpc_at_event_handler+0x26>
    de46:	4a08      	ldr	r2, [pc, #32]	; (de68 <rpc_at_event_handler+0x74>)
    de48:	6010      	str	r0, [r2, #0]
    de4a:	2202      	movs	r2, #2
    de4c:	2001      	movs	r0, #1
    de4e:	701a      	strb	r2, [r3, #0]
    de50:	e7f7      	b.n	de42 <rpc_at_event_handler+0x4e>
    de52:	4b06      	ldr	r3, [pc, #24]	; (de6c <rpc_at_event_handler+0x78>)
    de54:	681b      	ldr	r3, [r3, #0]
    de56:	2b00      	cmp	r3, #0
    de58:	d0d1      	beq.n	ddfe <rpc_at_event_handler+0xa>
    de5a:	6800      	ldr	r0, [r0, #0]
    de5c:	4798      	blx	r3
    de5e:	e7ce      	b.n	ddfe <rpc_at_event_handler+0xa>
    de60:	2000e6e5 	.word	0x2000e6e5
    de64:	2000ce48 	.word	0x2000ce48
    de68:	2000ce50 	.word	0x2000ce50
    de6c:	2000ce4c 	.word	0x2000ce4c

0000de70 <rpc_at_init>:
    de70:	2201      	movs	r2, #1
    de72:	b510      	push	{r4, lr}
    de74:	4611      	mov	r1, r2
    de76:	4807      	ldr	r0, [pc, #28]	; (de94 <rpc_at_init+0x24>)
    de78:	f7fd fdfc 	bl	ba74 <nrf_modem_os_sem_init>
    de7c:	4601      	mov	r1, r0
    de7e:	b928      	cbnz	r0, de8c <rpc_at_init+0x1c>
    de80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de84:	2301      	movs	r3, #1
    de86:	2205      	movs	r2, #5
    de88:	f7ff be48 	b.w	db1c <at_cmd_send>
    de8c:	f06f 002d 	mvn.w	r0, #45	; 0x2d
    de90:	bd10      	pop	{r4, pc}
    de92:	bf00      	nop
    de94:	2000ce54 	.word	0x2000ce54

0000de98 <sock_init>:
    de98:	f44f 7248 	mov.w	r2, #800	; 0x320
    de9c:	2100      	movs	r1, #0
    de9e:	b508      	push	{r3, lr}
    dea0:	4808      	ldr	r0, [pc, #32]	; (dec4 <sock_init+0x2c>)
    dea2:	f006 fb72 	bl	1458a <memset>
    dea6:	2300      	movs	r3, #0
    dea8:	4619      	mov	r1, r3
    deaa:	4a07      	ldr	r2, [pc, #28]	; (dec8 <sock_init+0x30>)
    deac:	4807      	ldr	r0, [pc, #28]	; (decc <sock_init+0x34>)
    deae:	7013      	strb	r3, [r2, #0]
    deb0:	4a04      	ldr	r2, [pc, #16]	; (dec4 <sock_init+0x2c>)
    deb2:	3301      	adds	r3, #1
    deb4:	2b08      	cmp	r3, #8
    deb6:	e9c2 0100 	strd	r0, r1, [r2]
    deba:	6091      	str	r1, [r2, #8]
    debc:	f102 0264 	add.w	r2, r2, #100	; 0x64
    dec0:	d1f7      	bne.n	deb2 <sock_init+0x1a>
    dec2:	bd08      	pop	{r3, pc}
    dec4:	2000ce58 	.word	0x2000ce58
    dec8:	2000e6e6 	.word	0x2000e6e6
    decc:	1badf11e 	.word	0x1badf11e

0000ded0 <sock_open>:
    ded0:	b570      	push	{r4, r5, r6, lr}
    ded2:	2300      	movs	r3, #0
    ded4:	2464      	movs	r4, #100	; 0x64
    ded6:	4a0e      	ldr	r2, [pc, #56]	; (df10 <sock_open+0x40>)
    ded8:	4d0e      	ldr	r5, [pc, #56]	; (df14 <sock_open+0x44>)
    deda:	fb04 f103 	mul.w	r1, r4, r3
    dede:	5856      	ldr	r6, [r2, r1]
    dee0:	1888      	adds	r0, r1, r2
    dee2:	42ae      	cmp	r6, r5
    dee4:	d10e      	bne.n	df04 <sock_open+0x34>
    dee6:	f04f 33ff 	mov.w	r3, #4294967295
    deea:	5053      	str	r3, [r2, r1]
    deec:	4a0a      	ldr	r2, [pc, #40]	; (df18 <sock_open+0x48>)
    deee:	7f03      	ldrb	r3, [r0, #28]
    def0:	7812      	ldrb	r2, [r2, #0]
    def2:	f362 1386 	bfi	r3, r2, #6, #1
    def6:	7703      	strb	r3, [r0, #28]
    def8:	2302      	movs	r3, #2
    defa:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    defe:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
    df02:	bd70      	pop	{r4, r5, r6, pc}
    df04:	3301      	adds	r3, #1
    df06:	2b08      	cmp	r3, #8
    df08:	d1e7      	bne.n	deda <sock_open+0xa>
    df0a:	2000      	movs	r0, #0
    df0c:	e7f9      	b.n	df02 <sock_open+0x32>
    df0e:	bf00      	nop
    df10:	2000ce58 	.word	0x2000ce58
    df14:	1badf11e 	.word	0x1badf11e
    df18:	2000e6e6 	.word	0x2000e6e6

0000df1c <sock_find>:
    df1c:	b530      	push	{r4, r5, lr}
    df1e:	4602      	mov	r2, r0
    df20:	2300      	movs	r3, #0
    df22:	2564      	movs	r5, #100	; 0x64
    df24:	4905      	ldr	r1, [pc, #20]	; (df3c <sock_find+0x20>)
    df26:	fb05 f403 	mul.w	r4, r5, r3
    df2a:	1860      	adds	r0, r4, r1
    df2c:	590c      	ldr	r4, [r1, r4]
    df2e:	4294      	cmp	r4, r2
    df30:	d003      	beq.n	df3a <sock_find+0x1e>
    df32:	3301      	adds	r3, #1
    df34:	2b08      	cmp	r3, #8
    df36:	d1f6      	bne.n	df26 <sock_find+0xa>
    df38:	2000      	movs	r0, #0
    df3a:	bd30      	pop	{r4, r5, pc}
    df3c:	2000ce58 	.word	0x2000ce58

0000df40 <_sock_close>:
    df40:	b538      	push	{r3, r4, r5, lr}
    df42:	f7ff ffeb 	bl	df1c <sock_find>
    df46:	4604      	mov	r4, r0
    df48:	1d05      	adds	r5, r0, #4
    df4a:	4628      	mov	r0, r5
    df4c:	f005 fcf9 	bl	13942 <pkt_flush>
    df50:	6c20      	ldr	r0, [r4, #64]	; 0x40
    df52:	b108      	cbz	r0, df58 <_sock_close+0x18>
    df54:	f7fd fe4a 	bl	bbec <nrf_modem_os_free>
    df58:	2260      	movs	r2, #96	; 0x60
    df5a:	2100      	movs	r1, #0
    df5c:	4628      	mov	r0, r5
    df5e:	f006 fb14 	bl	1458a <memset>
    df62:	4b01      	ldr	r3, [pc, #4]	; (df68 <_sock_close+0x28>)
    df64:	6023      	str	r3, [r4, #0]
    df66:	bd38      	pop	{r3, r4, r5, pc}
    df68:	1badf11e 	.word	0x1badf11e

0000df6c <sock_shutdown>:
    df6c:	b570      	push	{r4, r5, r6, lr}
    df6e:	2400      	movs	r4, #0
    df70:	4d05      	ldr	r5, [pc, #20]	; (df88 <sock_shutdown+0x1c>)
    df72:	4e06      	ldr	r6, [pc, #24]	; (df8c <sock_shutdown+0x20>)
    df74:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    df78:	42b0      	cmp	r0, r6
    df7a:	d001      	beq.n	df80 <sock_shutdown+0x14>
    df7c:	f7ff ffe0 	bl	df40 <_sock_close>
    df80:	3419      	adds	r4, #25
    df82:	2cc8      	cmp	r4, #200	; 0xc8
    df84:	d1f6      	bne.n	df74 <sock_shutdown+0x8>
    df86:	bd70      	pop	{r4, r5, r6, pc}
    df88:	2000ce58 	.word	0x2000ce58
    df8c:	1badf11e 	.word	0x1badf11e

0000df90 <sock_flow_control_set>:
    df90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    df94:	1e02      	subs	r2, r0, #0
    df96:	4c10      	ldr	r4, [pc, #64]	; (dfd8 <sock_flow_control_set+0x48>)
    df98:	bf18      	it	ne
    df9a:	2201      	movne	r2, #1
    df9c:	4606      	mov	r6, r0
    df9e:	2500      	movs	r5, #0
    dfa0:	46a0      	mov	r8, r4
    dfa2:	f04f 0964 	mov.w	r9, #100	; 0x64
    dfa6:	4b0d      	ldr	r3, [pc, #52]	; (dfdc <sock_flow_control_set+0x4c>)
    dfa8:	4f0d      	ldr	r7, [pc, #52]	; (dfe0 <sock_flow_control_set+0x50>)
    dfaa:	701a      	strb	r2, [r3, #0]
    dfac:	6823      	ldr	r3, [r4, #0]
    dfae:	42bb      	cmp	r3, r7
    dfb0:	d00a      	beq.n	dfc8 <sock_flow_control_set+0x38>
    dfb2:	fb09 8305 	mla	r3, r9, r5, r8
    dfb6:	7f1a      	ldrb	r2, [r3, #28]
    dfb8:	f366 1286 	bfi	r2, r6, #6, #1
    dfbc:	771a      	strb	r2, [r3, #28]
    dfbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
    dfc0:	b113      	cbz	r3, dfc8 <sock_flow_control_set+0x38>
    dfc2:	4620      	mov	r0, r4
    dfc4:	f005 fb74 	bl	136b0 <sock_pollcb>
    dfc8:	3501      	adds	r5, #1
    dfca:	2d08      	cmp	r5, #8
    dfcc:	f104 0464 	add.w	r4, r4, #100	; 0x64
    dfd0:	d1ec      	bne.n	dfac <sock_flow_control_set+0x1c>
    dfd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dfd6:	bf00      	nop
    dfd8:	2000ce58 	.word	0x2000ce58
    dfdc:	2000e6e6 	.word	0x2000e6e6
    dfe0:	1badf11e 	.word	0x1badf11e

0000dfe4 <sock_proto_is_valid>:
    dfe4:	2811      	cmp	r0, #17
    dfe6:	dc06      	bgt.n	dff6 <sock_proto_is_valid+0x12>
    dfe8:	2800      	cmp	r0, #0
    dfea:	db0d      	blt.n	e008 <sock_proto_is_valid+0x24>
    dfec:	4b08      	ldr	r3, [pc, #32]	; (e010 <sock_proto_is_valid+0x2c>)
    dfee:	40c3      	lsrs	r3, r0
    dff0:	f003 0001 	and.w	r0, r3, #1
    dff4:	4770      	bx	lr
    dff6:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
    dffa:	d007      	beq.n	e00c <sock_proto_is_valid+0x28>
    dffc:	f240 1311 	movw	r3, #273	; 0x111
    e000:	1ac3      	subs	r3, r0, r3
    e002:	4258      	negs	r0, r3
    e004:	4158      	adcs	r0, r3
    e006:	4770      	bx	lr
    e008:	2000      	movs	r0, #0
    e00a:	4770      	bx	lr
    e00c:	2001      	movs	r0, #1
    e00e:	4770      	bx	lr
    e010:	00020041 	.word	0x00020041

0000e014 <on_getaddrinfo_res>:
    e014:	2301      	movs	r3, #1
    e016:	4a03      	ldr	r2, [pc, #12]	; (e024 <on_getaddrinfo_res+0x10>)
    e018:	7013      	strb	r3, [r2, #0]
    e01a:	4a03      	ldr	r2, [pc, #12]	; (e028 <on_getaddrinfo_res+0x14>)
    e01c:	6010      	str	r0, [r2, #0]
    e01e:	4618      	mov	r0, r3
    e020:	4770      	bx	lr
    e022:	bf00      	nop
    e024:	2000e6e7 	.word	0x2000e6e7
    e028:	2000d178 	.word	0x2000d178

0000e02c <addrinfo_init>:
    e02c:	2201      	movs	r2, #1
    e02e:	b508      	push	{r3, lr}
    e030:	4611      	mov	r1, r2
    e032:	4804      	ldr	r0, [pc, #16]	; (e044 <addrinfo_init+0x18>)
    e034:	f7fd fd1e 	bl	ba74 <nrf_modem_os_sem_init>
    e038:	2800      	cmp	r0, #0
    e03a:	bf18      	it	ne
    e03c:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
    e040:	bd08      	pop	{r3, pc}
    e042:	bf00      	nop
    e044:	2000d17c 	.word	0x2000d17c

0000e048 <nrf_getaddrinfo>:
    e048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e04c:	b085      	sub	sp, #20
    e04e:	4682      	mov	sl, r0
    e050:	460f      	mov	r7, r1
    e052:	4616      	mov	r6, r2
    e054:	461d      	mov	r5, r3
    e056:	f001 f82d 	bl	f0b4 <nrf_modem_state_is_initialized>
    e05a:	b928      	cbnz	r0, e068 <nrf_getaddrinfo+0x20>
    e05c:	2001      	movs	r0, #1
    e05e:	f7fd fceb 	bl	ba38 <nrf_modem_os_errno_set>
    e062:	f06f 040a 	mvn.w	r4, #10
    e066:	e01c      	b.n	e0a2 <nrf_getaddrinfo+0x5a>
    e068:	ea5a 0307 	orrs.w	r3, sl, r7
    e06c:	f000 8158 	beq.w	e320 <nrf_getaddrinfo+0x2d8>
    e070:	b31e      	cbz	r6, e0ba <nrf_getaddrinfo+0x72>
    e072:	6833      	ldr	r3, [r6, #0]
    e074:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
    e078:	f023 0302 	bic.w	r3, r3, #2
    e07c:	2b00      	cmp	r3, #0
    e07e:	f040 8152 	bne.w	e326 <nrf_getaddrinfo+0x2de>
    e082:	6870      	ldr	r0, [r6, #4]
    e084:	b938      	cbnz	r0, e096 <nrf_getaddrinfo+0x4e>
    e086:	68b0      	ldr	r0, [r6, #8]
    e088:	b178      	cbz	r0, e0aa <nrf_getaddrinfo+0x62>
    e08a:	f005 fbf7 	bl	1387c <sock_type_is_valid>
    e08e:	b960      	cbnz	r0, e0aa <nrf_getaddrinfo+0x62>
    e090:	f06f 0406 	mvn.w	r4, #6
    e094:	e005      	b.n	e0a2 <nrf_getaddrinfo+0x5a>
    e096:	f005 fbeb 	bl	13870 <sock_family_is_valid>
    e09a:	2800      	cmp	r0, #0
    e09c:	d1f3      	bne.n	e086 <nrf_getaddrinfo+0x3e>
    e09e:	f06f 0405 	mvn.w	r4, #5
    e0a2:	4620      	mov	r0, r4
    e0a4:	b005      	add	sp, #20
    e0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0aa:	68f0      	ldr	r0, [r6, #12]
    e0ac:	b128      	cbz	r0, e0ba <nrf_getaddrinfo+0x72>
    e0ae:	68b1      	ldr	r1, [r6, #8]
    e0b0:	f005 fbea 	bl	13888 <sock_proto_supports_type>
    e0b4:	b908      	cbnz	r0, e0ba <nrf_getaddrinfo+0x72>
    e0b6:	206b      	movs	r0, #107	; 0x6b
    e0b8:	e7d1      	b.n	e05e <nrf_getaddrinfo+0x16>
    e0ba:	4b9e      	ldr	r3, [pc, #632]	; (e334 <nrf_getaddrinfo+0x2ec>)
    e0bc:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
    e0c0:	6818      	ldr	r0, [r3, #0]
    e0c2:	f7fd fd2f 	bl	bb24 <nrf_modem_os_sem_take>
    e0c6:	4604      	mov	r4, r0
    e0c8:	2800      	cmp	r0, #0
    e0ca:	f040 812f 	bne.w	e32c <nrf_getaddrinfo+0x2e4>
    e0ce:	2f00      	cmp	r7, #0
    e0d0:	d062      	beq.n	e198 <nrf_getaddrinfo+0x150>
    e0d2:	b1f6      	cbz	r6, e112 <nrf_getaddrinfo+0xca>
    e0d4:	6833      	ldr	r3, [r6, #0]
    e0d6:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
    e0da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    e0de:	d118      	bne.n	e112 <nrf_getaddrinfo+0xca>
    e0e0:	6833      	ldr	r3, [r6, #0]
    e0e2:	04db      	lsls	r3, r3, #19
    e0e4:	d443      	bmi.n	e16e <nrf_getaddrinfo+0x126>
    e0e6:	f04f 38ff 	mov.w	r8, #4294967295
    e0ea:	6870      	ldr	r0, [r6, #4]
    e0ec:	b108      	cbz	r0, e0f2 <nrf_getaddrinfo+0xaa>
    e0ee:	f000 fe6b 	bl	edc8 <nrf_af_to_rpc_af>
    e0f2:	4b91      	ldr	r3, [pc, #580]	; (e338 <nrf_getaddrinfo+0x2f0>)
    e0f4:	4a91      	ldr	r2, [pc, #580]	; (e33c <nrf_getaddrinfo+0x2f4>)
    e0f6:	6018      	str	r0, [r3, #0]
    e0f8:	68b3      	ldr	r3, [r6, #8]
    e0fa:	2b00      	cmp	r3, #0
    e0fc:	bf08      	it	eq
    e0fe:	2301      	moveq	r3, #1
    e100:	6013      	str	r3, [r2, #0]
    e102:	68f3      	ldr	r3, [r6, #12]
    e104:	4a8e      	ldr	r2, [pc, #568]	; (e340 <nrf_getaddrinfo+0x2f8>)
    e106:	2b00      	cmp	r3, #0
    e108:	bf08      	it	eq
    e10a:	2306      	moveq	r3, #6
    e10c:	6013      	str	r3, [r2, #0]
    e10e:	6833      	ldr	r3, [r6, #0]
    e110:	e01c      	b.n	e14c <nrf_getaddrinfo+0x104>
    e112:	220a      	movs	r2, #10
    e114:	2100      	movs	r1, #0
    e116:	4638      	mov	r0, r7
    e118:	f004 f844 	bl	121a4 <strtoul>
    e11c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    e120:	1e42      	subs	r2, r0, #1
    e122:	429a      	cmp	r2, r3
    e124:	f200 80f9 	bhi.w	e31a <nrf_getaddrinfo+0x2d2>
    e128:	4a86      	ldr	r2, [pc, #536]	; (e344 <nrf_getaddrinfo+0x2fc>)
    e12a:	0203      	lsls	r3, r0, #8
    e12c:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
    e130:	8013      	strh	r3, [r2, #0]
    e132:	2e00      	cmp	r6, #0
    e134:	d1d4      	bne.n	e0e0 <nrf_getaddrinfo+0x98>
    e136:	2300      	movs	r3, #0
    e138:	2101      	movs	r1, #1
    e13a:	4a7f      	ldr	r2, [pc, #508]	; (e338 <nrf_getaddrinfo+0x2f0>)
    e13c:	f04f 38ff 	mov.w	r8, #4294967295
    e140:	6013      	str	r3, [r2, #0]
    e142:	4a7e      	ldr	r2, [pc, #504]	; (e33c <nrf_getaddrinfo+0x2f4>)
    e144:	6011      	str	r1, [r2, #0]
    e146:	2106      	movs	r1, #6
    e148:	4a7d      	ldr	r2, [pc, #500]	; (e340 <nrf_getaddrinfo+0x2f8>)
    e14a:	6011      	str	r1, [r2, #0]
    e14c:	4f7e      	ldr	r7, [pc, #504]	; (e348 <nrf_getaddrinfo+0x300>)
    e14e:	4650      	mov	r0, sl
    e150:	603b      	str	r3, [r7, #0]
    e152:	f1ba 0f00 	cmp.w	sl, #0
    e156:	d16f      	bne.n	e238 <nrf_getaddrinfo+0x1f0>
    e158:	f005 fa3d 	bl	135d6 <rpc_client_msg_alloc>
    e15c:	4606      	mov	r6, r0
    e15e:	bb00      	cbnz	r0, e1a2 <nrf_getaddrinfo+0x15a>
    e160:	f06f 0409 	mvn.w	r4, #9
    e164:	4b73      	ldr	r3, [pc, #460]	; (e334 <nrf_getaddrinfo+0x2ec>)
    e166:	6818      	ldr	r0, [r3, #0]
    e168:	f7fd fcb8 	bl	badc <nrf_modem_os_sem_give>
    e16c:	e799      	b.n	e0a2 <nrf_getaddrinfo+0x5a>
    e16e:	213a      	movs	r1, #58	; 0x3a
    e170:	4638      	mov	r0, r7
    e172:	f006 fa12 	bl	1459a <strchr>
    e176:	b100      	cbz	r0, e17a <nrf_getaddrinfo+0x132>
    e178:	1c47      	adds	r7, r0, #1
    e17a:	4638      	mov	r0, r7
    e17c:	4973      	ldr	r1, [pc, #460]	; (e34c <nrf_getaddrinfo+0x304>)
    e17e:	f006 fa40 	bl	14602 <strstr>
    e182:	220a      	movs	r2, #10
    e184:	b128      	cbz	r0, e192 <nrf_getaddrinfo+0x14a>
    e186:	2100      	movs	r1, #0
    e188:	3003      	adds	r0, #3
    e18a:	f003 ff8f 	bl	120ac <strtol>
    e18e:	4680      	mov	r8, r0
    e190:	e7ab      	b.n	e0ea <nrf_getaddrinfo+0xa2>
    e192:	4601      	mov	r1, r0
    e194:	4638      	mov	r0, r7
    e196:	e7f8      	b.n	e18a <nrf_getaddrinfo+0x142>
    e198:	4b6a      	ldr	r3, [pc, #424]	; (e344 <nrf_getaddrinfo+0x2fc>)
    e19a:	8018      	strh	r0, [r3, #0]
    e19c:	2e00      	cmp	r6, #0
    e19e:	d0ca      	beq.n	e136 <nrf_getaddrinfo+0xee>
    e1a0:	e7a1      	b.n	e0e6 <nrf_getaddrinfo+0x9e>
    e1a2:	f8c0 8010 	str.w	r8, [r0, #16]
    e1a6:	4b64      	ldr	r3, [pc, #400]	; (e338 <nrf_getaddrinfo+0x2f0>)
    e1a8:	f8df b190 	ldr.w	fp, [pc, #400]	; e33c <nrf_getaddrinfo+0x2f4>
    e1ac:	681b      	ldr	r3, [r3, #0]
    e1ae:	f8df a190 	ldr.w	sl, [pc, #400]	; e340 <nrf_getaddrinfo+0x2f8>
    e1b2:	61b3      	str	r3, [r6, #24]
    e1b4:	f8db 3000 	ldr.w	r3, [fp]
    e1b8:	4632      	mov	r2, r6
    e1ba:	61f3      	str	r3, [r6, #28]
    e1bc:	f8da 3000 	ldr.w	r3, [sl]
    e1c0:	f247 010d 	movw	r1, #28685	; 0x700d
    e1c4:	6233      	str	r3, [r6, #32]
    e1c6:	683b      	ldr	r3, [r7, #0]
    e1c8:	2004      	movs	r0, #4
    e1ca:	6173      	str	r3, [r6, #20]
    e1cc:	f005 fa1f 	bl	1360e <rpc_client_msg_send>
    e1d0:	2300      	movs	r3, #0
    e1d2:	4e5f      	ldr	r6, [pc, #380]	; (e350 <nrf_getaddrinfo+0x308>)
    e1d4:	7033      	strb	r3, [r6, #0]
    e1d6:	f04f 33ff 	mov.w	r3, #4294967295
    e1da:	9303      	str	r3, [sp, #12]
    e1dc:	7833      	ldrb	r3, [r6, #0]
    e1de:	2b01      	cmp	r3, #1
    e1e0:	d13c      	bne.n	e25c <nrf_getaddrinfo+0x214>
    e1e2:	f8df 8170 	ldr.w	r8, [pc, #368]	; e354 <nrf_getaddrinfo+0x30c>
    e1e6:	f8d8 3000 	ldr.w	r3, [r8]
    e1ea:	6958      	ldr	r0, [r3, #20]
    e1ec:	2800      	cmp	r0, #0
    e1ee:	f040 8090 	bne.w	e312 <nrf_getaddrinfo+0x2ca>
    e1f2:	2020      	movs	r0, #32
    e1f4:	f8d3 9000 	ldr.w	r9, [r3]
    e1f8:	f7fd fcf0 	bl	bbdc <nrf_modem_os_alloc>
    e1fc:	6028      	str	r0, [r5, #0]
    e1fe:	b170      	cbz	r0, e21e <nrf_getaddrinfo+0x1d6>
    e200:	f109 0318 	add.w	r3, r9, #24
    e204:	4a4f      	ldr	r2, [pc, #316]	; (e344 <nrf_getaddrinfo+0x2fc>)
    e206:	9301      	str	r3, [sp, #4]
    e208:	4618      	mov	r0, r3
    e20a:	8812      	ldrh	r2, [r2, #0]
    e20c:	f8b9 1014 	ldrh.w	r1, [r9, #20]
    e210:	f005 fa15 	bl	1363e <sockaddr_init>
    e214:	4606      	mov	r6, r0
    e216:	bb68      	cbnz	r0, e274 <nrf_getaddrinfo+0x22c>
    e218:	6828      	ldr	r0, [r5, #0]
    e21a:	f7fd fce7 	bl	bbec <nrf_modem_os_free>
    e21e:	f06f 0409 	mvn.w	r4, #9
    e222:	f8d8 3000 	ldr.w	r3, [r8]
    e226:	6818      	ldr	r0, [r3, #0]
    e228:	b108      	cbz	r0, e22e <nrf_getaddrinfo+0x1e6>
    e22a:	f005 f9fa 	bl	13622 <rpc_client_msg_data_rx_free>
    e22e:	f8d8 0000 	ldr.w	r0, [r8]
    e232:	f005 f9f3 	bl	1361c <rpc_client_msg_rx_free>
    e236:	e795      	b.n	e164 <nrf_getaddrinfo+0x11c>
    e238:	f7fa f8ec 	bl	8414 <strlen>
    e23c:	f005 f9cb 	bl	135d6 <rpc_client_msg_alloc>
    e240:	4606      	mov	r6, r0
    e242:	2800      	cmp	r0, #0
    e244:	d08c      	beq.n	e160 <nrf_getaddrinfo+0x118>
    e246:	f8c0 8010 	str.w	r8, [r0, #16]
    e24a:	4650      	mov	r0, sl
    e24c:	f7fa f8e2 	bl	8414 <strlen>
    e250:	4651      	mov	r1, sl
    e252:	4602      	mov	r2, r0
    e254:	6830      	ldr	r0, [r6, #0]
    e256:	f006 f98b 	bl	14570 <memcpy>
    e25a:	e7a4      	b.n	e1a6 <nrf_getaddrinfo+0x15e>
    e25c:	2002      	movs	r0, #2
    e25e:	a903      	add	r1, sp, #12
    e260:	f7fd fb28 	bl	b8b4 <nrf_modem_os_timedwait>
    e264:	2800      	cmp	r0, #0
    e266:	d0b9      	beq.n	e1dc <nrf_getaddrinfo+0x194>
    e268:	206e      	movs	r0, #110	; 0x6e
    e26a:	f7fd fbe5 	bl	ba38 <nrf_modem_os_errno_set>
    e26e:	f06f 040a 	mvn.w	r4, #10
    e272:	e777      	b.n	e164 <nrf_getaddrinfo+0x11c>
    e274:	f8d9 2008 	ldr.w	r2, [r9, #8]
    e278:	2a01      	cmp	r2, #1
    e27a:	d004      	beq.n	e286 <nrf_getaddrinfo+0x23e>
    e27c:	2a02      	cmp	r2, #2
    e27e:	d01a      	beq.n	e2b6 <nrf_getaddrinfo+0x26e>
    e280:	f06f 0405 	mvn.w	r4, #5
    e284:	e7cd      	b.n	e222 <nrf_getaddrinfo+0x1da>
    e286:	2110      	movs	r1, #16
    e288:	682a      	ldr	r2, [r5, #0]
    e28a:	6111      	str	r1, [r2, #16]
    e28c:	683a      	ldr	r2, [r7, #0]
    e28e:	6829      	ldr	r1, [r5, #0]
    e290:	f012 0202 	ands.w	r2, r2, #2
    e294:	d03b      	beq.n	e30e <nrf_getaddrinfo+0x2c6>
    e296:	9101      	str	r1, [sp, #4]
    e298:	f8b9 0016 	ldrh.w	r0, [r9, #22]
    e29c:	3001      	adds	r0, #1
    e29e:	f7fd fc9d 	bl	bbdc <nrf_modem_os_alloc>
    e2a2:	9901      	ldr	r1, [sp, #4]
    e2a4:	6188      	str	r0, [r1, #24]
    e2a6:	682a      	ldr	r2, [r5, #0]
    e2a8:	6990      	ldr	r0, [r2, #24]
    e2aa:	b938      	cbnz	r0, e2bc <nrf_getaddrinfo+0x274>
    e2ac:	4628      	mov	r0, r5
    e2ae:	f7fd fc9d 	bl	bbec <nrf_modem_os_free>
    e2b2:	4630      	mov	r0, r6
    e2b4:	e7b1      	b.n	e21a <nrf_getaddrinfo+0x1d2>
    e2b6:	2124      	movs	r1, #36	; 0x24
    e2b8:	682a      	ldr	r2, [r5, #0]
    e2ba:	e7e6      	b.n	e28a <nrf_getaddrinfo+0x242>
    e2bc:	f8b9 1014 	ldrh.w	r1, [r9, #20]
    e2c0:	f109 0318 	add.w	r3, r9, #24
    e2c4:	440b      	add	r3, r1
    e2c6:	4619      	mov	r1, r3
    e2c8:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    e2cc:	f006 f950 	bl	14570 <memcpy>
    e2d0:	2000      	movs	r0, #0
    e2d2:	6829      	ldr	r1, [r5, #0]
    e2d4:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    e2d8:	6989      	ldr	r1, [r1, #24]
    e2da:	5488      	strb	r0, [r1, r2]
    e2dc:	682a      	ldr	r2, [r5, #0]
    e2de:	9201      	str	r2, [sp, #4]
    e2e0:	f8d9 0008 	ldr.w	r0, [r9, #8]
    e2e4:	f005 ff1e 	bl	14124 <rpc_af_to_nrf_af>
    e2e8:	9a01      	ldr	r2, [sp, #4]
    e2ea:	6050      	str	r0, [r2, #4]
    e2ec:	682b      	ldr	r3, [r5, #0]
    e2ee:	f8db 2000 	ldr.w	r2, [fp]
    e2f2:	609a      	str	r2, [r3, #8]
    e2f4:	682b      	ldr	r3, [r5, #0]
    e2f6:	f8da 2000 	ldr.w	r2, [sl]
    e2fa:	60da      	str	r2, [r3, #12]
    e2fc:	682b      	ldr	r3, [r5, #0]
    e2fe:	683a      	ldr	r2, [r7, #0]
    e300:	601a      	str	r2, [r3, #0]
    e302:	2200      	movs	r2, #0
    e304:	682b      	ldr	r3, [r5, #0]
    e306:	615e      	str	r6, [r3, #20]
    e308:	682b      	ldr	r3, [r5, #0]
    e30a:	61da      	str	r2, [r3, #28]
    e30c:	e789      	b.n	e222 <nrf_getaddrinfo+0x1da>
    e30e:	618a      	str	r2, [r1, #24]
    e310:	e7e4      	b.n	e2dc <nrf_getaddrinfo+0x294>
    e312:	f005 ff4d 	bl	141b0 <rpc_error_to_nrf_gai_errno>
    e316:	4604      	mov	r4, r0
    e318:	e783      	b.n	e222 <nrf_getaddrinfo+0x1da>
    e31a:	f06f 0407 	mvn.w	r4, #7
    e31e:	e721      	b.n	e164 <nrf_getaddrinfo+0x11c>
    e320:	f06f 0401 	mvn.w	r4, #1
    e324:	e6bd      	b.n	e0a2 <nrf_getaddrinfo+0x5a>
    e326:	f04f 34ff 	mov.w	r4, #4294967295
    e32a:	e6ba      	b.n	e0a2 <nrf_getaddrinfo+0x5a>
    e32c:	f06f 0402 	mvn.w	r4, #2
    e330:	e6b7      	b.n	e0a2 <nrf_getaddrinfo+0x5a>
    e332:	bf00      	nop
    e334:	2000d17c 	.word	0x2000d17c
    e338:	2000d188 	.word	0x2000d188
    e33c:	2000d184 	.word	0x2000d184
    e340:	2000d180 	.word	0x2000d180
    e344:	2000d238 	.word	0x2000d238
    e348:	2000d18c 	.word	0x2000d18c
    e34c:	0001650e 	.word	0x0001650e
    e350:	2000e6e7 	.word	0x2000e6e7
    e354:	2000d178 	.word	0x2000d178

0000e358 <rpc_ip_event_handler>:
    e358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e35a:	f248 030f 	movw	r3, #32783	; 0x800f
    e35e:	4299      	cmp	r1, r3
    e360:	4606      	mov	r6, r0
    e362:	460d      	mov	r5, r1
    e364:	d03b      	beq.n	e3de <rpc_ip_event_handler+0x86>
    e366:	d822      	bhi.n	e3ae <rpc_ip_event_handler+0x56>
    e368:	f248 030d 	movw	r3, #32781	; 0x800d
    e36c:	4299      	cmp	r1, r3
    e36e:	d02f      	beq.n	e3d0 <rpc_ip_event_handler+0x78>
    e370:	f248 030e 	movw	r3, #32782	; 0x800e
    e374:	4299      	cmp	r1, r3
    e376:	d02f      	beq.n	e3d8 <rpc_ip_event_handler+0x80>
    e378:	6900      	ldr	r0, [r0, #16]
    e37a:	f7ff fdcf 	bl	df1c <sock_find>
    e37e:	4604      	mov	r4, r0
    e380:	b308      	cbz	r0, e3c6 <rpc_ip_event_handler+0x6e>
    e382:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    e386:	d91e      	bls.n	e3c6 <rpc_ip_event_handler+0x6e>
    e388:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
    e38c:	3d01      	subs	r5, #1
    e38e:	2d0b      	cmp	r5, #11
    e390:	d819      	bhi.n	e3c6 <rpc_ip_event_handler+0x6e>
    e392:	e8df f015 	tbh	[pc, r5, lsl #1]
    e396:	0090      	.short	0x0090
    e398:	009400b3 	.word	0x009400b3
    e39c:	00940094 	.word	0x00940094
    e3a0:	00ee00ee 	.word	0x00ee00ee
    e3a4:	00990094 	.word	0x00990094
    e3a8:	00180018 	.word	0x00180018
    e3ac:	00d2      	.short	0x00d2
    e3ae:	f249 0304 	movw	r3, #36868	; 0x9004
    e3b2:	4299      	cmp	r1, r3
    e3b4:	d016      	beq.n	e3e4 <rpc_ip_event_handler+0x8c>
    e3b6:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
    e3ba:	d924      	bls.n	e406 <rpc_ip_event_handler+0xae>
    e3bc:	68c0      	ldr	r0, [r0, #12]
    e3be:	f7ff fdad 	bl	df1c <sock_find>
    e3c2:	4604      	mov	r4, r0
    e3c4:	bb70      	cbnz	r0, e424 <rpc_ip_event_handler+0xcc>
    e3c6:	6830      	ldr	r0, [r6, #0]
    e3c8:	b1b0      	cbz	r0, e3f8 <rpc_ip_event_handler+0xa0>
    e3ca:	f005 f92a 	bl	13622 <rpc_client_msg_data_rx_free>
    e3ce:	e013      	b.n	e3f8 <rpc_ip_event_handler+0xa0>
    e3d0:	f7ff fe20 	bl	e014 <on_getaddrinfo_res>
    e3d4:	b2c0      	uxtb	r0, r0
    e3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e3d8:	f005 fad4 	bl	13984 <on_getifaddrs_res>
    e3dc:	e7fa      	b.n	e3d4 <rpc_ip_event_handler+0x7c>
    e3de:	f005 fabe 	bl	1395e <on_conf_dnssrv_res>
    e3e2:	e7f7      	b.n	e3d4 <rpc_ip_event_handler+0x7c>
    e3e4:	6903      	ldr	r3, [r0, #16]
    e3e6:	2b03      	cmp	r3, #3
    e3e8:	d806      	bhi.n	e3f8 <rpc_ip_event_handler+0xa0>
    e3ea:	e8df f003 	tbb	[pc, r3]
    e3ee:	0a02      	.short	0x0a02
    e3f0:	0702      	.short	0x0702
    e3f2:	2000      	movs	r0, #0
    e3f4:	f7ff fdcc 	bl	df90 <sock_flow_control_set>
    e3f8:	2000      	movs	r0, #0
    e3fa:	e7ec      	b.n	e3d6 <rpc_ip_event_handler+0x7e>
    e3fc:	2201      	movs	r2, #1
    e3fe:	4b65      	ldr	r3, [pc, #404]	; (e594 <rpc_ip_event_handler+0x23c>)
    e400:	701a      	strb	r2, [r3, #0]
    e402:	2001      	movs	r0, #1
    e404:	e7f6      	b.n	e3f4 <rpc_ip_event_handler+0x9c>
    e406:	6900      	ldr	r0, [r0, #16]
    e408:	f7ff fd88 	bl	df1c <sock_find>
    e40c:	4604      	mov	r4, r0
    e40e:	2800      	cmp	r0, #0
    e410:	d0d9      	beq.n	e3c6 <rpc_ip_event_handler+0x6e>
    e412:	f248 0381 	movw	r3, #32897	; 0x8081
    e416:	429d      	cmp	r5, r3
    e418:	d1d5      	bne.n	e3c6 <rpc_ip_event_handler+0x6e>
    e41a:	4601      	mov	r1, r0
    e41c:	4630      	mov	r0, r6
    e41e:	f000 fc2d 	bl	ec7c <on_tls_attach_res>
    e422:	e04f      	b.n	e4c4 <rpc_ip_event_handler+0x16c>
    e424:	f249 0302 	movw	r3, #36866	; 0x9002
    e428:	429d      	cmp	r5, r3
    e42a:	f000 809e 	beq.w	e56a <rpc_ip_event_handler+0x212>
    e42e:	d835      	bhi.n	e49c <rpc_ip_event_handler+0x144>
    e430:	f005 f9b9 	bl	137a6 <sock_has_stream_error>
    e434:	4607      	mov	r7, r0
    e436:	b9e0      	cbnz	r0, e472 <rpc_ip_event_handler+0x11a>
    e438:	2010      	movs	r0, #16
    e43a:	f7fd fbcf 	bl	bbdc <nrf_modem_os_alloc>
    e43e:	4605      	mov	r5, r0
    e440:	b1b8      	cbz	r0, e472 <rpc_ip_event_handler+0x11a>
    e442:	4639      	mov	r1, r7
    e444:	2210      	movs	r2, #16
    e446:	f006 f8a0 	bl	1458a <memset>
    e44a:	6833      	ldr	r3, [r6, #0]
    e44c:	606b      	str	r3, [r5, #4]
    e44e:	6873      	ldr	r3, [r6, #4]
    e450:	812b      	strh	r3, [r5, #8]
    e452:	8a71      	ldrh	r1, [r6, #18]
    e454:	2900      	cmp	r1, #0
    e456:	f000 8097 	beq.w	e588 <rpc_ip_event_handler+0x230>
    e45a:	8a32      	ldrh	r2, [r6, #16]
    e45c:	f106 0014 	add.w	r0, r6, #20
    e460:	f005 f8ed 	bl	1363e <sockaddr_init>
    e464:	60e8      	str	r0, [r5, #12]
    e466:	2800      	cmp	r0, #0
    e468:	f040 808e 	bne.w	e588 <rpc_ip_event_handler+0x230>
    e46c:	4628      	mov	r0, r5
    e46e:	f7fd fbbd 	bl	bbec <nrf_modem_os_free>
    e472:	6830      	ldr	r0, [r6, #0]
    e474:	f005 f8d5 	bl	13622 <rpc_client_msg_data_rx_free>
    e478:	4620      	mov	r0, r4
    e47a:	f005 f956 	bl	1372a <sock_is_stream>
    e47e:	b148      	cbz	r0, e494 <rpc_ip_event_handler+0x13c>
    e480:	4620      	mov	r0, r4
    e482:	f005 f990 	bl	137a6 <sock_has_stream_error>
    e486:	b928      	cbnz	r0, e494 <rpc_ip_event_handler+0x13c>
    e488:	230c      	movs	r3, #12
    e48a:	61a3      	str	r3, [r4, #24]
    e48c:	7f23      	ldrb	r3, [r4, #28]
    e48e:	f063 037e 	orn	r3, r3, #126	; 0x7e
    e492:	7723      	strb	r3, [r4, #28]
    e494:	4620      	mov	r0, r4
    e496:	f005 f94d 	bl	13734 <sock_is_datagram>
    e49a:	e025      	b.n	e4e8 <rpc_ip_event_handler+0x190>
    e49c:	f249 0303 	movw	r3, #36867	; 0x9003
    e4a0:	429d      	cmp	r5, r3
    e4a2:	d018      	beq.n	e4d6 <rpc_ip_event_handler+0x17e>
    e4a4:	f249 0382 	movw	r3, #36994	; 0x9082
    e4a8:	429d      	cmp	r5, r3
    e4aa:	d18c      	bne.n	e3c6 <rpc_ip_event_handler+0x6e>
    e4ac:	4601      	mov	r1, r0
    e4ae:	4630      	mov	r0, r6
    e4b0:	f000 fbf8 	bl	eca4 <on_tls_handshake_ntf>
    e4b4:	e006      	b.n	e4c4 <rpc_ip_event_handler+0x16c>
    e4b6:	6973      	ldr	r3, [r6, #20]
    e4b8:	b90b      	cbnz	r3, e4be <rpc_ip_event_handler+0x166>
    e4ba:	69b3      	ldr	r3, [r6, #24]
    e4bc:	6003      	str	r3, [r0, #0]
    e4be:	4630      	mov	r0, r6
    e4c0:	f005 fec0 	bl	14244 <res_forward>
    e4c4:	4605      	mov	r5, r0
    e4c6:	e010      	b.n	e4ea <rpc_ip_event_handler+0x192>
    e4c8:	7f03      	ldrb	r3, [r0, #28]
    e4ca:	f023 0303 	bic.w	r3, r3, #3
    e4ce:	f043 0303 	orr.w	r3, r3, #3
    e4d2:	7703      	strb	r3, [r0, #28]
    e4d4:	e7f3      	b.n	e4be <rpc_ip_event_handler+0x166>
    e4d6:	7f03      	ldrb	r3, [r0, #28]
    e4d8:	f043 0301 	orr.w	r3, r3, #1
    e4dc:	7703      	strb	r3, [r0, #28]
    e4de:	6930      	ldr	r0, [r6, #16]
    e4e0:	2869      	cmp	r0, #105	; 0x69
    e4e2:	d112      	bne.n	e50a <rpc_ip_event_handler+0x1b2>
    e4e4:	2368      	movs	r3, #104	; 0x68
    e4e6:	61a3      	str	r3, [r4, #24]
    e4e8:	2500      	movs	r5, #0
    e4ea:	4620      	mov	r0, r4
    e4ec:	f005 f969 	bl	137c2 <sock_has_pollcb>
    e4f0:	b110      	cbz	r0, e4f8 <rpc_ip_event_handler+0x1a0>
    e4f2:	4620      	mov	r0, r4
    e4f4:	f005 f8dc 	bl	136b0 <sock_pollcb>
    e4f8:	b2e8      	uxtb	r0, r5
    e4fa:	e76c      	b.n	e3d6 <rpc_ip_event_handler+0x7e>
    e4fc:	7f03      	ldrb	r3, [r0, #28]
    e4fe:	68f5      	ldr	r5, [r6, #12]
    e500:	f36f 0382 	bfc	r3, #2, #1
    e504:	7703      	strb	r3, [r0, #28]
    e506:	6970      	ldr	r0, [r6, #20]
    e508:	b118      	cbz	r0, e512 <rpc_ip_event_handler+0x1ba>
    e50a:	f000 fc71 	bl	edf0 <rpc_error_to_nrf_errno>
    e50e:	61a0      	str	r0, [r4, #24]
    e510:	e7ea      	b.n	e4e8 <rpc_ip_event_handler+0x190>
    e512:	4620      	mov	r0, r4
    e514:	f005 f918 	bl	13748 <sock_proto_is_secure>
    e518:	b918      	cbnz	r0, e522 <rpc_ip_event_handler+0x1ca>
    e51a:	7f23      	ldrb	r3, [r4, #28]
    e51c:	f043 0308 	orr.w	r3, r3, #8
    e520:	7723      	strb	r3, [r4, #28]
    e522:	4620      	mov	r0, r4
    e524:	f005 f910 	bl	13748 <sock_proto_is_secure>
    e528:	2800      	cmp	r0, #0
    e52a:	d0cb      	beq.n	e4c4 <rpc_ip_event_handler+0x16c>
    e52c:	2d00      	cmp	r5, #0
    e52e:	d0dc      	beq.n	e4ea <rpc_ip_event_handler+0x192>
    e530:	2100      	movs	r1, #0
    e532:	4620      	mov	r0, r4
    e534:	f000 fbd0 	bl	ecd8 <tls_attach>
    e538:	e7d6      	b.n	e4e8 <rpc_ip_event_handler+0x190>
    e53a:	7f43      	ldrb	r3, [r0, #29]
    e53c:	3b01      	subs	r3, #1
    e53e:	7743      	strb	r3, [r0, #29]
    e540:	6973      	ldr	r3, [r6, #20]
    e542:	2b00      	cmp	r3, #0
    e544:	d1bb      	bne.n	e4be <rpc_ip_event_handler+0x166>
    e546:	4630      	mov	r0, r6
    e548:	f005 fe7a 	bl	14240 <res_cookie_get>
    e54c:	69b2      	ldr	r2, [r6, #24]
    e54e:	6843      	ldr	r3, [r0, #4]
    e550:	601a      	str	r2, [r3, #0]
    e552:	6842      	ldr	r2, [r0, #4]
    e554:	7f13      	ldrb	r3, [r2, #28]
    e556:	f043 0308 	orr.w	r3, r3, #8
    e55a:	7713      	strb	r3, [r2, #28]
    e55c:	6843      	ldr	r3, [r0, #4]
    e55e:	6922      	ldr	r2, [r4, #16]
    e560:	611a      	str	r2, [r3, #16]
    e562:	6843      	ldr	r3, [r0, #4]
    e564:	6962      	ldr	r2, [r4, #20]
    e566:	615a      	str	r2, [r3, #20]
    e568:	e7a9      	b.n	e4be <rpc_ip_event_handler+0x166>
    e56a:	7f43      	ldrb	r3, [r0, #29]
    e56c:	3301      	adds	r3, #1
    e56e:	7743      	strb	r3, [r0, #29]
    e570:	e7ba      	b.n	e4e8 <rpc_ip_event_handler+0x190>
    e572:	4630      	mov	r0, r6
    e574:	f005 fe64 	bl	14240 <res_cookie_get>
    e578:	6973      	ldr	r3, [r6, #20]
    e57a:	b913      	cbnz	r3, e582 <rpc_ip_event_handler+0x22a>
    e57c:	69b3      	ldr	r3, [r6, #24]
    e57e:	6043      	str	r3, [r0, #4]
    e580:	e79d      	b.n	e4be <rpc_ip_event_handler+0x166>
    e582:	f04f 33ff 	mov.w	r3, #4294967295
    e586:	e7fa      	b.n	e57e <rpc_ip_event_handler+0x226>
    e588:	4629      	mov	r1, r5
    e58a:	4620      	mov	r0, r4
    e58c:	f005 f8ad 	bl	136ea <sock_pkt_append>
    e590:	e7aa      	b.n	e4e8 <rpc_ip_event_handler+0x190>
    e592:	bf00      	nop
    e594:	2000e6e8 	.word	0x2000e6e8

0000e598 <nrf_close>:
    e598:	b570      	push	{r4, r5, r6, lr}
    e59a:	4604      	mov	r4, r0
    e59c:	f7ff fcbe 	bl	df1c <sock_find>
    e5a0:	4605      	mov	r5, r0
    e5a2:	b930      	cbnz	r0, e5b2 <nrf_close+0x1a>
    e5a4:	2009      	movs	r0, #9
    e5a6:	f7fd fa47 	bl	ba38 <nrf_modem_os_errno_set>
    e5aa:	f04f 36ff 	mov.w	r6, #4294967295
    e5ae:	4630      	mov	r0, r6
    e5b0:	bd70      	pop	{r4, r5, r6, pc}
    e5b2:	f000 fd7f 	bl	f0b4 <nrf_modem_state_is_initialized>
    e5b6:	b960      	cbnz	r0, e5d2 <nrf_close+0x3a>
    e5b8:	2600      	movs	r6, #0
    e5ba:	4628      	mov	r0, r5
    e5bc:	f005 f8d8 	bl	13770 <sock_is_attaching>
    e5c0:	b118      	cbz	r0, e5ca <nrf_close+0x32>
    e5c2:	4b0e      	ldr	r3, [pc, #56]	; (e5fc <nrf_close+0x64>)
    e5c4:	6818      	ldr	r0, [r3, #0]
    e5c6:	f7fd fa89 	bl	badc <nrf_modem_os_sem_give>
    e5ca:	4620      	mov	r0, r4
    e5cc:	f7ff fcb8 	bl	df40 <_sock_close>
    e5d0:	e7ed      	b.n	e5ae <nrf_close+0x16>
    e5d2:	2000      	movs	r0, #0
    e5d4:	f004 ffff 	bl	135d6 <rpc_client_msg_alloc>
    e5d8:	4601      	mov	r1, r0
    e5da:	b908      	cbnz	r0, e5e0 <nrf_close+0x48>
    e5dc:	2069      	movs	r0, #105	; 0x69
    e5de:	e7e2      	b.n	e5a6 <nrf_close+0xe>
    e5e0:	6104      	str	r4, [r0, #16]
    e5e2:	f247 0009 	movw	r0, #28681	; 0x7009
    e5e6:	f005 fdfd 	bl	141e4 <req_forward>
    e5ea:	2800      	cmp	r0, #0
    e5ec:	d0e4      	beq.n	e5b8 <nrf_close+0x20>
    e5ee:	2816      	cmp	r0, #22
    e5f0:	d0e2      	beq.n	e5b8 <nrf_close+0x20>
    e5f2:	f7fd fa21 	bl	ba38 <nrf_modem_os_errno_set>
    e5f6:	f04f 36ff 	mov.w	r6, #4294967295
    e5fa:	e7de      	b.n	e5ba <nrf_close+0x22>
    e5fc:	2000d190 	.word	0x2000d190

0000e600 <nrf_sendto>:
    e600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e604:	4698      	mov	r8, r3
    e606:	2300      	movs	r3, #0
    e608:	b085      	sub	sp, #20
    e60a:	4682      	mov	sl, r0
    e60c:	4689      	mov	r9, r1
    e60e:	4616      	mov	r6, r2
    e610:	e9cd 3302 	strd	r3, r3, [sp, #8]
    e614:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    e616:	f7ff fc81 	bl	df1c <sock_find>
    e61a:	4605      	mov	r5, r0
    e61c:	b940      	cbnz	r0, e630 <nrf_sendto+0x30>
    e61e:	2009      	movs	r0, #9
    e620:	f7fd fa0a 	bl	ba38 <nrf_modem_os_errno_set>
    e624:	f04f 34ff 	mov.w	r4, #4294967295
    e628:	4620      	mov	r0, r4
    e62a:	b005      	add	sp, #20
    e62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e630:	f038 0340 	bics.w	r3, r8, #64	; 0x40
    e634:	d001      	beq.n	e63a <nrf_sendto+0x3a>
    e636:	205f      	movs	r0, #95	; 0x5f
    e638:	e7f2      	b.n	e620 <nrf_sendto+0x20>
    e63a:	f005 f8c7 	bl	137cc <sock_has_rai_no_data>
    e63e:	b128      	cbz	r0, e64c <nrf_sendto+0x4c>
    e640:	4628      	mov	r0, r5
    e642:	f005 f8b3 	bl	137ac <sock_has_error>
    e646:	b128      	cbz	r0, e654 <nrf_sendto+0x54>
    e648:	69a8      	ldr	r0, [r5, #24]
    e64a:	e7e9      	b.n	e620 <nrf_sendto+0x20>
    e64c:	4628      	mov	r0, r5
    e64e:	f005 f897 	bl	13780 <sock_is_closed>
    e652:	e7f8      	b.n	e646 <nrf_sendto+0x46>
    e654:	4628      	mov	r0, r5
    e656:	b1d7      	cbz	r7, e68e <nrf_sendto+0x8e>
    e658:	f005 f867 	bl	1372a <sock_is_stream>
    e65c:	bb00      	cbnz	r0, e6a0 <nrf_sendto+0xa0>
    e65e:	4639      	mov	r1, r7
    e660:	4628      	mov	r0, r5
    e662:	f005 f93f 	bl	138e4 <sock_sockaddr_fam_is_valid>
    e666:	b908      	cbnz	r0, e66c <nrf_sendto+0x6c>
    e668:	206a      	movs	r0, #106	; 0x6a
    e66a:	e7d9      	b.n	e620 <nrf_sendto+0x20>
    e66c:	4638      	mov	r0, r7
    e66e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e670:	f005 f924 	bl	138bc <sock_sockaddr_len_is_valid>
    e674:	b908      	cbnz	r0, e67a <nrf_sendto+0x7a>
    e676:	2016      	movs	r0, #22
    e678:	e7d2      	b.n	e620 <nrf_sendto+0x20>
    e67a:	4628      	mov	r0, r5
    e67c:	f005 f85a 	bl	13734 <sock_is_datagram>
    e680:	b170      	cbz	r0, e6a0 <nrf_sendto+0xa0>
    e682:	4628      	mov	r0, r5
    e684:	f005 f860 	bl	13748 <sock_proto_is_secure>
    e688:	b150      	cbz	r0, e6a0 <nrf_sendto+0xa0>
    e68a:	207f      	movs	r0, #127	; 0x7f
    e68c:	e7c8      	b.n	e620 <nrf_sendto+0x20>
    e68e:	f005 f851 	bl	13734 <sock_is_datagram>
    e692:	b128      	cbz	r0, e6a0 <nrf_sendto+0xa0>
    e694:	4628      	mov	r0, r5
    e696:	f005 f867 	bl	13768 <sock_is_connected>
    e69a:	b908      	cbnz	r0, e6a0 <nrf_sendto+0xa0>
    e69c:	2079      	movs	r0, #121	; 0x79
    e69e:	e7bf      	b.n	e620 <nrf_sendto+0x20>
    e6a0:	4628      	mov	r0, r5
    e6a2:	f005 f8d3 	bl	1384c <sock_sndtimeo_ms_get>
    e6a6:	9001      	str	r0, [sp, #4]
    e6a8:	4628      	mov	r0, r5
    e6aa:	f005 f865 	bl	13778 <sock_is_nonblock>
    e6ae:	bb78      	cbnz	r0, e710 <nrf_sendto+0x110>
    e6b0:	f3c8 1880 	ubfx	r8, r8, #6, #1
    e6b4:	4628      	mov	r0, r5
    e6b6:	f005 f838 	bl	1372a <sock_is_stream>
    e6ba:	b140      	cbz	r0, e6ce <nrf_sendto+0xce>
    e6bc:	4628      	mov	r0, r5
    e6be:	f005 f843 	bl	13748 <sock_proto_is_secure>
    e6c2:	b120      	cbz	r0, e6ce <nrf_sendto+0xce>
    e6c4:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
    e6c8:	bf28      	it	cs
    e6ca:	f44f 6600 	movcs.w	r6, #2048	; 0x800
    e6ce:	f004 ffaa 	bl	13626 <rpc_client_msg_data_tx_size>
    e6d2:	42b0      	cmp	r0, r6
    e6d4:	d206      	bcs.n	e6e4 <nrf_sendto+0xe4>
    e6d6:	4628      	mov	r0, r5
    e6d8:	f005 f827 	bl	1372a <sock_is_stream>
    e6dc:	b1d8      	cbz	r0, e716 <nrf_sendto+0x116>
    e6de:	f004 ffa2 	bl	13626 <rpc_client_msg_data_tx_size>
    e6e2:	4606      	mov	r6, r0
    e6e4:	4628      	mov	r0, r5
    e6e6:	f005 f868 	bl	137ba <sock_has_flow_control>
    e6ea:	b118      	cbz	r0, e6f4 <nrf_sendto+0xf4>
    e6ec:	4628      	mov	r0, r5
    e6ee:	f005 f847 	bl	13780 <sock_is_closed>
    e6f2:	b190      	cbz	r0, e71a <nrf_sendto+0x11a>
    e6f4:	4630      	mov	r0, r6
    e6f6:	f004 ff6e 	bl	135d6 <rpc_client_msg_alloc>
    e6fa:	4604      	mov	r4, r0
    e6fc:	b9e0      	cbnz	r0, e738 <nrf_sendto+0x138>
    e6fe:	2001      	movs	r0, #1
    e700:	a901      	add	r1, sp, #4
    e702:	f7fd f8d7 	bl	b8b4 <nrf_modem_os_timedwait>
    e706:	b998      	cbnz	r0, e730 <nrf_sendto+0x130>
    e708:	f1b8 0f00 	cmp.w	r8, #0
    e70c:	d0f2      	beq.n	e6f4 <nrf_sendto+0xf4>
    e70e:	e007      	b.n	e720 <nrf_sendto+0x120>
    e710:	f04f 0801 	mov.w	r8, #1
    e714:	e7ce      	b.n	e6b4 <nrf_sendto+0xb4>
    e716:	207a      	movs	r0, #122	; 0x7a
    e718:	e782      	b.n	e620 <nrf_sendto+0x20>
    e71a:	f1b8 0f00 	cmp.w	r8, #0
    e71e:	d001      	beq.n	e724 <nrf_sendto+0x124>
    e720:	200b      	movs	r0, #11
    e722:	e77d      	b.n	e620 <nrf_sendto+0x20>
    e724:	2002      	movs	r0, #2
    e726:	a901      	add	r1, sp, #4
    e728:	f7fd f8c4 	bl	b8b4 <nrf_modem_os_timedwait>
    e72c:	2800      	cmp	r0, #0
    e72e:	d0d9      	beq.n	e6e4 <nrf_sendto+0xe4>
    e730:	2800      	cmp	r0, #0
    e732:	bfb8      	it	lt
    e734:	4240      	neglt	r0, r0
    e736:	e773      	b.n	e620 <nrf_sendto+0x20>
    e738:	f8c0 a010 	str.w	sl, [r0, #16]
    e73c:	f1b9 0f00 	cmp.w	r9, #0
    e740:	d004      	beq.n	e74c <nrf_sendto+0x14c>
    e742:	4632      	mov	r2, r6
    e744:	4649      	mov	r1, r9
    e746:	6800      	ldr	r0, [r0, #0]
    e748:	f005 ff12 	bl	14570 <memcpy>
    e74c:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
    e750:	f1bb 0f00 	cmp.w	fp, #0
    e754:	d001      	beq.n	e75a <nrf_sendto+0x15a>
    e756:	2300      	movs	r3, #0
    e758:	632b      	str	r3, [r5, #48]	; 0x30
    e75a:	b3cf      	cbz	r7, e7d0 <nrf_sendto+0x1d0>
    e75c:	4628      	mov	r0, r5
    e75e:	f004 ffe4 	bl	1372a <sock_is_stream>
    e762:	bba8      	cbnz	r0, e7d0 <nrf_sendto+0x1d0>
    e764:	2318      	movs	r3, #24
    e766:	7260      	strb	r0, [r4, #9]
    e768:	7223      	strb	r3, [r4, #8]
    e76a:	72a0      	strb	r0, [r4, #10]
    e76c:	72e0      	strb	r0, [r4, #11]
    e76e:	f8c4 b014 	str.w	fp, [r4, #20]
    e772:	687b      	ldr	r3, [r7, #4]
    e774:	2b01      	cmp	r3, #1
    e776:	d012      	beq.n	e79e <nrf_sendto+0x19e>
    e778:	2b02      	cmp	r3, #2
    e77a:	d018      	beq.n	e7ae <nrf_sendto+0x1ae>
    e77c:	f247 0b07 	movw	fp, #28679	; 0x7007
    e780:	4620      	mov	r0, r4
    e782:	a902      	add	r1, sp, #8
    e784:	f005 fd5a 	bl	1423c <req_cookie_set>
    e788:	4621      	mov	r1, r4
    e78a:	4658      	mov	r0, fp
    e78c:	f005 fd2a 	bl	141e4 <req_forward>
    e790:	4603      	mov	r3, r0
    e792:	bb40      	cbnz	r0, e7e6 <nrf_sendto+0x1e6>
    e794:	e9dd 0402 	ldrd	r0, r4, [sp, #8]
    e798:	f004 ff40 	bl	1361c <rpc_client_msg_rx_free>
    e79c:	e744      	b.n	e628 <nrf_sendto+0x28>
    e79e:	893b      	ldrh	r3, [r7, #8]
    e7a0:	76e0      	strb	r0, [r4, #27]
    e7a2:	8323      	strh	r3, [r4, #24]
    e7a4:	2304      	movs	r3, #4
    e7a6:	76a3      	strb	r3, [r4, #26]
    e7a8:	68fb      	ldr	r3, [r7, #12]
    e7aa:	61e3      	str	r3, [r4, #28]
    e7ac:	e7e6      	b.n	e77c <nrf_sendto+0x17c>
    e7ae:	893b      	ldrh	r3, [r7, #8]
    e7b0:	f104 021c 	add.w	r2, r4, #28
    e7b4:	8323      	strh	r3, [r4, #24]
    e7b6:	2310      	movs	r3, #16
    e7b8:	76e0      	strb	r0, [r4, #27]
    e7ba:	76a3      	strb	r3, [r4, #26]
    e7bc:	f107 0120 	add.w	r1, r7, #32
    e7c0:	18fb      	adds	r3, r7, r3
    e7c2:	f853 0b04 	ldr.w	r0, [r3], #4
    e7c6:	428b      	cmp	r3, r1
    e7c8:	f842 0b04 	str.w	r0, [r2], #4
    e7cc:	d1f9      	bne.n	e7c2 <nrf_sendto+0x1c2>
    e7ce:	e7d5      	b.n	e77c <nrf_sendto+0x17c>
    e7d0:	2300      	movs	r3, #0
    e7d2:	2204      	movs	r2, #4
    e7d4:	f8c4 b014 	str.w	fp, [r4, #20]
    e7d8:	7222      	strb	r2, [r4, #8]
    e7da:	f247 0b06 	movw	fp, #28678	; 0x7006
    e7de:	7263      	strb	r3, [r4, #9]
    e7e0:	72a3      	strb	r3, [r4, #10]
    e7e2:	72e3      	strb	r3, [r4, #11]
    e7e4:	e7cc      	b.n	e780 <nrf_sendto+0x180>
    e7e6:	280c      	cmp	r0, #12
    e7e8:	dc0f      	bgt.n	e80a <nrf_sendto+0x20a>
    e7ea:	280a      	cmp	r0, #10
    e7ec:	dd10      	ble.n	e810 <nrf_sendto+0x210>
    e7ee:	4b09      	ldr	r3, [pc, #36]	; (e814 <nrf_sendto+0x214>)
    e7f0:	781b      	ldrb	r3, [r3, #0]
    e7f2:	b92b      	cbnz	r3, e800 <nrf_sendto+0x200>
    e7f4:	2001      	movs	r0, #1
    e7f6:	a901      	add	r1, sp, #4
    e7f8:	f7fd f85c 	bl	b8b4 <nrf_modem_os_timedwait>
    e7fc:	2800      	cmp	r0, #0
    e7fe:	d197      	bne.n	e730 <nrf_sendto+0x130>
    e800:	f1b8 0f00 	cmp.w	r8, #0
    e804:	f43f af6e 	beq.w	e6e4 <nrf_sendto+0xe4>
    e808:	e78a      	b.n	e720 <nrf_sendto+0x120>
    e80a:	288c      	cmp	r0, #140	; 0x8c
    e80c:	f43f af08 	beq.w	e620 <nrf_sendto+0x20>
    e810:	4618      	mov	r0, r3
    e812:	e705      	b.n	e620 <nrf_sendto+0x20>
    e814:	2000e6e8 	.word	0x2000e6e8

0000e818 <nrf_setsockopt>:
    e818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e81c:	b085      	sub	sp, #20
    e81e:	4681      	mov	r9, r0
    e820:	4688      	mov	r8, r1
    e822:	4617      	mov	r7, r2
    e824:	461e      	mov	r6, r3
    e826:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    e828:	f7ff fb78 	bl	df1c <sock_find>
    e82c:	4604      	mov	r4, r0
    e82e:	b938      	cbnz	r0, e840 <nrf_setsockopt+0x28>
    e830:	2009      	movs	r0, #9
    e832:	f7fd f901 	bl	ba38 <nrf_modem_os_errno_set>
    e836:	f04f 30ff 	mov.w	r0, #4294967295
    e83a:	b005      	add	sp, #20
    e83c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e840:	b916      	cbnz	r6, e848 <nrf_setsockopt+0x30>
    e842:	b10d      	cbz	r5, e848 <nrf_setsockopt+0x30>
    e844:	2016      	movs	r0, #22
    e846:	e7f4      	b.n	e832 <nrf_setsockopt+0x1a>
    e848:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
    e84c:	f000 80fe 	beq.w	ea4c <nrf_setsockopt+0x234>
    e850:	dc0c      	bgt.n	e86c <nrf_setsockopt+0x54>
    e852:	f1b8 0f01 	cmp.w	r8, #1
    e856:	d012      	beq.n	e87e <nrf_setsockopt+0x66>
    e858:	f1b8 0f06 	cmp.w	r8, #6
    e85c:	f000 80f0 	beq.w	ea40 <nrf_setsockopt+0x228>
    e860:	f1b8 0f00 	cmp.w	r8, #0
    e864:	f000 80f0 	beq.w	ea48 <nrf_setsockopt+0x230>
    e868:	206d      	movs	r0, #109	; 0x6d
    e86a:	e7e2      	b.n	e832 <nrf_setsockopt+0x1a>
    e86c:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
    e870:	f000 8092 	beq.w	e998 <nrf_setsockopt+0x180>
    e874:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    e878:	d1f6      	bne.n	e868 <nrf_setsockopt+0x50>
    e87a:	2f1e      	cmp	r7, #30
    e87c:	e0e1      	b.n	ea42 <nrf_setsockopt+0x22a>
    e87e:	2f3c      	cmp	r7, #60	; 0x3c
    e880:	dcf2      	bgt.n	e868 <nrf_setsockopt+0x50>
    e882:	2f31      	cmp	r7, #49	; 0x31
    e884:	dc0f      	bgt.n	e8a6 <nrf_setsockopt+0x8e>
    e886:	2f15      	cmp	r7, #21
    e888:	d046      	beq.n	e918 <nrf_setsockopt+0x100>
    e88a:	dc29      	bgt.n	e8e0 <nrf_setsockopt+0xc8>
    e88c:	2f02      	cmp	r7, #2
    e88e:	d03a      	beq.n	e906 <nrf_setsockopt+0xee>
    e890:	2f14      	cmp	r7, #20
    e892:	d1e9      	bne.n	e868 <nrf_setsockopt+0x50>
    e894:	f104 0020 	add.w	r0, r4, #32
    e898:	2d00      	cmp	r5, #0
    e89a:	d143      	bne.n	e924 <nrf_setsockopt+0x10c>
    e89c:	2300      	movs	r3, #0
    e89e:	6223      	str	r3, [r4, #32]
    e8a0:	6043      	str	r3, [r0, #4]
    e8a2:	2000      	movs	r0, #0
    e8a4:	e7c9      	b.n	e83a <nrf_setsockopt+0x22>
    e8a6:	3f32      	subs	r7, #50	; 0x32
    e8a8:	2f0a      	cmp	r7, #10
    e8aa:	d8dd      	bhi.n	e868 <nrf_setsockopt+0x50>
    e8ac:	a301      	add	r3, pc, #4	; (adr r3, e8b4 <nrf_setsockopt+0x9c>)
    e8ae:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
    e8b2:	bf00      	nop
    e8b4:	0000e97d 	.word	0x0000e97d
    e8b8:	0000e963 	.word	0x0000e963
    e8bc:	0000e96b 	.word	0x0000e96b
    e8c0:	0000e971 	.word	0x0000e971
    e8c4:	0000e977 	.word	0x0000e977
    e8c8:	0000e869 	.word	0x0000e869
    e8cc:	0000e869 	.word	0x0000e869
    e8d0:	0000e869 	.word	0x0000e869
    e8d4:	0000e869 	.word	0x0000e869
    e8d8:	0000e869 	.word	0x0000e869
    e8dc:	0000e935 	.word	0x0000e935
    e8e0:	2f19      	cmp	r7, #25
    e8e2:	d1c1      	bne.n	e868 <nrf_setsockopt+0x50>
    e8e4:	2e00      	cmp	r6, #0
    e8e6:	d0ad      	beq.n	e844 <nrf_setsockopt+0x2c>
    e8e8:	2203      	movs	r2, #3
    e8ea:	4969      	ldr	r1, [pc, #420]	; (ea90 <nrf_setsockopt+0x278>)
    e8ec:	4630      	mov	r0, r6
    e8ee:	f005 fe2f 	bl	14550 <memcmp>
    e8f2:	220a      	movs	r2, #10
    e8f4:	2100      	movs	r1, #0
    e8f6:	2800      	cmp	r0, #0
    e8f8:	d14c      	bne.n	e994 <nrf_setsockopt+0x17c>
    e8fa:	1cf0      	adds	r0, r6, #3
    e8fc:	f003 fc52 	bl	121a4 <strtoul>
    e900:	2504      	movs	r5, #4
    e902:	9003      	str	r0, [sp, #12]
    e904:	ae03      	add	r6, sp, #12
    e906:	4628      	mov	r0, r5
    e908:	f004 fe65 	bl	135d6 <rpc_client_msg_alloc>
    e90c:	4604      	mov	r4, r0
    e90e:	2800      	cmp	r0, #0
    e910:	f040 809e 	bne.w	ea50 <nrf_setsockopt+0x238>
    e914:	2069      	movs	r0, #105	; 0x69
    e916:	e78c      	b.n	e832 <nrf_setsockopt+0x1a>
    e918:	f104 0028 	add.w	r0, r4, #40	; 0x28
    e91c:	b915      	cbnz	r5, e924 <nrf_setsockopt+0x10c>
    e91e:	62a5      	str	r5, [r4, #40]	; 0x28
    e920:	6045      	str	r5, [r0, #4]
    e922:	e7be      	b.n	e8a2 <nrf_setsockopt+0x8a>
    e924:	2d08      	cmp	r5, #8
    e926:	462a      	mov	r2, r5
    e928:	4631      	mov	r1, r6
    e92a:	bf28      	it	cs
    e92c:	2208      	movcs	r2, #8
    e92e:	f005 fe1f 	bl	14570 <memcpy>
    e932:	e7b6      	b.n	e8a2 <nrf_setsockopt+0x8a>
    e934:	b17e      	cbz	r6, e956 <nrf_setsockopt+0x13e>
    e936:	2d08      	cmp	r5, #8
    e938:	d184      	bne.n	e844 <nrf_setsockopt+0x2c>
    e93a:	f7fe fe15 	bl	d568 <rpc_transport_data_rx_suspend>
    e93e:	e896 0003 	ldmia.w	r6, {r0, r1}
    e942:	f104 0334 	add.w	r3, r4, #52	; 0x34
    e946:	e883 0003 	stmia.w	r3, {r0, r1}
    e94a:	4620      	mov	r0, r4
    e94c:	f004 feb0 	bl	136b0 <sock_pollcb>
    e950:	f7fe fe10 	bl	d574 <rpc_transport_data_rx_resume>
    e954:	e7a5      	b.n	e8a2 <nrf_setsockopt+0x8a>
    e956:	2d00      	cmp	r5, #0
    e958:	f47f af74 	bne.w	e844 <nrf_setsockopt+0x2c>
    e95c:	6365      	str	r5, [r4, #52]	; 0x34
    e95e:	63a5      	str	r5, [r4, #56]	; 0x38
    e960:	e79f      	b.n	e8a2 <nrf_setsockopt+0x8a>
    e962:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    e966:	6323      	str	r3, [r4, #48]	; 0x30
    e968:	e79b      	b.n	e8a2 <nrf_setsockopt+0x8a>
    e96a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    e96e:	e7fa      	b.n	e966 <nrf_setsockopt+0x14e>
    e970:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    e974:	e7f7      	b.n	e966 <nrf_setsockopt+0x14e>
    e976:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    e97a:	e7f4      	b.n	e966 <nrf_setsockopt+0x14e>
    e97c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    e980:	6323      	str	r3, [r4, #48]	; 0x30
    e982:	2300      	movs	r3, #0
    e984:	4648      	mov	r0, r9
    e986:	461a      	mov	r2, r3
    e988:	4619      	mov	r1, r3
    e98a:	e9cd 3300 	strd	r3, r3, [sp]
    e98e:	f7ff fe37 	bl	e600 <nrf_sendto>
    e992:	e752      	b.n	e83a <nrf_setsockopt+0x22>
    e994:	4630      	mov	r0, r6
    e996:	e7b1      	b.n	e8fc <nrf_setsockopt+0xe4>
    e998:	1e7b      	subs	r3, r7, #1
    e99a:	2b11      	cmp	r3, #17
    e99c:	f63f af64 	bhi.w	e868 <nrf_setsockopt+0x50>
    e9a0:	a201      	add	r2, pc, #4	; (adr r2, e9a8 <nrf_setsockopt+0x190>)
    e9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e9a6:	bf00      	nop
    e9a8:	0000ea01 	.word	0x0000ea01
    e9ac:	0000ea31 	.word	0x0000ea31
    e9b0:	0000e907 	.word	0x0000e907
    e9b4:	0000e869 	.word	0x0000e869
    e9b8:	0000ea21 	.word	0x0000ea21
    e9bc:	0000e9f1 	.word	0x0000e9f1
    e9c0:	0000e869 	.word	0x0000e869
    e9c4:	0000e869 	.word	0x0000e869
    e9c8:	0000e869 	.word	0x0000e869
    e9cc:	0000e869 	.word	0x0000e869
    e9d0:	0000e869 	.word	0x0000e869
    e9d4:	0000ea11 	.word	0x0000ea11
    e9d8:	0000e907 	.word	0x0000e907
    e9dc:	0000e907 	.word	0x0000e907
    e9e0:	0000e907 	.word	0x0000e907
    e9e4:	0000e869 	.word	0x0000e869
    e9e8:	0000e907 	.word	0x0000e907
    e9ec:	0000e907 	.word	0x0000e907
    e9f0:	462a      	mov	r2, r5
    e9f2:	4631      	mov	r1, r6
    e9f4:	4620      	mov	r0, r4
    e9f6:	b005      	add	sp, #20
    e9f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e9fc:	f005 babf 	b.w	13f7e <tls_setopt_role>
    ea00:	462a      	mov	r2, r5
    ea02:	4631      	mov	r1, r6
    ea04:	4620      	mov	r0, r4
    ea06:	b005      	add	sp, #20
    ea08:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ea0c:	f005 bacb 	b.w	13fa6 <tls_setopt_taglist>
    ea10:	462a      	mov	r2, r5
    ea12:	4631      	mov	r1, r6
    ea14:	4620      	mov	r0, r4
    ea16:	b005      	add	sp, #20
    ea18:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ea1c:	f005 bad8 	b.w	13fd0 <tls_setopt_sess_cache>
    ea20:	462a      	mov	r2, r5
    ea22:	4631      	mov	r1, r6
    ea24:	4620      	mov	r0, r4
    ea26:	b005      	add	sp, #20
    ea28:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ea2c:	f005 bae2 	b.w	13ff4 <tls_setopt_peer_verify>
    ea30:	462a      	mov	r2, r5
    ea32:	4631      	mov	r1, r6
    ea34:	4620      	mov	r0, r4
    ea36:	b005      	add	sp, #20
    ea38:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ea3c:	f005 bae9 	b.w	14012 <tls_setopt_hostname>
    ea40:	2f37      	cmp	r7, #55	; 0x37
    ea42:	f43f af60 	beq.w	e906 <nrf_setsockopt+0xee>
    ea46:	e70f      	b.n	e868 <nrf_setsockopt+0x50>
    ea48:	2f1f      	cmp	r7, #31
    ea4a:	e7fa      	b.n	ea42 <nrf_setsockopt+0x22a>
    ea4c:	2f20      	cmp	r7, #32
    ea4e:	e7f8      	b.n	ea42 <nrf_setsockopt+0x22a>
    ea50:	2300      	movs	r3, #0
    ea52:	2208      	movs	r2, #8
    ea54:	7243      	strb	r3, [r0, #9]
    ea56:	7202      	strb	r2, [r0, #8]
    ea58:	7283      	strb	r3, [r0, #10]
    ea5a:	72c3      	strb	r3, [r0, #11]
    ea5c:	f8c0 9010 	str.w	r9, [r0, #16]
    ea60:	4640      	mov	r0, r8
    ea62:	f005 fb88 	bl	14176 <nrf_sol_to_rpc_sol>
    ea66:	6160      	str	r0, [r4, #20]
    ea68:	4638      	mov	r0, r7
    ea6a:	f000 f9b5 	bl	edd8 <nrf_so_to_rpc_so>
    ea6e:	4631      	mov	r1, r6
    ea70:	61a0      	str	r0, [r4, #24]
    ea72:	462a      	mov	r2, r5
    ea74:	6820      	ldr	r0, [r4, #0]
    ea76:	f005 fd7b 	bl	14570 <memcpy>
    ea7a:	4621      	mov	r1, r4
    ea7c:	f247 0003 	movw	r0, #28675	; 0x7003
    ea80:	6065      	str	r5, [r4, #4]
    ea82:	f005 fbaf 	bl	141e4 <req_forward>
    ea86:	2800      	cmp	r0, #0
    ea88:	f43f af0b 	beq.w	e8a2 <nrf_setsockopt+0x8a>
    ea8c:	e6d1      	b.n	e832 <nrf_setsockopt+0x1a>
    ea8e:	bf00      	nop
    ea90:	0001650e 	.word	0x0001650e

0000ea94 <nrf_getsockopt>:
    ea94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ea98:	9c08      	ldr	r4, [sp, #32]
    ea9a:	4681      	mov	r9, r0
    ea9c:	4688      	mov	r8, r1
    ea9e:	4617      	mov	r7, r2
    eaa0:	461e      	mov	r6, r3
    eaa2:	f7ff fa3b 	bl	df1c <sock_find>
    eaa6:	b930      	cbnz	r0, eab6 <nrf_getsockopt+0x22>
    eaa8:	2009      	movs	r0, #9
    eaaa:	f7fc ffc5 	bl	ba38 <nrf_modem_os_errno_set>
    eaae:	f04f 30ff 	mov.w	r0, #4294967295
    eab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eab6:	b106      	cbz	r6, eaba <nrf_getsockopt+0x26>
    eab8:	b90c      	cbnz	r4, eabe <nrf_getsockopt+0x2a>
    eaba:	200e      	movs	r0, #14
    eabc:	e7f5      	b.n	eaaa <nrf_getsockopt+0x16>
    eabe:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
    eac2:	f000 8096 	beq.w	ebf2 <nrf_getsockopt+0x15e>
    eac6:	dc0c      	bgt.n	eae2 <nrf_getsockopt+0x4e>
    eac8:	f1b8 0f01 	cmp.w	r8, #1
    eacc:	d011      	beq.n	eaf2 <nrf_getsockopt+0x5e>
    eace:	f1b8 0f06 	cmp.w	r8, #6
    ead2:	f000 8082 	beq.w	ebda <nrf_getsockopt+0x146>
    ead6:	f1b8 0f00 	cmp.w	r8, #0
    eada:	f000 8088 	beq.w	ebee <nrf_getsockopt+0x15a>
    eade:	206d      	movs	r0, #109	; 0x6d
    eae0:	e7e3      	b.n	eaaa <nrf_getsockopt+0x16>
    eae2:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
    eae6:	d024      	beq.n	eb32 <nrf_getsockopt+0x9e>
    eae8:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    eaec:	d1f7      	bne.n	eade <nrf_getsockopt+0x4a>
    eaee:	2f1e      	cmp	r7, #30
    eaf0:	e074      	b.n	ebdc <nrf_getsockopt+0x148>
    eaf2:	2f14      	cmp	r7, #20
    eaf4:	d00a      	beq.n	eb0c <nrf_getsockopt+0x78>
    eaf6:	2f15      	cmp	r7, #21
    eaf8:	d013      	beq.n	eb22 <nrf_getsockopt+0x8e>
    eafa:	2f04      	cmp	r7, #4
    eafc:	d1ef      	bne.n	eade <nrf_getsockopt+0x4a>
    eafe:	6983      	ldr	r3, [r0, #24]
    eb00:	6027      	str	r7, [r4, #0]
    eb02:	6033      	str	r3, [r6, #0]
    eb04:	2300      	movs	r3, #0
    eb06:	6183      	str	r3, [r0, #24]
    eb08:	2000      	movs	r0, #0
    eb0a:	e7d2      	b.n	eab2 <nrf_getsockopt+0x1e>
    eb0c:	6822      	ldr	r2, [r4, #0]
    eb0e:	f100 0120 	add.w	r1, r0, #32
    eb12:	2a08      	cmp	r2, #8
    eb14:	bf28      	it	cs
    eb16:	2208      	movcs	r2, #8
    eb18:	6022      	str	r2, [r4, #0]
    eb1a:	4630      	mov	r0, r6
    eb1c:	f005 fd28 	bl	14570 <memcpy>
    eb20:	e7f2      	b.n	eb08 <nrf_getsockopt+0x74>
    eb22:	6822      	ldr	r2, [r4, #0]
    eb24:	f100 0128 	add.w	r1, r0, #40	; 0x28
    eb28:	2a08      	cmp	r2, #8
    eb2a:	bf28      	it	cs
    eb2c:	2208      	movcs	r2, #8
    eb2e:	6022      	str	r2, [r4, #0]
    eb30:	e7f3      	b.n	eb1a <nrf_getsockopt+0x86>
    eb32:	1e7b      	subs	r3, r7, #1
    eb34:	2b12      	cmp	r3, #18
    eb36:	d8d2      	bhi.n	eade <nrf_getsockopt+0x4a>
    eb38:	a201      	add	r2, pc, #4	; (adr r2, eb40 <nrf_getsockopt+0xac>)
    eb3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    eb3e:	bf00      	nop
    eb40:	0000ebad 	.word	0x0000ebad
    eb44:	0000ebc3 	.word	0x0000ebc3
    eb48:	0000ebe1 	.word	0x0000ebe1
    eb4c:	0000ebe1 	.word	0x0000ebe1
    eb50:	0000eba3 	.word	0x0000eba3
    eb54:	0000eb8d 	.word	0x0000eb8d
    eb58:	0000eadf 	.word	0x0000eadf
    eb5c:	0000eadf 	.word	0x0000eadf
    eb60:	0000eadf 	.word	0x0000eadf
    eb64:	0000eadf 	.word	0x0000eadf
    eb68:	0000eadf 	.word	0x0000eadf
    eb6c:	0000eb99 	.word	0x0000eb99
    eb70:	0000eadf 	.word	0x0000eadf
    eb74:	0000ebe1 	.word	0x0000ebe1
    eb78:	0000ebe1 	.word	0x0000ebe1
    eb7c:	0000ebe1 	.word	0x0000ebe1
    eb80:	0000eadf 	.word	0x0000eadf
    eb84:	0000eadf 	.word	0x0000eadf
    eb88:	0000ebe1 	.word	0x0000ebe1
    eb8c:	2304      	movs	r3, #4
    eb8e:	6023      	str	r3, [r4, #0]
    eb90:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    eb94:	6033      	str	r3, [r6, #0]
    eb96:	e7b7      	b.n	eb08 <nrf_getsockopt+0x74>
    eb98:	2304      	movs	r3, #4
    eb9a:	6023      	str	r3, [r4, #0]
    eb9c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
    eba0:	e7f8      	b.n	eb94 <nrf_getsockopt+0x100>
    eba2:	2304      	movs	r3, #4
    eba4:	6023      	str	r3, [r4, #0]
    eba6:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
    ebaa:	e7f3      	b.n	eb94 <nrf_getsockopt+0x100>
    ebac:	f890 2047 	ldrb.w	r2, [r0, #71]	; 0x47
    ebb0:	6823      	ldr	r3, [r4, #0]
    ebb2:	0092      	lsls	r2, r2, #2
    ebb4:	429a      	cmp	r2, r3
    ebb6:	bf28      	it	cs
    ebb8:	461a      	movcs	r2, r3
    ebba:	f100 0148 	add.w	r1, r0, #72	; 0x48
    ebbe:	6022      	str	r2, [r4, #0]
    ebc0:	e7ab      	b.n	eb1a <nrf_getsockopt+0x86>
    ebc2:	6c05      	ldr	r5, [r0, #64]	; 0x40
    ebc4:	4628      	mov	r0, r5
    ebc6:	f7f9 fc25 	bl	8414 <strlen>
    ebca:	6823      	ldr	r3, [r4, #0]
    ebcc:	1c42      	adds	r2, r0, #1
    ebce:	429a      	cmp	r2, r3
    ebd0:	bf28      	it	cs
    ebd2:	461a      	movcs	r2, r3
    ebd4:	4629      	mov	r1, r5
    ebd6:	6022      	str	r2, [r4, #0]
    ebd8:	e79f      	b.n	eb1a <nrf_getsockopt+0x86>
    ebda:	2f37      	cmp	r7, #55	; 0x37
    ebdc:	f47f af7f 	bne.w	eade <nrf_getsockopt+0x4a>
    ebe0:	6820      	ldr	r0, [r4, #0]
    ebe2:	f004 fcf8 	bl	135d6 <rpc_client_msg_alloc>
    ebe6:	4605      	mov	r5, r0
    ebe8:	b928      	cbnz	r0, ebf6 <nrf_getsockopt+0x162>
    ebea:	2069      	movs	r0, #105	; 0x69
    ebec:	e75d      	b.n	eaaa <nrf_getsockopt+0x16>
    ebee:	2f1f      	cmp	r7, #31
    ebf0:	e7f4      	b.n	ebdc <nrf_getsockopt+0x148>
    ebf2:	2f20      	cmp	r7, #32
    ebf4:	e7f2      	b.n	ebdc <nrf_getsockopt+0x148>
    ebf6:	2300      	movs	r3, #0
    ebf8:	2208      	movs	r2, #8
    ebfa:	7243      	strb	r3, [r0, #9]
    ebfc:	7202      	strb	r2, [r0, #8]
    ebfe:	7283      	strb	r3, [r0, #10]
    ec00:	72c3      	strb	r3, [r0, #11]
    ec02:	f8c0 9010 	str.w	r9, [r0, #16]
    ec06:	4640      	mov	r0, r8
    ec08:	f005 fab5 	bl	14176 <nrf_sol_to_rpc_sol>
    ec0c:	6168      	str	r0, [r5, #20]
    ec0e:	4638      	mov	r0, r7
    ec10:	f000 f8e2 	bl	edd8 <nrf_so_to_rpc_so>
    ec14:	4629      	mov	r1, r5
    ec16:	61a8      	str	r0, [r5, #24]
    ec18:	f247 0004 	movw	r0, #28676	; 0x7004
    ec1c:	f8d5 8000 	ldr.w	r8, [r5]
    ec20:	f005 fae0 	bl	141e4 <req_forward>
    ec24:	4607      	mov	r7, r0
    ec26:	b120      	cbz	r0, ec32 <nrf_getsockopt+0x19e>
    ec28:	4640      	mov	r0, r8
    ec2a:	f004 fd00 	bl	1362e <rpc_client_msg_data_tx_free>
    ec2e:	4638      	mov	r0, r7
    ec30:	e73b      	b.n	eaaa <nrf_getsockopt+0x16>
    ec32:	686a      	ldr	r2, [r5, #4]
    ec34:	6823      	ldr	r3, [r4, #0]
    ec36:	4641      	mov	r1, r8
    ec38:	429a      	cmp	r2, r3
    ec3a:	bf28      	it	cs
    ec3c:	461a      	movcs	r2, r3
    ec3e:	4630      	mov	r0, r6
    ec40:	6022      	str	r2, [r4, #0]
    ec42:	f005 fc95 	bl	14570 <memcpy>
    ec46:	4640      	mov	r0, r8
    ec48:	f004 fcf1 	bl	1362e <rpc_client_msg_data_tx_free>
    ec4c:	e75c      	b.n	eb08 <nrf_getsockopt+0x74>
    ec4e:	bf00      	nop

0000ec50 <rpc_ip_init>:
    ec50:	b508      	push	{r3, lr}
    ec52:	f7ff f921 	bl	de98 <sock_init>
    ec56:	f7ff f9e9 	bl	e02c <addrinfo_init>
    ec5a:	2200      	movs	r2, #0
    ec5c:	4b05      	ldr	r3, [pc, #20]	; (ec74 <rpc_ip_init+0x24>)
    ec5e:	4806      	ldr	r0, [pc, #24]	; (ec78 <rpc_ip_init+0x28>)
    ec60:	701a      	strb	r2, [r3, #0]
    ec62:	2201      	movs	r2, #1
    ec64:	4611      	mov	r1, r2
    ec66:	f7fc ff05 	bl	ba74 <nrf_modem_os_sem_init>
    ec6a:	2800      	cmp	r0, #0
    ec6c:	bf18      	it	ne
    ec6e:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
    ec72:	bd08      	pop	{r3, pc}
    ec74:	2000e6e8 	.word	0x2000e6e8
    ec78:	2000d190 	.word	0x2000d190

0000ec7c <on_tls_attach_res>:
    ec7c:	b510      	push	{r4, lr}
    ec7e:	6943      	ldr	r3, [r0, #20]
    ec80:	460c      	mov	r4, r1
    ec82:	b15b      	cbz	r3, ec9c <on_tls_attach_res+0x20>
    ec84:	7f0b      	ldrb	r3, [r1, #28]
    ec86:	f36f 1304 	bfc	r3, #4, #1
    ec8a:	770b      	strb	r3, [r1, #28]
    ec8c:	6940      	ldr	r0, [r0, #20]
    ec8e:	f000 f8af 	bl	edf0 <rpc_error_to_nrf_errno>
    ec92:	4b03      	ldr	r3, [pc, #12]	; (eca0 <on_tls_attach_res+0x24>)
    ec94:	61a0      	str	r0, [r4, #24]
    ec96:	6818      	ldr	r0, [r3, #0]
    ec98:	f7fc ff20 	bl	badc <nrf_modem_os_sem_give>
    ec9c:	2000      	movs	r0, #0
    ec9e:	bd10      	pop	{r4, pc}
    eca0:	2000d190 	.word	0x2000d190

0000eca4 <on_tls_handshake_ntf>:
    eca4:	b510      	push	{r4, lr}
    eca6:	7f0b      	ldrb	r3, [r1, #28]
    eca8:	460c      	mov	r4, r1
    ecaa:	f36f 1304 	bfc	r3, #4, #1
    ecae:	770b      	strb	r3, [r1, #28]
    ecb0:	6900      	ldr	r0, [r0, #16]
    ecb2:	b958      	cbnz	r0, eccc <on_tls_handshake_ntf+0x28>
    ecb4:	b2db      	uxtb	r3, r3
    ecb6:	f023 0328 	bic.w	r3, r3, #40	; 0x28
    ecba:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    ecbe:	770b      	strb	r3, [r1, #28]
    ecc0:	4b04      	ldr	r3, [pc, #16]	; (ecd4 <on_tls_handshake_ntf+0x30>)
    ecc2:	6818      	ldr	r0, [r3, #0]
    ecc4:	f7fc ff0a 	bl	badc <nrf_modem_os_sem_give>
    ecc8:	2000      	movs	r0, #0
    ecca:	bd10      	pop	{r4, pc}
    eccc:	f000 f890 	bl	edf0 <rpc_error_to_nrf_errno>
    ecd0:	61a0      	str	r0, [r4, #24]
    ecd2:	e7f5      	b.n	ecc0 <on_tls_handshake_ntf+0x1c>
    ecd4:	2000d190 	.word	0x2000d190

0000ecd8 <tls_attach>:
    ecd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ecdc:	f8df 80e4 	ldr.w	r8, [pc, #228]	; edc4 <tls_attach+0xec>
    ece0:	4605      	mov	r5, r0
    ece2:	f8d8 0000 	ldr.w	r0, [r8]
    ece6:	9101      	str	r1, [sp, #4]
    ece8:	f7fc ff1c 	bl	bb24 <nrf_modem_os_sem_take>
    ecec:	4607      	mov	r7, r0
    ecee:	b150      	cbz	r0, ed06 <tls_attach+0x2e>
    ecf0:	9b01      	ldr	r3, [sp, #4]
    ecf2:	2b00      	cmp	r3, #0
    ecf4:	d163      	bne.n	edbe <tls_attach+0xe6>
    ecf6:	2310      	movs	r3, #16
    ecf8:	61ab      	str	r3, [r5, #24]
    ecfa:	f04f 37ff 	mov.w	r7, #4294967295
    ecfe:	4638      	mov	r0, r7
    ed00:	b002      	add	sp, #8
    ed02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed06:	6c28      	ldr	r0, [r5, #64]	; 0x40
    ed08:	b1a8      	cbz	r0, ed36 <tls_attach+0x5e>
    ed0a:	f7f9 fb83 	bl	8414 <strlen>
    ed0e:	1c46      	adds	r6, r0, #1
    ed10:	4630      	mov	r0, r6
    ed12:	f004 fc60 	bl	135d6 <rpc_client_msg_alloc>
    ed16:	4604      	mov	r4, r0
    ed18:	b978      	cbnz	r0, ed3a <tls_attach+0x62>
    ed1a:	4628      	mov	r0, r5
    ed1c:	f004 fd2c 	bl	13778 <sock_is_nonblock>
    ed20:	b108      	cbz	r0, ed26 <tls_attach+0x4e>
    ed22:	2369      	movs	r3, #105	; 0x69
    ed24:	61ab      	str	r3, [r5, #24]
    ed26:	f8d8 0000 	ldr.w	r0, [r8]
    ed2a:	f7fc fed7 	bl	badc <nrf_modem_os_sem_give>
    ed2e:	2069      	movs	r0, #105	; 0x69
    ed30:	f7fc fe82 	bl	ba38 <nrf_modem_os_errno_set>
    ed34:	e7e1      	b.n	ecfa <tls_attach+0x22>
    ed36:	463e      	mov	r6, r7
    ed38:	e7ea      	b.n	ed10 <tls_attach+0x38>
    ed3a:	682b      	ldr	r3, [r5, #0]
    ed3c:	2204      	movs	r2, #4
    ed3e:	6103      	str	r3, [r0, #16]
    ed40:	2300      	movs	r3, #0
    ed42:	7202      	strb	r2, [r0, #8]
    ed44:	7243      	strb	r3, [r0, #9]
    ed46:	7283      	strb	r3, [r0, #10]
    ed48:	72c3      	strb	r3, [r0, #11]
    ed4a:	f895 2047 	ldrb.w	r2, [r5, #71]	; 0x47
    ed4e:	f105 0144 	add.w	r1, r5, #68	; 0x44
    ed52:	3201      	adds	r2, #1
    ed54:	0092      	lsls	r2, r2, #2
    ed56:	6082      	str	r2, [r0, #8]
    ed58:	3014      	adds	r0, #20
    ed5a:	f005 fc09 	bl	14570 <memcpy>
    ed5e:	b1e6      	cbz	r6, ed9a <tls_attach+0xc2>
    ed60:	4632      	mov	r2, r6
    ed62:	6c29      	ldr	r1, [r5, #64]	; 0x40
    ed64:	6820      	ldr	r0, [r4, #0]
    ed66:	f005 fc2d 	bl	145c4 <strncpy>
    ed6a:	6066      	str	r6, [r4, #4]
    ed6c:	7f2b      	ldrb	r3, [r5, #28]
    ed6e:	2004      	movs	r0, #4
    ed70:	f043 0310 	orr.w	r3, r3, #16
    ed74:	4622      	mov	r2, r4
    ed76:	f247 0181 	movw	r1, #28801	; 0x7081
    ed7a:	772b      	strb	r3, [r5, #28]
    ed7c:	f004 fc47 	bl	1360e <rpc_client_msg_send>
    ed80:	4628      	mov	r0, r5
    ed82:	f004 fcf9 	bl	13778 <sock_is_nonblock>
    ed86:	2800      	cmp	r0, #0
    ed88:	d1b9      	bne.n	ecfe <tls_attach+0x26>
    ed8a:	4628      	mov	r0, r5
    ed8c:	f004 fcf0 	bl	13770 <sock_is_attaching>
    ed90:	b940      	cbnz	r0, eda4 <tls_attach+0xcc>
    ed92:	69a8      	ldr	r0, [r5, #24]
    ed94:	2800      	cmp	r0, #0
    ed96:	d0b2      	beq.n	ecfe <tls_attach+0x26>
    ed98:	e7ca      	b.n	ed30 <tls_attach+0x58>
    ed9a:	7026      	strb	r6, [r4, #0]
    ed9c:	7066      	strb	r6, [r4, #1]
    ed9e:	70a6      	strb	r6, [r4, #2]
    eda0:	70e6      	strb	r6, [r4, #3]
    eda2:	e7e2      	b.n	ed6a <tls_attach+0x92>
    eda4:	2002      	movs	r0, #2
    eda6:	a901      	add	r1, sp, #4
    eda8:	f7fc fd84 	bl	b8b4 <nrf_modem_os_timedwait>
    edac:	f110 0f0b 	cmn.w	r0, #11
    edb0:	d005      	beq.n	edbe <tls_attach+0xe6>
    edb2:	2800      	cmp	r0, #0
    edb4:	d0e9      	beq.n	ed8a <tls_attach+0xb2>
    edb6:	2800      	cmp	r0, #0
    edb8:	bfb8      	it	lt
    edba:	4240      	neglt	r0, r0
    edbc:	e7b8      	b.n	ed30 <tls_attach+0x58>
    edbe:	2074      	movs	r0, #116	; 0x74
    edc0:	e7b6      	b.n	ed30 <tls_attach+0x58>
    edc2:	bf00      	nop
    edc4:	2000d190 	.word	0x2000d190

0000edc8 <nrf_af_to_rpc_af>:
    edc8:	2803      	cmp	r0, #3
    edca:	bf9c      	itt	ls
    edcc:	4b01      	ldrls	r3, [pc, #4]	; (edd4 <nrf_af_to_rpc_af+0xc>)
    edce:	5618      	ldrsbls	r0, [r3, r0]
    edd0:	4770      	bx	lr
    edd2:	bf00      	nop
    edd4:	00016512 	.word	0x00016512

0000edd8 <nrf_so_to_rpc_so>:
    edd8:	3802      	subs	r0, #2
    edda:	2835      	cmp	r0, #53	; 0x35
    eddc:	bf9a      	itte	ls
    edde:	4b03      	ldrls	r3, [pc, #12]	; (edec <nrf_so_to_rpc_so+0x14>)
    ede0:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    ede4:	f04f 30ff 	movhi.w	r0, #4294967295
    ede8:	4770      	bx	lr
    edea:	bf00      	nop
    edec:	00015058 	.word	0x00015058

0000edf0 <rpc_error_to_nrf_errno>:
    edf0:	2870      	cmp	r0, #112	; 0x70
    edf2:	bf9a      	itte	ls
    edf4:	4b02      	ldrls	r3, [pc, #8]	; (ee00 <rpc_error_to_nrf_errno+0x10>)
    edf6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    edfa:	4802      	ldrhi	r0, [pc, #8]	; (ee04 <rpc_error_to_nrf_errno+0x14>)
    edfc:	4770      	bx	lr
    edfe:	bf00      	nop
    ee00:	00014e94 	.word	0x00014e94
    ee04:	baadbaad 	.word	0xbaadbaad

0000ee08 <rpc_gnss_event_handler>:
    ee08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ee0a:	6804      	ldr	r4, [r0, #0]
    ee0c:	4606      	mov	r6, r0
    ee0e:	b13c      	cbz	r4, ee20 <rpc_gnss_event_handler+0x18>
    ee10:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
    ee14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    ee18:	d104      	bne.n	ee24 <rpc_gnss_event_handler+0x1c>
    ee1a:	4b41      	ldr	r3, [pc, #260]	; (ef20 <rpc_gnss_event_handler+0x118>)
    ee1c:	e9c3 1400 	strd	r1, r4, [r3]
    ee20:	2000      	movs	r0, #0
    ee22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ee24:	4d3f      	ldr	r5, [pc, #252]	; (ef24 <rpc_gnss_event_handler+0x11c>)
    ee26:	682b      	ldr	r3, [r5, #0]
    ee28:	2b00      	cmp	r3, #0
    ee2a:	d06f      	beq.n	ef0c <rpc_gnss_event_handler+0x104>
    ee2c:	f244 0204 	movw	r2, #16388	; 0x4004
    ee30:	4291      	cmp	r1, r2
    ee32:	d80b      	bhi.n	ee4c <rpc_gnss_event_handler+0x44>
    ee34:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    ee38:	d968      	bls.n	ef0c <rpc_gnss_event_handler+0x104>
    ee3a:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
    ee3e:	3902      	subs	r1, #2
    ee40:	2902      	cmp	r1, #2
    ee42:	d82a      	bhi.n	ee9a <rpc_gnss_event_handler+0x92>
    ee44:	e8df f001 	tbb	[pc, r1]
    ee48:	5047      	.short	0x5047
    ee4a:	59          	.byte	0x59
    ee4b:	00          	.byte	0x00
    ee4c:	f244 1301 	movw	r3, #16641	; 0x4101
    ee50:	4299      	cmp	r1, r3
    ee52:	d02e      	beq.n	eeb2 <rpc_gnss_event_handler+0xaa>
    ee54:	f244 2301 	movw	r3, #16897	; 0x4201
    ee58:	4299      	cmp	r1, r3
    ee5a:	d157      	bne.n	ef0c <rpc_gnss_event_handler+0x104>
    ee5c:	4e32      	ldr	r6, [pc, #200]	; (ef28 <rpc_gnss_event_handler+0x120>)
    ee5e:	6830      	ldr	r0, [r6, #0]
    ee60:	b108      	cbz	r0, ee66 <rpc_gnss_event_handler+0x5e>
    ee62:	f004 fbde 	bl	13622 <rpc_client_msg_data_rx_free>
    ee66:	2202      	movs	r2, #2
    ee68:	4b30      	ldr	r3, [pc, #192]	; (ef2c <rpc_gnss_event_handler+0x124>)
    ee6a:	6034      	str	r4, [r6, #0]
    ee6c:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
    ee70:	701a      	strb	r2, [r3, #0]
    ee72:	4e2f      	ldr	r6, [pc, #188]	; (ef30 <rpc_gnss_event_handler+0x128>)
    ee74:	f014 0708 	ands.w	r7, r4, #8
    ee78:	682b      	ldr	r3, [r5, #0]
    ee7a:	7832      	ldrb	r2, [r6, #0]
    ee7c:	d025      	beq.n	eeca <rpc_gnss_event_handler+0xc2>
    ee7e:	b91a      	cbnz	r2, ee88 <rpc_gnss_event_handler+0x80>
    ee80:	2005      	movs	r0, #5
    ee82:	4798      	blx	r3
    ee84:	2301      	movs	r3, #1
    ee86:	7033      	strb	r3, [r6, #0]
    ee88:	07e3      	lsls	r3, r4, #31
    ee8a:	d502      	bpl.n	ee92 <rpc_gnss_event_handler+0x8a>
    ee8c:	2002      	movs	r0, #2
    ee8e:	682b      	ldr	r3, [r5, #0]
    ee90:	4798      	blx	r3
    ee92:	2001      	movs	r0, #1
    ee94:	682b      	ldr	r3, [r5, #0]
    ee96:	4798      	blx	r3
    ee98:	e7c2      	b.n	ee20 <rpc_gnss_event_handler+0x18>
    ee9a:	4e23      	ldr	r6, [pc, #140]	; (ef28 <rpc_gnss_event_handler+0x120>)
    ee9c:	6830      	ldr	r0, [r6, #0]
    ee9e:	b108      	cbz	r0, eea4 <rpc_gnss_event_handler+0x9c>
    eea0:	f004 fbbf 	bl	13622 <rpc_client_msg_data_rx_free>
    eea4:	2200      	movs	r2, #0
    eea6:	4b21      	ldr	r3, [pc, #132]	; (ef2c <rpc_gnss_event_handler+0x124>)
    eea8:	6034      	str	r4, [r6, #0]
    eeaa:	701a      	strb	r2, [r3, #0]
    eeac:	f894 403d 	ldrb.w	r4, [r4, #61]	; 0x3d
    eeb0:	e7df      	b.n	ee72 <rpc_gnss_event_handler+0x6a>
    eeb2:	4e1d      	ldr	r6, [pc, #116]	; (ef28 <rpc_gnss_event_handler+0x120>)
    eeb4:	6830      	ldr	r0, [r6, #0]
    eeb6:	b108      	cbz	r0, eebc <rpc_gnss_event_handler+0xb4>
    eeb8:	f004 fbb3 	bl	13622 <rpc_client_msg_data_rx_free>
    eebc:	2201      	movs	r2, #1
    eebe:	4b1b      	ldr	r3, [pc, #108]	; (ef2c <rpc_gnss_event_handler+0x124>)
    eec0:	6034      	str	r4, [r6, #0]
    eec2:	701a      	strb	r2, [r3, #0]
    eec4:	f894 4041 	ldrb.w	r4, [r4, #65]	; 0x41
    eec8:	e7d3      	b.n	ee72 <rpc_gnss_event_handler+0x6a>
    eeca:	2a00      	cmp	r2, #0
    eecc:	d0dc      	beq.n	ee88 <rpc_gnss_event_handler+0x80>
    eece:	2006      	movs	r0, #6
    eed0:	4798      	blx	r3
    eed2:	7037      	strb	r7, [r6, #0]
    eed4:	e7d8      	b.n	ee88 <rpc_gnss_event_handler+0x80>
    eed6:	4e17      	ldr	r6, [pc, #92]	; (ef34 <rpc_gnss_event_handler+0x12c>)
    eed8:	6830      	ldr	r0, [r6, #0]
    eeda:	b108      	cbz	r0, eee0 <rpc_gnss_event_handler+0xd8>
    eedc:	f004 fba1 	bl	13622 <rpc_client_msg_data_rx_free>
    eee0:	2003      	movs	r0, #3
    eee2:	682b      	ldr	r3, [r5, #0]
    eee4:	6034      	str	r4, [r6, #0]
    eee6:	e7d6      	b.n	ee96 <rpc_gnss_event_handler+0x8e>
    eee8:	4e13      	ldr	r6, [pc, #76]	; (ef38 <rpc_gnss_event_handler+0x130>)
    eeea:	6830      	ldr	r0, [r6, #0]
    eeec:	b108      	cbz	r0, eef2 <rpc_gnss_event_handler+0xea>
    eeee:	f004 fb98 	bl	13622 <rpc_client_msg_data_rx_free>
    eef2:	2004      	movs	r0, #4
    eef4:	682b      	ldr	r3, [r5, #0]
    eef6:	6034      	str	r4, [r6, #0]
    eef8:	e7cd      	b.n	ee96 <rpc_gnss_event_handler+0x8e>
    eefa:	7822      	ldrb	r2, [r4, #0]
    eefc:	2a03      	cmp	r2, #3
    eefe:	d805      	bhi.n	ef0c <rpc_gnss_event_handler+0x104>
    ef00:	e8df f002 	tbb	[pc, r2]
    ef04:	0c0a0802 	.word	0x0c0a0802
    ef08:	2007      	movs	r0, #7
    ef0a:	4798      	blx	r3
    ef0c:	6830      	ldr	r0, [r6, #0]
    ef0e:	f004 fb88 	bl	13622 <rpc_client_msg_data_rx_free>
    ef12:	e785      	b.n	ee20 <rpc_gnss_event_handler+0x18>
    ef14:	2008      	movs	r0, #8
    ef16:	e7f8      	b.n	ef0a <rpc_gnss_event_handler+0x102>
    ef18:	2009      	movs	r0, #9
    ef1a:	e7f6      	b.n	ef0a <rpc_gnss_event_handler+0x102>
    ef1c:	200a      	movs	r0, #10
    ef1e:	e7f4      	b.n	ef0a <rpc_gnss_event_handler+0x102>
    ef20:	2000d1a4 	.word	0x2000d1a4
    ef24:	2000d194 	.word	0x2000d194
    ef28:	2000d1a0 	.word	0x2000d1a0
    ef2c:	2000e6e9 	.word	0x2000e6e9
    ef30:	2000e6ea 	.word	0x2000e6ea
    ef34:	2000d19c 	.word	0x2000d19c
    ef38:	2000d198 	.word	0x2000d198

0000ef3c <rpc_gnss_init>:
    ef3c:	b508      	push	{r3, lr}
    ef3e:	2300      	movs	r3, #0
    ef40:	4a09      	ldr	r2, [pc, #36]	; (ef68 <rpc_gnss_init+0x2c>)
    ef42:	480a      	ldr	r0, [pc, #40]	; (ef6c <rpc_gnss_init+0x30>)
    ef44:	7013      	strb	r3, [r2, #0]
    ef46:	4a0a      	ldr	r2, [pc, #40]	; (ef70 <rpc_gnss_init+0x34>)
    ef48:	7013      	strb	r3, [r2, #0]
    ef4a:	4a0a      	ldr	r2, [pc, #40]	; (ef74 <rpc_gnss_init+0x38>)
    ef4c:	7013      	strb	r3, [r2, #0]
    ef4e:	4a0a      	ldr	r2, [pc, #40]	; (ef78 <rpc_gnss_init+0x3c>)
    ef50:	7013      	strb	r3, [r2, #0]
    ef52:	4a0a      	ldr	r2, [pc, #40]	; (ef7c <rpc_gnss_init+0x40>)
    ef54:	6013      	str	r3, [r2, #0]
    ef56:	2201      	movs	r2, #1
    ef58:	4611      	mov	r1, r2
    ef5a:	f7fc fd8b 	bl	ba74 <nrf_modem_os_sem_init>
    ef5e:	2800      	cmp	r0, #0
    ef60:	bf18      	it	ne
    ef62:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
    ef66:	bd08      	pop	{r3, pc}
    ef68:	2000e6ea 	.word	0x2000e6ea
    ef6c:	2000d1ac 	.word	0x2000d1ac
    ef70:	2000e6ec 	.word	0x2000e6ec
    ef74:	2000e6eb 	.word	0x2000e6eb
    ef78:	2000e6e9 	.word	0x2000e6e9
    ef7c:	2000d194 	.word	0x2000d194

0000ef80 <rpc_gnss_deinit>:
    ef80:	b510      	push	{r4, lr}
    ef82:	4c0b      	ldr	r4, [pc, #44]	; (efb0 <rpc_gnss_deinit+0x30>)
    ef84:	6820      	ldr	r0, [r4, #0]
    ef86:	b118      	cbz	r0, ef90 <rpc_gnss_deinit+0x10>
    ef88:	f004 fb4b 	bl	13622 <rpc_client_msg_data_rx_free>
    ef8c:	2300      	movs	r3, #0
    ef8e:	6023      	str	r3, [r4, #0]
    ef90:	4c08      	ldr	r4, [pc, #32]	; (efb4 <rpc_gnss_deinit+0x34>)
    ef92:	6820      	ldr	r0, [r4, #0]
    ef94:	b118      	cbz	r0, ef9e <rpc_gnss_deinit+0x1e>
    ef96:	f004 fb44 	bl	13622 <rpc_client_msg_data_rx_free>
    ef9a:	2300      	movs	r3, #0
    ef9c:	6023      	str	r3, [r4, #0]
    ef9e:	4c06      	ldr	r4, [pc, #24]	; (efb8 <rpc_gnss_deinit+0x38>)
    efa0:	6820      	ldr	r0, [r4, #0]
    efa2:	b118      	cbz	r0, efac <rpc_gnss_deinit+0x2c>
    efa4:	f004 fb3d 	bl	13622 <rpc_client_msg_data_rx_free>
    efa8:	2300      	movs	r3, #0
    efaa:	6023      	str	r3, [r4, #0]
    efac:	2000      	movs	r0, #0
    efae:	bd10      	pop	{r4, pc}
    efb0:	2000d1a0 	.word	0x2000d1a0
    efb4:	2000d19c 	.word	0x2000d19c
    efb8:	2000d198 	.word	0x2000d198

0000efbc <modem_off>:
    efbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    efbe:	2501      	movs	r5, #1
    efc0:	4c07      	ldr	r4, [pc, #28]	; (efe0 <modem_off+0x24>)
    efc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    efc6:	6165      	str	r5, [r4, #20]
    efc8:	f004 f863 	bl	13092 <nrf_modem_os_busywait>
    efcc:	2300      	movs	r3, #0
    efce:	6163      	str	r3, [r4, #20]
    efd0:	9301      	str	r3, [sp, #4]
    efd2:	6125      	str	r5, [r4, #16]
    efd4:	6923      	ldr	r3, [r4, #16]
    efd6:	9301      	str	r3, [sp, #4]
    efd8:	9b01      	ldr	r3, [sp, #4]
    efda:	b003      	add	sp, #12
    efdc:	bd30      	pop	{r4, r5, pc}
    efde:	bf00      	nop
    efe0:	40005600 	.word	0x40005600

0000efe4 <atomic_set.constprop.0.isra.0>:
    efe4:	4b03      	ldr	r3, [pc, #12]	; (eff4 <atomic_set.constprop.0.isra.0+0x10>)
    efe6:	e8d3 2fef 	ldaex	r2, [r3]
    efea:	e8c3 0fe1 	stlex	r1, r0, [r3]
    efee:	2900      	cmp	r1, #0
    eff0:	d1f9      	bne.n	efe6 <atomic_set.constprop.0.isra.0+0x2>
    eff2:	4770      	bx	lr
    eff4:	2000d1b0 	.word	0x2000d1b0

0000eff8 <nrf_modem_init>:
    eff8:	b570      	push	{r4, r5, r6, lr}
    effa:	4604      	mov	r4, r0
    effc:	b086      	sub	sp, #24
    effe:	b390      	cbz	r0, f066 <nrf_modem_init+0x6e>
    f000:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f002:	b3ab      	cbz	r3, f070 <nrf_modem_init+0x78>
    f004:	2201      	movs	r2, #1
    f006:	4b1d      	ldr	r3, [pc, #116]	; (f07c <nrf_modem_init+0x84>)
    f008:	e8d3 1fef 	ldaex	r1, [r3]
    f00c:	2900      	cmp	r1, #0
    f00e:	d103      	bne.n	f018 <nrf_modem_init+0x20>
    f010:	e8c3 2fe0 	stlex	r0, r2, [r3]
    f014:	2800      	cmp	r0, #0
    f016:	d1f7      	bne.n	f008 <nrf_modem_init+0x10>
    f018:	d12d      	bne.n	f076 <nrf_modem_init+0x7e>
    f01a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    f01c:	f000 f832 	bl	f084 <nrf_modem_fault_handler_set>
    f020:	f7fc fdf8 	bl	bc14 <nrf_modem_os_init>
    f024:	6a23      	ldr	r3, [r4, #32]
    f026:	ad02      	add	r5, sp, #8
    f028:	f88d 3004 	strb.w	r3, [sp, #4]
    f02c:	4b14      	ldr	r3, [pc, #80]	; (f080 <nrf_modem_init+0x88>)
    f02e:	9400      	str	r4, [sp, #0]
    f030:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    f032:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    f036:	4668      	mov	r0, sp
    f038:	f004 fa8c 	bl	13554 <rpc_init>
    f03c:	4604      	mov	r4, r0
    f03e:	b950      	cbnz	r0, f056 <nrf_modem_init+0x5e>
    f040:	4606      	mov	r6, r0
    f042:	f855 3b04 	ldr.w	r3, [r5], #4
    f046:	4798      	blx	r3
    f048:	4604      	mov	r4, r0
    f04a:	b920      	cbnz	r0, f056 <nrf_modem_init+0x5e>
    f04c:	3601      	adds	r6, #1
    f04e:	2e04      	cmp	r6, #4
    f050:	d1f7      	bne.n	f042 <nrf_modem_init+0x4a>
    f052:	2002      	movs	r0, #2
    f054:	e004      	b.n	f060 <nrf_modem_init+0x68>
    f056:	f7ff ffb1 	bl	efbc <modem_off>
    f05a:	f7fc fdf3 	bl	bc44 <nrf_modem_os_shutdown>
    f05e:	2000      	movs	r0, #0
    f060:	f7ff ffc0 	bl	efe4 <atomic_set.constprop.0.isra.0>
    f064:	e001      	b.n	f06a <nrf_modem_init+0x72>
    f066:	f06f 040d 	mvn.w	r4, #13
    f06a:	4620      	mov	r0, r4
    f06c:	b006      	add	sp, #24
    f06e:	bd70      	pop	{r4, r5, r6, pc}
    f070:	f06f 0415 	mvn.w	r4, #21
    f074:	e7f9      	b.n	f06a <nrf_modem_init+0x72>
    f076:	f04f 34ff 	mov.w	r4, #4294967295
    f07a:	e7f6      	b.n	f06a <nrf_modem_init+0x72>
    f07c:	2000d1b0 	.word	0x2000d1b0
    f080:	00014ca0 	.word	0x00014ca0

0000f084 <nrf_modem_fault_handler_set>:
    f084:	4b01      	ldr	r3, [pc, #4]	; (f08c <nrf_modem_fault_handler_set+0x8>)
    f086:	6018      	str	r0, [r3, #0]
    f088:	4770      	bx	lr
    f08a:	bf00      	nop
    f08c:	2000d1b4 	.word	0x2000d1b4

0000f090 <nrf_modem_fault_handler_internal>:
    f090:	b507      	push	{r0, r1, r2, lr}
    f092:	4b04      	ldr	r3, [pc, #16]	; (f0a4 <nrf_modem_fault_handler_internal+0x14>)
    f094:	e9cd 0100 	strd	r0, r1, [sp]
    f098:	681b      	ldr	r3, [r3, #0]
    f09a:	4668      	mov	r0, sp
    f09c:	4798      	blx	r3
    f09e:	b003      	add	sp, #12
    f0a0:	f85d fb04 	ldr.w	pc, [sp], #4
    f0a4:	2000d1b4 	.word	0x2000d1b4

0000f0a8 <nrf_modem_state_set>:
    f0a8:	4b01      	ldr	r3, [pc, #4]	; (f0b0 <nrf_modem_state_set+0x8>)
    f0aa:	7018      	strb	r0, [r3, #0]
    f0ac:	4770      	bx	lr
    f0ae:	bf00      	nop
    f0b0:	2000e6ed 	.word	0x2000e6ed

0000f0b4 <nrf_modem_state_is_initialized>:
    f0b4:	4b02      	ldr	r3, [pc, #8]	; (f0c0 <nrf_modem_state_is_initialized+0xc>)
    f0b6:	7818      	ldrb	r0, [r3, #0]
    f0b8:	1e43      	subs	r3, r0, #1
    f0ba:	4258      	negs	r0, r3
    f0bc:	4158      	adcs	r0, r3
    f0be:	4770      	bx	lr
    f0c0:	2000e6ed 	.word	0x2000e6ed

0000f0c4 <ipc_trace_init>:
    f0c4:	2100      	movs	r1, #0
    f0c6:	4b07      	ldr	r3, [pc, #28]	; (f0e4 <ipc_trace_init+0x20>)
    f0c8:	2201      	movs	r2, #1
    f0ca:	7019      	strb	r1, [r3, #0]
    f0cc:	4b06      	ldr	r3, [pc, #24]	; (f0e8 <ipc_trace_init+0x24>)
    f0ce:	7019      	strb	r1, [r3, #0]
    f0d0:	4b06      	ldr	r3, [pc, #24]	; (f0ec <ipc_trace_init+0x28>)
    f0d2:	6019      	str	r1, [r3, #0]
    f0d4:	4b06      	ldr	r3, [pc, #24]	; (f0f0 <ipc_trace_init+0x2c>)
    f0d6:	6019      	str	r1, [r3, #0]
    f0d8:	4b06      	ldr	r3, [pc, #24]	; (f0f4 <ipc_trace_init+0x30>)
    f0da:	6018      	str	r0, [r3, #0]
    f0dc:	4806      	ldr	r0, [pc, #24]	; (f0f8 <ipc_trace_init+0x34>)
    f0de:	f7fc bcc9 	b.w	ba74 <nrf_modem_os_sem_init>
    f0e2:	bf00      	nop
    f0e4:	2000e6ee 	.word	0x2000e6ee
    f0e8:	2000e6ef 	.word	0x2000e6ef
    f0ec:	2000d1bc 	.word	0x2000d1bc
    f0f0:	2000d1c0 	.word	0x2000d1c0
    f0f4:	2000d1d0 	.word	0x2000d1d0
    f0f8:	2000d1b8 	.word	0x2000d1b8

0000f0fc <ipc_trace_handler>:
    f0fc:	b470      	push	{r4, r5, r6}
    f0fe:	4b2d      	ldr	r3, [pc, #180]	; (f1b4 <ipc_trace_handler+0xb8>)
    f100:	681b      	ldr	r3, [r3, #0]
    f102:	6919      	ldr	r1, [r3, #16]
    f104:	6958      	ldr	r0, [r3, #20]
    f106:	7c1a      	ldrb	r2, [r3, #16]
    f108:	2200      	movs	r2, #0
    f10a:	741a      	strb	r2, [r3, #16]
    f10c:	7c5c      	ldrb	r4, [r3, #17]
    f10e:	745a      	strb	r2, [r3, #17]
    f110:	7c9c      	ldrb	r4, [r3, #18]
    f112:	749a      	strb	r2, [r3, #18]
    f114:	7cdc      	ldrb	r4, [r3, #19]
    f116:	74da      	strb	r2, [r3, #19]
    f118:	7d1c      	ldrb	r4, [r3, #20]
    f11a:	751a      	strb	r2, [r3, #20]
    f11c:	7d5c      	ldrb	r4, [r3, #21]
    f11e:	755a      	strb	r2, [r3, #21]
    f120:	7d9c      	ldrb	r4, [r3, #22]
    f122:	2903      	cmp	r1, #3
    f124:	759a      	strb	r2, [r3, #22]
    f126:	7ddc      	ldrb	r4, [r3, #23]
    f128:	75da      	strb	r2, [r3, #23]
    f12a:	d029      	beq.n	f180 <ipc_trace_handler+0x84>
    f12c:	2904      	cmp	r1, #4
    f12e:	d033      	beq.n	f198 <ipc_trace_handler+0x9c>
    f130:	2901      	cmp	r1, #1
    f132:	d12f      	bne.n	f194 <ipc_trace_handler+0x98>
    f134:	6885      	ldr	r5, [r0, #8]
    f136:	4e20      	ldr	r6, [pc, #128]	; (f1b8 <ipc_trace_handler+0xbc>)
    f138:	4295      	cmp	r5, r2
    f13a:	d110      	bne.n	f15e <ipc_trace_handler+0x62>
    f13c:	2101      	movs	r1, #1
    f13e:	7a1a      	ldrb	r2, [r3, #8]
    f140:	2200      	movs	r2, #0
    f142:	7219      	strb	r1, [r3, #8]
    f144:	7a59      	ldrb	r1, [r3, #9]
    f146:	725a      	strb	r2, [r3, #9]
    f148:	7a99      	ldrb	r1, [r3, #10]
    f14a:	729a      	strb	r2, [r3, #10]
    f14c:	7ada      	ldrb	r2, [r3, #11]
    f14e:	f06f 025f 	mvn.w	r2, #95	; 0x5f
    f152:	72da      	strb	r2, [r3, #11]
    f154:	4b19      	ldr	r3, [pc, #100]	; (f1bc <ipc_trace_handler+0xc0>)
    f156:	bc70      	pop	{r4, r5, r6}
    f158:	6818      	ldr	r0, [r3, #0]
    f15a:	f7fc bcbf 	b.w	badc <nrf_modem_os_sem_give>
    f15e:	1c91      	adds	r1, r2, #2
    f160:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    f164:	684c      	ldr	r4, [r1, #4]
    f166:	7821      	ldrb	r1, [r4, #0]
    f168:	2962      	cmp	r1, #98	; 0x62
    f16a:	d007      	beq.n	f17c <ipc_trace_handler+0x80>
    f16c:	3963      	subs	r1, #99	; 0x63
    f16e:	bf18      	it	ne
    f170:	2101      	movne	r1, #1
    f172:	0049      	lsls	r1, r1, #1
    f174:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
    f178:	3201      	adds	r2, #1
    f17a:	e7dd      	b.n	f138 <ipc_trace_handler+0x3c>
    f17c:	2101      	movs	r1, #1
    f17e:	e7f9      	b.n	f174 <ipc_trace_handler+0x78>
    f180:	7a18      	ldrb	r0, [r3, #8]
    f182:	7219      	strb	r1, [r3, #8]
    f184:	7a59      	ldrb	r1, [r3, #9]
    f186:	725a      	strb	r2, [r3, #9]
    f188:	7a99      	ldrb	r1, [r3, #10]
    f18a:	729a      	strb	r2, [r3, #10]
    f18c:	7ada      	ldrb	r2, [r3, #11]
    f18e:	f06f 025f 	mvn.w	r2, #95	; 0x5f
    f192:	72da      	strb	r2, [r3, #11]
    f194:	bc70      	pop	{r4, r5, r6}
    f196:	4770      	bx	lr
    f198:	7a18      	ldrb	r0, [r3, #8]
    f19a:	7219      	strb	r1, [r3, #8]
    f19c:	7a59      	ldrb	r1, [r3, #9]
    f19e:	725a      	strb	r2, [r3, #9]
    f1a0:	7a99      	ldrb	r1, [r3, #10]
    f1a2:	729a      	strb	r2, [r3, #10]
    f1a4:	7ada      	ldrb	r2, [r3, #11]
    f1a6:	f06f 025f 	mvn.w	r2, #95	; 0x5f
    f1aa:	72da      	strb	r2, [r3, #11]
    f1ac:	2201      	movs	r2, #1
    f1ae:	4b04      	ldr	r3, [pc, #16]	; (f1c0 <ipc_trace_handler+0xc4>)
    f1b0:	701a      	strb	r2, [r3, #0]
    f1b2:	e7ef      	b.n	f194 <ipc_trace_handler+0x98>
    f1b4:	2000d1d0 	.word	0x2000d1d0
    f1b8:	2000d1c4 	.word	0x2000d1c4
    f1bc:	2000d1b8 	.word	0x2000d1b8
    f1c0:	2000e6ef 	.word	0x2000e6ef

0000f1c4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    f1c4:	4b01      	ldr	r3, [pc, #4]	; (f1cc <z_impl_z_errno+0x8>)
    f1c6:	6898      	ldr	r0, [r3, #8]
}
    f1c8:	3064      	adds	r0, #100	; 0x64
    f1ca:	4770      	bx	lr
    f1cc:	2000d1d4 	.word	0x2000d1d4

0000f1d0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    f1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f1d2:	4604      	mov	r4, r0
    f1d4:	460e      	mov	r6, r1
	__asm__ volatile(
    f1d6:	f04f 0320 	mov.w	r3, #32
    f1da:	f3ef 8711 	mrs	r7, BASEPRI
    f1de:	f383 8812 	msr	BASEPRI_MAX, r3
    f1e2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    f1e6:	f002 f8ff 	bl	113e8 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    f1ea:	4631      	mov	r1, r6
    f1ec:	4605      	mov	r5, r0
    f1ee:	4620      	mov	r0, r4
    f1f0:	f004 f919 	bl	13426 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    f1f4:	2c04      	cmp	r4, #4
    f1f6:	d10c      	bne.n	f212 <z_fatal_error+0x42>
    f1f8:	490a      	ldr	r1, [pc, #40]	; (f224 <z_fatal_error+0x54>)
    f1fa:	2393      	movs	r3, #147	; 0x93
    f1fc:	4a0a      	ldr	r2, [pc, #40]	; (f228 <z_fatal_error+0x58>)
    f1fe:	480b      	ldr	r0, [pc, #44]	; (f22c <z_fatal_error+0x5c>)
    f200:	f003 fbe4 	bl	129cc <assert_print>
    f204:	480a      	ldr	r0, [pc, #40]	; (f230 <z_fatal_error+0x60>)
    f206:	f003 fbe1 	bl	129cc <assert_print>
    f20a:	2193      	movs	r1, #147	; 0x93
    f20c:	4806      	ldr	r0, [pc, #24]	; (f228 <z_fatal_error+0x58>)
    f20e:	f003 fbd6 	bl	129be <assert_post_action>
	__asm__ volatile(
    f212:	f387 8811 	msr	BASEPRI, r7
    f216:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    f21a:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    f21c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    f220:	f7fa bfc0 	b.w	a1a4 <z_impl_k_thread_abort>
    f224:	00016538 	.word	0x00016538
    f228:	00016516 	.word	0x00016516
    f22c:	00015341 	.word	0x00015341
    f230:	00016555 	.word	0x00016555

0000f234 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    f234:	4b10      	ldr	r3, [pc, #64]	; (f278 <z_sys_init_run_level+0x44>)
{
    f236:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    f238:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    f23c:	3001      	adds	r0, #1
    f23e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    f242:	42a6      	cmp	r6, r4
    f244:	d800      	bhi.n	f248 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    f246:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    f248:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    f24c:	b18d      	cbz	r5, f272 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    f24e:	4628      	mov	r0, r5
    f250:	4798      	blx	r3
			if (rc != 0) {
    f252:	b138      	cbz	r0, f264 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    f254:	2800      	cmp	r0, #0
    f256:	bfb8      	it	lt
    f258:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    f25a:	28ff      	cmp	r0, #255	; 0xff
    f25c:	bfa8      	it	ge
    f25e:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    f260:	68eb      	ldr	r3, [r5, #12]
    f262:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    f264:	68ea      	ldr	r2, [r5, #12]
    f266:	7853      	ldrb	r3, [r2, #1]
    f268:	f043 0301 	orr.w	r3, r3, #1
    f26c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    f26e:	3408      	adds	r4, #8
    f270:	e7e7      	b.n	f242 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    f272:	4798      	blx	r3
    f274:	e7fb      	b.n	f26e <z_sys_init_run_level+0x3a>
    f276:	bf00      	nop
    f278:	00015134 	.word	0x00015134

0000f27c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    f27c:	2201      	movs	r2, #1
{
    f27e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    f280:	4b09      	ldr	r3, [pc, #36]	; (f2a8 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    f282:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    f284:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    f286:	f7ff ffd5 	bl	f234 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    f28a:	f002 fdbd 	bl	11e08 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    f28e:	2004      	movs	r0, #4
    f290:	f7ff ffd0 	bl	f234 <z_sys_init_run_level>

	z_init_static_threads();
    f294:	f000 fa70 	bl	f778 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    f298:	f7f9 f8ee 	bl	8478 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    f29c:	4a03      	ldr	r2, [pc, #12]	; (f2ac <bg_thread_main+0x30>)
    f29e:	7b13      	ldrb	r3, [r2, #12]
    f2a0:	f023 0301 	bic.w	r3, r3, #1
    f2a4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    f2a6:	bd08      	pop	{r3, pc}
    f2a8:	2000e6f0 	.word	0x2000e6f0
    f2ac:	2000c948 	.word	0x2000c948

0000f2b0 <z_bss_zero>:
{
    f2b0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    f2b2:	4803      	ldr	r0, [pc, #12]	; (f2c0 <z_bss_zero+0x10>)
    f2b4:	4a03      	ldr	r2, [pc, #12]	; (f2c4 <z_bss_zero+0x14>)
    f2b6:	2100      	movs	r1, #0
    f2b8:	1a12      	subs	r2, r2, r0
    f2ba:	f004 ffe6 	bl	1428a <z_early_memset>
}
    f2be:	bd08      	pop	{r3, pc}
    f2c0:	2000c7f8 	.word	0x2000c7f8
    f2c4:	2000e6f4 	.word	0x2000e6f4

0000f2c8 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
    f2c8:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    f2ca:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    f2cc:	4e13      	ldr	r6, [pc, #76]	; (f31c <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
    f2ce:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
    f2d0:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    f2d4:	2300      	movs	r3, #0
{
    f2d6:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    f2d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    f2dc:	220f      	movs	r2, #15
    f2de:	9301      	str	r3, [sp, #4]
    f2e0:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    f2e4:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
    f2e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    f2ea:	4d0d      	ldr	r5, [pc, #52]	; (f320 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
    f2ec:	490d      	ldr	r1, [pc, #52]	; (f324 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    f2ee:	fb03 5500 	mla	r5, r3, r0, r5
{
    f2f2:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    f2f4:	fb02 1100 	mla	r1, r2, r0, r1
    f2f8:	4b0b      	ldr	r3, [pc, #44]	; (f328 <z_init_cpu+0x60>)
    f2fa:	4630      	mov	r0, r6
    f2fc:	9500      	str	r5, [sp, #0]
    f2fe:	f000 f9a1 	bl	f644 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f302:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    f304:	742c      	strb	r4, [r5, #16]
    f306:	f023 0304 	bic.w	r3, r3, #4
    f30a:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    f30c:	4b07      	ldr	r3, [pc, #28]	; (f32c <z_init_cpu+0x64>)
    f30e:	3401      	adds	r4, #1
    f310:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    f314:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    f316:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    f318:	b006      	add	sp, #24
    f31a:	bd70      	pop	{r4, r5, r6, pc}
    f31c:	2000c8c0 	.word	0x2000c8c0
    f320:	2000d1d4 	.word	0x2000d1d4
    f324:	2000f3f8 	.word	0x2000f3f8
    f328:	0000f8c9 	.word	0x0000f8c9
    f32c:	2000ebf8 	.word	0x2000ebf8

0000f330 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    f330:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    f332:	2000      	movs	r0, #0
{
    f334:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    f336:	f7ff ff7d 	bl	f234 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    f33a:	4b2e      	ldr	r3, [pc, #184]	; (f3f4 <_flash_used+0x9c>)
	uint32_t msp =
    f33c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    f340:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    f344:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f348:	2400      	movs	r4, #0
    f34a:	23e0      	movs	r3, #224	; 0xe0
    f34c:	4d2a      	ldr	r5, [pc, #168]	; (f3f8 <_flash_used+0xa0>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    f34e:	4e2b      	ldr	r6, [pc, #172]	; (f3fc <_flash_used+0xa4>)
    f350:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    f354:	77ec      	strb	r4, [r5, #31]
    f356:	762c      	strb	r4, [r5, #24]
    f358:	766c      	strb	r4, [r5, #25]
    f35a:	76ac      	strb	r4, [r5, #26]
    f35c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    f360:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    f362:	4f27      	ldr	r7, [pc, #156]	; (f400 <_flash_used+0xa8>)
    f364:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    f368:	626b      	str	r3, [r5, #36]	; 0x24
    f36a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    f36e:	f7fa fe7d 	bl	a06c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    f372:	f7fa fba7 	bl	9ac4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    f376:	f04f 33ff 	mov.w	r3, #4294967295
    f37a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    f37c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    f37e:	f7fb f8b1 	bl	a4e4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    f382:	f7fa ff25 	bl	a1d0 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    f386:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    f38a:	ad06      	add	r5, sp, #24
    f38c:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    f38e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    f392:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
    f396:	f002 fd19 	bl	11dcc <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    f39a:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    f39c:	f004 ff69 	bl	14272 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    f3a0:	2001      	movs	r0, #1
    f3a2:	f7ff ff47 	bl	f234 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    f3a6:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    f3a8:	4d16      	ldr	r5, [pc, #88]	; (f404 <_flash_used+0xac>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    f3aa:	f7ff ff43 	bl	f234 <z_sys_init_run_level>
	z_sched_init();
    f3ae:	f001 fea5 	bl	110fc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    f3b2:	4b15      	ldr	r3, [pc, #84]	; (f408 <_flash_used+0xb0>)
	_kernel.ready_q.cache = &z_main_thread;
    f3b4:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    f3b6:	9305      	str	r3, [sp, #20]
    f3b8:	2301      	movs	r3, #1
    f3ba:	4914      	ldr	r1, [pc, #80]	; (f40c <_flash_used+0xb4>)
    f3bc:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    f3c0:	e9cd 4303 	strd	r4, r3, [sp, #12]
    f3c4:	4628      	mov	r0, r5
    f3c6:	463b      	mov	r3, r7
    f3c8:	e9cd 4401 	strd	r4, r4, [sp, #4]
    f3cc:	9400      	str	r4, [sp, #0]
    f3ce:	f000 f939 	bl	f644 <z_setup_new_thread>
    f3d2:	4606      	mov	r6, r0
    f3d4:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    f3d6:	4628      	mov	r0, r5
    f3d8:	f022 0204 	bic.w	r2, r2, #4
    f3dc:	736a      	strb	r2, [r5, #13]
    f3de:	f001 f907 	bl	105f0 <z_ready_thread>
	z_init_cpu(0);
    f3e2:	4620      	mov	r0, r4
    f3e4:	f7ff ff70 	bl	f2c8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    f3e8:	463a      	mov	r2, r7
    f3ea:	4631      	mov	r1, r6
    f3ec:	4628      	mov	r0, r5
    f3ee:	f7fa fc71 	bl	9cd4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    f3f2:	bf00      	nop
    f3f4:	2000ebf8 	.word	0x2000ebf8
    f3f8:	e000ed00 	.word	0xe000ed00
    f3fc:	2000d1d4 	.word	0x2000d1d4
    f400:	0000f27d 	.word	0x0000f27d
    f404:	2000c948 	.word	0x2000c948
    f408:	0001658a 	.word	0x0001658a
    f40c:	2000f538 	.word	0x2000f538

0000f410 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    f410:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    f412:	4c0d      	ldr	r4, [pc, #52]	; (f448 <statics_init+0x38>)
    f414:	4d0d      	ldr	r5, [pc, #52]	; (f44c <statics_init+0x3c>)
    f416:	42ac      	cmp	r4, r5
    f418:	d913      	bls.n	f442 <statics_init+0x32>
    f41a:	490d      	ldr	r1, [pc, #52]	; (f450 <statics_init+0x40>)
    f41c:	2317      	movs	r3, #23
    f41e:	4a0d      	ldr	r2, [pc, #52]	; (f454 <statics_init+0x44>)
    f420:	480d      	ldr	r0, [pc, #52]	; (f458 <statics_init+0x48>)
    f422:	f003 fad3 	bl	129cc <assert_print>
    f426:	480d      	ldr	r0, [pc, #52]	; (f45c <statics_init+0x4c>)
    f428:	f003 fad0 	bl	129cc <assert_print>
    f42c:	2117      	movs	r1, #23
    f42e:	4809      	ldr	r0, [pc, #36]	; (f454 <statics_init+0x44>)
    f430:	f003 fac5 	bl	129be <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    f434:	4620      	mov	r0, r4
    f436:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    f43a:	f004 ff2a 	bl	14292 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    f43e:	3418      	adds	r4, #24
    f440:	e7e9      	b.n	f416 <statics_init+0x6>
    f442:	d3f7      	bcc.n	f434 <statics_init+0x24>
		}
	}
	return 0;
}
    f444:	2000      	movs	r0, #0
    f446:	bd38      	pop	{r3, r4, r5, pc}
    f448:	2000c6e8 	.word	0x2000c6e8
    f44c:	2000c718 	.word	0x2000c718
    f450:	000165b4 	.word	0x000165b4
    f454:	00016592 	.word	0x00016592
    f458:	00015341 	.word	0x00015341
    f45c:	00015764 	.word	0x00015764

0000f460 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    f460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f464:	b085      	sub	sp, #20
    f466:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
    f46a:	4680      	mov	r8, r0
    f46c:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    f46e:	4648      	mov	r0, r9
    f470:	4659      	mov	r1, fp
{
    f472:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    f474:	f004 ffbe 	bl	143f4 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    f478:	f1bb 3fff 	cmp.w	fp, #4294967295
    f47c:	bf08      	it	eq
    f47e:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    f482:	4606      	mov	r6, r0
    f484:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    f486:	bf04      	itt	eq
    f488:	f04f 36ff 	moveq.w	r6, #4294967295
    f48c:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
    f490:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
    f494:	f04f 0320 	mov.w	r3, #32
    f498:	f3ef 8511 	mrs	r5, BASEPRI
    f49c:	f383 8812 	msr	BASEPRI_MAX, r3
    f4a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f4a4:	4620      	mov	r0, r4
    f4a6:	f000 f9eb 	bl	f880 <z_spin_lock_valid>
    f4aa:	b960      	cbnz	r0, f4c6 <k_heap_aligned_alloc+0x66>
    f4ac:	2394      	movs	r3, #148	; 0x94
    f4ae:	4a33      	ldr	r2, [pc, #204]	; (f57c <k_heap_aligned_alloc+0x11c>)
    f4b0:	4933      	ldr	r1, [pc, #204]	; (f580 <k_heap_aligned_alloc+0x120>)
    f4b2:	4834      	ldr	r0, [pc, #208]	; (f584 <k_heap_aligned_alloc+0x124>)
    f4b4:	f003 fa8a 	bl	129cc <assert_print>
    f4b8:	4621      	mov	r1, r4
    f4ba:	4833      	ldr	r0, [pc, #204]	; (f588 <k_heap_aligned_alloc+0x128>)
    f4bc:	f003 fa86 	bl	129cc <assert_print>
    f4c0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f4c2:	482e      	ldr	r0, [pc, #184]	; (f57c <k_heap_aligned_alloc+0x11c>)
    f4c4:	e031      	b.n	f52a <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
    f4c6:	4620      	mov	r0, r4
    f4c8:	f000 f9f6 	bl	f8b8 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    f4cc:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
    f4d0:	b113      	cbz	r3, f4d8 <k_heap_aligned_alloc+0x78>
    f4d2:	ea5b 0909 	orrs.w	r9, fp, r9
    f4d6:	d11d      	bne.n	f514 <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    f4d8:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    f4dc:	4652      	mov	r2, sl
    f4de:	4640      	mov	r0, r8
    f4e0:	9903      	ldr	r1, [sp, #12]
    f4e2:	f7f9 f8e1 	bl	86a8 <sys_heap_aligned_alloc>
    f4e6:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
    f4e8:	f002 fb1c 	bl	11b24 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    f4ec:	f1b9 0f00 	cmp.w	r9, #0
    f4f0:	d01d      	beq.n	f52e <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f4f2:	4620      	mov	r0, r4
    f4f4:	f000 f9d2 	bl	f89c <z_spin_unlock_valid>
    f4f8:	2800      	cmp	r0, #0
    f4fa:	d137      	bne.n	f56c <k_heap_aligned_alloc+0x10c>
    f4fc:	23c2      	movs	r3, #194	; 0xc2
    f4fe:	4a1f      	ldr	r2, [pc, #124]	; (f57c <k_heap_aligned_alloc+0x11c>)
    f500:	4922      	ldr	r1, [pc, #136]	; (f58c <k_heap_aligned_alloc+0x12c>)
    f502:	4820      	ldr	r0, [pc, #128]	; (f584 <k_heap_aligned_alloc+0x124>)
    f504:	f003 fa62 	bl	129cc <assert_print>
    f508:	4621      	mov	r1, r4
    f50a:	4821      	ldr	r0, [pc, #132]	; (f590 <k_heap_aligned_alloc+0x130>)
    f50c:	f003 fa5e 	bl	129cc <assert_print>
    f510:	21c2      	movs	r1, #194	; 0xc2
    f512:	e7d6      	b.n	f4c2 <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
    f514:	491f      	ldr	r1, [pc, #124]	; (f594 <k_heap_aligned_alloc+0x134>)
    f516:	234b      	movs	r3, #75	; 0x4b
    f518:	4a1f      	ldr	r2, [pc, #124]	; (f598 <k_heap_aligned_alloc+0x138>)
    f51a:	481a      	ldr	r0, [pc, #104]	; (f584 <k_heap_aligned_alloc+0x124>)
    f51c:	f003 fa56 	bl	129cc <assert_print>
    f520:	481e      	ldr	r0, [pc, #120]	; (f59c <k_heap_aligned_alloc+0x13c>)
    f522:	f003 fa53 	bl	129cc <assert_print>
    f526:	214b      	movs	r1, #75	; 0x4b
    f528:	481b      	ldr	r0, [pc, #108]	; (f598 <k_heap_aligned_alloc+0x138>)
    f52a:	f003 fa48 	bl	129be <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
    f52e:	1a30      	subs	r0, r6, r0
    f530:	eb67 0101 	sbc.w	r1, r7, r1
    f534:	2801      	cmp	r0, #1
    f536:	f171 0300 	sbcs.w	r3, r1, #0
    f53a:	dbda      	blt.n	f4f2 <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    f53c:	e9cd 0100 	strd	r0, r1, [sp]
    f540:	465a      	mov	r2, fp
    f542:	4629      	mov	r1, r5
    f544:	4620      	mov	r0, r4
    f546:	f001 fb55 	bl	10bf4 <z_pend_curr>
    f54a:	f04f 0320 	mov.w	r3, #32
    f54e:	f3ef 8511 	mrs	r5, BASEPRI
    f552:	f383 8812 	msr	BASEPRI_MAX, r3
    f556:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f55a:	4620      	mov	r0, r4
    f55c:	f000 f990 	bl	f880 <z_spin_lock_valid>
    f560:	2800      	cmp	r0, #0
    f562:	d0a3      	beq.n	f4ac <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
    f564:	4620      	mov	r0, r4
    f566:	f000 f9a7 	bl	f8b8 <z_spin_lock_set_owner>
	return k;
    f56a:	e7b7      	b.n	f4dc <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
    f56c:	f385 8811 	msr	BASEPRI, r5
    f570:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    f574:	4648      	mov	r0, r9
    f576:	b005      	add	sp, #20
    f578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f57c:	0001558e 	.word	0x0001558e
    f580:	000155e7 	.word	0x000155e7
    f584:	00015341 	.word	0x00015341
    f588:	000155fc 	.word	0x000155fc
    f58c:	000155bb 	.word	0x000155bb
    f590:	000155d2 	.word	0x000155d2
    f594:	000165ca 	.word	0x000165ca
    f598:	00016592 	.word	0x00016592
    f59c:	000156e6 	.word	0x000156e6

0000f5a0 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    f5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f5a2:	4605      	mov	r5, r0
    f5a4:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    f5a6:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
    f5aa:	f04f 0320 	mov.w	r3, #32
    f5ae:	f3ef 8711 	mrs	r7, BASEPRI
    f5b2:	f383 8812 	msr	BASEPRI_MAX, r3
    f5b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f5ba:	4620      	mov	r0, r4
    f5bc:	f000 f960 	bl	f880 <z_spin_lock_valid>
    f5c0:	b968      	cbnz	r0, f5de <k_heap_free+0x3e>
    f5c2:	2394      	movs	r3, #148	; 0x94
    f5c4:	4a19      	ldr	r2, [pc, #100]	; (f62c <k_heap_free+0x8c>)
    f5c6:	491a      	ldr	r1, [pc, #104]	; (f630 <k_heap_free+0x90>)
    f5c8:	481a      	ldr	r0, [pc, #104]	; (f634 <k_heap_free+0x94>)
    f5ca:	f003 f9ff 	bl	129cc <assert_print>
    f5ce:	4621      	mov	r1, r4
    f5d0:	4819      	ldr	r0, [pc, #100]	; (f638 <k_heap_free+0x98>)
    f5d2:	f003 f9fb 	bl	129cc <assert_print>
    f5d6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f5d8:	4814      	ldr	r0, [pc, #80]	; (f62c <k_heap_free+0x8c>)
    f5da:	f003 f9f0 	bl	129be <assert_post_action>
	z_spin_lock_set_owner(l);
    f5de:	4620      	mov	r0, r4
    f5e0:	f000 f96a 	bl	f8b8 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
    f5e4:	4628      	mov	r0, r5
    f5e6:	4631      	mov	r1, r6
    f5e8:	f7f9 f818 	bl	861c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    f5ec:	f105 000c 	add.w	r0, r5, #12
    f5f0:	f004 fee6 	bl	143c0 <z_unpend_all>
    f5f4:	b128      	cbz	r0, f602 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
    f5f6:	4639      	mov	r1, r7
    f5f8:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    f5fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
    f5fe:	f001 b83d 	b.w	1067c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f602:	4620      	mov	r0, r4
    f604:	f000 f94a 	bl	f89c <z_spin_unlock_valid>
    f608:	b958      	cbnz	r0, f622 <k_heap_free+0x82>
    f60a:	23c2      	movs	r3, #194	; 0xc2
    f60c:	4a07      	ldr	r2, [pc, #28]	; (f62c <k_heap_free+0x8c>)
    f60e:	490b      	ldr	r1, [pc, #44]	; (f63c <k_heap_free+0x9c>)
    f610:	4808      	ldr	r0, [pc, #32]	; (f634 <k_heap_free+0x94>)
    f612:	f003 f9db 	bl	129cc <assert_print>
    f616:	4621      	mov	r1, r4
    f618:	4809      	ldr	r0, [pc, #36]	; (f640 <k_heap_free+0xa0>)
    f61a:	f003 f9d7 	bl	129cc <assert_print>
    f61e:	21c2      	movs	r1, #194	; 0xc2
    f620:	e7da      	b.n	f5d8 <k_heap_free+0x38>
	__asm__ volatile(
    f622:	f387 8811 	msr	BASEPRI, r7
    f626:	f3bf 8f6f 	isb	sy
}
    f62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f62c:	0001558e 	.word	0x0001558e
    f630:	000155e7 	.word	0x000155e7
    f634:	00015341 	.word	0x00015341
    f638:	000155fc 	.word	0x000155fc
    f63c:	000155bb 	.word	0x000155bb
    f640:	000155d2 	.word	0x000155d2

0000f644 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    f644:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f646:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    f648:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    f64a:	2e0f      	cmp	r6, #15
    f64c:	d12a      	bne.n	f6a4 <z_setup_new_thread+0x60>
    f64e:	4821      	ldr	r0, [pc, #132]	; (f6d4 <z_setup_new_thread+0x90>)
    f650:	4283      	cmp	r3, r0
    f652:	d12b      	bne.n	f6ac <z_setup_new_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    f654:	f104 0058 	add.w	r0, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    f658:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    f65c:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    f65e:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
    f660:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    f662:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    f664:	3207      	adds	r2, #7
    f666:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
    f66a:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68

	thread_base->prio = priority;
    f66e:	73a6      	strb	r6, [r4, #14]
	stack_ptr = (char *)stack + stack_obj_size;
    f670:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f672:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
    f674:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    f676:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
    f67a:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
    f67c:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
    f67e:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f680:	9202      	str	r2, [sp, #8]
    f682:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f684:	4620      	mov	r0, r4
    f686:	9201      	str	r2, [sp, #4]
    f688:	9a08      	ldr	r2, [sp, #32]
    f68a:	9200      	str	r2, [sp, #0]
    f68c:	4632      	mov	r2, r6
    f68e:	f7fa fb01 	bl	9c94 <arch_new_thread>
	if (!_current) {
    f692:	4b11      	ldr	r3, [pc, #68]	; (f6d8 <z_setup_new_thread+0x94>)
	new_thread->init_data = NULL;
    f694:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    f696:	689b      	ldr	r3, [r3, #8]
    f698:	b103      	cbz	r3, f69c <z_setup_new_thread+0x58>
	new_thread->resource_pool = _current->resource_pool;
    f69a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
    f69c:	4630      	mov	r0, r6
    f69e:	6763      	str	r3, [r4, #116]	; 0x74
    f6a0:	b004      	add	sp, #16
    f6a2:	bd70      	pop	{r4, r5, r6, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    f6a4:	f106 0010 	add.w	r0, r6, #16
    f6a8:	281e      	cmp	r0, #30
    f6aa:	d9d3      	bls.n	f654 <z_setup_new_thread+0x10>
    f6ac:	f44f 7306 	mov.w	r3, #536	; 0x218
    f6b0:	4a0a      	ldr	r2, [pc, #40]	; (f6dc <z_setup_new_thread+0x98>)
    f6b2:	490b      	ldr	r1, [pc, #44]	; (f6e0 <z_setup_new_thread+0x9c>)
    f6b4:	480b      	ldr	r0, [pc, #44]	; (f6e4 <z_setup_new_thread+0xa0>)
    f6b6:	f003 f989 	bl	129cc <assert_print>
    f6ba:	4631      	mov	r1, r6
    f6bc:	480a      	ldr	r0, [pc, #40]	; (f6e8 <z_setup_new_thread+0xa4>)
    f6be:	f06f 030f 	mvn.w	r3, #15
    f6c2:	220e      	movs	r2, #14
    f6c4:	f003 f982 	bl	129cc <assert_print>
    f6c8:	f44f 7106 	mov.w	r1, #536	; 0x218
    f6cc:	4803      	ldr	r0, [pc, #12]	; (f6dc <z_setup_new_thread+0x98>)
    f6ce:	f003 f976 	bl	129be <assert_post_action>
    f6d2:	bf00      	nop
    f6d4:	0000f8c9 	.word	0x0000f8c9
    f6d8:	2000d1d4 	.word	0x2000d1d4
    f6dc:	00016610 	.word	0x00016610
    f6e0:	00016633 	.word	0x00016633
    f6e4:	00015341 	.word	0x00015341
    f6e8:	000166b3 	.word	0x000166b3

0000f6ec <z_impl_k_thread_create>:
{
    f6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6ee:	b087      	sub	sp, #28
    f6f0:	4604      	mov	r4, r0
    f6f2:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
    f6f6:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    f6fa:	b175      	cbz	r5, f71a <z_impl_k_thread_create+0x2e>
    f6fc:	4919      	ldr	r1, [pc, #100]	; (f764 <z_impl_k_thread_create+0x78>)
    f6fe:	f240 238a 	movw	r3, #650	; 0x28a
    f702:	4a19      	ldr	r2, [pc, #100]	; (f768 <z_impl_k_thread_create+0x7c>)
    f704:	4819      	ldr	r0, [pc, #100]	; (f76c <z_impl_k_thread_create+0x80>)
    f706:	f003 f961 	bl	129cc <assert_print>
    f70a:	4819      	ldr	r0, [pc, #100]	; (f770 <z_impl_k_thread_create+0x84>)
    f70c:	f003 f95e 	bl	129cc <assert_print>
    f710:	f240 218a 	movw	r1, #650	; 0x28a
    f714:	4814      	ldr	r0, [pc, #80]	; (f768 <z_impl_k_thread_create+0x7c>)
    f716:	f003 f952 	bl	129be <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    f71a:	9505      	str	r5, [sp, #20]
    f71c:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f71e:	9504      	str	r5, [sp, #16]
    f720:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    f722:	9503      	str	r5, [sp, #12]
    f724:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    f726:	9502      	str	r5, [sp, #8]
    f728:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    f72a:	9501      	str	r5, [sp, #4]
    f72c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    f72e:	9500      	str	r5, [sp, #0]
    f730:	f7ff ff88 	bl	f644 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    f734:	f1b6 3fff 	cmp.w	r6, #4294967295
    f738:	bf08      	it	eq
    f73a:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    f73e:	d005      	beq.n	f74c <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f740:	ea56 0307 	orrs.w	r3, r6, r7
    f744:	d105      	bne.n	f752 <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
    f746:	4620      	mov	r0, r4
    f748:	f000 ffda 	bl	10700 <z_sched_start>
}
    f74c:	4620      	mov	r0, r4
    f74e:	b007      	add	sp, #28
    f750:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    f752:	463a      	mov	r2, r7
    f754:	4633      	mov	r3, r6
    f756:	4907      	ldr	r1, [pc, #28]	; (f774 <z_impl_k_thread_create+0x88>)
    f758:	f104 0018 	add.w	r0, r4, #24
    f75c:	f001 ffe2 	bl	11724 <z_add_timeout>
    f760:	e7f4      	b.n	f74c <z_impl_k_thread_create+0x60>
    f762:	bf00      	nop
    f764:	000166e4 	.word	0x000166e4
    f768:	00016610 	.word	0x00016610
    f76c:	00015341 	.word	0x00015341
    f770:	000166f6 	.word	0x000166f6
    f774:	000143b9 	.word	0x000143b9

0000f778 <z_init_static_threads>:
{
    f778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f77c:	4c39      	ldr	r4, [pc, #228]	; (f864 <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
    f77e:	4d3a      	ldr	r5, [pc, #232]	; (f868 <z_init_static_threads+0xf0>)
{
    f780:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    f782:	42ac      	cmp	r4, r5
    f784:	4626      	mov	r6, r4
    f786:	d92a      	bls.n	f7de <z_init_static_threads+0x66>
    f788:	4938      	ldr	r1, [pc, #224]	; (f86c <z_init_static_threads+0xf4>)
    f78a:	f240 23f1 	movw	r3, #753	; 0x2f1
    f78e:	4a38      	ldr	r2, [pc, #224]	; (f870 <z_init_static_threads+0xf8>)
    f790:	4838      	ldr	r0, [pc, #224]	; (f874 <z_init_static_threads+0xfc>)
    f792:	f003 f91b 	bl	129cc <assert_print>
    f796:	4838      	ldr	r0, [pc, #224]	; (f878 <z_init_static_threads+0x100>)
    f798:	f003 f918 	bl	129cc <assert_print>
    f79c:	f240 21f1 	movw	r1, #753	; 0x2f1
	_FOREACH_STATIC_THREAD(thread_data) {
    f7a0:	4833      	ldr	r0, [pc, #204]	; (f870 <z_init_static_threads+0xf8>)
    f7a2:	f003 f90c 	bl	129be <assert_post_action>
		z_setup_new_thread(
    f7a6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    f7aa:	9305      	str	r3, [sp, #20]
    f7ac:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    f7b0:	9304      	str	r3, [sp, #16]
    f7b2:	f854 3c10 	ldr.w	r3, [r4, #-16]
    f7b6:	9303      	str	r3, [sp, #12]
    f7b8:	f854 3c14 	ldr.w	r3, [r4, #-20]
    f7bc:	9302      	str	r3, [sp, #8]
    f7be:	f854 3c18 	ldr.w	r3, [r4, #-24]
    f7c2:	9301      	str	r3, [sp, #4]
    f7c4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    f7c8:	9300      	str	r3, [sp, #0]
    f7ca:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    f7ce:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    f7d2:	f7ff ff37 	bl	f644 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    f7d6:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    f7da:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    f7dc:	e7d1      	b.n	f782 <z_init_static_threads+0xa>
    f7de:	42ae      	cmp	r6, r5
    f7e0:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    f7e4:	d3df      	bcc.n	f7a6 <z_init_static_threads+0x2e>
	k_sched_lock();
    f7e6:	f000 ffdd 	bl	107a4 <k_sched_lock>
    f7ea:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    f7ee:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    f7f2:	4c1c      	ldr	r4, [pc, #112]	; (f864 <z_init_static_threads+0xec>)
    f7f4:	f8df 9084 	ldr.w	r9, [pc, #132]	; f87c <z_init_static_threads+0x104>
    f7f8:	42ac      	cmp	r4, r5
    f7fa:	d92c      	bls.n	f856 <z_init_static_threads+0xde>
    f7fc:	491b      	ldr	r1, [pc, #108]	; (f86c <z_init_static_threads+0xf4>)
    f7fe:	f44f 7344 	mov.w	r3, #784	; 0x310
    f802:	4a1b      	ldr	r2, [pc, #108]	; (f870 <z_init_static_threads+0xf8>)
    f804:	481b      	ldr	r0, [pc, #108]	; (f874 <z_init_static_threads+0xfc>)
    f806:	f003 f8e1 	bl	129cc <assert_print>
    f80a:	481b      	ldr	r0, [pc, #108]	; (f878 <z_init_static_threads+0x100>)
    f80c:	f003 f8de 	bl	129cc <assert_print>
    f810:	f44f 7144 	mov.w	r1, #784	; 0x310
    f814:	e7c4      	b.n	f7a0 <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    f816:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f818:	1c5a      	adds	r2, r3, #1
    f81a:	d00d      	beq.n	f838 <z_init_static_threads+0xc0>
    f81c:	2100      	movs	r1, #0
    f81e:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    f820:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f824:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f828:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    f82c:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f830:	d104      	bne.n	f83c <z_init_static_threads+0xc4>
	z_sched_start(thread);
    f832:	4640      	mov	r0, r8
    f834:	f000 ff64 	bl	10700 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    f838:	342c      	adds	r4, #44	; 0x2c
    f83a:	e7dd      	b.n	f7f8 <z_init_static_threads+0x80>
    f83c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f840:	2300      	movs	r3, #0
    f842:	f7f8 fc7f 	bl	8144 <__aeabi_uldivmod>
    f846:	4602      	mov	r2, r0
    f848:	460b      	mov	r3, r1
    f84a:	f108 0018 	add.w	r0, r8, #24
    f84e:	4649      	mov	r1, r9
    f850:	f001 ff68 	bl	11724 <z_add_timeout>
    f854:	e7f0      	b.n	f838 <z_init_static_threads+0xc0>
    f856:	d3de      	bcc.n	f816 <z_init_static_threads+0x9e>
}
    f858:	b007      	add	sp, #28
    f85a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    f85e:	f001 b80d 	b.w	1087c <k_sched_unlock>
    f862:	bf00      	nop
    f864:	00014bb4 	.word	0x00014bb4
    f868:	00014bb4 	.word	0x00014bb4
    f86c:	0001671b 	.word	0x0001671b
    f870:	00016610 	.word	0x00016610
    f874:	00015341 	.word	0x00015341
    f878:	00015764 	.word	0x00015764
    f87c:	000143b9 	.word	0x000143b9

0000f880 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    f880:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    f882:	b138      	cbz	r0, f894 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    f884:	4b04      	ldr	r3, [pc, #16]	; (f898 <z_spin_lock_valid+0x18>)
    f886:	f000 0003 	and.w	r0, r0, #3
    f88a:	7c1b      	ldrb	r3, [r3, #16]
    f88c:	1ac0      	subs	r0, r0, r3
    f88e:	bf18      	it	ne
    f890:	2001      	movne	r0, #1
    f892:	4770      	bx	lr
			return false;
		}
	}
	return true;
    f894:	2001      	movs	r0, #1
}
    f896:	4770      	bx	lr
    f898:	2000d1d4 	.word	0x2000d1d4

0000f89c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    f89c:	4a05      	ldr	r2, [pc, #20]	; (f8b4 <z_spin_unlock_valid+0x18>)
{
    f89e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    f8a0:	7c11      	ldrb	r1, [r2, #16]
    f8a2:	6892      	ldr	r2, [r2, #8]
    f8a4:	430a      	orrs	r2, r1
    f8a6:	6801      	ldr	r1, [r0, #0]
    f8a8:	2000      	movs	r0, #0
    f8aa:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
    f8ac:	bf04      	itt	eq
    f8ae:	6018      	streq	r0, [r3, #0]
	return true;
    f8b0:	2001      	moveq	r0, #1
}
    f8b2:	4770      	bx	lr
    f8b4:	2000d1d4 	.word	0x2000d1d4

0000f8b8 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    f8b8:	4b02      	ldr	r3, [pc, #8]	; (f8c4 <z_spin_lock_set_owner+0xc>)
    f8ba:	7c1a      	ldrb	r2, [r3, #16]
    f8bc:	689b      	ldr	r3, [r3, #8]
    f8be:	4313      	orrs	r3, r2
    f8c0:	6003      	str	r3, [r0, #0]
}
    f8c2:	4770      	bx	lr
    f8c4:	2000d1d4 	.word	0x2000d1d4

0000f8c8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    f8c8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    f8ca:	4c13      	ldr	r4, [pc, #76]	; (f918 <idle+0x50>)
    f8cc:	68a3      	ldr	r3, [r4, #8]
    f8ce:	f993 300e 	ldrsb.w	r3, [r3, #14]
    f8d2:	2b00      	cmp	r3, #0
    f8d4:	db10      	blt.n	f8f8 <idle+0x30>
    f8d6:	4d11      	ldr	r5, [pc, #68]	; (f91c <idle+0x54>)
	__asm__ volatile(
    f8d8:	f04f 0220 	mov.w	r2, #32
    f8dc:	f3ef 8311 	mrs	r3, BASEPRI
    f8e0:	f382 8812 	msr	BASEPRI_MAX, r2
    f8e4:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    f8e8:	f002 f828 	bl	1193c <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    f8ec:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    f8ee:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    f8f0:	b963      	cbnz	r3, f90c <idle+0x44>
	arch_cpu_idle();
    f8f2:	f7fa f8ed 	bl	9ad0 <arch_cpu_idle>
}
    f8f6:	e7ef      	b.n	f8d8 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    f8f8:	4909      	ldr	r1, [pc, #36]	; (f920 <idle+0x58>)
    f8fa:	480a      	ldr	r0, [pc, #40]	; (f924 <idle+0x5c>)
    f8fc:	2327      	movs	r3, #39	; 0x27
    f8fe:	4a0a      	ldr	r2, [pc, #40]	; (f928 <idle+0x60>)
    f900:	f003 f864 	bl	129cc <assert_print>
    f904:	2127      	movs	r1, #39	; 0x27
    f906:	4808      	ldr	r0, [pc, #32]	; (f928 <idle+0x60>)
    f908:	f003 f859 	bl	129be <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    f90c:	f7f9 ff6a 	bl	97e4 <pm_system_suspend>
    f910:	2800      	cmp	r0, #0
    f912:	d1e1      	bne.n	f8d8 <idle+0x10>
    f914:	e7ed      	b.n	f8f2 <idle+0x2a>
    f916:	bf00      	nop
    f918:	2000d1d4 	.word	0x2000d1d4
    f91c:	2000e6f0 	.word	0x2000e6f0
    f920:	00016769 	.word	0x00016769
    f924:	00015341 	.word	0x00015341
    f928:	00016748 	.word	0x00016748

0000f92c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    f92c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    f930:	4604      	mov	r4, r0
    f932:	4617      	mov	r7, r2
    f934:	461e      	mov	r6, r3
    f936:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    f93a:	b165      	cbz	r5, f956 <z_impl_k_mutex_lock+0x2a>
    f93c:	4958      	ldr	r1, [pc, #352]	; (faa0 <z_impl_k_mutex_lock+0x174>)
    f93e:	2365      	movs	r3, #101	; 0x65
    f940:	4a58      	ldr	r2, [pc, #352]	; (faa4 <z_impl_k_mutex_lock+0x178>)
    f942:	4859      	ldr	r0, [pc, #356]	; (faa8 <z_impl_k_mutex_lock+0x17c>)
    f944:	f003 f842 	bl	129cc <assert_print>
    f948:	4858      	ldr	r0, [pc, #352]	; (faac <z_impl_k_mutex_lock+0x180>)
    f94a:	f003 f83f 	bl	129cc <assert_print>
    f94e:	2165      	movs	r1, #101	; 0x65
    f950:	4854      	ldr	r0, [pc, #336]	; (faa4 <z_impl_k_mutex_lock+0x178>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f952:	f003 f834 	bl	129be <assert_post_action>
    f956:	f04f 0320 	mov.w	r3, #32
    f95a:	f3ef 8811 	mrs	r8, BASEPRI
    f95e:	f383 8812 	msr	BASEPRI_MAX, r3
    f962:	f3bf 8f6f 	isb	sy
    f966:	4852      	ldr	r0, [pc, #328]	; (fab0 <z_impl_k_mutex_lock+0x184>)
    f968:	f7ff ff8a 	bl	f880 <z_spin_lock_valid>
    f96c:	b960      	cbnz	r0, f988 <z_impl_k_mutex_lock+0x5c>
    f96e:	2394      	movs	r3, #148	; 0x94
    f970:	4a50      	ldr	r2, [pc, #320]	; (fab4 <z_impl_k_mutex_lock+0x188>)
    f972:	4951      	ldr	r1, [pc, #324]	; (fab8 <z_impl_k_mutex_lock+0x18c>)
    f974:	484c      	ldr	r0, [pc, #304]	; (faa8 <z_impl_k_mutex_lock+0x17c>)
    f976:	f003 f829 	bl	129cc <assert_print>
    f97a:	494d      	ldr	r1, [pc, #308]	; (fab0 <z_impl_k_mutex_lock+0x184>)
    f97c:	484f      	ldr	r0, [pc, #316]	; (fabc <z_impl_k_mutex_lock+0x190>)
    f97e:	f003 f825 	bl	129cc <assert_print>
    f982:	2194      	movs	r1, #148	; 0x94
    f984:	484b      	ldr	r0, [pc, #300]	; (fab4 <z_impl_k_mutex_lock+0x188>)
    f986:	e7e4      	b.n	f952 <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
    f988:	4849      	ldr	r0, [pc, #292]	; (fab0 <z_impl_k_mutex_lock+0x184>)
    f98a:	f7ff ff95 	bl	f8b8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    f98e:	68e3      	ldr	r3, [r4, #12]
    f990:	4a4b      	ldr	r2, [pc, #300]	; (fac0 <z_impl_k_mutex_lock+0x194>)
    f992:	b19b      	cbz	r3, f9bc <z_impl_k_mutex_lock+0x90>
    f994:	68a0      	ldr	r0, [r4, #8]
    f996:	6891      	ldr	r1, [r2, #8]
    f998:	4288      	cmp	r0, r1
    f99a:	d027      	beq.n	f9ec <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    f99c:	ea57 0306 	orrs.w	r3, r7, r6
    f9a0:	d12c      	bne.n	f9fc <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f9a2:	4843      	ldr	r0, [pc, #268]	; (fab0 <z_impl_k_mutex_lock+0x184>)
    f9a4:	f7ff ff7a 	bl	f89c <z_spin_unlock_valid>
    f9a8:	b1a0      	cbz	r0, f9d4 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
    f9aa:	f388 8811 	msr	BASEPRI, r8
    f9ae:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    f9b2:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    f9b6:	b002      	add	sp, #8
    f9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    f9bc:	6891      	ldr	r1, [r2, #8]
    f9be:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    f9c2:	3301      	adds	r3, #1
    f9c4:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    f9c6:	6893      	ldr	r3, [r2, #8]
    f9c8:	4839      	ldr	r0, [pc, #228]	; (fab0 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    f9ca:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    f9cc:	60a3      	str	r3, [r4, #8]
    f9ce:	f7ff ff65 	bl	f89c <z_spin_unlock_valid>
    f9d2:	b968      	cbnz	r0, f9f0 <z_impl_k_mutex_lock+0xc4>
    f9d4:	23c2      	movs	r3, #194	; 0xc2
    f9d6:	4a37      	ldr	r2, [pc, #220]	; (fab4 <z_impl_k_mutex_lock+0x188>)
    f9d8:	493a      	ldr	r1, [pc, #232]	; (fac4 <z_impl_k_mutex_lock+0x198>)
    f9da:	4833      	ldr	r0, [pc, #204]	; (faa8 <z_impl_k_mutex_lock+0x17c>)
    f9dc:	f002 fff6 	bl	129cc <assert_print>
    f9e0:	4933      	ldr	r1, [pc, #204]	; (fab0 <z_impl_k_mutex_lock+0x184>)
    f9e2:	4839      	ldr	r0, [pc, #228]	; (fac8 <z_impl_k_mutex_lock+0x19c>)
    f9e4:	f002 fff2 	bl	129cc <assert_print>
    f9e8:	21c2      	movs	r1, #194	; 0xc2
    f9ea:	e7cb      	b.n	f984 <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
    f9ec:	6921      	ldr	r1, [r4, #16]
    f9ee:	e7e8      	b.n	f9c2 <z_impl_k_mutex_lock+0x96>
    f9f0:	f388 8811 	msr	BASEPRI, r8
    f9f4:	f3bf 8f6f 	isb	sy
		return 0;
    f9f8:	2000      	movs	r0, #0
    f9fa:	e7dc      	b.n	f9b6 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    f9fc:	f991 100e 	ldrsb.w	r1, [r1, #14]
    fa00:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    fa04:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    fa08:	4299      	cmp	r1, r3
    fa0a:	bfa8      	it	ge
    fa0c:	4619      	movge	r1, r3
    fa0e:	4291      	cmp	r1, r2
    fa10:	bfb8      	it	lt
    fa12:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    fa14:	428b      	cmp	r3, r1
    fa16:	dd02      	ble.n	fa1e <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
    fa18:	f004 fc5f 	bl	142da <adjust_owner_prio.isra.0>
    fa1c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    fa1e:	4622      	mov	r2, r4
    fa20:	4641      	mov	r1, r8
    fa22:	e9cd 7600 	strd	r7, r6, [sp]
    fa26:	4822      	ldr	r0, [pc, #136]	; (fab0 <z_impl_k_mutex_lock+0x184>)
    fa28:	f001 f8e4 	bl	10bf4 <z_pend_curr>
	if (got_mutex == 0) {
    fa2c:	2800      	cmp	r0, #0
    fa2e:	d0e3      	beq.n	f9f8 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    fa30:	f04f 0320 	mov.w	r3, #32
    fa34:	f3ef 8611 	mrs	r6, BASEPRI
    fa38:	f383 8812 	msr	BASEPRI_MAX, r3
    fa3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fa40:	481b      	ldr	r0, [pc, #108]	; (fab0 <z_impl_k_mutex_lock+0x184>)
    fa42:	f7ff ff1d 	bl	f880 <z_spin_lock_valid>
    fa46:	2800      	cmp	r0, #0
    fa48:	d091      	beq.n	f96e <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
    fa4a:	4819      	ldr	r0, [pc, #100]	; (fab0 <z_impl_k_mutex_lock+0x184>)
    fa4c:	f7ff ff34 	bl	f8b8 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
    fa50:	68a0      	ldr	r0, [r4, #8]
    fa52:	b1c0      	cbz	r0, fa86 <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    fa54:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    fa56:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fa58:	429c      	cmp	r4, r3
    fa5a:	d00a      	beq.n	fa72 <z_impl_k_mutex_lock+0x146>
    fa5c:	b14b      	cbz	r3, fa72 <z_impl_k_mutex_lock+0x146>
    fa5e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    fa62:	4299      	cmp	r1, r3
    fa64:	bfa8      	it	ge
    fa66:	4619      	movge	r1, r3
    fa68:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    fa6c:	4299      	cmp	r1, r3
    fa6e:	bfb8      	it	lt
    fa70:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    fa72:	f004 fc32 	bl	142da <adjust_owner_prio.isra.0>
    fa76:	b130      	cbz	r0, fa86 <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
    fa78:	4631      	mov	r1, r6
    fa7a:	480d      	ldr	r0, [pc, #52]	; (fab0 <z_impl_k_mutex_lock+0x184>)
    fa7c:	f000 fdfe 	bl	1067c <z_reschedule>
	return -EAGAIN;
    fa80:	f06f 000a 	mvn.w	r0, #10
    fa84:	e797      	b.n	f9b6 <z_impl_k_mutex_lock+0x8a>
	if (resched) {
    fa86:	2d00      	cmp	r5, #0
    fa88:	d1f6      	bne.n	fa78 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fa8a:	4809      	ldr	r0, [pc, #36]	; (fab0 <z_impl_k_mutex_lock+0x184>)
    fa8c:	f7ff ff06 	bl	f89c <z_spin_unlock_valid>
    fa90:	2800      	cmp	r0, #0
    fa92:	d09f      	beq.n	f9d4 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
    fa94:	f386 8811 	msr	BASEPRI, r6
    fa98:	f3bf 8f6f 	isb	sy
    fa9c:	e7f0      	b.n	fa80 <z_impl_k_mutex_lock+0x154>
    fa9e:	bf00      	nop
    faa0:	000166e4 	.word	0x000166e4
    faa4:	00016791 	.word	0x00016791
    faa8:	00015341 	.word	0x00015341
    faac:	000167b3 	.word	0x000167b3
    fab0:	2000d1f8 	.word	0x2000d1f8
    fab4:	0001558e 	.word	0x0001558e
    fab8:	000155e7 	.word	0x000155e7
    fabc:	000155fc 	.word	0x000155fc
    fac0:	2000d1d4 	.word	0x2000d1d4
    fac4:	000155bb 	.word	0x000155bb
    fac8:	000155d2 	.word	0x000155d2

0000facc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    facc:	b570      	push	{r4, r5, r6, lr}
    face:	4604      	mov	r4, r0
    fad0:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    fad4:	b166      	cbz	r6, faf0 <z_impl_k_mutex_unlock+0x24>
    fad6:	4938      	ldr	r1, [pc, #224]	; (fbb8 <z_impl_k_mutex_unlock+0xec>)
    fad8:	23cd      	movs	r3, #205	; 0xcd
    fada:	4a38      	ldr	r2, [pc, #224]	; (fbbc <z_impl_k_mutex_unlock+0xf0>)
    fadc:	4838      	ldr	r0, [pc, #224]	; (fbc0 <z_impl_k_mutex_unlock+0xf4>)
    fade:	f002 ff75 	bl	129cc <assert_print>
    fae2:	4838      	ldr	r0, [pc, #224]	; (fbc4 <z_impl_k_mutex_unlock+0xf8>)
    fae4:	f002 ff72 	bl	129cc <assert_print>
    fae8:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    faea:	4834      	ldr	r0, [pc, #208]	; (fbbc <z_impl_k_mutex_unlock+0xf0>)
    faec:	f002 ff67 	bl	129be <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
    faf0:	6883      	ldr	r3, [r0, #8]
    faf2:	2b00      	cmp	r3, #0
    faf4:	d059      	beq.n	fbaa <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
    faf6:	4a34      	ldr	r2, [pc, #208]	; (fbc8 <z_impl_k_mutex_unlock+0xfc>)
    faf8:	6892      	ldr	r2, [r2, #8]
    fafa:	4293      	cmp	r3, r2
    fafc:	d158      	bne.n	fbb0 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    fafe:	68c3      	ldr	r3, [r0, #12]
    fb00:	b93b      	cbnz	r3, fb12 <z_impl_k_mutex_unlock+0x46>
    fb02:	4932      	ldr	r1, [pc, #200]	; (fbcc <z_impl_k_mutex_unlock+0x100>)
    fb04:	23e5      	movs	r3, #229	; 0xe5
    fb06:	4a2d      	ldr	r2, [pc, #180]	; (fbbc <z_impl_k_mutex_unlock+0xf0>)
    fb08:	482d      	ldr	r0, [pc, #180]	; (fbc0 <z_impl_k_mutex_unlock+0xf4>)
    fb0a:	f002 ff5f 	bl	129cc <assert_print>
    fb0e:	21e5      	movs	r1, #229	; 0xe5
    fb10:	e7eb      	b.n	faea <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    fb12:	2b01      	cmp	r3, #1
    fb14:	d003      	beq.n	fb1e <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
    fb16:	3b01      	subs	r3, #1
    fb18:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    fb1a:	2000      	movs	r0, #0
}
    fb1c:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    fb1e:	f04f 0320 	mov.w	r3, #32
    fb22:	f3ef 8511 	mrs	r5, BASEPRI
    fb26:	f383 8812 	msr	BASEPRI_MAX, r3
    fb2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fb2e:	4828      	ldr	r0, [pc, #160]	; (fbd0 <z_impl_k_mutex_unlock+0x104>)
    fb30:	f7ff fea6 	bl	f880 <z_spin_lock_valid>
    fb34:	b960      	cbnz	r0, fb50 <z_impl_k_mutex_unlock+0x84>
    fb36:	2394      	movs	r3, #148	; 0x94
    fb38:	4a26      	ldr	r2, [pc, #152]	; (fbd4 <z_impl_k_mutex_unlock+0x108>)
    fb3a:	4927      	ldr	r1, [pc, #156]	; (fbd8 <z_impl_k_mutex_unlock+0x10c>)
    fb3c:	4820      	ldr	r0, [pc, #128]	; (fbc0 <z_impl_k_mutex_unlock+0xf4>)
    fb3e:	f002 ff45 	bl	129cc <assert_print>
    fb42:	4923      	ldr	r1, [pc, #140]	; (fbd0 <z_impl_k_mutex_unlock+0x104>)
    fb44:	4825      	ldr	r0, [pc, #148]	; (fbdc <z_impl_k_mutex_unlock+0x110>)
    fb46:	f002 ff41 	bl	129cc <assert_print>
    fb4a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fb4c:	4821      	ldr	r0, [pc, #132]	; (fbd4 <z_impl_k_mutex_unlock+0x108>)
    fb4e:	e7cd      	b.n	faec <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
    fb50:	481f      	ldr	r0, [pc, #124]	; (fbd0 <z_impl_k_mutex_unlock+0x104>)
    fb52:	f7ff feb1 	bl	f8b8 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    fb56:	6921      	ldr	r1, [r4, #16]
    fb58:	68a0      	ldr	r0, [r4, #8]
    fb5a:	f004 fbbe 	bl	142da <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    fb5e:	4620      	mov	r0, r4
    fb60:	f001 fa7c 	bl	1105c <z_unpend_first_thread>
	mutex->owner = new_owner;
    fb64:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    fb66:	b150      	cbz	r0, fb7e <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
    fb68:	f990 200e 	ldrsb.w	r2, [r0, #14]
    fb6c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    fb6e:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    fb70:	f000 fd3e 	bl	105f0 <z_ready_thread>
		z_reschedule(&lock, key);
    fb74:	4629      	mov	r1, r5
    fb76:	4816      	ldr	r0, [pc, #88]	; (fbd0 <z_impl_k_mutex_unlock+0x104>)
    fb78:	f000 fd80 	bl	1067c <z_reschedule>
    fb7c:	e7cd      	b.n	fb1a <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
    fb7e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fb80:	4813      	ldr	r0, [pc, #76]	; (fbd0 <z_impl_k_mutex_unlock+0x104>)
    fb82:	f7ff fe8b 	bl	f89c <z_spin_unlock_valid>
    fb86:	b958      	cbnz	r0, fba0 <z_impl_k_mutex_unlock+0xd4>
    fb88:	23c2      	movs	r3, #194	; 0xc2
    fb8a:	4a12      	ldr	r2, [pc, #72]	; (fbd4 <z_impl_k_mutex_unlock+0x108>)
    fb8c:	4914      	ldr	r1, [pc, #80]	; (fbe0 <z_impl_k_mutex_unlock+0x114>)
    fb8e:	480c      	ldr	r0, [pc, #48]	; (fbc0 <z_impl_k_mutex_unlock+0xf4>)
    fb90:	f002 ff1c 	bl	129cc <assert_print>
    fb94:	490e      	ldr	r1, [pc, #56]	; (fbd0 <z_impl_k_mutex_unlock+0x104>)
    fb96:	4813      	ldr	r0, [pc, #76]	; (fbe4 <z_impl_k_mutex_unlock+0x118>)
    fb98:	f002 ff18 	bl	129cc <assert_print>
    fb9c:	21c2      	movs	r1, #194	; 0xc2
    fb9e:	e7d5      	b.n	fb4c <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
    fba0:	f385 8811 	msr	BASEPRI, r5
    fba4:	f3bf 8f6f 	isb	sy
    fba8:	e7b7      	b.n	fb1a <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
    fbaa:	f06f 0015 	mvn.w	r0, #21
    fbae:	e7b5      	b.n	fb1c <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
    fbb0:	f04f 30ff 	mov.w	r0, #4294967295
    fbb4:	e7b2      	b.n	fb1c <z_impl_k_mutex_unlock+0x50>
    fbb6:	bf00      	nop
    fbb8:	000166e4 	.word	0x000166e4
    fbbc:	00016791 	.word	0x00016791
    fbc0:	00015341 	.word	0x00015341
    fbc4:	000167b3 	.word	0x000167b3
    fbc8:	2000d1d4 	.word	0x2000d1d4
    fbcc:	000167d8 	.word	0x000167d8
    fbd0:	2000d1f8 	.word	0x2000d1f8
    fbd4:	0001558e 	.word	0x0001558e
    fbd8:	000155e7 	.word	0x000155e7
    fbdc:	000155fc 	.word	0x000155fc
    fbe0:	000155bb 	.word	0x000155bb
    fbe4:	000155d2 	.word	0x000155d2

0000fbe8 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
    fbe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fbec:	4604      	mov	r4, r0
    fbee:	460e      	mov	r6, r1
    fbf0:	4690      	mov	r8, r2
    fbf2:	4699      	mov	r9, r3
    fbf4:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    fbf8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    fbfc:	f04f 0320 	mov.w	r3, #32
    fc00:	f3ef 8711 	mrs	r7, BASEPRI
    fc04:	f383 8812 	msr	BASEPRI_MAX, r3
    fc08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fc0c:	4628      	mov	r0, r5
    fc0e:	f7ff fe37 	bl	f880 <z_spin_lock_valid>
    fc12:	b968      	cbnz	r0, fc30 <queue_insert+0x48>
    fc14:	2394      	movs	r3, #148	; 0x94
    fc16:	4a3b      	ldr	r2, [pc, #236]	; (fd04 <queue_insert+0x11c>)
    fc18:	493b      	ldr	r1, [pc, #236]	; (fd08 <queue_insert+0x120>)
    fc1a:	483c      	ldr	r0, [pc, #240]	; (fd0c <queue_insert+0x124>)
    fc1c:	f002 fed6 	bl	129cc <assert_print>
    fc20:	4629      	mov	r1, r5
    fc22:	483b      	ldr	r0, [pc, #236]	; (fd10 <queue_insert+0x128>)
    fc24:	f002 fed2 	bl	129cc <assert_print>
    fc28:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fc2a:	4836      	ldr	r0, [pc, #216]	; (fd04 <queue_insert+0x11c>)
    fc2c:	f002 fec7 	bl	129be <assert_post_action>
	z_spin_lock_set_owner(l);
    fc30:	4628      	mov	r0, r5
    fc32:	f7ff fe41 	bl	f8b8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
    fc36:	f1ba 0f00 	cmp.w	sl, #0
    fc3a:	d000      	beq.n	fc3e <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
    fc3c:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    fc3e:	f104 000c 	add.w	r0, r4, #12
    fc42:	f001 fa0b 	bl	1105c <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
    fc46:	b158      	cbz	r0, fc60 <queue_insert+0x78>
    fc48:	2300      	movs	r3, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    fc4a:	f8c0 8014 	str.w	r8, [r0, #20]
    fc4e:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
    fc50:	f000 fcce 	bl	105f0 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
    fc54:	4628      	mov	r0, r5
    fc56:	4639      	mov	r1, r7
    fc58:	f000 fd10 	bl	1067c <z_reschedule>
		return 0;
    fc5c:	2000      	movs	r0, #0
    fc5e:	e01c      	b.n	fc9a <queue_insert+0xb2>
	if (alloc) {
    fc60:	f1b9 0f00 	cmp.w	r9, #0
    fc64:	d02b      	beq.n	fcbe <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
    fc66:	2108      	movs	r1, #8
    fc68:	f002 f8b6 	bl	11dd8 <z_thread_aligned_alloc>
		if (anode == NULL) {
    fc6c:	b9b8      	cbnz	r0, fc9e <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fc6e:	4628      	mov	r0, r5
    fc70:	f7ff fe14 	bl	f89c <z_spin_unlock_valid>
    fc74:	b958      	cbnz	r0, fc8e <queue_insert+0xa6>
    fc76:	23c2      	movs	r3, #194	; 0xc2
    fc78:	4a22      	ldr	r2, [pc, #136]	; (fd04 <queue_insert+0x11c>)
    fc7a:	4926      	ldr	r1, [pc, #152]	; (fd14 <queue_insert+0x12c>)
    fc7c:	4823      	ldr	r0, [pc, #140]	; (fd0c <queue_insert+0x124>)
    fc7e:	f002 fea5 	bl	129cc <assert_print>
    fc82:	4629      	mov	r1, r5
    fc84:	4824      	ldr	r0, [pc, #144]	; (fd18 <queue_insert+0x130>)
    fc86:	f002 fea1 	bl	129cc <assert_print>
    fc8a:	21c2      	movs	r1, #194	; 0xc2
    fc8c:	e7cd      	b.n	fc2a <queue_insert+0x42>
	__asm__ volatile(
    fc8e:	f387 8811 	msr	BASEPRI, r7
    fc92:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    fc96:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
    fc9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
    fc9e:	2201      	movs	r2, #1
		anode->data = data;
    fca0:	f8c0 8004 	str.w	r8, [r0, #4]
    fca4:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    fca6:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    fca8:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
    fcac:	b95e      	cbnz	r6, fcc6 <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
    fcae:	6822      	ldr	r2, [r4, #0]
    fcb0:	430a      	orrs	r2, r1
    fcb2:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    fcb4:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    fcb6:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    fcb8:	b96a      	cbnz	r2, fcd6 <queue_insert+0xee>
	list->tail = node;
    fcba:	6060      	str	r0, [r4, #4]
}
    fcbc:	e00b      	b.n	fcd6 <queue_insert+0xee>
}
    fcbe:	4640      	mov	r0, r8
	node->next_and_flags = flags;
    fcc0:	f8c8 9000 	str.w	r9, [r8]
}
    fcc4:	e7ef      	b.n	fca6 <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    fcc6:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    fcc8:	2a03      	cmp	r2, #3
    fcca:	d810      	bhi.n	fcee <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
    fccc:	6001      	str	r1, [r0, #0]
	return list->tail;
    fcce:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    fcd0:	b939      	cbnz	r1, fce2 <queue_insert+0xfa>
	list->head = node;
    fcd2:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
    fcd6:	2104      	movs	r1, #4
    fcd8:	f104 0014 	add.w	r0, r4, #20
    fcdc:	f004 fc06 	bl	144ec <z_handle_obj_poll_events>
    fce0:	e7b8      	b.n	fc54 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    fce2:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    fce4:	f002 0203 	and.w	r2, r2, #3
    fce8:	4302      	orrs	r2, r0
    fcea:	600a      	str	r2, [r1, #0]
    fcec:	e7e5      	b.n	fcba <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    fcee:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    fcf2:	430a      	orrs	r2, r1
    fcf4:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    fcf6:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    fcf8:	f002 0203 	and.w	r2, r2, #3
    fcfc:	ea40 0302 	orr.w	r3, r0, r2
    fd00:	6033      	str	r3, [r6, #0]
}
    fd02:	e7e8      	b.n	fcd6 <queue_insert+0xee>
    fd04:	0001558e 	.word	0x0001558e
    fd08:	000155e7 	.word	0x000155e7
    fd0c:	00015341 	.word	0x00015341
    fd10:	000155fc 	.word	0x000155fc
    fd14:	000155bb 	.word	0x000155bb
    fd18:	000155d2 	.word	0x000155d2

0000fd1c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    fd1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    fd20:	4606      	mov	r6, r0
    fd22:	4691      	mov	r9, r2
    fd24:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    fd26:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    fd2a:	f04f 0320 	mov.w	r3, #32
    fd2e:	f3ef 8811 	mrs	r8, BASEPRI
    fd32:	f383 8812 	msr	BASEPRI_MAX, r3
    fd36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fd3a:	4628      	mov	r0, r5
    fd3c:	f7ff fda0 	bl	f880 <z_spin_lock_valid>
    fd40:	b968      	cbnz	r0, fd5e <z_impl_k_queue_get+0x42>
    fd42:	2394      	movs	r3, #148	; 0x94
    fd44:	4a23      	ldr	r2, [pc, #140]	; (fdd4 <z_impl_k_queue_get+0xb8>)
    fd46:	4924      	ldr	r1, [pc, #144]	; (fdd8 <z_impl_k_queue_get+0xbc>)
    fd48:	4824      	ldr	r0, [pc, #144]	; (fddc <z_impl_k_queue_get+0xc0>)
    fd4a:	f002 fe3f 	bl	129cc <assert_print>
    fd4e:	4629      	mov	r1, r5
    fd50:	4823      	ldr	r0, [pc, #140]	; (fde0 <z_impl_k_queue_get+0xc4>)
    fd52:	f002 fe3b 	bl	129cc <assert_print>
    fd56:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fd58:	481e      	ldr	r0, [pc, #120]	; (fdd4 <z_impl_k_queue_get+0xb8>)
    fd5a:	f002 fe30 	bl	129be <assert_post_action>
	z_spin_lock_set_owner(l);
    fd5e:	4628      	mov	r0, r5
    fd60:	f7ff fdaa 	bl	f8b8 <z_spin_lock_set_owner>
	return list->head;
    fd64:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    fd66:	b1ec      	cbz	r4, fda4 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    fd68:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    fd6a:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    fd6c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    fd70:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    fd72:	4620      	mov	r0, r4
    fd74:	f04f 0101 	mov.w	r1, #1
	list->head = node;
    fd78:	6033      	str	r3, [r6, #0]
	list->tail = node;
    fd7a:	bf08      	it	eq
    fd7c:	6073      	streq	r3, [r6, #4]
    fd7e:	f004 fabb 	bl	142f8 <z_queue_node_peek>
    fd82:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fd84:	4628      	mov	r0, r5
    fd86:	f7ff fd89 	bl	f89c <z_spin_unlock_valid>
    fd8a:	b9d8      	cbnz	r0, fdc4 <z_impl_k_queue_get+0xa8>
    fd8c:	23c2      	movs	r3, #194	; 0xc2
    fd8e:	4a11      	ldr	r2, [pc, #68]	; (fdd4 <z_impl_k_queue_get+0xb8>)
    fd90:	4914      	ldr	r1, [pc, #80]	; (fde4 <z_impl_k_queue_get+0xc8>)
    fd92:	4812      	ldr	r0, [pc, #72]	; (fddc <z_impl_k_queue_get+0xc0>)
    fd94:	f002 fe1a 	bl	129cc <assert_print>
    fd98:	4629      	mov	r1, r5
    fd9a:	4813      	ldr	r0, [pc, #76]	; (fde8 <z_impl_k_queue_get+0xcc>)
    fd9c:	f002 fe16 	bl	129cc <assert_print>
    fda0:	21c2      	movs	r1, #194	; 0xc2
    fda2:	e7d9      	b.n	fd58 <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    fda4:	ea59 0307 	orrs.w	r3, r9, r7
    fda8:	d0ec      	beq.n	fd84 <z_impl_k_queue_get+0x68>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    fdaa:	4641      	mov	r1, r8
    fdac:	4628      	mov	r0, r5
    fdae:	e9cd 9700 	strd	r9, r7, [sp]
    fdb2:	f106 020c 	add.w	r2, r6, #12
    fdb6:	f000 ff1d 	bl	10bf4 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
    fdba:	b938      	cbnz	r0, fdcc <z_impl_k_queue_get+0xb0>
    fdbc:	4b0b      	ldr	r3, [pc, #44]	; (fdec <z_impl_k_queue_get+0xd0>)
    fdbe:	689b      	ldr	r3, [r3, #8]
    fdc0:	695c      	ldr	r4, [r3, #20]
    fdc2:	e003      	b.n	fdcc <z_impl_k_queue_get+0xb0>
	__asm__ volatile(
    fdc4:	f388 8811 	msr	BASEPRI, r8
    fdc8:	f3bf 8f6f 	isb	sy
}
    fdcc:	4620      	mov	r0, r4
    fdce:	b003      	add	sp, #12
    fdd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fdd4:	0001558e 	.word	0x0001558e
    fdd8:	000155e7 	.word	0x000155e7
    fddc:	00015341 	.word	0x00015341
    fde0:	000155fc 	.word	0x000155fc
    fde4:	000155bb 	.word	0x000155bb
    fde8:	000155d2 	.word	0x000155d2
    fdec:	2000d1d4 	.word	0x2000d1d4

0000fdf0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    fdf0:	b538      	push	{r3, r4, r5, lr}
    fdf2:	4604      	mov	r4, r0
	__asm__ volatile(
    fdf4:	f04f 0320 	mov.w	r3, #32
    fdf8:	f3ef 8511 	mrs	r5, BASEPRI
    fdfc:	f383 8812 	msr	BASEPRI_MAX, r3
    fe00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fe04:	4817      	ldr	r0, [pc, #92]	; (fe64 <z_impl_k_sem_give+0x74>)
    fe06:	f7ff fd3b 	bl	f880 <z_spin_lock_valid>
    fe0a:	b968      	cbnz	r0, fe28 <z_impl_k_sem_give+0x38>
    fe0c:	2394      	movs	r3, #148	; 0x94
    fe0e:	4a16      	ldr	r2, [pc, #88]	; (fe68 <z_impl_k_sem_give+0x78>)
    fe10:	4916      	ldr	r1, [pc, #88]	; (fe6c <z_impl_k_sem_give+0x7c>)
    fe12:	4817      	ldr	r0, [pc, #92]	; (fe70 <z_impl_k_sem_give+0x80>)
    fe14:	f002 fdda 	bl	129cc <assert_print>
    fe18:	4912      	ldr	r1, [pc, #72]	; (fe64 <z_impl_k_sem_give+0x74>)
    fe1a:	4816      	ldr	r0, [pc, #88]	; (fe74 <z_impl_k_sem_give+0x84>)
    fe1c:	f002 fdd6 	bl	129cc <assert_print>
    fe20:	2194      	movs	r1, #148	; 0x94
    fe22:	4811      	ldr	r0, [pc, #68]	; (fe68 <z_impl_k_sem_give+0x78>)
    fe24:	f002 fdcb 	bl	129be <assert_post_action>
	z_spin_lock_set_owner(l);
    fe28:	480e      	ldr	r0, [pc, #56]	; (fe64 <z_impl_k_sem_give+0x74>)
    fe2a:	f7ff fd45 	bl	f8b8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    fe2e:	4620      	mov	r0, r4
    fe30:	f001 f914 	bl	1105c <z_unpend_first_thread>

	if (thread != NULL) {
    fe34:	b148      	cbz	r0, fe4a <z_impl_k_sem_give+0x5a>
    fe36:	2200      	movs	r2, #0
    fe38:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    fe3a:	f000 fbd9 	bl	105f0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    fe3e:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    fe40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    fe44:	4807      	ldr	r0, [pc, #28]	; (fe64 <z_impl_k_sem_give+0x74>)
    fe46:	f000 bc19 	b.w	1067c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    fe4a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    fe4e:	429a      	cmp	r2, r3
    fe50:	bf18      	it	ne
    fe52:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    fe54:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    fe56:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    fe58:	f104 0010 	add.w	r0, r4, #16
    fe5c:	f004 fb46 	bl	144ec <z_handle_obj_poll_events>
}
    fe60:	e7ed      	b.n	fe3e <z_impl_k_sem_give+0x4e>
    fe62:	bf00      	nop
    fe64:	2000d1fc 	.word	0x2000d1fc
    fe68:	0001558e 	.word	0x0001558e
    fe6c:	000155e7 	.word	0x000155e7
    fe70:	00015341 	.word	0x00015341
    fe74:	000155fc 	.word	0x000155fc

0000fe78 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    fe78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fe7a:	4604      	mov	r4, r0
    fe7c:	4616      	mov	r6, r2
    fe7e:	461d      	mov	r5, r3
    fe80:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    fe84:	b17b      	cbz	r3, fea6 <z_impl_k_sem_take+0x2e>
    fe86:	ea52 0305 	orrs.w	r3, r2, r5
    fe8a:	d00c      	beq.n	fea6 <z_impl_k_sem_take+0x2e>
    fe8c:	492d      	ldr	r1, [pc, #180]	; (ff44 <z_impl_k_sem_take+0xcc>)
    fe8e:	2379      	movs	r3, #121	; 0x79
    fe90:	4a2d      	ldr	r2, [pc, #180]	; (ff48 <z_impl_k_sem_take+0xd0>)
    fe92:	482e      	ldr	r0, [pc, #184]	; (ff4c <z_impl_k_sem_take+0xd4>)
    fe94:	f002 fd9a 	bl	129cc <assert_print>
    fe98:	482d      	ldr	r0, [pc, #180]	; (ff50 <z_impl_k_sem_take+0xd8>)
    fe9a:	f002 fd97 	bl	129cc <assert_print>
    fe9e:	2179      	movs	r1, #121	; 0x79
    fea0:	4829      	ldr	r0, [pc, #164]	; (ff48 <z_impl_k_sem_take+0xd0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fea2:	f002 fd8c 	bl	129be <assert_post_action>
    fea6:	f04f 0320 	mov.w	r3, #32
    feaa:	f3ef 8711 	mrs	r7, BASEPRI
    feae:	f383 8812 	msr	BASEPRI_MAX, r3
    feb2:	f3bf 8f6f 	isb	sy
    feb6:	4827      	ldr	r0, [pc, #156]	; (ff54 <z_impl_k_sem_take+0xdc>)
    feb8:	f7ff fce2 	bl	f880 <z_spin_lock_valid>
    febc:	b960      	cbnz	r0, fed8 <z_impl_k_sem_take+0x60>
    febe:	2394      	movs	r3, #148	; 0x94
    fec0:	4a25      	ldr	r2, [pc, #148]	; (ff58 <z_impl_k_sem_take+0xe0>)
    fec2:	4926      	ldr	r1, [pc, #152]	; (ff5c <z_impl_k_sem_take+0xe4>)
    fec4:	4821      	ldr	r0, [pc, #132]	; (ff4c <z_impl_k_sem_take+0xd4>)
    fec6:	f002 fd81 	bl	129cc <assert_print>
    feca:	4922      	ldr	r1, [pc, #136]	; (ff54 <z_impl_k_sem_take+0xdc>)
    fecc:	4824      	ldr	r0, [pc, #144]	; (ff60 <z_impl_k_sem_take+0xe8>)
    fece:	f002 fd7d 	bl	129cc <assert_print>
    fed2:	2194      	movs	r1, #148	; 0x94
    fed4:	4820      	ldr	r0, [pc, #128]	; (ff58 <z_impl_k_sem_take+0xe0>)
    fed6:	e7e4      	b.n	fea2 <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
    fed8:	481e      	ldr	r0, [pc, #120]	; (ff54 <z_impl_k_sem_take+0xdc>)
    feda:	f7ff fced 	bl	f8b8 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    fede:	68a3      	ldr	r3, [r4, #8]
    fee0:	b1c3      	cbz	r3, ff14 <z_impl_k_sem_take+0x9c>
		sem->count--;
    fee2:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fee4:	481b      	ldr	r0, [pc, #108]	; (ff54 <z_impl_k_sem_take+0xdc>)
    fee6:	60a3      	str	r3, [r4, #8]
    fee8:	f7ff fcd8 	bl	f89c <z_spin_unlock_valid>
    feec:	b958      	cbnz	r0, ff06 <z_impl_k_sem_take+0x8e>
    feee:	23c2      	movs	r3, #194	; 0xc2
    fef0:	4a19      	ldr	r2, [pc, #100]	; (ff58 <z_impl_k_sem_take+0xe0>)
    fef2:	491c      	ldr	r1, [pc, #112]	; (ff64 <z_impl_k_sem_take+0xec>)
    fef4:	4815      	ldr	r0, [pc, #84]	; (ff4c <z_impl_k_sem_take+0xd4>)
    fef6:	f002 fd69 	bl	129cc <assert_print>
    fefa:	4916      	ldr	r1, [pc, #88]	; (ff54 <z_impl_k_sem_take+0xdc>)
    fefc:	481a      	ldr	r0, [pc, #104]	; (ff68 <z_impl_k_sem_take+0xf0>)
    fefe:	f002 fd65 	bl	129cc <assert_print>
    ff02:	21c2      	movs	r1, #194	; 0xc2
    ff04:	e7e6      	b.n	fed4 <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
    ff06:	f387 8811 	msr	BASEPRI, r7
    ff0a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    ff0e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    ff10:	b003      	add	sp, #12
    ff12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    ff14:	ea56 0305 	orrs.w	r3, r6, r5
    ff18:	d10b      	bne.n	ff32 <z_impl_k_sem_take+0xba>
    ff1a:	480e      	ldr	r0, [pc, #56]	; (ff54 <z_impl_k_sem_take+0xdc>)
    ff1c:	f7ff fcbe 	bl	f89c <z_spin_unlock_valid>
    ff20:	2800      	cmp	r0, #0
    ff22:	d0e4      	beq.n	feee <z_impl_k_sem_take+0x76>
    ff24:	f387 8811 	msr	BASEPRI, r7
    ff28:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    ff2c:	f06f 000f 	mvn.w	r0, #15
    ff30:	e7ee      	b.n	ff10 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    ff32:	4622      	mov	r2, r4
    ff34:	4639      	mov	r1, r7
    ff36:	e9cd 6500 	strd	r6, r5, [sp]
    ff3a:	4806      	ldr	r0, [pc, #24]	; (ff54 <z_impl_k_sem_take+0xdc>)
    ff3c:	f000 fe5a 	bl	10bf4 <z_pend_curr>
	return ret;
    ff40:	e7e6      	b.n	ff10 <z_impl_k_sem_take+0x98>
    ff42:	bf00      	nop
    ff44:	0001680f 	.word	0x0001680f
    ff48:	000167ef 	.word	0x000167ef
    ff4c:	00015341 	.word	0x00015341
    ff50:	000156e6 	.word	0x000156e6
    ff54:	2000d1fc 	.word	0x2000d1fc
    ff58:	0001558e 	.word	0x0001558e
    ff5c:	000155e7 	.word	0x000155e7
    ff60:	000155fc 	.word	0x000155fc
    ff64:	000155bb 	.word	0x000155bb
    ff68:	000155d2 	.word	0x000155d2

0000ff6c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    ff6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff70:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ff72:	4e6e      	ldr	r6, [pc, #440]	; (1012c <work_queue_main+0x1c0>)
	return list->head;
    ff74:	4f6e      	ldr	r7, [pc, #440]	; (10130 <work_queue_main+0x1c4>)
    ff76:	b085      	sub	sp, #20
	__asm__ volatile(
    ff78:	f04f 0320 	mov.w	r3, #32
    ff7c:	f3ef 8811 	mrs	r8, BASEPRI
    ff80:	f383 8812 	msr	BASEPRI_MAX, r3
    ff84:	f3bf 8f6f 	isb	sy
    ff88:	4630      	mov	r0, r6
    ff8a:	f7ff fc79 	bl	f880 <z_spin_lock_valid>
    ff8e:	b968      	cbnz	r0, ffac <work_queue_main+0x40>
    ff90:	2394      	movs	r3, #148	; 0x94
    ff92:	4a68      	ldr	r2, [pc, #416]	; (10134 <work_queue_main+0x1c8>)
    ff94:	4968      	ldr	r1, [pc, #416]	; (10138 <work_queue_main+0x1cc>)
    ff96:	4869      	ldr	r0, [pc, #420]	; (1013c <work_queue_main+0x1d0>)
    ff98:	f002 fd18 	bl	129cc <assert_print>
    ff9c:	4963      	ldr	r1, [pc, #396]	; (1012c <work_queue_main+0x1c0>)
    ff9e:	4868      	ldr	r0, [pc, #416]	; (10140 <work_queue_main+0x1d4>)
    ffa0:	f002 fd14 	bl	129cc <assert_print>
    ffa4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ffa6:	4863      	ldr	r0, [pc, #396]	; (10134 <work_queue_main+0x1c8>)
    ffa8:	f002 fd09 	bl	129be <assert_post_action>
	z_spin_lock_set_owner(l);
    ffac:	4630      	mov	r0, r6
    ffae:	f7ff fc83 	bl	f8b8 <z_spin_lock_set_owner>
    ffb2:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
    ffb6:	b9ad      	cbnz	r5, ffe4 <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    ffb8:	2102      	movs	r1, #2
    ffba:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    ffbe:	f004 f9c2 	bl	14346 <flag_test_and_clear>
    ffc2:	2800      	cmp	r0, #0
    ffc4:	d135      	bne.n	10032 <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    ffc6:	2300      	movs	r3, #0
    ffc8:	f04f 32ff 	mov.w	r2, #4294967295
    ffcc:	9302      	str	r3, [sp, #8]
    ffce:	f04f 33ff 	mov.w	r3, #4294967295
    ffd2:	4641      	mov	r1, r8
    ffd4:	e9cd 2300 	strd	r2, r3, [sp]
    ffd8:	4630      	mov	r0, r6
    ffda:	f104 0290 	add.w	r2, r4, #144	; 0x90
    ffde:	f001 fb2f 	bl	11640 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
    ffe2:	e7c9      	b.n	ff78 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ffe4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
    ffe8:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ffea:	4295      	cmp	r5, r2
	list->tail = node;
    ffec:	bf08      	it	eq
    ffee:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	list->head = node;
    fff2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	*flagp |= BIT(bit);
    fff6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fffa:	4630      	mov	r0, r6
    fffc:	f043 0302 	orr.w	r3, r3, #2
   10000:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   10004:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   10006:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   1000a:	f023 0304 	bic.w	r3, r3, #4
   1000e:	f043 0301 	orr.w	r3, r3, #1
   10012:	60eb      	str	r3, [r5, #12]
   10014:	f7ff fc42 	bl	f89c <z_spin_unlock_valid>
   10018:	b9a8      	cbnz	r0, 10046 <work_queue_main+0xda>
   1001a:	23c2      	movs	r3, #194	; 0xc2
   1001c:	4a45      	ldr	r2, [pc, #276]	; (10134 <work_queue_main+0x1c8>)
   1001e:	4949      	ldr	r1, [pc, #292]	; (10144 <work_queue_main+0x1d8>)
   10020:	4846      	ldr	r0, [pc, #280]	; (1013c <work_queue_main+0x1d0>)
   10022:	f002 fcd3 	bl	129cc <assert_print>
   10026:	4941      	ldr	r1, [pc, #260]	; (1012c <work_queue_main+0x1c0>)
   10028:	4847      	ldr	r0, [pc, #284]	; (10148 <work_queue_main+0x1dc>)
   1002a:	f002 fccf 	bl	129cc <assert_print>
   1002e:	21c2      	movs	r1, #194	; 0xc2
   10030:	e7b9      	b.n	ffa6 <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   10032:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   10036:	2200      	movs	r2, #0
   10038:	2101      	movs	r1, #1
   1003a:	4628      	mov	r0, r5
   1003c:	f001 faa2 	bl	11584 <z_sched_wake>
   10040:	2800      	cmp	r0, #0
   10042:	d1f8      	bne.n	10036 <work_queue_main+0xca>
   10044:	e7bf      	b.n	ffc6 <work_queue_main+0x5a>
	__asm__ volatile(
   10046:	f388 8811 	msr	BASEPRI, r8
   1004a:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   1004e:	f1b9 0f00 	cmp.w	r9, #0
   10052:	d10a      	bne.n	1006a <work_queue_main+0xfe>
   10054:	493d      	ldr	r1, [pc, #244]	; (1014c <work_queue_main+0x1e0>)
   10056:	4839      	ldr	r0, [pc, #228]	; (1013c <work_queue_main+0x1d0>)
   10058:	f240 239b 	movw	r3, #667	; 0x29b
   1005c:	4a3c      	ldr	r2, [pc, #240]	; (10150 <work_queue_main+0x1e4>)
   1005e:	f002 fcb5 	bl	129cc <assert_print>
   10062:	f240 219b 	movw	r1, #667	; 0x29b
   10066:	483a      	ldr	r0, [pc, #232]	; (10150 <work_queue_main+0x1e4>)
   10068:	e79e      	b.n	ffa8 <work_queue_main+0x3c>
		handler(work);
   1006a:	4628      	mov	r0, r5
   1006c:	47c8      	blx	r9
	__asm__ volatile(
   1006e:	f04f 0320 	mov.w	r3, #32
   10072:	f3ef 8a11 	mrs	sl, BASEPRI
   10076:	f383 8812 	msr	BASEPRI_MAX, r3
   1007a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1007e:	4630      	mov	r0, r6
   10080:	f7ff fbfe 	bl	f880 <z_spin_lock_valid>
   10084:	2800      	cmp	r0, #0
   10086:	d083      	beq.n	ff90 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   10088:	4630      	mov	r0, r6
   1008a:	f7ff fc15 	bl	f8b8 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   1008e:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   10090:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   10092:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   10096:	d417      	bmi.n	100c8 <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
   10098:	60ea      	str	r2, [r5, #12]
   1009a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1009e:	4630      	mov	r0, r6
   100a0:	f023 0302 	bic.w	r3, r3, #2
   100a4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	return (*flagp & BIT(bit)) != 0U;
   100a8:	f3c3 2500 	ubfx	r5, r3, #8, #1
   100ac:	f7ff fbf6 	bl	f89c <z_spin_unlock_valid>
   100b0:	2800      	cmp	r0, #0
   100b2:	d0b2      	beq.n	1001a <work_queue_main+0xae>
	__asm__ volatile(
   100b4:	f38a 8811 	msr	BASEPRI, sl
   100b8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   100bc:	2d00      	cmp	r5, #0
   100be:	f47f af5b 	bne.w	ff78 <work_queue_main+0xc>
	z_impl_k_yield();
   100c2:	f001 f823 	bl	1110c <z_impl_k_yield>
}
   100c6:	e757      	b.n	ff78 <work_queue_main+0xc>
	return list->head;
   100c8:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   100ca:	f023 0303 	bic.w	r3, r3, #3
   100ce:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   100d0:	2800      	cmp	r0, #0
   100d2:	d0e2      	beq.n	1009a <work_queue_main+0x12e>
	return node->next;
   100d4:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   100d8:	46c3      	mov	fp, r8
	return node->next;
   100da:	f8d0 9000 	ldr.w	r9, [r0]
   100de:	2800      	cmp	r0, #0
   100e0:	d0db      	beq.n	1009a <work_queue_main+0x12e>
		if (wc->work == work) {
   100e2:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   100e4:	4602      	mov	r2, r0
		if (wc->work == work) {
   100e6:	429d      	cmp	r5, r3
   100e8:	d10d      	bne.n	10106 <work_queue_main+0x19a>
   100ea:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   100ec:	f1b8 0f00 	cmp.w	r8, #0
   100f0:	d112      	bne.n	10118 <work_queue_main+0x1ac>
   100f2:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   100f4:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   100f6:	4283      	cmp	r3, r0
   100f8:	d100      	bne.n	100fc <work_queue_main+0x190>
	list->tail = node;
   100fa:	607a      	str	r2, [r7, #4]
	parent->next = child;
   100fc:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   10100:	f7ff fe76 	bl	fdf0 <z_impl_k_sem_give>
}
   10104:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   10106:	f1b9 0f00 	cmp.w	r9, #0
   1010a:	d00d      	beq.n	10128 <work_queue_main+0x1bc>
	return node->next;
   1010c:	f8d9 3000 	ldr.w	r3, [r9]
   10110:	4648      	mov	r0, r9
   10112:	4690      	mov	r8, r2
   10114:	4699      	mov	r9, r3
   10116:	e7e2      	b.n	100de <work_queue_main+0x172>
	parent->next = child;
   10118:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   1011c:	687b      	ldr	r3, [r7, #4]
   1011e:	4283      	cmp	r3, r0
	list->tail = node;
   10120:	bf08      	it	eq
   10122:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   10126:	e7e9      	b.n	100fc <work_queue_main+0x190>
   10128:	464b      	mov	r3, r9
   1012a:	e7f1      	b.n	10110 <work_queue_main+0x1a4>
   1012c:	2000d208 	.word	0x2000d208
   10130:	2000d200 	.word	0x2000d200
   10134:	0001558e 	.word	0x0001558e
   10138:	000155e7 	.word	0x000155e7
   1013c:	00015341 	.word	0x00015341
   10140:	000155fc 	.word	0x000155fc
   10144:	000155bb 	.word	0x000155bb
   10148:	000155d2 	.word	0x000155d2
   1014c:	0001687e 	.word	0x0001687e
   10150:	0001685d 	.word	0x0001685d

00010154 <submit_to_queue_locked>:
{
   10154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   10156:	68c3      	ldr	r3, [r0, #12]
{
   10158:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1015a:	079a      	lsls	r2, r3, #30
{
   1015c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1015e:	f3c3 0640 	ubfx	r6, r3, #1, #1
   10162:	d439      	bmi.n	101d8 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   10164:	075b      	lsls	r3, r3, #29
   10166:	d425      	bmi.n	101b4 <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   10168:	680b      	ldr	r3, [r1, #0]
   1016a:	b90b      	cbnz	r3, 10170 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1016c:	6883      	ldr	r3, [r0, #8]
   1016e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   10170:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   10172:	07dd      	lsls	r5, r3, #31
   10174:	d521      	bpl.n	101ba <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   10176:	68a3      	ldr	r3, [r4, #8]
   10178:	b95b      	cbnz	r3, 10192 <submit_to_queue_locked+0x3e>
   1017a:	4928      	ldr	r1, [pc, #160]	; (1021c <submit_to_queue_locked+0xc8>)
   1017c:	4828      	ldr	r0, [pc, #160]	; (10220 <submit_to_queue_locked+0xcc>)
   1017e:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   10182:	4a28      	ldr	r2, [pc, #160]	; (10224 <submit_to_queue_locked+0xd0>)
   10184:	f002 fc22 	bl	129cc <assert_print>
   10188:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   1018c:	4825      	ldr	r0, [pc, #148]	; (10224 <submit_to_queue_locked+0xd0>)
   1018e:	f002 fc16 	bl	129be <assert_post_action>
			ret = 2;
   10192:	2602      	movs	r6, #2
			*queuep = work->queue;
   10194:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   10196:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   10198:	2d00      	cmp	r5, #0
   1019a:	d03c      	beq.n	10216 <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1019c:	4b22      	ldr	r3, [pc, #136]	; (10228 <submit_to_queue_locked+0xd4>)
   1019e:	689b      	ldr	r3, [r3, #8]
   101a0:	42ab      	cmp	r3, r5
   101a2:	d00c      	beq.n	101be <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   101a4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   101a8:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   101aa:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   101ae:	d416      	bmi.n	101de <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   101b0:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   101b4:	2300      	movs	r3, #0
   101b6:	603b      	str	r3, [r7, #0]
	return ret;
   101b8:	e027      	b.n	1020a <submit_to_queue_locked+0xb6>
		ret = 1;
   101ba:	2601      	movs	r6, #1
   101bc:	e7eb      	b.n	10196 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   101be:	f004 f87a 	bl	142b6 <k_is_in_isr>
   101c2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   101c6:	2800      	cmp	r0, #0
   101c8:	d1ee      	bne.n	101a8 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   101ca:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   101cc:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   101d0:	d5ee      	bpl.n	101b0 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   101d2:	b152      	cbz	r2, 101ea <submit_to_queue_locked+0x96>
   101d4:	075b      	lsls	r3, r3, #29
   101d6:	d408      	bmi.n	101ea <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   101d8:	f06f 060f 	mvn.w	r6, #15
   101dc:	e7ea      	b.n	101b4 <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   101de:	2a00      	cmp	r2, #0
   101e0:	d1fa      	bne.n	101d8 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   101e2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   101e6:	2b00      	cmp	r3, #0
   101e8:	d1f6      	bne.n	101d8 <submit_to_queue_locked+0x84>
	parent->next = child;
   101ea:	2300      	movs	r3, #0
   101ec:	6023      	str	r3, [r4, #0]
	return list->tail;
   101ee:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   101f2:	b963      	cbnz	r3, 1020e <submit_to_queue_locked+0xba>
	list->head = node;
   101f4:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   101f8:	4628      	mov	r0, r5
   101fa:	f004 f8af 	bl	1435c <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   101fe:	68e3      	ldr	r3, [r4, #12]
   10200:	f043 0304 	orr.w	r3, r3, #4
   10204:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   10206:	683b      	ldr	r3, [r7, #0]
   10208:	60a3      	str	r3, [r4, #8]
}
   1020a:	4630      	mov	r0, r6
   1020c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1020e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   10210:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   10214:	e7f0      	b.n	101f8 <submit_to_queue_locked+0xa4>
		return -EINVAL;
   10216:	f06f 0615 	mvn.w	r6, #21
   1021a:	e7cb      	b.n	101b4 <submit_to_queue_locked+0x60>
   1021c:	00016895 	.word	0x00016895
   10220:	00015341 	.word	0x00015341
   10224:	0001685d 	.word	0x0001685d
   10228:	2000d1d4 	.word	0x2000d1d4

0001022c <k_work_init>:
{
   1022c:	b538      	push	{r3, r4, r5, lr}
   1022e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   10230:	4604      	mov	r4, r0
   10232:	b948      	cbnz	r0, 10248 <k_work_init+0x1c>
   10234:	490c      	ldr	r1, [pc, #48]	; (10268 <k_work_init+0x3c>)
   10236:	2389      	movs	r3, #137	; 0x89
   10238:	4a0c      	ldr	r2, [pc, #48]	; (1026c <k_work_init+0x40>)
   1023a:	480d      	ldr	r0, [pc, #52]	; (10270 <k_work_init+0x44>)
   1023c:	f002 fbc6 	bl	129cc <assert_print>
   10240:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   10242:	480a      	ldr	r0, [pc, #40]	; (1026c <k_work_init+0x40>)
   10244:	f002 fbbb 	bl	129be <assert_post_action>
   10248:	b939      	cbnz	r1, 1025a <k_work_init+0x2e>
   1024a:	490a      	ldr	r1, [pc, #40]	; (10274 <k_work_init+0x48>)
   1024c:	238a      	movs	r3, #138	; 0x8a
   1024e:	4a07      	ldr	r2, [pc, #28]	; (1026c <k_work_init+0x40>)
   10250:	4807      	ldr	r0, [pc, #28]	; (10270 <k_work_init+0x44>)
   10252:	f002 fbbb 	bl	129cc <assert_print>
   10256:	218a      	movs	r1, #138	; 0x8a
   10258:	e7f3      	b.n	10242 <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1025a:	2210      	movs	r2, #16
   1025c:	2100      	movs	r1, #0
   1025e:	f004 f994 	bl	1458a <memset>
   10262:	6065      	str	r5, [r4, #4]
}
   10264:	bd38      	pop	{r3, r4, r5, pc}
   10266:	bf00      	nop
   10268:	000168b0 	.word	0x000168b0
   1026c:	0001685d 	.word	0x0001685d
   10270:	00015341 	.word	0x00015341
   10274:	0001687e 	.word	0x0001687e

00010278 <z_work_submit_to_queue>:
{
   10278:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   1027a:	460c      	mov	r4, r1
{
   1027c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   1027e:	b959      	cbnz	r1, 10298 <z_work_submit_to_queue+0x20>
   10280:	4921      	ldr	r1, [pc, #132]	; (10308 <z_work_submit_to_queue+0x90>)
   10282:	4822      	ldr	r0, [pc, #136]	; (1030c <z_work_submit_to_queue+0x94>)
   10284:	f44f 73ba 	mov.w	r3, #372	; 0x174
   10288:	4a21      	ldr	r2, [pc, #132]	; (10310 <z_work_submit_to_queue+0x98>)
   1028a:	f002 fb9f 	bl	129cc <assert_print>
   1028e:	f44f 71ba 	mov.w	r1, #372	; 0x174
   10292:	481f      	ldr	r0, [pc, #124]	; (10310 <z_work_submit_to_queue+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10294:	f002 fb93 	bl	129be <assert_post_action>
	__asm__ volatile(
   10298:	f04f 0320 	mov.w	r3, #32
   1029c:	f3ef 8511 	mrs	r5, BASEPRI
   102a0:	f383 8812 	msr	BASEPRI_MAX, r3
   102a4:	f3bf 8f6f 	isb	sy
   102a8:	481a      	ldr	r0, [pc, #104]	; (10314 <z_work_submit_to_queue+0x9c>)
   102aa:	f7ff fae9 	bl	f880 <z_spin_lock_valid>
   102ae:	b960      	cbnz	r0, 102ca <z_work_submit_to_queue+0x52>
   102b0:	2394      	movs	r3, #148	; 0x94
   102b2:	4a19      	ldr	r2, [pc, #100]	; (10318 <z_work_submit_to_queue+0xa0>)
   102b4:	4919      	ldr	r1, [pc, #100]	; (1031c <z_work_submit_to_queue+0xa4>)
   102b6:	4815      	ldr	r0, [pc, #84]	; (1030c <z_work_submit_to_queue+0x94>)
   102b8:	f002 fb88 	bl	129cc <assert_print>
   102bc:	4915      	ldr	r1, [pc, #84]	; (10314 <z_work_submit_to_queue+0x9c>)
   102be:	4818      	ldr	r0, [pc, #96]	; (10320 <z_work_submit_to_queue+0xa8>)
   102c0:	f002 fb84 	bl	129cc <assert_print>
   102c4:	2194      	movs	r1, #148	; 0x94
   102c6:	4814      	ldr	r0, [pc, #80]	; (10318 <z_work_submit_to_queue+0xa0>)
   102c8:	e7e4      	b.n	10294 <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   102ca:	4812      	ldr	r0, [pc, #72]	; (10314 <z_work_submit_to_queue+0x9c>)
   102cc:	f7ff faf4 	bl	f8b8 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   102d0:	4620      	mov	r0, r4
   102d2:	a901      	add	r1, sp, #4
   102d4:	f7ff ff3e 	bl	10154 <submit_to_queue_locked>
   102d8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   102da:	480e      	ldr	r0, [pc, #56]	; (10314 <z_work_submit_to_queue+0x9c>)
   102dc:	f7ff fade 	bl	f89c <z_spin_unlock_valid>
   102e0:	b958      	cbnz	r0, 102fa <z_work_submit_to_queue+0x82>
   102e2:	23c2      	movs	r3, #194	; 0xc2
   102e4:	4a0c      	ldr	r2, [pc, #48]	; (10318 <z_work_submit_to_queue+0xa0>)
   102e6:	490f      	ldr	r1, [pc, #60]	; (10324 <z_work_submit_to_queue+0xac>)
   102e8:	4808      	ldr	r0, [pc, #32]	; (1030c <z_work_submit_to_queue+0x94>)
   102ea:	f002 fb6f 	bl	129cc <assert_print>
   102ee:	4909      	ldr	r1, [pc, #36]	; (10314 <z_work_submit_to_queue+0x9c>)
   102f0:	480d      	ldr	r0, [pc, #52]	; (10328 <z_work_submit_to_queue+0xb0>)
   102f2:	f002 fb6b 	bl	129cc <assert_print>
   102f6:	21c2      	movs	r1, #194	; 0xc2
   102f8:	e7e5      	b.n	102c6 <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   102fa:	f385 8811 	msr	BASEPRI, r5
   102fe:	f3bf 8f6f 	isb	sy
}
   10302:	4620      	mov	r0, r4
   10304:	b003      	add	sp, #12
   10306:	bd30      	pop	{r4, r5, pc}
   10308:	000168b0 	.word	0x000168b0
   1030c:	00015341 	.word	0x00015341
   10310:	0001685d 	.word	0x0001685d
   10314:	2000d208 	.word	0x2000d208
   10318:	0001558e 	.word	0x0001558e
   1031c:	000155e7 	.word	0x000155e7
   10320:	000155fc 	.word	0x000155fc
   10324:	000155bb 	.word	0x000155bb
   10328:	000155d2 	.word	0x000155d2

0001032c <k_work_submit>:
{
   1032c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1032e:	4801      	ldr	r0, [pc, #4]	; (10334 <k_work_submit+0x8>)
   10330:	f004 b81b 	b.w	1436a <k_work_submit_to_queue>
   10334:	2000c9f0 	.word	0x2000c9f0

00010338 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   10338:	b5f0      	push	{r4, r5, r6, r7, lr}
   1033a:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   1033c:	4604      	mov	r4, r0
{
   1033e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   10340:	b958      	cbnz	r0, 1035a <k_work_queue_start+0x22>
   10342:	492b      	ldr	r1, [pc, #172]	; (103f0 <k_work_queue_start+0xb8>)
   10344:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   10348:	4a2a      	ldr	r2, [pc, #168]	; (103f4 <k_work_queue_start+0xbc>)
   1034a:	482b      	ldr	r0, [pc, #172]	; (103f8 <k_work_queue_start+0xc0>)
   1034c:	f002 fb3e 	bl	129cc <assert_print>
   10350:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   10354:	4827      	ldr	r0, [pc, #156]	; (103f4 <k_work_queue_start+0xbc>)
   10356:	f002 fb32 	bl	129be <assert_post_action>
   1035a:	b949      	cbnz	r1, 10370 <k_work_queue_start+0x38>
   1035c:	4927      	ldr	r1, [pc, #156]	; (103fc <k_work_queue_start+0xc4>)
   1035e:	f240 23c9 	movw	r3, #713	; 0x2c9
   10362:	4a24      	ldr	r2, [pc, #144]	; (103f4 <k_work_queue_start+0xbc>)
   10364:	4824      	ldr	r0, [pc, #144]	; (103f8 <k_work_queue_start+0xc0>)
   10366:	f002 fb31 	bl	129cc <assert_print>
   1036a:	f240 21c9 	movw	r1, #713	; 0x2c9
   1036e:	e7f1      	b.n	10354 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   10370:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   10374:	f010 0001 	ands.w	r0, r0, #1
   10378:	d009      	beq.n	1038e <k_work_queue_start+0x56>
   1037a:	4921      	ldr	r1, [pc, #132]	; (10400 <k_work_queue_start+0xc8>)
   1037c:	f240 23ca 	movw	r3, #714	; 0x2ca
   10380:	4a1c      	ldr	r2, [pc, #112]	; (103f4 <k_work_queue_start+0xbc>)
   10382:	481d      	ldr	r0, [pc, #116]	; (103f8 <k_work_queue_start+0xc0>)
   10384:	f002 fb22 	bl	129cc <assert_print>
   10388:	f240 21ca 	movw	r1, #714	; 0x2ca
   1038c:	e7e2      	b.n	10354 <k_work_queue_start+0x1c>
	list->tail = NULL;
   1038e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   10392:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   10396:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   1039a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1039e:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   103a2:	b31d      	cbz	r5, 103ec <k_work_queue_start+0xb4>
   103a4:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   103a6:	2800      	cmp	r0, #0
   103a8:	f240 1001 	movw	r0, #257	; 0x101
   103ac:	bf08      	it	eq
   103ae:	2001      	moveq	r0, #1
	*flagp = flags;
   103b0:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   103b4:	2000      	movs	r0, #0
   103b6:	f04f 36ff 	mov.w	r6, #4294967295
   103ba:	f04f 37ff 	mov.w	r7, #4294967295
   103be:	e9cd 3003 	strd	r3, r0, [sp, #12]
   103c2:	e9cd 0001 	strd	r0, r0, [sp, #4]
   103c6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   103ca:	4620      	mov	r0, r4
   103cc:	4b0d      	ldr	r3, [pc, #52]	; (10404 <k_work_queue_start+0xcc>)
   103ce:	9400      	str	r4, [sp, #0]
   103d0:	f7ff f98c 	bl	f6ec <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   103d4:	b125      	cbz	r5, 103e0 <k_work_queue_start+0xa8>
   103d6:	6829      	ldr	r1, [r5, #0]
   103d8:	b111      	cbz	r1, 103e0 <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   103da:	4620      	mov	r0, r4
   103dc:	f003 ff71 	bl	142c2 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   103e0:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   103e2:	b009      	add	sp, #36	; 0x24
   103e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   103e8:	f003 bf6e 	b.w	142c8 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   103ec:	2001      	movs	r0, #1
   103ee:	e7df      	b.n	103b0 <k_work_queue_start+0x78>
   103f0:	000168c4 	.word	0x000168c4
   103f4:	0001685d 	.word	0x0001685d
   103f8:	00015341 	.word	0x00015341
   103fc:	000168ca 	.word	0x000168ca
   10400:	000168d0 	.word	0x000168d0
   10404:	0000ff6d 	.word	0x0000ff6d

00010408 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   10408:	89c3      	ldrh	r3, [r0, #14]
   1040a:	2b7f      	cmp	r3, #127	; 0x7f
   1040c:	d812      	bhi.n	10434 <sliceable+0x2c>
	int ret = slice_ticks;
   1040e:	4b0a      	ldr	r3, [pc, #40]	; (10438 <sliceable+0x30>)
   10410:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   10412:	b163      	cbz	r3, 1042e <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   10414:	4b09      	ldr	r3, [pc, #36]	; (1043c <sliceable+0x34>)
   10416:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1041a:	681b      	ldr	r3, [r3, #0]
   1041c:	429a      	cmp	r2, r3
   1041e:	db09      	blt.n	10434 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   10420:	7b43      	ldrb	r3, [r0, #13]
   10422:	06db      	lsls	r3, r3, #27
   10424:	d106      	bne.n	10434 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   10426:	4b06      	ldr	r3, [pc, #24]	; (10440 <sliceable+0x38>)
   10428:	1ac3      	subs	r3, r0, r3
   1042a:	bf18      	it	ne
   1042c:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   1042e:	f003 0001 	and.w	r0, r3, #1
   10432:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   10434:	2300      	movs	r3, #0
   10436:	e7fa      	b.n	1042e <sliceable+0x26>
   10438:	2000d214 	.word	0x2000d214
   1043c:	2000d210 	.word	0x2000d210
   10440:	2000c8c0 	.word	0x2000c8c0

00010444 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
   10444:	b508      	push	{r3, lr}
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   10446:	b168      	cbz	r0, 10464 <slice_timeout+0x20>
   10448:	4b10      	ldr	r3, [pc, #64]	; (1048c <slice_timeout+0x48>)
   1044a:	4298      	cmp	r0, r3
   1044c:	d30a      	bcc.n	10464 <slice_timeout+0x20>
   1044e:	f103 0218 	add.w	r2, r3, #24
   10452:	4290      	cmp	r0, r2
   10454:	d206      	bcs.n	10464 <slice_timeout+0x20>
   10456:	2218      	movs	r2, #24
   10458:	1ac0      	subs	r0, r0, r3
   1045a:	fbb0 f3f2 	udiv	r3, r0, r2
   1045e:	fb02 0313 	mls	r3, r2, r3, r0
   10462:	b15b      	cbz	r3, 1047c <slice_timeout+0x38>
   10464:	490a      	ldr	r1, [pc, #40]	; (10490 <slice_timeout+0x4c>)
   10466:	480b      	ldr	r0, [pc, #44]	; (10494 <slice_timeout+0x50>)
   10468:	f240 13cb 	movw	r3, #459	; 0x1cb
   1046c:	4a0a      	ldr	r2, [pc, #40]	; (10498 <slice_timeout+0x54>)
   1046e:	f002 faad 	bl	129cc <assert_print>
   10472:	f240 11cb 	movw	r1, #459	; 0x1cb
   10476:	4808      	ldr	r0, [pc, #32]	; (10498 <slice_timeout+0x54>)
   10478:	f002 faa1 	bl	129be <assert_post_action>

	slice_expired[cpu] = true;
   1047c:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   1047e:	4b07      	ldr	r3, [pc, #28]	; (1049c <slice_timeout+0x58>)
   10480:	10c0      	asrs	r0, r0, #3
   10482:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
   10484:	4b06      	ldr	r3, [pc, #24]	; (104a0 <slice_timeout+0x5c>)
   10486:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   10488:	bd08      	pop	{r3, pc}
   1048a:	bf00      	nop
   1048c:	2000c9d0 	.word	0x2000c9d0
   10490:	00016926 	.word	0x00016926
   10494:	00015341 	.word	0x00015341
   10498:	00016904 	.word	0x00016904
   1049c:	aaaaaaab 	.word	0xaaaaaaab
   104a0:	2000e6f1 	.word	0x2000e6f1

000104a4 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   104a4:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   104a6:	4b0e      	ldr	r3, [pc, #56]	; (104e0 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   104a8:	4c0e      	ldr	r4, [pc, #56]	; (104e4 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   104aa:	7c1e      	ldrb	r6, [r3, #16]
{
   104ac:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   104ae:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   104b2:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   104b6:	4620      	mov	r0, r4
   104b8:	f001 f9f4 	bl	118a4 <z_abort_timeout>
	slice_expired[cpu] = false;
   104bc:	2200      	movs	r2, #0
   104be:	4b0a      	ldr	r3, [pc, #40]	; (104e8 <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
   104c0:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   104c2:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   104c4:	f7ff ffa0 	bl	10408 <sliceable>
   104c8:	b148      	cbz	r0, 104de <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   104ca:	4b08      	ldr	r3, [pc, #32]	; (104ec <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   104cc:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
   104ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
   104d2:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   104d4:	4906      	ldr	r1, [pc, #24]	; (104f0 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   104d6:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   104d8:	17d3      	asrs	r3, r2, #31
   104da:	f001 b923 	b.w	11724 <z_add_timeout>
}
   104de:	bd70      	pop	{r4, r5, r6, pc}
   104e0:	2000d1d4 	.word	0x2000d1d4
   104e4:	2000c9d0 	.word	0x2000c9d0
   104e8:	2000e6f1 	.word	0x2000e6f1
   104ec:	2000d214 	.word	0x2000d214
   104f0:	00010445 	.word	0x00010445

000104f4 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   104f4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   104f6:	4d14      	ldr	r5, [pc, #80]	; (10548 <update_cache+0x54>)
   104f8:	462b      	mov	r3, r5
   104fa:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   104fe:	429c      	cmp	r4, r3
   10500:	d000      	beq.n	10504 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   10502:	b904      	cbnz	r4, 10506 <update_cache+0x12>
   10504:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   10506:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   10508:	b9a8      	cbnz	r0, 10536 <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   1050a:	b963      	cbnz	r3, 10526 <update_cache+0x32>
   1050c:	490f      	ldr	r1, [pc, #60]	; (1054c <update_cache+0x58>)
   1050e:	238a      	movs	r3, #138	; 0x8a
   10510:	4a0f      	ldr	r2, [pc, #60]	; (10550 <update_cache+0x5c>)
   10512:	4810      	ldr	r0, [pc, #64]	; (10554 <update_cache+0x60>)
   10514:	f002 fa5a 	bl	129cc <assert_print>
   10518:	480f      	ldr	r0, [pc, #60]	; (10558 <update_cache+0x64>)
   1051a:	f002 fa57 	bl	129cc <assert_print>
   1051e:	218a      	movs	r1, #138	; 0x8a
   10520:	480b      	ldr	r0, [pc, #44]	; (10550 <update_cache+0x5c>)
   10522:	f002 fa4c 	bl	129be <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   10526:	7b5a      	ldrb	r2, [r3, #13]
   10528:	06d2      	lsls	r2, r2, #27
   1052a:	d104      	bne.n	10536 <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1052c:	69a2      	ldr	r2, [r4, #24]
   1052e:	b912      	cbnz	r2, 10536 <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   10530:	89da      	ldrh	r2, [r3, #14]
   10532:	2a7f      	cmp	r2, #127	; 0x7f
   10534:	d805      	bhi.n	10542 <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   10536:	429c      	cmp	r4, r3
   10538:	d002      	beq.n	10540 <update_cache+0x4c>
			z_reset_time_slice(thread);
   1053a:	4620      	mov	r0, r4
   1053c:	f7ff ffb2 	bl	104a4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   10540:	4623      	mov	r3, r4
   10542:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   10544:	bd38      	pop	{r3, r4, r5, pc}
   10546:	bf00      	nop
   10548:	2000d1d4 	.word	0x2000d1d4
   1054c:	00016abf 	.word	0x00016abf
   10550:	00016904 	.word	0x00016904
   10554:	00015341 	.word	0x00015341
   10558:	000156e6 	.word	0x000156e6

0001055c <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
   1055c:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1055e:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   10562:	7b42      	ldrb	r2, [r0, #13]
   10564:	2b00      	cmp	r3, #0
   10566:	db38      	blt.n	105da <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   10568:	06d3      	lsls	r3, r2, #27
   1056a:	d136      	bne.n	105da <ready_thread+0x7e>
	return node->next != NULL;
   1056c:	6983      	ldr	r3, [r0, #24]
   1056e:	2b00      	cmp	r3, #0
   10570:	d133      	bne.n	105da <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   10572:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10576:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   10578:	4a18      	ldr	r2, [pc, #96]	; (105dc <ready_thread+0x80>)
   1057a:	4290      	cmp	r0, r2
   1057c:	d109      	bne.n	10592 <ready_thread+0x36>
   1057e:	4918      	ldr	r1, [pc, #96]	; (105e0 <ready_thread+0x84>)
   10580:	4818      	ldr	r0, [pc, #96]	; (105e4 <ready_thread+0x88>)
   10582:	23bc      	movs	r3, #188	; 0xbc
   10584:	4a18      	ldr	r2, [pc, #96]	; (105e8 <ready_thread+0x8c>)
   10586:	f002 fa21 	bl	129cc <assert_print>
   1058a:	21bc      	movs	r1, #188	; 0xbc
   1058c:	4816      	ldr	r0, [pc, #88]	; (105e8 <ready_thread+0x8c>)
   1058e:	f002 fa16 	bl	129be <assert_post_action>
	return list->head == list;
   10592:	4916      	ldr	r1, [pc, #88]	; (105ec <ready_thread+0x90>)
   10594:	460a      	mov	r2, r1
   10596:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1059a:	4294      	cmp	r4, r2
   1059c:	bf18      	it	ne
   1059e:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   105a0:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   105a2:	b923      	cbnz	r3, 105ae <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   105a4:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   105a8:	6020      	str	r0, [r4, #0]
	list->tail = node;
   105aa:	6208      	str	r0, [r1, #32]
}
   105ac:	e00c      	b.n	105c8 <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   105ae:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   105b2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   105b6:	42b5      	cmp	r5, r6
   105b8:	d00b      	beq.n	105d2 <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   105ba:	42ae      	cmp	r6, r5
   105bc:	dd09      	ble.n	105d2 <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   105be:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   105c0:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   105c4:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   105c6:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   105c8:	2000      	movs	r0, #0
		flag_ipi();
	}
}
   105ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   105ce:	f7ff bf91 	b.w	104f4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   105d2:	42a3      	cmp	r3, r4
   105d4:	d0e6      	beq.n	105a4 <ready_thread+0x48>
   105d6:	681b      	ldr	r3, [r3, #0]
   105d8:	e7e3      	b.n	105a2 <ready_thread+0x46>
}
   105da:	bd70      	pop	{r4, r5, r6, pc}
   105dc:	2000c8c0 	.word	0x2000c8c0
   105e0:	00016ae6 	.word	0x00016ae6
   105e4:	00015341 	.word	0x00015341
   105e8:	00016904 	.word	0x00016904
   105ec:	2000d1d4 	.word	0x2000d1d4

000105f0 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   105f0:	b538      	push	{r3, r4, r5, lr}
   105f2:	4604      	mov	r4, r0
	__asm__ volatile(
   105f4:	f04f 0320 	mov.w	r3, #32
   105f8:	f3ef 8511 	mrs	r5, BASEPRI
   105fc:	f383 8812 	msr	BASEPRI_MAX, r3
   10600:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10604:	4816      	ldr	r0, [pc, #88]	; (10660 <z_ready_thread+0x70>)
   10606:	f7ff f93b 	bl	f880 <z_spin_lock_valid>
   1060a:	b968      	cbnz	r0, 10628 <z_ready_thread+0x38>
   1060c:	2394      	movs	r3, #148	; 0x94
   1060e:	4a15      	ldr	r2, [pc, #84]	; (10664 <z_ready_thread+0x74>)
   10610:	4915      	ldr	r1, [pc, #84]	; (10668 <z_ready_thread+0x78>)
   10612:	4816      	ldr	r0, [pc, #88]	; (1066c <z_ready_thread+0x7c>)
   10614:	f002 f9da 	bl	129cc <assert_print>
   10618:	4911      	ldr	r1, [pc, #68]	; (10660 <z_ready_thread+0x70>)
   1061a:	4815      	ldr	r0, [pc, #84]	; (10670 <z_ready_thread+0x80>)
   1061c:	f002 f9d6 	bl	129cc <assert_print>
   10620:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10622:	4810      	ldr	r0, [pc, #64]	; (10664 <z_ready_thread+0x74>)
   10624:	f002 f9cb 	bl	129be <assert_post_action>
	z_spin_lock_set_owner(l);
   10628:	480d      	ldr	r0, [pc, #52]	; (10660 <z_ready_thread+0x70>)
   1062a:	f7ff f945 	bl	f8b8 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   1062e:	4620      	mov	r0, r4
   10630:	f7ff ff94 	bl	1055c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10634:	480a      	ldr	r0, [pc, #40]	; (10660 <z_ready_thread+0x70>)
   10636:	f7ff f931 	bl	f89c <z_spin_unlock_valid>
   1063a:	b958      	cbnz	r0, 10654 <z_ready_thread+0x64>
   1063c:	23c2      	movs	r3, #194	; 0xc2
   1063e:	4a09      	ldr	r2, [pc, #36]	; (10664 <z_ready_thread+0x74>)
   10640:	490c      	ldr	r1, [pc, #48]	; (10674 <z_ready_thread+0x84>)
   10642:	480a      	ldr	r0, [pc, #40]	; (1066c <z_ready_thread+0x7c>)
   10644:	f002 f9c2 	bl	129cc <assert_print>
   10648:	4905      	ldr	r1, [pc, #20]	; (10660 <z_ready_thread+0x70>)
   1064a:	480b      	ldr	r0, [pc, #44]	; (10678 <z_ready_thread+0x88>)
   1064c:	f002 f9be 	bl	129cc <assert_print>
   10650:	21c2      	movs	r1, #194	; 0xc2
   10652:	e7e6      	b.n	10622 <z_ready_thread+0x32>
	__asm__ volatile(
   10654:	f385 8811 	msr	BASEPRI, r5
   10658:	f3bf 8f6f 	isb	sy
		}
	}
}
   1065c:	bd38      	pop	{r3, r4, r5, pc}
   1065e:	bf00      	nop
   10660:	2000d218 	.word	0x2000d218
   10664:	0001558e 	.word	0x0001558e
   10668:	000155e7 	.word	0x000155e7
   1066c:	00015341 	.word	0x00015341
   10670:	000155fc 	.word	0x000155fc
   10674:	000155bb 	.word	0x000155bb
   10678:	000155d2 	.word	0x000155d2

0001067c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1067c:	b570      	push	{r4, r5, r6, lr}
   1067e:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   10680:	460d      	mov	r5, r1
   10682:	b9e9      	cbnz	r1, 106c0 <z_reschedule+0x44>
   10684:	f3ef 8605 	mrs	r6, IPSR
   10688:	b9d6      	cbnz	r6, 106c0 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   1068a:	4b18      	ldr	r3, [pc, #96]	; (106ec <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   1068c:	699a      	ldr	r2, [r3, #24]
   1068e:	689b      	ldr	r3, [r3, #8]
   10690:	429a      	cmp	r2, r3
   10692:	d015      	beq.n	106c0 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10694:	f7ff f902 	bl	f89c <z_spin_unlock_valid>
   10698:	b968      	cbnz	r0, 106b6 <z_reschedule+0x3a>
   1069a:	23e1      	movs	r3, #225	; 0xe1
   1069c:	4a14      	ldr	r2, [pc, #80]	; (106f0 <z_reschedule+0x74>)
   1069e:	4915      	ldr	r1, [pc, #84]	; (106f4 <z_reschedule+0x78>)
   106a0:	4815      	ldr	r0, [pc, #84]	; (106f8 <z_reschedule+0x7c>)
   106a2:	f002 f993 	bl	129cc <assert_print>
   106a6:	4621      	mov	r1, r4
   106a8:	4814      	ldr	r0, [pc, #80]	; (106fc <z_reschedule+0x80>)
   106aa:	f002 f98f 	bl	129cc <assert_print>
   106ae:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   106b0:	480f      	ldr	r0, [pc, #60]	; (106f0 <z_reschedule+0x74>)
   106b2:	f002 f984 	bl	129be <assert_post_action>
	ret = arch_swap(key);
   106b6:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   106b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   106bc:	f7f9 ba90 	b.w	9be0 <arch_swap>
   106c0:	4620      	mov	r0, r4
   106c2:	f7ff f8eb 	bl	f89c <z_spin_unlock_valid>
   106c6:	b958      	cbnz	r0, 106e0 <z_reschedule+0x64>
   106c8:	23c2      	movs	r3, #194	; 0xc2
   106ca:	4a09      	ldr	r2, [pc, #36]	; (106f0 <z_reschedule+0x74>)
   106cc:	4909      	ldr	r1, [pc, #36]	; (106f4 <z_reschedule+0x78>)
   106ce:	480a      	ldr	r0, [pc, #40]	; (106f8 <z_reschedule+0x7c>)
   106d0:	f002 f97c 	bl	129cc <assert_print>
   106d4:	4621      	mov	r1, r4
   106d6:	4809      	ldr	r0, [pc, #36]	; (106fc <z_reschedule+0x80>)
   106d8:	f002 f978 	bl	129cc <assert_print>
   106dc:	21c2      	movs	r1, #194	; 0xc2
   106de:	e7e7      	b.n	106b0 <z_reschedule+0x34>
   106e0:	f385 8811 	msr	BASEPRI, r5
   106e4:	f3bf 8f6f 	isb	sy
   106e8:	bd70      	pop	{r4, r5, r6, pc}
   106ea:	bf00      	nop
   106ec:	2000d1d4 	.word	0x2000d1d4
   106f0:	0001558e 	.word	0x0001558e
   106f4:	000155bb 	.word	0x000155bb
   106f8:	00015341 	.word	0x00015341
   106fc:	000155d2 	.word	0x000155d2

00010700 <z_sched_start>:
{
   10700:	b538      	push	{r3, r4, r5, lr}
   10702:	4604      	mov	r4, r0
	__asm__ volatile(
   10704:	f04f 0320 	mov.w	r3, #32
   10708:	f3ef 8511 	mrs	r5, BASEPRI
   1070c:	f383 8812 	msr	BASEPRI_MAX, r3
   10710:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10714:	481c      	ldr	r0, [pc, #112]	; (10788 <z_sched_start+0x88>)
   10716:	f7ff f8b3 	bl	f880 <z_spin_lock_valid>
   1071a:	b968      	cbnz	r0, 10738 <z_sched_start+0x38>
   1071c:	2394      	movs	r3, #148	; 0x94
   1071e:	4a1b      	ldr	r2, [pc, #108]	; (1078c <z_sched_start+0x8c>)
   10720:	491b      	ldr	r1, [pc, #108]	; (10790 <z_sched_start+0x90>)
   10722:	481c      	ldr	r0, [pc, #112]	; (10794 <z_sched_start+0x94>)
   10724:	f002 f952 	bl	129cc <assert_print>
   10728:	4917      	ldr	r1, [pc, #92]	; (10788 <z_sched_start+0x88>)
   1072a:	481b      	ldr	r0, [pc, #108]	; (10798 <z_sched_start+0x98>)
   1072c:	f002 f94e 	bl	129cc <assert_print>
   10730:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10732:	4816      	ldr	r0, [pc, #88]	; (1078c <z_sched_start+0x8c>)
   10734:	f002 f943 	bl	129be <assert_post_action>
	z_spin_lock_set_owner(l);
   10738:	4813      	ldr	r0, [pc, #76]	; (10788 <z_sched_start+0x88>)
   1073a:	f7ff f8bd 	bl	f8b8 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1073e:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   10740:	075a      	lsls	r2, r3, #29
   10742:	d414      	bmi.n	1076e <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10744:	4810      	ldr	r0, [pc, #64]	; (10788 <z_sched_start+0x88>)
   10746:	f7ff f8a9 	bl	f89c <z_spin_unlock_valid>
   1074a:	b958      	cbnz	r0, 10764 <z_sched_start+0x64>
   1074c:	23c2      	movs	r3, #194	; 0xc2
   1074e:	4a0f      	ldr	r2, [pc, #60]	; (1078c <z_sched_start+0x8c>)
   10750:	4912      	ldr	r1, [pc, #72]	; (1079c <z_sched_start+0x9c>)
   10752:	4810      	ldr	r0, [pc, #64]	; (10794 <z_sched_start+0x94>)
   10754:	f002 f93a 	bl	129cc <assert_print>
   10758:	490b      	ldr	r1, [pc, #44]	; (10788 <z_sched_start+0x88>)
   1075a:	4811      	ldr	r0, [pc, #68]	; (107a0 <z_sched_start+0xa0>)
   1075c:	f002 f936 	bl	129cc <assert_print>
   10760:	21c2      	movs	r1, #194	; 0xc2
   10762:	e7e6      	b.n	10732 <z_sched_start+0x32>
	__asm__ volatile(
   10764:	f385 8811 	msr	BASEPRI, r5
   10768:	f3bf 8f6f 	isb	sy
}
   1076c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1076e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   10772:	4620      	mov	r0, r4
   10774:	7363      	strb	r3, [r4, #13]
   10776:	f7ff fef1 	bl	1055c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1077a:	4629      	mov	r1, r5
}
   1077c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   10780:	4801      	ldr	r0, [pc, #4]	; (10788 <z_sched_start+0x88>)
   10782:	f7ff bf7b 	b.w	1067c <z_reschedule>
   10786:	bf00      	nop
   10788:	2000d218 	.word	0x2000d218
   1078c:	0001558e 	.word	0x0001558e
   10790:	000155e7 	.word	0x000155e7
   10794:	00015341 	.word	0x00015341
   10798:	000155fc 	.word	0x000155fc
   1079c:	000155bb 	.word	0x000155bb
   107a0:	000155d2 	.word	0x000155d2

000107a4 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   107a4:	b510      	push	{r4, lr}
	__asm__ volatile(
   107a6:	f04f 0320 	mov.w	r3, #32
   107aa:	f3ef 8411 	mrs	r4, BASEPRI
   107ae:	f383 8812 	msr	BASEPRI_MAX, r3
   107b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   107b6:	4825      	ldr	r0, [pc, #148]	; (1084c <k_sched_lock+0xa8>)
   107b8:	f7ff f862 	bl	f880 <z_spin_lock_valid>
   107bc:	b960      	cbnz	r0, 107d8 <k_sched_lock+0x34>
   107be:	2394      	movs	r3, #148	; 0x94
   107c0:	4a23      	ldr	r2, [pc, #140]	; (10850 <k_sched_lock+0xac>)
   107c2:	4924      	ldr	r1, [pc, #144]	; (10854 <k_sched_lock+0xb0>)
   107c4:	4824      	ldr	r0, [pc, #144]	; (10858 <k_sched_lock+0xb4>)
   107c6:	f002 f901 	bl	129cc <assert_print>
   107ca:	4920      	ldr	r1, [pc, #128]	; (1084c <k_sched_lock+0xa8>)
   107cc:	4823      	ldr	r0, [pc, #140]	; (1085c <k_sched_lock+0xb8>)
   107ce:	f002 f8fd 	bl	129cc <assert_print>
   107d2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   107d4:	481e      	ldr	r0, [pc, #120]	; (10850 <k_sched_lock+0xac>)
   107d6:	e010      	b.n	107fa <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   107d8:	481c      	ldr	r0, [pc, #112]	; (1084c <k_sched_lock+0xa8>)
   107da:	f7ff f86d 	bl	f8b8 <z_spin_lock_set_owner>
   107de:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   107e2:	b163      	cbz	r3, 107fe <k_sched_lock+0x5a>
   107e4:	491e      	ldr	r1, [pc, #120]	; (10860 <k_sched_lock+0xbc>)
   107e6:	23fd      	movs	r3, #253	; 0xfd
   107e8:	4a1e      	ldr	r2, [pc, #120]	; (10864 <k_sched_lock+0xc0>)
   107ea:	481b      	ldr	r0, [pc, #108]	; (10858 <k_sched_lock+0xb4>)
   107ec:	f002 f8ee 	bl	129cc <assert_print>
   107f0:	481d      	ldr	r0, [pc, #116]	; (10868 <k_sched_lock+0xc4>)
   107f2:	f002 f8eb 	bl	129cc <assert_print>
   107f6:	21fd      	movs	r1, #253	; 0xfd
   107f8:	481a      	ldr	r0, [pc, #104]	; (10864 <k_sched_lock+0xc0>)
   107fa:	f002 f8e0 	bl	129be <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   107fe:	4b1b      	ldr	r3, [pc, #108]	; (1086c <k_sched_lock+0xc8>)
   10800:	689a      	ldr	r2, [r3, #8]
   10802:	7bd3      	ldrb	r3, [r2, #15]
   10804:	2b01      	cmp	r3, #1
   10806:	d10a      	bne.n	1081e <k_sched_lock+0x7a>
   10808:	4919      	ldr	r1, [pc, #100]	; (10870 <k_sched_lock+0xcc>)
   1080a:	23fe      	movs	r3, #254	; 0xfe
   1080c:	4a15      	ldr	r2, [pc, #84]	; (10864 <k_sched_lock+0xc0>)
   1080e:	4812      	ldr	r0, [pc, #72]	; (10858 <k_sched_lock+0xb4>)
   10810:	f002 f8dc 	bl	129cc <assert_print>
   10814:	4814      	ldr	r0, [pc, #80]	; (10868 <k_sched_lock+0xc4>)
   10816:	f002 f8d9 	bl	129cc <assert_print>
   1081a:	21fe      	movs	r1, #254	; 0xfe
   1081c:	e7ec      	b.n	107f8 <k_sched_lock+0x54>
	--_current->base.sched_locked;
   1081e:	3b01      	subs	r3, #1
   10820:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10822:	480a      	ldr	r0, [pc, #40]	; (1084c <k_sched_lock+0xa8>)
   10824:	f7ff f83a 	bl	f89c <z_spin_unlock_valid>
   10828:	b958      	cbnz	r0, 10842 <k_sched_lock+0x9e>
   1082a:	23c2      	movs	r3, #194	; 0xc2
   1082c:	4a08      	ldr	r2, [pc, #32]	; (10850 <k_sched_lock+0xac>)
   1082e:	4911      	ldr	r1, [pc, #68]	; (10874 <k_sched_lock+0xd0>)
   10830:	4809      	ldr	r0, [pc, #36]	; (10858 <k_sched_lock+0xb4>)
   10832:	f002 f8cb 	bl	129cc <assert_print>
   10836:	4905      	ldr	r1, [pc, #20]	; (1084c <k_sched_lock+0xa8>)
   10838:	480f      	ldr	r0, [pc, #60]	; (10878 <k_sched_lock+0xd4>)
   1083a:	f002 f8c7 	bl	129cc <assert_print>
   1083e:	21c2      	movs	r1, #194	; 0xc2
   10840:	e7c8      	b.n	107d4 <k_sched_lock+0x30>
	__asm__ volatile(
   10842:	f384 8811 	msr	BASEPRI, r4
   10846:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1084a:	bd10      	pop	{r4, pc}
   1084c:	2000d218 	.word	0x2000d218
   10850:	0001558e 	.word	0x0001558e
   10854:	000155e7 	.word	0x000155e7
   10858:	00015341 	.word	0x00015341
   1085c:	000155fc 	.word	0x000155fc
   10860:	000166e4 	.word	0x000166e4
   10864:	00016b07 	.word	0x00016b07
   10868:	000156e6 	.word	0x000156e6
   1086c:	2000d1d4 	.word	0x2000d1d4
   10870:	00016b32 	.word	0x00016b32
   10874:	000155bb 	.word	0x000155bb
   10878:	000155d2 	.word	0x000155d2

0001087c <k_sched_unlock>:

void k_sched_unlock(void)
{
   1087c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1087e:	f04f 0320 	mov.w	r3, #32
   10882:	f3ef 8411 	mrs	r4, BASEPRI
   10886:	f383 8812 	msr	BASEPRI_MAX, r3
   1088a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1088e:	4829      	ldr	r0, [pc, #164]	; (10934 <k_sched_unlock+0xb8>)
   10890:	f7fe fff6 	bl	f880 <z_spin_lock_valid>
   10894:	b960      	cbnz	r0, 108b0 <k_sched_unlock+0x34>
   10896:	2394      	movs	r3, #148	; 0x94
   10898:	4a27      	ldr	r2, [pc, #156]	; (10938 <k_sched_unlock+0xbc>)
   1089a:	4928      	ldr	r1, [pc, #160]	; (1093c <k_sched_unlock+0xc0>)
   1089c:	4828      	ldr	r0, [pc, #160]	; (10940 <k_sched_unlock+0xc4>)
   1089e:	f002 f895 	bl	129cc <assert_print>
   108a2:	4924      	ldr	r1, [pc, #144]	; (10934 <k_sched_unlock+0xb8>)
   108a4:	4827      	ldr	r0, [pc, #156]	; (10944 <k_sched_unlock+0xc8>)
   108a6:	f002 f891 	bl	129cc <assert_print>
   108aa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   108ac:	4822      	ldr	r0, [pc, #136]	; (10938 <k_sched_unlock+0xbc>)
   108ae:	e013      	b.n	108d8 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   108b0:	4820      	ldr	r0, [pc, #128]	; (10934 <k_sched_unlock+0xb8>)
   108b2:	f7ff f801 	bl	f8b8 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   108b6:	4b24      	ldr	r3, [pc, #144]	; (10948 <k_sched_unlock+0xcc>)
   108b8:	689a      	ldr	r2, [r3, #8]
   108ba:	7bd3      	ldrb	r3, [r2, #15]
   108bc:	b973      	cbnz	r3, 108dc <k_sched_unlock+0x60>
   108be:	4923      	ldr	r1, [pc, #140]	; (1094c <k_sched_unlock+0xd0>)
   108c0:	f240 33ef 	movw	r3, #1007	; 0x3ef
   108c4:	4a22      	ldr	r2, [pc, #136]	; (10950 <k_sched_unlock+0xd4>)
   108c6:	481e      	ldr	r0, [pc, #120]	; (10940 <k_sched_unlock+0xc4>)
   108c8:	f002 f880 	bl	129cc <assert_print>
   108cc:	4821      	ldr	r0, [pc, #132]	; (10954 <k_sched_unlock+0xd8>)
   108ce:	f002 f87d 	bl	129cc <assert_print>
   108d2:	f240 31ef 	movw	r1, #1007	; 0x3ef
   108d6:	481e      	ldr	r0, [pc, #120]	; (10950 <k_sched_unlock+0xd4>)
   108d8:	f002 f871 	bl	129be <assert_post_action>
   108dc:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   108e0:	b160      	cbz	r0, 108fc <k_sched_unlock+0x80>
   108e2:	491d      	ldr	r1, [pc, #116]	; (10958 <k_sched_unlock+0xdc>)
   108e4:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
   108e8:	4a19      	ldr	r2, [pc, #100]	; (10950 <k_sched_unlock+0xd4>)
   108ea:	4815      	ldr	r0, [pc, #84]	; (10940 <k_sched_unlock+0xc4>)
   108ec:	f002 f86e 	bl	129cc <assert_print>
   108f0:	4818      	ldr	r0, [pc, #96]	; (10954 <k_sched_unlock+0xd8>)
   108f2:	f002 f86b 	bl	129cc <assert_print>
   108f6:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
   108fa:	e7ec      	b.n	108d6 <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   108fc:	3301      	adds	r3, #1
   108fe:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   10900:	f7ff fdf8 	bl	104f4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10904:	480b      	ldr	r0, [pc, #44]	; (10934 <k_sched_unlock+0xb8>)
   10906:	f7fe ffc9 	bl	f89c <z_spin_unlock_valid>
   1090a:	b958      	cbnz	r0, 10924 <k_sched_unlock+0xa8>
   1090c:	23c2      	movs	r3, #194	; 0xc2
   1090e:	4a0a      	ldr	r2, [pc, #40]	; (10938 <k_sched_unlock+0xbc>)
   10910:	4912      	ldr	r1, [pc, #72]	; (1095c <k_sched_unlock+0xe0>)
   10912:	480b      	ldr	r0, [pc, #44]	; (10940 <k_sched_unlock+0xc4>)
   10914:	f002 f85a 	bl	129cc <assert_print>
   10918:	4906      	ldr	r1, [pc, #24]	; (10934 <k_sched_unlock+0xb8>)
   1091a:	4811      	ldr	r0, [pc, #68]	; (10960 <k_sched_unlock+0xe4>)
   1091c:	f002 f856 	bl	129cc <assert_print>
   10920:	21c2      	movs	r1, #194	; 0xc2
   10922:	e7c3      	b.n	108ac <k_sched_unlock+0x30>
	__asm__ volatile(
   10924:	f384 8811 	msr	BASEPRI, r4
   10928:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   1092c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   10930:	f003 bd38 	b.w	143a4 <z_reschedule_unlocked>
   10934:	2000d218 	.word	0x2000d218
   10938:	0001558e 	.word	0x0001558e
   1093c:	000155e7 	.word	0x000155e7
   10940:	00015341 	.word	0x00015341
   10944:	000155fc 	.word	0x000155fc
   10948:	2000d1d4 	.word	0x2000d1d4
   1094c:	00016b63 	.word	0x00016b63
   10950:	00016904 	.word	0x00016904
   10954:	000156e6 	.word	0x000156e6
   10958:	000166e4 	.word	0x000166e4
   1095c:	000155bb 	.word	0x000155bb
   10960:	000155d2 	.word	0x000155d2

00010964 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   10964:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   10966:	4b0b      	ldr	r3, [pc, #44]	; (10994 <z_priq_dumb_remove+0x30>)
   10968:	4299      	cmp	r1, r3
   1096a:	d10b      	bne.n	10984 <z_priq_dumb_remove+0x20>
   1096c:	490a      	ldr	r1, [pc, #40]	; (10998 <z_priq_dumb_remove+0x34>)
   1096e:	480b      	ldr	r0, [pc, #44]	; (1099c <z_priq_dumb_remove+0x38>)
   10970:	f240 437b 	movw	r3, #1147	; 0x47b
   10974:	4a0a      	ldr	r2, [pc, #40]	; (109a0 <z_priq_dumb_remove+0x3c>)
   10976:	f002 f829 	bl	129cc <assert_print>
   1097a:	f240 417b 	movw	r1, #1147	; 0x47b
   1097e:	4808      	ldr	r0, [pc, #32]	; (109a0 <z_priq_dumb_remove+0x3c>)
   10980:	f002 f81d 	bl	129be <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   10984:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   10988:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1098a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1098c:	2300      	movs	r3, #0
	node->prev = NULL;
   1098e:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   10992:	bd08      	pop	{r3, pc}
   10994:	2000c8c0 	.word	0x2000c8c0
   10998:	00016ae6 	.word	0x00016ae6
   1099c:	00015341 	.word	0x00015341
   109a0:	00016904 	.word	0x00016904

000109a4 <move_thread_to_end_of_prio_q>:
{
   109a4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   109a6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   109aa:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   109ac:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   109ae:	7b43      	ldrb	r3, [r0, #13]
   109b0:	da06      	bge.n	109c0 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   109b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   109b6:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   109b8:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   109ba:	481d      	ldr	r0, [pc, #116]	; (10a30 <move_thread_to_end_of_prio_q+0x8c>)
   109bc:	f7ff ffd2 	bl	10964 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   109c0:	7b63      	ldrb	r3, [r4, #13]
   109c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   109c6:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   109c8:	4b1a      	ldr	r3, [pc, #104]	; (10a34 <move_thread_to_end_of_prio_q+0x90>)
   109ca:	429c      	cmp	r4, r3
   109cc:	d109      	bne.n	109e2 <move_thread_to_end_of_prio_q+0x3e>
   109ce:	491a      	ldr	r1, [pc, #104]	; (10a38 <move_thread_to_end_of_prio_q+0x94>)
   109d0:	481a      	ldr	r0, [pc, #104]	; (10a3c <move_thread_to_end_of_prio_q+0x98>)
   109d2:	23bc      	movs	r3, #188	; 0xbc
   109d4:	4a1a      	ldr	r2, [pc, #104]	; (10a40 <move_thread_to_end_of_prio_q+0x9c>)
   109d6:	f001 fff9 	bl	129cc <assert_print>
   109da:	21bc      	movs	r1, #188	; 0xbc
   109dc:	4818      	ldr	r0, [pc, #96]	; (10a40 <move_thread_to_end_of_prio_q+0x9c>)
   109de:	f001 ffee 	bl	129be <assert_post_action>
	return list->head == list;
   109e2:	4a18      	ldr	r2, [pc, #96]	; (10a44 <move_thread_to_end_of_prio_q+0xa0>)
   109e4:	4611      	mov	r1, r2
   109e6:	f851 3f1c 	ldr.w	r3, [r1, #28]!
	return (node == list->tail) ? NULL : node->next;
   109ea:	6a10      	ldr	r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   109ec:	428b      	cmp	r3, r1
   109ee:	bf08      	it	eq
   109f0:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   109f2:	b923      	cbnz	r3, 109fe <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   109f4:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   109f8:	6004      	str	r4, [r0, #0]
	list->tail = node;
   109fa:	6214      	str	r4, [r2, #32]
}
   109fc:	e00c      	b.n	10a18 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   109fe:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   10a02:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   10a06:	42b5      	cmp	r5, r6
   10a08:	d00e      	beq.n	10a28 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   10a0a:	42ae      	cmp	r6, r5
   10a0c:	dd0c      	ble.n	10a28 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   10a0e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   10a10:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   10a14:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   10a16:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   10a18:	6890      	ldr	r0, [r2, #8]
   10a1a:	1b03      	subs	r3, r0, r4
   10a1c:	4258      	negs	r0, r3
   10a1e:	4158      	adcs	r0, r3
}
   10a20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   10a24:	f7ff bd66 	b.w	104f4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   10a28:	4298      	cmp	r0, r3
   10a2a:	d0e3      	beq.n	109f4 <move_thread_to_end_of_prio_q+0x50>
   10a2c:	681b      	ldr	r3, [r3, #0]
   10a2e:	e7e0      	b.n	109f2 <move_thread_to_end_of_prio_q+0x4e>
   10a30:	2000d1f0 	.word	0x2000d1f0
   10a34:	2000c8c0 	.word	0x2000c8c0
   10a38:	00016ae6 	.word	0x00016ae6
   10a3c:	00015341 	.word	0x00015341
   10a40:	00016904 	.word	0x00016904
   10a44:	2000d1d4 	.word	0x2000d1d4

00010a48 <z_time_slice>:
{
   10a48:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   10a4a:	f04f 0320 	mov.w	r3, #32
   10a4e:	f3ef 8511 	mrs	r5, BASEPRI
   10a52:	f383 8812 	msr	BASEPRI_MAX, r3
   10a56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10a5a:	4823      	ldr	r0, [pc, #140]	; (10ae8 <z_time_slice+0xa0>)
   10a5c:	f7fe ff10 	bl	f880 <z_spin_lock_valid>
   10a60:	b968      	cbnz	r0, 10a7e <z_time_slice+0x36>
   10a62:	2394      	movs	r3, #148	; 0x94
   10a64:	4a21      	ldr	r2, [pc, #132]	; (10aec <z_time_slice+0xa4>)
   10a66:	4922      	ldr	r1, [pc, #136]	; (10af0 <z_time_slice+0xa8>)
   10a68:	4822      	ldr	r0, [pc, #136]	; (10af4 <z_time_slice+0xac>)
   10a6a:	f001 ffaf 	bl	129cc <assert_print>
   10a6e:	491e      	ldr	r1, [pc, #120]	; (10ae8 <z_time_slice+0xa0>)
   10a70:	4821      	ldr	r0, [pc, #132]	; (10af8 <z_time_slice+0xb0>)
   10a72:	f001 ffab 	bl	129cc <assert_print>
   10a76:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10a78:	481c      	ldr	r0, [pc, #112]	; (10aec <z_time_slice+0xa4>)
   10a7a:	f001 ffa0 	bl	129be <assert_post_action>
	z_spin_lock_set_owner(l);
   10a7e:	481a      	ldr	r0, [pc, #104]	; (10ae8 <z_time_slice+0xa0>)
   10a80:	f7fe ff1a 	bl	f8b8 <z_spin_lock_set_owner>
	struct k_thread *curr = _current;
   10a84:	4b1d      	ldr	r3, [pc, #116]	; (10afc <z_time_slice+0xb4>)
	if (pending_current == curr) {
   10a86:	4a1e      	ldr	r2, [pc, #120]	; (10b00 <z_time_slice+0xb8>)
	struct k_thread *curr = _current;
   10a88:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   10a8a:	6810      	ldr	r0, [r2, #0]
   10a8c:	42a0      	cmp	r0, r4
   10a8e:	d111      	bne.n	10ab4 <z_time_slice+0x6c>
		z_reset_time_slice(curr);
   10a90:	f7ff fd08 	bl	104a4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10a94:	4814      	ldr	r0, [pc, #80]	; (10ae8 <z_time_slice+0xa0>)
   10a96:	f7fe ff01 	bl	f89c <z_spin_unlock_valid>
   10a9a:	b9f8      	cbnz	r0, 10adc <z_time_slice+0x94>
   10a9c:	23c2      	movs	r3, #194	; 0xc2
   10a9e:	4a13      	ldr	r2, [pc, #76]	; (10aec <z_time_slice+0xa4>)
   10aa0:	4918      	ldr	r1, [pc, #96]	; (10b04 <z_time_slice+0xbc>)
   10aa2:	4814      	ldr	r0, [pc, #80]	; (10af4 <z_time_slice+0xac>)
   10aa4:	f001 ff92 	bl	129cc <assert_print>
   10aa8:	490f      	ldr	r1, [pc, #60]	; (10ae8 <z_time_slice+0xa0>)
   10aaa:	4817      	ldr	r0, [pc, #92]	; (10b08 <z_time_slice+0xc0>)
   10aac:	f001 ff8e 	bl	129cc <assert_print>
   10ab0:	21c2      	movs	r1, #194	; 0xc2
   10ab2:	e7e1      	b.n	10a78 <z_time_slice+0x30>
	pending_current = NULL;
   10ab4:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   10ab6:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   10ab8:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   10aba:	4a14      	ldr	r2, [pc, #80]	; (10b0c <z_time_slice+0xc4>)
   10abc:	5cd3      	ldrb	r3, [r2, r3]
   10abe:	2b00      	cmp	r3, #0
   10ac0:	d0e8      	beq.n	10a94 <z_time_slice+0x4c>
   10ac2:	4620      	mov	r0, r4
   10ac4:	f7ff fca0 	bl	10408 <sliceable>
   10ac8:	2800      	cmp	r0, #0
   10aca:	d0e3      	beq.n	10a94 <z_time_slice+0x4c>
		if (!z_is_thread_prevented_from_running(curr)) {
   10acc:	7b63      	ldrb	r3, [r4, #13]
   10ace:	06db      	lsls	r3, r3, #27
   10ad0:	d102      	bne.n	10ad8 <z_time_slice+0x90>
			move_thread_to_end_of_prio_q(curr);
   10ad2:	4620      	mov	r0, r4
   10ad4:	f7ff ff66 	bl	109a4 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   10ad8:	4620      	mov	r0, r4
   10ada:	e7d9      	b.n	10a90 <z_time_slice+0x48>
	__asm__ volatile(
   10adc:	f385 8811 	msr	BASEPRI, r5
   10ae0:	f3bf 8f6f 	isb	sy
}
   10ae4:	bd38      	pop	{r3, r4, r5, pc}
   10ae6:	bf00      	nop
   10ae8:	2000d218 	.word	0x2000d218
   10aec:	0001558e 	.word	0x0001558e
   10af0:	000155e7 	.word	0x000155e7
   10af4:	00015341 	.word	0x00015341
   10af8:	000155fc 	.word	0x000155fc
   10afc:	2000d1d4 	.word	0x2000d1d4
   10b00:	2000d20c 	.word	0x2000d20c
   10b04:	000155bb 	.word	0x000155bb
   10b08:	000155d2 	.word	0x000155d2
   10b0c:	2000e6f1 	.word	0x2000e6f1

00010b10 <unready_thread>:
{
   10b10:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   10b12:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   10b16:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   10b18:	2a00      	cmp	r2, #0
   10b1a:	7b43      	ldrb	r3, [r0, #13]
   10b1c:	da06      	bge.n	10b2c <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   10b22:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10b24:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   10b26:	4806      	ldr	r0, [pc, #24]	; (10b40 <unready_thread+0x30>)
   10b28:	f7ff ff1c 	bl	10964 <z_priq_dumb_remove>
	update_cache(thread == _current);
   10b2c:	4b05      	ldr	r3, [pc, #20]	; (10b44 <unready_thread+0x34>)
   10b2e:	6898      	ldr	r0, [r3, #8]
   10b30:	1b03      	subs	r3, r0, r4
   10b32:	4258      	negs	r0, r3
   10b34:	4158      	adcs	r0, r3
}
   10b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   10b3a:	f7ff bcdb 	b.w	104f4 <update_cache>
   10b3e:	bf00      	nop
   10b40:	2000d1f0 	.word	0x2000d1f0
   10b44:	2000d1d4 	.word	0x2000d1d4

00010b48 <add_to_waitq_locked>:
{
   10b48:	b538      	push	{r3, r4, r5, lr}
   10b4a:	4604      	mov	r4, r0
   10b4c:	460d      	mov	r5, r1
	unready_thread(thread);
   10b4e:	f7ff ffdf 	bl	10b10 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   10b52:	7b63      	ldrb	r3, [r4, #13]
   10b54:	f043 0302 	orr.w	r3, r3, #2
   10b58:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   10b5a:	b34d      	cbz	r5, 10bb0 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   10b5c:	4b15      	ldr	r3, [pc, #84]	; (10bb4 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   10b5e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   10b60:	429c      	cmp	r4, r3
   10b62:	d109      	bne.n	10b78 <add_to_waitq_locked+0x30>
   10b64:	4914      	ldr	r1, [pc, #80]	; (10bb8 <add_to_waitq_locked+0x70>)
   10b66:	4815      	ldr	r0, [pc, #84]	; (10bbc <add_to_waitq_locked+0x74>)
   10b68:	23bc      	movs	r3, #188	; 0xbc
   10b6a:	4a15      	ldr	r2, [pc, #84]	; (10bc0 <add_to_waitq_locked+0x78>)
   10b6c:	f001 ff2e 	bl	129cc <assert_print>
   10b70:	21bc      	movs	r1, #188	; 0xbc
   10b72:	4813      	ldr	r0, [pc, #76]	; (10bc0 <add_to_waitq_locked+0x78>)
   10b74:	f001 ff23 	bl	129be <assert_post_action>
	return list->head == list;
   10b78:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10b7a:	429d      	cmp	r5, r3
   10b7c:	d109      	bne.n	10b92 <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   10b7e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   10b80:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   10b84:	601c      	str	r4, [r3, #0]
	list->tail = node;
   10b86:	606c      	str	r4, [r5, #4]
}
   10b88:	e012      	b.n	10bb0 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   10b8a:	686a      	ldr	r2, [r5, #4]
   10b8c:	4293      	cmp	r3, r2
   10b8e:	d0f6      	beq.n	10b7e <add_to_waitq_locked+0x36>
   10b90:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10b92:	2b00      	cmp	r3, #0
   10b94:	d0f3      	beq.n	10b7e <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   10b96:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   10b9a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   10b9e:	428a      	cmp	r2, r1
   10ba0:	d0f3      	beq.n	10b8a <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   10ba2:	4291      	cmp	r1, r2
   10ba4:	ddf1      	ble.n	10b8a <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   10ba6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   10ba8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   10bac:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   10bae:	605c      	str	r4, [r3, #4]
}
   10bb0:	bd38      	pop	{r3, r4, r5, pc}
   10bb2:	bf00      	nop
   10bb4:	2000c8c0 	.word	0x2000c8c0
   10bb8:	00016ae6 	.word	0x00016ae6
   10bbc:	00015341 	.word	0x00015341
   10bc0:	00016904 	.word	0x00016904

00010bc4 <pend_locked>:
{
   10bc4:	b570      	push	{r4, r5, r6, lr}
   10bc6:	4615      	mov	r5, r2
   10bc8:	461c      	mov	r4, r3
   10bca:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   10bcc:	f7ff ffbc 	bl	10b48 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10bd0:	f1b4 3fff 	cmp.w	r4, #4294967295
   10bd4:	bf08      	it	eq
   10bd6:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   10bda:	d008      	beq.n	10bee <pend_locked+0x2a>
   10bdc:	462a      	mov	r2, r5
   10bde:	4623      	mov	r3, r4
   10be0:	f106 0018 	add.w	r0, r6, #24
   10be4:	4902      	ldr	r1, [pc, #8]	; (10bf0 <pend_locked+0x2c>)
}
   10be6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10bea:	f000 bd9b 	b.w	11724 <z_add_timeout>
   10bee:	bd70      	pop	{r4, r5, r6, pc}
   10bf0:	000143b9 	.word	0x000143b9

00010bf4 <z_pend_curr>:
{
   10bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10bf8:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
   10bfc:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 10cb4 <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   10c00:	4c2d      	ldr	r4, [pc, #180]	; (10cb8 <z_pend_curr+0xc4>)
{
   10c02:	4617      	mov	r7, r2
	pending_current = _current;
   10c04:	4b2d      	ldr	r3, [pc, #180]	; (10cbc <z_pend_curr+0xc8>)
   10c06:	f8da 2008 	ldr.w	r2, [sl, #8]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   10c0a:	42a0      	cmp	r0, r4
{
   10c0c:	4605      	mov	r5, r0
   10c0e:	460e      	mov	r6, r1
	pending_current = _current;
   10c10:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   10c12:	d10b      	bne.n	10c2c <z_pend_curr+0x38>
   10c14:	492a      	ldr	r1, [pc, #168]	; (10cc0 <z_pend_curr+0xcc>)
   10c16:	482b      	ldr	r0, [pc, #172]	; (10cc4 <z_pend_curr+0xd0>)
   10c18:	f240 3356 	movw	r3, #854	; 0x356
   10c1c:	4a2a      	ldr	r2, [pc, #168]	; (10cc8 <z_pend_curr+0xd4>)
   10c1e:	f001 fed5 	bl	129cc <assert_print>
   10c22:	f240 3156 	movw	r1, #854	; 0x356
   10c26:	4828      	ldr	r0, [pc, #160]	; (10cc8 <z_pend_curr+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10c28:	f001 fec9 	bl	129be <assert_post_action>
	__asm__ volatile(
   10c2c:	f04f 0220 	mov.w	r2, #32
   10c30:	f3ef 8311 	mrs	r3, BASEPRI
   10c34:	f382 8812 	msr	BASEPRI_MAX, r2
   10c38:	f3bf 8f6f 	isb	sy
   10c3c:	4620      	mov	r0, r4
   10c3e:	f7fe fe1f 	bl	f880 <z_spin_lock_valid>
   10c42:	b960      	cbnz	r0, 10c5e <z_pend_curr+0x6a>
   10c44:	2394      	movs	r3, #148	; 0x94
   10c46:	4a21      	ldr	r2, [pc, #132]	; (10ccc <z_pend_curr+0xd8>)
   10c48:	4921      	ldr	r1, [pc, #132]	; (10cd0 <z_pend_curr+0xdc>)
   10c4a:	481e      	ldr	r0, [pc, #120]	; (10cc4 <z_pend_curr+0xd0>)
   10c4c:	f001 febe 	bl	129cc <assert_print>
   10c50:	4621      	mov	r1, r4
   10c52:	4820      	ldr	r0, [pc, #128]	; (10cd4 <z_pend_curr+0xe0>)
   10c54:	f001 feba 	bl	129cc <assert_print>
   10c58:	2194      	movs	r1, #148	; 0x94
   10c5a:	481c      	ldr	r0, [pc, #112]	; (10ccc <z_pend_curr+0xd8>)
   10c5c:	e7e4      	b.n	10c28 <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   10c5e:	4620      	mov	r0, r4
   10c60:	f7fe fe2a 	bl	f8b8 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   10c64:	f8da 0008 	ldr.w	r0, [sl, #8]
   10c68:	4642      	mov	r2, r8
   10c6a:	464b      	mov	r3, r9
   10c6c:	4639      	mov	r1, r7
   10c6e:	f7ff ffa9 	bl	10bc4 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10c72:	4628      	mov	r0, r5
   10c74:	f7fe fe12 	bl	f89c <z_spin_unlock_valid>
   10c78:	b958      	cbnz	r0, 10c92 <z_pend_curr+0x9e>
   10c7a:	4917      	ldr	r1, [pc, #92]	; (10cd8 <z_pend_curr+0xe4>)
   10c7c:	23e1      	movs	r3, #225	; 0xe1
   10c7e:	4a13      	ldr	r2, [pc, #76]	; (10ccc <z_pend_curr+0xd8>)
   10c80:	4810      	ldr	r0, [pc, #64]	; (10cc4 <z_pend_curr+0xd0>)
   10c82:	f001 fea3 	bl	129cc <assert_print>
   10c86:	4629      	mov	r1, r5
   10c88:	4814      	ldr	r0, [pc, #80]	; (10cdc <z_pend_curr+0xe8>)
   10c8a:	f001 fe9f 	bl	129cc <assert_print>
   10c8e:	21e1      	movs	r1, #225	; 0xe1
   10c90:	e7e3      	b.n	10c5a <z_pend_curr+0x66>
   10c92:	4620      	mov	r0, r4
   10c94:	f7fe fe02 	bl	f89c <z_spin_unlock_valid>
   10c98:	b938      	cbnz	r0, 10caa <z_pend_curr+0xb6>
   10c9a:	490f      	ldr	r1, [pc, #60]	; (10cd8 <z_pend_curr+0xe4>)
   10c9c:	23e1      	movs	r3, #225	; 0xe1
   10c9e:	4a0b      	ldr	r2, [pc, #44]	; (10ccc <z_pend_curr+0xd8>)
   10ca0:	4808      	ldr	r0, [pc, #32]	; (10cc4 <z_pend_curr+0xd0>)
   10ca2:	f001 fe93 	bl	129cc <assert_print>
   10ca6:	4621      	mov	r1, r4
   10ca8:	e7ee      	b.n	10c88 <z_pend_curr+0x94>
   10caa:	4630      	mov	r0, r6
}
   10cac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10cb0:	f7f8 bf96 	b.w	9be0 <arch_swap>
   10cb4:	2000d1d4 	.word	0x2000d1d4
   10cb8:	2000d218 	.word	0x2000d218
   10cbc:	2000d20c 	.word	0x2000d20c
   10cc0:	00016b94 	.word	0x00016b94
   10cc4:	00015341 	.word	0x00015341
   10cc8:	00016904 	.word	0x00016904
   10ccc:	0001558e 	.word	0x0001558e
   10cd0:	000155e7 	.word	0x000155e7
   10cd4:	000155fc 	.word	0x000155fc
   10cd8:	000155bb 	.word	0x000155bb
   10cdc:	000155d2 	.word	0x000155d2

00010ce0 <z_set_prio>:
{
   10ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10ce4:	4604      	mov	r4, r0
   10ce6:	460e      	mov	r6, r1
   10ce8:	f04f 0320 	mov.w	r3, #32
   10cec:	f3ef 8911 	mrs	r9, BASEPRI
   10cf0:	f383 8812 	msr	BASEPRI_MAX, r3
   10cf4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10cf8:	4837      	ldr	r0, [pc, #220]	; (10dd8 <z_set_prio+0xf8>)
   10cfa:	f7fe fdc1 	bl	f880 <z_spin_lock_valid>
   10cfe:	4607      	mov	r7, r0
   10d00:	b960      	cbnz	r0, 10d1c <z_set_prio+0x3c>
   10d02:	2394      	movs	r3, #148	; 0x94
   10d04:	4a35      	ldr	r2, [pc, #212]	; (10ddc <z_set_prio+0xfc>)
   10d06:	4936      	ldr	r1, [pc, #216]	; (10de0 <z_set_prio+0x100>)
   10d08:	4836      	ldr	r0, [pc, #216]	; (10de4 <z_set_prio+0x104>)
   10d0a:	f001 fe5f 	bl	129cc <assert_print>
   10d0e:	4932      	ldr	r1, [pc, #200]	; (10dd8 <z_set_prio+0xf8>)
   10d10:	4835      	ldr	r0, [pc, #212]	; (10de8 <z_set_prio+0x108>)
   10d12:	f001 fe5b 	bl	129cc <assert_print>
   10d16:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10d18:	4830      	ldr	r0, [pc, #192]	; (10ddc <z_set_prio+0xfc>)
   10d1a:	e021      	b.n	10d60 <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   10d1c:	482e      	ldr	r0, [pc, #184]	; (10dd8 <z_set_prio+0xf8>)
   10d1e:	f7fe fdcb 	bl	f8b8 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   10d22:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   10d24:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   10d26:	06da      	lsls	r2, r3, #27
   10d28:	d11c      	bne.n	10d64 <z_set_prio+0x84>
	return node->next != NULL;
   10d2a:	69a5      	ldr	r5, [r4, #24]
   10d2c:	b9d5      	cbnz	r5, 10d64 <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   10d2e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 10dec <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10d36:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   10d38:	4621      	mov	r1, r4
   10d3a:	4640      	mov	r0, r8
   10d3c:	f7ff fe12 	bl	10964 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   10d40:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   10d42:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   10d44:	f063 037f 	orn	r3, r3, #127	; 0x7f
   10d48:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   10d4a:	4b29      	ldr	r3, [pc, #164]	; (10df0 <z_set_prio+0x110>)
   10d4c:	429c      	cmp	r4, r3
   10d4e:	d11b      	bne.n	10d88 <z_set_prio+0xa8>
   10d50:	4928      	ldr	r1, [pc, #160]	; (10df4 <z_set_prio+0x114>)
   10d52:	4824      	ldr	r0, [pc, #144]	; (10de4 <z_set_prio+0x104>)
   10d54:	23bc      	movs	r3, #188	; 0xbc
   10d56:	4a28      	ldr	r2, [pc, #160]	; (10df8 <z_set_prio+0x118>)
   10d58:	f001 fe38 	bl	129cc <assert_print>
   10d5c:	21bc      	movs	r1, #188	; 0xbc
   10d5e:	4826      	ldr	r0, [pc, #152]	; (10df8 <z_set_prio+0x118>)
   10d60:	f001 fe2d 	bl	129be <assert_post_action>
   10d64:	2700      	movs	r7, #0
			thread->base.prio = prio;
   10d66:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10d68:	481b      	ldr	r0, [pc, #108]	; (10dd8 <z_set_prio+0xf8>)
   10d6a:	f7fe fd97 	bl	f89c <z_spin_unlock_valid>
   10d6e:	bb58      	cbnz	r0, 10dc8 <z_set_prio+0xe8>
   10d70:	23c2      	movs	r3, #194	; 0xc2
   10d72:	4a1a      	ldr	r2, [pc, #104]	; (10ddc <z_set_prio+0xfc>)
   10d74:	4921      	ldr	r1, [pc, #132]	; (10dfc <z_set_prio+0x11c>)
   10d76:	481b      	ldr	r0, [pc, #108]	; (10de4 <z_set_prio+0x104>)
   10d78:	f001 fe28 	bl	129cc <assert_print>
   10d7c:	4916      	ldr	r1, [pc, #88]	; (10dd8 <z_set_prio+0xf8>)
   10d7e:	4820      	ldr	r0, [pc, #128]	; (10e00 <z_set_prio+0x120>)
   10d80:	f001 fe24 	bl	129cc <assert_print>
   10d84:	21c2      	movs	r1, #194	; 0xc2
   10d86:	e7c7      	b.n	10d18 <z_set_prio+0x38>
	return list->head == list;
   10d88:	4643      	mov	r3, r8
   10d8a:	f853 291c 	ldr.w	r2, [r3], #-28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10d8e:	4542      	cmp	r2, r8
   10d90:	bf18      	it	ne
   10d92:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   10d94:	6a1a      	ldr	r2, [r3, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10d96:	b925      	cbnz	r5, 10da2 <z_set_prio+0xc2>
	node->prev = tail;
   10d98:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   10d9c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   10d9e:	621c      	str	r4, [r3, #32]
}
   10da0:	e00a      	b.n	10db8 <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   10da2:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   10da6:	428e      	cmp	r6, r1
   10da8:	d00a      	beq.n	10dc0 <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   10daa:	42b1      	cmp	r1, r6
   10dac:	dd08      	ble.n	10dc0 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   10dae:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   10db0:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   10db4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   10db6:	606c      	str	r4, [r5, #4]
			update_cache(1);
   10db8:	2001      	movs	r0, #1
   10dba:	f7ff fb9b 	bl	104f4 <update_cache>
   10dbe:	e7d3      	b.n	10d68 <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   10dc0:	42aa      	cmp	r2, r5
   10dc2:	d0e9      	beq.n	10d98 <z_set_prio+0xb8>
   10dc4:	682d      	ldr	r5, [r5, #0]
   10dc6:	e7e6      	b.n	10d96 <z_set_prio+0xb6>
	__asm__ volatile(
   10dc8:	f389 8811 	msr	BASEPRI, r9
   10dcc:	f3bf 8f6f 	isb	sy
}
   10dd0:	4638      	mov	r0, r7
   10dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10dd6:	bf00      	nop
   10dd8:	2000d218 	.word	0x2000d218
   10ddc:	0001558e 	.word	0x0001558e
   10de0:	000155e7 	.word	0x000155e7
   10de4:	00015341 	.word	0x00015341
   10de8:	000155fc 	.word	0x000155fc
   10dec:	2000d1f0 	.word	0x2000d1f0
   10df0:	2000c8c0 	.word	0x2000c8c0
   10df4:	00016ae6 	.word	0x00016ae6
   10df8:	00016904 	.word	0x00016904
   10dfc:	000155bb 	.word	0x000155bb
   10e00:	000155d2 	.word	0x000155d2

00010e04 <z_impl_k_thread_suspend>:
{
   10e04:	b570      	push	{r4, r5, r6, lr}
   10e06:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   10e08:	3018      	adds	r0, #24
   10e0a:	f000 fd4b 	bl	118a4 <z_abort_timeout>
	__asm__ volatile(
   10e0e:	f04f 0320 	mov.w	r3, #32
   10e12:	f3ef 8611 	mrs	r6, BASEPRI
   10e16:	f383 8812 	msr	BASEPRI_MAX, r3
   10e1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10e1e:	4824      	ldr	r0, [pc, #144]	; (10eb0 <z_impl_k_thread_suspend+0xac>)
   10e20:	f7fe fd2e 	bl	f880 <z_spin_lock_valid>
   10e24:	b968      	cbnz	r0, 10e42 <z_impl_k_thread_suspend+0x3e>
   10e26:	2394      	movs	r3, #148	; 0x94
   10e28:	4a22      	ldr	r2, [pc, #136]	; (10eb4 <z_impl_k_thread_suspend+0xb0>)
   10e2a:	4923      	ldr	r1, [pc, #140]	; (10eb8 <z_impl_k_thread_suspend+0xb4>)
   10e2c:	4823      	ldr	r0, [pc, #140]	; (10ebc <z_impl_k_thread_suspend+0xb8>)
   10e2e:	f001 fdcd 	bl	129cc <assert_print>
   10e32:	491f      	ldr	r1, [pc, #124]	; (10eb0 <z_impl_k_thread_suspend+0xac>)
   10e34:	4822      	ldr	r0, [pc, #136]	; (10ec0 <z_impl_k_thread_suspend+0xbc>)
   10e36:	f001 fdc9 	bl	129cc <assert_print>
   10e3a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10e3c:	481d      	ldr	r0, [pc, #116]	; (10eb4 <z_impl_k_thread_suspend+0xb0>)
   10e3e:	f001 fdbe 	bl	129be <assert_post_action>
	z_spin_lock_set_owner(l);
   10e42:	481b      	ldr	r0, [pc, #108]	; (10eb0 <z_impl_k_thread_suspend+0xac>)
   10e44:	f7fe fd38 	bl	f8b8 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   10e48:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   10e4c:	7b63      	ldrb	r3, [r4, #13]
   10e4e:	2a00      	cmp	r2, #0
   10e50:	da06      	bge.n	10e60 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   10e56:	4621      	mov	r1, r4
   10e58:	481a      	ldr	r0, [pc, #104]	; (10ec4 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10e5a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   10e5c:	f7ff fd82 	bl	10964 <z_priq_dumb_remove>
		update_cache(thread == _current);
   10e60:	4d19      	ldr	r5, [pc, #100]	; (10ec8 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   10e62:	7b63      	ldrb	r3, [r4, #13]
   10e64:	68a8      	ldr	r0, [r5, #8]
   10e66:	f043 0310 	orr.w	r3, r3, #16
   10e6a:	7363      	strb	r3, [r4, #13]
   10e6c:	1b03      	subs	r3, r0, r4
   10e6e:	4258      	negs	r0, r3
   10e70:	4158      	adcs	r0, r3
   10e72:	f7ff fb3f 	bl	104f4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10e76:	480e      	ldr	r0, [pc, #56]	; (10eb0 <z_impl_k_thread_suspend+0xac>)
   10e78:	f7fe fd10 	bl	f89c <z_spin_unlock_valid>
   10e7c:	b958      	cbnz	r0, 10e96 <z_impl_k_thread_suspend+0x92>
   10e7e:	23c2      	movs	r3, #194	; 0xc2
   10e80:	4a0c      	ldr	r2, [pc, #48]	; (10eb4 <z_impl_k_thread_suspend+0xb0>)
   10e82:	4912      	ldr	r1, [pc, #72]	; (10ecc <z_impl_k_thread_suspend+0xc8>)
   10e84:	480d      	ldr	r0, [pc, #52]	; (10ebc <z_impl_k_thread_suspend+0xb8>)
   10e86:	f001 fda1 	bl	129cc <assert_print>
   10e8a:	4909      	ldr	r1, [pc, #36]	; (10eb0 <z_impl_k_thread_suspend+0xac>)
   10e8c:	4810      	ldr	r0, [pc, #64]	; (10ed0 <z_impl_k_thread_suspend+0xcc>)
   10e8e:	f001 fd9d 	bl	129cc <assert_print>
   10e92:	21c2      	movs	r1, #194	; 0xc2
   10e94:	e7d2      	b.n	10e3c <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   10e96:	f386 8811 	msr	BASEPRI, r6
   10e9a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   10e9e:	68ab      	ldr	r3, [r5, #8]
   10ea0:	42a3      	cmp	r3, r4
   10ea2:	d103      	bne.n	10eac <z_impl_k_thread_suspend+0xa8>
}
   10ea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   10ea8:	f003 ba7c 	b.w	143a4 <z_reschedule_unlocked>
}
   10eac:	bd70      	pop	{r4, r5, r6, pc}
   10eae:	bf00      	nop
   10eb0:	2000d218 	.word	0x2000d218
   10eb4:	0001558e 	.word	0x0001558e
   10eb8:	000155e7 	.word	0x000155e7
   10ebc:	00015341 	.word	0x00015341
   10ec0:	000155fc 	.word	0x000155fc
   10ec4:	2000d1f0 	.word	0x2000d1f0
   10ec8:	2000d1d4 	.word	0x2000d1d4
   10ecc:	000155bb 	.word	0x000155bb
   10ed0:	000155d2 	.word	0x000155d2

00010ed4 <unpend_thread_no_timeout>:
{
   10ed4:	b510      	push	{r4, lr}
   10ed6:	4604      	mov	r4, r0
   10ed8:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   10eda:	b958      	cbnz	r0, 10ef4 <unpend_thread_no_timeout+0x20>
   10edc:	490a      	ldr	r1, [pc, #40]	; (10f08 <unpend_thread_no_timeout+0x34>)
   10ede:	480b      	ldr	r0, [pc, #44]	; (10f0c <unpend_thread_no_timeout+0x38>)
   10ee0:	f240 23c9 	movw	r3, #713	; 0x2c9
   10ee4:	4a0a      	ldr	r2, [pc, #40]	; (10f10 <unpend_thread_no_timeout+0x3c>)
   10ee6:	f001 fd71 	bl	129cc <assert_print>
   10eea:	f240 21c9 	movw	r1, #713	; 0x2c9
   10eee:	4808      	ldr	r0, [pc, #32]	; (10f10 <unpend_thread_no_timeout+0x3c>)
   10ef0:	f001 fd65 	bl	129be <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   10ef4:	4621      	mov	r1, r4
   10ef6:	f7ff fd35 	bl	10964 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   10efa:	7b63      	ldrb	r3, [r4, #13]
   10efc:	f023 0302 	bic.w	r3, r3, #2
   10f00:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   10f02:	2300      	movs	r3, #0
   10f04:	60a3      	str	r3, [r4, #8]
}
   10f06:	bd10      	pop	{r4, pc}
   10f08:	00016bcb 	.word	0x00016bcb
   10f0c:	00015341 	.word	0x00015341
   10f10:	00016904 	.word	0x00016904

00010f14 <z_unpend_thread>:
{
   10f14:	b538      	push	{r3, r4, r5, lr}
   10f16:	4604      	mov	r4, r0
	__asm__ volatile(
   10f18:	f04f 0320 	mov.w	r3, #32
   10f1c:	f3ef 8511 	mrs	r5, BASEPRI
   10f20:	f383 8812 	msr	BASEPRI_MAX, r3
   10f24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10f28:	4819      	ldr	r0, [pc, #100]	; (10f90 <z_unpend_thread+0x7c>)
   10f2a:	f7fe fca9 	bl	f880 <z_spin_lock_valid>
   10f2e:	b968      	cbnz	r0, 10f4c <z_unpend_thread+0x38>
   10f30:	2394      	movs	r3, #148	; 0x94
   10f32:	4a18      	ldr	r2, [pc, #96]	; (10f94 <z_unpend_thread+0x80>)
   10f34:	4918      	ldr	r1, [pc, #96]	; (10f98 <z_unpend_thread+0x84>)
   10f36:	4819      	ldr	r0, [pc, #100]	; (10f9c <z_unpend_thread+0x88>)
   10f38:	f001 fd48 	bl	129cc <assert_print>
   10f3c:	4914      	ldr	r1, [pc, #80]	; (10f90 <z_unpend_thread+0x7c>)
   10f3e:	4818      	ldr	r0, [pc, #96]	; (10fa0 <z_unpend_thread+0x8c>)
   10f40:	f001 fd44 	bl	129cc <assert_print>
   10f44:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10f46:	4813      	ldr	r0, [pc, #76]	; (10f94 <z_unpend_thread+0x80>)
   10f48:	f001 fd39 	bl	129be <assert_post_action>
	z_spin_lock_set_owner(l);
   10f4c:	4810      	ldr	r0, [pc, #64]	; (10f90 <z_unpend_thread+0x7c>)
   10f4e:	f7fe fcb3 	bl	f8b8 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   10f52:	68a3      	ldr	r3, [r4, #8]
   10f54:	b113      	cbz	r3, 10f5c <z_unpend_thread+0x48>
			unpend_thread_no_timeout(thread);
   10f56:	4620      	mov	r0, r4
   10f58:	f7ff ffbc 	bl	10ed4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10f5c:	480c      	ldr	r0, [pc, #48]	; (10f90 <z_unpend_thread+0x7c>)
   10f5e:	f7fe fc9d 	bl	f89c <z_spin_unlock_valid>
   10f62:	b958      	cbnz	r0, 10f7c <z_unpend_thread+0x68>
   10f64:	23c2      	movs	r3, #194	; 0xc2
   10f66:	4a0b      	ldr	r2, [pc, #44]	; (10f94 <z_unpend_thread+0x80>)
   10f68:	490e      	ldr	r1, [pc, #56]	; (10fa4 <z_unpend_thread+0x90>)
   10f6a:	480c      	ldr	r0, [pc, #48]	; (10f9c <z_unpend_thread+0x88>)
   10f6c:	f001 fd2e 	bl	129cc <assert_print>
   10f70:	4907      	ldr	r1, [pc, #28]	; (10f90 <z_unpend_thread+0x7c>)
   10f72:	480d      	ldr	r0, [pc, #52]	; (10fa8 <z_unpend_thread+0x94>)
   10f74:	f001 fd2a 	bl	129cc <assert_print>
   10f78:	21c2      	movs	r1, #194	; 0xc2
   10f7a:	e7e4      	b.n	10f46 <z_unpend_thread+0x32>
	__asm__ volatile(
   10f7c:	f385 8811 	msr	BASEPRI, r5
   10f80:	f3bf 8f6f 	isb	sy
   10f84:	f104 0018 	add.w	r0, r4, #24
}
   10f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10f8c:	f000 bc8a 	b.w	118a4 <z_abort_timeout>
   10f90:	2000d218 	.word	0x2000d218
   10f94:	0001558e 	.word	0x0001558e
   10f98:	000155e7 	.word	0x000155e7
   10f9c:	00015341 	.word	0x00015341
   10fa0:	000155fc 	.word	0x000155fc
   10fa4:	000155bb 	.word	0x000155bb
   10fa8:	000155d2 	.word	0x000155d2

00010fac <z_sched_wake_thread>:
{
   10fac:	b570      	push	{r4, r5, r6, lr}
   10fae:	4604      	mov	r4, r0
   10fb0:	460d      	mov	r5, r1
	__asm__ volatile(
   10fb2:	f04f 0320 	mov.w	r3, #32
   10fb6:	f3ef 8611 	mrs	r6, BASEPRI
   10fba:	f383 8812 	msr	BASEPRI_MAX, r3
   10fbe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10fc2:	481f      	ldr	r0, [pc, #124]	; (11040 <z_sched_wake_thread+0x94>)
   10fc4:	f7fe fc5c 	bl	f880 <z_spin_lock_valid>
   10fc8:	b968      	cbnz	r0, 10fe6 <z_sched_wake_thread+0x3a>
   10fca:	2394      	movs	r3, #148	; 0x94
   10fcc:	4a1d      	ldr	r2, [pc, #116]	; (11044 <z_sched_wake_thread+0x98>)
   10fce:	491e      	ldr	r1, [pc, #120]	; (11048 <z_sched_wake_thread+0x9c>)
   10fd0:	481e      	ldr	r0, [pc, #120]	; (1104c <z_sched_wake_thread+0xa0>)
   10fd2:	f001 fcfb 	bl	129cc <assert_print>
   10fd6:	491a      	ldr	r1, [pc, #104]	; (11040 <z_sched_wake_thread+0x94>)
   10fd8:	481d      	ldr	r0, [pc, #116]	; (11050 <z_sched_wake_thread+0xa4>)
   10fda:	f001 fcf7 	bl	129cc <assert_print>
   10fde:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10fe0:	4818      	ldr	r0, [pc, #96]	; (11044 <z_sched_wake_thread+0x98>)
   10fe2:	f001 fcec 	bl	129be <assert_post_action>
	z_spin_lock_set_owner(l);
   10fe6:	4816      	ldr	r0, [pc, #88]	; (11040 <z_sched_wake_thread+0x94>)
   10fe8:	f7fe fc66 	bl	f8b8 <z_spin_lock_set_owner>
		if (!killed) {
   10fec:	7b63      	ldrb	r3, [r4, #13]
   10fee:	f013 0f28 	tst.w	r3, #40	; 0x28
   10ff2:	d10c      	bne.n	1100e <z_sched_wake_thread+0x62>
			if (thread->base.pended_on != NULL) {
   10ff4:	68a3      	ldr	r3, [r4, #8]
   10ff6:	b113      	cbz	r3, 10ffe <z_sched_wake_thread+0x52>
				unpend_thread_no_timeout(thread);
   10ff8:	4620      	mov	r0, r4
   10ffa:	f7ff ff6b 	bl	10ed4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10ffe:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   11000:	b9ad      	cbnz	r5, 1102e <z_sched_wake_thread+0x82>
   11002:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
   11006:	4620      	mov	r0, r4
   11008:	7363      	strb	r3, [r4, #13]
   1100a:	f7ff faa7 	bl	1055c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1100e:	480c      	ldr	r0, [pc, #48]	; (11040 <z_sched_wake_thread+0x94>)
   11010:	f7fe fc44 	bl	f89c <z_spin_unlock_valid>
   11014:	b970      	cbnz	r0, 11034 <z_sched_wake_thread+0x88>
   11016:	23c2      	movs	r3, #194	; 0xc2
   11018:	4a0a      	ldr	r2, [pc, #40]	; (11044 <z_sched_wake_thread+0x98>)
   1101a:	490e      	ldr	r1, [pc, #56]	; (11054 <z_sched_wake_thread+0xa8>)
   1101c:	480b      	ldr	r0, [pc, #44]	; (1104c <z_sched_wake_thread+0xa0>)
   1101e:	f001 fcd5 	bl	129cc <assert_print>
   11022:	4907      	ldr	r1, [pc, #28]	; (11040 <z_sched_wake_thread+0x94>)
   11024:	480c      	ldr	r0, [pc, #48]	; (11058 <z_sched_wake_thread+0xac>)
   11026:	f001 fcd1 	bl	129cc <assert_print>
   1102a:	21c2      	movs	r1, #194	; 0xc2
   1102c:	e7d8      	b.n	10fe0 <z_sched_wake_thread+0x34>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1102e:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   11032:	e7e8      	b.n	11006 <z_sched_wake_thread+0x5a>
	__asm__ volatile(
   11034:	f386 8811 	msr	BASEPRI, r6
   11038:	f3bf 8f6f 	isb	sy
}
   1103c:	bd70      	pop	{r4, r5, r6, pc}
   1103e:	bf00      	nop
   11040:	2000d218 	.word	0x2000d218
   11044:	0001558e 	.word	0x0001558e
   11048:	000155e7 	.word	0x000155e7
   1104c:	00015341 	.word	0x00015341
   11050:	000155fc 	.word	0x000155fc
   11054:	000155bb 	.word	0x000155bb
   11058:	000155d2 	.word	0x000155d2

0001105c <z_unpend_first_thread>:
{
   1105c:	b570      	push	{r4, r5, r6, lr}
   1105e:	4605      	mov	r5, r0
	__asm__ volatile(
   11060:	f04f 0320 	mov.w	r3, #32
   11064:	f3ef 8611 	mrs	r6, BASEPRI
   11068:	f383 8812 	msr	BASEPRI_MAX, r3
   1106c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11070:	481b      	ldr	r0, [pc, #108]	; (110e0 <z_unpend_first_thread+0x84>)
   11072:	f7fe fc05 	bl	f880 <z_spin_lock_valid>
   11076:	b968      	cbnz	r0, 11094 <z_unpend_first_thread+0x38>
   11078:	2394      	movs	r3, #148	; 0x94
   1107a:	4a1a      	ldr	r2, [pc, #104]	; (110e4 <z_unpend_first_thread+0x88>)
   1107c:	491a      	ldr	r1, [pc, #104]	; (110e8 <z_unpend_first_thread+0x8c>)
   1107e:	481b      	ldr	r0, [pc, #108]	; (110ec <z_unpend_first_thread+0x90>)
   11080:	f001 fca4 	bl	129cc <assert_print>
   11084:	4916      	ldr	r1, [pc, #88]	; (110e0 <z_unpend_first_thread+0x84>)
   11086:	481a      	ldr	r0, [pc, #104]	; (110f0 <z_unpend_first_thread+0x94>)
   11088:	f001 fca0 	bl	129cc <assert_print>
   1108c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1108e:	4815      	ldr	r0, [pc, #84]	; (110e4 <z_unpend_first_thread+0x88>)
   11090:	f001 fc95 	bl	129be <assert_post_action>
	z_spin_lock_set_owner(l);
   11094:	4812      	ldr	r0, [pc, #72]	; (110e0 <z_unpend_first_thread+0x84>)
   11096:	f7fe fc0f 	bl	f8b8 <z_spin_lock_set_owner>
	return list->head == list;
   1109a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1109c:	42a5      	cmp	r5, r4
   1109e:	d017      	beq.n	110d0 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   110a0:	b134      	cbz	r4, 110b0 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   110a2:	4620      	mov	r0, r4
   110a4:	f7ff ff16 	bl	10ed4 <unpend_thread_no_timeout>
   110a8:	f104 0018 	add.w	r0, r4, #24
   110ac:	f000 fbfa 	bl	118a4 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   110b0:	480b      	ldr	r0, [pc, #44]	; (110e0 <z_unpend_first_thread+0x84>)
   110b2:	f7fe fbf3 	bl	f89c <z_spin_unlock_valid>
   110b6:	b968      	cbnz	r0, 110d4 <z_unpend_first_thread+0x78>
   110b8:	23c2      	movs	r3, #194	; 0xc2
   110ba:	4a0a      	ldr	r2, [pc, #40]	; (110e4 <z_unpend_first_thread+0x88>)
   110bc:	490d      	ldr	r1, [pc, #52]	; (110f4 <z_unpend_first_thread+0x98>)
   110be:	480b      	ldr	r0, [pc, #44]	; (110ec <z_unpend_first_thread+0x90>)
   110c0:	f001 fc84 	bl	129cc <assert_print>
   110c4:	4906      	ldr	r1, [pc, #24]	; (110e0 <z_unpend_first_thread+0x84>)
   110c6:	480c      	ldr	r0, [pc, #48]	; (110f8 <z_unpend_first_thread+0x9c>)
   110c8:	f001 fc80 	bl	129cc <assert_print>
   110cc:	21c2      	movs	r1, #194	; 0xc2
   110ce:	e7de      	b.n	1108e <z_unpend_first_thread+0x32>
   110d0:	2400      	movs	r4, #0
   110d2:	e7ed      	b.n	110b0 <z_unpend_first_thread+0x54>
	__asm__ volatile(
   110d4:	f386 8811 	msr	BASEPRI, r6
   110d8:	f3bf 8f6f 	isb	sy
}
   110dc:	4620      	mov	r0, r4
   110de:	bd70      	pop	{r4, r5, r6, pc}
   110e0:	2000d218 	.word	0x2000d218
   110e4:	0001558e 	.word	0x0001558e
   110e8:	000155e7 	.word	0x000155e7
   110ec:	00015341 	.word	0x00015341
   110f0:	000155fc 	.word	0x000155fc
   110f4:	000155bb 	.word	0x000155bb
   110f8:	000155d2 	.word	0x000155d2

000110fc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   110fc:	4b02      	ldr	r3, [pc, #8]	; (11108 <z_sched_init+0xc>)
   110fe:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   11102:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   11106:	4770      	bx	lr
   11108:	2000d1d4 	.word	0x2000d1d4

0001110c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   1110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1110e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   11112:	b16b      	cbz	r3, 11130 <z_impl_k_yield+0x24>
   11114:	493c      	ldr	r1, [pc, #240]	; (11208 <z_impl_k_yield+0xfc>)
   11116:	f240 5371 	movw	r3, #1393	; 0x571
   1111a:	4a3c      	ldr	r2, [pc, #240]	; (1120c <z_impl_k_yield+0x100>)
   1111c:	483c      	ldr	r0, [pc, #240]	; (11210 <z_impl_k_yield+0x104>)
   1111e:	f001 fc55 	bl	129cc <assert_print>
   11122:	483c      	ldr	r0, [pc, #240]	; (11214 <z_impl_k_yield+0x108>)
   11124:	f001 fc52 	bl	129cc <assert_print>
   11128:	f240 5171 	movw	r1, #1393	; 0x571
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1112c:	4837      	ldr	r0, [pc, #220]	; (1120c <z_impl_k_yield+0x100>)
   1112e:	e017      	b.n	11160 <z_impl_k_yield+0x54>
	__asm__ volatile(
   11130:	f04f 0320 	mov.w	r3, #32
   11134:	f3ef 8611 	mrs	r6, BASEPRI
   11138:	f383 8812 	msr	BASEPRI_MAX, r3
   1113c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11140:	4835      	ldr	r0, [pc, #212]	; (11218 <z_impl_k_yield+0x10c>)
   11142:	f7fe fb9d 	bl	f880 <z_spin_lock_valid>
   11146:	b968      	cbnz	r0, 11164 <z_impl_k_yield+0x58>
   11148:	2394      	movs	r3, #148	; 0x94
   1114a:	4a34      	ldr	r2, [pc, #208]	; (1121c <z_impl_k_yield+0x110>)
   1114c:	4934      	ldr	r1, [pc, #208]	; (11220 <z_impl_k_yield+0x114>)
   1114e:	4830      	ldr	r0, [pc, #192]	; (11210 <z_impl_k_yield+0x104>)
   11150:	f001 fc3c 	bl	129cc <assert_print>
   11154:	4930      	ldr	r1, [pc, #192]	; (11218 <z_impl_k_yield+0x10c>)
   11156:	4833      	ldr	r0, [pc, #204]	; (11224 <z_impl_k_yield+0x118>)
   11158:	f001 fc38 	bl	129cc <assert_print>
   1115c:	2194      	movs	r1, #148	; 0x94
   1115e:	482f      	ldr	r0, [pc, #188]	; (1121c <z_impl_k_yield+0x110>)
   11160:	f001 fc2d 	bl	129be <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   11164:	4c30      	ldr	r4, [pc, #192]	; (11228 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   11166:	482c      	ldr	r0, [pc, #176]	; (11218 <z_impl_k_yield+0x10c>)
   11168:	f7fe fba6 	bl	f8b8 <z_spin_lock_set_owner>
   1116c:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
   1116e:	f104 051c 	add.w	r5, r4, #28
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11172:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   11174:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1117a:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1117c:	f7ff fbf2 	bl	10964 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   11180:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   11182:	7b5a      	ldrb	r2, [r3, #13]
   11184:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11188:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1118a:	4a28      	ldr	r2, [pc, #160]	; (1122c <z_impl_k_yield+0x120>)
   1118c:	4293      	cmp	r3, r2
   1118e:	d107      	bne.n	111a0 <z_impl_k_yield+0x94>
   11190:	4927      	ldr	r1, [pc, #156]	; (11230 <z_impl_k_yield+0x124>)
   11192:	23bc      	movs	r3, #188	; 0xbc
   11194:	4a1d      	ldr	r2, [pc, #116]	; (1120c <z_impl_k_yield+0x100>)
   11196:	481e      	ldr	r0, [pc, #120]	; (11210 <z_impl_k_yield+0x104>)
   11198:	f001 fc18 	bl	129cc <assert_print>
   1119c:	21bc      	movs	r1, #188	; 0xbc
   1119e:	e7c5      	b.n	1112c <z_impl_k_yield+0x20>
	return list->head == list;
   111a0:	69e2      	ldr	r2, [r4, #28]
	return (node == list->tail) ? NULL : node->next;
   111a2:	6a21      	ldr	r1, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   111a4:	42aa      	cmp	r2, r5
   111a6:	bf08      	it	eq
   111a8:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   111aa:	b922      	cbnz	r2, 111b6 <z_impl_k_yield+0xaa>
	node->prev = tail;
   111ac:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   111b0:	600b      	str	r3, [r1, #0]
	list->tail = node;
   111b2:	6223      	str	r3, [r4, #32]
}
   111b4:	e00c      	b.n	111d0 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   111b6:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   111ba:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   111be:	42b8      	cmp	r0, r7
   111c0:	d019      	beq.n	111f6 <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   111c2:	4287      	cmp	r7, r0
   111c4:	dd17      	ble.n	111f6 <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   111c6:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   111c8:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   111cc:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   111ce:	6053      	str	r3, [r2, #4]
	update_cache(1);
   111d0:	2001      	movs	r0, #1
   111d2:	f7ff f98f 	bl	104f4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   111d6:	4810      	ldr	r0, [pc, #64]	; (11218 <z_impl_k_yield+0x10c>)
   111d8:	f7fe fb60 	bl	f89c <z_spin_unlock_valid>
   111dc:	b978      	cbnz	r0, 111fe <z_impl_k_yield+0xf2>
   111de:	23e1      	movs	r3, #225	; 0xe1
   111e0:	4a0e      	ldr	r2, [pc, #56]	; (1121c <z_impl_k_yield+0x110>)
   111e2:	4914      	ldr	r1, [pc, #80]	; (11234 <z_impl_k_yield+0x128>)
   111e4:	480a      	ldr	r0, [pc, #40]	; (11210 <z_impl_k_yield+0x104>)
   111e6:	f001 fbf1 	bl	129cc <assert_print>
   111ea:	490b      	ldr	r1, [pc, #44]	; (11218 <z_impl_k_yield+0x10c>)
   111ec:	4812      	ldr	r0, [pc, #72]	; (11238 <z_impl_k_yield+0x12c>)
   111ee:	f001 fbed 	bl	129cc <assert_print>
   111f2:	21e1      	movs	r1, #225	; 0xe1
   111f4:	e7b3      	b.n	1115e <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   111f6:	428a      	cmp	r2, r1
   111f8:	d0d8      	beq.n	111ac <z_impl_k_yield+0xa0>
   111fa:	6812      	ldr	r2, [r2, #0]
   111fc:	e7d5      	b.n	111aa <z_impl_k_yield+0x9e>
   111fe:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   11200:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11204:	f7f8 bcec 	b.w	9be0 <arch_swap>
   11208:	000166e4 	.word	0x000166e4
   1120c:	00016904 	.word	0x00016904
   11210:	00015341 	.word	0x00015341
   11214:	000156e6 	.word	0x000156e6
   11218:	2000d218 	.word	0x2000d218
   1121c:	0001558e 	.word	0x0001558e
   11220:	000155e7 	.word	0x000155e7
   11224:	000155fc 	.word	0x000155fc
   11228:	2000d1d4 	.word	0x2000d1d4
   1122c:	2000c8c0 	.word	0x2000c8c0
   11230:	00016ae6 	.word	0x00016ae6
   11234:	000155bb 	.word	0x000155bb
   11238:	000155d2 	.word	0x000155d2

0001123c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1123c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11240:	4605      	mov	r5, r0
   11242:	460e      	mov	r6, r1
   11244:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   11248:	b16b      	cbz	r3, 11266 <z_tick_sleep+0x2a>
   1124a:	493f      	ldr	r1, [pc, #252]	; (11348 <z_tick_sleep+0x10c>)
   1124c:	f240 538d 	movw	r3, #1421	; 0x58d
   11250:	4a3e      	ldr	r2, [pc, #248]	; (1134c <z_tick_sleep+0x110>)
   11252:	483f      	ldr	r0, [pc, #252]	; (11350 <z_tick_sleep+0x114>)
   11254:	f001 fbba 	bl	129cc <assert_print>
   11258:	483e      	ldr	r0, [pc, #248]	; (11354 <z_tick_sleep+0x118>)
   1125a:	f001 fbb7 	bl	129cc <assert_print>
   1125e:	f240 518d 	movw	r1, #1421	; 0x58d
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   11262:	483a      	ldr	r0, [pc, #232]	; (1134c <z_tick_sleep+0x110>)
   11264:	e025      	b.n	112b2 <z_tick_sleep+0x76>
	if (ticks == 0) {
   11266:	ea50 0301 	orrs.w	r3, r0, r1
   1126a:	d103      	bne.n	11274 <z_tick_sleep+0x38>
	z_impl_k_yield();
   1126c:	f7ff ff4e 	bl	1110c <z_impl_k_yield>
		return 0;
   11270:	2000      	movs	r0, #0
   11272:	e066      	b.n	11342 <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   11274:	1c82      	adds	r2, r0, #2
   11276:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   1127a:	db1c      	blt.n	112b6 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1127c:	f003 f8b0 	bl	143e0 <sys_clock_tick_get_32>
   11280:	182c      	adds	r4, r5, r0
   11282:	f04f 0320 	mov.w	r3, #32
   11286:	f3ef 8811 	mrs	r8, BASEPRI
   1128a:	f383 8812 	msr	BASEPRI_MAX, r3
   1128e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11292:	4831      	ldr	r0, [pc, #196]	; (11358 <z_tick_sleep+0x11c>)
   11294:	f7fe faf4 	bl	f880 <z_spin_lock_valid>
   11298:	b988      	cbnz	r0, 112be <z_tick_sleep+0x82>
   1129a:	2394      	movs	r3, #148	; 0x94
   1129c:	4a2f      	ldr	r2, [pc, #188]	; (1135c <z_tick_sleep+0x120>)
   1129e:	4930      	ldr	r1, [pc, #192]	; (11360 <z_tick_sleep+0x124>)
   112a0:	482b      	ldr	r0, [pc, #172]	; (11350 <z_tick_sleep+0x114>)
   112a2:	f001 fb93 	bl	129cc <assert_print>
   112a6:	492c      	ldr	r1, [pc, #176]	; (11358 <z_tick_sleep+0x11c>)
   112a8:	482e      	ldr	r0, [pc, #184]	; (11364 <z_tick_sleep+0x128>)
   112aa:	f001 fb8f 	bl	129cc <assert_print>
   112ae:	2194      	movs	r1, #148	; 0x94
   112b0:	482a      	ldr	r0, [pc, #168]	; (1135c <z_tick_sleep+0x120>)
   112b2:	f001 fb84 	bl	129be <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   112b6:	f06f 0401 	mvn.w	r4, #1
   112ba:	1a24      	subs	r4, r4, r0
   112bc:	e7e1      	b.n	11282 <z_tick_sleep+0x46>
	pending_current = _current;
   112be:	4f2a      	ldr	r7, [pc, #168]	; (11368 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   112c0:	4825      	ldr	r0, [pc, #148]	; (11358 <z_tick_sleep+0x11c>)
   112c2:	f7fe faf9 	bl	f8b8 <z_spin_lock_set_owner>
   112c6:	68b8      	ldr	r0, [r7, #8]
   112c8:	4b28      	ldr	r3, [pc, #160]	; (1136c <z_tick_sleep+0x130>)
   112ca:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   112cc:	f7ff fc20 	bl	10b10 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   112d0:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   112d2:	462a      	mov	r2, r5
   112d4:	4633      	mov	r3, r6
   112d6:	3018      	adds	r0, #24
   112d8:	4925      	ldr	r1, [pc, #148]	; (11370 <z_tick_sleep+0x134>)
   112da:	f000 fa23 	bl	11724 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   112de:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   112e0:	481d      	ldr	r0, [pc, #116]	; (11358 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   112e2:	7b53      	ldrb	r3, [r2, #13]
   112e4:	f043 0310 	orr.w	r3, r3, #16
   112e8:	7353      	strb	r3, [r2, #13]
   112ea:	f7fe fad7 	bl	f89c <z_spin_unlock_valid>
   112ee:	b958      	cbnz	r0, 11308 <z_tick_sleep+0xcc>
   112f0:	23e1      	movs	r3, #225	; 0xe1
   112f2:	4a1a      	ldr	r2, [pc, #104]	; (1135c <z_tick_sleep+0x120>)
   112f4:	491f      	ldr	r1, [pc, #124]	; (11374 <z_tick_sleep+0x138>)
   112f6:	4816      	ldr	r0, [pc, #88]	; (11350 <z_tick_sleep+0x114>)
   112f8:	f001 fb68 	bl	129cc <assert_print>
   112fc:	4916      	ldr	r1, [pc, #88]	; (11358 <z_tick_sleep+0x11c>)
   112fe:	481e      	ldr	r0, [pc, #120]	; (11378 <z_tick_sleep+0x13c>)
   11300:	f001 fb64 	bl	129cc <assert_print>
   11304:	21e1      	movs	r1, #225	; 0xe1
   11306:	e7d3      	b.n	112b0 <z_tick_sleep+0x74>
   11308:	4640      	mov	r0, r8
   1130a:	f7f8 fc69 	bl	9be0 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   1130e:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   11310:	7b5b      	ldrb	r3, [r3, #13]
   11312:	06db      	lsls	r3, r3, #27
   11314:	d50c      	bpl.n	11330 <z_tick_sleep+0xf4>
   11316:	4919      	ldr	r1, [pc, #100]	; (1137c <z_tick_sleep+0x140>)
   11318:	f240 53a9 	movw	r3, #1449	; 0x5a9
   1131c:	4a0b      	ldr	r2, [pc, #44]	; (1134c <z_tick_sleep+0x110>)
   1131e:	480c      	ldr	r0, [pc, #48]	; (11350 <z_tick_sleep+0x114>)
   11320:	f001 fb54 	bl	129cc <assert_print>
   11324:	480b      	ldr	r0, [pc, #44]	; (11354 <z_tick_sleep+0x118>)
   11326:	f001 fb51 	bl	129cc <assert_print>
   1132a:	f240 51a9 	movw	r1, #1449	; 0x5a9
   1132e:	e798      	b.n	11262 <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   11330:	f003 f856 	bl	143e0 <sys_clock_tick_get_32>
   11334:	1a20      	subs	r0, r4, r0
   11336:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1133a:	2801      	cmp	r0, #1
   1133c:	f173 0300 	sbcs.w	r3, r3, #0
   11340:	db96      	blt.n	11270 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   11342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11346:	bf00      	nop
   11348:	000166e4 	.word	0x000166e4
   1134c:	00016904 	.word	0x00016904
   11350:	00015341 	.word	0x00015341
   11354:	000156e6 	.word	0x000156e6
   11358:	2000d218 	.word	0x2000d218
   1135c:	0001558e 	.word	0x0001558e
   11360:	000155e7 	.word	0x000155e7
   11364:	000155fc 	.word	0x000155fc
   11368:	2000d1d4 	.word	0x2000d1d4
   1136c:	2000d20c 	.word	0x2000d20c
   11370:	000143b9 	.word	0x000143b9
   11374:	000155bb 	.word	0x000155bb
   11378:	000155d2 	.word	0x000155d2
   1137c:	00016be2 	.word	0x00016be2

00011380 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   11380:	b508      	push	{r3, lr}
   11382:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   11386:	b173      	cbz	r3, 113a6 <z_impl_k_sleep+0x26>
   11388:	4912      	ldr	r1, [pc, #72]	; (113d4 <z_impl_k_sleep+0x54>)
   1138a:	f44f 63b7 	mov.w	r3, #1464	; 0x5b8
   1138e:	4a12      	ldr	r2, [pc, #72]	; (113d8 <z_impl_k_sleep+0x58>)
   11390:	4812      	ldr	r0, [pc, #72]	; (113dc <z_impl_k_sleep+0x5c>)
   11392:	f001 fb1b 	bl	129cc <assert_print>
   11396:	4812      	ldr	r0, [pc, #72]	; (113e0 <z_impl_k_sleep+0x60>)
   11398:	f001 fb18 	bl	129cc <assert_print>
   1139c:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
   113a0:	480d      	ldr	r0, [pc, #52]	; (113d8 <z_impl_k_sleep+0x58>)
   113a2:	f001 fb0c 	bl	129be <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   113a6:	f1b1 3fff 	cmp.w	r1, #4294967295
   113aa:	bf08      	it	eq
   113ac:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   113b0:	d106      	bne.n	113c0 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   113b2:	4b0c      	ldr	r3, [pc, #48]	; (113e4 <z_impl_k_sleep+0x64>)
   113b4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   113b6:	f7ff fd25 	bl	10e04 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   113ba:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   113be:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   113c0:	f7ff ff3c 	bl	1123c <z_tick_sleep>
   113c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   113c8:	fb80 0303 	smull	r0, r3, r0, r3
   113cc:	0bc0      	lsrs	r0, r0, #15
   113ce:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   113d2:	e7f4      	b.n	113be <z_impl_k_sleep+0x3e>
   113d4:	000166e4 	.word	0x000166e4
   113d8:	00016904 	.word	0x00016904
   113dc:	00015341 	.word	0x00015341
   113e0:	000156e6 	.word	0x000156e6
   113e4:	2000d1d4 	.word	0x2000d1d4

000113e8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   113e8:	4b01      	ldr	r3, [pc, #4]	; (113f0 <z_impl_z_current_get+0x8>)
   113ea:	6898      	ldr	r0, [r3, #8]
   113ec:	4770      	bx	lr
   113ee:	bf00      	nop
   113f0:	2000d1d4 	.word	0x2000d1d4

000113f4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   113f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   113f8:	4604      	mov	r4, r0
   113fa:	f04f 0320 	mov.w	r3, #32
   113fe:	f3ef 8611 	mrs	r6, BASEPRI
   11402:	f383 8812 	msr	BASEPRI_MAX, r3
   11406:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1140a:	4851      	ldr	r0, [pc, #324]	; (11550 <z_thread_abort+0x15c>)
   1140c:	f7fe fa38 	bl	f880 <z_spin_lock_valid>
   11410:	b968      	cbnz	r0, 1142e <z_thread_abort+0x3a>
   11412:	2394      	movs	r3, #148	; 0x94
   11414:	4a4f      	ldr	r2, [pc, #316]	; (11554 <z_thread_abort+0x160>)
   11416:	4950      	ldr	r1, [pc, #320]	; (11558 <z_thread_abort+0x164>)
   11418:	4850      	ldr	r0, [pc, #320]	; (1155c <z_thread_abort+0x168>)
   1141a:	f001 fad7 	bl	129cc <assert_print>
   1141e:	494c      	ldr	r1, [pc, #304]	; (11550 <z_thread_abort+0x15c>)
   11420:	484f      	ldr	r0, [pc, #316]	; (11560 <z_thread_abort+0x16c>)
   11422:	f001 fad3 	bl	129cc <assert_print>
   11426:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11428:	484a      	ldr	r0, [pc, #296]	; (11554 <z_thread_abort+0x160>)
   1142a:	f001 fac8 	bl	129be <assert_post_action>
	z_spin_lock_set_owner(l);
   1142e:	4848      	ldr	r0, [pc, #288]	; (11550 <z_thread_abort+0x15c>)
   11430:	f7fe fa42 	bl	f8b8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   11434:	7b23      	ldrb	r3, [r4, #12]
   11436:	07d9      	lsls	r1, r3, #31
   11438:	d522      	bpl.n	11480 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1143a:	4845      	ldr	r0, [pc, #276]	; (11550 <z_thread_abort+0x15c>)
   1143c:	f7fe fa2e 	bl	f89c <z_spin_unlock_valid>
   11440:	b958      	cbnz	r0, 1145a <z_thread_abort+0x66>
   11442:	23c2      	movs	r3, #194	; 0xc2
   11444:	4a43      	ldr	r2, [pc, #268]	; (11554 <z_thread_abort+0x160>)
   11446:	4947      	ldr	r1, [pc, #284]	; (11564 <z_thread_abort+0x170>)
   11448:	4844      	ldr	r0, [pc, #272]	; (1155c <z_thread_abort+0x168>)
   1144a:	f001 fabf 	bl	129cc <assert_print>
   1144e:	4940      	ldr	r1, [pc, #256]	; (11550 <z_thread_abort+0x15c>)
   11450:	4845      	ldr	r0, [pc, #276]	; (11568 <z_thread_abort+0x174>)
   11452:	f001 fabb 	bl	129cc <assert_print>
   11456:	21c2      	movs	r1, #194	; 0xc2
   11458:	e7e6      	b.n	11428 <z_thread_abort+0x34>
	__asm__ volatile(
   1145a:	f386 8811 	msr	BASEPRI, r6
   1145e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   11462:	f240 63ca 	movw	r3, #1738	; 0x6ca
   11466:	4a41      	ldr	r2, [pc, #260]	; (1156c <z_thread_abort+0x178>)
   11468:	4941      	ldr	r1, [pc, #260]	; (11570 <z_thread_abort+0x17c>)
   1146a:	483c      	ldr	r0, [pc, #240]	; (1155c <z_thread_abort+0x168>)
   1146c:	f001 faae 	bl	129cc <assert_print>
   11470:	4621      	mov	r1, r4
   11472:	4840      	ldr	r0, [pc, #256]	; (11574 <z_thread_abort+0x180>)
   11474:	f001 faaa 	bl	129cc <assert_print>
   11478:	f240 61ca 	movw	r1, #1738	; 0x6ca
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   1147c:	483b      	ldr	r0, [pc, #236]	; (1156c <z_thread_abort+0x178>)
   1147e:	e7d4      	b.n	1142a <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   11480:	7b63      	ldrb	r3, [r4, #13]
   11482:	071a      	lsls	r2, r3, #28
   11484:	d50a      	bpl.n	1149c <z_thread_abort+0xa8>
   11486:	4832      	ldr	r0, [pc, #200]	; (11550 <z_thread_abort+0x15c>)
   11488:	f7fe fa08 	bl	f89c <z_spin_unlock_valid>
   1148c:	2800      	cmp	r0, #0
   1148e:	d0d8      	beq.n	11442 <z_thread_abort+0x4e>
   11490:	f386 8811 	msr	BASEPRI, r6
   11494:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   11498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1149c:	f023 0220 	bic.w	r2, r3, #32
   114a0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   114a4:	09d2      	lsrs	r2, r2, #7
   114a6:	d12c      	bne.n	11502 <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   114a8:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   114aa:	68a3      	ldr	r3, [r4, #8]
   114ac:	b113      	cbz	r3, 114b4 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   114ae:	4620      	mov	r0, r4
   114b0:	f7ff fd10 	bl	10ed4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   114b4:	f104 0018 	add.w	r0, r4, #24
   114b8:	f000 f9f4 	bl	118a4 <z_abort_timeout>
   114bc:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   114c0:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   114c4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   114c6:	42bd      	cmp	r5, r7
   114c8:	d000      	beq.n	114cc <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   114ca:	bb25      	cbnz	r5, 11516 <z_thread_abort+0x122>
		update_cache(1);
   114cc:	2001      	movs	r0, #1
   114ce:	f7ff f811 	bl	104f4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   114d2:	4b29      	ldr	r3, [pc, #164]	; (11578 <z_thread_abort+0x184>)
   114d4:	689b      	ldr	r3, [r3, #8]
   114d6:	42a3      	cmp	r3, r4
   114d8:	d1d5      	bne.n	11486 <z_thread_abort+0x92>
   114da:	f3ef 8305 	mrs	r3, IPSR
   114de:	2b00      	cmp	r3, #0
   114e0:	d1d1      	bne.n	11486 <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   114e2:	481b      	ldr	r0, [pc, #108]	; (11550 <z_thread_abort+0x15c>)
   114e4:	f7fe f9da 	bl	f89c <z_spin_unlock_valid>
   114e8:	bb10      	cbnz	r0, 11530 <z_thread_abort+0x13c>
   114ea:	23e1      	movs	r3, #225	; 0xe1
   114ec:	4a19      	ldr	r2, [pc, #100]	; (11554 <z_thread_abort+0x160>)
   114ee:	491d      	ldr	r1, [pc, #116]	; (11564 <z_thread_abort+0x170>)
   114f0:	481a      	ldr	r0, [pc, #104]	; (1155c <z_thread_abort+0x168>)
   114f2:	f001 fa6b 	bl	129cc <assert_print>
   114f6:	4916      	ldr	r1, [pc, #88]	; (11550 <z_thread_abort+0x15c>)
   114f8:	481b      	ldr	r0, [pc, #108]	; (11568 <z_thread_abort+0x174>)
   114fa:	f001 fa67 	bl	129cc <assert_print>
   114fe:	21e1      	movs	r1, #225	; 0xe1
   11500:	e792      	b.n	11428 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11502:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   11506:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   1150a:	4621      	mov	r1, r4
   1150c:	481b      	ldr	r0, [pc, #108]	; (1157c <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1150e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   11510:	f7ff fa28 	bl	10964 <z_priq_dumb_remove>
}
   11514:	e7c9      	b.n	114aa <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   11516:	4628      	mov	r0, r5
   11518:	f7ff fcdc 	bl	10ed4 <unpend_thread_no_timeout>
   1151c:	f105 0018 	add.w	r0, r5, #24
   11520:	f000 f9c0 	bl	118a4 <z_abort_timeout>
		ready_thread(thread);
   11524:	4628      	mov	r0, r5
   11526:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   1152a:	f7ff f817 	bl	1055c <ready_thread>
   1152e:	e7c9      	b.n	114c4 <z_thread_abort+0xd0>
   11530:	4630      	mov	r0, r6
   11532:	f7f8 fb55 	bl	9be0 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   11536:	490e      	ldr	r1, [pc, #56]	; (11570 <z_thread_abort+0x17c>)
   11538:	f240 63f9 	movw	r3, #1785	; 0x6f9
   1153c:	4a0b      	ldr	r2, [pc, #44]	; (1156c <z_thread_abort+0x178>)
   1153e:	4807      	ldr	r0, [pc, #28]	; (1155c <z_thread_abort+0x168>)
   11540:	f001 fa44 	bl	129cc <assert_print>
   11544:	480e      	ldr	r0, [pc, #56]	; (11580 <z_thread_abort+0x18c>)
   11546:	f001 fa41 	bl	129cc <assert_print>
   1154a:	f240 61f9 	movw	r1, #1785	; 0x6f9
   1154e:	e795      	b.n	1147c <z_thread_abort+0x88>
   11550:	2000d218 	.word	0x2000d218
   11554:	0001558e 	.word	0x0001558e
   11558:	000155e7 	.word	0x000155e7
   1155c:	00015341 	.word	0x00015341
   11560:	000155fc 	.word	0x000155fc
   11564:	000155bb 	.word	0x000155bb
   11568:	000155d2 	.word	0x000155d2
   1156c:	00016904 	.word	0x00016904
   11570:	00016f1f 	.word	0x00016f1f
   11574:	00016c22 	.word	0x00016c22
   11578:	2000d1d4 	.word	0x2000d1d4
   1157c:	2000d1f0 	.word	0x2000d1f0
   11580:	00016c41 	.word	0x00016c41

00011584 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   11584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11588:	4606      	mov	r6, r0
   1158a:	4688      	mov	r8, r1
   1158c:	4617      	mov	r7, r2
	__asm__ volatile(
   1158e:	f04f 0320 	mov.w	r3, #32
   11592:	f3ef 8911 	mrs	r9, BASEPRI
   11596:	f383 8812 	msr	BASEPRI_MAX, r3
   1159a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1159e:	4821      	ldr	r0, [pc, #132]	; (11624 <z_sched_wake+0xa0>)
   115a0:	f7fe f96e 	bl	f880 <z_spin_lock_valid>
   115a4:	4605      	mov	r5, r0
   115a6:	b968      	cbnz	r0, 115c4 <z_sched_wake+0x40>
   115a8:	2394      	movs	r3, #148	; 0x94
   115aa:	4a1f      	ldr	r2, [pc, #124]	; (11628 <z_sched_wake+0xa4>)
   115ac:	491f      	ldr	r1, [pc, #124]	; (1162c <z_sched_wake+0xa8>)
   115ae:	4820      	ldr	r0, [pc, #128]	; (11630 <z_sched_wake+0xac>)
   115b0:	f001 fa0c 	bl	129cc <assert_print>
   115b4:	491b      	ldr	r1, [pc, #108]	; (11624 <z_sched_wake+0xa0>)
   115b6:	481f      	ldr	r0, [pc, #124]	; (11634 <z_sched_wake+0xb0>)
   115b8:	f001 fa08 	bl	129cc <assert_print>
   115bc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   115be:	481a      	ldr	r0, [pc, #104]	; (11628 <z_sched_wake+0xa4>)
   115c0:	f001 f9fd 	bl	129be <assert_post_action>
	z_spin_lock_set_owner(l);
   115c4:	4817      	ldr	r0, [pc, #92]	; (11624 <z_sched_wake+0xa0>)
   115c6:	f7fe f977 	bl	f8b8 <z_spin_lock_set_owner>
	return list->head == list;
   115ca:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   115cc:	42a6      	cmp	r6, r4
   115ce:	d01d      	beq.n	1160c <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   115d0:	b1f4      	cbz	r4, 11610 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   115d2:	4620      	mov	r0, r4
   115d4:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   115d8:	6167      	str	r7, [r4, #20]
   115da:	f7ff fc7b 	bl	10ed4 <unpend_thread_no_timeout>
   115de:	f104 0018 	add.w	r0, r4, #24
   115e2:	f000 f95f 	bl	118a4 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   115e6:	4620      	mov	r0, r4
   115e8:	f7fe ffb8 	bl	1055c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   115ec:	480d      	ldr	r0, [pc, #52]	; (11624 <z_sched_wake+0xa0>)
   115ee:	f7fe f955 	bl	f89c <z_spin_unlock_valid>
   115f2:	b978      	cbnz	r0, 11614 <z_sched_wake+0x90>
   115f4:	23c2      	movs	r3, #194	; 0xc2
   115f6:	4a0c      	ldr	r2, [pc, #48]	; (11628 <z_sched_wake+0xa4>)
   115f8:	490f      	ldr	r1, [pc, #60]	; (11638 <z_sched_wake+0xb4>)
   115fa:	480d      	ldr	r0, [pc, #52]	; (11630 <z_sched_wake+0xac>)
   115fc:	f001 f9e6 	bl	129cc <assert_print>
   11600:	4908      	ldr	r1, [pc, #32]	; (11624 <z_sched_wake+0xa0>)
   11602:	480e      	ldr	r0, [pc, #56]	; (1163c <z_sched_wake+0xb8>)
   11604:	f001 f9e2 	bl	129cc <assert_print>
   11608:	21c2      	movs	r1, #194	; 0xc2
   1160a:	e7d8      	b.n	115be <z_sched_wake+0x3a>
	bool ret = false;
   1160c:	2500      	movs	r5, #0
   1160e:	e7ed      	b.n	115ec <z_sched_wake+0x68>
   11610:	4625      	mov	r5, r4
   11612:	e7eb      	b.n	115ec <z_sched_wake+0x68>
	__asm__ volatile(
   11614:	f389 8811 	msr	BASEPRI, r9
   11618:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   1161c:	4628      	mov	r0, r5
   1161e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11622:	bf00      	nop
   11624:	2000d218 	.word	0x2000d218
   11628:	0001558e 	.word	0x0001558e
   1162c:	000155e7 	.word	0x000155e7
   11630:	00015341 	.word	0x00015341
   11634:	000155fc 	.word	0x000155fc
   11638:	000155bb 	.word	0x000155bb
   1163c:	000155d2 	.word	0x000155d2

00011640 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   11640:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   11642:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   11646:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   11648:	e9cd 6700 	strd	r6, r7, [sp]
   1164c:	f7ff fad2 	bl	10bf4 <z_pend_curr>

	if (data != NULL) {
   11650:	b11c      	cbz	r4, 1165a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   11652:	4b03      	ldr	r3, [pc, #12]	; (11660 <z_sched_wait+0x20>)
   11654:	689b      	ldr	r3, [r3, #8]
   11656:	695b      	ldr	r3, [r3, #20]
   11658:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1165a:	b002      	add	sp, #8
   1165c:	bdd0      	pop	{r4, r6, r7, pc}
   1165e:	bf00      	nop
   11660:	2000d1d4 	.word	0x2000d1d4

00011664 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   11664:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   11666:	4806      	ldr	r0, [pc, #24]	; (11680 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   11668:	4a06      	ldr	r2, [pc, #24]	; (11684 <z_data_copy+0x20>)
   1166a:	4907      	ldr	r1, [pc, #28]	; (11688 <z_data_copy+0x24>)
   1166c:	1a12      	subs	r2, r2, r0
   1166e:	f002 fe0e 	bl	1428e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   11672:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   11676:	4a05      	ldr	r2, [pc, #20]	; (1168c <z_data_copy+0x28>)
   11678:	4905      	ldr	r1, [pc, #20]	; (11690 <z_data_copy+0x2c>)
   1167a:	4806      	ldr	r0, [pc, #24]	; (11694 <z_data_copy+0x30>)
   1167c:	f002 be07 	b.w	1428e <z_early_memcpy>
   11680:	2000c580 	.word	0x2000c580
   11684:	2000c7f8 	.word	0x2000c7f8
   11688:	000170dc 	.word	0x000170dc
   1168c:	00000000 	.word	0x00000000
   11690:	000170c4 	.word	0x000170c4
   11694:	2000c580 	.word	0x2000c580

00011698 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   11698:	4b03      	ldr	r3, [pc, #12]	; (116a8 <elapsed+0x10>)
   1169a:	681b      	ldr	r3, [r3, #0]
   1169c:	b90b      	cbnz	r3, 116a2 <elapsed+0xa>
   1169e:	f7fa b899 	b.w	b7d4 <sys_clock_elapsed>
}
   116a2:	2000      	movs	r0, #0
   116a4:	4770      	bx	lr
   116a6:	bf00      	nop
   116a8:	2000d21c 	.word	0x2000d21c

000116ac <next_timeout>:

static int32_t next_timeout(void)
{
   116ac:	b510      	push	{r4, lr}
	return list->head == list;
   116ae:	4b0e      	ldr	r3, [pc, #56]	; (116e8 <next_timeout+0x3c>)
   116b0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   116b2:	429c      	cmp	r4, r3
   116b4:	d104      	bne.n	116c0 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   116b6:	f7ff ffef 	bl	11698 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   116ba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   116be:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   116c0:	f7ff ffea 	bl	11698 <elapsed>
	if ((to == NULL) ||
   116c4:	2c00      	cmp	r4, #0
   116c6:	d0f8      	beq.n	116ba <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   116c8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   116cc:	1a1b      	subs	r3, r3, r0
   116ce:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   116d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   116d6:	f172 0100 	sbcs.w	r1, r2, #0
   116da:	daee      	bge.n	116ba <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   116dc:	2a00      	cmp	r2, #0
   116de:	bfac      	ite	ge
   116e0:	4618      	movge	r0, r3
   116e2:	2000      	movlt	r0, #0
	return ret;
   116e4:	e7eb      	b.n	116be <next_timeout+0x12>
   116e6:	bf00      	nop
   116e8:	2000c664 	.word	0x2000c664

000116ec <remove_timeout>:
{
   116ec:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   116ee:	b170      	cbz	r0, 1170e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   116f0:	4b0b      	ldr	r3, [pc, #44]	; (11720 <remove_timeout+0x34>)
   116f2:	685b      	ldr	r3, [r3, #4]
   116f4:	4298      	cmp	r0, r3
   116f6:	d00a      	beq.n	1170e <remove_timeout+0x22>
   116f8:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   116fa:	b143      	cbz	r3, 1170e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   116fc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   11700:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   11704:	1912      	adds	r2, r2, r4
   11706:	eb41 0105 	adc.w	r1, r1, r5
   1170a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   1170e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   11712:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   11714:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   11716:	2300      	movs	r3, #0
	node->prev = NULL;
   11718:	e9c0 3300 	strd	r3, r3, [r0]
}
   1171c:	bd30      	pop	{r4, r5, pc}
   1171e:	bf00      	nop
   11720:	2000c664 	.word	0x2000c664

00011724 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11724:	f1b3 3fff 	cmp.w	r3, #4294967295
   11728:	bf08      	it	eq
   1172a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1172e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11732:	4604      	mov	r4, r0
   11734:	4692      	mov	sl, r2
   11736:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11738:	f000 8099 	beq.w	1186e <z_add_timeout+0x14a>
	return node->next != NULL;
   1173c:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   1173e:	b166      	cbz	r6, 1175a <z_add_timeout+0x36>
   11740:	494c      	ldr	r1, [pc, #304]	; (11874 <z_add_timeout+0x150>)
   11742:	235e      	movs	r3, #94	; 0x5e
   11744:	4a4c      	ldr	r2, [pc, #304]	; (11878 <z_add_timeout+0x154>)
   11746:	484d      	ldr	r0, [pc, #308]	; (1187c <z_add_timeout+0x158>)
   11748:	f001 f940 	bl	129cc <assert_print>
   1174c:	484c      	ldr	r0, [pc, #304]	; (11880 <z_add_timeout+0x15c>)
   1174e:	f001 f93d 	bl	129cc <assert_print>
   11752:	215e      	movs	r1, #94	; 0x5e
   11754:	4848      	ldr	r0, [pc, #288]	; (11878 <z_add_timeout+0x154>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11756:	f001 f932 	bl	129be <assert_post_action>
	to->fn = fn;
   1175a:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1175c:	f04f 0320 	mov.w	r3, #32
   11760:	f3ef 8711 	mrs	r7, BASEPRI
   11764:	f383 8812 	msr	BASEPRI_MAX, r3
   11768:	f3bf 8f6f 	isb	sy
   1176c:	4845      	ldr	r0, [pc, #276]	; (11884 <z_add_timeout+0x160>)
   1176e:	f7fe f887 	bl	f880 <z_spin_lock_valid>
   11772:	b960      	cbnz	r0, 1178e <z_add_timeout+0x6a>
   11774:	2394      	movs	r3, #148	; 0x94
   11776:	4a44      	ldr	r2, [pc, #272]	; (11888 <z_add_timeout+0x164>)
   11778:	4944      	ldr	r1, [pc, #272]	; (1188c <z_add_timeout+0x168>)
   1177a:	4840      	ldr	r0, [pc, #256]	; (1187c <z_add_timeout+0x158>)
   1177c:	f001 f926 	bl	129cc <assert_print>
   11780:	4940      	ldr	r1, [pc, #256]	; (11884 <z_add_timeout+0x160>)
   11782:	4843      	ldr	r0, [pc, #268]	; (11890 <z_add_timeout+0x16c>)
   11784:	f001 f922 	bl	129cc <assert_print>
   11788:	2194      	movs	r1, #148	; 0x94
   1178a:	483f      	ldr	r0, [pc, #252]	; (11888 <z_add_timeout+0x164>)
   1178c:	e7e3      	b.n	11756 <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   1178e:	483d      	ldr	r0, [pc, #244]	; (11884 <z_add_timeout+0x160>)
   11790:	f7fe f892 	bl	f8b8 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   11794:	f1ba 3fff 	cmp.w	sl, #4294967295
   11798:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   1179c:	da23      	bge.n	117e6 <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1179e:	f06f 0301 	mvn.w	r3, #1
   117a2:	493c      	ldr	r1, [pc, #240]	; (11894 <z_add_timeout+0x170>)
   117a4:	e9d1 2000 	ldrd	r2, r0, [r1]
   117a8:	1a9b      	subs	r3, r3, r2
   117aa:	f04f 32ff 	mov.w	r2, #4294967295
   117ae:	eb62 0000 	sbc.w	r0, r2, r0
   117b2:	ebb3 030a 	subs.w	r3, r3, sl
   117b6:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   117ba:	2b01      	cmp	r3, #1
   117bc:	f170 0200 	sbcs.w	r2, r0, #0
   117c0:	da01      	bge.n	117c6 <z_add_timeout+0xa2>
   117c2:	2301      	movs	r3, #1
   117c4:	4630      	mov	r0, r6
   117c6:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   117ca:	4b33      	ldr	r3, [pc, #204]	; (11898 <z_add_timeout+0x174>)
   117cc:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   117ce:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   117d2:	429a      	cmp	r2, r3
   117d4:	bf18      	it	ne
   117d6:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   117d8:	b986      	cbnz	r6, 117fc <z_add_timeout+0xd8>
	node->prev = tail;
   117da:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   117de:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   117e2:	605c      	str	r4, [r3, #4]
}
   117e4:	e01c      	b.n	11820 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   117e6:	f7ff ff57 	bl	11698 <elapsed>
   117ea:	f11a 0801 	adds.w	r8, sl, #1
   117ee:	f145 0500 	adc.w	r5, r5, #0
   117f2:	eb18 0300 	adds.w	r3, r8, r0
   117f6:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   117fa:	e7e4      	b.n	117c6 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   117fc:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   11800:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   11804:	428a      	cmp	r2, r1
   11806:	eb70 0e05 	sbcs.w	lr, r0, r5
   1180a:	da23      	bge.n	11854 <z_add_timeout+0x130>
				t->dticks -= to->dticks;
   1180c:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   1180e:	6872      	ldr	r2, [r6, #4]
   11810:	eb65 0500 	sbc.w	r5, r5, r0
   11814:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   11818:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   1181c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1181e:	6074      	str	r4, [r6, #4]
	return list->head == list;
   11820:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11822:	429a      	cmp	r2, r3
   11824:	d006      	beq.n	11834 <z_add_timeout+0x110>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   11826:	4294      	cmp	r4, r2
   11828:	d104      	bne.n	11834 <z_add_timeout+0x110>
			sys_clock_set_timeout(next_timeout(), false);
   1182a:	f7ff ff3f 	bl	116ac <next_timeout>
   1182e:	2100      	movs	r1, #0
   11830:	f7f9 ffa4 	bl	b77c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11834:	4813      	ldr	r0, [pc, #76]	; (11884 <z_add_timeout+0x160>)
   11836:	f7fe f831 	bl	f89c <z_spin_unlock_valid>
   1183a:	b9a0      	cbnz	r0, 11866 <z_add_timeout+0x142>
   1183c:	23c2      	movs	r3, #194	; 0xc2
   1183e:	4a12      	ldr	r2, [pc, #72]	; (11888 <z_add_timeout+0x164>)
   11840:	4916      	ldr	r1, [pc, #88]	; (1189c <z_add_timeout+0x178>)
   11842:	480e      	ldr	r0, [pc, #56]	; (1187c <z_add_timeout+0x158>)
   11844:	f001 f8c2 	bl	129cc <assert_print>
   11848:	490e      	ldr	r1, [pc, #56]	; (11884 <z_add_timeout+0x160>)
   1184a:	4815      	ldr	r0, [pc, #84]	; (118a0 <z_add_timeout+0x17c>)
   1184c:	f001 f8be 	bl	129cc <assert_print>
   11850:	21c2      	movs	r1, #194	; 0xc2
   11852:	e79a      	b.n	1178a <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   11854:	1a52      	subs	r2, r2, r1
   11856:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   1185a:	4566      	cmp	r6, ip
   1185c:	e9c4 2004 	strd	r2, r0, [r4, #16]
   11860:	d0bb      	beq.n	117da <z_add_timeout+0xb6>
   11862:	6836      	ldr	r6, [r6, #0]
   11864:	e7b8      	b.n	117d8 <z_add_timeout+0xb4>
	__asm__ volatile(
   11866:	f387 8811 	msr	BASEPRI, r7
   1186a:	f3bf 8f6f 	isb	sy
		}
	}
}
   1186e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11872:	bf00      	nop
   11874:	00016c87 	.word	0x00016c87
   11878:	00016c63 	.word	0x00016c63
   1187c:	00015341 	.word	0x00015341
   11880:	000156e6 	.word	0x000156e6
   11884:	2000d220 	.word	0x2000d220
   11888:	0001558e 	.word	0x0001558e
   1188c:	000155e7 	.word	0x000155e7
   11890:	000155fc 	.word	0x000155fc
   11894:	2000c9e8 	.word	0x2000c9e8
   11898:	2000c664 	.word	0x2000c664
   1189c:	000155bb 	.word	0x000155bb
   118a0:	000155d2 	.word	0x000155d2

000118a4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   118a4:	b538      	push	{r3, r4, r5, lr}
   118a6:	4604      	mov	r4, r0
	__asm__ volatile(
   118a8:	f04f 0320 	mov.w	r3, #32
   118ac:	f3ef 8511 	mrs	r5, BASEPRI
   118b0:	f383 8812 	msr	BASEPRI_MAX, r3
   118b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   118b8:	4819      	ldr	r0, [pc, #100]	; (11920 <z_abort_timeout+0x7c>)
   118ba:	f7fd ffe1 	bl	f880 <z_spin_lock_valid>
   118be:	b968      	cbnz	r0, 118dc <z_abort_timeout+0x38>
   118c0:	2394      	movs	r3, #148	; 0x94
   118c2:	4a18      	ldr	r2, [pc, #96]	; (11924 <z_abort_timeout+0x80>)
   118c4:	4918      	ldr	r1, [pc, #96]	; (11928 <z_abort_timeout+0x84>)
   118c6:	4819      	ldr	r0, [pc, #100]	; (1192c <z_abort_timeout+0x88>)
   118c8:	f001 f880 	bl	129cc <assert_print>
   118cc:	4914      	ldr	r1, [pc, #80]	; (11920 <z_abort_timeout+0x7c>)
   118ce:	4818      	ldr	r0, [pc, #96]	; (11930 <z_abort_timeout+0x8c>)
   118d0:	f001 f87c 	bl	129cc <assert_print>
   118d4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   118d6:	4813      	ldr	r0, [pc, #76]	; (11924 <z_abort_timeout+0x80>)
   118d8:	f001 f871 	bl	129be <assert_post_action>
	z_spin_lock_set_owner(l);
   118dc:	4810      	ldr	r0, [pc, #64]	; (11920 <z_abort_timeout+0x7c>)
   118de:	f7fd ffeb 	bl	f8b8 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   118e2:	6823      	ldr	r3, [r4, #0]
   118e4:	b19b      	cbz	r3, 1190e <z_abort_timeout+0x6a>
			remove_timeout(to);
   118e6:	4620      	mov	r0, r4
   118e8:	f7ff ff00 	bl	116ec <remove_timeout>
			ret = 0;
   118ec:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   118ee:	480c      	ldr	r0, [pc, #48]	; (11920 <z_abort_timeout+0x7c>)
   118f0:	f7fd ffd4 	bl	f89c <z_spin_unlock_valid>
   118f4:	b970      	cbnz	r0, 11914 <z_abort_timeout+0x70>
   118f6:	23c2      	movs	r3, #194	; 0xc2
   118f8:	4a0a      	ldr	r2, [pc, #40]	; (11924 <z_abort_timeout+0x80>)
   118fa:	490e      	ldr	r1, [pc, #56]	; (11934 <z_abort_timeout+0x90>)
   118fc:	480b      	ldr	r0, [pc, #44]	; (1192c <z_abort_timeout+0x88>)
   118fe:	f001 f865 	bl	129cc <assert_print>
   11902:	4907      	ldr	r1, [pc, #28]	; (11920 <z_abort_timeout+0x7c>)
   11904:	480c      	ldr	r0, [pc, #48]	; (11938 <z_abort_timeout+0x94>)
   11906:	f001 f861 	bl	129cc <assert_print>
   1190a:	21c2      	movs	r1, #194	; 0xc2
   1190c:	e7e3      	b.n	118d6 <z_abort_timeout+0x32>
	int ret = -EINVAL;
   1190e:	f06f 0415 	mvn.w	r4, #21
   11912:	e7ec      	b.n	118ee <z_abort_timeout+0x4a>
	__asm__ volatile(
   11914:	f385 8811 	msr	BASEPRI, r5
   11918:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1191c:	4620      	mov	r0, r4
   1191e:	bd38      	pop	{r3, r4, r5, pc}
   11920:	2000d220 	.word	0x2000d220
   11924:	0001558e 	.word	0x0001558e
   11928:	000155e7 	.word	0x000155e7
   1192c:	00015341 	.word	0x00015341
   11930:	000155fc 	.word	0x000155fc
   11934:	000155bb 	.word	0x000155bb
   11938:	000155d2 	.word	0x000155d2

0001193c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   1193c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1193e:	f04f 0320 	mov.w	r3, #32
   11942:	f3ef 8511 	mrs	r5, BASEPRI
   11946:	f383 8812 	msr	BASEPRI_MAX, r3
   1194a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1194e:	4817      	ldr	r0, [pc, #92]	; (119ac <z_get_next_timeout_expiry+0x70>)
   11950:	f7fd ff96 	bl	f880 <z_spin_lock_valid>
   11954:	b968      	cbnz	r0, 11972 <z_get_next_timeout_expiry+0x36>
   11956:	2394      	movs	r3, #148	; 0x94
   11958:	4a15      	ldr	r2, [pc, #84]	; (119b0 <z_get_next_timeout_expiry+0x74>)
   1195a:	4916      	ldr	r1, [pc, #88]	; (119b4 <z_get_next_timeout_expiry+0x78>)
   1195c:	4816      	ldr	r0, [pc, #88]	; (119b8 <z_get_next_timeout_expiry+0x7c>)
   1195e:	f001 f835 	bl	129cc <assert_print>
   11962:	4912      	ldr	r1, [pc, #72]	; (119ac <z_get_next_timeout_expiry+0x70>)
   11964:	4815      	ldr	r0, [pc, #84]	; (119bc <z_get_next_timeout_expiry+0x80>)
   11966:	f001 f831 	bl	129cc <assert_print>
   1196a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1196c:	4810      	ldr	r0, [pc, #64]	; (119b0 <z_get_next_timeout_expiry+0x74>)
   1196e:	f001 f826 	bl	129be <assert_post_action>
	z_spin_lock_set_owner(l);
   11972:	480e      	ldr	r0, [pc, #56]	; (119ac <z_get_next_timeout_expiry+0x70>)
   11974:	f7fd ffa0 	bl	f8b8 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   11978:	f7ff fe98 	bl	116ac <next_timeout>
   1197c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1197e:	480b      	ldr	r0, [pc, #44]	; (119ac <z_get_next_timeout_expiry+0x70>)
   11980:	f7fd ff8c 	bl	f89c <z_spin_unlock_valid>
   11984:	b958      	cbnz	r0, 1199e <z_get_next_timeout_expiry+0x62>
   11986:	23c2      	movs	r3, #194	; 0xc2
   11988:	4a09      	ldr	r2, [pc, #36]	; (119b0 <z_get_next_timeout_expiry+0x74>)
   1198a:	490d      	ldr	r1, [pc, #52]	; (119c0 <z_get_next_timeout_expiry+0x84>)
   1198c:	480a      	ldr	r0, [pc, #40]	; (119b8 <z_get_next_timeout_expiry+0x7c>)
   1198e:	f001 f81d 	bl	129cc <assert_print>
   11992:	4906      	ldr	r1, [pc, #24]	; (119ac <z_get_next_timeout_expiry+0x70>)
   11994:	480b      	ldr	r0, [pc, #44]	; (119c4 <z_get_next_timeout_expiry+0x88>)
   11996:	f001 f819 	bl	129cc <assert_print>
   1199a:	21c2      	movs	r1, #194	; 0xc2
   1199c:	e7e6      	b.n	1196c <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   1199e:	f385 8811 	msr	BASEPRI, r5
   119a2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   119a6:	4620      	mov	r0, r4
   119a8:	bd38      	pop	{r3, r4, r5, pc}
   119aa:	bf00      	nop
   119ac:	2000d220 	.word	0x2000d220
   119b0:	0001558e 	.word	0x0001558e
   119b4:	000155e7 	.word	0x000155e7
   119b8:	00015341 	.word	0x00015341
   119bc:	000155fc 	.word	0x000155fc
   119c0:	000155bb 	.word	0x000155bb
   119c4:	000155d2 	.word	0x000155d2

000119c8 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   119c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119cc:	4604      	mov	r4, r0
	__asm__ volatile(
   119ce:	f04f 0320 	mov.w	r3, #32
   119d2:	f3ef 8811 	mrs	r8, BASEPRI
   119d6:	f383 8812 	msr	BASEPRI_MAX, r3
   119da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   119de:	4847      	ldr	r0, [pc, #284]	; (11afc <sys_clock_announce+0x134>)
   119e0:	f7fd ff4e 	bl	f880 <z_spin_lock_valid>
   119e4:	b968      	cbnz	r0, 11a02 <sys_clock_announce+0x3a>
   119e6:	2394      	movs	r3, #148	; 0x94
   119e8:	4a45      	ldr	r2, [pc, #276]	; (11b00 <sys_clock_announce+0x138>)
   119ea:	4946      	ldr	r1, [pc, #280]	; (11b04 <sys_clock_announce+0x13c>)
   119ec:	4846      	ldr	r0, [pc, #280]	; (11b08 <sys_clock_announce+0x140>)
   119ee:	f000 ffed 	bl	129cc <assert_print>
   119f2:	4942      	ldr	r1, [pc, #264]	; (11afc <sys_clock_announce+0x134>)
   119f4:	4845      	ldr	r0, [pc, #276]	; (11b0c <sys_clock_announce+0x144>)
   119f6:	f000 ffe9 	bl	129cc <assert_print>
   119fa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   119fc:	4840      	ldr	r0, [pc, #256]	; (11b00 <sys_clock_announce+0x138>)
   119fe:	f000 ffde 	bl	129be <assert_post_action>
	return list->head == list;
   11a02:	f8df 910c 	ldr.w	r9, [pc, #268]	; 11b10 <sys_clock_announce+0x148>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   11a06:	f8df b10c 	ldr.w	fp, [pc, #268]	; 11b14 <sys_clock_announce+0x14c>
	z_spin_lock_set_owner(l);
   11a0a:	483c      	ldr	r0, [pc, #240]	; (11afc <sys_clock_announce+0x134>)
   11a0c:	f7fd ff54 	bl	f8b8 <z_spin_lock_set_owner>
   11a10:	f8cb 4000 	str.w	r4, [fp]
   11a14:	f8d9 4000 	ldr.w	r4, [r9]
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
   11a18:	2600      	movs	r6, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11a1a:	454c      	cmp	r4, r9
   11a1c:	bf08      	it	eq
   11a1e:	2400      	moveq	r4, #0
   11a20:	2700      	movs	r7, #0
		curr_tick += dt;
   11a22:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 11b18 <sys_clock_announce+0x150>
	     (t != NULL) && (t->dticks <= announce_remaining);
   11a26:	f8db 3000 	ldr.w	r3, [fp]
		curr_tick += dt;
   11a2a:	e9da 2100 	ldrd	r2, r1, [sl]
	     (t != NULL) && (t->dticks <= announce_remaining);
   11a2e:	2c00      	cmp	r4, #0
   11a30:	d049      	beq.n	11ac6 <sys_clock_announce+0xfe>
   11a32:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
   11a36:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   11a3a:	42ab      	cmp	r3, r5
   11a3c:	eb7c 0e00 	sbcs.w	lr, ip, r0
   11a40:	da05      	bge.n	11a4e <sys_clock_announce+0x86>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   11a42:	1aed      	subs	r5, r5, r3
   11a44:	eb60 000c 	sbc.w	r0, r0, ip
   11a48:	e9c4 5004 	strd	r5, r0, [r4, #16]
   11a4c:	e03b      	b.n	11ac6 <sys_clock_announce+0xfe>
		curr_tick += dt;
   11a4e:	18aa      	adds	r2, r5, r2
   11a50:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
		remove_timeout(t);
   11a54:	4620      	mov	r0, r4
		t->dticks = 0;
   11a56:	e9c4 6704 	strd	r6, r7, [r4, #16]
		curr_tick += dt;
   11a5a:	e9ca 2100 	strd	r2, r1, [sl]
		remove_timeout(t);
   11a5e:	f7ff fe45 	bl	116ec <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11a62:	4826      	ldr	r0, [pc, #152]	; (11afc <sys_clock_announce+0x134>)
   11a64:	f7fd ff1a 	bl	f89c <z_spin_unlock_valid>
   11a68:	b958      	cbnz	r0, 11a82 <sys_clock_announce+0xba>
   11a6a:	23c2      	movs	r3, #194	; 0xc2
   11a6c:	4a24      	ldr	r2, [pc, #144]	; (11b00 <sys_clock_announce+0x138>)
   11a6e:	492b      	ldr	r1, [pc, #172]	; (11b1c <sys_clock_announce+0x154>)
   11a70:	4825      	ldr	r0, [pc, #148]	; (11b08 <sys_clock_announce+0x140>)
   11a72:	f000 ffab 	bl	129cc <assert_print>
   11a76:	4921      	ldr	r1, [pc, #132]	; (11afc <sys_clock_announce+0x134>)
   11a78:	4829      	ldr	r0, [pc, #164]	; (11b20 <sys_clock_announce+0x158>)
   11a7a:	f000 ffa7 	bl	129cc <assert_print>
   11a7e:	21c2      	movs	r1, #194	; 0xc2
   11a80:	e7bc      	b.n	119fc <sys_clock_announce+0x34>
	__asm__ volatile(
   11a82:	f388 8811 	msr	BASEPRI, r8
   11a86:	f3bf 8f6f 	isb	sy
		t->fn(t);
   11a8a:	4620      	mov	r0, r4
   11a8c:	68a3      	ldr	r3, [r4, #8]
   11a8e:	4798      	blx	r3
	__asm__ volatile(
   11a90:	f04f 0320 	mov.w	r3, #32
   11a94:	f3ef 8811 	mrs	r8, BASEPRI
   11a98:	f383 8812 	msr	BASEPRI_MAX, r3
   11a9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11aa0:	4816      	ldr	r0, [pc, #88]	; (11afc <sys_clock_announce+0x134>)
   11aa2:	f7fd feed 	bl	f880 <z_spin_lock_valid>
   11aa6:	2800      	cmp	r0, #0
   11aa8:	d09d      	beq.n	119e6 <sys_clock_announce+0x1e>
	z_spin_lock_set_owner(l);
   11aaa:	4814      	ldr	r0, [pc, #80]	; (11afc <sys_clock_announce+0x134>)
   11aac:	f7fd ff04 	bl	f8b8 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   11ab0:	f8db 3000 	ldr.w	r3, [fp]
	return list->head == list;
   11ab4:	f8d9 4000 	ldr.w	r4, [r9]
   11ab8:	1b5b      	subs	r3, r3, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11aba:	454c      	cmp	r4, r9
   11abc:	f8cb 3000 	str.w	r3, [fp]
   11ac0:	d1b1      	bne.n	11a26 <sys_clock_announce+0x5e>
		curr_tick += dt;
   11ac2:	e9da 2100 	ldrd	r2, r1, [sl]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   11ac6:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   11ac8:	189a      	adds	r2, r3, r2
   11aca:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   11ace:	e9ca 2100 	strd	r2, r1, [sl]
	announce_remaining = 0;
   11ad2:	f8cb 4000 	str.w	r4, [fp]

	sys_clock_set_timeout(next_timeout(), false);
   11ad6:	f7ff fde9 	bl	116ac <next_timeout>
   11ada:	4621      	mov	r1, r4
   11adc:	f7f9 fe4e 	bl	b77c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11ae0:	4806      	ldr	r0, [pc, #24]	; (11afc <sys_clock_announce+0x134>)
   11ae2:	f7fd fedb 	bl	f89c <z_spin_unlock_valid>
   11ae6:	2800      	cmp	r0, #0
   11ae8:	d0bf      	beq.n	11a6a <sys_clock_announce+0xa2>
	__asm__ volatile(
   11aea:	f388 8811 	msr	BASEPRI, r8
   11aee:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   11af2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   11af6:	f7fe bfa7 	b.w	10a48 <z_time_slice>
   11afa:	bf00      	nop
   11afc:	2000d220 	.word	0x2000d220
   11b00:	0001558e 	.word	0x0001558e
   11b04:	000155e7 	.word	0x000155e7
   11b08:	00015341 	.word	0x00015341
   11b0c:	000155fc 	.word	0x000155fc
   11b10:	2000c664 	.word	0x2000c664
   11b14:	2000d21c 	.word	0x2000d21c
   11b18:	2000c9e8 	.word	0x2000c9e8
   11b1c:	000155bb 	.word	0x000155bb
   11b20:	000155d2 	.word	0x000155d2

00011b24 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   11b24:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   11b26:	f04f 0320 	mov.w	r3, #32
   11b2a:	f3ef 8611 	mrs	r6, BASEPRI
   11b2e:	f383 8812 	msr	BASEPRI_MAX, r3
   11b32:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11b36:	481a      	ldr	r0, [pc, #104]	; (11ba0 <sys_clock_tick_get+0x7c>)
   11b38:	f7fd fea2 	bl	f880 <z_spin_lock_valid>
   11b3c:	b968      	cbnz	r0, 11b5a <sys_clock_tick_get+0x36>
   11b3e:	2394      	movs	r3, #148	; 0x94
   11b40:	4a18      	ldr	r2, [pc, #96]	; (11ba4 <sys_clock_tick_get+0x80>)
   11b42:	4919      	ldr	r1, [pc, #100]	; (11ba8 <sys_clock_tick_get+0x84>)
   11b44:	4819      	ldr	r0, [pc, #100]	; (11bac <sys_clock_tick_get+0x88>)
   11b46:	f000 ff41 	bl	129cc <assert_print>
   11b4a:	4915      	ldr	r1, [pc, #84]	; (11ba0 <sys_clock_tick_get+0x7c>)
   11b4c:	4818      	ldr	r0, [pc, #96]	; (11bb0 <sys_clock_tick_get+0x8c>)
   11b4e:	f000 ff3d 	bl	129cc <assert_print>
   11b52:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11b54:	4813      	ldr	r0, [pc, #76]	; (11ba4 <sys_clock_tick_get+0x80>)
   11b56:	f000 ff32 	bl	129be <assert_post_action>
	z_spin_lock_set_owner(l);
   11b5a:	4811      	ldr	r0, [pc, #68]	; (11ba0 <sys_clock_tick_get+0x7c>)
   11b5c:	f7fd feac 	bl	f8b8 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   11b60:	f7ff fd9a 	bl	11698 <elapsed>
   11b64:	4a13      	ldr	r2, [pc, #76]	; (11bb4 <sys_clock_tick_get+0x90>)
   11b66:	e9d2 4500 	ldrd	r4, r5, [r2]
   11b6a:	1904      	adds	r4, r0, r4
   11b6c:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11b70:	480b      	ldr	r0, [pc, #44]	; (11ba0 <sys_clock_tick_get+0x7c>)
   11b72:	f7fd fe93 	bl	f89c <z_spin_unlock_valid>
   11b76:	b958      	cbnz	r0, 11b90 <sys_clock_tick_get+0x6c>
   11b78:	23c2      	movs	r3, #194	; 0xc2
   11b7a:	4a0a      	ldr	r2, [pc, #40]	; (11ba4 <sys_clock_tick_get+0x80>)
   11b7c:	490e      	ldr	r1, [pc, #56]	; (11bb8 <sys_clock_tick_get+0x94>)
   11b7e:	480b      	ldr	r0, [pc, #44]	; (11bac <sys_clock_tick_get+0x88>)
   11b80:	f000 ff24 	bl	129cc <assert_print>
   11b84:	4906      	ldr	r1, [pc, #24]	; (11ba0 <sys_clock_tick_get+0x7c>)
   11b86:	480d      	ldr	r0, [pc, #52]	; (11bbc <sys_clock_tick_get+0x98>)
   11b88:	f000 ff20 	bl	129cc <assert_print>
   11b8c:	21c2      	movs	r1, #194	; 0xc2
   11b8e:	e7e1      	b.n	11b54 <sys_clock_tick_get+0x30>
	__asm__ volatile(
   11b90:	f386 8811 	msr	BASEPRI, r6
   11b94:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   11b98:	4620      	mov	r0, r4
   11b9a:	4629      	mov	r1, r5
   11b9c:	bd70      	pop	{r4, r5, r6, pc}
   11b9e:	bf00      	nop
   11ba0:	2000d220 	.word	0x2000d220
   11ba4:	0001558e 	.word	0x0001558e
   11ba8:	000155e7 	.word	0x000155e7
   11bac:	00015341 	.word	0x00015341
   11bb0:	000155fc 	.word	0x000155fc
   11bb4:	2000c9e8 	.word	0x2000c9e8
   11bb8:	000155bb 	.word	0x000155bb
   11bbc:	000155d2 	.word	0x000155d2

00011bc0 <k_poll_event_init>:
static int signal_poller(struct k_poll_event *event, uint32_t state);
static int signal_triggered_work(struct k_poll_event *event, uint32_t status);

void k_poll_event_init(struct k_poll_event *event, uint32_t type,
		       int mode, void *obj)
{
   11bc0:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   11bc2:	b162      	cbz	r2, 11bde <k_poll_event_init+0x1e>
   11bc4:	4917      	ldr	r1, [pc, #92]	; (11c24 <k_poll_event_init+0x64>)
   11bc6:	232d      	movs	r3, #45	; 0x2d
   11bc8:	4a17      	ldr	r2, [pc, #92]	; (11c28 <k_poll_event_init+0x68>)
   11bca:	4818      	ldr	r0, [pc, #96]	; (11c2c <k_poll_event_init+0x6c>)
   11bcc:	f000 fefe 	bl	129cc <assert_print>
   11bd0:	4817      	ldr	r0, [pc, #92]	; (11c30 <k_poll_event_init+0x70>)
   11bd2:	f000 fefb 	bl	129cc <assert_print>
   11bd6:	212d      	movs	r1, #45	; 0x2d
		 "only NOTIFY_ONLY mode is supported\n");
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   11bd8:	4813      	ldr	r0, [pc, #76]	; (11c28 <k_poll_event_init+0x68>)
   11bda:	f000 fef0 	bl	129be <assert_post_action>
   11bde:	293f      	cmp	r1, #63	; 0x3f
   11be0:	d90a      	bls.n	11bf8 <k_poll_event_init+0x38>
   11be2:	4914      	ldr	r1, [pc, #80]	; (11c34 <k_poll_event_init+0x74>)
   11be4:	232f      	movs	r3, #47	; 0x2f
   11be6:	4a10      	ldr	r2, [pc, #64]	; (11c28 <k_poll_event_init+0x68>)
   11be8:	4810      	ldr	r0, [pc, #64]	; (11c2c <k_poll_event_init+0x6c>)
   11bea:	f000 feef 	bl	129cc <assert_print>
   11bee:	4812      	ldr	r0, [pc, #72]	; (11c38 <k_poll_event_init+0x78>)
   11bf0:	f000 feec 	bl	129cc <assert_print>
   11bf4:	212f      	movs	r1, #47	; 0x2f
   11bf6:	e7ef      	b.n	11bd8 <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   11bf8:	b953      	cbnz	r3, 11c10 <k_poll_event_init+0x50>
   11bfa:	4910      	ldr	r1, [pc, #64]	; (11c3c <k_poll_event_init+0x7c>)
   11bfc:	2330      	movs	r3, #48	; 0x30
   11bfe:	4a0a      	ldr	r2, [pc, #40]	; (11c28 <k_poll_event_init+0x68>)
   11c00:	480a      	ldr	r0, [pc, #40]	; (11c2c <k_poll_event_init+0x6c>)
   11c02:	f000 fee3 	bl	129cc <assert_print>
   11c06:	480e      	ldr	r0, [pc, #56]	; (11c40 <k_poll_event_init+0x80>)
   11c08:	f000 fee0 	bl	129cc <assert_print>
   11c0c:	2130      	movs	r1, #48	; 0x30
   11c0e:	e7e3      	b.n	11bd8 <k_poll_event_init+0x18>

	event->poller = NULL;
   11c10:	6082      	str	r2, [r0, #8]
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   11c12:	0209      	lsls	r1, r1, #8
   11c14:	7b02      	ldrb	r2, [r0, #12]
   11c16:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   11c1a:	4311      	orrs	r1, r2
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
	event->unused = 0U;
	event->obj = obj;
   11c1c:	e9c0 1303 	strd	r1, r3, [r0, #12]

	SYS_PORT_TRACING_FUNC(k_poll_api, event_init, event);
}
   11c20:	bd08      	pop	{r3, pc}
   11c22:	bf00      	nop
   11c24:	00016dbf 	.word	0x00016dbf
   11c28:	00016ca7 	.word	0x00016ca7
   11c2c:	00015341 	.word	0x00015341
   11c30:	00016ddf 	.word	0x00016ddf
   11c34:	00016e05 	.word	0x00016e05
   11c38:	00016e29 	.word	0x00016e29
   11c3c:	00016e39 	.word	0x00016e39
   11c40:	00016e4c 	.word	0x00016e4c

00011c44 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   11c44:	b570      	push	{r4, r5, r6, lr}
   11c46:	4604      	mov	r4, r0
   11c48:	460d      	mov	r5, r1
	__asm__ volatile(
   11c4a:	f04f 0320 	mov.w	r3, #32
   11c4e:	f3ef 8611 	mrs	r6, BASEPRI
   11c52:	f383 8812 	msr	BASEPRI_MAX, r3
   11c56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11c5a:	4820      	ldr	r0, [pc, #128]	; (11cdc <z_impl_k_poll_signal_raise+0x98>)
   11c5c:	f7fd fe10 	bl	f880 <z_spin_lock_valid>
   11c60:	b968      	cbnz	r0, 11c7e <z_impl_k_poll_signal_raise+0x3a>
   11c62:	2394      	movs	r3, #148	; 0x94
   11c64:	4a1e      	ldr	r2, [pc, #120]	; (11ce0 <z_impl_k_poll_signal_raise+0x9c>)
   11c66:	491f      	ldr	r1, [pc, #124]	; (11ce4 <z_impl_k_poll_signal_raise+0xa0>)
   11c68:	481f      	ldr	r0, [pc, #124]	; (11ce8 <z_impl_k_poll_signal_raise+0xa4>)
   11c6a:	f000 feaf 	bl	129cc <assert_print>
   11c6e:	491b      	ldr	r1, [pc, #108]	; (11cdc <z_impl_k_poll_signal_raise+0x98>)
   11c70:	481e      	ldr	r0, [pc, #120]	; (11cec <z_impl_k_poll_signal_raise+0xa8>)
   11c72:	f000 feab 	bl	129cc <assert_print>
   11c76:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11c78:	4819      	ldr	r0, [pc, #100]	; (11ce0 <z_impl_k_poll_signal_raise+0x9c>)
   11c7a:	f000 fea0 	bl	129be <assert_post_action>
	z_spin_lock_set_owner(l);
   11c7e:	4817      	ldr	r0, [pc, #92]	; (11cdc <z_impl_k_poll_signal_raise+0x98>)
   11c80:	f7fd fe1a 	bl	f8b8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   11c84:	2101      	movs	r1, #1
	return list->head == list;
   11c86:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   11c88:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   11c8a:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   11c8c:	60a1      	str	r1, [r4, #8]
   11c8e:	d10f      	bne.n	11cb0 <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11c90:	4812      	ldr	r0, [pc, #72]	; (11cdc <z_impl_k_poll_signal_raise+0x98>)
   11c92:	f7fd fe03 	bl	f89c <z_spin_unlock_valid>
   11c96:	b9d8      	cbnz	r0, 11cd0 <z_impl_k_poll_signal_raise+0x8c>
   11c98:	23c2      	movs	r3, #194	; 0xc2
   11c9a:	4a11      	ldr	r2, [pc, #68]	; (11ce0 <z_impl_k_poll_signal_raise+0x9c>)
   11c9c:	4914      	ldr	r1, [pc, #80]	; (11cf0 <z_impl_k_poll_signal_raise+0xac>)
   11c9e:	4812      	ldr	r0, [pc, #72]	; (11ce8 <z_impl_k_poll_signal_raise+0xa4>)
   11ca0:	f000 fe94 	bl	129cc <assert_print>
   11ca4:	490d      	ldr	r1, [pc, #52]	; (11cdc <z_impl_k_poll_signal_raise+0x98>)
   11ca6:	4813      	ldr	r0, [pc, #76]	; (11cf4 <z_impl_k_poll_signal_raise+0xb0>)
   11ca8:	f000 fe90 	bl	129cc <assert_print>
   11cac:	21c2      	movs	r1, #194	; 0xc2
   11cae:	e7e3      	b.n	11c78 <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   11cb0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   11cb4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   11cb6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   11cb8:	2300      	movs	r3, #0
	node->prev = NULL;
   11cba:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   11cbe:	f002 fbbb 	bl	14438 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   11cc2:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   11cc4:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   11cc6:	4805      	ldr	r0, [pc, #20]	; (11cdc <z_impl_k_poll_signal_raise+0x98>)
   11cc8:	f7fe fcd8 	bl	1067c <z_reschedule>
	return rc;
}
   11ccc:	4620      	mov	r0, r4
   11cce:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   11cd0:	f386 8811 	msr	BASEPRI, r6
   11cd4:	f3bf 8f6f 	isb	sy
		return 0;
   11cd8:	2400      	movs	r4, #0
   11cda:	e7f7      	b.n	11ccc <z_impl_k_poll_signal_raise+0x88>
   11cdc:	2000d224 	.word	0x2000d224
   11ce0:	0001558e 	.word	0x0001558e
   11ce4:	000155e7 	.word	0x000155e7
   11ce8:	00015341 	.word	0x00015341
   11cec:	000155fc 	.word	0x000155fc
   11cf0:	000155bb 	.word	0x000155bb
   11cf4:	000155d2 	.word	0x000155d2

00011cf8 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   11cf8:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   11cfa:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   11cfe:	4606      	mov	r6, r0
   11d00:	460d      	mov	r5, r1
   11d02:	d220      	bcs.n	11d46 <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   11d04:	f04f 0800 	mov.w	r8, #0
   11d08:	f04f 0900 	mov.w	r9, #0
   11d0c:	f041 0104 	orr.w	r1, r1, #4
   11d10:	e9cd 8900 	strd	r8, r9, [sp]
   11d14:	f7fd fba4 	bl	f460 <k_heap_aligned_alloc>
	if (mem == NULL) {
   11d18:	4604      	mov	r4, r0
   11d1a:	b1a0      	cbz	r0, 11d46 <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   11d1c:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   11d20:	b195      	cbz	r5, 11d48 <z_heap_aligned_alloc+0x50>
   11d22:	1e6b      	subs	r3, r5, #1
   11d24:	421c      	tst	r4, r3
   11d26:	d00f      	beq.n	11d48 <z_heap_aligned_alloc+0x50>
   11d28:	2325      	movs	r3, #37	; 0x25
   11d2a:	4a09      	ldr	r2, [pc, #36]	; (11d50 <z_heap_aligned_alloc+0x58>)
   11d2c:	4909      	ldr	r1, [pc, #36]	; (11d54 <z_heap_aligned_alloc+0x5c>)
   11d2e:	480a      	ldr	r0, [pc, #40]	; (11d58 <z_heap_aligned_alloc+0x60>)
   11d30:	f000 fe4c 	bl	129cc <assert_print>
   11d34:	4621      	mov	r1, r4
   11d36:	4809      	ldr	r0, [pc, #36]	; (11d5c <z_heap_aligned_alloc+0x64>)
   11d38:	462a      	mov	r2, r5
   11d3a:	f000 fe47 	bl	129cc <assert_print>
   11d3e:	2125      	movs	r1, #37	; 0x25
   11d40:	4803      	ldr	r0, [pc, #12]	; (11d50 <z_heap_aligned_alloc+0x58>)
   11d42:	f000 fe3c 	bl	129be <assert_post_action>
		return NULL;
   11d46:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   11d48:	4620      	mov	r0, r4
   11d4a:	b002      	add	sp, #8
   11d4c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   11d50:	00016e66 	.word	0x00016e66
   11d54:	00016e8a 	.word	0x00016e8a
   11d58:	00015341 	.word	0x00015341
   11d5c:	00016ebc 	.word	0x00016ebc

00011d60 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   11d60:	2803      	cmp	r0, #3
{
   11d62:	460a      	mov	r2, r1
   11d64:	b508      	push	{r3, lr}
	__ASSERT(align / sizeof(void *) >= 1
   11d66:	d901      	bls.n	11d6c <k_aligned_alloc+0xc>
   11d68:	0783      	lsls	r3, r0, #30
   11d6a:	d00c      	beq.n	11d86 <k_aligned_alloc+0x26>
   11d6c:	4910      	ldr	r1, [pc, #64]	; (11db0 <k_aligned_alloc+0x50>)
   11d6e:	2342      	movs	r3, #66	; 0x42
   11d70:	4a10      	ldr	r2, [pc, #64]	; (11db4 <k_aligned_alloc+0x54>)
   11d72:	4811      	ldr	r0, [pc, #68]	; (11db8 <k_aligned_alloc+0x58>)
   11d74:	f000 fe2a 	bl	129cc <assert_print>
   11d78:	4810      	ldr	r0, [pc, #64]	; (11dbc <k_aligned_alloc+0x5c>)
   11d7a:	f000 fe27 	bl	129cc <assert_print>
   11d7e:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   11d80:	480c      	ldr	r0, [pc, #48]	; (11db4 <k_aligned_alloc+0x54>)
   11d82:	f000 fe1c 	bl	129be <assert_post_action>
   11d86:	1e43      	subs	r3, r0, #1
   11d88:	4203      	tst	r3, r0
   11d8a:	d00a      	beq.n	11da2 <k_aligned_alloc+0x42>
   11d8c:	490c      	ldr	r1, [pc, #48]	; (11dc0 <k_aligned_alloc+0x60>)
   11d8e:	2346      	movs	r3, #70	; 0x46
   11d90:	4a08      	ldr	r2, [pc, #32]	; (11db4 <k_aligned_alloc+0x54>)
   11d92:	4809      	ldr	r0, [pc, #36]	; (11db8 <k_aligned_alloc+0x58>)
   11d94:	f000 fe1a 	bl	129cc <assert_print>
   11d98:	480a      	ldr	r0, [pc, #40]	; (11dc4 <k_aligned_alloc+0x64>)
   11d9a:	f000 fe17 	bl	129cc <assert_print>
   11d9e:	2146      	movs	r1, #70	; 0x46
   11da0:	e7ee      	b.n	11d80 <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   11da2:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   11da4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   11da8:	4807      	ldr	r0, [pc, #28]	; (11dc8 <k_aligned_alloc+0x68>)
   11daa:	f7ff bfa5 	b.w	11cf8 <z_heap_aligned_alloc>
   11dae:	bf00      	nop
   11db0:	00016ee4 	.word	0x00016ee4
   11db4:	00016e66 	.word	0x00016e66
   11db8:	00015341 	.word	0x00015341
   11dbc:	00016f21 	.word	0x00016f21
   11dc0:	000153f8 	.word	0x000153f8
   11dc4:	00015413 	.word	0x00015413
   11dc8:	2000c6e8 	.word	0x2000c6e8

00011dcc <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   11dcc:	4b01      	ldr	r3, [pc, #4]	; (11dd4 <k_thread_system_pool_assign+0x8>)
   11dce:	6743      	str	r3, [r0, #116]	; 0x74
}
   11dd0:	4770      	bx	lr
   11dd2:	bf00      	nop
   11dd4:	2000c6e8 	.word	0x2000c6e8

00011dd8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   11dd8:	b538      	push	{r3, r4, r5, lr}
   11dda:	4604      	mov	r4, r0
   11ddc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   11dde:	f002 fa6a 	bl	142b6 <k_is_in_isr>
   11de2:	b920      	cbnz	r0, 11dee <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   11de4:	4b06      	ldr	r3, [pc, #24]	; (11e00 <z_thread_aligned_alloc+0x28>)
   11de6:	689b      	ldr	r3, [r3, #8]
   11de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   11dea:	b90b      	cbnz	r3, 11df0 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   11dec:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   11dee:	4b05      	ldr	r3, [pc, #20]	; (11e04 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   11df0:	462a      	mov	r2, r5
   11df2:	4621      	mov	r1, r4
   11df4:	4618      	mov	r0, r3
}
   11df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   11dfa:	f7ff bf7d 	b.w	11cf8 <z_heap_aligned_alloc>
   11dfe:	bf00      	nop
   11e00:	2000d1d4 	.word	0x2000d1d4
   11e04:	2000c6e8 	.word	0x2000c6e8

00011e08 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   11e08:	4801      	ldr	r0, [pc, #4]	; (11e10 <boot_banner+0x8>)
   11e0a:	f000 bc2a 	b.w	12662 <printk>
   11e0e:	bf00      	nop
   11e10:	00016f4e 	.word	0x00016f4e

00011e14 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   11e14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   11e16:	2400      	movs	r4, #0
   11e18:	4b08      	ldr	r3, [pc, #32]	; (11e3c <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   11e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
   11e1e:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   11e20:	ab02      	add	r3, sp, #8
   11e22:	9300      	str	r3, [sp, #0]
   11e24:	4906      	ldr	r1, [pc, #24]	; (11e40 <k_sys_work_q_init+0x2c>)
   11e26:	f04f 33ff 	mov.w	r3, #4294967295
   11e2a:	4806      	ldr	r0, [pc, #24]	; (11e44 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   11e2c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   11e30:	f7fe fa82 	bl	10338 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   11e34:	4620      	mov	r0, r4
   11e36:	b004      	add	sp, #16
   11e38:	bd10      	pop	{r4, pc}
   11e3a:	bf00      	nop
   11e3c:	00016f7c 	.word	0x00016f7c
   11e40:	20014138 	.word	0x20014138
   11e44:	2000c9f0 	.word	0x2000c9f0

00011e48 <_free_r>:
   11e48:	b538      	push	{r3, r4, r5, lr}
   11e4a:	4605      	mov	r5, r0
   11e4c:	2900      	cmp	r1, #0
   11e4e:	d041      	beq.n	11ed4 <_free_r+0x8c>
   11e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
   11e54:	1f0c      	subs	r4, r1, #4
   11e56:	2b00      	cmp	r3, #0
   11e58:	bfb8      	it	lt
   11e5a:	18e4      	addlt	r4, r4, r3
   11e5c:	f000 f9ba 	bl	121d4 <__malloc_lock>
   11e60:	4a1d      	ldr	r2, [pc, #116]	; (11ed8 <_free_r+0x90>)
   11e62:	6813      	ldr	r3, [r2, #0]
   11e64:	b933      	cbnz	r3, 11e74 <_free_r+0x2c>
   11e66:	6063      	str	r3, [r4, #4]
   11e68:	6014      	str	r4, [r2, #0]
   11e6a:	4628      	mov	r0, r5
   11e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11e70:	f000 b9b6 	b.w	121e0 <__malloc_unlock>
   11e74:	42a3      	cmp	r3, r4
   11e76:	d908      	bls.n	11e8a <_free_r+0x42>
   11e78:	6820      	ldr	r0, [r4, #0]
   11e7a:	1821      	adds	r1, r4, r0
   11e7c:	428b      	cmp	r3, r1
   11e7e:	bf01      	itttt	eq
   11e80:	6819      	ldreq	r1, [r3, #0]
   11e82:	685b      	ldreq	r3, [r3, #4]
   11e84:	1809      	addeq	r1, r1, r0
   11e86:	6021      	streq	r1, [r4, #0]
   11e88:	e7ed      	b.n	11e66 <_free_r+0x1e>
   11e8a:	461a      	mov	r2, r3
   11e8c:	685b      	ldr	r3, [r3, #4]
   11e8e:	b10b      	cbz	r3, 11e94 <_free_r+0x4c>
   11e90:	42a3      	cmp	r3, r4
   11e92:	d9fa      	bls.n	11e8a <_free_r+0x42>
   11e94:	6811      	ldr	r1, [r2, #0]
   11e96:	1850      	adds	r0, r2, r1
   11e98:	42a0      	cmp	r0, r4
   11e9a:	d10b      	bne.n	11eb4 <_free_r+0x6c>
   11e9c:	6820      	ldr	r0, [r4, #0]
   11e9e:	4401      	add	r1, r0
   11ea0:	1850      	adds	r0, r2, r1
   11ea2:	6011      	str	r1, [r2, #0]
   11ea4:	4283      	cmp	r3, r0
   11ea6:	d1e0      	bne.n	11e6a <_free_r+0x22>
   11ea8:	6818      	ldr	r0, [r3, #0]
   11eaa:	685b      	ldr	r3, [r3, #4]
   11eac:	4408      	add	r0, r1
   11eae:	6053      	str	r3, [r2, #4]
   11eb0:	6010      	str	r0, [r2, #0]
   11eb2:	e7da      	b.n	11e6a <_free_r+0x22>
   11eb4:	d902      	bls.n	11ebc <_free_r+0x74>
   11eb6:	230c      	movs	r3, #12
   11eb8:	602b      	str	r3, [r5, #0]
   11eba:	e7d6      	b.n	11e6a <_free_r+0x22>
   11ebc:	6820      	ldr	r0, [r4, #0]
   11ebe:	1821      	adds	r1, r4, r0
   11ec0:	428b      	cmp	r3, r1
   11ec2:	bf02      	ittt	eq
   11ec4:	6819      	ldreq	r1, [r3, #0]
   11ec6:	685b      	ldreq	r3, [r3, #4]
   11ec8:	1809      	addeq	r1, r1, r0
   11eca:	6063      	str	r3, [r4, #4]
   11ecc:	bf08      	it	eq
   11ece:	6021      	streq	r1, [r4, #0]
   11ed0:	6054      	str	r4, [r2, #4]
   11ed2:	e7ca      	b.n	11e6a <_free_r+0x22>
   11ed4:	bd38      	pop	{r3, r4, r5, pc}
   11ed6:	bf00      	nop
   11ed8:	2000d22c 	.word	0x2000d22c

00011edc <_malloc_r>:
   11edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ede:	1ccd      	adds	r5, r1, #3
   11ee0:	4606      	mov	r6, r0
   11ee2:	f025 0503 	bic.w	r5, r5, #3
   11ee6:	3508      	adds	r5, #8
   11ee8:	2d0c      	cmp	r5, #12
   11eea:	bf38      	it	cc
   11eec:	250c      	movcc	r5, #12
   11eee:	2d00      	cmp	r5, #0
   11ef0:	db01      	blt.n	11ef6 <_malloc_r+0x1a>
   11ef2:	42a9      	cmp	r1, r5
   11ef4:	d903      	bls.n	11efe <_malloc_r+0x22>
   11ef6:	230c      	movs	r3, #12
   11ef8:	6033      	str	r3, [r6, #0]
   11efa:	2000      	movs	r0, #0
   11efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11efe:	f000 f969 	bl	121d4 <__malloc_lock>
   11f02:	4921      	ldr	r1, [pc, #132]	; (11f88 <_malloc_r+0xac>)
   11f04:	680a      	ldr	r2, [r1, #0]
   11f06:	4614      	mov	r4, r2
   11f08:	b99c      	cbnz	r4, 11f32 <_malloc_r+0x56>
   11f0a:	4f20      	ldr	r7, [pc, #128]	; (11f8c <_malloc_r+0xb0>)
   11f0c:	683b      	ldr	r3, [r7, #0]
   11f0e:	b923      	cbnz	r3, 11f1a <_malloc_r+0x3e>
   11f10:	4621      	mov	r1, r4
   11f12:	4630      	mov	r0, r6
   11f14:	f000 f83c 	bl	11f90 <_sbrk_r>
   11f18:	6038      	str	r0, [r7, #0]
   11f1a:	4629      	mov	r1, r5
   11f1c:	4630      	mov	r0, r6
   11f1e:	f000 f837 	bl	11f90 <_sbrk_r>
   11f22:	1c43      	adds	r3, r0, #1
   11f24:	d123      	bne.n	11f6e <_malloc_r+0x92>
   11f26:	230c      	movs	r3, #12
   11f28:	4630      	mov	r0, r6
   11f2a:	6033      	str	r3, [r6, #0]
   11f2c:	f000 f958 	bl	121e0 <__malloc_unlock>
   11f30:	e7e3      	b.n	11efa <_malloc_r+0x1e>
   11f32:	6823      	ldr	r3, [r4, #0]
   11f34:	1b5b      	subs	r3, r3, r5
   11f36:	d417      	bmi.n	11f68 <_malloc_r+0x8c>
   11f38:	2b0b      	cmp	r3, #11
   11f3a:	d903      	bls.n	11f44 <_malloc_r+0x68>
   11f3c:	6023      	str	r3, [r4, #0]
   11f3e:	441c      	add	r4, r3
   11f40:	6025      	str	r5, [r4, #0]
   11f42:	e004      	b.n	11f4e <_malloc_r+0x72>
   11f44:	6863      	ldr	r3, [r4, #4]
   11f46:	42a2      	cmp	r2, r4
   11f48:	bf0c      	ite	eq
   11f4a:	600b      	streq	r3, [r1, #0]
   11f4c:	6053      	strne	r3, [r2, #4]
   11f4e:	4630      	mov	r0, r6
   11f50:	f000 f946 	bl	121e0 <__malloc_unlock>
   11f54:	f104 000b 	add.w	r0, r4, #11
   11f58:	1d23      	adds	r3, r4, #4
   11f5a:	f020 0007 	bic.w	r0, r0, #7
   11f5e:	1ac2      	subs	r2, r0, r3
   11f60:	bf1c      	itt	ne
   11f62:	1a1b      	subne	r3, r3, r0
   11f64:	50a3      	strne	r3, [r4, r2]
   11f66:	e7c9      	b.n	11efc <_malloc_r+0x20>
   11f68:	4622      	mov	r2, r4
   11f6a:	6864      	ldr	r4, [r4, #4]
   11f6c:	e7cc      	b.n	11f08 <_malloc_r+0x2c>
   11f6e:	1cc4      	adds	r4, r0, #3
   11f70:	f024 0403 	bic.w	r4, r4, #3
   11f74:	42a0      	cmp	r0, r4
   11f76:	d0e3      	beq.n	11f40 <_malloc_r+0x64>
   11f78:	1a21      	subs	r1, r4, r0
   11f7a:	4630      	mov	r0, r6
   11f7c:	f000 f808 	bl	11f90 <_sbrk_r>
   11f80:	3001      	adds	r0, #1
   11f82:	d1dd      	bne.n	11f40 <_malloc_r+0x64>
   11f84:	e7cf      	b.n	11f26 <_malloc_r+0x4a>
   11f86:	bf00      	nop
   11f88:	2000d22c 	.word	0x2000d22c
   11f8c:	2000d228 	.word	0x2000d228

00011f90 <_sbrk_r>:
   11f90:	b538      	push	{r3, r4, r5, lr}
   11f92:	2300      	movs	r3, #0
   11f94:	4d05      	ldr	r5, [pc, #20]	; (11fac <_sbrk_r+0x1c>)
   11f96:	4604      	mov	r4, r0
   11f98:	4608      	mov	r0, r1
   11f9a:	602b      	str	r3, [r5, #0]
   11f9c:	f7f8 fb1e 	bl	a5dc <_sbrk>
   11fa0:	1c43      	adds	r3, r0, #1
   11fa2:	d102      	bne.n	11faa <_sbrk_r+0x1a>
   11fa4:	682b      	ldr	r3, [r5, #0]
   11fa6:	b103      	cbz	r3, 11faa <_sbrk_r+0x1a>
   11fa8:	6023      	str	r3, [r4, #0]
   11faa:	bd38      	pop	{r3, r4, r5, pc}
   11fac:	2000d230 	.word	0x2000d230

00011fb0 <_strtol_l.constprop.0>:
   11fb0:	2b24      	cmp	r3, #36	; 0x24
   11fb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11fb6:	4686      	mov	lr, r0
   11fb8:	4690      	mov	r8, r2
   11fba:	d801      	bhi.n	11fc0 <_strtol_l.constprop.0+0x10>
   11fbc:	2b01      	cmp	r3, #1
   11fbe:	d106      	bne.n	11fce <_strtol_l.constprop.0+0x1e>
   11fc0:	f000 fd64 	bl	12a8c <__errno>
   11fc4:	2316      	movs	r3, #22
   11fc6:	6003      	str	r3, [r0, #0]
   11fc8:	2000      	movs	r0, #0
   11fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11fce:	460d      	mov	r5, r1
   11fd0:	4835      	ldr	r0, [pc, #212]	; (120a8 <_strtol_l.constprop.0+0xf8>)
   11fd2:	462a      	mov	r2, r5
   11fd4:	f815 4b01 	ldrb.w	r4, [r5], #1
   11fd8:	5d06      	ldrb	r6, [r0, r4]
   11fda:	f016 0608 	ands.w	r6, r6, #8
   11fde:	d1f8      	bne.n	11fd2 <_strtol_l.constprop.0+0x22>
   11fe0:	2c2d      	cmp	r4, #45	; 0x2d
   11fe2:	d124      	bne.n	1202e <_strtol_l.constprop.0+0x7e>
   11fe4:	782c      	ldrb	r4, [r5, #0]
   11fe6:	2601      	movs	r6, #1
   11fe8:	1c95      	adds	r5, r2, #2
   11fea:	bb2b      	cbnz	r3, 12038 <_strtol_l.constprop.0+0x88>
   11fec:	2c30      	cmp	r4, #48	; 0x30
   11fee:	d030      	beq.n	12052 <_strtol_l.constprop.0+0xa2>
   11ff0:	230a      	movs	r3, #10
   11ff2:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   11ff6:	2200      	movs	r2, #0
   11ff8:	f10c 3cff 	add.w	ip, ip, #4294967295
   11ffc:	4610      	mov	r0, r2
   11ffe:	fbbc f9f3 	udiv	r9, ip, r3
   12002:	fb03 ca19 	mls	sl, r3, r9, ip
   12006:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   1200a:	2f09      	cmp	r7, #9
   1200c:	d828      	bhi.n	12060 <_strtol_l.constprop.0+0xb0>
   1200e:	463c      	mov	r4, r7
   12010:	42a3      	cmp	r3, r4
   12012:	dd34      	ble.n	1207e <_strtol_l.constprop.0+0xce>
   12014:	1c57      	adds	r7, r2, #1
   12016:	d007      	beq.n	12028 <_strtol_l.constprop.0+0x78>
   12018:	4581      	cmp	r9, r0
   1201a:	d32d      	bcc.n	12078 <_strtol_l.constprop.0+0xc8>
   1201c:	d101      	bne.n	12022 <_strtol_l.constprop.0+0x72>
   1201e:	45a2      	cmp	sl, r4
   12020:	db2a      	blt.n	12078 <_strtol_l.constprop.0+0xc8>
   12022:	fb00 4003 	mla	r0, r0, r3, r4
   12026:	2201      	movs	r2, #1
   12028:	f815 4b01 	ldrb.w	r4, [r5], #1
   1202c:	e7eb      	b.n	12006 <_strtol_l.constprop.0+0x56>
   1202e:	2c2b      	cmp	r4, #43	; 0x2b
   12030:	bf04      	itt	eq
   12032:	782c      	ldrbeq	r4, [r5, #0]
   12034:	1c95      	addeq	r5, r2, #2
   12036:	e7d8      	b.n	11fea <_strtol_l.constprop.0+0x3a>
   12038:	2b10      	cmp	r3, #16
   1203a:	d1da      	bne.n	11ff2 <_strtol_l.constprop.0+0x42>
   1203c:	2c30      	cmp	r4, #48	; 0x30
   1203e:	d1d8      	bne.n	11ff2 <_strtol_l.constprop.0+0x42>
   12040:	782a      	ldrb	r2, [r5, #0]
   12042:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   12046:	2a58      	cmp	r2, #88	; 0x58
   12048:	d1d3      	bne.n	11ff2 <_strtol_l.constprop.0+0x42>
   1204a:	786c      	ldrb	r4, [r5, #1]
   1204c:	2310      	movs	r3, #16
   1204e:	3502      	adds	r5, #2
   12050:	e7cf      	b.n	11ff2 <_strtol_l.constprop.0+0x42>
   12052:	782b      	ldrb	r3, [r5, #0]
   12054:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12058:	2b58      	cmp	r3, #88	; 0x58
   1205a:	d0f6      	beq.n	1204a <_strtol_l.constprop.0+0x9a>
   1205c:	2308      	movs	r3, #8
   1205e:	e7c8      	b.n	11ff2 <_strtol_l.constprop.0+0x42>
   12060:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   12064:	2f19      	cmp	r7, #25
   12066:	d801      	bhi.n	1206c <_strtol_l.constprop.0+0xbc>
   12068:	3c37      	subs	r4, #55	; 0x37
   1206a:	e7d1      	b.n	12010 <_strtol_l.constprop.0+0x60>
   1206c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   12070:	2f19      	cmp	r7, #25
   12072:	d804      	bhi.n	1207e <_strtol_l.constprop.0+0xce>
   12074:	3c57      	subs	r4, #87	; 0x57
   12076:	e7cb      	b.n	12010 <_strtol_l.constprop.0+0x60>
   12078:	f04f 32ff 	mov.w	r2, #4294967295
   1207c:	e7d4      	b.n	12028 <_strtol_l.constprop.0+0x78>
   1207e:	1c53      	adds	r3, r2, #1
   12080:	d108      	bne.n	12094 <_strtol_l.constprop.0+0xe4>
   12082:	2322      	movs	r3, #34	; 0x22
   12084:	4660      	mov	r0, ip
   12086:	f8ce 3000 	str.w	r3, [lr]
   1208a:	f1b8 0f00 	cmp.w	r8, #0
   1208e:	d09c      	beq.n	11fca <_strtol_l.constprop.0+0x1a>
   12090:	1e69      	subs	r1, r5, #1
   12092:	e006      	b.n	120a2 <_strtol_l.constprop.0+0xf2>
   12094:	b106      	cbz	r6, 12098 <_strtol_l.constprop.0+0xe8>
   12096:	4240      	negs	r0, r0
   12098:	f1b8 0f00 	cmp.w	r8, #0
   1209c:	d095      	beq.n	11fca <_strtol_l.constprop.0+0x1a>
   1209e:	2a00      	cmp	r2, #0
   120a0:	d1f6      	bne.n	12090 <_strtol_l.constprop.0+0xe0>
   120a2:	f8c8 1000 	str.w	r1, [r8]
   120a6:	e790      	b.n	11fca <_strtol_l.constprop.0+0x1a>
   120a8:	00016f86 	.word	0x00016f86

000120ac <strtol>:
   120ac:	4613      	mov	r3, r2
   120ae:	460a      	mov	r2, r1
   120b0:	4601      	mov	r1, r0
   120b2:	4802      	ldr	r0, [pc, #8]	; (120bc <strtol+0x10>)
   120b4:	6800      	ldr	r0, [r0, #0]
   120b6:	f7ff bf7b 	b.w	11fb0 <_strtol_l.constprop.0>
   120ba:	bf00      	nop
   120bc:	2000c66c 	.word	0x2000c66c

000120c0 <_strtoul_l.constprop.0>:
   120c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   120c4:	4686      	mov	lr, r0
   120c6:	460d      	mov	r5, r1
   120c8:	4e35      	ldr	r6, [pc, #212]	; (121a0 <_strtoul_l.constprop.0+0xe0>)
   120ca:	4628      	mov	r0, r5
   120cc:	f815 4b01 	ldrb.w	r4, [r5], #1
   120d0:	5d37      	ldrb	r7, [r6, r4]
   120d2:	f017 0708 	ands.w	r7, r7, #8
   120d6:	d1f8      	bne.n	120ca <_strtoul_l.constprop.0+0xa>
   120d8:	2c2d      	cmp	r4, #45	; 0x2d
   120da:	d126      	bne.n	1212a <_strtoul_l.constprop.0+0x6a>
   120dc:	782c      	ldrb	r4, [r5, #0]
   120de:	2701      	movs	r7, #1
   120e0:	1c85      	adds	r5, r0, #2
   120e2:	bb3b      	cbnz	r3, 12134 <_strtoul_l.constprop.0+0x74>
   120e4:	2c30      	cmp	r4, #48	; 0x30
   120e6:	d032      	beq.n	1214e <_strtoul_l.constprop.0+0x8e>
   120e8:	230a      	movs	r3, #10
   120ea:	f04f 38ff 	mov.w	r8, #4294967295
   120ee:	2600      	movs	r6, #0
   120f0:	fbb8 f8f3 	udiv	r8, r8, r3
   120f4:	fb03 f908 	mul.w	r9, r3, r8
   120f8:	4630      	mov	r0, r6
   120fa:	ea6f 0909 	mvn.w	r9, r9
   120fe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   12102:	f1bc 0f09 	cmp.w	ip, #9
   12106:	d829      	bhi.n	1215c <_strtoul_l.constprop.0+0x9c>
   12108:	4664      	mov	r4, ip
   1210a:	42a3      	cmp	r3, r4
   1210c:	dd37      	ble.n	1217e <_strtoul_l.constprop.0+0xbe>
   1210e:	f1b6 3fff 	cmp.w	r6, #4294967295
   12112:	d007      	beq.n	12124 <_strtoul_l.constprop.0+0x64>
   12114:	4580      	cmp	r8, r0
   12116:	d32f      	bcc.n	12178 <_strtoul_l.constprop.0+0xb8>
   12118:	d101      	bne.n	1211e <_strtoul_l.constprop.0+0x5e>
   1211a:	45a1      	cmp	r9, r4
   1211c:	db2c      	blt.n	12178 <_strtoul_l.constprop.0+0xb8>
   1211e:	fb00 4003 	mla	r0, r0, r3, r4
   12122:	2601      	movs	r6, #1
   12124:	f815 4b01 	ldrb.w	r4, [r5], #1
   12128:	e7e9      	b.n	120fe <_strtoul_l.constprop.0+0x3e>
   1212a:	2c2b      	cmp	r4, #43	; 0x2b
   1212c:	bf04      	itt	eq
   1212e:	782c      	ldrbeq	r4, [r5, #0]
   12130:	1c85      	addeq	r5, r0, #2
   12132:	e7d6      	b.n	120e2 <_strtoul_l.constprop.0+0x22>
   12134:	2b10      	cmp	r3, #16
   12136:	d1d8      	bne.n	120ea <_strtoul_l.constprop.0+0x2a>
   12138:	2c30      	cmp	r4, #48	; 0x30
   1213a:	d1d6      	bne.n	120ea <_strtoul_l.constprop.0+0x2a>
   1213c:	7828      	ldrb	r0, [r5, #0]
   1213e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   12142:	2858      	cmp	r0, #88	; 0x58
   12144:	d1d1      	bne.n	120ea <_strtoul_l.constprop.0+0x2a>
   12146:	786c      	ldrb	r4, [r5, #1]
   12148:	2310      	movs	r3, #16
   1214a:	3502      	adds	r5, #2
   1214c:	e7cd      	b.n	120ea <_strtoul_l.constprop.0+0x2a>
   1214e:	782b      	ldrb	r3, [r5, #0]
   12150:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12154:	2b58      	cmp	r3, #88	; 0x58
   12156:	d0f6      	beq.n	12146 <_strtoul_l.constprop.0+0x86>
   12158:	2308      	movs	r3, #8
   1215a:	e7c6      	b.n	120ea <_strtoul_l.constprop.0+0x2a>
   1215c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   12160:	f1bc 0f19 	cmp.w	ip, #25
   12164:	d801      	bhi.n	1216a <_strtoul_l.constprop.0+0xaa>
   12166:	3c37      	subs	r4, #55	; 0x37
   12168:	e7cf      	b.n	1210a <_strtoul_l.constprop.0+0x4a>
   1216a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   1216e:	f1bc 0f19 	cmp.w	ip, #25
   12172:	d804      	bhi.n	1217e <_strtoul_l.constprop.0+0xbe>
   12174:	3c57      	subs	r4, #87	; 0x57
   12176:	e7c8      	b.n	1210a <_strtoul_l.constprop.0+0x4a>
   12178:	f04f 36ff 	mov.w	r6, #4294967295
   1217c:	e7d2      	b.n	12124 <_strtoul_l.constprop.0+0x64>
   1217e:	1c73      	adds	r3, r6, #1
   12180:	d106      	bne.n	12190 <_strtoul_l.constprop.0+0xd0>
   12182:	2322      	movs	r3, #34	; 0x22
   12184:	4630      	mov	r0, r6
   12186:	f8ce 3000 	str.w	r3, [lr]
   1218a:	b932      	cbnz	r2, 1219a <_strtoul_l.constprop.0+0xda>
   1218c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12190:	b107      	cbz	r7, 12194 <_strtoul_l.constprop.0+0xd4>
   12192:	4240      	negs	r0, r0
   12194:	2a00      	cmp	r2, #0
   12196:	d0f9      	beq.n	1218c <_strtoul_l.constprop.0+0xcc>
   12198:	b106      	cbz	r6, 1219c <_strtoul_l.constprop.0+0xdc>
   1219a:	1e69      	subs	r1, r5, #1
   1219c:	6011      	str	r1, [r2, #0]
   1219e:	e7f5      	b.n	1218c <_strtoul_l.constprop.0+0xcc>
   121a0:	00016f86 	.word	0x00016f86

000121a4 <strtoul>:
   121a4:	4613      	mov	r3, r2
   121a6:	460a      	mov	r2, r1
   121a8:	4601      	mov	r1, r0
   121aa:	4802      	ldr	r0, [pc, #8]	; (121b4 <strtoul+0x10>)
   121ac:	6800      	ldr	r0, [r0, #0]
   121ae:	f7ff bf87 	b.w	120c0 <_strtoul_l.constprop.0>
   121b2:	bf00      	nop
   121b4:	2000c66c 	.word	0x2000c66c

000121b8 <vsniprintf>:
   121b8:	b507      	push	{r0, r1, r2, lr}
   121ba:	9300      	str	r3, [sp, #0]
   121bc:	4613      	mov	r3, r2
   121be:	460a      	mov	r2, r1
   121c0:	4601      	mov	r1, r0
   121c2:	4803      	ldr	r0, [pc, #12]	; (121d0 <vsniprintf+0x18>)
   121c4:	6800      	ldr	r0, [r0, #0]
   121c6:	f002 fa32 	bl	1462e <_vsniprintf_r>
   121ca:	b003      	add	sp, #12
   121cc:	f85d fb04 	ldr.w	pc, [sp], #4
   121d0:	2000c66c 	.word	0x2000c66c

000121d4 <__malloc_lock>:
   121d4:	4801      	ldr	r0, [pc, #4]	; (121dc <__malloc_lock+0x8>)
   121d6:	f7f8 ba15 	b.w	a604 <__retarget_lock_acquire_recursive>
   121da:	bf00      	nop
   121dc:	2000c718 	.word	0x2000c718

000121e0 <__malloc_unlock>:
   121e0:	4801      	ldr	r0, [pc, #4]	; (121e8 <__malloc_unlock+0x8>)
   121e2:	f7f8 ba2b 	b.w	a63c <__retarget_lock_release_recursive>
   121e6:	bf00      	nop
   121e8:	2000c718 	.word	0x2000c718

000121ec <_svfiprintf_r>:
   121ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121f0:	4698      	mov	r8, r3
   121f2:	898b      	ldrh	r3, [r1, #12]
   121f4:	b09d      	sub	sp, #116	; 0x74
   121f6:	4607      	mov	r7, r0
   121f8:	061b      	lsls	r3, r3, #24
   121fa:	460d      	mov	r5, r1
   121fc:	4614      	mov	r4, r2
   121fe:	d510      	bpl.n	12222 <_svfiprintf_r+0x36>
   12200:	690b      	ldr	r3, [r1, #16]
   12202:	b973      	cbnz	r3, 12222 <_svfiprintf_r+0x36>
   12204:	2140      	movs	r1, #64	; 0x40
   12206:	f7ff fe69 	bl	11edc <_malloc_r>
   1220a:	6028      	str	r0, [r5, #0]
   1220c:	6128      	str	r0, [r5, #16]
   1220e:	b930      	cbnz	r0, 1221e <_svfiprintf_r+0x32>
   12210:	230c      	movs	r3, #12
   12212:	603b      	str	r3, [r7, #0]
   12214:	f04f 30ff 	mov.w	r0, #4294967295
   12218:	b01d      	add	sp, #116	; 0x74
   1221a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1221e:	2340      	movs	r3, #64	; 0x40
   12220:	616b      	str	r3, [r5, #20]
   12222:	2300      	movs	r3, #0
   12224:	f8cd 800c 	str.w	r8, [sp, #12]
   12228:	f04f 0901 	mov.w	r9, #1
   1222c:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 123d0 <_svfiprintf_r+0x1e4>
   12230:	9309      	str	r3, [sp, #36]	; 0x24
   12232:	2320      	movs	r3, #32
   12234:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   12238:	2330      	movs	r3, #48	; 0x30
   1223a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1223e:	4623      	mov	r3, r4
   12240:	469a      	mov	sl, r3
   12242:	f813 2b01 	ldrb.w	r2, [r3], #1
   12246:	b10a      	cbz	r2, 1224c <_svfiprintf_r+0x60>
   12248:	2a25      	cmp	r2, #37	; 0x25
   1224a:	d1f9      	bne.n	12240 <_svfiprintf_r+0x54>
   1224c:	ebba 0b04 	subs.w	fp, sl, r4
   12250:	d00b      	beq.n	1226a <_svfiprintf_r+0x7e>
   12252:	465b      	mov	r3, fp
   12254:	4622      	mov	r2, r4
   12256:	4629      	mov	r1, r5
   12258:	4638      	mov	r0, r7
   1225a:	f002 fa13 	bl	14684 <__ssputs_r>
   1225e:	3001      	adds	r0, #1
   12260:	f000 80a7 	beq.w	123b2 <_svfiprintf_r+0x1c6>
   12264:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12266:	445a      	add	r2, fp
   12268:	9209      	str	r2, [sp, #36]	; 0x24
   1226a:	f89a 3000 	ldrb.w	r3, [sl]
   1226e:	2b00      	cmp	r3, #0
   12270:	f000 809f 	beq.w	123b2 <_svfiprintf_r+0x1c6>
   12274:	2300      	movs	r3, #0
   12276:	f04f 32ff 	mov.w	r2, #4294967295
   1227a:	f10a 0a01 	add.w	sl, sl, #1
   1227e:	9304      	str	r3, [sp, #16]
   12280:	9307      	str	r3, [sp, #28]
   12282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   12286:	931a      	str	r3, [sp, #104]	; 0x68
   12288:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1228c:	4654      	mov	r4, sl
   1228e:	2205      	movs	r2, #5
   12290:	484f      	ldr	r0, [pc, #316]	; (123d0 <_svfiprintf_r+0x1e4>)
   12292:	f814 1b01 	ldrb.w	r1, [r4], #1
   12296:	f002 f94d 	bl	14534 <memchr>
   1229a:	9a04      	ldr	r2, [sp, #16]
   1229c:	b9d8      	cbnz	r0, 122d6 <_svfiprintf_r+0xea>
   1229e:	06d0      	lsls	r0, r2, #27
   122a0:	bf44      	itt	mi
   122a2:	2320      	movmi	r3, #32
   122a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   122a8:	0711      	lsls	r1, r2, #28
   122aa:	bf44      	itt	mi
   122ac:	232b      	movmi	r3, #43	; 0x2b
   122ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   122b2:	f89a 3000 	ldrb.w	r3, [sl]
   122b6:	2b2a      	cmp	r3, #42	; 0x2a
   122b8:	d015      	beq.n	122e6 <_svfiprintf_r+0xfa>
   122ba:	9a07      	ldr	r2, [sp, #28]
   122bc:	4654      	mov	r4, sl
   122be:	2000      	movs	r0, #0
   122c0:	f04f 0c0a 	mov.w	ip, #10
   122c4:	4621      	mov	r1, r4
   122c6:	f811 3b01 	ldrb.w	r3, [r1], #1
   122ca:	3b30      	subs	r3, #48	; 0x30
   122cc:	2b09      	cmp	r3, #9
   122ce:	d94b      	bls.n	12368 <_svfiprintf_r+0x17c>
   122d0:	b1b0      	cbz	r0, 12300 <_svfiprintf_r+0x114>
   122d2:	9207      	str	r2, [sp, #28]
   122d4:	e014      	b.n	12300 <_svfiprintf_r+0x114>
   122d6:	eba0 0308 	sub.w	r3, r0, r8
   122da:	46a2      	mov	sl, r4
   122dc:	fa09 f303 	lsl.w	r3, r9, r3
   122e0:	4313      	orrs	r3, r2
   122e2:	9304      	str	r3, [sp, #16]
   122e4:	e7d2      	b.n	1228c <_svfiprintf_r+0xa0>
   122e6:	9b03      	ldr	r3, [sp, #12]
   122e8:	1d19      	adds	r1, r3, #4
   122ea:	681b      	ldr	r3, [r3, #0]
   122ec:	2b00      	cmp	r3, #0
   122ee:	9103      	str	r1, [sp, #12]
   122f0:	bfbb      	ittet	lt
   122f2:	425b      	neglt	r3, r3
   122f4:	f042 0202 	orrlt.w	r2, r2, #2
   122f8:	9307      	strge	r3, [sp, #28]
   122fa:	9307      	strlt	r3, [sp, #28]
   122fc:	bfb8      	it	lt
   122fe:	9204      	strlt	r2, [sp, #16]
   12300:	7823      	ldrb	r3, [r4, #0]
   12302:	2b2e      	cmp	r3, #46	; 0x2e
   12304:	d10a      	bne.n	1231c <_svfiprintf_r+0x130>
   12306:	7863      	ldrb	r3, [r4, #1]
   12308:	2b2a      	cmp	r3, #42	; 0x2a
   1230a:	d132      	bne.n	12372 <_svfiprintf_r+0x186>
   1230c:	9b03      	ldr	r3, [sp, #12]
   1230e:	3402      	adds	r4, #2
   12310:	1d1a      	adds	r2, r3, #4
   12312:	681b      	ldr	r3, [r3, #0]
   12314:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   12318:	9203      	str	r2, [sp, #12]
   1231a:	9305      	str	r3, [sp, #20]
   1231c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 123d4 <_svfiprintf_r+0x1e8>
   12320:	2203      	movs	r2, #3
   12322:	7821      	ldrb	r1, [r4, #0]
   12324:	4650      	mov	r0, sl
   12326:	f002 f905 	bl	14534 <memchr>
   1232a:	b138      	cbz	r0, 1233c <_svfiprintf_r+0x150>
   1232c:	eba0 000a 	sub.w	r0, r0, sl
   12330:	2240      	movs	r2, #64	; 0x40
   12332:	9b04      	ldr	r3, [sp, #16]
   12334:	3401      	adds	r4, #1
   12336:	4082      	lsls	r2, r0
   12338:	4313      	orrs	r3, r2
   1233a:	9304      	str	r3, [sp, #16]
   1233c:	f814 1b01 	ldrb.w	r1, [r4], #1
   12340:	2206      	movs	r2, #6
   12342:	4825      	ldr	r0, [pc, #148]	; (123d8 <_svfiprintf_r+0x1ec>)
   12344:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   12348:	f002 f8f4 	bl	14534 <memchr>
   1234c:	2800      	cmp	r0, #0
   1234e:	d036      	beq.n	123be <_svfiprintf_r+0x1d2>
   12350:	4b22      	ldr	r3, [pc, #136]	; (123dc <_svfiprintf_r+0x1f0>)
   12352:	bb1b      	cbnz	r3, 1239c <_svfiprintf_r+0x1b0>
   12354:	9b03      	ldr	r3, [sp, #12]
   12356:	3307      	adds	r3, #7
   12358:	f023 0307 	bic.w	r3, r3, #7
   1235c:	3308      	adds	r3, #8
   1235e:	9303      	str	r3, [sp, #12]
   12360:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12362:	4433      	add	r3, r6
   12364:	9309      	str	r3, [sp, #36]	; 0x24
   12366:	e76a      	b.n	1223e <_svfiprintf_r+0x52>
   12368:	fb0c 3202 	mla	r2, ip, r2, r3
   1236c:	460c      	mov	r4, r1
   1236e:	2001      	movs	r0, #1
   12370:	e7a8      	b.n	122c4 <_svfiprintf_r+0xd8>
   12372:	2300      	movs	r3, #0
   12374:	3401      	adds	r4, #1
   12376:	f04f 0c0a 	mov.w	ip, #10
   1237a:	4619      	mov	r1, r3
   1237c:	9305      	str	r3, [sp, #20]
   1237e:	4620      	mov	r0, r4
   12380:	f810 2b01 	ldrb.w	r2, [r0], #1
   12384:	3a30      	subs	r2, #48	; 0x30
   12386:	2a09      	cmp	r2, #9
   12388:	d903      	bls.n	12392 <_svfiprintf_r+0x1a6>
   1238a:	2b00      	cmp	r3, #0
   1238c:	d0c6      	beq.n	1231c <_svfiprintf_r+0x130>
   1238e:	9105      	str	r1, [sp, #20]
   12390:	e7c4      	b.n	1231c <_svfiprintf_r+0x130>
   12392:	fb0c 2101 	mla	r1, ip, r1, r2
   12396:	4604      	mov	r4, r0
   12398:	2301      	movs	r3, #1
   1239a:	e7f0      	b.n	1237e <_svfiprintf_r+0x192>
   1239c:	ab03      	add	r3, sp, #12
   1239e:	462a      	mov	r2, r5
   123a0:	a904      	add	r1, sp, #16
   123a2:	4638      	mov	r0, r7
   123a4:	9300      	str	r3, [sp, #0]
   123a6:	4b0e      	ldr	r3, [pc, #56]	; (123e0 <_svfiprintf_r+0x1f4>)
   123a8:	f3af 8000 	nop.w
   123ac:	1c42      	adds	r2, r0, #1
   123ae:	4606      	mov	r6, r0
   123b0:	d1d6      	bne.n	12360 <_svfiprintf_r+0x174>
   123b2:	89ab      	ldrh	r3, [r5, #12]
   123b4:	065b      	lsls	r3, r3, #25
   123b6:	f53f af2d 	bmi.w	12214 <_svfiprintf_r+0x28>
   123ba:	9809      	ldr	r0, [sp, #36]	; 0x24
   123bc:	e72c      	b.n	12218 <_svfiprintf_r+0x2c>
   123be:	ab03      	add	r3, sp, #12
   123c0:	462a      	mov	r2, r5
   123c2:	a904      	add	r1, sp, #16
   123c4:	4638      	mov	r0, r7
   123c6:	9300      	str	r3, [sp, #0]
   123c8:	4b05      	ldr	r3, [pc, #20]	; (123e0 <_svfiprintf_r+0x1f4>)
   123ca:	f000 f80b 	bl	123e4 <_printf_i>
   123ce:	e7ed      	b.n	123ac <_svfiprintf_r+0x1c0>
   123d0:	00017086 	.word	0x00017086
   123d4:	0001708c 	.word	0x0001708c
   123d8:	00017090 	.word	0x00017090
   123dc:	00000000 	.word	0x00000000
   123e0:	00014685 	.word	0x00014685

000123e4 <_printf_i>:
   123e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   123e8:	7e0f      	ldrb	r7, [r1, #24]
   123ea:	4691      	mov	r9, r2
   123ec:	4680      	mov	r8, r0
   123ee:	460c      	mov	r4, r1
   123f0:	2f78      	cmp	r7, #120	; 0x78
   123f2:	469a      	mov	sl, r3
   123f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   123f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
   123fa:	d807      	bhi.n	1240c <_printf_i+0x28>
   123fc:	2f62      	cmp	r7, #98	; 0x62
   123fe:	d80a      	bhi.n	12416 <_printf_i+0x32>
   12400:	2f00      	cmp	r7, #0
   12402:	f000 80e0 	beq.w	125c6 <_printf_i+0x1e2>
   12406:	2f58      	cmp	r7, #88	; 0x58
   12408:	f000 80bb 	beq.w	12582 <_printf_i+0x19e>
   1240c:	f104 0642 	add.w	r6, r4, #66	; 0x42
   12410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   12414:	e03a      	b.n	1248c <_printf_i+0xa8>
   12416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1241a:	2b15      	cmp	r3, #21
   1241c:	d8f6      	bhi.n	1240c <_printf_i+0x28>
   1241e:	a101      	add	r1, pc, #4	; (adr r1, 12424 <_printf_i+0x40>)
   12420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   12424:	0001247d 	.word	0x0001247d
   12428:	00012491 	.word	0x00012491
   1242c:	0001240d 	.word	0x0001240d
   12430:	0001240d 	.word	0x0001240d
   12434:	0001240d 	.word	0x0001240d
   12438:	0001240d 	.word	0x0001240d
   1243c:	00012491 	.word	0x00012491
   12440:	0001240d 	.word	0x0001240d
   12444:	0001240d 	.word	0x0001240d
   12448:	0001240d 	.word	0x0001240d
   1244c:	0001240d 	.word	0x0001240d
   12450:	000125ad 	.word	0x000125ad
   12454:	00012521 	.word	0x00012521
   12458:	00012563 	.word	0x00012563
   1245c:	0001240d 	.word	0x0001240d
   12460:	0001240d 	.word	0x0001240d
   12464:	000125cf 	.word	0x000125cf
   12468:	0001240d 	.word	0x0001240d
   1246c:	00012521 	.word	0x00012521
   12470:	0001240d 	.word	0x0001240d
   12474:	0001240d 	.word	0x0001240d
   12478:	0001256b 	.word	0x0001256b
   1247c:	682b      	ldr	r3, [r5, #0]
   1247e:	f104 0642 	add.w	r6, r4, #66	; 0x42
   12482:	1d1a      	adds	r2, r3, #4
   12484:	681b      	ldr	r3, [r3, #0]
   12486:	602a      	str	r2, [r5, #0]
   12488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1248c:	2301      	movs	r3, #1
   1248e:	e0ab      	b.n	125e8 <_printf_i+0x204>
   12490:	6823      	ldr	r3, [r4, #0]
   12492:	6829      	ldr	r1, [r5, #0]
   12494:	061f      	lsls	r7, r3, #24
   12496:	f101 0004 	add.w	r0, r1, #4
   1249a:	6028      	str	r0, [r5, #0]
   1249c:	d501      	bpl.n	124a2 <_printf_i+0xbe>
   1249e:	680d      	ldr	r5, [r1, #0]
   124a0:	e003      	b.n	124aa <_printf_i+0xc6>
   124a2:	065e      	lsls	r6, r3, #25
   124a4:	d5fb      	bpl.n	1249e <_printf_i+0xba>
   124a6:	f9b1 5000 	ldrsh.w	r5, [r1]
   124aa:	2d00      	cmp	r5, #0
   124ac:	6861      	ldr	r1, [r4, #4]
   124ae:	da7a      	bge.n	125a6 <_printf_i+0x1c2>
   124b0:	202d      	movs	r0, #45	; 0x2d
   124b2:	2900      	cmp	r1, #0
   124b4:	60a1      	str	r1, [r4, #8]
   124b6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   124ba:	da2d      	bge.n	12518 <_printf_i+0x134>
   124bc:	426d      	negs	r5, r5
   124be:	485e      	ldr	r0, [pc, #376]	; (12638 <_printf_i+0x254>)
   124c0:	230a      	movs	r3, #10
   124c2:	4616      	mov	r6, r2
   124c4:	fbb5 f1f3 	udiv	r1, r5, r3
   124c8:	fb03 5711 	mls	r7, r3, r1, r5
   124cc:	5dc7      	ldrb	r7, [r0, r7]
   124ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
   124d2:	462f      	mov	r7, r5
   124d4:	460d      	mov	r5, r1
   124d6:	42bb      	cmp	r3, r7
   124d8:	d9f4      	bls.n	124c4 <_printf_i+0xe0>
   124da:	2b08      	cmp	r3, #8
   124dc:	d10b      	bne.n	124f6 <_printf_i+0x112>
   124de:	6823      	ldr	r3, [r4, #0]
   124e0:	07df      	lsls	r7, r3, #31
   124e2:	d508      	bpl.n	124f6 <_printf_i+0x112>
   124e4:	6923      	ldr	r3, [r4, #16]
   124e6:	6861      	ldr	r1, [r4, #4]
   124e8:	4299      	cmp	r1, r3
   124ea:	bfde      	ittt	le
   124ec:	2330      	movle	r3, #48	; 0x30
   124ee:	f806 3c01 	strble.w	r3, [r6, #-1]
   124f2:	f106 36ff 	addle.w	r6, r6, #4294967295
   124f6:	1b92      	subs	r2, r2, r6
   124f8:	6122      	str	r2, [r4, #16]
   124fa:	464b      	mov	r3, r9
   124fc:	aa03      	add	r2, sp, #12
   124fe:	4621      	mov	r1, r4
   12500:	4640      	mov	r0, r8
   12502:	f8cd a000 	str.w	sl, [sp]
   12506:	f002 f918 	bl	1473a <_printf_common>
   1250a:	3001      	adds	r0, #1
   1250c:	d171      	bne.n	125f2 <_printf_i+0x20e>
   1250e:	f04f 30ff 	mov.w	r0, #4294967295
   12512:	b004      	add	sp, #16
   12514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12518:	f023 0304 	bic.w	r3, r3, #4
   1251c:	6023      	str	r3, [r4, #0]
   1251e:	e7cd      	b.n	124bc <_printf_i+0xd8>
   12520:	682b      	ldr	r3, [r5, #0]
   12522:	6820      	ldr	r0, [r4, #0]
   12524:	1d19      	adds	r1, r3, #4
   12526:	6029      	str	r1, [r5, #0]
   12528:	0605      	lsls	r5, r0, #24
   1252a:	d501      	bpl.n	12530 <_printf_i+0x14c>
   1252c:	681d      	ldr	r5, [r3, #0]
   1252e:	e002      	b.n	12536 <_printf_i+0x152>
   12530:	0641      	lsls	r1, r0, #25
   12532:	d5fb      	bpl.n	1252c <_printf_i+0x148>
   12534:	881d      	ldrh	r5, [r3, #0]
   12536:	2f6f      	cmp	r7, #111	; 0x6f
   12538:	483f      	ldr	r0, [pc, #252]	; (12638 <_printf_i+0x254>)
   1253a:	bf14      	ite	ne
   1253c:	230a      	movne	r3, #10
   1253e:	2308      	moveq	r3, #8
   12540:	2100      	movs	r1, #0
   12542:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   12546:	6866      	ldr	r6, [r4, #4]
   12548:	2e00      	cmp	r6, #0
   1254a:	60a6      	str	r6, [r4, #8]
   1254c:	dbb9      	blt.n	124c2 <_printf_i+0xde>
   1254e:	6821      	ldr	r1, [r4, #0]
   12550:	f021 0104 	bic.w	r1, r1, #4
   12554:	6021      	str	r1, [r4, #0]
   12556:	2d00      	cmp	r5, #0
   12558:	d1b3      	bne.n	124c2 <_printf_i+0xde>
   1255a:	2e00      	cmp	r6, #0
   1255c:	d1b1      	bne.n	124c2 <_printf_i+0xde>
   1255e:	4616      	mov	r6, r2
   12560:	e7bb      	b.n	124da <_printf_i+0xf6>
   12562:	6823      	ldr	r3, [r4, #0]
   12564:	f043 0320 	orr.w	r3, r3, #32
   12568:	6023      	str	r3, [r4, #0]
   1256a:	2778      	movs	r7, #120	; 0x78
   1256c:	4833      	ldr	r0, [pc, #204]	; (1263c <_printf_i+0x258>)
   1256e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   12572:	6829      	ldr	r1, [r5, #0]
   12574:	6823      	ldr	r3, [r4, #0]
   12576:	1d0e      	adds	r6, r1, #4
   12578:	602e      	str	r6, [r5, #0]
   1257a:	061e      	lsls	r6, r3, #24
   1257c:	d503      	bpl.n	12586 <_printf_i+0x1a2>
   1257e:	680d      	ldr	r5, [r1, #0]
   12580:	e004      	b.n	1258c <_printf_i+0x1a8>
   12582:	482d      	ldr	r0, [pc, #180]	; (12638 <_printf_i+0x254>)
   12584:	e7f3      	b.n	1256e <_printf_i+0x18a>
   12586:	065d      	lsls	r5, r3, #25
   12588:	d5f9      	bpl.n	1257e <_printf_i+0x19a>
   1258a:	880d      	ldrh	r5, [r1, #0]
   1258c:	07d9      	lsls	r1, r3, #31
   1258e:	bf44      	itt	mi
   12590:	f043 0320 	orrmi.w	r3, r3, #32
   12594:	6023      	strmi	r3, [r4, #0]
   12596:	b10d      	cbz	r5, 1259c <_printf_i+0x1b8>
   12598:	2310      	movs	r3, #16
   1259a:	e7d1      	b.n	12540 <_printf_i+0x15c>
   1259c:	6823      	ldr	r3, [r4, #0]
   1259e:	f023 0320 	bic.w	r3, r3, #32
   125a2:	6023      	str	r3, [r4, #0]
   125a4:	e7f8      	b.n	12598 <_printf_i+0x1b4>
   125a6:	4824      	ldr	r0, [pc, #144]	; (12638 <_printf_i+0x254>)
   125a8:	230a      	movs	r3, #10
   125aa:	e7cc      	b.n	12546 <_printf_i+0x162>
   125ac:	682b      	ldr	r3, [r5, #0]
   125ae:	6826      	ldr	r6, [r4, #0]
   125b0:	1d18      	adds	r0, r3, #4
   125b2:	6961      	ldr	r1, [r4, #20]
   125b4:	6028      	str	r0, [r5, #0]
   125b6:	0635      	lsls	r5, r6, #24
   125b8:	681b      	ldr	r3, [r3, #0]
   125ba:	d501      	bpl.n	125c0 <_printf_i+0x1dc>
   125bc:	6019      	str	r1, [r3, #0]
   125be:	e002      	b.n	125c6 <_printf_i+0x1e2>
   125c0:	0670      	lsls	r0, r6, #25
   125c2:	d5fb      	bpl.n	125bc <_printf_i+0x1d8>
   125c4:	8019      	strh	r1, [r3, #0]
   125c6:	2300      	movs	r3, #0
   125c8:	4616      	mov	r6, r2
   125ca:	6123      	str	r3, [r4, #16]
   125cc:	e795      	b.n	124fa <_printf_i+0x116>
   125ce:	682b      	ldr	r3, [r5, #0]
   125d0:	2100      	movs	r1, #0
   125d2:	1d1a      	adds	r2, r3, #4
   125d4:	602a      	str	r2, [r5, #0]
   125d6:	681e      	ldr	r6, [r3, #0]
   125d8:	6862      	ldr	r2, [r4, #4]
   125da:	4630      	mov	r0, r6
   125dc:	f001 ffaa 	bl	14534 <memchr>
   125e0:	b108      	cbz	r0, 125e6 <_printf_i+0x202>
   125e2:	1b80      	subs	r0, r0, r6
   125e4:	6060      	str	r0, [r4, #4]
   125e6:	6863      	ldr	r3, [r4, #4]
   125e8:	6123      	str	r3, [r4, #16]
   125ea:	2300      	movs	r3, #0
   125ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   125f0:	e783      	b.n	124fa <_printf_i+0x116>
   125f2:	6923      	ldr	r3, [r4, #16]
   125f4:	4632      	mov	r2, r6
   125f6:	4649      	mov	r1, r9
   125f8:	4640      	mov	r0, r8
   125fa:	47d0      	blx	sl
   125fc:	3001      	adds	r0, #1
   125fe:	d086      	beq.n	1250e <_printf_i+0x12a>
   12600:	6823      	ldr	r3, [r4, #0]
   12602:	079b      	lsls	r3, r3, #30
   12604:	d414      	bmi.n	12630 <_printf_i+0x24c>
   12606:	68e0      	ldr	r0, [r4, #12]
   12608:	9b03      	ldr	r3, [sp, #12]
   1260a:	4298      	cmp	r0, r3
   1260c:	bfb8      	it	lt
   1260e:	4618      	movlt	r0, r3
   12610:	e77f      	b.n	12512 <_printf_i+0x12e>
   12612:	2301      	movs	r3, #1
   12614:	4632      	mov	r2, r6
   12616:	4649      	mov	r1, r9
   12618:	4640      	mov	r0, r8
   1261a:	47d0      	blx	sl
   1261c:	3001      	adds	r0, #1
   1261e:	f43f af76 	beq.w	1250e <_printf_i+0x12a>
   12622:	3501      	adds	r5, #1
   12624:	68e3      	ldr	r3, [r4, #12]
   12626:	9903      	ldr	r1, [sp, #12]
   12628:	1a5b      	subs	r3, r3, r1
   1262a:	42ab      	cmp	r3, r5
   1262c:	dcf1      	bgt.n	12612 <_printf_i+0x22e>
   1262e:	e7ea      	b.n	12606 <_printf_i+0x222>
   12630:	2500      	movs	r5, #0
   12632:	f104 0619 	add.w	r6, r4, #25
   12636:	e7f5      	b.n	12624 <_printf_i+0x240>
   12638:	00017097 	.word	0x00017097
   1263c:	000170a8 	.word	0x000170a8

00012640 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   12640:	b40c      	push	{r2, r3}
   12642:	4603      	mov	r3, r0
   12644:	b507      	push	{r0, r1, r2, lr}
   12646:	4608      	mov	r0, r1
				       unsigned long request, ...)
{
	va_list args;
	int res;

	va_start(args, request);
   12648:	aa05      	add	r2, sp, #20
	res = vtable->ioctl(obj, request, args);
   1264a:	f240 1105 	movw	r1, #261	; 0x105
   1264e:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   12650:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   12652:	4798      	blx	r3
	va_end(args);

	return res;
}
   12654:	b003      	add	sp, #12
   12656:	f85d eb04 	ldr.w	lr, [sp], #4
   1265a:	b002      	add	sp, #8
   1265c:	4770      	bx	lr

0001265e <arch_printk_char_out>:
}
   1265e:	2000      	movs	r0, #0
   12660:	4770      	bx	lr

00012662 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   12662:	b40f      	push	{r0, r1, r2, r3}
   12664:	b507      	push	{r0, r1, r2, lr}
   12666:	a904      	add	r1, sp, #16
   12668:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1266c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1266e:	f7f5 ffc7 	bl	8600 <vprintk>

	va_end(ap);
}
   12672:	b003      	add	sp, #12
   12674:	f85d eb04 	ldr.w	lr, [sp], #4
   12678:	b004      	add	sp, #16
   1267a:	4770      	bx	lr

0001267c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1267c:	4604      	mov	r4, r0
   1267e:	b508      	push	{r3, lr}
   12680:	4608      	mov	r0, r1
   12682:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   12684:	461a      	mov	r2, r3
   12686:	47a0      	blx	r4
	return z_impl_z_current_get();
   12688:	f7fe feae 	bl	113e8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1268c:	f7f7 fd8a 	bl	a1a4 <z_impl_k_thread_abort>

00012690 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   12690:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   12694:	8840      	ldrh	r0, [r0, #2]
}
   12696:	0840      	lsrs	r0, r0, #1
   12698:	4770      	bx	lr

0001269a <free_list_add>:
{
   1269a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1269c:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1269e:	f7ff fff7 	bl	12690 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   126a2:	fab0 f080 	clz	r0, r0
   126a6:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   126aa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   126ae:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   126b2:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   126b4:	1d17      	adds	r7, r2, #4
{
   126b6:	460c      	mov	r4, r1
   126b8:	3206      	adds	r2, #6
   126ba:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   126bc:	b956      	cbnz	r6, 126d4 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   126be:	2101      	movs	r1, #1
   126c0:	fa01 f000 	lsl.w	r0, r1, r0
   126c4:	68d9      	ldr	r1, [r3, #12]
   126c6:	4301      	orrs	r1, r0
   126c8:	60d9      	str	r1, [r3, #12]
		b->next = c;
   126ca:	f8cc 4010 	str.w	r4, [ip, #16]
   126ce:	53dd      	strh	r5, [r3, r7]
   126d0:	529d      	strh	r5, [r3, r2]
}
   126d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   126d4:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   126d6:	3104      	adds	r1, #4
   126d8:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   126da:	53d8      	strh	r0, [r3, r7]
   126dc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   126e0:	529e      	strh	r6, [r3, r2]
   126e2:	80c5      	strh	r5, [r0, #6]
   126e4:	525d      	strh	r5, [r3, r1]
   126e6:	e7f4      	b.n	126d2 <free_list_add+0x38>

000126e8 <free_list_remove_bidx>:
{
   126e8:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   126ea:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   126ee:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   126f0:	4299      	cmp	r1, r3
   126f2:	f102 0104 	add.w	r1, r2, #4
   126f6:	d10a      	bne.n	1270e <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   126f8:	2301      	movs	r3, #1
   126fa:	fa03 f202 	lsl.w	r2, r3, r2
   126fe:	68c3      	ldr	r3, [r0, #12]
   12700:	ea23 0302 	bic.w	r3, r3, r2
   12704:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   12706:	2300      	movs	r3, #0
   12708:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1270c:	bd10      	pop	{r4, pc}
   1270e:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   12710:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   12714:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   12718:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1271c:	80cb      	strh	r3, [r1, #6]
   1271e:	8082      	strh	r2, [r0, #4]
}
   12720:	e7f4      	b.n	1270c <free_list_remove_bidx+0x24>

00012722 <free_list_remove>:
{
   12722:	b508      	push	{r3, lr}
   12724:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   12726:	f7ff ffb3 	bl	12690 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1272a:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1272e:	4618      	mov	r0, r3
}
   12730:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   12734:	f1c2 021f 	rsb	r2, r2, #31
   12738:	f7ff bfd6 	b.w	126e8 <free_list_remove_bidx>

0001273c <alloc_chunk>:
{
   1273c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12740:	fab1 f581 	clz	r5, r1
   12744:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   12748:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   1274c:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   12750:	4603      	mov	r3, r0
   12752:	460e      	mov	r6, r1
	if (b->next) {
   12754:	b1c2      	cbz	r2, 12788 <alloc_chunk+0x4c>
   12756:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   12758:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   1275c:	4618      	mov	r0, r3
   1275e:	4621      	mov	r1, r4
   12760:	f7ff ff96 	bl	12690 <chunk_size>
   12764:	42b0      	cmp	r0, r6
   12766:	d306      	bcc.n	12776 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   12768:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   1276a:	4618      	mov	r0, r3
   1276c:	f7ff ffbc 	bl	126e8 <free_list_remove_bidx>
}
   12770:	4620      	mov	r0, r4
   12772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   12776:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1277a:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   1277c:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1277e:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   12782:	d001      	beq.n	12788 <alloc_chunk+0x4c>
   12784:	4282      	cmp	r2, r0
   12786:	d1e7      	bne.n	12758 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   12788:	f04f 34ff 	mov.w	r4, #4294967295
   1278c:	f1c5 0220 	rsb	r2, r5, #32
   12790:	4094      	lsls	r4, r2
   12792:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   12794:	4014      	ands	r4, r2
   12796:	d0eb      	beq.n	12770 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   12798:	fa94 f2a4 	rbit	r2, r4
   1279c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   127a0:	1d11      	adds	r1, r2, #4
   127a2:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   127a6:	4621      	mov	r1, r4
   127a8:	e7df      	b.n	1276a <alloc_chunk+0x2e>

000127aa <merge_chunks>:
{
   127aa:	b538      	push	{r3, r4, r5, lr}
   127ac:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   127ae:	f7ff ff6f 	bl	12690 <chunk_size>
{
   127b2:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   127b4:	4604      	mov	r4, r0
   127b6:	4611      	mov	r1, r2
   127b8:	4618      	mov	r0, r3
   127ba:	f7ff ff69 	bl	12690 <chunk_size>
   127be:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   127c0:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   127c2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   127c6:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   127c8:	4618      	mov	r0, r3
   127ca:	f7ff ff61 	bl	12690 <chunk_size>
	void *cmem = &buf[c];
   127ce:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   127d0:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   127d4:	bd38      	pop	{r3, r4, r5, pc}

000127d6 <split_chunks>:
{
   127d6:	b538      	push	{r3, r4, r5, lr}
   127d8:	460c      	mov	r4, r1
   127da:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   127dc:	f7ff ff58 	bl	12690 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   127e0:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   127e2:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   127e4:	4405      	add	r5, r0
   127e6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   127ea:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   127ec:	8060      	strh	r0, [r4, #2]
   127ee:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   127f2:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   127f4:	8044      	strh	r4, [r0, #2]
   127f6:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   127fa:	4618      	mov	r0, r3
   127fc:	4611      	mov	r1, r2
   127fe:	f7ff ff47 	bl	12690 <chunk_size>
	void *cmem = &buf[c];
   12802:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   12804:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   12808:	bd38      	pop	{r3, r4, r5, pc}

0001280a <free_chunk>:
{
   1280a:	b538      	push	{r3, r4, r5, lr}
   1280c:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1280e:	f7ff ff3f 	bl	12690 <chunk_size>
   12812:	460c      	mov	r4, r1
   12814:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   12816:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1281a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1281c:	07da      	lsls	r2, r3, #31
   1281e:	d40a      	bmi.n	12836 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   12820:	4628      	mov	r0, r5
   12822:	f7ff ff7e 	bl	12722 <free_list_remove>
	return c + chunk_size(h, c);
   12826:	4621      	mov	r1, r4
   12828:	4628      	mov	r0, r5
   1282a:	f7ff ff31 	bl	12690 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1282e:	1822      	adds	r2, r4, r0
   12830:	4628      	mov	r0, r5
   12832:	f7ff ffba 	bl	127aa <merge_chunks>
		return ((uint16_t *)cmem)[f];
   12836:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1283a:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1283c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   12840:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   12842:	07db      	lsls	r3, r3, #31
   12844:	d40c      	bmi.n	12860 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   12846:	4628      	mov	r0, r5
   12848:	f7ff ff6b 	bl	12722 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1284c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   12850:	4622      	mov	r2, r4
   12852:	1a61      	subs	r1, r4, r1
   12854:	4628      	mov	r0, r5
   12856:	f7ff ffa8 	bl	127aa <merge_chunks>
   1285a:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1285e:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   12860:	4621      	mov	r1, r4
   12862:	4628      	mov	r0, r5
}
   12864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   12868:	f7ff bf17 	b.w	1269a <free_list_add>

0001286c <sys_heap_alloc>:
{
   1286c:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1286e:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   12870:	b909      	cbnz	r1, 12876 <sys_heap_alloc+0xa>
		return NULL;
   12872:	2000      	movs	r0, #0
}
   12874:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   12876:	68ab      	ldr	r3, [r5, #8]
   12878:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1287c:	d9f9      	bls.n	12872 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1287e:	310b      	adds	r1, #11
   12880:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   12882:	4621      	mov	r1, r4
   12884:	4628      	mov	r0, r5
   12886:	f7ff ff59 	bl	1273c <alloc_chunk>
	if (c == 0U) {
   1288a:	4606      	mov	r6, r0
   1288c:	2800      	cmp	r0, #0
   1288e:	d0f0      	beq.n	12872 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   12890:	4601      	mov	r1, r0
   12892:	4628      	mov	r0, r5
   12894:	f7ff fefc 	bl	12690 <chunk_size>
   12898:	42a0      	cmp	r0, r4
   1289a:	d907      	bls.n	128ac <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1289c:	4628      	mov	r0, r5
   1289e:	1932      	adds	r2, r6, r4
   128a0:	f7ff ff99 	bl	127d6 <split_chunks>
		free_list_add(h, c + chunk_sz);
   128a4:	4611      	mov	r1, r2
   128a6:	4628      	mov	r0, r5
   128a8:	f7ff fef7 	bl	1269a <free_list_add>
	void *cmem = &buf[c];
   128ac:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   128b0:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   128b2:	8853      	ldrh	r3, [r2, #2]
   128b4:	3004      	adds	r0, #4
   128b6:	f043 0301 	orr.w	r3, r3, #1
   128ba:	8053      	strh	r3, [r2, #2]
	return mem;
   128bc:	e7da      	b.n	12874 <sys_heap_alloc+0x8>

000128be <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   128be:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   128c0:	f013 0307 	ands.w	r3, r3, #7
   128c4:	d105      	bne.n	128d2 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   128c6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   128c8:	2b00      	cmp	r3, #0
   128ca:	bf0c      	ite	eq
   128cc:	2000      	moveq	r0, #0
   128ce:	2003      	movne	r0, #3
   128d0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   128d2:	2b02      	cmp	r3, #2
   128d4:	d105      	bne.n	128e2 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   128d6:	8bc0      	ldrh	r0, [r0, #30]
   128d8:	fab0 f080 	clz	r0, r0
   128dc:	0940      	lsrs	r0, r0, #5
   128de:	0080      	lsls	r0, r0, #2
   128e0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   128e2:	2b01      	cmp	r3, #1
   128e4:	d105      	bne.n	128f2 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   128e6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   128e8:	2b00      	cmp	r3, #0
   128ea:	bf0c      	ite	eq
   128ec:	2000      	moveq	r0, #0
   128ee:	2005      	movne	r0, #5
   128f0:	4770      	bx	lr
	int evt = EVT_NOP;
   128f2:	2000      	movs	r0, #0
}
   128f4:	4770      	bx	lr

000128f6 <validate_args>:
{
   128f6:	b510      	push	{r4, lr}
   128f8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   128fa:	b100      	cbz	r0, 128fe <validate_args+0x8>
   128fc:	b911      	cbnz	r1, 12904 <validate_args+0xe>
		return -EINVAL;
   128fe:	f06f 0015 	mvn.w	r0, #21
}
   12902:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   12904:	1d08      	adds	r0, r1, #4
   12906:	f000 f82f 	bl	12968 <sys_notify_validate>
	if ((rv == 0)
   1290a:	2800      	cmp	r0, #0
   1290c:	d1f9      	bne.n	12902 <validate_args+0xc>
	    && ((cli->notify.flags
   1290e:	68a3      	ldr	r3, [r4, #8]
   12910:	2b03      	cmp	r3, #3
   12912:	d9f6      	bls.n	12902 <validate_args+0xc>
   12914:	e7f3      	b.n	128fe <validate_args+0x8>

00012916 <notify_one>:
{
   12916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1291a:	460d      	mov	r5, r1
   1291c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1291e:	4619      	mov	r1, r3
   12920:	1d28      	adds	r0, r5, #4
{
   12922:	4690      	mov	r8, r2
   12924:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   12926:	f7f6 fa6d 	bl	8e04 <sys_notify_finalize>
	if (cb) {
   1292a:	4604      	mov	r4, r0
   1292c:	b138      	cbz	r0, 1293e <notify_one+0x28>
		cb(mgr, cli, state, res);
   1292e:	4633      	mov	r3, r6
   12930:	4642      	mov	r2, r8
   12932:	4629      	mov	r1, r5
   12934:	4638      	mov	r0, r7
   12936:	46a4      	mov	ip, r4
}
   12938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1293c:	4760      	bx	ip
}
   1293e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012942 <onoff_manager_init>:
{
   12942:	b538      	push	{r3, r4, r5, lr}
   12944:	460c      	mov	r4, r1
	if ((mgr == NULL)
   12946:	4605      	mov	r5, r0
   12948:	b158      	cbz	r0, 12962 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1294a:	b151      	cbz	r1, 12962 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1294c:	680b      	ldr	r3, [r1, #0]
   1294e:	b143      	cbz	r3, 12962 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   12950:	684b      	ldr	r3, [r1, #4]
   12952:	b133      	cbz	r3, 12962 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   12954:	2220      	movs	r2, #32
   12956:	2100      	movs	r1, #0
   12958:	f001 fe17 	bl	1458a <memset>
	return 0;
   1295c:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1295e:	612c      	str	r4, [r5, #16]
}
   12960:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   12962:	f06f 0015 	mvn.w	r0, #21
   12966:	e7fb      	b.n	12960 <onoff_manager_init+0x1e>

00012968 <sys_notify_validate>:
	if (notify == NULL) {
   12968:	4603      	mov	r3, r0
   1296a:	b140      	cbz	r0, 1297e <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1296c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1296e:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   12972:	2a02      	cmp	r2, #2
   12974:	d006      	beq.n	12984 <sys_notify_validate+0x1c>
   12976:	2a03      	cmp	r2, #3
   12978:	d004      	beq.n	12984 <sys_notify_validate+0x1c>
   1297a:	2a01      	cmp	r2, #1
   1297c:	d005      	beq.n	1298a <sys_notify_validate+0x22>
   1297e:	f06f 0015 	mvn.w	r0, #21
}
   12982:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   12984:	681a      	ldr	r2, [r3, #0]
   12986:	2a00      	cmp	r2, #0
   12988:	d0f9      	beq.n	1297e <sys_notify_validate+0x16>
		notify->result = 0;
   1298a:	2000      	movs	r0, #0
   1298c:	6098      	str	r0, [r3, #8]
   1298e:	4770      	bx	lr

00012990 <outs>:
{
   12990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12994:	4607      	mov	r7, r0
   12996:	4688      	mov	r8, r1
   12998:	4615      	mov	r5, r2
   1299a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1299c:	4614      	mov	r4, r2
   1299e:	42b4      	cmp	r4, r6
   129a0:	d305      	bcc.n	129ae <outs+0x1e>
   129a2:	b10e      	cbz	r6, 129a8 <outs+0x18>
	return (int)count;
   129a4:	1b60      	subs	r0, r4, r5
   129a6:	e008      	b.n	129ba <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   129a8:	7823      	ldrb	r3, [r4, #0]
   129aa:	2b00      	cmp	r3, #0
   129ac:	d0fa      	beq.n	129a4 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   129ae:	4641      	mov	r1, r8
   129b0:	f814 0b01 	ldrb.w	r0, [r4], #1
   129b4:	47b8      	blx	r7
		if (rc < 0) {
   129b6:	2800      	cmp	r0, #0
   129b8:	daf1      	bge.n	1299e <outs+0xe>
}
   129ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000129be <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   129be:	4040      	eors	r0, r0
   129c0:	f380 8811 	msr	BASEPRI, r0
   129c4:	f04f 0004 	mov.w	r0, #4
   129c8:	df02      	svc	2
}
   129ca:	4770      	bx	lr

000129cc <assert_print>:

void assert_print(const char *fmt, ...)
{
   129cc:	b40f      	push	{r0, r1, r2, r3}
   129ce:	b507      	push	{r0, r1, r2, lr}
   129d0:	a904      	add	r1, sp, #16
   129d2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   129d6:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   129d8:	f7f5 fe12 	bl	8600 <vprintk>

	va_end(ap);
}
   129dc:	b003      	add	sp, #12
   129de:	f85d eb04 	ldr.w	lr, [sp], #4
   129e2:	b004      	add	sp, #16
   129e4:	4770      	bx	lr

000129e6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   129e6:	4770      	bx	lr

000129e8 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   129e8:	2806      	cmp	r0, #6
   129ea:	d108      	bne.n	129fe <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   129ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   129f0:	2201      	movs	r2, #1
   129f2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   129f6:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   129fa:	bf20      	wfe
    while (true)
   129fc:	e7fd      	b.n	129fa <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   129fe:	4770      	bx	lr

00012a00 <pm_state_exit_post_ops>:
   12a00:	2300      	movs	r3, #0
   12a02:	f383 8811 	msr	BASEPRI, r3
   12a06:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   12a0a:	4770      	bx	lr

00012a0c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   12a0c:	f7fc bbe0 	b.w	f1d0 <z_fatal_error>

00012a10 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   12a10:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   12a12:	6800      	ldr	r0, [r0, #0]
   12a14:	f7fc bbdc 	b.w	f1d0 <z_fatal_error>

00012a18 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   12a18:	2100      	movs	r1, #0
   12a1a:	2001      	movs	r0, #1
   12a1c:	f7ff bff6 	b.w	12a0c <z_arm_fatal_error>

00012a20 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   12a20:	b508      	push	{r3, lr}
	handler();
   12a22:	f7f7 f8bd 	bl	9ba0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   12a26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   12a2a:	f7f7 b987 	b.w	9d3c <z_arm_exc_exit>

00012a2e <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   12a2e:	6e83      	ldr	r3, [r0, #104]	; 0x68
   12a30:	f383 880b 	msr	PSPLIM, r3
}
   12a34:	4770      	bx	lr

00012a36 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   12a36:	4770      	bx	lr

00012a38 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   12a38:	4770      	bx	lr

00012a3a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   12a3a:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   12a3e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   12a42:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   12a44:	bf08      	it	eq
   12a46:	f06f 0015 	mvneq.w	r0, #21
   12a4a:	4770      	bx	lr

00012a4c <mpu_configure_region>:
{
   12a4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
   12a4e:	890a      	ldrh	r2, [r1, #8]
   12a50:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
   12a52:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   12a54:	684d      	ldr	r5, [r1, #4]
   12a56:	f002 021f 	and.w	r2, r2, #31
   12a5a:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
   12a5e:	9300      	str	r3, [sp, #0]
   12a60:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   12a64:	f023 031f 	bic.w	r3, r3, #31
   12a68:	1e6a      	subs	r2, r5, #1
   12a6a:	4413      	add	r3, r2
   12a6c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   12a70:	280f      	cmp	r0, #15
   12a72:	9303      	str	r3, [sp, #12]
   12a74:	d804      	bhi.n	12a80 <mpu_configure_region+0x34>
	region_init(index, region_conf);
   12a76:	4669      	mov	r1, sp
   12a78:	f7f7 fbc6 	bl	a208 <region_init>
}
   12a7c:	b004      	add	sp, #16
   12a7e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   12a80:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
   12a84:	e7fa      	b.n	12a7c <mpu_configure_region+0x30>

00012a86 <_stdout_hook_default>:
}
   12a86:	f04f 30ff 	mov.w	r0, #4294967295
   12a8a:	4770      	bx	lr

00012a8c <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   12a8c:	f7fc bb9a 	b.w	f1c4 <z_impl_z_errno>

00012a90 <offloaded_netdev_if_enable>:
   12a90:	6803      	ldr	r3, [r0, #0]
#include <zephyr/net/net_if.h>
#include <zephyr/net/offloaded_netdev.h>

static inline int offloaded_netdev_if_enable(struct net_if *iface, bool state)
{
	const struct offloaded_if_api *off_if = net_if_get_device(iface)->api;
   12a92:	681b      	ldr	r3, [r3, #0]
   12a94:	689b      	ldr	r3, [r3, #8]

	if (!off_if || !(off_if->enable)) {
   12a96:	b113      	cbz	r3, 12a9e <offloaded_netdev_if_enable+0xe>
   12a98:	685b      	ldr	r3, [r3, #4]
   12a9a:	b103      	cbz	r3, 12a9e <offloaded_netdev_if_enable+0xe>
		return 0;
	}

	return off_if->enable(iface, state);
   12a9c:	4718      	bx	r3
}
   12a9e:	2000      	movs	r0, #0
   12aa0:	4770      	bx	lr

00012aa2 <net_init>:

	return status;
}

static int net_init(void)
{
   12aa2:	b508      	push	{r3, lr}
	net_if_init();
   12aa4:	f7f7 fec4 	bl	a830 <net_if_init>
	net_if_post_init();
   12aa8:	f7f7 ff00 	bl	a8ac <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   12aac:	2000      	movs	r0, #0
   12aae:	bd08      	pop	{r3, pc}

00012ab0 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   12ab0:	b110      	cbz	r0, 12ab8 <net_if_l2+0x8>
   12ab2:	6800      	ldr	r0, [r0, #0]
   12ab4:	b100      	cbz	r0, 12ab8 <net_if_l2+0x8>
	return iface->if_dev->l2;
   12ab6:	6840      	ldr	r0, [r0, #4]
}
   12ab8:	4770      	bx	lr

00012aba <net_if_flag_is_set>:
	if (iface == NULL) {
   12aba:	b130      	cbz	r0, 12aca <net_if_flag_is_set+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12abc:	6803      	ldr	r3, [r0, #0]
   12abe:	330c      	adds	r3, #12
   12ac0:	e8d3 0faf 	lda	r0, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   12ac4:	4108      	asrs	r0, r1
   12ac6:	f000 0001 	and.w	r0, r0, #1
}
   12aca:	4770      	bx	lr

00012acc <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
   12acc:	b510      	push	{r4, lr}
   12ace:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   12ad0:	f7ff ffee 	bl	12ab0 <net_if_l2>
   12ad4:	b128      	cbz	r0, 12ae2 <l2_flags_get.isra.0+0x16>
   12ad6:	68c2      	ldr	r2, [r0, #12]
   12ad8:	b11a      	cbz	r2, 12ae2 <l2_flags_get.isra.0+0x16>
}
   12ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   12ade:	4618      	mov	r0, r3
   12ae0:	4710      	bx	r2
}
   12ae2:	bd10      	pop	{r4, pc}

00012ae4 <net_if_up>:
{
   12ae4:	b538      	push	{r3, r4, r5, lr}
   12ae6:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
   12ae8:	f04f 31ff 	mov.w	r1, #4294967295
   12aec:	f04f 30ff 	mov.w	r0, #4294967295
   12af0:	f7f7 fe0a 	bl	a708 <k_mutex_lock.constprop.0.isra.0>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   12af4:	2100      	movs	r1, #0
   12af6:	4628      	mov	r0, r5
   12af8:	f7ff ffdf 	bl	12aba <net_if_flag_is_set>
   12afc:	b9b0      	cbnz	r0, 12b2c <net_if_up+0x48>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   12afe:	4628      	mov	r0, r5
   12b00:	f7ff ffd6 	bl	12ab0 <net_if_l2>
   12b04:	4604      	mov	r4, r0
   12b06:	b130      	cbz	r0, 12b16 <net_if_up+0x32>
   12b08:	6884      	ldr	r4, [r0, #8]
   12b0a:	b124      	cbz	r4, 12b16 <net_if_up+0x32>
	status = net_if_l2(iface)->enable(iface, true);
   12b0c:	2101      	movs	r1, #1
   12b0e:	4628      	mov	r0, r5
   12b10:	47a0      	blx	r4
	if (status < 0) {
   12b12:	1e04      	subs	r4, r0, #0
   12b14:	db06      	blt.n	12b24 <net_if_up+0x40>
	net_if_flag_set(iface, NET_IF_UP);
   12b16:	4628      	mov	r0, r5
   12b18:	2100      	movs	r1, #0
   12b1a:	f7f7 fda7 	bl	a66c <net_if_flag_set>
	update_operational_state(iface);
   12b1e:	4628      	mov	r0, r5
   12b20:	f7f7 fe00 	bl	a724 <update_operational_state>
	k_mutex_unlock(&lock);
   12b24:	f7f7 fdf8 	bl	a718 <k_mutex_unlock.constprop.0.isra.0>
}
   12b28:	4620      	mov	r0, r4
   12b2a:	bd38      	pop	{r3, r4, r5, pc}
		status = -EALREADY;
   12b2c:	f06f 0477 	mvn.w	r4, #119	; 0x77
   12b30:	e7f8      	b.n	12b24 <net_if_up+0x40>

00012b32 <set_on_state>:
	__asm__ volatile(
   12b32:	f04f 0320 	mov.w	r3, #32
   12b36:	f3ef 8211 	mrs	r2, BASEPRI
   12b3a:	f383 8812 	msr	BASEPRI_MAX, r3
   12b3e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   12b42:	6803      	ldr	r3, [r0, #0]
   12b44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   12b48:	f043 0302 	orr.w	r3, r3, #2
   12b4c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   12b4e:	f382 8811 	msr	BASEPRI, r2
   12b52:	f3bf 8f6f 	isb	sy
}
   12b56:	4770      	bx	lr

00012b58 <async_start>:
{
   12b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12b5a:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   12b5c:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   12b5e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   12b60:	f04f 0520 	mov.w	r5, #32
   12b64:	f3ef 8611 	mrs	r6, BASEPRI
   12b68:	f385 8812 	msr	BASEPRI_MAX, r5
   12b6c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   12b70:	250c      	movs	r5, #12
   12b72:	fb05 4401 	mla	r4, r5, r1, r4
   12b76:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   12b78:	f005 0c07 	and.w	ip, r5, #7
   12b7c:	f1bc 0f01 	cmp.w	ip, #1
   12b80:	d10c      	bne.n	12b9c <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   12b82:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
   12b84:	f386 8811 	msr	BASEPRI, r6
   12b88:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   12b8c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   12b90:	6843      	ldr	r3, [r0, #4]
   12b92:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   12b96:	4798      	blx	r3
	return 0;
   12b98:	2000      	movs	r0, #0
}
   12b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   12b9c:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   12ba0:	42af      	cmp	r7, r5
   12ba2:	f386 8811 	msr	BASEPRI, r6
   12ba6:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   12baa:	bf0c      	ite	eq
   12bac:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   12bb0:	f04f 30ff 	movne.w	r0, #4294967295
   12bb4:	e7f1      	b.n	12b9a <async_start+0x42>

00012bb6 <api_start>:
{
   12bb6:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   12bb8:	2480      	movs	r4, #128	; 0x80
   12bba:	9400      	str	r4, [sp, #0]
   12bbc:	f7ff ffcc 	bl	12b58 <async_start>
}
   12bc0:	b002      	add	sp, #8
   12bc2:	bd10      	pop	{r4, pc}

00012bc4 <onoff_started_callback>:
	return &data->mgr[type];
   12bc4:	6900      	ldr	r0, [r0, #16]
   12bc6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   12bc8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   12bcc:	2100      	movs	r1, #0
   12bce:	4710      	bx	r2

00012bd0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   12bd0:	2000      	movs	r0, #0
   12bd2:	f7f9 bf01 	b.w	c9d8 <nrfx_clock_start>

00012bd6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   12bd6:	2000      	movs	r0, #0
   12bd8:	f7f9 bf60 	b.w	ca9c <nrfx_clock_stop>

00012bdc <blocking_start_callback>:
{
   12bdc:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   12bde:	f7fd b907 	b.w	fdf0 <z_impl_k_sem_give>

00012be2 <api_stop>:
	return stop(dev, subsys, CTX_API);
   12be2:	2280      	movs	r2, #128	; 0x80
   12be4:	f7f7 bec8 	b.w	a978 <stop>

00012be8 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   12be8:	4608      	mov	r0, r1
   12bea:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   12bec:	4611      	mov	r1, r2
   12bee:	f7f9 fdc1 	bl	c774 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   12bf2:	2800      	cmp	r0, #0
	}

	return 0;
}
   12bf4:	bf18      	it	ne
   12bf6:	f06f 0004 	mvnne.w	r0, #4
   12bfa:	bd08      	pop	{r3, pc}

00012bfc <entropy_psa_crypto_rng_init>:
{
   12bfc:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   12bfe:	f000 fc18 	bl	13432 <psa_crypto_init>
		return -EIO;
   12c02:	2800      	cmp	r0, #0
}
   12c04:	bf18      	it	ne
   12c06:	f06f 0004 	mvnne.w	r0, #4
   12c0a:	bd08      	pop	{r3, pc}

00012c0c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12c0c:	6843      	ldr	r3, [r0, #4]
}
   12c0e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12c10:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   12c12:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   12c14:	600b      	str	r3, [r1, #0]
}
   12c16:	4770      	bx	lr

00012c18 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12c18:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   12c1a:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12c1e:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   12c20:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   12c24:	6098      	str	r0, [r3, #8]
}
   12c26:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   12c28:	60d9      	str	r1, [r3, #12]
   12c2a:	4770      	bx	lr

00012c2c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12c2c:	6843      	ldr	r3, [r0, #4]
}
   12c2e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12c30:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   12c32:	6099      	str	r1, [r3, #8]
}
   12c34:	4770      	bx	lr

00012c36 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12c36:	6843      	ldr	r3, [r0, #4]
}
   12c38:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12c3a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   12c3c:	60d9      	str	r1, [r3, #12]
}
   12c3e:	4770      	bx	lr

00012c40 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12c40:	6843      	ldr	r3, [r0, #4]
   12c42:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   12c44:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   12c46:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   12c4a:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   12c4c:	6090      	str	r0, [r2, #8]
}
   12c4e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   12c50:	60d3      	str	r3, [r2, #12]
   12c52:	4770      	bx	lr

00012c54 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   12c54:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   12c56:	6843      	ldr	r3, [r0, #4]
   12c58:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   12c5a:	7a05      	ldrb	r5, [r0, #8]
   12c5c:	6844      	ldr	r4, [r0, #4]
   12c5e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   12c62:	42a3      	cmp	r3, r4
   12c64:	d302      	bcc.n	12c6c <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   12c66:	f06f 0001 	mvn.w	r0, #1
}
   12c6a:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   12c6c:	795c      	ldrb	r4, [r3, #5]
   12c6e:	428c      	cmp	r4, r1
   12c70:	d001      	beq.n	12c76 <pinctrl_lookup_state+0x22>
		(*state)++;
   12c72:	3308      	adds	r3, #8
   12c74:	e7f0      	b.n	12c58 <pinctrl_lookup_state+0x4>
			return 0;
   12c76:	2000      	movs	r0, #0
   12c78:	e7f7      	b.n	12c6a <pinctrl_lookup_state+0x16>

00012c7a <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   12c7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c7e:	4615      	mov	r5, r2
   12c80:	4681      	mov	r9, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12c82:	f04f 0801 	mov.w	r8, #1
   12c86:	b085      	sub	sp, #20
   12c88:	eb00 0781 	add.w	r7, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   12c8c:	454f      	cmp	r7, r9
   12c8e:	d103      	bne.n	12c98 <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   12c90:	2000      	movs	r0, #0
}
   12c92:	b005      	add	sp, #20
   12c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   12c98:	f8d9 3000 	ldr.w	r3, [r9]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   12c9c:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   12ca0:	f3c3 2643 	ubfx	r6, r3, #9, #4
			pin = 0xFFFFFFFFU;
   12ca4:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   12ca6:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   12caa:	bf08      	it	eq
   12cac:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   12cb0:	2b19      	cmp	r3, #25
   12cb2:	d873      	bhi.n	12d9c <pinctrl_configure_pins+0x122>
   12cb4:	e8df f003 	tbb	[pc, r3]
   12cb8:	221f190d 	.word	0x221f190d
   12cbc:	72223325 	.word	0x72223325
   12cc0:	38727272 	.word	0x38727272
   12cc4:	7272725d 	.word	0x7272725d
   12cc8:	72727272 	.word	0x72727272
   12ccc:	69607272 	.word	0x69607272
   12cd0:	6f6c      	.short	0x6f6c
			NRF_PSEL_UART(reg, TXD) = pin;
   12cd2:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   12cd6:	a803      	add	r0, sp, #12
   12cd8:	9403      	str	r4, [sp, #12]
   12cda:	f7f8 fa19 	bl	b110 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12cde:	fa08 f304 	lsl.w	r3, r8, r4
        nrf_gpio_pin_set(pin_number);
   12ce2:	f04f 0a01 	mov.w	sl, #1
    p_reg->OUTSET = set_mask;
   12ce6:	6083      	str	r3, [r0, #8]
   12ce8:	e003      	b.n	12cf2 <pinctrl_configure_pins+0x78>
			NRF_PSEL_UART(reg, RXD) = pin;
   12cea:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   12cee:	f04f 0a00 	mov.w	sl, #0
        nrf_gpio_pin_set(pin_number);
   12cf2:	46d3      	mov	fp, sl
   12cf4:	e020      	b.n	12d38 <pinctrl_configure_pins+0xbe>
			NRF_PSEL_UART(reg, RTS) = pin;
   12cf6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   12cfa:	e7ec      	b.n	12cd6 <pinctrl_configure_pins+0x5c>
			NRF_PSEL_UART(reg, CTS) = pin;
   12cfc:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   12d00:	e7f5      	b.n	12cee <pinctrl_configure_pins+0x74>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   12d02:	f04f 0a00 	mov.w	sl, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   12d06:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   12d0a:	a803      	add	r0, sp, #12
   12d0c:	9403      	str	r4, [sp, #12]
   12d0e:	f7f8 f9ff 	bl	b110 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   12d12:	fa08 f304 	lsl.w	r3, r8, r4
    p_reg->OUTCLR = clr_mask;
   12d16:	f04f 0b01 	mov.w	fp, #1
   12d1a:	60c3      	str	r3, [r0, #12]
   12d1c:	e00c      	b.n	12d38 <pinctrl_configure_pins+0xbe>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   12d1e:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   12d22:	f04f 0a01 	mov.w	sl, #1
   12d26:	e7f0      	b.n	12d0a <pinctrl_configure_pins+0x90>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   12d28:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   12d2c:	2e00      	cmp	r6, #0
   12d2e:	d1de      	bne.n	12cee <pinctrl_configure_pins+0x74>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   12d30:	f04f 0a00 	mov.w	sl, #0
				drive = NRF_DRIVE_S0D1;
   12d34:	2606      	movs	r6, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   12d36:	46d3      	mov	fp, sl
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   12d38:	f859 3b04 	ldr.w	r3, [r9], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   12d3c:	a803      	add	r0, sp, #12
   12d3e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   12d42:	2a00      	cmp	r2, #0
   12d44:	bf1c      	itt	ne
   12d46:	f04f 0b00 	movne.w	fp, #0
   12d4a:	f04f 0a01 	movne.w	sl, #1
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   12d4e:	9301      	str	r3, [sp, #4]
   12d50:	9403      	str	r4, [sp, #12]
   12d52:	f7f8 f9dd 	bl	b110 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   12d56:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   12d58:	0236      	lsls	r6, r6, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   12d5a:	f3c3 13c1 	ubfx	r3, r3, #7, #2
   12d5e:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
   12d62:	ea46 060b 	orr.w	r6, r6, fp
   12d66:	ea46 064a 	orr.w	r6, r6, sl, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   12d6a:	3480      	adds	r4, #128	; 0x80
   12d6c:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   12d70:	e78c      	b.n	12c8c <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   12d72:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   12d76:	e7d9      	b.n	12d2c <pinctrl_configure_pins+0xb2>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   12d78:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   12d7c:	f8d9 3000 	ldr.w	r3, [r9]
   12d80:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   12d84:	2b00      	cmp	r3, #0
   12d86:	d0cc      	beq.n	12d22 <pinctrl_configure_pins+0xa8>
   12d88:	e7a5      	b.n	12cd6 <pinctrl_configure_pins+0x5c>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   12d8a:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   12d8e:	e7f5      	b.n	12d7c <pinctrl_configure_pins+0x102>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   12d90:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   12d94:	e7f2      	b.n	12d7c <pinctrl_configure_pins+0x102>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   12d96:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   12d9a:	e7ef      	b.n	12d7c <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
   12d9c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12da0:	e777      	b.n	12c92 <pinctrl_configure_pins+0x18>

00012da2 <uarte_nrfx_config_get>:
{
   12da2:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   12da4:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   12da6:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   12daa:	e883 0003 	stmia.w	r3, {r0, r1}
}
   12dae:	2000      	movs	r0, #0
   12db0:	4770      	bx	lr

00012db2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   12db2:	6843      	ldr	r3, [r0, #4]
   12db4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   12db6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   12dba:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   12dbe:	4770      	bx	lr

00012dc0 <tx_start>:
{
   12dc0:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   12dc2:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   12dc4:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   12dc6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   12dca:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12dce:	2200      	movs	r2, #0
   12dd0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   12dd4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   12dd8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   12ddc:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   12de0:	6862      	ldr	r2, [r4, #4]
   12de2:	06d2      	lsls	r2, r2, #27
   12de4:	d508      	bpl.n	12df8 <tx_start+0x38>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   12de6:	2108      	movs	r1, #8
	return config->uarte_regs;
   12de8:	6842      	ldr	r2, [r0, #4]
   12dea:	6812      	ldr	r2, [r2, #0]
   12dec:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   12df0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   12df4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12df8:	2201      	movs	r2, #1
   12dfa:	609a      	str	r2, [r3, #8]
}
   12dfc:	bd10      	pop	{r4, pc}

00012dfe <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   12dfe:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   12e00:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   12e02:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12e04:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   12e08:	b150      	cbz	r0, 12e20 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12e0a:	2000      	movs	r0, #0
	*c = *data->rx_data;
   12e0c:	6992      	ldr	r2, [r2, #24]
   12e0e:	7812      	ldrb	r2, [r2, #0]
   12e10:	700a      	strb	r2, [r1, #0]
   12e12:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   12e16:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12e1a:	2201      	movs	r2, #1
   12e1c:	601a      	str	r2, [r3, #0]
	return 0;
   12e1e:	4770      	bx	lr
		return -1;
   12e20:	f04f 30ff 	mov.w	r0, #4294967295
}
   12e24:	4770      	bx	lr

00012e26 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   12e26:	2a00      	cmp	r2, #0
{
   12e28:	b510      	push	{r4, lr}
   12e2a:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   12e2c:	dd10      	ble.n	12e50 <uarte_nrfx_fifo_read+0x2a>
	return config->uarte_regs;
   12e2e:	6843      	ldr	r3, [r0, #4]
   12e30:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12e32:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   12e36:	b150      	cbz	r0, 12e4e <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12e38:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = dev->data;
   12e3a:	6922      	ldr	r2, [r4, #16]
   12e3c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   12e40:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12e44:	2001      	movs	r0, #1
		rx_data[num_rx++] = *data->rx_data;
   12e46:	6992      	ldr	r2, [r2, #24]
   12e48:	7812      	ldrb	r2, [r2, #0]
   12e4a:	700a      	strb	r2, [r1, #0]
   12e4c:	6018      	str	r0, [r3, #0]
}
   12e4e:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   12e50:	2000      	movs	r0, #0
   12e52:	e7fc      	b.n	12e4e <uarte_nrfx_fifo_read+0x28>

00012e54 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   12e54:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   12e56:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   12e58:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   12e5a:	f04f 0020 	mov.w	r0, #32
   12e5e:	f3ef 8311 	mrs	r3, BASEPRI
   12e62:	f380 8812 	msr	BASEPRI_MAX, r0
   12e66:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   12e6a:	2000      	movs	r0, #0
   12e6c:	68c9      	ldr	r1, [r1, #12]
   12e6e:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   12e70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   12e74:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   12e78:	f383 8811 	msr	BASEPRI, r3
   12e7c:	f3bf 8f6f 	isb	sy
}
   12e80:	4770      	bx	lr

00012e82 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   12e82:	2201      	movs	r2, #1
   12e84:	6903      	ldr	r3, [r0, #16]
   12e86:	68db      	ldr	r3, [r3, #12]
   12e88:	739a      	strb	r2, [r3, #14]
}
   12e8a:	4770      	bx	lr

00012e8c <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   12e8c:	6903      	ldr	r3, [r0, #16]
   12e8e:	68db      	ldr	r3, [r3, #12]
   12e90:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   12e92:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   12e96:	b962      	cbnz	r2, 12eb2 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   12e98:	6842      	ldr	r2, [r0, #4]
   12e9a:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12e9c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   12ea0:	b140      	cbz	r0, 12eb4 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   12ea2:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   12ea6:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   12eaa:	d003      	beq.n	12eb4 <uarte_nrfx_irq_tx_ready_complete+0x28>
   12eac:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   12eae:	6119      	str	r1, [r3, #16]
   12eb0:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   12eb2:	2000      	movs	r0, #0
}
   12eb4:	4770      	bx	lr

00012eb6 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   12eb6:	6843      	ldr	r3, [r0, #4]
   12eb8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12eba:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   12ebe:	3800      	subs	r0, #0
   12ec0:	bf18      	it	ne
   12ec2:	2001      	movne	r0, #1
   12ec4:	4770      	bx	lr

00012ec6 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   12ec6:	2210      	movs	r2, #16
	return config->uarte_regs;
   12ec8:	6843      	ldr	r3, [r0, #4]
   12eca:	681b      	ldr	r3, [r3, #0]
   12ecc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   12ed0:	4770      	bx	lr

00012ed2 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   12ed2:	2210      	movs	r2, #16
	return config->uarte_regs;
   12ed4:	6843      	ldr	r3, [r0, #4]
   12ed6:	681b      	ldr	r3, [r3, #0]
   12ed8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   12edc:	4770      	bx	lr

00012ede <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   12ede:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   12ee2:	6843      	ldr	r3, [r0, #4]
   12ee4:	681b      	ldr	r3, [r3, #0]
   12ee6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   12eea:	4770      	bx	lr

00012eec <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   12eec:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   12ef0:	6843      	ldr	r3, [r0, #4]
   12ef2:	681b      	ldr	r3, [r3, #0]
   12ef4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   12ef8:	4770      	bx	lr

00012efa <uarte_nrfx_irq_is_pending>:
{
   12efa:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   12efc:	6843      	ldr	r3, [r0, #4]
{
   12efe:	4604      	mov	r4, r0
	return config->uarte_regs;
   12f00:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   12f02:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   12f06:	025b      	lsls	r3, r3, #9
   12f08:	d405      	bmi.n	12f16 <uarte_nrfx_irq_is_pending+0x1c>
   12f0a:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   12f0e:	f010 0010 	ands.w	r0, r0, #16
   12f12:	d106      	bne.n	12f22 <uarte_nrfx_irq_is_pending+0x28>
}
   12f14:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   12f16:	f7ff ffb9 	bl	12e8c <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   12f1a:	2800      	cmp	r0, #0
   12f1c:	d0f5      	beq.n	12f0a <uarte_nrfx_irq_is_pending+0x10>
		||
   12f1e:	2001      	movs	r0, #1
   12f20:	e7f8      	b.n	12f14 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   12f22:	4620      	mov	r0, r4
   12f24:	f7ff ffc7 	bl	12eb6 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   12f28:	3800      	subs	r0, #0
   12f2a:	bf18      	it	ne
   12f2c:	2001      	movne	r0, #1
   12f2e:	e7f1      	b.n	12f14 <uarte_nrfx_irq_is_pending+0x1a>

00012f30 <uarte_nrfx_irq_update>:
}
   12f30:	2001      	movs	r0, #1
   12f32:	4770      	bx	lr

00012f34 <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   12f34:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   12f36:	68d8      	ldr	r0, [r3, #12]
   12f38:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   12f3a:	68db      	ldr	r3, [r3, #12]
   12f3c:	605a      	str	r2, [r3, #4]
}
   12f3e:	4770      	bx	lr

00012f40 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   12f40:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   12f42:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12f44:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   12f48:	b940      	cbnz	r0, 12f5c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   12f4a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   12f4c:	079b      	lsls	r3, r3, #30
   12f4e:	d406      	bmi.n	12f5e <is_tx_ready.isra.0+0x1e>
   12f50:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   12f54:	3800      	subs	r0, #0
   12f56:	bf18      	it	ne
   12f58:	2001      	movne	r0, #1
   12f5a:	4770      	bx	lr
   12f5c:	2001      	movs	r0, #1
}
   12f5e:	4770      	bx	lr

00012f60 <uarte_nrfx_fifo_fill>:
{
   12f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   12f62:	6906      	ldr	r6, [r0, #16]
{
   12f64:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
   12f66:	68f3      	ldr	r3, [r6, #12]
   12f68:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12f6a:	3310      	adds	r3, #16
   12f6c:	4294      	cmp	r4, r2
   12f6e:	bfa8      	it	ge
   12f70:	4614      	movge	r4, r2
   12f72:	2201      	movs	r2, #1
   12f74:	e8d3 0fef 	ldaex	r0, [r3]
   12f78:	2800      	cmp	r0, #0
   12f7a:	d103      	bne.n	12f84 <uarte_nrfx_fifo_fill+0x24>
   12f7c:	e8c3 2fe7 	stlex	r7, r2, [r3]
   12f80:	2f00      	cmp	r7, #0
   12f82:	d1f7      	bne.n	12f74 <uarte_nrfx_fifo_fill+0x14>
   12f84:	bf0c      	ite	eq
   12f86:	4613      	moveq	r3, r2
   12f88:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   12f8a:	d11f      	bne.n	12fcc <uarte_nrfx_fifo_fill+0x6c>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
   12f8c:	68f3      	ldr	r3, [r6, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12f8e:	4622      	mov	r2, r4
   12f90:	6898      	ldr	r0, [r3, #8]
   12f92:	f001 faed 	bl	14570 <memcpy>
	__asm__ volatile(
   12f96:	f04f 0320 	mov.w	r3, #32
   12f9a:	f3ef 8711 	mrs	r7, BASEPRI
   12f9e:	f383 8812 	msr	BASEPRI_MAX, r3
   12fa2:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   12fa6:	6868      	ldr	r0, [r5, #4]
   12fa8:	f7ff ffca 	bl	12f40 <is_tx_ready.isra.0>
   12fac:	68f3      	ldr	r3, [r6, #12]
   12fae:	b938      	cbnz	r0, 12fc0 <uarte_nrfx_fifo_fill+0x60>
		len = 0;
   12fb0:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   12fb2:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   12fb4:	f387 8811 	msr	BASEPRI, r7
   12fb8:	f3bf 8f6f 	isb	sy
}
   12fbc:	4620      	mov	r0, r4
   12fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   12fc0:	4622      	mov	r2, r4
   12fc2:	4628      	mov	r0, r5
   12fc4:	6899      	ldr	r1, [r3, #8]
   12fc6:	f7ff fefb 	bl	12dc0 <tx_start>
   12fca:	e7f3      	b.n	12fb4 <uarte_nrfx_fifo_fill+0x54>
		return 0;
   12fcc:	461c      	mov	r4, r3
   12fce:	e7f5      	b.n	12fbc <uarte_nrfx_fifo_fill+0x5c>

00012fd0 <uarte_nrfx_isr_int>:
{
   12fd0:	b410      	push	{r4}
	const struct uarte_nrfx_config *config = dev->config;
   12fd2:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   12fd4:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   12fd6:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   12fda:	05c9      	lsls	r1, r1, #23
   12fdc:	d518      	bpl.n	13010 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12fde:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   12fe2:	b1a9      	cbz	r1, 13010 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   12fe4:	f04f 0420 	mov.w	r4, #32
   12fe8:	f3ef 8111 	mrs	r1, BASEPRI
   12fec:	f384 8812 	msr	BASEPRI_MAX, r4
   12ff0:	f3bf 8f6f 	isb	sy
   12ff4:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   12ff8:	b134      	cbz	r4, 13008 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12ffa:	2400      	movs	r4, #0
   12ffc:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   13000:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13004:	2401      	movs	r4, #1
   13006:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   13008:	f381 8811 	msr	BASEPRI, r1
   1300c:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   13010:	6852      	ldr	r2, [r2, #4]
   13012:	06d2      	lsls	r2, r2, #27
   13014:	d51a      	bpl.n	1304c <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   13016:	f04f 0220 	mov.w	r2, #32
   1301a:	f3ef 8111 	mrs	r1, BASEPRI
   1301e:	f382 8812 	msr	BASEPRI_MAX, r2
   13022:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13026:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1302a:	b112      	cbz	r2, 13032 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1302c:	2200      	movs	r2, #0
   1302e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   13032:	6902      	ldr	r2, [r0, #16]
   13034:	68d2      	ldr	r2, [r2, #12]
   13036:	b10a      	cbz	r2, 1303c <uarte_nrfx_isr_int+0x6c>
   13038:	6912      	ldr	r2, [r2, #16]
   1303a:	b91a      	cbnz	r2, 13044 <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   1303c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   13040:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   13044:	f381 8811 	msr	BASEPRI, r1
   13048:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
   1304c:	6902      	ldr	r2, [r0, #16]
	if (!data->int_driven) {
   1304e:	68d4      	ldr	r4, [r2, #12]
   13050:	b16c      	cbz	r4, 1306e <uarte_nrfx_isr_int+0x9e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13052:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   13056:	b161      	cbz	r1, 13072 <uarte_nrfx_isr_int+0xa2>
		data->int_driven->fifo_fill_lock = 0;
   13058:	2100      	movs	r1, #0
   1305a:	6121      	str	r1, [r4, #16]
		if (data->int_driven->disable_tx_irq) {
   1305c:	68d4      	ldr	r4, [r2, #12]
   1305e:	7ba4      	ldrb	r4, [r4, #14]
   13060:	b13c      	cbz	r4, 13072 <uarte_nrfx_isr_int+0xa2>
    p_reg->INTENCLR = mask;
   13062:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   13066:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1306a:	68d3      	ldr	r3, [r2, #12]
   1306c:	7399      	strb	r1, [r3, #14]
}
   1306e:	bc10      	pop	{r4}
   13070:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13072:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   13076:	b121      	cbz	r1, 13082 <uarte_nrfx_isr_int+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13078:	2100      	movs	r1, #0
   1307a:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   1307e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   13082:	68d2      	ldr	r2, [r2, #12]
   13084:	6813      	ldr	r3, [r2, #0]
   13086:	2b00      	cmp	r3, #0
   13088:	d0f1      	beq.n	1306e <uarte_nrfx_isr_int+0x9e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1308a:	6851      	ldr	r1, [r2, #4]
}
   1308c:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1308e:	4718      	bx	r3

00013090 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   13090:	4770      	bx	lr

00013092 <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   13092:	f001 b9ab 	b.w	143ec <z_impl_k_busy_wait>

00013096 <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   13096:	f001 b90e 	b.w	142b6 <k_is_in_isr>

0001309a <nrf91_iface_enable>:
#else
	ARG_UNUSED(iface);
	ARG_UNUSED(enabled);
	return 0;
#endif /* CONFIG_NRF9160_CONNECTIVITY */
}
   1309a:	2000      	movs	r0, #0
   1309c:	4770      	bx	lr

0001309e <nrf91_socket_offload_setsockopt>:
{
   1309e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   130a2:	460e      	mov	r6, r1
   130a4:	4615      	mov	r5, r2
   130a6:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = { 0 };
   130a8:	2300      	movs	r3, #0
{
   130aa:	b086      	sub	sp, #24
	int sd = OBJ_TO_SD(obj);
   130ac:	f8d0 8000 	ldr.w	r8, [r0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   130b0:	4629      	mov	r1, r5
   130b2:	4630      	mov	r0, r6
   130b4:	aa03      	add	r2, sp, #12
	struct nrf_timeval nrf_timeo = { 0 };
   130b6:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
   130ba:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   130bc:	f7f8 fdce 	bl	bc5c <z_to_nrf_optname>
   130c0:	2800      	cmp	r0, #0
   130c2:	da08      	bge.n	130d6 <nrf91_socket_offload_setsockopt+0x38>
		errno = ENOPROTOOPT;
   130c4:	f7ff fce2 	bl	12a8c <__errno>
   130c8:	236d      	movs	r3, #109	; 0x6d
   130ca:	6003      	str	r3, [r0, #0]
		return -1;
   130cc:	f04f 30ff 	mov.w	r0, #4294967295
}
   130d0:	b006      	add	sp, #24
   130d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   130d6:	2e01      	cmp	r6, #1
   130d8:	d111      	bne.n	130fe <nrf91_socket_offload_setsockopt+0x60>
   130da:	3d14      	subs	r5, #20
   130dc:	2d01      	cmp	r5, #1
   130de:	d806      	bhi.n	130ee <nrf91_socket_offload_setsockopt+0x50>
		if (optval != NULL) {
   130e0:	b12c      	cbz	r4, 130ee <nrf91_socket_offload_setsockopt+0x50>
			nrf_optlen = sizeof(struct nrf_timeval);
   130e2:	2708      	movs	r7, #8
			nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   130e4:	6823      	ldr	r3, [r4, #0]
   130e6:	9304      	str	r3, [sp, #16]
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   130e8:	68a3      	ldr	r3, [r4, #8]
			nrf_optval = &nrf_timeo;
   130ea:	ac04      	add	r4, sp, #16
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   130ec:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   130ee:	4623      	mov	r3, r4
   130f0:	4631      	mov	r1, r6
   130f2:	4640      	mov	r0, r8
   130f4:	9a03      	ldr	r2, [sp, #12]
   130f6:	9700      	str	r7, [sp, #0]
   130f8:	f7fb fb8e 	bl	e818 <nrf_setsockopt>
	return retval;
   130fc:	e7e8      	b.n	130d0 <nrf91_socket_offload_setsockopt+0x32>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   130fe:	f5b6 7f8d 	cmp.w	r6, #282	; 0x11a
   13102:	d1f4      	bne.n	130ee <nrf91_socket_offload_setsockopt+0x50>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   13104:	2d0c      	cmp	r5, #12
   13106:	bf08      	it	eq
   13108:	2704      	moveq	r7, #4
   1310a:	e7f0      	b.n	130ee <nrf91_socket_offload_setsockopt+0x50>

0001310c <nrf91_socket_offload_getsockopt>:
{
   1310c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13110:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   13112:	2300      	movs	r3, #0
{
   13114:	b086      	sub	sp, #24
   13116:	460f      	mov	r7, r1
   13118:	4615      	mov	r5, r2
	struct nrf_timeval nrf_timeo = {0, 0};
   1311a:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   1311e:	2308      	movs	r3, #8
	int sd = OBJ_TO_SD(obj);
   13120:	6806      	ldr	r6, [r0, #0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   13122:	4629      	mov	r1, r5
   13124:	4638      	mov	r0, r7
   13126:	eb0d 0203 	add.w	r2, sp, r3
{
   1312a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   1312e:	9303      	str	r3, [sp, #12]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   13130:	f7f8 fd94 	bl	bc5c <z_to_nrf_optname>
   13134:	2800      	cmp	r0, #0
   13136:	da09      	bge.n	1314c <nrf91_socket_offload_getsockopt+0x40>
		errno = ENOPROTOOPT;
   13138:	f7ff fca8 	bl	12a8c <__errno>
   1313c:	236d      	movs	r3, #109	; 0x6d
		return -1;
   1313e:	f04f 36ff 	mov.w	r6, #4294967295
		errno = ENOPROTOOPT;
   13142:	6003      	str	r3, [r0, #0]
}
   13144:	4630      	mov	r0, r6
   13146:	b006      	add	sp, #24
   13148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   1314c:	2f01      	cmp	r7, #1
   1314e:	d11c      	bne.n	1318a <nrf91_socket_offload_getsockopt+0x7e>
   13150:	f1a5 0314 	sub.w	r3, r5, #20
   13154:	2b01      	cmp	r3, #1
   13156:	d818      	bhi.n	1318a <nrf91_socket_offload_getsockopt+0x7e>
		nrf_optlen = &nrf_timeo_size;
   13158:	aa03      	add	r2, sp, #12
		nrf_optval = &nrf_timeo;
   1315a:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1315c:	4630      	mov	r0, r6
   1315e:	9200      	str	r2, [sp, #0]
   13160:	4639      	mov	r1, r7
   13162:	9a02      	ldr	r2, [sp, #8]
   13164:	f7fb fc96 	bl	ea94 <nrf_getsockopt>
	if (retval == 0) {
   13168:	4606      	mov	r6, r0
   1316a:	2800      	cmp	r0, #0
   1316c:	d1ea      	bne.n	13144 <nrf91_socket_offload_getsockopt+0x38>
		if (level == SOL_SOCKET) {
   1316e:	2f01      	cmp	r7, #1
   13170:	d1e8      	bne.n	13144 <nrf91_socket_offload_getsockopt+0x38>
			if (optname == SO_ERROR) {
   13172:	2d04      	cmp	r5, #4
   13174:	d10c      	bne.n	13190 <nrf91_socket_offload_getsockopt+0x84>
				if (*(int *)optval != 0) {
   13176:	6820      	ldr	r0, [r4, #0]
   13178:	2800      	cmp	r0, #0
   1317a:	d0e3      	beq.n	13144 <nrf91_socket_offload_getsockopt+0x38>
					nrf_modem_os_errno_set(*(int *)optval);
   1317c:	f7f8 fc5c 	bl	ba38 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   13180:	f7ff fc84 	bl	12a8c <__errno>
   13184:	6803      	ldr	r3, [r0, #0]
   13186:	6023      	str	r3, [r4, #0]
   13188:	e7dc      	b.n	13144 <nrf91_socket_offload_getsockopt+0x38>
	nrf_socklen_t *nrf_optlen = (nrf_socklen_t *)optlen;
   1318a:	4642      	mov	r2, r8
   1318c:	4623      	mov	r3, r4
   1318e:	e7e5      	b.n	1315c <nrf91_socket_offload_getsockopt+0x50>
			} else if ((optname == SO_RCVTIMEO) ||
   13190:	3d14      	subs	r5, #20
   13192:	2d01      	cmp	r5, #1
   13194:	d8d6      	bhi.n	13144 <nrf91_socket_offload_getsockopt+0x38>
					nrf_timeo.tv_sec;
   13196:	9b04      	ldr	r3, [sp, #16]
   13198:	e9c4 3000 	strd	r3, r0, [r4]
				((struct timeval *)optval)->tv_usec =
   1319c:	9b05      	ldr	r3, [sp, #20]
   1319e:	60a3      	str	r3, [r4, #8]
				*optlen = sizeof(struct timeval);
   131a0:	2310      	movs	r3, #16
   131a2:	f8c8 3000 	str.w	r3, [r8]
   131a6:	e7cd      	b.n	13144 <nrf91_socket_offload_getsockopt+0x38>

000131a8 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   131a8:	6800      	ldr	r0, [r0, #0]
   131aa:	f000 bd2f 	b.w	13c0c <nrf_listen>

000131ae <nrf91_socket_offload_freeaddrinfo>:
{
   131ae:	b538      	push	{r3, r4, r5, lr}
   131b0:	4604      	mov	r4, r0
	while (next != NULL) {
   131b2:	b904      	cbnz	r4, 131b6 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   131b4:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   131b6:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   131b8:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   131ba:	f001 f9af 	bl	1451c <k_free>
		k_free(this);
   131be:	4620      	mov	r0, r4
   131c0:	f001 f9ac 	bl	1451c <k_free>
		next = next->ai_next;
   131c4:	462c      	mov	r4, r5
   131c6:	e7f4      	b.n	131b2 <nrf91_socket_offload_freeaddrinfo+0x4>

000131c8 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   131c8:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   131ca:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   131cc:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   131ce:	4603      	mov	r3, r0
{
   131d0:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   131d2:	f823 2b04 	strh.w	r2, [r3], #4
   131d6:	f101 0420 	add.w	r4, r1, #32
   131da:	f101 0210 	add.w	r2, r1, #16
   131de:	f852 5b04 	ldr.w	r5, [r2], #4
   131e2:	42a2      	cmp	r2, r4
   131e4:	f843 5b04 	str.w	r5, [r3], #4
   131e8:	d1f9      	bne.n	131de <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   131ea:	6a0b      	ldr	r3, [r1, #32]
   131ec:	7503      	strb	r3, [r0, #20]
}
   131ee:	bd30      	pop	{r4, r5, pc}

000131f0 <z_to_nrf_ipv6>:
{
   131f0:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   131f2:	2124      	movs	r1, #36	; 0x24
{
   131f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   131f6:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   131f8:	8841      	ldrh	r1, [r0, #2]
{
   131fa:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   131fc:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   131fe:	2102      	movs	r1, #2
   13200:	1d04      	adds	r4, r0, #4
   13202:	6059      	str	r1, [r3, #4]
   13204:	f103 0610 	add.w	r6, r3, #16
   13208:	f100 0714 	add.w	r7, r0, #20
   1320c:	4635      	mov	r5, r6
   1320e:	6820      	ldr	r0, [r4, #0]
   13210:	6861      	ldr	r1, [r4, #4]
   13212:	3408      	adds	r4, #8
   13214:	c503      	stmia	r5!, {r0, r1}
   13216:	42bc      	cmp	r4, r7
   13218:	462e      	mov	r6, r5
   1321a:	d1f7      	bne.n	1320c <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   1321c:	7d12      	ldrb	r2, [r2, #20]
   1321e:	621a      	str	r2, [r3, #32]
}
   13220:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013222 <nrf91_socket_offload_sendto>:
{
   13222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13226:	4604      	mov	r4, r0
   13228:	b08c      	sub	sp, #48	; 0x30
   1322a:	9812      	ldr	r0, [sp, #72]	; 0x48
   1322c:	460d      	mov	r5, r1
   1322e:	4616      	mov	r6, r2
   13230:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   13232:	6824      	ldr	r4, [r4, #0]
	if (to == NULL) {
   13234:	b930      	cbnz	r0, 13244 <nrf91_socket_offload_sendto+0x22>
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   13236:	9013      	str	r0, [sp, #76]	; 0x4c
   13238:	4620      	mov	r0, r4
}
   1323a:	b00c      	add	sp, #48	; 0x30
   1323c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   13240:	f7fb b9de 	b.w	e600 <nrf_sendto>
	} else if (to->sa_family == AF_INET) {
   13244:	f8b0 c000 	ldrh.w	ip, [r0]
   13248:	f1bc 0f01 	cmp.w	ip, #1
   1324c:	d112      	bne.n	13274 <nrf91_socket_offload_sendto+0x52>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1324e:	2510      	movs	r5, #16
	nrf_out->sin_port = ptr->sin_port;
   13250:	8846      	ldrh	r6, [r0, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   13252:	6840      	ldr	r0, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   13254:	f88d 500c 	strb.w	r5, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   13258:	9006      	str	r0, [sp, #24]
		retval = nrf_sendto(sd, buf, len, flags,
   1325a:	a803      	add	r0, sp, #12
	nrf_out->sin_port = ptr->sin_port;
   1325c:	f8ad 6014 	strh.w	r6, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   13260:	f8cd c010 	str.w	ip, [sp, #16]
		retval = nrf_sendto(sd, buf, len, flags,
   13264:	9501      	str	r5, [sp, #4]
   13266:	9000      	str	r0, [sp, #0]
		retval = nrf_sendto(sd, buf, len, flags,
   13268:	4620      	mov	r0, r4
   1326a:	f7fb f9c9 	bl	e600 <nrf_sendto>
}
   1326e:	b00c      	add	sp, #48	; 0x30
   13270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET6) {
   13274:	f1bc 0f02 	cmp.w	ip, #2
   13278:	d10b      	bne.n	13292 <nrf91_socket_offload_sendto+0x70>
		z_to_nrf_ipv6(to, &ipv6);
   1327a:	f10d 080c 	add.w	r8, sp, #12
   1327e:	4641      	mov	r1, r8
   13280:	f7ff ffb6 	bl	131f0 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, flags,
   13284:	2324      	movs	r3, #36	; 0x24
   13286:	4632      	mov	r2, r6
   13288:	e9cd 8300 	strd	r8, r3, [sp]
   1328c:	4629      	mov	r1, r5
   1328e:	463b      	mov	r3, r7
   13290:	e7ea      	b.n	13268 <nrf91_socket_offload_sendto+0x46>
		errno = EAFNOSUPPORT;
   13292:	f7ff fbfb 	bl	12a8c <__errno>
   13296:	236a      	movs	r3, #106	; 0x6a
   13298:	6003      	str	r3, [r0, #0]
		retval = -1;
   1329a:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   1329e:	e7e6      	b.n	1326e <nrf91_socket_offload_sendto+0x4c>

000132a0 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   132a0:	2300      	movs	r3, #0
{
   132a2:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   132a4:	e9cd 3300 	strd	r3, r3, [sp]
   132a8:	f7ff ffbb 	bl	13222 <nrf91_socket_offload_sendto>
}
   132ac:	b003      	add	sp, #12
   132ae:	f85d fb04 	ldr.w	pc, [sp], #4

000132b2 <nrf91_socket_offload_connect>:
{
   132b2:	4603      	mov	r3, r0
   132b4:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   132b6:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   132b8:	880b      	ldrh	r3, [r1, #0]
{
   132ba:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   132bc:	2b01      	cmp	r3, #1
{
   132be:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   132c0:	d10e      	bne.n	132e0 <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   132c2:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   132c4:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   132c6:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   132c8:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   132ca:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   132ce:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   132d2:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   132d4:	4620      	mov	r0, r4
   132d6:	a901      	add	r1, sp, #4
   132d8:	f000 fbb5 	bl	13a46 <nrf_connect>
}
   132dc:	b00a      	add	sp, #40	; 0x28
   132de:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   132e0:	2b02      	cmp	r3, #2
   132e2:	d104      	bne.n	132ee <nrf91_socket_offload_connect+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   132e4:	a901      	add	r1, sp, #4
   132e6:	f7ff ff83 	bl	131f0 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   132ea:	2224      	movs	r2, #36	; 0x24
   132ec:	e7f2      	b.n	132d4 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   132ee:	4620      	mov	r0, r4
}
   132f0:	b00a      	add	sp, #40	; 0x28
   132f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		retval = nrf_connect(sd, (void *)addr, addrlen);
   132f6:	f000 bba6 	b.w	13a46 <nrf_connect>

000132fa <nrf91_socket_offload_bind>:
{
   132fa:	4603      	mov	r3, r0
   132fc:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   132fe:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   13300:	880b      	ldrh	r3, [r1, #0]
{
   13302:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   13304:	2b01      	cmp	r3, #1
{
   13306:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   13308:	d10e      	bne.n	13328 <nrf91_socket_offload_bind+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1330a:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1330c:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   1330e:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   13310:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   13312:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   13316:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1331a:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1331c:	4620      	mov	r0, r4
   1331e:	a901      	add	r1, sp, #4
   13320:	f000 fc2b 	bl	13b7a <nrf_bind>
}
   13324:	b00a      	add	sp, #40	; 0x28
   13326:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   13328:	2b02      	cmp	r3, #2
   1332a:	d104      	bne.n	13336 <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   1332c:	a901      	add	r1, sp, #4
   1332e:	f7ff ff5f 	bl	131f0 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   13332:	2224      	movs	r2, #36	; 0x24
   13334:	e7f2      	b.n	1331c <nrf91_socket_offload_bind+0x22>
		errno = EAFNOSUPPORT;
   13336:	f7ff fba9 	bl	12a8c <__errno>
   1333a:	236a      	movs	r3, #106	; 0x6a
   1333c:	6003      	str	r3, [r0, #0]
		retval = -1;
   1333e:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   13342:	e7ef      	b.n	13324 <nrf91_socket_offload_bind+0x2a>

00013344 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   13344:	f7fc baf2 	b.w	f92c <z_impl_k_mutex_lock>

00013348 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   13348:	f7fc bbc0 	b.w	facc <z_impl_k_mutex_unlock>

0001334c <nrf91_socket_offload_recvfrom>:
{
   1334c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13350:	4605      	mov	r5, r0
	if (ctx->lock) {
   13352:	6840      	ldr	r0, [r0, #4]
{
   13354:	b08d      	sub	sp, #52	; 0x34
   13356:	460c      	mov	r4, r1
   13358:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   1335c:	4691      	mov	r9, r2
   1335e:	469a      	mov	sl, r3
	if (ctx->lock) {
   13360:	b108      	cbz	r0, 13366 <nrf91_socket_offload_recvfrom+0x1a>
		k_mutex_unlock(ctx->lock);
   13362:	f7ff fff1 	bl	13348 <k_mutex_unlock.isra.0>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   13366:	f8d5 b000 	ldr.w	fp, [r5]
	if (from == NULL || fromlen == NULL) {
   1336a:	b106      	cbz	r6, 1336e <nrf91_socket_offload_recvfrom+0x22>
   1336c:	b9af      	cbnz	r7, 1339a <nrf91_socket_offload_recvfrom+0x4e>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   1336e:	2300      	movs	r3, #0
   13370:	4621      	mov	r1, r4
   13372:	e9cd 3300 	strd	r3, r3, [sp]
   13376:	464a      	mov	r2, r9
   13378:	4653      	mov	r3, sl
   1337a:	4658      	mov	r0, fp
   1337c:	f000 fd0b 	bl	13d96 <nrf_recvfrom>
   13380:	4604      	mov	r4, r0
	if (ctx->lock) {
   13382:	6868      	ldr	r0, [r5, #4]
   13384:	b128      	cbz	r0, 13392 <nrf91_socket_offload_recvfrom+0x46>
		k_mutex_lock(ctx->lock, K_FOREVER);
   13386:	f04f 32ff 	mov.w	r2, #4294967295
   1338a:	f04f 33ff 	mov.w	r3, #4294967295
   1338e:	f7ff ffd9 	bl	13344 <k_mutex_lock.constprop.0.isra.0>
}
   13392:	4620      	mov	r0, r4
   13394:	b00d      	add	sp, #52	; 0x34
   13396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   1339a:	f10d 080c 	add.w	r8, sp, #12
   1339e:	2224      	movs	r2, #36	; 0x24
   133a0:	2100      	movs	r1, #0
   133a2:	4640      	mov	r0, r8
   133a4:	f001 f8f1 	bl	1458a <memset>
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   133a8:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   133aa:	ab02      	add	r3, sp, #8
   133ac:	4621      	mov	r1, r4
   133ae:	e9cd 8300 	strd	r8, r3, [sp]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   133b2:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   133b4:	4653      	mov	r3, sl
   133b6:	464a      	mov	r2, r9
   133b8:	4658      	mov	r0, fp
   133ba:	f000 fcec 	bl	13d96 <nrf_recvfrom>
		if (retval < 0) {
   133be:	1e04      	subs	r4, r0, #0
   133c0:	dbdf      	blt.n	13382 <nrf91_socket_offload_recvfrom+0x36>
		if (cliaddr->sa_family == NRF_AF_INET &&
   133c2:	9b04      	ldr	r3, [sp, #16]
   133c4:	2b01      	cmp	r3, #1
   133c6:	d10b      	bne.n	133e0 <nrf91_socket_offload_recvfrom+0x94>
   133c8:	9a02      	ldr	r2, [sp, #8]
   133ca:	2a10      	cmp	r2, #16
   133cc:	d1d9      	bne.n	13382 <nrf91_socket_offload_recvfrom+0x36>
	ptr->sin_family = AF_INET;
   133ce:	8033      	strh	r3, [r6, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   133d0:	9b06      	ldr	r3, [sp, #24]
	ptr->sin_port = nrf_in->sin_port;
   133d2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   133d6:	6073      	str	r3, [r6, #4]
			*fromlen = sizeof(struct sockaddr_in);
   133d8:	2308      	movs	r3, #8
	ptr->sin_port = nrf_in->sin_port;
   133da:	8072      	strh	r2, [r6, #2]
			*fromlen = sizeof(struct sockaddr_in6);
   133dc:	603b      	str	r3, [r7, #0]
   133de:	e7d0      	b.n	13382 <nrf91_socket_offload_recvfrom+0x36>
		} else if (cliaddr->sa_family == NRF_AF_INET6 &&
   133e0:	2b02      	cmp	r3, #2
   133e2:	d1ce      	bne.n	13382 <nrf91_socket_offload_recvfrom+0x36>
   133e4:	9b02      	ldr	r3, [sp, #8]
   133e6:	2b24      	cmp	r3, #36	; 0x24
   133e8:	d1cb      	bne.n	13382 <nrf91_socket_offload_recvfrom+0x36>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   133ea:	4641      	mov	r1, r8
   133ec:	4630      	mov	r0, r6
   133ee:	f7ff feeb 	bl	131c8 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   133f2:	2318      	movs	r3, #24
   133f4:	e7f2      	b.n	133dc <nrf91_socket_offload_recvfrom+0x90>

000133f6 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   133f6:	2300      	movs	r3, #0
{
   133f8:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   133fa:	e9cd 3300 	strd	r3, r3, [sp]
   133fe:	f7ff ffa5 	bl	1334c <nrf91_socket_offload_recvfrom>
}
   13402:	b003      	add	sp, #12
   13404:	f85d fb04 	ldr.w	pc, [sp], #4

00013408 <nrf91_socket_offload_close>:
{
   13408:	b538      	push	{r3, r4, r5, lr}
   1340a:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   1340c:	6800      	ldr	r0, [r0, #0]
   1340e:	f7fb f8c3 	bl	e598 <nrf_close>
	if (retval == 0) {
   13412:	4604      	mov	r4, r0
   13414:	b910      	cbnz	r0, 1341c <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   13416:	4628      	mov	r0, r5
   13418:	f7f8 fe16 	bl	c048 <release_ctx>
}
   1341c:	4620      	mov	r0, r4
   1341e:	bd38      	pop	{r3, r4, r5, pc}

00013420 <nrf_modem_fault_handler>:
		fault->reason, fault->program_counter);
#endif
#if CONFIG_NRF_MODEM_LIB_ON_FAULT_RESET_MODEM
	k_sem_give(&fault_sem);
#endif
}
   13420:	4770      	bx	lr

00013422 <response_handler>:
	write_uart_string(response);
   13422:	f7f9 b82d 	b.w	c480 <write_uart_string>

00013426 <k_sys_fatal_error_handler>:

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   13426:	2000      	movs	r0, #0
{
   13428:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
   1342a:	f7f6 fe71 	bl	a110 <sys_arch_reboot>

0001342e <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   1342e:	2000      	movs	r0, #0
   13430:	4770      	bx	lr

00013432 <psa_crypto_init>:
}
   13432:	2000      	movs	r0, #0
   13434:	4770      	bx	lr

00013436 <SystemInit>:
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
   13436:	4770      	bx	lr

00013438 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   13438:	4700      	bx	r0

0001343a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1343a:	f000 bfd7 	b.w	143ec <z_impl_k_busy_wait>

0001343e <nrf_gpio_pin_present_check>:
    switch (port)
   1343e:	0943      	lsrs	r3, r0, #5
   13440:	bf0c      	ite	eq
   13442:	f04f 33ff 	moveq.w	r3, #4294967295
   13446:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   13448:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1344c:	fa23 f000 	lsr.w	r0, r3, r0
}
   13450:	f000 0001 	and.w	r0, r0, #1
   13454:	4770      	bx	lr

00013456 <pin_is_task_output>:
{
   13456:	b508      	push	{r3, lr}
   13458:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1345a:	f7f9 fb8b 	bl	cb74 <pin_is_output>
   1345e:	b110      	cbz	r0, 13466 <pin_is_task_output+0x10>
   13460:	4610      	mov	r0, r2
   13462:	f7f9 fb71 	bl	cb48 <pin_in_use_by_te>
}
   13466:	f000 0001 	and.w	r0, r0, #1
   1346a:	bd08      	pop	{r3, pc}

0001346c <nrf_gpio_reconfigure>:
{
   1346c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13470:	4617      	mov	r7, r2
   13472:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   13476:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13478:	a801      	add	r0, sp, #4
{
   1347a:	460c      	mov	r4, r1
   1347c:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1347e:	f7f9 fbfd 	bl	cc7c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   13482:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   13484:	1e39      	subs	r1, r7, #0
   13486:	bf18      	it	ne
   13488:	2101      	movne	r1, #1
   1348a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1348e:	1e23      	subs	r3, r4, #0
   13490:	bf18      	it	ne
   13492:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   13494:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   13496:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1349a:	bf14      	ite	ne
   1349c:	210c      	movne	r1, #12
   1349e:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   134a0:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   134a2:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   134a6:	bf14      	ite	ne
   134a8:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   134ac:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   134ae:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   134b2:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   134b6:	bf14      	ite	ne
   134b8:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   134bc:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   134be:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   134c2:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   134c4:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   134c8:	b104      	cbz	r4, 134cc <nrf_gpio_reconfigure+0x60>
   134ca:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   134cc:	b10f      	cbz	r7, 134d2 <nrf_gpio_reconfigure+0x66>
   134ce:	783f      	ldrb	r7, [r7, #0]
   134d0:	007f      	lsls	r7, r7, #1
   134d2:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   134d4:	b10e      	cbz	r6, 134da <nrf_gpio_reconfigure+0x6e>
   134d6:	7836      	ldrb	r6, [r6, #0]
   134d8:	00b6      	lsls	r6, r6, #2
   134da:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   134dc:	b18d      	cbz	r5, 13502 <nrf_gpio_reconfigure+0x96>
   134de:	7829      	ldrb	r1, [r5, #0]
   134e0:	0209      	lsls	r1, r1, #8
   134e2:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   134e4:	f1b8 0f00 	cmp.w	r8, #0
   134e8:	d003      	beq.n	134f2 <nrf_gpio_reconfigure+0x86>
   134ea:	f898 8000 	ldrb.w	r8, [r8]
   134ee:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   134f2:	4321      	orrs	r1, r4
   134f4:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   134f8:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   134fc:	b002      	add	sp, #8
   134fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   13502:	4629      	mov	r1, r5
   13504:	e7ed      	b.n	134e2 <nrf_gpio_reconfigure+0x76>

00013506 <nrf_gpio_cfg_sense_set>:
{
   13506:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   13508:	f10d 030f 	add.w	r3, sp, #15
   1350c:	9301      	str	r3, [sp, #4]
   1350e:	2300      	movs	r3, #0
{
   13510:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   13514:	461a      	mov	r2, r3
   13516:	4619      	mov	r1, r3
   13518:	9300      	str	r3, [sp, #0]
   1351a:	f7ff ffa7 	bl	1346c <nrf_gpio_reconfigure>
}
   1351e:	b005      	add	sp, #20
   13520:	f85d fb04 	ldr.w	pc, [sp], #4

00013524 <rpc_handle_ctrl_message>:
   13524:	2902      	cmp	r1, #2
   13526:	b510      	push	{r4, lr}
   13528:	4604      	mov	r4, r0
   1352a:	d005      	beq.n	13538 <rpc_handle_ctrl_message+0x14>
   1352c:	2904      	cmp	r1, #4
   1352e:	d001      	beq.n	13534 <rpc_handle_ctrl_message+0x10>
   13530:	2901      	cmp	r1, #1
   13532:	d107      	bne.n	13544 <rpc_handle_ctrl_message+0x20>
   13534:	2000      	movs	r0, #0
   13536:	bd10      	pop	{r4, pc}
   13538:	6880      	ldr	r0, [r0, #8]
   1353a:	2800      	cmp	r0, #0
   1353c:	d0fa      	beq.n	13534 <rpc_handle_ctrl_message+0x10>
   1353e:	f7f8 fb63 	bl	bc08 <nrf_modem_os_shm_tx_free>
   13542:	e7f7      	b.n	13534 <rpc_handle_ctrl_message+0x10>
   13544:	6880      	ldr	r0, [r0, #8]
   13546:	b108      	cbz	r0, 1354c <rpc_handle_ctrl_message+0x28>
   13548:	f7f8 fb5e 	bl	bc08 <nrf_modem_os_shm_tx_free>
   1354c:	4620      	mov	r0, r4
   1354e:	f7f9 fff9 	bl	d544 <rpc_transport_msg_rx_free>
   13552:	e7ef      	b.n	13534 <rpc_handle_ctrl_message+0x10>

00013554 <rpc_init>:
   13554:	f7f9 bfe4 	b.w	d520 <rpc_transport_init>

00013558 <rpc_list_preambles_init>:
   13558:	2200      	movs	r2, #0
   1355a:	b510      	push	{r4, lr}
   1355c:	6804      	ldr	r4, [r0, #0]
   1355e:	4294      	cmp	r4, r2
   13560:	d100      	bne.n	13564 <rpc_list_preambles_init+0xc>
   13562:	bd10      	pop	{r4, pc}
   13564:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   13568:	684b      	ldr	r3, [r1, #4]
   1356a:	3201      	adds	r2, #1
   1356c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   13570:	f043 0303 	orr.w	r3, r3, #3
   13574:	604b      	str	r3, [r1, #4]
   13576:	e7f2      	b.n	1355e <rpc_list_preambles_init+0x6>

00013578 <rpc_transport_ipc_data_rx_resume>:
   13578:	2004      	movs	r0, #4
   1357a:	f7f9 bf45 	b.w	d408 <nrfx_ipc_receive_event_enable>

0001357e <rpc_transport_ipc_data_rx_suspend>:
   1357e:	2004      	movs	r0, #4
   13580:	f7f9 bf60 	b.w	d444 <nrfx_ipc_receive_event_disable>

00013584 <rpc_transport_ipc_shutdown>:
   13584:	f7f9 befe 	b.w	d384 <nrfx_ipc_uninit>

00013588 <rpc_transport_ipc_msg_alloc>:
   13588:	b538      	push	{r3, r4, r5, lr}
   1358a:	4604      	mov	r4, r0
   1358c:	2500      	movs	r5, #0
   1358e:	1d03      	adds	r3, r0, #4
   13590:	6822      	ldr	r2, [r4, #0]
   13592:	42aa      	cmp	r2, r5
   13594:	d801      	bhi.n	1359a <rpc_transport_ipc_msg_alloc+0x12>
   13596:	2300      	movs	r3, #0
   13598:	e019      	b.n	135ce <rpc_transport_ipc_msg_alloc+0x46>
   1359a:	f04f 0200 	mov.w	r2, #0
   1359e:	e8d3 0fcf 	ldaexb	r0, [r3]
   135a2:	2803      	cmp	r0, #3
   135a4:	d104      	bne.n	135b0 <rpc_transport_ipc_msg_alloc+0x28>
   135a6:	e8c3 2fcc 	stlexb	ip, r2, [r3]
   135aa:	f1bc 0f00 	cmp.w	ip, #0
   135ae:	d1f6      	bne.n	1359e <rpc_transport_ipc_msg_alloc+0x16>
   135b0:	d002      	beq.n	135b8 <rpc_transport_ipc_msg_alloc+0x30>
   135b2:	3308      	adds	r3, #8
   135b4:	3501      	adds	r5, #1
   135b6:	e7eb      	b.n	13590 <rpc_transport_ipc_msg_alloc+0x8>
   135b8:	eb01 1385 	add.w	r3, r1, r5, lsl #6
   135bc:	4618      	mov	r0, r3
   135be:	2240      	movs	r2, #64	; 0x40
   135c0:	2100      	movs	r1, #0
   135c2:	f000 ffe2 	bl	1458a <memset>
   135c6:	4603      	mov	r3, r0
   135c8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   135cc:	60a0      	str	r0, [r4, #8]
   135ce:	4618      	mov	r0, r3
   135d0:	bd38      	pop	{r3, r4, r5, pc}

000135d2 <rpc_client_msg_from_rpc_msg_get>:
   135d2:	3008      	adds	r0, #8
   135d4:	4770      	bx	lr

000135d6 <rpc_client_msg_alloc>:
   135d6:	b538      	push	{r3, r4, r5, lr}
   135d8:	4605      	mov	r5, r0
   135da:	b920      	cbnz	r0, 135e6 <rpc_client_msg_alloc+0x10>
   135dc:	f7f9 ffa6 	bl	d52c <rpc_transport_msg_alloc>
   135e0:	b980      	cbnz	r0, 13604 <rpc_client_msg_alloc+0x2e>
   135e2:	2000      	movs	r0, #0
   135e4:	bd38      	pop	{r3, r4, r5, pc}
   135e6:	f7f8 fb07 	bl	bbf8 <nrf_modem_os_shm_tx_alloc>
   135ea:	4604      	mov	r4, r0
   135ec:	2800      	cmp	r0, #0
   135ee:	d0f8      	beq.n	135e2 <rpc_client_msg_alloc+0xc>
   135f0:	f7f9 ff9c 	bl	d52c <rpc_transport_msg_alloc>
   135f4:	b938      	cbnz	r0, 13606 <rpc_client_msg_alloc+0x30>
   135f6:	4620      	mov	r0, r4
   135f8:	f7f8 fb06 	bl	bc08 <nrf_modem_os_shm_tx_free>
   135fc:	2001      	movs	r0, #1
   135fe:	f7f8 fad1 	bl	bba4 <nrf_modem_os_event_notify>
   13602:	e7ee      	b.n	135e2 <rpc_client_msg_alloc+0xc>
   13604:	462c      	mov	r4, r5
   13606:	60c5      	str	r5, [r0, #12]
   13608:	f840 4f08 	str.w	r4, [r0, #8]!
   1360c:	e7ea      	b.n	135e4 <rpc_client_msg_alloc+0xe>

0001360e <rpc_client_msg_send>:
   1360e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   13612:	4610      	mov	r0, r2
   13614:	f840 1d08 	str.w	r1, [r0, #-8]!
   13618:	f7f9 bfa0 	b.w	d55c <rpc_transport_msg_send>

0001361c <rpc_client_msg_rx_free>:
   1361c:	3808      	subs	r0, #8
   1361e:	f7f9 bf91 	b.w	d544 <rpc_transport_msg_rx_free>

00013622 <rpc_client_msg_data_rx_free>:
   13622:	f7f9 bf95 	b.w	d550 <rpc_transport_msg_data_rx_free>

00013626 <rpc_client_msg_data_tx_size>:
   13626:	f7f9 bf87 	b.w	d538 <rpc_transport_msg_data_tx_size>

0001362a <rpc_client_msg_data_tx_alloc>:
   1362a:	f7f8 bae5 	b.w	bbf8 <nrf_modem_os_shm_tx_alloc>

0001362e <rpc_client_msg_data_tx_free>:
   1362e:	b508      	push	{r3, lr}
   13630:	f7f8 faea 	bl	bc08 <nrf_modem_os_shm_tx_free>
   13634:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13638:	2001      	movs	r0, #1
   1363a:	f7f8 bab3 	b.w	bba4 <nrf_modem_os_event_notify>

0001363e <sockaddr_init>:
   1363e:	2904      	cmp	r1, #4
   13640:	b570      	push	{r4, r5, r6, lr}
   13642:	4605      	mov	r5, r0
   13644:	4616      	mov	r6, r2
   13646:	d003      	beq.n	13650 <sockaddr_init+0x12>
   13648:	2910      	cmp	r1, #16
   1364a:	d015      	beq.n	13678 <sockaddr_init+0x3a>
   1364c:	2400      	movs	r4, #0
   1364e:	e011      	b.n	13674 <sockaddr_init+0x36>
   13650:	2010      	movs	r0, #16
   13652:	f7f8 fac3 	bl	bbdc <nrf_modem_os_alloc>
   13656:	4604      	mov	r4, r0
   13658:	2800      	cmp	r0, #0
   1365a:	d0f7      	beq.n	1364c <sockaddr_init+0xe>
   1365c:	220f      	movs	r2, #15
   1365e:	2100      	movs	r1, #0
   13660:	3001      	adds	r0, #1
   13662:	f000 ff92 	bl	1458a <memset>
   13666:	2310      	movs	r3, #16
   13668:	7023      	strb	r3, [r4, #0]
   1366a:	2301      	movs	r3, #1
   1366c:	8126      	strh	r6, [r4, #8]
   1366e:	6063      	str	r3, [r4, #4]
   13670:	682b      	ldr	r3, [r5, #0]
   13672:	60e3      	str	r3, [r4, #12]
   13674:	4620      	mov	r0, r4
   13676:	bd70      	pop	{r4, r5, r6, pc}
   13678:	2024      	movs	r0, #36	; 0x24
   1367a:	f7f8 faaf 	bl	bbdc <nrf_modem_os_alloc>
   1367e:	4604      	mov	r4, r0
   13680:	2800      	cmp	r0, #0
   13682:	d0e3      	beq.n	1364c <sockaddr_init+0xe>
   13684:	2223      	movs	r2, #35	; 0x23
   13686:	2100      	movs	r1, #0
   13688:	3001      	adds	r0, #1
   1368a:	f000 ff7e 	bl	1458a <memset>
   1368e:	2324      	movs	r3, #36	; 0x24
   13690:	7023      	strb	r3, [r4, #0]
   13692:	2302      	movs	r3, #2
   13694:	4628      	mov	r0, r5
   13696:	6063      	str	r3, [r4, #4]
   13698:	8126      	strh	r6, [r4, #8]
   1369a:	f104 0310 	add.w	r3, r4, #16
   1369e:	f105 0210 	add.w	r2, r5, #16
   136a2:	f850 1b04 	ldr.w	r1, [r0], #4
   136a6:	4290      	cmp	r0, r2
   136a8:	f843 1b04 	str.w	r1, [r3], #4
   136ac:	d1f9      	bne.n	136a2 <sockaddr_init+0x64>
   136ae:	e7e1      	b.n	13674 <sockaddr_init+0x36>

000136b0 <sock_pollcb>:
   136b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   136b2:	2500      	movs	r5, #0
   136b4:	6803      	ldr	r3, [r0, #0]
   136b6:	4604      	mov	r4, r0
   136b8:	9300      	str	r3, [sp, #0]
   136ba:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   136bc:	4668      	mov	r0, sp
   136be:	f8ad 5006 	strh.w	r5, [sp, #6]
   136c2:	f8ad 3004 	strh.w	r3, [sp, #4]
   136c6:	f000 fccb 	bl	14060 <nrf_poll_one>
   136ca:	b138      	cbz	r0, 136dc <sock_pollcb+0x2c>
   136cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   136ce:	4668      	mov	r0, sp
   136d0:	4798      	blx	r3
   136d2:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   136d6:	b10b      	cbz	r3, 136dc <sock_pollcb+0x2c>
   136d8:	6365      	str	r5, [r4, #52]	; 0x34
   136da:	63a5      	str	r5, [r4, #56]	; 0x38
   136dc:	b003      	add	sp, #12
   136de:	bd30      	pop	{r4, r5, pc}

000136e0 <sock_has_pkt>:
   136e0:	6840      	ldr	r0, [r0, #4]
   136e2:	3800      	subs	r0, #0
   136e4:	bf18      	it	ne
   136e6:	2001      	movne	r0, #1
   136e8:	4770      	bx	lr

000136ea <sock_pkt_append>:
   136ea:	2300      	movs	r3, #0
   136ec:	600b      	str	r3, [r1, #0]
   136ee:	6883      	ldr	r3, [r0, #8]
   136f0:	b913      	cbnz	r3, 136f8 <sock_pkt_append+0xe>
   136f2:	e9c0 1101 	strd	r1, r1, [r0, #4]
   136f6:	4770      	bx	lr
   136f8:	6019      	str	r1, [r3, #0]
   136fa:	6081      	str	r1, [r0, #8]
   136fc:	4770      	bx	lr

000136fe <sock_pkt_remove>:
   136fe:	b538      	push	{r3, r4, r5, lr}
   13700:	4605      	mov	r5, r0
   13702:	460c      	mov	r4, r1
   13704:	f7f9 ff30 	bl	d568 <rpc_transport_data_rx_suspend>
   13708:	68aa      	ldr	r2, [r5, #8]
   1370a:	6823      	ldr	r3, [r4, #0]
   1370c:	4294      	cmp	r4, r2
   1370e:	606b      	str	r3, [r5, #4]
   13710:	bf08      	it	eq
   13712:	60ab      	streq	r3, [r5, #8]
   13714:	2300      	movs	r3, #0
   13716:	4620      	mov	r0, r4
   13718:	6023      	str	r3, [r4, #0]
   1371a:	f000 f904 	bl	13926 <pkt_free>
   1371e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13722:	f7f9 bf27 	b.w	d574 <rpc_transport_data_rx_resume>

00013726 <sock_pkt_peek_head>:
   13726:	6840      	ldr	r0, [r0, #4]
   13728:	4770      	bx	lr

0001372a <sock_is_stream>:
   1372a:	6900      	ldr	r0, [r0, #16]
   1372c:	1e43      	subs	r3, r0, #1
   1372e:	4258      	negs	r0, r3
   13730:	4158      	adcs	r0, r3
   13732:	4770      	bx	lr

00013734 <sock_is_datagram>:
   13734:	6900      	ldr	r0, [r0, #16]
   13736:	1e83      	subs	r3, r0, #2
   13738:	4258      	negs	r0, r3
   1373a:	4158      	adcs	r0, r3
   1373c:	4770      	bx	lr

0001373e <sock_is_raw>:
   1373e:	6900      	ldr	r0, [r0, #16]
   13740:	1ec3      	subs	r3, r0, #3
   13742:	4258      	negs	r0, r3
   13744:	4158      	adcs	r0, r3
   13746:	4770      	bx	lr

00013748 <sock_proto_is_secure>:
   13748:	6940      	ldr	r0, [r0, #20]
   1374a:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1374e:	d005      	beq.n	1375c <sock_proto_is_secure+0x14>
   13750:	f240 1311 	movw	r3, #273	; 0x111
   13754:	1ac3      	subs	r3, r0, r3
   13756:	4258      	negs	r0, r3
   13758:	4158      	adcs	r0, r3
   1375a:	4770      	bx	lr
   1375c:	2001      	movs	r0, #1
   1375e:	4770      	bx	lr

00013760 <sock_is_connecting>:
   13760:	7f00      	ldrb	r0, [r0, #28]
   13762:	f3c0 0080 	ubfx	r0, r0, #2, #1
   13766:	4770      	bx	lr

00013768 <sock_is_connected>:
   13768:	7f00      	ldrb	r0, [r0, #28]
   1376a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1376e:	4770      	bx	lr

00013770 <sock_is_attaching>:
   13770:	7f00      	ldrb	r0, [r0, #28]
   13772:	f3c0 1000 	ubfx	r0, r0, #4, #1
   13776:	4770      	bx	lr

00013778 <sock_is_nonblock>:
   13778:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   1377a:	f000 0001 	and.w	r0, r0, #1
   1377e:	4770      	bx	lr

00013780 <sock_is_closed>:
   13780:	7f00      	ldrb	r0, [r0, #28]
   13782:	f000 0001 	and.w	r0, r0, #1
   13786:	4770      	bx	lr

00013788 <sock_is_local_closed>:
   13788:	7f00      	ldrb	r0, [r0, #28]
   1378a:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1378e:	4770      	bx	lr

00013790 <sock_is_eof>:
   13790:	6903      	ldr	r3, [r0, #16]
   13792:	2b01      	cmp	r3, #1
   13794:	d105      	bne.n	137a2 <sock_is_eof+0x12>
   13796:	6980      	ldr	r0, [r0, #24]
   13798:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   1379c:	4258      	negs	r0, r3
   1379e:	4158      	adcs	r0, r3
   137a0:	4770      	bx	lr
   137a2:	2000      	movs	r0, #0
   137a4:	4770      	bx	lr

000137a6 <sock_has_stream_error>:
   137a6:	7f00      	ldrb	r0, [r0, #28]
   137a8:	09c0      	lsrs	r0, r0, #7
   137aa:	4770      	bx	lr

000137ac <sock_has_error>:
   137ac:	6983      	ldr	r3, [r0, #24]
   137ae:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   137b2:	bf14      	ite	ne
   137b4:	2001      	movne	r0, #1
   137b6:	2000      	moveq	r0, #0
   137b8:	4770      	bx	lr

000137ba <sock_has_flow_control>:
   137ba:	7f00      	ldrb	r0, [r0, #28]
   137bc:	f3c0 1080 	ubfx	r0, r0, #6, #1
   137c0:	4770      	bx	lr

000137c2 <sock_has_pollcb>:
   137c2:	6b40      	ldr	r0, [r0, #52]	; 0x34
   137c4:	3800      	subs	r0, #0
   137c6:	bf18      	it	ne
   137c8:	2001      	movne	r0, #1
   137ca:	4770      	bx	lr

000137cc <sock_has_rai_no_data>:
   137cc:	6b00      	ldr	r0, [r0, #48]	; 0x30
   137ce:	f1a0 0332 	sub.w	r3, r0, #50	; 0x32
   137d2:	4258      	negs	r0, r3
   137d4:	4158      	adcs	r0, r3
   137d6:	4770      	bx	lr

000137d8 <sock_can_read>:
   137d8:	6840      	ldr	r0, [r0, #4]
   137da:	3800      	subs	r0, #0
   137dc:	bf18      	it	ne
   137de:	2001      	movne	r0, #1
   137e0:	4770      	bx	lr

000137e2 <sock_can_accept>:
   137e2:	7f40      	ldrb	r0, [r0, #29]
   137e4:	3800      	subs	r0, #0
   137e6:	bf18      	it	ne
   137e8:	2001      	movne	r0, #1
   137ea:	4770      	bx	lr

000137ec <sock_can_send>:
   137ec:	b510      	push	{r4, lr}
   137ee:	4602      	mov	r2, r0
   137f0:	6904      	ldr	r4, [r0, #16]
   137f2:	f7ff ffa9 	bl	13748 <sock_proto_is_secure>
   137f6:	2c01      	cmp	r4, #1
   137f8:	4601      	mov	r1, r0
   137fa:	7f13      	ldrb	r3, [r2, #28]
   137fc:	d103      	bne.n	13806 <sock_can_send+0x1a>
   137fe:	071c      	lsls	r4, r3, #28
   13800:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   13804:	d50b      	bpl.n	1381e <sock_can_send+0x32>
   13806:	b931      	cbnz	r1, 13816 <sock_can_send+0x2a>
   13808:	07d9      	lsls	r1, r3, #31
   1380a:	d40b      	bmi.n	13824 <sock_can_send+0x38>
   1380c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   13810:	f1c3 0001 	rsb	r0, r3, #1
   13814:	e003      	b.n	1381e <sock_can_send+0x32>
   13816:	069a      	lsls	r2, r3, #26
   13818:	f3c3 1040 	ubfx	r0, r3, #5, #1
   1381c:	d4f4      	bmi.n	13808 <sock_can_send+0x1c>
   1381e:	f000 0001 	and.w	r0, r0, #1
   13822:	bd10      	pop	{r4, pc}
   13824:	2000      	movs	r0, #0
   13826:	e7fa      	b.n	1381e <sock_can_send+0x32>

00013828 <sock_rcvtimeo_ms_get>:
   13828:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   1382c:	ea53 0102 	orrs.w	r1, r3, r2
   13830:	d009      	beq.n	13846 <sock_rcvtimeo_ms_get+0x1e>
   13832:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   13836:	fbb3 f0f1 	udiv	r0, r3, r1
   1383a:	fb01 0002 	mla	r0, r1, r2, r0
   1383e:	2801      	cmp	r0, #1
   13840:	bfb8      	it	lt
   13842:	2001      	movlt	r0, #1
   13844:	4770      	bx	lr
   13846:	f04f 30ff 	mov.w	r0, #4294967295
   1384a:	4770      	bx	lr

0001384c <sock_sndtimeo_ms_get>:
   1384c:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   13850:	ea53 0102 	orrs.w	r1, r3, r2
   13854:	d009      	beq.n	1386a <sock_sndtimeo_ms_get+0x1e>
   13856:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1385a:	fbb3 f0f1 	udiv	r0, r3, r1
   1385e:	fb01 0002 	mla	r0, r1, r2, r0
   13862:	2801      	cmp	r0, #1
   13864:	bfb8      	it	lt
   13866:	2001      	movlt	r0, #1
   13868:	4770      	bx	lr
   1386a:	f04f 30ff 	mov.w	r0, #4294967295
   1386e:	4770      	bx	lr

00013870 <sock_family_is_valid>:
   13870:	3801      	subs	r0, #1
   13872:	2802      	cmp	r0, #2
   13874:	bf8c      	ite	hi
   13876:	2000      	movhi	r0, #0
   13878:	2001      	movls	r0, #1
   1387a:	4770      	bx	lr

0001387c <sock_type_is_valid>:
   1387c:	3801      	subs	r0, #1
   1387e:	2802      	cmp	r0, #2
   13880:	bf8c      	ite	hi
   13882:	2000      	movhi	r0, #0
   13884:	2001      	movls	r0, #1
   13886:	4770      	bx	lr

00013888 <sock_proto_supports_type>:
   13888:	2903      	cmp	r1, #3
   1388a:	d015      	beq.n	138b8 <sock_proto_supports_type+0x30>
   1388c:	2811      	cmp	r0, #17
   1388e:	d00c      	beq.n	138aa <sock_proto_supports_type+0x22>
   13890:	dc04      	bgt.n	1389c <sock_proto_supports_type+0x14>
   13892:	b188      	cbz	r0, 138b8 <sock_proto_supports_type+0x30>
   13894:	2806      	cmp	r0, #6
   13896:	d00a      	beq.n	138ae <sock_proto_supports_type+0x26>
   13898:	2000      	movs	r0, #0
   1389a:	4770      	bx	lr
   1389c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   138a0:	d005      	beq.n	138ae <sock_proto_supports_type+0x26>
   138a2:	f240 1311 	movw	r3, #273	; 0x111
   138a6:	4298      	cmp	r0, r3
   138a8:	d1f6      	bne.n	13898 <sock_proto_supports_type+0x10>
   138aa:	2902      	cmp	r1, #2
   138ac:	e000      	b.n	138b0 <sock_proto_supports_type+0x28>
   138ae:	2901      	cmp	r1, #1
   138b0:	bf14      	ite	ne
   138b2:	2000      	movne	r0, #0
   138b4:	2001      	moveq	r0, #1
   138b6:	4770      	bx	lr
   138b8:	2001      	movs	r0, #1
   138ba:	4770      	bx	lr

000138bc <sock_sockaddr_len_is_valid>:
   138bc:	6843      	ldr	r3, [r0, #4]
   138be:	2b01      	cmp	r3, #1
   138c0:	d003      	beq.n	138ca <sock_sockaddr_len_is_valid+0xe>
   138c2:	2b02      	cmp	r3, #2
   138c4:	d009      	beq.n	138da <sock_sockaddr_len_is_valid+0x1e>
   138c6:	2000      	movs	r0, #0
   138c8:	4770      	bx	lr
   138ca:	7803      	ldrb	r3, [r0, #0]
   138cc:	2b10      	cmp	r3, #16
   138ce:	d1fa      	bne.n	138c6 <sock_sockaddr_len_is_valid+0xa>
   138d0:	2910      	cmp	r1, #16
   138d2:	bf14      	ite	ne
   138d4:	2000      	movne	r0, #0
   138d6:	2001      	moveq	r0, #1
   138d8:	4770      	bx	lr
   138da:	7803      	ldrb	r3, [r0, #0]
   138dc:	2b24      	cmp	r3, #36	; 0x24
   138de:	d1f2      	bne.n	138c6 <sock_sockaddr_len_is_valid+0xa>
   138e0:	2924      	cmp	r1, #36	; 0x24
   138e2:	e7f6      	b.n	138d2 <sock_sockaddr_len_is_valid+0x16>

000138e4 <sock_sockaddr_fam_is_valid>:
   138e4:	68c3      	ldr	r3, [r0, #12]
   138e6:	2b01      	cmp	r3, #1
   138e8:	d003      	beq.n	138f2 <sock_sockaddr_fam_is_valid+0xe>
   138ea:	2b02      	cmp	r3, #2
   138ec:	d007      	beq.n	138fe <sock_sockaddr_fam_is_valid+0x1a>
   138ee:	2001      	movs	r0, #1
   138f0:	4770      	bx	lr
   138f2:	6848      	ldr	r0, [r1, #4]
   138f4:	2801      	cmp	r0, #1
   138f6:	bf14      	ite	ne
   138f8:	2000      	movne	r0, #0
   138fa:	2001      	moveq	r0, #1
   138fc:	4770      	bx	lr
   138fe:	6848      	ldr	r0, [r1, #4]
   13900:	2802      	cmp	r0, #2
   13902:	e7f8      	b.n	138f6 <sock_sockaddr_fam_is_valid+0x12>

00013904 <pkt_has_next>:
   13904:	b100      	cbz	r0, 13908 <pkt_has_next+0x4>
   13906:	6800      	ldr	r0, [r0, #0]
   13908:	3800      	subs	r0, #0
   1390a:	bf18      	it	ne
   1390c:	2001      	movne	r0, #1
   1390e:	4770      	bx	lr

00013910 <pkt_peek_next>:
   13910:	b100      	cbz	r0, 13914 <pkt_peek_next+0x4>
   13912:	6800      	ldr	r0, [r0, #0]
   13914:	4770      	bx	lr

00013916 <pkt_bytes_get>:
   13916:	8943      	ldrh	r3, [r0, #10]
   13918:	6840      	ldr	r0, [r0, #4]
   1391a:	4418      	add	r0, r3
   1391c:	4770      	bx	lr

0001391e <pkt_bytes_left>:
   1391e:	8902      	ldrh	r2, [r0, #8]
   13920:	8940      	ldrh	r0, [r0, #10]
   13922:	1a10      	subs	r0, r2, r0
   13924:	4770      	bx	lr

00013926 <pkt_free>:
   13926:	b510      	push	{r4, lr}
   13928:	4604      	mov	r4, r0
   1392a:	6840      	ldr	r0, [r0, #4]
   1392c:	f7ff fe79 	bl	13622 <rpc_client_msg_data_rx_free>
   13930:	68e0      	ldr	r0, [r4, #12]
   13932:	b108      	cbz	r0, 13938 <pkt_free+0x12>
   13934:	f7f8 f95a 	bl	bbec <nrf_modem_os_free>
   13938:	4620      	mov	r0, r4
   1393a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1393e:	f7f8 b955 	b.w	bbec <nrf_modem_os_free>

00013942 <pkt_flush>:
   13942:	b510      	push	{r4, lr}
   13944:	4604      	mov	r4, r0
   13946:	6820      	ldr	r0, [r4, #0]
   13948:	b900      	cbnz	r0, 1394c <pkt_flush+0xa>
   1394a:	bd10      	pop	{r4, pc}
   1394c:	6862      	ldr	r2, [r4, #4]
   1394e:	6803      	ldr	r3, [r0, #0]
   13950:	4290      	cmp	r0, r2
   13952:	6023      	str	r3, [r4, #0]
   13954:	bf08      	it	eq
   13956:	6063      	streq	r3, [r4, #4]
   13958:	f7ff ffe5 	bl	13926 <pkt_free>
   1395c:	e7f3      	b.n	13946 <pkt_flush+0x4>

0001395e <on_conf_dnssrv_res>:
   1395e:	f000 bc71 	b.w	14244 <res_forward>

00013962 <nrf_freeaddrinfo>:
   13962:	b510      	push	{r4, lr}
   13964:	4604      	mov	r4, r0
   13966:	b160      	cbz	r0, 13982 <nrf_freeaddrinfo+0x20>
   13968:	6940      	ldr	r0, [r0, #20]
   1396a:	b108      	cbz	r0, 13970 <nrf_freeaddrinfo+0xe>
   1396c:	f7f8 f93e 	bl	bbec <nrf_modem_os_free>
   13970:	69a0      	ldr	r0, [r4, #24]
   13972:	b108      	cbz	r0, 13978 <nrf_freeaddrinfo+0x16>
   13974:	f7f8 f93a 	bl	bbec <nrf_modem_os_free>
   13978:	4620      	mov	r0, r4
   1397a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1397e:	f7f8 b935 	b.w	bbec <nrf_modem_os_free>
   13982:	bd10      	pop	{r4, pc}

00013984 <on_getifaddrs_res>:
   13984:	f000 bc5e 	b.w	14244 <res_forward>

00013988 <nrf_socket>:
   13988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1398c:	4681      	mov	r9, r0
   1398e:	460f      	mov	r7, r1
   13990:	4616      	mov	r6, r2
   13992:	f7ff ff6d 	bl	13870 <sock_family_is_valid>
   13996:	b930      	cbnz	r0, 139a6 <nrf_socket+0x1e>
   13998:	206a      	movs	r0, #106	; 0x6a
   1399a:	f7f8 f84d 	bl	ba38 <nrf_modem_os_errno_set>
   1399e:	f04f 30ff 	mov.w	r0, #4294967295
   139a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   139a6:	4630      	mov	r0, r6
   139a8:	f7fa fb1c 	bl	dfe4 <sock_proto_is_valid>
   139ac:	b908      	cbnz	r0, 139b2 <nrf_socket+0x2a>
   139ae:	207b      	movs	r0, #123	; 0x7b
   139b0:	e7f3      	b.n	1399a <nrf_socket+0x12>
   139b2:	4638      	mov	r0, r7
   139b4:	f7ff ff62 	bl	1387c <sock_type_is_valid>
   139b8:	b908      	cbnz	r0, 139be <nrf_socket+0x36>
   139ba:	206b      	movs	r0, #107	; 0x6b
   139bc:	e7ed      	b.n	1399a <nrf_socket+0x12>
   139be:	4639      	mov	r1, r7
   139c0:	4630      	mov	r0, r6
   139c2:	f7ff ff61 	bl	13888 <sock_proto_supports_type>
   139c6:	2800      	cmp	r0, #0
   139c8:	d0f7      	beq.n	139ba <nrf_socket+0x32>
   139ca:	f7fa fa81 	bl	ded0 <sock_open>
   139ce:	4605      	mov	r5, r0
   139d0:	b908      	cbnz	r0, 139d6 <nrf_socket+0x4e>
   139d2:	2017      	movs	r0, #23
   139d4:	e7e1      	b.n	1399a <nrf_socket+0x12>
   139d6:	2000      	movs	r0, #0
   139d8:	f7ff fdfd 	bl	135d6 <rpc_client_msg_alloc>
   139dc:	4604      	mov	r4, r0
   139de:	b920      	cbnz	r0, 139ea <nrf_socket+0x62>
   139e0:	6828      	ldr	r0, [r5, #0]
   139e2:	f7fa faad 	bl	df40 <_sock_close>
   139e6:	2069      	movs	r0, #105	; 0x69
   139e8:	e7d7      	b.n	1399a <nrf_socket+0x12>
   139ea:	2300      	movs	r3, #0
   139ec:	220c      	movs	r2, #12
   139ee:	f04f 38ff 	mov.w	r8, #4294967295
   139f2:	7202      	strb	r2, [r0, #8]
   139f4:	7243      	strb	r3, [r0, #9]
   139f6:	7283      	strb	r3, [r0, #10]
   139f8:	72c3      	strb	r3, [r0, #11]
   139fa:	f880 8010 	strb.w	r8, [r0, #16]
   139fe:	f880 8011 	strb.w	r8, [r0, #17]
   13a02:	f880 8012 	strb.w	r8, [r0, #18]
   13a06:	f880 8013 	strb.w	r8, [r0, #19]
   13a0a:	4648      	mov	r0, r9
   13a0c:	f7fb f9dc 	bl	edc8 <nrf_af_to_rpc_af>
   13a10:	6160      	str	r0, [r4, #20]
   13a12:	4638      	mov	r0, r7
   13a14:	f000 fb8e 	bl	14134 <nrf_type_to_rpc_type>
   13a18:	4601      	mov	r1, r0
   13a1a:	61a0      	str	r0, [r4, #24]
   13a1c:	4630      	mov	r0, r6
   13a1e:	f000 fb8a 	bl	14136 <nrf_proto_to_rpc_proto>
   13a22:	4621      	mov	r1, r4
   13a24:	61e0      	str	r0, [r4, #28]
   13a26:	f247 0001 	movw	r0, #28673	; 0x7001
   13a2a:	e9c5 9703 	strd	r9, r7, [r5, #12]
   13a2e:	616e      	str	r6, [r5, #20]
   13a30:	f000 fbd8 	bl	141e4 <req_forward>
   13a34:	4604      	mov	r4, r0
   13a36:	b120      	cbz	r0, 13a42 <nrf_socket+0xba>
   13a38:	4640      	mov	r0, r8
   13a3a:	f7fa fa81 	bl	df40 <_sock_close>
   13a3e:	4620      	mov	r0, r4
   13a40:	e7ab      	b.n	1399a <nrf_socket+0x12>
   13a42:	6828      	ldr	r0, [r5, #0]
   13a44:	e7ad      	b.n	139a2 <nrf_socket+0x1a>

00013a46 <nrf_connect>:
   13a46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13a48:	4607      	mov	r7, r0
   13a4a:	460d      	mov	r5, r1
   13a4c:	4616      	mov	r6, r2
   13a4e:	f7fa fa65 	bl	df1c <sock_find>
   13a52:	4604      	mov	r4, r0
   13a54:	b938      	cbnz	r0, 13a66 <nrf_connect+0x20>
   13a56:	2009      	movs	r0, #9
   13a58:	f7f7 ffee 	bl	ba38 <nrf_modem_os_errno_set>
   13a5c:	f04f 35ff 	mov.w	r5, #4294967295
   13a60:	4628      	mov	r0, r5
   13a62:	b003      	add	sp, #12
   13a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13a66:	f7ff fe8b 	bl	13780 <sock_is_closed>
   13a6a:	b108      	cbz	r0, 13a70 <nrf_connect+0x2a>
   13a6c:	69a0      	ldr	r0, [r4, #24]
   13a6e:	e7f3      	b.n	13a58 <nrf_connect+0x12>
   13a70:	4620      	mov	r0, r4
   13a72:	f7ff fe79 	bl	13768 <sock_is_connected>
   13a76:	b108      	cbz	r0, 13a7c <nrf_connect+0x36>
   13a78:	207f      	movs	r0, #127	; 0x7f
   13a7a:	e7ed      	b.n	13a58 <nrf_connect+0x12>
   13a7c:	4620      	mov	r0, r4
   13a7e:	f7ff fe6f 	bl	13760 <sock_is_connecting>
   13a82:	b108      	cbz	r0, 13a88 <nrf_connect+0x42>
   13a84:	2078      	movs	r0, #120	; 0x78
   13a86:	e7e7      	b.n	13a58 <nrf_connect+0x12>
   13a88:	b90d      	cbnz	r5, 13a8e <nrf_connect+0x48>
   13a8a:	200e      	movs	r0, #14
   13a8c:	e7e4      	b.n	13a58 <nrf_connect+0x12>
   13a8e:	4631      	mov	r1, r6
   13a90:	4628      	mov	r0, r5
   13a92:	f7ff ff13 	bl	138bc <sock_sockaddr_len_is_valid>
   13a96:	b908      	cbnz	r0, 13a9c <nrf_connect+0x56>
   13a98:	2016      	movs	r0, #22
   13a9a:	e7dd      	b.n	13a58 <nrf_connect+0x12>
   13a9c:	4629      	mov	r1, r5
   13a9e:	4620      	mov	r0, r4
   13aa0:	f7ff ff20 	bl	138e4 <sock_sockaddr_fam_is_valid>
   13aa4:	b908      	cbnz	r0, 13aaa <nrf_connect+0x64>
   13aa6:	206a      	movs	r0, #106	; 0x6a
   13aa8:	e7d6      	b.n	13a58 <nrf_connect+0x12>
   13aaa:	4620      	mov	r0, r4
   13aac:	f7ff fe64 	bl	13778 <sock_is_nonblock>
   13ab0:	4606      	mov	r6, r0
   13ab2:	b118      	cbz	r0, 13abc <nrf_connect+0x76>
   13ab4:	6966      	ldr	r6, [r4, #20]
   13ab6:	3e11      	subs	r6, #17
   13ab8:	bf18      	it	ne
   13aba:	2601      	movne	r6, #1
   13abc:	2000      	movs	r0, #0
   13abe:	f7ff fd8a 	bl	135d6 <rpc_client_msg_alloc>
   13ac2:	4602      	mov	r2, r0
   13ac4:	b908      	cbnz	r0, 13aca <nrf_connect+0x84>
   13ac6:	2069      	movs	r0, #105	; 0x69
   13ac8:	e7c6      	b.n	13a58 <nrf_connect+0x12>
   13aca:	2300      	movs	r3, #0
   13acc:	2114      	movs	r1, #20
   13ace:	6107      	str	r7, [r0, #16]
   13ad0:	7201      	strb	r1, [r0, #8]
   13ad2:	7243      	strb	r3, [r0, #9]
   13ad4:	7283      	strb	r3, [r0, #10]
   13ad6:	72c3      	strb	r3, [r0, #11]
   13ad8:	6869      	ldr	r1, [r5, #4]
   13ada:	2901      	cmp	r1, #1
   13adc:	d00e      	beq.n	13afc <nrf_connect+0xb6>
   13ade:	2902      	cmp	r1, #2
   13ae0:	d014      	beq.n	13b0c <nrf_connect+0xc6>
   13ae2:	7f23      	ldrb	r3, [r4, #28]
   13ae4:	f247 0102 	movw	r1, #28674	; 0x7002
   13ae8:	f043 0304 	orr.w	r3, r3, #4
   13aec:	7723      	strb	r3, [r4, #28]
   13aee:	2004      	movs	r0, #4
   13af0:	60d6      	str	r6, [r2, #12]
   13af2:	f7ff fd8c 	bl	1360e <rpc_client_msg_send>
   13af6:	b1ce      	cbz	r6, 13b2c <nrf_connect+0xe6>
   13af8:	2077      	movs	r0, #119	; 0x77
   13afa:	e7ad      	b.n	13a58 <nrf_connect+0x12>
   13afc:	8929      	ldrh	r1, [r5, #8]
   13afe:	75c3      	strb	r3, [r0, #23]
   13b00:	8281      	strh	r1, [r0, #20]
   13b02:	2104      	movs	r1, #4
   13b04:	7581      	strb	r1, [r0, #22]
   13b06:	68eb      	ldr	r3, [r5, #12]
   13b08:	6183      	str	r3, [r0, #24]
   13b0a:	e7ea      	b.n	13ae2 <nrf_connect+0x9c>
   13b0c:	8929      	ldrh	r1, [r5, #8]
   13b0e:	75c3      	strb	r3, [r0, #23]
   13b10:	8281      	strh	r1, [r0, #20]
   13b12:	2110      	movs	r1, #16
   13b14:	186b      	adds	r3, r5, r1
   13b16:	7581      	strb	r1, [r0, #22]
   13b18:	3520      	adds	r5, #32
   13b1a:	f100 0118 	add.w	r1, r0, #24
   13b1e:	f853 0b04 	ldr.w	r0, [r3], #4
   13b22:	42ab      	cmp	r3, r5
   13b24:	f841 0b04 	str.w	r0, [r1], #4
   13b28:	d1f9      	bne.n	13b1e <nrf_connect+0xd8>
   13b2a:	e7da      	b.n	13ae2 <nrf_connect+0x9c>
   13b2c:	4620      	mov	r0, r4
   13b2e:	f7ff fe8d 	bl	1384c <sock_sndtimeo_ms_get>
   13b32:	9001      	str	r0, [sp, #4]
   13b34:	4620      	mov	r0, r4
   13b36:	f7ff fe13 	bl	13760 <sock_is_connecting>
   13b3a:	b918      	cbnz	r0, 13b44 <nrf_connect+0xfe>
   13b3c:	69a5      	ldr	r5, [r4, #24]
   13b3e:	b185      	cbz	r5, 13b62 <nrf_connect+0x11c>
   13b40:	4628      	mov	r0, r5
   13b42:	e789      	b.n	13a58 <nrf_connect+0x12>
   13b44:	2002      	movs	r0, #2
   13b46:	a901      	add	r1, sp, #4
   13b48:	f7f7 feb4 	bl	b8b4 <nrf_modem_os_timedwait>
   13b4c:	f110 0f0b 	cmn.w	r0, #11
   13b50:	d005      	beq.n	13b5e <nrf_connect+0x118>
   13b52:	2800      	cmp	r0, #0
   13b54:	d0ee      	beq.n	13b34 <nrf_connect+0xee>
   13b56:	2800      	cmp	r0, #0
   13b58:	bfb8      	it	lt
   13b5a:	4240      	neglt	r0, r0
   13b5c:	e77c      	b.n	13a58 <nrf_connect+0x12>
   13b5e:	2074      	movs	r0, #116	; 0x74
   13b60:	e77a      	b.n	13a58 <nrf_connect+0x12>
   13b62:	4620      	mov	r0, r4
   13b64:	f7ff fdf0 	bl	13748 <sock_proto_is_secure>
   13b68:	2800      	cmp	r0, #0
   13b6a:	f43f af79 	beq.w	13a60 <nrf_connect+0x1a>
   13b6e:	4620      	mov	r0, r4
   13b70:	9901      	ldr	r1, [sp, #4]
   13b72:	f7fb f8b1 	bl	ecd8 <tls_attach>
   13b76:	4605      	mov	r5, r0
   13b78:	e772      	b.n	13a60 <nrf_connect+0x1a>

00013b7a <nrf_bind>:
   13b7a:	b538      	push	{r3, r4, r5, lr}
   13b7c:	4605      	mov	r5, r0
   13b7e:	460c      	mov	r4, r1
   13b80:	f7fa f9cc 	bl	df1c <sock_find>
   13b84:	b930      	cbnz	r0, 13b94 <nrf_bind+0x1a>
   13b86:	2009      	movs	r0, #9
   13b88:	f7f7 ff56 	bl	ba38 <nrf_modem_os_errno_set>
   13b8c:	f04f 33ff 	mov.w	r3, #4294967295
   13b90:	4618      	mov	r0, r3
   13b92:	bd38      	pop	{r3, r4, r5, pc}
   13b94:	b90c      	cbnz	r4, 13b9a <nrf_bind+0x20>
   13b96:	200e      	movs	r0, #14
   13b98:	e7f6      	b.n	13b88 <nrf_bind+0xe>
   13b9a:	4621      	mov	r1, r4
   13b9c:	f7ff fea2 	bl	138e4 <sock_sockaddr_fam_is_valid>
   13ba0:	b908      	cbnz	r0, 13ba6 <nrf_bind+0x2c>
   13ba2:	206a      	movs	r0, #106	; 0x6a
   13ba4:	e7f0      	b.n	13b88 <nrf_bind+0xe>
   13ba6:	2000      	movs	r0, #0
   13ba8:	f7ff fd15 	bl	135d6 <rpc_client_msg_alloc>
   13bac:	4601      	mov	r1, r0
   13bae:	b908      	cbnz	r0, 13bb4 <nrf_bind+0x3a>
   13bb0:	2069      	movs	r0, #105	; 0x69
   13bb2:	e7e9      	b.n	13b88 <nrf_bind+0xe>
   13bb4:	2300      	movs	r3, #0
   13bb6:	2214      	movs	r2, #20
   13bb8:	6105      	str	r5, [r0, #16]
   13bba:	7202      	strb	r2, [r0, #8]
   13bbc:	7243      	strb	r3, [r0, #9]
   13bbe:	7283      	strb	r3, [r0, #10]
   13bc0:	72c3      	strb	r3, [r0, #11]
   13bc2:	6862      	ldr	r2, [r4, #4]
   13bc4:	2a01      	cmp	r2, #1
   13bc6:	d009      	beq.n	13bdc <nrf_bind+0x62>
   13bc8:	2a02      	cmp	r2, #2
   13bca:	d00f      	beq.n	13bec <nrf_bind+0x72>
   13bcc:	f247 0005 	movw	r0, #28677	; 0x7005
   13bd0:	f000 fb08 	bl	141e4 <req_forward>
   13bd4:	4603      	mov	r3, r0
   13bd6:	2800      	cmp	r0, #0
   13bd8:	d0da      	beq.n	13b90 <nrf_bind+0x16>
   13bda:	e7d5      	b.n	13b88 <nrf_bind+0xe>
   13bdc:	8922      	ldrh	r2, [r4, #8]
   13bde:	75c3      	strb	r3, [r0, #23]
   13be0:	8282      	strh	r2, [r0, #20]
   13be2:	2204      	movs	r2, #4
   13be4:	7582      	strb	r2, [r0, #22]
   13be6:	68e3      	ldr	r3, [r4, #12]
   13be8:	6183      	str	r3, [r0, #24]
   13bea:	e7ef      	b.n	13bcc <nrf_bind+0x52>
   13bec:	8922      	ldrh	r2, [r4, #8]
   13bee:	75c3      	strb	r3, [r0, #23]
   13bf0:	8282      	strh	r2, [r0, #20]
   13bf2:	2210      	movs	r2, #16
   13bf4:	18a3      	adds	r3, r4, r2
   13bf6:	7582      	strb	r2, [r0, #22]
   13bf8:	3420      	adds	r4, #32
   13bfa:	f100 0218 	add.w	r2, r0, #24
   13bfe:	f853 0b04 	ldr.w	r0, [r3], #4
   13c02:	42a3      	cmp	r3, r4
   13c04:	f842 0b04 	str.w	r0, [r2], #4
   13c08:	d1f9      	bne.n	13bfe <nrf_bind+0x84>
   13c0a:	e7df      	b.n	13bcc <nrf_bind+0x52>

00013c0c <nrf_listen>:
   13c0c:	b538      	push	{r3, r4, r5, lr}
   13c0e:	4605      	mov	r5, r0
   13c10:	460c      	mov	r4, r1
   13c12:	f7fa f983 	bl	df1c <sock_find>
   13c16:	b930      	cbnz	r0, 13c26 <nrf_listen+0x1a>
   13c18:	2009      	movs	r0, #9
   13c1a:	f7f7 ff0d 	bl	ba38 <nrf_modem_os_errno_set>
   13c1e:	f04f 33ff 	mov.w	r3, #4294967295
   13c22:	4618      	mov	r0, r3
   13c24:	bd38      	pop	{r3, r4, r5, pc}
   13c26:	f7ff fd80 	bl	1372a <sock_is_stream>
   13c2a:	b908      	cbnz	r0, 13c30 <nrf_listen+0x24>
   13c2c:	205f      	movs	r0, #95	; 0x5f
   13c2e:	e7f4      	b.n	13c1a <nrf_listen+0xe>
   13c30:	2000      	movs	r0, #0
   13c32:	f7ff fcd0 	bl	135d6 <rpc_client_msg_alloc>
   13c36:	4601      	mov	r1, r0
   13c38:	b908      	cbnz	r0, 13c3e <nrf_listen+0x32>
   13c3a:	2069      	movs	r0, #105	; 0x69
   13c3c:	e7ed      	b.n	13c1a <nrf_listen+0xe>
   13c3e:	2300      	movs	r3, #0
   13c40:	2204      	movs	r2, #4
   13c42:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   13c46:	7243      	strb	r3, [r0, #9]
   13c48:	7283      	strb	r3, [r0, #10]
   13c4a:	72c3      	strb	r3, [r0, #11]
   13c4c:	6105      	str	r5, [r0, #16]
   13c4e:	7202      	strb	r2, [r0, #8]
   13c50:	6144      	str	r4, [r0, #20]
   13c52:	f247 0008 	movw	r0, #28680	; 0x7008
   13c56:	f000 fac5 	bl	141e4 <req_forward>
   13c5a:	4603      	mov	r3, r0
   13c5c:	2800      	cmp	r0, #0
   13c5e:	d0e0      	beq.n	13c22 <nrf_listen+0x16>
   13c60:	e7db      	b.n	13c1a <nrf_listen+0xe>

00013c62 <nrf_accept>:
   13c62:	2300      	movs	r3, #0
   13c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13c68:	b08d      	sub	sp, #52	; 0x34
   13c6a:	4606      	mov	r6, r0
   13c6c:	4688      	mov	r8, r1
   13c6e:	4614      	mov	r4, r2
   13c70:	e9cd 3301 	strd	r3, r3, [sp, #4]
   13c74:	f7fa f952 	bl	df1c <sock_find>
   13c78:	4605      	mov	r5, r0
   13c7a:	b938      	cbnz	r0, 13c8c <nrf_accept+0x2a>
   13c7c:	2009      	movs	r0, #9
   13c7e:	f7f7 fedb 	bl	ba38 <nrf_modem_os_errno_set>
   13c82:	f04f 30ff 	mov.w	r0, #4294967295
   13c86:	b00d      	add	sp, #52	; 0x34
   13c88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13c8c:	f1b8 0f00 	cmp.w	r8, #0
   13c90:	d002      	beq.n	13c98 <nrf_accept+0x36>
   13c92:	b91c      	cbnz	r4, 13c9c <nrf_accept+0x3a>
   13c94:	200e      	movs	r0, #14
   13c96:	e7f2      	b.n	13c7e <nrf_accept+0x1c>
   13c98:	2c00      	cmp	r4, #0
   13c9a:	d1fb      	bne.n	13c94 <nrf_accept+0x32>
   13c9c:	4628      	mov	r0, r5
   13c9e:	f7ff fd44 	bl	1372a <sock_is_stream>
   13ca2:	b908      	cbnz	r0, 13ca8 <nrf_accept+0x46>
   13ca4:	205f      	movs	r0, #95	; 0x5f
   13ca6:	e7ea      	b.n	13c7e <nrf_accept+0x1c>
   13ca8:	4628      	mov	r0, r5
   13caa:	f7ff fd65 	bl	13778 <sock_is_nonblock>
   13cae:	b128      	cbz	r0, 13cbc <nrf_accept+0x5a>
   13cb0:	4628      	mov	r0, r5
   13cb2:	f7ff fd96 	bl	137e2 <sock_can_accept>
   13cb6:	b908      	cbnz	r0, 13cbc <nrf_accept+0x5a>
   13cb8:	200b      	movs	r0, #11
   13cba:	e7e0      	b.n	13c7e <nrf_accept+0x1c>
   13cbc:	f7fa f908 	bl	ded0 <sock_open>
   13cc0:	4607      	mov	r7, r0
   13cc2:	b908      	cbnz	r0, 13cc8 <nrf_accept+0x66>
   13cc4:	2017      	movs	r0, #23
   13cc6:	e7da      	b.n	13c7e <nrf_accept+0x1c>
   13cc8:	2000      	movs	r0, #0
   13cca:	f7ff fc84 	bl	135d6 <rpc_client_msg_alloc>
   13cce:	4605      	mov	r5, r0
   13cd0:	b920      	cbnz	r0, 13cdc <nrf_accept+0x7a>
   13cd2:	6838      	ldr	r0, [r7, #0]
   13cd4:	f7fa f934 	bl	df40 <_sock_close>
   13cd8:	2069      	movs	r0, #105	; 0x69
   13cda:	e7d0      	b.n	13c7e <nrf_accept+0x1c>
   13cdc:	6106      	str	r6, [r0, #16]
   13cde:	a901      	add	r1, sp, #4
   13ce0:	9702      	str	r7, [sp, #8]
   13ce2:	f000 faab 	bl	1423c <req_cookie_set>
   13ce6:	4629      	mov	r1, r5
   13ce8:	f247 000c 	movw	r0, #28684	; 0x700c
   13cec:	f000 fa7a 	bl	141e4 <req_forward>
   13cf0:	4606      	mov	r6, r0
   13cf2:	b120      	cbz	r0, 13cfe <nrf_accept+0x9c>
   13cf4:	6838      	ldr	r0, [r7, #0]
   13cf6:	f7fa f923 	bl	df40 <_sock_close>
   13cfa:	4630      	mov	r0, r6
   13cfc:	e7bf      	b.n	13c7e <nrf_accept+0x1c>
   13cfe:	9d01      	ldr	r5, [sp, #4]
   13d00:	f1b8 0f00 	cmp.w	r8, #0
   13d04:	d006      	beq.n	13d14 <nrf_accept+0xb2>
   13d06:	b12c      	cbz	r4, 13d14 <nrf_accept+0xb2>
   13d08:	8beb      	ldrh	r3, [r5, #30]
   13d0a:	2b04      	cmp	r3, #4
   13d0c:	d007      	beq.n	13d1e <nrf_accept+0xbc>
   13d0e:	2b10      	cmp	r3, #16
   13d10:	d01e      	beq.n	13d50 <nrf_accept+0xee>
   13d12:	6026      	str	r6, [r4, #0]
   13d14:	4628      	mov	r0, r5
   13d16:	f7ff fc81 	bl	1361c <rpc_client_msg_rx_free>
   13d1a:	6838      	ldr	r0, [r7, #0]
   13d1c:	e7b3      	b.n	13c86 <nrf_accept+0x24>
   13d1e:	2310      	movs	r3, #16
   13d20:	9003      	str	r0, [sp, #12]
   13d22:	f88d 300c 	strb.w	r3, [sp, #12]
   13d26:	2301      	movs	r3, #1
   13d28:	6826      	ldr	r6, [r4, #0]
   13d2a:	9005      	str	r0, [sp, #20]
   13d2c:	2e10      	cmp	r6, #16
   13d2e:	bf28      	it	cs
   13d30:	2610      	movcs	r6, #16
   13d32:	9304      	str	r3, [sp, #16]
   13d34:	7f2b      	ldrb	r3, [r5, #28]
   13d36:	7f6a      	ldrb	r2, [r5, #29]
   13d38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13d3c:	f8ad 3014 	strh.w	r3, [sp, #20]
   13d40:	6a2b      	ldr	r3, [r5, #32]
   13d42:	9306      	str	r3, [sp, #24]
   13d44:	4632      	mov	r2, r6
   13d46:	4640      	mov	r0, r8
   13d48:	a903      	add	r1, sp, #12
   13d4a:	f000 fc11 	bl	14570 <memcpy>
   13d4e:	e7e0      	b.n	13d12 <nrf_accept+0xb0>
   13d50:	f04f 0924 	mov.w	r9, #36	; 0x24
   13d54:	4601      	mov	r1, r0
   13d56:	464a      	mov	r2, r9
   13d58:	a803      	add	r0, sp, #12
   13d5a:	f000 fc16 	bl	1458a <memset>
   13d5e:	2302      	movs	r3, #2
   13d60:	f88d 900c 	strb.w	r9, [sp, #12]
   13d64:	9304      	str	r3, [sp, #16]
   13d66:	7f2b      	ldrb	r3, [r5, #28]
   13d68:	7f6a      	ldrb	r2, [r5, #29]
   13d6a:	ae07      	add	r6, sp, #28
   13d6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13d70:	f8ad 3014 	strh.w	r3, [sp, #20]
   13d74:	f105 0c30 	add.w	ip, r5, #48	; 0x30
   13d78:	f105 0320 	add.w	r3, r5, #32
   13d7c:	4632      	mov	r2, r6
   13d7e:	6818      	ldr	r0, [r3, #0]
   13d80:	6859      	ldr	r1, [r3, #4]
   13d82:	3308      	adds	r3, #8
   13d84:	c203      	stmia	r2!, {r0, r1}
   13d86:	4563      	cmp	r3, ip
   13d88:	4616      	mov	r6, r2
   13d8a:	d1f7      	bne.n	13d7c <nrf_accept+0x11a>
   13d8c:	6826      	ldr	r6, [r4, #0]
   13d8e:	2e24      	cmp	r6, #36	; 0x24
   13d90:	bf28      	it	cs
   13d92:	2624      	movcs	r6, #36	; 0x24
   13d94:	e7d6      	b.n	13d44 <nrf_accept+0xe2>

00013d96 <nrf_recvfrom>:
   13d96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d9a:	b085      	sub	sp, #20
   13d9c:	4690      	mov	r8, r2
   13d9e:	e9dd b70e 	ldrd	fp, r7, [sp, #56]	; 0x38
   13da2:	461e      	mov	r6, r3
   13da4:	9101      	str	r1, [sp, #4]
   13da6:	f403 7a80 	and.w	sl, r3, #256	; 0x100
   13daa:	f7fa f8b7 	bl	df1c <sock_find>
   13dae:	4604      	mov	r4, r0
   13db0:	b940      	cbnz	r0, 13dc4 <nrf_recvfrom+0x2e>
   13db2:	2009      	movs	r0, #9
   13db4:	f7f7 fe40 	bl	ba38 <nrf_modem_os_errno_set>
   13db8:	f04f 39ff 	mov.w	r9, #4294967295
   13dbc:	4648      	mov	r0, r9
   13dbe:	b005      	add	sp, #20
   13dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dc4:	f436 79a1 	bics.w	r9, r6, #322	; 0x142
   13dc8:	d001      	beq.n	13dce <nrf_recvfrom+0x38>
   13dca:	205f      	movs	r0, #95	; 0x5f
   13dcc:	e7f2      	b.n	13db4 <nrf_recvfrom+0x1e>
   13dce:	f1bb 0f00 	cmp.w	fp, #0
   13dd2:	d002      	beq.n	13dda <nrf_recvfrom+0x44>
   13dd4:	b91f      	cbnz	r7, 13dde <nrf_recvfrom+0x48>
   13dd6:	200e      	movs	r0, #14
   13dd8:	e7ec      	b.n	13db4 <nrf_recvfrom+0x1e>
   13dda:	2f00      	cmp	r7, #0
   13ddc:	d1fb      	bne.n	13dd6 <nrf_recvfrom+0x40>
   13dde:	4620      	mov	r0, r4
   13de0:	f7ff fca3 	bl	1372a <sock_is_stream>
   13de4:	b128      	cbz	r0, 13df2 <nrf_recvfrom+0x5c>
   13de6:	4620      	mov	r0, r4
   13de8:	f7ff fcbe 	bl	13768 <sock_is_connected>
   13dec:	b908      	cbnz	r0, 13df2 <nrf_recvfrom+0x5c>
   13dee:	2080      	movs	r0, #128	; 0x80
   13df0:	e7e0      	b.n	13db4 <nrf_recvfrom+0x1e>
   13df2:	f1ba 0f00 	cmp.w	sl, #0
   13df6:	d117      	bne.n	13e28 <nrf_recvfrom+0x92>
   13df8:	4620      	mov	r0, r4
   13dfa:	f7ff fcbd 	bl	13778 <sock_is_nonblock>
   13dfe:	b9a8      	cbnz	r0, 13e2c <nrf_recvfrom+0x96>
   13e00:	f3c6 1580 	ubfx	r5, r6, #6, #1
   13e04:	4620      	mov	r0, r4
   13e06:	f7ff fd0f 	bl	13828 <sock_rcvtimeo_ms_get>
   13e0a:	9003      	str	r0, [sp, #12]
   13e0c:	4620      	mov	r0, r4
   13e0e:	f7ff fcb7 	bl	13780 <sock_is_closed>
   13e12:	b1b8      	cbz	r0, 13e44 <nrf_recvfrom+0xae>
   13e14:	4620      	mov	r0, r4
   13e16:	f7ff fc63 	bl	136e0 <sock_has_pkt>
   13e1a:	bb78      	cbnz	r0, 13e7c <nrf_recvfrom+0xe6>
   13e1c:	4620      	mov	r0, r4
   13e1e:	f7ff fcc5 	bl	137ac <sock_has_error>
   13e22:	b1c0      	cbz	r0, 13e56 <nrf_recvfrom+0xc0>
   13e24:	69a0      	ldr	r0, [r4, #24]
   13e26:	e7c5      	b.n	13db4 <nrf_recvfrom+0x1e>
   13e28:	2500      	movs	r5, #0
   13e2a:	e7eb      	b.n	13e04 <nrf_recvfrom+0x6e>
   13e2c:	2501      	movs	r5, #1
   13e2e:	e7e9      	b.n	13e04 <nrf_recvfrom+0x6e>
   13e30:	2002      	movs	r0, #2
   13e32:	a903      	add	r1, sp, #12
   13e34:	f7f7 fd3e 	bl	b8b4 <nrf_modem_os_timedwait>
   13e38:	2800      	cmp	r0, #0
   13e3a:	d0e7      	beq.n	13e0c <nrf_recvfrom+0x76>
   13e3c:	2800      	cmp	r0, #0
   13e3e:	bfb8      	it	lt
   13e40:	4240      	neglt	r0, r0
   13e42:	e7b7      	b.n	13db4 <nrf_recvfrom+0x1e>
   13e44:	4620      	mov	r0, r4
   13e46:	f7ff fc4b 	bl	136e0 <sock_has_pkt>
   13e4a:	2800      	cmp	r0, #0
   13e4c:	d1e2      	bne.n	13e14 <nrf_recvfrom+0x7e>
   13e4e:	2d00      	cmp	r5, #0
   13e50:	d0ee      	beq.n	13e30 <nrf_recvfrom+0x9a>
   13e52:	200b      	movs	r0, #11
   13e54:	e7ae      	b.n	13db4 <nrf_recvfrom+0x1e>
   13e56:	4620      	mov	r0, r4
   13e58:	f7ff fc9a 	bl	13790 <sock_is_eof>
   13e5c:	2800      	cmp	r0, #0
   13e5e:	d1ad      	bne.n	13dbc <nrf_recvfrom+0x26>
   13e60:	4620      	mov	r0, r4
   13e62:	f7ff fc91 	bl	13788 <sock_is_local_closed>
   13e66:	b148      	cbz	r0, 13e7c <nrf_recvfrom+0xe6>
   13e68:	4620      	mov	r0, r4
   13e6a:	f7ff fc5e 	bl	1372a <sock_is_stream>
   13e6e:	2800      	cmp	r0, #0
   13e70:	d1a4      	bne.n	13dbc <nrf_recvfrom+0x26>
   13e72:	4620      	mov	r0, r4
   13e74:	f7ff fc5e 	bl	13734 <sock_is_datagram>
   13e78:	2800      	cmp	r0, #0
   13e7a:	d19a      	bne.n	13db2 <nrf_recvfrom+0x1c>
   13e7c:	4620      	mov	r0, r4
   13e7e:	f7ff fc52 	bl	13726 <sock_pkt_peek_head>
   13e82:	4605      	mov	r5, r0
   13e84:	f1bb 0f00 	cmp.w	fp, #0
   13e88:	d00a      	beq.n	13ea0 <nrf_recvfrom+0x10a>
   13e8a:	68c1      	ldr	r1, [r0, #12]
   13e8c:	b369      	cbz	r1, 13eea <nrf_recvfrom+0x154>
   13e8e:	780a      	ldrb	r2, [r1, #0]
   13e90:	683b      	ldr	r3, [r7, #0]
   13e92:	4658      	mov	r0, fp
   13e94:	429a      	cmp	r2, r3
   13e96:	bf28      	it	cs
   13e98:	461a      	movcs	r2, r3
   13e9a:	603a      	str	r2, [r7, #0]
   13e9c:	f000 fb68 	bl	14570 <memcpy>
   13ea0:	f006 0602 	and.w	r6, r6, #2
   13ea4:	4628      	mov	r0, r5
   13ea6:	f7ff fd3a 	bl	1391e <pkt_bytes_left>
   13eaa:	4540      	cmp	r0, r8
   13eac:	d81f      	bhi.n	13eee <nrf_recvfrom+0x158>
   13eae:	4628      	mov	r0, r5
   13eb0:	f7ff fd35 	bl	1391e <pkt_bytes_left>
   13eb4:	4607      	mov	r7, r0
   13eb6:	2f00      	cmp	r7, #0
   13eb8:	d080      	beq.n	13dbc <nrf_recvfrom+0x26>
   13eba:	9b01      	ldr	r3, [sp, #4]
   13ebc:	4628      	mov	r0, r5
   13ebe:	eb03 0b09 	add.w	fp, r3, r9
   13ec2:	f7ff fd28 	bl	13916 <pkt_bytes_get>
   13ec6:	463a      	mov	r2, r7
   13ec8:	4601      	mov	r1, r0
   13eca:	4658      	mov	r0, fp
   13ecc:	f000 fb50 	bl	14570 <memcpy>
   13ed0:	4620      	mov	r0, r4
   13ed2:	44b9      	add	r9, r7
   13ed4:	f7ff fc2e 	bl	13734 <sock_is_datagram>
   13ed8:	b158      	cbz	r0, 13ef2 <nrf_recvfrom+0x15c>
   13eda:	2e00      	cmp	r6, #0
   13edc:	f47f af6e 	bne.w	13dbc <nrf_recvfrom+0x26>
   13ee0:	4629      	mov	r1, r5
   13ee2:	4620      	mov	r0, r4
   13ee4:	f7ff fc0b 	bl	136fe <sock_pkt_remove>
   13ee8:	e768      	b.n	13dbc <nrf_recvfrom+0x26>
   13eea:	6039      	str	r1, [r7, #0]
   13eec:	e7d8      	b.n	13ea0 <nrf_recvfrom+0x10a>
   13eee:	4647      	mov	r7, r8
   13ef0:	e7e1      	b.n	13eb6 <nrf_recvfrom+0x120>
   13ef2:	4620      	mov	r0, r4
   13ef4:	f7ff fc23 	bl	1373e <sock_is_raw>
   13ef8:	2800      	cmp	r0, #0
   13efa:	d1ee      	bne.n	13eda <nrf_recvfrom+0x144>
   13efc:	b956      	cbnz	r6, 13f14 <nrf_recvfrom+0x17e>
   13efe:	896b      	ldrh	r3, [r5, #10]
   13f00:	4628      	mov	r0, r5
   13f02:	443b      	add	r3, r7
   13f04:	816b      	strh	r3, [r5, #10]
   13f06:	f7ff fd0a 	bl	1391e <pkt_bytes_left>
   13f0a:	b918      	cbnz	r0, 13f14 <nrf_recvfrom+0x17e>
   13f0c:	4629      	mov	r1, r5
   13f0e:	4620      	mov	r0, r4
   13f10:	f7ff fbf5 	bl	136fe <sock_pkt_remove>
   13f14:	45b8      	cmp	r8, r7
   13f16:	f43f af51 	beq.w	13dbc <nrf_recvfrom+0x26>
   13f1a:	f1ba 0f00 	cmp.w	sl, #0
   13f1e:	d10a      	bne.n	13f36 <nrf_recvfrom+0x1a0>
   13f20:	b976      	cbnz	r6, 13f40 <nrf_recvfrom+0x1aa>
   13f22:	4620      	mov	r0, r4
   13f24:	f7ff fbff 	bl	13726 <sock_pkt_peek_head>
   13f28:	e00d      	b.n	13f46 <nrf_recvfrom+0x1b0>
   13f2a:	4620      	mov	r0, r4
   13f2c:	f7ff fc28 	bl	13780 <sock_is_closed>
   13f30:	2800      	cmp	r0, #0
   13f32:	f47f af43 	bne.w	13dbc <nrf_recvfrom+0x26>
   13f36:	b16e      	cbz	r6, 13f54 <nrf_recvfrom+0x1be>
   13f38:	4628      	mov	r0, r5
   13f3a:	f7ff fce3 	bl	13904 <pkt_has_next>
   13f3e:	b170      	cbz	r0, 13f5e <nrf_recvfrom+0x1c8>
   13f40:	4628      	mov	r0, r5
   13f42:	f7ff fce5 	bl	13910 <pkt_peek_next>
   13f46:	4605      	mov	r5, r0
   13f48:	2800      	cmp	r0, #0
   13f4a:	f43f af37 	beq.w	13dbc <nrf_recvfrom+0x26>
   13f4e:	eba8 0807 	sub.w	r8, r8, r7
   13f52:	e7a7      	b.n	13ea4 <nrf_recvfrom+0x10e>
   13f54:	4620      	mov	r0, r4
   13f56:	f7ff fbc3 	bl	136e0 <sock_has_pkt>
   13f5a:	2800      	cmp	r0, #0
   13f5c:	d1e1      	bne.n	13f22 <nrf_recvfrom+0x18c>
   13f5e:	2002      	movs	r0, #2
   13f60:	a903      	add	r1, sp, #12
   13f62:	f7f7 fca7 	bl	b8b4 <nrf_modem_os_timedwait>
   13f66:	2800      	cmp	r0, #0
   13f68:	d0df      	beq.n	13f2a <nrf_recvfrom+0x194>
   13f6a:	f1b9 0f00 	cmp.w	r9, #0
   13f6e:	f47f af25 	bne.w	13dbc <nrf_recvfrom+0x26>
   13f72:	e763      	b.n	13e3c <nrf_recvfrom+0xa6>

00013f74 <rpc_ip_deinit>:
   13f74:	b508      	push	{r3, lr}
   13f76:	f7f9 fff9 	bl	df6c <sock_shutdown>
   13f7a:	2000      	movs	r0, #0
   13f7c:	bd08      	pop	{r3, pc}

00013f7e <tls_setopt_role>:
   13f7e:	b508      	push	{r3, lr}
   13f80:	b109      	cbz	r1, 13f86 <tls_setopt_role+0x8>
   13f82:	2a04      	cmp	r2, #4
   13f84:	d005      	beq.n	13f92 <tls_setopt_role+0x14>
   13f86:	2016      	movs	r0, #22
   13f88:	f7f7 fd56 	bl	ba38 <nrf_modem_os_errno_set>
   13f8c:	f04f 30ff 	mov.w	r0, #4294967295
   13f90:	e006      	b.n	13fa0 <tls_setopt_role+0x22>
   13f92:	780b      	ldrb	r3, [r1, #0]
   13f94:	b12b      	cbz	r3, 13fa2 <tls_setopt_role+0x24>
   13f96:	2b01      	cmp	r3, #1
   13f98:	d1f5      	bne.n	13f86 <tls_setopt_role+0x8>
   13f9a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   13f9e:	2000      	movs	r0, #0
   13fa0:	bd08      	pop	{r3, pc}
   13fa2:	2302      	movs	r3, #2
   13fa4:	e7f9      	b.n	13f9a <tls_setopt_role+0x1c>

00013fa6 <tls_setopt_taglist>:
   13fa6:	b510      	push	{r4, lr}
   13fa8:	1e54      	subs	r4, r2, #1
   13faa:	2c1b      	cmp	r4, #27
   13fac:	d802      	bhi.n	13fb4 <tls_setopt_taglist+0xe>
   13fae:	f012 0403 	ands.w	r4, r2, #3
   13fb2:	d005      	beq.n	13fc0 <tls_setopt_taglist+0x1a>
   13fb4:	2016      	movs	r0, #22
   13fb6:	f7f7 fd3f 	bl	ba38 <nrf_modem_os_errno_set>
   13fba:	f04f 30ff 	mov.w	r0, #4294967295
   13fbe:	bd10      	pop	{r4, pc}
   13fc0:	0893      	lsrs	r3, r2, #2
   13fc2:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   13fc6:	3048      	adds	r0, #72	; 0x48
   13fc8:	f000 fad2 	bl	14570 <memcpy>
   13fcc:	4620      	mov	r0, r4
   13fce:	e7f6      	b.n	13fbe <tls_setopt_taglist+0x18>

00013fd0 <tls_setopt_sess_cache>:
   13fd0:	b508      	push	{r3, lr}
   13fd2:	b109      	cbz	r1, 13fd8 <tls_setopt_sess_cache+0x8>
   13fd4:	2a04      	cmp	r2, #4
   13fd6:	d005      	beq.n	13fe4 <tls_setopt_sess_cache+0x14>
   13fd8:	2016      	movs	r0, #22
   13fda:	f7f7 fd2d 	bl	ba38 <nrf_modem_os_errno_set>
   13fde:	f04f 30ff 	mov.w	r0, #4294967295
   13fe2:	bd08      	pop	{r3, pc}
   13fe4:	780b      	ldrb	r3, [r1, #0]
   13fe6:	3b00      	subs	r3, #0
   13fe8:	bf18      	it	ne
   13fea:	2301      	movne	r3, #1
   13fec:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   13ff0:	2000      	movs	r0, #0
   13ff2:	e7f6      	b.n	13fe2 <tls_setopt_sess_cache+0x12>

00013ff4 <tls_setopt_peer_verify>:
   13ff4:	b508      	push	{r3, lr}
   13ff6:	b109      	cbz	r1, 13ffc <tls_setopt_peer_verify+0x8>
   13ff8:	2a04      	cmp	r2, #4
   13ffa:	d005      	beq.n	14008 <tls_setopt_peer_verify+0x14>
   13ffc:	2016      	movs	r0, #22
   13ffe:	f7f7 fd1b 	bl	ba38 <nrf_modem_os_errno_set>
   14002:	f04f 30ff 	mov.w	r0, #4294967295
   14006:	bd08      	pop	{r3, pc}
   14008:	680b      	ldr	r3, [r1, #0]
   1400a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   1400e:	2000      	movs	r0, #0
   14010:	e7f9      	b.n	14006 <tls_setopt_peer_verify+0x12>

00014012 <tls_setopt_hostname>:
   14012:	b570      	push	{r4, r5, r6, lr}
   14014:	4605      	mov	r5, r0
   14016:	4614      	mov	r4, r2
   14018:	460e      	mov	r6, r1
   1401a:	b931      	cbnz	r1, 1402a <tls_setopt_hostname+0x18>
   1401c:	b192      	cbz	r2, 14044 <tls_setopt_hostname+0x32>
   1401e:	2016      	movs	r0, #22
   14020:	f7f7 fd0a 	bl	ba38 <nrf_modem_os_errno_set>
   14024:	f04f 30ff 	mov.w	r0, #4294967295
   14028:	bd70      	pop	{r4, r5, r6, pc}
   1402a:	2a00      	cmp	r2, #0
   1402c:	d0f7      	beq.n	1401e <tls_setopt_hostname+0xc>
   1402e:	6c00      	ldr	r0, [r0, #64]	; 0x40
   14030:	b108      	cbz	r0, 14036 <tls_setopt_hostname+0x24>
   14032:	f7f7 fddb 	bl	bbec <nrf_modem_os_free>
   14036:	1c60      	adds	r0, r4, #1
   14038:	f7f7 fdd0 	bl	bbdc <nrf_modem_os_alloc>
   1403c:	6428      	str	r0, [r5, #64]	; 0x40
   1403e:	b938      	cbnz	r0, 14050 <tls_setopt_hostname+0x3e>
   14040:	2069      	movs	r0, #105	; 0x69
   14042:	e7ed      	b.n	14020 <tls_setopt_hostname+0xe>
   14044:	6c00      	ldr	r0, [r0, #64]	; 0x40
   14046:	b108      	cbz	r0, 1404c <tls_setopt_hostname+0x3a>
   14048:	f7f7 fdd0 	bl	bbec <nrf_modem_os_free>
   1404c:	2000      	movs	r0, #0
   1404e:	e7eb      	b.n	14028 <tls_setopt_hostname+0x16>
   14050:	4622      	mov	r2, r4
   14052:	4631      	mov	r1, r6
   14054:	f000 fa8c 	bl	14570 <memcpy>
   14058:	2200      	movs	r2, #0
   1405a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1405c:	551a      	strb	r2, [r3, r4]
   1405e:	e7f5      	b.n	1404c <tls_setopt_hostname+0x3a>

00014060 <nrf_poll_one>:
   14060:	b538      	push	{r3, r4, r5, lr}
   14062:	4604      	mov	r4, r0
   14064:	6800      	ldr	r0, [r0, #0]
   14066:	f7f9 ff59 	bl	df1c <sock_find>
   1406a:	4605      	mov	r5, r0
   1406c:	b928      	cbnz	r0, 1407a <nrf_poll_one+0x1a>
   1406e:	2001      	movs	r0, #1
   14070:	88e3      	ldrh	r3, [r4, #6]
   14072:	f043 0320 	orr.w	r3, r3, #32
   14076:	80e3      	strh	r3, [r4, #6]
   14078:	bd38      	pop	{r3, r4, r5, pc}
   1407a:	f7ff fb85 	bl	13788 <sock_is_local_closed>
   1407e:	2800      	cmp	r0, #0
   14080:	d1f5      	bne.n	1406e <nrf_poll_one+0xe>
   14082:	4628      	mov	r0, r5
   14084:	f7ff fb92 	bl	137ac <sock_has_error>
   14088:	b1f8      	cbz	r0, 140ca <nrf_poll_one+0x6a>
   1408a:	88e3      	ldrh	r3, [r4, #6]
   1408c:	f043 0308 	orr.w	r3, r3, #8
   14090:	80e3      	strh	r3, [r4, #6]
   14092:	88a3      	ldrh	r3, [r4, #4]
   14094:	07da      	lsls	r2, r3, #31
   14096:	d507      	bpl.n	140a8 <nrf_poll_one+0x48>
   14098:	4628      	mov	r0, r5
   1409a:	f7ff fb9d 	bl	137d8 <sock_can_read>
   1409e:	b1e8      	cbz	r0, 140dc <nrf_poll_one+0x7c>
   140a0:	88e3      	ldrh	r3, [r4, #6]
   140a2:	f043 0301 	orr.w	r3, r3, #1
   140a6:	80e3      	strh	r3, [r4, #6]
   140a8:	88a3      	ldrh	r3, [r4, #4]
   140aa:	075b      	lsls	r3, r3, #29
   140ac:	d507      	bpl.n	140be <nrf_poll_one+0x5e>
   140ae:	4628      	mov	r0, r5
   140b0:	f7ff fb9c 	bl	137ec <sock_can_send>
   140b4:	b118      	cbz	r0, 140be <nrf_poll_one+0x5e>
   140b6:	88e3      	ldrh	r3, [r4, #6]
   140b8:	f043 0304 	orr.w	r3, r3, #4
   140bc:	80e3      	strh	r3, [r4, #6]
   140be:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
   140c2:	3800      	subs	r0, #0
   140c4:	bf18      	it	ne
   140c6:	2001      	movne	r0, #1
   140c8:	e7d6      	b.n	14078 <nrf_poll_one+0x18>
   140ca:	4628      	mov	r0, r5
   140cc:	f7ff fb60 	bl	13790 <sock_is_eof>
   140d0:	2800      	cmp	r0, #0
   140d2:	d0de      	beq.n	14092 <nrf_poll_one+0x32>
   140d4:	88e3      	ldrh	r3, [r4, #6]
   140d6:	f043 0310 	orr.w	r3, r3, #16
   140da:	e7d9      	b.n	14090 <nrf_poll_one+0x30>
   140dc:	4628      	mov	r0, r5
   140de:	f7ff fb80 	bl	137e2 <sock_can_accept>
   140e2:	2800      	cmp	r0, #0
   140e4:	d1dc      	bne.n	140a0 <nrf_poll_one+0x40>
   140e6:	4628      	mov	r0, r5
   140e8:	f7ff fb52 	bl	13790 <sock_is_eof>
   140ec:	2800      	cmp	r0, #0
   140ee:	d1d7      	bne.n	140a0 <nrf_poll_one+0x40>
   140f0:	e7da      	b.n	140a8 <nrf_poll_one+0x48>

000140f2 <nrf_fcntl>:
   140f2:	b538      	push	{r3, r4, r5, lr}
   140f4:	460d      	mov	r5, r1
   140f6:	4614      	mov	r4, r2
   140f8:	f7f9 ff10 	bl	df1c <sock_find>
   140fc:	b928      	cbnz	r0, 1410a <nrf_fcntl+0x18>
   140fe:	2009      	movs	r0, #9
   14100:	f7f7 fc9a 	bl	ba38 <nrf_modem_os_errno_set>
   14104:	f04f 30ff 	mov.w	r0, #4294967295
   14108:	e006      	b.n	14118 <nrf_fcntl+0x26>
   1410a:	2d03      	cmp	r5, #3
   1410c:	d003      	beq.n	14116 <nrf_fcntl+0x24>
   1410e:	2d04      	cmp	r5, #4
   14110:	d003      	beq.n	1411a <nrf_fcntl+0x28>
   14112:	2016      	movs	r0, #22
   14114:	e7f4      	b.n	14100 <nrf_fcntl+0xe>
   14116:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   14118:	bd38      	pop	{r3, r4, r5, pc}
   1411a:	2c01      	cmp	r4, #1
   1411c:	d8f9      	bhi.n	14112 <nrf_fcntl+0x20>
   1411e:	63c4      	str	r4, [r0, #60]	; 0x3c
   14120:	2000      	movs	r0, #0
   14122:	e7f9      	b.n	14118 <nrf_fcntl+0x26>

00014124 <rpc_af_to_nrf_af>:
   14124:	1f43      	subs	r3, r0, #5
   14126:	2b00      	cmp	r3, #0
   14128:	d803      	bhi.n	14132 <rpc_af_to_nrf_af+0xe>
   1412a:	e8df f003 	tbb	[pc, r3]
   1412e:	01          	.byte	0x01
   1412f:	00          	.byte	0x00
   14130:	2003      	movs	r0, #3
   14132:	4770      	bx	lr

00014134 <nrf_type_to_rpc_type>:
   14134:	4770      	bx	lr

00014136 <nrf_proto_to_rpc_proto>:
   14136:	2829      	cmp	r0, #41	; 0x29
   14138:	d015      	beq.n	14166 <nrf_proto_to_rpc_proto+0x30>
   1413a:	dc05      	bgt.n	14148 <nrf_proto_to_rpc_proto+0x12>
   1413c:	2806      	cmp	r0, #6
   1413e:	d014      	beq.n	1416a <nrf_proto_to_rpc_proto+0x34>
   14140:	2811      	cmp	r0, #17
   14142:	d014      	beq.n	1416e <nrf_proto_to_rpc_proto+0x38>
   14144:	b148      	cbz	r0, 1415a <nrf_proto_to_rpc_proto+0x24>
   14146:	4770      	bx	lr
   14148:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1414c:	d00d      	beq.n	1416a <nrf_proto_to_rpc_proto+0x34>
   1414e:	f240 1311 	movw	r3, #273	; 0x111
   14152:	4298      	cmp	r0, r3
   14154:	d00b      	beq.n	1416e <nrf_proto_to_rpc_proto+0x38>
   14156:	28ff      	cmp	r0, #255	; 0xff
   14158:	d10c      	bne.n	14174 <nrf_proto_to_rpc_proto+0x3e>
   1415a:	2901      	cmp	r1, #1
   1415c:	d009      	beq.n	14172 <nrf_proto_to_rpc_proto+0x3c>
   1415e:	2902      	cmp	r1, #2
   14160:	bf08      	it	eq
   14162:	2002      	moveq	r0, #2
   14164:	4770      	bx	lr
   14166:	2006      	movs	r0, #6
   14168:	4770      	bx	lr
   1416a:	2001      	movs	r0, #1
   1416c:	4770      	bx	lr
   1416e:	2002      	movs	r0, #2
   14170:	4770      	bx	lr
   14172:	4608      	mov	r0, r1
   14174:	4770      	bx	lr

00014176 <nrf_sol_to_rpc_sol>:
   14176:	2829      	cmp	r0, #41	; 0x29
   14178:	d011      	beq.n	1419e <nrf_sol_to_rpc_sol+0x28>
   1417a:	dc0a      	bgt.n	14192 <nrf_sol_to_rpc_sol+0x1c>
   1417c:	2801      	cmp	r0, #1
   1417e:	d010      	beq.n	141a2 <nrf_sol_to_rpc_sol+0x2c>
   14180:	2806      	cmp	r0, #6
   14182:	d010      	beq.n	141a6 <nrf_sol_to_rpc_sol+0x30>
   14184:	2800      	cmp	r0, #0
   14186:	bf08      	it	eq
   14188:	2004      	moveq	r0, #4
   1418a:	bf18      	it	ne
   1418c:	f04f 30ff 	movne.w	r0, #4294967295
   14190:	4770      	bx	lr
   14192:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   14196:	d008      	beq.n	141aa <nrf_sol_to_rpc_sol+0x34>
   14198:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1419c:	e7f5      	b.n	1418a <nrf_sol_to_rpc_sol+0x14>
   1419e:	2006      	movs	r0, #6
   141a0:	4770      	bx	lr
   141a2:	2008      	movs	r0, #8
   141a4:	4770      	bx	lr
   141a6:	2001      	movs	r0, #1
   141a8:	4770      	bx	lr
   141aa:	f44f 7080 	mov.w	r0, #256	; 0x100
   141ae:	4770      	bx	lr

000141b0 <rpc_error_to_nrf_gai_errno>:
   141b0:	b508      	push	{r3, lr}
   141b2:	1f03      	subs	r3, r0, #4
   141b4:	2b09      	cmp	r3, #9
   141b6:	d80f      	bhi.n	141d8 <rpc_error_to_nrf_gai_errno+0x28>
   141b8:	e8df f003 	tbb	[pc, r3]
   141bc:	0e051108 	.word	0x0e051108
   141c0:	0e0e0e0e 	.word	0x0e0e0e0e
   141c4:	050e      	.short	0x050e
   141c6:	f06f 0001 	mvn.w	r0, #1
   141ca:	bd08      	pop	{r3, pc}
   141cc:	2073      	movs	r0, #115	; 0x73
   141ce:	f7f7 fc33 	bl	ba38 <nrf_modem_os_errno_set>
   141d2:	f06f 000a 	mvn.w	r0, #10
   141d6:	e7f8      	b.n	141ca <rpc_error_to_nrf_gai_errno+0x1a>
   141d8:	f7fa fe0a 	bl	edf0 <rpc_error_to_nrf_errno>
   141dc:	e7f7      	b.n	141ce <rpc_error_to_nrf_gai_errno+0x1e>
   141de:	f06f 0063 	mvn.w	r0, #99	; 0x63
   141e2:	e7f2      	b.n	141ca <rpc_error_to_nrf_gai_errno+0x1a>

000141e4 <req_forward>:
   141e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   141e6:	2300      	movs	r3, #0
   141e8:	460a      	mov	r2, r1
   141ea:	f04f 31ff 	mov.w	r1, #4294967295
   141ee:	9303      	str	r3, [sp, #12]
   141f0:	68d6      	ldr	r6, [r2, #12]
   141f2:	ad02      	add	r5, sp, #8
   141f4:	9302      	str	r3, [sp, #8]
   141f6:	9101      	str	r1, [sp, #4]
   141f8:	b18e      	cbz	r6, 1421e <req_forward+0x3a>
   141fa:	4635      	mov	r5, r6
   141fc:	b281      	uxth	r1, r0
   141fe:	602b      	str	r3, [r5, #0]
   14200:	2004      	movs	r0, #4
   14202:	f7ff fa04 	bl	1360e <rpc_client_msg_send>
   14206:	682b      	ldr	r3, [r5, #0]
   14208:	b15b      	cbz	r3, 14222 <req_forward+0x3e>
   1420a:	6958      	ldr	r0, [r3, #20]
   1420c:	f7fa fdf0 	bl	edf0 <rpc_error_to_nrf_errno>
   14210:	4604      	mov	r4, r0
   14212:	b106      	cbz	r6, 14216 <req_forward+0x32>
   14214:	b178      	cbz	r0, 14236 <req_forward+0x52>
   14216:	6828      	ldr	r0, [r5, #0]
   14218:	f7ff fa00 	bl	1361c <rpc_client_msg_rx_free>
   1421c:	e00b      	b.n	14236 <req_forward+0x52>
   1421e:	60d5      	str	r5, [r2, #12]
   14220:	e7ec      	b.n	141fc <req_forward+0x18>
   14222:	2002      	movs	r0, #2
   14224:	a901      	add	r1, sp, #4
   14226:	f7f7 fb45 	bl	b8b4 <nrf_modem_os_timedwait>
   1422a:	2800      	cmp	r0, #0
   1422c:	d0eb      	beq.n	14206 <req_forward+0x22>
   1422e:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
   14232:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
   14236:	4620      	mov	r0, r4
   14238:	b004      	add	sp, #16
   1423a:	bd70      	pop	{r4, r5, r6, pc}

0001423c <req_cookie_set>:
   1423c:	60c1      	str	r1, [r0, #12]
   1423e:	4770      	bx	lr

00014240 <res_cookie_get>:
   14240:	68c0      	ldr	r0, [r0, #12]
   14242:	4770      	bx	lr

00014244 <res_forward>:
   14244:	68c3      	ldr	r3, [r0, #12]
   14246:	6018      	str	r0, [r3, #0]
   14248:	2001      	movs	r0, #1
   1424a:	4770      	bx	lr

0001424c <rpc_dfu_event_handler>:
   1424c:	b510      	push	{r4, lr}
   1424e:	4604      	mov	r4, r0
   14250:	6800      	ldr	r0, [r0, #0]
   14252:	b108      	cbz	r0, 14258 <rpc_dfu_event_handler+0xc>
   14254:	f7ff f9e5 	bl	13622 <rpc_client_msg_data_rx_free>
   14258:	68e0      	ldr	r0, [r4, #12]
   1425a:	b108      	cbz	r0, 14260 <rpc_dfu_event_handler+0x14>
   1425c:	6004      	str	r4, [r0, #0]
   1425e:	2001      	movs	r0, #1
   14260:	bd10      	pop	{r4, pc}

00014262 <rpc_at_deinit>:
   14262:	2000      	movs	r0, #0
   14264:	4770      	bx	lr

00014266 <rpc_delta_dfu_deinit>:
   14266:	2000      	movs	r0, #0
   14268:	4770      	bx	lr

0001426a <rpc_delta_dfu_init>:
   1426a:	2000      	movs	r0, #0
   1426c:	4770      	bx	lr

0001426e <nrf_modem_is_initialized>:
   1426e:	f7fa bf21 	b.w	f0b4 <nrf_modem_state_is_initialized>

00014272 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   14272:	4770      	bx	lr

00014274 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   14274:	b140      	cbz	r0, 14288 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   14276:	68c3      	ldr	r3, [r0, #12]
   14278:	7858      	ldrb	r0, [r3, #1]
   1427a:	f010 0001 	ands.w	r0, r0, #1
   1427e:	bf1e      	ittt	ne
   14280:	7818      	ldrbne	r0, [r3, #0]
   14282:	fab0 f080 	clzne	r0, r0
   14286:	0940      	lsrne	r0, r0, #5
}
   14288:	4770      	bx	lr

0001428a <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   1428a:	f000 b97e 	b.w	1458a <memset>

0001428e <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1428e:	f000 b96f 	b.w	14570 <memcpy>

00014292 <k_heap_init>:
{
   14292:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   14294:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   14298:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1429c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1429e:	f7f4 ba85 	b.w	87ac <sys_heap_init>

000142a2 <k_heap_alloc>:
{
   142a2:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   142a4:	e9cd 2300 	strd	r2, r3, [sp]
   142a8:	460a      	mov	r2, r1
   142aa:	2104      	movs	r1, #4
   142ac:	f7fb f8d8 	bl	f460 <k_heap_aligned_alloc>
}
   142b0:	b003      	add	sp, #12
   142b2:	f85d fb04 	ldr.w	pc, [sp], #4

000142b6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   142b6:	f3ef 8005 	mrs	r0, IPSR
}
   142ba:	3800      	subs	r0, #0
   142bc:	bf18      	it	ne
   142be:	2001      	movne	r0, #1
   142c0:	4770      	bx	lr

000142c2 <z_impl_k_thread_name_set>:
}
   142c2:	f06f 0057 	mvn.w	r0, #87	; 0x57
   142c6:	4770      	bx	lr

000142c8 <z_impl_k_thread_start>:
	z_sched_start(thread);
   142c8:	f7fc ba1a 	b.w	10700 <z_sched_start>

000142cc <z_pm_save_idle_exit>:
{
   142cc:	b508      	push	{r3, lr}
	pm_system_resume();
   142ce:	f7f5 fa51 	bl	9774 <pm_system_resume>
}
   142d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   142d6:	f7fe bedb 	b.w	13090 <sys_clock_idle_exit>

000142da <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   142da:	f990 300e 	ldrsb.w	r3, [r0, #14]
   142de:	428b      	cmp	r3, r1
   142e0:	d001      	beq.n	142e6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   142e2:	f7fc bcfd 	b.w	10ce0 <z_set_prio>
}
   142e6:	2000      	movs	r0, #0
   142e8:	4770      	bx	lr

000142ea <z_impl_k_mutex_init>:
{
   142ea:	4603      	mov	r3, r0
	mutex->owner = NULL;
   142ec:	2000      	movs	r0, #0
   142ee:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   142f2:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   142f6:	4770      	bx	lr

000142f8 <z_queue_node_peek>:
{
   142f8:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   142fa:	4604      	mov	r4, r0
   142fc:	b130      	cbz	r0, 1430c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   142fe:	6802      	ldr	r2, [r0, #0]
   14300:	0793      	lsls	r3, r2, #30
   14302:	d003      	beq.n	1430c <z_queue_node_peek+0x14>
		ret = anode->data;
   14304:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   14306:	b109      	cbz	r1, 1430c <z_queue_node_peek+0x14>
			k_free(anode);
   14308:	f000 f908 	bl	1451c <k_free>
}
   1430c:	4620      	mov	r0, r4
   1430e:	bd10      	pop	{r4, pc}

00014310 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   14310:	2301      	movs	r3, #1
{
   14312:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   14314:	9300      	str	r3, [sp, #0]
   14316:	2300      	movs	r3, #0
{
   14318:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1431a:	4619      	mov	r1, r3
   1431c:	f7fb fc64 	bl	fbe8 <queue_insert>
}
   14320:	b003      	add	sp, #12
   14322:	f85d fb04 	ldr.w	pc, [sp], #4

00014326 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   14326:	b15a      	cbz	r2, 14340 <z_impl_k_sem_init+0x1a>
   14328:	428a      	cmp	r2, r1
   1432a:	d309      	bcc.n	14340 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1432c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   14330:	e9c0 1202 	strd	r1, r2, [r0, #8]
   14334:	e9c0 0000 	strd	r0, r0, [r0]
   14338:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1433c:	2000      	movs	r0, #0
   1433e:	4770      	bx	lr
		return -EINVAL;
   14340:	f06f 0015 	mvn.w	r0, #21
}
   14344:	4770      	bx	lr

00014346 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   14346:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   14348:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1434a:	408b      	lsls	r3, r1
   1434c:	ea22 0303 	bic.w	r3, r2, r3
   14350:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   14352:	fa22 f001 	lsr.w	r0, r2, r1
}
   14356:	f000 0001 	and.w	r0, r0, #1
   1435a:	4770      	bx	lr

0001435c <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1435c:	b120      	cbz	r0, 14368 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1435e:	2200      	movs	r2, #0
   14360:	3090      	adds	r0, #144	; 0x90
   14362:	4611      	mov	r1, r2
   14364:	f7fd b90e 	b.w	11584 <z_sched_wake>
}
   14368:	4770      	bx	lr

0001436a <k_work_submit_to_queue>:
{
   1436a:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   1436c:	f7fb ff84 	bl	10278 <z_work_submit_to_queue>
	if (ret > 0) {
   14370:	1e04      	subs	r4, r0, #0
   14372:	dd09      	ble.n	14388 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   14374:	f04f 0320 	mov.w	r3, #32
   14378:	f3ef 8011 	mrs	r0, BASEPRI
   1437c:	f383 8812 	msr	BASEPRI_MAX, r3
   14380:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   14384:	f000 f802 	bl	1438c <z_reschedule_irqlock>
}
   14388:	4620      	mov	r0, r4
   1438a:	bd10      	pop	{r4, pc}

0001438c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1438c:	4603      	mov	r3, r0
   1438e:	b920      	cbnz	r0, 1439a <z_reschedule_irqlock+0xe>
   14390:	f3ef 8205 	mrs	r2, IPSR
   14394:	b90a      	cbnz	r2, 1439a <z_reschedule_irqlock+0xe>
   14396:	f7f5 bc23 	b.w	9be0 <arch_swap>
	__asm__ volatile(
   1439a:	f383 8811 	msr	BASEPRI, r3
   1439e:	f3bf 8f6f 	isb	sy
}
   143a2:	4770      	bx	lr

000143a4 <z_reschedule_unlocked>:
	__asm__ volatile(
   143a4:	f04f 0320 	mov.w	r3, #32
   143a8:	f3ef 8011 	mrs	r0, BASEPRI
   143ac:	f383 8812 	msr	BASEPRI_MAX, r3
   143b0:	f3bf 8f6f 	isb	sy
   143b4:	f7ff bfea 	b.w	1438c <z_reschedule_irqlock>

000143b8 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   143b8:	2101      	movs	r1, #1
   143ba:	3818      	subs	r0, #24
   143bc:	f7fc bdf6 	b.w	10fac <z_sched_wake_thread>

000143c0 <z_unpend_all>:
{
   143c0:	b538      	push	{r3, r4, r5, lr}
   143c2:	4605      	mov	r5, r0
	int need_sched = 0;
   143c4:	2000      	movs	r0, #0
	return list->head == list;
   143c6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   143c8:	42a5      	cmp	r5, r4
   143ca:	d000      	beq.n	143ce <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   143cc:	b904      	cbnz	r4, 143d0 <z_unpend_all+0x10>
}
   143ce:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   143d0:	4620      	mov	r0, r4
   143d2:	f7fc fd9f 	bl	10f14 <z_unpend_thread>
		z_ready_thread(thread);
   143d6:	4620      	mov	r0, r4
   143d8:	f7fc f90a 	bl	105f0 <z_ready_thread>
		need_sched = 1;
   143dc:	2001      	movs	r0, #1
   143de:	e7f2      	b.n	143c6 <z_unpend_all+0x6>

000143e0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   143e0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   143e2:	f7fd fb9f 	bl	11b24 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   143e6:	bd08      	pop	{r3, pc}

000143e8 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   143e8:	f7fd bb9c 	b.w	11b24 <sys_clock_tick_get>

000143ec <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   143ec:	b108      	cbz	r0, 143f2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   143ee:	f7f5 b955 	b.w	969c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   143f2:	4770      	bx	lr

000143f4 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   143f4:	f1b1 3fff 	cmp.w	r1, #4294967295
   143f8:	bf08      	it	eq
   143fa:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   143fe:	b538      	push	{r3, r4, r5, lr}
   14400:	460c      	mov	r4, r1
   14402:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14404:	d014      	beq.n	14430 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14406:	4308      	orrs	r0, r1
   14408:	d103      	bne.n	14412 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1440a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1440e:	f7fd bb89 	b.w	11b24 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   14412:	f06f 0001 	mvn.w	r0, #1
   14416:	f04f 33ff 	mov.w	r3, #4294967295
   1441a:	1b40      	subs	r0, r0, r5
   1441c:	eb63 0101 	sbc.w	r1, r3, r1
   14420:	2900      	cmp	r1, #0
   14422:	da04      	bge.n	1442e <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   14424:	f7fd fb7e 	bl	11b24 <sys_clock_tick_get>
   14428:	1940      	adds	r0, r0, r5
   1442a:	eb41 0104 	adc.w	r1, r1, r4
}
   1442e:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   14430:	f04f 30ff 	mov.w	r0, #4294967295
   14434:	4601      	mov	r1, r0
   14436:	e7fa      	b.n	1442e <sys_clock_timeout_end_calc+0x3a>

00014438 <signal_poll_event>:
{
   14438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1443c:	6884      	ldr	r4, [r0, #8]
{
   1443e:	4605      	mov	r5, r0
   14440:	460e      	mov	r6, r1
	if (poller != NULL) {
   14442:	b144      	cbz	r4, 14456 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   14444:	7863      	ldrb	r3, [r4, #1]
   14446:	2b01      	cmp	r3, #1
   14448:	d12e      	bne.n	144a8 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   1444a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1444e:	f013 0302 	ands.w	r3, r3, #2
   14452:	d10a      	bne.n	1446a <signal_poll_event+0x32>
		poller->is_polling = false;
   14454:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   14456:	2000      	movs	r0, #0
	event->state |= state;
   14458:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   1445a:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1445c:	f3c3 3286 	ubfx	r2, r3, #14, #7
   14460:	4316      	orrs	r6, r2
   14462:	f366 3394 	bfi	r3, r6, #14, #7
   14466:	60eb      	str	r3, [r5, #12]
	return retcode;
   14468:	e03e      	b.n	144e8 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   1446a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1446e:	f1b3 3fff 	cmp.w	r3, #4294967295
   14472:	bf08      	it	eq
   14474:	f112 0f02 	cmneq.w	r2, #2
   14478:	d032      	beq.n	144e0 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1447a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1447e:	4640      	mov	r0, r8
   14480:	f7fc fd48 	bl	10f14 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   14484:	2e08      	cmp	r6, #8
   14486:	bf0c      	ite	eq
   14488:	f06f 0303 	mvneq.w	r3, #3
   1448c:	2300      	movne	r3, #0
   1448e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   14490:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   14494:	06db      	lsls	r3, r3, #27
   14496:	d109      	bne.n	144ac <signal_poll_event+0x74>
   14498:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1449c:	b937      	cbnz	r7, 144ac <signal_poll_event+0x74>
	z_ready_thread(thread);
   1449e:	4640      	mov	r0, r8
   144a0:	f7fc f8a6 	bl	105f0 <z_ready_thread>
		poller->is_polling = false;
   144a4:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   144a6:	e7d6      	b.n	14456 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   144a8:	2b02      	cmp	r3, #2
   144aa:	d001      	beq.n	144b0 <signal_poll_event+0x78>
		poller->is_polling = false;
   144ac:	2300      	movs	r3, #0
   144ae:	e7d1      	b.n	14454 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   144b0:	7823      	ldrb	r3, [r4, #0]
   144b2:	2b00      	cmp	r3, #0
   144b4:	d0cf      	beq.n	14456 <signal_poll_event+0x1e>
   144b6:	f854 7c04 	ldr.w	r7, [r4, #-4]
   144ba:	2f00      	cmp	r7, #0
   144bc:	d0f2      	beq.n	144a4 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   144be:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   144c2:	f1a4 0914 	sub.w	r9, r4, #20
   144c6:	f104 0014 	add.w	r0, r4, #20
   144ca:	f7fd f9eb 	bl	118a4 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   144ce:	4649      	mov	r1, r9
   144d0:	4638      	mov	r0, r7
		twork->poll_result = 0;
   144d2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   144d6:	f7fb fecf 	bl	10278 <z_work_submit_to_queue>
		poller->is_polling = false;
   144da:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   144de:	e7ba      	b.n	14456 <signal_poll_event+0x1e>
		poller->is_polling = false;
   144e0:	2300      	movs	r3, #0
		return -EAGAIN;
   144e2:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   144e6:	7023      	strb	r3, [r4, #0]
}
   144e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000144ec <z_handle_obj_poll_events>:
{
   144ec:	4603      	mov	r3, r0
	return list->head == list;
   144ee:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   144f0:	4283      	cmp	r3, r0
   144f2:	d008      	beq.n	14506 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   144f4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   144f8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   144fa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   144fc:	2300      	movs	r3, #0
	node->prev = NULL;
   144fe:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   14502:	f7ff bf99 	b.w	14438 <signal_poll_event>
}
   14506:	4770      	bx	lr

00014508 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   14508:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   1450a:	e9c0 0000 	strd	r0, r0, [r0]
   1450e:	6083      	str	r3, [r0, #8]
}
   14510:	4770      	bx	lr

00014512 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   14512:	6883      	ldr	r3, [r0, #8]
   14514:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   14516:	68c3      	ldr	r3, [r0, #12]
   14518:	6013      	str	r3, [r2, #0]
}
   1451a:	4770      	bx	lr

0001451c <k_free>:
	if (ptr != NULL) {
   1451c:	b120      	cbz	r0, 14528 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1451e:	1f01      	subs	r1, r0, #4
   14520:	f850 0c04 	ldr.w	r0, [r0, #-4]
   14524:	f7fb b83c 	b.w	f5a0 <k_heap_free>
}
   14528:	4770      	bx	lr

0001452a <k_malloc>:
{
   1452a:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   1452c:	2004      	movs	r0, #4
   1452e:	f7fd bc17 	b.w	11d60 <k_aligned_alloc>

00014532 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   14532:	4770      	bx	lr

00014534 <memchr>:
   14534:	b2c9      	uxtb	r1, r1
   14536:	4603      	mov	r3, r0
   14538:	4402      	add	r2, r0
   1453a:	b510      	push	{r4, lr}
   1453c:	4293      	cmp	r3, r2
   1453e:	4618      	mov	r0, r3
   14540:	d101      	bne.n	14546 <memchr+0x12>
   14542:	2000      	movs	r0, #0
   14544:	e003      	b.n	1454e <memchr+0x1a>
   14546:	7804      	ldrb	r4, [r0, #0]
   14548:	3301      	adds	r3, #1
   1454a:	428c      	cmp	r4, r1
   1454c:	d1f6      	bne.n	1453c <memchr+0x8>
   1454e:	bd10      	pop	{r4, pc}

00014550 <memcmp>:
   14550:	3901      	subs	r1, #1
   14552:	4402      	add	r2, r0
   14554:	b510      	push	{r4, lr}
   14556:	4290      	cmp	r0, r2
   14558:	d101      	bne.n	1455e <memcmp+0xe>
   1455a:	2000      	movs	r0, #0
   1455c:	e005      	b.n	1456a <memcmp+0x1a>
   1455e:	7803      	ldrb	r3, [r0, #0]
   14560:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   14564:	42a3      	cmp	r3, r4
   14566:	d001      	beq.n	1456c <memcmp+0x1c>
   14568:	1b18      	subs	r0, r3, r4
   1456a:	bd10      	pop	{r4, pc}
   1456c:	3001      	adds	r0, #1
   1456e:	e7f2      	b.n	14556 <memcmp+0x6>

00014570 <memcpy>:
   14570:	440a      	add	r2, r1
   14572:	1e43      	subs	r3, r0, #1
   14574:	4291      	cmp	r1, r2
   14576:	d100      	bne.n	1457a <memcpy+0xa>
   14578:	4770      	bx	lr
   1457a:	b510      	push	{r4, lr}
   1457c:	f811 4b01 	ldrb.w	r4, [r1], #1
   14580:	4291      	cmp	r1, r2
   14582:	f803 4f01 	strb.w	r4, [r3, #1]!
   14586:	d1f9      	bne.n	1457c <memcpy+0xc>
   14588:	bd10      	pop	{r4, pc}

0001458a <memset>:
   1458a:	4402      	add	r2, r0
   1458c:	4603      	mov	r3, r0
   1458e:	4293      	cmp	r3, r2
   14590:	d100      	bne.n	14594 <memset+0xa>
   14592:	4770      	bx	lr
   14594:	f803 1b01 	strb.w	r1, [r3], #1
   14598:	e7f9      	b.n	1458e <memset+0x4>

0001459a <strchr>:
   1459a:	b2c9      	uxtb	r1, r1
   1459c:	4603      	mov	r3, r0
   1459e:	4618      	mov	r0, r3
   145a0:	f813 2b01 	ldrb.w	r2, [r3], #1
   145a4:	b112      	cbz	r2, 145ac <strchr+0x12>
   145a6:	428a      	cmp	r2, r1
   145a8:	d1f9      	bne.n	1459e <strchr+0x4>
   145aa:	4770      	bx	lr
   145ac:	2900      	cmp	r1, #0
   145ae:	bf18      	it	ne
   145b0:	2000      	movne	r0, #0
   145b2:	4770      	bx	lr

000145b4 <strcpy>:
   145b4:	4603      	mov	r3, r0
   145b6:	f811 2b01 	ldrb.w	r2, [r1], #1
   145ba:	f803 2b01 	strb.w	r2, [r3], #1
   145be:	2a00      	cmp	r2, #0
   145c0:	d1f9      	bne.n	145b6 <strcpy+0x2>
   145c2:	4770      	bx	lr

000145c4 <strncpy>:
   145c4:	3901      	subs	r1, #1
   145c6:	4603      	mov	r3, r0
   145c8:	b510      	push	{r4, lr}
   145ca:	b132      	cbz	r2, 145da <strncpy+0x16>
   145cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   145d0:	3a01      	subs	r2, #1
   145d2:	f803 4b01 	strb.w	r4, [r3], #1
   145d6:	2c00      	cmp	r4, #0
   145d8:	d1f7      	bne.n	145ca <strncpy+0x6>
   145da:	441a      	add	r2, r3
   145dc:	2100      	movs	r1, #0
   145de:	4293      	cmp	r3, r2
   145e0:	d100      	bne.n	145e4 <strncpy+0x20>
   145e2:	bd10      	pop	{r4, pc}
   145e4:	f803 1b01 	strb.w	r1, [r3], #1
   145e8:	e7f9      	b.n	145de <strncpy+0x1a>

000145ea <strnlen>:
   145ea:	4602      	mov	r2, r0
   145ec:	4401      	add	r1, r0
   145ee:	b510      	push	{r4, lr}
   145f0:	428a      	cmp	r2, r1
   145f2:	4613      	mov	r3, r2
   145f4:	d003      	beq.n	145fe <strnlen+0x14>
   145f6:	781c      	ldrb	r4, [r3, #0]
   145f8:	3201      	adds	r2, #1
   145fa:	2c00      	cmp	r4, #0
   145fc:	d1f8      	bne.n	145f0 <strnlen+0x6>
   145fe:	1a18      	subs	r0, r3, r0
   14600:	bd10      	pop	{r4, pc}

00014602 <strstr>:
   14602:	780a      	ldrb	r2, [r1, #0]
   14604:	b570      	push	{r4, r5, r6, lr}
   14606:	b96a      	cbnz	r2, 14624 <strstr+0x22>
   14608:	bd70      	pop	{r4, r5, r6, pc}
   1460a:	429a      	cmp	r2, r3
   1460c:	d109      	bne.n	14622 <strstr+0x20>
   1460e:	460c      	mov	r4, r1
   14610:	4605      	mov	r5, r0
   14612:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   14616:	2b00      	cmp	r3, #0
   14618:	d0f6      	beq.n	14608 <strstr+0x6>
   1461a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1461e:	429e      	cmp	r6, r3
   14620:	d0f7      	beq.n	14612 <strstr+0x10>
   14622:	3001      	adds	r0, #1
   14624:	7803      	ldrb	r3, [r0, #0]
   14626:	2b00      	cmp	r3, #0
   14628:	d1ef      	bne.n	1460a <strstr+0x8>
   1462a:	4618      	mov	r0, r3
   1462c:	e7ec      	b.n	14608 <strstr+0x6>

0001462e <_vsniprintf_r>:
   1462e:	b530      	push	{r4, r5, lr}
   14630:	4614      	mov	r4, r2
   14632:	b09b      	sub	sp, #108	; 0x6c
   14634:	4605      	mov	r5, r0
   14636:	461a      	mov	r2, r3
   14638:	2c00      	cmp	r4, #0
   1463a:	da05      	bge.n	14648 <_vsniprintf_r+0x1a>
   1463c:	238b      	movs	r3, #139	; 0x8b
   1463e:	6003      	str	r3, [r0, #0]
   14640:	f04f 30ff 	mov.w	r0, #4294967295
   14644:	b01b      	add	sp, #108	; 0x6c
   14646:	bd30      	pop	{r4, r5, pc}
   14648:	f44f 7302 	mov.w	r3, #520	; 0x208
   1464c:	9100      	str	r1, [sp, #0]
   1464e:	9104      	str	r1, [sp, #16]
   14650:	4669      	mov	r1, sp
   14652:	f8ad 300c 	strh.w	r3, [sp, #12]
   14656:	bf14      	ite	ne
   14658:	f104 33ff 	addne.w	r3, r4, #4294967295
   1465c:	4623      	moveq	r3, r4
   1465e:	9302      	str	r3, [sp, #8]
   14660:	9305      	str	r3, [sp, #20]
   14662:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14666:	f8ad 300e 	strh.w	r3, [sp, #14]
   1466a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1466c:	f7fd fdbe 	bl	121ec <_svfiprintf_r>
   14670:	1c43      	adds	r3, r0, #1
   14672:	bfbc      	itt	lt
   14674:	238b      	movlt	r3, #139	; 0x8b
   14676:	602b      	strlt	r3, [r5, #0]
   14678:	2c00      	cmp	r4, #0
   1467a:	d0e3      	beq.n	14644 <_vsniprintf_r+0x16>
   1467c:	9b00      	ldr	r3, [sp, #0]
   1467e:	2200      	movs	r2, #0
   14680:	701a      	strb	r2, [r3, #0]
   14682:	e7df      	b.n	14644 <_vsniprintf_r+0x16>

00014684 <__ssputs_r>:
   14684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14688:	461f      	mov	r7, r3
   1468a:	688e      	ldr	r6, [r1, #8]
   1468c:	4682      	mov	sl, r0
   1468e:	460c      	mov	r4, r1
   14690:	42be      	cmp	r6, r7
   14692:	4690      	mov	r8, r2
   14694:	680b      	ldr	r3, [r1, #0]
   14696:	d82d      	bhi.n	146f4 <__ssputs_r+0x70>
   14698:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   1469c:	f412 6f90 	tst.w	r2, #1152	; 0x480
   146a0:	d026      	beq.n	146f0 <__ssputs_r+0x6c>
   146a2:	6965      	ldr	r5, [r4, #20]
   146a4:	6909      	ldr	r1, [r1, #16]
   146a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   146aa:	eba3 0901 	sub.w	r9, r3, r1
   146ae:	1c7b      	adds	r3, r7, #1
   146b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   146b4:	444b      	add	r3, r9
   146b6:	106d      	asrs	r5, r5, #1
   146b8:	429d      	cmp	r5, r3
   146ba:	bf38      	it	cc
   146bc:	461d      	movcc	r5, r3
   146be:	0553      	lsls	r3, r2, #21
   146c0:	d527      	bpl.n	14712 <__ssputs_r+0x8e>
   146c2:	4629      	mov	r1, r5
   146c4:	f7fd fc0a 	bl	11edc <_malloc_r>
   146c8:	4606      	mov	r6, r0
   146ca:	b360      	cbz	r0, 14726 <__ssputs_r+0xa2>
   146cc:	464a      	mov	r2, r9
   146ce:	6921      	ldr	r1, [r4, #16]
   146d0:	f7ff ff4e 	bl	14570 <memcpy>
   146d4:	89a3      	ldrh	r3, [r4, #12]
   146d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   146da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   146de:	81a3      	strh	r3, [r4, #12]
   146e0:	6126      	str	r6, [r4, #16]
   146e2:	444e      	add	r6, r9
   146e4:	6165      	str	r5, [r4, #20]
   146e6:	eba5 0509 	sub.w	r5, r5, r9
   146ea:	6026      	str	r6, [r4, #0]
   146ec:	463e      	mov	r6, r7
   146ee:	60a5      	str	r5, [r4, #8]
   146f0:	42be      	cmp	r6, r7
   146f2:	d900      	bls.n	146f6 <__ssputs_r+0x72>
   146f4:	463e      	mov	r6, r7
   146f6:	4632      	mov	r2, r6
   146f8:	4641      	mov	r1, r8
   146fa:	6820      	ldr	r0, [r4, #0]
   146fc:	f000 f88f 	bl	1481e <memmove>
   14700:	68a3      	ldr	r3, [r4, #8]
   14702:	2000      	movs	r0, #0
   14704:	1b9b      	subs	r3, r3, r6
   14706:	60a3      	str	r3, [r4, #8]
   14708:	6823      	ldr	r3, [r4, #0]
   1470a:	4433      	add	r3, r6
   1470c:	6023      	str	r3, [r4, #0]
   1470e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14712:	462a      	mov	r2, r5
   14714:	f000 f89d 	bl	14852 <_realloc_r>
   14718:	4606      	mov	r6, r0
   1471a:	2800      	cmp	r0, #0
   1471c:	d1e0      	bne.n	146e0 <__ssputs_r+0x5c>
   1471e:	6921      	ldr	r1, [r4, #16]
   14720:	4650      	mov	r0, sl
   14722:	f7fd fb91 	bl	11e48 <_free_r>
   14726:	230c      	movs	r3, #12
   14728:	f04f 30ff 	mov.w	r0, #4294967295
   1472c:	f8ca 3000 	str.w	r3, [sl]
   14730:	89a3      	ldrh	r3, [r4, #12]
   14732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14736:	81a3      	strh	r3, [r4, #12]
   14738:	e7e9      	b.n	1470e <__ssputs_r+0x8a>

0001473a <_printf_common>:
   1473a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1473e:	4616      	mov	r6, r2
   14740:	4698      	mov	r8, r3
   14742:	688a      	ldr	r2, [r1, #8]
   14744:	4607      	mov	r7, r0
   14746:	690b      	ldr	r3, [r1, #16]
   14748:	460c      	mov	r4, r1
   1474a:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1474e:	4293      	cmp	r3, r2
   14750:	bfb8      	it	lt
   14752:	4613      	movlt	r3, r2
   14754:	6033      	str	r3, [r6, #0]
   14756:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   1475a:	b10a      	cbz	r2, 14760 <_printf_common+0x26>
   1475c:	3301      	adds	r3, #1
   1475e:	6033      	str	r3, [r6, #0]
   14760:	6823      	ldr	r3, [r4, #0]
   14762:	0699      	lsls	r1, r3, #26
   14764:	bf42      	ittt	mi
   14766:	6833      	ldrmi	r3, [r6, #0]
   14768:	3302      	addmi	r3, #2
   1476a:	6033      	strmi	r3, [r6, #0]
   1476c:	6825      	ldr	r5, [r4, #0]
   1476e:	f015 0506 	ands.w	r5, r5, #6
   14772:	d106      	bne.n	14782 <_printf_common+0x48>
   14774:	f104 0a19 	add.w	sl, r4, #25
   14778:	68e3      	ldr	r3, [r4, #12]
   1477a:	6832      	ldr	r2, [r6, #0]
   1477c:	1a9b      	subs	r3, r3, r2
   1477e:	42ab      	cmp	r3, r5
   14780:	dc2b      	bgt.n	147da <_printf_common+0xa0>
   14782:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   14786:	6822      	ldr	r2, [r4, #0]
   14788:	3b00      	subs	r3, #0
   1478a:	bf18      	it	ne
   1478c:	2301      	movne	r3, #1
   1478e:	0692      	lsls	r2, r2, #26
   14790:	d430      	bmi.n	147f4 <_printf_common+0xba>
   14792:	f104 0243 	add.w	r2, r4, #67	; 0x43
   14796:	4641      	mov	r1, r8
   14798:	4638      	mov	r0, r7
   1479a:	47c8      	blx	r9
   1479c:	3001      	adds	r0, #1
   1479e:	d023      	beq.n	147e8 <_printf_common+0xae>
   147a0:	6823      	ldr	r3, [r4, #0]
   147a2:	341a      	adds	r4, #26
   147a4:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   147a8:	f003 0306 	and.w	r3, r3, #6
   147ac:	2b04      	cmp	r3, #4
   147ae:	bf0a      	itet	eq
   147b0:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   147b4:	2500      	movne	r5, #0
   147b6:	6833      	ldreq	r3, [r6, #0]
   147b8:	f04f 0600 	mov.w	r6, #0
   147bc:	bf08      	it	eq
   147be:	1aed      	subeq	r5, r5, r3
   147c0:	f854 3c12 	ldr.w	r3, [r4, #-18]
   147c4:	bf08      	it	eq
   147c6:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   147ca:	4293      	cmp	r3, r2
   147cc:	bfc4      	itt	gt
   147ce:	1a9b      	subgt	r3, r3, r2
   147d0:	18ed      	addgt	r5, r5, r3
   147d2:	42b5      	cmp	r5, r6
   147d4:	d11a      	bne.n	1480c <_printf_common+0xd2>
   147d6:	2000      	movs	r0, #0
   147d8:	e008      	b.n	147ec <_printf_common+0xb2>
   147da:	2301      	movs	r3, #1
   147dc:	4652      	mov	r2, sl
   147de:	4641      	mov	r1, r8
   147e0:	4638      	mov	r0, r7
   147e2:	47c8      	blx	r9
   147e4:	3001      	adds	r0, #1
   147e6:	d103      	bne.n	147f0 <_printf_common+0xb6>
   147e8:	f04f 30ff 	mov.w	r0, #4294967295
   147ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   147f0:	3501      	adds	r5, #1
   147f2:	e7c1      	b.n	14778 <_printf_common+0x3e>
   147f4:	18e1      	adds	r1, r4, r3
   147f6:	1c5a      	adds	r2, r3, #1
   147f8:	2030      	movs	r0, #48	; 0x30
   147fa:	3302      	adds	r3, #2
   147fc:	4422      	add	r2, r4
   147fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   14802:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   14806:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   1480a:	e7c2      	b.n	14792 <_printf_common+0x58>
   1480c:	2301      	movs	r3, #1
   1480e:	4622      	mov	r2, r4
   14810:	4641      	mov	r1, r8
   14812:	4638      	mov	r0, r7
   14814:	47c8      	blx	r9
   14816:	3001      	adds	r0, #1
   14818:	d0e6      	beq.n	147e8 <_printf_common+0xae>
   1481a:	3601      	adds	r6, #1
   1481c:	e7d9      	b.n	147d2 <_printf_common+0x98>

0001481e <memmove>:
   1481e:	4288      	cmp	r0, r1
   14820:	b510      	push	{r4, lr}
   14822:	eb01 0402 	add.w	r4, r1, r2
   14826:	d902      	bls.n	1482e <memmove+0x10>
   14828:	4284      	cmp	r4, r0
   1482a:	4623      	mov	r3, r4
   1482c:	d807      	bhi.n	1483e <memmove+0x20>
   1482e:	1e43      	subs	r3, r0, #1
   14830:	42a1      	cmp	r1, r4
   14832:	d008      	beq.n	14846 <memmove+0x28>
   14834:	f811 2b01 	ldrb.w	r2, [r1], #1
   14838:	f803 2f01 	strb.w	r2, [r3, #1]!
   1483c:	e7f8      	b.n	14830 <memmove+0x12>
   1483e:	4402      	add	r2, r0
   14840:	4601      	mov	r1, r0
   14842:	428a      	cmp	r2, r1
   14844:	d100      	bne.n	14848 <memmove+0x2a>
   14846:	bd10      	pop	{r4, pc}
   14848:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1484c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   14850:	e7f7      	b.n	14842 <memmove+0x24>

00014852 <_realloc_r>:
   14852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14854:	4607      	mov	r7, r0
   14856:	4615      	mov	r5, r2
   14858:	460c      	mov	r4, r1
   1485a:	b921      	cbnz	r1, 14866 <_realloc_r+0x14>
   1485c:	4611      	mov	r1, r2
   1485e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14862:	f7fd bb3b 	b.w	11edc <_malloc_r>
   14866:	b922      	cbnz	r2, 14872 <_realloc_r+0x20>
   14868:	f7fd faee 	bl	11e48 <_free_r>
   1486c:	2400      	movs	r4, #0
   1486e:	4620      	mov	r0, r4
   14870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14872:	f000 f813 	bl	1489c <_malloc_usable_size_r>
   14876:	42a8      	cmp	r0, r5
   14878:	d2f9      	bcs.n	1486e <_realloc_r+0x1c>
   1487a:	4629      	mov	r1, r5
   1487c:	4638      	mov	r0, r7
   1487e:	f7fd fb2d 	bl	11edc <_malloc_r>
   14882:	4606      	mov	r6, r0
   14884:	2800      	cmp	r0, #0
   14886:	d0f1      	beq.n	1486c <_realloc_r+0x1a>
   14888:	4621      	mov	r1, r4
   1488a:	462a      	mov	r2, r5
   1488c:	f7ff fe70 	bl	14570 <memcpy>
   14890:	4621      	mov	r1, r4
   14892:	4638      	mov	r0, r7
   14894:	4634      	mov	r4, r6
   14896:	f7fd fad7 	bl	11e48 <_free_r>
   1489a:	e7e8      	b.n	1486e <_realloc_r+0x1c>

0001489c <_malloc_usable_size_r>:
   1489c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   148a0:	1f18      	subs	r0, r3, #4
   148a2:	2b00      	cmp	r3, #0
   148a4:	bfbc      	itt	lt
   148a6:	580b      	ldrlt	r3, [r1, r0]
   148a8:	18c0      	addlt	r0, r0, r3
   148aa:	4770      	bx	lr
